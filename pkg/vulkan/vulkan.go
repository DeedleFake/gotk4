// Code generated by girgen. DO NOT EDIT.

package vulkan

import (
	"unsafe"

	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
//
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{

		// Records
		// Skipped Flags.
		// Skipped Bool32.
		// Skipped DeviceSize.
		// Skipped SampleMask.
		// Skipped Instance.
		// Skipped PhysicalDevice.
		// Skipped Device.
		// Skipped Queue.
		// Skipped Semaphore.
		// Skipped CommandBuffer.
		// Skipped Fence.
		// Skipped DeviceMemory.
		// Skipped Buffer.
		// Skipped Image.
		// Skipped Event.
		// Skipped QueryPool.
		// Skipped BufferView.
		// Skipped ImageView.
		// Skipped ShaderModule.
		// Skipped PipelineCache.
		// Skipped PipelineLayout.
		// Skipped RenderPass.
		// Skipped Pipeline.
		// Skipped DescriptorSetLayout.
		// Skipped Sampler.
		// Skipped DescriptorPool.
		// Skipped DescriptorSet.
		// Skipped Framebuffer.
		// Skipped CommandPool.
		// Skipped PipelineCacheHeaderVersion.
		// Skipped Result.
		// Skipped StructureType.
		// Skipped SystemAllocationScope.
		// Skipped InternalAllocationType.
		// Skipped Format.
		// Skipped ImageType.
		// Skipped ImageTiling.
		// Skipped PhysicalDeviceType.
		// Skipped QueryType.
		// Skipped SharingMode.
		// Skipped ImageLayout.
		// Skipped ImageViewType.
		// Skipped ComponentSwizzle.
		// Skipped VertexInputRate.
		// Skipped PrimitiveTopology.
		// Skipped PolygonMode.
		// Skipped FrontFace.
		// Skipped CompareOp.
		// Skipped StencilOp.
		// Skipped LogicOp.
		// Skipped BlendFactor.
		// Skipped BlendOp.
		// Skipped DynamicState.
		// Skipped Filter.
		// Skipped SamplerMipmapMode.
		// Skipped SamplerAddressMode.
		// Skipped BorderColor.
		// Skipped DescriptorType.
		// Skipped AttachmentLoadOp.
		// Skipped AttachmentStoreOp.
		// Skipped PipelineBindPoint.
		// Skipped CommandBufferLevel.
		// Skipped IndexType.
		// Skipped SubpassContents.
		// Skipped ObjectType.
		// Skipped VendorId.
		// Skipped InstanceCreateFlags.
		// Skipped FormatFeatureFlagBits.
		// Skipped FormatFeatureFlags.
		// Skipped ImageUsageFlagBits.
		// Skipped ImageUsageFlags.
		// Skipped ImageCreateFlagBits.
		// Skipped ImageCreateFlags.
		// Skipped SampleCountFlagBits.
		// Skipped SampleCountFlags.
		// Skipped QueueFlagBits.
		// Skipped QueueFlags.
		// Skipped MemoryPropertyFlagBits.
		// Skipped MemoryPropertyFlags.
		// Skipped MemoryHeapFlagBits.
		// Skipped MemoryHeapFlags.
		// Skipped DeviceCreateFlags.
		// Skipped DeviceQueueCreateFlagBits.
		// Skipped DeviceQueueCreateFlags.
		// Skipped PipelineStageFlagBits.
		// Skipped PipelineStageFlags.
		// Skipped MemoryMapFlags.
		// Skipped ImageAspectFlagBits.
		// Skipped ImageAspectFlags.
		// Skipped SparseImageFormatFlagBits.
		// Skipped SparseImageFormatFlags.
		// Skipped SparseMemoryBindFlagBits.
		// Skipped SparseMemoryBindFlags.
		// Skipped FenceCreateFlagBits.
		// Skipped FenceCreateFlags.
		// Skipped SemaphoreCreateFlags.
		// Skipped EventCreateFlags.
		// Skipped QueryPoolCreateFlags.
		// Skipped QueryPipelineStatisticFlagBits.
		// Skipped QueryPipelineStatisticFlags.
		// Skipped QueryResultFlagBits.
		// Skipped QueryResultFlags.
		// Skipped BufferCreateFlagBits.
		// Skipped BufferCreateFlags.
		// Skipped BufferUsageFlagBits.
		// Skipped BufferUsageFlags.
		// Skipped BufferViewCreateFlags.
		// Skipped ImageViewCreateFlagBits.
		// Skipped ImageViewCreateFlags.
		// Skipped ShaderModuleCreateFlags.
		// Skipped PipelineCacheCreateFlags.
		// Skipped PipelineCreateFlagBits.
		// Skipped PipelineCreateFlags.
		// Skipped PipelineShaderStageCreateFlags.
		// Skipped ShaderStageFlagBits.
		// Skipped PipelineVertexInputStateCreateFlags.
		// Skipped PipelineInputAssemblyStateCreateFlags.
		// Skipped PipelineTessellationStateCreateFlags.
		// Skipped PipelineViewportStateCreateFlags.
		// Skipped PipelineRasterizationStateCreateFlags.
		// Skipped CullModeFlagBits.
		// Skipped CullModeFlags.
		// Skipped PipelineMultisampleStateCreateFlags.
		// Skipped PipelineDepthStencilStateCreateFlags.
		// Skipped PipelineColorBlendStateCreateFlags.
		// Skipped ColorComponentFlagBits.
		// Skipped ColorComponentFlags.
		// Skipped PipelineDynamicStateCreateFlags.
		// Skipped PipelineLayoutCreateFlags.
		// Skipped ShaderStageFlags.
		// Skipped SamplerCreateFlagBits.
		// Skipped SamplerCreateFlags.
		// Skipped DescriptorSetLayoutCreateFlagBits.
		// Skipped DescriptorSetLayoutCreateFlags.
		// Skipped DescriptorPoolCreateFlagBits.
		// Skipped DescriptorPoolCreateFlags.
		// Skipped DescriptorPoolResetFlags.
		// Skipped FramebufferCreateFlags.
		// Skipped RenderPassCreateFlags.
		// Skipped AttachmentDescriptionFlagBits.
		// Skipped AttachmentDescriptionFlags.
		// Skipped SubpassDescriptionFlagBits.
		// Skipped SubpassDescriptionFlags.
		// Skipped AccessFlagBits.
		// Skipped AccessFlags.
		// Skipped DependencyFlagBits.
		// Skipped DependencyFlags.
		// Skipped CommandPoolCreateFlagBits.
		// Skipped CommandPoolCreateFlags.
		// Skipped CommandPoolResetFlagBits.
		// Skipped CommandPoolResetFlags.
		// Skipped CommandBufferUsageFlagBits.
		// Skipped CommandBufferUsageFlags.
		// Skipped QueryControlFlagBits.
		// Skipped QueryControlFlags.
		// Skipped CommandBufferResetFlagBits.
		// Skipped CommandBufferResetFlags.
		// Skipped StencilFaceFlagBits.
		// Skipped StencilFaceFlags.
		// Skipped ApplicationInfo.
		// Skipped InstanceCreateInfo.
		// Skipped AllocationCallbacks.
		// Skipped PhysicalDeviceFeatures.
		// Skipped FormatProperties.
		// Skipped Extent3D.
		// Skipped ImageFormatProperties.
		// Skipped PhysicalDeviceLimits.
		// Skipped PhysicalDeviceSparseProperties.
		// Skipped PhysicalDeviceProperties.
		// Skipped QueueFamilyProperties.
		// Skipped MemoryType.
		// Skipped MemoryHeap.
		// Skipped PhysicalDeviceMemoryProperties.
		// Skipped DeviceQueueCreateInfo.
		// Skipped DeviceCreateInfo.
		// Skipped ExtensionProperties.
		// Skipped LayerProperties.
		// Skipped SubmitInfo.
		// Skipped MemoryAllocateInfo.
		// Skipped MappedMemoryRange.
		// Skipped MemoryRequirements.
		// Skipped SparseImageFormatProperties.
		// Skipped SparseImageMemoryRequirements.
		// Skipped SparseMemoryBind.
		// Skipped SparseBufferMemoryBindInfo.
		// Skipped SparseImageOpaqueMemoryBindInfo.
		// Skipped ImageSubresource.
		// Skipped Offset3D.
		// Skipped SparseImageMemoryBind.
		// Skipped SparseImageMemoryBindInfo.
		// Skipped BindSparseInfo.
		// Skipped FenceCreateInfo.
		// Skipped SemaphoreCreateInfo.
		// Skipped EventCreateInfo.
		// Skipped QueryPoolCreateInfo.
		// Skipped BufferCreateInfo.
		// Skipped BufferViewCreateInfo.
		// Skipped ImageCreateInfo.
		// Skipped SubresourceLayout.
		// Skipped ComponentMapping.
		// Skipped ImageSubresourceRange.
		// Skipped ImageViewCreateInfo.
		// Skipped ShaderModuleCreateInfo.
		// Skipped PipelineCacheCreateInfo.
		// Skipped SpecializationMapEntry.
		// Skipped SpecializationInfo.
		// Skipped PipelineShaderStageCreateInfo.
		// Skipped VertexInputBindingDescription.
		// Skipped VertexInputAttributeDescription.
		// Skipped PipelineVertexInputStateCreateInfo.
		// Skipped PipelineInputAssemblyStateCreateInfo.
		// Skipped PipelineTessellationStateCreateInfo.
		// Skipped Viewport.
		// Skipped Offset2D.
		// Skipped Extent2D.
		// Skipped Rect2D.
		// Skipped PipelineViewportStateCreateInfo.
		// Skipped PipelineRasterizationStateCreateInfo.
		// Skipped PipelineMultisampleStateCreateInfo.
		// Skipped StencilOpState.
		// Skipped PipelineDepthStencilStateCreateInfo.
		// Skipped PipelineColorBlendAttachmentState.
		// Skipped PipelineColorBlendStateCreateInfo.
		// Skipped PipelineDynamicStateCreateInfo.
		// Skipped GraphicsPipelineCreateInfo.
		// Skipped ComputePipelineCreateInfo.
		// Skipped PushConstantRange.
		// Skipped PipelineLayoutCreateInfo.
		// Skipped SamplerCreateInfo.
		// Skipped DescriptorSetLayoutBinding.
		// Skipped DescriptorSetLayoutCreateInfo.
		// Skipped DescriptorPoolSize.
		// Skipped DescriptorPoolCreateInfo.
		// Skipped DescriptorSetAllocateInfo.
		// Skipped DescriptorImageInfo.
		// Skipped DescriptorBufferInfo.
		// Skipped WriteDescriptorSet.
		// Skipped CopyDescriptorSet.
		// Skipped FramebufferCreateInfo.
		// Skipped AttachmentDescription.
		// Skipped AttachmentReference.
		// Skipped SubpassDescription.
		// Skipped SubpassDependency.
		// Skipped RenderPassCreateInfo.
		// Skipped CommandPoolCreateInfo.
		// Skipped CommandBufferAllocateInfo.
		// Skipped CommandBufferInheritanceInfo.
		// Skipped CommandBufferBeginInfo.
		// Skipped BufferCopy.
		// Skipped ImageSubresourceLayers.
		// Skipped ImageCopy.
		// Skipped ImageBlit.
		// Skipped BufferImageCopy.
		// Skipped ClearColorValue.
		// Skipped ClearDepthStencilValue.
		// Skipped ClearValue.
		// Skipped ClearAttachment.
		// Skipped ClearRect.
		// Skipped ImageResolve.
		// Skipped MemoryBarrier.
		// Skipped BufferMemoryBarrier.
		// Skipped ImageMemoryBarrier.
		// Skipped RenderPassBeginInfo.
		// Skipped DispatchIndirectCommand.
		// Skipped DrawIndexedIndirectCommand.
		// Skipped DrawIndirectCommand.
		// Skipped BaseOutStructure.
		// Skipped BaseInStructure.
		// Skipped SamplerYcbcrConversion.
		// Skipped DescriptorUpdateTemplate.
		// Skipped PointClippingBehavior.
		// Skipped TessellationDomainOrigin.
		// Skipped SamplerYcbcrModelConversion.
		// Skipped SamplerYcbcrRange.
		// Skipped ChromaLocation.
		// Skipped DescriptorUpdateTemplateType.
		// Skipped SubgroupFeatureFlagBits.
		// Skipped SubgroupFeatureFlags.
		// Skipped PeerMemoryFeatureFlagBits.
		// Skipped PeerMemoryFeatureFlags.
		// Skipped MemoryAllocateFlagBits.
		// Skipped MemoryAllocateFlags.
		// Skipped CommandPoolTrimFlags.
		// Skipped DescriptorUpdateTemplateCreateFlags.
		// Skipped ExternalMemoryHandleTypeFlagBits.
		// Skipped ExternalMemoryHandleTypeFlags.
		// Skipped ExternalMemoryFeatureFlagBits.
		// Skipped ExternalMemoryFeatureFlags.
		// Skipped ExternalFenceHandleTypeFlagBits.
		// Skipped ExternalFenceHandleTypeFlags.
		// Skipped ExternalFenceFeatureFlagBits.
		// Skipped ExternalFenceFeatureFlags.
		// Skipped FenceImportFlagBits.
		// Skipped FenceImportFlags.
		// Skipped SemaphoreImportFlagBits.
		// Skipped SemaphoreImportFlags.
		// Skipped ExternalSemaphoreHandleTypeFlagBits.
		// Skipped ExternalSemaphoreHandleTypeFlags.
		// Skipped ExternalSemaphoreFeatureFlagBits.
		// Skipped ExternalSemaphoreFeatureFlags.
		// Skipped PhysicalDeviceSubgroupProperties.
		// Skipped BindBufferMemoryInfo.
		// Skipped BindImageMemoryInfo.
		// Skipped PhysicalDevice16BitStorageFeatures.
		// Skipped MemoryDedicatedRequirements.
		// Skipped MemoryDedicatedAllocateInfo.
		// Skipped MemoryAllocateFlagsInfo.
		// Skipped DeviceGroupRenderPassBeginInfo.
		// Skipped DeviceGroupCommandBufferBeginInfo.
		// Skipped DeviceGroupSubmitInfo.
		// Skipped DeviceGroupBindSparseInfo.
		// Skipped BindBufferMemoryDeviceGroupInfo.
		// Skipped BindImageMemoryDeviceGroupInfo.
		// Skipped PhysicalDeviceGroupProperties.
		// Skipped DeviceGroupDeviceCreateInfo.
		// Skipped BufferMemoryRequirementsInfo2.
		// Skipped ImageMemoryRequirementsInfo2.
		// Skipped ImageSparseMemoryRequirementsInfo2.
		// Skipped MemoryRequirements2.
		// Skipped MemoryRequirements2KHR.
		// Skipped SparseImageMemoryRequirements2.
		// Skipped PhysicalDeviceFeatures2.
		// Skipped PhysicalDeviceProperties2.
		// Skipped FormatProperties2.
		// Skipped ImageFormatProperties2.
		// Skipped PhysicalDeviceImageFormatInfo2.
		// Skipped QueueFamilyProperties2.
		// Skipped PhysicalDeviceMemoryProperties2.
		// Skipped SparseImageFormatProperties2.
		// Skipped PhysicalDeviceSparseImageFormatInfo2.
		// Skipped PhysicalDevicePointClippingProperties.
		// Skipped InputAttachmentAspectReference.
		// Skipped RenderPassInputAttachmentAspectCreateInfo.
		// Skipped ImageViewUsageCreateInfo.
		// Skipped PipelineTessellationDomainOriginStateCreateInfo.
		// Skipped RenderPassMultiviewCreateInfo.
		// Skipped PhysicalDeviceMultiviewFeatures.
		// Skipped PhysicalDeviceMultiviewProperties.
		// Skipped PhysicalDeviceVariablePointersFeatures.
		// Skipped PhysicalDeviceVariablePointerFeatures.
		// Skipped PhysicalDeviceProtectedMemoryFeatures.
		// Skipped PhysicalDeviceProtectedMemoryProperties.
		// Skipped DeviceQueueInfo2.
		// Skipped ProtectedSubmitInfo.
		// Skipped SamplerYcbcrConversionCreateInfo.
		// Skipped SamplerYcbcrConversionInfo.
		// Skipped BindImagePlaneMemoryInfo.
		// Skipped ImagePlaneMemoryRequirementsInfo.
		// Skipped PhysicalDeviceSamplerYcbcrConversionFeatures.
		// Skipped SamplerYcbcrConversionImageFormatProperties.
		// Skipped DescriptorUpdateTemplateEntry.
		// Skipped DescriptorUpdateTemplateCreateInfo.
		// Skipped ExternalMemoryProperties.
		// Skipped PhysicalDeviceExternalImageFormatInfo.
		// Skipped ExternalImageFormatProperties.
		// Skipped PhysicalDeviceExternalBufferInfo.
		// Skipped ExternalBufferProperties.
		// Skipped PhysicalDeviceIDProperties.
		// Skipped ExternalMemoryImageCreateInfo.
		// Skipped ExternalMemoryBufferCreateInfo.
		// Skipped ExportMemoryAllocateInfo.
		// Skipped PhysicalDeviceExternalFenceInfo.
		// Skipped ExternalFenceProperties.
		// Skipped ExportFenceCreateInfo.
		// Skipped ExportSemaphoreCreateInfo.
		// Skipped PhysicalDeviceExternalSemaphoreInfo.
		// Skipped ExternalSemaphoreProperties.
		// Skipped PhysicalDeviceMaintenance3Properties.
		// Skipped DescriptorSetLayoutSupport.
		// Skipped PhysicalDeviceShaderDrawParametersFeatures.
		// Skipped PhysicalDeviceShaderDrawParameterFeatures.
		// Skipped SurfaceKHR.
		// Skipped ColorSpaceKHR.
		// Skipped PresentModeKHR.
		// Skipped SurfaceTransformFlagBitsKHR.
		// Skipped SurfaceTransformFlagsKHR.
		// Skipped CompositeAlphaFlagBitsKHR.
		// Skipped CompositeAlphaFlagsKHR.
		// Skipped SurfaceCapabilitiesKHR.
		// Skipped SurfaceFormatKHR.
		// Skipped SwapchainKHR.
		// Skipped SwapchainCreateFlagBitsKHR.
		// Skipped SwapchainCreateFlagsKHR.
		// Skipped DeviceGroupPresentModeFlagBitsKHR.
		// Skipped DeviceGroupPresentModeFlagsKHR.
		// Skipped SwapchainCreateInfoKHR.
		// Skipped PresentInfoKHR.
		// Skipped ImageSwapchainCreateInfoKHR.
		// Skipped BindImageMemorySwapchainInfoKHR.
		// Skipped AcquireNextImageInfoKHR.
		// Skipped DeviceGroupPresentCapabilitiesKHR.
		// Skipped DeviceGroupPresentInfoKHR.
		// Skipped DeviceGroupSwapchainCreateInfoKHR.
		// Skipped DisplayKHR.
		// Skipped DisplayModeKHR.
		// Skipped DisplayPlaneAlphaFlagBitsKHR.
		// Skipped DisplayPlaneAlphaFlagsKHR.
		// Skipped DisplayModeCreateFlagsKHR.
		// Skipped DisplaySurfaceCreateFlagsKHR.
		// Skipped DisplayPropertiesKHR.
		// Skipped DisplayModeParametersKHR.
		// Skipped DisplayModePropertiesKHR.
		// Skipped DisplayModeCreateInfoKHR.
		// Skipped DisplayPlaneCapabilitiesKHR.
		// Skipped DisplayPlanePropertiesKHR.
		// Skipped DisplaySurfaceCreateInfoKHR.
		// Skipped DisplayPresentInfoKHR.
		// Skipped RenderPassMultiviewCreateInfoKHR.
		// Skipped PhysicalDeviceMultiviewFeaturesKHR.
		// Skipped PhysicalDeviceMultiviewPropertiesKHR.
		// Skipped PhysicalDeviceFeatures2KHR.
		// Skipped PhysicalDeviceProperties2KHR.
		// Skipped FormatProperties2KHR.
		// Skipped ImageFormatProperties2KHR.
		// Skipped PhysicalDeviceImageFormatInfo2KHR.
		// Skipped QueueFamilyProperties2KHR.
		// Skipped PhysicalDeviceMemoryProperties2KHR.
		// Skipped SparseImageFormatProperties2KHR.
		// Skipped PhysicalDeviceSparseImageFormatInfo2KHR.
		// Skipped PeerMemoryFeatureFlagsKHR.
		// Skipped PeerMemoryFeatureFlagBitsKHR.
		// Skipped MemoryAllocateFlagsKHR.
		// Skipped MemoryAllocateFlagBitsKHR.
		// Skipped MemoryAllocateFlagsInfoKHR.
		// Skipped DeviceGroupRenderPassBeginInfoKHR.
		// Skipped DeviceGroupCommandBufferBeginInfoKHR.
		// Skipped DeviceGroupSubmitInfoKHR.
		// Skipped DeviceGroupBindSparseInfoKHR.
		// Skipped BindBufferMemoryDeviceGroupInfoKHR.
		// Skipped BindImageMemoryDeviceGroupInfoKHR.
		// Skipped CommandPoolTrimFlagsKHR.
		// Skipped PhysicalDeviceGroupPropertiesKHR.
		// Skipped DeviceGroupDeviceCreateInfoKHR.
		// Skipped ExternalMemoryHandleTypeFlagsKHR.
		// Skipped ExternalMemoryHandleTypeFlagBitsKHR.
		// Skipped ExternalMemoryFeatureFlagsKHR.
		// Skipped ExternalMemoryFeatureFlagBitsKHR.
		// Skipped ExternalMemoryPropertiesKHR.
		// Skipped PhysicalDeviceExternalImageFormatInfoKHR.
		// Skipped ExternalImageFormatPropertiesKHR.
		// Skipped PhysicalDeviceExternalBufferInfoKHR.
		// Skipped ExternalBufferPropertiesKHR.
		// Skipped PhysicalDeviceIDPropertiesKHR.
		// Skipped ExternalMemoryImageCreateInfoKHR.
		// Skipped ExternalMemoryBufferCreateInfoKHR.
		// Skipped ExportMemoryAllocateInfoKHR.
		// Skipped ImportMemoryFdInfoKHR.
		// Skipped MemoryFdPropertiesKHR.
		// Skipped MemoryGetFdInfoKHR.
		// Skipped ExternalSemaphoreHandleTypeFlagsKHR.
		// Skipped ExternalSemaphoreHandleTypeFlagBitsKHR.
		// Skipped ExternalSemaphoreFeatureFlagsKHR.
		// Skipped ExternalSemaphoreFeatureFlagBitsKHR.
		// Skipped PhysicalDeviceExternalSemaphoreInfoKHR.
		// Skipped ExternalSemaphorePropertiesKHR.
		// Skipped SemaphoreImportFlagsKHR.
		// Skipped SemaphoreImportFlagBitsKHR.
		// Skipped ExportSemaphoreCreateInfoKHR.
		// Skipped ImportSemaphoreFdInfoKHR.
		// Skipped SemaphoreGetFdInfoKHR.
		// Skipped PhysicalDevicePushDescriptorPropertiesKHR.
		// Skipped PhysicalDeviceFloat16Int8FeaturesKHR.
		// Skipped PhysicalDevice16BitStorageFeaturesKHR.
		// Skipped RectLayerKHR.
		// Skipped PresentRegionKHR.
		// Skipped PresentRegionsKHR.
		// Skipped DescriptorUpdateTemplateKHR.
		// Skipped DescriptorUpdateTemplateTypeKHR.
		// Skipped DescriptorUpdateTemplateCreateFlagsKHR.
		// Skipped DescriptorUpdateTemplateEntryKHR.
		// Skipped DescriptorUpdateTemplateCreateInfoKHR.
		// Skipped AttachmentDescription2KHR.
		// Skipped AttachmentReference2KHR.
		// Skipped SubpassDescription2KHR.
		// Skipped SubpassDependency2KHR.
		// Skipped RenderPassCreateInfo2KHR.
		// Skipped SubpassBeginInfoKHR.
		// Skipped SubpassEndInfoKHR.
		// Skipped SharedPresentSurfaceCapabilitiesKHR.
		// Skipped ExternalFenceHandleTypeFlagsKHR.
		// Skipped ExternalFenceHandleTypeFlagBitsKHR.
		// Skipped ExternalFenceFeatureFlagsKHR.
		// Skipped ExternalFenceFeatureFlagBitsKHR.
		// Skipped PhysicalDeviceExternalFenceInfoKHR.
		// Skipped ExternalFencePropertiesKHR.
		// Skipped FenceImportFlagsKHR.
		// Skipped FenceImportFlagBitsKHR.
		// Skipped ExportFenceCreateInfoKHR.
		// Skipped ImportFenceFdInfoKHR.
		// Skipped FenceGetFdInfoKHR.
		// Skipped PointClippingBehaviorKHR.
		// Skipped TessellationDomainOriginKHR.
		// Skipped PhysicalDevicePointClippingPropertiesKHR.
		// Skipped RenderPassInputAttachmentAspectCreateInfoKHR.
		// Skipped InputAttachmentAspectReferenceKHR.
		// Skipped ImageViewUsageCreateInfoKHR.
		// Skipped PipelineTessellationDomainOriginStateCreateInfoKHR.
		// Skipped PhysicalDeviceSurfaceInfo2KHR.
		// Skipped SurfaceCapabilities2KHR.
		// Skipped SurfaceFormat2KHR.
		// Skipped PhysicalDeviceVariablePointerFeaturesKHR.
		// Skipped PhysicalDeviceVariablePointersFeaturesKHR.
		// Skipped DisplayProperties2KHR.
		// Skipped DisplayPlaneProperties2KHR.
		// Skipped DisplayModeProperties2KHR.
		// Skipped DisplayPlaneInfo2KHR.
		// Skipped DisplayPlaneCapabilities2KHR.
		// Skipped MemoryDedicatedRequirementsKHR.
		// Skipped MemoryDedicatedAllocateInfoKHR.
		// Skipped BufferMemoryRequirementsInfo2KHR.
		// Skipped ImageMemoryRequirementsInfo2KHR.
		// Skipped ImageSparseMemoryRequirementsInfo2KHR.
		// Skipped SparseImageMemoryRequirements2KHR.
		// Skipped ImageFormatListCreateInfoKHR.
		// Skipped SamplerYcbcrConversionKHR.
		// Skipped SamplerYcbcrModelConversionKHR.
		// Skipped SamplerYcbcrRangeKHR.
		// Skipped ChromaLocationKHR.
		// Skipped SamplerYcbcrConversionCreateInfoKHR.
		// Skipped SamplerYcbcrConversionInfoKHR.
		// Skipped BindImagePlaneMemoryInfoKHR.
		// Skipped ImagePlaneMemoryRequirementsInfoKHR.
		// Skipped PhysicalDeviceSamplerYcbcrConversionFeaturesKHR.
		// Skipped SamplerYcbcrConversionImageFormatPropertiesKHR.
		// Skipped BindBufferMemoryInfoKHR.
		// Skipped BindImageMemoryInfoKHR.
		// Skipped PhysicalDeviceMaintenance3PropertiesKHR.
		// Skipped DescriptorSetLayoutSupportKHR.
		// Skipped PhysicalDevice8BitStorageFeaturesKHR.
		// Skipped PhysicalDeviceShaderAtomicInt64FeaturesKHR.
		// Skipped DriverIdKHR.
		// Skipped ConformanceVersionKHR.
		// Skipped PhysicalDeviceDriverPropertiesKHR.
		// Skipped PhysicalDeviceFloatControlsPropertiesKHR.
		// Skipped ResolveModeFlagBitsKHR.
		// Skipped ResolveModeFlagsKHR.
		// Skipped SubpassDescriptionDepthStencilResolveKHR.
		// Skipped PhysicalDeviceDepthStencilResolvePropertiesKHR.
		// Skipped PhysicalDeviceVulkanMemoryModelFeaturesKHR.
		// Skipped SurfaceProtectedCapabilitiesKHR.
		// Skipped PhysicalDeviceUniformBufferStandardLayoutFeaturesKHR.
		// Skipped DebugReportCallbackEXT.
		// Skipped DebugReportObjectTypeEXT.
		// Skipped DebugReportFlagBitsEXT.
		// Skipped DebugReportFlagsEXT.
		// Skipped DebugReportCallbackCreateInfoEXT.
		// Skipped RasterizationOrderAMD.
		// Skipped PipelineRasterizationStateRasterizationOrderAMD.
		// Skipped DebugMarkerObjectNameInfoEXT.
		// Skipped DebugMarkerObjectTagInfoEXT.
		// Skipped DebugMarkerMarkerInfoEXT.
		// Skipped DedicatedAllocationImageCreateInfoNV.
		// Skipped DedicatedAllocationBufferCreateInfoNV.
		// Skipped DedicatedAllocationMemoryAllocateInfoNV.
		// Skipped PipelineRasterizationStateStreamCreateFlagsEXT.
		// Skipped PhysicalDeviceTransformFeedbackFeaturesEXT.
		// Skipped PhysicalDeviceTransformFeedbackPropertiesEXT.
		// Skipped PipelineRasterizationStateStreamCreateInfoEXT.
		// Skipped ImageViewHandleInfoNVX.
		// Skipped TextureLODGatherFormatPropertiesAMD.
		// Skipped ShaderInfoTypeAMD.
		// Skipped ShaderResourceUsageAMD.
		// Skipped ShaderStatisticsInfoAMD.
		// Skipped PhysicalDeviceCornerSampledImageFeaturesNV.
		// Skipped ExternalMemoryHandleTypeFlagBitsNV.
		// Skipped ExternalMemoryHandleTypeFlagsNV.
		// Skipped ExternalMemoryFeatureFlagBitsNV.
		// Skipped ExternalMemoryFeatureFlagsNV.
		// Skipped ExternalImageFormatPropertiesNV.
		// Skipped ExternalMemoryImageCreateInfoNV.
		// Skipped ExportMemoryAllocateInfoNV.
		// Skipped ValidationCheckEXT.
		// Skipped ValidationFlagsEXT.
		// Skipped ImageViewASTCDecodeModeEXT.
		// Skipped PhysicalDeviceASTCDecodeFeaturesEXT.
		// Skipped ConditionalRenderingFlagBitsEXT.
		// Skipped ConditionalRenderingFlagsEXT.
		// Skipped ConditionalRenderingBeginInfoEXT.
		// Skipped PhysicalDeviceConditionalRenderingFeaturesEXT.
		// Skipped CommandBufferInheritanceConditionalRenderingInfoEXT.
		// Skipped ObjectTableNVX.
		// Skipped IndirectCommandsLayoutNVX.
		// Skipped IndirectCommandsTokenTypeNVX.
		// Skipped ObjectEntryTypeNVX.
		// Skipped IndirectCommandsLayoutUsageFlagBitsNVX.
		// Skipped IndirectCommandsLayoutUsageFlagsNVX.
		// Skipped ObjectEntryUsageFlagBitsNVX.
		// Skipped ObjectEntryUsageFlagsNVX.
		// Skipped DeviceGeneratedCommandsFeaturesNVX.
		// Skipped DeviceGeneratedCommandsLimitsNVX.
		// Skipped IndirectCommandsTokenNVX.
		// Skipped IndirectCommandsLayoutTokenNVX.
		// Skipped IndirectCommandsLayoutCreateInfoNVX.
		// Skipped CmdProcessCommandsInfoNVX.
		// Skipped CmdReserveSpaceForCommandsInfoNVX.
		// Skipped ObjectTableCreateInfoNVX.
		// Skipped ObjectTableEntryNVX.
		// Skipped ObjectTablePipelineEntryNVX.
		// Skipped ObjectTableDescriptorSetEntryNVX.
		// Skipped ObjectTableVertexBufferEntryNVX.
		// Skipped ObjectTableIndexBufferEntryNVX.
		// Skipped ObjectTablePushConstantEntryNVX.
		// Skipped ViewportWScalingNV.
		// Skipped PipelineViewportWScalingStateCreateInfoNV.
		// Skipped SurfaceCounterFlagBitsEXT.
		// Skipped SurfaceCounterFlagsEXT.
		// Skipped SurfaceCapabilities2EXT.
		// Skipped DisplayPowerStateEXT.
		// Skipped DeviceEventTypeEXT.
		// Skipped DisplayEventTypeEXT.
		// Skipped DisplayPowerInfoEXT.
		// Skipped DeviceEventInfoEXT.
		// Skipped DisplayEventInfoEXT.
		// Skipped SwapchainCounterCreateInfoEXT.
		// Skipped RefreshCycleDurationGOOGLE.
		// Skipped PastPresentationTimingGOOGLE.
		// Skipped PresentTimeGOOGLE.
		// Skipped PresentTimesInfoGOOGLE.
		// Skipped PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX.
		// Skipped ViewportCoordinateSwizzleNV.
		// Skipped PipelineViewportSwizzleStateCreateFlagsNV.
		// Skipped ViewportSwizzleNV.
		// Skipped PipelineViewportSwizzleStateCreateInfoNV.
		// Skipped DiscardRectangleModeEXT.
		// Skipped PipelineDiscardRectangleStateCreateFlagsEXT.
		// Skipped PhysicalDeviceDiscardRectanglePropertiesEXT.
		// Skipped PipelineDiscardRectangleStateCreateInfoEXT.
		// Skipped ConservativeRasterizationModeEXT.
		// Skipped PipelineRasterizationConservativeStateCreateFlagsEXT.
		// Skipped PhysicalDeviceConservativeRasterizationPropertiesEXT.
		// Skipped PipelineRasterizationConservativeStateCreateInfoEXT.
		// Skipped PipelineRasterizationDepthClipStateCreateFlagsEXT.
		// Skipped PhysicalDeviceDepthClipEnableFeaturesEXT.
		// Skipped PipelineRasterizationDepthClipStateCreateInfoEXT.
		// Skipped XYColorEXT.
		// Skipped HdrMetadataEXT.
		// Skipped DebugUtilsMessengerEXT.
		// Skipped DebugUtilsMessengerCallbackDataFlagsEXT.
		// Skipped DebugUtilsMessengerCreateFlagsEXT.
		// Skipped DebugUtilsMessageSeverityFlagBitsEXT.
		// Skipped DebugUtilsMessageSeverityFlagsEXT.
		// Skipped DebugUtilsMessageTypeFlagBitsEXT.
		// Skipped DebugUtilsMessageTypeFlagsEXT.
		// Skipped DebugUtilsObjectNameInfoEXT.
		// Skipped DebugUtilsObjectTagInfoEXT.
		// Skipped DebugUtilsLabelEXT.
		// Skipped DebugUtilsMessengerCallbackDataEXT.
		// Skipped DebugUtilsMessengerCreateInfoEXT.
		// Skipped SamplerReductionModeEXT.
		// Skipped SamplerReductionModeCreateInfoEXT.
		// Skipped PhysicalDeviceSamplerFilterMinmaxPropertiesEXT.
		// Skipped PhysicalDeviceInlineUniformBlockFeaturesEXT.
		// Skipped PhysicalDeviceInlineUniformBlockPropertiesEXT.
		// Skipped WriteDescriptorSetInlineUniformBlockEXT.
		// Skipped DescriptorPoolInlineUniformBlockCreateInfoEXT.
		// Skipped SampleLocationEXT.
		// Skipped SampleLocationsInfoEXT.
		// Skipped AttachmentSampleLocationsEXT.
		// Skipped SubpassSampleLocationsEXT.
		// Skipped RenderPassSampleLocationsBeginInfoEXT.
		// Skipped PipelineSampleLocationsStateCreateInfoEXT.
		// Skipped PhysicalDeviceSampleLocationsPropertiesEXT.
		// Skipped MultisamplePropertiesEXT.
		// Skipped BlendOverlapEXT.
		// Skipped PhysicalDeviceBlendOperationAdvancedFeaturesEXT.
		// Skipped PhysicalDeviceBlendOperationAdvancedPropertiesEXT.
		// Skipped PipelineColorBlendAdvancedStateCreateInfoEXT.
		// Skipped PipelineCoverageToColorStateCreateFlagsNV.
		// Skipped PipelineCoverageToColorStateCreateInfoNV.
		// Skipped CoverageModulationModeNV.
		// Skipped PipelineCoverageModulationStateCreateFlagsNV.
		// Skipped PipelineCoverageModulationStateCreateInfoNV.
		// Skipped DrmFormatModifierPropertiesEXT.
		// Skipped DrmFormatModifierPropertiesListEXT.
		// Skipped PhysicalDeviceImageDrmFormatModifierInfoEXT.
		// Skipped ImageDrmFormatModifierListCreateInfoEXT.
		// Skipped ImageDrmFormatModifierExplicitCreateInfoEXT.
		// Skipped ImageDrmFormatModifierPropertiesEXT.
		// Skipped ValidationCacheEXT.
		// Skipped ValidationCacheHeaderVersionEXT.
		// Skipped ValidationCacheCreateFlagsEXT.
		// Skipped ValidationCacheCreateInfoEXT.
		// Skipped ShaderModuleValidationCacheCreateInfoEXT.
		// Skipped DescriptorBindingFlagBitsEXT.
		// Skipped DescriptorBindingFlagsEXT.
		// Skipped DescriptorSetLayoutBindingFlagsCreateInfoEXT.
		// Skipped PhysicalDeviceDescriptorIndexingFeaturesEXT.
		// Skipped PhysicalDeviceDescriptorIndexingPropertiesEXT.
		// Skipped DescriptorSetVariableDescriptorCountAllocateInfoEXT.
		// Skipped DescriptorSetVariableDescriptorCountLayoutSupportEXT.
		// Skipped ShadingRatePaletteEntryNV.
		// Skipped CoarseSampleOrderTypeNV.
		// Skipped ShadingRatePaletteNV.
		// Skipped PipelineViewportShadingRateImageStateCreateInfoNV.
		// Skipped PhysicalDeviceShadingRateImageFeaturesNV.
		// Skipped PhysicalDeviceShadingRateImagePropertiesNV.
		// Skipped CoarseSampleLocationNV.
		// Skipped CoarseSampleOrderCustomNV.
		// Skipped PipelineViewportCoarseSampleOrderStateCreateInfoNV.
		// Skipped AccelerationStructureNV.
		// Skipped RayTracingShaderGroupTypeNV.
		// Skipped GeometryTypeNV.
		// Skipped AccelerationStructureTypeNV.
		// Skipped CopyAccelerationStructureModeNV.
		// Skipped AccelerationStructureMemoryRequirementsTypeNV.
		// Skipped GeometryFlagBitsNV.
		// Skipped GeometryFlagsNV.
		// Skipped GeometryInstanceFlagBitsNV.
		// Skipped GeometryInstanceFlagsNV.
		// Skipped BuildAccelerationStructureFlagBitsNV.
		// Skipped BuildAccelerationStructureFlagsNV.
		// Skipped RayTracingShaderGroupCreateInfoNV.
		// Skipped RayTracingPipelineCreateInfoNV.
		// Skipped GeometryTrianglesNV.
		// Skipped GeometryAABBNV.
		// Skipped GeometryDataNV.
		// Skipped GeometryNV.
		// Skipped AccelerationStructureInfoNV.
		// Skipped AccelerationStructureCreateInfoNV.
		// Skipped BindAccelerationStructureMemoryInfoNV.
		// Skipped WriteDescriptorSetAccelerationStructureNV.
		// Skipped AccelerationStructureMemoryRequirementsInfoNV.
		// Skipped PhysicalDeviceRayTracingPropertiesNV.
		// Skipped PhysicalDeviceRepresentativeFragmentTestFeaturesNV.
		// Skipped PipelineRepresentativeFragmentTestStateCreateInfoNV.
		// Skipped PhysicalDeviceImageViewImageFormatInfoEXT.
		// Skipped FilterCubicImageViewImageFormatPropertiesEXT.
		// Skipped QueueGlobalPriorityEXT.
		// Skipped DeviceQueueGlobalPriorityCreateInfoEXT.
		// Skipped ImportMemoryHostPointerInfoEXT.
		// Skipped MemoryHostPointerPropertiesEXT.
		// Skipped PhysicalDeviceExternalMemoryHostPropertiesEXT.
		// Skipped TimeDomainEXT.
		// Skipped CalibratedTimestampInfoEXT.
		// Skipped PhysicalDeviceShaderCorePropertiesAMD.
		// Skipped MemoryOverallocationBehaviorAMD.
		// Skipped DeviceMemoryOverallocationCreateInfoAMD.
		// Skipped PhysicalDeviceVertexAttributeDivisorPropertiesEXT.
		// Skipped VertexInputBindingDivisorDescriptionEXT.
		// Skipped PipelineVertexInputDivisorStateCreateInfoEXT.
		// Skipped PhysicalDeviceVertexAttributeDivisorFeaturesEXT.
		// Skipped PipelineCreationFeedbackFlagBitsEXT.
		// Skipped PipelineCreationFeedbackFlagsEXT.
		// Skipped PipelineCreationFeedbackEXT.
		// Skipped PipelineCreationFeedbackCreateInfoEXT.
		// Skipped PhysicalDeviceComputeShaderDerivativesFeaturesNV.
		// Skipped PhysicalDeviceMeshShaderFeaturesNV.
		// Skipped PhysicalDeviceMeshShaderPropertiesNV.
		// Skipped DrawMeshTasksIndirectCommandNV.
		// Skipped PhysicalDeviceFragmentShaderBarycentricFeaturesNV.
		// Skipped PhysicalDeviceShaderImageFootprintFeaturesNV.
		// Skipped PipelineViewportExclusiveScissorStateCreateInfoNV.
		// Skipped PhysicalDeviceExclusiveScissorFeaturesNV.
		// Skipped QueueFamilyCheckpointPropertiesNV.
		// Skipped CheckpointDataNV.
		// Skipped PhysicalDevicePCIBusInfoPropertiesEXT.
		// Skipped DisplayNativeHdrSurfaceCapabilitiesAMD.
		// Skipped SwapchainDisplayNativeHdrCreateInfoAMD.
		// Skipped PhysicalDeviceFragmentDensityMapFeaturesEXT.
		// Skipped PhysicalDeviceFragmentDensityMapPropertiesEXT.
		// Skipped RenderPassFragmentDensityMapCreateInfoEXT.
		// Skipped PhysicalDeviceScalarBlockLayoutFeaturesEXT.
		// Skipped PhysicalDeviceMemoryBudgetPropertiesEXT.
		// Skipped PhysicalDeviceMemoryPriorityFeaturesEXT.
		// Skipped MemoryPriorityAllocateInfoEXT.
		// Skipped PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV.
		// Skipped DeviceAddress.
		// Skipped PhysicalDeviceBufferDeviceAddressFeaturesEXT.
		// Skipped PhysicalDeviceBufferAddressFeaturesEXT.
		// Skipped BufferDeviceAddressInfoEXT.
		// Skipped BufferDeviceAddressCreateInfoEXT.
		// Skipped ImageStencilUsageCreateInfoEXT.
		// Skipped ValidationFeatureEnableEXT.
		// Skipped ValidationFeatureDisableEXT.
		// Skipped ValidationFeaturesEXT.
		// Skipped ComponentTypeNV.
		// Skipped ScopeNV.
		// Skipped CooperativeMatrixPropertiesNV.
		// Skipped PhysicalDeviceCooperativeMatrixFeaturesNV.
		// Skipped PhysicalDeviceCooperativeMatrixPropertiesNV.
		// Skipped CoverageReductionModeNV.
		// Skipped PipelineCoverageReductionStateCreateFlagsNV.
		// Skipped PhysicalDeviceCoverageReductionModeFeaturesNV.
		// Skipped PipelineCoverageReductionStateCreateInfoNV.
		// Skipped FramebufferMixedSamplesCombinationNV.
		// Skipped PhysicalDeviceYcbcrImageArraysFeaturesEXT.
		// Skipped HeadlessSurfaceCreateFlagsEXT.
		// Skipped HeadlessSurfaceCreateInfoEXT.
		// Skipped PhysicalDeviceHostQueryResetFeaturesEXT.

	})
}

type Flags struct {
	native C.VkFlags
}

// WrapFlags wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapFlags(ptr unsafe.Pointer) *Flags {
	if ptr == nil {
		return nil
	}

	return (*Flags)(ptr)
}

func marshalFlags(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapFlags(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (f *Flags) Native() unsafe.Pointer {
	return unsafe.Pointer(&f.native)
}

type Bool32 struct {
	native C.VkBool32
}

// WrapBool32 wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapBool32(ptr unsafe.Pointer) *Bool32 {
	if ptr == nil {
		return nil
	}

	return (*Bool32)(ptr)
}

func marshalBool32(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapBool32(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (b *Bool32) Native() unsafe.Pointer {
	return unsafe.Pointer(&b.native)
}

type DeviceSize struct {
	native C.VkDeviceSize
}

// WrapDeviceSize wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDeviceSize(ptr unsafe.Pointer) *DeviceSize {
	if ptr == nil {
		return nil
	}

	return (*DeviceSize)(ptr)
}

func marshalDeviceSize(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDeviceSize(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DeviceSize) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type SampleMask struct {
	native C.VkSampleMask
}

// WrapSampleMask wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSampleMask(ptr unsafe.Pointer) *SampleMask {
	if ptr == nil {
		return nil
	}

	return (*SampleMask)(ptr)
}

func marshalSampleMask(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSampleMask(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SampleMask) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type Instance struct {
	native C.VkInstance
}

// WrapInstance wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapInstance(ptr unsafe.Pointer) *Instance {
	if ptr == nil {
		return nil
	}

	return (*Instance)(ptr)
}

func marshalInstance(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapInstance(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (i *Instance) Native() unsafe.Pointer {
	return unsafe.Pointer(&i.native)
}

type PhysicalDevice struct {
	native C.VkPhysicalDevice
}

// WrapPhysicalDevice wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDevice(ptr unsafe.Pointer) *PhysicalDevice {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDevice)(ptr)
}

func marshalPhysicalDevice(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDevice(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDevice) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type Device struct {
	native C.VkDevice
}

// WrapDevice wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDevice(ptr unsafe.Pointer) *Device {
	if ptr == nil {
		return nil
	}

	return (*Device)(ptr)
}

func marshalDevice(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDevice(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *Device) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type Queue struct {
	native C.VkQueue
}

// WrapQueue wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapQueue(ptr unsafe.Pointer) *Queue {
	if ptr == nil {
		return nil
	}

	return (*Queue)(ptr)
}

func marshalQueue(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapQueue(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (q *Queue) Native() unsafe.Pointer {
	return unsafe.Pointer(&q.native)
}

type Semaphore struct {
	native C.VkSemaphore
}

// WrapSemaphore wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSemaphore(ptr unsafe.Pointer) *Semaphore {
	if ptr == nil {
		return nil
	}

	return (*Semaphore)(ptr)
}

func marshalSemaphore(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSemaphore(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *Semaphore) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type CommandBuffer struct {
	native C.VkCommandBuffer
}

// WrapCommandBuffer wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapCommandBuffer(ptr unsafe.Pointer) *CommandBuffer {
	if ptr == nil {
		return nil
	}

	return (*CommandBuffer)(ptr)
}

func marshalCommandBuffer(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapCommandBuffer(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (c *CommandBuffer) Native() unsafe.Pointer {
	return unsafe.Pointer(&c.native)
}

type Fence struct {
	native C.VkFence
}

// WrapFence wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapFence(ptr unsafe.Pointer) *Fence {
	if ptr == nil {
		return nil
	}

	return (*Fence)(ptr)
}

func marshalFence(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapFence(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (f *Fence) Native() unsafe.Pointer {
	return unsafe.Pointer(&f.native)
}

type DeviceMemory struct {
	native C.VkDeviceMemory
}

// WrapDeviceMemory wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDeviceMemory(ptr unsafe.Pointer) *DeviceMemory {
	if ptr == nil {
		return nil
	}

	return (*DeviceMemory)(ptr)
}

func marshalDeviceMemory(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDeviceMemory(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DeviceMemory) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type Buffer struct {
	native C.VkBuffer
}

// WrapBuffer wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapBuffer(ptr unsafe.Pointer) *Buffer {
	if ptr == nil {
		return nil
	}

	return (*Buffer)(ptr)
}

func marshalBuffer(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapBuffer(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (b *Buffer) Native() unsafe.Pointer {
	return unsafe.Pointer(&b.native)
}

type Image struct {
	native C.VkImage
}

// WrapImage wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapImage(ptr unsafe.Pointer) *Image {
	if ptr == nil {
		return nil
	}

	return (*Image)(ptr)
}

func marshalImage(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapImage(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (i *Image) Native() unsafe.Pointer {
	return unsafe.Pointer(&i.native)
}

type Event struct {
	native C.VkEvent
}

// WrapEvent wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapEvent(ptr unsafe.Pointer) *Event {
	if ptr == nil {
		return nil
	}

	return (*Event)(ptr)
}

func marshalEvent(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapEvent(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (e *Event) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

type QueryPool struct {
	native C.VkQueryPool
}

// WrapQueryPool wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapQueryPool(ptr unsafe.Pointer) *QueryPool {
	if ptr == nil {
		return nil
	}

	return (*QueryPool)(ptr)
}

func marshalQueryPool(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapQueryPool(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (q *QueryPool) Native() unsafe.Pointer {
	return unsafe.Pointer(&q.native)
}

type BufferView struct {
	native C.VkBufferView
}

// WrapBufferView wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapBufferView(ptr unsafe.Pointer) *BufferView {
	if ptr == nil {
		return nil
	}

	return (*BufferView)(ptr)
}

func marshalBufferView(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapBufferView(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (b *BufferView) Native() unsafe.Pointer {
	return unsafe.Pointer(&b.native)
}

type ImageView struct {
	native C.VkImageView
}

// WrapImageView wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapImageView(ptr unsafe.Pointer) *ImageView {
	if ptr == nil {
		return nil
	}

	return (*ImageView)(ptr)
}

func marshalImageView(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapImageView(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (i *ImageView) Native() unsafe.Pointer {
	return unsafe.Pointer(&i.native)
}

type ShaderModule struct {
	native C.VkShaderModule
}

// WrapShaderModule wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapShaderModule(ptr unsafe.Pointer) *ShaderModule {
	if ptr == nil {
		return nil
	}

	return (*ShaderModule)(ptr)
}

func marshalShaderModule(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapShaderModule(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *ShaderModule) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type PipelineCache struct {
	native C.VkPipelineCache
}

// WrapPipelineCache wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPipelineCache(ptr unsafe.Pointer) *PipelineCache {
	if ptr == nil {
		return nil
	}

	return (*PipelineCache)(ptr)
}

func marshalPipelineCache(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPipelineCache(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PipelineCache) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PipelineLayout struct {
	native C.VkPipelineLayout
}

// WrapPipelineLayout wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPipelineLayout(ptr unsafe.Pointer) *PipelineLayout {
	if ptr == nil {
		return nil
	}

	return (*PipelineLayout)(ptr)
}

func marshalPipelineLayout(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPipelineLayout(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PipelineLayout) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type RenderPass struct {
	native C.VkRenderPass
}

// WrapRenderPass wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapRenderPass(ptr unsafe.Pointer) *RenderPass {
	if ptr == nil {
		return nil
	}

	return (*RenderPass)(ptr)
}

func marshalRenderPass(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapRenderPass(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (r *RenderPass) Native() unsafe.Pointer {
	return unsafe.Pointer(&r.native)
}

type Pipeline struct {
	native C.VkPipeline
}

// WrapPipeline wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPipeline(ptr unsafe.Pointer) *Pipeline {
	if ptr == nil {
		return nil
	}

	return (*Pipeline)(ptr)
}

func marshalPipeline(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPipeline(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *Pipeline) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type DescriptorSetLayout struct {
	native C.VkDescriptorSetLayout
}

// WrapDescriptorSetLayout wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDescriptorSetLayout(ptr unsafe.Pointer) *DescriptorSetLayout {
	if ptr == nil {
		return nil
	}

	return (*DescriptorSetLayout)(ptr)
}

func marshalDescriptorSetLayout(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDescriptorSetLayout(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DescriptorSetLayout) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type Sampler struct {
	native C.VkSampler
}

// WrapSampler wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSampler(ptr unsafe.Pointer) *Sampler {
	if ptr == nil {
		return nil
	}

	return (*Sampler)(ptr)
}

func marshalSampler(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSampler(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *Sampler) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type DescriptorPool struct {
	native C.VkDescriptorPool
}

// WrapDescriptorPool wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDescriptorPool(ptr unsafe.Pointer) *DescriptorPool {
	if ptr == nil {
		return nil
	}

	return (*DescriptorPool)(ptr)
}

func marshalDescriptorPool(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDescriptorPool(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DescriptorPool) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type DescriptorSet struct {
	native C.VkDescriptorSet
}

// WrapDescriptorSet wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDescriptorSet(ptr unsafe.Pointer) *DescriptorSet {
	if ptr == nil {
		return nil
	}

	return (*DescriptorSet)(ptr)
}

func marshalDescriptorSet(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDescriptorSet(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DescriptorSet) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type Framebuffer struct {
	native C.VkFramebuffer
}

// WrapFramebuffer wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapFramebuffer(ptr unsafe.Pointer) *Framebuffer {
	if ptr == nil {
		return nil
	}

	return (*Framebuffer)(ptr)
}

func marshalFramebuffer(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapFramebuffer(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (f *Framebuffer) Native() unsafe.Pointer {
	return unsafe.Pointer(&f.native)
}

type CommandPool struct {
	native C.VkCommandPool
}

// WrapCommandPool wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapCommandPool(ptr unsafe.Pointer) *CommandPool {
	if ptr == nil {
		return nil
	}

	return (*CommandPool)(ptr)
}

func marshalCommandPool(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapCommandPool(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (c *CommandPool) Native() unsafe.Pointer {
	return unsafe.Pointer(&c.native)
}

type PipelineCacheHeaderVersion struct {
	native C.VkPipelineCacheHeaderVersion
}

// WrapPipelineCacheHeaderVersion wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPipelineCacheHeaderVersion(ptr unsafe.Pointer) *PipelineCacheHeaderVersion {
	if ptr == nil {
		return nil
	}

	return (*PipelineCacheHeaderVersion)(ptr)
}

func marshalPipelineCacheHeaderVersion(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPipelineCacheHeaderVersion(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PipelineCacheHeaderVersion) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type Result struct {
	native C.VkResult
}

// WrapResult wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapResult(ptr unsafe.Pointer) *Result {
	if ptr == nil {
		return nil
	}

	return (*Result)(ptr)
}

func marshalResult(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapResult(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (r *Result) Native() unsafe.Pointer {
	return unsafe.Pointer(&r.native)
}

type StructureType struct {
	native C.VkStructureType
}

// WrapStructureType wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapStructureType(ptr unsafe.Pointer) *StructureType {
	if ptr == nil {
		return nil
	}

	return (*StructureType)(ptr)
}

func marshalStructureType(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapStructureType(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *StructureType) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type SystemAllocationScope struct {
	native C.VkSystemAllocationScope
}

// WrapSystemAllocationScope wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSystemAllocationScope(ptr unsafe.Pointer) *SystemAllocationScope {
	if ptr == nil {
		return nil
	}

	return (*SystemAllocationScope)(ptr)
}

func marshalSystemAllocationScope(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSystemAllocationScope(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SystemAllocationScope) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type InternalAllocationType struct {
	native C.VkInternalAllocationType
}

// WrapInternalAllocationType wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapInternalAllocationType(ptr unsafe.Pointer) *InternalAllocationType {
	if ptr == nil {
		return nil
	}

	return (*InternalAllocationType)(ptr)
}

func marshalInternalAllocationType(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapInternalAllocationType(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (i *InternalAllocationType) Native() unsafe.Pointer {
	return unsafe.Pointer(&i.native)
}

type Format struct {
	native C.VkFormat
}

// WrapFormat wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapFormat(ptr unsafe.Pointer) *Format {
	if ptr == nil {
		return nil
	}

	return (*Format)(ptr)
}

func marshalFormat(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapFormat(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (f *Format) Native() unsafe.Pointer {
	return unsafe.Pointer(&f.native)
}

type ImageType struct {
	native C.VkImageType
}

// WrapImageType wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapImageType(ptr unsafe.Pointer) *ImageType {
	if ptr == nil {
		return nil
	}

	return (*ImageType)(ptr)
}

func marshalImageType(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapImageType(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (i *ImageType) Native() unsafe.Pointer {
	return unsafe.Pointer(&i.native)
}

type ImageTiling struct {
	native C.VkImageTiling
}

// WrapImageTiling wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapImageTiling(ptr unsafe.Pointer) *ImageTiling {
	if ptr == nil {
		return nil
	}

	return (*ImageTiling)(ptr)
}

func marshalImageTiling(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapImageTiling(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (i *ImageTiling) Native() unsafe.Pointer {
	return unsafe.Pointer(&i.native)
}

type PhysicalDeviceType struct {
	native C.VkPhysicalDeviceType
}

// WrapPhysicalDeviceType wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceType(ptr unsafe.Pointer) *PhysicalDeviceType {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceType)(ptr)
}

func marshalPhysicalDeviceType(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceType(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceType) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type QueryType struct {
	native C.VkQueryType
}

// WrapQueryType wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapQueryType(ptr unsafe.Pointer) *QueryType {
	if ptr == nil {
		return nil
	}

	return (*QueryType)(ptr)
}

func marshalQueryType(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapQueryType(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (q *QueryType) Native() unsafe.Pointer {
	return unsafe.Pointer(&q.native)
}

type SharingMode struct {
	native C.VkSharingMode
}

// WrapSharingMode wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSharingMode(ptr unsafe.Pointer) *SharingMode {
	if ptr == nil {
		return nil
	}

	return (*SharingMode)(ptr)
}

func marshalSharingMode(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSharingMode(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SharingMode) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type ImageLayout struct {
	native C.VkImageLayout
}

// WrapImageLayout wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapImageLayout(ptr unsafe.Pointer) *ImageLayout {
	if ptr == nil {
		return nil
	}

	return (*ImageLayout)(ptr)
}

func marshalImageLayout(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapImageLayout(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (i *ImageLayout) Native() unsafe.Pointer {
	return unsafe.Pointer(&i.native)
}

type ImageViewType struct {
	native C.VkImageViewType
}

// WrapImageViewType wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapImageViewType(ptr unsafe.Pointer) *ImageViewType {
	if ptr == nil {
		return nil
	}

	return (*ImageViewType)(ptr)
}

func marshalImageViewType(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapImageViewType(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (i *ImageViewType) Native() unsafe.Pointer {
	return unsafe.Pointer(&i.native)
}

type ComponentSwizzle struct {
	native C.VkComponentSwizzle
}

// WrapComponentSwizzle wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapComponentSwizzle(ptr unsafe.Pointer) *ComponentSwizzle {
	if ptr == nil {
		return nil
	}

	return (*ComponentSwizzle)(ptr)
}

func marshalComponentSwizzle(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapComponentSwizzle(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (c *ComponentSwizzle) Native() unsafe.Pointer {
	return unsafe.Pointer(&c.native)
}

type VertexInputRate struct {
	native C.VkVertexInputRate
}

// WrapVertexInputRate wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapVertexInputRate(ptr unsafe.Pointer) *VertexInputRate {
	if ptr == nil {
		return nil
	}

	return (*VertexInputRate)(ptr)
}

func marshalVertexInputRate(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapVertexInputRate(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (v *VertexInputRate) Native() unsafe.Pointer {
	return unsafe.Pointer(&v.native)
}

type PrimitiveTopology struct {
	native C.VkPrimitiveTopology
}

// WrapPrimitiveTopology wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPrimitiveTopology(ptr unsafe.Pointer) *PrimitiveTopology {
	if ptr == nil {
		return nil
	}

	return (*PrimitiveTopology)(ptr)
}

func marshalPrimitiveTopology(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPrimitiveTopology(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PrimitiveTopology) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PolygonMode struct {
	native C.VkPolygonMode
}

// WrapPolygonMode wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPolygonMode(ptr unsafe.Pointer) *PolygonMode {
	if ptr == nil {
		return nil
	}

	return (*PolygonMode)(ptr)
}

func marshalPolygonMode(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPolygonMode(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PolygonMode) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type FrontFace struct {
	native C.VkFrontFace
}

// WrapFrontFace wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapFrontFace(ptr unsafe.Pointer) *FrontFace {
	if ptr == nil {
		return nil
	}

	return (*FrontFace)(ptr)
}

func marshalFrontFace(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapFrontFace(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (f *FrontFace) Native() unsafe.Pointer {
	return unsafe.Pointer(&f.native)
}

type CompareOp struct {
	native C.VkCompareOp
}

// WrapCompareOp wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapCompareOp(ptr unsafe.Pointer) *CompareOp {
	if ptr == nil {
		return nil
	}

	return (*CompareOp)(ptr)
}

func marshalCompareOp(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapCompareOp(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (c *CompareOp) Native() unsafe.Pointer {
	return unsafe.Pointer(&c.native)
}

type StencilOp struct {
	native C.VkStencilOp
}

// WrapStencilOp wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapStencilOp(ptr unsafe.Pointer) *StencilOp {
	if ptr == nil {
		return nil
	}

	return (*StencilOp)(ptr)
}

func marshalStencilOp(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapStencilOp(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *StencilOp) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type LogicOp struct {
	native C.VkLogicOp
}

// WrapLogicOp wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapLogicOp(ptr unsafe.Pointer) *LogicOp {
	if ptr == nil {
		return nil
	}

	return (*LogicOp)(ptr)
}

func marshalLogicOp(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapLogicOp(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (l *LogicOp) Native() unsafe.Pointer {
	return unsafe.Pointer(&l.native)
}

type BlendFactor struct {
	native C.VkBlendFactor
}

// WrapBlendFactor wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapBlendFactor(ptr unsafe.Pointer) *BlendFactor {
	if ptr == nil {
		return nil
	}

	return (*BlendFactor)(ptr)
}

func marshalBlendFactor(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapBlendFactor(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (b *BlendFactor) Native() unsafe.Pointer {
	return unsafe.Pointer(&b.native)
}

type BlendOp struct {
	native C.VkBlendOp
}

// WrapBlendOp wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapBlendOp(ptr unsafe.Pointer) *BlendOp {
	if ptr == nil {
		return nil
	}

	return (*BlendOp)(ptr)
}

func marshalBlendOp(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapBlendOp(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (b *BlendOp) Native() unsafe.Pointer {
	return unsafe.Pointer(&b.native)
}

type DynamicState struct {
	native C.VkDynamicState
}

// WrapDynamicState wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDynamicState(ptr unsafe.Pointer) *DynamicState {
	if ptr == nil {
		return nil
	}

	return (*DynamicState)(ptr)
}

func marshalDynamicState(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDynamicState(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DynamicState) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type Filter struct {
	native C.VkFilter
}

// WrapFilter wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapFilter(ptr unsafe.Pointer) *Filter {
	if ptr == nil {
		return nil
	}

	return (*Filter)(ptr)
}

func marshalFilter(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapFilter(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (f *Filter) Native() unsafe.Pointer {
	return unsafe.Pointer(&f.native)
}

type SamplerMipmapMode struct {
	native C.VkSamplerMipmapMode
}

// WrapSamplerMipmapMode wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSamplerMipmapMode(ptr unsafe.Pointer) *SamplerMipmapMode {
	if ptr == nil {
		return nil
	}

	return (*SamplerMipmapMode)(ptr)
}

func marshalSamplerMipmapMode(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSamplerMipmapMode(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SamplerMipmapMode) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type SamplerAddressMode struct {
	native C.VkSamplerAddressMode
}

// WrapSamplerAddressMode wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSamplerAddressMode(ptr unsafe.Pointer) *SamplerAddressMode {
	if ptr == nil {
		return nil
	}

	return (*SamplerAddressMode)(ptr)
}

func marshalSamplerAddressMode(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSamplerAddressMode(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SamplerAddressMode) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type BorderColor struct {
	native C.VkBorderColor
}

// WrapBorderColor wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapBorderColor(ptr unsafe.Pointer) *BorderColor {
	if ptr == nil {
		return nil
	}

	return (*BorderColor)(ptr)
}

func marshalBorderColor(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapBorderColor(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (b *BorderColor) Native() unsafe.Pointer {
	return unsafe.Pointer(&b.native)
}

type DescriptorType struct {
	native C.VkDescriptorType
}

// WrapDescriptorType wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDescriptorType(ptr unsafe.Pointer) *DescriptorType {
	if ptr == nil {
		return nil
	}

	return (*DescriptorType)(ptr)
}

func marshalDescriptorType(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDescriptorType(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DescriptorType) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type AttachmentLoadOp struct {
	native C.VkAttachmentLoadOp
}

// WrapAttachmentLoadOp wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapAttachmentLoadOp(ptr unsafe.Pointer) *AttachmentLoadOp {
	if ptr == nil {
		return nil
	}

	return (*AttachmentLoadOp)(ptr)
}

func marshalAttachmentLoadOp(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapAttachmentLoadOp(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (a *AttachmentLoadOp) Native() unsafe.Pointer {
	return unsafe.Pointer(&a.native)
}

type AttachmentStoreOp struct {
	native C.VkAttachmentStoreOp
}

// WrapAttachmentStoreOp wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapAttachmentStoreOp(ptr unsafe.Pointer) *AttachmentStoreOp {
	if ptr == nil {
		return nil
	}

	return (*AttachmentStoreOp)(ptr)
}

func marshalAttachmentStoreOp(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapAttachmentStoreOp(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (a *AttachmentStoreOp) Native() unsafe.Pointer {
	return unsafe.Pointer(&a.native)
}

type PipelineBindPoint struct {
	native C.VkPipelineBindPoint
}

// WrapPipelineBindPoint wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPipelineBindPoint(ptr unsafe.Pointer) *PipelineBindPoint {
	if ptr == nil {
		return nil
	}

	return (*PipelineBindPoint)(ptr)
}

func marshalPipelineBindPoint(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPipelineBindPoint(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PipelineBindPoint) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type CommandBufferLevel struct {
	native C.VkCommandBufferLevel
}

// WrapCommandBufferLevel wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapCommandBufferLevel(ptr unsafe.Pointer) *CommandBufferLevel {
	if ptr == nil {
		return nil
	}

	return (*CommandBufferLevel)(ptr)
}

func marshalCommandBufferLevel(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapCommandBufferLevel(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (c *CommandBufferLevel) Native() unsafe.Pointer {
	return unsafe.Pointer(&c.native)
}

type IndexType struct {
	native C.VkIndexType
}

// WrapIndexType wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapIndexType(ptr unsafe.Pointer) *IndexType {
	if ptr == nil {
		return nil
	}

	return (*IndexType)(ptr)
}

func marshalIndexType(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapIndexType(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (i *IndexType) Native() unsafe.Pointer {
	return unsafe.Pointer(&i.native)
}

type SubpassContents struct {
	native C.VkSubpassContents
}

// WrapSubpassContents wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSubpassContents(ptr unsafe.Pointer) *SubpassContents {
	if ptr == nil {
		return nil
	}

	return (*SubpassContents)(ptr)
}

func marshalSubpassContents(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSubpassContents(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SubpassContents) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type ObjectType struct {
	native C.VkObjectType
}

// WrapObjectType wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapObjectType(ptr unsafe.Pointer) *ObjectType {
	if ptr == nil {
		return nil
	}

	return (*ObjectType)(ptr)
}

func marshalObjectType(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapObjectType(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (o *ObjectType) Native() unsafe.Pointer {
	return unsafe.Pointer(&o.native)
}

type VendorID struct {
	native C.VkVendorId
}

// WrapVendorID wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapVendorID(ptr unsafe.Pointer) *VendorID {
	if ptr == nil {
		return nil
	}

	return (*VendorID)(ptr)
}

func marshalVendorID(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapVendorID(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (v *VendorID) Native() unsafe.Pointer {
	return unsafe.Pointer(&v.native)
}

type InstanceCreateFlags struct {
	native C.VkInstanceCreateFlags
}

// WrapInstanceCreateFlags wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapInstanceCreateFlags(ptr unsafe.Pointer) *InstanceCreateFlags {
	if ptr == nil {
		return nil
	}

	return (*InstanceCreateFlags)(ptr)
}

func marshalInstanceCreateFlags(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapInstanceCreateFlags(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (i *InstanceCreateFlags) Native() unsafe.Pointer {
	return unsafe.Pointer(&i.native)
}

type FormatFeatureFlagBits struct {
	native C.VkFormatFeatureFlagBits
}

// WrapFormatFeatureFlagBits wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapFormatFeatureFlagBits(ptr unsafe.Pointer) *FormatFeatureFlagBits {
	if ptr == nil {
		return nil
	}

	return (*FormatFeatureFlagBits)(ptr)
}

func marshalFormatFeatureFlagBits(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapFormatFeatureFlagBits(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (f *FormatFeatureFlagBits) Native() unsafe.Pointer {
	return unsafe.Pointer(&f.native)
}

type FormatFeatureFlags struct {
	native C.VkFormatFeatureFlags
}

// WrapFormatFeatureFlags wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapFormatFeatureFlags(ptr unsafe.Pointer) *FormatFeatureFlags {
	if ptr == nil {
		return nil
	}

	return (*FormatFeatureFlags)(ptr)
}

func marshalFormatFeatureFlags(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapFormatFeatureFlags(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (f *FormatFeatureFlags) Native() unsafe.Pointer {
	return unsafe.Pointer(&f.native)
}

type ImageUsageFlagBits struct {
	native C.VkImageUsageFlagBits
}

// WrapImageUsageFlagBits wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapImageUsageFlagBits(ptr unsafe.Pointer) *ImageUsageFlagBits {
	if ptr == nil {
		return nil
	}

	return (*ImageUsageFlagBits)(ptr)
}

func marshalImageUsageFlagBits(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapImageUsageFlagBits(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (i *ImageUsageFlagBits) Native() unsafe.Pointer {
	return unsafe.Pointer(&i.native)
}

type ImageUsageFlags struct {
	native C.VkImageUsageFlags
}

// WrapImageUsageFlags wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapImageUsageFlags(ptr unsafe.Pointer) *ImageUsageFlags {
	if ptr == nil {
		return nil
	}

	return (*ImageUsageFlags)(ptr)
}

func marshalImageUsageFlags(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapImageUsageFlags(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (i *ImageUsageFlags) Native() unsafe.Pointer {
	return unsafe.Pointer(&i.native)
}

type ImageCreateFlagBits struct {
	native C.VkImageCreateFlagBits
}

// WrapImageCreateFlagBits wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapImageCreateFlagBits(ptr unsafe.Pointer) *ImageCreateFlagBits {
	if ptr == nil {
		return nil
	}

	return (*ImageCreateFlagBits)(ptr)
}

func marshalImageCreateFlagBits(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapImageCreateFlagBits(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (i *ImageCreateFlagBits) Native() unsafe.Pointer {
	return unsafe.Pointer(&i.native)
}

type ImageCreateFlags struct {
	native C.VkImageCreateFlags
}

// WrapImageCreateFlags wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapImageCreateFlags(ptr unsafe.Pointer) *ImageCreateFlags {
	if ptr == nil {
		return nil
	}

	return (*ImageCreateFlags)(ptr)
}

func marshalImageCreateFlags(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapImageCreateFlags(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (i *ImageCreateFlags) Native() unsafe.Pointer {
	return unsafe.Pointer(&i.native)
}

type SampleCountFlagBits struct {
	native C.VkSampleCountFlagBits
}

// WrapSampleCountFlagBits wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSampleCountFlagBits(ptr unsafe.Pointer) *SampleCountFlagBits {
	if ptr == nil {
		return nil
	}

	return (*SampleCountFlagBits)(ptr)
}

func marshalSampleCountFlagBits(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSampleCountFlagBits(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SampleCountFlagBits) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type SampleCountFlags struct {
	native C.VkSampleCountFlags
}

// WrapSampleCountFlags wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSampleCountFlags(ptr unsafe.Pointer) *SampleCountFlags {
	if ptr == nil {
		return nil
	}

	return (*SampleCountFlags)(ptr)
}

func marshalSampleCountFlags(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSampleCountFlags(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SampleCountFlags) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type QueueFlagBits struct {
	native C.VkQueueFlagBits
}

// WrapQueueFlagBits wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapQueueFlagBits(ptr unsafe.Pointer) *QueueFlagBits {
	if ptr == nil {
		return nil
	}

	return (*QueueFlagBits)(ptr)
}

func marshalQueueFlagBits(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapQueueFlagBits(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (q *QueueFlagBits) Native() unsafe.Pointer {
	return unsafe.Pointer(&q.native)
}

type QueueFlags struct {
	native C.VkQueueFlags
}

// WrapQueueFlags wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapQueueFlags(ptr unsafe.Pointer) *QueueFlags {
	if ptr == nil {
		return nil
	}

	return (*QueueFlags)(ptr)
}

func marshalQueueFlags(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapQueueFlags(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (q *QueueFlags) Native() unsafe.Pointer {
	return unsafe.Pointer(&q.native)
}

type MemoryPropertyFlagBits struct {
	native C.VkMemoryPropertyFlagBits
}

// WrapMemoryPropertyFlagBits wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapMemoryPropertyFlagBits(ptr unsafe.Pointer) *MemoryPropertyFlagBits {
	if ptr == nil {
		return nil
	}

	return (*MemoryPropertyFlagBits)(ptr)
}

func marshalMemoryPropertyFlagBits(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapMemoryPropertyFlagBits(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (m *MemoryPropertyFlagBits) Native() unsafe.Pointer {
	return unsafe.Pointer(&m.native)
}

type MemoryPropertyFlags struct {
	native C.VkMemoryPropertyFlags
}

// WrapMemoryPropertyFlags wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapMemoryPropertyFlags(ptr unsafe.Pointer) *MemoryPropertyFlags {
	if ptr == nil {
		return nil
	}

	return (*MemoryPropertyFlags)(ptr)
}

func marshalMemoryPropertyFlags(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapMemoryPropertyFlags(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (m *MemoryPropertyFlags) Native() unsafe.Pointer {
	return unsafe.Pointer(&m.native)
}

type MemoryHeapFlagBits struct {
	native C.VkMemoryHeapFlagBits
}

// WrapMemoryHeapFlagBits wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapMemoryHeapFlagBits(ptr unsafe.Pointer) *MemoryHeapFlagBits {
	if ptr == nil {
		return nil
	}

	return (*MemoryHeapFlagBits)(ptr)
}

func marshalMemoryHeapFlagBits(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapMemoryHeapFlagBits(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (m *MemoryHeapFlagBits) Native() unsafe.Pointer {
	return unsafe.Pointer(&m.native)
}

type MemoryHeapFlags struct {
	native C.VkMemoryHeapFlags
}

// WrapMemoryHeapFlags wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapMemoryHeapFlags(ptr unsafe.Pointer) *MemoryHeapFlags {
	if ptr == nil {
		return nil
	}

	return (*MemoryHeapFlags)(ptr)
}

func marshalMemoryHeapFlags(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapMemoryHeapFlags(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (m *MemoryHeapFlags) Native() unsafe.Pointer {
	return unsafe.Pointer(&m.native)
}

type DeviceCreateFlags struct {
	native C.VkDeviceCreateFlags
}

// WrapDeviceCreateFlags wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDeviceCreateFlags(ptr unsafe.Pointer) *DeviceCreateFlags {
	if ptr == nil {
		return nil
	}

	return (*DeviceCreateFlags)(ptr)
}

func marshalDeviceCreateFlags(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDeviceCreateFlags(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DeviceCreateFlags) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type DeviceQueueCreateFlagBits struct {
	native C.VkDeviceQueueCreateFlagBits
}

// WrapDeviceQueueCreateFlagBits wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDeviceQueueCreateFlagBits(ptr unsafe.Pointer) *DeviceQueueCreateFlagBits {
	if ptr == nil {
		return nil
	}

	return (*DeviceQueueCreateFlagBits)(ptr)
}

func marshalDeviceQueueCreateFlagBits(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDeviceQueueCreateFlagBits(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DeviceQueueCreateFlagBits) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type DeviceQueueCreateFlags struct {
	native C.VkDeviceQueueCreateFlags
}

// WrapDeviceQueueCreateFlags wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDeviceQueueCreateFlags(ptr unsafe.Pointer) *DeviceQueueCreateFlags {
	if ptr == nil {
		return nil
	}

	return (*DeviceQueueCreateFlags)(ptr)
}

func marshalDeviceQueueCreateFlags(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDeviceQueueCreateFlags(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DeviceQueueCreateFlags) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type PipelineStageFlagBits struct {
	native C.VkPipelineStageFlagBits
}

// WrapPipelineStageFlagBits wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPipelineStageFlagBits(ptr unsafe.Pointer) *PipelineStageFlagBits {
	if ptr == nil {
		return nil
	}

	return (*PipelineStageFlagBits)(ptr)
}

func marshalPipelineStageFlagBits(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPipelineStageFlagBits(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PipelineStageFlagBits) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PipelineStageFlags struct {
	native C.VkPipelineStageFlags
}

// WrapPipelineStageFlags wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPipelineStageFlags(ptr unsafe.Pointer) *PipelineStageFlags {
	if ptr == nil {
		return nil
	}

	return (*PipelineStageFlags)(ptr)
}

func marshalPipelineStageFlags(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPipelineStageFlags(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PipelineStageFlags) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type MemoryMapFlags struct {
	native C.VkMemoryMapFlags
}

// WrapMemoryMapFlags wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapMemoryMapFlags(ptr unsafe.Pointer) *MemoryMapFlags {
	if ptr == nil {
		return nil
	}

	return (*MemoryMapFlags)(ptr)
}

func marshalMemoryMapFlags(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapMemoryMapFlags(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (m *MemoryMapFlags) Native() unsafe.Pointer {
	return unsafe.Pointer(&m.native)
}

type ImageAspectFlagBits struct {
	native C.VkImageAspectFlagBits
}

// WrapImageAspectFlagBits wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapImageAspectFlagBits(ptr unsafe.Pointer) *ImageAspectFlagBits {
	if ptr == nil {
		return nil
	}

	return (*ImageAspectFlagBits)(ptr)
}

func marshalImageAspectFlagBits(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapImageAspectFlagBits(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (i *ImageAspectFlagBits) Native() unsafe.Pointer {
	return unsafe.Pointer(&i.native)
}

type ImageAspectFlags struct {
	native C.VkImageAspectFlags
}

// WrapImageAspectFlags wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapImageAspectFlags(ptr unsafe.Pointer) *ImageAspectFlags {
	if ptr == nil {
		return nil
	}

	return (*ImageAspectFlags)(ptr)
}

func marshalImageAspectFlags(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapImageAspectFlags(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (i *ImageAspectFlags) Native() unsafe.Pointer {
	return unsafe.Pointer(&i.native)
}

type SparseImageFormatFlagBits struct {
	native C.VkSparseImageFormatFlagBits
}

// WrapSparseImageFormatFlagBits wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSparseImageFormatFlagBits(ptr unsafe.Pointer) *SparseImageFormatFlagBits {
	if ptr == nil {
		return nil
	}

	return (*SparseImageFormatFlagBits)(ptr)
}

func marshalSparseImageFormatFlagBits(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSparseImageFormatFlagBits(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SparseImageFormatFlagBits) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type SparseImageFormatFlags struct {
	native C.VkSparseImageFormatFlags
}

// WrapSparseImageFormatFlags wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSparseImageFormatFlags(ptr unsafe.Pointer) *SparseImageFormatFlags {
	if ptr == nil {
		return nil
	}

	return (*SparseImageFormatFlags)(ptr)
}

func marshalSparseImageFormatFlags(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSparseImageFormatFlags(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SparseImageFormatFlags) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type SparseMemoryBindFlagBits struct {
	native C.VkSparseMemoryBindFlagBits
}

// WrapSparseMemoryBindFlagBits wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSparseMemoryBindFlagBits(ptr unsafe.Pointer) *SparseMemoryBindFlagBits {
	if ptr == nil {
		return nil
	}

	return (*SparseMemoryBindFlagBits)(ptr)
}

func marshalSparseMemoryBindFlagBits(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSparseMemoryBindFlagBits(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SparseMemoryBindFlagBits) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type SparseMemoryBindFlags struct {
	native C.VkSparseMemoryBindFlags
}

// WrapSparseMemoryBindFlags wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSparseMemoryBindFlags(ptr unsafe.Pointer) *SparseMemoryBindFlags {
	if ptr == nil {
		return nil
	}

	return (*SparseMemoryBindFlags)(ptr)
}

func marshalSparseMemoryBindFlags(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSparseMemoryBindFlags(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SparseMemoryBindFlags) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type FenceCreateFlagBits struct {
	native C.VkFenceCreateFlagBits
}

// WrapFenceCreateFlagBits wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapFenceCreateFlagBits(ptr unsafe.Pointer) *FenceCreateFlagBits {
	if ptr == nil {
		return nil
	}

	return (*FenceCreateFlagBits)(ptr)
}

func marshalFenceCreateFlagBits(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapFenceCreateFlagBits(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (f *FenceCreateFlagBits) Native() unsafe.Pointer {
	return unsafe.Pointer(&f.native)
}

type FenceCreateFlags struct {
	native C.VkFenceCreateFlags
}

// WrapFenceCreateFlags wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapFenceCreateFlags(ptr unsafe.Pointer) *FenceCreateFlags {
	if ptr == nil {
		return nil
	}

	return (*FenceCreateFlags)(ptr)
}

func marshalFenceCreateFlags(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapFenceCreateFlags(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (f *FenceCreateFlags) Native() unsafe.Pointer {
	return unsafe.Pointer(&f.native)
}

type SemaphoreCreateFlags struct {
	native C.VkSemaphoreCreateFlags
}

// WrapSemaphoreCreateFlags wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSemaphoreCreateFlags(ptr unsafe.Pointer) *SemaphoreCreateFlags {
	if ptr == nil {
		return nil
	}

	return (*SemaphoreCreateFlags)(ptr)
}

func marshalSemaphoreCreateFlags(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSemaphoreCreateFlags(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SemaphoreCreateFlags) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type EventCreateFlags struct {
	native C.VkEventCreateFlags
}

// WrapEventCreateFlags wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapEventCreateFlags(ptr unsafe.Pointer) *EventCreateFlags {
	if ptr == nil {
		return nil
	}

	return (*EventCreateFlags)(ptr)
}

func marshalEventCreateFlags(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapEventCreateFlags(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (e *EventCreateFlags) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

type QueryPoolCreateFlags struct {
	native C.VkQueryPoolCreateFlags
}

// WrapQueryPoolCreateFlags wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapQueryPoolCreateFlags(ptr unsafe.Pointer) *QueryPoolCreateFlags {
	if ptr == nil {
		return nil
	}

	return (*QueryPoolCreateFlags)(ptr)
}

func marshalQueryPoolCreateFlags(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapQueryPoolCreateFlags(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (q *QueryPoolCreateFlags) Native() unsafe.Pointer {
	return unsafe.Pointer(&q.native)
}

type QueryPipelineStatisticFlagBits struct {
	native C.VkQueryPipelineStatisticFlagBits
}

// WrapQueryPipelineStatisticFlagBits wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapQueryPipelineStatisticFlagBits(ptr unsafe.Pointer) *QueryPipelineStatisticFlagBits {
	if ptr == nil {
		return nil
	}

	return (*QueryPipelineStatisticFlagBits)(ptr)
}

func marshalQueryPipelineStatisticFlagBits(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapQueryPipelineStatisticFlagBits(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (q *QueryPipelineStatisticFlagBits) Native() unsafe.Pointer {
	return unsafe.Pointer(&q.native)
}

type QueryPipelineStatisticFlags struct {
	native C.VkQueryPipelineStatisticFlags
}

// WrapQueryPipelineStatisticFlags wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapQueryPipelineStatisticFlags(ptr unsafe.Pointer) *QueryPipelineStatisticFlags {
	if ptr == nil {
		return nil
	}

	return (*QueryPipelineStatisticFlags)(ptr)
}

func marshalQueryPipelineStatisticFlags(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapQueryPipelineStatisticFlags(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (q *QueryPipelineStatisticFlags) Native() unsafe.Pointer {
	return unsafe.Pointer(&q.native)
}

type QueryResultFlagBits struct {
	native C.VkQueryResultFlagBits
}

// WrapQueryResultFlagBits wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapQueryResultFlagBits(ptr unsafe.Pointer) *QueryResultFlagBits {
	if ptr == nil {
		return nil
	}

	return (*QueryResultFlagBits)(ptr)
}

func marshalQueryResultFlagBits(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapQueryResultFlagBits(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (q *QueryResultFlagBits) Native() unsafe.Pointer {
	return unsafe.Pointer(&q.native)
}

type QueryResultFlags struct {
	native C.VkQueryResultFlags
}

// WrapQueryResultFlags wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapQueryResultFlags(ptr unsafe.Pointer) *QueryResultFlags {
	if ptr == nil {
		return nil
	}

	return (*QueryResultFlags)(ptr)
}

func marshalQueryResultFlags(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapQueryResultFlags(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (q *QueryResultFlags) Native() unsafe.Pointer {
	return unsafe.Pointer(&q.native)
}

type BufferCreateFlagBits struct {
	native C.VkBufferCreateFlagBits
}

// WrapBufferCreateFlagBits wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapBufferCreateFlagBits(ptr unsafe.Pointer) *BufferCreateFlagBits {
	if ptr == nil {
		return nil
	}

	return (*BufferCreateFlagBits)(ptr)
}

func marshalBufferCreateFlagBits(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapBufferCreateFlagBits(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (b *BufferCreateFlagBits) Native() unsafe.Pointer {
	return unsafe.Pointer(&b.native)
}

type BufferCreateFlags struct {
	native C.VkBufferCreateFlags
}

// WrapBufferCreateFlags wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapBufferCreateFlags(ptr unsafe.Pointer) *BufferCreateFlags {
	if ptr == nil {
		return nil
	}

	return (*BufferCreateFlags)(ptr)
}

func marshalBufferCreateFlags(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapBufferCreateFlags(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (b *BufferCreateFlags) Native() unsafe.Pointer {
	return unsafe.Pointer(&b.native)
}

type BufferUsageFlagBits struct {
	native C.VkBufferUsageFlagBits
}

// WrapBufferUsageFlagBits wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapBufferUsageFlagBits(ptr unsafe.Pointer) *BufferUsageFlagBits {
	if ptr == nil {
		return nil
	}

	return (*BufferUsageFlagBits)(ptr)
}

func marshalBufferUsageFlagBits(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapBufferUsageFlagBits(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (b *BufferUsageFlagBits) Native() unsafe.Pointer {
	return unsafe.Pointer(&b.native)
}

type BufferUsageFlags struct {
	native C.VkBufferUsageFlags
}

// WrapBufferUsageFlags wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapBufferUsageFlags(ptr unsafe.Pointer) *BufferUsageFlags {
	if ptr == nil {
		return nil
	}

	return (*BufferUsageFlags)(ptr)
}

func marshalBufferUsageFlags(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapBufferUsageFlags(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (b *BufferUsageFlags) Native() unsafe.Pointer {
	return unsafe.Pointer(&b.native)
}

type BufferViewCreateFlags struct {
	native C.VkBufferViewCreateFlags
}

// WrapBufferViewCreateFlags wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapBufferViewCreateFlags(ptr unsafe.Pointer) *BufferViewCreateFlags {
	if ptr == nil {
		return nil
	}

	return (*BufferViewCreateFlags)(ptr)
}

func marshalBufferViewCreateFlags(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapBufferViewCreateFlags(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (b *BufferViewCreateFlags) Native() unsafe.Pointer {
	return unsafe.Pointer(&b.native)
}

type ImageViewCreateFlagBits struct {
	native C.VkImageViewCreateFlagBits
}

// WrapImageViewCreateFlagBits wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapImageViewCreateFlagBits(ptr unsafe.Pointer) *ImageViewCreateFlagBits {
	if ptr == nil {
		return nil
	}

	return (*ImageViewCreateFlagBits)(ptr)
}

func marshalImageViewCreateFlagBits(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapImageViewCreateFlagBits(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (i *ImageViewCreateFlagBits) Native() unsafe.Pointer {
	return unsafe.Pointer(&i.native)
}

type ImageViewCreateFlags struct {
	native C.VkImageViewCreateFlags
}

// WrapImageViewCreateFlags wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapImageViewCreateFlags(ptr unsafe.Pointer) *ImageViewCreateFlags {
	if ptr == nil {
		return nil
	}

	return (*ImageViewCreateFlags)(ptr)
}

func marshalImageViewCreateFlags(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapImageViewCreateFlags(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (i *ImageViewCreateFlags) Native() unsafe.Pointer {
	return unsafe.Pointer(&i.native)
}

type ShaderModuleCreateFlags struct {
	native C.VkShaderModuleCreateFlags
}

// WrapShaderModuleCreateFlags wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapShaderModuleCreateFlags(ptr unsafe.Pointer) *ShaderModuleCreateFlags {
	if ptr == nil {
		return nil
	}

	return (*ShaderModuleCreateFlags)(ptr)
}

func marshalShaderModuleCreateFlags(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapShaderModuleCreateFlags(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *ShaderModuleCreateFlags) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type PipelineCacheCreateFlags struct {
	native C.VkPipelineCacheCreateFlags
}

// WrapPipelineCacheCreateFlags wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPipelineCacheCreateFlags(ptr unsafe.Pointer) *PipelineCacheCreateFlags {
	if ptr == nil {
		return nil
	}

	return (*PipelineCacheCreateFlags)(ptr)
}

func marshalPipelineCacheCreateFlags(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPipelineCacheCreateFlags(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PipelineCacheCreateFlags) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PipelineCreateFlagBits struct {
	native C.VkPipelineCreateFlagBits
}

// WrapPipelineCreateFlagBits wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPipelineCreateFlagBits(ptr unsafe.Pointer) *PipelineCreateFlagBits {
	if ptr == nil {
		return nil
	}

	return (*PipelineCreateFlagBits)(ptr)
}

func marshalPipelineCreateFlagBits(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPipelineCreateFlagBits(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PipelineCreateFlagBits) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PipelineCreateFlags struct {
	native C.VkPipelineCreateFlags
}

// WrapPipelineCreateFlags wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPipelineCreateFlags(ptr unsafe.Pointer) *PipelineCreateFlags {
	if ptr == nil {
		return nil
	}

	return (*PipelineCreateFlags)(ptr)
}

func marshalPipelineCreateFlags(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPipelineCreateFlags(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PipelineCreateFlags) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PipelineShaderStageCreateFlags struct {
	native C.VkPipelineShaderStageCreateFlags
}

// WrapPipelineShaderStageCreateFlags wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPipelineShaderStageCreateFlags(ptr unsafe.Pointer) *PipelineShaderStageCreateFlags {
	if ptr == nil {
		return nil
	}

	return (*PipelineShaderStageCreateFlags)(ptr)
}

func marshalPipelineShaderStageCreateFlags(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPipelineShaderStageCreateFlags(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PipelineShaderStageCreateFlags) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type ShaderStageFlagBits struct {
	native C.VkShaderStageFlagBits
}

// WrapShaderStageFlagBits wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapShaderStageFlagBits(ptr unsafe.Pointer) *ShaderStageFlagBits {
	if ptr == nil {
		return nil
	}

	return (*ShaderStageFlagBits)(ptr)
}

func marshalShaderStageFlagBits(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapShaderStageFlagBits(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *ShaderStageFlagBits) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type PipelineVertexInputStateCreateFlags struct {
	native C.VkPipelineVertexInputStateCreateFlags
}

// WrapPipelineVertexInputStateCreateFlags wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPipelineVertexInputStateCreateFlags(ptr unsafe.Pointer) *PipelineVertexInputStateCreateFlags {
	if ptr == nil {
		return nil
	}

	return (*PipelineVertexInputStateCreateFlags)(ptr)
}

func marshalPipelineVertexInputStateCreateFlags(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPipelineVertexInputStateCreateFlags(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PipelineVertexInputStateCreateFlags) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PipelineInputAssemblyStateCreateFlags struct {
	native C.VkPipelineInputAssemblyStateCreateFlags
}

// WrapPipelineInputAssemblyStateCreateFlags wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPipelineInputAssemblyStateCreateFlags(ptr unsafe.Pointer) *PipelineInputAssemblyStateCreateFlags {
	if ptr == nil {
		return nil
	}

	return (*PipelineInputAssemblyStateCreateFlags)(ptr)
}

func marshalPipelineInputAssemblyStateCreateFlags(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPipelineInputAssemblyStateCreateFlags(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PipelineInputAssemblyStateCreateFlags) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PipelineTessellationStateCreateFlags struct {
	native C.VkPipelineTessellationStateCreateFlags
}

// WrapPipelineTessellationStateCreateFlags wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPipelineTessellationStateCreateFlags(ptr unsafe.Pointer) *PipelineTessellationStateCreateFlags {
	if ptr == nil {
		return nil
	}

	return (*PipelineTessellationStateCreateFlags)(ptr)
}

func marshalPipelineTessellationStateCreateFlags(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPipelineTessellationStateCreateFlags(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PipelineTessellationStateCreateFlags) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PipelineViewportStateCreateFlags struct {
	native C.VkPipelineViewportStateCreateFlags
}

// WrapPipelineViewportStateCreateFlags wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPipelineViewportStateCreateFlags(ptr unsafe.Pointer) *PipelineViewportStateCreateFlags {
	if ptr == nil {
		return nil
	}

	return (*PipelineViewportStateCreateFlags)(ptr)
}

func marshalPipelineViewportStateCreateFlags(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPipelineViewportStateCreateFlags(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PipelineViewportStateCreateFlags) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PipelineRasterizationStateCreateFlags struct {
	native C.VkPipelineRasterizationStateCreateFlags
}

// WrapPipelineRasterizationStateCreateFlags wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPipelineRasterizationStateCreateFlags(ptr unsafe.Pointer) *PipelineRasterizationStateCreateFlags {
	if ptr == nil {
		return nil
	}

	return (*PipelineRasterizationStateCreateFlags)(ptr)
}

func marshalPipelineRasterizationStateCreateFlags(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPipelineRasterizationStateCreateFlags(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PipelineRasterizationStateCreateFlags) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type CullModeFlagBits struct {
	native C.VkCullModeFlagBits
}

// WrapCullModeFlagBits wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapCullModeFlagBits(ptr unsafe.Pointer) *CullModeFlagBits {
	if ptr == nil {
		return nil
	}

	return (*CullModeFlagBits)(ptr)
}

func marshalCullModeFlagBits(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapCullModeFlagBits(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (c *CullModeFlagBits) Native() unsafe.Pointer {
	return unsafe.Pointer(&c.native)
}

type CullModeFlags struct {
	native C.VkCullModeFlags
}

// WrapCullModeFlags wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapCullModeFlags(ptr unsafe.Pointer) *CullModeFlags {
	if ptr == nil {
		return nil
	}

	return (*CullModeFlags)(ptr)
}

func marshalCullModeFlags(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapCullModeFlags(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (c *CullModeFlags) Native() unsafe.Pointer {
	return unsafe.Pointer(&c.native)
}

type PipelineMultisampleStateCreateFlags struct {
	native C.VkPipelineMultisampleStateCreateFlags
}

// WrapPipelineMultisampleStateCreateFlags wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPipelineMultisampleStateCreateFlags(ptr unsafe.Pointer) *PipelineMultisampleStateCreateFlags {
	if ptr == nil {
		return nil
	}

	return (*PipelineMultisampleStateCreateFlags)(ptr)
}

func marshalPipelineMultisampleStateCreateFlags(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPipelineMultisampleStateCreateFlags(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PipelineMultisampleStateCreateFlags) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PipelineDepthStencilStateCreateFlags struct {
	native C.VkPipelineDepthStencilStateCreateFlags
}

// WrapPipelineDepthStencilStateCreateFlags wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPipelineDepthStencilStateCreateFlags(ptr unsafe.Pointer) *PipelineDepthStencilStateCreateFlags {
	if ptr == nil {
		return nil
	}

	return (*PipelineDepthStencilStateCreateFlags)(ptr)
}

func marshalPipelineDepthStencilStateCreateFlags(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPipelineDepthStencilStateCreateFlags(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PipelineDepthStencilStateCreateFlags) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PipelineColorBlendStateCreateFlags struct {
	native C.VkPipelineColorBlendStateCreateFlags
}

// WrapPipelineColorBlendStateCreateFlags wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPipelineColorBlendStateCreateFlags(ptr unsafe.Pointer) *PipelineColorBlendStateCreateFlags {
	if ptr == nil {
		return nil
	}

	return (*PipelineColorBlendStateCreateFlags)(ptr)
}

func marshalPipelineColorBlendStateCreateFlags(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPipelineColorBlendStateCreateFlags(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PipelineColorBlendStateCreateFlags) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type ColorComponentFlagBits struct {
	native C.VkColorComponentFlagBits
}

// WrapColorComponentFlagBits wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapColorComponentFlagBits(ptr unsafe.Pointer) *ColorComponentFlagBits {
	if ptr == nil {
		return nil
	}

	return (*ColorComponentFlagBits)(ptr)
}

func marshalColorComponentFlagBits(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapColorComponentFlagBits(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (c *ColorComponentFlagBits) Native() unsafe.Pointer {
	return unsafe.Pointer(&c.native)
}

type ColorComponentFlags struct {
	native C.VkColorComponentFlags
}

// WrapColorComponentFlags wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapColorComponentFlags(ptr unsafe.Pointer) *ColorComponentFlags {
	if ptr == nil {
		return nil
	}

	return (*ColorComponentFlags)(ptr)
}

func marshalColorComponentFlags(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapColorComponentFlags(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (c *ColorComponentFlags) Native() unsafe.Pointer {
	return unsafe.Pointer(&c.native)
}

type PipelineDynamicStateCreateFlags struct {
	native C.VkPipelineDynamicStateCreateFlags
}

// WrapPipelineDynamicStateCreateFlags wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPipelineDynamicStateCreateFlags(ptr unsafe.Pointer) *PipelineDynamicStateCreateFlags {
	if ptr == nil {
		return nil
	}

	return (*PipelineDynamicStateCreateFlags)(ptr)
}

func marshalPipelineDynamicStateCreateFlags(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPipelineDynamicStateCreateFlags(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PipelineDynamicStateCreateFlags) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PipelineLayoutCreateFlags struct {
	native C.VkPipelineLayoutCreateFlags
}

// WrapPipelineLayoutCreateFlags wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPipelineLayoutCreateFlags(ptr unsafe.Pointer) *PipelineLayoutCreateFlags {
	if ptr == nil {
		return nil
	}

	return (*PipelineLayoutCreateFlags)(ptr)
}

func marshalPipelineLayoutCreateFlags(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPipelineLayoutCreateFlags(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PipelineLayoutCreateFlags) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type ShaderStageFlags struct {
	native C.VkShaderStageFlags
}

// WrapShaderStageFlags wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapShaderStageFlags(ptr unsafe.Pointer) *ShaderStageFlags {
	if ptr == nil {
		return nil
	}

	return (*ShaderStageFlags)(ptr)
}

func marshalShaderStageFlags(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapShaderStageFlags(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *ShaderStageFlags) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type SamplerCreateFlagBits struct {
	native C.VkSamplerCreateFlagBits
}

// WrapSamplerCreateFlagBits wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSamplerCreateFlagBits(ptr unsafe.Pointer) *SamplerCreateFlagBits {
	if ptr == nil {
		return nil
	}

	return (*SamplerCreateFlagBits)(ptr)
}

func marshalSamplerCreateFlagBits(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSamplerCreateFlagBits(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SamplerCreateFlagBits) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type SamplerCreateFlags struct {
	native C.VkSamplerCreateFlags
}

// WrapSamplerCreateFlags wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSamplerCreateFlags(ptr unsafe.Pointer) *SamplerCreateFlags {
	if ptr == nil {
		return nil
	}

	return (*SamplerCreateFlags)(ptr)
}

func marshalSamplerCreateFlags(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSamplerCreateFlags(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SamplerCreateFlags) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type DescriptorSetLayoutCreateFlagBits struct {
	native C.VkDescriptorSetLayoutCreateFlagBits
}

// WrapDescriptorSetLayoutCreateFlagBits wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDescriptorSetLayoutCreateFlagBits(ptr unsafe.Pointer) *DescriptorSetLayoutCreateFlagBits {
	if ptr == nil {
		return nil
	}

	return (*DescriptorSetLayoutCreateFlagBits)(ptr)
}

func marshalDescriptorSetLayoutCreateFlagBits(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDescriptorSetLayoutCreateFlagBits(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DescriptorSetLayoutCreateFlagBits) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type DescriptorSetLayoutCreateFlags struct {
	native C.VkDescriptorSetLayoutCreateFlags
}

// WrapDescriptorSetLayoutCreateFlags wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDescriptorSetLayoutCreateFlags(ptr unsafe.Pointer) *DescriptorSetLayoutCreateFlags {
	if ptr == nil {
		return nil
	}

	return (*DescriptorSetLayoutCreateFlags)(ptr)
}

func marshalDescriptorSetLayoutCreateFlags(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDescriptorSetLayoutCreateFlags(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DescriptorSetLayoutCreateFlags) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type DescriptorPoolCreateFlagBits struct {
	native C.VkDescriptorPoolCreateFlagBits
}

// WrapDescriptorPoolCreateFlagBits wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDescriptorPoolCreateFlagBits(ptr unsafe.Pointer) *DescriptorPoolCreateFlagBits {
	if ptr == nil {
		return nil
	}

	return (*DescriptorPoolCreateFlagBits)(ptr)
}

func marshalDescriptorPoolCreateFlagBits(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDescriptorPoolCreateFlagBits(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DescriptorPoolCreateFlagBits) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type DescriptorPoolCreateFlags struct {
	native C.VkDescriptorPoolCreateFlags
}

// WrapDescriptorPoolCreateFlags wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDescriptorPoolCreateFlags(ptr unsafe.Pointer) *DescriptorPoolCreateFlags {
	if ptr == nil {
		return nil
	}

	return (*DescriptorPoolCreateFlags)(ptr)
}

func marshalDescriptorPoolCreateFlags(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDescriptorPoolCreateFlags(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DescriptorPoolCreateFlags) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type DescriptorPoolResetFlags struct {
	native C.VkDescriptorPoolResetFlags
}

// WrapDescriptorPoolResetFlags wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDescriptorPoolResetFlags(ptr unsafe.Pointer) *DescriptorPoolResetFlags {
	if ptr == nil {
		return nil
	}

	return (*DescriptorPoolResetFlags)(ptr)
}

func marshalDescriptorPoolResetFlags(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDescriptorPoolResetFlags(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DescriptorPoolResetFlags) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type FramebufferCreateFlags struct {
	native C.VkFramebufferCreateFlags
}

// WrapFramebufferCreateFlags wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapFramebufferCreateFlags(ptr unsafe.Pointer) *FramebufferCreateFlags {
	if ptr == nil {
		return nil
	}

	return (*FramebufferCreateFlags)(ptr)
}

func marshalFramebufferCreateFlags(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapFramebufferCreateFlags(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (f *FramebufferCreateFlags) Native() unsafe.Pointer {
	return unsafe.Pointer(&f.native)
}

type RenderPassCreateFlags struct {
	native C.VkRenderPassCreateFlags
}

// WrapRenderPassCreateFlags wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapRenderPassCreateFlags(ptr unsafe.Pointer) *RenderPassCreateFlags {
	if ptr == nil {
		return nil
	}

	return (*RenderPassCreateFlags)(ptr)
}

func marshalRenderPassCreateFlags(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapRenderPassCreateFlags(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (r *RenderPassCreateFlags) Native() unsafe.Pointer {
	return unsafe.Pointer(&r.native)
}

type AttachmentDescriptionFlagBits struct {
	native C.VkAttachmentDescriptionFlagBits
}

// WrapAttachmentDescriptionFlagBits wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapAttachmentDescriptionFlagBits(ptr unsafe.Pointer) *AttachmentDescriptionFlagBits {
	if ptr == nil {
		return nil
	}

	return (*AttachmentDescriptionFlagBits)(ptr)
}

func marshalAttachmentDescriptionFlagBits(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapAttachmentDescriptionFlagBits(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (a *AttachmentDescriptionFlagBits) Native() unsafe.Pointer {
	return unsafe.Pointer(&a.native)
}

type AttachmentDescriptionFlags struct {
	native C.VkAttachmentDescriptionFlags
}

// WrapAttachmentDescriptionFlags wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapAttachmentDescriptionFlags(ptr unsafe.Pointer) *AttachmentDescriptionFlags {
	if ptr == nil {
		return nil
	}

	return (*AttachmentDescriptionFlags)(ptr)
}

func marshalAttachmentDescriptionFlags(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapAttachmentDescriptionFlags(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (a *AttachmentDescriptionFlags) Native() unsafe.Pointer {
	return unsafe.Pointer(&a.native)
}

type SubpassDescriptionFlagBits struct {
	native C.VkSubpassDescriptionFlagBits
}

// WrapSubpassDescriptionFlagBits wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSubpassDescriptionFlagBits(ptr unsafe.Pointer) *SubpassDescriptionFlagBits {
	if ptr == nil {
		return nil
	}

	return (*SubpassDescriptionFlagBits)(ptr)
}

func marshalSubpassDescriptionFlagBits(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSubpassDescriptionFlagBits(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SubpassDescriptionFlagBits) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type SubpassDescriptionFlags struct {
	native C.VkSubpassDescriptionFlags
}

// WrapSubpassDescriptionFlags wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSubpassDescriptionFlags(ptr unsafe.Pointer) *SubpassDescriptionFlags {
	if ptr == nil {
		return nil
	}

	return (*SubpassDescriptionFlags)(ptr)
}

func marshalSubpassDescriptionFlags(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSubpassDescriptionFlags(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SubpassDescriptionFlags) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type AccessFlagBits struct {
	native C.VkAccessFlagBits
}

// WrapAccessFlagBits wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapAccessFlagBits(ptr unsafe.Pointer) *AccessFlagBits {
	if ptr == nil {
		return nil
	}

	return (*AccessFlagBits)(ptr)
}

func marshalAccessFlagBits(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapAccessFlagBits(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (a *AccessFlagBits) Native() unsafe.Pointer {
	return unsafe.Pointer(&a.native)
}

type AccessFlags struct {
	native C.VkAccessFlags
}

// WrapAccessFlags wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapAccessFlags(ptr unsafe.Pointer) *AccessFlags {
	if ptr == nil {
		return nil
	}

	return (*AccessFlags)(ptr)
}

func marshalAccessFlags(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapAccessFlags(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (a *AccessFlags) Native() unsafe.Pointer {
	return unsafe.Pointer(&a.native)
}

type DependencyFlagBits struct {
	native C.VkDependencyFlagBits
}

// WrapDependencyFlagBits wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDependencyFlagBits(ptr unsafe.Pointer) *DependencyFlagBits {
	if ptr == nil {
		return nil
	}

	return (*DependencyFlagBits)(ptr)
}

func marshalDependencyFlagBits(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDependencyFlagBits(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DependencyFlagBits) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type DependencyFlags struct {
	native C.VkDependencyFlags
}

// WrapDependencyFlags wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDependencyFlags(ptr unsafe.Pointer) *DependencyFlags {
	if ptr == nil {
		return nil
	}

	return (*DependencyFlags)(ptr)
}

func marshalDependencyFlags(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDependencyFlags(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DependencyFlags) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type CommandPoolCreateFlagBits struct {
	native C.VkCommandPoolCreateFlagBits
}

// WrapCommandPoolCreateFlagBits wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapCommandPoolCreateFlagBits(ptr unsafe.Pointer) *CommandPoolCreateFlagBits {
	if ptr == nil {
		return nil
	}

	return (*CommandPoolCreateFlagBits)(ptr)
}

func marshalCommandPoolCreateFlagBits(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapCommandPoolCreateFlagBits(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (c *CommandPoolCreateFlagBits) Native() unsafe.Pointer {
	return unsafe.Pointer(&c.native)
}

type CommandPoolCreateFlags struct {
	native C.VkCommandPoolCreateFlags
}

// WrapCommandPoolCreateFlags wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapCommandPoolCreateFlags(ptr unsafe.Pointer) *CommandPoolCreateFlags {
	if ptr == nil {
		return nil
	}

	return (*CommandPoolCreateFlags)(ptr)
}

func marshalCommandPoolCreateFlags(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapCommandPoolCreateFlags(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (c *CommandPoolCreateFlags) Native() unsafe.Pointer {
	return unsafe.Pointer(&c.native)
}

type CommandPoolResetFlagBits struct {
	native C.VkCommandPoolResetFlagBits
}

// WrapCommandPoolResetFlagBits wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapCommandPoolResetFlagBits(ptr unsafe.Pointer) *CommandPoolResetFlagBits {
	if ptr == nil {
		return nil
	}

	return (*CommandPoolResetFlagBits)(ptr)
}

func marshalCommandPoolResetFlagBits(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapCommandPoolResetFlagBits(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (c *CommandPoolResetFlagBits) Native() unsafe.Pointer {
	return unsafe.Pointer(&c.native)
}

type CommandPoolResetFlags struct {
	native C.VkCommandPoolResetFlags
}

// WrapCommandPoolResetFlags wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapCommandPoolResetFlags(ptr unsafe.Pointer) *CommandPoolResetFlags {
	if ptr == nil {
		return nil
	}

	return (*CommandPoolResetFlags)(ptr)
}

func marshalCommandPoolResetFlags(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapCommandPoolResetFlags(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (c *CommandPoolResetFlags) Native() unsafe.Pointer {
	return unsafe.Pointer(&c.native)
}

type CommandBufferUsageFlagBits struct {
	native C.VkCommandBufferUsageFlagBits
}

// WrapCommandBufferUsageFlagBits wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapCommandBufferUsageFlagBits(ptr unsafe.Pointer) *CommandBufferUsageFlagBits {
	if ptr == nil {
		return nil
	}

	return (*CommandBufferUsageFlagBits)(ptr)
}

func marshalCommandBufferUsageFlagBits(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapCommandBufferUsageFlagBits(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (c *CommandBufferUsageFlagBits) Native() unsafe.Pointer {
	return unsafe.Pointer(&c.native)
}

type CommandBufferUsageFlags struct {
	native C.VkCommandBufferUsageFlags
}

// WrapCommandBufferUsageFlags wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapCommandBufferUsageFlags(ptr unsafe.Pointer) *CommandBufferUsageFlags {
	if ptr == nil {
		return nil
	}

	return (*CommandBufferUsageFlags)(ptr)
}

func marshalCommandBufferUsageFlags(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapCommandBufferUsageFlags(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (c *CommandBufferUsageFlags) Native() unsafe.Pointer {
	return unsafe.Pointer(&c.native)
}

type QueryControlFlagBits struct {
	native C.VkQueryControlFlagBits
}

// WrapQueryControlFlagBits wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapQueryControlFlagBits(ptr unsafe.Pointer) *QueryControlFlagBits {
	if ptr == nil {
		return nil
	}

	return (*QueryControlFlagBits)(ptr)
}

func marshalQueryControlFlagBits(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapQueryControlFlagBits(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (q *QueryControlFlagBits) Native() unsafe.Pointer {
	return unsafe.Pointer(&q.native)
}

type QueryControlFlags struct {
	native C.VkQueryControlFlags
}

// WrapQueryControlFlags wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapQueryControlFlags(ptr unsafe.Pointer) *QueryControlFlags {
	if ptr == nil {
		return nil
	}

	return (*QueryControlFlags)(ptr)
}

func marshalQueryControlFlags(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapQueryControlFlags(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (q *QueryControlFlags) Native() unsafe.Pointer {
	return unsafe.Pointer(&q.native)
}

type CommandBufferResetFlagBits struct {
	native C.VkCommandBufferResetFlagBits
}

// WrapCommandBufferResetFlagBits wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapCommandBufferResetFlagBits(ptr unsafe.Pointer) *CommandBufferResetFlagBits {
	if ptr == nil {
		return nil
	}

	return (*CommandBufferResetFlagBits)(ptr)
}

func marshalCommandBufferResetFlagBits(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapCommandBufferResetFlagBits(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (c *CommandBufferResetFlagBits) Native() unsafe.Pointer {
	return unsafe.Pointer(&c.native)
}

type CommandBufferResetFlags struct {
	native C.VkCommandBufferResetFlags
}

// WrapCommandBufferResetFlags wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapCommandBufferResetFlags(ptr unsafe.Pointer) *CommandBufferResetFlags {
	if ptr == nil {
		return nil
	}

	return (*CommandBufferResetFlags)(ptr)
}

func marshalCommandBufferResetFlags(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapCommandBufferResetFlags(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (c *CommandBufferResetFlags) Native() unsafe.Pointer {
	return unsafe.Pointer(&c.native)
}

type StencilFaceFlagBits struct {
	native C.VkStencilFaceFlagBits
}

// WrapStencilFaceFlagBits wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapStencilFaceFlagBits(ptr unsafe.Pointer) *StencilFaceFlagBits {
	if ptr == nil {
		return nil
	}

	return (*StencilFaceFlagBits)(ptr)
}

func marshalStencilFaceFlagBits(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapStencilFaceFlagBits(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *StencilFaceFlagBits) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type StencilFaceFlags struct {
	native C.VkStencilFaceFlags
}

// WrapStencilFaceFlags wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapStencilFaceFlags(ptr unsafe.Pointer) *StencilFaceFlags {
	if ptr == nil {
		return nil
	}

	return (*StencilFaceFlags)(ptr)
}

func marshalStencilFaceFlags(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapStencilFaceFlags(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *StencilFaceFlags) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type ApplicationInfo struct {
	native C.VkApplicationInfo
}

// WrapApplicationInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapApplicationInfo(ptr unsafe.Pointer) *ApplicationInfo {
	if ptr == nil {
		return nil
	}

	return (*ApplicationInfo)(ptr)
}

func marshalApplicationInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapApplicationInfo(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (a *ApplicationInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(&a.native)
}

type InstanceCreateInfo struct {
	native C.VkInstanceCreateInfo
}

// WrapInstanceCreateInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapInstanceCreateInfo(ptr unsafe.Pointer) *InstanceCreateInfo {
	if ptr == nil {
		return nil
	}

	return (*InstanceCreateInfo)(ptr)
}

func marshalInstanceCreateInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapInstanceCreateInfo(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (i *InstanceCreateInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(&i.native)
}

type AllocationCallbacks struct {
	native C.VkAllocationCallbacks
}

// WrapAllocationCallbacks wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapAllocationCallbacks(ptr unsafe.Pointer) *AllocationCallbacks {
	if ptr == nil {
		return nil
	}

	return (*AllocationCallbacks)(ptr)
}

func marshalAllocationCallbacks(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapAllocationCallbacks(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (a *AllocationCallbacks) Native() unsafe.Pointer {
	return unsafe.Pointer(&a.native)
}

type PhysicalDeviceFeatures struct {
	native C.VkPhysicalDeviceFeatures
}

// WrapPhysicalDeviceFeatures wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceFeatures(ptr unsafe.Pointer) *PhysicalDeviceFeatures {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceFeatures)(ptr)
}

func marshalPhysicalDeviceFeatures(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceFeatures(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceFeatures) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type FormatProperties struct {
	native C.VkFormatProperties
}

// WrapFormatProperties wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapFormatProperties(ptr unsafe.Pointer) *FormatProperties {
	if ptr == nil {
		return nil
	}

	return (*FormatProperties)(ptr)
}

func marshalFormatProperties(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapFormatProperties(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (f *FormatProperties) Native() unsafe.Pointer {
	return unsafe.Pointer(&f.native)
}

type Extent3D struct {
	native C.VkExtent3D
}

// WrapExtent3D wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapExtent3D(ptr unsafe.Pointer) *Extent3D {
	if ptr == nil {
		return nil
	}

	return (*Extent3D)(ptr)
}

func marshalExtent3D(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapExtent3D(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (e *Extent3D) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

type ImageFormatProperties struct {
	native C.VkImageFormatProperties
}

// WrapImageFormatProperties wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapImageFormatProperties(ptr unsafe.Pointer) *ImageFormatProperties {
	if ptr == nil {
		return nil
	}

	return (*ImageFormatProperties)(ptr)
}

func marshalImageFormatProperties(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapImageFormatProperties(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (i *ImageFormatProperties) Native() unsafe.Pointer {
	return unsafe.Pointer(&i.native)
}

type PhysicalDeviceLimits struct {
	native C.VkPhysicalDeviceLimits
}

// WrapPhysicalDeviceLimits wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceLimits(ptr unsafe.Pointer) *PhysicalDeviceLimits {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceLimits)(ptr)
}

func marshalPhysicalDeviceLimits(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceLimits(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceLimits) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PhysicalDeviceSparseProperties struct {
	native C.VkPhysicalDeviceSparseProperties
}

// WrapPhysicalDeviceSparseProperties wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceSparseProperties(ptr unsafe.Pointer) *PhysicalDeviceSparseProperties {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceSparseProperties)(ptr)
}

func marshalPhysicalDeviceSparseProperties(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceSparseProperties(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceSparseProperties) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PhysicalDeviceProperties struct {
	native C.VkPhysicalDeviceProperties
}

// WrapPhysicalDeviceProperties wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceProperties(ptr unsafe.Pointer) *PhysicalDeviceProperties {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceProperties)(ptr)
}

func marshalPhysicalDeviceProperties(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceProperties(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceProperties) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type QueueFamilyProperties struct {
	native C.VkQueueFamilyProperties
}

// WrapQueueFamilyProperties wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapQueueFamilyProperties(ptr unsafe.Pointer) *QueueFamilyProperties {
	if ptr == nil {
		return nil
	}

	return (*QueueFamilyProperties)(ptr)
}

func marshalQueueFamilyProperties(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapQueueFamilyProperties(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (q *QueueFamilyProperties) Native() unsafe.Pointer {
	return unsafe.Pointer(&q.native)
}

type MemoryType struct {
	native C.VkMemoryType
}

// WrapMemoryType wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapMemoryType(ptr unsafe.Pointer) *MemoryType {
	if ptr == nil {
		return nil
	}

	return (*MemoryType)(ptr)
}

func marshalMemoryType(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapMemoryType(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (m *MemoryType) Native() unsafe.Pointer {
	return unsafe.Pointer(&m.native)
}

type MemoryHeap struct {
	native C.VkMemoryHeap
}

// WrapMemoryHeap wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapMemoryHeap(ptr unsafe.Pointer) *MemoryHeap {
	if ptr == nil {
		return nil
	}

	return (*MemoryHeap)(ptr)
}

func marshalMemoryHeap(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapMemoryHeap(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (m *MemoryHeap) Native() unsafe.Pointer {
	return unsafe.Pointer(&m.native)
}

type PhysicalDeviceMemoryProperties struct {
	native C.VkPhysicalDeviceMemoryProperties
}

// WrapPhysicalDeviceMemoryProperties wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceMemoryProperties(ptr unsafe.Pointer) *PhysicalDeviceMemoryProperties {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceMemoryProperties)(ptr)
}

func marshalPhysicalDeviceMemoryProperties(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceMemoryProperties(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceMemoryProperties) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type DeviceQueueCreateInfo struct {
	native C.VkDeviceQueueCreateInfo
}

// WrapDeviceQueueCreateInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDeviceQueueCreateInfo(ptr unsafe.Pointer) *DeviceQueueCreateInfo {
	if ptr == nil {
		return nil
	}

	return (*DeviceQueueCreateInfo)(ptr)
}

func marshalDeviceQueueCreateInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDeviceQueueCreateInfo(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DeviceQueueCreateInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type DeviceCreateInfo struct {
	native C.VkDeviceCreateInfo
}

// WrapDeviceCreateInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDeviceCreateInfo(ptr unsafe.Pointer) *DeviceCreateInfo {
	if ptr == nil {
		return nil
	}

	return (*DeviceCreateInfo)(ptr)
}

func marshalDeviceCreateInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDeviceCreateInfo(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DeviceCreateInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type ExtensionProperties struct {
	native C.VkExtensionProperties
}

// WrapExtensionProperties wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapExtensionProperties(ptr unsafe.Pointer) *ExtensionProperties {
	if ptr == nil {
		return nil
	}

	return (*ExtensionProperties)(ptr)
}

func marshalExtensionProperties(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapExtensionProperties(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (e *ExtensionProperties) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

type LayerProperties struct {
	native C.VkLayerProperties
}

// WrapLayerProperties wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapLayerProperties(ptr unsafe.Pointer) *LayerProperties {
	if ptr == nil {
		return nil
	}

	return (*LayerProperties)(ptr)
}

func marshalLayerProperties(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapLayerProperties(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (l *LayerProperties) Native() unsafe.Pointer {
	return unsafe.Pointer(&l.native)
}

type SubmitInfo struct {
	native C.VkSubmitInfo
}

// WrapSubmitInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSubmitInfo(ptr unsafe.Pointer) *SubmitInfo {
	if ptr == nil {
		return nil
	}

	return (*SubmitInfo)(ptr)
}

func marshalSubmitInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSubmitInfo(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SubmitInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type MemoryAllocateInfo struct {
	native C.VkMemoryAllocateInfo
}

// WrapMemoryAllocateInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapMemoryAllocateInfo(ptr unsafe.Pointer) *MemoryAllocateInfo {
	if ptr == nil {
		return nil
	}

	return (*MemoryAllocateInfo)(ptr)
}

func marshalMemoryAllocateInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapMemoryAllocateInfo(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (m *MemoryAllocateInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(&m.native)
}

type MappedMemoryRange struct {
	native C.VkMappedMemoryRange
}

// WrapMappedMemoryRange wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapMappedMemoryRange(ptr unsafe.Pointer) *MappedMemoryRange {
	if ptr == nil {
		return nil
	}

	return (*MappedMemoryRange)(ptr)
}

func marshalMappedMemoryRange(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapMappedMemoryRange(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (m *MappedMemoryRange) Native() unsafe.Pointer {
	return unsafe.Pointer(&m.native)
}

type MemoryRequirements struct {
	native C.VkMemoryRequirements
}

// WrapMemoryRequirements wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapMemoryRequirements(ptr unsafe.Pointer) *MemoryRequirements {
	if ptr == nil {
		return nil
	}

	return (*MemoryRequirements)(ptr)
}

func marshalMemoryRequirements(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapMemoryRequirements(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (m *MemoryRequirements) Native() unsafe.Pointer {
	return unsafe.Pointer(&m.native)
}

type SparseImageFormatProperties struct {
	native C.VkSparseImageFormatProperties
}

// WrapSparseImageFormatProperties wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSparseImageFormatProperties(ptr unsafe.Pointer) *SparseImageFormatProperties {
	if ptr == nil {
		return nil
	}

	return (*SparseImageFormatProperties)(ptr)
}

func marshalSparseImageFormatProperties(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSparseImageFormatProperties(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SparseImageFormatProperties) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type SparseImageMemoryRequirements struct {
	native C.VkSparseImageMemoryRequirements
}

// WrapSparseImageMemoryRequirements wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSparseImageMemoryRequirements(ptr unsafe.Pointer) *SparseImageMemoryRequirements {
	if ptr == nil {
		return nil
	}

	return (*SparseImageMemoryRequirements)(ptr)
}

func marshalSparseImageMemoryRequirements(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSparseImageMemoryRequirements(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SparseImageMemoryRequirements) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type SparseMemoryBind struct {
	native C.VkSparseMemoryBind
}

// WrapSparseMemoryBind wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSparseMemoryBind(ptr unsafe.Pointer) *SparseMemoryBind {
	if ptr == nil {
		return nil
	}

	return (*SparseMemoryBind)(ptr)
}

func marshalSparseMemoryBind(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSparseMemoryBind(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SparseMemoryBind) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type SparseBufferMemoryBindInfo struct {
	native C.VkSparseBufferMemoryBindInfo
}

// WrapSparseBufferMemoryBindInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSparseBufferMemoryBindInfo(ptr unsafe.Pointer) *SparseBufferMemoryBindInfo {
	if ptr == nil {
		return nil
	}

	return (*SparseBufferMemoryBindInfo)(ptr)
}

func marshalSparseBufferMemoryBindInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSparseBufferMemoryBindInfo(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SparseBufferMemoryBindInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type SparseImageOpaqueMemoryBindInfo struct {
	native C.VkSparseImageOpaqueMemoryBindInfo
}

// WrapSparseImageOpaqueMemoryBindInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSparseImageOpaqueMemoryBindInfo(ptr unsafe.Pointer) *SparseImageOpaqueMemoryBindInfo {
	if ptr == nil {
		return nil
	}

	return (*SparseImageOpaqueMemoryBindInfo)(ptr)
}

func marshalSparseImageOpaqueMemoryBindInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSparseImageOpaqueMemoryBindInfo(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SparseImageOpaqueMemoryBindInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type ImageSubresource struct {
	native C.VkImageSubresource
}

// WrapImageSubresource wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapImageSubresource(ptr unsafe.Pointer) *ImageSubresource {
	if ptr == nil {
		return nil
	}

	return (*ImageSubresource)(ptr)
}

func marshalImageSubresource(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapImageSubresource(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (i *ImageSubresource) Native() unsafe.Pointer {
	return unsafe.Pointer(&i.native)
}

type Offset3D struct {
	native C.VkOffset3D
}

// WrapOffset3D wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapOffset3D(ptr unsafe.Pointer) *Offset3D {
	if ptr == nil {
		return nil
	}

	return (*Offset3D)(ptr)
}

func marshalOffset3D(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapOffset3D(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (o *Offset3D) Native() unsafe.Pointer {
	return unsafe.Pointer(&o.native)
}

type SparseImageMemoryBind struct {
	native C.VkSparseImageMemoryBind
}

// WrapSparseImageMemoryBind wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSparseImageMemoryBind(ptr unsafe.Pointer) *SparseImageMemoryBind {
	if ptr == nil {
		return nil
	}

	return (*SparseImageMemoryBind)(ptr)
}

func marshalSparseImageMemoryBind(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSparseImageMemoryBind(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SparseImageMemoryBind) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type SparseImageMemoryBindInfo struct {
	native C.VkSparseImageMemoryBindInfo
}

// WrapSparseImageMemoryBindInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSparseImageMemoryBindInfo(ptr unsafe.Pointer) *SparseImageMemoryBindInfo {
	if ptr == nil {
		return nil
	}

	return (*SparseImageMemoryBindInfo)(ptr)
}

func marshalSparseImageMemoryBindInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSparseImageMemoryBindInfo(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SparseImageMemoryBindInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type BindSparseInfo struct {
	native C.VkBindSparseInfo
}

// WrapBindSparseInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapBindSparseInfo(ptr unsafe.Pointer) *BindSparseInfo {
	if ptr == nil {
		return nil
	}

	return (*BindSparseInfo)(ptr)
}

func marshalBindSparseInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapBindSparseInfo(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (b *BindSparseInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(&b.native)
}

type FenceCreateInfo struct {
	native C.VkFenceCreateInfo
}

// WrapFenceCreateInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapFenceCreateInfo(ptr unsafe.Pointer) *FenceCreateInfo {
	if ptr == nil {
		return nil
	}

	return (*FenceCreateInfo)(ptr)
}

func marshalFenceCreateInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapFenceCreateInfo(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (f *FenceCreateInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(&f.native)
}

type SemaphoreCreateInfo struct {
	native C.VkSemaphoreCreateInfo
}

// WrapSemaphoreCreateInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSemaphoreCreateInfo(ptr unsafe.Pointer) *SemaphoreCreateInfo {
	if ptr == nil {
		return nil
	}

	return (*SemaphoreCreateInfo)(ptr)
}

func marshalSemaphoreCreateInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSemaphoreCreateInfo(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SemaphoreCreateInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type EventCreateInfo struct {
	native C.VkEventCreateInfo
}

// WrapEventCreateInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapEventCreateInfo(ptr unsafe.Pointer) *EventCreateInfo {
	if ptr == nil {
		return nil
	}

	return (*EventCreateInfo)(ptr)
}

func marshalEventCreateInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapEventCreateInfo(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (e *EventCreateInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

type QueryPoolCreateInfo struct {
	native C.VkQueryPoolCreateInfo
}

// WrapQueryPoolCreateInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapQueryPoolCreateInfo(ptr unsafe.Pointer) *QueryPoolCreateInfo {
	if ptr == nil {
		return nil
	}

	return (*QueryPoolCreateInfo)(ptr)
}

func marshalQueryPoolCreateInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapQueryPoolCreateInfo(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (q *QueryPoolCreateInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(&q.native)
}

type BufferCreateInfo struct {
	native C.VkBufferCreateInfo
}

// WrapBufferCreateInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapBufferCreateInfo(ptr unsafe.Pointer) *BufferCreateInfo {
	if ptr == nil {
		return nil
	}

	return (*BufferCreateInfo)(ptr)
}

func marshalBufferCreateInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapBufferCreateInfo(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (b *BufferCreateInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(&b.native)
}

type BufferViewCreateInfo struct {
	native C.VkBufferViewCreateInfo
}

// WrapBufferViewCreateInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapBufferViewCreateInfo(ptr unsafe.Pointer) *BufferViewCreateInfo {
	if ptr == nil {
		return nil
	}

	return (*BufferViewCreateInfo)(ptr)
}

func marshalBufferViewCreateInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapBufferViewCreateInfo(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (b *BufferViewCreateInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(&b.native)
}

type ImageCreateInfo struct {
	native C.VkImageCreateInfo
}

// WrapImageCreateInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapImageCreateInfo(ptr unsafe.Pointer) *ImageCreateInfo {
	if ptr == nil {
		return nil
	}

	return (*ImageCreateInfo)(ptr)
}

func marshalImageCreateInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapImageCreateInfo(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (i *ImageCreateInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(&i.native)
}

type SubresourceLayout struct {
	native C.VkSubresourceLayout
}

// WrapSubresourceLayout wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSubresourceLayout(ptr unsafe.Pointer) *SubresourceLayout {
	if ptr == nil {
		return nil
	}

	return (*SubresourceLayout)(ptr)
}

func marshalSubresourceLayout(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSubresourceLayout(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SubresourceLayout) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type ComponentMapping struct {
	native C.VkComponentMapping
}

// WrapComponentMapping wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapComponentMapping(ptr unsafe.Pointer) *ComponentMapping {
	if ptr == nil {
		return nil
	}

	return (*ComponentMapping)(ptr)
}

func marshalComponentMapping(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapComponentMapping(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (c *ComponentMapping) Native() unsafe.Pointer {
	return unsafe.Pointer(&c.native)
}

type ImageSubresourceRange struct {
	native C.VkImageSubresourceRange
}

// WrapImageSubresourceRange wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapImageSubresourceRange(ptr unsafe.Pointer) *ImageSubresourceRange {
	if ptr == nil {
		return nil
	}

	return (*ImageSubresourceRange)(ptr)
}

func marshalImageSubresourceRange(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapImageSubresourceRange(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (i *ImageSubresourceRange) Native() unsafe.Pointer {
	return unsafe.Pointer(&i.native)
}

type ImageViewCreateInfo struct {
	native C.VkImageViewCreateInfo
}

// WrapImageViewCreateInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapImageViewCreateInfo(ptr unsafe.Pointer) *ImageViewCreateInfo {
	if ptr == nil {
		return nil
	}

	return (*ImageViewCreateInfo)(ptr)
}

func marshalImageViewCreateInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapImageViewCreateInfo(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (i *ImageViewCreateInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(&i.native)
}

type ShaderModuleCreateInfo struct {
	native C.VkShaderModuleCreateInfo
}

// WrapShaderModuleCreateInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapShaderModuleCreateInfo(ptr unsafe.Pointer) *ShaderModuleCreateInfo {
	if ptr == nil {
		return nil
	}

	return (*ShaderModuleCreateInfo)(ptr)
}

func marshalShaderModuleCreateInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapShaderModuleCreateInfo(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *ShaderModuleCreateInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type PipelineCacheCreateInfo struct {
	native C.VkPipelineCacheCreateInfo
}

// WrapPipelineCacheCreateInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPipelineCacheCreateInfo(ptr unsafe.Pointer) *PipelineCacheCreateInfo {
	if ptr == nil {
		return nil
	}

	return (*PipelineCacheCreateInfo)(ptr)
}

func marshalPipelineCacheCreateInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPipelineCacheCreateInfo(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PipelineCacheCreateInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type SpecializationMapEntry struct {
	native C.VkSpecializationMapEntry
}

// WrapSpecializationMapEntry wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSpecializationMapEntry(ptr unsafe.Pointer) *SpecializationMapEntry {
	if ptr == nil {
		return nil
	}

	return (*SpecializationMapEntry)(ptr)
}

func marshalSpecializationMapEntry(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSpecializationMapEntry(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SpecializationMapEntry) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type SpecializationInfo struct {
	native C.VkSpecializationInfo
}

// WrapSpecializationInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSpecializationInfo(ptr unsafe.Pointer) *SpecializationInfo {
	if ptr == nil {
		return nil
	}

	return (*SpecializationInfo)(ptr)
}

func marshalSpecializationInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSpecializationInfo(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SpecializationInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type PipelineShaderStageCreateInfo struct {
	native C.VkPipelineShaderStageCreateInfo
}

// WrapPipelineShaderStageCreateInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPipelineShaderStageCreateInfo(ptr unsafe.Pointer) *PipelineShaderStageCreateInfo {
	if ptr == nil {
		return nil
	}

	return (*PipelineShaderStageCreateInfo)(ptr)
}

func marshalPipelineShaderStageCreateInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPipelineShaderStageCreateInfo(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PipelineShaderStageCreateInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type VertexInputBindingDescription struct {
	native C.VkVertexInputBindingDescription
}

// WrapVertexInputBindingDescription wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapVertexInputBindingDescription(ptr unsafe.Pointer) *VertexInputBindingDescription {
	if ptr == nil {
		return nil
	}

	return (*VertexInputBindingDescription)(ptr)
}

func marshalVertexInputBindingDescription(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapVertexInputBindingDescription(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (v *VertexInputBindingDescription) Native() unsafe.Pointer {
	return unsafe.Pointer(&v.native)
}

type VertexInputAttributeDescription struct {
	native C.VkVertexInputAttributeDescription
}

// WrapVertexInputAttributeDescription wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapVertexInputAttributeDescription(ptr unsafe.Pointer) *VertexInputAttributeDescription {
	if ptr == nil {
		return nil
	}

	return (*VertexInputAttributeDescription)(ptr)
}

func marshalVertexInputAttributeDescription(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapVertexInputAttributeDescription(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (v *VertexInputAttributeDescription) Native() unsafe.Pointer {
	return unsafe.Pointer(&v.native)
}

type PipelineVertexInputStateCreateInfo struct {
	native C.VkPipelineVertexInputStateCreateInfo
}

// WrapPipelineVertexInputStateCreateInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPipelineVertexInputStateCreateInfo(ptr unsafe.Pointer) *PipelineVertexInputStateCreateInfo {
	if ptr == nil {
		return nil
	}

	return (*PipelineVertexInputStateCreateInfo)(ptr)
}

func marshalPipelineVertexInputStateCreateInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPipelineVertexInputStateCreateInfo(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PipelineVertexInputStateCreateInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PipelineInputAssemblyStateCreateInfo struct {
	native C.VkPipelineInputAssemblyStateCreateInfo
}

// WrapPipelineInputAssemblyStateCreateInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPipelineInputAssemblyStateCreateInfo(ptr unsafe.Pointer) *PipelineInputAssemblyStateCreateInfo {
	if ptr == nil {
		return nil
	}

	return (*PipelineInputAssemblyStateCreateInfo)(ptr)
}

func marshalPipelineInputAssemblyStateCreateInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPipelineInputAssemblyStateCreateInfo(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PipelineInputAssemblyStateCreateInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PipelineTessellationStateCreateInfo struct {
	native C.VkPipelineTessellationStateCreateInfo
}

// WrapPipelineTessellationStateCreateInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPipelineTessellationStateCreateInfo(ptr unsafe.Pointer) *PipelineTessellationStateCreateInfo {
	if ptr == nil {
		return nil
	}

	return (*PipelineTessellationStateCreateInfo)(ptr)
}

func marshalPipelineTessellationStateCreateInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPipelineTessellationStateCreateInfo(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PipelineTessellationStateCreateInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type Viewport struct {
	native C.VkViewport
}

// WrapViewport wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapViewport(ptr unsafe.Pointer) *Viewport {
	if ptr == nil {
		return nil
	}

	return (*Viewport)(ptr)
}

func marshalViewport(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapViewport(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (v *Viewport) Native() unsafe.Pointer {
	return unsafe.Pointer(&v.native)
}

type Offset2D struct {
	native C.VkOffset2D
}

// WrapOffset2D wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapOffset2D(ptr unsafe.Pointer) *Offset2D {
	if ptr == nil {
		return nil
	}

	return (*Offset2D)(ptr)
}

func marshalOffset2D(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapOffset2D(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (o *Offset2D) Native() unsafe.Pointer {
	return unsafe.Pointer(&o.native)
}

type Extent2D struct {
	native C.VkExtent2D
}

// WrapExtent2D wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapExtent2D(ptr unsafe.Pointer) *Extent2D {
	if ptr == nil {
		return nil
	}

	return (*Extent2D)(ptr)
}

func marshalExtent2D(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapExtent2D(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (e *Extent2D) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

type Rect2D struct {
	native C.VkRect2D
}

// WrapRect2D wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapRect2D(ptr unsafe.Pointer) *Rect2D {
	if ptr == nil {
		return nil
	}

	return (*Rect2D)(ptr)
}

func marshalRect2D(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapRect2D(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (r *Rect2D) Native() unsafe.Pointer {
	return unsafe.Pointer(&r.native)
}

type PipelineViewportStateCreateInfo struct {
	native C.VkPipelineViewportStateCreateInfo
}

// WrapPipelineViewportStateCreateInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPipelineViewportStateCreateInfo(ptr unsafe.Pointer) *PipelineViewportStateCreateInfo {
	if ptr == nil {
		return nil
	}

	return (*PipelineViewportStateCreateInfo)(ptr)
}

func marshalPipelineViewportStateCreateInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPipelineViewportStateCreateInfo(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PipelineViewportStateCreateInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PipelineRasterizationStateCreateInfo struct {
	native C.VkPipelineRasterizationStateCreateInfo
}

// WrapPipelineRasterizationStateCreateInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPipelineRasterizationStateCreateInfo(ptr unsafe.Pointer) *PipelineRasterizationStateCreateInfo {
	if ptr == nil {
		return nil
	}

	return (*PipelineRasterizationStateCreateInfo)(ptr)
}

func marshalPipelineRasterizationStateCreateInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPipelineRasterizationStateCreateInfo(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PipelineRasterizationStateCreateInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PipelineMultisampleStateCreateInfo struct {
	native C.VkPipelineMultisampleStateCreateInfo
}

// WrapPipelineMultisampleStateCreateInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPipelineMultisampleStateCreateInfo(ptr unsafe.Pointer) *PipelineMultisampleStateCreateInfo {
	if ptr == nil {
		return nil
	}

	return (*PipelineMultisampleStateCreateInfo)(ptr)
}

func marshalPipelineMultisampleStateCreateInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPipelineMultisampleStateCreateInfo(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PipelineMultisampleStateCreateInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type StencilOpState struct {
	native C.VkStencilOpState
}

// WrapStencilOpState wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapStencilOpState(ptr unsafe.Pointer) *StencilOpState {
	if ptr == nil {
		return nil
	}

	return (*StencilOpState)(ptr)
}

func marshalStencilOpState(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapStencilOpState(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *StencilOpState) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type PipelineDepthStencilStateCreateInfo struct {
	native C.VkPipelineDepthStencilStateCreateInfo
}

// WrapPipelineDepthStencilStateCreateInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPipelineDepthStencilStateCreateInfo(ptr unsafe.Pointer) *PipelineDepthStencilStateCreateInfo {
	if ptr == nil {
		return nil
	}

	return (*PipelineDepthStencilStateCreateInfo)(ptr)
}

func marshalPipelineDepthStencilStateCreateInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPipelineDepthStencilStateCreateInfo(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PipelineDepthStencilStateCreateInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PipelineColorBlendAttachmentState struct {
	native C.VkPipelineColorBlendAttachmentState
}

// WrapPipelineColorBlendAttachmentState wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPipelineColorBlendAttachmentState(ptr unsafe.Pointer) *PipelineColorBlendAttachmentState {
	if ptr == nil {
		return nil
	}

	return (*PipelineColorBlendAttachmentState)(ptr)
}

func marshalPipelineColorBlendAttachmentState(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPipelineColorBlendAttachmentState(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PipelineColorBlendAttachmentState) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PipelineColorBlendStateCreateInfo struct {
	native C.VkPipelineColorBlendStateCreateInfo
}

// WrapPipelineColorBlendStateCreateInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPipelineColorBlendStateCreateInfo(ptr unsafe.Pointer) *PipelineColorBlendStateCreateInfo {
	if ptr == nil {
		return nil
	}

	return (*PipelineColorBlendStateCreateInfo)(ptr)
}

func marshalPipelineColorBlendStateCreateInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPipelineColorBlendStateCreateInfo(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PipelineColorBlendStateCreateInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PipelineDynamicStateCreateInfo struct {
	native C.VkPipelineDynamicStateCreateInfo
}

// WrapPipelineDynamicStateCreateInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPipelineDynamicStateCreateInfo(ptr unsafe.Pointer) *PipelineDynamicStateCreateInfo {
	if ptr == nil {
		return nil
	}

	return (*PipelineDynamicStateCreateInfo)(ptr)
}

func marshalPipelineDynamicStateCreateInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPipelineDynamicStateCreateInfo(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PipelineDynamicStateCreateInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type GraphicsPipelineCreateInfo struct {
	native C.VkGraphicsPipelineCreateInfo
}

// WrapGraphicsPipelineCreateInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapGraphicsPipelineCreateInfo(ptr unsafe.Pointer) *GraphicsPipelineCreateInfo {
	if ptr == nil {
		return nil
	}

	return (*GraphicsPipelineCreateInfo)(ptr)
}

func marshalGraphicsPipelineCreateInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapGraphicsPipelineCreateInfo(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (g *GraphicsPipelineCreateInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(&g.native)
}

type ComputePipelineCreateInfo struct {
	native C.VkComputePipelineCreateInfo
}

// WrapComputePipelineCreateInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapComputePipelineCreateInfo(ptr unsafe.Pointer) *ComputePipelineCreateInfo {
	if ptr == nil {
		return nil
	}

	return (*ComputePipelineCreateInfo)(ptr)
}

func marshalComputePipelineCreateInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapComputePipelineCreateInfo(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (c *ComputePipelineCreateInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(&c.native)
}

type PushConstantRange struct {
	native C.VkPushConstantRange
}

// WrapPushConstantRange wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPushConstantRange(ptr unsafe.Pointer) *PushConstantRange {
	if ptr == nil {
		return nil
	}

	return (*PushConstantRange)(ptr)
}

func marshalPushConstantRange(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPushConstantRange(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PushConstantRange) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PipelineLayoutCreateInfo struct {
	native C.VkPipelineLayoutCreateInfo
}

// WrapPipelineLayoutCreateInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPipelineLayoutCreateInfo(ptr unsafe.Pointer) *PipelineLayoutCreateInfo {
	if ptr == nil {
		return nil
	}

	return (*PipelineLayoutCreateInfo)(ptr)
}

func marshalPipelineLayoutCreateInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPipelineLayoutCreateInfo(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PipelineLayoutCreateInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type SamplerCreateInfo struct {
	native C.VkSamplerCreateInfo
}

// WrapSamplerCreateInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSamplerCreateInfo(ptr unsafe.Pointer) *SamplerCreateInfo {
	if ptr == nil {
		return nil
	}

	return (*SamplerCreateInfo)(ptr)
}

func marshalSamplerCreateInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSamplerCreateInfo(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SamplerCreateInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type DescriptorSetLayoutBinding struct {
	native C.VkDescriptorSetLayoutBinding
}

// WrapDescriptorSetLayoutBinding wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDescriptorSetLayoutBinding(ptr unsafe.Pointer) *DescriptorSetLayoutBinding {
	if ptr == nil {
		return nil
	}

	return (*DescriptorSetLayoutBinding)(ptr)
}

func marshalDescriptorSetLayoutBinding(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDescriptorSetLayoutBinding(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DescriptorSetLayoutBinding) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type DescriptorSetLayoutCreateInfo struct {
	native C.VkDescriptorSetLayoutCreateInfo
}

// WrapDescriptorSetLayoutCreateInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDescriptorSetLayoutCreateInfo(ptr unsafe.Pointer) *DescriptorSetLayoutCreateInfo {
	if ptr == nil {
		return nil
	}

	return (*DescriptorSetLayoutCreateInfo)(ptr)
}

func marshalDescriptorSetLayoutCreateInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDescriptorSetLayoutCreateInfo(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DescriptorSetLayoutCreateInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type DescriptorPoolSize struct {
	native C.VkDescriptorPoolSize
}

// WrapDescriptorPoolSize wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDescriptorPoolSize(ptr unsafe.Pointer) *DescriptorPoolSize {
	if ptr == nil {
		return nil
	}

	return (*DescriptorPoolSize)(ptr)
}

func marshalDescriptorPoolSize(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDescriptorPoolSize(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DescriptorPoolSize) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type DescriptorPoolCreateInfo struct {
	native C.VkDescriptorPoolCreateInfo
}

// WrapDescriptorPoolCreateInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDescriptorPoolCreateInfo(ptr unsafe.Pointer) *DescriptorPoolCreateInfo {
	if ptr == nil {
		return nil
	}

	return (*DescriptorPoolCreateInfo)(ptr)
}

func marshalDescriptorPoolCreateInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDescriptorPoolCreateInfo(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DescriptorPoolCreateInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type DescriptorSetAllocateInfo struct {
	native C.VkDescriptorSetAllocateInfo
}

// WrapDescriptorSetAllocateInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDescriptorSetAllocateInfo(ptr unsafe.Pointer) *DescriptorSetAllocateInfo {
	if ptr == nil {
		return nil
	}

	return (*DescriptorSetAllocateInfo)(ptr)
}

func marshalDescriptorSetAllocateInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDescriptorSetAllocateInfo(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DescriptorSetAllocateInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type DescriptorImageInfo struct {
	native C.VkDescriptorImageInfo
}

// WrapDescriptorImageInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDescriptorImageInfo(ptr unsafe.Pointer) *DescriptorImageInfo {
	if ptr == nil {
		return nil
	}

	return (*DescriptorImageInfo)(ptr)
}

func marshalDescriptorImageInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDescriptorImageInfo(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DescriptorImageInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type DescriptorBufferInfo struct {
	native C.VkDescriptorBufferInfo
}

// WrapDescriptorBufferInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDescriptorBufferInfo(ptr unsafe.Pointer) *DescriptorBufferInfo {
	if ptr == nil {
		return nil
	}

	return (*DescriptorBufferInfo)(ptr)
}

func marshalDescriptorBufferInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDescriptorBufferInfo(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DescriptorBufferInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type WriteDescriptorSet struct {
	native C.VkWriteDescriptorSet
}

// WrapWriteDescriptorSet wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapWriteDescriptorSet(ptr unsafe.Pointer) *WriteDescriptorSet {
	if ptr == nil {
		return nil
	}

	return (*WriteDescriptorSet)(ptr)
}

func marshalWriteDescriptorSet(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapWriteDescriptorSet(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (w *WriteDescriptorSet) Native() unsafe.Pointer {
	return unsafe.Pointer(&w.native)
}

type CopyDescriptorSet struct {
	native C.VkCopyDescriptorSet
}

// WrapCopyDescriptorSet wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapCopyDescriptorSet(ptr unsafe.Pointer) *CopyDescriptorSet {
	if ptr == nil {
		return nil
	}

	return (*CopyDescriptorSet)(ptr)
}

func marshalCopyDescriptorSet(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapCopyDescriptorSet(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (c *CopyDescriptorSet) Native() unsafe.Pointer {
	return unsafe.Pointer(&c.native)
}

type FramebufferCreateInfo struct {
	native C.VkFramebufferCreateInfo
}

// WrapFramebufferCreateInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapFramebufferCreateInfo(ptr unsafe.Pointer) *FramebufferCreateInfo {
	if ptr == nil {
		return nil
	}

	return (*FramebufferCreateInfo)(ptr)
}

func marshalFramebufferCreateInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapFramebufferCreateInfo(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (f *FramebufferCreateInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(&f.native)
}

type AttachmentDescription struct {
	native C.VkAttachmentDescription
}

// WrapAttachmentDescription wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapAttachmentDescription(ptr unsafe.Pointer) *AttachmentDescription {
	if ptr == nil {
		return nil
	}

	return (*AttachmentDescription)(ptr)
}

func marshalAttachmentDescription(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapAttachmentDescription(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (a *AttachmentDescription) Native() unsafe.Pointer {
	return unsafe.Pointer(&a.native)
}

type AttachmentReference struct {
	native C.VkAttachmentReference
}

// WrapAttachmentReference wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapAttachmentReference(ptr unsafe.Pointer) *AttachmentReference {
	if ptr == nil {
		return nil
	}

	return (*AttachmentReference)(ptr)
}

func marshalAttachmentReference(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapAttachmentReference(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (a *AttachmentReference) Native() unsafe.Pointer {
	return unsafe.Pointer(&a.native)
}

type SubpassDescription struct {
	native C.VkSubpassDescription
}

// WrapSubpassDescription wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSubpassDescription(ptr unsafe.Pointer) *SubpassDescription {
	if ptr == nil {
		return nil
	}

	return (*SubpassDescription)(ptr)
}

func marshalSubpassDescription(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSubpassDescription(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SubpassDescription) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type SubpassDependency struct {
	native C.VkSubpassDependency
}

// WrapSubpassDependency wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSubpassDependency(ptr unsafe.Pointer) *SubpassDependency {
	if ptr == nil {
		return nil
	}

	return (*SubpassDependency)(ptr)
}

func marshalSubpassDependency(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSubpassDependency(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SubpassDependency) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type RenderPassCreateInfo struct {
	native C.VkRenderPassCreateInfo
}

// WrapRenderPassCreateInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapRenderPassCreateInfo(ptr unsafe.Pointer) *RenderPassCreateInfo {
	if ptr == nil {
		return nil
	}

	return (*RenderPassCreateInfo)(ptr)
}

func marshalRenderPassCreateInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapRenderPassCreateInfo(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (r *RenderPassCreateInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(&r.native)
}

type CommandPoolCreateInfo struct {
	native C.VkCommandPoolCreateInfo
}

// WrapCommandPoolCreateInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapCommandPoolCreateInfo(ptr unsafe.Pointer) *CommandPoolCreateInfo {
	if ptr == nil {
		return nil
	}

	return (*CommandPoolCreateInfo)(ptr)
}

func marshalCommandPoolCreateInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapCommandPoolCreateInfo(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (c *CommandPoolCreateInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(&c.native)
}

type CommandBufferAllocateInfo struct {
	native C.VkCommandBufferAllocateInfo
}

// WrapCommandBufferAllocateInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapCommandBufferAllocateInfo(ptr unsafe.Pointer) *CommandBufferAllocateInfo {
	if ptr == nil {
		return nil
	}

	return (*CommandBufferAllocateInfo)(ptr)
}

func marshalCommandBufferAllocateInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapCommandBufferAllocateInfo(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (c *CommandBufferAllocateInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(&c.native)
}

type CommandBufferInheritanceInfo struct {
	native C.VkCommandBufferInheritanceInfo
}

// WrapCommandBufferInheritanceInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapCommandBufferInheritanceInfo(ptr unsafe.Pointer) *CommandBufferInheritanceInfo {
	if ptr == nil {
		return nil
	}

	return (*CommandBufferInheritanceInfo)(ptr)
}

func marshalCommandBufferInheritanceInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapCommandBufferInheritanceInfo(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (c *CommandBufferInheritanceInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(&c.native)
}

type CommandBufferBeginInfo struct {
	native C.VkCommandBufferBeginInfo
}

// WrapCommandBufferBeginInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapCommandBufferBeginInfo(ptr unsafe.Pointer) *CommandBufferBeginInfo {
	if ptr == nil {
		return nil
	}

	return (*CommandBufferBeginInfo)(ptr)
}

func marshalCommandBufferBeginInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapCommandBufferBeginInfo(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (c *CommandBufferBeginInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(&c.native)
}

type BufferCopy struct {
	native C.VkBufferCopy
}

// WrapBufferCopy wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapBufferCopy(ptr unsafe.Pointer) *BufferCopy {
	if ptr == nil {
		return nil
	}

	return (*BufferCopy)(ptr)
}

func marshalBufferCopy(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapBufferCopy(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (b *BufferCopy) Native() unsafe.Pointer {
	return unsafe.Pointer(&b.native)
}

type ImageSubresourceLayers struct {
	native C.VkImageSubresourceLayers
}

// WrapImageSubresourceLayers wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapImageSubresourceLayers(ptr unsafe.Pointer) *ImageSubresourceLayers {
	if ptr == nil {
		return nil
	}

	return (*ImageSubresourceLayers)(ptr)
}

func marshalImageSubresourceLayers(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapImageSubresourceLayers(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (i *ImageSubresourceLayers) Native() unsafe.Pointer {
	return unsafe.Pointer(&i.native)
}

type ImageCopy struct {
	native C.VkImageCopy
}

// WrapImageCopy wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapImageCopy(ptr unsafe.Pointer) *ImageCopy {
	if ptr == nil {
		return nil
	}

	return (*ImageCopy)(ptr)
}

func marshalImageCopy(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapImageCopy(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (i *ImageCopy) Native() unsafe.Pointer {
	return unsafe.Pointer(&i.native)
}

type ImageBlit struct {
	native C.VkImageBlit
}

// WrapImageBlit wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapImageBlit(ptr unsafe.Pointer) *ImageBlit {
	if ptr == nil {
		return nil
	}

	return (*ImageBlit)(ptr)
}

func marshalImageBlit(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapImageBlit(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (i *ImageBlit) Native() unsafe.Pointer {
	return unsafe.Pointer(&i.native)
}

type BufferImageCopy struct {
	native C.VkBufferImageCopy
}

// WrapBufferImageCopy wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapBufferImageCopy(ptr unsafe.Pointer) *BufferImageCopy {
	if ptr == nil {
		return nil
	}

	return (*BufferImageCopy)(ptr)
}

func marshalBufferImageCopy(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapBufferImageCopy(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (b *BufferImageCopy) Native() unsafe.Pointer {
	return unsafe.Pointer(&b.native)
}

type ClearColorValue struct {
	native C.VkClearColorValue
}

// WrapClearColorValue wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapClearColorValue(ptr unsafe.Pointer) *ClearColorValue {
	if ptr == nil {
		return nil
	}

	return (*ClearColorValue)(ptr)
}

func marshalClearColorValue(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapClearColorValue(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (c *ClearColorValue) Native() unsafe.Pointer {
	return unsafe.Pointer(&c.native)
}

type ClearDepthStencilValue struct {
	native C.VkClearDepthStencilValue
}

// WrapClearDepthStencilValue wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapClearDepthStencilValue(ptr unsafe.Pointer) *ClearDepthStencilValue {
	if ptr == nil {
		return nil
	}

	return (*ClearDepthStencilValue)(ptr)
}

func marshalClearDepthStencilValue(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapClearDepthStencilValue(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (c *ClearDepthStencilValue) Native() unsafe.Pointer {
	return unsafe.Pointer(&c.native)
}

type ClearValue struct {
	native C.VkClearValue
}

// WrapClearValue wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapClearValue(ptr unsafe.Pointer) *ClearValue {
	if ptr == nil {
		return nil
	}

	return (*ClearValue)(ptr)
}

func marshalClearValue(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapClearValue(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (c *ClearValue) Native() unsafe.Pointer {
	return unsafe.Pointer(&c.native)
}

type ClearAttachment struct {
	native C.VkClearAttachment
}

// WrapClearAttachment wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapClearAttachment(ptr unsafe.Pointer) *ClearAttachment {
	if ptr == nil {
		return nil
	}

	return (*ClearAttachment)(ptr)
}

func marshalClearAttachment(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapClearAttachment(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (c *ClearAttachment) Native() unsafe.Pointer {
	return unsafe.Pointer(&c.native)
}

type ClearRect struct {
	native C.VkClearRect
}

// WrapClearRect wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapClearRect(ptr unsafe.Pointer) *ClearRect {
	if ptr == nil {
		return nil
	}

	return (*ClearRect)(ptr)
}

func marshalClearRect(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapClearRect(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (c *ClearRect) Native() unsafe.Pointer {
	return unsafe.Pointer(&c.native)
}

type ImageResolve struct {
	native C.VkImageResolve
}

// WrapImageResolve wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapImageResolve(ptr unsafe.Pointer) *ImageResolve {
	if ptr == nil {
		return nil
	}

	return (*ImageResolve)(ptr)
}

func marshalImageResolve(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapImageResolve(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (i *ImageResolve) Native() unsafe.Pointer {
	return unsafe.Pointer(&i.native)
}

type MemoryBarrier struct {
	native C.VkMemoryBarrier
}

// WrapMemoryBarrier wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapMemoryBarrier(ptr unsafe.Pointer) *MemoryBarrier {
	if ptr == nil {
		return nil
	}

	return (*MemoryBarrier)(ptr)
}

func marshalMemoryBarrier(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapMemoryBarrier(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (m *MemoryBarrier) Native() unsafe.Pointer {
	return unsafe.Pointer(&m.native)
}

type BufferMemoryBarrier struct {
	native C.VkBufferMemoryBarrier
}

// WrapBufferMemoryBarrier wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapBufferMemoryBarrier(ptr unsafe.Pointer) *BufferMemoryBarrier {
	if ptr == nil {
		return nil
	}

	return (*BufferMemoryBarrier)(ptr)
}

func marshalBufferMemoryBarrier(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapBufferMemoryBarrier(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (b *BufferMemoryBarrier) Native() unsafe.Pointer {
	return unsafe.Pointer(&b.native)
}

type ImageMemoryBarrier struct {
	native C.VkImageMemoryBarrier
}

// WrapImageMemoryBarrier wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapImageMemoryBarrier(ptr unsafe.Pointer) *ImageMemoryBarrier {
	if ptr == nil {
		return nil
	}

	return (*ImageMemoryBarrier)(ptr)
}

func marshalImageMemoryBarrier(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapImageMemoryBarrier(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (i *ImageMemoryBarrier) Native() unsafe.Pointer {
	return unsafe.Pointer(&i.native)
}

type RenderPassBeginInfo struct {
	native C.VkRenderPassBeginInfo
}

// WrapRenderPassBeginInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapRenderPassBeginInfo(ptr unsafe.Pointer) *RenderPassBeginInfo {
	if ptr == nil {
		return nil
	}

	return (*RenderPassBeginInfo)(ptr)
}

func marshalRenderPassBeginInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapRenderPassBeginInfo(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (r *RenderPassBeginInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(&r.native)
}

type DispatchIndirectCommand struct {
	native C.VkDispatchIndirectCommand
}

// WrapDispatchIndirectCommand wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDispatchIndirectCommand(ptr unsafe.Pointer) *DispatchIndirectCommand {
	if ptr == nil {
		return nil
	}

	return (*DispatchIndirectCommand)(ptr)
}

func marshalDispatchIndirectCommand(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDispatchIndirectCommand(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DispatchIndirectCommand) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type DrawIndexedIndirectCommand struct {
	native C.VkDrawIndexedIndirectCommand
}

// WrapDrawIndexedIndirectCommand wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDrawIndexedIndirectCommand(ptr unsafe.Pointer) *DrawIndexedIndirectCommand {
	if ptr == nil {
		return nil
	}

	return (*DrawIndexedIndirectCommand)(ptr)
}

func marshalDrawIndexedIndirectCommand(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDrawIndexedIndirectCommand(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DrawIndexedIndirectCommand) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type DrawIndirectCommand struct {
	native C.VkDrawIndirectCommand
}

// WrapDrawIndirectCommand wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDrawIndirectCommand(ptr unsafe.Pointer) *DrawIndirectCommand {
	if ptr == nil {
		return nil
	}

	return (*DrawIndirectCommand)(ptr)
}

func marshalDrawIndirectCommand(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDrawIndirectCommand(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DrawIndirectCommand) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type BaseOutStructure struct {
	native C.VkBaseOutStructure
}

// WrapBaseOutStructure wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapBaseOutStructure(ptr unsafe.Pointer) *BaseOutStructure {
	if ptr == nil {
		return nil
	}

	return (*BaseOutStructure)(ptr)
}

func marshalBaseOutStructure(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapBaseOutStructure(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (b *BaseOutStructure) Native() unsafe.Pointer {
	return unsafe.Pointer(&b.native)
}

type BaseInStructure struct {
	native C.VkBaseInStructure
}

// WrapBaseInStructure wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapBaseInStructure(ptr unsafe.Pointer) *BaseInStructure {
	if ptr == nil {
		return nil
	}

	return (*BaseInStructure)(ptr)
}

func marshalBaseInStructure(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapBaseInStructure(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (b *BaseInStructure) Native() unsafe.Pointer {
	return unsafe.Pointer(&b.native)
}

type SamplerYcbcrConversion struct {
	native C.VkSamplerYcbcrConversion
}

// WrapSamplerYcbcrConversion wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSamplerYcbcrConversion(ptr unsafe.Pointer) *SamplerYcbcrConversion {
	if ptr == nil {
		return nil
	}

	return (*SamplerYcbcrConversion)(ptr)
}

func marshalSamplerYcbcrConversion(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSamplerYcbcrConversion(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SamplerYcbcrConversion) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type DescriptorUpdateTemplate struct {
	native C.VkDescriptorUpdateTemplate
}

// WrapDescriptorUpdateTemplate wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDescriptorUpdateTemplate(ptr unsafe.Pointer) *DescriptorUpdateTemplate {
	if ptr == nil {
		return nil
	}

	return (*DescriptorUpdateTemplate)(ptr)
}

func marshalDescriptorUpdateTemplate(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDescriptorUpdateTemplate(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DescriptorUpdateTemplate) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type PointClippingBehavior struct {
	native C.VkPointClippingBehavior
}

// WrapPointClippingBehavior wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPointClippingBehavior(ptr unsafe.Pointer) *PointClippingBehavior {
	if ptr == nil {
		return nil
	}

	return (*PointClippingBehavior)(ptr)
}

func marshalPointClippingBehavior(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPointClippingBehavior(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PointClippingBehavior) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type TessellationDomainOrigin struct {
	native C.VkTessellationDomainOrigin
}

// WrapTessellationDomainOrigin wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapTessellationDomainOrigin(ptr unsafe.Pointer) *TessellationDomainOrigin {
	if ptr == nil {
		return nil
	}

	return (*TessellationDomainOrigin)(ptr)
}

func marshalTessellationDomainOrigin(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapTessellationDomainOrigin(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (t *TessellationDomainOrigin) Native() unsafe.Pointer {
	return unsafe.Pointer(&t.native)
}

type SamplerYcbcrModelConversion struct {
	native C.VkSamplerYcbcrModelConversion
}

// WrapSamplerYcbcrModelConversion wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSamplerYcbcrModelConversion(ptr unsafe.Pointer) *SamplerYcbcrModelConversion {
	if ptr == nil {
		return nil
	}

	return (*SamplerYcbcrModelConversion)(ptr)
}

func marshalSamplerYcbcrModelConversion(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSamplerYcbcrModelConversion(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SamplerYcbcrModelConversion) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type SamplerYcbcrRange struct {
	native C.VkSamplerYcbcrRange
}

// WrapSamplerYcbcrRange wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSamplerYcbcrRange(ptr unsafe.Pointer) *SamplerYcbcrRange {
	if ptr == nil {
		return nil
	}

	return (*SamplerYcbcrRange)(ptr)
}

func marshalSamplerYcbcrRange(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSamplerYcbcrRange(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SamplerYcbcrRange) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type ChromaLocation struct {
	native C.VkChromaLocation
}

// WrapChromaLocation wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapChromaLocation(ptr unsafe.Pointer) *ChromaLocation {
	if ptr == nil {
		return nil
	}

	return (*ChromaLocation)(ptr)
}

func marshalChromaLocation(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapChromaLocation(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (c *ChromaLocation) Native() unsafe.Pointer {
	return unsafe.Pointer(&c.native)
}

type DescriptorUpdateTemplateType struct {
	native C.VkDescriptorUpdateTemplateType
}

// WrapDescriptorUpdateTemplateType wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDescriptorUpdateTemplateType(ptr unsafe.Pointer) *DescriptorUpdateTemplateType {
	if ptr == nil {
		return nil
	}

	return (*DescriptorUpdateTemplateType)(ptr)
}

func marshalDescriptorUpdateTemplateType(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDescriptorUpdateTemplateType(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DescriptorUpdateTemplateType) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type SubgroupFeatureFlagBits struct {
	native C.VkSubgroupFeatureFlagBits
}

// WrapSubgroupFeatureFlagBits wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSubgroupFeatureFlagBits(ptr unsafe.Pointer) *SubgroupFeatureFlagBits {
	if ptr == nil {
		return nil
	}

	return (*SubgroupFeatureFlagBits)(ptr)
}

func marshalSubgroupFeatureFlagBits(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSubgroupFeatureFlagBits(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SubgroupFeatureFlagBits) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type SubgroupFeatureFlags struct {
	native C.VkSubgroupFeatureFlags
}

// WrapSubgroupFeatureFlags wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSubgroupFeatureFlags(ptr unsafe.Pointer) *SubgroupFeatureFlags {
	if ptr == nil {
		return nil
	}

	return (*SubgroupFeatureFlags)(ptr)
}

func marshalSubgroupFeatureFlags(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSubgroupFeatureFlags(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SubgroupFeatureFlags) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type PeerMemoryFeatureFlagBits struct {
	native C.VkPeerMemoryFeatureFlagBits
}

// WrapPeerMemoryFeatureFlagBits wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPeerMemoryFeatureFlagBits(ptr unsafe.Pointer) *PeerMemoryFeatureFlagBits {
	if ptr == nil {
		return nil
	}

	return (*PeerMemoryFeatureFlagBits)(ptr)
}

func marshalPeerMemoryFeatureFlagBits(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPeerMemoryFeatureFlagBits(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PeerMemoryFeatureFlagBits) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PeerMemoryFeatureFlags struct {
	native C.VkPeerMemoryFeatureFlags
}

// WrapPeerMemoryFeatureFlags wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPeerMemoryFeatureFlags(ptr unsafe.Pointer) *PeerMemoryFeatureFlags {
	if ptr == nil {
		return nil
	}

	return (*PeerMemoryFeatureFlags)(ptr)
}

func marshalPeerMemoryFeatureFlags(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPeerMemoryFeatureFlags(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PeerMemoryFeatureFlags) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type MemoryAllocateFlagBits struct {
	native C.VkMemoryAllocateFlagBits
}

// WrapMemoryAllocateFlagBits wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapMemoryAllocateFlagBits(ptr unsafe.Pointer) *MemoryAllocateFlagBits {
	if ptr == nil {
		return nil
	}

	return (*MemoryAllocateFlagBits)(ptr)
}

func marshalMemoryAllocateFlagBits(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapMemoryAllocateFlagBits(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (m *MemoryAllocateFlagBits) Native() unsafe.Pointer {
	return unsafe.Pointer(&m.native)
}

type MemoryAllocateFlags struct {
	native C.VkMemoryAllocateFlags
}

// WrapMemoryAllocateFlags wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapMemoryAllocateFlags(ptr unsafe.Pointer) *MemoryAllocateFlags {
	if ptr == nil {
		return nil
	}

	return (*MemoryAllocateFlags)(ptr)
}

func marshalMemoryAllocateFlags(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapMemoryAllocateFlags(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (m *MemoryAllocateFlags) Native() unsafe.Pointer {
	return unsafe.Pointer(&m.native)
}

type CommandPoolTrimFlags struct {
	native C.VkCommandPoolTrimFlags
}

// WrapCommandPoolTrimFlags wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapCommandPoolTrimFlags(ptr unsafe.Pointer) *CommandPoolTrimFlags {
	if ptr == nil {
		return nil
	}

	return (*CommandPoolTrimFlags)(ptr)
}

func marshalCommandPoolTrimFlags(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapCommandPoolTrimFlags(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (c *CommandPoolTrimFlags) Native() unsafe.Pointer {
	return unsafe.Pointer(&c.native)
}

type DescriptorUpdateTemplateCreateFlags struct {
	native C.VkDescriptorUpdateTemplateCreateFlags
}

// WrapDescriptorUpdateTemplateCreateFlags wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDescriptorUpdateTemplateCreateFlags(ptr unsafe.Pointer) *DescriptorUpdateTemplateCreateFlags {
	if ptr == nil {
		return nil
	}

	return (*DescriptorUpdateTemplateCreateFlags)(ptr)
}

func marshalDescriptorUpdateTemplateCreateFlags(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDescriptorUpdateTemplateCreateFlags(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DescriptorUpdateTemplateCreateFlags) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type ExternalMemoryHandleTypeFlagBits struct {
	native C.VkExternalMemoryHandleTypeFlagBits
}

// WrapExternalMemoryHandleTypeFlagBits wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapExternalMemoryHandleTypeFlagBits(ptr unsafe.Pointer) *ExternalMemoryHandleTypeFlagBits {
	if ptr == nil {
		return nil
	}

	return (*ExternalMemoryHandleTypeFlagBits)(ptr)
}

func marshalExternalMemoryHandleTypeFlagBits(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapExternalMemoryHandleTypeFlagBits(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (e *ExternalMemoryHandleTypeFlagBits) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

type ExternalMemoryHandleTypeFlags struct {
	native C.VkExternalMemoryHandleTypeFlags
}

// WrapExternalMemoryHandleTypeFlags wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapExternalMemoryHandleTypeFlags(ptr unsafe.Pointer) *ExternalMemoryHandleTypeFlags {
	if ptr == nil {
		return nil
	}

	return (*ExternalMemoryHandleTypeFlags)(ptr)
}

func marshalExternalMemoryHandleTypeFlags(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapExternalMemoryHandleTypeFlags(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (e *ExternalMemoryHandleTypeFlags) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

type ExternalMemoryFeatureFlagBits struct {
	native C.VkExternalMemoryFeatureFlagBits
}

// WrapExternalMemoryFeatureFlagBits wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapExternalMemoryFeatureFlagBits(ptr unsafe.Pointer) *ExternalMemoryFeatureFlagBits {
	if ptr == nil {
		return nil
	}

	return (*ExternalMemoryFeatureFlagBits)(ptr)
}

func marshalExternalMemoryFeatureFlagBits(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapExternalMemoryFeatureFlagBits(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (e *ExternalMemoryFeatureFlagBits) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

type ExternalMemoryFeatureFlags struct {
	native C.VkExternalMemoryFeatureFlags
}

// WrapExternalMemoryFeatureFlags wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapExternalMemoryFeatureFlags(ptr unsafe.Pointer) *ExternalMemoryFeatureFlags {
	if ptr == nil {
		return nil
	}

	return (*ExternalMemoryFeatureFlags)(ptr)
}

func marshalExternalMemoryFeatureFlags(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapExternalMemoryFeatureFlags(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (e *ExternalMemoryFeatureFlags) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

type ExternalFenceHandleTypeFlagBits struct {
	native C.VkExternalFenceHandleTypeFlagBits
}

// WrapExternalFenceHandleTypeFlagBits wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapExternalFenceHandleTypeFlagBits(ptr unsafe.Pointer) *ExternalFenceHandleTypeFlagBits {
	if ptr == nil {
		return nil
	}

	return (*ExternalFenceHandleTypeFlagBits)(ptr)
}

func marshalExternalFenceHandleTypeFlagBits(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapExternalFenceHandleTypeFlagBits(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (e *ExternalFenceHandleTypeFlagBits) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

type ExternalFenceHandleTypeFlags struct {
	native C.VkExternalFenceHandleTypeFlags
}

// WrapExternalFenceHandleTypeFlags wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapExternalFenceHandleTypeFlags(ptr unsafe.Pointer) *ExternalFenceHandleTypeFlags {
	if ptr == nil {
		return nil
	}

	return (*ExternalFenceHandleTypeFlags)(ptr)
}

func marshalExternalFenceHandleTypeFlags(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapExternalFenceHandleTypeFlags(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (e *ExternalFenceHandleTypeFlags) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

type ExternalFenceFeatureFlagBits struct {
	native C.VkExternalFenceFeatureFlagBits
}

// WrapExternalFenceFeatureFlagBits wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapExternalFenceFeatureFlagBits(ptr unsafe.Pointer) *ExternalFenceFeatureFlagBits {
	if ptr == nil {
		return nil
	}

	return (*ExternalFenceFeatureFlagBits)(ptr)
}

func marshalExternalFenceFeatureFlagBits(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapExternalFenceFeatureFlagBits(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (e *ExternalFenceFeatureFlagBits) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

type ExternalFenceFeatureFlags struct {
	native C.VkExternalFenceFeatureFlags
}

// WrapExternalFenceFeatureFlags wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapExternalFenceFeatureFlags(ptr unsafe.Pointer) *ExternalFenceFeatureFlags {
	if ptr == nil {
		return nil
	}

	return (*ExternalFenceFeatureFlags)(ptr)
}

func marshalExternalFenceFeatureFlags(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapExternalFenceFeatureFlags(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (e *ExternalFenceFeatureFlags) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

type FenceImportFlagBits struct {
	native C.VkFenceImportFlagBits
}

// WrapFenceImportFlagBits wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapFenceImportFlagBits(ptr unsafe.Pointer) *FenceImportFlagBits {
	if ptr == nil {
		return nil
	}

	return (*FenceImportFlagBits)(ptr)
}

func marshalFenceImportFlagBits(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapFenceImportFlagBits(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (f *FenceImportFlagBits) Native() unsafe.Pointer {
	return unsafe.Pointer(&f.native)
}

type FenceImportFlags struct {
	native C.VkFenceImportFlags
}

// WrapFenceImportFlags wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapFenceImportFlags(ptr unsafe.Pointer) *FenceImportFlags {
	if ptr == nil {
		return nil
	}

	return (*FenceImportFlags)(ptr)
}

func marshalFenceImportFlags(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapFenceImportFlags(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (f *FenceImportFlags) Native() unsafe.Pointer {
	return unsafe.Pointer(&f.native)
}

type SemaphoreImportFlagBits struct {
	native C.VkSemaphoreImportFlagBits
}

// WrapSemaphoreImportFlagBits wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSemaphoreImportFlagBits(ptr unsafe.Pointer) *SemaphoreImportFlagBits {
	if ptr == nil {
		return nil
	}

	return (*SemaphoreImportFlagBits)(ptr)
}

func marshalSemaphoreImportFlagBits(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSemaphoreImportFlagBits(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SemaphoreImportFlagBits) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type SemaphoreImportFlags struct {
	native C.VkSemaphoreImportFlags
}

// WrapSemaphoreImportFlags wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSemaphoreImportFlags(ptr unsafe.Pointer) *SemaphoreImportFlags {
	if ptr == nil {
		return nil
	}

	return (*SemaphoreImportFlags)(ptr)
}

func marshalSemaphoreImportFlags(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSemaphoreImportFlags(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SemaphoreImportFlags) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type ExternalSemaphoreHandleTypeFlagBits struct {
	native C.VkExternalSemaphoreHandleTypeFlagBits
}

// WrapExternalSemaphoreHandleTypeFlagBits wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapExternalSemaphoreHandleTypeFlagBits(ptr unsafe.Pointer) *ExternalSemaphoreHandleTypeFlagBits {
	if ptr == nil {
		return nil
	}

	return (*ExternalSemaphoreHandleTypeFlagBits)(ptr)
}

func marshalExternalSemaphoreHandleTypeFlagBits(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapExternalSemaphoreHandleTypeFlagBits(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (e *ExternalSemaphoreHandleTypeFlagBits) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

type ExternalSemaphoreHandleTypeFlags struct {
	native C.VkExternalSemaphoreHandleTypeFlags
}

// WrapExternalSemaphoreHandleTypeFlags wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapExternalSemaphoreHandleTypeFlags(ptr unsafe.Pointer) *ExternalSemaphoreHandleTypeFlags {
	if ptr == nil {
		return nil
	}

	return (*ExternalSemaphoreHandleTypeFlags)(ptr)
}

func marshalExternalSemaphoreHandleTypeFlags(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapExternalSemaphoreHandleTypeFlags(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (e *ExternalSemaphoreHandleTypeFlags) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

type ExternalSemaphoreFeatureFlagBits struct {
	native C.VkExternalSemaphoreFeatureFlagBits
}

// WrapExternalSemaphoreFeatureFlagBits wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapExternalSemaphoreFeatureFlagBits(ptr unsafe.Pointer) *ExternalSemaphoreFeatureFlagBits {
	if ptr == nil {
		return nil
	}

	return (*ExternalSemaphoreFeatureFlagBits)(ptr)
}

func marshalExternalSemaphoreFeatureFlagBits(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapExternalSemaphoreFeatureFlagBits(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (e *ExternalSemaphoreFeatureFlagBits) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

type ExternalSemaphoreFeatureFlags struct {
	native C.VkExternalSemaphoreFeatureFlags
}

// WrapExternalSemaphoreFeatureFlags wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapExternalSemaphoreFeatureFlags(ptr unsafe.Pointer) *ExternalSemaphoreFeatureFlags {
	if ptr == nil {
		return nil
	}

	return (*ExternalSemaphoreFeatureFlags)(ptr)
}

func marshalExternalSemaphoreFeatureFlags(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapExternalSemaphoreFeatureFlags(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (e *ExternalSemaphoreFeatureFlags) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

type PhysicalDeviceSubgroupProperties struct {
	native C.VkPhysicalDeviceSubgroupProperties
}

// WrapPhysicalDeviceSubgroupProperties wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceSubgroupProperties(ptr unsafe.Pointer) *PhysicalDeviceSubgroupProperties {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceSubgroupProperties)(ptr)
}

func marshalPhysicalDeviceSubgroupProperties(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceSubgroupProperties(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceSubgroupProperties) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type BindBufferMemoryInfo struct {
	native C.VkBindBufferMemoryInfo
}

// WrapBindBufferMemoryInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapBindBufferMemoryInfo(ptr unsafe.Pointer) *BindBufferMemoryInfo {
	if ptr == nil {
		return nil
	}

	return (*BindBufferMemoryInfo)(ptr)
}

func marshalBindBufferMemoryInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapBindBufferMemoryInfo(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (b *BindBufferMemoryInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(&b.native)
}

type BindImageMemoryInfo struct {
	native C.VkBindImageMemoryInfo
}

// WrapBindImageMemoryInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapBindImageMemoryInfo(ptr unsafe.Pointer) *BindImageMemoryInfo {
	if ptr == nil {
		return nil
	}

	return (*BindImageMemoryInfo)(ptr)
}

func marshalBindImageMemoryInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapBindImageMemoryInfo(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (b *BindImageMemoryInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(&b.native)
}

type PhysicalDevice16BitStorageFeatures struct {
	native C.VkPhysicalDevice16BitStorageFeatures
}

// WrapPhysicalDevice16BitStorageFeatures wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDevice16BitStorageFeatures(ptr unsafe.Pointer) *PhysicalDevice16BitStorageFeatures {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDevice16BitStorageFeatures)(ptr)
}

func marshalPhysicalDevice16BitStorageFeatures(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDevice16BitStorageFeatures(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDevice16BitStorageFeatures) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type MemoryDedicatedRequirements struct {
	native C.VkMemoryDedicatedRequirements
}

// WrapMemoryDedicatedRequirements wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapMemoryDedicatedRequirements(ptr unsafe.Pointer) *MemoryDedicatedRequirements {
	if ptr == nil {
		return nil
	}

	return (*MemoryDedicatedRequirements)(ptr)
}

func marshalMemoryDedicatedRequirements(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapMemoryDedicatedRequirements(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (m *MemoryDedicatedRequirements) Native() unsafe.Pointer {
	return unsafe.Pointer(&m.native)
}

type MemoryDedicatedAllocateInfo struct {
	native C.VkMemoryDedicatedAllocateInfo
}

// WrapMemoryDedicatedAllocateInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapMemoryDedicatedAllocateInfo(ptr unsafe.Pointer) *MemoryDedicatedAllocateInfo {
	if ptr == nil {
		return nil
	}

	return (*MemoryDedicatedAllocateInfo)(ptr)
}

func marshalMemoryDedicatedAllocateInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapMemoryDedicatedAllocateInfo(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (m *MemoryDedicatedAllocateInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(&m.native)
}

type MemoryAllocateFlagsInfo struct {
	native C.VkMemoryAllocateFlagsInfo
}

// WrapMemoryAllocateFlagsInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapMemoryAllocateFlagsInfo(ptr unsafe.Pointer) *MemoryAllocateFlagsInfo {
	if ptr == nil {
		return nil
	}

	return (*MemoryAllocateFlagsInfo)(ptr)
}

func marshalMemoryAllocateFlagsInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapMemoryAllocateFlagsInfo(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (m *MemoryAllocateFlagsInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(&m.native)
}

type DeviceGroupRenderPassBeginInfo struct {
	native C.VkDeviceGroupRenderPassBeginInfo
}

// WrapDeviceGroupRenderPassBeginInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDeviceGroupRenderPassBeginInfo(ptr unsafe.Pointer) *DeviceGroupRenderPassBeginInfo {
	if ptr == nil {
		return nil
	}

	return (*DeviceGroupRenderPassBeginInfo)(ptr)
}

func marshalDeviceGroupRenderPassBeginInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDeviceGroupRenderPassBeginInfo(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DeviceGroupRenderPassBeginInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type DeviceGroupCommandBufferBeginInfo struct {
	native C.VkDeviceGroupCommandBufferBeginInfo
}

// WrapDeviceGroupCommandBufferBeginInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDeviceGroupCommandBufferBeginInfo(ptr unsafe.Pointer) *DeviceGroupCommandBufferBeginInfo {
	if ptr == nil {
		return nil
	}

	return (*DeviceGroupCommandBufferBeginInfo)(ptr)
}

func marshalDeviceGroupCommandBufferBeginInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDeviceGroupCommandBufferBeginInfo(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DeviceGroupCommandBufferBeginInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type DeviceGroupSubmitInfo struct {
	native C.VkDeviceGroupSubmitInfo
}

// WrapDeviceGroupSubmitInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDeviceGroupSubmitInfo(ptr unsafe.Pointer) *DeviceGroupSubmitInfo {
	if ptr == nil {
		return nil
	}

	return (*DeviceGroupSubmitInfo)(ptr)
}

func marshalDeviceGroupSubmitInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDeviceGroupSubmitInfo(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DeviceGroupSubmitInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type DeviceGroupBindSparseInfo struct {
	native C.VkDeviceGroupBindSparseInfo
}

// WrapDeviceGroupBindSparseInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDeviceGroupBindSparseInfo(ptr unsafe.Pointer) *DeviceGroupBindSparseInfo {
	if ptr == nil {
		return nil
	}

	return (*DeviceGroupBindSparseInfo)(ptr)
}

func marshalDeviceGroupBindSparseInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDeviceGroupBindSparseInfo(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DeviceGroupBindSparseInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type BindBufferMemoryDeviceGroupInfo struct {
	native C.VkBindBufferMemoryDeviceGroupInfo
}

// WrapBindBufferMemoryDeviceGroupInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapBindBufferMemoryDeviceGroupInfo(ptr unsafe.Pointer) *BindBufferMemoryDeviceGroupInfo {
	if ptr == nil {
		return nil
	}

	return (*BindBufferMemoryDeviceGroupInfo)(ptr)
}

func marshalBindBufferMemoryDeviceGroupInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapBindBufferMemoryDeviceGroupInfo(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (b *BindBufferMemoryDeviceGroupInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(&b.native)
}

type BindImageMemoryDeviceGroupInfo struct {
	native C.VkBindImageMemoryDeviceGroupInfo
}

// WrapBindImageMemoryDeviceGroupInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapBindImageMemoryDeviceGroupInfo(ptr unsafe.Pointer) *BindImageMemoryDeviceGroupInfo {
	if ptr == nil {
		return nil
	}

	return (*BindImageMemoryDeviceGroupInfo)(ptr)
}

func marshalBindImageMemoryDeviceGroupInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapBindImageMemoryDeviceGroupInfo(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (b *BindImageMemoryDeviceGroupInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(&b.native)
}

type PhysicalDeviceGroupProperties struct {
	native C.VkPhysicalDeviceGroupProperties
}

// WrapPhysicalDeviceGroupProperties wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceGroupProperties(ptr unsafe.Pointer) *PhysicalDeviceGroupProperties {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceGroupProperties)(ptr)
}

func marshalPhysicalDeviceGroupProperties(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceGroupProperties(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceGroupProperties) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type DeviceGroupDeviceCreateInfo struct {
	native C.VkDeviceGroupDeviceCreateInfo
}

// WrapDeviceGroupDeviceCreateInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDeviceGroupDeviceCreateInfo(ptr unsafe.Pointer) *DeviceGroupDeviceCreateInfo {
	if ptr == nil {
		return nil
	}

	return (*DeviceGroupDeviceCreateInfo)(ptr)
}

func marshalDeviceGroupDeviceCreateInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDeviceGroupDeviceCreateInfo(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DeviceGroupDeviceCreateInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type BufferMemoryRequirementsInfo2 struct {
	native C.VkBufferMemoryRequirementsInfo2
}

// WrapBufferMemoryRequirementsInfo2 wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapBufferMemoryRequirementsInfo2(ptr unsafe.Pointer) *BufferMemoryRequirementsInfo2 {
	if ptr == nil {
		return nil
	}

	return (*BufferMemoryRequirementsInfo2)(ptr)
}

func marshalBufferMemoryRequirementsInfo2(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapBufferMemoryRequirementsInfo2(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (b *BufferMemoryRequirementsInfo2) Native() unsafe.Pointer {
	return unsafe.Pointer(&b.native)
}

type ImageMemoryRequirementsInfo2 struct {
	native C.VkImageMemoryRequirementsInfo2
}

// WrapImageMemoryRequirementsInfo2 wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapImageMemoryRequirementsInfo2(ptr unsafe.Pointer) *ImageMemoryRequirementsInfo2 {
	if ptr == nil {
		return nil
	}

	return (*ImageMemoryRequirementsInfo2)(ptr)
}

func marshalImageMemoryRequirementsInfo2(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapImageMemoryRequirementsInfo2(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (i *ImageMemoryRequirementsInfo2) Native() unsafe.Pointer {
	return unsafe.Pointer(&i.native)
}

type ImageSparseMemoryRequirementsInfo2 struct {
	native C.VkImageSparseMemoryRequirementsInfo2
}

// WrapImageSparseMemoryRequirementsInfo2 wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapImageSparseMemoryRequirementsInfo2(ptr unsafe.Pointer) *ImageSparseMemoryRequirementsInfo2 {
	if ptr == nil {
		return nil
	}

	return (*ImageSparseMemoryRequirementsInfo2)(ptr)
}

func marshalImageSparseMemoryRequirementsInfo2(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapImageSparseMemoryRequirementsInfo2(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (i *ImageSparseMemoryRequirementsInfo2) Native() unsafe.Pointer {
	return unsafe.Pointer(&i.native)
}

type MemoryRequirements2 struct {
	native C.VkMemoryRequirements2
}

// WrapMemoryRequirements2 wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapMemoryRequirements2(ptr unsafe.Pointer) *MemoryRequirements2 {
	if ptr == nil {
		return nil
	}

	return (*MemoryRequirements2)(ptr)
}

func marshalMemoryRequirements2(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapMemoryRequirements2(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (m *MemoryRequirements2) Native() unsafe.Pointer {
	return unsafe.Pointer(&m.native)
}

type MemoryRequirements2KHR struct {
	native C.VkMemoryRequirements2KHR
}

// WrapMemoryRequirements2KHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapMemoryRequirements2KHR(ptr unsafe.Pointer) *MemoryRequirements2KHR {
	if ptr == nil {
		return nil
	}

	return (*MemoryRequirements2KHR)(ptr)
}

func marshalMemoryRequirements2KHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapMemoryRequirements2KHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (m *MemoryRequirements2KHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&m.native)
}

type SparseImageMemoryRequirements2 struct {
	native C.VkSparseImageMemoryRequirements2
}

// WrapSparseImageMemoryRequirements2 wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSparseImageMemoryRequirements2(ptr unsafe.Pointer) *SparseImageMemoryRequirements2 {
	if ptr == nil {
		return nil
	}

	return (*SparseImageMemoryRequirements2)(ptr)
}

func marshalSparseImageMemoryRequirements2(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSparseImageMemoryRequirements2(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SparseImageMemoryRequirements2) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type PhysicalDeviceFeatures2 struct {
	native C.VkPhysicalDeviceFeatures2
}

// WrapPhysicalDeviceFeatures2 wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceFeatures2(ptr unsafe.Pointer) *PhysicalDeviceFeatures2 {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceFeatures2)(ptr)
}

func marshalPhysicalDeviceFeatures2(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceFeatures2(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceFeatures2) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PhysicalDeviceProperties2 struct {
	native C.VkPhysicalDeviceProperties2
}

// WrapPhysicalDeviceProperties2 wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceProperties2(ptr unsafe.Pointer) *PhysicalDeviceProperties2 {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceProperties2)(ptr)
}

func marshalPhysicalDeviceProperties2(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceProperties2(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceProperties2) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type FormatProperties2 struct {
	native C.VkFormatProperties2
}

// WrapFormatProperties2 wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapFormatProperties2(ptr unsafe.Pointer) *FormatProperties2 {
	if ptr == nil {
		return nil
	}

	return (*FormatProperties2)(ptr)
}

func marshalFormatProperties2(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapFormatProperties2(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (f *FormatProperties2) Native() unsafe.Pointer {
	return unsafe.Pointer(&f.native)
}

type ImageFormatProperties2 struct {
	native C.VkImageFormatProperties2
}

// WrapImageFormatProperties2 wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapImageFormatProperties2(ptr unsafe.Pointer) *ImageFormatProperties2 {
	if ptr == nil {
		return nil
	}

	return (*ImageFormatProperties2)(ptr)
}

func marshalImageFormatProperties2(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapImageFormatProperties2(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (i *ImageFormatProperties2) Native() unsafe.Pointer {
	return unsafe.Pointer(&i.native)
}

type PhysicalDeviceImageFormatInfo2 struct {
	native C.VkPhysicalDeviceImageFormatInfo2
}

// WrapPhysicalDeviceImageFormatInfo2 wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceImageFormatInfo2(ptr unsafe.Pointer) *PhysicalDeviceImageFormatInfo2 {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceImageFormatInfo2)(ptr)
}

func marshalPhysicalDeviceImageFormatInfo2(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceImageFormatInfo2(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceImageFormatInfo2) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type QueueFamilyProperties2 struct {
	native C.VkQueueFamilyProperties2
}

// WrapQueueFamilyProperties2 wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapQueueFamilyProperties2(ptr unsafe.Pointer) *QueueFamilyProperties2 {
	if ptr == nil {
		return nil
	}

	return (*QueueFamilyProperties2)(ptr)
}

func marshalQueueFamilyProperties2(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapQueueFamilyProperties2(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (q *QueueFamilyProperties2) Native() unsafe.Pointer {
	return unsafe.Pointer(&q.native)
}

type PhysicalDeviceMemoryProperties2 struct {
	native C.VkPhysicalDeviceMemoryProperties2
}

// WrapPhysicalDeviceMemoryProperties2 wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceMemoryProperties2(ptr unsafe.Pointer) *PhysicalDeviceMemoryProperties2 {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceMemoryProperties2)(ptr)
}

func marshalPhysicalDeviceMemoryProperties2(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceMemoryProperties2(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceMemoryProperties2) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type SparseImageFormatProperties2 struct {
	native C.VkSparseImageFormatProperties2
}

// WrapSparseImageFormatProperties2 wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSparseImageFormatProperties2(ptr unsafe.Pointer) *SparseImageFormatProperties2 {
	if ptr == nil {
		return nil
	}

	return (*SparseImageFormatProperties2)(ptr)
}

func marshalSparseImageFormatProperties2(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSparseImageFormatProperties2(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SparseImageFormatProperties2) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type PhysicalDeviceSparseImageFormatInfo2 struct {
	native C.VkPhysicalDeviceSparseImageFormatInfo2
}

// WrapPhysicalDeviceSparseImageFormatInfo2 wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceSparseImageFormatInfo2(ptr unsafe.Pointer) *PhysicalDeviceSparseImageFormatInfo2 {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceSparseImageFormatInfo2)(ptr)
}

func marshalPhysicalDeviceSparseImageFormatInfo2(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceSparseImageFormatInfo2(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceSparseImageFormatInfo2) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PhysicalDevicePointClippingProperties struct {
	native C.VkPhysicalDevicePointClippingProperties
}

// WrapPhysicalDevicePointClippingProperties wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDevicePointClippingProperties(ptr unsafe.Pointer) *PhysicalDevicePointClippingProperties {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDevicePointClippingProperties)(ptr)
}

func marshalPhysicalDevicePointClippingProperties(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDevicePointClippingProperties(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDevicePointClippingProperties) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type InputAttachmentAspectReference struct {
	native C.VkInputAttachmentAspectReference
}

// WrapInputAttachmentAspectReference wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapInputAttachmentAspectReference(ptr unsafe.Pointer) *InputAttachmentAspectReference {
	if ptr == nil {
		return nil
	}

	return (*InputAttachmentAspectReference)(ptr)
}

func marshalInputAttachmentAspectReference(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapInputAttachmentAspectReference(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (i *InputAttachmentAspectReference) Native() unsafe.Pointer {
	return unsafe.Pointer(&i.native)
}

type RenderPassInputAttachmentAspectCreateInfo struct {
	native C.VkRenderPassInputAttachmentAspectCreateInfo
}

// WrapRenderPassInputAttachmentAspectCreateInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapRenderPassInputAttachmentAspectCreateInfo(ptr unsafe.Pointer) *RenderPassInputAttachmentAspectCreateInfo {
	if ptr == nil {
		return nil
	}

	return (*RenderPassInputAttachmentAspectCreateInfo)(ptr)
}

func marshalRenderPassInputAttachmentAspectCreateInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapRenderPassInputAttachmentAspectCreateInfo(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (r *RenderPassInputAttachmentAspectCreateInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(&r.native)
}

type ImageViewUsageCreateInfo struct {
	native C.VkImageViewUsageCreateInfo
}

// WrapImageViewUsageCreateInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapImageViewUsageCreateInfo(ptr unsafe.Pointer) *ImageViewUsageCreateInfo {
	if ptr == nil {
		return nil
	}

	return (*ImageViewUsageCreateInfo)(ptr)
}

func marshalImageViewUsageCreateInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapImageViewUsageCreateInfo(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (i *ImageViewUsageCreateInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(&i.native)
}

type PipelineTessellationDomainOriginStateCreateInfo struct {
	native C.VkPipelineTessellationDomainOriginStateCreateInfo
}

// WrapPipelineTessellationDomainOriginStateCreateInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPipelineTessellationDomainOriginStateCreateInfo(ptr unsafe.Pointer) *PipelineTessellationDomainOriginStateCreateInfo {
	if ptr == nil {
		return nil
	}

	return (*PipelineTessellationDomainOriginStateCreateInfo)(ptr)
}

func marshalPipelineTessellationDomainOriginStateCreateInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPipelineTessellationDomainOriginStateCreateInfo(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PipelineTessellationDomainOriginStateCreateInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type RenderPassMultiviewCreateInfo struct {
	native C.VkRenderPassMultiviewCreateInfo
}

// WrapRenderPassMultiviewCreateInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapRenderPassMultiviewCreateInfo(ptr unsafe.Pointer) *RenderPassMultiviewCreateInfo {
	if ptr == nil {
		return nil
	}

	return (*RenderPassMultiviewCreateInfo)(ptr)
}

func marshalRenderPassMultiviewCreateInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapRenderPassMultiviewCreateInfo(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (r *RenderPassMultiviewCreateInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(&r.native)
}

type PhysicalDeviceMultiviewFeatures struct {
	native C.VkPhysicalDeviceMultiviewFeatures
}

// WrapPhysicalDeviceMultiviewFeatures wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceMultiviewFeatures(ptr unsafe.Pointer) *PhysicalDeviceMultiviewFeatures {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceMultiviewFeatures)(ptr)
}

func marshalPhysicalDeviceMultiviewFeatures(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceMultiviewFeatures(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceMultiviewFeatures) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PhysicalDeviceMultiviewProperties struct {
	native C.VkPhysicalDeviceMultiviewProperties
}

// WrapPhysicalDeviceMultiviewProperties wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceMultiviewProperties(ptr unsafe.Pointer) *PhysicalDeviceMultiviewProperties {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceMultiviewProperties)(ptr)
}

func marshalPhysicalDeviceMultiviewProperties(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceMultiviewProperties(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceMultiviewProperties) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PhysicalDeviceVariablePointersFeatures struct {
	native C.VkPhysicalDeviceVariablePointersFeatures
}

// WrapPhysicalDeviceVariablePointersFeatures wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceVariablePointersFeatures(ptr unsafe.Pointer) *PhysicalDeviceVariablePointersFeatures {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceVariablePointersFeatures)(ptr)
}

func marshalPhysicalDeviceVariablePointersFeatures(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceVariablePointersFeatures(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceVariablePointersFeatures) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PhysicalDeviceVariablePointerFeatures struct {
	native C.VkPhysicalDeviceVariablePointerFeatures
}

// WrapPhysicalDeviceVariablePointerFeatures wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceVariablePointerFeatures(ptr unsafe.Pointer) *PhysicalDeviceVariablePointerFeatures {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceVariablePointerFeatures)(ptr)
}

func marshalPhysicalDeviceVariablePointerFeatures(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceVariablePointerFeatures(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceVariablePointerFeatures) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PhysicalDeviceProtectedMemoryFeatures struct {
	native C.VkPhysicalDeviceProtectedMemoryFeatures
}

// WrapPhysicalDeviceProtectedMemoryFeatures wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceProtectedMemoryFeatures(ptr unsafe.Pointer) *PhysicalDeviceProtectedMemoryFeatures {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceProtectedMemoryFeatures)(ptr)
}

func marshalPhysicalDeviceProtectedMemoryFeatures(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceProtectedMemoryFeatures(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceProtectedMemoryFeatures) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PhysicalDeviceProtectedMemoryProperties struct {
	native C.VkPhysicalDeviceProtectedMemoryProperties
}

// WrapPhysicalDeviceProtectedMemoryProperties wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceProtectedMemoryProperties(ptr unsafe.Pointer) *PhysicalDeviceProtectedMemoryProperties {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceProtectedMemoryProperties)(ptr)
}

func marshalPhysicalDeviceProtectedMemoryProperties(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceProtectedMemoryProperties(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceProtectedMemoryProperties) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type DeviceQueueInfo2 struct {
	native C.VkDeviceQueueInfo2
}

// WrapDeviceQueueInfo2 wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDeviceQueueInfo2(ptr unsafe.Pointer) *DeviceQueueInfo2 {
	if ptr == nil {
		return nil
	}

	return (*DeviceQueueInfo2)(ptr)
}

func marshalDeviceQueueInfo2(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDeviceQueueInfo2(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DeviceQueueInfo2) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type ProtectedSubmitInfo struct {
	native C.VkProtectedSubmitInfo
}

// WrapProtectedSubmitInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapProtectedSubmitInfo(ptr unsafe.Pointer) *ProtectedSubmitInfo {
	if ptr == nil {
		return nil
	}

	return (*ProtectedSubmitInfo)(ptr)
}

func marshalProtectedSubmitInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapProtectedSubmitInfo(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *ProtectedSubmitInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type SamplerYcbcrConversionCreateInfo struct {
	native C.VkSamplerYcbcrConversionCreateInfo
}

// WrapSamplerYcbcrConversionCreateInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSamplerYcbcrConversionCreateInfo(ptr unsafe.Pointer) *SamplerYcbcrConversionCreateInfo {
	if ptr == nil {
		return nil
	}

	return (*SamplerYcbcrConversionCreateInfo)(ptr)
}

func marshalSamplerYcbcrConversionCreateInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSamplerYcbcrConversionCreateInfo(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SamplerYcbcrConversionCreateInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type SamplerYcbcrConversionInfo struct {
	native C.VkSamplerYcbcrConversionInfo
}

// WrapSamplerYcbcrConversionInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSamplerYcbcrConversionInfo(ptr unsafe.Pointer) *SamplerYcbcrConversionInfo {
	if ptr == nil {
		return nil
	}

	return (*SamplerYcbcrConversionInfo)(ptr)
}

func marshalSamplerYcbcrConversionInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSamplerYcbcrConversionInfo(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SamplerYcbcrConversionInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type BindImagePlaneMemoryInfo struct {
	native C.VkBindImagePlaneMemoryInfo
}

// WrapBindImagePlaneMemoryInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapBindImagePlaneMemoryInfo(ptr unsafe.Pointer) *BindImagePlaneMemoryInfo {
	if ptr == nil {
		return nil
	}

	return (*BindImagePlaneMemoryInfo)(ptr)
}

func marshalBindImagePlaneMemoryInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapBindImagePlaneMemoryInfo(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (b *BindImagePlaneMemoryInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(&b.native)
}

type ImagePlaneMemoryRequirementsInfo struct {
	native C.VkImagePlaneMemoryRequirementsInfo
}

// WrapImagePlaneMemoryRequirementsInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapImagePlaneMemoryRequirementsInfo(ptr unsafe.Pointer) *ImagePlaneMemoryRequirementsInfo {
	if ptr == nil {
		return nil
	}

	return (*ImagePlaneMemoryRequirementsInfo)(ptr)
}

func marshalImagePlaneMemoryRequirementsInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapImagePlaneMemoryRequirementsInfo(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (i *ImagePlaneMemoryRequirementsInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(&i.native)
}

type PhysicalDeviceSamplerYcbcrConversionFeatures struct {
	native C.VkPhysicalDeviceSamplerYcbcrConversionFeatures
}

// WrapPhysicalDeviceSamplerYcbcrConversionFeatures wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceSamplerYcbcrConversionFeatures(ptr unsafe.Pointer) *PhysicalDeviceSamplerYcbcrConversionFeatures {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceSamplerYcbcrConversionFeatures)(ptr)
}

func marshalPhysicalDeviceSamplerYcbcrConversionFeatures(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceSamplerYcbcrConversionFeatures(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceSamplerYcbcrConversionFeatures) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type SamplerYcbcrConversionImageFormatProperties struct {
	native C.VkSamplerYcbcrConversionImageFormatProperties
}

// WrapSamplerYcbcrConversionImageFormatProperties wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSamplerYcbcrConversionImageFormatProperties(ptr unsafe.Pointer) *SamplerYcbcrConversionImageFormatProperties {
	if ptr == nil {
		return nil
	}

	return (*SamplerYcbcrConversionImageFormatProperties)(ptr)
}

func marshalSamplerYcbcrConversionImageFormatProperties(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSamplerYcbcrConversionImageFormatProperties(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SamplerYcbcrConversionImageFormatProperties) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type DescriptorUpdateTemplateEntry struct {
	native C.VkDescriptorUpdateTemplateEntry
}

// WrapDescriptorUpdateTemplateEntry wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDescriptorUpdateTemplateEntry(ptr unsafe.Pointer) *DescriptorUpdateTemplateEntry {
	if ptr == nil {
		return nil
	}

	return (*DescriptorUpdateTemplateEntry)(ptr)
}

func marshalDescriptorUpdateTemplateEntry(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDescriptorUpdateTemplateEntry(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DescriptorUpdateTemplateEntry) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type DescriptorUpdateTemplateCreateInfo struct {
	native C.VkDescriptorUpdateTemplateCreateInfo
}

// WrapDescriptorUpdateTemplateCreateInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDescriptorUpdateTemplateCreateInfo(ptr unsafe.Pointer) *DescriptorUpdateTemplateCreateInfo {
	if ptr == nil {
		return nil
	}

	return (*DescriptorUpdateTemplateCreateInfo)(ptr)
}

func marshalDescriptorUpdateTemplateCreateInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDescriptorUpdateTemplateCreateInfo(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DescriptorUpdateTemplateCreateInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type ExternalMemoryProperties struct {
	native C.VkExternalMemoryProperties
}

// WrapExternalMemoryProperties wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapExternalMemoryProperties(ptr unsafe.Pointer) *ExternalMemoryProperties {
	if ptr == nil {
		return nil
	}

	return (*ExternalMemoryProperties)(ptr)
}

func marshalExternalMemoryProperties(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapExternalMemoryProperties(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (e *ExternalMemoryProperties) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

type PhysicalDeviceExternalImageFormatInfo struct {
	native C.VkPhysicalDeviceExternalImageFormatInfo
}

// WrapPhysicalDeviceExternalImageFormatInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceExternalImageFormatInfo(ptr unsafe.Pointer) *PhysicalDeviceExternalImageFormatInfo {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceExternalImageFormatInfo)(ptr)
}

func marshalPhysicalDeviceExternalImageFormatInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceExternalImageFormatInfo(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceExternalImageFormatInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type ExternalImageFormatProperties struct {
	native C.VkExternalImageFormatProperties
}

// WrapExternalImageFormatProperties wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapExternalImageFormatProperties(ptr unsafe.Pointer) *ExternalImageFormatProperties {
	if ptr == nil {
		return nil
	}

	return (*ExternalImageFormatProperties)(ptr)
}

func marshalExternalImageFormatProperties(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapExternalImageFormatProperties(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (e *ExternalImageFormatProperties) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

type PhysicalDeviceExternalBufferInfo struct {
	native C.VkPhysicalDeviceExternalBufferInfo
}

// WrapPhysicalDeviceExternalBufferInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceExternalBufferInfo(ptr unsafe.Pointer) *PhysicalDeviceExternalBufferInfo {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceExternalBufferInfo)(ptr)
}

func marshalPhysicalDeviceExternalBufferInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceExternalBufferInfo(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceExternalBufferInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type ExternalBufferProperties struct {
	native C.VkExternalBufferProperties
}

// WrapExternalBufferProperties wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapExternalBufferProperties(ptr unsafe.Pointer) *ExternalBufferProperties {
	if ptr == nil {
		return nil
	}

	return (*ExternalBufferProperties)(ptr)
}

func marshalExternalBufferProperties(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapExternalBufferProperties(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (e *ExternalBufferProperties) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

type PhysicalDeviceIDProperties struct {
	native C.VkPhysicalDeviceIDProperties
}

// WrapPhysicalDeviceIDProperties wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceIDProperties(ptr unsafe.Pointer) *PhysicalDeviceIDProperties {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceIDProperties)(ptr)
}

func marshalPhysicalDeviceIDProperties(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceIDProperties(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceIDProperties) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type ExternalMemoryImageCreateInfo struct {
	native C.VkExternalMemoryImageCreateInfo
}

// WrapExternalMemoryImageCreateInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapExternalMemoryImageCreateInfo(ptr unsafe.Pointer) *ExternalMemoryImageCreateInfo {
	if ptr == nil {
		return nil
	}

	return (*ExternalMemoryImageCreateInfo)(ptr)
}

func marshalExternalMemoryImageCreateInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapExternalMemoryImageCreateInfo(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (e *ExternalMemoryImageCreateInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

type ExternalMemoryBufferCreateInfo struct {
	native C.VkExternalMemoryBufferCreateInfo
}

// WrapExternalMemoryBufferCreateInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapExternalMemoryBufferCreateInfo(ptr unsafe.Pointer) *ExternalMemoryBufferCreateInfo {
	if ptr == nil {
		return nil
	}

	return (*ExternalMemoryBufferCreateInfo)(ptr)
}

func marshalExternalMemoryBufferCreateInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapExternalMemoryBufferCreateInfo(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (e *ExternalMemoryBufferCreateInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

type ExportMemoryAllocateInfo struct {
	native C.VkExportMemoryAllocateInfo
}

// WrapExportMemoryAllocateInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapExportMemoryAllocateInfo(ptr unsafe.Pointer) *ExportMemoryAllocateInfo {
	if ptr == nil {
		return nil
	}

	return (*ExportMemoryAllocateInfo)(ptr)
}

func marshalExportMemoryAllocateInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapExportMemoryAllocateInfo(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (e *ExportMemoryAllocateInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

type PhysicalDeviceExternalFenceInfo struct {
	native C.VkPhysicalDeviceExternalFenceInfo
}

// WrapPhysicalDeviceExternalFenceInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceExternalFenceInfo(ptr unsafe.Pointer) *PhysicalDeviceExternalFenceInfo {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceExternalFenceInfo)(ptr)
}

func marshalPhysicalDeviceExternalFenceInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceExternalFenceInfo(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceExternalFenceInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type ExternalFenceProperties struct {
	native C.VkExternalFenceProperties
}

// WrapExternalFenceProperties wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapExternalFenceProperties(ptr unsafe.Pointer) *ExternalFenceProperties {
	if ptr == nil {
		return nil
	}

	return (*ExternalFenceProperties)(ptr)
}

func marshalExternalFenceProperties(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapExternalFenceProperties(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (e *ExternalFenceProperties) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

type ExportFenceCreateInfo struct {
	native C.VkExportFenceCreateInfo
}

// WrapExportFenceCreateInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapExportFenceCreateInfo(ptr unsafe.Pointer) *ExportFenceCreateInfo {
	if ptr == nil {
		return nil
	}

	return (*ExportFenceCreateInfo)(ptr)
}

func marshalExportFenceCreateInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapExportFenceCreateInfo(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (e *ExportFenceCreateInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

type ExportSemaphoreCreateInfo struct {
	native C.VkExportSemaphoreCreateInfo
}

// WrapExportSemaphoreCreateInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapExportSemaphoreCreateInfo(ptr unsafe.Pointer) *ExportSemaphoreCreateInfo {
	if ptr == nil {
		return nil
	}

	return (*ExportSemaphoreCreateInfo)(ptr)
}

func marshalExportSemaphoreCreateInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapExportSemaphoreCreateInfo(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (e *ExportSemaphoreCreateInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

type PhysicalDeviceExternalSemaphoreInfo struct {
	native C.VkPhysicalDeviceExternalSemaphoreInfo
}

// WrapPhysicalDeviceExternalSemaphoreInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceExternalSemaphoreInfo(ptr unsafe.Pointer) *PhysicalDeviceExternalSemaphoreInfo {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceExternalSemaphoreInfo)(ptr)
}

func marshalPhysicalDeviceExternalSemaphoreInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceExternalSemaphoreInfo(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceExternalSemaphoreInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type ExternalSemaphoreProperties struct {
	native C.VkExternalSemaphoreProperties
}

// WrapExternalSemaphoreProperties wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapExternalSemaphoreProperties(ptr unsafe.Pointer) *ExternalSemaphoreProperties {
	if ptr == nil {
		return nil
	}

	return (*ExternalSemaphoreProperties)(ptr)
}

func marshalExternalSemaphoreProperties(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapExternalSemaphoreProperties(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (e *ExternalSemaphoreProperties) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

type PhysicalDeviceMaintenance3Properties struct {
	native C.VkPhysicalDeviceMaintenance3Properties
}

// WrapPhysicalDeviceMaintenance3Properties wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceMaintenance3Properties(ptr unsafe.Pointer) *PhysicalDeviceMaintenance3Properties {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceMaintenance3Properties)(ptr)
}

func marshalPhysicalDeviceMaintenance3Properties(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceMaintenance3Properties(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceMaintenance3Properties) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type DescriptorSetLayoutSupport struct {
	native C.VkDescriptorSetLayoutSupport
}

// WrapDescriptorSetLayoutSupport wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDescriptorSetLayoutSupport(ptr unsafe.Pointer) *DescriptorSetLayoutSupport {
	if ptr == nil {
		return nil
	}

	return (*DescriptorSetLayoutSupport)(ptr)
}

func marshalDescriptorSetLayoutSupport(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDescriptorSetLayoutSupport(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DescriptorSetLayoutSupport) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type PhysicalDeviceShaderDrawParametersFeatures struct {
	native C.VkPhysicalDeviceShaderDrawParametersFeatures
}

// WrapPhysicalDeviceShaderDrawParametersFeatures wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceShaderDrawParametersFeatures(ptr unsafe.Pointer) *PhysicalDeviceShaderDrawParametersFeatures {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceShaderDrawParametersFeatures)(ptr)
}

func marshalPhysicalDeviceShaderDrawParametersFeatures(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceShaderDrawParametersFeatures(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceShaderDrawParametersFeatures) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PhysicalDeviceShaderDrawParameterFeatures struct {
	native C.VkPhysicalDeviceShaderDrawParameterFeatures
}

// WrapPhysicalDeviceShaderDrawParameterFeatures wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceShaderDrawParameterFeatures(ptr unsafe.Pointer) *PhysicalDeviceShaderDrawParameterFeatures {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceShaderDrawParameterFeatures)(ptr)
}

func marshalPhysicalDeviceShaderDrawParameterFeatures(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceShaderDrawParameterFeatures(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceShaderDrawParameterFeatures) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type SurfaceKHR struct {
	native C.VkSurfaceKHR
}

// WrapSurfaceKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSurfaceKHR(ptr unsafe.Pointer) *SurfaceKHR {
	if ptr == nil {
		return nil
	}

	return (*SurfaceKHR)(ptr)
}

func marshalSurfaceKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSurfaceKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SurfaceKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type ColorSpaceKHR struct {
	native C.VkColorSpaceKHR
}

// WrapColorSpaceKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapColorSpaceKHR(ptr unsafe.Pointer) *ColorSpaceKHR {
	if ptr == nil {
		return nil
	}

	return (*ColorSpaceKHR)(ptr)
}

func marshalColorSpaceKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapColorSpaceKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (c *ColorSpaceKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&c.native)
}

type PresentModeKHR struct {
	native C.VkPresentModeKHR
}

// WrapPresentModeKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPresentModeKHR(ptr unsafe.Pointer) *PresentModeKHR {
	if ptr == nil {
		return nil
	}

	return (*PresentModeKHR)(ptr)
}

func marshalPresentModeKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPresentModeKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PresentModeKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type SurfaceTransformFlagBitsKHR struct {
	native C.VkSurfaceTransformFlagBitsKHR
}

// WrapSurfaceTransformFlagBitsKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSurfaceTransformFlagBitsKHR(ptr unsafe.Pointer) *SurfaceTransformFlagBitsKHR {
	if ptr == nil {
		return nil
	}

	return (*SurfaceTransformFlagBitsKHR)(ptr)
}

func marshalSurfaceTransformFlagBitsKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSurfaceTransformFlagBitsKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SurfaceTransformFlagBitsKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type SurfaceTransformFlagsKHR struct {
	native C.VkSurfaceTransformFlagsKHR
}

// WrapSurfaceTransformFlagsKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSurfaceTransformFlagsKHR(ptr unsafe.Pointer) *SurfaceTransformFlagsKHR {
	if ptr == nil {
		return nil
	}

	return (*SurfaceTransformFlagsKHR)(ptr)
}

func marshalSurfaceTransformFlagsKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSurfaceTransformFlagsKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SurfaceTransformFlagsKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type CompositeAlphaFlagBitsKHR struct {
	native C.VkCompositeAlphaFlagBitsKHR
}

// WrapCompositeAlphaFlagBitsKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapCompositeAlphaFlagBitsKHR(ptr unsafe.Pointer) *CompositeAlphaFlagBitsKHR {
	if ptr == nil {
		return nil
	}

	return (*CompositeAlphaFlagBitsKHR)(ptr)
}

func marshalCompositeAlphaFlagBitsKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapCompositeAlphaFlagBitsKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (c *CompositeAlphaFlagBitsKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&c.native)
}

type CompositeAlphaFlagsKHR struct {
	native C.VkCompositeAlphaFlagsKHR
}

// WrapCompositeAlphaFlagsKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapCompositeAlphaFlagsKHR(ptr unsafe.Pointer) *CompositeAlphaFlagsKHR {
	if ptr == nil {
		return nil
	}

	return (*CompositeAlphaFlagsKHR)(ptr)
}

func marshalCompositeAlphaFlagsKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapCompositeAlphaFlagsKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (c *CompositeAlphaFlagsKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&c.native)
}

type SurfaceCapabilitiesKHR struct {
	native C.VkSurfaceCapabilitiesKHR
}

// WrapSurfaceCapabilitiesKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSurfaceCapabilitiesKHR(ptr unsafe.Pointer) *SurfaceCapabilitiesKHR {
	if ptr == nil {
		return nil
	}

	return (*SurfaceCapabilitiesKHR)(ptr)
}

func marshalSurfaceCapabilitiesKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSurfaceCapabilitiesKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SurfaceCapabilitiesKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type SurfaceFormatKHR struct {
	native C.VkSurfaceFormatKHR
}

// WrapSurfaceFormatKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSurfaceFormatKHR(ptr unsafe.Pointer) *SurfaceFormatKHR {
	if ptr == nil {
		return nil
	}

	return (*SurfaceFormatKHR)(ptr)
}

func marshalSurfaceFormatKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSurfaceFormatKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SurfaceFormatKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type SwapchainKHR struct {
	native C.VkSwapchainKHR
}

// WrapSwapchainKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSwapchainKHR(ptr unsafe.Pointer) *SwapchainKHR {
	if ptr == nil {
		return nil
	}

	return (*SwapchainKHR)(ptr)
}

func marshalSwapchainKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSwapchainKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SwapchainKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type SwapchainCreateFlagBitsKHR struct {
	native C.VkSwapchainCreateFlagBitsKHR
}

// WrapSwapchainCreateFlagBitsKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSwapchainCreateFlagBitsKHR(ptr unsafe.Pointer) *SwapchainCreateFlagBitsKHR {
	if ptr == nil {
		return nil
	}

	return (*SwapchainCreateFlagBitsKHR)(ptr)
}

func marshalSwapchainCreateFlagBitsKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSwapchainCreateFlagBitsKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SwapchainCreateFlagBitsKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type SwapchainCreateFlagsKHR struct {
	native C.VkSwapchainCreateFlagsKHR
}

// WrapSwapchainCreateFlagsKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSwapchainCreateFlagsKHR(ptr unsafe.Pointer) *SwapchainCreateFlagsKHR {
	if ptr == nil {
		return nil
	}

	return (*SwapchainCreateFlagsKHR)(ptr)
}

func marshalSwapchainCreateFlagsKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSwapchainCreateFlagsKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SwapchainCreateFlagsKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type DeviceGroupPresentModeFlagBitsKHR struct {
	native C.VkDeviceGroupPresentModeFlagBitsKHR
}

// WrapDeviceGroupPresentModeFlagBitsKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDeviceGroupPresentModeFlagBitsKHR(ptr unsafe.Pointer) *DeviceGroupPresentModeFlagBitsKHR {
	if ptr == nil {
		return nil
	}

	return (*DeviceGroupPresentModeFlagBitsKHR)(ptr)
}

func marshalDeviceGroupPresentModeFlagBitsKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDeviceGroupPresentModeFlagBitsKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DeviceGroupPresentModeFlagBitsKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type DeviceGroupPresentModeFlagsKHR struct {
	native C.VkDeviceGroupPresentModeFlagsKHR
}

// WrapDeviceGroupPresentModeFlagsKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDeviceGroupPresentModeFlagsKHR(ptr unsafe.Pointer) *DeviceGroupPresentModeFlagsKHR {
	if ptr == nil {
		return nil
	}

	return (*DeviceGroupPresentModeFlagsKHR)(ptr)
}

func marshalDeviceGroupPresentModeFlagsKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDeviceGroupPresentModeFlagsKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DeviceGroupPresentModeFlagsKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type SwapchainCreateInfoKHR struct {
	native C.VkSwapchainCreateInfoKHR
}

// WrapSwapchainCreateInfoKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSwapchainCreateInfoKHR(ptr unsafe.Pointer) *SwapchainCreateInfoKHR {
	if ptr == nil {
		return nil
	}

	return (*SwapchainCreateInfoKHR)(ptr)
}

func marshalSwapchainCreateInfoKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSwapchainCreateInfoKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SwapchainCreateInfoKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type PresentInfoKHR struct {
	native C.VkPresentInfoKHR
}

// WrapPresentInfoKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPresentInfoKHR(ptr unsafe.Pointer) *PresentInfoKHR {
	if ptr == nil {
		return nil
	}

	return (*PresentInfoKHR)(ptr)
}

func marshalPresentInfoKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPresentInfoKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PresentInfoKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type ImageSwapchainCreateInfoKHR struct {
	native C.VkImageSwapchainCreateInfoKHR
}

// WrapImageSwapchainCreateInfoKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapImageSwapchainCreateInfoKHR(ptr unsafe.Pointer) *ImageSwapchainCreateInfoKHR {
	if ptr == nil {
		return nil
	}

	return (*ImageSwapchainCreateInfoKHR)(ptr)
}

func marshalImageSwapchainCreateInfoKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapImageSwapchainCreateInfoKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (i *ImageSwapchainCreateInfoKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&i.native)
}

type BindImageMemorySwapchainInfoKHR struct {
	native C.VkBindImageMemorySwapchainInfoKHR
}

// WrapBindImageMemorySwapchainInfoKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapBindImageMemorySwapchainInfoKHR(ptr unsafe.Pointer) *BindImageMemorySwapchainInfoKHR {
	if ptr == nil {
		return nil
	}

	return (*BindImageMemorySwapchainInfoKHR)(ptr)
}

func marshalBindImageMemorySwapchainInfoKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapBindImageMemorySwapchainInfoKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (b *BindImageMemorySwapchainInfoKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&b.native)
}

type AcquireNextImageInfoKHR struct {
	native C.VkAcquireNextImageInfoKHR
}

// WrapAcquireNextImageInfoKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapAcquireNextImageInfoKHR(ptr unsafe.Pointer) *AcquireNextImageInfoKHR {
	if ptr == nil {
		return nil
	}

	return (*AcquireNextImageInfoKHR)(ptr)
}

func marshalAcquireNextImageInfoKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapAcquireNextImageInfoKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (a *AcquireNextImageInfoKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&a.native)
}

type DeviceGroupPresentCapabilitiesKHR struct {
	native C.VkDeviceGroupPresentCapabilitiesKHR
}

// WrapDeviceGroupPresentCapabilitiesKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDeviceGroupPresentCapabilitiesKHR(ptr unsafe.Pointer) *DeviceGroupPresentCapabilitiesKHR {
	if ptr == nil {
		return nil
	}

	return (*DeviceGroupPresentCapabilitiesKHR)(ptr)
}

func marshalDeviceGroupPresentCapabilitiesKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDeviceGroupPresentCapabilitiesKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DeviceGroupPresentCapabilitiesKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type DeviceGroupPresentInfoKHR struct {
	native C.VkDeviceGroupPresentInfoKHR
}

// WrapDeviceGroupPresentInfoKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDeviceGroupPresentInfoKHR(ptr unsafe.Pointer) *DeviceGroupPresentInfoKHR {
	if ptr == nil {
		return nil
	}

	return (*DeviceGroupPresentInfoKHR)(ptr)
}

func marshalDeviceGroupPresentInfoKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDeviceGroupPresentInfoKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DeviceGroupPresentInfoKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type DeviceGroupSwapchainCreateInfoKHR struct {
	native C.VkDeviceGroupSwapchainCreateInfoKHR
}

// WrapDeviceGroupSwapchainCreateInfoKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDeviceGroupSwapchainCreateInfoKHR(ptr unsafe.Pointer) *DeviceGroupSwapchainCreateInfoKHR {
	if ptr == nil {
		return nil
	}

	return (*DeviceGroupSwapchainCreateInfoKHR)(ptr)
}

func marshalDeviceGroupSwapchainCreateInfoKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDeviceGroupSwapchainCreateInfoKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DeviceGroupSwapchainCreateInfoKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type DisplayKHR struct {
	native C.VkDisplayKHR
}

// WrapDisplayKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDisplayKHR(ptr unsafe.Pointer) *DisplayKHR {
	if ptr == nil {
		return nil
	}

	return (*DisplayKHR)(ptr)
}

func marshalDisplayKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDisplayKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DisplayKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type DisplayModeKHR struct {
	native C.VkDisplayModeKHR
}

// WrapDisplayModeKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDisplayModeKHR(ptr unsafe.Pointer) *DisplayModeKHR {
	if ptr == nil {
		return nil
	}

	return (*DisplayModeKHR)(ptr)
}

func marshalDisplayModeKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDisplayModeKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DisplayModeKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type DisplayPlaneAlphaFlagBitsKHR struct {
	native C.VkDisplayPlaneAlphaFlagBitsKHR
}

// WrapDisplayPlaneAlphaFlagBitsKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDisplayPlaneAlphaFlagBitsKHR(ptr unsafe.Pointer) *DisplayPlaneAlphaFlagBitsKHR {
	if ptr == nil {
		return nil
	}

	return (*DisplayPlaneAlphaFlagBitsKHR)(ptr)
}

func marshalDisplayPlaneAlphaFlagBitsKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDisplayPlaneAlphaFlagBitsKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DisplayPlaneAlphaFlagBitsKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type DisplayPlaneAlphaFlagsKHR struct {
	native C.VkDisplayPlaneAlphaFlagsKHR
}

// WrapDisplayPlaneAlphaFlagsKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDisplayPlaneAlphaFlagsKHR(ptr unsafe.Pointer) *DisplayPlaneAlphaFlagsKHR {
	if ptr == nil {
		return nil
	}

	return (*DisplayPlaneAlphaFlagsKHR)(ptr)
}

func marshalDisplayPlaneAlphaFlagsKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDisplayPlaneAlphaFlagsKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DisplayPlaneAlphaFlagsKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type DisplayModeCreateFlagsKHR struct {
	native C.VkDisplayModeCreateFlagsKHR
}

// WrapDisplayModeCreateFlagsKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDisplayModeCreateFlagsKHR(ptr unsafe.Pointer) *DisplayModeCreateFlagsKHR {
	if ptr == nil {
		return nil
	}

	return (*DisplayModeCreateFlagsKHR)(ptr)
}

func marshalDisplayModeCreateFlagsKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDisplayModeCreateFlagsKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DisplayModeCreateFlagsKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type DisplaySurfaceCreateFlagsKHR struct {
	native C.VkDisplaySurfaceCreateFlagsKHR
}

// WrapDisplaySurfaceCreateFlagsKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDisplaySurfaceCreateFlagsKHR(ptr unsafe.Pointer) *DisplaySurfaceCreateFlagsKHR {
	if ptr == nil {
		return nil
	}

	return (*DisplaySurfaceCreateFlagsKHR)(ptr)
}

func marshalDisplaySurfaceCreateFlagsKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDisplaySurfaceCreateFlagsKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DisplaySurfaceCreateFlagsKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type DisplayPropertiesKHR struct {
	native C.VkDisplayPropertiesKHR
}

// WrapDisplayPropertiesKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDisplayPropertiesKHR(ptr unsafe.Pointer) *DisplayPropertiesKHR {
	if ptr == nil {
		return nil
	}

	return (*DisplayPropertiesKHR)(ptr)
}

func marshalDisplayPropertiesKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDisplayPropertiesKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DisplayPropertiesKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type DisplayModeParametersKHR struct {
	native C.VkDisplayModeParametersKHR
}

// WrapDisplayModeParametersKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDisplayModeParametersKHR(ptr unsafe.Pointer) *DisplayModeParametersKHR {
	if ptr == nil {
		return nil
	}

	return (*DisplayModeParametersKHR)(ptr)
}

func marshalDisplayModeParametersKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDisplayModeParametersKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DisplayModeParametersKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type DisplayModePropertiesKHR struct {
	native C.VkDisplayModePropertiesKHR
}

// WrapDisplayModePropertiesKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDisplayModePropertiesKHR(ptr unsafe.Pointer) *DisplayModePropertiesKHR {
	if ptr == nil {
		return nil
	}

	return (*DisplayModePropertiesKHR)(ptr)
}

func marshalDisplayModePropertiesKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDisplayModePropertiesKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DisplayModePropertiesKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type DisplayModeCreateInfoKHR struct {
	native C.VkDisplayModeCreateInfoKHR
}

// WrapDisplayModeCreateInfoKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDisplayModeCreateInfoKHR(ptr unsafe.Pointer) *DisplayModeCreateInfoKHR {
	if ptr == nil {
		return nil
	}

	return (*DisplayModeCreateInfoKHR)(ptr)
}

func marshalDisplayModeCreateInfoKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDisplayModeCreateInfoKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DisplayModeCreateInfoKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type DisplayPlaneCapabilitiesKHR struct {
	native C.VkDisplayPlaneCapabilitiesKHR
}

// WrapDisplayPlaneCapabilitiesKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDisplayPlaneCapabilitiesKHR(ptr unsafe.Pointer) *DisplayPlaneCapabilitiesKHR {
	if ptr == nil {
		return nil
	}

	return (*DisplayPlaneCapabilitiesKHR)(ptr)
}

func marshalDisplayPlaneCapabilitiesKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDisplayPlaneCapabilitiesKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DisplayPlaneCapabilitiesKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type DisplayPlanePropertiesKHR struct {
	native C.VkDisplayPlanePropertiesKHR
}

// WrapDisplayPlanePropertiesKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDisplayPlanePropertiesKHR(ptr unsafe.Pointer) *DisplayPlanePropertiesKHR {
	if ptr == nil {
		return nil
	}

	return (*DisplayPlanePropertiesKHR)(ptr)
}

func marshalDisplayPlanePropertiesKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDisplayPlanePropertiesKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DisplayPlanePropertiesKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type DisplaySurfaceCreateInfoKHR struct {
	native C.VkDisplaySurfaceCreateInfoKHR
}

// WrapDisplaySurfaceCreateInfoKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDisplaySurfaceCreateInfoKHR(ptr unsafe.Pointer) *DisplaySurfaceCreateInfoKHR {
	if ptr == nil {
		return nil
	}

	return (*DisplaySurfaceCreateInfoKHR)(ptr)
}

func marshalDisplaySurfaceCreateInfoKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDisplaySurfaceCreateInfoKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DisplaySurfaceCreateInfoKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type DisplayPresentInfoKHR struct {
	native C.VkDisplayPresentInfoKHR
}

// WrapDisplayPresentInfoKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDisplayPresentInfoKHR(ptr unsafe.Pointer) *DisplayPresentInfoKHR {
	if ptr == nil {
		return nil
	}

	return (*DisplayPresentInfoKHR)(ptr)
}

func marshalDisplayPresentInfoKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDisplayPresentInfoKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DisplayPresentInfoKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type RenderPassMultiviewCreateInfoKHR struct {
	native C.VkRenderPassMultiviewCreateInfoKHR
}

// WrapRenderPassMultiviewCreateInfoKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapRenderPassMultiviewCreateInfoKHR(ptr unsafe.Pointer) *RenderPassMultiviewCreateInfoKHR {
	if ptr == nil {
		return nil
	}

	return (*RenderPassMultiviewCreateInfoKHR)(ptr)
}

func marshalRenderPassMultiviewCreateInfoKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapRenderPassMultiviewCreateInfoKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (r *RenderPassMultiviewCreateInfoKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&r.native)
}

type PhysicalDeviceMultiviewFeaturesKHR struct {
	native C.VkPhysicalDeviceMultiviewFeaturesKHR
}

// WrapPhysicalDeviceMultiviewFeaturesKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceMultiviewFeaturesKHR(ptr unsafe.Pointer) *PhysicalDeviceMultiviewFeaturesKHR {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceMultiviewFeaturesKHR)(ptr)
}

func marshalPhysicalDeviceMultiviewFeaturesKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceMultiviewFeaturesKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceMultiviewFeaturesKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PhysicalDeviceMultiviewPropertiesKHR struct {
	native C.VkPhysicalDeviceMultiviewPropertiesKHR
}

// WrapPhysicalDeviceMultiviewPropertiesKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceMultiviewPropertiesKHR(ptr unsafe.Pointer) *PhysicalDeviceMultiviewPropertiesKHR {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceMultiviewPropertiesKHR)(ptr)
}

func marshalPhysicalDeviceMultiviewPropertiesKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceMultiviewPropertiesKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceMultiviewPropertiesKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PhysicalDeviceFeatures2KHR struct {
	native C.VkPhysicalDeviceFeatures2KHR
}

// WrapPhysicalDeviceFeatures2KHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceFeatures2KHR(ptr unsafe.Pointer) *PhysicalDeviceFeatures2KHR {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceFeatures2KHR)(ptr)
}

func marshalPhysicalDeviceFeatures2KHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceFeatures2KHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceFeatures2KHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PhysicalDeviceProperties2KHR struct {
	native C.VkPhysicalDeviceProperties2KHR
}

// WrapPhysicalDeviceProperties2KHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceProperties2KHR(ptr unsafe.Pointer) *PhysicalDeviceProperties2KHR {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceProperties2KHR)(ptr)
}

func marshalPhysicalDeviceProperties2KHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceProperties2KHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceProperties2KHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type FormatProperties2KHR struct {
	native C.VkFormatProperties2KHR
}

// WrapFormatProperties2KHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapFormatProperties2KHR(ptr unsafe.Pointer) *FormatProperties2KHR {
	if ptr == nil {
		return nil
	}

	return (*FormatProperties2KHR)(ptr)
}

func marshalFormatProperties2KHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapFormatProperties2KHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (f *FormatProperties2KHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&f.native)
}

type ImageFormatProperties2KHR struct {
	native C.VkImageFormatProperties2KHR
}

// WrapImageFormatProperties2KHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapImageFormatProperties2KHR(ptr unsafe.Pointer) *ImageFormatProperties2KHR {
	if ptr == nil {
		return nil
	}

	return (*ImageFormatProperties2KHR)(ptr)
}

func marshalImageFormatProperties2KHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapImageFormatProperties2KHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (i *ImageFormatProperties2KHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&i.native)
}

type PhysicalDeviceImageFormatInfo2KHR struct {
	native C.VkPhysicalDeviceImageFormatInfo2KHR
}

// WrapPhysicalDeviceImageFormatInfo2KHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceImageFormatInfo2KHR(ptr unsafe.Pointer) *PhysicalDeviceImageFormatInfo2KHR {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceImageFormatInfo2KHR)(ptr)
}

func marshalPhysicalDeviceImageFormatInfo2KHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceImageFormatInfo2KHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceImageFormatInfo2KHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type QueueFamilyProperties2KHR struct {
	native C.VkQueueFamilyProperties2KHR
}

// WrapQueueFamilyProperties2KHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapQueueFamilyProperties2KHR(ptr unsafe.Pointer) *QueueFamilyProperties2KHR {
	if ptr == nil {
		return nil
	}

	return (*QueueFamilyProperties2KHR)(ptr)
}

func marshalQueueFamilyProperties2KHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapQueueFamilyProperties2KHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (q *QueueFamilyProperties2KHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&q.native)
}

type PhysicalDeviceMemoryProperties2KHR struct {
	native C.VkPhysicalDeviceMemoryProperties2KHR
}

// WrapPhysicalDeviceMemoryProperties2KHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceMemoryProperties2KHR(ptr unsafe.Pointer) *PhysicalDeviceMemoryProperties2KHR {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceMemoryProperties2KHR)(ptr)
}

func marshalPhysicalDeviceMemoryProperties2KHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceMemoryProperties2KHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceMemoryProperties2KHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type SparseImageFormatProperties2KHR struct {
	native C.VkSparseImageFormatProperties2KHR
}

// WrapSparseImageFormatProperties2KHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSparseImageFormatProperties2KHR(ptr unsafe.Pointer) *SparseImageFormatProperties2KHR {
	if ptr == nil {
		return nil
	}

	return (*SparseImageFormatProperties2KHR)(ptr)
}

func marshalSparseImageFormatProperties2KHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSparseImageFormatProperties2KHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SparseImageFormatProperties2KHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type PhysicalDeviceSparseImageFormatInfo2KHR struct {
	native C.VkPhysicalDeviceSparseImageFormatInfo2KHR
}

// WrapPhysicalDeviceSparseImageFormatInfo2KHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceSparseImageFormatInfo2KHR(ptr unsafe.Pointer) *PhysicalDeviceSparseImageFormatInfo2KHR {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceSparseImageFormatInfo2KHR)(ptr)
}

func marshalPhysicalDeviceSparseImageFormatInfo2KHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceSparseImageFormatInfo2KHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceSparseImageFormatInfo2KHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PeerMemoryFeatureFlagsKHR struct {
	native C.VkPeerMemoryFeatureFlagsKHR
}

// WrapPeerMemoryFeatureFlagsKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPeerMemoryFeatureFlagsKHR(ptr unsafe.Pointer) *PeerMemoryFeatureFlagsKHR {
	if ptr == nil {
		return nil
	}

	return (*PeerMemoryFeatureFlagsKHR)(ptr)
}

func marshalPeerMemoryFeatureFlagsKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPeerMemoryFeatureFlagsKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PeerMemoryFeatureFlagsKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PeerMemoryFeatureFlagBitsKHR struct {
	native C.VkPeerMemoryFeatureFlagBitsKHR
}

// WrapPeerMemoryFeatureFlagBitsKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPeerMemoryFeatureFlagBitsKHR(ptr unsafe.Pointer) *PeerMemoryFeatureFlagBitsKHR {
	if ptr == nil {
		return nil
	}

	return (*PeerMemoryFeatureFlagBitsKHR)(ptr)
}

func marshalPeerMemoryFeatureFlagBitsKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPeerMemoryFeatureFlagBitsKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PeerMemoryFeatureFlagBitsKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type MemoryAllocateFlagsKHR struct {
	native C.VkMemoryAllocateFlagsKHR
}

// WrapMemoryAllocateFlagsKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapMemoryAllocateFlagsKHR(ptr unsafe.Pointer) *MemoryAllocateFlagsKHR {
	if ptr == nil {
		return nil
	}

	return (*MemoryAllocateFlagsKHR)(ptr)
}

func marshalMemoryAllocateFlagsKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapMemoryAllocateFlagsKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (m *MemoryAllocateFlagsKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&m.native)
}

type MemoryAllocateFlagBitsKHR struct {
	native C.VkMemoryAllocateFlagBitsKHR
}

// WrapMemoryAllocateFlagBitsKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapMemoryAllocateFlagBitsKHR(ptr unsafe.Pointer) *MemoryAllocateFlagBitsKHR {
	if ptr == nil {
		return nil
	}

	return (*MemoryAllocateFlagBitsKHR)(ptr)
}

func marshalMemoryAllocateFlagBitsKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapMemoryAllocateFlagBitsKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (m *MemoryAllocateFlagBitsKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&m.native)
}

type MemoryAllocateFlagsInfoKHR struct {
	native C.VkMemoryAllocateFlagsInfoKHR
}

// WrapMemoryAllocateFlagsInfoKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapMemoryAllocateFlagsInfoKHR(ptr unsafe.Pointer) *MemoryAllocateFlagsInfoKHR {
	if ptr == nil {
		return nil
	}

	return (*MemoryAllocateFlagsInfoKHR)(ptr)
}

func marshalMemoryAllocateFlagsInfoKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapMemoryAllocateFlagsInfoKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (m *MemoryAllocateFlagsInfoKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&m.native)
}

type DeviceGroupRenderPassBeginInfoKHR struct {
	native C.VkDeviceGroupRenderPassBeginInfoKHR
}

// WrapDeviceGroupRenderPassBeginInfoKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDeviceGroupRenderPassBeginInfoKHR(ptr unsafe.Pointer) *DeviceGroupRenderPassBeginInfoKHR {
	if ptr == nil {
		return nil
	}

	return (*DeviceGroupRenderPassBeginInfoKHR)(ptr)
}

func marshalDeviceGroupRenderPassBeginInfoKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDeviceGroupRenderPassBeginInfoKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DeviceGroupRenderPassBeginInfoKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type DeviceGroupCommandBufferBeginInfoKHR struct {
	native C.VkDeviceGroupCommandBufferBeginInfoKHR
}

// WrapDeviceGroupCommandBufferBeginInfoKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDeviceGroupCommandBufferBeginInfoKHR(ptr unsafe.Pointer) *DeviceGroupCommandBufferBeginInfoKHR {
	if ptr == nil {
		return nil
	}

	return (*DeviceGroupCommandBufferBeginInfoKHR)(ptr)
}

func marshalDeviceGroupCommandBufferBeginInfoKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDeviceGroupCommandBufferBeginInfoKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DeviceGroupCommandBufferBeginInfoKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type DeviceGroupSubmitInfoKHR struct {
	native C.VkDeviceGroupSubmitInfoKHR
}

// WrapDeviceGroupSubmitInfoKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDeviceGroupSubmitInfoKHR(ptr unsafe.Pointer) *DeviceGroupSubmitInfoKHR {
	if ptr == nil {
		return nil
	}

	return (*DeviceGroupSubmitInfoKHR)(ptr)
}

func marshalDeviceGroupSubmitInfoKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDeviceGroupSubmitInfoKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DeviceGroupSubmitInfoKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type DeviceGroupBindSparseInfoKHR struct {
	native C.VkDeviceGroupBindSparseInfoKHR
}

// WrapDeviceGroupBindSparseInfoKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDeviceGroupBindSparseInfoKHR(ptr unsafe.Pointer) *DeviceGroupBindSparseInfoKHR {
	if ptr == nil {
		return nil
	}

	return (*DeviceGroupBindSparseInfoKHR)(ptr)
}

func marshalDeviceGroupBindSparseInfoKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDeviceGroupBindSparseInfoKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DeviceGroupBindSparseInfoKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type BindBufferMemoryDeviceGroupInfoKHR struct {
	native C.VkBindBufferMemoryDeviceGroupInfoKHR
}

// WrapBindBufferMemoryDeviceGroupInfoKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapBindBufferMemoryDeviceGroupInfoKHR(ptr unsafe.Pointer) *BindBufferMemoryDeviceGroupInfoKHR {
	if ptr == nil {
		return nil
	}

	return (*BindBufferMemoryDeviceGroupInfoKHR)(ptr)
}

func marshalBindBufferMemoryDeviceGroupInfoKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapBindBufferMemoryDeviceGroupInfoKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (b *BindBufferMemoryDeviceGroupInfoKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&b.native)
}

type BindImageMemoryDeviceGroupInfoKHR struct {
	native C.VkBindImageMemoryDeviceGroupInfoKHR
}

// WrapBindImageMemoryDeviceGroupInfoKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapBindImageMemoryDeviceGroupInfoKHR(ptr unsafe.Pointer) *BindImageMemoryDeviceGroupInfoKHR {
	if ptr == nil {
		return nil
	}

	return (*BindImageMemoryDeviceGroupInfoKHR)(ptr)
}

func marshalBindImageMemoryDeviceGroupInfoKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapBindImageMemoryDeviceGroupInfoKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (b *BindImageMemoryDeviceGroupInfoKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&b.native)
}

type CommandPoolTrimFlagsKHR struct {
	native C.VkCommandPoolTrimFlagsKHR
}

// WrapCommandPoolTrimFlagsKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapCommandPoolTrimFlagsKHR(ptr unsafe.Pointer) *CommandPoolTrimFlagsKHR {
	if ptr == nil {
		return nil
	}

	return (*CommandPoolTrimFlagsKHR)(ptr)
}

func marshalCommandPoolTrimFlagsKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapCommandPoolTrimFlagsKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (c *CommandPoolTrimFlagsKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&c.native)
}

type PhysicalDeviceGroupPropertiesKHR struct {
	native C.VkPhysicalDeviceGroupPropertiesKHR
}

// WrapPhysicalDeviceGroupPropertiesKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceGroupPropertiesKHR(ptr unsafe.Pointer) *PhysicalDeviceGroupPropertiesKHR {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceGroupPropertiesKHR)(ptr)
}

func marshalPhysicalDeviceGroupPropertiesKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceGroupPropertiesKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceGroupPropertiesKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type DeviceGroupDeviceCreateInfoKHR struct {
	native C.VkDeviceGroupDeviceCreateInfoKHR
}

// WrapDeviceGroupDeviceCreateInfoKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDeviceGroupDeviceCreateInfoKHR(ptr unsafe.Pointer) *DeviceGroupDeviceCreateInfoKHR {
	if ptr == nil {
		return nil
	}

	return (*DeviceGroupDeviceCreateInfoKHR)(ptr)
}

func marshalDeviceGroupDeviceCreateInfoKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDeviceGroupDeviceCreateInfoKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DeviceGroupDeviceCreateInfoKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type ExternalMemoryHandleTypeFlagsKHR struct {
	native C.VkExternalMemoryHandleTypeFlagsKHR
}

// WrapExternalMemoryHandleTypeFlagsKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapExternalMemoryHandleTypeFlagsKHR(ptr unsafe.Pointer) *ExternalMemoryHandleTypeFlagsKHR {
	if ptr == nil {
		return nil
	}

	return (*ExternalMemoryHandleTypeFlagsKHR)(ptr)
}

func marshalExternalMemoryHandleTypeFlagsKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapExternalMemoryHandleTypeFlagsKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (e *ExternalMemoryHandleTypeFlagsKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

type ExternalMemoryHandleTypeFlagBitsKHR struct {
	native C.VkExternalMemoryHandleTypeFlagBitsKHR
}

// WrapExternalMemoryHandleTypeFlagBitsKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapExternalMemoryHandleTypeFlagBitsKHR(ptr unsafe.Pointer) *ExternalMemoryHandleTypeFlagBitsKHR {
	if ptr == nil {
		return nil
	}

	return (*ExternalMemoryHandleTypeFlagBitsKHR)(ptr)
}

func marshalExternalMemoryHandleTypeFlagBitsKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapExternalMemoryHandleTypeFlagBitsKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (e *ExternalMemoryHandleTypeFlagBitsKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

type ExternalMemoryFeatureFlagsKHR struct {
	native C.VkExternalMemoryFeatureFlagsKHR
}

// WrapExternalMemoryFeatureFlagsKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapExternalMemoryFeatureFlagsKHR(ptr unsafe.Pointer) *ExternalMemoryFeatureFlagsKHR {
	if ptr == nil {
		return nil
	}

	return (*ExternalMemoryFeatureFlagsKHR)(ptr)
}

func marshalExternalMemoryFeatureFlagsKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapExternalMemoryFeatureFlagsKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (e *ExternalMemoryFeatureFlagsKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

type ExternalMemoryFeatureFlagBitsKHR struct {
	native C.VkExternalMemoryFeatureFlagBitsKHR
}

// WrapExternalMemoryFeatureFlagBitsKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapExternalMemoryFeatureFlagBitsKHR(ptr unsafe.Pointer) *ExternalMemoryFeatureFlagBitsKHR {
	if ptr == nil {
		return nil
	}

	return (*ExternalMemoryFeatureFlagBitsKHR)(ptr)
}

func marshalExternalMemoryFeatureFlagBitsKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapExternalMemoryFeatureFlagBitsKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (e *ExternalMemoryFeatureFlagBitsKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

type ExternalMemoryPropertiesKHR struct {
	native C.VkExternalMemoryPropertiesKHR
}

// WrapExternalMemoryPropertiesKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapExternalMemoryPropertiesKHR(ptr unsafe.Pointer) *ExternalMemoryPropertiesKHR {
	if ptr == nil {
		return nil
	}

	return (*ExternalMemoryPropertiesKHR)(ptr)
}

func marshalExternalMemoryPropertiesKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapExternalMemoryPropertiesKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (e *ExternalMemoryPropertiesKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

type PhysicalDeviceExternalImageFormatInfoKHR struct {
	native C.VkPhysicalDeviceExternalImageFormatInfoKHR
}

// WrapPhysicalDeviceExternalImageFormatInfoKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceExternalImageFormatInfoKHR(ptr unsafe.Pointer) *PhysicalDeviceExternalImageFormatInfoKHR {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceExternalImageFormatInfoKHR)(ptr)
}

func marshalPhysicalDeviceExternalImageFormatInfoKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceExternalImageFormatInfoKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceExternalImageFormatInfoKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type ExternalImageFormatPropertiesKHR struct {
	native C.VkExternalImageFormatPropertiesKHR
}

// WrapExternalImageFormatPropertiesKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapExternalImageFormatPropertiesKHR(ptr unsafe.Pointer) *ExternalImageFormatPropertiesKHR {
	if ptr == nil {
		return nil
	}

	return (*ExternalImageFormatPropertiesKHR)(ptr)
}

func marshalExternalImageFormatPropertiesKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapExternalImageFormatPropertiesKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (e *ExternalImageFormatPropertiesKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

type PhysicalDeviceExternalBufferInfoKHR struct {
	native C.VkPhysicalDeviceExternalBufferInfoKHR
}

// WrapPhysicalDeviceExternalBufferInfoKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceExternalBufferInfoKHR(ptr unsafe.Pointer) *PhysicalDeviceExternalBufferInfoKHR {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceExternalBufferInfoKHR)(ptr)
}

func marshalPhysicalDeviceExternalBufferInfoKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceExternalBufferInfoKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceExternalBufferInfoKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type ExternalBufferPropertiesKHR struct {
	native C.VkExternalBufferPropertiesKHR
}

// WrapExternalBufferPropertiesKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapExternalBufferPropertiesKHR(ptr unsafe.Pointer) *ExternalBufferPropertiesKHR {
	if ptr == nil {
		return nil
	}

	return (*ExternalBufferPropertiesKHR)(ptr)
}

func marshalExternalBufferPropertiesKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapExternalBufferPropertiesKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (e *ExternalBufferPropertiesKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

type PhysicalDeviceIDPropertiesKHR struct {
	native C.VkPhysicalDeviceIDPropertiesKHR
}

// WrapPhysicalDeviceIDPropertiesKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceIDPropertiesKHR(ptr unsafe.Pointer) *PhysicalDeviceIDPropertiesKHR {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceIDPropertiesKHR)(ptr)
}

func marshalPhysicalDeviceIDPropertiesKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceIDPropertiesKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceIDPropertiesKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type ExternalMemoryImageCreateInfoKHR struct {
	native C.VkExternalMemoryImageCreateInfoKHR
}

// WrapExternalMemoryImageCreateInfoKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapExternalMemoryImageCreateInfoKHR(ptr unsafe.Pointer) *ExternalMemoryImageCreateInfoKHR {
	if ptr == nil {
		return nil
	}

	return (*ExternalMemoryImageCreateInfoKHR)(ptr)
}

func marshalExternalMemoryImageCreateInfoKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapExternalMemoryImageCreateInfoKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (e *ExternalMemoryImageCreateInfoKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

type ExternalMemoryBufferCreateInfoKHR struct {
	native C.VkExternalMemoryBufferCreateInfoKHR
}

// WrapExternalMemoryBufferCreateInfoKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapExternalMemoryBufferCreateInfoKHR(ptr unsafe.Pointer) *ExternalMemoryBufferCreateInfoKHR {
	if ptr == nil {
		return nil
	}

	return (*ExternalMemoryBufferCreateInfoKHR)(ptr)
}

func marshalExternalMemoryBufferCreateInfoKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapExternalMemoryBufferCreateInfoKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (e *ExternalMemoryBufferCreateInfoKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

type ExportMemoryAllocateInfoKHR struct {
	native C.VkExportMemoryAllocateInfoKHR
}

// WrapExportMemoryAllocateInfoKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapExportMemoryAllocateInfoKHR(ptr unsafe.Pointer) *ExportMemoryAllocateInfoKHR {
	if ptr == nil {
		return nil
	}

	return (*ExportMemoryAllocateInfoKHR)(ptr)
}

func marshalExportMemoryAllocateInfoKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapExportMemoryAllocateInfoKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (e *ExportMemoryAllocateInfoKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

type ImportMemoryFdInfoKHR struct {
	native C.VkImportMemoryFdInfoKHR
}

// WrapImportMemoryFdInfoKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapImportMemoryFdInfoKHR(ptr unsafe.Pointer) *ImportMemoryFdInfoKHR {
	if ptr == nil {
		return nil
	}

	return (*ImportMemoryFdInfoKHR)(ptr)
}

func marshalImportMemoryFdInfoKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapImportMemoryFdInfoKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (i *ImportMemoryFdInfoKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&i.native)
}

type MemoryFdPropertiesKHR struct {
	native C.VkMemoryFdPropertiesKHR
}

// WrapMemoryFdPropertiesKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapMemoryFdPropertiesKHR(ptr unsafe.Pointer) *MemoryFdPropertiesKHR {
	if ptr == nil {
		return nil
	}

	return (*MemoryFdPropertiesKHR)(ptr)
}

func marshalMemoryFdPropertiesKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapMemoryFdPropertiesKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (m *MemoryFdPropertiesKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&m.native)
}

type MemoryGetFdInfoKHR struct {
	native C.VkMemoryGetFdInfoKHR
}

// WrapMemoryGetFdInfoKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapMemoryGetFdInfoKHR(ptr unsafe.Pointer) *MemoryGetFdInfoKHR {
	if ptr == nil {
		return nil
	}

	return (*MemoryGetFdInfoKHR)(ptr)
}

func marshalMemoryGetFdInfoKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapMemoryGetFdInfoKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (m *MemoryGetFdInfoKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&m.native)
}

type ExternalSemaphoreHandleTypeFlagsKHR struct {
	native C.VkExternalSemaphoreHandleTypeFlagsKHR
}

// WrapExternalSemaphoreHandleTypeFlagsKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapExternalSemaphoreHandleTypeFlagsKHR(ptr unsafe.Pointer) *ExternalSemaphoreHandleTypeFlagsKHR {
	if ptr == nil {
		return nil
	}

	return (*ExternalSemaphoreHandleTypeFlagsKHR)(ptr)
}

func marshalExternalSemaphoreHandleTypeFlagsKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapExternalSemaphoreHandleTypeFlagsKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (e *ExternalSemaphoreHandleTypeFlagsKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

type ExternalSemaphoreHandleTypeFlagBitsKHR struct {
	native C.VkExternalSemaphoreHandleTypeFlagBitsKHR
}

// WrapExternalSemaphoreHandleTypeFlagBitsKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapExternalSemaphoreHandleTypeFlagBitsKHR(ptr unsafe.Pointer) *ExternalSemaphoreHandleTypeFlagBitsKHR {
	if ptr == nil {
		return nil
	}

	return (*ExternalSemaphoreHandleTypeFlagBitsKHR)(ptr)
}

func marshalExternalSemaphoreHandleTypeFlagBitsKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapExternalSemaphoreHandleTypeFlagBitsKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (e *ExternalSemaphoreHandleTypeFlagBitsKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

type ExternalSemaphoreFeatureFlagsKHR struct {
	native C.VkExternalSemaphoreFeatureFlagsKHR
}

// WrapExternalSemaphoreFeatureFlagsKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapExternalSemaphoreFeatureFlagsKHR(ptr unsafe.Pointer) *ExternalSemaphoreFeatureFlagsKHR {
	if ptr == nil {
		return nil
	}

	return (*ExternalSemaphoreFeatureFlagsKHR)(ptr)
}

func marshalExternalSemaphoreFeatureFlagsKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapExternalSemaphoreFeatureFlagsKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (e *ExternalSemaphoreFeatureFlagsKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

type ExternalSemaphoreFeatureFlagBitsKHR struct {
	native C.VkExternalSemaphoreFeatureFlagBitsKHR
}

// WrapExternalSemaphoreFeatureFlagBitsKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapExternalSemaphoreFeatureFlagBitsKHR(ptr unsafe.Pointer) *ExternalSemaphoreFeatureFlagBitsKHR {
	if ptr == nil {
		return nil
	}

	return (*ExternalSemaphoreFeatureFlagBitsKHR)(ptr)
}

func marshalExternalSemaphoreFeatureFlagBitsKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapExternalSemaphoreFeatureFlagBitsKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (e *ExternalSemaphoreFeatureFlagBitsKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

type PhysicalDeviceExternalSemaphoreInfoKHR struct {
	native C.VkPhysicalDeviceExternalSemaphoreInfoKHR
}

// WrapPhysicalDeviceExternalSemaphoreInfoKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceExternalSemaphoreInfoKHR(ptr unsafe.Pointer) *PhysicalDeviceExternalSemaphoreInfoKHR {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceExternalSemaphoreInfoKHR)(ptr)
}

func marshalPhysicalDeviceExternalSemaphoreInfoKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceExternalSemaphoreInfoKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceExternalSemaphoreInfoKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type ExternalSemaphorePropertiesKHR struct {
	native C.VkExternalSemaphorePropertiesKHR
}

// WrapExternalSemaphorePropertiesKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapExternalSemaphorePropertiesKHR(ptr unsafe.Pointer) *ExternalSemaphorePropertiesKHR {
	if ptr == nil {
		return nil
	}

	return (*ExternalSemaphorePropertiesKHR)(ptr)
}

func marshalExternalSemaphorePropertiesKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapExternalSemaphorePropertiesKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (e *ExternalSemaphorePropertiesKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

type SemaphoreImportFlagsKHR struct {
	native C.VkSemaphoreImportFlagsKHR
}

// WrapSemaphoreImportFlagsKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSemaphoreImportFlagsKHR(ptr unsafe.Pointer) *SemaphoreImportFlagsKHR {
	if ptr == nil {
		return nil
	}

	return (*SemaphoreImportFlagsKHR)(ptr)
}

func marshalSemaphoreImportFlagsKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSemaphoreImportFlagsKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SemaphoreImportFlagsKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type SemaphoreImportFlagBitsKHR struct {
	native C.VkSemaphoreImportFlagBitsKHR
}

// WrapSemaphoreImportFlagBitsKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSemaphoreImportFlagBitsKHR(ptr unsafe.Pointer) *SemaphoreImportFlagBitsKHR {
	if ptr == nil {
		return nil
	}

	return (*SemaphoreImportFlagBitsKHR)(ptr)
}

func marshalSemaphoreImportFlagBitsKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSemaphoreImportFlagBitsKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SemaphoreImportFlagBitsKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type ExportSemaphoreCreateInfoKHR struct {
	native C.VkExportSemaphoreCreateInfoKHR
}

// WrapExportSemaphoreCreateInfoKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapExportSemaphoreCreateInfoKHR(ptr unsafe.Pointer) *ExportSemaphoreCreateInfoKHR {
	if ptr == nil {
		return nil
	}

	return (*ExportSemaphoreCreateInfoKHR)(ptr)
}

func marshalExportSemaphoreCreateInfoKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapExportSemaphoreCreateInfoKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (e *ExportSemaphoreCreateInfoKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

type ImportSemaphoreFdInfoKHR struct {
	native C.VkImportSemaphoreFdInfoKHR
}

// WrapImportSemaphoreFdInfoKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapImportSemaphoreFdInfoKHR(ptr unsafe.Pointer) *ImportSemaphoreFdInfoKHR {
	if ptr == nil {
		return nil
	}

	return (*ImportSemaphoreFdInfoKHR)(ptr)
}

func marshalImportSemaphoreFdInfoKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapImportSemaphoreFdInfoKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (i *ImportSemaphoreFdInfoKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&i.native)
}

type SemaphoreGetFdInfoKHR struct {
	native C.VkSemaphoreGetFdInfoKHR
}

// WrapSemaphoreGetFdInfoKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSemaphoreGetFdInfoKHR(ptr unsafe.Pointer) *SemaphoreGetFdInfoKHR {
	if ptr == nil {
		return nil
	}

	return (*SemaphoreGetFdInfoKHR)(ptr)
}

func marshalSemaphoreGetFdInfoKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSemaphoreGetFdInfoKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SemaphoreGetFdInfoKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type PhysicalDevicePushDescriptorPropertiesKHR struct {
	native C.VkPhysicalDevicePushDescriptorPropertiesKHR
}

// WrapPhysicalDevicePushDescriptorPropertiesKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDevicePushDescriptorPropertiesKHR(ptr unsafe.Pointer) *PhysicalDevicePushDescriptorPropertiesKHR {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDevicePushDescriptorPropertiesKHR)(ptr)
}

func marshalPhysicalDevicePushDescriptorPropertiesKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDevicePushDescriptorPropertiesKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDevicePushDescriptorPropertiesKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PhysicalDeviceFloat16Int8FeaturesKHR struct {
	native C.VkPhysicalDeviceFloat16Int8FeaturesKHR
}

// WrapPhysicalDeviceFloat16Int8FeaturesKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceFloat16Int8FeaturesKHR(ptr unsafe.Pointer) *PhysicalDeviceFloat16Int8FeaturesKHR {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceFloat16Int8FeaturesKHR)(ptr)
}

func marshalPhysicalDeviceFloat16Int8FeaturesKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceFloat16Int8FeaturesKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceFloat16Int8FeaturesKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PhysicalDevice16BitStorageFeaturesKHR struct {
	native C.VkPhysicalDevice16BitStorageFeaturesKHR
}

// WrapPhysicalDevice16BitStorageFeaturesKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDevice16BitStorageFeaturesKHR(ptr unsafe.Pointer) *PhysicalDevice16BitStorageFeaturesKHR {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDevice16BitStorageFeaturesKHR)(ptr)
}

func marshalPhysicalDevice16BitStorageFeaturesKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDevice16BitStorageFeaturesKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDevice16BitStorageFeaturesKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type RectLayerKHR struct {
	native C.VkRectLayerKHR
}

// WrapRectLayerKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapRectLayerKHR(ptr unsafe.Pointer) *RectLayerKHR {
	if ptr == nil {
		return nil
	}

	return (*RectLayerKHR)(ptr)
}

func marshalRectLayerKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapRectLayerKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (r *RectLayerKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&r.native)
}

type PresentRegionKHR struct {
	native C.VkPresentRegionKHR
}

// WrapPresentRegionKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPresentRegionKHR(ptr unsafe.Pointer) *PresentRegionKHR {
	if ptr == nil {
		return nil
	}

	return (*PresentRegionKHR)(ptr)
}

func marshalPresentRegionKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPresentRegionKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PresentRegionKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PresentRegionsKHR struct {
	native C.VkPresentRegionsKHR
}

// WrapPresentRegionsKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPresentRegionsKHR(ptr unsafe.Pointer) *PresentRegionsKHR {
	if ptr == nil {
		return nil
	}

	return (*PresentRegionsKHR)(ptr)
}

func marshalPresentRegionsKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPresentRegionsKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PresentRegionsKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type DescriptorUpdateTemplateKHR struct {
	native C.VkDescriptorUpdateTemplateKHR
}

// WrapDescriptorUpdateTemplateKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDescriptorUpdateTemplateKHR(ptr unsafe.Pointer) *DescriptorUpdateTemplateKHR {
	if ptr == nil {
		return nil
	}

	return (*DescriptorUpdateTemplateKHR)(ptr)
}

func marshalDescriptorUpdateTemplateKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDescriptorUpdateTemplateKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DescriptorUpdateTemplateKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type DescriptorUpdateTemplateTypeKHR struct {
	native C.VkDescriptorUpdateTemplateTypeKHR
}

// WrapDescriptorUpdateTemplateTypeKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDescriptorUpdateTemplateTypeKHR(ptr unsafe.Pointer) *DescriptorUpdateTemplateTypeKHR {
	if ptr == nil {
		return nil
	}

	return (*DescriptorUpdateTemplateTypeKHR)(ptr)
}

func marshalDescriptorUpdateTemplateTypeKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDescriptorUpdateTemplateTypeKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DescriptorUpdateTemplateTypeKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type DescriptorUpdateTemplateCreateFlagsKHR struct {
	native C.VkDescriptorUpdateTemplateCreateFlagsKHR
}

// WrapDescriptorUpdateTemplateCreateFlagsKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDescriptorUpdateTemplateCreateFlagsKHR(ptr unsafe.Pointer) *DescriptorUpdateTemplateCreateFlagsKHR {
	if ptr == nil {
		return nil
	}

	return (*DescriptorUpdateTemplateCreateFlagsKHR)(ptr)
}

func marshalDescriptorUpdateTemplateCreateFlagsKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDescriptorUpdateTemplateCreateFlagsKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DescriptorUpdateTemplateCreateFlagsKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type DescriptorUpdateTemplateEntryKHR struct {
	native C.VkDescriptorUpdateTemplateEntryKHR
}

// WrapDescriptorUpdateTemplateEntryKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDescriptorUpdateTemplateEntryKHR(ptr unsafe.Pointer) *DescriptorUpdateTemplateEntryKHR {
	if ptr == nil {
		return nil
	}

	return (*DescriptorUpdateTemplateEntryKHR)(ptr)
}

func marshalDescriptorUpdateTemplateEntryKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDescriptorUpdateTemplateEntryKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DescriptorUpdateTemplateEntryKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type DescriptorUpdateTemplateCreateInfoKHR struct {
	native C.VkDescriptorUpdateTemplateCreateInfoKHR
}

// WrapDescriptorUpdateTemplateCreateInfoKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDescriptorUpdateTemplateCreateInfoKHR(ptr unsafe.Pointer) *DescriptorUpdateTemplateCreateInfoKHR {
	if ptr == nil {
		return nil
	}

	return (*DescriptorUpdateTemplateCreateInfoKHR)(ptr)
}

func marshalDescriptorUpdateTemplateCreateInfoKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDescriptorUpdateTemplateCreateInfoKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DescriptorUpdateTemplateCreateInfoKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type AttachmentDescription2KHR struct {
	native C.VkAttachmentDescription2KHR
}

// WrapAttachmentDescription2KHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapAttachmentDescription2KHR(ptr unsafe.Pointer) *AttachmentDescription2KHR {
	if ptr == nil {
		return nil
	}

	return (*AttachmentDescription2KHR)(ptr)
}

func marshalAttachmentDescription2KHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapAttachmentDescription2KHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (a *AttachmentDescription2KHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&a.native)
}

type AttachmentReference2KHR struct {
	native C.VkAttachmentReference2KHR
}

// WrapAttachmentReference2KHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapAttachmentReference2KHR(ptr unsafe.Pointer) *AttachmentReference2KHR {
	if ptr == nil {
		return nil
	}

	return (*AttachmentReference2KHR)(ptr)
}

func marshalAttachmentReference2KHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapAttachmentReference2KHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (a *AttachmentReference2KHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&a.native)
}

type SubpassDescription2KHR struct {
	native C.VkSubpassDescription2KHR
}

// WrapSubpassDescription2KHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSubpassDescription2KHR(ptr unsafe.Pointer) *SubpassDescription2KHR {
	if ptr == nil {
		return nil
	}

	return (*SubpassDescription2KHR)(ptr)
}

func marshalSubpassDescription2KHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSubpassDescription2KHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SubpassDescription2KHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type SubpassDependency2KHR struct {
	native C.VkSubpassDependency2KHR
}

// WrapSubpassDependency2KHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSubpassDependency2KHR(ptr unsafe.Pointer) *SubpassDependency2KHR {
	if ptr == nil {
		return nil
	}

	return (*SubpassDependency2KHR)(ptr)
}

func marshalSubpassDependency2KHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSubpassDependency2KHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SubpassDependency2KHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type RenderPassCreateInfo2KHR struct {
	native C.VkRenderPassCreateInfo2KHR
}

// WrapRenderPassCreateInfo2KHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapRenderPassCreateInfo2KHR(ptr unsafe.Pointer) *RenderPassCreateInfo2KHR {
	if ptr == nil {
		return nil
	}

	return (*RenderPassCreateInfo2KHR)(ptr)
}

func marshalRenderPassCreateInfo2KHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapRenderPassCreateInfo2KHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (r *RenderPassCreateInfo2KHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&r.native)
}

type SubpassBeginInfoKHR struct {
	native C.VkSubpassBeginInfoKHR
}

// WrapSubpassBeginInfoKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSubpassBeginInfoKHR(ptr unsafe.Pointer) *SubpassBeginInfoKHR {
	if ptr == nil {
		return nil
	}

	return (*SubpassBeginInfoKHR)(ptr)
}

func marshalSubpassBeginInfoKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSubpassBeginInfoKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SubpassBeginInfoKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type SubpassEndInfoKHR struct {
	native C.VkSubpassEndInfoKHR
}

// WrapSubpassEndInfoKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSubpassEndInfoKHR(ptr unsafe.Pointer) *SubpassEndInfoKHR {
	if ptr == nil {
		return nil
	}

	return (*SubpassEndInfoKHR)(ptr)
}

func marshalSubpassEndInfoKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSubpassEndInfoKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SubpassEndInfoKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type SharedPresentSurfaceCapabilitiesKHR struct {
	native C.VkSharedPresentSurfaceCapabilitiesKHR
}

// WrapSharedPresentSurfaceCapabilitiesKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSharedPresentSurfaceCapabilitiesKHR(ptr unsafe.Pointer) *SharedPresentSurfaceCapabilitiesKHR {
	if ptr == nil {
		return nil
	}

	return (*SharedPresentSurfaceCapabilitiesKHR)(ptr)
}

func marshalSharedPresentSurfaceCapabilitiesKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSharedPresentSurfaceCapabilitiesKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SharedPresentSurfaceCapabilitiesKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type ExternalFenceHandleTypeFlagsKHR struct {
	native C.VkExternalFenceHandleTypeFlagsKHR
}

// WrapExternalFenceHandleTypeFlagsKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapExternalFenceHandleTypeFlagsKHR(ptr unsafe.Pointer) *ExternalFenceHandleTypeFlagsKHR {
	if ptr == nil {
		return nil
	}

	return (*ExternalFenceHandleTypeFlagsKHR)(ptr)
}

func marshalExternalFenceHandleTypeFlagsKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapExternalFenceHandleTypeFlagsKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (e *ExternalFenceHandleTypeFlagsKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

type ExternalFenceHandleTypeFlagBitsKHR struct {
	native C.VkExternalFenceHandleTypeFlagBitsKHR
}

// WrapExternalFenceHandleTypeFlagBitsKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapExternalFenceHandleTypeFlagBitsKHR(ptr unsafe.Pointer) *ExternalFenceHandleTypeFlagBitsKHR {
	if ptr == nil {
		return nil
	}

	return (*ExternalFenceHandleTypeFlagBitsKHR)(ptr)
}

func marshalExternalFenceHandleTypeFlagBitsKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapExternalFenceHandleTypeFlagBitsKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (e *ExternalFenceHandleTypeFlagBitsKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

type ExternalFenceFeatureFlagsKHR struct {
	native C.VkExternalFenceFeatureFlagsKHR
}

// WrapExternalFenceFeatureFlagsKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapExternalFenceFeatureFlagsKHR(ptr unsafe.Pointer) *ExternalFenceFeatureFlagsKHR {
	if ptr == nil {
		return nil
	}

	return (*ExternalFenceFeatureFlagsKHR)(ptr)
}

func marshalExternalFenceFeatureFlagsKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapExternalFenceFeatureFlagsKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (e *ExternalFenceFeatureFlagsKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

type ExternalFenceFeatureFlagBitsKHR struct {
	native C.VkExternalFenceFeatureFlagBitsKHR
}

// WrapExternalFenceFeatureFlagBitsKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapExternalFenceFeatureFlagBitsKHR(ptr unsafe.Pointer) *ExternalFenceFeatureFlagBitsKHR {
	if ptr == nil {
		return nil
	}

	return (*ExternalFenceFeatureFlagBitsKHR)(ptr)
}

func marshalExternalFenceFeatureFlagBitsKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapExternalFenceFeatureFlagBitsKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (e *ExternalFenceFeatureFlagBitsKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

type PhysicalDeviceExternalFenceInfoKHR struct {
	native C.VkPhysicalDeviceExternalFenceInfoKHR
}

// WrapPhysicalDeviceExternalFenceInfoKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceExternalFenceInfoKHR(ptr unsafe.Pointer) *PhysicalDeviceExternalFenceInfoKHR {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceExternalFenceInfoKHR)(ptr)
}

func marshalPhysicalDeviceExternalFenceInfoKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceExternalFenceInfoKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceExternalFenceInfoKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type ExternalFencePropertiesKHR struct {
	native C.VkExternalFencePropertiesKHR
}

// WrapExternalFencePropertiesKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapExternalFencePropertiesKHR(ptr unsafe.Pointer) *ExternalFencePropertiesKHR {
	if ptr == nil {
		return nil
	}

	return (*ExternalFencePropertiesKHR)(ptr)
}

func marshalExternalFencePropertiesKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapExternalFencePropertiesKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (e *ExternalFencePropertiesKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

type FenceImportFlagsKHR struct {
	native C.VkFenceImportFlagsKHR
}

// WrapFenceImportFlagsKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapFenceImportFlagsKHR(ptr unsafe.Pointer) *FenceImportFlagsKHR {
	if ptr == nil {
		return nil
	}

	return (*FenceImportFlagsKHR)(ptr)
}

func marshalFenceImportFlagsKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapFenceImportFlagsKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (f *FenceImportFlagsKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&f.native)
}

type FenceImportFlagBitsKHR struct {
	native C.VkFenceImportFlagBitsKHR
}

// WrapFenceImportFlagBitsKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapFenceImportFlagBitsKHR(ptr unsafe.Pointer) *FenceImportFlagBitsKHR {
	if ptr == nil {
		return nil
	}

	return (*FenceImportFlagBitsKHR)(ptr)
}

func marshalFenceImportFlagBitsKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapFenceImportFlagBitsKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (f *FenceImportFlagBitsKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&f.native)
}

type ExportFenceCreateInfoKHR struct {
	native C.VkExportFenceCreateInfoKHR
}

// WrapExportFenceCreateInfoKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapExportFenceCreateInfoKHR(ptr unsafe.Pointer) *ExportFenceCreateInfoKHR {
	if ptr == nil {
		return nil
	}

	return (*ExportFenceCreateInfoKHR)(ptr)
}

func marshalExportFenceCreateInfoKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapExportFenceCreateInfoKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (e *ExportFenceCreateInfoKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

type ImportFenceFdInfoKHR struct {
	native C.VkImportFenceFdInfoKHR
}

// WrapImportFenceFdInfoKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapImportFenceFdInfoKHR(ptr unsafe.Pointer) *ImportFenceFdInfoKHR {
	if ptr == nil {
		return nil
	}

	return (*ImportFenceFdInfoKHR)(ptr)
}

func marshalImportFenceFdInfoKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapImportFenceFdInfoKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (i *ImportFenceFdInfoKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&i.native)
}

type FenceGetFdInfoKHR struct {
	native C.VkFenceGetFdInfoKHR
}

// WrapFenceGetFdInfoKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapFenceGetFdInfoKHR(ptr unsafe.Pointer) *FenceGetFdInfoKHR {
	if ptr == nil {
		return nil
	}

	return (*FenceGetFdInfoKHR)(ptr)
}

func marshalFenceGetFdInfoKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapFenceGetFdInfoKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (f *FenceGetFdInfoKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&f.native)
}

type PointClippingBehaviorKHR struct {
	native C.VkPointClippingBehaviorKHR
}

// WrapPointClippingBehaviorKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPointClippingBehaviorKHR(ptr unsafe.Pointer) *PointClippingBehaviorKHR {
	if ptr == nil {
		return nil
	}

	return (*PointClippingBehaviorKHR)(ptr)
}

func marshalPointClippingBehaviorKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPointClippingBehaviorKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PointClippingBehaviorKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type TessellationDomainOriginKHR struct {
	native C.VkTessellationDomainOriginKHR
}

// WrapTessellationDomainOriginKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapTessellationDomainOriginKHR(ptr unsafe.Pointer) *TessellationDomainOriginKHR {
	if ptr == nil {
		return nil
	}

	return (*TessellationDomainOriginKHR)(ptr)
}

func marshalTessellationDomainOriginKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapTessellationDomainOriginKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (t *TessellationDomainOriginKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&t.native)
}

type PhysicalDevicePointClippingPropertiesKHR struct {
	native C.VkPhysicalDevicePointClippingPropertiesKHR
}

// WrapPhysicalDevicePointClippingPropertiesKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDevicePointClippingPropertiesKHR(ptr unsafe.Pointer) *PhysicalDevicePointClippingPropertiesKHR {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDevicePointClippingPropertiesKHR)(ptr)
}

func marshalPhysicalDevicePointClippingPropertiesKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDevicePointClippingPropertiesKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDevicePointClippingPropertiesKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type RenderPassInputAttachmentAspectCreateInfoKHR struct {
	native C.VkRenderPassInputAttachmentAspectCreateInfoKHR
}

// WrapRenderPassInputAttachmentAspectCreateInfoKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapRenderPassInputAttachmentAspectCreateInfoKHR(ptr unsafe.Pointer) *RenderPassInputAttachmentAspectCreateInfoKHR {
	if ptr == nil {
		return nil
	}

	return (*RenderPassInputAttachmentAspectCreateInfoKHR)(ptr)
}

func marshalRenderPassInputAttachmentAspectCreateInfoKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapRenderPassInputAttachmentAspectCreateInfoKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (r *RenderPassInputAttachmentAspectCreateInfoKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&r.native)
}

type InputAttachmentAspectReferenceKHR struct {
	native C.VkInputAttachmentAspectReferenceKHR
}

// WrapInputAttachmentAspectReferenceKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapInputAttachmentAspectReferenceKHR(ptr unsafe.Pointer) *InputAttachmentAspectReferenceKHR {
	if ptr == nil {
		return nil
	}

	return (*InputAttachmentAspectReferenceKHR)(ptr)
}

func marshalInputAttachmentAspectReferenceKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapInputAttachmentAspectReferenceKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (i *InputAttachmentAspectReferenceKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&i.native)
}

type ImageViewUsageCreateInfoKHR struct {
	native C.VkImageViewUsageCreateInfoKHR
}

// WrapImageViewUsageCreateInfoKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapImageViewUsageCreateInfoKHR(ptr unsafe.Pointer) *ImageViewUsageCreateInfoKHR {
	if ptr == nil {
		return nil
	}

	return (*ImageViewUsageCreateInfoKHR)(ptr)
}

func marshalImageViewUsageCreateInfoKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapImageViewUsageCreateInfoKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (i *ImageViewUsageCreateInfoKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&i.native)
}

type PipelineTessellationDomainOriginStateCreateInfoKHR struct {
	native C.VkPipelineTessellationDomainOriginStateCreateInfoKHR
}

// WrapPipelineTessellationDomainOriginStateCreateInfoKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPipelineTessellationDomainOriginStateCreateInfoKHR(ptr unsafe.Pointer) *PipelineTessellationDomainOriginStateCreateInfoKHR {
	if ptr == nil {
		return nil
	}

	return (*PipelineTessellationDomainOriginStateCreateInfoKHR)(ptr)
}

func marshalPipelineTessellationDomainOriginStateCreateInfoKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPipelineTessellationDomainOriginStateCreateInfoKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PipelineTessellationDomainOriginStateCreateInfoKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PhysicalDeviceSurfaceInfo2KHR struct {
	native C.VkPhysicalDeviceSurfaceInfo2KHR
}

// WrapPhysicalDeviceSurfaceInfo2KHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceSurfaceInfo2KHR(ptr unsafe.Pointer) *PhysicalDeviceSurfaceInfo2KHR {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceSurfaceInfo2KHR)(ptr)
}

func marshalPhysicalDeviceSurfaceInfo2KHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceSurfaceInfo2KHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceSurfaceInfo2KHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type SurfaceCapabilities2KHR struct {
	native C.VkSurfaceCapabilities2KHR
}

// WrapSurfaceCapabilities2KHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSurfaceCapabilities2KHR(ptr unsafe.Pointer) *SurfaceCapabilities2KHR {
	if ptr == nil {
		return nil
	}

	return (*SurfaceCapabilities2KHR)(ptr)
}

func marshalSurfaceCapabilities2KHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSurfaceCapabilities2KHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SurfaceCapabilities2KHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type SurfaceFormat2KHR struct {
	native C.VkSurfaceFormat2KHR
}

// WrapSurfaceFormat2KHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSurfaceFormat2KHR(ptr unsafe.Pointer) *SurfaceFormat2KHR {
	if ptr == nil {
		return nil
	}

	return (*SurfaceFormat2KHR)(ptr)
}

func marshalSurfaceFormat2KHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSurfaceFormat2KHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SurfaceFormat2KHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type PhysicalDeviceVariablePointerFeaturesKHR struct {
	native C.VkPhysicalDeviceVariablePointerFeaturesKHR
}

// WrapPhysicalDeviceVariablePointerFeaturesKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceVariablePointerFeaturesKHR(ptr unsafe.Pointer) *PhysicalDeviceVariablePointerFeaturesKHR {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceVariablePointerFeaturesKHR)(ptr)
}

func marshalPhysicalDeviceVariablePointerFeaturesKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceVariablePointerFeaturesKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceVariablePointerFeaturesKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PhysicalDeviceVariablePointersFeaturesKHR struct {
	native C.VkPhysicalDeviceVariablePointersFeaturesKHR
}

// WrapPhysicalDeviceVariablePointersFeaturesKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceVariablePointersFeaturesKHR(ptr unsafe.Pointer) *PhysicalDeviceVariablePointersFeaturesKHR {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceVariablePointersFeaturesKHR)(ptr)
}

func marshalPhysicalDeviceVariablePointersFeaturesKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceVariablePointersFeaturesKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceVariablePointersFeaturesKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type DisplayProperties2KHR struct {
	native C.VkDisplayProperties2KHR
}

// WrapDisplayProperties2KHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDisplayProperties2KHR(ptr unsafe.Pointer) *DisplayProperties2KHR {
	if ptr == nil {
		return nil
	}

	return (*DisplayProperties2KHR)(ptr)
}

func marshalDisplayProperties2KHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDisplayProperties2KHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DisplayProperties2KHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type DisplayPlaneProperties2KHR struct {
	native C.VkDisplayPlaneProperties2KHR
}

// WrapDisplayPlaneProperties2KHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDisplayPlaneProperties2KHR(ptr unsafe.Pointer) *DisplayPlaneProperties2KHR {
	if ptr == nil {
		return nil
	}

	return (*DisplayPlaneProperties2KHR)(ptr)
}

func marshalDisplayPlaneProperties2KHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDisplayPlaneProperties2KHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DisplayPlaneProperties2KHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type DisplayModeProperties2KHR struct {
	native C.VkDisplayModeProperties2KHR
}

// WrapDisplayModeProperties2KHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDisplayModeProperties2KHR(ptr unsafe.Pointer) *DisplayModeProperties2KHR {
	if ptr == nil {
		return nil
	}

	return (*DisplayModeProperties2KHR)(ptr)
}

func marshalDisplayModeProperties2KHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDisplayModeProperties2KHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DisplayModeProperties2KHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type DisplayPlaneInfo2KHR struct {
	native C.VkDisplayPlaneInfo2KHR
}

// WrapDisplayPlaneInfo2KHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDisplayPlaneInfo2KHR(ptr unsafe.Pointer) *DisplayPlaneInfo2KHR {
	if ptr == nil {
		return nil
	}

	return (*DisplayPlaneInfo2KHR)(ptr)
}

func marshalDisplayPlaneInfo2KHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDisplayPlaneInfo2KHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DisplayPlaneInfo2KHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type DisplayPlaneCapabilities2KHR struct {
	native C.VkDisplayPlaneCapabilities2KHR
}

// WrapDisplayPlaneCapabilities2KHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDisplayPlaneCapabilities2KHR(ptr unsafe.Pointer) *DisplayPlaneCapabilities2KHR {
	if ptr == nil {
		return nil
	}

	return (*DisplayPlaneCapabilities2KHR)(ptr)
}

func marshalDisplayPlaneCapabilities2KHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDisplayPlaneCapabilities2KHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DisplayPlaneCapabilities2KHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type MemoryDedicatedRequirementsKHR struct {
	native C.VkMemoryDedicatedRequirementsKHR
}

// WrapMemoryDedicatedRequirementsKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapMemoryDedicatedRequirementsKHR(ptr unsafe.Pointer) *MemoryDedicatedRequirementsKHR {
	if ptr == nil {
		return nil
	}

	return (*MemoryDedicatedRequirementsKHR)(ptr)
}

func marshalMemoryDedicatedRequirementsKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapMemoryDedicatedRequirementsKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (m *MemoryDedicatedRequirementsKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&m.native)
}

type MemoryDedicatedAllocateInfoKHR struct {
	native C.VkMemoryDedicatedAllocateInfoKHR
}

// WrapMemoryDedicatedAllocateInfoKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapMemoryDedicatedAllocateInfoKHR(ptr unsafe.Pointer) *MemoryDedicatedAllocateInfoKHR {
	if ptr == nil {
		return nil
	}

	return (*MemoryDedicatedAllocateInfoKHR)(ptr)
}

func marshalMemoryDedicatedAllocateInfoKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapMemoryDedicatedAllocateInfoKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (m *MemoryDedicatedAllocateInfoKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&m.native)
}

type BufferMemoryRequirementsInfo2KHR struct {
	native C.VkBufferMemoryRequirementsInfo2KHR
}

// WrapBufferMemoryRequirementsInfo2KHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapBufferMemoryRequirementsInfo2KHR(ptr unsafe.Pointer) *BufferMemoryRequirementsInfo2KHR {
	if ptr == nil {
		return nil
	}

	return (*BufferMemoryRequirementsInfo2KHR)(ptr)
}

func marshalBufferMemoryRequirementsInfo2KHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapBufferMemoryRequirementsInfo2KHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (b *BufferMemoryRequirementsInfo2KHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&b.native)
}

type ImageMemoryRequirementsInfo2KHR struct {
	native C.VkImageMemoryRequirementsInfo2KHR
}

// WrapImageMemoryRequirementsInfo2KHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapImageMemoryRequirementsInfo2KHR(ptr unsafe.Pointer) *ImageMemoryRequirementsInfo2KHR {
	if ptr == nil {
		return nil
	}

	return (*ImageMemoryRequirementsInfo2KHR)(ptr)
}

func marshalImageMemoryRequirementsInfo2KHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapImageMemoryRequirementsInfo2KHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (i *ImageMemoryRequirementsInfo2KHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&i.native)
}

type ImageSparseMemoryRequirementsInfo2KHR struct {
	native C.VkImageSparseMemoryRequirementsInfo2KHR
}

// WrapImageSparseMemoryRequirementsInfo2KHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapImageSparseMemoryRequirementsInfo2KHR(ptr unsafe.Pointer) *ImageSparseMemoryRequirementsInfo2KHR {
	if ptr == nil {
		return nil
	}

	return (*ImageSparseMemoryRequirementsInfo2KHR)(ptr)
}

func marshalImageSparseMemoryRequirementsInfo2KHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapImageSparseMemoryRequirementsInfo2KHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (i *ImageSparseMemoryRequirementsInfo2KHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&i.native)
}

type SparseImageMemoryRequirements2KHR struct {
	native C.VkSparseImageMemoryRequirements2KHR
}

// WrapSparseImageMemoryRequirements2KHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSparseImageMemoryRequirements2KHR(ptr unsafe.Pointer) *SparseImageMemoryRequirements2KHR {
	if ptr == nil {
		return nil
	}

	return (*SparseImageMemoryRequirements2KHR)(ptr)
}

func marshalSparseImageMemoryRequirements2KHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSparseImageMemoryRequirements2KHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SparseImageMemoryRequirements2KHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type ImageFormatListCreateInfoKHR struct {
	native C.VkImageFormatListCreateInfoKHR
}

// WrapImageFormatListCreateInfoKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapImageFormatListCreateInfoKHR(ptr unsafe.Pointer) *ImageFormatListCreateInfoKHR {
	if ptr == nil {
		return nil
	}

	return (*ImageFormatListCreateInfoKHR)(ptr)
}

func marshalImageFormatListCreateInfoKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapImageFormatListCreateInfoKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (i *ImageFormatListCreateInfoKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&i.native)
}

type SamplerYcbcrConversionKHR struct {
	native C.VkSamplerYcbcrConversionKHR
}

// WrapSamplerYcbcrConversionKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSamplerYcbcrConversionKHR(ptr unsafe.Pointer) *SamplerYcbcrConversionKHR {
	if ptr == nil {
		return nil
	}

	return (*SamplerYcbcrConversionKHR)(ptr)
}

func marshalSamplerYcbcrConversionKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSamplerYcbcrConversionKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SamplerYcbcrConversionKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type SamplerYcbcrModelConversionKHR struct {
	native C.VkSamplerYcbcrModelConversionKHR
}

// WrapSamplerYcbcrModelConversionKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSamplerYcbcrModelConversionKHR(ptr unsafe.Pointer) *SamplerYcbcrModelConversionKHR {
	if ptr == nil {
		return nil
	}

	return (*SamplerYcbcrModelConversionKHR)(ptr)
}

func marshalSamplerYcbcrModelConversionKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSamplerYcbcrModelConversionKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SamplerYcbcrModelConversionKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type SamplerYcbcrRangeKHR struct {
	native C.VkSamplerYcbcrRangeKHR
}

// WrapSamplerYcbcrRangeKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSamplerYcbcrRangeKHR(ptr unsafe.Pointer) *SamplerYcbcrRangeKHR {
	if ptr == nil {
		return nil
	}

	return (*SamplerYcbcrRangeKHR)(ptr)
}

func marshalSamplerYcbcrRangeKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSamplerYcbcrRangeKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SamplerYcbcrRangeKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type ChromaLocationKHR struct {
	native C.VkChromaLocationKHR
}

// WrapChromaLocationKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapChromaLocationKHR(ptr unsafe.Pointer) *ChromaLocationKHR {
	if ptr == nil {
		return nil
	}

	return (*ChromaLocationKHR)(ptr)
}

func marshalChromaLocationKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapChromaLocationKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (c *ChromaLocationKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&c.native)
}

type SamplerYcbcrConversionCreateInfoKHR struct {
	native C.VkSamplerYcbcrConversionCreateInfoKHR
}

// WrapSamplerYcbcrConversionCreateInfoKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSamplerYcbcrConversionCreateInfoKHR(ptr unsafe.Pointer) *SamplerYcbcrConversionCreateInfoKHR {
	if ptr == nil {
		return nil
	}

	return (*SamplerYcbcrConversionCreateInfoKHR)(ptr)
}

func marshalSamplerYcbcrConversionCreateInfoKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSamplerYcbcrConversionCreateInfoKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SamplerYcbcrConversionCreateInfoKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type SamplerYcbcrConversionInfoKHR struct {
	native C.VkSamplerYcbcrConversionInfoKHR
}

// WrapSamplerYcbcrConversionInfoKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSamplerYcbcrConversionInfoKHR(ptr unsafe.Pointer) *SamplerYcbcrConversionInfoKHR {
	if ptr == nil {
		return nil
	}

	return (*SamplerYcbcrConversionInfoKHR)(ptr)
}

func marshalSamplerYcbcrConversionInfoKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSamplerYcbcrConversionInfoKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SamplerYcbcrConversionInfoKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type BindImagePlaneMemoryInfoKHR struct {
	native C.VkBindImagePlaneMemoryInfoKHR
}

// WrapBindImagePlaneMemoryInfoKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapBindImagePlaneMemoryInfoKHR(ptr unsafe.Pointer) *BindImagePlaneMemoryInfoKHR {
	if ptr == nil {
		return nil
	}

	return (*BindImagePlaneMemoryInfoKHR)(ptr)
}

func marshalBindImagePlaneMemoryInfoKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapBindImagePlaneMemoryInfoKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (b *BindImagePlaneMemoryInfoKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&b.native)
}

type ImagePlaneMemoryRequirementsInfoKHR struct {
	native C.VkImagePlaneMemoryRequirementsInfoKHR
}

// WrapImagePlaneMemoryRequirementsInfoKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapImagePlaneMemoryRequirementsInfoKHR(ptr unsafe.Pointer) *ImagePlaneMemoryRequirementsInfoKHR {
	if ptr == nil {
		return nil
	}

	return (*ImagePlaneMemoryRequirementsInfoKHR)(ptr)
}

func marshalImagePlaneMemoryRequirementsInfoKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapImagePlaneMemoryRequirementsInfoKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (i *ImagePlaneMemoryRequirementsInfoKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&i.native)
}

type PhysicalDeviceSamplerYcbcrConversionFeaturesKHR struct {
	native C.VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR
}

// WrapPhysicalDeviceSamplerYcbcrConversionFeaturesKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceSamplerYcbcrConversionFeaturesKHR(ptr unsafe.Pointer) *PhysicalDeviceSamplerYcbcrConversionFeaturesKHR {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceSamplerYcbcrConversionFeaturesKHR)(ptr)
}

func marshalPhysicalDeviceSamplerYcbcrConversionFeaturesKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceSamplerYcbcrConversionFeaturesKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceSamplerYcbcrConversionFeaturesKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type SamplerYcbcrConversionImageFormatPropertiesKHR struct {
	native C.VkSamplerYcbcrConversionImageFormatPropertiesKHR
}

// WrapSamplerYcbcrConversionImageFormatPropertiesKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSamplerYcbcrConversionImageFormatPropertiesKHR(ptr unsafe.Pointer) *SamplerYcbcrConversionImageFormatPropertiesKHR {
	if ptr == nil {
		return nil
	}

	return (*SamplerYcbcrConversionImageFormatPropertiesKHR)(ptr)
}

func marshalSamplerYcbcrConversionImageFormatPropertiesKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSamplerYcbcrConversionImageFormatPropertiesKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SamplerYcbcrConversionImageFormatPropertiesKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type BindBufferMemoryInfoKHR struct {
	native C.VkBindBufferMemoryInfoKHR
}

// WrapBindBufferMemoryInfoKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapBindBufferMemoryInfoKHR(ptr unsafe.Pointer) *BindBufferMemoryInfoKHR {
	if ptr == nil {
		return nil
	}

	return (*BindBufferMemoryInfoKHR)(ptr)
}

func marshalBindBufferMemoryInfoKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapBindBufferMemoryInfoKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (b *BindBufferMemoryInfoKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&b.native)
}

type BindImageMemoryInfoKHR struct {
	native C.VkBindImageMemoryInfoKHR
}

// WrapBindImageMemoryInfoKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapBindImageMemoryInfoKHR(ptr unsafe.Pointer) *BindImageMemoryInfoKHR {
	if ptr == nil {
		return nil
	}

	return (*BindImageMemoryInfoKHR)(ptr)
}

func marshalBindImageMemoryInfoKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapBindImageMemoryInfoKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (b *BindImageMemoryInfoKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&b.native)
}

type PhysicalDeviceMaintenance3PropertiesKHR struct {
	native C.VkPhysicalDeviceMaintenance3PropertiesKHR
}

// WrapPhysicalDeviceMaintenance3PropertiesKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceMaintenance3PropertiesKHR(ptr unsafe.Pointer) *PhysicalDeviceMaintenance3PropertiesKHR {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceMaintenance3PropertiesKHR)(ptr)
}

func marshalPhysicalDeviceMaintenance3PropertiesKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceMaintenance3PropertiesKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceMaintenance3PropertiesKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type DescriptorSetLayoutSupportKHR struct {
	native C.VkDescriptorSetLayoutSupportKHR
}

// WrapDescriptorSetLayoutSupportKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDescriptorSetLayoutSupportKHR(ptr unsafe.Pointer) *DescriptorSetLayoutSupportKHR {
	if ptr == nil {
		return nil
	}

	return (*DescriptorSetLayoutSupportKHR)(ptr)
}

func marshalDescriptorSetLayoutSupportKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDescriptorSetLayoutSupportKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DescriptorSetLayoutSupportKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type PhysicalDevice8BitStorageFeaturesKHR struct {
	native C.VkPhysicalDevice8BitStorageFeaturesKHR
}

// WrapPhysicalDevice8BitStorageFeaturesKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDevice8BitStorageFeaturesKHR(ptr unsafe.Pointer) *PhysicalDevice8BitStorageFeaturesKHR {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDevice8BitStorageFeaturesKHR)(ptr)
}

func marshalPhysicalDevice8BitStorageFeaturesKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDevice8BitStorageFeaturesKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDevice8BitStorageFeaturesKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PhysicalDeviceShaderAtomicInt64FeaturesKHR struct {
	native C.VkPhysicalDeviceShaderAtomicInt64FeaturesKHR
}

// WrapPhysicalDeviceShaderAtomicInt64FeaturesKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceShaderAtomicInt64FeaturesKHR(ptr unsafe.Pointer) *PhysicalDeviceShaderAtomicInt64FeaturesKHR {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceShaderAtomicInt64FeaturesKHR)(ptr)
}

func marshalPhysicalDeviceShaderAtomicInt64FeaturesKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceShaderAtomicInt64FeaturesKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceShaderAtomicInt64FeaturesKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type DriverIDKHR struct {
	native C.VkDriverIdKHR
}

// WrapDriverIDKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDriverIDKHR(ptr unsafe.Pointer) *DriverIDKHR {
	if ptr == nil {
		return nil
	}

	return (*DriverIDKHR)(ptr)
}

func marshalDriverIDKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDriverIDKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DriverIDKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type ConformanceVersionKHR struct {
	native C.VkConformanceVersionKHR
}

// WrapConformanceVersionKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapConformanceVersionKHR(ptr unsafe.Pointer) *ConformanceVersionKHR {
	if ptr == nil {
		return nil
	}

	return (*ConformanceVersionKHR)(ptr)
}

func marshalConformanceVersionKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapConformanceVersionKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (c *ConformanceVersionKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&c.native)
}

type PhysicalDeviceDriverPropertiesKHR struct {
	native C.VkPhysicalDeviceDriverPropertiesKHR
}

// WrapPhysicalDeviceDriverPropertiesKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceDriverPropertiesKHR(ptr unsafe.Pointer) *PhysicalDeviceDriverPropertiesKHR {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceDriverPropertiesKHR)(ptr)
}

func marshalPhysicalDeviceDriverPropertiesKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceDriverPropertiesKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceDriverPropertiesKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PhysicalDeviceFloatControlsPropertiesKHR struct {
	native C.VkPhysicalDeviceFloatControlsPropertiesKHR
}

// WrapPhysicalDeviceFloatControlsPropertiesKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceFloatControlsPropertiesKHR(ptr unsafe.Pointer) *PhysicalDeviceFloatControlsPropertiesKHR {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceFloatControlsPropertiesKHR)(ptr)
}

func marshalPhysicalDeviceFloatControlsPropertiesKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceFloatControlsPropertiesKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceFloatControlsPropertiesKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type ResolveModeFlagBitsKHR struct {
	native C.VkResolveModeFlagBitsKHR
}

// WrapResolveModeFlagBitsKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapResolveModeFlagBitsKHR(ptr unsafe.Pointer) *ResolveModeFlagBitsKHR {
	if ptr == nil {
		return nil
	}

	return (*ResolveModeFlagBitsKHR)(ptr)
}

func marshalResolveModeFlagBitsKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapResolveModeFlagBitsKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (r *ResolveModeFlagBitsKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&r.native)
}

type ResolveModeFlagsKHR struct {
	native C.VkResolveModeFlagsKHR
}

// WrapResolveModeFlagsKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapResolveModeFlagsKHR(ptr unsafe.Pointer) *ResolveModeFlagsKHR {
	if ptr == nil {
		return nil
	}

	return (*ResolveModeFlagsKHR)(ptr)
}

func marshalResolveModeFlagsKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapResolveModeFlagsKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (r *ResolveModeFlagsKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&r.native)
}

type SubpassDescriptionDepthStencilResolveKHR struct {
	native C.VkSubpassDescriptionDepthStencilResolveKHR
}

// WrapSubpassDescriptionDepthStencilResolveKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSubpassDescriptionDepthStencilResolveKHR(ptr unsafe.Pointer) *SubpassDescriptionDepthStencilResolveKHR {
	if ptr == nil {
		return nil
	}

	return (*SubpassDescriptionDepthStencilResolveKHR)(ptr)
}

func marshalSubpassDescriptionDepthStencilResolveKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSubpassDescriptionDepthStencilResolveKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SubpassDescriptionDepthStencilResolveKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type PhysicalDeviceDepthStencilResolvePropertiesKHR struct {
	native C.VkPhysicalDeviceDepthStencilResolvePropertiesKHR
}

// WrapPhysicalDeviceDepthStencilResolvePropertiesKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceDepthStencilResolvePropertiesKHR(ptr unsafe.Pointer) *PhysicalDeviceDepthStencilResolvePropertiesKHR {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceDepthStencilResolvePropertiesKHR)(ptr)
}

func marshalPhysicalDeviceDepthStencilResolvePropertiesKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceDepthStencilResolvePropertiesKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceDepthStencilResolvePropertiesKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PhysicalDeviceVulkanMemoryModelFeaturesKHR struct {
	native C.VkPhysicalDeviceVulkanMemoryModelFeaturesKHR
}

// WrapPhysicalDeviceVulkanMemoryModelFeaturesKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceVulkanMemoryModelFeaturesKHR(ptr unsafe.Pointer) *PhysicalDeviceVulkanMemoryModelFeaturesKHR {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceVulkanMemoryModelFeaturesKHR)(ptr)
}

func marshalPhysicalDeviceVulkanMemoryModelFeaturesKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceVulkanMemoryModelFeaturesKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceVulkanMemoryModelFeaturesKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type SurfaceProtectedCapabilitiesKHR struct {
	native C.VkSurfaceProtectedCapabilitiesKHR
}

// WrapSurfaceProtectedCapabilitiesKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSurfaceProtectedCapabilitiesKHR(ptr unsafe.Pointer) *SurfaceProtectedCapabilitiesKHR {
	if ptr == nil {
		return nil
	}

	return (*SurfaceProtectedCapabilitiesKHR)(ptr)
}

func marshalSurfaceProtectedCapabilitiesKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSurfaceProtectedCapabilitiesKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SurfaceProtectedCapabilitiesKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type PhysicalDeviceUniformBufferStandardLayoutFeaturesKHR struct {
	native C.VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR
}

// WrapPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR(ptr unsafe.Pointer) *PhysicalDeviceUniformBufferStandardLayoutFeaturesKHR {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceUniformBufferStandardLayoutFeaturesKHR)(ptr)
}

func marshalPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceUniformBufferStandardLayoutFeaturesKHR) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type DebugReportCallbackEXT struct {
	native C.VkDebugReportCallbackEXT
}

// WrapDebugReportCallbackEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDebugReportCallbackEXT(ptr unsafe.Pointer) *DebugReportCallbackEXT {
	if ptr == nil {
		return nil
	}

	return (*DebugReportCallbackEXT)(ptr)
}

func marshalDebugReportCallbackEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDebugReportCallbackEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DebugReportCallbackEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type DebugReportObjectTypeEXT struct {
	native C.VkDebugReportObjectTypeEXT
}

// WrapDebugReportObjectTypeEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDebugReportObjectTypeEXT(ptr unsafe.Pointer) *DebugReportObjectTypeEXT {
	if ptr == nil {
		return nil
	}

	return (*DebugReportObjectTypeEXT)(ptr)
}

func marshalDebugReportObjectTypeEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDebugReportObjectTypeEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DebugReportObjectTypeEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type DebugReportFlagBitsEXT struct {
	native C.VkDebugReportFlagBitsEXT
}

// WrapDebugReportFlagBitsEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDebugReportFlagBitsEXT(ptr unsafe.Pointer) *DebugReportFlagBitsEXT {
	if ptr == nil {
		return nil
	}

	return (*DebugReportFlagBitsEXT)(ptr)
}

func marshalDebugReportFlagBitsEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDebugReportFlagBitsEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DebugReportFlagBitsEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type DebugReportFlagsEXT struct {
	native C.VkDebugReportFlagsEXT
}

// WrapDebugReportFlagsEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDebugReportFlagsEXT(ptr unsafe.Pointer) *DebugReportFlagsEXT {
	if ptr == nil {
		return nil
	}

	return (*DebugReportFlagsEXT)(ptr)
}

func marshalDebugReportFlagsEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDebugReportFlagsEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DebugReportFlagsEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type DebugReportCallbackCreateInfoEXT struct {
	native C.VkDebugReportCallbackCreateInfoEXT
}

// WrapDebugReportCallbackCreateInfoEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDebugReportCallbackCreateInfoEXT(ptr unsafe.Pointer) *DebugReportCallbackCreateInfoEXT {
	if ptr == nil {
		return nil
	}

	return (*DebugReportCallbackCreateInfoEXT)(ptr)
}

func marshalDebugReportCallbackCreateInfoEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDebugReportCallbackCreateInfoEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DebugReportCallbackCreateInfoEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type RasterizationOrderAMD struct {
	native C.VkRasterizationOrderAMD
}

// WrapRasterizationOrderAMD wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapRasterizationOrderAMD(ptr unsafe.Pointer) *RasterizationOrderAMD {
	if ptr == nil {
		return nil
	}

	return (*RasterizationOrderAMD)(ptr)
}

func marshalRasterizationOrderAMD(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapRasterizationOrderAMD(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (r *RasterizationOrderAMD) Native() unsafe.Pointer {
	return unsafe.Pointer(&r.native)
}

type PipelineRasterizationStateRasterizationOrderAMD struct {
	native C.VkPipelineRasterizationStateRasterizationOrderAMD
}

// WrapPipelineRasterizationStateRasterizationOrderAMD wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPipelineRasterizationStateRasterizationOrderAMD(ptr unsafe.Pointer) *PipelineRasterizationStateRasterizationOrderAMD {
	if ptr == nil {
		return nil
	}

	return (*PipelineRasterizationStateRasterizationOrderAMD)(ptr)
}

func marshalPipelineRasterizationStateRasterizationOrderAMD(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPipelineRasterizationStateRasterizationOrderAMD(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PipelineRasterizationStateRasterizationOrderAMD) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type DebugMarkerObjectNameInfoEXT struct {
	native C.VkDebugMarkerObjectNameInfoEXT
}

// WrapDebugMarkerObjectNameInfoEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDebugMarkerObjectNameInfoEXT(ptr unsafe.Pointer) *DebugMarkerObjectNameInfoEXT {
	if ptr == nil {
		return nil
	}

	return (*DebugMarkerObjectNameInfoEXT)(ptr)
}

func marshalDebugMarkerObjectNameInfoEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDebugMarkerObjectNameInfoEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DebugMarkerObjectNameInfoEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type DebugMarkerObjectTagInfoEXT struct {
	native C.VkDebugMarkerObjectTagInfoEXT
}

// WrapDebugMarkerObjectTagInfoEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDebugMarkerObjectTagInfoEXT(ptr unsafe.Pointer) *DebugMarkerObjectTagInfoEXT {
	if ptr == nil {
		return nil
	}

	return (*DebugMarkerObjectTagInfoEXT)(ptr)
}

func marshalDebugMarkerObjectTagInfoEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDebugMarkerObjectTagInfoEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DebugMarkerObjectTagInfoEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type DebugMarkerMarkerInfoEXT struct {
	native C.VkDebugMarkerMarkerInfoEXT
}

// WrapDebugMarkerMarkerInfoEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDebugMarkerMarkerInfoEXT(ptr unsafe.Pointer) *DebugMarkerMarkerInfoEXT {
	if ptr == nil {
		return nil
	}

	return (*DebugMarkerMarkerInfoEXT)(ptr)
}

func marshalDebugMarkerMarkerInfoEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDebugMarkerMarkerInfoEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DebugMarkerMarkerInfoEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type DedicatedAllocationImageCreateInfoNV struct {
	native C.VkDedicatedAllocationImageCreateInfoNV
}

// WrapDedicatedAllocationImageCreateInfoNV wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDedicatedAllocationImageCreateInfoNV(ptr unsafe.Pointer) *DedicatedAllocationImageCreateInfoNV {
	if ptr == nil {
		return nil
	}

	return (*DedicatedAllocationImageCreateInfoNV)(ptr)
}

func marshalDedicatedAllocationImageCreateInfoNV(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDedicatedAllocationImageCreateInfoNV(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DedicatedAllocationImageCreateInfoNV) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type DedicatedAllocationBufferCreateInfoNV struct {
	native C.VkDedicatedAllocationBufferCreateInfoNV
}

// WrapDedicatedAllocationBufferCreateInfoNV wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDedicatedAllocationBufferCreateInfoNV(ptr unsafe.Pointer) *DedicatedAllocationBufferCreateInfoNV {
	if ptr == nil {
		return nil
	}

	return (*DedicatedAllocationBufferCreateInfoNV)(ptr)
}

func marshalDedicatedAllocationBufferCreateInfoNV(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDedicatedAllocationBufferCreateInfoNV(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DedicatedAllocationBufferCreateInfoNV) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type DedicatedAllocationMemoryAllocateInfoNV struct {
	native C.VkDedicatedAllocationMemoryAllocateInfoNV
}

// WrapDedicatedAllocationMemoryAllocateInfoNV wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDedicatedAllocationMemoryAllocateInfoNV(ptr unsafe.Pointer) *DedicatedAllocationMemoryAllocateInfoNV {
	if ptr == nil {
		return nil
	}

	return (*DedicatedAllocationMemoryAllocateInfoNV)(ptr)
}

func marshalDedicatedAllocationMemoryAllocateInfoNV(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDedicatedAllocationMemoryAllocateInfoNV(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DedicatedAllocationMemoryAllocateInfoNV) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type PipelineRasterizationStateStreamCreateFlagsEXT struct {
	native C.VkPipelineRasterizationStateStreamCreateFlagsEXT
}

// WrapPipelineRasterizationStateStreamCreateFlagsEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPipelineRasterizationStateStreamCreateFlagsEXT(ptr unsafe.Pointer) *PipelineRasterizationStateStreamCreateFlagsEXT {
	if ptr == nil {
		return nil
	}

	return (*PipelineRasterizationStateStreamCreateFlagsEXT)(ptr)
}

func marshalPipelineRasterizationStateStreamCreateFlagsEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPipelineRasterizationStateStreamCreateFlagsEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PipelineRasterizationStateStreamCreateFlagsEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PhysicalDeviceTransformFeedbackFeaturesEXT struct {
	native C.VkPhysicalDeviceTransformFeedbackFeaturesEXT
}

// WrapPhysicalDeviceTransformFeedbackFeaturesEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceTransformFeedbackFeaturesEXT(ptr unsafe.Pointer) *PhysicalDeviceTransformFeedbackFeaturesEXT {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceTransformFeedbackFeaturesEXT)(ptr)
}

func marshalPhysicalDeviceTransformFeedbackFeaturesEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceTransformFeedbackFeaturesEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceTransformFeedbackFeaturesEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PhysicalDeviceTransformFeedbackPropertiesEXT struct {
	native C.VkPhysicalDeviceTransformFeedbackPropertiesEXT
}

// WrapPhysicalDeviceTransformFeedbackPropertiesEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceTransformFeedbackPropertiesEXT(ptr unsafe.Pointer) *PhysicalDeviceTransformFeedbackPropertiesEXT {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceTransformFeedbackPropertiesEXT)(ptr)
}

func marshalPhysicalDeviceTransformFeedbackPropertiesEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceTransformFeedbackPropertiesEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceTransformFeedbackPropertiesEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PipelineRasterizationStateStreamCreateInfoEXT struct {
	native C.VkPipelineRasterizationStateStreamCreateInfoEXT
}

// WrapPipelineRasterizationStateStreamCreateInfoEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPipelineRasterizationStateStreamCreateInfoEXT(ptr unsafe.Pointer) *PipelineRasterizationStateStreamCreateInfoEXT {
	if ptr == nil {
		return nil
	}

	return (*PipelineRasterizationStateStreamCreateInfoEXT)(ptr)
}

func marshalPipelineRasterizationStateStreamCreateInfoEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPipelineRasterizationStateStreamCreateInfoEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PipelineRasterizationStateStreamCreateInfoEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type ImageViewHandleInfoNVX struct {
	native C.VkImageViewHandleInfoNVX
}

// WrapImageViewHandleInfoNVX wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapImageViewHandleInfoNVX(ptr unsafe.Pointer) *ImageViewHandleInfoNVX {
	if ptr == nil {
		return nil
	}

	return (*ImageViewHandleInfoNVX)(ptr)
}

func marshalImageViewHandleInfoNVX(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapImageViewHandleInfoNVX(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (i *ImageViewHandleInfoNVX) Native() unsafe.Pointer {
	return unsafe.Pointer(&i.native)
}

type TextureLODGatherFormatPropertiesAMD struct {
	native C.VkTextureLODGatherFormatPropertiesAMD
}

// WrapTextureLODGatherFormatPropertiesAMD wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapTextureLODGatherFormatPropertiesAMD(ptr unsafe.Pointer) *TextureLODGatherFormatPropertiesAMD {
	if ptr == nil {
		return nil
	}

	return (*TextureLODGatherFormatPropertiesAMD)(ptr)
}

func marshalTextureLODGatherFormatPropertiesAMD(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapTextureLODGatherFormatPropertiesAMD(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (t *TextureLODGatherFormatPropertiesAMD) Native() unsafe.Pointer {
	return unsafe.Pointer(&t.native)
}

type ShaderInfoTypeAMD struct {
	native C.VkShaderInfoTypeAMD
}

// WrapShaderInfoTypeAMD wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapShaderInfoTypeAMD(ptr unsafe.Pointer) *ShaderInfoTypeAMD {
	if ptr == nil {
		return nil
	}

	return (*ShaderInfoTypeAMD)(ptr)
}

func marshalShaderInfoTypeAMD(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapShaderInfoTypeAMD(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *ShaderInfoTypeAMD) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type ShaderResourceUsageAMD struct {
	native C.VkShaderResourceUsageAMD
}

// WrapShaderResourceUsageAMD wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapShaderResourceUsageAMD(ptr unsafe.Pointer) *ShaderResourceUsageAMD {
	if ptr == nil {
		return nil
	}

	return (*ShaderResourceUsageAMD)(ptr)
}

func marshalShaderResourceUsageAMD(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapShaderResourceUsageAMD(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *ShaderResourceUsageAMD) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type ShaderStatisticsInfoAMD struct {
	native C.VkShaderStatisticsInfoAMD
}

// WrapShaderStatisticsInfoAMD wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapShaderStatisticsInfoAMD(ptr unsafe.Pointer) *ShaderStatisticsInfoAMD {
	if ptr == nil {
		return nil
	}

	return (*ShaderStatisticsInfoAMD)(ptr)
}

func marshalShaderStatisticsInfoAMD(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapShaderStatisticsInfoAMD(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *ShaderStatisticsInfoAMD) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type PhysicalDeviceCornerSampledImageFeaturesNV struct {
	native C.VkPhysicalDeviceCornerSampledImageFeaturesNV
}

// WrapPhysicalDeviceCornerSampledImageFeaturesNV wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceCornerSampledImageFeaturesNV(ptr unsafe.Pointer) *PhysicalDeviceCornerSampledImageFeaturesNV {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceCornerSampledImageFeaturesNV)(ptr)
}

func marshalPhysicalDeviceCornerSampledImageFeaturesNV(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceCornerSampledImageFeaturesNV(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceCornerSampledImageFeaturesNV) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type ExternalMemoryHandleTypeFlagBitsNV struct {
	native C.VkExternalMemoryHandleTypeFlagBitsNV
}

// WrapExternalMemoryHandleTypeFlagBitsNV wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapExternalMemoryHandleTypeFlagBitsNV(ptr unsafe.Pointer) *ExternalMemoryHandleTypeFlagBitsNV {
	if ptr == nil {
		return nil
	}

	return (*ExternalMemoryHandleTypeFlagBitsNV)(ptr)
}

func marshalExternalMemoryHandleTypeFlagBitsNV(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapExternalMemoryHandleTypeFlagBitsNV(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (e *ExternalMemoryHandleTypeFlagBitsNV) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

type ExternalMemoryHandleTypeFlagsNV struct {
	native C.VkExternalMemoryHandleTypeFlagsNV
}

// WrapExternalMemoryHandleTypeFlagsNV wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapExternalMemoryHandleTypeFlagsNV(ptr unsafe.Pointer) *ExternalMemoryHandleTypeFlagsNV {
	if ptr == nil {
		return nil
	}

	return (*ExternalMemoryHandleTypeFlagsNV)(ptr)
}

func marshalExternalMemoryHandleTypeFlagsNV(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapExternalMemoryHandleTypeFlagsNV(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (e *ExternalMemoryHandleTypeFlagsNV) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

type ExternalMemoryFeatureFlagBitsNV struct {
	native C.VkExternalMemoryFeatureFlagBitsNV
}

// WrapExternalMemoryFeatureFlagBitsNV wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapExternalMemoryFeatureFlagBitsNV(ptr unsafe.Pointer) *ExternalMemoryFeatureFlagBitsNV {
	if ptr == nil {
		return nil
	}

	return (*ExternalMemoryFeatureFlagBitsNV)(ptr)
}

func marshalExternalMemoryFeatureFlagBitsNV(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapExternalMemoryFeatureFlagBitsNV(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (e *ExternalMemoryFeatureFlagBitsNV) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

type ExternalMemoryFeatureFlagsNV struct {
	native C.VkExternalMemoryFeatureFlagsNV
}

// WrapExternalMemoryFeatureFlagsNV wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapExternalMemoryFeatureFlagsNV(ptr unsafe.Pointer) *ExternalMemoryFeatureFlagsNV {
	if ptr == nil {
		return nil
	}

	return (*ExternalMemoryFeatureFlagsNV)(ptr)
}

func marshalExternalMemoryFeatureFlagsNV(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapExternalMemoryFeatureFlagsNV(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (e *ExternalMemoryFeatureFlagsNV) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

type ExternalImageFormatPropertiesNV struct {
	native C.VkExternalImageFormatPropertiesNV
}

// WrapExternalImageFormatPropertiesNV wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapExternalImageFormatPropertiesNV(ptr unsafe.Pointer) *ExternalImageFormatPropertiesNV {
	if ptr == nil {
		return nil
	}

	return (*ExternalImageFormatPropertiesNV)(ptr)
}

func marshalExternalImageFormatPropertiesNV(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapExternalImageFormatPropertiesNV(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (e *ExternalImageFormatPropertiesNV) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

type ExternalMemoryImageCreateInfoNV struct {
	native C.VkExternalMemoryImageCreateInfoNV
}

// WrapExternalMemoryImageCreateInfoNV wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapExternalMemoryImageCreateInfoNV(ptr unsafe.Pointer) *ExternalMemoryImageCreateInfoNV {
	if ptr == nil {
		return nil
	}

	return (*ExternalMemoryImageCreateInfoNV)(ptr)
}

func marshalExternalMemoryImageCreateInfoNV(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapExternalMemoryImageCreateInfoNV(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (e *ExternalMemoryImageCreateInfoNV) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

type ExportMemoryAllocateInfoNV struct {
	native C.VkExportMemoryAllocateInfoNV
}

// WrapExportMemoryAllocateInfoNV wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapExportMemoryAllocateInfoNV(ptr unsafe.Pointer) *ExportMemoryAllocateInfoNV {
	if ptr == nil {
		return nil
	}

	return (*ExportMemoryAllocateInfoNV)(ptr)
}

func marshalExportMemoryAllocateInfoNV(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapExportMemoryAllocateInfoNV(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (e *ExportMemoryAllocateInfoNV) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

type ValidationCheckEXT struct {
	native C.VkValidationCheckEXT
}

// WrapValidationCheckEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapValidationCheckEXT(ptr unsafe.Pointer) *ValidationCheckEXT {
	if ptr == nil {
		return nil
	}

	return (*ValidationCheckEXT)(ptr)
}

func marshalValidationCheckEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapValidationCheckEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (v *ValidationCheckEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&v.native)
}

type ValidationFlagsEXT struct {
	native C.VkValidationFlagsEXT
}

// WrapValidationFlagsEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapValidationFlagsEXT(ptr unsafe.Pointer) *ValidationFlagsEXT {
	if ptr == nil {
		return nil
	}

	return (*ValidationFlagsEXT)(ptr)
}

func marshalValidationFlagsEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapValidationFlagsEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (v *ValidationFlagsEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&v.native)
}

type ImageViewASTCDecodeModeEXT struct {
	native C.VkImageViewASTCDecodeModeEXT
}

// WrapImageViewASTCDecodeModeEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapImageViewASTCDecodeModeEXT(ptr unsafe.Pointer) *ImageViewASTCDecodeModeEXT {
	if ptr == nil {
		return nil
	}

	return (*ImageViewASTCDecodeModeEXT)(ptr)
}

func marshalImageViewASTCDecodeModeEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapImageViewASTCDecodeModeEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (i *ImageViewASTCDecodeModeEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&i.native)
}

type PhysicalDeviceASTCDecodeFeaturesEXT struct {
	native C.VkPhysicalDeviceASTCDecodeFeaturesEXT
}

// WrapPhysicalDeviceASTCDecodeFeaturesEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceASTCDecodeFeaturesEXT(ptr unsafe.Pointer) *PhysicalDeviceASTCDecodeFeaturesEXT {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceASTCDecodeFeaturesEXT)(ptr)
}

func marshalPhysicalDeviceASTCDecodeFeaturesEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceASTCDecodeFeaturesEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceASTCDecodeFeaturesEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type ConditionalRenderingFlagBitsEXT struct {
	native C.VkConditionalRenderingFlagBitsEXT
}

// WrapConditionalRenderingFlagBitsEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapConditionalRenderingFlagBitsEXT(ptr unsafe.Pointer) *ConditionalRenderingFlagBitsEXT {
	if ptr == nil {
		return nil
	}

	return (*ConditionalRenderingFlagBitsEXT)(ptr)
}

func marshalConditionalRenderingFlagBitsEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapConditionalRenderingFlagBitsEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (c *ConditionalRenderingFlagBitsEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&c.native)
}

type ConditionalRenderingFlagsEXT struct {
	native C.VkConditionalRenderingFlagsEXT
}

// WrapConditionalRenderingFlagsEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapConditionalRenderingFlagsEXT(ptr unsafe.Pointer) *ConditionalRenderingFlagsEXT {
	if ptr == nil {
		return nil
	}

	return (*ConditionalRenderingFlagsEXT)(ptr)
}

func marshalConditionalRenderingFlagsEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapConditionalRenderingFlagsEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (c *ConditionalRenderingFlagsEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&c.native)
}

type ConditionalRenderingBeginInfoEXT struct {
	native C.VkConditionalRenderingBeginInfoEXT
}

// WrapConditionalRenderingBeginInfoEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapConditionalRenderingBeginInfoEXT(ptr unsafe.Pointer) *ConditionalRenderingBeginInfoEXT {
	if ptr == nil {
		return nil
	}

	return (*ConditionalRenderingBeginInfoEXT)(ptr)
}

func marshalConditionalRenderingBeginInfoEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapConditionalRenderingBeginInfoEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (c *ConditionalRenderingBeginInfoEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&c.native)
}

type PhysicalDeviceConditionalRenderingFeaturesEXT struct {
	native C.VkPhysicalDeviceConditionalRenderingFeaturesEXT
}

// WrapPhysicalDeviceConditionalRenderingFeaturesEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceConditionalRenderingFeaturesEXT(ptr unsafe.Pointer) *PhysicalDeviceConditionalRenderingFeaturesEXT {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceConditionalRenderingFeaturesEXT)(ptr)
}

func marshalPhysicalDeviceConditionalRenderingFeaturesEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceConditionalRenderingFeaturesEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceConditionalRenderingFeaturesEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type CommandBufferInheritanceConditionalRenderingInfoEXT struct {
	native C.VkCommandBufferInheritanceConditionalRenderingInfoEXT
}

// WrapCommandBufferInheritanceConditionalRenderingInfoEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapCommandBufferInheritanceConditionalRenderingInfoEXT(ptr unsafe.Pointer) *CommandBufferInheritanceConditionalRenderingInfoEXT {
	if ptr == nil {
		return nil
	}

	return (*CommandBufferInheritanceConditionalRenderingInfoEXT)(ptr)
}

func marshalCommandBufferInheritanceConditionalRenderingInfoEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapCommandBufferInheritanceConditionalRenderingInfoEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (c *CommandBufferInheritanceConditionalRenderingInfoEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&c.native)
}

type ObjectTableNVX struct {
	native C.VkObjectTableNVX
}

// WrapObjectTableNVX wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapObjectTableNVX(ptr unsafe.Pointer) *ObjectTableNVX {
	if ptr == nil {
		return nil
	}

	return (*ObjectTableNVX)(ptr)
}

func marshalObjectTableNVX(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapObjectTableNVX(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (o *ObjectTableNVX) Native() unsafe.Pointer {
	return unsafe.Pointer(&o.native)
}

type IndirectCommandsLayoutNVX struct {
	native C.VkIndirectCommandsLayoutNVX
}

// WrapIndirectCommandsLayoutNVX wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapIndirectCommandsLayoutNVX(ptr unsafe.Pointer) *IndirectCommandsLayoutNVX {
	if ptr == nil {
		return nil
	}

	return (*IndirectCommandsLayoutNVX)(ptr)
}

func marshalIndirectCommandsLayoutNVX(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapIndirectCommandsLayoutNVX(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (i *IndirectCommandsLayoutNVX) Native() unsafe.Pointer {
	return unsafe.Pointer(&i.native)
}

type IndirectCommandsTokenTypeNVX struct {
	native C.VkIndirectCommandsTokenTypeNVX
}

// WrapIndirectCommandsTokenTypeNVX wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapIndirectCommandsTokenTypeNVX(ptr unsafe.Pointer) *IndirectCommandsTokenTypeNVX {
	if ptr == nil {
		return nil
	}

	return (*IndirectCommandsTokenTypeNVX)(ptr)
}

func marshalIndirectCommandsTokenTypeNVX(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapIndirectCommandsTokenTypeNVX(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (i *IndirectCommandsTokenTypeNVX) Native() unsafe.Pointer {
	return unsafe.Pointer(&i.native)
}

type ObjectEntryTypeNVX struct {
	native C.VkObjectEntryTypeNVX
}

// WrapObjectEntryTypeNVX wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapObjectEntryTypeNVX(ptr unsafe.Pointer) *ObjectEntryTypeNVX {
	if ptr == nil {
		return nil
	}

	return (*ObjectEntryTypeNVX)(ptr)
}

func marshalObjectEntryTypeNVX(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapObjectEntryTypeNVX(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (o *ObjectEntryTypeNVX) Native() unsafe.Pointer {
	return unsafe.Pointer(&o.native)
}

type IndirectCommandsLayoutUsageFlagBitsNVX struct {
	native C.VkIndirectCommandsLayoutUsageFlagBitsNVX
}

// WrapIndirectCommandsLayoutUsageFlagBitsNVX wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapIndirectCommandsLayoutUsageFlagBitsNVX(ptr unsafe.Pointer) *IndirectCommandsLayoutUsageFlagBitsNVX {
	if ptr == nil {
		return nil
	}

	return (*IndirectCommandsLayoutUsageFlagBitsNVX)(ptr)
}

func marshalIndirectCommandsLayoutUsageFlagBitsNVX(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapIndirectCommandsLayoutUsageFlagBitsNVX(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (i *IndirectCommandsLayoutUsageFlagBitsNVX) Native() unsafe.Pointer {
	return unsafe.Pointer(&i.native)
}

type IndirectCommandsLayoutUsageFlagsNVX struct {
	native C.VkIndirectCommandsLayoutUsageFlagsNVX
}

// WrapIndirectCommandsLayoutUsageFlagsNVX wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapIndirectCommandsLayoutUsageFlagsNVX(ptr unsafe.Pointer) *IndirectCommandsLayoutUsageFlagsNVX {
	if ptr == nil {
		return nil
	}

	return (*IndirectCommandsLayoutUsageFlagsNVX)(ptr)
}

func marshalIndirectCommandsLayoutUsageFlagsNVX(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapIndirectCommandsLayoutUsageFlagsNVX(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (i *IndirectCommandsLayoutUsageFlagsNVX) Native() unsafe.Pointer {
	return unsafe.Pointer(&i.native)
}

type ObjectEntryUsageFlagBitsNVX struct {
	native C.VkObjectEntryUsageFlagBitsNVX
}

// WrapObjectEntryUsageFlagBitsNVX wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapObjectEntryUsageFlagBitsNVX(ptr unsafe.Pointer) *ObjectEntryUsageFlagBitsNVX {
	if ptr == nil {
		return nil
	}

	return (*ObjectEntryUsageFlagBitsNVX)(ptr)
}

func marshalObjectEntryUsageFlagBitsNVX(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapObjectEntryUsageFlagBitsNVX(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (o *ObjectEntryUsageFlagBitsNVX) Native() unsafe.Pointer {
	return unsafe.Pointer(&o.native)
}

type ObjectEntryUsageFlagsNVX struct {
	native C.VkObjectEntryUsageFlagsNVX
}

// WrapObjectEntryUsageFlagsNVX wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapObjectEntryUsageFlagsNVX(ptr unsafe.Pointer) *ObjectEntryUsageFlagsNVX {
	if ptr == nil {
		return nil
	}

	return (*ObjectEntryUsageFlagsNVX)(ptr)
}

func marshalObjectEntryUsageFlagsNVX(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapObjectEntryUsageFlagsNVX(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (o *ObjectEntryUsageFlagsNVX) Native() unsafe.Pointer {
	return unsafe.Pointer(&o.native)
}

type DeviceGeneratedCommandsFeaturesNVX struct {
	native C.VkDeviceGeneratedCommandsFeaturesNVX
}

// WrapDeviceGeneratedCommandsFeaturesNVX wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDeviceGeneratedCommandsFeaturesNVX(ptr unsafe.Pointer) *DeviceGeneratedCommandsFeaturesNVX {
	if ptr == nil {
		return nil
	}

	return (*DeviceGeneratedCommandsFeaturesNVX)(ptr)
}

func marshalDeviceGeneratedCommandsFeaturesNVX(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDeviceGeneratedCommandsFeaturesNVX(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DeviceGeneratedCommandsFeaturesNVX) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type DeviceGeneratedCommandsLimitsNVX struct {
	native C.VkDeviceGeneratedCommandsLimitsNVX
}

// WrapDeviceGeneratedCommandsLimitsNVX wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDeviceGeneratedCommandsLimitsNVX(ptr unsafe.Pointer) *DeviceGeneratedCommandsLimitsNVX {
	if ptr == nil {
		return nil
	}

	return (*DeviceGeneratedCommandsLimitsNVX)(ptr)
}

func marshalDeviceGeneratedCommandsLimitsNVX(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDeviceGeneratedCommandsLimitsNVX(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DeviceGeneratedCommandsLimitsNVX) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type IndirectCommandsTokenNVX struct {
	native C.VkIndirectCommandsTokenNVX
}

// WrapIndirectCommandsTokenNVX wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapIndirectCommandsTokenNVX(ptr unsafe.Pointer) *IndirectCommandsTokenNVX {
	if ptr == nil {
		return nil
	}

	return (*IndirectCommandsTokenNVX)(ptr)
}

func marshalIndirectCommandsTokenNVX(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapIndirectCommandsTokenNVX(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (i *IndirectCommandsTokenNVX) Native() unsafe.Pointer {
	return unsafe.Pointer(&i.native)
}

type IndirectCommandsLayoutTokenNVX struct {
	native C.VkIndirectCommandsLayoutTokenNVX
}

// WrapIndirectCommandsLayoutTokenNVX wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapIndirectCommandsLayoutTokenNVX(ptr unsafe.Pointer) *IndirectCommandsLayoutTokenNVX {
	if ptr == nil {
		return nil
	}

	return (*IndirectCommandsLayoutTokenNVX)(ptr)
}

func marshalIndirectCommandsLayoutTokenNVX(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapIndirectCommandsLayoutTokenNVX(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (i *IndirectCommandsLayoutTokenNVX) Native() unsafe.Pointer {
	return unsafe.Pointer(&i.native)
}

type IndirectCommandsLayoutCreateInfoNVX struct {
	native C.VkIndirectCommandsLayoutCreateInfoNVX
}

// WrapIndirectCommandsLayoutCreateInfoNVX wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapIndirectCommandsLayoutCreateInfoNVX(ptr unsafe.Pointer) *IndirectCommandsLayoutCreateInfoNVX {
	if ptr == nil {
		return nil
	}

	return (*IndirectCommandsLayoutCreateInfoNVX)(ptr)
}

func marshalIndirectCommandsLayoutCreateInfoNVX(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapIndirectCommandsLayoutCreateInfoNVX(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (i *IndirectCommandsLayoutCreateInfoNVX) Native() unsafe.Pointer {
	return unsafe.Pointer(&i.native)
}

type CmdProcessCommandsInfoNVX struct {
	native C.VkCmdProcessCommandsInfoNVX
}

// WrapCmdProcessCommandsInfoNVX wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapCmdProcessCommandsInfoNVX(ptr unsafe.Pointer) *CmdProcessCommandsInfoNVX {
	if ptr == nil {
		return nil
	}

	return (*CmdProcessCommandsInfoNVX)(ptr)
}

func marshalCmdProcessCommandsInfoNVX(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapCmdProcessCommandsInfoNVX(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (c *CmdProcessCommandsInfoNVX) Native() unsafe.Pointer {
	return unsafe.Pointer(&c.native)
}

type CmdReserveSpaceForCommandsInfoNVX struct {
	native C.VkCmdReserveSpaceForCommandsInfoNVX
}

// WrapCmdReserveSpaceForCommandsInfoNVX wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapCmdReserveSpaceForCommandsInfoNVX(ptr unsafe.Pointer) *CmdReserveSpaceForCommandsInfoNVX {
	if ptr == nil {
		return nil
	}

	return (*CmdReserveSpaceForCommandsInfoNVX)(ptr)
}

func marshalCmdReserveSpaceForCommandsInfoNVX(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapCmdReserveSpaceForCommandsInfoNVX(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (c *CmdReserveSpaceForCommandsInfoNVX) Native() unsafe.Pointer {
	return unsafe.Pointer(&c.native)
}

type ObjectTableCreateInfoNVX struct {
	native C.VkObjectTableCreateInfoNVX
}

// WrapObjectTableCreateInfoNVX wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapObjectTableCreateInfoNVX(ptr unsafe.Pointer) *ObjectTableCreateInfoNVX {
	if ptr == nil {
		return nil
	}

	return (*ObjectTableCreateInfoNVX)(ptr)
}

func marshalObjectTableCreateInfoNVX(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapObjectTableCreateInfoNVX(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (o *ObjectTableCreateInfoNVX) Native() unsafe.Pointer {
	return unsafe.Pointer(&o.native)
}

type ObjectTableEntryNVX struct {
	native C.VkObjectTableEntryNVX
}

// WrapObjectTableEntryNVX wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapObjectTableEntryNVX(ptr unsafe.Pointer) *ObjectTableEntryNVX {
	if ptr == nil {
		return nil
	}

	return (*ObjectTableEntryNVX)(ptr)
}

func marshalObjectTableEntryNVX(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapObjectTableEntryNVX(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (o *ObjectTableEntryNVX) Native() unsafe.Pointer {
	return unsafe.Pointer(&o.native)
}

type ObjectTablePipelineEntryNVX struct {
	native C.VkObjectTablePipelineEntryNVX
}

// WrapObjectTablePipelineEntryNVX wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapObjectTablePipelineEntryNVX(ptr unsafe.Pointer) *ObjectTablePipelineEntryNVX {
	if ptr == nil {
		return nil
	}

	return (*ObjectTablePipelineEntryNVX)(ptr)
}

func marshalObjectTablePipelineEntryNVX(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapObjectTablePipelineEntryNVX(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (o *ObjectTablePipelineEntryNVX) Native() unsafe.Pointer {
	return unsafe.Pointer(&o.native)
}

type ObjectTableDescriptorSetEntryNVX struct {
	native C.VkObjectTableDescriptorSetEntryNVX
}

// WrapObjectTableDescriptorSetEntryNVX wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapObjectTableDescriptorSetEntryNVX(ptr unsafe.Pointer) *ObjectTableDescriptorSetEntryNVX {
	if ptr == nil {
		return nil
	}

	return (*ObjectTableDescriptorSetEntryNVX)(ptr)
}

func marshalObjectTableDescriptorSetEntryNVX(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapObjectTableDescriptorSetEntryNVX(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (o *ObjectTableDescriptorSetEntryNVX) Native() unsafe.Pointer {
	return unsafe.Pointer(&o.native)
}

type ObjectTableVertexBufferEntryNVX struct {
	native C.VkObjectTableVertexBufferEntryNVX
}

// WrapObjectTableVertexBufferEntryNVX wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapObjectTableVertexBufferEntryNVX(ptr unsafe.Pointer) *ObjectTableVertexBufferEntryNVX {
	if ptr == nil {
		return nil
	}

	return (*ObjectTableVertexBufferEntryNVX)(ptr)
}

func marshalObjectTableVertexBufferEntryNVX(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapObjectTableVertexBufferEntryNVX(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (o *ObjectTableVertexBufferEntryNVX) Native() unsafe.Pointer {
	return unsafe.Pointer(&o.native)
}

type ObjectTableIndexBufferEntryNVX struct {
	native C.VkObjectTableIndexBufferEntryNVX
}

// WrapObjectTableIndexBufferEntryNVX wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapObjectTableIndexBufferEntryNVX(ptr unsafe.Pointer) *ObjectTableIndexBufferEntryNVX {
	if ptr == nil {
		return nil
	}

	return (*ObjectTableIndexBufferEntryNVX)(ptr)
}

func marshalObjectTableIndexBufferEntryNVX(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapObjectTableIndexBufferEntryNVX(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (o *ObjectTableIndexBufferEntryNVX) Native() unsafe.Pointer {
	return unsafe.Pointer(&o.native)
}

type ObjectTablePushConstantEntryNVX struct {
	native C.VkObjectTablePushConstantEntryNVX
}

// WrapObjectTablePushConstantEntryNVX wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapObjectTablePushConstantEntryNVX(ptr unsafe.Pointer) *ObjectTablePushConstantEntryNVX {
	if ptr == nil {
		return nil
	}

	return (*ObjectTablePushConstantEntryNVX)(ptr)
}

func marshalObjectTablePushConstantEntryNVX(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapObjectTablePushConstantEntryNVX(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (o *ObjectTablePushConstantEntryNVX) Native() unsafe.Pointer {
	return unsafe.Pointer(&o.native)
}

type ViewportWScalingNV struct {
	native C.VkViewportWScalingNV
}

// WrapViewportWScalingNV wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapViewportWScalingNV(ptr unsafe.Pointer) *ViewportWScalingNV {
	if ptr == nil {
		return nil
	}

	return (*ViewportWScalingNV)(ptr)
}

func marshalViewportWScalingNV(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapViewportWScalingNV(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (v *ViewportWScalingNV) Native() unsafe.Pointer {
	return unsafe.Pointer(&v.native)
}

type PipelineViewportWScalingStateCreateInfoNV struct {
	native C.VkPipelineViewportWScalingStateCreateInfoNV
}

// WrapPipelineViewportWScalingStateCreateInfoNV wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPipelineViewportWScalingStateCreateInfoNV(ptr unsafe.Pointer) *PipelineViewportWScalingStateCreateInfoNV {
	if ptr == nil {
		return nil
	}

	return (*PipelineViewportWScalingStateCreateInfoNV)(ptr)
}

func marshalPipelineViewportWScalingStateCreateInfoNV(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPipelineViewportWScalingStateCreateInfoNV(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PipelineViewportWScalingStateCreateInfoNV) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type SurfaceCounterFlagBitsEXT struct {
	native C.VkSurfaceCounterFlagBitsEXT
}

// WrapSurfaceCounterFlagBitsEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSurfaceCounterFlagBitsEXT(ptr unsafe.Pointer) *SurfaceCounterFlagBitsEXT {
	if ptr == nil {
		return nil
	}

	return (*SurfaceCounterFlagBitsEXT)(ptr)
}

func marshalSurfaceCounterFlagBitsEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSurfaceCounterFlagBitsEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SurfaceCounterFlagBitsEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type SurfaceCounterFlagsEXT struct {
	native C.VkSurfaceCounterFlagsEXT
}

// WrapSurfaceCounterFlagsEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSurfaceCounterFlagsEXT(ptr unsafe.Pointer) *SurfaceCounterFlagsEXT {
	if ptr == nil {
		return nil
	}

	return (*SurfaceCounterFlagsEXT)(ptr)
}

func marshalSurfaceCounterFlagsEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSurfaceCounterFlagsEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SurfaceCounterFlagsEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type SurfaceCapabilities2EXT struct {
	native C.VkSurfaceCapabilities2EXT
}

// WrapSurfaceCapabilities2EXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSurfaceCapabilities2EXT(ptr unsafe.Pointer) *SurfaceCapabilities2EXT {
	if ptr == nil {
		return nil
	}

	return (*SurfaceCapabilities2EXT)(ptr)
}

func marshalSurfaceCapabilities2EXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSurfaceCapabilities2EXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SurfaceCapabilities2EXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type DisplayPowerStateEXT struct {
	native C.VkDisplayPowerStateEXT
}

// WrapDisplayPowerStateEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDisplayPowerStateEXT(ptr unsafe.Pointer) *DisplayPowerStateEXT {
	if ptr == nil {
		return nil
	}

	return (*DisplayPowerStateEXT)(ptr)
}

func marshalDisplayPowerStateEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDisplayPowerStateEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DisplayPowerStateEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type DeviceEventTypeEXT struct {
	native C.VkDeviceEventTypeEXT
}

// WrapDeviceEventTypeEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDeviceEventTypeEXT(ptr unsafe.Pointer) *DeviceEventTypeEXT {
	if ptr == nil {
		return nil
	}

	return (*DeviceEventTypeEXT)(ptr)
}

func marshalDeviceEventTypeEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDeviceEventTypeEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DeviceEventTypeEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type DisplayEventTypeEXT struct {
	native C.VkDisplayEventTypeEXT
}

// WrapDisplayEventTypeEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDisplayEventTypeEXT(ptr unsafe.Pointer) *DisplayEventTypeEXT {
	if ptr == nil {
		return nil
	}

	return (*DisplayEventTypeEXT)(ptr)
}

func marshalDisplayEventTypeEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDisplayEventTypeEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DisplayEventTypeEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type DisplayPowerInfoEXT struct {
	native C.VkDisplayPowerInfoEXT
}

// WrapDisplayPowerInfoEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDisplayPowerInfoEXT(ptr unsafe.Pointer) *DisplayPowerInfoEXT {
	if ptr == nil {
		return nil
	}

	return (*DisplayPowerInfoEXT)(ptr)
}

func marshalDisplayPowerInfoEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDisplayPowerInfoEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DisplayPowerInfoEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type DeviceEventInfoEXT struct {
	native C.VkDeviceEventInfoEXT
}

// WrapDeviceEventInfoEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDeviceEventInfoEXT(ptr unsafe.Pointer) *DeviceEventInfoEXT {
	if ptr == nil {
		return nil
	}

	return (*DeviceEventInfoEXT)(ptr)
}

func marshalDeviceEventInfoEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDeviceEventInfoEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DeviceEventInfoEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type DisplayEventInfoEXT struct {
	native C.VkDisplayEventInfoEXT
}

// WrapDisplayEventInfoEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDisplayEventInfoEXT(ptr unsafe.Pointer) *DisplayEventInfoEXT {
	if ptr == nil {
		return nil
	}

	return (*DisplayEventInfoEXT)(ptr)
}

func marshalDisplayEventInfoEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDisplayEventInfoEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DisplayEventInfoEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type SwapchainCounterCreateInfoEXT struct {
	native C.VkSwapchainCounterCreateInfoEXT
}

// WrapSwapchainCounterCreateInfoEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSwapchainCounterCreateInfoEXT(ptr unsafe.Pointer) *SwapchainCounterCreateInfoEXT {
	if ptr == nil {
		return nil
	}

	return (*SwapchainCounterCreateInfoEXT)(ptr)
}

func marshalSwapchainCounterCreateInfoEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSwapchainCounterCreateInfoEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SwapchainCounterCreateInfoEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type RefreshCycleDurationGOOGLE struct {
	native C.VkRefreshCycleDurationGOOGLE
}

// WrapRefreshCycleDurationGOOGLE wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapRefreshCycleDurationGOOGLE(ptr unsafe.Pointer) *RefreshCycleDurationGOOGLE {
	if ptr == nil {
		return nil
	}

	return (*RefreshCycleDurationGOOGLE)(ptr)
}

func marshalRefreshCycleDurationGOOGLE(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapRefreshCycleDurationGOOGLE(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (r *RefreshCycleDurationGOOGLE) Native() unsafe.Pointer {
	return unsafe.Pointer(&r.native)
}

type PastPresentationTimingGOOGLE struct {
	native C.VkPastPresentationTimingGOOGLE
}

// WrapPastPresentationTimingGOOGLE wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPastPresentationTimingGOOGLE(ptr unsafe.Pointer) *PastPresentationTimingGOOGLE {
	if ptr == nil {
		return nil
	}

	return (*PastPresentationTimingGOOGLE)(ptr)
}

func marshalPastPresentationTimingGOOGLE(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPastPresentationTimingGOOGLE(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PastPresentationTimingGOOGLE) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PresentTimeGOOGLE struct {
	native C.VkPresentTimeGOOGLE
}

// WrapPresentTimeGOOGLE wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPresentTimeGOOGLE(ptr unsafe.Pointer) *PresentTimeGOOGLE {
	if ptr == nil {
		return nil
	}

	return (*PresentTimeGOOGLE)(ptr)
}

func marshalPresentTimeGOOGLE(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPresentTimeGOOGLE(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PresentTimeGOOGLE) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PresentTimesInfoGOOGLE struct {
	native C.VkPresentTimesInfoGOOGLE
}

// WrapPresentTimesInfoGOOGLE wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPresentTimesInfoGOOGLE(ptr unsafe.Pointer) *PresentTimesInfoGOOGLE {
	if ptr == nil {
		return nil
	}

	return (*PresentTimesInfoGOOGLE)(ptr)
}

func marshalPresentTimesInfoGOOGLE(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPresentTimesInfoGOOGLE(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PresentTimesInfoGOOGLE) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX struct {
	native C.VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX
}

// WrapPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX(ptr unsafe.Pointer) *PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX)(ptr)
}

func marshalPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type ViewportCoordinateSwizzleNV struct {
	native C.VkViewportCoordinateSwizzleNV
}

// WrapViewportCoordinateSwizzleNV wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapViewportCoordinateSwizzleNV(ptr unsafe.Pointer) *ViewportCoordinateSwizzleNV {
	if ptr == nil {
		return nil
	}

	return (*ViewportCoordinateSwizzleNV)(ptr)
}

func marshalViewportCoordinateSwizzleNV(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapViewportCoordinateSwizzleNV(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (v *ViewportCoordinateSwizzleNV) Native() unsafe.Pointer {
	return unsafe.Pointer(&v.native)
}

type PipelineViewportSwizzleStateCreateFlagsNV struct {
	native C.VkPipelineViewportSwizzleStateCreateFlagsNV
}

// WrapPipelineViewportSwizzleStateCreateFlagsNV wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPipelineViewportSwizzleStateCreateFlagsNV(ptr unsafe.Pointer) *PipelineViewportSwizzleStateCreateFlagsNV {
	if ptr == nil {
		return nil
	}

	return (*PipelineViewportSwizzleStateCreateFlagsNV)(ptr)
}

func marshalPipelineViewportSwizzleStateCreateFlagsNV(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPipelineViewportSwizzleStateCreateFlagsNV(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PipelineViewportSwizzleStateCreateFlagsNV) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type ViewportSwizzleNV struct {
	native C.VkViewportSwizzleNV
}

// WrapViewportSwizzleNV wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapViewportSwizzleNV(ptr unsafe.Pointer) *ViewportSwizzleNV {
	if ptr == nil {
		return nil
	}

	return (*ViewportSwizzleNV)(ptr)
}

func marshalViewportSwizzleNV(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapViewportSwizzleNV(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (v *ViewportSwizzleNV) Native() unsafe.Pointer {
	return unsafe.Pointer(&v.native)
}

type PipelineViewportSwizzleStateCreateInfoNV struct {
	native C.VkPipelineViewportSwizzleStateCreateInfoNV
}

// WrapPipelineViewportSwizzleStateCreateInfoNV wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPipelineViewportSwizzleStateCreateInfoNV(ptr unsafe.Pointer) *PipelineViewportSwizzleStateCreateInfoNV {
	if ptr == nil {
		return nil
	}

	return (*PipelineViewportSwizzleStateCreateInfoNV)(ptr)
}

func marshalPipelineViewportSwizzleStateCreateInfoNV(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPipelineViewportSwizzleStateCreateInfoNV(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PipelineViewportSwizzleStateCreateInfoNV) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type DiscardRectangleModeEXT struct {
	native C.VkDiscardRectangleModeEXT
}

// WrapDiscardRectangleModeEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDiscardRectangleModeEXT(ptr unsafe.Pointer) *DiscardRectangleModeEXT {
	if ptr == nil {
		return nil
	}

	return (*DiscardRectangleModeEXT)(ptr)
}

func marshalDiscardRectangleModeEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDiscardRectangleModeEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DiscardRectangleModeEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type PipelineDiscardRectangleStateCreateFlagsEXT struct {
	native C.VkPipelineDiscardRectangleStateCreateFlagsEXT
}

// WrapPipelineDiscardRectangleStateCreateFlagsEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPipelineDiscardRectangleStateCreateFlagsEXT(ptr unsafe.Pointer) *PipelineDiscardRectangleStateCreateFlagsEXT {
	if ptr == nil {
		return nil
	}

	return (*PipelineDiscardRectangleStateCreateFlagsEXT)(ptr)
}

func marshalPipelineDiscardRectangleStateCreateFlagsEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPipelineDiscardRectangleStateCreateFlagsEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PipelineDiscardRectangleStateCreateFlagsEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PhysicalDeviceDiscardRectanglePropertiesEXT struct {
	native C.VkPhysicalDeviceDiscardRectanglePropertiesEXT
}

// WrapPhysicalDeviceDiscardRectanglePropertiesEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceDiscardRectanglePropertiesEXT(ptr unsafe.Pointer) *PhysicalDeviceDiscardRectanglePropertiesEXT {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceDiscardRectanglePropertiesEXT)(ptr)
}

func marshalPhysicalDeviceDiscardRectanglePropertiesEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceDiscardRectanglePropertiesEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceDiscardRectanglePropertiesEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PipelineDiscardRectangleStateCreateInfoEXT struct {
	native C.VkPipelineDiscardRectangleStateCreateInfoEXT
}

// WrapPipelineDiscardRectangleStateCreateInfoEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPipelineDiscardRectangleStateCreateInfoEXT(ptr unsafe.Pointer) *PipelineDiscardRectangleStateCreateInfoEXT {
	if ptr == nil {
		return nil
	}

	return (*PipelineDiscardRectangleStateCreateInfoEXT)(ptr)
}

func marshalPipelineDiscardRectangleStateCreateInfoEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPipelineDiscardRectangleStateCreateInfoEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PipelineDiscardRectangleStateCreateInfoEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type ConservativeRasterizationModeEXT struct {
	native C.VkConservativeRasterizationModeEXT
}

// WrapConservativeRasterizationModeEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapConservativeRasterizationModeEXT(ptr unsafe.Pointer) *ConservativeRasterizationModeEXT {
	if ptr == nil {
		return nil
	}

	return (*ConservativeRasterizationModeEXT)(ptr)
}

func marshalConservativeRasterizationModeEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapConservativeRasterizationModeEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (c *ConservativeRasterizationModeEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&c.native)
}

type PipelineRasterizationConservativeStateCreateFlagsEXT struct {
	native C.VkPipelineRasterizationConservativeStateCreateFlagsEXT
}

// WrapPipelineRasterizationConservativeStateCreateFlagsEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPipelineRasterizationConservativeStateCreateFlagsEXT(ptr unsafe.Pointer) *PipelineRasterizationConservativeStateCreateFlagsEXT {
	if ptr == nil {
		return nil
	}

	return (*PipelineRasterizationConservativeStateCreateFlagsEXT)(ptr)
}

func marshalPipelineRasterizationConservativeStateCreateFlagsEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPipelineRasterizationConservativeStateCreateFlagsEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PipelineRasterizationConservativeStateCreateFlagsEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PhysicalDeviceConservativeRasterizationPropertiesEXT struct {
	native C.VkPhysicalDeviceConservativeRasterizationPropertiesEXT
}

// WrapPhysicalDeviceConservativeRasterizationPropertiesEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceConservativeRasterizationPropertiesEXT(ptr unsafe.Pointer) *PhysicalDeviceConservativeRasterizationPropertiesEXT {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceConservativeRasterizationPropertiesEXT)(ptr)
}

func marshalPhysicalDeviceConservativeRasterizationPropertiesEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceConservativeRasterizationPropertiesEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceConservativeRasterizationPropertiesEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PipelineRasterizationConservativeStateCreateInfoEXT struct {
	native C.VkPipelineRasterizationConservativeStateCreateInfoEXT
}

// WrapPipelineRasterizationConservativeStateCreateInfoEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPipelineRasterizationConservativeStateCreateInfoEXT(ptr unsafe.Pointer) *PipelineRasterizationConservativeStateCreateInfoEXT {
	if ptr == nil {
		return nil
	}

	return (*PipelineRasterizationConservativeStateCreateInfoEXT)(ptr)
}

func marshalPipelineRasterizationConservativeStateCreateInfoEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPipelineRasterizationConservativeStateCreateInfoEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PipelineRasterizationConservativeStateCreateInfoEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PipelineRasterizationDepthClipStateCreateFlagsEXT struct {
	native C.VkPipelineRasterizationDepthClipStateCreateFlagsEXT
}

// WrapPipelineRasterizationDepthClipStateCreateFlagsEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPipelineRasterizationDepthClipStateCreateFlagsEXT(ptr unsafe.Pointer) *PipelineRasterizationDepthClipStateCreateFlagsEXT {
	if ptr == nil {
		return nil
	}

	return (*PipelineRasterizationDepthClipStateCreateFlagsEXT)(ptr)
}

func marshalPipelineRasterizationDepthClipStateCreateFlagsEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPipelineRasterizationDepthClipStateCreateFlagsEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PipelineRasterizationDepthClipStateCreateFlagsEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PhysicalDeviceDepthClipEnableFeaturesEXT struct {
	native C.VkPhysicalDeviceDepthClipEnableFeaturesEXT
}

// WrapPhysicalDeviceDepthClipEnableFeaturesEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceDepthClipEnableFeaturesEXT(ptr unsafe.Pointer) *PhysicalDeviceDepthClipEnableFeaturesEXT {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceDepthClipEnableFeaturesEXT)(ptr)
}

func marshalPhysicalDeviceDepthClipEnableFeaturesEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceDepthClipEnableFeaturesEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceDepthClipEnableFeaturesEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PipelineRasterizationDepthClipStateCreateInfoEXT struct {
	native C.VkPipelineRasterizationDepthClipStateCreateInfoEXT
}

// WrapPipelineRasterizationDepthClipStateCreateInfoEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPipelineRasterizationDepthClipStateCreateInfoEXT(ptr unsafe.Pointer) *PipelineRasterizationDepthClipStateCreateInfoEXT {
	if ptr == nil {
		return nil
	}

	return (*PipelineRasterizationDepthClipStateCreateInfoEXT)(ptr)
}

func marshalPipelineRasterizationDepthClipStateCreateInfoEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPipelineRasterizationDepthClipStateCreateInfoEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PipelineRasterizationDepthClipStateCreateInfoEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type XYColorEXT struct {
	native C.VkXYColorEXT
}

// WrapXYColorEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapXYColorEXT(ptr unsafe.Pointer) *XYColorEXT {
	if ptr == nil {
		return nil
	}

	return (*XYColorEXT)(ptr)
}

func marshalXYColorEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapXYColorEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (x *XYColorEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&x.native)
}

type HdrMetadataEXT struct {
	native C.VkHdrMetadataEXT
}

// WrapHdrMetadataEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapHdrMetadataEXT(ptr unsafe.Pointer) *HdrMetadataEXT {
	if ptr == nil {
		return nil
	}

	return (*HdrMetadataEXT)(ptr)
}

func marshalHdrMetadataEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapHdrMetadataEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (h *HdrMetadataEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&h.native)
}

type DebugUtilsMessengerEXT struct {
	native C.VkDebugUtilsMessengerEXT
}

// WrapDebugUtilsMessengerEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDebugUtilsMessengerEXT(ptr unsafe.Pointer) *DebugUtilsMessengerEXT {
	if ptr == nil {
		return nil
	}

	return (*DebugUtilsMessengerEXT)(ptr)
}

func marshalDebugUtilsMessengerEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDebugUtilsMessengerEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DebugUtilsMessengerEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type DebugUtilsMessengerCallbackDataFlagsEXT struct {
	native C.VkDebugUtilsMessengerCallbackDataFlagsEXT
}

// WrapDebugUtilsMessengerCallbackDataFlagsEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDebugUtilsMessengerCallbackDataFlagsEXT(ptr unsafe.Pointer) *DebugUtilsMessengerCallbackDataFlagsEXT {
	if ptr == nil {
		return nil
	}

	return (*DebugUtilsMessengerCallbackDataFlagsEXT)(ptr)
}

func marshalDebugUtilsMessengerCallbackDataFlagsEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDebugUtilsMessengerCallbackDataFlagsEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DebugUtilsMessengerCallbackDataFlagsEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type DebugUtilsMessengerCreateFlagsEXT struct {
	native C.VkDebugUtilsMessengerCreateFlagsEXT
}

// WrapDebugUtilsMessengerCreateFlagsEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDebugUtilsMessengerCreateFlagsEXT(ptr unsafe.Pointer) *DebugUtilsMessengerCreateFlagsEXT {
	if ptr == nil {
		return nil
	}

	return (*DebugUtilsMessengerCreateFlagsEXT)(ptr)
}

func marshalDebugUtilsMessengerCreateFlagsEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDebugUtilsMessengerCreateFlagsEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DebugUtilsMessengerCreateFlagsEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type DebugUtilsMessageSeverityFlagBitsEXT struct {
	native C.VkDebugUtilsMessageSeverityFlagBitsEXT
}

// WrapDebugUtilsMessageSeverityFlagBitsEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDebugUtilsMessageSeverityFlagBitsEXT(ptr unsafe.Pointer) *DebugUtilsMessageSeverityFlagBitsEXT {
	if ptr == nil {
		return nil
	}

	return (*DebugUtilsMessageSeverityFlagBitsEXT)(ptr)
}

func marshalDebugUtilsMessageSeverityFlagBitsEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDebugUtilsMessageSeverityFlagBitsEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DebugUtilsMessageSeverityFlagBitsEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type DebugUtilsMessageSeverityFlagsEXT struct {
	native C.VkDebugUtilsMessageSeverityFlagsEXT
}

// WrapDebugUtilsMessageSeverityFlagsEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDebugUtilsMessageSeverityFlagsEXT(ptr unsafe.Pointer) *DebugUtilsMessageSeverityFlagsEXT {
	if ptr == nil {
		return nil
	}

	return (*DebugUtilsMessageSeverityFlagsEXT)(ptr)
}

func marshalDebugUtilsMessageSeverityFlagsEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDebugUtilsMessageSeverityFlagsEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DebugUtilsMessageSeverityFlagsEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type DebugUtilsMessageTypeFlagBitsEXT struct {
	native C.VkDebugUtilsMessageTypeFlagBitsEXT
}

// WrapDebugUtilsMessageTypeFlagBitsEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDebugUtilsMessageTypeFlagBitsEXT(ptr unsafe.Pointer) *DebugUtilsMessageTypeFlagBitsEXT {
	if ptr == nil {
		return nil
	}

	return (*DebugUtilsMessageTypeFlagBitsEXT)(ptr)
}

func marshalDebugUtilsMessageTypeFlagBitsEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDebugUtilsMessageTypeFlagBitsEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DebugUtilsMessageTypeFlagBitsEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type DebugUtilsMessageTypeFlagsEXT struct {
	native C.VkDebugUtilsMessageTypeFlagsEXT
}

// WrapDebugUtilsMessageTypeFlagsEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDebugUtilsMessageTypeFlagsEXT(ptr unsafe.Pointer) *DebugUtilsMessageTypeFlagsEXT {
	if ptr == nil {
		return nil
	}

	return (*DebugUtilsMessageTypeFlagsEXT)(ptr)
}

func marshalDebugUtilsMessageTypeFlagsEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDebugUtilsMessageTypeFlagsEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DebugUtilsMessageTypeFlagsEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type DebugUtilsObjectNameInfoEXT struct {
	native C.VkDebugUtilsObjectNameInfoEXT
}

// WrapDebugUtilsObjectNameInfoEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDebugUtilsObjectNameInfoEXT(ptr unsafe.Pointer) *DebugUtilsObjectNameInfoEXT {
	if ptr == nil {
		return nil
	}

	return (*DebugUtilsObjectNameInfoEXT)(ptr)
}

func marshalDebugUtilsObjectNameInfoEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDebugUtilsObjectNameInfoEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DebugUtilsObjectNameInfoEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type DebugUtilsObjectTagInfoEXT struct {
	native C.VkDebugUtilsObjectTagInfoEXT
}

// WrapDebugUtilsObjectTagInfoEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDebugUtilsObjectTagInfoEXT(ptr unsafe.Pointer) *DebugUtilsObjectTagInfoEXT {
	if ptr == nil {
		return nil
	}

	return (*DebugUtilsObjectTagInfoEXT)(ptr)
}

func marshalDebugUtilsObjectTagInfoEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDebugUtilsObjectTagInfoEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DebugUtilsObjectTagInfoEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type DebugUtilsLabelEXT struct {
	native C.VkDebugUtilsLabelEXT
}

// WrapDebugUtilsLabelEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDebugUtilsLabelEXT(ptr unsafe.Pointer) *DebugUtilsLabelEXT {
	if ptr == nil {
		return nil
	}

	return (*DebugUtilsLabelEXT)(ptr)
}

func marshalDebugUtilsLabelEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDebugUtilsLabelEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DebugUtilsLabelEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type DebugUtilsMessengerCallbackDataEXT struct {
	native C.VkDebugUtilsMessengerCallbackDataEXT
}

// WrapDebugUtilsMessengerCallbackDataEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDebugUtilsMessengerCallbackDataEXT(ptr unsafe.Pointer) *DebugUtilsMessengerCallbackDataEXT {
	if ptr == nil {
		return nil
	}

	return (*DebugUtilsMessengerCallbackDataEXT)(ptr)
}

func marshalDebugUtilsMessengerCallbackDataEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDebugUtilsMessengerCallbackDataEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DebugUtilsMessengerCallbackDataEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type DebugUtilsMessengerCreateInfoEXT struct {
	native C.VkDebugUtilsMessengerCreateInfoEXT
}

// WrapDebugUtilsMessengerCreateInfoEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDebugUtilsMessengerCreateInfoEXT(ptr unsafe.Pointer) *DebugUtilsMessengerCreateInfoEXT {
	if ptr == nil {
		return nil
	}

	return (*DebugUtilsMessengerCreateInfoEXT)(ptr)
}

func marshalDebugUtilsMessengerCreateInfoEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDebugUtilsMessengerCreateInfoEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DebugUtilsMessengerCreateInfoEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type SamplerReductionModeEXT struct {
	native C.VkSamplerReductionModeEXT
}

// WrapSamplerReductionModeEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSamplerReductionModeEXT(ptr unsafe.Pointer) *SamplerReductionModeEXT {
	if ptr == nil {
		return nil
	}

	return (*SamplerReductionModeEXT)(ptr)
}

func marshalSamplerReductionModeEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSamplerReductionModeEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SamplerReductionModeEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type SamplerReductionModeCreateInfoEXT struct {
	native C.VkSamplerReductionModeCreateInfoEXT
}

// WrapSamplerReductionModeCreateInfoEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSamplerReductionModeCreateInfoEXT(ptr unsafe.Pointer) *SamplerReductionModeCreateInfoEXT {
	if ptr == nil {
		return nil
	}

	return (*SamplerReductionModeCreateInfoEXT)(ptr)
}

func marshalSamplerReductionModeCreateInfoEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSamplerReductionModeCreateInfoEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SamplerReductionModeCreateInfoEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type PhysicalDeviceSamplerFilterMinmaxPropertiesEXT struct {
	native C.VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT
}

// WrapPhysicalDeviceSamplerFilterMinmaxPropertiesEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceSamplerFilterMinmaxPropertiesEXT(ptr unsafe.Pointer) *PhysicalDeviceSamplerFilterMinmaxPropertiesEXT {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceSamplerFilterMinmaxPropertiesEXT)(ptr)
}

func marshalPhysicalDeviceSamplerFilterMinmaxPropertiesEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceSamplerFilterMinmaxPropertiesEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceSamplerFilterMinmaxPropertiesEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PhysicalDeviceInlineUniformBlockFeaturesEXT struct {
	native C.VkPhysicalDeviceInlineUniformBlockFeaturesEXT
}

// WrapPhysicalDeviceInlineUniformBlockFeaturesEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceInlineUniformBlockFeaturesEXT(ptr unsafe.Pointer) *PhysicalDeviceInlineUniformBlockFeaturesEXT {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceInlineUniformBlockFeaturesEXT)(ptr)
}

func marshalPhysicalDeviceInlineUniformBlockFeaturesEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceInlineUniformBlockFeaturesEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceInlineUniformBlockFeaturesEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PhysicalDeviceInlineUniformBlockPropertiesEXT struct {
	native C.VkPhysicalDeviceInlineUniformBlockPropertiesEXT
}

// WrapPhysicalDeviceInlineUniformBlockPropertiesEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceInlineUniformBlockPropertiesEXT(ptr unsafe.Pointer) *PhysicalDeviceInlineUniformBlockPropertiesEXT {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceInlineUniformBlockPropertiesEXT)(ptr)
}

func marshalPhysicalDeviceInlineUniformBlockPropertiesEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceInlineUniformBlockPropertiesEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceInlineUniformBlockPropertiesEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type WriteDescriptorSetInlineUniformBlockEXT struct {
	native C.VkWriteDescriptorSetInlineUniformBlockEXT
}

// WrapWriteDescriptorSetInlineUniformBlockEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapWriteDescriptorSetInlineUniformBlockEXT(ptr unsafe.Pointer) *WriteDescriptorSetInlineUniformBlockEXT {
	if ptr == nil {
		return nil
	}

	return (*WriteDescriptorSetInlineUniformBlockEXT)(ptr)
}

func marshalWriteDescriptorSetInlineUniformBlockEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapWriteDescriptorSetInlineUniformBlockEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (w *WriteDescriptorSetInlineUniformBlockEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&w.native)
}

type DescriptorPoolInlineUniformBlockCreateInfoEXT struct {
	native C.VkDescriptorPoolInlineUniformBlockCreateInfoEXT
}

// WrapDescriptorPoolInlineUniformBlockCreateInfoEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDescriptorPoolInlineUniformBlockCreateInfoEXT(ptr unsafe.Pointer) *DescriptorPoolInlineUniformBlockCreateInfoEXT {
	if ptr == nil {
		return nil
	}

	return (*DescriptorPoolInlineUniformBlockCreateInfoEXT)(ptr)
}

func marshalDescriptorPoolInlineUniformBlockCreateInfoEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDescriptorPoolInlineUniformBlockCreateInfoEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DescriptorPoolInlineUniformBlockCreateInfoEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type SampleLocationEXT struct {
	native C.VkSampleLocationEXT
}

// WrapSampleLocationEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSampleLocationEXT(ptr unsafe.Pointer) *SampleLocationEXT {
	if ptr == nil {
		return nil
	}

	return (*SampleLocationEXT)(ptr)
}

func marshalSampleLocationEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSampleLocationEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SampleLocationEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type SampleLocationsInfoEXT struct {
	native C.VkSampleLocationsInfoEXT
}

// WrapSampleLocationsInfoEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSampleLocationsInfoEXT(ptr unsafe.Pointer) *SampleLocationsInfoEXT {
	if ptr == nil {
		return nil
	}

	return (*SampleLocationsInfoEXT)(ptr)
}

func marshalSampleLocationsInfoEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSampleLocationsInfoEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SampleLocationsInfoEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type AttachmentSampleLocationsEXT struct {
	native C.VkAttachmentSampleLocationsEXT
}

// WrapAttachmentSampleLocationsEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapAttachmentSampleLocationsEXT(ptr unsafe.Pointer) *AttachmentSampleLocationsEXT {
	if ptr == nil {
		return nil
	}

	return (*AttachmentSampleLocationsEXT)(ptr)
}

func marshalAttachmentSampleLocationsEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapAttachmentSampleLocationsEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (a *AttachmentSampleLocationsEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&a.native)
}

type SubpassSampleLocationsEXT struct {
	native C.VkSubpassSampleLocationsEXT
}

// WrapSubpassSampleLocationsEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSubpassSampleLocationsEXT(ptr unsafe.Pointer) *SubpassSampleLocationsEXT {
	if ptr == nil {
		return nil
	}

	return (*SubpassSampleLocationsEXT)(ptr)
}

func marshalSubpassSampleLocationsEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSubpassSampleLocationsEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SubpassSampleLocationsEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type RenderPassSampleLocationsBeginInfoEXT struct {
	native C.VkRenderPassSampleLocationsBeginInfoEXT
}

// WrapRenderPassSampleLocationsBeginInfoEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapRenderPassSampleLocationsBeginInfoEXT(ptr unsafe.Pointer) *RenderPassSampleLocationsBeginInfoEXT {
	if ptr == nil {
		return nil
	}

	return (*RenderPassSampleLocationsBeginInfoEXT)(ptr)
}

func marshalRenderPassSampleLocationsBeginInfoEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapRenderPassSampleLocationsBeginInfoEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (r *RenderPassSampleLocationsBeginInfoEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&r.native)
}

type PipelineSampleLocationsStateCreateInfoEXT struct {
	native C.VkPipelineSampleLocationsStateCreateInfoEXT
}

// WrapPipelineSampleLocationsStateCreateInfoEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPipelineSampleLocationsStateCreateInfoEXT(ptr unsafe.Pointer) *PipelineSampleLocationsStateCreateInfoEXT {
	if ptr == nil {
		return nil
	}

	return (*PipelineSampleLocationsStateCreateInfoEXT)(ptr)
}

func marshalPipelineSampleLocationsStateCreateInfoEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPipelineSampleLocationsStateCreateInfoEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PipelineSampleLocationsStateCreateInfoEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PhysicalDeviceSampleLocationsPropertiesEXT struct {
	native C.VkPhysicalDeviceSampleLocationsPropertiesEXT
}

// WrapPhysicalDeviceSampleLocationsPropertiesEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceSampleLocationsPropertiesEXT(ptr unsafe.Pointer) *PhysicalDeviceSampleLocationsPropertiesEXT {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceSampleLocationsPropertiesEXT)(ptr)
}

func marshalPhysicalDeviceSampleLocationsPropertiesEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceSampleLocationsPropertiesEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceSampleLocationsPropertiesEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type MultisamplePropertiesEXT struct {
	native C.VkMultisamplePropertiesEXT
}

// WrapMultisamplePropertiesEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapMultisamplePropertiesEXT(ptr unsafe.Pointer) *MultisamplePropertiesEXT {
	if ptr == nil {
		return nil
	}

	return (*MultisamplePropertiesEXT)(ptr)
}

func marshalMultisamplePropertiesEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapMultisamplePropertiesEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (m *MultisamplePropertiesEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&m.native)
}

type BlendOverlapEXT struct {
	native C.VkBlendOverlapEXT
}

// WrapBlendOverlapEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapBlendOverlapEXT(ptr unsafe.Pointer) *BlendOverlapEXT {
	if ptr == nil {
		return nil
	}

	return (*BlendOverlapEXT)(ptr)
}

func marshalBlendOverlapEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapBlendOverlapEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (b *BlendOverlapEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&b.native)
}

type PhysicalDeviceBlendOperationAdvancedFeaturesEXT struct {
	native C.VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT
}

// WrapPhysicalDeviceBlendOperationAdvancedFeaturesEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceBlendOperationAdvancedFeaturesEXT(ptr unsafe.Pointer) *PhysicalDeviceBlendOperationAdvancedFeaturesEXT {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceBlendOperationAdvancedFeaturesEXT)(ptr)
}

func marshalPhysicalDeviceBlendOperationAdvancedFeaturesEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceBlendOperationAdvancedFeaturesEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceBlendOperationAdvancedFeaturesEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PhysicalDeviceBlendOperationAdvancedPropertiesEXT struct {
	native C.VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT
}

// WrapPhysicalDeviceBlendOperationAdvancedPropertiesEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceBlendOperationAdvancedPropertiesEXT(ptr unsafe.Pointer) *PhysicalDeviceBlendOperationAdvancedPropertiesEXT {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceBlendOperationAdvancedPropertiesEXT)(ptr)
}

func marshalPhysicalDeviceBlendOperationAdvancedPropertiesEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceBlendOperationAdvancedPropertiesEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceBlendOperationAdvancedPropertiesEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PipelineColorBlendAdvancedStateCreateInfoEXT struct {
	native C.VkPipelineColorBlendAdvancedStateCreateInfoEXT
}

// WrapPipelineColorBlendAdvancedStateCreateInfoEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPipelineColorBlendAdvancedStateCreateInfoEXT(ptr unsafe.Pointer) *PipelineColorBlendAdvancedStateCreateInfoEXT {
	if ptr == nil {
		return nil
	}

	return (*PipelineColorBlendAdvancedStateCreateInfoEXT)(ptr)
}

func marshalPipelineColorBlendAdvancedStateCreateInfoEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPipelineColorBlendAdvancedStateCreateInfoEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PipelineColorBlendAdvancedStateCreateInfoEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PipelineCoverageToColorStateCreateFlagsNV struct {
	native C.VkPipelineCoverageToColorStateCreateFlagsNV
}

// WrapPipelineCoverageToColorStateCreateFlagsNV wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPipelineCoverageToColorStateCreateFlagsNV(ptr unsafe.Pointer) *PipelineCoverageToColorStateCreateFlagsNV {
	if ptr == nil {
		return nil
	}

	return (*PipelineCoverageToColorStateCreateFlagsNV)(ptr)
}

func marshalPipelineCoverageToColorStateCreateFlagsNV(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPipelineCoverageToColorStateCreateFlagsNV(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PipelineCoverageToColorStateCreateFlagsNV) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PipelineCoverageToColorStateCreateInfoNV struct {
	native C.VkPipelineCoverageToColorStateCreateInfoNV
}

// WrapPipelineCoverageToColorStateCreateInfoNV wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPipelineCoverageToColorStateCreateInfoNV(ptr unsafe.Pointer) *PipelineCoverageToColorStateCreateInfoNV {
	if ptr == nil {
		return nil
	}

	return (*PipelineCoverageToColorStateCreateInfoNV)(ptr)
}

func marshalPipelineCoverageToColorStateCreateInfoNV(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPipelineCoverageToColorStateCreateInfoNV(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PipelineCoverageToColorStateCreateInfoNV) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type CoverageModulationModeNV struct {
	native C.VkCoverageModulationModeNV
}

// WrapCoverageModulationModeNV wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapCoverageModulationModeNV(ptr unsafe.Pointer) *CoverageModulationModeNV {
	if ptr == nil {
		return nil
	}

	return (*CoverageModulationModeNV)(ptr)
}

func marshalCoverageModulationModeNV(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapCoverageModulationModeNV(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (c *CoverageModulationModeNV) Native() unsafe.Pointer {
	return unsafe.Pointer(&c.native)
}

type PipelineCoverageModulationStateCreateFlagsNV struct {
	native C.VkPipelineCoverageModulationStateCreateFlagsNV
}

// WrapPipelineCoverageModulationStateCreateFlagsNV wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPipelineCoverageModulationStateCreateFlagsNV(ptr unsafe.Pointer) *PipelineCoverageModulationStateCreateFlagsNV {
	if ptr == nil {
		return nil
	}

	return (*PipelineCoverageModulationStateCreateFlagsNV)(ptr)
}

func marshalPipelineCoverageModulationStateCreateFlagsNV(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPipelineCoverageModulationStateCreateFlagsNV(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PipelineCoverageModulationStateCreateFlagsNV) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PipelineCoverageModulationStateCreateInfoNV struct {
	native C.VkPipelineCoverageModulationStateCreateInfoNV
}

// WrapPipelineCoverageModulationStateCreateInfoNV wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPipelineCoverageModulationStateCreateInfoNV(ptr unsafe.Pointer) *PipelineCoverageModulationStateCreateInfoNV {
	if ptr == nil {
		return nil
	}

	return (*PipelineCoverageModulationStateCreateInfoNV)(ptr)
}

func marshalPipelineCoverageModulationStateCreateInfoNV(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPipelineCoverageModulationStateCreateInfoNV(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PipelineCoverageModulationStateCreateInfoNV) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type DrmFormatModifierPropertiesEXT struct {
	native C.VkDrmFormatModifierPropertiesEXT
}

// WrapDrmFormatModifierPropertiesEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDrmFormatModifierPropertiesEXT(ptr unsafe.Pointer) *DrmFormatModifierPropertiesEXT {
	if ptr == nil {
		return nil
	}

	return (*DrmFormatModifierPropertiesEXT)(ptr)
}

func marshalDrmFormatModifierPropertiesEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDrmFormatModifierPropertiesEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DrmFormatModifierPropertiesEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type DrmFormatModifierPropertiesListEXT struct {
	native C.VkDrmFormatModifierPropertiesListEXT
}

// WrapDrmFormatModifierPropertiesListEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDrmFormatModifierPropertiesListEXT(ptr unsafe.Pointer) *DrmFormatModifierPropertiesListEXT {
	if ptr == nil {
		return nil
	}

	return (*DrmFormatModifierPropertiesListEXT)(ptr)
}

func marshalDrmFormatModifierPropertiesListEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDrmFormatModifierPropertiesListEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DrmFormatModifierPropertiesListEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type PhysicalDeviceImageDrmFormatModifierInfoEXT struct {
	native C.VkPhysicalDeviceImageDrmFormatModifierInfoEXT
}

// WrapPhysicalDeviceImageDrmFormatModifierInfoEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceImageDrmFormatModifierInfoEXT(ptr unsafe.Pointer) *PhysicalDeviceImageDrmFormatModifierInfoEXT {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceImageDrmFormatModifierInfoEXT)(ptr)
}

func marshalPhysicalDeviceImageDrmFormatModifierInfoEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceImageDrmFormatModifierInfoEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceImageDrmFormatModifierInfoEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type ImageDrmFormatModifierListCreateInfoEXT struct {
	native C.VkImageDrmFormatModifierListCreateInfoEXT
}

// WrapImageDrmFormatModifierListCreateInfoEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapImageDrmFormatModifierListCreateInfoEXT(ptr unsafe.Pointer) *ImageDrmFormatModifierListCreateInfoEXT {
	if ptr == nil {
		return nil
	}

	return (*ImageDrmFormatModifierListCreateInfoEXT)(ptr)
}

func marshalImageDrmFormatModifierListCreateInfoEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapImageDrmFormatModifierListCreateInfoEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (i *ImageDrmFormatModifierListCreateInfoEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&i.native)
}

type ImageDrmFormatModifierExplicitCreateInfoEXT struct {
	native C.VkImageDrmFormatModifierExplicitCreateInfoEXT
}

// WrapImageDrmFormatModifierExplicitCreateInfoEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapImageDrmFormatModifierExplicitCreateInfoEXT(ptr unsafe.Pointer) *ImageDrmFormatModifierExplicitCreateInfoEXT {
	if ptr == nil {
		return nil
	}

	return (*ImageDrmFormatModifierExplicitCreateInfoEXT)(ptr)
}

func marshalImageDrmFormatModifierExplicitCreateInfoEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapImageDrmFormatModifierExplicitCreateInfoEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (i *ImageDrmFormatModifierExplicitCreateInfoEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&i.native)
}

type ImageDrmFormatModifierPropertiesEXT struct {
	native C.VkImageDrmFormatModifierPropertiesEXT
}

// WrapImageDrmFormatModifierPropertiesEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapImageDrmFormatModifierPropertiesEXT(ptr unsafe.Pointer) *ImageDrmFormatModifierPropertiesEXT {
	if ptr == nil {
		return nil
	}

	return (*ImageDrmFormatModifierPropertiesEXT)(ptr)
}

func marshalImageDrmFormatModifierPropertiesEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapImageDrmFormatModifierPropertiesEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (i *ImageDrmFormatModifierPropertiesEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&i.native)
}

type ValidationCacheEXT struct {
	native C.VkValidationCacheEXT
}

// WrapValidationCacheEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapValidationCacheEXT(ptr unsafe.Pointer) *ValidationCacheEXT {
	if ptr == nil {
		return nil
	}

	return (*ValidationCacheEXT)(ptr)
}

func marshalValidationCacheEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapValidationCacheEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (v *ValidationCacheEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&v.native)
}

type ValidationCacheHeaderVersionEXT struct {
	native C.VkValidationCacheHeaderVersionEXT
}

// WrapValidationCacheHeaderVersionEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapValidationCacheHeaderVersionEXT(ptr unsafe.Pointer) *ValidationCacheHeaderVersionEXT {
	if ptr == nil {
		return nil
	}

	return (*ValidationCacheHeaderVersionEXT)(ptr)
}

func marshalValidationCacheHeaderVersionEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapValidationCacheHeaderVersionEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (v *ValidationCacheHeaderVersionEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&v.native)
}

type ValidationCacheCreateFlagsEXT struct {
	native C.VkValidationCacheCreateFlagsEXT
}

// WrapValidationCacheCreateFlagsEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapValidationCacheCreateFlagsEXT(ptr unsafe.Pointer) *ValidationCacheCreateFlagsEXT {
	if ptr == nil {
		return nil
	}

	return (*ValidationCacheCreateFlagsEXT)(ptr)
}

func marshalValidationCacheCreateFlagsEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapValidationCacheCreateFlagsEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (v *ValidationCacheCreateFlagsEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&v.native)
}

type ValidationCacheCreateInfoEXT struct {
	native C.VkValidationCacheCreateInfoEXT
}

// WrapValidationCacheCreateInfoEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapValidationCacheCreateInfoEXT(ptr unsafe.Pointer) *ValidationCacheCreateInfoEXT {
	if ptr == nil {
		return nil
	}

	return (*ValidationCacheCreateInfoEXT)(ptr)
}

func marshalValidationCacheCreateInfoEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapValidationCacheCreateInfoEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (v *ValidationCacheCreateInfoEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&v.native)
}

type ShaderModuleValidationCacheCreateInfoEXT struct {
	native C.VkShaderModuleValidationCacheCreateInfoEXT
}

// WrapShaderModuleValidationCacheCreateInfoEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapShaderModuleValidationCacheCreateInfoEXT(ptr unsafe.Pointer) *ShaderModuleValidationCacheCreateInfoEXT {
	if ptr == nil {
		return nil
	}

	return (*ShaderModuleValidationCacheCreateInfoEXT)(ptr)
}

func marshalShaderModuleValidationCacheCreateInfoEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapShaderModuleValidationCacheCreateInfoEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *ShaderModuleValidationCacheCreateInfoEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type DescriptorBindingFlagBitsEXT struct {
	native C.VkDescriptorBindingFlagBitsEXT
}

// WrapDescriptorBindingFlagBitsEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDescriptorBindingFlagBitsEXT(ptr unsafe.Pointer) *DescriptorBindingFlagBitsEXT {
	if ptr == nil {
		return nil
	}

	return (*DescriptorBindingFlagBitsEXT)(ptr)
}

func marshalDescriptorBindingFlagBitsEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDescriptorBindingFlagBitsEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DescriptorBindingFlagBitsEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type DescriptorBindingFlagsEXT struct {
	native C.VkDescriptorBindingFlagsEXT
}

// WrapDescriptorBindingFlagsEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDescriptorBindingFlagsEXT(ptr unsafe.Pointer) *DescriptorBindingFlagsEXT {
	if ptr == nil {
		return nil
	}

	return (*DescriptorBindingFlagsEXT)(ptr)
}

func marshalDescriptorBindingFlagsEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDescriptorBindingFlagsEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DescriptorBindingFlagsEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type DescriptorSetLayoutBindingFlagsCreateInfoEXT struct {
	native C.VkDescriptorSetLayoutBindingFlagsCreateInfoEXT
}

// WrapDescriptorSetLayoutBindingFlagsCreateInfoEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDescriptorSetLayoutBindingFlagsCreateInfoEXT(ptr unsafe.Pointer) *DescriptorSetLayoutBindingFlagsCreateInfoEXT {
	if ptr == nil {
		return nil
	}

	return (*DescriptorSetLayoutBindingFlagsCreateInfoEXT)(ptr)
}

func marshalDescriptorSetLayoutBindingFlagsCreateInfoEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDescriptorSetLayoutBindingFlagsCreateInfoEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DescriptorSetLayoutBindingFlagsCreateInfoEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type PhysicalDeviceDescriptorIndexingFeaturesEXT struct {
	native C.VkPhysicalDeviceDescriptorIndexingFeaturesEXT
}

// WrapPhysicalDeviceDescriptorIndexingFeaturesEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceDescriptorIndexingFeaturesEXT(ptr unsafe.Pointer) *PhysicalDeviceDescriptorIndexingFeaturesEXT {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceDescriptorIndexingFeaturesEXT)(ptr)
}

func marshalPhysicalDeviceDescriptorIndexingFeaturesEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceDescriptorIndexingFeaturesEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceDescriptorIndexingFeaturesEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PhysicalDeviceDescriptorIndexingPropertiesEXT struct {
	native C.VkPhysicalDeviceDescriptorIndexingPropertiesEXT
}

// WrapPhysicalDeviceDescriptorIndexingPropertiesEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceDescriptorIndexingPropertiesEXT(ptr unsafe.Pointer) *PhysicalDeviceDescriptorIndexingPropertiesEXT {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceDescriptorIndexingPropertiesEXT)(ptr)
}

func marshalPhysicalDeviceDescriptorIndexingPropertiesEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceDescriptorIndexingPropertiesEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceDescriptorIndexingPropertiesEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type DescriptorSetVariableDescriptorCountAllocateInfoEXT struct {
	native C.VkDescriptorSetVariableDescriptorCountAllocateInfoEXT
}

// WrapDescriptorSetVariableDescriptorCountAllocateInfoEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDescriptorSetVariableDescriptorCountAllocateInfoEXT(ptr unsafe.Pointer) *DescriptorSetVariableDescriptorCountAllocateInfoEXT {
	if ptr == nil {
		return nil
	}

	return (*DescriptorSetVariableDescriptorCountAllocateInfoEXT)(ptr)
}

func marshalDescriptorSetVariableDescriptorCountAllocateInfoEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDescriptorSetVariableDescriptorCountAllocateInfoEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DescriptorSetVariableDescriptorCountAllocateInfoEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type DescriptorSetVariableDescriptorCountLayoutSupportEXT struct {
	native C.VkDescriptorSetVariableDescriptorCountLayoutSupportEXT
}

// WrapDescriptorSetVariableDescriptorCountLayoutSupportEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDescriptorSetVariableDescriptorCountLayoutSupportEXT(ptr unsafe.Pointer) *DescriptorSetVariableDescriptorCountLayoutSupportEXT {
	if ptr == nil {
		return nil
	}

	return (*DescriptorSetVariableDescriptorCountLayoutSupportEXT)(ptr)
}

func marshalDescriptorSetVariableDescriptorCountLayoutSupportEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDescriptorSetVariableDescriptorCountLayoutSupportEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DescriptorSetVariableDescriptorCountLayoutSupportEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type ShadingRatePaletteEntryNV struct {
	native C.VkShadingRatePaletteEntryNV
}

// WrapShadingRatePaletteEntryNV wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapShadingRatePaletteEntryNV(ptr unsafe.Pointer) *ShadingRatePaletteEntryNV {
	if ptr == nil {
		return nil
	}

	return (*ShadingRatePaletteEntryNV)(ptr)
}

func marshalShadingRatePaletteEntryNV(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapShadingRatePaletteEntryNV(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *ShadingRatePaletteEntryNV) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type CoarseSampleOrderTypeNV struct {
	native C.VkCoarseSampleOrderTypeNV
}

// WrapCoarseSampleOrderTypeNV wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapCoarseSampleOrderTypeNV(ptr unsafe.Pointer) *CoarseSampleOrderTypeNV {
	if ptr == nil {
		return nil
	}

	return (*CoarseSampleOrderTypeNV)(ptr)
}

func marshalCoarseSampleOrderTypeNV(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapCoarseSampleOrderTypeNV(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (c *CoarseSampleOrderTypeNV) Native() unsafe.Pointer {
	return unsafe.Pointer(&c.native)
}

type ShadingRatePaletteNV struct {
	native C.VkShadingRatePaletteNV
}

// WrapShadingRatePaletteNV wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapShadingRatePaletteNV(ptr unsafe.Pointer) *ShadingRatePaletteNV {
	if ptr == nil {
		return nil
	}

	return (*ShadingRatePaletteNV)(ptr)
}

func marshalShadingRatePaletteNV(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapShadingRatePaletteNV(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *ShadingRatePaletteNV) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type PipelineViewportShadingRateImageStateCreateInfoNV struct {
	native C.VkPipelineViewportShadingRateImageStateCreateInfoNV
}

// WrapPipelineViewportShadingRateImageStateCreateInfoNV wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPipelineViewportShadingRateImageStateCreateInfoNV(ptr unsafe.Pointer) *PipelineViewportShadingRateImageStateCreateInfoNV {
	if ptr == nil {
		return nil
	}

	return (*PipelineViewportShadingRateImageStateCreateInfoNV)(ptr)
}

func marshalPipelineViewportShadingRateImageStateCreateInfoNV(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPipelineViewportShadingRateImageStateCreateInfoNV(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PipelineViewportShadingRateImageStateCreateInfoNV) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PhysicalDeviceShadingRateImageFeaturesNV struct {
	native C.VkPhysicalDeviceShadingRateImageFeaturesNV
}

// WrapPhysicalDeviceShadingRateImageFeaturesNV wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceShadingRateImageFeaturesNV(ptr unsafe.Pointer) *PhysicalDeviceShadingRateImageFeaturesNV {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceShadingRateImageFeaturesNV)(ptr)
}

func marshalPhysicalDeviceShadingRateImageFeaturesNV(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceShadingRateImageFeaturesNV(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceShadingRateImageFeaturesNV) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PhysicalDeviceShadingRateImagePropertiesNV struct {
	native C.VkPhysicalDeviceShadingRateImagePropertiesNV
}

// WrapPhysicalDeviceShadingRateImagePropertiesNV wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceShadingRateImagePropertiesNV(ptr unsafe.Pointer) *PhysicalDeviceShadingRateImagePropertiesNV {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceShadingRateImagePropertiesNV)(ptr)
}

func marshalPhysicalDeviceShadingRateImagePropertiesNV(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceShadingRateImagePropertiesNV(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceShadingRateImagePropertiesNV) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type CoarseSampleLocationNV struct {
	native C.VkCoarseSampleLocationNV
}

// WrapCoarseSampleLocationNV wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapCoarseSampleLocationNV(ptr unsafe.Pointer) *CoarseSampleLocationNV {
	if ptr == nil {
		return nil
	}

	return (*CoarseSampleLocationNV)(ptr)
}

func marshalCoarseSampleLocationNV(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapCoarseSampleLocationNV(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (c *CoarseSampleLocationNV) Native() unsafe.Pointer {
	return unsafe.Pointer(&c.native)
}

type CoarseSampleOrderCustomNV struct {
	native C.VkCoarseSampleOrderCustomNV
}

// WrapCoarseSampleOrderCustomNV wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapCoarseSampleOrderCustomNV(ptr unsafe.Pointer) *CoarseSampleOrderCustomNV {
	if ptr == nil {
		return nil
	}

	return (*CoarseSampleOrderCustomNV)(ptr)
}

func marshalCoarseSampleOrderCustomNV(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapCoarseSampleOrderCustomNV(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (c *CoarseSampleOrderCustomNV) Native() unsafe.Pointer {
	return unsafe.Pointer(&c.native)
}

type PipelineViewportCoarseSampleOrderStateCreateInfoNV struct {
	native C.VkPipelineViewportCoarseSampleOrderStateCreateInfoNV
}

// WrapPipelineViewportCoarseSampleOrderStateCreateInfoNV wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPipelineViewportCoarseSampleOrderStateCreateInfoNV(ptr unsafe.Pointer) *PipelineViewportCoarseSampleOrderStateCreateInfoNV {
	if ptr == nil {
		return nil
	}

	return (*PipelineViewportCoarseSampleOrderStateCreateInfoNV)(ptr)
}

func marshalPipelineViewportCoarseSampleOrderStateCreateInfoNV(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPipelineViewportCoarseSampleOrderStateCreateInfoNV(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PipelineViewportCoarseSampleOrderStateCreateInfoNV) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type AccelerationStructureNV struct {
	native C.VkAccelerationStructureNV
}

// WrapAccelerationStructureNV wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapAccelerationStructureNV(ptr unsafe.Pointer) *AccelerationStructureNV {
	if ptr == nil {
		return nil
	}

	return (*AccelerationStructureNV)(ptr)
}

func marshalAccelerationStructureNV(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapAccelerationStructureNV(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (a *AccelerationStructureNV) Native() unsafe.Pointer {
	return unsafe.Pointer(&a.native)
}

type RayTracingShaderGroupTypeNV struct {
	native C.VkRayTracingShaderGroupTypeNV
}

// WrapRayTracingShaderGroupTypeNV wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapRayTracingShaderGroupTypeNV(ptr unsafe.Pointer) *RayTracingShaderGroupTypeNV {
	if ptr == nil {
		return nil
	}

	return (*RayTracingShaderGroupTypeNV)(ptr)
}

func marshalRayTracingShaderGroupTypeNV(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapRayTracingShaderGroupTypeNV(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (r *RayTracingShaderGroupTypeNV) Native() unsafe.Pointer {
	return unsafe.Pointer(&r.native)
}

type GeometryTypeNV struct {
	native C.VkGeometryTypeNV
}

// WrapGeometryTypeNV wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapGeometryTypeNV(ptr unsafe.Pointer) *GeometryTypeNV {
	if ptr == nil {
		return nil
	}

	return (*GeometryTypeNV)(ptr)
}

func marshalGeometryTypeNV(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapGeometryTypeNV(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (g *GeometryTypeNV) Native() unsafe.Pointer {
	return unsafe.Pointer(&g.native)
}

type AccelerationStructureTypeNV struct {
	native C.VkAccelerationStructureTypeNV
}

// WrapAccelerationStructureTypeNV wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapAccelerationStructureTypeNV(ptr unsafe.Pointer) *AccelerationStructureTypeNV {
	if ptr == nil {
		return nil
	}

	return (*AccelerationStructureTypeNV)(ptr)
}

func marshalAccelerationStructureTypeNV(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapAccelerationStructureTypeNV(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (a *AccelerationStructureTypeNV) Native() unsafe.Pointer {
	return unsafe.Pointer(&a.native)
}

type CopyAccelerationStructureModeNV struct {
	native C.VkCopyAccelerationStructureModeNV
}

// WrapCopyAccelerationStructureModeNV wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapCopyAccelerationStructureModeNV(ptr unsafe.Pointer) *CopyAccelerationStructureModeNV {
	if ptr == nil {
		return nil
	}

	return (*CopyAccelerationStructureModeNV)(ptr)
}

func marshalCopyAccelerationStructureModeNV(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapCopyAccelerationStructureModeNV(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (c *CopyAccelerationStructureModeNV) Native() unsafe.Pointer {
	return unsafe.Pointer(&c.native)
}

type AccelerationStructureMemoryRequirementsTypeNV struct {
	native C.VkAccelerationStructureMemoryRequirementsTypeNV
}

// WrapAccelerationStructureMemoryRequirementsTypeNV wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapAccelerationStructureMemoryRequirementsTypeNV(ptr unsafe.Pointer) *AccelerationStructureMemoryRequirementsTypeNV {
	if ptr == nil {
		return nil
	}

	return (*AccelerationStructureMemoryRequirementsTypeNV)(ptr)
}

func marshalAccelerationStructureMemoryRequirementsTypeNV(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapAccelerationStructureMemoryRequirementsTypeNV(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (a *AccelerationStructureMemoryRequirementsTypeNV) Native() unsafe.Pointer {
	return unsafe.Pointer(&a.native)
}

type GeometryFlagBitsNV struct {
	native C.VkGeometryFlagBitsNV
}

// WrapGeometryFlagBitsNV wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapGeometryFlagBitsNV(ptr unsafe.Pointer) *GeometryFlagBitsNV {
	if ptr == nil {
		return nil
	}

	return (*GeometryFlagBitsNV)(ptr)
}

func marshalGeometryFlagBitsNV(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapGeometryFlagBitsNV(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (g *GeometryFlagBitsNV) Native() unsafe.Pointer {
	return unsafe.Pointer(&g.native)
}

type GeometryFlagsNV struct {
	native C.VkGeometryFlagsNV
}

// WrapGeometryFlagsNV wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapGeometryFlagsNV(ptr unsafe.Pointer) *GeometryFlagsNV {
	if ptr == nil {
		return nil
	}

	return (*GeometryFlagsNV)(ptr)
}

func marshalGeometryFlagsNV(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapGeometryFlagsNV(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (g *GeometryFlagsNV) Native() unsafe.Pointer {
	return unsafe.Pointer(&g.native)
}

type GeometryInstanceFlagBitsNV struct {
	native C.VkGeometryInstanceFlagBitsNV
}

// WrapGeometryInstanceFlagBitsNV wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapGeometryInstanceFlagBitsNV(ptr unsafe.Pointer) *GeometryInstanceFlagBitsNV {
	if ptr == nil {
		return nil
	}

	return (*GeometryInstanceFlagBitsNV)(ptr)
}

func marshalGeometryInstanceFlagBitsNV(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapGeometryInstanceFlagBitsNV(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (g *GeometryInstanceFlagBitsNV) Native() unsafe.Pointer {
	return unsafe.Pointer(&g.native)
}

type GeometryInstanceFlagsNV struct {
	native C.VkGeometryInstanceFlagsNV
}

// WrapGeometryInstanceFlagsNV wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapGeometryInstanceFlagsNV(ptr unsafe.Pointer) *GeometryInstanceFlagsNV {
	if ptr == nil {
		return nil
	}

	return (*GeometryInstanceFlagsNV)(ptr)
}

func marshalGeometryInstanceFlagsNV(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapGeometryInstanceFlagsNV(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (g *GeometryInstanceFlagsNV) Native() unsafe.Pointer {
	return unsafe.Pointer(&g.native)
}

type BuildAccelerationStructureFlagBitsNV struct {
	native C.VkBuildAccelerationStructureFlagBitsNV
}

// WrapBuildAccelerationStructureFlagBitsNV wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapBuildAccelerationStructureFlagBitsNV(ptr unsafe.Pointer) *BuildAccelerationStructureFlagBitsNV {
	if ptr == nil {
		return nil
	}

	return (*BuildAccelerationStructureFlagBitsNV)(ptr)
}

func marshalBuildAccelerationStructureFlagBitsNV(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapBuildAccelerationStructureFlagBitsNV(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (b *BuildAccelerationStructureFlagBitsNV) Native() unsafe.Pointer {
	return unsafe.Pointer(&b.native)
}

type BuildAccelerationStructureFlagsNV struct {
	native C.VkBuildAccelerationStructureFlagsNV
}

// WrapBuildAccelerationStructureFlagsNV wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapBuildAccelerationStructureFlagsNV(ptr unsafe.Pointer) *BuildAccelerationStructureFlagsNV {
	if ptr == nil {
		return nil
	}

	return (*BuildAccelerationStructureFlagsNV)(ptr)
}

func marshalBuildAccelerationStructureFlagsNV(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapBuildAccelerationStructureFlagsNV(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (b *BuildAccelerationStructureFlagsNV) Native() unsafe.Pointer {
	return unsafe.Pointer(&b.native)
}

type RayTracingShaderGroupCreateInfoNV struct {
	native C.VkRayTracingShaderGroupCreateInfoNV
}

// WrapRayTracingShaderGroupCreateInfoNV wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapRayTracingShaderGroupCreateInfoNV(ptr unsafe.Pointer) *RayTracingShaderGroupCreateInfoNV {
	if ptr == nil {
		return nil
	}

	return (*RayTracingShaderGroupCreateInfoNV)(ptr)
}

func marshalRayTracingShaderGroupCreateInfoNV(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapRayTracingShaderGroupCreateInfoNV(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (r *RayTracingShaderGroupCreateInfoNV) Native() unsafe.Pointer {
	return unsafe.Pointer(&r.native)
}

type RayTracingPipelineCreateInfoNV struct {
	native C.VkRayTracingPipelineCreateInfoNV
}

// WrapRayTracingPipelineCreateInfoNV wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapRayTracingPipelineCreateInfoNV(ptr unsafe.Pointer) *RayTracingPipelineCreateInfoNV {
	if ptr == nil {
		return nil
	}

	return (*RayTracingPipelineCreateInfoNV)(ptr)
}

func marshalRayTracingPipelineCreateInfoNV(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapRayTracingPipelineCreateInfoNV(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (r *RayTracingPipelineCreateInfoNV) Native() unsafe.Pointer {
	return unsafe.Pointer(&r.native)
}

type GeometryTrianglesNV struct {
	native C.VkGeometryTrianglesNV
}

// WrapGeometryTrianglesNV wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapGeometryTrianglesNV(ptr unsafe.Pointer) *GeometryTrianglesNV {
	if ptr == nil {
		return nil
	}

	return (*GeometryTrianglesNV)(ptr)
}

func marshalGeometryTrianglesNV(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapGeometryTrianglesNV(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (g *GeometryTrianglesNV) Native() unsafe.Pointer {
	return unsafe.Pointer(&g.native)
}

type GeometryAABBNV struct {
	native C.VkGeometryAABBNV
}

// WrapGeometryAABBNV wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapGeometryAABBNV(ptr unsafe.Pointer) *GeometryAABBNV {
	if ptr == nil {
		return nil
	}

	return (*GeometryAABBNV)(ptr)
}

func marshalGeometryAABBNV(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapGeometryAABBNV(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (g *GeometryAABBNV) Native() unsafe.Pointer {
	return unsafe.Pointer(&g.native)
}

type GeometryDataNV struct {
	native C.VkGeometryDataNV
}

// WrapGeometryDataNV wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapGeometryDataNV(ptr unsafe.Pointer) *GeometryDataNV {
	if ptr == nil {
		return nil
	}

	return (*GeometryDataNV)(ptr)
}

func marshalGeometryDataNV(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapGeometryDataNV(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (g *GeometryDataNV) Native() unsafe.Pointer {
	return unsafe.Pointer(&g.native)
}

type GeometryNV struct {
	native C.VkGeometryNV
}

// WrapGeometryNV wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapGeometryNV(ptr unsafe.Pointer) *GeometryNV {
	if ptr == nil {
		return nil
	}

	return (*GeometryNV)(ptr)
}

func marshalGeometryNV(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapGeometryNV(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (g *GeometryNV) Native() unsafe.Pointer {
	return unsafe.Pointer(&g.native)
}

type AccelerationStructureInfoNV struct {
	native C.VkAccelerationStructureInfoNV
}

// WrapAccelerationStructureInfoNV wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapAccelerationStructureInfoNV(ptr unsafe.Pointer) *AccelerationStructureInfoNV {
	if ptr == nil {
		return nil
	}

	return (*AccelerationStructureInfoNV)(ptr)
}

func marshalAccelerationStructureInfoNV(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapAccelerationStructureInfoNV(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (a *AccelerationStructureInfoNV) Native() unsafe.Pointer {
	return unsafe.Pointer(&a.native)
}

type AccelerationStructureCreateInfoNV struct {
	native C.VkAccelerationStructureCreateInfoNV
}

// WrapAccelerationStructureCreateInfoNV wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapAccelerationStructureCreateInfoNV(ptr unsafe.Pointer) *AccelerationStructureCreateInfoNV {
	if ptr == nil {
		return nil
	}

	return (*AccelerationStructureCreateInfoNV)(ptr)
}

func marshalAccelerationStructureCreateInfoNV(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapAccelerationStructureCreateInfoNV(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (a *AccelerationStructureCreateInfoNV) Native() unsafe.Pointer {
	return unsafe.Pointer(&a.native)
}

type BindAccelerationStructureMemoryInfoNV struct {
	native C.VkBindAccelerationStructureMemoryInfoNV
}

// WrapBindAccelerationStructureMemoryInfoNV wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapBindAccelerationStructureMemoryInfoNV(ptr unsafe.Pointer) *BindAccelerationStructureMemoryInfoNV {
	if ptr == nil {
		return nil
	}

	return (*BindAccelerationStructureMemoryInfoNV)(ptr)
}

func marshalBindAccelerationStructureMemoryInfoNV(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapBindAccelerationStructureMemoryInfoNV(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (b *BindAccelerationStructureMemoryInfoNV) Native() unsafe.Pointer {
	return unsafe.Pointer(&b.native)
}

type WriteDescriptorSetAccelerationStructureNV struct {
	native C.VkWriteDescriptorSetAccelerationStructureNV
}

// WrapWriteDescriptorSetAccelerationStructureNV wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapWriteDescriptorSetAccelerationStructureNV(ptr unsafe.Pointer) *WriteDescriptorSetAccelerationStructureNV {
	if ptr == nil {
		return nil
	}

	return (*WriteDescriptorSetAccelerationStructureNV)(ptr)
}

func marshalWriteDescriptorSetAccelerationStructureNV(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapWriteDescriptorSetAccelerationStructureNV(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (w *WriteDescriptorSetAccelerationStructureNV) Native() unsafe.Pointer {
	return unsafe.Pointer(&w.native)
}

type AccelerationStructureMemoryRequirementsInfoNV struct {
	native C.VkAccelerationStructureMemoryRequirementsInfoNV
}

// WrapAccelerationStructureMemoryRequirementsInfoNV wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapAccelerationStructureMemoryRequirementsInfoNV(ptr unsafe.Pointer) *AccelerationStructureMemoryRequirementsInfoNV {
	if ptr == nil {
		return nil
	}

	return (*AccelerationStructureMemoryRequirementsInfoNV)(ptr)
}

func marshalAccelerationStructureMemoryRequirementsInfoNV(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapAccelerationStructureMemoryRequirementsInfoNV(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (a *AccelerationStructureMemoryRequirementsInfoNV) Native() unsafe.Pointer {
	return unsafe.Pointer(&a.native)
}

type PhysicalDeviceRayTracingPropertiesNV struct {
	native C.VkPhysicalDeviceRayTracingPropertiesNV
}

// WrapPhysicalDeviceRayTracingPropertiesNV wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceRayTracingPropertiesNV(ptr unsafe.Pointer) *PhysicalDeviceRayTracingPropertiesNV {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceRayTracingPropertiesNV)(ptr)
}

func marshalPhysicalDeviceRayTracingPropertiesNV(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceRayTracingPropertiesNV(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceRayTracingPropertiesNV) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PhysicalDeviceRepresentativeFragmentTestFeaturesNV struct {
	native C.VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV
}

// WrapPhysicalDeviceRepresentativeFragmentTestFeaturesNV wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceRepresentativeFragmentTestFeaturesNV(ptr unsafe.Pointer) *PhysicalDeviceRepresentativeFragmentTestFeaturesNV {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceRepresentativeFragmentTestFeaturesNV)(ptr)
}

func marshalPhysicalDeviceRepresentativeFragmentTestFeaturesNV(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceRepresentativeFragmentTestFeaturesNV(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceRepresentativeFragmentTestFeaturesNV) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PipelineRepresentativeFragmentTestStateCreateInfoNV struct {
	native C.VkPipelineRepresentativeFragmentTestStateCreateInfoNV
}

// WrapPipelineRepresentativeFragmentTestStateCreateInfoNV wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPipelineRepresentativeFragmentTestStateCreateInfoNV(ptr unsafe.Pointer) *PipelineRepresentativeFragmentTestStateCreateInfoNV {
	if ptr == nil {
		return nil
	}

	return (*PipelineRepresentativeFragmentTestStateCreateInfoNV)(ptr)
}

func marshalPipelineRepresentativeFragmentTestStateCreateInfoNV(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPipelineRepresentativeFragmentTestStateCreateInfoNV(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PipelineRepresentativeFragmentTestStateCreateInfoNV) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PhysicalDeviceImageViewImageFormatInfoEXT struct {
	native C.VkPhysicalDeviceImageViewImageFormatInfoEXT
}

// WrapPhysicalDeviceImageViewImageFormatInfoEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceImageViewImageFormatInfoEXT(ptr unsafe.Pointer) *PhysicalDeviceImageViewImageFormatInfoEXT {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceImageViewImageFormatInfoEXT)(ptr)
}

func marshalPhysicalDeviceImageViewImageFormatInfoEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceImageViewImageFormatInfoEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceImageViewImageFormatInfoEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type FilterCubicImageViewImageFormatPropertiesEXT struct {
	native C.VkFilterCubicImageViewImageFormatPropertiesEXT
}

// WrapFilterCubicImageViewImageFormatPropertiesEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapFilterCubicImageViewImageFormatPropertiesEXT(ptr unsafe.Pointer) *FilterCubicImageViewImageFormatPropertiesEXT {
	if ptr == nil {
		return nil
	}

	return (*FilterCubicImageViewImageFormatPropertiesEXT)(ptr)
}

func marshalFilterCubicImageViewImageFormatPropertiesEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapFilterCubicImageViewImageFormatPropertiesEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (f *FilterCubicImageViewImageFormatPropertiesEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&f.native)
}

type QueueGlobalPriorityEXT struct {
	native C.VkQueueGlobalPriorityEXT
}

// WrapQueueGlobalPriorityEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapQueueGlobalPriorityEXT(ptr unsafe.Pointer) *QueueGlobalPriorityEXT {
	if ptr == nil {
		return nil
	}

	return (*QueueGlobalPriorityEXT)(ptr)
}

func marshalQueueGlobalPriorityEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapQueueGlobalPriorityEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (q *QueueGlobalPriorityEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&q.native)
}

type DeviceQueueGlobalPriorityCreateInfoEXT struct {
	native C.VkDeviceQueueGlobalPriorityCreateInfoEXT
}

// WrapDeviceQueueGlobalPriorityCreateInfoEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDeviceQueueGlobalPriorityCreateInfoEXT(ptr unsafe.Pointer) *DeviceQueueGlobalPriorityCreateInfoEXT {
	if ptr == nil {
		return nil
	}

	return (*DeviceQueueGlobalPriorityCreateInfoEXT)(ptr)
}

func marshalDeviceQueueGlobalPriorityCreateInfoEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDeviceQueueGlobalPriorityCreateInfoEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DeviceQueueGlobalPriorityCreateInfoEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type ImportMemoryHostPointerInfoEXT struct {
	native C.VkImportMemoryHostPointerInfoEXT
}

// WrapImportMemoryHostPointerInfoEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapImportMemoryHostPointerInfoEXT(ptr unsafe.Pointer) *ImportMemoryHostPointerInfoEXT {
	if ptr == nil {
		return nil
	}

	return (*ImportMemoryHostPointerInfoEXT)(ptr)
}

func marshalImportMemoryHostPointerInfoEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapImportMemoryHostPointerInfoEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (i *ImportMemoryHostPointerInfoEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&i.native)
}

type MemoryHostPointerPropertiesEXT struct {
	native C.VkMemoryHostPointerPropertiesEXT
}

// WrapMemoryHostPointerPropertiesEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapMemoryHostPointerPropertiesEXT(ptr unsafe.Pointer) *MemoryHostPointerPropertiesEXT {
	if ptr == nil {
		return nil
	}

	return (*MemoryHostPointerPropertiesEXT)(ptr)
}

func marshalMemoryHostPointerPropertiesEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapMemoryHostPointerPropertiesEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (m *MemoryHostPointerPropertiesEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&m.native)
}

type PhysicalDeviceExternalMemoryHostPropertiesEXT struct {
	native C.VkPhysicalDeviceExternalMemoryHostPropertiesEXT
}

// WrapPhysicalDeviceExternalMemoryHostPropertiesEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceExternalMemoryHostPropertiesEXT(ptr unsafe.Pointer) *PhysicalDeviceExternalMemoryHostPropertiesEXT {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceExternalMemoryHostPropertiesEXT)(ptr)
}

func marshalPhysicalDeviceExternalMemoryHostPropertiesEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceExternalMemoryHostPropertiesEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceExternalMemoryHostPropertiesEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type TimeDomainEXT struct {
	native C.VkTimeDomainEXT
}

// WrapTimeDomainEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapTimeDomainEXT(ptr unsafe.Pointer) *TimeDomainEXT {
	if ptr == nil {
		return nil
	}

	return (*TimeDomainEXT)(ptr)
}

func marshalTimeDomainEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapTimeDomainEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (t *TimeDomainEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&t.native)
}

type CalibratedTimestampInfoEXT struct {
	native C.VkCalibratedTimestampInfoEXT
}

// WrapCalibratedTimestampInfoEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapCalibratedTimestampInfoEXT(ptr unsafe.Pointer) *CalibratedTimestampInfoEXT {
	if ptr == nil {
		return nil
	}

	return (*CalibratedTimestampInfoEXT)(ptr)
}

func marshalCalibratedTimestampInfoEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapCalibratedTimestampInfoEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (c *CalibratedTimestampInfoEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&c.native)
}

type PhysicalDeviceShaderCorePropertiesAMD struct {
	native C.VkPhysicalDeviceShaderCorePropertiesAMD
}

// WrapPhysicalDeviceShaderCorePropertiesAMD wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceShaderCorePropertiesAMD(ptr unsafe.Pointer) *PhysicalDeviceShaderCorePropertiesAMD {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceShaderCorePropertiesAMD)(ptr)
}

func marshalPhysicalDeviceShaderCorePropertiesAMD(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceShaderCorePropertiesAMD(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceShaderCorePropertiesAMD) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type MemoryOverallocationBehaviorAMD struct {
	native C.VkMemoryOverallocationBehaviorAMD
}

// WrapMemoryOverallocationBehaviorAMD wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapMemoryOverallocationBehaviorAMD(ptr unsafe.Pointer) *MemoryOverallocationBehaviorAMD {
	if ptr == nil {
		return nil
	}

	return (*MemoryOverallocationBehaviorAMD)(ptr)
}

func marshalMemoryOverallocationBehaviorAMD(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapMemoryOverallocationBehaviorAMD(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (m *MemoryOverallocationBehaviorAMD) Native() unsafe.Pointer {
	return unsafe.Pointer(&m.native)
}

type DeviceMemoryOverallocationCreateInfoAMD struct {
	native C.VkDeviceMemoryOverallocationCreateInfoAMD
}

// WrapDeviceMemoryOverallocationCreateInfoAMD wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDeviceMemoryOverallocationCreateInfoAMD(ptr unsafe.Pointer) *DeviceMemoryOverallocationCreateInfoAMD {
	if ptr == nil {
		return nil
	}

	return (*DeviceMemoryOverallocationCreateInfoAMD)(ptr)
}

func marshalDeviceMemoryOverallocationCreateInfoAMD(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDeviceMemoryOverallocationCreateInfoAMD(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DeviceMemoryOverallocationCreateInfoAMD) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type PhysicalDeviceVertexAttributeDivisorPropertiesEXT struct {
	native C.VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT
}

// WrapPhysicalDeviceVertexAttributeDivisorPropertiesEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceVertexAttributeDivisorPropertiesEXT(ptr unsafe.Pointer) *PhysicalDeviceVertexAttributeDivisorPropertiesEXT {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceVertexAttributeDivisorPropertiesEXT)(ptr)
}

func marshalPhysicalDeviceVertexAttributeDivisorPropertiesEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceVertexAttributeDivisorPropertiesEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceVertexAttributeDivisorPropertiesEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type VertexInputBindingDivisorDescriptionEXT struct {
	native C.VkVertexInputBindingDivisorDescriptionEXT
}

// WrapVertexInputBindingDivisorDescriptionEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapVertexInputBindingDivisorDescriptionEXT(ptr unsafe.Pointer) *VertexInputBindingDivisorDescriptionEXT {
	if ptr == nil {
		return nil
	}

	return (*VertexInputBindingDivisorDescriptionEXT)(ptr)
}

func marshalVertexInputBindingDivisorDescriptionEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapVertexInputBindingDivisorDescriptionEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (v *VertexInputBindingDivisorDescriptionEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&v.native)
}

type PipelineVertexInputDivisorStateCreateInfoEXT struct {
	native C.VkPipelineVertexInputDivisorStateCreateInfoEXT
}

// WrapPipelineVertexInputDivisorStateCreateInfoEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPipelineVertexInputDivisorStateCreateInfoEXT(ptr unsafe.Pointer) *PipelineVertexInputDivisorStateCreateInfoEXT {
	if ptr == nil {
		return nil
	}

	return (*PipelineVertexInputDivisorStateCreateInfoEXT)(ptr)
}

func marshalPipelineVertexInputDivisorStateCreateInfoEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPipelineVertexInputDivisorStateCreateInfoEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PipelineVertexInputDivisorStateCreateInfoEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PhysicalDeviceVertexAttributeDivisorFeaturesEXT struct {
	native C.VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT
}

// WrapPhysicalDeviceVertexAttributeDivisorFeaturesEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceVertexAttributeDivisorFeaturesEXT(ptr unsafe.Pointer) *PhysicalDeviceVertexAttributeDivisorFeaturesEXT {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceVertexAttributeDivisorFeaturesEXT)(ptr)
}

func marshalPhysicalDeviceVertexAttributeDivisorFeaturesEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceVertexAttributeDivisorFeaturesEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceVertexAttributeDivisorFeaturesEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PipelineCreationFeedbackFlagBitsEXT struct {
	native C.VkPipelineCreationFeedbackFlagBitsEXT
}

// WrapPipelineCreationFeedbackFlagBitsEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPipelineCreationFeedbackFlagBitsEXT(ptr unsafe.Pointer) *PipelineCreationFeedbackFlagBitsEXT {
	if ptr == nil {
		return nil
	}

	return (*PipelineCreationFeedbackFlagBitsEXT)(ptr)
}

func marshalPipelineCreationFeedbackFlagBitsEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPipelineCreationFeedbackFlagBitsEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PipelineCreationFeedbackFlagBitsEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PipelineCreationFeedbackFlagsEXT struct {
	native C.VkPipelineCreationFeedbackFlagsEXT
}

// WrapPipelineCreationFeedbackFlagsEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPipelineCreationFeedbackFlagsEXT(ptr unsafe.Pointer) *PipelineCreationFeedbackFlagsEXT {
	if ptr == nil {
		return nil
	}

	return (*PipelineCreationFeedbackFlagsEXT)(ptr)
}

func marshalPipelineCreationFeedbackFlagsEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPipelineCreationFeedbackFlagsEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PipelineCreationFeedbackFlagsEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PipelineCreationFeedbackEXT struct {
	native C.VkPipelineCreationFeedbackEXT
}

// WrapPipelineCreationFeedbackEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPipelineCreationFeedbackEXT(ptr unsafe.Pointer) *PipelineCreationFeedbackEXT {
	if ptr == nil {
		return nil
	}

	return (*PipelineCreationFeedbackEXT)(ptr)
}

func marshalPipelineCreationFeedbackEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPipelineCreationFeedbackEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PipelineCreationFeedbackEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PipelineCreationFeedbackCreateInfoEXT struct {
	native C.VkPipelineCreationFeedbackCreateInfoEXT
}

// WrapPipelineCreationFeedbackCreateInfoEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPipelineCreationFeedbackCreateInfoEXT(ptr unsafe.Pointer) *PipelineCreationFeedbackCreateInfoEXT {
	if ptr == nil {
		return nil
	}

	return (*PipelineCreationFeedbackCreateInfoEXT)(ptr)
}

func marshalPipelineCreationFeedbackCreateInfoEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPipelineCreationFeedbackCreateInfoEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PipelineCreationFeedbackCreateInfoEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PhysicalDeviceComputeShaderDerivativesFeaturesNV struct {
	native C.VkPhysicalDeviceComputeShaderDerivativesFeaturesNV
}

// WrapPhysicalDeviceComputeShaderDerivativesFeaturesNV wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceComputeShaderDerivativesFeaturesNV(ptr unsafe.Pointer) *PhysicalDeviceComputeShaderDerivativesFeaturesNV {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceComputeShaderDerivativesFeaturesNV)(ptr)
}

func marshalPhysicalDeviceComputeShaderDerivativesFeaturesNV(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceComputeShaderDerivativesFeaturesNV(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceComputeShaderDerivativesFeaturesNV) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PhysicalDeviceMeshShaderFeaturesNV struct {
	native C.VkPhysicalDeviceMeshShaderFeaturesNV
}

// WrapPhysicalDeviceMeshShaderFeaturesNV wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceMeshShaderFeaturesNV(ptr unsafe.Pointer) *PhysicalDeviceMeshShaderFeaturesNV {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceMeshShaderFeaturesNV)(ptr)
}

func marshalPhysicalDeviceMeshShaderFeaturesNV(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceMeshShaderFeaturesNV(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceMeshShaderFeaturesNV) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PhysicalDeviceMeshShaderPropertiesNV struct {
	native C.VkPhysicalDeviceMeshShaderPropertiesNV
}

// WrapPhysicalDeviceMeshShaderPropertiesNV wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceMeshShaderPropertiesNV(ptr unsafe.Pointer) *PhysicalDeviceMeshShaderPropertiesNV {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceMeshShaderPropertiesNV)(ptr)
}

func marshalPhysicalDeviceMeshShaderPropertiesNV(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceMeshShaderPropertiesNV(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceMeshShaderPropertiesNV) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type DrawMeshTasksIndirectCommandNV struct {
	native C.VkDrawMeshTasksIndirectCommandNV
}

// WrapDrawMeshTasksIndirectCommandNV wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDrawMeshTasksIndirectCommandNV(ptr unsafe.Pointer) *DrawMeshTasksIndirectCommandNV {
	if ptr == nil {
		return nil
	}

	return (*DrawMeshTasksIndirectCommandNV)(ptr)
}

func marshalDrawMeshTasksIndirectCommandNV(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDrawMeshTasksIndirectCommandNV(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DrawMeshTasksIndirectCommandNV) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type PhysicalDeviceFragmentShaderBarycentricFeaturesNV struct {
	native C.VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV
}

// WrapPhysicalDeviceFragmentShaderBarycentricFeaturesNV wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceFragmentShaderBarycentricFeaturesNV(ptr unsafe.Pointer) *PhysicalDeviceFragmentShaderBarycentricFeaturesNV {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceFragmentShaderBarycentricFeaturesNV)(ptr)
}

func marshalPhysicalDeviceFragmentShaderBarycentricFeaturesNV(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceFragmentShaderBarycentricFeaturesNV(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceFragmentShaderBarycentricFeaturesNV) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PhysicalDeviceShaderImageFootprintFeaturesNV struct {
	native C.VkPhysicalDeviceShaderImageFootprintFeaturesNV
}

// WrapPhysicalDeviceShaderImageFootprintFeaturesNV wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceShaderImageFootprintFeaturesNV(ptr unsafe.Pointer) *PhysicalDeviceShaderImageFootprintFeaturesNV {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceShaderImageFootprintFeaturesNV)(ptr)
}

func marshalPhysicalDeviceShaderImageFootprintFeaturesNV(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceShaderImageFootprintFeaturesNV(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceShaderImageFootprintFeaturesNV) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PipelineViewportExclusiveScissorStateCreateInfoNV struct {
	native C.VkPipelineViewportExclusiveScissorStateCreateInfoNV
}

// WrapPipelineViewportExclusiveScissorStateCreateInfoNV wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPipelineViewportExclusiveScissorStateCreateInfoNV(ptr unsafe.Pointer) *PipelineViewportExclusiveScissorStateCreateInfoNV {
	if ptr == nil {
		return nil
	}

	return (*PipelineViewportExclusiveScissorStateCreateInfoNV)(ptr)
}

func marshalPipelineViewportExclusiveScissorStateCreateInfoNV(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPipelineViewportExclusiveScissorStateCreateInfoNV(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PipelineViewportExclusiveScissorStateCreateInfoNV) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PhysicalDeviceExclusiveScissorFeaturesNV struct {
	native C.VkPhysicalDeviceExclusiveScissorFeaturesNV
}

// WrapPhysicalDeviceExclusiveScissorFeaturesNV wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceExclusiveScissorFeaturesNV(ptr unsafe.Pointer) *PhysicalDeviceExclusiveScissorFeaturesNV {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceExclusiveScissorFeaturesNV)(ptr)
}

func marshalPhysicalDeviceExclusiveScissorFeaturesNV(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceExclusiveScissorFeaturesNV(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceExclusiveScissorFeaturesNV) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type QueueFamilyCheckpointPropertiesNV struct {
	native C.VkQueueFamilyCheckpointPropertiesNV
}

// WrapQueueFamilyCheckpointPropertiesNV wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapQueueFamilyCheckpointPropertiesNV(ptr unsafe.Pointer) *QueueFamilyCheckpointPropertiesNV {
	if ptr == nil {
		return nil
	}

	return (*QueueFamilyCheckpointPropertiesNV)(ptr)
}

func marshalQueueFamilyCheckpointPropertiesNV(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapQueueFamilyCheckpointPropertiesNV(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (q *QueueFamilyCheckpointPropertiesNV) Native() unsafe.Pointer {
	return unsafe.Pointer(&q.native)
}

type CheckpointDataNV struct {
	native C.VkCheckpointDataNV
}

// WrapCheckpointDataNV wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapCheckpointDataNV(ptr unsafe.Pointer) *CheckpointDataNV {
	if ptr == nil {
		return nil
	}

	return (*CheckpointDataNV)(ptr)
}

func marshalCheckpointDataNV(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapCheckpointDataNV(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (c *CheckpointDataNV) Native() unsafe.Pointer {
	return unsafe.Pointer(&c.native)
}

type PhysicalDevicePCIBusInfoPropertiesEXT struct {
	native C.VkPhysicalDevicePCIBusInfoPropertiesEXT
}

// WrapPhysicalDevicePCIBusInfoPropertiesEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDevicePCIBusInfoPropertiesEXT(ptr unsafe.Pointer) *PhysicalDevicePCIBusInfoPropertiesEXT {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDevicePCIBusInfoPropertiesEXT)(ptr)
}

func marshalPhysicalDevicePCIBusInfoPropertiesEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDevicePCIBusInfoPropertiesEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDevicePCIBusInfoPropertiesEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type DisplayNativeHdrSurfaceCapabilitiesAMD struct {
	native C.VkDisplayNativeHdrSurfaceCapabilitiesAMD
}

// WrapDisplayNativeHdrSurfaceCapabilitiesAMD wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDisplayNativeHdrSurfaceCapabilitiesAMD(ptr unsafe.Pointer) *DisplayNativeHdrSurfaceCapabilitiesAMD {
	if ptr == nil {
		return nil
	}

	return (*DisplayNativeHdrSurfaceCapabilitiesAMD)(ptr)
}

func marshalDisplayNativeHdrSurfaceCapabilitiesAMD(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDisplayNativeHdrSurfaceCapabilitiesAMD(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DisplayNativeHdrSurfaceCapabilitiesAMD) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type SwapchainDisplayNativeHdrCreateInfoAMD struct {
	native C.VkSwapchainDisplayNativeHdrCreateInfoAMD
}

// WrapSwapchainDisplayNativeHdrCreateInfoAMD wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSwapchainDisplayNativeHdrCreateInfoAMD(ptr unsafe.Pointer) *SwapchainDisplayNativeHdrCreateInfoAMD {
	if ptr == nil {
		return nil
	}

	return (*SwapchainDisplayNativeHdrCreateInfoAMD)(ptr)
}

func marshalSwapchainDisplayNativeHdrCreateInfoAMD(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSwapchainDisplayNativeHdrCreateInfoAMD(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *SwapchainDisplayNativeHdrCreateInfoAMD) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type PhysicalDeviceFragmentDensityMapFeaturesEXT struct {
	native C.VkPhysicalDeviceFragmentDensityMapFeaturesEXT
}

// WrapPhysicalDeviceFragmentDensityMapFeaturesEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceFragmentDensityMapFeaturesEXT(ptr unsafe.Pointer) *PhysicalDeviceFragmentDensityMapFeaturesEXT {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceFragmentDensityMapFeaturesEXT)(ptr)
}

func marshalPhysicalDeviceFragmentDensityMapFeaturesEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceFragmentDensityMapFeaturesEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceFragmentDensityMapFeaturesEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PhysicalDeviceFragmentDensityMapPropertiesEXT struct {
	native C.VkPhysicalDeviceFragmentDensityMapPropertiesEXT
}

// WrapPhysicalDeviceFragmentDensityMapPropertiesEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceFragmentDensityMapPropertiesEXT(ptr unsafe.Pointer) *PhysicalDeviceFragmentDensityMapPropertiesEXT {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceFragmentDensityMapPropertiesEXT)(ptr)
}

func marshalPhysicalDeviceFragmentDensityMapPropertiesEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceFragmentDensityMapPropertiesEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceFragmentDensityMapPropertiesEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type RenderPassFragmentDensityMapCreateInfoEXT struct {
	native C.VkRenderPassFragmentDensityMapCreateInfoEXT
}

// WrapRenderPassFragmentDensityMapCreateInfoEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapRenderPassFragmentDensityMapCreateInfoEXT(ptr unsafe.Pointer) *RenderPassFragmentDensityMapCreateInfoEXT {
	if ptr == nil {
		return nil
	}

	return (*RenderPassFragmentDensityMapCreateInfoEXT)(ptr)
}

func marshalRenderPassFragmentDensityMapCreateInfoEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapRenderPassFragmentDensityMapCreateInfoEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (r *RenderPassFragmentDensityMapCreateInfoEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&r.native)
}

type PhysicalDeviceScalarBlockLayoutFeaturesEXT struct {
	native C.VkPhysicalDeviceScalarBlockLayoutFeaturesEXT
}

// WrapPhysicalDeviceScalarBlockLayoutFeaturesEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceScalarBlockLayoutFeaturesEXT(ptr unsafe.Pointer) *PhysicalDeviceScalarBlockLayoutFeaturesEXT {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceScalarBlockLayoutFeaturesEXT)(ptr)
}

func marshalPhysicalDeviceScalarBlockLayoutFeaturesEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceScalarBlockLayoutFeaturesEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceScalarBlockLayoutFeaturesEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PhysicalDeviceMemoryBudgetPropertiesEXT struct {
	native C.VkPhysicalDeviceMemoryBudgetPropertiesEXT
}

// WrapPhysicalDeviceMemoryBudgetPropertiesEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceMemoryBudgetPropertiesEXT(ptr unsafe.Pointer) *PhysicalDeviceMemoryBudgetPropertiesEXT {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceMemoryBudgetPropertiesEXT)(ptr)
}

func marshalPhysicalDeviceMemoryBudgetPropertiesEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceMemoryBudgetPropertiesEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceMemoryBudgetPropertiesEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PhysicalDeviceMemoryPriorityFeaturesEXT struct {
	native C.VkPhysicalDeviceMemoryPriorityFeaturesEXT
}

// WrapPhysicalDeviceMemoryPriorityFeaturesEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceMemoryPriorityFeaturesEXT(ptr unsafe.Pointer) *PhysicalDeviceMemoryPriorityFeaturesEXT {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceMemoryPriorityFeaturesEXT)(ptr)
}

func marshalPhysicalDeviceMemoryPriorityFeaturesEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceMemoryPriorityFeaturesEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceMemoryPriorityFeaturesEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type MemoryPriorityAllocateInfoEXT struct {
	native C.VkMemoryPriorityAllocateInfoEXT
}

// WrapMemoryPriorityAllocateInfoEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapMemoryPriorityAllocateInfoEXT(ptr unsafe.Pointer) *MemoryPriorityAllocateInfoEXT {
	if ptr == nil {
		return nil
	}

	return (*MemoryPriorityAllocateInfoEXT)(ptr)
}

func marshalMemoryPriorityAllocateInfoEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapMemoryPriorityAllocateInfoEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (m *MemoryPriorityAllocateInfoEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&m.native)
}

type PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV struct {
	native C.VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV
}

// WrapPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV(ptr unsafe.Pointer) *PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV)(ptr)
}

func marshalPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type DeviceAddress struct {
	native C.VkDeviceAddress
}

// WrapDeviceAddress wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDeviceAddress(ptr unsafe.Pointer) *DeviceAddress {
	if ptr == nil {
		return nil
	}

	return (*DeviceAddress)(ptr)
}

func marshalDeviceAddress(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDeviceAddress(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *DeviceAddress) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type PhysicalDeviceBufferDeviceAddressFeaturesEXT struct {
	native C.VkPhysicalDeviceBufferDeviceAddressFeaturesEXT
}

// WrapPhysicalDeviceBufferDeviceAddressFeaturesEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceBufferDeviceAddressFeaturesEXT(ptr unsafe.Pointer) *PhysicalDeviceBufferDeviceAddressFeaturesEXT {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceBufferDeviceAddressFeaturesEXT)(ptr)
}

func marshalPhysicalDeviceBufferDeviceAddressFeaturesEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceBufferDeviceAddressFeaturesEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceBufferDeviceAddressFeaturesEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PhysicalDeviceBufferAddressFeaturesEXT struct {
	native C.VkPhysicalDeviceBufferAddressFeaturesEXT
}

// WrapPhysicalDeviceBufferAddressFeaturesEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceBufferAddressFeaturesEXT(ptr unsafe.Pointer) *PhysicalDeviceBufferAddressFeaturesEXT {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceBufferAddressFeaturesEXT)(ptr)
}

func marshalPhysicalDeviceBufferAddressFeaturesEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceBufferAddressFeaturesEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceBufferAddressFeaturesEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type BufferDeviceAddressInfoEXT struct {
	native C.VkBufferDeviceAddressInfoEXT
}

// WrapBufferDeviceAddressInfoEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapBufferDeviceAddressInfoEXT(ptr unsafe.Pointer) *BufferDeviceAddressInfoEXT {
	if ptr == nil {
		return nil
	}

	return (*BufferDeviceAddressInfoEXT)(ptr)
}

func marshalBufferDeviceAddressInfoEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapBufferDeviceAddressInfoEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (b *BufferDeviceAddressInfoEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&b.native)
}

type BufferDeviceAddressCreateInfoEXT struct {
	native C.VkBufferDeviceAddressCreateInfoEXT
}

// WrapBufferDeviceAddressCreateInfoEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapBufferDeviceAddressCreateInfoEXT(ptr unsafe.Pointer) *BufferDeviceAddressCreateInfoEXT {
	if ptr == nil {
		return nil
	}

	return (*BufferDeviceAddressCreateInfoEXT)(ptr)
}

func marshalBufferDeviceAddressCreateInfoEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapBufferDeviceAddressCreateInfoEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (b *BufferDeviceAddressCreateInfoEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&b.native)
}

type ImageStencilUsageCreateInfoEXT struct {
	native C.VkImageStencilUsageCreateInfoEXT
}

// WrapImageStencilUsageCreateInfoEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapImageStencilUsageCreateInfoEXT(ptr unsafe.Pointer) *ImageStencilUsageCreateInfoEXT {
	if ptr == nil {
		return nil
	}

	return (*ImageStencilUsageCreateInfoEXT)(ptr)
}

func marshalImageStencilUsageCreateInfoEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapImageStencilUsageCreateInfoEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (i *ImageStencilUsageCreateInfoEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&i.native)
}

type ValidationFeatureEnableEXT struct {
	native C.VkValidationFeatureEnableEXT
}

// WrapValidationFeatureEnableEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapValidationFeatureEnableEXT(ptr unsafe.Pointer) *ValidationFeatureEnableEXT {
	if ptr == nil {
		return nil
	}

	return (*ValidationFeatureEnableEXT)(ptr)
}

func marshalValidationFeatureEnableEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapValidationFeatureEnableEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (v *ValidationFeatureEnableEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&v.native)
}

type ValidationFeatureDisableEXT struct {
	native C.VkValidationFeatureDisableEXT
}

// WrapValidationFeatureDisableEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapValidationFeatureDisableEXT(ptr unsafe.Pointer) *ValidationFeatureDisableEXT {
	if ptr == nil {
		return nil
	}

	return (*ValidationFeatureDisableEXT)(ptr)
}

func marshalValidationFeatureDisableEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapValidationFeatureDisableEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (v *ValidationFeatureDisableEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&v.native)
}

type ValidationFeaturesEXT struct {
	native C.VkValidationFeaturesEXT
}

// WrapValidationFeaturesEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapValidationFeaturesEXT(ptr unsafe.Pointer) *ValidationFeaturesEXT {
	if ptr == nil {
		return nil
	}

	return (*ValidationFeaturesEXT)(ptr)
}

func marshalValidationFeaturesEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapValidationFeaturesEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (v *ValidationFeaturesEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&v.native)
}

type ComponentTypeNV struct {
	native C.VkComponentTypeNV
}

// WrapComponentTypeNV wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapComponentTypeNV(ptr unsafe.Pointer) *ComponentTypeNV {
	if ptr == nil {
		return nil
	}

	return (*ComponentTypeNV)(ptr)
}

func marshalComponentTypeNV(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapComponentTypeNV(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (c *ComponentTypeNV) Native() unsafe.Pointer {
	return unsafe.Pointer(&c.native)
}

type ScopeNV struct {
	native C.VkScopeNV
}

// WrapScopeNV wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapScopeNV(ptr unsafe.Pointer) *ScopeNV {
	if ptr == nil {
		return nil
	}

	return (*ScopeNV)(ptr)
}

func marshalScopeNV(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapScopeNV(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (s *ScopeNV) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type CooperativeMatrixPropertiesNV struct {
	native C.VkCooperativeMatrixPropertiesNV
}

// WrapCooperativeMatrixPropertiesNV wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapCooperativeMatrixPropertiesNV(ptr unsafe.Pointer) *CooperativeMatrixPropertiesNV {
	if ptr == nil {
		return nil
	}

	return (*CooperativeMatrixPropertiesNV)(ptr)
}

func marshalCooperativeMatrixPropertiesNV(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapCooperativeMatrixPropertiesNV(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (c *CooperativeMatrixPropertiesNV) Native() unsafe.Pointer {
	return unsafe.Pointer(&c.native)
}

type PhysicalDeviceCooperativeMatrixFeaturesNV struct {
	native C.VkPhysicalDeviceCooperativeMatrixFeaturesNV
}

// WrapPhysicalDeviceCooperativeMatrixFeaturesNV wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceCooperativeMatrixFeaturesNV(ptr unsafe.Pointer) *PhysicalDeviceCooperativeMatrixFeaturesNV {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceCooperativeMatrixFeaturesNV)(ptr)
}

func marshalPhysicalDeviceCooperativeMatrixFeaturesNV(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceCooperativeMatrixFeaturesNV(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceCooperativeMatrixFeaturesNV) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PhysicalDeviceCooperativeMatrixPropertiesNV struct {
	native C.VkPhysicalDeviceCooperativeMatrixPropertiesNV
}

// WrapPhysicalDeviceCooperativeMatrixPropertiesNV wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceCooperativeMatrixPropertiesNV(ptr unsafe.Pointer) *PhysicalDeviceCooperativeMatrixPropertiesNV {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceCooperativeMatrixPropertiesNV)(ptr)
}

func marshalPhysicalDeviceCooperativeMatrixPropertiesNV(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceCooperativeMatrixPropertiesNV(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceCooperativeMatrixPropertiesNV) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type CoverageReductionModeNV struct {
	native C.VkCoverageReductionModeNV
}

// WrapCoverageReductionModeNV wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapCoverageReductionModeNV(ptr unsafe.Pointer) *CoverageReductionModeNV {
	if ptr == nil {
		return nil
	}

	return (*CoverageReductionModeNV)(ptr)
}

func marshalCoverageReductionModeNV(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapCoverageReductionModeNV(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (c *CoverageReductionModeNV) Native() unsafe.Pointer {
	return unsafe.Pointer(&c.native)
}

type PipelineCoverageReductionStateCreateFlagsNV struct {
	native C.VkPipelineCoverageReductionStateCreateFlagsNV
}

// WrapPipelineCoverageReductionStateCreateFlagsNV wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPipelineCoverageReductionStateCreateFlagsNV(ptr unsafe.Pointer) *PipelineCoverageReductionStateCreateFlagsNV {
	if ptr == nil {
		return nil
	}

	return (*PipelineCoverageReductionStateCreateFlagsNV)(ptr)
}

func marshalPipelineCoverageReductionStateCreateFlagsNV(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPipelineCoverageReductionStateCreateFlagsNV(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PipelineCoverageReductionStateCreateFlagsNV) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PhysicalDeviceCoverageReductionModeFeaturesNV struct {
	native C.VkPhysicalDeviceCoverageReductionModeFeaturesNV
}

// WrapPhysicalDeviceCoverageReductionModeFeaturesNV wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceCoverageReductionModeFeaturesNV(ptr unsafe.Pointer) *PhysicalDeviceCoverageReductionModeFeaturesNV {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceCoverageReductionModeFeaturesNV)(ptr)
}

func marshalPhysicalDeviceCoverageReductionModeFeaturesNV(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceCoverageReductionModeFeaturesNV(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceCoverageReductionModeFeaturesNV) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type PipelineCoverageReductionStateCreateInfoNV struct {
	native C.VkPipelineCoverageReductionStateCreateInfoNV
}

// WrapPipelineCoverageReductionStateCreateInfoNV wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPipelineCoverageReductionStateCreateInfoNV(ptr unsafe.Pointer) *PipelineCoverageReductionStateCreateInfoNV {
	if ptr == nil {
		return nil
	}

	return (*PipelineCoverageReductionStateCreateInfoNV)(ptr)
}

func marshalPipelineCoverageReductionStateCreateInfoNV(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPipelineCoverageReductionStateCreateInfoNV(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PipelineCoverageReductionStateCreateInfoNV) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type FramebufferMixedSamplesCombinationNV struct {
	native C.VkFramebufferMixedSamplesCombinationNV
}

// WrapFramebufferMixedSamplesCombinationNV wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapFramebufferMixedSamplesCombinationNV(ptr unsafe.Pointer) *FramebufferMixedSamplesCombinationNV {
	if ptr == nil {
		return nil
	}

	return (*FramebufferMixedSamplesCombinationNV)(ptr)
}

func marshalFramebufferMixedSamplesCombinationNV(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapFramebufferMixedSamplesCombinationNV(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (f *FramebufferMixedSamplesCombinationNV) Native() unsafe.Pointer {
	return unsafe.Pointer(&f.native)
}

type PhysicalDeviceYcbcrImageArraysFeaturesEXT struct {
	native C.VkPhysicalDeviceYcbcrImageArraysFeaturesEXT
}

// WrapPhysicalDeviceYcbcrImageArraysFeaturesEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceYcbcrImageArraysFeaturesEXT(ptr unsafe.Pointer) *PhysicalDeviceYcbcrImageArraysFeaturesEXT {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceYcbcrImageArraysFeaturesEXT)(ptr)
}

func marshalPhysicalDeviceYcbcrImageArraysFeaturesEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceYcbcrImageArraysFeaturesEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceYcbcrImageArraysFeaturesEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

type HeadlessSurfaceCreateFlagsEXT struct {
	native C.VkHeadlessSurfaceCreateFlagsEXT
}

// WrapHeadlessSurfaceCreateFlagsEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapHeadlessSurfaceCreateFlagsEXT(ptr unsafe.Pointer) *HeadlessSurfaceCreateFlagsEXT {
	if ptr == nil {
		return nil
	}

	return (*HeadlessSurfaceCreateFlagsEXT)(ptr)
}

func marshalHeadlessSurfaceCreateFlagsEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapHeadlessSurfaceCreateFlagsEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (h *HeadlessSurfaceCreateFlagsEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&h.native)
}

type HeadlessSurfaceCreateInfoEXT struct {
	native C.VkHeadlessSurfaceCreateInfoEXT
}

// WrapHeadlessSurfaceCreateInfoEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapHeadlessSurfaceCreateInfoEXT(ptr unsafe.Pointer) *HeadlessSurfaceCreateInfoEXT {
	if ptr == nil {
		return nil
	}

	return (*HeadlessSurfaceCreateInfoEXT)(ptr)
}

func marshalHeadlessSurfaceCreateInfoEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapHeadlessSurfaceCreateInfoEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (h *HeadlessSurfaceCreateInfoEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&h.native)
}

type PhysicalDeviceHostQueryResetFeaturesEXT struct {
	native C.VkPhysicalDeviceHostQueryResetFeaturesEXT
}

// WrapPhysicalDeviceHostQueryResetFeaturesEXT wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPhysicalDeviceHostQueryResetFeaturesEXT(ptr unsafe.Pointer) *PhysicalDeviceHostQueryResetFeaturesEXT {
	if ptr == nil {
		return nil
	}

	return (*PhysicalDeviceHostQueryResetFeaturesEXT)(ptr)
}

func marshalPhysicalDeviceHostQueryResetFeaturesEXT(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPhysicalDeviceHostQueryResetFeaturesEXT(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *PhysicalDeviceHostQueryResetFeaturesEXT) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}
