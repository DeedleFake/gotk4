// Code generated by girgen. DO NOT EDIT.

package gdkwayland

import (
	"github.com/diamondburned/gotk4/internal/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4-wayland
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gdk/wayland/gdkwayland.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gdk_wayland_surface_get_type()), F: marshalWaylandSurface},
	})
}

// WaylandSurface: the Wayland implementation of `GdkSurface`.
//
// Beyond the [class@Gdk.Surface] API, the Wayland implementation offers access
// to the Wayland `wl_surface` object with
// [method@GdkWayland.WaylandSurface.get_wl_surface].
type WaylandSurface interface {
	gdk.Surface

	// WlSurface returns the Wayland `wl_surface` of a `GdkSurface`.
	WlSurface() interface{}
}

// waylandSurface implements the WaylandSurface interface.
type waylandSurface struct {
	gdk.Surface
}

var _ WaylandSurface = (*waylandSurface)(nil)

// WrapWaylandSurface wraps a GObject to the right type. It is
// primarily used internally.
func WrapWaylandSurface(obj *externglib.Object) WaylandSurface {
	return WaylandSurface{
		gdk.Surface: gdk.WrapSurface(obj),
	}
}

func marshalWaylandSurface(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapWaylandSurface(obj), nil
}

// WlSurface returns the Wayland `wl_surface` of a `GdkSurface`.
func (s waylandSurface) WlSurface() interface{} {
	var arg0 *C.GdkSurface

	arg0 = (*C.GdkSurface)(s.Native())

	ret := C.gdk_wayland_surface_get_wl_surface(arg0)

	var ret0 interface{}

	ret0 = box.Get(uintptr(ret)).(interface{})

	return ret0
}
