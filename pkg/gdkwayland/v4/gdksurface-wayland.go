// Code generated by girgen. DO NOT EDIT.

package gdkwayland

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/gdk/v4"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4-wayland gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <gdk/wayland/gdkwayland.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gdk_wayland_popup_get_type()), F: marshalWaylandPopuper},
		{T: externglib.Type(C.gdk_wayland_surface_get_type()), F: marshalWaylandSurfacer},
		{T: externglib.Type(C.gdk_wayland_toplevel_get_type()), F: marshalWaylandTopleveler},
	})
}

// WaylandPopuper describes WaylandPopup's methods.
type WaylandPopuper interface {
	privateWaylandPopup()
}

// WaylandPopup: wayland implementation of `GdkPopup`.
type WaylandPopup struct {
	WaylandSurface
}

var (
	_ WaylandPopuper  = (*WaylandPopup)(nil)
	_ gextras.Nativer = (*WaylandPopup)(nil)
)

func wrapWaylandPopup(obj *externglib.Object) *WaylandPopup {
	return &WaylandPopup{
		WaylandSurface: WaylandSurface{
			Surface: gdk.Surface{
				Object: obj,
			},
		},
	}
}

func marshalWaylandPopuper(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapWaylandPopup(obj), nil
}

func (*WaylandPopup) privateWaylandPopup() {}

// WaylandSurfacer describes WaylandSurface's methods.
type WaylandSurfacer interface {
	privateWaylandSurface()
}

// WaylandSurface: wayland implementation of `GdkSurface`.
//
// Beyond the [class@Gdk.Surface] API, the Wayland implementation offers access
// to the Wayland `wl_surface` object with
// [method@GdkWayland.WaylandSurface.get_wl_surface].
type WaylandSurface struct {
	gdk.Surface
}

var (
	_ WaylandSurfacer = (*WaylandSurface)(nil)
	_ gextras.Nativer = (*WaylandSurface)(nil)
)

func wrapWaylandSurface(obj *externglib.Object) *WaylandSurface {
	return &WaylandSurface{
		Surface: gdk.Surface{
			Object: obj,
		},
	}
}

func marshalWaylandSurfacer(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapWaylandSurface(obj), nil
}

func (*WaylandSurface) privateWaylandSurface() {}

// WaylandTopleveler describes WaylandToplevel's methods.
type WaylandTopleveler interface {
	// SetApplicationID sets the application id on a `GdkToplevel`.
	SetApplicationID(applicationId string)
	// SetTransientForExported marks @toplevel as transient for the surface to
	// which the given @parent_handle_str refers.
	SetTransientForExported(parentHandleStr string) bool
	// UnexportHandle destroys the handle that was obtained with
	// gdk_wayland_toplevel_export_handle().
	UnexportHandle()
}

// WaylandToplevel: wayland implementation of `GdkToplevel`.
//
// Beyond the [interface@Gdk.Toplevel] API, the Wayland implementation has API
// to set up cross-process parent-child relationships between surfaces with
// [method@GdkWayland.WaylandToplevel.export_handle] and
// [method@GdkWayland.WaylandToplevel.set_transient_for_exported].
type WaylandToplevel struct {
	WaylandSurface
}

var (
	_ WaylandTopleveler = (*WaylandToplevel)(nil)
	_ gextras.Nativer   = (*WaylandToplevel)(nil)
)

func wrapWaylandToplevel(obj *externglib.Object) *WaylandToplevel {
	return &WaylandToplevel{
		WaylandSurface: WaylandSurface{
			Surface: gdk.Surface{
				Object: obj,
			},
		},
	}
}

func marshalWaylandTopleveler(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapWaylandToplevel(obj), nil
}

// SetApplicationID sets the application id on a `GdkToplevel`.
func (toplevel *WaylandToplevel) SetApplicationID(applicationId string) {
	var _arg0 *C.GdkToplevel // out
	var _arg1 *C.char        // out

	_arg0 = (*C.GdkToplevel)(unsafe.Pointer(toplevel.Native()))
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(applicationId)))

	C.gdk_wayland_toplevel_set_application_id(_arg0, _arg1)
}

// SetTransientForExported marks @toplevel as transient for the surface to which
// the given @parent_handle_str refers.
//
// Typically, the handle will originate from a
// [method@GdkWayland.WaylandToplevel.export_handle] call in another process.
//
// Note that this API depends on an unstable Wayland protocol, and thus may
// require changes in the future.
func (toplevel *WaylandToplevel) SetTransientForExported(parentHandleStr string) bool {
	var _arg0 *C.GdkToplevel // out
	var _arg1 *C.char        // out
	var _cret C.gboolean     // in

	_arg0 = (*C.GdkToplevel)(unsafe.Pointer(toplevel.Native()))
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(parentHandleStr)))

	_cret = C.gdk_wayland_toplevel_set_transient_for_exported(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// UnexportHandle destroys the handle that was obtained with
// gdk_wayland_toplevel_export_handle().
//
// It is an error to call this function on a surface that does not have a
// handle.
//
// Note that this API depends on an unstable Wayland protocol, and thus may
// require changes in the future.
func (toplevel *WaylandToplevel) UnexportHandle() {
	var _arg0 *C.GdkToplevel // out

	_arg0 = (*C.GdkToplevel)(unsafe.Pointer(toplevel.Native()))

	C.gdk_wayland_toplevel_unexport_handle(_arg0)
}
