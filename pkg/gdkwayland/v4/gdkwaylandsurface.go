// Code generated by girgen. DO NOT EDIT.

package gdkwayland

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/box"
	"github.com/diamondburned/gotk4/internal/gextras"
)

// #cgo pkg-config: gtk4-wayland
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <gdk/wayland/gdkwayland.h>
//
// extern void gotk4_WaylandToplevelExported(GdkToplevel* _0, const char* _1, gpointer _2);
import "C"

// WaylandToplevelExported: callback that gets called when the handle for a
// surface has been obtained from the Wayland compositor.
//
// This callback is used in [method@GdkWayland.WaylandToplevel.export_handle].
//
// The @handle can be passed to other processes, for the purpose of marking
// surfaces as transient for out-of-process surfaces.
type WaylandToplevelExported func(toplevel WaylandToplevel, handle string)

//export gotk4_WaylandToplevelExported
func gotk4_WaylandToplevelExported(arg0 *C.GdkToplevel, arg1 *C.char, arg2 C.gpointer) {
	v := box.Get(uintptr(arg2))
	if v == nil {
		panic(`callback not found`)
	}

	var toplevel WaylandToplevel
	var handle string

	toplevel = gextras.CastObject(externglib.Take(unsafe.Pointer(arg0.Native()))).(WaylandToplevel)

	handle = C.GoString(arg1)

	v.(WaylandToplevelExported)(toplevel, handle)
}
