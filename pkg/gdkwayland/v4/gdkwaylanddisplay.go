// Code generated by girgen. DO NOT EDIT.

package gdkwayland

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/gdk/v4"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4-wayland gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <gdk/wayland/gdkwayland.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gdk_wayland_display_get_type()), F: marshalWaylandDisplay},
	})
}

// WaylandDisplay: the Wayland implementation of `GdkDisplay`.
//
// Beyond the regular [class@Gdk.Display] API, the Wayland implementation
// provides access to Wayland objects such as the `wl_display` with
// [method@GdkWayland.WaylandDisplay.get_wl_display], the `wl_compositor` with
// [method@GdkWayland.WaylandDisplay.get_wl_compositor].
//
// You can find out what Wayland globals are supported by a display with
// [method@GdkWayland.WaylandDisplay.query_registry].
type WaylandDisplay interface {
	gextras.Objector

	// AsDisplay casts the class to the gdk.Display interface.
	AsDisplay() gdk.Display

	// Beep emits a short beep on @display
	//
	// This method is inherited from gdk.Display
	Beep()
	// Close closes the connection to the windowing system for the given
	// display.
	//
	// This cleans up associated resources.
	//
	// This method is inherited from gdk.Display
	Close()
	// DeviceIsGrabbed returns true if there is an ongoing grab on @device for
	// @display.
	//
	// This method is inherited from gdk.Display
	DeviceIsGrabbed(device gdk.Device) bool
	// Flush flushes any requests queued for the windowing system.
	//
	// This happens automatically when the main loop blocks waiting for new
	// events, but if your application is drawing without returning control to
	// the main loop, you may need to call this function explicitly. A common
	// case where this function needs to be called is when an application is
	// executing drawing commands from a thread other than the thread where the
	// main loop is running.
	//
	// This is most useful for X11. On windowing systems where requests are
	// handled synchronously, this function will do nothing.
	//
	// This method is inherited from gdk.Display
	Flush()
	// GetAppLaunchContext returns a `GdkAppLaunchContext` suitable for
	// launching applications on the given display.
	//
	// This method is inherited from gdk.Display
	GetAppLaunchContext() gdk.AppLaunchContext
	// GetClipboard gets the clipboard used for copy/paste operations.
	//
	// This method is inherited from gdk.Display
	GetClipboard() gdk.Clipboard
	// GetDefaultSeat returns the default `GdkSeat` for this display.
	//
	// Note that a display may not have a seat. In this case, this function will
	// return nil.
	//
	// This method is inherited from gdk.Display
	GetDefaultSeat() gdk.Seat
	// GetMonitorAtSurface gets the monitor in which the largest area of
	// @surface resides.
	//
	// Returns a monitor close to @surface if it is outside of all monitors.
	//
	// This method is inherited from gdk.Display
	GetMonitorAtSurface(surface gdk.Surface) gdk.Monitor
	// GetName gets the name of the display.
	//
	// This method is inherited from gdk.Display
	GetName() string
	// GetPrimaryClipboard gets the clipboard used for the primary selection.
	//
	// On backends where the primary clipboard is not supported natively, GDK
	// emulates this clipboard locally.
	//
	// This method is inherited from gdk.Display
	GetPrimaryClipboard() gdk.Clipboard
	// GetSetting retrieves a desktop-wide setting such as double-click time for
	// the @display.
	//
	// This method is inherited from gdk.Display
	GetSetting(name string, value externglib.Value) bool
	// GetStartupNotificationID gets the startup notification ID for a Wayland
	// display, or nil if no ID has been defined.
	//
	// This method is inherited from gdk.Display
	GetStartupNotificationID() string
	// IsClosed finds out if the display has been closed.
	//
	// This method is inherited from gdk.Display
	IsClosed() bool
	// IsComposited returns whether surfaces can reasonably be expected to have
	// their alpha channel drawn correctly on the screen.
	//
	// Check [method@Gdk.Display.is_rgba] for whether the display supports an
	// alpha channel.
	//
	// On X11 this function returns whether a compositing manager is compositing
	// on @display.
	//
	// On modern displays, this value is always true.
	//
	// This method is inherited from gdk.Display
	IsComposited() bool
	// IsRGBA returns whether surfaces on this @display are created with an
	// alpha channel.
	//
	// Even if a true is returned, it is possible that the surface’s alpha
	// channel won’t be honored when displaying the surface on the screen: in
	// particular, for X an appropriate windowing manager and compositing
	// manager must be running to provide appropriate display. Use
	// [method@Gdk.Display.is_composited] to check if that is the case.
	//
	// On modern displays, this value is always true.
	//
	// This method is inherited from gdk.Display
	IsRGBA() bool
	// MapKeycode returns the keyvals bound to @keycode.
	//
	// The Nth `GdkKeymapKey` in @keys is bound to the Nth keyval in @keyvals.
	//
	// When a keycode is pressed by the user, the keyval from this list of
	// entries is selected by considering the effective keyboard group and
	// level.
	//
	// Free the returned arrays with g_free().
	//
	// This method is inherited from gdk.Display
	MapKeycode(keycode uint) ([]gdk.KeymapKey, []uint, bool)
	// MapKeyval obtains a list of keycode/group/level combinations that will
	// generate @keyval.
	//
	// Groups and levels are two kinds of keyboard mode; in general, the level
	// determines whether the top or bottom symbol on a key is used, and the
	// group determines whether the left or right symbol is used.
	//
	// On US keyboards, the shift key changes the keyboard level, and there are
	// no groups. A group switch key might convert a keyboard between Hebrew to
	// English modes, for example.
	//
	// `GdkEventKey` contains a group field that indicates the active keyboard
	// group. The level is computed from the modifier mask.
	//
	// The returned array should be freed with g_free().
	//
	// This method is inherited from gdk.Display
	MapKeyval(keyval uint) ([]gdk.KeymapKey, bool)
	// NotifyStartupComplete indicates to the GUI environment that the
	// application has finished loading, using a given identifier.
	//
	// GTK will call this function automatically for [class@Gtk.Window] with
	// custom startup-notification identifier unless
	// [method@Gtk.Window.set_auto_startup_notification] is called to disable
	// that feature.
	//
	// This method is inherited from gdk.Display
	NotifyStartupComplete(startupId string)
	// PutEvent appends the given event onto the front of the event queue for
	// @display.
	//
	// This function is only useful in very special situations and should not be
	// used by applications.
	//
	// This method is inherited from gdk.Display
	PutEvent(event gdk.Event)
	// SupportsInputShapes returns true if the display supports input shapes.
	//
	// This means that [method@Gdk.Surface.set_input_region] can be used to
	// modify the input shape of surfaces on @display.
	//
	// On modern displays, this value is always true.
	//
	// This method is inherited from gdk.Display
	SupportsInputShapes() bool
	// Sync flushes any requests queued for the windowing system and waits until
	// all requests have been handled.
	//
	// This is often used for making sure that the display is synchronized with
	// the current state of the program. Calling [method@Gdk.Display.sync]
	// before [method@GdkX11.Display.error_trap_pop] makes sure that any errors
	// generated from earlier requests are handled before the error trap is
	// removed.
	//
	// This is most useful for X11. On windowing systems where requests are
	// handled synchronously, this function will do nothing.
	//
	// This method is inherited from gdk.Display
	Sync()
	// TranslateKey translates the contents of a `GdkEventKey` into a keyval,
	// effective group, and level.
	//
	// Modifiers that affected the translation and are thus unavailable for
	// application use are returned in @consumed_modifiers.
	//
	// The @effective_group is the group that was actually used for the
	// translation; some keys such as Enter are not affected by the active
	// keyboard group. The @level is derived from @state.
	//
	// @consumed_modifiers gives modifiers that should be masked out from @state
	// when comparing this key press to a keyboard shortcut. For instance, on a
	// US keyboard, the `plus` symbol is shifted, so when comparing a key press
	// to a `<Control>plus` accelerator `<Shift>` should be masked out.
	//
	// This function should rarely be needed, since `GdkEventKey` already
	// contains the translated keyval. It is exported for the benefit of
	// virtualized test environments.
	//
	// This method is inherited from gdk.Display
	TranslateKey(keycode uint, state gdk.ModifierType, group int) (keyval uint, effectiveGroup int, level int, consumed gdk.ModifierType, ok bool)

	// StartupNotificationID gets the startup notification ID for a Wayland
	// display, or nil if no ID has been defined.
	StartupNotificationID() string
	// QueryRegistry returns true if the the interface was found in the display
	// `wl_registry.global` handler.
	QueryRegistry(global string) bool
	// SetCursorTheme sets the cursor theme for the given @display.
	SetCursorTheme(name string, size int)
	// SetStartupNotificationID sets the startup notification ID for a display.
	//
	// This is usually taken from the value of the `DESKTOP_STARTUP_ID`
	// environment variable, but in some cases (such as the application not
	// being launched using exec()) it can come from other sources.
	//
	// The startup ID is also what is used to signal that the startup is
	// complete (for example, when opening a window or when calling
	// [method@Gdk.Display.notify_startup_complete]).
	SetStartupNotificationID(startupId string)
}

// waylandDisplay implements the WaylandDisplay interface.
type waylandDisplay struct {
	*externglib.Object
}

var _ WaylandDisplay = (*waylandDisplay)(nil)

// WrapWaylandDisplay wraps a GObject to a type that implements
// interface WaylandDisplay. It is primarily used internally.
func WrapWaylandDisplay(obj *externglib.Object) WaylandDisplay {
	return waylandDisplay{obj}
}

func marshalWaylandDisplay(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapWaylandDisplay(obj), nil
}

func (w waylandDisplay) AsDisplay() gdk.Display {
	return gdk.WrapDisplay(gextras.InternObject(w))
}

func (d waylandDisplay) Beep() {
	gdk.WrapDisplay(gextras.InternObject(d)).Beep()
}

func (d waylandDisplay) Close() {
	gdk.WrapDisplay(gextras.InternObject(d)).Close()
}

func (d waylandDisplay) DeviceIsGrabbed(device gdk.Device) bool {
	return gdk.WrapDisplay(gextras.InternObject(d)).DeviceIsGrabbed(device)
}

func (d waylandDisplay) Flush() {
	gdk.WrapDisplay(gextras.InternObject(d)).Flush()
}

func (d waylandDisplay) GetAppLaunchContext() gdk.AppLaunchContext {
	return gdk.WrapDisplay(gextras.InternObject(d)).GetAppLaunchContext()
}

func (d waylandDisplay) GetClipboard() gdk.Clipboard {
	return gdk.WrapDisplay(gextras.InternObject(d)).GetClipboard()
}

func (d waylandDisplay) GetDefaultSeat() gdk.Seat {
	return gdk.WrapDisplay(gextras.InternObject(d)).GetDefaultSeat()
}

func (d waylandDisplay) GetMonitorAtSurface(surface gdk.Surface) gdk.Monitor {
	return gdk.WrapDisplay(gextras.InternObject(d)).GetMonitorAtSurface(surface)
}

func (d waylandDisplay) GetName() string {
	return gdk.WrapDisplay(gextras.InternObject(d)).GetName()
}

func (d waylandDisplay) GetPrimaryClipboard() gdk.Clipboard {
	return gdk.WrapDisplay(gextras.InternObject(d)).GetPrimaryClipboard()
}

func (d waylandDisplay) GetSetting(name string, value externglib.Value) bool {
	return gdk.WrapDisplay(gextras.InternObject(d)).GetSetting(name, value)
}

func (d waylandDisplay) GetStartupNotificationID() string {
	return gdk.WrapDisplay(gextras.InternObject(d)).GetStartupNotificationID()
}

func (d waylandDisplay) IsClosed() bool {
	return gdk.WrapDisplay(gextras.InternObject(d)).IsClosed()
}

func (d waylandDisplay) IsComposited() bool {
	return gdk.WrapDisplay(gextras.InternObject(d)).IsComposited()
}

func (d waylandDisplay) IsRGBA() bool {
	return gdk.WrapDisplay(gextras.InternObject(d)).IsRGBA()
}

func (d waylandDisplay) MapKeycode(keycode uint) ([]gdk.KeymapKey, []uint, bool) {
	return gdk.WrapDisplay(gextras.InternObject(d)).MapKeycode(keycode)
}

func (d waylandDisplay) MapKeyval(keyval uint) ([]gdk.KeymapKey, bool) {
	return gdk.WrapDisplay(gextras.InternObject(d)).MapKeyval(keyval)
}

func (d waylandDisplay) NotifyStartupComplete(startupId string) {
	gdk.WrapDisplay(gextras.InternObject(d)).NotifyStartupComplete(startupId)
}

func (d waylandDisplay) PutEvent(event gdk.Event) {
	gdk.WrapDisplay(gextras.InternObject(d)).PutEvent(event)
}

func (d waylandDisplay) SupportsInputShapes() bool {
	return gdk.WrapDisplay(gextras.InternObject(d)).SupportsInputShapes()
}

func (d waylandDisplay) Sync() {
	gdk.WrapDisplay(gextras.InternObject(d)).Sync()
}

func (d waylandDisplay) TranslateKey(keycode uint, state gdk.ModifierType, group int) (keyval uint, effectiveGroup int, level int, consumed gdk.ModifierType, ok bool) {
	return gdk.WrapDisplay(gextras.InternObject(d)).TranslateKey(keycode, state, group)
}

func (d waylandDisplay) StartupNotificationID() string {
	var _arg0 *C.GdkDisplay // out
	var _cret *C.char       // in

	_arg0 = (*C.GdkDisplay)(unsafe.Pointer(d.Native()))

	_cret = C.gdk_wayland_display_get_startup_notification_id(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

func (d waylandDisplay) QueryRegistry(global string) bool {
	var _arg0 *C.GdkDisplay // out
	var _arg1 *C.char       // out
	var _cret C.gboolean    // in

	_arg0 = (*C.GdkDisplay)(unsafe.Pointer(d.Native()))
	_arg1 = (*C.char)(C.CString(global))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gdk_wayland_display_query_registry(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (d waylandDisplay) SetCursorTheme(name string, size int) {
	var _arg0 *C.GdkDisplay // out
	var _arg1 *C.char       // out
	var _arg2 C.int         // out

	_arg0 = (*C.GdkDisplay)(unsafe.Pointer(d.Native()))
	_arg1 = (*C.char)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.int(size)

	C.gdk_wayland_display_set_cursor_theme(_arg0, _arg1, _arg2)
}

func (d waylandDisplay) SetStartupNotificationID(startupId string) {
	var _arg0 *C.GdkDisplay // out
	var _arg1 *C.char       // out

	_arg0 = (*C.GdkDisplay)(unsafe.Pointer(d.Native()))
	_arg1 = (*C.char)(C.CString(startupId))
	defer C.free(unsafe.Pointer(_arg1))

	C.gdk_wayland_display_set_startup_notification_id(_arg0, _arg1)
}
