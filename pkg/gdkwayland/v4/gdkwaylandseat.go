// Code generated by girgen. DO NOT EDIT.

package gdkwayland

import (
	"github.com/diamondburned/gotk4/internal/box"
	"github.com/diamondburned/gotk4/internal/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4-wayland
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gdk/wayland/gdkwayland.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gdk_wayland_seat_get_type()), F: marshalWaylandSeat},
	})
}

// WaylandSeat: the Wayland implementation of `GdkSeat`.
//
// Beyond the regular [class@Gdk.Seat] API, the Wayland implementation provides
// access to the Wayland `wl_seat` object with
// [method@GdkWayland.WaylandSeat.get_wl_seat].
type WaylandSeat interface {
	gdk.Seat

	// WlSeat returns the Wayland `wl_seat` of a `GdkSeat`.
	WlSeat() interface{}
}

// waylandSeat implements the WaylandSeat interface.
type waylandSeat struct {
	gdk.Seat
}

var _ WaylandSeat = (*waylandSeat)(nil)

// WrapWaylandSeat wraps a GObject to the right type. It is
// primarily used internally.
func WrapWaylandSeat(obj *externglib.Object) WaylandSeat {
	return WaylandSeat{
		gdk.Seat: gdk.WrapSeat(obj),
	}
}

func marshalWaylandSeat(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapWaylandSeat(obj), nil
}

// WlSeat returns the Wayland `wl_seat` of a `GdkSeat`.
func (s waylandSeat) WlSeat() interface{} {
	var arg0 *C.GdkSeat

	arg0 = (*C.GdkSeat)(s.Native())

	ret := C.gdk_wayland_seat_get_wl_seat(arg0)

	var ret0 interface{}

	ret0 = box.Get(uintptr(ret)).(interface{})

	return ret0
}
