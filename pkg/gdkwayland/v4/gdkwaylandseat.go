// Code generated by girgen. DO NOT EDIT.

package gdkwayland

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/gdk/v4"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4-wayland gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <gdk/wayland/gdkwayland.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gdk_wayland_seat_get_type()), F: marshalWaylandSeater},
	})
}

// WaylandSeater describes WaylandSeat's methods.
type WaylandSeater interface {
	privateWaylandSeat()
}

// WaylandSeat: wayland implementation of `GdkSeat`.
//
// Beyond the regular [class@Gdk.Seat] API, the Wayland implementation provides
// access to the Wayland `wl_seat` object with
// [method@GdkWayland.WaylandSeat.get_wl_seat].
type WaylandSeat struct {
	gdk.Seat
}

var (
	_ WaylandSeater   = (*WaylandSeat)(nil)
	_ gextras.Nativer = (*WaylandSeat)(nil)
)

func wrapWaylandSeat(obj *externglib.Object) WaylandSeater {
	return &WaylandSeat{
		Seat: gdk.Seat{
			Object: obj,
		},
	}
}

func marshalWaylandSeater(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapWaylandSeat(obj), nil
}

func (*WaylandSeat) privateWaylandSeat() {}
