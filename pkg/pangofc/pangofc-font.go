// Code generated by girgen. DO NOT EDIT.

package pangofc

import (
	"github.com/diamondburned/gotk4/pkg/pango"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: pangofc pango
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <pango/pangofc-fontmap.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.pango_fc_font_get_type()), F: marshalFont},
	})
}

// Font: `PangoFcFont` is a base class for font implementations using the
// Fontconfig and FreeType libraries.
//
// It is used in onjunction with [class@PangoFc.FontMap]. When deriving from
// this class, you need to implement all of its virtual functions other than
// shutdown() along with the get_glyph_extents() virtual function from
// `PangoFont`.
type Font interface {
	pango.Font

	// Glyph gets the glyph index for a given Unicode character for @font.
	//
	// If you only want to determine whether the font has the glyph, use
	// [method@PangoFc.Font.has_char].
	Glyph(f Font, wc uint32)
	// Languages returns the languages that are supported by @font.
	//
	// This corresponds to the FC_LANG member of the FcPattern.
	//
	// The returned array is only valid as long as the font and its fontmap are
	// valid.
	Languages(f Font)
	// Pattern returns the FcPattern that @font is based on.
	Pattern(f Font)
	// UnknownGlyph returns the index of a glyph suitable for drawing @wc as an
	// unknown character.
	//
	// Use PANGO_GET_UNKNOWN_GLYPH() instead.
	UnknownGlyph(f Font, wc uint32)
	// HasChar determines whether @font has a glyph for the codepoint @wc.
	HasChar(f Font, wc uint32) bool
	// KernGlyphs: this function used to adjust each adjacent pair of glyphs in
	// @glyphs according to kerning information in @font.
	//
	// Since 1.44, it does nothing.
	KernGlyphs(f Font, glyphs *pango.GlyphString)
	// LockFace gets the FreeType `FT_Face` associated with a font.
	//
	// This face will be kept around until you call
	// [method@PangoFc.Font.unlock_face].
	LockFace(f Font)
	// UnlockFace releases a font previously obtained with
	// [method@PangoFc.Font.lock_face].
	UnlockFace(f Font)
}

// font implements the Font interface.
type font struct {
	pango.Font
}

var _ Font = (*font)(nil)

// WrapFont wraps a GObject to the right type. It is
// primarily used internally.
func WrapFont(obj *externglib.Object) Font {
	return Font{
		pango.Font: pango.WrapFont(obj),
	}
}

func marshalFont(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapFont(obj), nil
}

// Glyph gets the glyph index for a given Unicode character for @font.
//
// If you only want to determine whether the font has the glyph, use
// [method@PangoFc.Font.has_char].
func (f font) Glyph(f Font, wc uint32) {
	var arg0 *C.PangoFcFont
	var arg1 C.gunichar

	arg0 = (*C.PangoFcFont)(unsafe.Pointer(f.Native()))
	arg1 = C.gunichar(wc)

	C.pango_fc_font_get_glyph(arg0, arg1)
}

// Languages returns the languages that are supported by @font.
//
// This corresponds to the FC_LANG member of the FcPattern.
//
// The returned array is only valid as long as the font and its fontmap are
// valid.
func (f font) Languages(f Font) {
	var arg0 *C.PangoFcFont

	arg0 = (*C.PangoFcFont)(unsafe.Pointer(f.Native()))

	C.pango_fc_font_get_languages(arg0)
}

// Pattern returns the FcPattern that @font is based on.
func (f font) Pattern(f Font) {
	var arg0 *C.PangoFcFont

	arg0 = (*C.PangoFcFont)(unsafe.Pointer(f.Native()))

	C.pango_fc_font_get_pattern(arg0)
}

// UnknownGlyph returns the index of a glyph suitable for drawing @wc as an
// unknown character.
//
// Use PANGO_GET_UNKNOWN_GLYPH() instead.
func (f font) UnknownGlyph(f Font, wc uint32) {
	var arg0 *C.PangoFcFont
	var arg1 C.gunichar

	arg0 = (*C.PangoFcFont)(unsafe.Pointer(f.Native()))
	arg1 = C.gunichar(wc)

	C.pango_fc_font_get_unknown_glyph(arg0, arg1)
}

// HasChar determines whether @font has a glyph for the codepoint @wc.
func (f font) HasChar(f Font, wc uint32) bool {
	var arg0 *C.PangoFcFont
	var arg1 C.gunichar

	arg0 = (*C.PangoFcFont)(unsafe.Pointer(f.Native()))
	arg1 = C.gunichar(wc)

	var cret C.gboolean
	var ok bool

	cret = C.pango_fc_font_has_char(arg0, arg1)

	if cret {
		ok = true
	}

	return ok
}

// KernGlyphs: this function used to adjust each adjacent pair of glyphs in
// @glyphs according to kerning information in @font.
//
// Since 1.44, it does nothing.
func (f font) KernGlyphs(f Font, glyphs *pango.GlyphString) {
	var arg0 *C.PangoFcFont
	var arg1 *C.PangoGlyphString

	arg0 = (*C.PangoFcFont)(unsafe.Pointer(f.Native()))
	arg1 = (*C.PangoGlyphString)(unsafe.Pointer(glyphs.Native()))

	C.pango_fc_font_kern_glyphs(arg0, arg1)
}

// LockFace gets the FreeType `FT_Face` associated with a font.
//
// This face will be kept around until you call
// [method@PangoFc.Font.unlock_face].
func (f font) LockFace(f Font) {
	var arg0 *C.PangoFcFont

	arg0 = (*C.PangoFcFont)(unsafe.Pointer(f.Native()))

	C.pango_fc_font_lock_face(arg0)
}

// UnlockFace releases a font previously obtained with
// [method@PangoFc.Font.lock_face].
func (f font) UnlockFace(f Font) {
	var arg0 *C.PangoFcFont

	arg0 = (*C.PangoFcFont)(unsafe.Pointer(f.Native()))

	C.pango_fc_font_unlock_face(arg0)
}
