// Code generated by girgen. DO NOT EDIT.

package pangofc

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/box"
	"github.com/diamondburned/gotk4/internal/gextras"
	"github.com/diamondburned/gotk4/pkg/pango"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: pangofc
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <pango/pangofc-fontmap.h>
//
// extern void callbackDelete(gpointer);
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.pango_fc_font_map_get_type()), F: marshalFontMap},
	})
}

//export callbackDelete
func callbackDelete(ptr C.gpointer) {
	box.Delete(box.Callback, uintptr(ptr))
}

// FontMap: `PangoFcFontMap` is a base class for font map implementations using
// the Fontconfig and FreeType libraries.
//
// It is used in the Xft and FreeType backends shipped with Pango, but can also
// be used when creating new backends. Any backend deriving from this base class
// will take advantage of the wide range of shapers implemented using FreeType
// that come with Pango.
type FontMap interface {
	pango.FontMap

	// AddDecoderFindFunc: this function saves a callback method in the
	// `PangoFcFontMap` that will be called whenever new fonts are created.
	//
	// If the function returns a `PangoFcDecoder`, that decoder will be used to
	// determine both coverage via a `FcCharSet` and a one-to-one mapping of
	// characters to glyphs. This will allow applications to have
	// application-specific encodings for various fonts.
	AddDecoderFindFunc(findfunc DecoderFindFunc)
	// CacheClear: clear all cached information and fontsets for this font map.
	//
	// This should be called whenever there is a change in the output of the
	// default_substitute() virtual function of the font map, or if fontconfig
	// has been reinitialized to new configuration.
	CacheClear()
	// ConfigChanged informs font map that the fontconfig configuration (i.e.,
	// FcConfig object) used by this font map has changed.
	//
	// This currently calls [method@PangoFc.FontMap.cache_clear] which ensures
	// that list of fonts, etc will be regenerated using the updated
	// configuration.
	ConfigChanged()
	// CreateContext creates a new context for this fontmap.
	//
	// This function is intended only for backend implementations deriving from
	// `PangoFcFontMap`; it is possible that a backend will store additional
	// information needed for correct operation on the `PangoContext` after
	// calling this function.
	CreateContext() pango.Context
	// SetDefaultSubstitute sets a function that will be called to do final
	// configuration substitution on a `FcPattern` before it is used to load the
	// font.
	//
	// This function can be used to do things like set hinting and antialiasing
	// options.
	SetDefaultSubstitute(fn SubstituteFunc)
	// Shutdown clears all cached information for the fontmap and marks all
	// fonts open for the fontmap as dead.
	//
	// See the shutdown() virtual function of `PangoFcFont`.
	//
	// This function might be used by a backend when the underlying windowing
	// system for the font map exits. This function is only intended to be
	// called only for backend implementations deriving from `PangoFcFontMap`.
	Shutdown()
	// SubstituteChanged: call this function any time the results of the default
	// substitution function set with
	// [method@PangoFc.FontMap.set_default_substitute] change.
	//
	// That is, if your substitution function will return different results for
	// the same input pattern, you must call this function.
	SubstituteChanged()
}

// fontMap implements the FontMap interface.
type fontMap struct {
	pango.FontMap
}

var _ FontMap = (*fontMap)(nil)

// WrapFontMap wraps a GObject to the right type. It is
// primarily used internally.
func WrapFontMap(obj *externglib.Object) FontMap {
	return FontMap{
		pango.FontMap: pango.WrapFontMap(obj),
	}
}

func marshalFontMap(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapFontMap(obj), nil
}

// AddDecoderFindFunc: this function saves a callback method in the
// `PangoFcFontMap` that will be called whenever new fonts are created.
//
// If the function returns a `PangoFcDecoder`, that decoder will be used to
// determine both coverage via a `FcCharSet` and a one-to-one mapping of
// characters to glyphs. This will allow applications to have
// application-specific encodings for various fonts.
func (f fontMap) AddDecoderFindFunc(findfunc DecoderFindFunc) {
	var arg0 *C.PangoFcFontMap
	var arg1 C.PangoFcDecoderFindFunc
	var arg2 C.gpointer
	var arg3 C.GDestroyNotify

	arg0 = (*C.PangoFcFontMap)(f.Native())
	arg1 = (*[0]byte)(C.gotk4_DecoderFindFunc)
	arg2 = C.gpointer(box.Assign(findfunc))
	arg3 = (*[0]byte)(C.callbackDelete)

	C.pango_fc_font_map_add_decoder_find_func(arg0, arg1, arg2, arg3)
}

// CacheClear: clear all cached information and fontsets for this font map.
//
// This should be called whenever there is a change in the output of the
// default_substitute() virtual function of the font map, or if fontconfig
// has been reinitialized to new configuration.
func (f fontMap) CacheClear() {
	var arg0 *C.PangoFcFontMap

	arg0 = (*C.PangoFcFontMap)(f.Native())

	C.pango_fc_font_map_cache_clear(arg0)
}

// ConfigChanged informs font map that the fontconfig configuration (i.e.,
// FcConfig object) used by this font map has changed.
//
// This currently calls [method@PangoFc.FontMap.cache_clear] which ensures
// that list of fonts, etc will be regenerated using the updated
// configuration.
func (f fontMap) ConfigChanged() {
	var arg0 *C.PangoFcFontMap

	arg0 = (*C.PangoFcFontMap)(f.Native())

	C.pango_fc_font_map_config_changed(arg0)
}

// CreateContext creates a new context for this fontmap.
//
// This function is intended only for backend implementations deriving from
// `PangoFcFontMap`; it is possible that a backend will store additional
// information needed for correct operation on the `PangoContext` after
// calling this function.
func (f fontMap) CreateContext() pango.Context {
	var arg0 *C.PangoFcFontMap

	arg0 = (*C.PangoFcFontMap)(f.Native())

	ret := C.pango_fc_font_map_create_context(arg0)

	var ret0 pango.Context

	ret0 = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(ret.Native()))).(pango.Context)

	return ret0
}

// SetDefaultSubstitute sets a function that will be called to do final
// configuration substitution on a `FcPattern` before it is used to load the
// font.
//
// This function can be used to do things like set hinting and antialiasing
// options.
func (f fontMap) SetDefaultSubstitute(fn SubstituteFunc) {
	var arg0 *C.PangoFcFontMap
	var arg1 C.PangoFcSubstituteFunc
	var arg2 C.gpointer
	var arg3 C.GDestroyNotify

	arg0 = (*C.PangoFcFontMap)(f.Native())
	arg1 = (*[0]byte)(C.gotk4_SubstituteFunc)
	arg2 = C.gpointer(box.Assign(fn))
	arg3 = (*[0]byte)(C.callbackDelete)

	C.pango_fc_font_map_set_default_substitute(arg0, arg1, arg2, arg3)
}

// Shutdown clears all cached information for the fontmap and marks all
// fonts open for the fontmap as dead.
//
// See the shutdown() virtual function of `PangoFcFont`.
//
// This function might be used by a backend when the underlying windowing
// system for the font map exits. This function is only intended to be
// called only for backend implementations deriving from `PangoFcFontMap`.
func (f fontMap) Shutdown() {
	var arg0 *C.PangoFcFontMap

	arg0 = (*C.PangoFcFontMap)(f.Native())

	C.pango_fc_font_map_shutdown(arg0)
}

// SubstituteChanged: call this function any time the results of the default
// substitution function set with
// [method@PangoFc.FontMap.set_default_substitute] change.
//
// That is, if your substitution function will return different results for
// the same input pattern, you must call this function.
func (f fontMap) SubstituteChanged() {
	var arg0 *C.PangoFcFontMap

	arg0 = (*C.PangoFcFontMap)(f.Native())

	C.pango_fc_font_map_substitute_changed(arg0)
}

type FontMapPrivate struct {
	native C.PangoFcFontMapPrivate
}

// WrapFontMapPrivate wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapFontMapPrivate(ptr unsafe.Pointer) *FontMapPrivate {
	if ptr == nil {
		return nil
	}

	return (*FontMapPrivate)(ptr)
}

func marshalFontMapPrivate(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapFontMapPrivate(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (f *FontMapPrivate) Native() unsafe.Pointer {
	return unsafe.Pointer(&f.native)
}
