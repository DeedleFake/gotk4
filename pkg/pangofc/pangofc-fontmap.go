// Code generated by girgen. DO NOT EDIT.

package pangofc

import (
	"github.com/diamondburned/gotk4/pkg/pango"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: pangofc pango
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <pango/pangofc-fontmap.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.pango_fc_font_map_get_type()), F: marshalFontMap},
	})
}

// FontMap: `PangoFcFontMap` is a base class for font map implementations using
// the Fontconfig and FreeType libraries.
//
// It is used in the Xft and FreeType backends shipped with Pango, but can also
// be used when creating new backends. Any backend deriving from this base class
// will take advantage of the wide range of shapers implemented using FreeType
// that come with Pango.
type FontMap interface {
	pango.FontMap

	// AddDecoderFindFunc: this function saves a callback method in the
	// `PangoFcFontMap` that will be called whenever new fonts are created.
	//
	// If the function returns a `PangoFcDecoder`, that decoder will be used to
	// determine both coverage via a `FcCharSet` and a one-to-one mapping of
	// characters to glyphs. This will allow applications to have
	// application-specific encodings for various fonts.
	AddDecoderFindFunc(f FontMap)
	// CacheClear: clear all cached information and fontsets for this font map.
	//
	// This should be called whenever there is a change in the output of the
	// default_substitute() virtual function of the font map, or if fontconfig
	// has been reinitialized to new configuration.
	CacheClear(f FontMap)
	// ConfigChanged informs font map that the fontconfig configuration (i.e.,
	// FcConfig object) used by this font map has changed.
	//
	// This currently calls [method@PangoFc.FontMap.cache_clear] which ensures
	// that list of fonts, etc will be regenerated using the updated
	// configuration.
	ConfigChanged(f FontMap)
	// CreateContext creates a new context for this fontmap.
	//
	// This function is intended only for backend implementations deriving from
	// `PangoFcFontMap`; it is possible that a backend will store additional
	// information needed for correct operation on the `PangoContext` after
	// calling this function.
	CreateContext(f FontMap)
	// Config fetches the `FcConfig` attached to a font map.
	//
	// See also: [method@PangoFc.FontMap.set_config].
	Config(f FontMap)
	// HbFace retrieves the `hb_face_t` for the given `PangoFcFont`.
	HbFace(f FontMap, fcfont Font)
	// SetDefaultSubstitute sets a function that will be called to do final
	// configuration substitution on a `FcPattern` before it is used to load the
	// font.
	//
	// This function can be used to do things like set hinting and antialiasing
	// options.
	SetDefaultSubstitute(f FontMap)
	// Shutdown clears all cached information for the fontmap and marks all
	// fonts open for the fontmap as dead.
	//
	// See the shutdown() virtual function of `PangoFcFont`.
	//
	// This function might be used by a backend when the underlying windowing
	// system for the font map exits. This function is only intended to be
	// called only for backend implementations deriving from `PangoFcFontMap`.
	Shutdown(f FontMap)
	// SubstituteChanged: call this function any time the results of the default
	// substitution function set with
	// [method@PangoFc.FontMap.set_default_substitute] change.
	//
	// That is, if your substitution function will return different results for
	// the same input pattern, you must call this function.
	SubstituteChanged(f FontMap)
}

// fontMap implements the FontMap interface.
type fontMap struct {
	pango.FontMap
}

var _ FontMap = (*fontMap)(nil)

// WrapFontMap wraps a GObject to the right type. It is
// primarily used internally.
func WrapFontMap(obj *externglib.Object) FontMap {
	return FontMap{
		pango.FontMap: pango.WrapFontMap(obj),
	}
}

func marshalFontMap(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapFontMap(obj), nil
}

// AddDecoderFindFunc: this function saves a callback method in the
// `PangoFcFontMap` that will be called whenever new fonts are created.
//
// If the function returns a `PangoFcDecoder`, that decoder will be used to
// determine both coverage via a `FcCharSet` and a one-to-one mapping of
// characters to glyphs. This will allow applications to have
// application-specific encodings for various fonts.
func (f fontMap) AddDecoderFindFunc(f FontMap) {
	var arg0 *C.PangoFcFontMap

	arg0 = (*C.PangoFcFontMap)(unsafe.Pointer(f.Native()))

	C.pango_fc_font_map_add_decoder_find_func(arg0, arg1, arg2, arg3)
}

// CacheClear: clear all cached information and fontsets for this font map.
//
// This should be called whenever there is a change in the output of the
// default_substitute() virtual function of the font map, or if fontconfig
// has been reinitialized to new configuration.
func (f fontMap) CacheClear(f FontMap) {
	var arg0 *C.PangoFcFontMap

	arg0 = (*C.PangoFcFontMap)(unsafe.Pointer(f.Native()))

	C.pango_fc_font_map_cache_clear(arg0)
}

// ConfigChanged informs font map that the fontconfig configuration (i.e.,
// FcConfig object) used by this font map has changed.
//
// This currently calls [method@PangoFc.FontMap.cache_clear] which ensures
// that list of fonts, etc will be regenerated using the updated
// configuration.
func (f fontMap) ConfigChanged(f FontMap) {
	var arg0 *C.PangoFcFontMap

	arg0 = (*C.PangoFcFontMap)(unsafe.Pointer(f.Native()))

	C.pango_fc_font_map_config_changed(arg0)
}

// CreateContext creates a new context for this fontmap.
//
// This function is intended only for backend implementations deriving from
// `PangoFcFontMap`; it is possible that a backend will store additional
// information needed for correct operation on the `PangoContext` after
// calling this function.
func (f fontMap) CreateContext(f FontMap) {
	var arg0 *C.PangoFcFontMap

	arg0 = (*C.PangoFcFontMap)(unsafe.Pointer(f.Native()))

	C.pango_fc_font_map_create_context(arg0)
}

// Config fetches the `FcConfig` attached to a font map.
//
// See also: [method@PangoFc.FontMap.set_config].
func (f fontMap) Config(f FontMap) {
	var arg0 *C.PangoFcFontMap

	arg0 = (*C.PangoFcFontMap)(unsafe.Pointer(f.Native()))

	C.pango_fc_font_map_get_config(arg0)
}

// HbFace retrieves the `hb_face_t` for the given `PangoFcFont`.
func (f fontMap) HbFace(f FontMap, fcfont Font) {
	var arg0 *C.PangoFcFontMap
	var arg1 *C.PangoFcFont

	arg0 = (*C.PangoFcFontMap)(unsafe.Pointer(f.Native()))
	arg1 = (*C.PangoFcFont)(unsafe.Pointer(fcfont.Native()))

	C.pango_fc_font_map_get_hb_face(arg0, arg1)
}

// SetDefaultSubstitute sets a function that will be called to do final
// configuration substitution on a `FcPattern` before it is used to load the
// font.
//
// This function can be used to do things like set hinting and antialiasing
// options.
func (f fontMap) SetDefaultSubstitute(f FontMap) {
	var arg0 *C.PangoFcFontMap

	arg0 = (*C.PangoFcFontMap)(unsafe.Pointer(f.Native()))

	C.pango_fc_font_map_set_default_substitute(arg0, arg1, arg2, arg3)
}

// Shutdown clears all cached information for the fontmap and marks all
// fonts open for the fontmap as dead.
//
// See the shutdown() virtual function of `PangoFcFont`.
//
// This function might be used by a backend when the underlying windowing
// system for the font map exits. This function is only intended to be
// called only for backend implementations deriving from `PangoFcFontMap`.
func (f fontMap) Shutdown(f FontMap) {
	var arg0 *C.PangoFcFontMap

	arg0 = (*C.PangoFcFontMap)(unsafe.Pointer(f.Native()))

	C.pango_fc_font_map_shutdown(arg0)
}

// SubstituteChanged: call this function any time the results of the default
// substitution function set with
// [method@PangoFc.FontMap.set_default_substitute] change.
//
// That is, if your substitution function will return different results for
// the same input pattern, you must call this function.
func (f fontMap) SubstituteChanged(f FontMap) {
	var arg0 *C.PangoFcFontMap

	arg0 = (*C.PangoFcFontMap)(unsafe.Pointer(f.Native()))

	C.pango_fc_font_map_substitute_changed(arg0)
}
