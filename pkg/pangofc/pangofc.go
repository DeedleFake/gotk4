// Code generated by girgen. DO NOT EDIT.

package pangofc

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/box"
	"github.com/diamondburned/gotk4/internal/gextras"
	"github.com/diamondburned/gotk4/pkg/fontconfig"
	"github.com/diamondburned/gotk4/pkg/pango"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: pangofc
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <pango/pangofc-fontmap.h>
//
// extern PangoFcDecoder* gotk4_DecoderFindFunc(FcPattern*, gpointer)
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{

		// Records
		// Skipped DecoderClass.
		// Skipped FontClass.
		// Skipped FontMapClass.
		// Skipped FontMapPrivate.

		// Classes
		{T: externglib.Type(C.pango_fc_decoder_get_type()), F: marshalDecoder},
		{T: externglib.Type(C.pango_fc_font_get_type()), F: marshalFont},
		{T: externglib.Type(C.pango_fc_font_map_get_type()), F: marshalFontMap},
	})
}

// DecoderFindFunc: callback function passed to
// [method@PangoFc.FontMap.add_decoder_find_func].
type DecoderFindFunc func(pattern *fontconfig.Pattern) Decoder

//export gotk4_DecoderFindFunc
func gotk4_DecoderFindFunc(arg0 *C.FcPattern, arg1 C.gpointer) *C.PangoFcDecoder {
	v := box.Get(box.Callback, uintptr(arg1))
	if v == nil {
		panic(`callback not found`)
	}

	var pattern *fontconfig.Pattern
	pattern = fontconfig.WrapPattern(arg0)

	decoder := v.(DecoderFindFunc)(pattern)
}

// Decoder: `PangoFcDecoder` is a virtual base class that implementations will
// inherit from.
//
// It's the interface that is used to define a custom encoding for a font. These
// objects are created in your code from a function callback that was originally
// registered with [method@PangoFc.FontMap.add_decoder_find_func]. Pango
// requires information about the supported charset for a font as well as the
// individual character to glyph conversions. Pango gets that information via
// the #get_charset and #get_glyph callbacks into your object implementation.
type Decoder interface {
	gextras.Objector

	// Charset generates an `FcCharSet` of supported characters for the @fcfont
	// given.
	//
	// The returned `FcCharSet` will be a reference to an internal value stored
	// by the `PangoFcDecoder` and must not be modified or freed.
	Charset(fcfont Font) *fontconfig.CharSet
	// Glyph generates a `PangoGlyph` for the given Unicode point using the
	// custom decoder.
	//
	// For complex scripts where there can be multiple glyphs for a single
	// character, the decoder will return whatever glyph is most convenient for
	// it. (Usually whatever glyph is directly in the fonts character map
	// table.)
	Glyph(fcfont Font, wc uint32) pango.Glyph
}

type decoder struct {
	*externglib.Object
}

// WrapDecoder wraps a GObject to the right type. It is
// primarily used internally.
func WrapDecoder(obj *externglib.Object) Decoder {
	return decoder{*externglib.Object{obj}}
}

func marshalDecoder(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapDecoder(obj), nil
}

func (d decoder) Charset(fcfont Font) *fontconfig.CharSet

func (d decoder) Glyph(fcfont Font, wc uint32) pango.Glyph

// Font: `PangoFcFont` is a base class for font implementations using the
// Fontconfig and FreeType libraries.
//
// It is used in onjunction with [class@PangoFc.FontMap]. When deriving from
// this class, you need to implement all of its virtual functions other than
// shutdown() along with the get_glyph_extents() virtual function from
// `PangoFont`.
type Font interface {
	pango.Font

	// Glyph gets the glyph index for a given Unicode character for @font.
	//
	// If you only want to determine whether the font has the glyph, use
	// [method@PangoFc.Font.has_char].
	Glyph(wc uint32) uint
	// Languages returns the languages that are supported by @font.
	//
	// This corresponds to the FC_LANG member of the FcPattern.
	//
	// The returned array is only valid as long as the font and its fontmap are
	// valid.
	Languages() **pango.Language
	// Pattern returns the FcPattern that @font is based on.
	Pattern() *fontconfig.Pattern
	// UnknownGlyph returns the index of a glyph suitable for drawing @wc as an
	// unknown character.
	//
	// Use PANGO_GET_UNKNOWN_GLYPH() instead.
	UnknownGlyph(wc uint32) pango.Glyph
	// HasChar determines whether @font has a glyph for the codepoint @wc.
	HasChar(wc uint32) bool
	// KernGlyphs: this function used to adjust each adjacent pair of glyphs in
	// @glyphs according to kerning information in @font.
	//
	// Since 1.44, it does nothing.
	KernGlyphs(glyphs *pango.GlyphString)
	// UnlockFace releases a font previously obtained with
	// [method@PangoFc.Font.lock_face].
	UnlockFace()
}

type font struct {
	pango.Font
}

// WrapFont wraps a GObject to the right type. It is
// primarily used internally.
func WrapFont(obj *externglib.Object) Font {
	return font{pango.WrapFont(obj)}
}

func marshalFont(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapFont(obj), nil
}

func (f font) Glyph(wc uint32) uint

func (f font) Languages() **pango.Language

func (f font) Pattern() *fontconfig.Pattern

func (f font) UnknownGlyph(wc uint32) pango.Glyph

func (f font) HasChar(wc uint32) bool

func (f font) KernGlyphs(glyphs *pango.GlyphString)

func (f font) UnlockFace()

// FontMap: `PangoFcFontMap` is a base class for font map implementations using
// the Fontconfig and FreeType libraries.
//
// It is used in the Xft and FreeType backends shipped with Pango, but can also
// be used when creating new backends. Any backend deriving from this base class
// will take advantage of the wide range of shapers implemented using FreeType
// that come with Pango.
type FontMap interface {
	pango.FontMap

	// AddDecoderFindFunc: this function saves a callback method in the
	// `PangoFcFontMap` that will be called whenever new fonts are created.
	//
	// If the function returns a `PangoFcDecoder`, that decoder will be used to
	// determine both coverage via a `FcCharSet` and a one-to-one mapping of
	// characters to glyphs. This will allow applications to have
	// application-specific encodings for various fonts.
	AddDecoderFindFunc(findfunc DecoderFindFunc)
	// CacheClear: clear all cached information and fontsets for this font map.
	//
	// This should be called whenever there is a change in the output of the
	// default_substitute() virtual function of the font map, or if fontconfig
	// has been reinitialized to new configuration.
	CacheClear()
	// ConfigChanged informs font map that the fontconfig configuration (i.e.,
	// FcConfig object) used by this font map has changed.
	//
	// This currently calls [method@PangoFc.FontMap.cache_clear] which ensures
	// that list of fonts, etc will be regenerated using the updated
	// configuration.
	ConfigChanged()
	// CreateContext creates a new context for this fontmap.
	//
	// This function is intended only for backend implementations deriving from
	// `PangoFcFontMap`; it is possible that a backend will store additional
	// information needed for correct operation on the `PangoContext` after
	// calling this function.
	CreateContext() pango.Context
	// FindDecoder finds the decoder to use for @pattern.
	//
	// Decoders can be added to a font map using
	// [method@PangoFc.FontMap.add_decoder_find_func].
	FindDecoder(pattern *fontconfig.Pattern) Decoder
	// SetDefaultSubstitute sets a function that will be called to do final
	// configuration substitution on a `FcPattern` before it is used to load the
	// font.
	//
	// This function can be used to do things like set hinting and antialiasing
	// options.
	SetDefaultSubstitute(_func SubstituteFunc)
	// Shutdown clears all cached information for the fontmap and marks all
	// fonts open for the fontmap as dead.
	//
	// See the shutdown() virtual function of `PangoFcFont`.
	//
	// This function might be used by a backend when the underlying windowing
	// system for the font map exits. This function is only intended to be
	// called only for backend implementations deriving from `PangoFcFontMap`.
	Shutdown()
	// SubstituteChanged: call this function any time the results of the default
	// substitution function set with
	// [method@PangoFc.FontMap.set_default_substitute] change.
	//
	// That is, if your substitution function will return different results for
	// the same input pattern, you must call this function.
	SubstituteChanged()
}

type fontMap struct {
	pango.FontMap
}

// WrapFontMap wraps a GObject to the right type. It is
// primarily used internally.
func WrapFontMap(obj *externglib.Object) FontMap {
	return fontMap{pango.WrapFontMap(obj)}
}

func marshalFontMap(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapFontMap(obj), nil
}

func (f fontMap) AddDecoderFindFunc(findfunc DecoderFindFunc)

func (f fontMap) CacheClear()

func (f fontMap) ConfigChanged()

func (f fontMap) CreateContext() pango.Context

func (f fontMap) FindDecoder(pattern *fontconfig.Pattern) Decoder

func (f fontMap) SetDefaultSubstitute(_func SubstituteFunc)

func (f fontMap) Shutdown()

func (f fontMap) SubstituteChanged()
