// Code generated by girgen. DO NOT EDIT.

package pangofc

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/pango"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: pangofc
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <pango/pangofc-fontmap.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{

		// Records
		// Skipped DecoderClass.
		// Skipped FontClass.
		// Skipped FontMapClass.
		// Skipped FontMapPrivate.

		// Classes
		{T: externglib.Type(C.pango_fc_decoder_get_type()), F: marshalDecoder},
		{T: externglib.Type(C.pango_fc_font_get_type()), F: marshalFont},
		{T: externglib.Type(C.pango_fc_font_map_get_type()), F: marshalFontMap},
	})
}

// Decoder: `PangoFcDecoder` is a virtual base class that implementations will
// inherit from.
//
// It's the interface that is used to define a custom encoding for a font. These
// objects are created in your code from a function callback that was originally
// registered with [method@PangoFc.FontMap.add_decoder_find_func]. Pango
// requires information about the supported charset for a font as well as the
// individual character to glyph conversions. Pango gets that information via
// the #get_charset and #get_glyph callbacks into your object implementation.
type Decoder struct {
	*externglib.Object
}

func wrapDecoder(obj *externglib.Object) *Decoder {
	return &Decoder{*externglib.Object{obj}}
}

func marshalDecoder(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapWidget(obj), nil
}

// Font: `PangoFcFont` is a base class for font implementations using the
// Fontconfig and FreeType libraries.
//
// It is used in onjunction with [class@PangoFc.FontMap]. When deriving from
// this class, you need to implement all of its virtual functions other than
// shutdown() along with the get_glyph_extents() virtual function from
// `PangoFont`.
type Font struct {
	pango.Font
}

func wrapFont(obj *externglib.Object) *Font {
	return &Font{Font{*externglib.Object{obj}}}
}

func marshalFont(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapWidget(obj), nil
}

// FontMap: `PangoFcFontMap` is a base class for font map implementations using
// the Fontconfig and FreeType libraries.
//
// It is used in the Xft and FreeType backends shipped with Pango, but can also
// be used when creating new backends. Any backend deriving from this base class
// will take advantage of the wide range of shapers implemented using FreeType
// that come with Pango.
type FontMap struct {
	pango.FontMap
}

func wrapFontMap(obj *externglib.Object) *FontMap {
	return &FontMap{FontMap{*externglib.Object{obj}}}
}

func marshalFontMap(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapWidget(obj), nil
}
