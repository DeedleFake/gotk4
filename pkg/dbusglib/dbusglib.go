// Code generated by girgen. DO NOT EDIT.

package dbusglib

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: dbus-glib-1
// #cgo CFLAGS: -Wno-deprecated-declarations
//
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.dbus_g_proxy_get_type()), F: marshalProxy},
	})
}

type Connection struct {
	native C.DBusGConnection
}

// WrapConnection wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapConnection(ptr unsafe.Pointer) *Connection {
	if ptr == nil {
		return nil
	}

	return (*Connection)(ptr)
}

func marshalConnection(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapConnection(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (c *Connection) Native() unsafe.Pointer {
	return unsafe.Pointer(&c.native)
}

type MethodInvocation struct {
	native C.DBusGMethodInvocation
}

// WrapMethodInvocation wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapMethodInvocation(ptr unsafe.Pointer) *MethodInvocation {
	if ptr == nil {
		return nil
	}

	return (*MethodInvocation)(ptr)
}

func marshalMethodInvocation(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapMethodInvocation(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (m *MethodInvocation) Native() unsafe.Pointer {
	return unsafe.Pointer(&m.native)
}

type Proxy interface {
	gextras.Objector
}

// proxy implements the Proxy interface.
type proxy struct {
	gextras.Objector
}

var _ Proxy = (*proxy)(nil)

// WrapProxy wraps a GObject to the right type. It is
// primarily used internally.
func WrapProxy(obj *externglib.Object) Proxy {
	return Proxy{
		Objector: obj,
	}
}

func marshalProxy(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapProxy(obj), nil
}
