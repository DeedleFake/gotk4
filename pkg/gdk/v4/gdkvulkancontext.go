// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <gdk/gdk.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gdk_vulkan_context_get_type()), F: marshalVulkanContexter},
	})
}

// VulkanContexter describes VulkanContext's methods.
type VulkanContexter interface {
	gextras.Objector

	privateVulkanContext()
}

// VulkanContext: `GdkVulkanContext` is an object representing the
// platform-specific Vulkan draw context.
//
// `GdkVulkanContext`s are created for a surface using
// [method@Gdk.Surface.create_vulkan_context], and the context will match the
// the characteristics of the surface.
//
// Support for `GdkVulkanContext` is platform-specific and context creation can
// fail, returning nil context.
type VulkanContext struct {
	DrawContext
}

var _ VulkanContexter = (*VulkanContext)(nil)

func wrapVulkanContexter(obj *externglib.Object) VulkanContexter {
	return &VulkanContext{
		DrawContext: DrawContext{
			Object: obj,
		},
	}
}

func marshalVulkanContexter(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapVulkanContexter(obj), nil
}

func (*VulkanContext) privateVulkanContext() {}
