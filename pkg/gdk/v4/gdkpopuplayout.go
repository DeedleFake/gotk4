// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"runtime"
	"unsafe"

	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <stdbool.h>
// #include <glib-object.h>
// #include <gdk/gdk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gdk_popup_layout_get_type()), F: marshalPopupLayout},
	})
}

// PopupLayout popups are positioned relative to their parent surface. The
// GdkPopupLayout struct contains information that is necessary to do so.
//
// The positioning requires a negotiation with the windowing system, since it
// depends on external constraints, such as the position of the parent surface,
// and the screen dimensions.
//
// The basic ingredients are a rectangle on the parent surface, and the anchor
// on both that rectangle and the popup. The anchors specify a side or corner to
// place next to each other.
//
// !Popup anchors (popup-anchors.png)
//
// For cases where placing the anchors next to each other would make the popup
// extend offscreen, the layout includes some hints for how to resolve this
// problem. The hints may suggest to flip the anchor position to the other side,
// or to 'slide' the popup along a side, or to resize it.
//
// !Flipping popups (popup-flip.png)
//
// !Sliding popups (popup-slide.png)
//
// These hints may be combined.
//
// Ultimatively, it is up to the windowing system to determine the position and
// size of the popup. You can learn about the result by calling
// gdk_popup_get_position_x(), gdk_popup_get_position_y(),
// gdk_popup_get_rect_anchor() and gdk_popup_get_surface_anchor() after the
// popup has been presented. This can be used to adjust the rendering. For
// example, GtkPopover changes its arrow position accordingly. But you have to
// be careful avoid changing the size of the popover, or it has to be presented
// again.
type PopupLayout struct {
	native C.GdkPopupLayout
}

// WrapPopupLayout wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPopupLayout(ptr unsafe.Pointer) *PopupLayout {
	if ptr == nil {
		return nil
	}

	return (*PopupLayout)(ptr)
}

func marshalPopupLayout(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPopupLayout(unsafe.Pointer(b)), nil
}

// NewPopupLayout constructs a struct PopupLayout.
func NewPopupLayout(anchorRect *Rectangle, rectAnchor Gravity, surfaceAnchor Gravity) *PopupLayout {
	var arg1 *C.GdkRectangle
	var arg2 C.GdkGravity
	var arg3 C.GdkGravity

	arg1 = (*C.GdkRectangle)(unsafe.Pointer(anchorRect.Native()))
	arg2 = (C.GdkGravity)(rectAnchor)
	arg3 = (C.GdkGravity)(surfaceAnchor)

	var cret *C.GdkPopupLayout
	var ret1 *PopupLayout

	cret = C.gdk_popup_layout_new(anchorRect, rectAnchor, surfaceAnchor)

	ret1 = WrapPopupLayout(unsafe.Pointer(cret))
	runtime.SetFinalizer(ret1, func(v *PopupLayout) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return ret1
}

// Native returns the underlying C source pointer.
func (p *PopupLayout) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

// Copy: create a new PopupLayout and copy the contents of @layout into it.
func (l *PopupLayout) Copy() *PopupLayout {
	var arg0 *C.GdkPopupLayout

	arg0 = (*C.GdkPopupLayout)(unsafe.Pointer(l.Native()))

	var cret *C.GdkPopupLayout
	var ret1 *PopupLayout

	cret = C.gdk_popup_layout_copy(arg0)

	ret1 = WrapPopupLayout(unsafe.Pointer(cret))
	runtime.SetFinalizer(ret1, func(v *PopupLayout) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return ret1
}

// Equal: check whether @layout and @other has identical layout properties.
func (l *PopupLayout) Equal(other *PopupLayout) bool {
	var arg0 *C.GdkPopupLayout
	var arg1 *C.GdkPopupLayout

	arg0 = (*C.GdkPopupLayout)(unsafe.Pointer(l.Native()))
	arg1 = (*C.GdkPopupLayout)(unsafe.Pointer(other.Native()))

	var cret C.gboolean
	var ret1 bool

	cret = C.gdk_popup_layout_equal(arg0, other)

	ret1 = C.bool(cret) != C.false

	return ret1
}

// AnchorHints: get the AnchorHints.
func (l *PopupLayout) AnchorHints() AnchorHints {
	var arg0 *C.GdkPopupLayout

	arg0 = (*C.GdkPopupLayout)(unsafe.Pointer(l.Native()))

	var cret C.GdkAnchorHints
	var ret1 AnchorHints

	cret = C.gdk_popup_layout_get_anchor_hints(arg0)

	ret1 = AnchorHints(cret)

	return ret1
}

// AnchorRect: get the anchor rectangle.
func (l *PopupLayout) AnchorRect() *Rectangle {
	var arg0 *C.GdkPopupLayout

	arg0 = (*C.GdkPopupLayout)(unsafe.Pointer(l.Native()))

	var cret *C.GdkRectangle
	var ret1 *Rectangle

	cret = C.gdk_popup_layout_get_anchor_rect(arg0)

	ret1 = WrapRectangle(unsafe.Pointer(cret))

	return ret1
}

// Offset retrieves the offset for the anchor rectangle.
func (l *PopupLayout) Offset() (dx int, dy int) {
	var arg0 *C.GdkPopupLayout

	arg0 = (*C.GdkPopupLayout)(unsafe.Pointer(l.Native()))

	var arg1 C.int
	var ret1 int
	var arg2 C.int
	var ret2 int

	C.gdk_popup_layout_get_offset(arg0, &arg1, &arg2)

	*ret1 = C.int(arg1)
	*ret2 = C.int(arg2)

	return ret1, ret2
}

// RectAnchor returns the anchor position on the anchor rectangle.
func (l *PopupLayout) RectAnchor() Gravity {
	var arg0 *C.GdkPopupLayout

	arg0 = (*C.GdkPopupLayout)(unsafe.Pointer(l.Native()))

	var cret C.GdkGravity
	var ret1 Gravity

	cret = C.gdk_popup_layout_get_rect_anchor(arg0)

	ret1 = Gravity(cret)

	return ret1
}

// SurfaceAnchor returns the anchor position on the popup surface.
func (l *PopupLayout) SurfaceAnchor() Gravity {
	var arg0 *C.GdkPopupLayout

	arg0 = (*C.GdkPopupLayout)(unsafe.Pointer(l.Native()))

	var cret C.GdkGravity
	var ret1 Gravity

	cret = C.gdk_popup_layout_get_surface_anchor(arg0)

	ret1 = Gravity(cret)

	return ret1
}

// Ref increases the reference count of @value.
func (l *PopupLayout) Ref() *PopupLayout {
	var arg0 *C.GdkPopupLayout

	arg0 = (*C.GdkPopupLayout)(unsafe.Pointer(l.Native()))

	var cret *C.GdkPopupLayout
	var ret1 *PopupLayout

	cret = C.gdk_popup_layout_ref(arg0)

	ret1 = WrapPopupLayout(unsafe.Pointer(cret))
	runtime.SetFinalizer(ret1, func(v *PopupLayout) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return ret1
}

// SetAnchorHints: set new anchor hints.
//
// The set @anchor_hints determines how @surface will be moved if the anchor
// points cause it to move off-screen. For example, GDK_ANCHOR_FLIP_X will
// replace GDK_GRAVITY_NORTH_WEST with GDK_GRAVITY_NORTH_EAST and vice versa if
// @surface extends beyond the left or right edges of the monitor.
func (l *PopupLayout) SetAnchorHints(anchorHints AnchorHints) {
	var arg0 *C.GdkPopupLayout
	var arg1 C.GdkAnchorHints

	arg0 = (*C.GdkPopupLayout)(unsafe.Pointer(l.Native()))
	arg1 = (C.GdkAnchorHints)(anchorHints)

	C.gdk_popup_layout_set_anchor_hints(arg0, anchorHints)
}

// SetAnchorRect: set the anchor rectangle.
func (l *PopupLayout) SetAnchorRect(anchorRect *Rectangle) {
	var arg0 *C.GdkPopupLayout
	var arg1 *C.GdkRectangle

	arg0 = (*C.GdkPopupLayout)(unsafe.Pointer(l.Native()))
	arg1 = (*C.GdkRectangle)(unsafe.Pointer(anchorRect.Native()))

	C.gdk_popup_layout_set_anchor_rect(arg0, anchorRect)
}

// SetOffset: offset the position of the anchor rectangle with the given delta.
func (l *PopupLayout) SetOffset(dx int, dy int) {
	var arg0 *C.GdkPopupLayout
	var arg1 C.int
	var arg2 C.int

	arg0 = (*C.GdkPopupLayout)(unsafe.Pointer(l.Native()))
	arg1 = C.int(dx)
	arg2 = C.int(dy)

	C.gdk_popup_layout_set_offset(arg0, dx, dy)
}

// SetRectAnchor: set the anchor on the anchor rectangle.
func (l *PopupLayout) SetRectAnchor(anchor Gravity) {
	var arg0 *C.GdkPopupLayout
	var arg1 C.GdkGravity

	arg0 = (*C.GdkPopupLayout)(unsafe.Pointer(l.Native()))
	arg1 = (C.GdkGravity)(anchor)

	C.gdk_popup_layout_set_rect_anchor(arg0, anchor)
}

// SetSurfaceAnchor: set the anchor on the popup surface.
func (l *PopupLayout) SetSurfaceAnchor(anchor Gravity) {
	var arg0 *C.GdkPopupLayout
	var arg1 C.GdkGravity

	arg0 = (*C.GdkPopupLayout)(unsafe.Pointer(l.Native()))
	arg1 = (C.GdkGravity)(anchor)

	C.gdk_popup_layout_set_surface_anchor(arg0, anchor)
}

// Unref decreases the reference count of @value.
func (l *PopupLayout) Unref() {
	var arg0 *C.GdkPopupLayout

	arg0 = (*C.GdkPopupLayout)(unsafe.Pointer(l.Native()))

	C.gdk_popup_layout_unref(arg0)
}
