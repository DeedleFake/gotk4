// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"runtime"
	"unsafe"

	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <stdbool.h>
// #include <glib-object.h>
// #include <gdk/gdk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gdk_frame_timings_get_type()), F: marshalFrameTimings},
	})
}

// FrameTimings: a `GdkFrameTimings` object holds timing information for a
// single frame of the application’s displays.
//
// To retrieve `GdkFrameTimings` objects, use
// [method@Gdk.FrameClock.get_timings] or
// [method@Gdk.FrameClock.get_current_timings]. The information in
// `GdkFrameTimings` is useful for precise synchronization of video with the
// event or audio streams, and for measuring quality metrics for the
// application’s display, such as latency and jitter.
type FrameTimings struct {
	native C.GdkFrameTimings
}

// WrapFrameTimings wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapFrameTimings(ptr unsafe.Pointer) *FrameTimings {
	if ptr == nil {
		return nil
	}

	return (*FrameTimings)(ptr)
}

func marshalFrameTimings(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapFrameTimings(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (f *FrameTimings) Native() unsafe.Pointer {
	return unsafe.Pointer(&f.native)
}

// Complete returns whether @timings are complete.
//
// The timing information in a `GdkFrameTimings` is filled in incrementally as
// the frame as drawn and passed off to the window system for processing and
// display to the user. The accessor functions for `GdkFrameTimings` can return
// 0 to indicate an unavailable value for two reasons: either because the
// information is not yet available, or because it isn't available at all.
//
// Once this function returns true for a frame, you can be certain that no
// further values will become available and be stored in the `GdkFrameTimings`.
func (t *FrameTimings) Complete() bool {
	var arg0 *C.GdkFrameTimings

	arg0 = (*C.GdkFrameTimings)(t.Native())

	ret := C.gdk_frame_timings_get_complete(arg0)

	var ret0 bool

	ret0 = C.bool(ret) != 0

	return ret0
}

// FrameCounter gets the frame counter value of the `GdkFrameClock` when this
// frame was drawn.
func (t *FrameTimings) FrameCounter() int64 {
	var arg0 *C.GdkFrameTimings

	arg0 = (*C.GdkFrameTimings)(t.Native())

	ret := C.gdk_frame_timings_get_frame_counter(arg0)

	var ret0 int64

	ret0 = int64(ret)

	return ret0
}

// FrameTime returns the frame time for the frame.
//
// This is the time value that is typically used to time animations for the
// frame. See [method@Gdk.FrameClock.get_frame_time].
func (t *FrameTimings) FrameTime() int64 {
	var arg0 *C.GdkFrameTimings

	arg0 = (*C.GdkFrameTimings)(t.Native())

	ret := C.gdk_frame_timings_get_frame_time(arg0)

	var ret0 int64

	ret0 = int64(ret)

	return ret0
}

// PredictedPresentationTime gets the predicted time at which this frame will be
// displayed.
//
// Although no predicted time may be available, if one is available, it will be
// available while the frame is being generated, in contrast to
// [method@Gdk.FrameTimings.get_presentation_time], which is only available
// after the frame has been presented.
//
// In general, if you are simply animating, you should use
// [method@Gdk.FrameClock.get_frame_time] rather than this function, but this
// function is useful for applications that want exact control over latency. For
// example, a movie player may want this information for Audio/Video
// synchronization.
func (t *FrameTimings) PredictedPresentationTime() int64 {
	var arg0 *C.GdkFrameTimings

	arg0 = (*C.GdkFrameTimings)(t.Native())

	ret := C.gdk_frame_timings_get_predicted_presentation_time(arg0)

	var ret0 int64

	ret0 = int64(ret)

	return ret0
}

// PresentationTime reurns the presentation time.
//
// This is the time at which the frame became visible to the user.
func (t *FrameTimings) PresentationTime() int64 {
	var arg0 *C.GdkFrameTimings

	arg0 = (*C.GdkFrameTimings)(t.Native())

	ret := C.gdk_frame_timings_get_presentation_time(arg0)

	var ret0 int64

	ret0 = int64(ret)

	return ret0
}

// RefreshInterval gets the natural interval between presentation times for the
// display that this frame was displayed on.
//
// Frame presentation usually happens during the “vertical blanking interval”.
func (t *FrameTimings) RefreshInterval() int64 {
	var arg0 *C.GdkFrameTimings

	arg0 = (*C.GdkFrameTimings)(t.Native())

	ret := C.gdk_frame_timings_get_refresh_interval(arg0)

	var ret0 int64

	ret0 = int64(ret)

	return ret0
}

// Ref increases the reference count of @timings.
func (t *FrameTimings) Ref() *FrameTimings {
	var arg0 *C.GdkFrameTimings

	arg0 = (*C.GdkFrameTimings)(t.Native())

	ret := C.gdk_frame_timings_ref(arg0)

	var ret0 *FrameTimings

	{
		ret0 = WrapFrameTimings(unsafe.Pointer(ret))
		runtime.SetFinalizer(ret0, func(v *FrameTimings) {
			C.free(unsafe.Pointer(v.Native()))
		})
	}

	return ret0
}

// Unref decreases the reference count of @timings.
//
// If @timings is no longer referenced, it will be freed.
func (t *FrameTimings) Unref() {
	var arg0 *C.GdkFrameTimings

	arg0 = (*C.GdkFrameTimings)(t.Native())

	C.gdk_frame_timings_unref(arg0)
}
