// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"unsafe"

	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <gdk/gdk.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gdk_frame_timings_get_type()), F: marshalFrameTimings},
	})
}

// FrameTimings: a `GdkFrameTimings` object holds timing information for a
// single frame of the application’s displays.
//
// To retrieve `GdkFrameTimings` objects, use
// [method@Gdk.FrameClock.get_timings] or
// [method@Gdk.FrameClock.get_current_timings]. The information in
// `GdkFrameTimings` is useful for precise synchronization of video with the
// event or audio streams, and for measuring quality metrics for the
// application’s display, such as latency and jitter.
type FrameTimings C.GdkFrameTimings

// WrapFrameTimings wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapFrameTimings(ptr unsafe.Pointer) *FrameTimings {
	return (*FrameTimings)(ptr)
}

func marshalFrameTimings(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return (*FrameTimings)(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (f *FrameTimings) Native() unsafe.Pointer {
	return unsafe.Pointer(f)
}

// Complete decreases the reference count of @timings.
//
// If @timings is no longer referenced, it will be freed.
func (t *FrameTimings) Complete() bool {
	var _arg0 *C.GdkFrameTimings // out
	var _cret C.gboolean         // in

	_arg0 = (*C.GdkFrameTimings)(unsafe.Pointer(t.Native()))

	_cret = C.gdk_frame_timings_get_complete(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// FrameCounter decreases the reference count of @timings.
//
// If @timings is no longer referenced, it will be freed.
func (t *FrameTimings) FrameCounter() int64 {
	var _arg0 *C.GdkFrameTimings // out
	var _cret C.gint64           // in

	_arg0 = (*C.GdkFrameTimings)(unsafe.Pointer(t.Native()))

	_cret = C.gdk_frame_timings_get_frame_counter(_arg0)

	var _gint64 int64 // out

	_gint64 = int64(_cret)

	return _gint64
}

// FrameTime decreases the reference count of @timings.
//
// If @timings is no longer referenced, it will be freed.
func (t *FrameTimings) FrameTime() int64 {
	var _arg0 *C.GdkFrameTimings // out
	var _cret C.gint64           // in

	_arg0 = (*C.GdkFrameTimings)(unsafe.Pointer(t.Native()))

	_cret = C.gdk_frame_timings_get_frame_time(_arg0)

	var _gint64 int64 // out

	_gint64 = int64(_cret)

	return _gint64
}

// PredictedPresentationTime decreases the reference count of @timings.
//
// If @timings is no longer referenced, it will be freed.
func (t *FrameTimings) PredictedPresentationTime() int64 {
	var _arg0 *C.GdkFrameTimings // out
	var _cret C.gint64           // in

	_arg0 = (*C.GdkFrameTimings)(unsafe.Pointer(t.Native()))

	_cret = C.gdk_frame_timings_get_predicted_presentation_time(_arg0)

	var _gint64 int64 // out

	_gint64 = int64(_cret)

	return _gint64
}

// PresentationTime decreases the reference count of @timings.
//
// If @timings is no longer referenced, it will be freed.
func (t *FrameTimings) PresentationTime() int64 {
	var _arg0 *C.GdkFrameTimings // out
	var _cret C.gint64           // in

	_arg0 = (*C.GdkFrameTimings)(unsafe.Pointer(t.Native()))

	_cret = C.gdk_frame_timings_get_presentation_time(_arg0)

	var _gint64 int64 // out

	_gint64 = int64(_cret)

	return _gint64
}

// RefreshInterval decreases the reference count of @timings.
//
// If @timings is no longer referenced, it will be freed.
func (t *FrameTimings) RefreshInterval() int64 {
	var _arg0 *C.GdkFrameTimings // out
	var _cret C.gint64           // in

	_arg0 = (*C.GdkFrameTimings)(unsafe.Pointer(t.Native()))

	_cret = C.gdk_frame_timings_get_refresh_interval(_arg0)

	var _gint64 int64 // out

	_gint64 = int64(_cret)

	return _gint64
}

// Ref decreases the reference count of @timings.
//
// If @timings is no longer referenced, it will be freed.
func (t *FrameTimings) Ref() *FrameTimings {
	var _arg0 *C.GdkFrameTimings // out
	var _cret *C.GdkFrameTimings // in

	_arg0 = (*C.GdkFrameTimings)(unsafe.Pointer(t.Native()))

	_cret = C.gdk_frame_timings_ref(_arg0)

	var _frameTimings *FrameTimings // out

	_frameTimings = (*FrameTimings)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(&_frameTimings, func(v **FrameTimings) {
		C.free(unsafe.Pointer(v))
	})

	return _frameTimings
}

// Unref decreases the reference count of @timings.
//
// If @timings is no longer referenced, it will be freed.
func (t *FrameTimings) Unref() {
	var _arg0 *C.GdkFrameTimings // out

	_arg0 = (*C.GdkFrameTimings)(unsafe.Pointer(t.Native()))

	C.gdk_frame_timings_unref(_arg0)
}
