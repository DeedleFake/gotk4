// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"github.com/diamondburned/gotk4/pkg/gio/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gdk/gdk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gdk_axis_use_get_type()), F: marshalAxisUse},
		{T: externglib.Type(C.gdk_crossing_mode_get_type()), F: marshalCrossingMode},
		{T: externglib.Type(C.gdk_device_pad_feature_get_type()), F: marshalDevicePadFeature},
		{T: externglib.Type(C.gdk_device_tool_type_get_type()), F: marshalDeviceToolType},
		{T: externglib.Type(C.gdk_drag_cancel_reason_get_type()), F: marshalDragCancelReason},
		{T: externglib.Type(C.gdk_event_type_get_type()), F: marshalEventType},
		{T: externglib.Type(C.gdk_fullscreen_mode_get_type()), F: marshalFullscreenMode},
		{T: externglib.Type(C.gdk_gl_error_get_type()), F: marshalGLError},
		{T: externglib.Type(C.gdk_gravity_get_type()), F: marshalGravity},
		{T: externglib.Type(C.gdk_input_source_get_type()), F: marshalInputSource},
		{T: externglib.Type(C.gdk_key_match_get_type()), F: marshalKeyMatch},
		{T: externglib.Type(C.gdk_memory_format_get_type()), F: marshalMemoryFormat},
		{T: externglib.Type(C.gdk_notify_type_get_type()), F: marshalNotifyType},
		{T: externglib.Type(C.gdk_scroll_direction_get_type()), F: marshalScrollDirection},
		{T: externglib.Type(C.gdk_subpixel_layout_get_type()), F: marshalSubpixelLayout},
		{T: externglib.Type(C.gdk_surface_edge_get_type()), F: marshalSurfaceEdge},
		{T: externglib.Type(C.gdk_touchpad_gesture_phase_get_type()), F: marshalTouchpadGesturePhase},
		{T: externglib.Type(C.gdk_vulkan_error_get_type()), F: marshalVulkanError},
		{T: externglib.Type(C.gdk_anchor_hints_get_type()), F: marshalAnchorHints},
		{T: externglib.Type(C.gdk_axis_flags_get_type()), F: marshalAxisFlags},
		{T: externglib.Type(C.gdk_drag_action_get_type()), F: marshalDragAction},
		{T: externglib.Type(C.gdk_frame_clock_phase_get_type()), F: marshalFrameClockPhase},
		{T: externglib.Type(C.gdk_modifier_type_get_type()), F: marshalModifierType},
		{T: externglib.Type(C.gdk_paintable_flags_get_type()), F: marshalPaintableFlags},
		{T: externglib.Type(C.gdk_seat_capabilities_get_type()), F: marshalSeatCapabilities},
		{T: externglib.Type(C.gdk_toplevel_state_get_type()), F: marshalToplevelState},
		{T: externglib.Type(C.gdk_cairo_context_get_type()), F: marshalCairoContext},
		{T: externglib.Type(C.gdk_clipboard_get_type()), F: marshalClipboard},
		{T: externglib.Type(C.gdk_content_deserializer_get_type()), F: marshalContentDeserializer},
		{T: externglib.Type(C.gdk_content_serializer_get_type()), F: marshalContentSerializer},
		{T: externglib.Type(C.gdk_cursor_get_type()), F: marshalCursor},
		{T: externglib.Type(C.gdk_device_get_type()), F: marshalDevice},
		{T: externglib.Type(C.gdk_device_tool_get_type()), F: marshalDeviceTool},
		{T: externglib.Type(C.gdk_display_get_type()), F: marshalDisplay},
		{T: externglib.Type(C.gdk_display_manager_get_type()), F: marshalDisplayManager},
		{T: externglib.Type(C.gdk_drag_get_type()), F: marshalDrag},
		{T: externglib.Type(C.gdk_draw_context_get_type()), F: marshalDrawContext},
		{T: externglib.Type(C.gdk_drop_get_type()), F: marshalDrop},
		{T: externglib.Type(C.gdk_gl_context_get_type()), F: marshalGLContext},
		{T: externglib.Type(C.gdk_seat_get_type()), F: marshalSeat},
		{T: externglib.Type(C.gdk_vulkan_context_get_type()), F: marshalVulkanContext},
	})
}

// AxisUse defines how device axes are interpreted by GTK.
//
// Note that the X and Y axes are not really needed; pointer devices report
// their location via the x/y members of events regardless. Whether X and Y are
// present as axes depends on the GDK backend.
type AxisUse int

const (
	// AxisUseIgnore: the axis is ignored.
	AxisUseIgnore AxisUse = 0
	// AxisUseX: the axis is used as the x axis.
	AxisUseX AxisUse = 1
	// AxisUseY: the axis is used as the y axis.
	AxisUseY AxisUse = 2
	// AxisUseDeltaX: the axis is used as the scroll x delta
	AxisUseDeltaX AxisUse = 3
	// AxisUseDeltaY: the axis is used as the scroll y delta
	AxisUseDeltaY AxisUse = 4
	// AxisUsePressure: the axis is used for pressure information.
	AxisUsePressure AxisUse = 5
	// AxisUseXtilt: the axis is used for x tilt information.
	AxisUseXtilt AxisUse = 6
	// AxisUseYtilt: the axis is used for y tilt information.
	AxisUseYtilt AxisUse = 7
	// AxisUseWheel: the axis is used for wheel information.
	AxisUseWheel AxisUse = 8
	// AxisUseDistance: the axis is used for pen/tablet distance information
	AxisUseDistance AxisUse = 9
	// AxisUseRotation: the axis is used for pen rotation information
	AxisUseRotation AxisUse = 10
	// AxisUseSlider: the axis is used for pen slider information
	AxisUseSlider AxisUse = 11
	// AxisUseLast: a constant equal to the numerically highest axis value.
	AxisUseLast AxisUse = 12
)

func marshalAxisUse(p uintptr) (interface{}, error) {
	return AxisUse(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// CrossingMode specifies the crossing mode for enter and leave events.
type CrossingMode int

const (
	// CrossingModeNormal: crossing because of pointer motion.
	CrossingModeNormal CrossingMode = 0
	// CrossingModeGrab: crossing because a grab is activated.
	CrossingModeGrab CrossingMode = 1
	// CrossingModeUngrab: crossing because a grab is deactivated.
	CrossingModeUngrab CrossingMode = 2
	// CrossingModeGTKGrab: crossing because a GTK grab is activated.
	CrossingModeGTKGrab CrossingMode = 3
	// CrossingModeGTKUngrab: crossing because a GTK grab is deactivated.
	CrossingModeGTKUngrab CrossingMode = 4
	// CrossingModeStateChanged: crossing because a GTK widget changed state
	// (e.g. sensitivity).
	CrossingModeStateChanged CrossingMode = 5
	// CrossingModeTouchBegin: crossing because a touch sequence has begun, this
	// event is synthetic as the pointer might have not left the surface.
	CrossingModeTouchBegin CrossingMode = 6
	// CrossingModeTouchEnd: crossing because a touch sequence has ended, this
	// event is synthetic as the pointer might have not left the surface.
	CrossingModeTouchEnd CrossingMode = 7
	// CrossingModeDeviceSwitch: crossing because of a device switch (i.e. a
	// mouse taking control of the pointer after a touch device), this event is
	// synthetic as the pointer didnâ€™t leave the surface.
	CrossingModeDeviceSwitch CrossingMode = 8
)

func marshalCrossingMode(p uintptr) (interface{}, error) {
	return CrossingMode(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// DevicePadFeature: a pad feature.
type DevicePadFeature int

const (
	// DevicePadFeatureButton: a button
	DevicePadFeatureButton DevicePadFeature = 0
	// DevicePadFeatureRing: a ring-shaped interactive area
	DevicePadFeatureRing DevicePadFeature = 1
	// DevicePadFeatureStrip: a straight interactive area
	DevicePadFeatureStrip DevicePadFeature = 2
)

func marshalDevicePadFeature(p uintptr) (interface{}, error) {
	return DevicePadFeature(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// DeviceToolType indicates the specific type of tool being used being a tablet.
// Such as an airbrush, pencil, etc.
type DeviceToolType int

const (
	// DeviceToolTypeUnknown: tool is of an unknown type.
	DeviceToolTypeUnknown DeviceToolType = 0
	// DeviceToolTypePen: tool is a standard tablet stylus.
	DeviceToolTypePen DeviceToolType = 1
	// DeviceToolTypeEraser: tool is standard tablet eraser.
	DeviceToolTypeEraser DeviceToolType = 2
	// DeviceToolTypeBrush: tool is a brush stylus.
	DeviceToolTypeBrush DeviceToolType = 3
	// DeviceToolTypePencil: tool is a pencil stylus.
	DeviceToolTypePencil DeviceToolType = 4
	// DeviceToolTypeAirbrush: tool is an airbrush stylus.
	DeviceToolTypeAirbrush DeviceToolType = 5
	// DeviceToolTypeMouse: tool is a mouse.
	DeviceToolTypeMouse DeviceToolType = 6
	// DeviceToolTypeLens: tool is a lens cursor.
	DeviceToolTypeLens DeviceToolType = 7
)

func marshalDeviceToolType(p uintptr) (interface{}, error) {
	return DeviceToolType(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// DragCancelReason: used in `GdkDrag` to the reason of a cancelled DND
// operation.
type DragCancelReason int

const (
	// DragCancelReasonNoTarget: there is no suitable drop target.
	DragCancelReasonNoTarget DragCancelReason = 0
	// DragCancelReasonUserCancelled: drag cancelled by the user
	DragCancelReasonUserCancelled DragCancelReason = 1
	// DragCancelReasonError: unspecified error.
	DragCancelReasonError DragCancelReason = 2
)

func marshalDragCancelReason(p uintptr) (interface{}, error) {
	return DragCancelReason(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// EventType specifies the type of the event.
type EventType int

const (
	// EventTypeDelete: the window manager has requested that the toplevel
	// surface be hidden or destroyed, usually when the user clicks on a special
	// icon in the title bar.
	EventTypeDelete EventType = 0
	// EventTypeMotionNotify: the pointer (usually a mouse) has moved.
	EventTypeMotionNotify EventType = 1
	// EventTypeButtonPress: a mouse button has been pressed.
	EventTypeButtonPress EventType = 2
	// EventTypeButtonRelease: a mouse button has been released.
	EventTypeButtonRelease EventType = 3
	// EventTypeKeyPress: a key has been pressed.
	EventTypeKeyPress EventType = 4
	// EventTypeKeyRelease: a key has been released.
	EventTypeKeyRelease EventType = 5
	// EventTypeEnterNotify: the pointer has entered the surface.
	EventTypeEnterNotify EventType = 6
	// EventTypeLeaveNotify: the pointer has left the surface.
	EventTypeLeaveNotify EventType = 7
	// EventTypeFocusChange: the keyboard focus has entered or left the surface.
	EventTypeFocusChange EventType = 8
	// EventTypeProximityIn: an input device has moved into contact with a
	// sensing surface (e.g. a touchscreen or graphics tablet).
	EventTypeProximityIn EventType = 9
	// EventTypeProximityOut: an input device has moved out of contact with a
	// sensing surface.
	EventTypeProximityOut EventType = 10
	// EventTypeDragEnter: the mouse has entered the surface while a drag is in
	// progress.
	EventTypeDragEnter EventType = 11
	// EventTypeDragLeave: the mouse has left the surface while a drag is in
	// progress.
	EventTypeDragLeave EventType = 12
	// EventTypeDragMotion: the mouse has moved in the surface while a drag is
	// in progress.
	EventTypeDragMotion EventType = 13
	// EventTypeDropStart: a drop operation onto the surface has started.
	EventTypeDropStart EventType = 14
	// EventTypeScroll: the scroll wheel was turned
	EventTypeScroll EventType = 15
	// EventTypeGrabBroken: a pointer or keyboard grab was broken.
	EventTypeGrabBroken EventType = 16
	// EventTypeTouchBegin: a new touch event sequence has just started.
	EventTypeTouchBegin EventType = 17
	// EventTypeTouchUpdate: a touch event sequence has been updated.
	EventTypeTouchUpdate EventType = 18
	// EventTypeTouchEnd: a touch event sequence has finished.
	EventTypeTouchEnd EventType = 19
	// EventTypeTouchCancel: a touch event sequence has been canceled.
	EventTypeTouchCancel EventType = 20
	// EventTypeTouchpadSwipe: a touchpad swipe gesture event, the current state
	// is determined by its phase field.
	EventTypeTouchpadSwipe EventType = 21
	// EventTypeTouchpadPinch: a touchpad pinch gesture event, the current state
	// is determined by its phase field.
	EventTypeTouchpadPinch EventType = 22
	// EventTypePadButtonPress: a tablet pad button press event.
	EventTypePadButtonPress EventType = 23
	// EventTypePadButtonRelease: a tablet pad button release event.
	EventTypePadButtonRelease EventType = 24
	// EventTypePadRing: a tablet pad axis event from a "ring".
	EventTypePadRing EventType = 25
	// EventTypePadStrip: a tablet pad axis event from a "strip".
	EventTypePadStrip EventType = 26
	// EventTypePadGroupMode: a tablet pad group mode change.
	EventTypePadGroupMode EventType = 27
	// EventTypeEventLast marks the end of the GdkEventType enumeration.
	EventTypeEventLast EventType = 28
)

func marshalEventType(p uintptr) (interface{}, error) {
	return EventType(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// FullscreenMode indicates which monitor a surface should span over when in
// fullscreen mode.
type FullscreenMode int

const (
	// FullscreenModeCurrentMonitor: fullscreen on current monitor only.
	FullscreenModeCurrentMonitor FullscreenMode = 0
	// FullscreenModeAllMonitors: span across all monitors when fullscreen.
	FullscreenModeAllMonitors FullscreenMode = 1
)

func marshalFullscreenMode(p uintptr) (interface{}, error) {
	return FullscreenMode(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// GLError: error enumeration for `GdkGLContext`.
type GLError int

const (
	// GLErrorNotAvailable: openGL support is not available
	GLErrorNotAvailable GLError = 0
	// GLErrorUnsupportedFormat: the requested visual format is not supported
	GLErrorUnsupportedFormat GLError = 1
	// GLErrorUnsupportedProfile: the requested profile is not supported
	GLErrorUnsupportedProfile GLError = 2
	// GLErrorCompilationFailed: the shader compilation failed
	GLErrorCompilationFailed GLError = 3
	// GLErrorLinkFailed: the shader linking failed
	GLErrorLinkFailed GLError = 4
)

func marshalGLError(p uintptr) (interface{}, error) {
	return GLError(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// Gravity defines the reference point of a surface and is used in PopupLayout.
type Gravity int

const (
	// GravityNorthWest: the reference point is at the top left corner.
	GravityNorthWest Gravity = 1
	// GravityNorth: the reference point is in the middle of the top edge.
	GravityNorth Gravity = 2
	// GravityNorthEast: the reference point is at the top right corner.
	GravityNorthEast Gravity = 3
	// GravityWest: the reference point is at the middle of the left edge.
	GravityWest Gravity = 4
	// GravityCenter: the reference point is at the center of the surface.
	GravityCenter Gravity = 5
	// GravityEast: the reference point is at the middle of the right edge.
	GravityEast Gravity = 6
	// GravitySouthWest: the reference point is at the lower left corner.
	GravitySouthWest Gravity = 7
	// GravitySouth: the reference point is at the middle of the lower edge.
	GravitySouth Gravity = 8
	// GravitySouthEast: the reference point is at the lower right corner.
	GravitySouthEast Gravity = 9
	// GravityStatic: the reference point is at the top left corner of the
	// surface itself, ignoring window manager decorations.
	GravityStatic Gravity = 10
)

func marshalGravity(p uintptr) (interface{}, error) {
	return Gravity(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// InputSource: an enumeration describing the type of an input device in general
// terms.
type InputSource int

const (
	// InputSourceMouse: the device is a mouse. (This will be reported for the
	// core pointer, even if it is something else, such as a trackball.)
	InputSourceMouse InputSource = 0
	// InputSourcePen: the device is a stylus of a graphics tablet or similar
	// device.
	InputSourcePen InputSource = 1
	// InputSourceKeyboard: the device is a keyboard.
	InputSourceKeyboard InputSource = 2
	// InputSourceTouchscreen: the device is a direct-input touch device, such
	// as a touchscreen or tablet
	InputSourceTouchscreen InputSource = 3
	// InputSourceTouchpad: the device is an indirect touch device, such as a
	// touchpad
	InputSourceTouchpad InputSource = 4
	// InputSourceTrackpoint: the device is a trackpoint
	InputSourceTrackpoint InputSource = 5
	// InputSourceTabletPad: the device is a "pad", a collection of buttons,
	// rings and strips found in drawing tablets
	InputSourceTabletPad InputSource = 6
)

func marshalInputSource(p uintptr) (interface{}, error) {
	return InputSource(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// KeyMatch describes how well an event matches a given keyval and modifiers.
//
// `GdkKeyMatch` values are returned by [method@Gdk.KeyEvent.matches].
type KeyMatch int

const (
	// KeyMatchNone: the key event does not match
	KeyMatchNone KeyMatch = 0
	// KeyMatchPartial: the key event matches if keyboard state (specifically,
	// the currently active group) is ignored
	KeyMatchPartial KeyMatch = 1
	// KeyMatchExact: the key event matches
	KeyMatchExact KeyMatch = 2
)

func marshalKeyMatch(p uintptr) (interface{}, error) {
	return KeyMatch(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// MemoryFormat: `GdkMemoryFormat` describes a format that bytes can have in
// memory.
//
// It describes formats by listing the contents of the memory passed to it. So
// GDK_MEMORY_A8R8G8B8 will be 1 byte (8 bits) of alpha, followed by a byte each
// of red, green and blue. It is not endian-dependent, so CAIRO_FORMAT_ARGB32 is
// represented by different `GdkMemoryFormats` on architectures with different
// endiannesses.
//
// Its naming is modelled after VkFormat (see
// https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.htmlFormat for
// details).
type MemoryFormat int

const (
	// MemoryFormatB8G8R8A8Premultiplied: 4 bytes; for blue, green, red, alpha.
	// The color values are premultiplied with the alpha value.
	MemoryFormatB8G8R8A8Premultiplied MemoryFormat = 0
	// MemoryFormatA8R8G8B8Premultiplied: 4 bytes; for alpha, red, green, blue.
	// The color values are premultiplied with the alpha value.
	MemoryFormatA8R8G8B8Premultiplied MemoryFormat = 1
	// MemoryFormatR8G8B8A8Premultiplied: 4 bytes; for red, green, blue, alpha
	// The color values are premultiplied with the alpha value.
	MemoryFormatR8G8B8A8Premultiplied MemoryFormat = 2
	// MemoryFormatB8G8R8A8: 4 bytes; for blue, green, red, alpha.
	MemoryFormatB8G8R8A8 MemoryFormat = 3
	// MemoryFormatA8R8G8B8: 4 bytes; for alpha, red, green, blue.
	MemoryFormatA8R8G8B8 MemoryFormat = 4
	// MemoryFormatR8G8B8A8: 4 bytes; for red, green, blue, alpha.
	MemoryFormatR8G8B8A8 MemoryFormat = 5
	// MemoryFormatA8B8G8R8: 4 bytes; for alpha, blue, green, red.
	MemoryFormatA8B8G8R8 MemoryFormat = 6
	// MemoryFormatR8G8B8: 3 bytes; for red, green, blue. The data is opaque.
	MemoryFormatR8G8B8 MemoryFormat = 7
	// MemoryFormatB8G8R8: 3 bytes; for blue, green, red. The data is opaque.
	MemoryFormatB8G8R8 MemoryFormat = 8
	// MemoryFormatNFormats: the number of formats. This value will change as
	// more formats get added, so do not rely on its concrete integer.
	MemoryFormatNFormats MemoryFormat = 9
)

func marshalMemoryFormat(p uintptr) (interface{}, error) {
	return MemoryFormat(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// NotifyType specifies the kind of crossing for enter and leave events.
//
// See the X11 protocol specification of LeaveNotify for full details of
// crossing event generation.
type NotifyType int

const (
	// NotifyTypeAncestor: the surface is entered from an ancestor or left
	// towards an ancestor.
	NotifyTypeAncestor NotifyType = 0
	// NotifyTypeVirtual: the pointer moves between an ancestor and an inferior
	// of the surface.
	NotifyTypeVirtual NotifyType = 1
	// NotifyTypeInferior: the surface is entered from an inferior or left
	// towards an inferior.
	NotifyTypeInferior NotifyType = 2
	// NotifyTypeNonlinear: the surface is entered from or left towards a
	// surface which is neither an ancestor nor an inferior.
	NotifyTypeNonlinear NotifyType = 3
	// NotifyTypeNonlinearVirtual: the pointer moves between two surfaces which
	// are not ancestors of each other and the surface is part of the ancestor
	// chain between one of these surfaces and their least common ancestor.
	NotifyTypeNonlinearVirtual NotifyType = 4
	// NotifyTypeUnknown: an unknown type of enter/leave event occurred.
	NotifyTypeUnknown NotifyType = 5
)

func marshalNotifyType(p uintptr) (interface{}, error) {
	return NotifyType(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// ScrollDirection specifies the direction for scroll events.
type ScrollDirection int

const (
	// ScrollDirectionUp: the surface is scrolled up.
	ScrollDirectionUp ScrollDirection = 0
	// ScrollDirectionDown: the surface is scrolled down.
	ScrollDirectionDown ScrollDirection = 1
	// ScrollDirectionLeft: the surface is scrolled to the left.
	ScrollDirectionLeft ScrollDirection = 2
	// ScrollDirectionRight: the surface is scrolled to the right.
	ScrollDirectionRight ScrollDirection = 3
	// ScrollDirectionSmooth: the scrolling is determined by the delta values in
	// scroll events. See gdk_scroll_event_get_deltas()
	ScrollDirectionSmooth ScrollDirection = 4
)

func marshalScrollDirection(p uintptr) (interface{}, error) {
	return ScrollDirection(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// SubpixelLayout: this enumeration describes how the red, green and blue
// components of physical pixels on an output device are laid out.
type SubpixelLayout int

const (
	// SubpixelLayoutUnknown: the layout is not known
	SubpixelLayoutUnknown SubpixelLayout = 0
	// SubpixelLayoutNone: not organized in this way
	SubpixelLayoutNone SubpixelLayout = 1
	// SubpixelLayoutHorizontalRGB: the layout is horizontal, the order is RGB
	SubpixelLayoutHorizontalRGB SubpixelLayout = 2
	// SubpixelLayoutHorizontalBGR: the layout is horizontal, the order is BGR
	SubpixelLayoutHorizontalBGR SubpixelLayout = 3
	// SubpixelLayoutVerticalRGB: the layout is vertical, the order is RGB
	SubpixelLayoutVerticalRGB SubpixelLayout = 4
	// SubpixelLayoutVerticalBGR: the layout is vertical, the order is BGR
	SubpixelLayoutVerticalBGR SubpixelLayout = 5
)

func marshalSubpixelLayout(p uintptr) (interface{}, error) {
	return SubpixelLayout(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// SurfaceEdge determines a surface edge or corner.
type SurfaceEdge int

const (
	// SurfaceEdgeNorthWest: the top left corner.
	SurfaceEdgeNorthWest SurfaceEdge = 0
	// SurfaceEdgeNorth: the top edge.
	SurfaceEdgeNorth SurfaceEdge = 1
	// SurfaceEdgeNorthEast: the top right corner.
	SurfaceEdgeNorthEast SurfaceEdge = 2
	// SurfaceEdgeWest: the left edge.
	SurfaceEdgeWest SurfaceEdge = 3
	// SurfaceEdgeEast: the right edge.
	SurfaceEdgeEast SurfaceEdge = 4
	// SurfaceEdgeSouthWest: the lower left corner.
	SurfaceEdgeSouthWest SurfaceEdge = 5
	// SurfaceEdgeSouth: the lower edge.
	SurfaceEdgeSouth SurfaceEdge = 6
	// SurfaceEdgeSouthEast: the lower right corner.
	SurfaceEdgeSouthEast SurfaceEdge = 7
)

func marshalSurfaceEdge(p uintptr) (interface{}, error) {
	return SurfaceEdge(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// TouchpadGesturePhase specifies the current state of a touchpad gesture.
//
// All gestures are guaranteed to begin with an event with phase
// GDK_TOUCHPAD_GESTURE_PHASE_BEGIN, followed by 0 or several events with phase
// GDK_TOUCHPAD_GESTURE_PHASE_UPDATE.
//
// A finished gesture may have 2 possible outcomes, an event with phase
// GDK_TOUCHPAD_GESTURE_PHASE_END will be emitted when the gesture is considered
// successful, this should be used as the hint to perform any permanent changes.
//
// Cancelled gestures may be so for a variety of reasons, due to hardware or the
// compositor, or due to the gesture recognition layers hinting the gesture did
// not finish resolutely (eg. a 3rd finger being added during a pinch gesture).
// In these cases, the last event will report the phase
// GDK_TOUCHPAD_GESTURE_PHASE_CANCEL, this should be used as a hint to undo any
// visible/permanent changes that were done throughout the progress of the
// gesture.
type TouchpadGesturePhase int

const (
	// TouchpadGesturePhaseBegin: the gesture has begun.
	TouchpadGesturePhaseBegin TouchpadGesturePhase = 0
	// TouchpadGesturePhaseUpdate: the gesture has been updated.
	TouchpadGesturePhaseUpdate TouchpadGesturePhase = 1
	// TouchpadGesturePhaseEnd: the gesture was finished, changes should be
	// permanently applied.
	TouchpadGesturePhaseEnd TouchpadGesturePhase = 2
	// TouchpadGesturePhaseCancel: the gesture was cancelled, all changes should
	// be undone.
	TouchpadGesturePhaseCancel TouchpadGesturePhase = 3
)

func marshalTouchpadGesturePhase(p uintptr) (interface{}, error) {
	return TouchpadGesturePhase(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// VulkanError: error enumeration for VulkanContext.
type VulkanError int

const (
	// VulkanErrorUnsupported: vulkan is not supported on this backend or has
	// not been compiled in.
	VulkanErrorUnsupported VulkanError = 0
	// VulkanErrorNotAvailable: vulkan support is not available on this Surface
	VulkanErrorNotAvailable VulkanError = 1
)

func marshalVulkanError(p uintptr) (interface{}, error) {
	return VulkanError(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// AnchorHints: positioning hints for aligning a surface relative to a
// rectangle.
//
// These hints determine how the surface should be positioned in the case that
// the surface would fall off-screen if placed in its ideal position.
//
// For example, GDK_ANCHOR_FLIP_X will replace GDK_GRAVITY_NORTH_WEST with
// GDK_GRAVITY_NORTH_EAST and vice versa if the surface extends beyond the left
// or right edges of the monitor.
//
// If GDK_ANCHOR_SLIDE_X is set, the surface can be shifted horizontally to fit
// on-screen. If GDK_ANCHOR_RESIZE_X is set, the surface can be shrunken
// horizontally to fit.
//
// In general, when multiple flags are set, flipping should take precedence over
// sliding, which should take precedence over resizing.
type AnchorHints int

const (
	// AnchorHintsFlipX: allow flipping anchors horizontally
	AnchorHintsFlipX AnchorHints = 1
	// AnchorHintsFlipY: allow flipping anchors vertically
	AnchorHintsFlipY AnchorHints = 2
	// AnchorHintsSlideX: allow sliding surface horizontally
	AnchorHintsSlideX AnchorHints = 4
	// AnchorHintsSlideY: allow sliding surface vertically
	AnchorHintsSlideY AnchorHints = 8
	// AnchorHintsResizeX: allow resizing surface horizontally
	AnchorHintsResizeX AnchorHints = 16
	// AnchorHintsResizeY: allow resizing surface vertically
	AnchorHintsResizeY AnchorHints = 32
	// AnchorHintsFlip: allow flipping anchors on both axes
	AnchorHintsFlip AnchorHints = 3
	// AnchorHintsSlide: allow sliding surface on both axes
	AnchorHintsSlide AnchorHints = 12
	// AnchorHintsResize: allow resizing surface on both axes
	AnchorHintsResize AnchorHints = 48
)

func marshalAnchorHints(p uintptr) (interface{}, error) {
	return AnchorHints(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// AxisFlags flags describing the current capabilities of a device/tool.
type AxisFlags int

const (
	// AxisFlagsX: x axis is present
	AxisFlagsX AxisFlags = 2
	// AxisFlagsY: y axis is present
	AxisFlagsY AxisFlags = 4
	// AxisFlagsDeltaX: scroll X delta axis is present
	AxisFlagsDeltaX AxisFlags = 8
	// AxisFlagsDeltaY: scroll Y delta axis is present
	AxisFlagsDeltaY AxisFlags = 16
	// AxisFlagsPressure: pressure axis is present
	AxisFlagsPressure AxisFlags = 32
	// AxisFlagsXtilt: x tilt axis is present
	AxisFlagsXtilt AxisFlags = 64
	// AxisFlagsYtilt: y tilt axis is present
	AxisFlagsYtilt AxisFlags = 128
	// AxisFlagsWheel: wheel axis is present
	AxisFlagsWheel AxisFlags = 256
	// AxisFlagsDistance: distance axis is present
	AxisFlagsDistance AxisFlags = 512
	// AxisFlagsRotation z-axis rotation is present
	AxisFlagsRotation AxisFlags = 1024
	// AxisFlagsSlider: slider axis is present
	AxisFlagsSlider AxisFlags = 2048
)

func marshalAxisFlags(p uintptr) (interface{}, error) {
	return AxisFlags(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// DragAction: used in `GdkDrop` and `GdkDrag` to indicate the actions that the
// destination can and should do with the dropped data.
type DragAction int

const (
	// DragActionCopy: copy the data.
	DragActionCopy DragAction = 1
	// DragActionMove: move the data, i.e. first copy it, then delete it from
	// the source using the DELETE target of the X selection protocol.
	DragActionMove DragAction = 2
	// DragActionLink: add a link to the data. Note that this is only useful if
	// source and destination agree on what it means, and is not supported on
	// all platforms.
	DragActionLink DragAction = 4
	// DragActionAsk: ask the user what to do with the data.
	DragActionAsk DragAction = 8
)

func marshalDragAction(p uintptr) (interface{}, error) {
	return DragAction(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// FrameClockPhase: used to represent the different paint clock phases that can
// be requested.
//
// The elements of the enumeration correspond to the signals of `GdkFrameClock`.
type FrameClockPhase int

const (
	// FrameClockPhaseNone: no phase
	FrameClockPhaseNone FrameClockPhase = 0
	// FrameClockPhaseFlushEvents corresponds to GdkFrameClock::flush-events.
	// Should not be handled by applications.
	FrameClockPhaseFlushEvents FrameClockPhase = 1
	// FrameClockPhaseBeforePaint corresponds to GdkFrameClock::before-paint.
	// Should not be handled by applications.
	FrameClockPhaseBeforePaint FrameClockPhase = 2
	// FrameClockPhaseUpdate corresponds to GdkFrameClock::update.
	FrameClockPhaseUpdate FrameClockPhase = 4
	// FrameClockPhaseLayout corresponds to GdkFrameClock::layout. Should not be
	// handled by applicatiosn.
	FrameClockPhaseLayout FrameClockPhase = 8
	// FrameClockPhasePaint corresponds to GdkFrameClock::paint.
	FrameClockPhasePaint FrameClockPhase = 16
	// FrameClockPhaseResumeEvents corresponds to GdkFrameClock::resume-events.
	// Should not be handled by applications.
	FrameClockPhaseResumeEvents FrameClockPhase = 32
	// FrameClockPhaseAfterPaint corresponds to GdkFrameClock::after-paint.
	// Should not be handled by applications.
	FrameClockPhaseAfterPaint FrameClockPhase = 64
)

func marshalFrameClockPhase(p uintptr) (interface{}, error) {
	return FrameClockPhase(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// ModifierType flags to indicate the state of modifier keys and mouse buttons
// in events.
//
// Typical modifier keys are Shift, Control, Meta, Super, Hyper, Alt, Compose,
// Apple, CapsLock or ShiftLock.
//
// Note that GDK may add internal values to events which include values outside
// of this enumeration. Your code should preserve and ignore them. You can use
// GDK_MODIFIER_MASK to remove all private values.
type ModifierType int

const (
	// ModifierTypeShiftMask: the Shift key.
	ModifierTypeShiftMask ModifierType = 1
	// ModifierTypeLockMask: a Lock key (depending on the modifier mapping of
	// the X server this may either be CapsLock or ShiftLock).
	ModifierTypeLockMask ModifierType = 2
	// ModifierTypeControlMask: the Control key.
	ModifierTypeControlMask ModifierType = 4
	// ModifierTypeAltMask: the fourth modifier key (it depends on the modifier
	// mapping of the X server which key is interpreted as this modifier, but
	// normally it is the Alt key).
	ModifierTypeAltMask ModifierType = 8
	// ModifierTypeButton1Mask: the first mouse button.
	ModifierTypeButton1Mask ModifierType = 256
	// ModifierTypeButton2Mask: the second mouse button.
	ModifierTypeButton2Mask ModifierType = 512
	// ModifierTypeButton3Mask: the third mouse button.
	ModifierTypeButton3Mask ModifierType = 1024
	// ModifierTypeButton4Mask: the fourth mouse button.
	ModifierTypeButton4Mask ModifierType = 2048
	// ModifierTypeButton5Mask: the fifth mouse button.
	ModifierTypeButton5Mask ModifierType = 4096
	// ModifierTypeSuperMask: the Super modifier
	ModifierTypeSuperMask ModifierType = 67108864
	// ModifierTypeHyperMask: the Hyper modifier
	ModifierTypeHyperMask ModifierType = 134217728
	// ModifierTypeMetaMask: the Meta modifier
	ModifierTypeMetaMask ModifierType = 268435456
)

func marshalModifierType(p uintptr) (interface{}, error) {
	return ModifierType(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// PaintableFlags flags about a paintable object.
//
// Implementations use these for optimizations such as caching.
type PaintableFlags int

const (
	// PaintableFlagsSize: the size is immutable. The
	// [signal@GdkPaintable::invalidate-size] signal will never be emitted.
	PaintableFlagsSize PaintableFlags = 1
	// PaintableFlagsContents: the content is immutable. The
	// [signal@GdkPaintable::invalidate-contents] signal will never be emitted.
	PaintableFlagsContents PaintableFlags = 2
)

func marshalPaintableFlags(p uintptr) (interface{}, error) {
	return PaintableFlags(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// SeatCapabilities flags describing the seat capabilities.
type SeatCapabilities int

const (
	// SeatCapabilitiesNone: no input capabilities
	SeatCapabilitiesNone SeatCapabilities = 0
	// SeatCapabilitiesPointer: the seat has a pointer (e.g. mouse)
	SeatCapabilitiesPointer SeatCapabilities = 1
	// SeatCapabilitiesTouch: the seat has touchscreen(s) attached
	SeatCapabilitiesTouch SeatCapabilities = 2
	// SeatCapabilitiesTabletStylus: the seat has drawing tablet(s) attached
	SeatCapabilitiesTabletStylus SeatCapabilities = 4
	// SeatCapabilitiesKeyboard: the seat has keyboard(s) attached
	SeatCapabilitiesKeyboard SeatCapabilities = 8
	// SeatCapabilitiesTabletPad: the seat has drawing tablet pad(s) attached
	SeatCapabilitiesTabletPad SeatCapabilities = 16
	// SeatCapabilitiesAllPointing: the union of all pointing capabilities
	SeatCapabilitiesAllPointing SeatCapabilities = 7
	// SeatCapabilitiesAll: the union of all capabilities
	SeatCapabilitiesAll SeatCapabilities = 15
)

func marshalSeatCapabilities(p uintptr) (interface{}, error) {
	return SeatCapabilities(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// ToplevelState specifies the state of a toplevel surface.
//
// On platforms that support information about individual edges, the
// GDK_TOPLEVEL_STATE_TILED state will be set whenever any of the individual
// tiled states is set. On platforms that lack that support, the tiled state
// will give an indication of tiledness without any of the per-edge states being
// set.
type ToplevelState int

const (
	// ToplevelStateMinimized: the surface is minimized
	ToplevelStateMinimized ToplevelState = 1
	// ToplevelStateMaximized: the surface is maximized
	ToplevelStateMaximized ToplevelState = 2
	// ToplevelStateSticky: the surface is sticky
	ToplevelStateSticky ToplevelState = 4
	// ToplevelStateFullscreen: the surface is maximized without decorations
	ToplevelStateFullscreen ToplevelState = 8
	// ToplevelStateAbove: the surface is kept above other surfaces
	ToplevelStateAbove ToplevelState = 16
	// ToplevelStateBelow: the surface is kept below other surfaces
	ToplevelStateBelow ToplevelState = 32
	// ToplevelStateFocused: the surface is presented as focused (with active
	// decorations)
	ToplevelStateFocused ToplevelState = 64
	// ToplevelStateTiled: the surface is in a tiled state
	ToplevelStateTiled ToplevelState = 128
	// ToplevelStateTopTiled: whether the top edge is tiled
	ToplevelStateTopTiled ToplevelState = 256
	// ToplevelStateTopResizable: whether the top edge is resizable
	ToplevelStateTopResizable ToplevelState = 512
	// ToplevelStateRightTiled: whether the right edge is tiled
	ToplevelStateRightTiled ToplevelState = 1024
	// ToplevelStateRightResizable: whether the right edge is resizable
	ToplevelStateRightResizable ToplevelState = 2048
	// ToplevelStateBottomTiled: whether the bottom edge is tiled
	ToplevelStateBottomTiled ToplevelState = 4096
	// ToplevelStateBottomResizable: whether the bottom edge is resizable
	ToplevelStateBottomResizable ToplevelState = 8192
	// ToplevelStateLeftTiled: whether the left edge is tiled
	ToplevelStateLeftTiled ToplevelState = 16384
	// ToplevelStateLeftResizable: whether the left edge is resizable
	ToplevelStateLeftResizable ToplevelState = 32768
)

func marshalToplevelState(p uintptr) (interface{}, error) {
	return ToplevelState(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// AppLaunchContext: `GdkAppLaunchContext` handles launching an application in a
// graphical context.
//
// It is an implementation of `GAppLaunchContext` that provides startup
// notification and allows to launch applications on a specific screen or
// workspace.
//
//
// Launching an application
//
// â€œ`c GdkAppLaunchContext *context;
//
// context = gdk_display_get_app_launch_context (display);
//
// gdk_app_launch_context_set_display (display);
// gdk_app_launch_context_set_timestamp (gdk_event_get_time (event));
//
// if (!g_app_info_launch_default_for_uri ("http://www.gtk.org", context,
// &error)) g_warning ("Launching failed: s\n", error->message);
//
// g_object_unref (context); â€œ`
type AppLaunchContext interface {
	gio.AppLaunchContext

	// SetDesktop sets the workspace on which applications will be launched.
	//
	// This only works when running under a window manager that supports
	// multiple workspaces, as described in the Extended Window Manager Hints
	// (http://www.freedesktop.org/Standards/wm-spec).
	//
	// When the workspace is not specified or @desktop is set to -1, it is up to
	// the window manager to pick one, typically it will be the current
	// workspace.
	SetDesktop(desktop int)
	// SetIcon sets the icon for applications that are launched with this
	// context.
	//
	// Window Managers can use this information when displaying startup
	// notification.
	//
	// See also [method@Gdk.AppLaunchContext.set_icon_name].
	SetIcon(icon gio.Icon)
	// SetIconName sets the icon for applications that are launched with this
	// context.
	//
	// The @icon_name will be interpreted in the same way as the Icon field in
	// desktop files. See also [method@Gdk.AppLaunchContext.set_icon()].
	//
	// If both @icon and @icon_name are set, the @icon_name takes priority. If
	// neither @icon or @icon_name is set, the icon is taken from either the
	// file that is passed to launched application or from the `GAppInfo` for
	// the launched application itself.
	SetIconName(iconName string)
	// SetTimestamp sets the timestamp of @context.
	//
	// The timestamp should ideally be taken from the event that triggered the
	// launch.
	//
	// Window managers can use this information to avoid moving the focus to the
	// newly launched application when the user is busy typing in another
	// window. This is also known as 'focus stealing prevention'.
	SetTimestamp(timestamp uint32)
}

// appLaunchContext implements the AppLaunchContext interface.
type appLaunchContext struct {
	gio.AppLaunchContext
}

var _ AppLaunchContext = (*appLaunchContext)(nil)

// WrapAppLaunchContext wraps a GObject to the right type. It is
// primarily used internally.
func WrapAppLaunchContext(obj *externglib.Object) AppLaunchContext {
	return AppLaunchContext{
		gio.AppLaunchContext: gio.WrapAppLaunchContext(obj),
	}
}

func marshalAppLaunchContext(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapAppLaunchContext(obj), nil
}

// SetDesktop sets the workspace on which applications will be launched.
//
// This only works when running under a window manager that supports
// multiple workspaces, as described in the Extended Window Manager Hints
// (http://www.freedesktop.org/Standards/wm-spec).
//
// When the workspace is not specified or @desktop is set to -1, it is up to
// the window manager to pick one, typically it will be the current
// workspace.
func (c appLaunchContext) SetDesktop(desktop int) {
	var _arg0 *C.GdkAppLaunchContext
	var _arg1 C.int

	_arg0 = (*C.GdkAppLaunchContext)(unsafe.Pointer(c.Native()))
	_arg1 = C.int(desktop)

	C.gdk_app_launch_context_set_desktop(_arg0, _arg1)
}

// SetIcon sets the icon for applications that are launched with this
// context.
//
// Window Managers can use this information when displaying startup
// notification.
//
// See also [method@Gdk.AppLaunchContext.set_icon_name].
func (c appLaunchContext) SetIcon(icon gio.Icon) {
	var _arg0 *C.GdkAppLaunchContext
	var _arg1 *C.GIcon

	_arg0 = (*C.GdkAppLaunchContext)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.GIcon)(unsafe.Pointer(icon.Native()))

	C.gdk_app_launch_context_set_icon(_arg0, _arg1)
}

// SetIconName sets the icon for applications that are launched with this
// context.
//
// The @icon_name will be interpreted in the same way as the Icon field in
// desktop files. See also [method@Gdk.AppLaunchContext.set_icon()].
//
// If both @icon and @icon_name are set, the @icon_name takes priority. If
// neither @icon or @icon_name is set, the icon is taken from either the
// file that is passed to launched application or from the `GAppInfo` for
// the launched application itself.
func (c appLaunchContext) SetIconName(iconName string) {
	var _arg0 *C.GdkAppLaunchContext
	var _arg1 *C.char

	_arg0 = (*C.GdkAppLaunchContext)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.char)(C.CString(iconName))
	defer C.free(unsafe.Pointer(_arg1))

	C.gdk_app_launch_context_set_icon_name(_arg0, _arg1)
}

// SetTimestamp sets the timestamp of @context.
//
// The timestamp should ideally be taken from the event that triggered the
// launch.
//
// Window managers can use this information to avoid moving the focus to the
// newly launched application when the user is busy typing in another
// window. This is also known as 'focus stealing prevention'.
func (c appLaunchContext) SetTimestamp(timestamp uint32) {
	var _arg0 *C.GdkAppLaunchContext
	var _arg1 C.guint32

	_arg0 = (*C.GdkAppLaunchContext)(unsafe.Pointer(c.Native()))
	_arg1 = C.guint32(timestamp)

	C.gdk_app_launch_context_set_timestamp(_arg0, _arg1)
}

// CairoContext: `GdkCairoContext` is an object representing the
// platform-specific draw context.
//
// `GdkCairoContext`s are created for a surface using
// [method@Gdk.Surface.create_cairo_context], and the context can then be used
// to draw on that surface.
type CairoContext interface {
	DrawContext
}

// cairoContext implements the CairoContext interface.
type cairoContext struct {
	DrawContext
}

var _ CairoContext = (*cairoContext)(nil)

// WrapCairoContext wraps a GObject to the right type. It is
// primarily used internally.
func WrapCairoContext(obj *externglib.Object) CairoContext {
	return CairoContext{
		DrawContext: WrapDrawContext(obj),
	}
}

func marshalCairoContext(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapCairoContext(obj), nil
}

// Clipboard: the `GdkClipboard` object represents data shared between
// applications or inside an application.
//
// To get a `GdkClipboard` object, use [method@Gdk.Display.get_clipboard] or
// [method@Gdk.Display.get_primary_clipboard]. You can find out about the data
// that is currently available in a clipboard using
// [method@Gdk.Clipboard.get_formats].
//
// To make text or image data available in a clipboard, use
// [method@Gdk.Clipboard.set_text] or [method@Gdk.Clipboard.set_texture]. For
// other data, you can use [method@Gdk.Clipboard.set_content], which takes a
// [class@Gdk.ContentProvider] object.
//
// To read textual or image data from a clipboard, use
// [method@Gdk.Clipboard.read_text_async] or
// [method@Gdk.Clipboard.read_texture_async]. For other data, use
// [method@Gdk.Clipboard.read_async], which provides a `GInputStream` object.
type Clipboard interface {
	gextras.Objector

	// IsLocal returns if the clipboard is local.
	//
	// A clipboard is considered local if it was last claimed by the running
	// application.
	//
	// Note that [method@Gdk.Clipboard.get_content] may return nil even on a
	// local clipboard. In this case the clipboard is empty.
	IsLocal() bool
	// ReadAsync: asynchronously requests an input stream to read the
	// @clipboard's contents from.
	//
	// When the operation is finished @callback will be called. You must then
	// call [method@Gdk.Clipboard.read_finish] to get the result of the
	// operation.
	//
	// The clipboard will choose the most suitable mime type from the given list
	// to fulfill the request, preferring the ones listed first.
	ReadAsync(mimeTypes *string, ioPriority int, cancellable gio.Cancellable, callback gio.AsyncReadyCallback)
	// ReadTextAsync: asynchronously request the @clipboard contents converted
	// to a string.
	//
	// When the operation is finished @callback will be called. You must then
	// call [method@Gdk.Clipboard.read_text_finish] to get the result.
	//
	// This is a simple wrapper around [method@Gdk.Clipboard.read_value_async].
	// Use that function or [method@Gdk.Clipboard.read_async] directly if you
	// need more control over the operation.
	ReadTextAsync(cancellable gio.Cancellable, callback gio.AsyncReadyCallback)
	// ReadTextFinish finishes an asynchronous clipboard read.
	//
	// See [method@Gdk.Clipboard.read_text_async].
	ReadTextFinish(result gio.AsyncResult) (string, error)
	// ReadTextureAsync: asynchronously request the @clipboard contents
	// converted to a `GdkPixbuf`.
	//
	// When the operation is finished @callback will be called. You must then
	// call [method@Gdk.Clipboard.read_texture_finish] to get the result.
	//
	// This is a simple wrapper around [method@Gdk.Clipboard.read_value_async].
	// Use that function or [methos@Gdk.Clipboard.read_async] directly if you
	// need more control over the operation.
	ReadTextureAsync(cancellable gio.Cancellable, callback gio.AsyncReadyCallback)
	// ReadValueAsync: asynchronously request the @clipboard contents converted
	// to the given @type.
	//
	// When the operation is finished @callback will be called. You must then
	// call [method@Gdk.Clipboard.read_value_finish] to get the resulting
	// `GValue`.
	//
	// For local clipboard contents that are available in the given `GType`, the
	// value will be copied directly. Otherwise, GDK will try to use
	// [func@content_deserialize_async] to convert the clipboard's data.
	ReadValueAsync(typ externglib.Type, ioPriority int, cancellable gio.Cancellable, callback gio.AsyncReadyCallback)
	// ReadValueFinish finishes an asynchronous clipboard read.
	//
	// See [method@Gdk.Clipboard.read_value_async].
	ReadValueFinish(result gio.AsyncResult) (**externglib.Value, error)
	// SetContent sets a new content provider on @clipboard.
	//
	// The clipboard will claim the `GdkDisplay`'s resources and advertise these
	// new contents to other applications.
	//
	// In the rare case of a failure, this function will return false. The
	// clipboard will then continue reporting its old contents and ignore
	// @provider.
	//
	// If the contents are read by either an external application or the
	// @clipboard's read functions, @clipboard will select the best format to
	// transfer the contents and then request that format from @provider.
	SetContent(provider ContentProvider) bool
	// SetText puts the given @text into the clipboard.
	SetText(text string)
	// SetTexture puts the given @texture into the clipboard.
	SetTexture(texture Texture)
	// SetValue sets the @clipboard to contain the given @value.
	SetValue(value **externglib.Value)
	// StoreAsync: asynchronously instructs the @clipboard to store its contents
	// remotely.
	//
	// If the clipboard is not local, this function does nothing but report
	// success.
	//
	// The @callback must call [method@Gdk.Clipboard.store_finish].
	//
	// The purpose of this call is to preserve clipboard contents beyond the
	// lifetime of an application, so this function is typically called on exit.
	// Depending on the platform, the functionality may not be available unless
	// a "clipboard manager" is running.
	//
	// This function is called automatically when a [class@Gtk.Application] is
	// shut down, so you likely don't need to call it.
	StoreAsync(ioPriority int, cancellable gio.Cancellable, callback gio.AsyncReadyCallback)
	// StoreFinish finishes an asynchronous clipboard store.
	//
	// See [method@Gdk.Clipboard.store_async].
	StoreFinish(result gio.AsyncResult) error
}

// clipboard implements the Clipboard interface.
type clipboard struct {
	gextras.Objector
}

var _ Clipboard = (*clipboard)(nil)

// WrapClipboard wraps a GObject to the right type. It is
// primarily used internally.
func WrapClipboard(obj *externglib.Object) Clipboard {
	return Clipboard{
		Objector: obj,
	}
}

func marshalClipboard(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapClipboard(obj), nil
}

// IsLocal returns if the clipboard is local.
//
// A clipboard is considered local if it was last claimed by the running
// application.
//
// Note that [method@Gdk.Clipboard.get_content] may return nil even on a
// local clipboard. In this case the clipboard is empty.
func (c clipboard) IsLocal() bool {
	var _arg0 *C.GdkClipboard

	_arg0 = (*C.GdkClipboard)(unsafe.Pointer(c.Native()))

	var _cret C.gboolean

	_cret = C.gdk_clipboard_is_local(_arg0)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// ReadAsync: asynchronously requests an input stream to read the
// @clipboard's contents from.
//
// When the operation is finished @callback will be called. You must then
// call [method@Gdk.Clipboard.read_finish] to get the result of the
// operation.
//
// The clipboard will choose the most suitable mime type from the given list
// to fulfill the request, preferring the ones listed first.
func (c clipboard) ReadAsync(mimeTypes *string, ioPriority int, cancellable gio.Cancellable, callback gio.AsyncReadyCallback) {
	var _arg0 *C.GdkClipboard
	var _arg1 **C.char
	var _arg2 C.int
	var _arg3 *C.GCancellable
	var _arg4 C.GAsyncReadyCallback
	var _arg5 C.gpointer

	_arg0 = (*C.GdkClipboard)(unsafe.Pointer(c.Native()))
	_arg1 = (**C.char)(C.CString(mimeTypes))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.int(ioPriority)
	_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg4 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg5 = C.gpointer(box.Assign(callback))

	C.gdk_clipboard_read_async(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
}

// ReadTextAsync: asynchronously request the @clipboard contents converted
// to a string.
//
// When the operation is finished @callback will be called. You must then
// call [method@Gdk.Clipboard.read_text_finish] to get the result.
//
// This is a simple wrapper around [method@Gdk.Clipboard.read_value_async].
// Use that function or [method@Gdk.Clipboard.read_async] directly if you
// need more control over the operation.
func (c clipboard) ReadTextAsync(cancellable gio.Cancellable, callback gio.AsyncReadyCallback) {
	var _arg0 *C.GdkClipboard
	var _arg1 *C.GCancellable
	var _arg2 C.GAsyncReadyCallback
	var _arg3 C.gpointer

	_arg0 = (*C.GdkClipboard)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg2 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg3 = C.gpointer(box.Assign(callback))

	C.gdk_clipboard_read_text_async(_arg0, _arg1, _arg2, _arg3)
}

// ReadTextFinish finishes an asynchronous clipboard read.
//
// See [method@Gdk.Clipboard.read_text_async].
func (c clipboard) ReadTextFinish(result gio.AsyncResult) (string, error) {
	var _arg0 *C.GdkClipboard
	var _arg1 *C.GAsyncResult

	_arg0 = (*C.GdkClipboard)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(result.Native()))

	var _cret *C.char
	var _cerr *C.GError

	_cret = C.gdk_clipboard_read_text_finish(_arg0, _arg1, _cerr)

	var _utf8 string
	var _goerr error

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _utf8, _goerr
}

// ReadTextureAsync: asynchronously request the @clipboard contents
// converted to a `GdkPixbuf`.
//
// When the operation is finished @callback will be called. You must then
// call [method@Gdk.Clipboard.read_texture_finish] to get the result.
//
// This is a simple wrapper around [method@Gdk.Clipboard.read_value_async].
// Use that function or [methos@Gdk.Clipboard.read_async] directly if you
// need more control over the operation.
func (c clipboard) ReadTextureAsync(cancellable gio.Cancellable, callback gio.AsyncReadyCallback) {
	var _arg0 *C.GdkClipboard
	var _arg1 *C.GCancellable
	var _arg2 C.GAsyncReadyCallback
	var _arg3 C.gpointer

	_arg0 = (*C.GdkClipboard)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg2 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg3 = C.gpointer(box.Assign(callback))

	C.gdk_clipboard_read_texture_async(_arg0, _arg1, _arg2, _arg3)
}

// ReadValueAsync: asynchronously request the @clipboard contents converted
// to the given @type.
//
// When the operation is finished @callback will be called. You must then
// call [method@Gdk.Clipboard.read_value_finish] to get the resulting
// `GValue`.
//
// For local clipboard contents that are available in the given `GType`, the
// value will be copied directly. Otherwise, GDK will try to use
// [func@content_deserialize_async] to convert the clipboard's data.
func (c clipboard) ReadValueAsync(typ externglib.Type, ioPriority int, cancellable gio.Cancellable, callback gio.AsyncReadyCallback) {
	var _arg0 *C.GdkClipboard
	var _arg1 C.GType
	var _arg2 C.int
	var _arg3 *C.GCancellable
	var _arg4 C.GAsyncReadyCallback
	var _arg5 C.gpointer

	_arg0 = (*C.GdkClipboard)(unsafe.Pointer(c.Native()))
	_arg1 = C.GType(typ)
	_arg2 = C.int(ioPriority)
	_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg4 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg5 = C.gpointer(box.Assign(callback))

	C.gdk_clipboard_read_value_async(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
}

// ReadValueFinish finishes an asynchronous clipboard read.
//
// See [method@Gdk.Clipboard.read_value_async].
func (c clipboard) ReadValueFinish(result gio.AsyncResult) (**externglib.Value, error) {
	var _arg0 *C.GdkClipboard
	var _arg1 *C.GAsyncResult

	_arg0 = (*C.GdkClipboard)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(result.Native()))

	var _cret *C.GValue
	var _cerr *C.GError

	_cret = C.gdk_clipboard_read_value_finish(_arg0, _arg1, _cerr)

	var _value **externglib.Value
	var _goerr error

	_value = externglib.ValueFromNative(unsafe.Pointer(_cret))
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _value, _goerr
}

// SetContent sets a new content provider on @clipboard.
//
// The clipboard will claim the `GdkDisplay`'s resources and advertise these
// new contents to other applications.
//
// In the rare case of a failure, this function will return false. The
// clipboard will then continue reporting its old contents and ignore
// @provider.
//
// If the contents are read by either an external application or the
// @clipboard's read functions, @clipboard will select the best format to
// transfer the contents and then request that format from @provider.
func (c clipboard) SetContent(provider ContentProvider) bool {
	var _arg0 *C.GdkClipboard
	var _arg1 *C.GdkContentProvider

	_arg0 = (*C.GdkClipboard)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.GdkContentProvider)(unsafe.Pointer(provider.Native()))

	var _cret C.gboolean

	_cret = C.gdk_clipboard_set_content(_arg0, _arg1)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// SetText puts the given @text into the clipboard.
func (c clipboard) SetText(text string) {
	var _arg0 *C.GdkClipboard
	var _arg1 *C.char

	_arg0 = (*C.GdkClipboard)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.char)(C.CString(text))
	defer C.free(unsafe.Pointer(_arg1))

	C.gdk_clipboard_set_text(_arg0, _arg1)
}

// SetTexture puts the given @texture into the clipboard.
func (c clipboard) SetTexture(texture Texture) {
	var _arg0 *C.GdkClipboard
	var _arg1 *C.GdkTexture

	_arg0 = (*C.GdkClipboard)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.GdkTexture)(unsafe.Pointer(texture.Native()))

	C.gdk_clipboard_set_texture(_arg0, _arg1)
}

// SetValue sets the @clipboard to contain the given @value.
func (c clipboard) SetValue(value **externglib.Value) {
	var _arg0 *C.GdkClipboard
	var _arg1 *C.GValue

	_arg0 = (*C.GdkClipboard)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.GValue)(value.GValue)

	C.gdk_clipboard_set_value(_arg0, _arg1)
}

// StoreAsync: asynchronously instructs the @clipboard to store its contents
// remotely.
//
// If the clipboard is not local, this function does nothing but report
// success.
//
// The @callback must call [method@Gdk.Clipboard.store_finish].
//
// The purpose of this call is to preserve clipboard contents beyond the
// lifetime of an application, so this function is typically called on exit.
// Depending on the platform, the functionality may not be available unless
// a "clipboard manager" is running.
//
// This function is called automatically when a [class@Gtk.Application] is
// shut down, so you likely don't need to call it.
func (c clipboard) StoreAsync(ioPriority int, cancellable gio.Cancellable, callback gio.AsyncReadyCallback) {
	var _arg0 *C.GdkClipboard
	var _arg1 C.int
	var _arg2 *C.GCancellable
	var _arg3 C.GAsyncReadyCallback
	var _arg4 C.gpointer

	_arg0 = (*C.GdkClipboard)(unsafe.Pointer(c.Native()))
	_arg1 = C.int(ioPriority)
	_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg3 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg4 = C.gpointer(box.Assign(callback))

	C.gdk_clipboard_store_async(_arg0, _arg1, _arg2, _arg3, _arg4)
}

// StoreFinish finishes an asynchronous clipboard store.
//
// See [method@Gdk.Clipboard.store_async].
func (c clipboard) StoreFinish(result gio.AsyncResult) error {
	var _arg0 *C.GdkClipboard
	var _arg1 *C.GAsyncResult

	_arg0 = (*C.GdkClipboard)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(result.Native()))

	var _cerr *C.GError

	C.gdk_clipboard_store_finish(_arg0, _arg1, _cerr)

	var _goerr error

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

// ContentDeserializer: a `GdkContentDeserializer` is used to deserialize
// content received via inter-application data transfers.
//
// The `GdkContentDeserializer` transforms serialized content that is identified
// by a mime type into an object identified by a GType.
//
// GTK provides serializers and deserializers for common data types such as
// text, colors, images or file lists. To register your own deserialization
// functions, use [func@content_register_deserializer].
//
// Also see [class@Gdk.ContentSerializer].
type ContentDeserializer interface {
	gextras.Objector
	gio.AsyncResult

	// GType gets the GType to create an instance of.
	GType() externglib.Type
	// MIMEType gets the mime type to deserialize from.
	MIMEType() string
	// Priority gets the I/O priority for the current operation.
	//
	// This is the priority that was passed to [funccontent_deserialize_async].
	Priority() int
	// TaskData gets the data that was associated with the current operation.
	//
	// See [method@Gdk.ContentDeserializer.set_task_data].
	TaskData() interface{}
	// UserData gets the user data that was passed when the deserializer was
	// registered.
	UserData() interface{}
	// Value gets the `GValue` to store the deserialized object in.
	Value() **externglib.Value
	// ReturnError: indicate that the deserialization has ended with an error.
	//
	// This function consumes @error.
	ReturnError(err *error)
	// ReturnSuccess: indicate that the deserialization has been successfully
	// completed.
	ReturnSuccess()
}

// contentDeserializer implements the ContentDeserializer interface.
type contentDeserializer struct {
	gextras.Objector
	gio.AsyncResult
}

var _ ContentDeserializer = (*contentDeserializer)(nil)

// WrapContentDeserializer wraps a GObject to the right type. It is
// primarily used internally.
func WrapContentDeserializer(obj *externglib.Object) ContentDeserializer {
	return ContentDeserializer{
		Objector:        obj,
		gio.AsyncResult: gio.WrapAsyncResult(obj),
	}
}

func marshalContentDeserializer(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapContentDeserializer(obj), nil
}

// GType gets the GType to create an instance of.
func (d contentDeserializer) GType() externglib.Type {
	var _arg0 *C.GdkContentDeserializer

	_arg0 = (*C.GdkContentDeserializer)(unsafe.Pointer(d.Native()))

	var _cret C.GType

	_cret = C.gdk_content_deserializer_get_gtype(_arg0)

	var _gType externglib.Type

	_gType = externglib.Type(_cret)

	return _gType
}

// MIMEType gets the mime type to deserialize from.
func (d contentDeserializer) MIMEType() string {
	var _arg0 *C.GdkContentDeserializer

	_arg0 = (*C.GdkContentDeserializer)(unsafe.Pointer(d.Native()))

	var _cret *C.char

	_cret = C.gdk_content_deserializer_get_mime_type(_arg0)

	var _utf8 string

	_utf8 = C.GoString(_cret)

	return _utf8
}

// Priority gets the I/O priority for the current operation.
//
// This is the priority that was passed to [funccontent_deserialize_async].
func (d contentDeserializer) Priority() int {
	var _arg0 *C.GdkContentDeserializer

	_arg0 = (*C.GdkContentDeserializer)(unsafe.Pointer(d.Native()))

	var _cret C.int

	_cret = C.gdk_content_deserializer_get_priority(_arg0)

	var _gint int

	_gint = (int)(_cret)

	return _gint
}

// TaskData gets the data that was associated with the current operation.
//
// See [method@Gdk.ContentDeserializer.set_task_data].
func (d contentDeserializer) TaskData() interface{} {
	var _arg0 *C.GdkContentDeserializer

	_arg0 = (*C.GdkContentDeserializer)(unsafe.Pointer(d.Native()))

	var _cret C.gpointer

	_cret = C.gdk_content_deserializer_get_task_data(_arg0)

	var _gpointer interface{}

	_gpointer = (interface{})(_cret)

	return _gpointer
}

// UserData gets the user data that was passed when the deserializer was
// registered.
func (d contentDeserializer) UserData() interface{} {
	var _arg0 *C.GdkContentDeserializer

	_arg0 = (*C.GdkContentDeserializer)(unsafe.Pointer(d.Native()))

	var _cret C.gpointer

	_cret = C.gdk_content_deserializer_get_user_data(_arg0)

	var _gpointer interface{}

	_gpointer = (interface{})(_cret)

	return _gpointer
}

// Value gets the `GValue` to store the deserialized object in.
func (d contentDeserializer) Value() **externglib.Value {
	var _arg0 *C.GdkContentDeserializer

	_arg0 = (*C.GdkContentDeserializer)(unsafe.Pointer(d.Native()))

	var _cret *C.GValue

	_cret = C.gdk_content_deserializer_get_value(_arg0)

	var _value **externglib.Value

	_value = externglib.ValueFromNative(unsafe.Pointer(_cret))

	return _value
}

// ReturnError: indicate that the deserialization has ended with an error.
//
// This function consumes @error.
func (d contentDeserializer) ReturnError(err *error) {
	var _arg0 *C.GdkContentDeserializer
	var _arg1 *C.GError

	_arg0 = (*C.GdkContentDeserializer)(unsafe.Pointer(d.Native()))
	_arg1 = (*C.GError)(gerror.New(unsafe.Pointer(err)))
	defer C.g_error_free(_arg1)

	C.gdk_content_deserializer_return_error(_arg0, _arg1)
}

// ReturnSuccess: indicate that the deserialization has been successfully
// completed.
func (d contentDeserializer) ReturnSuccess() {
	var _arg0 *C.GdkContentDeserializer

	_arg0 = (*C.GdkContentDeserializer)(unsafe.Pointer(d.Native()))

	C.gdk_content_deserializer_return_success(_arg0)
}

// ContentSerializer: a `GdkContentSerializer` is used to serialize content for
// inter-application data transfers.
//
// The `GdkContentSerializer` transforms an object that is identified by a GType
// into a serialized form (i.e. a byte stream) that is identified by a mime
// type.
//
// GTK provides serializers and deserializers for common data types such as
// text, colors, images or file lists. To register your own serialization
// functions, use [func@content_register_serializer].
//
// Also see [class@Gdk.ContentDeserializer].
type ContentSerializer interface {
	gextras.Objector
	gio.AsyncResult

	// GType gets the `GType` to of the object to serialize.
	GType() externglib.Type
	// MIMEType gets the mime type to serialize to.
	MIMEType() string
	// Priority gets the I/O priority for the current operation.
	//
	// This is the priority that was passed to [func@content_serialize_async].
	Priority() int
	// TaskData gets the data that was associated with the current operation.
	//
	// See [method@Gdk.ContentSerializer.set_task_data].
	TaskData() interface{}
	// UserData gets the user data that was passed when the serializer was
	// registered.
	UserData() interface{}
	// Value gets the `GValue` to read the object to serialize from.
	Value() **externglib.Value
	// ReturnError: indicate that the serialization has ended with an error.
	//
	// This function consumes @error.
	ReturnError(err *error)
	// ReturnSuccess: indicate that the serialization has been successfully
	// completed.
	ReturnSuccess()
}

// contentSerializer implements the ContentSerializer interface.
type contentSerializer struct {
	gextras.Objector
	gio.AsyncResult
}

var _ ContentSerializer = (*contentSerializer)(nil)

// WrapContentSerializer wraps a GObject to the right type. It is
// primarily used internally.
func WrapContentSerializer(obj *externglib.Object) ContentSerializer {
	return ContentSerializer{
		Objector:        obj,
		gio.AsyncResult: gio.WrapAsyncResult(obj),
	}
}

func marshalContentSerializer(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapContentSerializer(obj), nil
}

// GType gets the `GType` to of the object to serialize.
func (s contentSerializer) GType() externglib.Type {
	var _arg0 *C.GdkContentSerializer

	_arg0 = (*C.GdkContentSerializer)(unsafe.Pointer(s.Native()))

	var _cret C.GType

	_cret = C.gdk_content_serializer_get_gtype(_arg0)

	var _gType externglib.Type

	_gType = externglib.Type(_cret)

	return _gType
}

// MIMEType gets the mime type to serialize to.
func (s contentSerializer) MIMEType() string {
	var _arg0 *C.GdkContentSerializer

	_arg0 = (*C.GdkContentSerializer)(unsafe.Pointer(s.Native()))

	var _cret *C.char

	_cret = C.gdk_content_serializer_get_mime_type(_arg0)

	var _utf8 string

	_utf8 = C.GoString(_cret)

	return _utf8
}

// Priority gets the I/O priority for the current operation.
//
// This is the priority that was passed to [func@content_serialize_async].
func (s contentSerializer) Priority() int {
	var _arg0 *C.GdkContentSerializer

	_arg0 = (*C.GdkContentSerializer)(unsafe.Pointer(s.Native()))

	var _cret C.int

	_cret = C.gdk_content_serializer_get_priority(_arg0)

	var _gint int

	_gint = (int)(_cret)

	return _gint
}

// TaskData gets the data that was associated with the current operation.
//
// See [method@Gdk.ContentSerializer.set_task_data].
func (s contentSerializer) TaskData() interface{} {
	var _arg0 *C.GdkContentSerializer

	_arg0 = (*C.GdkContentSerializer)(unsafe.Pointer(s.Native()))

	var _cret C.gpointer

	_cret = C.gdk_content_serializer_get_task_data(_arg0)

	var _gpointer interface{}

	_gpointer = (interface{})(_cret)

	return _gpointer
}

// UserData gets the user data that was passed when the serializer was
// registered.
func (s contentSerializer) UserData() interface{} {
	var _arg0 *C.GdkContentSerializer

	_arg0 = (*C.GdkContentSerializer)(unsafe.Pointer(s.Native()))

	var _cret C.gpointer

	_cret = C.gdk_content_serializer_get_user_data(_arg0)

	var _gpointer interface{}

	_gpointer = (interface{})(_cret)

	return _gpointer
}

// Value gets the `GValue` to read the object to serialize from.
func (s contentSerializer) Value() **externglib.Value {
	var _arg0 *C.GdkContentSerializer

	_arg0 = (*C.GdkContentSerializer)(unsafe.Pointer(s.Native()))

	var _cret *C.GValue

	_cret = C.gdk_content_serializer_get_value(_arg0)

	var _value **externglib.Value

	_value = externglib.ValueFromNative(unsafe.Pointer(_cret))

	return _value
}

// ReturnError: indicate that the serialization has ended with an error.
//
// This function consumes @error.
func (s contentSerializer) ReturnError(err *error) {
	var _arg0 *C.GdkContentSerializer
	var _arg1 *C.GError

	_arg0 = (*C.GdkContentSerializer)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GError)(gerror.New(unsafe.Pointer(err)))
	defer C.g_error_free(_arg1)

	C.gdk_content_serializer_return_error(_arg0, _arg1)
}

// ReturnSuccess: indicate that the serialization has been successfully
// completed.
func (s contentSerializer) ReturnSuccess() {
	var _arg0 *C.GdkContentSerializer

	_arg0 = (*C.GdkContentSerializer)(unsafe.Pointer(s.Native()))

	C.gdk_content_serializer_return_success(_arg0)
}

// Cursor: `GdkCursor` is used to create and destroy cursors.
//
// Cursors are immutable objects, so once you created them, there is no way to
// modify them later. You should create a new cursor when you want to change
// something about it.
//
// Cursors by themselves are not very interesting: they must be bound to a
// window for users to see them. This is done with
// [method@Gdk.Surface.set_cursor] or [method@Gdk.Surface.set_device_cursor].
// Applications will typically use higher-level GTK functions such as
// [method@Gtk.Widget.set_cursor]` instead.
//
// Cursors are not bound to a given [class@Gdk.Display], so they can be shared.
// However, the appearance of cursors may vary when used on different platforms.
//
//
// Named and texture cursors
//
// There are multiple ways to create cursors. The platform's own cursors can be
// created with [ctor@Gdk.Cursor.new_from_name]. That function lists the
// commonly available names that are shared with the CSS specification. Other
// names may be available, depending on the platform in use. On some platforms,
// what images are used for named cursors may be influenced by the cursor theme.
//
// Another option to create a cursor is to use
// [ctor@Gdk.Cursor.new_from_texture] and provide an image to use for the
// cursor.
//
// To ease work with unsupported cursors, a fallback cursor can be provided. If
// a [class@Gdk.Surface] cannot use a cursor because of the reasons mentioned
// above, it will try the fallback cursor. Fallback cursors can themselves have
// fallback cursors again, so it is possible to provide a chain of progressively
// easier to support cursors. If none of the provided cursors can be supported,
// the default cursor will be the ultimate fallback.
type Cursor interface {
	gextras.Objector

	// HotspotX returns the horizontal offset of the hotspot.
	//
	// The hotspot indicates the pixel that will be directly above the cursor.
	//
	// Note that named cursors may have a nonzero hotspot, but this function
	// will only return the hotspot position for cursors created with
	// [ctor@Gdk.Cursor.new_from_texture].
	HotspotX() int
	// HotspotY returns the vertical offset of the hotspot.
	//
	// The hotspot indicates the pixel that will be directly above the cursor.
	//
	// Note that named cursors may have a nonzero hotspot, but this function
	// will only return the hotspot position for cursors created with
	// [ctor@Gdk.Cursor.new_from_texture].
	HotspotY() int
	// Name returns the name of the cursor.
	//
	// If the cursor is not a named cursor, nil will be returned.
	Name() string
}

// cursor implements the Cursor interface.
type cursor struct {
	gextras.Objector
}

var _ Cursor = (*cursor)(nil)

// WrapCursor wraps a GObject to the right type. It is
// primarily used internally.
func WrapCursor(obj *externglib.Object) Cursor {
	return Cursor{
		Objector: obj,
	}
}

func marshalCursor(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapCursor(obj), nil
}

// HotspotX returns the horizontal offset of the hotspot.
//
// The hotspot indicates the pixel that will be directly above the cursor.
//
// Note that named cursors may have a nonzero hotspot, but this function
// will only return the hotspot position for cursors created with
// [ctor@Gdk.Cursor.new_from_texture].
func (c cursor) HotspotX() int {
	var _arg0 *C.GdkCursor

	_arg0 = (*C.GdkCursor)(unsafe.Pointer(c.Native()))

	var _cret C.int

	_cret = C.gdk_cursor_get_hotspot_x(_arg0)

	var _gint int

	_gint = (int)(_cret)

	return _gint
}

// HotspotY returns the vertical offset of the hotspot.
//
// The hotspot indicates the pixel that will be directly above the cursor.
//
// Note that named cursors may have a nonzero hotspot, but this function
// will only return the hotspot position for cursors created with
// [ctor@Gdk.Cursor.new_from_texture].
func (c cursor) HotspotY() int {
	var _arg0 *C.GdkCursor

	_arg0 = (*C.GdkCursor)(unsafe.Pointer(c.Native()))

	var _cret C.int

	_cret = C.gdk_cursor_get_hotspot_y(_arg0)

	var _gint int

	_gint = (int)(_cret)

	return _gint
}

// Name returns the name of the cursor.
//
// If the cursor is not a named cursor, nil will be returned.
func (c cursor) Name() string {
	var _arg0 *C.GdkCursor

	_arg0 = (*C.GdkCursor)(unsafe.Pointer(c.Native()))

	var _cret *C.char

	_cret = C.gdk_cursor_get_name(_arg0)

	var _utf8 string

	_utf8 = C.GoString(_cret)

	return _utf8
}

// Device: the `GdkDevice` object represents an input device, such as a
// keyboard, a mouse, or a touchpad.
//
// See the [class@Gdk.Seat] documentation for more information about the various
// kinds of devices, and their relationships.
type Device interface {
	gextras.Objector

	// CapsLockState retrieves whether the Caps Lock modifier of the keyboard is
	// locked.
	//
	// This is only relevant for keyboard devices.
	CapsLockState() bool
	// HasCursor determines whether the pointer follows device motion.
	//
	// This is not meaningful for keyboard devices, which don't have a pointer.
	HasCursor() bool
	// Name: the name of the device, suitable for showing in a user interface.
	Name() string
	// NumLockState retrieves whether the Num Lock modifier of the keyboard is
	// locked.
	//
	// This is only relevant for keyboard devices.
	NumLockState() bool
	// NumTouches retrieves the number of touch points associated to @device.
	NumTouches() uint
	// ProductID returns the product ID of this device.
	//
	// This ID is retrieved from the device, and does not change. See
	// [method@Gdk.Device.get_vendor_id] for more information.
	ProductID() string
	// ScrollLockState retrieves whether the Scroll Lock modifier of the
	// keyboard is locked.
	//
	// This is only relevant for keyboard devices.
	ScrollLockState() bool
	// Timestamp returns the timestamp of the last activity for this device.
	//
	// In practice, this means the timestamp of the last event that was received
	// from the OS for this device. (GTK may occasionally produce events for a
	// device that are not received from the OS, and will not update the
	// timestamp).
	Timestamp() uint32
	// VendorID returns the vendor ID of this device.
	//
	// This ID is retrieved from the device, and does not change.
	//
	// This function, together with [method@Gdk.Device.get_product_id], can be
	// used to eg. compose `GSettings` paths to store settings for this device.
	//
	// â€œ`c static GSettings * get_device_settings (GdkDevice *device) { const
	// char *vendor, *product; GSettings *settings; GdkDevice *device; char
	// *path;
	//
	//      vendor = gdk_device_get_vendor_id (device);
	//      product = gdk_device_get_product_id (device);
	//
	//      path = g_strdup_printf ("/org/example/app/devices/s:s/", vendor, product);
	//      settings = g_settings_new_with_path (DEVICE_SCHEMA, path);
	//      g_free (path);
	//
	//      return settings;
	//    }
	//
	// â€œ`
	VendorID() string
	// HasBidiLayouts determines if layouts for both right-to-left and
	// left-to-right languages are in use on the keyboard.
	//
	// This is only relevant for keyboard devices.
	HasBidiLayouts() bool
}

// device implements the Device interface.
type device struct {
	gextras.Objector
}

var _ Device = (*device)(nil)

// WrapDevice wraps a GObject to the right type. It is
// primarily used internally.
func WrapDevice(obj *externglib.Object) Device {
	return Device{
		Objector: obj,
	}
}

func marshalDevice(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapDevice(obj), nil
}

// CapsLockState retrieves whether the Caps Lock modifier of the keyboard is
// locked.
//
// This is only relevant for keyboard devices.
func (d device) CapsLockState() bool {
	var _arg0 *C.GdkDevice

	_arg0 = (*C.GdkDevice)(unsafe.Pointer(d.Native()))

	var _cret C.gboolean

	_cret = C.gdk_device_get_caps_lock_state(_arg0)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// HasCursor determines whether the pointer follows device motion.
//
// This is not meaningful for keyboard devices, which don't have a pointer.
func (d device) HasCursor() bool {
	var _arg0 *C.GdkDevice

	_arg0 = (*C.GdkDevice)(unsafe.Pointer(d.Native()))

	var _cret C.gboolean

	_cret = C.gdk_device_get_has_cursor(_arg0)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// Name: the name of the device, suitable for showing in a user interface.
func (d device) Name() string {
	var _arg0 *C.GdkDevice

	_arg0 = (*C.GdkDevice)(unsafe.Pointer(d.Native()))

	var _cret *C.char

	_cret = C.gdk_device_get_name(_arg0)

	var _utf8 string

	_utf8 = C.GoString(_cret)

	return _utf8
}

// NumLockState retrieves whether the Num Lock modifier of the keyboard is
// locked.
//
// This is only relevant for keyboard devices.
func (d device) NumLockState() bool {
	var _arg0 *C.GdkDevice

	_arg0 = (*C.GdkDevice)(unsafe.Pointer(d.Native()))

	var _cret C.gboolean

	_cret = C.gdk_device_get_num_lock_state(_arg0)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// NumTouches retrieves the number of touch points associated to @device.
func (d device) NumTouches() uint {
	var _arg0 *C.GdkDevice

	_arg0 = (*C.GdkDevice)(unsafe.Pointer(d.Native()))

	var _cret C.guint

	_cret = C.gdk_device_get_num_touches(_arg0)

	var _guint uint

	_guint = (uint)(_cret)

	return _guint
}

// ProductID returns the product ID of this device.
//
// This ID is retrieved from the device, and does not change. See
// [method@Gdk.Device.get_vendor_id] for more information.
func (d device) ProductID() string {
	var _arg0 *C.GdkDevice

	_arg0 = (*C.GdkDevice)(unsafe.Pointer(d.Native()))

	var _cret *C.char

	_cret = C.gdk_device_get_product_id(_arg0)

	var _utf8 string

	_utf8 = C.GoString(_cret)

	return _utf8
}

// ScrollLockState retrieves whether the Scroll Lock modifier of the
// keyboard is locked.
//
// This is only relevant for keyboard devices.
func (d device) ScrollLockState() bool {
	var _arg0 *C.GdkDevice

	_arg0 = (*C.GdkDevice)(unsafe.Pointer(d.Native()))

	var _cret C.gboolean

	_cret = C.gdk_device_get_scroll_lock_state(_arg0)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// Timestamp returns the timestamp of the last activity for this device.
//
// In practice, this means the timestamp of the last event that was received
// from the OS for this device. (GTK may occasionally produce events for a
// device that are not received from the OS, and will not update the
// timestamp).
func (d device) Timestamp() uint32 {
	var _arg0 *C.GdkDevice

	_arg0 = (*C.GdkDevice)(unsafe.Pointer(d.Native()))

	var _cret C.guint32

	_cret = C.gdk_device_get_timestamp(_arg0)

	var _guint32 uint32

	_guint32 = (uint32)(_cret)

	return _guint32
}

// VendorID returns the vendor ID of this device.
//
// This ID is retrieved from the device, and does not change.
//
// This function, together with [method@Gdk.Device.get_product_id], can be
// used to eg. compose `GSettings` paths to store settings for this device.
//
// â€œ`c static GSettings * get_device_settings (GdkDevice *device) { const
// char *vendor, *product; GSettings *settings; GdkDevice *device; char
// *path;
//
//      vendor = gdk_device_get_vendor_id (device);
//      product = gdk_device_get_product_id (device);
//
//      path = g_strdup_printf ("/org/example/app/devices/s:s/", vendor, product);
//      settings = g_settings_new_with_path (DEVICE_SCHEMA, path);
//      g_free (path);
//
//      return settings;
//    }
//
// â€œ`
func (d device) VendorID() string {
	var _arg0 *C.GdkDevice

	_arg0 = (*C.GdkDevice)(unsafe.Pointer(d.Native()))

	var _cret *C.char

	_cret = C.gdk_device_get_vendor_id(_arg0)

	var _utf8 string

	_utf8 = C.GoString(_cret)

	return _utf8
}

// HasBidiLayouts determines if layouts for both right-to-left and
// left-to-right languages are in use on the keyboard.
//
// This is only relevant for keyboard devices.
func (d device) HasBidiLayouts() bool {
	var _arg0 *C.GdkDevice

	_arg0 = (*C.GdkDevice)(unsafe.Pointer(d.Native()))

	var _cret C.gboolean

	_cret = C.gdk_device_has_bidi_layouts(_arg0)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// DeviceTool: a physical tool associated to a `GdkDevice`.
type DeviceTool interface {
	gextras.Objector

	// HardwareID gets the hardware ID of this tool, or 0 if it's not known.
	//
	// When non-zero, the identificator is unique for the given tool model,
	// meaning that two identical tools will share the same @hardware_id, but
	// will have different serial numbers (see
	// [method@Gdk.DeviceTool.get_serial]).
	//
	// This is a more concrete (and device specific) method to identify a
	// `GdkDeviceTool` than [method@Gdk.DeviceTool.get_tool_type], as a tablet
	// may support multiple devices with the same `GdkDeviceToolType`, but
	// different hardware identificators.
	HardwareID() uint64
	// Serial gets the serial number of this tool.
	//
	// This value can be used to identify a physical tool (eg. a tablet pen)
	// across program executions.
	Serial() uint64
}

// deviceTool implements the DeviceTool interface.
type deviceTool struct {
	gextras.Objector
}

var _ DeviceTool = (*deviceTool)(nil)

// WrapDeviceTool wraps a GObject to the right type. It is
// primarily used internally.
func WrapDeviceTool(obj *externglib.Object) DeviceTool {
	return DeviceTool{
		Objector: obj,
	}
}

func marshalDeviceTool(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapDeviceTool(obj), nil
}

// HardwareID gets the hardware ID of this tool, or 0 if it's not known.
//
// When non-zero, the identificator is unique for the given tool model,
// meaning that two identical tools will share the same @hardware_id, but
// will have different serial numbers (see
// [method@Gdk.DeviceTool.get_serial]).
//
// This is a more concrete (and device specific) method to identify a
// `GdkDeviceTool` than [method@Gdk.DeviceTool.get_tool_type], as a tablet
// may support multiple devices with the same `GdkDeviceToolType`, but
// different hardware identificators.
func (t deviceTool) HardwareID() uint64 {
	var _arg0 *C.GdkDeviceTool

	_arg0 = (*C.GdkDeviceTool)(unsafe.Pointer(t.Native()))

	var _cret C.guint64

	_cret = C.gdk_device_tool_get_hardware_id(_arg0)

	var _guint64 uint64

	_guint64 = (uint64)(_cret)

	return _guint64
}

// Serial gets the serial number of this tool.
//
// This value can be used to identify a physical tool (eg. a tablet pen)
// across program executions.
func (t deviceTool) Serial() uint64 {
	var _arg0 *C.GdkDeviceTool

	_arg0 = (*C.GdkDeviceTool)(unsafe.Pointer(t.Native()))

	var _cret C.guint64

	_cret = C.gdk_device_tool_get_serial(_arg0)

	var _guint64 uint64

	_guint64 = (uint64)(_cret)

	return _guint64
}

// Display: `GdkDisplay` objects are the GDK representation of a workstation.
//
// Their purpose are two-fold:
//
// - To manage and provide information about input devices (pointers, keyboards,
// etc) - To manage and provide information about output devices (monitors,
// projectors, etc)
//
// Most of the input device handling has been factored out into separate
// [class@Gdk.Seat] objects. Every display has a one or more seats, which can be
// accessed with [method@Gdk.Display.get_default_seat] and
// [method@Gdk.Display.list_seats].
//
// Output devices are represented by [class@Gdk.Monitor] objects, which can be
// accessed with [method@Gdk.Display.get_monitor_at_surface] and similar APIs.
type Display interface {
	gextras.Objector

	// Beep emits a short beep on @display
	Beep()
	// Close closes the connection to the windowing system for the given
	// display.
	//
	// This cleans up associated resources.
	Close()
	// DeviceIsGrabbed returns true if there is an ongoing grab on @device for
	// @display.
	DeviceIsGrabbed(device Device) bool
	// Flush flushes any requests queued for the windowing system.
	//
	// This happens automatically when the main loop blocks waiting for new
	// events, but if your application is drawing without returning control to
	// the main loop, you may need to call this function explicitly. A common
	// case where this function needs to be called is when an application is
	// executing drawing commands from a thread other than the thread where the
	// main loop is running.
	//
	// This is most useful for X11. On windowing systems where requests are
	// handled synchronously, this function will do nothing.
	Flush()
	// Name gets the name of the display.
	Name() string
	// Setting retrieves a desktop-wide setting such as double-click time for
	// the @display.
	Setting(name string, value **externglib.Value) bool
	// StartupNotificationID gets the startup notification ID for a Wayland
	// display, or nil if no ID has been defined.
	StartupNotificationID() string
	// IsClosed finds out if the display has been closed.
	IsClosed() bool
	// IsComposited returns whether surfaces can reasonably be expected to have
	// their alpha channel drawn correctly on the screen.
	//
	// Check [method@Gdk.Display.is_rgba] for whether the display supports an
	// alpha channel.
	//
	// On X11 this function returns whether a compositing manager is compositing
	// on @display.
	//
	// On modern displays, this value is always true.
	IsComposited() bool
	// IsRGBA returns whether surfaces on this @display are created with an
	// alpha channel.
	//
	// Even if a true is returned, it is possible that the surfaceâ€™s alpha
	// channel wonâ€™t be honored when displaying the surface on the screen: in
	// particular, for X an appropriate windowing manager and compositing
	// manager must be running to provide appropriate display. Use
	// [method@Gdk.Display.is_composited] to check if that is the case.
	//
	// On modern displays, this value is always true.
	IsRGBA() bool
	// NotifyStartupComplete indicates to the GUI environment that the
	// application has finished loading, using a given identifier.
	//
	// GTK will call this function automatically for [class@Gtk.Window] with
	// custom startup-notification identifier unless
	// [method@Gtk.Window.set_auto_startup_notification] is called to disable
	// that feature.
	NotifyStartupComplete(startupId string)
	// PutEvent appends the given event onto the front of the event queue for
	// @display.
	//
	// This function is only useful in very special situations and should not be
	// used by applications.
	PutEvent(event Event)
	// SupportsInputShapes returns true if the display supports input shapes.
	//
	// This means that [method@Gdk.Surface.set_input_region] can be used to
	// modify the input shape of surfaces on @display.
	//
	// On modern displays, this value is always true.
	SupportsInputShapes() bool
	// Sync flushes any requests queued for the windowing system and waits until
	// all requests have been handled.
	//
	// This is often used for making sure that the display is synchronized with
	// the current state of the program. Calling [method@Gdk.Display.sync]
	// before [method@GdkX11.Display.error_trap_pop] makes sure that any errors
	// generated from earlier requests are handled before the error trap is
	// removed.
	//
	// This is most useful for X11. On windowing systems where requests are
	// handled synchronously, this function will do nothing.
	Sync()
}

// display implements the Display interface.
type display struct {
	gextras.Objector
}

var _ Display = (*display)(nil)

// WrapDisplay wraps a GObject to the right type. It is
// primarily used internally.
func WrapDisplay(obj *externglib.Object) Display {
	return Display{
		Objector: obj,
	}
}

func marshalDisplay(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapDisplay(obj), nil
}

// Beep emits a short beep on @display
func (d display) Beep() {
	var _arg0 *C.GdkDisplay

	_arg0 = (*C.GdkDisplay)(unsafe.Pointer(d.Native()))

	C.gdk_display_beep(_arg0)
}

// Close closes the connection to the windowing system for the given
// display.
//
// This cleans up associated resources.
func (d display) Close() {
	var _arg0 *C.GdkDisplay

	_arg0 = (*C.GdkDisplay)(unsafe.Pointer(d.Native()))

	C.gdk_display_close(_arg0)
}

// DeviceIsGrabbed returns true if there is an ongoing grab on @device for
// @display.
func (d display) DeviceIsGrabbed(device Device) bool {
	var _arg0 *C.GdkDisplay
	var _arg1 *C.GdkDevice

	_arg0 = (*C.GdkDisplay)(unsafe.Pointer(d.Native()))
	_arg1 = (*C.GdkDevice)(unsafe.Pointer(device.Native()))

	var _cret C.gboolean

	_cret = C.gdk_display_device_is_grabbed(_arg0, _arg1)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// Flush flushes any requests queued for the windowing system.
//
// This happens automatically when the main loop blocks waiting for new
// events, but if your application is drawing without returning control to
// the main loop, you may need to call this function explicitly. A common
// case where this function needs to be called is when an application is
// executing drawing commands from a thread other than the thread where the
// main loop is running.
//
// This is most useful for X11. On windowing systems where requests are
// handled synchronously, this function will do nothing.
func (d display) Flush() {
	var _arg0 *C.GdkDisplay

	_arg0 = (*C.GdkDisplay)(unsafe.Pointer(d.Native()))

	C.gdk_display_flush(_arg0)
}

// Name gets the name of the display.
func (d display) Name() string {
	var _arg0 *C.GdkDisplay

	_arg0 = (*C.GdkDisplay)(unsafe.Pointer(d.Native()))

	var _cret *C.char

	_cret = C.gdk_display_get_name(_arg0)

	var _utf8 string

	_utf8 = C.GoString(_cret)

	return _utf8
}

// Setting retrieves a desktop-wide setting such as double-click time for
// the @display.
func (d display) Setting(name string, value **externglib.Value) bool {
	var _arg0 *C.GdkDisplay
	var _arg1 *C.char
	var _arg2 *C.GValue

	_arg0 = (*C.GdkDisplay)(unsafe.Pointer(d.Native()))
	_arg1 = (*C.char)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.GValue)(value.GValue)

	var _cret C.gboolean

	_cret = C.gdk_display_get_setting(_arg0, _arg1, _arg2)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// StartupNotificationID gets the startup notification ID for a Wayland
// display, or nil if no ID has been defined.
func (d display) StartupNotificationID() string {
	var _arg0 *C.GdkDisplay

	_arg0 = (*C.GdkDisplay)(unsafe.Pointer(d.Native()))

	var _cret *C.char

	_cret = C.gdk_display_get_startup_notification_id(_arg0)

	var _utf8 string

	_utf8 = C.GoString(_cret)

	return _utf8
}

// IsClosed finds out if the display has been closed.
func (d display) IsClosed() bool {
	var _arg0 *C.GdkDisplay

	_arg0 = (*C.GdkDisplay)(unsafe.Pointer(d.Native()))

	var _cret C.gboolean

	_cret = C.gdk_display_is_closed(_arg0)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// IsComposited returns whether surfaces can reasonably be expected to have
// their alpha channel drawn correctly on the screen.
//
// Check [method@Gdk.Display.is_rgba] for whether the display supports an
// alpha channel.
//
// On X11 this function returns whether a compositing manager is compositing
// on @display.
//
// On modern displays, this value is always true.
func (d display) IsComposited() bool {
	var _arg0 *C.GdkDisplay

	_arg0 = (*C.GdkDisplay)(unsafe.Pointer(d.Native()))

	var _cret C.gboolean

	_cret = C.gdk_display_is_composited(_arg0)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// IsRGBA returns whether surfaces on this @display are created with an
// alpha channel.
//
// Even if a true is returned, it is possible that the surfaceâ€™s alpha
// channel wonâ€™t be honored when displaying the surface on the screen: in
// particular, for X an appropriate windowing manager and compositing
// manager must be running to provide appropriate display. Use
// [method@Gdk.Display.is_composited] to check if that is the case.
//
// On modern displays, this value is always true.
func (d display) IsRGBA() bool {
	var _arg0 *C.GdkDisplay

	_arg0 = (*C.GdkDisplay)(unsafe.Pointer(d.Native()))

	var _cret C.gboolean

	_cret = C.gdk_display_is_rgba(_arg0)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// NotifyStartupComplete indicates to the GUI environment that the
// application has finished loading, using a given identifier.
//
// GTK will call this function automatically for [class@Gtk.Window] with
// custom startup-notification identifier unless
// [method@Gtk.Window.set_auto_startup_notification] is called to disable
// that feature.
func (d display) NotifyStartupComplete(startupId string) {
	var _arg0 *C.GdkDisplay
	var _arg1 *C.char

	_arg0 = (*C.GdkDisplay)(unsafe.Pointer(d.Native()))
	_arg1 = (*C.char)(C.CString(startupId))
	defer C.free(unsafe.Pointer(_arg1))

	C.gdk_display_notify_startup_complete(_arg0, _arg1)
}

// PutEvent appends the given event onto the front of the event queue for
// @display.
//
// This function is only useful in very special situations and should not be
// used by applications.
func (d display) PutEvent(event Event) {
	var _arg0 *C.GdkDisplay
	var _arg1 *C.GdkEvent

	_arg0 = (*C.GdkDisplay)(unsafe.Pointer(d.Native()))
	_arg1 = (*C.GdkEvent)(unsafe.Pointer(event.Native()))

	C.gdk_display_put_event(_arg0, _arg1)
}

// SupportsInputShapes returns true if the display supports input shapes.
//
// This means that [method@Gdk.Surface.set_input_region] can be used to
// modify the input shape of surfaces on @display.
//
// On modern displays, this value is always true.
func (d display) SupportsInputShapes() bool {
	var _arg0 *C.GdkDisplay

	_arg0 = (*C.GdkDisplay)(unsafe.Pointer(d.Native()))

	var _cret C.gboolean

	_cret = C.gdk_display_supports_input_shapes(_arg0)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// Sync flushes any requests queued for the windowing system and waits until
// all requests have been handled.
//
// This is often used for making sure that the display is synchronized with
// the current state of the program. Calling [method@Gdk.Display.sync]
// before [method@GdkX11.Display.error_trap_pop] makes sure that any errors
// generated from earlier requests are handled before the error trap is
// removed.
//
// This is most useful for X11. On windowing systems where requests are
// handled synchronously, this function will do nothing.
func (d display) Sync() {
	var _arg0 *C.GdkDisplay

	_arg0 = (*C.GdkDisplay)(unsafe.Pointer(d.Native()))

	C.gdk_display_sync(_arg0)
}

// DisplayManager: a singleton object that offers notification when displays
// appear or disappear.
//
// You can use [func@Gdk.DisplayManager.get] to obtain the `GdkDisplayManager`
// singleton, but that should be rarely necessary. Typically, initializing GTK
// opens a display that you can work with without ever accessing the
// `GdkDisplayManager`.
//
// The GDK library can be built with support for multiple backends. The
// `GdkDisplayManager` object determines which backend is used at runtime.
//
// In the rare case that you need to influence which of the backends is being
// used, you can use [func@Gdk.set_allowed_backends]. Note that you need to call
// this function before initializing GTK.
//
//
// Backend-specific code
//
// When writing backend-specific code that is supposed to work with multiple GDK
// backends, you have to consider both compile time and runtime. At compile
// time, use the K_WINDOWING_X11, K_WINDOWING_WIN32 macros, etc. to find out
// which backends are present in the GDK library you are building your
// application against. At runtime, use type-check macros like
// GDK_IS_X11_DISPLAY() to find out which backend is in use:
//
// â€œ`c #ifdef GDK_WINDOWING_X11 if (GDK_IS_X11_DISPLAY (display)) { // make
// X11-specific calls here } else #endif #ifdef GDK_WINDOWING_MACOS if
// (GDK_IS_MACOS_DISPLAY (display)) { // make Quartz-specific calls here } else
// #endif g_error ("Unsupported GDK backend"); â€œ`
type DisplayManager interface {
	gextras.Objector

	// SetDefaultDisplay sets @display as the default display.
	SetDefaultDisplay(display Display)
}

// displayManager implements the DisplayManager interface.
type displayManager struct {
	gextras.Objector
}

var _ DisplayManager = (*displayManager)(nil)

// WrapDisplayManager wraps a GObject to the right type. It is
// primarily used internally.
func WrapDisplayManager(obj *externglib.Object) DisplayManager {
	return DisplayManager{
		Objector: obj,
	}
}

func marshalDisplayManager(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapDisplayManager(obj), nil
}

// SetDefaultDisplay sets @display as the default display.
func (m displayManager) SetDefaultDisplay(display Display) {
	var _arg0 *C.GdkDisplayManager
	var _arg1 *C.GdkDisplay

	_arg0 = (*C.GdkDisplayManager)(unsafe.Pointer(m.Native()))
	_arg1 = (*C.GdkDisplay)(unsafe.Pointer(display.Native()))

	C.gdk_display_manager_set_default_display(_arg0, _arg1)
}

// Drag: the `GdkDrag` object represents the source of an ongoing DND operation.
//
// A `GdkDrag` is created when a drag is started, and stays alive for duration
// of the DND operation. After a drag has been started with
// [func@Gdk.Drag.begin], the caller gets informed about the status of the
// ongoing drag operation with signals on the `GdkDrag` object.
//
// GTK provides a higher level abstraction based on top of these functions, and
// so they are not normally needed in GTK applications. See the "Drag and Drop"
// section of the GTK documentation for more information.
type Drag interface {
	gextras.Objector

	// DropDone informs GDK that the drop ended.
	//
	// Passing false for @success may trigger a drag cancellation animation.
	//
	// This function is called by the drag source, and should be the last call
	// before dropping the reference to the @drag.
	//
	// The `GdkDrag` will only take the first [method@Gdk.Drag.drop_done] call
	// as effective, if this function is called multiple times, all subsequent
	// calls will be ignored.
	DropDone(success bool)
	// SetHotspot sets the position of the drag surface that will be kept under
	// the cursor hotspot.
	//
	// Initially, the hotspot is at the top left corner of the drag surface.
	SetHotspot(hotX int, hotY int)
}

// drag implements the Drag interface.
type drag struct {
	gextras.Objector
}

var _ Drag = (*drag)(nil)

// WrapDrag wraps a GObject to the right type. It is
// primarily used internally.
func WrapDrag(obj *externglib.Object) Drag {
	return Drag{
		Objector: obj,
	}
}

func marshalDrag(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapDrag(obj), nil
}

// DropDone informs GDK that the drop ended.
//
// Passing false for @success may trigger a drag cancellation animation.
//
// This function is called by the drag source, and should be the last call
// before dropping the reference to the @drag.
//
// The `GdkDrag` will only take the first [method@Gdk.Drag.drop_done] call
// as effective, if this function is called multiple times, all subsequent
// calls will be ignored.
func (d drag) DropDone(success bool) {
	var _arg0 *C.GdkDrag
	var _arg1 C.gboolean

	_arg0 = (*C.GdkDrag)(unsafe.Pointer(d.Native()))
	if success {
		_arg1 = C.gboolean(1)
	}

	C.gdk_drag_drop_done(_arg0, _arg1)
}

// SetHotspot sets the position of the drag surface that will be kept under
// the cursor hotspot.
//
// Initially, the hotspot is at the top left corner of the drag surface.
func (d drag) SetHotspot(hotX int, hotY int) {
	var _arg0 *C.GdkDrag
	var _arg1 C.int
	var _arg2 C.int

	_arg0 = (*C.GdkDrag)(unsafe.Pointer(d.Native()))
	_arg1 = C.int(hotX)
	_arg2 = C.int(hotY)

	C.gdk_drag_set_hotspot(_arg0, _arg1, _arg2)
}

// DrawContext: base class for objects implementing different rendering methods.
//
// `GdkDrawContext` is the base object used by contexts implementing different
// rendering methods, such as [class@Gdk.CairoContext] or [class@Gdk.GLContext].
// It provides shared functionality between those contexts.
//
// You will always interact with one of those subclasses.
//
// A `GdkDrawContext` is always associated with a single toplevel surface.
type DrawContext interface {
	gextras.Objector

	// BeginFrame indicates that you are beginning the process of redrawing
	// @region on the @context's surface.
	//
	// Calling this function begins a drawing operation using @context on the
	// surface that @context was created from. The actual requirements and
	// guarantees for the drawing operation vary for different implementations
	// of drawing, so a [class@Gdk.CairoContext] and a [class@Gdk.GLContext]
	// need to be treated differently.
	//
	// A call to this function is a requirement for drawing and must be followed
	// by a call to [method@Gdk.DrawContext.end_frame], which will complete the
	// drawing operation and ensure the contents become visible on screen.
	//
	// Note that the @region passed to this function is the minimum region that
	// needs to be drawn and depending on implementation, windowing system and
	// hardware in use, it might be necessary to draw a larger region. Drawing
	// implementation must use [method@Gdk.DrawContext.get_frame_region() to
	// query the region that must be drawn.
	//
	// When using GTK, the widget system automatically places calls to
	// gdk_draw_context_begin_frame() and gdk_draw_context_end_frame() via the
	// use of [class@Gsk.Renderer]s, so application code does not need to call
	// these functions explicitly.
	BeginFrame(region *cairo.Region)
	// EndFrame ends a drawing operation started with
	// gdk_draw_context_begin_frame().
	//
	// This makes the drawing available on screen. See
	// [method@Gdk.DrawContext.begin_frame] for more details about drawing.
	//
	// When using a [class@Gdk.GLContext], this function may call `glFlush()`
	// implicitly before returning; it is not recommended to call `glFlush()`
	// explicitly before calling this function.
	EndFrame()
	// IsInFrame returns true if @context is in the process of drawing to its
	// surface.
	//
	// This is the case between calls to [method@Gdk.DrawContext.begin_frame]
	// and [method@Gdk.DrawContext.end_frame]. In this situation, drawing
	// commands may be effecting the contents of the @context's surface.
	IsInFrame() bool
}

// drawContext implements the DrawContext interface.
type drawContext struct {
	gextras.Objector
}

var _ DrawContext = (*drawContext)(nil)

// WrapDrawContext wraps a GObject to the right type. It is
// primarily used internally.
func WrapDrawContext(obj *externglib.Object) DrawContext {
	return DrawContext{
		Objector: obj,
	}
}

func marshalDrawContext(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapDrawContext(obj), nil
}

// BeginFrame indicates that you are beginning the process of redrawing
// @region on the @context's surface.
//
// Calling this function begins a drawing operation using @context on the
// surface that @context was created from. The actual requirements and
// guarantees for the drawing operation vary for different implementations
// of drawing, so a [class@Gdk.CairoContext] and a [class@Gdk.GLContext]
// need to be treated differently.
//
// A call to this function is a requirement for drawing and must be followed
// by a call to [method@Gdk.DrawContext.end_frame], which will complete the
// drawing operation and ensure the contents become visible on screen.
//
// Note that the @region passed to this function is the minimum region that
// needs to be drawn and depending on implementation, windowing system and
// hardware in use, it might be necessary to draw a larger region. Drawing
// implementation must use [method@Gdk.DrawContext.get_frame_region() to
// query the region that must be drawn.
//
// When using GTK, the widget system automatically places calls to
// gdk_draw_context_begin_frame() and gdk_draw_context_end_frame() via the
// use of [class@Gsk.Renderer]s, so application code does not need to call
// these functions explicitly.
func (c drawContext) BeginFrame(region *cairo.Region) {
	var _arg0 *C.GdkDrawContext
	var _arg1 *C.cairo_region_t

	_arg0 = (*C.GdkDrawContext)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.cairo_region_t)(unsafe.Pointer(region.Native()))

	C.gdk_draw_context_begin_frame(_arg0, _arg1)
}

// EndFrame ends a drawing operation started with
// gdk_draw_context_begin_frame().
//
// This makes the drawing available on screen. See
// [method@Gdk.DrawContext.begin_frame] for more details about drawing.
//
// When using a [class@Gdk.GLContext], this function may call `glFlush()`
// implicitly before returning; it is not recommended to call `glFlush()`
// explicitly before calling this function.
func (c drawContext) EndFrame() {
	var _arg0 *C.GdkDrawContext

	_arg0 = (*C.GdkDrawContext)(unsafe.Pointer(c.Native()))

	C.gdk_draw_context_end_frame(_arg0)
}

// IsInFrame returns true if @context is in the process of drawing to its
// surface.
//
// This is the case between calls to [method@Gdk.DrawContext.begin_frame]
// and [method@Gdk.DrawContext.end_frame]. In this situation, drawing
// commands may be effecting the contents of the @context's surface.
func (c drawContext) IsInFrame() bool {
	var _arg0 *C.GdkDrawContext

	_arg0 = (*C.GdkDrawContext)(unsafe.Pointer(c.Native()))

	var _cret C.gboolean

	_cret = C.gdk_draw_context_is_in_frame(_arg0)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// Drop: the `GdkDrop` object represents the target of an ongoing DND operation.
//
// Possible drop sites get informed about the status of the ongoing drag
// operation with events of type GDK_DRAG_ENTER, GDK_DRAG_LEAVE, GDK_DRAG_MOTION
// and GDK_DROP_START. The `GdkDrop` object can be obtained from these
// [class@Gdk.Event] types using [method@Gdk.DNDEvent.get_drop].
//
// The actual data transfer is initiated from the target side via an async read,
// using one of the `GdkDrop` methods for this purpose:
// [method@Gdk.Drop.read_async] or [method@Gdk.Drop.read_value_async].
//
// GTK provides a higher level abstraction based on top of these functions, and
// so they are not normally needed in GTK applications. See the "Drag and Drop"
// section of the GTK documentation for more information.
type Drop interface {
	gextras.Objector

	// Finish ends the drag operation after a drop.
	//
	// The @action must be a single action selected from the actions available
	// via [method@Gdk.Drop.get_actions].
	Finish(action DragAction)
	// ReadAsync: asynchronously read the dropped data from a `GdkDrop` in a
	// format that complies with one of the mime types.
	ReadAsync(mimeTypes []string, ioPriority int, cancellable gio.Cancellable, callback gio.AsyncReadyCallback)
	// ReadValueAsync: asynchronously request the drag operation's contents
	// converted to the given @type.
	//
	// When the operation is finished @callback will be called. You must then
	// call [method@Gdk.Drop.read_value_finish] to get the resulting `GValue`.
	//
	// For local drag'n'drop operations that are available in the given `GType`,
	// the value will be copied directly. Otherwise, GDK will try to use
	// [func@Gdk.content_deserialize_async] to convert the data.
	ReadValueAsync(typ externglib.Type, ioPriority int, cancellable gio.Cancellable, callback gio.AsyncReadyCallback)
	// ReadValueFinish finishes an async drop read.
	//
	// See [method@Gdk.Drop.read_value_async].
	ReadValueFinish(result gio.AsyncResult) (**externglib.Value, error)
	// Status selects all actions that are potentially supported by the
	// destination.
	//
	// When calling this function, do not restrict the passed in actions to the
	// ones provided by [method@Gdk.Drop.get_actions]. Those actions may change
	// in the future, even depending on the actions you provide here.
	//
	// The @preferred action is a hint to the drag'n'drop mechanism about which
	// action to use when multiple actions are possible.
	//
	// This function should be called by drag destinations in response to
	// GDK_DRAG_ENTER or GDK_DRAG_MOTION events. If the destination does not yet
	// know the exact actions it supports, it should set any possible actions
	// first and then later call this function again.
	Status(actions DragAction, preferred DragAction)
}

// drop implements the Drop interface.
type drop struct {
	gextras.Objector
}

var _ Drop = (*drop)(nil)

// WrapDrop wraps a GObject to the right type. It is
// primarily used internally.
func WrapDrop(obj *externglib.Object) Drop {
	return Drop{
		Objector: obj,
	}
}

func marshalDrop(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapDrop(obj), nil
}

// Finish ends the drag operation after a drop.
//
// The @action must be a single action selected from the actions available
// via [method@Gdk.Drop.get_actions].
func (s drop) Finish(action DragAction) {
	var _arg0 *C.GdkDrop
	var _arg1 C.GdkDragAction

	_arg0 = (*C.GdkDrop)(unsafe.Pointer(s.Native()))
	_arg1 = (C.GdkDragAction)(action)

	C.gdk_drop_finish(_arg0, _arg1)
}

// ReadAsync: asynchronously read the dropped data from a `GdkDrop` in a
// format that complies with one of the mime types.
func (s drop) ReadAsync(mimeTypes []string, ioPriority int, cancellable gio.Cancellable, callback gio.AsyncReadyCallback) {
	var _arg0 *C.GdkDrop
	var _arg1 **C.char
	var _arg2 C.int
	var _arg3 *C.GCancellable
	var _arg4 C.GAsyncReadyCallback
	var _arg5 C.gpointer

	_arg0 = (*C.GdkDrop)(unsafe.Pointer(s.Native()))
	_arg1 = (**C.char)(C.malloc((len(mimeTypes) + 1) * unsafe.Sizeof(int(0))))
	defer C.free(unsafe.Pointer(_arg1))

	{
		var out []*C.gchar
		ptr.SetSlice(unsafe.Pointer(&dst), unsafe.Pointer(_arg1), int(len(mimeTypes)))

		for i := range mimeTypes {
			_arg1 = (*C.gchar)(C.CString(mimeTypes))
			defer C.free(unsafe.Pointer(_arg1))
		}
	}
	_arg2 = C.int(ioPriority)
	_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg4 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg5 = C.gpointer(box.Assign(callback))

	C.gdk_drop_read_async(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
}

// ReadValueAsync: asynchronously request the drag operation's contents
// converted to the given @type.
//
// When the operation is finished @callback will be called. You must then
// call [method@Gdk.Drop.read_value_finish] to get the resulting `GValue`.
//
// For local drag'n'drop operations that are available in the given `GType`,
// the value will be copied directly. Otherwise, GDK will try to use
// [func@Gdk.content_deserialize_async] to convert the data.
func (s drop) ReadValueAsync(typ externglib.Type, ioPriority int, cancellable gio.Cancellable, callback gio.AsyncReadyCallback) {
	var _arg0 *C.GdkDrop
	var _arg1 C.GType
	var _arg2 C.int
	var _arg3 *C.GCancellable
	var _arg4 C.GAsyncReadyCallback
	var _arg5 C.gpointer

	_arg0 = (*C.GdkDrop)(unsafe.Pointer(s.Native()))
	_arg1 = C.GType(typ)
	_arg2 = C.int(ioPriority)
	_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg4 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg5 = C.gpointer(box.Assign(callback))

	C.gdk_drop_read_value_async(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
}

// ReadValueFinish finishes an async drop read.
//
// See [method@Gdk.Drop.read_value_async].
func (s drop) ReadValueFinish(result gio.AsyncResult) (**externglib.Value, error) {
	var _arg0 *C.GdkDrop
	var _arg1 *C.GAsyncResult

	_arg0 = (*C.GdkDrop)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(result.Native()))

	var _cret *C.GValue
	var _cerr *C.GError

	_cret = C.gdk_drop_read_value_finish(_arg0, _arg1, _cerr)

	var _value **externglib.Value
	var _goerr error

	_value = externglib.ValueFromNative(unsafe.Pointer(_cret))
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _value, _goerr
}

// Status selects all actions that are potentially supported by the
// destination.
//
// When calling this function, do not restrict the passed in actions to the
// ones provided by [method@Gdk.Drop.get_actions]. Those actions may change
// in the future, even depending on the actions you provide here.
//
// The @preferred action is a hint to the drag'n'drop mechanism about which
// action to use when multiple actions are possible.
//
// This function should be called by drag destinations in response to
// GDK_DRAG_ENTER or GDK_DRAG_MOTION events. If the destination does not yet
// know the exact actions it supports, it should set any possible actions
// first and then later call this function again.
func (s drop) Status(actions DragAction, preferred DragAction) {
	var _arg0 *C.GdkDrop
	var _arg1 C.GdkDragAction
	var _arg2 C.GdkDragAction

	_arg0 = (*C.GdkDrop)(unsafe.Pointer(s.Native()))
	_arg1 = (C.GdkDragAction)(actions)
	_arg2 = (C.GdkDragAction)(preferred)

	C.gdk_drop_status(_arg0, _arg1, _arg2)
}

// GLContext: `GdkGLContext` is an object representing a platform-specific
// OpenGL draw context.
//
// `GdkGLContext`s are created for a surface using
// [method@Gdk.Surface.create_gl_context], and the context will match the the
// characteristics of the surface.
//
// A `GdkGLContext` is not tied to any particular normal framebuffer. For
// instance, it cannot draw to the surface back buffer. The GDK repaint system
// is in full control of the painting to that. Instead, you can create render
// buffers or textures and use [func@cairo_draw_from_gl] in the draw function of
// your widget to draw them. Then GDK will handle the integration of your
// rendering with that of other widgets.
//
// Support for `GdkGLContext` is platform-specific and context creation can
// fail, returning nil context.
//
// A `GdkGLContext` has to be made "current" in order to start using it,
// otherwise any OpenGL call will be ignored.
//
//
// Creating a new OpenGL context
//
// In order to create a new `GdkGLContext` instance you need a `GdkSurface`,
// which you typically get during the realize call of a widget.
//
// A `GdkGLContext` is not realized until either
// [method@Gdk.GLContext.make_current] or [method@Gdk.GLContext.realize] is
// called. It is possible to specify details of the GL context like the OpenGL
// version to be used, or whether the GL context should have extra state
// validation enabled after calling [method@Gdk.Surface.create_gl_context] by
// calling [method@Gdk.GLContext.realize]. If the realization fails you have the
// option to change the settings of the `GdkGLContext` and try again.
//
//
// Using a GdkGLContext
//
// You will need to make the `GdkGLContext` the current context before issuing
// OpenGL calls; the system sends OpenGL commands to whichever context is
// current. It is possible to have multiple contexts, so you always need to
// ensure that the one which you want to draw with is the current one before
// issuing commands:
//
// â€œ`c gdk_gl_context_make_current (context); â€œ`
//
// You can now perform your drawing using OpenGL commands.
//
// You can check which `GdkGLContext` is the current one by using
// [func@Gdk.GLContext.get_current]; you can also unset any `GdkGLContext` that
// is currently set by calling [func@Gdk.GLContext.clear_current].
type GLContext interface {
	DrawContext

	// DebugEnabled retrieves whether the context is doing extra validations and
	// runtime checking.
	//
	// See [method@Gdk.GLContext.set_debug_enabled].
	DebugEnabled() bool
	// ForwardCompatible retrieves whether the context is forward-compatible.
	//
	// See [method@Gdk.GLContext.set_forward_compatible].
	ForwardCompatible() bool
	// RequiredVersion retrieves required OpenGL version.
	//
	// See [method@Gdk.GLContext.set_required_version].
	RequiredVersion() (major int, minor int)
	// UseES checks whether the @context is using an OpenGL or OpenGL ES
	// profile.
	UseES() bool
	// Version retrieves the OpenGL version of the @context.
	//
	// The @context must be realized prior to calling this function.
	Version() (major int, minor int)
	// IsLegacy: whether the `GdkGLContext` is in legacy mode or not.
	//
	// The `GdkGLContext` must be realized before calling this function.
	//
	// When realizing a GL context, GDK will try to use the OpenGL 3.2 core
	// profile; this profile removes all the OpenGL API that was deprecated
	// prior to the 3.2 version of the specification. If the realization is
	// successful, this function will return false.
	//
	// If the underlying OpenGL implementation does not support core profiles,
	// GDK will fall back to a pre-3.2 compatibility profile, and this function
	// will return true.
	//
	// You can use the value returned by this function to decide which kind of
	// OpenGL API to use, or whether to do extension discovery, or what kind of
	// shader programs to load.
	IsLegacy() bool
	// MakeCurrent makes the @context the current one.
	MakeCurrent()
	// Realize realizes the given `GdkGLContext`.
	//
	// It is safe to call this function on a realized `GdkGLContext`.
	Realize() error
	// SetDebugEnabled sets whether the `GdkGLContext` should perform extra
	// validations and runtime checking.
	//
	// This is useful during development, but has additional overhead.
	//
	// The `GdkGLContext` must not be realized or made current prior to calling
	// this function.
	SetDebugEnabled(enabled bool)
	// SetForwardCompatible sets whether the `GdkGLContext` should be
	// forward-compatible.
	//
	// Forward-compatible contexts must not support OpenGL functionality that
	// has been marked as deprecated in the requested version; non-forward
	// compatible contexts, on the other hand, must support both deprecated and
	// non deprecated functionality.
	//
	// The `GdkGLContext` must not be realized or made current prior to calling
	// this function.
	SetForwardCompatible(compatible bool)
	// SetRequiredVersion sets the major and minor version of OpenGL to request.
	//
	// Setting @major and @minor to zero will use the default values.
	//
	// The `GdkGLContext` must not be realized or made current prior to calling
	// this function.
	SetRequiredVersion(major int, minor int)
	// SetUseES requests that GDK create an OpenGL ES context instead of an
	// OpenGL one.
	//
	// Not all platforms support OpenGL ES.
	//
	// The @context must not have been realized.
	//
	// By default, GDK will attempt to automatically detect whether the
	// underlying GL implementation is OpenGL or OpenGL ES once the @context is
	// realized.
	//
	// You should check the return value of [method@Gdk.GLContext.get_use_es]
	// after calling [method@Gdk.GLContext.realize] to decide whether to use the
	// OpenGL or OpenGL ES API, extensions, or shaders.
	SetUseES(useEs int)
}

// glContext implements the GLContext interface.
type glContext struct {
	DrawContext
}

var _ GLContext = (*glContext)(nil)

// WrapGLContext wraps a GObject to the right type. It is
// primarily used internally.
func WrapGLContext(obj *externglib.Object) GLContext {
	return GLContext{
		DrawContext: WrapDrawContext(obj),
	}
}

func marshalGLContext(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapGLContext(obj), nil
}

// DebugEnabled retrieves whether the context is doing extra validations and
// runtime checking.
//
// See [method@Gdk.GLContext.set_debug_enabled].
func (c glContext) DebugEnabled() bool {
	var _arg0 *C.GdkGLContext

	_arg0 = (*C.GdkGLContext)(unsafe.Pointer(c.Native()))

	var _cret C.gboolean

	_cret = C.gdk_gl_context_get_debug_enabled(_arg0)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// ForwardCompatible retrieves whether the context is forward-compatible.
//
// See [method@Gdk.GLContext.set_forward_compatible].
func (c glContext) ForwardCompatible() bool {
	var _arg0 *C.GdkGLContext

	_arg0 = (*C.GdkGLContext)(unsafe.Pointer(c.Native()))

	var _cret C.gboolean

	_cret = C.gdk_gl_context_get_forward_compatible(_arg0)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// RequiredVersion retrieves required OpenGL version.
//
// See [method@Gdk.GLContext.set_required_version].
func (c glContext) RequiredVersion() (major int, minor int) {
	var _arg0 *C.GdkGLContext

	_arg0 = (*C.GdkGLContext)(unsafe.Pointer(c.Native()))

	var _arg1 C.int
	var _arg2 C.int

	C.gdk_gl_context_get_required_version(_arg0, &_arg1, &_arg2)

	var _major int
	var _minor int

	_major = (int)(_arg1)
	_minor = (int)(_arg2)

	return _major, _minor
}

// UseES checks whether the @context is using an OpenGL or OpenGL ES
// profile.
func (c glContext) UseES() bool {
	var _arg0 *C.GdkGLContext

	_arg0 = (*C.GdkGLContext)(unsafe.Pointer(c.Native()))

	var _cret C.gboolean

	_cret = C.gdk_gl_context_get_use_es(_arg0)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// Version retrieves the OpenGL version of the @context.
//
// The @context must be realized prior to calling this function.
func (c glContext) Version() (major int, minor int) {
	var _arg0 *C.GdkGLContext

	_arg0 = (*C.GdkGLContext)(unsafe.Pointer(c.Native()))

	var _arg1 C.int
	var _arg2 C.int

	C.gdk_gl_context_get_version(_arg0, &_arg1, &_arg2)

	var _major int
	var _minor int

	_major = (int)(_arg1)
	_minor = (int)(_arg2)

	return _major, _minor
}

// IsLegacy: whether the `GdkGLContext` is in legacy mode or not.
//
// The `GdkGLContext` must be realized before calling this function.
//
// When realizing a GL context, GDK will try to use the OpenGL 3.2 core
// profile; this profile removes all the OpenGL API that was deprecated
// prior to the 3.2 version of the specification. If the realization is
// successful, this function will return false.
//
// If the underlying OpenGL implementation does not support core profiles,
// GDK will fall back to a pre-3.2 compatibility profile, and this function
// will return true.
//
// You can use the value returned by this function to decide which kind of
// OpenGL API to use, or whether to do extension discovery, or what kind of
// shader programs to load.
func (c glContext) IsLegacy() bool {
	var _arg0 *C.GdkGLContext

	_arg0 = (*C.GdkGLContext)(unsafe.Pointer(c.Native()))

	var _cret C.gboolean

	_cret = C.gdk_gl_context_is_legacy(_arg0)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// MakeCurrent makes the @context the current one.
func (c glContext) MakeCurrent() {
	var _arg0 *C.GdkGLContext

	_arg0 = (*C.GdkGLContext)(unsafe.Pointer(c.Native()))

	C.gdk_gl_context_make_current(_arg0)
}

// Realize realizes the given `GdkGLContext`.
//
// It is safe to call this function on a realized `GdkGLContext`.
func (c glContext) Realize() error {
	var _arg0 *C.GdkGLContext

	_arg0 = (*C.GdkGLContext)(unsafe.Pointer(c.Native()))

	var _cerr *C.GError

	C.gdk_gl_context_realize(_arg0, _cerr)

	var _goerr error

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

// SetDebugEnabled sets whether the `GdkGLContext` should perform extra
// validations and runtime checking.
//
// This is useful during development, but has additional overhead.
//
// The `GdkGLContext` must not be realized or made current prior to calling
// this function.
func (c glContext) SetDebugEnabled(enabled bool) {
	var _arg0 *C.GdkGLContext
	var _arg1 C.gboolean

	_arg0 = (*C.GdkGLContext)(unsafe.Pointer(c.Native()))
	if enabled {
		_arg1 = C.gboolean(1)
	}

	C.gdk_gl_context_set_debug_enabled(_arg0, _arg1)
}

// SetForwardCompatible sets whether the `GdkGLContext` should be
// forward-compatible.
//
// Forward-compatible contexts must not support OpenGL functionality that
// has been marked as deprecated in the requested version; non-forward
// compatible contexts, on the other hand, must support both deprecated and
// non deprecated functionality.
//
// The `GdkGLContext` must not be realized or made current prior to calling
// this function.
func (c glContext) SetForwardCompatible(compatible bool) {
	var _arg0 *C.GdkGLContext
	var _arg1 C.gboolean

	_arg0 = (*C.GdkGLContext)(unsafe.Pointer(c.Native()))
	if compatible {
		_arg1 = C.gboolean(1)
	}

	C.gdk_gl_context_set_forward_compatible(_arg0, _arg1)
}

// SetRequiredVersion sets the major and minor version of OpenGL to request.
//
// Setting @major and @minor to zero will use the default values.
//
// The `GdkGLContext` must not be realized or made current prior to calling
// this function.
func (c glContext) SetRequiredVersion(major int, minor int) {
	var _arg0 *C.GdkGLContext
	var _arg1 C.int
	var _arg2 C.int

	_arg0 = (*C.GdkGLContext)(unsafe.Pointer(c.Native()))
	_arg1 = C.int(major)
	_arg2 = C.int(minor)

	C.gdk_gl_context_set_required_version(_arg0, _arg1, _arg2)
}

// SetUseES requests that GDK create an OpenGL ES context instead of an
// OpenGL one.
//
// Not all platforms support OpenGL ES.
//
// The @context must not have been realized.
//
// By default, GDK will attempt to automatically detect whether the
// underlying GL implementation is OpenGL or OpenGL ES once the @context is
// realized.
//
// You should check the return value of [method@Gdk.GLContext.get_use_es]
// after calling [method@Gdk.GLContext.realize] to decide whether to use the
// OpenGL or OpenGL ES API, extensions, or shaders.
func (c glContext) SetUseES(useEs int) {
	var _arg0 *C.GdkGLContext
	var _arg1 C.int

	_arg0 = (*C.GdkGLContext)(unsafe.Pointer(c.Native()))
	_arg1 = C.int(useEs)

	C.gdk_gl_context_set_use_es(_arg0, _arg1)
}

// Seat: the `GdkSeat` object represents a collection of input devices that
// belong to a user.
type Seat interface {
	gextras.Objector
}

// seat implements the Seat interface.
type seat struct {
	gextras.Objector
}

var _ Seat = (*seat)(nil)

// WrapSeat wraps a GObject to the right type. It is
// primarily used internally.
func WrapSeat(obj *externglib.Object) Seat {
	return Seat{
		Objector: obj,
	}
}

func marshalSeat(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapSeat(obj), nil
}

// VulkanContext: `GdkVulkanContext` is an object representing the
// platform-specific Vulkan draw context.
//
// `GdkVulkanContext`s are created for a surface using
// [method@Gdk.Surface.create_vulkan_context], and the context will match the
// the characteristics of the surface.
//
// Support for `GdkVulkanContext` is platform-specific and context creation can
// fail, returning nil context.
type VulkanContext interface {
	DrawContext
	gio.Initable
}

// vulkanContext implements the VulkanContext interface.
type vulkanContext struct {
	DrawContext
	gio.Initable
}

var _ VulkanContext = (*vulkanContext)(nil)

// WrapVulkanContext wraps a GObject to the right type. It is
// primarily used internally.
func WrapVulkanContext(obj *externglib.Object) VulkanContext {
	return VulkanContext{
		DrawContext:  WrapDrawContext(obj),
		gio.Initable: gio.WrapInitable(obj),
	}
}

func marshalVulkanContext(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapVulkanContext(obj), nil
}
