// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gdk/gdk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gdk_monitor_get_type()), F: marshalMonitor},
	})
}

// Monitor: gdkMonitor objects represent the individual outputs that are
// associated with a Display. GdkDisplay keeps a Model to enumerate and monitor
// monitors with gdk_display_get_monitors(). You can use
// gdk_display_get_monitor_at_surface() to find a particular monitor.
type Monitor interface {
	gextras.Objector

	// Connector gets the name of the monitor's connector, if available.
	Connector() string
	// Display gets the display that this monitor belongs to.
	Display() Display
	// Geometry retrieves the size and position of an individual monitor within
	// the display coordinate space. The returned geometry is in ”application
	// pixels”, not in ”device pixels” (see gdk_monitor_get_scale_factor()).
	Geometry() Rectangle
	// HeightMm gets the height in millimeters of the monitor.
	HeightMm() int
	// Manufacturer gets the name or PNP ID of the monitor's manufacturer, if
	// available.
	//
	// Note that this value might also vary depending on actual display backend.
	//
	// PNP ID registry is located at https://uefi.org/pnp_id_list
	Manufacturer() string
	// Model gets the string identifying the monitor model, if available.
	Model() string
	// RefreshRate gets the refresh rate of the monitor, if available.
	//
	// The value is in milli-Hertz, so a refresh rate of 60Hz is returned as
	// 60000.
	RefreshRate() int
	// ScaleFactor gets the internal scale factor that maps from monitor
	// coordinates to the actual device pixels. On traditional systems this is
	// 1, but on very high density outputs this can be a higher value (often 2).
	//
	// This can be used if you want to create pixel based data for a particular
	// monitor, but most of the time you’re drawing to a surface where it is
	// better to use gdk_surface_get_scale_factor() instead.
	ScaleFactor() int
	// SubpixelLayout gets information about the layout of red, green and blue
	// primaries for each pixel in this monitor, if available.
	SubpixelLayout() SubpixelLayout
	// WidthMm gets the width in millimeters of the monitor.
	WidthMm() int
	// IsValid returns true if the @monitor object corresponds to a physical
	// monitor. The @monitor becomes invalid when the physical monitor is
	// unplugged or removed.
	IsValid() bool
}

// monitor implements the Monitor interface.
type monitor struct {
	gextras.Objector
}

var _ Monitor = (*monitor)(nil)

// WrapMonitor wraps a GObject to the right type. It is
// primarily used internally.
func WrapMonitor(obj *externglib.Object) Monitor {
	return Monitor{
		Objector: obj,
	}
}

func marshalMonitor(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapMonitor(obj), nil
}

// Connector gets the name of the monitor's connector, if available.
func (m monitor) Connector() string {
	var _arg0 *C.GdkMonitor

	_arg0 = (*C.GdkMonitor)(unsafe.Pointer(m.Native()))

	var _cret *C.char

	cret = C.gdk_monitor_get_connector(_arg0)

	var _utf8 string

	_utf8 = C.GoString(_cret)

	return _utf8
}

// Display gets the display that this monitor belongs to.
func (m monitor) Display() Display {
	var _arg0 *C.GdkMonitor

	_arg0 = (*C.GdkMonitor)(unsafe.Pointer(m.Native()))

	var _cret *C.GdkDisplay

	cret = C.gdk_monitor_get_display(_arg0)

	var _display Display

	_display = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret.Native()))).(Display)

	return _display
}

// Geometry retrieves the size and position of an individual monitor within
// the display coordinate space. The returned geometry is in ”application
// pixels”, not in ”device pixels” (see gdk_monitor_get_scale_factor()).
func (m monitor) Geometry() Rectangle {
	var _arg0 *C.GdkMonitor

	_arg0 = (*C.GdkMonitor)(unsafe.Pointer(m.Native()))

	var _geometry Rectangle

	C.gdk_monitor_get_geometry(_arg0, (*C.GdkRectangle)(unsafe.Pointer(&_geometry)))

	return _geometry
}

// HeightMm gets the height in millimeters of the monitor.
func (m monitor) HeightMm() int {
	var _arg0 *C.GdkMonitor

	_arg0 = (*C.GdkMonitor)(unsafe.Pointer(m.Native()))

	var _cret C.int

	cret = C.gdk_monitor_get_height_mm(_arg0)

	var _gint int

	_gint = (int)(_cret)

	return _gint
}

// Manufacturer gets the name or PNP ID of the monitor's manufacturer, if
// available.
//
// Note that this value might also vary depending on actual display backend.
//
// PNP ID registry is located at https://uefi.org/pnp_id_list
func (m monitor) Manufacturer() string {
	var _arg0 *C.GdkMonitor

	_arg0 = (*C.GdkMonitor)(unsafe.Pointer(m.Native()))

	var _cret *C.char

	cret = C.gdk_monitor_get_manufacturer(_arg0)

	var _utf8 string

	_utf8 = C.GoString(_cret)

	return _utf8
}

// Model gets the string identifying the monitor model, if available.
func (m monitor) Model() string {
	var _arg0 *C.GdkMonitor

	_arg0 = (*C.GdkMonitor)(unsafe.Pointer(m.Native()))

	var _cret *C.char

	cret = C.gdk_monitor_get_model(_arg0)

	var _utf8 string

	_utf8 = C.GoString(_cret)

	return _utf8
}

// RefreshRate gets the refresh rate of the monitor, if available.
//
// The value is in milli-Hertz, so a refresh rate of 60Hz is returned as
// 60000.
func (m monitor) RefreshRate() int {
	var _arg0 *C.GdkMonitor

	_arg0 = (*C.GdkMonitor)(unsafe.Pointer(m.Native()))

	var _cret C.int

	cret = C.gdk_monitor_get_refresh_rate(_arg0)

	var _gint int

	_gint = (int)(_cret)

	return _gint
}

// ScaleFactor gets the internal scale factor that maps from monitor
// coordinates to the actual device pixels. On traditional systems this is
// 1, but on very high density outputs this can be a higher value (often 2).
//
// This can be used if you want to create pixel based data for a particular
// monitor, but most of the time you’re drawing to a surface where it is
// better to use gdk_surface_get_scale_factor() instead.
func (m monitor) ScaleFactor() int {
	var _arg0 *C.GdkMonitor

	_arg0 = (*C.GdkMonitor)(unsafe.Pointer(m.Native()))

	var _cret C.int

	cret = C.gdk_monitor_get_scale_factor(_arg0)

	var _gint int

	_gint = (int)(_cret)

	return _gint
}

// SubpixelLayout gets information about the layout of red, green and blue
// primaries for each pixel in this monitor, if available.
func (m monitor) SubpixelLayout() SubpixelLayout {
	var _arg0 *C.GdkMonitor

	_arg0 = (*C.GdkMonitor)(unsafe.Pointer(m.Native()))

	var _cret C.GdkSubpixelLayout

	cret = C.gdk_monitor_get_subpixel_layout(_arg0)

	var _subpixelLayout SubpixelLayout

	_subpixelLayout = SubpixelLayout(_cret)

	return _subpixelLayout
}

// WidthMm gets the width in millimeters of the monitor.
func (m monitor) WidthMm() int {
	var _arg0 *C.GdkMonitor

	_arg0 = (*C.GdkMonitor)(unsafe.Pointer(m.Native()))

	var _cret C.int

	cret = C.gdk_monitor_get_width_mm(_arg0)

	var _gint int

	_gint = (int)(_cret)

	return _gint
}

// IsValid returns true if the @monitor object corresponds to a physical
// monitor. The @monitor becomes invalid when the physical monitor is
// unplugged or removed.
func (m monitor) IsValid() bool {
	var _arg0 *C.GdkMonitor

	_arg0 = (*C.GdkMonitor)(unsafe.Pointer(m.Native()))

	var _cret C.gboolean

	cret = C.gdk_monitor_is_valid(_arg0)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}
