// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <gdk/gdk.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gdk_subpixel_layout_get_type()), F: marshalSubpixelLayout},
		{T: externglib.Type(C.gdk_monitor_get_type()), F: marshalMonitor},
	})
}

// SubpixelLayout: this enumeration describes how the red, green and blue
// components of physical pixels on an output device are laid out.
type SubpixelLayout int

const (
	// unknown: the layout is not known
	SubpixelLayoutUnknown SubpixelLayout = 0
	// none: not organized in this way
	SubpixelLayoutNone SubpixelLayout = 1
	// HorizontalRGB: the layout is horizontal, the order is RGB
	SubpixelLayoutHorizontalRGB SubpixelLayout = 2
	// HorizontalBGR: the layout is horizontal, the order is BGR
	SubpixelLayoutHorizontalBGR SubpixelLayout = 3
	// VerticalRGB: the layout is vertical, the order is RGB
	SubpixelLayoutVerticalRGB SubpixelLayout = 4
	// VerticalBGR: the layout is vertical, the order is BGR
	SubpixelLayoutVerticalBGR SubpixelLayout = 5
)

func marshalSubpixelLayout(p uintptr) (interface{}, error) {
	return SubpixelLayout(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// Monitor: `GdkMonitor` objects represent the individual outputs that are
// associated with a `GdkDisplay`.
//
// `GdkDisplay` keeps a `GListModel` to enumerate and monitor monitors with
// [method@Gdk.Display.get_monitors]. You can use
// [method@Gdk.Display.get_monitor_at_surface] to find a particular monitor.
type Monitor interface {
	gextras.Objector

	// Connector:
	Connector() string
	// Display:
	Display() Display
	// Geometry:
	Geometry() Rectangle
	// HeightMm:
	HeightMm() int
	// Manufacturer:
	Manufacturer() string
	// Model:
	Model() string
	// RefreshRate:
	RefreshRate() int
	// ScaleFactor:
	ScaleFactor() int
	// SubpixelLayout:
	SubpixelLayout() SubpixelLayout
	// WidthMm:
	WidthMm() int
	// IsValidMonitor:
	IsValidMonitor() bool
}

// monitor implements the Monitor class.
type monitor struct {
	gextras.Objector
}

// WrapMonitor wraps a GObject to the right type. It is
// primarily used internally.
func WrapMonitor(obj *externglib.Object) Monitor {
	return monitor{
		Objector: obj,
	}
}

func marshalMonitor(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapMonitor(obj), nil
}

func (m monitor) Connector() string {
	var _arg0 *C.GdkMonitor // out
	var _cret *C.char       // in

	_arg0 = (*C.GdkMonitor)(unsafe.Pointer(m.Native()))

	_cret = C.gdk_monitor_get_connector(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

func (m monitor) Display() Display {
	var _arg0 *C.GdkMonitor // out
	var _cret *C.GdkDisplay // in

	_arg0 = (*C.GdkMonitor)(unsafe.Pointer(m.Native()))

	_cret = C.gdk_monitor_get_display(_arg0)

	var _display Display // out

	_display = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Display)

	return _display
}

func (m monitor) Geometry() Rectangle {
	var _arg0 *C.GdkMonitor  // out
	var _arg1 C.GdkRectangle // in

	_arg0 = (*C.GdkMonitor)(unsafe.Pointer(m.Native()))

	C.gdk_monitor_get_geometry(_arg0, &_arg1)

	var _geometry Rectangle // out

	{
		var refTmpIn *C.GdkRectangle
		var refTmpOut *Rectangle

		in0 := &_arg1
		refTmpIn = in0

		refTmpOut = (*Rectangle)(unsafe.Pointer(refTmpIn))

		_geometry = *refTmpOut
	}

	return _geometry
}

func (m monitor) HeightMm() int {
	var _arg0 *C.GdkMonitor // out
	var _cret C.int         // in

	_arg0 = (*C.GdkMonitor)(unsafe.Pointer(m.Native()))

	_cret = C.gdk_monitor_get_height_mm(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (m monitor) Manufacturer() string {
	var _arg0 *C.GdkMonitor // out
	var _cret *C.char       // in

	_arg0 = (*C.GdkMonitor)(unsafe.Pointer(m.Native()))

	_cret = C.gdk_monitor_get_manufacturer(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

func (m monitor) Model() string {
	var _arg0 *C.GdkMonitor // out
	var _cret *C.char       // in

	_arg0 = (*C.GdkMonitor)(unsafe.Pointer(m.Native()))

	_cret = C.gdk_monitor_get_model(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

func (m monitor) RefreshRate() int {
	var _arg0 *C.GdkMonitor // out
	var _cret C.int         // in

	_arg0 = (*C.GdkMonitor)(unsafe.Pointer(m.Native()))

	_cret = C.gdk_monitor_get_refresh_rate(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (m monitor) ScaleFactor() int {
	var _arg0 *C.GdkMonitor // out
	var _cret C.int         // in

	_arg0 = (*C.GdkMonitor)(unsafe.Pointer(m.Native()))

	_cret = C.gdk_monitor_get_scale_factor(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (m monitor) SubpixelLayout() SubpixelLayout {
	var _arg0 *C.GdkMonitor       // out
	var _cret C.GdkSubpixelLayout // in

	_arg0 = (*C.GdkMonitor)(unsafe.Pointer(m.Native()))

	_cret = C.gdk_monitor_get_subpixel_layout(_arg0)

	var _subpixelLayout SubpixelLayout // out

	_subpixelLayout = SubpixelLayout(_cret)

	return _subpixelLayout
}

func (m monitor) WidthMm() int {
	var _arg0 *C.GdkMonitor // out
	var _cret C.int         // in

	_arg0 = (*C.GdkMonitor)(unsafe.Pointer(m.Native()))

	_cret = C.gdk_monitor_get_width_mm(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (m monitor) IsValidMonitor() bool {
	var _arg0 *C.GdkMonitor // out
	var _cret C.gboolean    // in

	_arg0 = (*C.GdkMonitor)(unsafe.Pointer(m.Native()))

	_cret = C.gdk_monitor_is_valid(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}
