// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	"github.com/diamondburned/gotk4/pkg/cairo"
	"github.com/diamondburned/gotk4/pkg/gdkpixbuf/v2"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <gdk/gdk.h>
import "C"

// PixbufGetFromSurface transfers image data from a #cairo_surface_t and
// converts it to an RGB(A) representation inside a Pixbuf. This allows you to
// efficiently read individual pixels from cairo surfaces.
//
// This function will create an RGB pixbuf with 8 bits per channel. The pixbuf
// will contain an alpha channel if the @surface contains one.
func PixbufGetFromSurface(surface *cairo.Surface, srcX int, srcY int, width int, height int) gdkpixbuf.Pixbuf {
	var _arg1 *C.cairo_surface_t
	var _arg2 C.int
	var _arg3 C.int
	var _arg4 C.int
	var _arg5 C.int

	_arg1 = (*C.cairo_surface_t)(unsafe.Pointer(surface.Native()))
	_arg2 = C.int(srcX)
	_arg3 = C.int(srcY)
	_arg4 = C.int(width)
	_arg5 = C.int(height)

	var _cret *C.GdkPixbuf

	cret = C.gdk_pixbuf_get_from_surface(_arg1, _arg2, _arg3, _arg4, _arg5)

	var _pixbuf gdkpixbuf.Pixbuf

	_pixbuf = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret.Native()))).(gdkpixbuf.Pixbuf)

	return _pixbuf
}

// PixbufGetFromTexture creates a new pixbuf from @texture. This should
// generally not be used in newly written code as later stages will almost
// certainly convert the pixbuf back into a texture to draw it on screen.
func PixbufGetFromTexture(texture Texture) gdkpixbuf.Pixbuf {
	var _arg1 *C.GdkTexture

	_arg1 = (*C.GdkTexture)(unsafe.Pointer(texture.Native()))

	var _cret *C.GdkPixbuf

	cret = C.gdk_pixbuf_get_from_texture(_arg1)

	var _pixbuf gdkpixbuf.Pixbuf

	_pixbuf = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret.Native()))).(gdkpixbuf.Pixbuf)

	return _pixbuf
}
