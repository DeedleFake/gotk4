// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/core/gerror"
	"github.com/diamondburned/gotk4/core/gextras"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <gdk/gdk.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gdk_content_provider_get_type()), F: marshalContentProvider},
	})
}

// ContentProvider: a `GdkContentProvider` is used to provide content for the
// clipboard or for drag-and-drop operations in a number of formats.
//
// To create a `GdkContentProvider`, use
// [ctor@Gdk.ContentProvider.new_for_value] or
// [ctor@Gdk.ContentProvider.new_for_bytes].
//
// GDK knows how to handle common text and image formats out-of-the-box. See
// [class@Gdk.ContentSerializer] and [class@Gdk.ContentDeserializer] if you want
// to add support for application-specific data formats.
type ContentProvider interface {
	gextras.Objector

	// ContentChangedContentProvider:
	ContentChangedContentProvider()
	// Value:
	Value(value externglib.Value) error
	// RefFormatsContentProvider:
	RefFormatsContentProvider() *ContentFormats
	// RefStorableFormatsContentProvider:
	RefStorableFormatsContentProvider() *ContentFormats
	// WriteMIMETypeFinishContentProvider:
	WriteMIMETypeFinishContentProvider(result gio.AsyncResult) error
}

// contentProvider implements the ContentProvider class.
type contentProvider struct {
	gextras.Objector
}

// WrapContentProvider wraps a GObject to the right type. It is
// primarily used internally.
func WrapContentProvider(obj *externglib.Object) ContentProvider {
	return contentProvider{
		Objector: obj,
	}
}

func marshalContentProvider(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapContentProvider(obj), nil
}

// NewContentProviderForValue:
func NewContentProviderForValue(value externglib.Value) ContentProvider {
	var _arg1 *C.GValue             // out
	var _cret *C.GdkContentProvider // in

	_arg1 = (*C.GValue)(unsafe.Pointer(&value.GValue))

	_cret = C.gdk_content_provider_new_for_value(_arg1)

	var _contentProvider ContentProvider // out

	_contentProvider = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(ContentProvider)

	return _contentProvider
}

// NewContentProviderUnion:
func NewContentProviderUnion(providers []ContentProvider) ContentProvider {
	var _arg1 **C.GdkContentProvider
	var _arg2 C.gsize
	var _cret *C.GdkContentProvider // in

	_arg2 = C.gsize(len(providers))
	_arg1 = (**C.GdkContentProvider)(C.malloc(C.ulong(len(providers)) * C.ulong(unsafe.Sizeof(uint(0)))))
	{
		out := unsafe.Slice(_arg1, len(providers))
		for i := range providers {
			out[i] = (*C.GdkContentProvider)(unsafe.Pointer(providers[i].Native()))
		}
	}

	_cret = C.gdk_content_provider_new_union(_arg1, _arg2)

	var _contentProvider ContentProvider // out

	_contentProvider = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(ContentProvider)

	return _contentProvider
}

func (p contentProvider) ContentChangedContentProvider() {
	var _arg0 *C.GdkContentProvider // out

	_arg0 = (*C.GdkContentProvider)(unsafe.Pointer(p.Native()))

	C.gdk_content_provider_content_changed(_arg0)
}

func (p contentProvider) Value(value externglib.Value) error {
	var _arg0 *C.GdkContentProvider // out
	var _arg1 *C.GValue             // out
	var _cerr *C.GError             // in

	_arg0 = (*C.GdkContentProvider)(unsafe.Pointer(p.Native()))
	_arg1 = (*C.GValue)(unsafe.Pointer(&value.GValue))

	C.gdk_content_provider_get_value(_arg0, _arg1, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

func (p contentProvider) RefFormatsContentProvider() *ContentFormats {
	var _arg0 *C.GdkContentProvider // out
	var _cret *C.GdkContentFormats  // in

	_arg0 = (*C.GdkContentProvider)(unsafe.Pointer(p.Native()))

	_cret = C.gdk_content_provider_ref_formats(_arg0)

	var _contentFormats *ContentFormats // out

	_contentFormats = (*ContentFormats)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(&_contentFormats, func(v **ContentFormats) {
		C.free(unsafe.Pointer(v))
	})

	return _contentFormats
}

func (p contentProvider) RefStorableFormatsContentProvider() *ContentFormats {
	var _arg0 *C.GdkContentProvider // out
	var _cret *C.GdkContentFormats  // in

	_arg0 = (*C.GdkContentProvider)(unsafe.Pointer(p.Native()))

	_cret = C.gdk_content_provider_ref_storable_formats(_arg0)

	var _contentFormats *ContentFormats // out

	_contentFormats = (*ContentFormats)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(&_contentFormats, func(v **ContentFormats) {
		C.free(unsafe.Pointer(v))
	})

	return _contentFormats
}

func (p contentProvider) WriteMIMETypeFinishContentProvider(result gio.AsyncResult) error {
	var _arg0 *C.GdkContentProvider // out
	var _arg1 *C.GAsyncResult       // out
	var _cerr *C.GError             // in

	_arg0 = (*C.GdkContentProvider)(unsafe.Pointer(p.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(result.Native()))

	C.gdk_content_provider_write_mime_type_finish(_arg0, _arg1, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}
