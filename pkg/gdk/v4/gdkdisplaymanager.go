// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <gdk/gdk.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gdk_display_manager_get_type()), F: marshalDisplayManager},
	})
}

// SetAllowedBackends sets a list of backends that GDK should try to use.
//
// This can be useful if your application does not work with certain GDK
// backends.
//
// By default, GDK tries all included backends.
//
// For example:
//
// “`c gdk_set_allowed_backends ("wayland,macos,*"); “`
//
// instructs GDK to try the Wayland backend first, followed by the MacOs
// backend, and then all others.
//
// If the `GDK_BACKEND` environment variable is set, it determines what backends
// are tried in what order, while still respecting the set of allowed backends
// that are specified by this function.
//
// The possible backend names are:
//
//    - `broadway`
//    - `macos`
//    - `wayland`.
//    - `win32`
//    - `x11`
//
// You can also include a `*` in the list to try all remaining backends.
//
// This call must happen prior to functions that open a display, such as
// [func@Gdk.Display.open], `gtk_init()`, or `gtk_init_check()` in order to take
// effect.
func SetAllowedBackends(backends string) {
	var _arg1 *C.char // out

	_arg1 = (*C.char)(C.CString(backends))
	defer C.free(unsafe.Pointer(_arg1))

	C.gdk_set_allowed_backends(_arg1)
}

// DisplayManager: a singleton object that offers notification when displays
// appear or disappear.
//
// You can use [func@Gdk.DisplayManager.get] to obtain the `GdkDisplayManager`
// singleton, but that should be rarely necessary. Typically, initializing GTK
// opens a display that you can work with without ever accessing the
// `GdkDisplayManager`.
//
// The GDK library can be built with support for multiple backends. The
// `GdkDisplayManager` object determines which backend is used at runtime.
//
// In the rare case that you need to influence which of the backends is being
// used, you can use [func@Gdk.set_allowed_backends]. Note that you need to call
// this function before initializing GTK.
//
//
// Backend-specific code
//
// When writing backend-specific code that is supposed to work with multiple GDK
// backends, you have to consider both compile time and runtime. At compile
// time, use the K_WINDOWING_X11, K_WINDOWING_WIN32 macros, etc. to find out
// which backends are present in the GDK library you are building your
// application against. At runtime, use type-check macros like
// GDK_IS_X11_DISPLAY() to find out which backend is in use:
//
// “`c #ifdef GDK_WINDOWING_X11 if (GDK_IS_X11_DISPLAY (display)) { // make
// X11-specific calls here } else #endif #ifdef GDK_WINDOWING_MACOS if
// (GDK_IS_MACOS_DISPLAY (display)) { // make Quartz-specific calls here } else
// #endif g_error ("Unsupported GDK backend"); “`
type DisplayManager interface {
	gextras.Objector

	// DefaultDisplay:
	DefaultDisplay() Display
	// OpenDisplayDisplayManager:
	OpenDisplayDisplayManager(name string) Display
	// SetDefaultDisplayDisplayManager:
	SetDefaultDisplayDisplayManager(display Display)
}

// displayManager implements the DisplayManager class.
type displayManager struct {
	gextras.Objector
}

// WrapDisplayManager wraps a GObject to the right type. It is
// primarily used internally.
func WrapDisplayManager(obj *externglib.Object) DisplayManager {
	return displayManager{
		Objector: obj,
	}
}

func marshalDisplayManager(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapDisplayManager(obj), nil
}

func (m displayManager) DefaultDisplay() Display {
	var _arg0 *C.GdkDisplayManager // out
	var _cret *C.GdkDisplay        // in

	_arg0 = (*C.GdkDisplayManager)(unsafe.Pointer(m.Native()))

	_cret = C.gdk_display_manager_get_default_display(_arg0)

	var _display Display // out

	_display = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Display)

	return _display
}

func (m displayManager) OpenDisplayDisplayManager(name string) Display {
	var _arg0 *C.GdkDisplayManager // out
	var _arg1 *C.char              // out
	var _cret *C.GdkDisplay        // in

	_arg0 = (*C.GdkDisplayManager)(unsafe.Pointer(m.Native()))
	_arg1 = (*C.char)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gdk_display_manager_open_display(_arg0, _arg1)

	var _display Display // out

	_display = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Display)

	return _display
}

func (m displayManager) SetDefaultDisplayDisplayManager(display Display) {
	var _arg0 *C.GdkDisplayManager // out
	var _arg1 *C.GdkDisplay        // out

	_arg0 = (*C.GdkDisplayManager)(unsafe.Pointer(m.Native()))
	_arg1 = (*C.GdkDisplay)(unsafe.Pointer(display.Native()))

	C.gdk_display_manager_set_default_display(_arg0, _arg1)
}
