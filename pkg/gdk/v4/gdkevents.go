// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"unsafe"

	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gdk/gdk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gdk_event_sequence_get_type()), F: marshalEventSequence},
	})
}

// EventsGetAngle returns the relative angle from @event1 to @event2.
//
// The relative angle is the angle between the X axis and the line through both
// events' positions. The rotation direction for positive angles is from the
// positive X axis towards the positive Y axis.
//
// This assumes that both events have X/Y information. If not, this function
// returns false.
func EventsGetAngle(event1 Event, event2 Event) (float64, bool) {
	var _arg1 *C.GdkEvent
	var _arg2 *C.GdkEvent

	_arg1 = (*C.GdkEvent)(unsafe.Pointer(event1.Native()))
	_arg2 = (*C.GdkEvent)(unsafe.Pointer(event2.Native()))

	var _arg3 C.double
	var _cret C.gboolean

	_cret = C.gdk_events_get_angle(_arg1, _arg2, &_arg3)

	var _angle float64
	var _ok bool

	_angle = (float64)(_arg3)
	if _cret {
		_ok = true
	}

	return _angle, _ok
}

// EventsGetCenter returns the point halfway between the events' positions.
//
// This assumes that both events have X/Y information. If not, this function
// returns false.
func EventsGetCenter(event1 Event, event2 Event) (x float64, y float64, ok bool) {
	var _arg1 *C.GdkEvent
	var _arg2 *C.GdkEvent

	_arg1 = (*C.GdkEvent)(unsafe.Pointer(event1.Native()))
	_arg2 = (*C.GdkEvent)(unsafe.Pointer(event2.Native()))

	var _arg3 C.double
	var _arg4 C.double
	var _cret C.gboolean

	_cret = C.gdk_events_get_center(_arg1, _arg2, &_arg3, &_arg4)

	var _x float64
	var _y float64
	var _ok bool

	_x = (float64)(_arg3)
	_y = (float64)(_arg4)
	if _cret {
		_ok = true
	}

	return _x, _y, _ok
}

// EventsGetDistance returns the distance between the event locations.
//
// This assumes that both events have X/Y information. If not, this function
// returns false.
func EventsGetDistance(event1 Event, event2 Event) (float64, bool) {
	var _arg1 *C.GdkEvent
	var _arg2 *C.GdkEvent

	_arg1 = (*C.GdkEvent)(unsafe.Pointer(event1.Native()))
	_arg2 = (*C.GdkEvent)(unsafe.Pointer(event2.Native()))

	var _arg3 C.double
	var _cret C.gboolean

	_cret = C.gdk_events_get_distance(_arg1, _arg2, &_arg3)

	var _distance float64
	var _ok bool

	_distance = (float64)(_arg3)
	if _cret {
		_ok = true
	}

	return _distance, _ok
}

// EventSequence: `GdkEventSequence` is an opaque type representing a sequence
// of related touch events.
type EventSequence struct {
	native C.GdkEventSequence
}

// WrapEventSequence wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapEventSequence(ptr unsafe.Pointer) *EventSequence {
	if ptr == nil {
		return nil
	}

	return (*EventSequence)(ptr)
}

func marshalEventSequence(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapEventSequence(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (e *EventSequence) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}
