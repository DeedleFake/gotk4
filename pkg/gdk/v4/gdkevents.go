// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"unsafe"

	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <stdbool.h>
// #include <glib-object.h>
// #include <gdk/gdk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gdk_event_sequence_get_type()), F: marshalEventSequence},
	})
}

// EventsGetAngle returns the relative angle from @event1 to @event2.
//
// The relative angle is the angle between the X axis and the line through both
// events' positions. The rotation direction for positive angles is from the
// positive X axis towards the positive Y axis.
//
// This assumes that both events have X/Y information. If not, this function
// returns false.
func EventsGetAngle(event1 Event, event2 Event) (angle float64, ok bool) {
	var arg1 *C.GdkEvent
	var arg2 *C.GdkEvent
	var arg3 *C.double // out

	arg1 = (*C.GdkEvent)(event1.Native())
	arg2 = (*C.GdkEvent)(event2.Native())

	ret := C.gdk_events_get_angle(arg1, arg2, &arg3)

	var ret0 float64
	var ret1 bool

	ret0 = float64(arg3)

	ret1 = C.bool(ret) != C.false

	return ret0, ret1
}

// EventsGetCenter returns the point halfway between the events' positions.
//
// This assumes that both events have X/Y information. If not, this function
// returns false.
func EventsGetCenter(event1 Event, event2 Event) (x float64, y float64, ok bool) {
	var arg1 *C.GdkEvent
	var arg2 *C.GdkEvent
	var arg3 *C.double // out
	var arg4 *C.double // out

	arg1 = (*C.GdkEvent)(event1.Native())
	arg2 = (*C.GdkEvent)(event2.Native())

	ret := C.gdk_events_get_center(arg1, arg2, &arg3, &arg4)

	var ret0 float64
	var ret1 float64
	var ret2 bool

	ret0 = float64(arg3)

	ret1 = float64(arg4)

	ret2 = C.bool(ret) != C.false

	return ret0, ret1, ret2
}

// EventsGetDistance returns the distance between the event locations.
//
// This assumes that both events have X/Y information. If not, this function
// returns false.
func EventsGetDistance(event1 Event, event2 Event) (distance float64, ok bool) {
	var arg1 *C.GdkEvent
	var arg2 *C.GdkEvent
	var arg3 *C.double // out

	arg1 = (*C.GdkEvent)(event1.Native())
	arg2 = (*C.GdkEvent)(event2.Native())

	ret := C.gdk_events_get_distance(arg1, arg2, &arg3)

	var ret0 float64
	var ret1 bool

	ret0 = float64(arg3)

	ret1 = C.bool(ret) != C.false

	return ret0, ret1
}

// EventSequence: `GdkEventSequence` is an opaque type representing a sequence
// of related touch events.
type EventSequence struct {
	native C.GdkEventSequence
}

// WrapEventSequence wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapEventSequence(ptr unsafe.Pointer) *EventSequence {
	if ptr == nil {
		return nil
	}

	return (*EventSequence)(ptr)
}

func marshalEventSequence(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapEventSequence(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (e *EventSequence) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}
