// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gdk/gdk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gdk_paintable_get_type()), F: marshalPaintable},
	})
}

// PaintableNewEmpty returns a paintable that has the given intrinsic size and
// draws nothing. This is often useful for implementing the
// PaintableInterface.get_current_image() virtual function when the paintable is
// in an incomplete state (like a MediaStream before receiving the first frame).
func PaintableNewEmpty(intrinsicWidth int, intrinsicHeight int) Paintable {
	var arg1 C.int
	var arg2 C.int

	arg1 = C.int(intrinsicWidth)
	arg2 = C.int(intrinsicHeight)

	var cret *C.GdkPaintable
	var goret1 Paintable

	cret = C.gdk_paintable_new_empty(intrinsicWidth, intrinsicHeight)

	goret1 = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(cret.Native()))).(Paintable)

	return goret1
}

// PaintableOverrider contains methods that are overridable. This
// interface is a subset of the interface Paintable.
type PaintableOverrider interface {
	// CurrentImage gets an immutable paintable for the current contents
	// displayed by @paintable.
	//
	// This is useful when you want to retain the current state of an animation,
	// for example to take a screenshot of a running animation.
	//
	// If the @paintable is already immutable, it will return itself.
	CurrentImage() Paintable
	// Flags: get flags for the paintable. This is oftentimes useful for
	// optimizations.
	//
	// See PaintableFlags for the flags and what they mean.
	Flags() PaintableFlags
	// IntrinsicAspectRatio gets the preferred aspect ratio the @paintable would
	// like to be displayed at. The aspect ratio is the width divided by the
	// height, so a value of 0.5 means that the @paintable prefers to be
	// displayed twice as high as it is wide. Consumers of this interface can
	// use this to preserve aspect ratio when displaying the paintable.
	//
	// This is a purely informational value and does not in any way limit the
	// values that may be passed to gdk_paintable_snapshot().
	//
	// Usually when a @paintable returns nonzero values from
	// gdk_paintable_get_intrinsic_width() and
	// gdk_paintable_get_intrinsic_height() the aspect ratio should conform to
	// those values, though that is not required.
	//
	// If the @paintable does not have a preferred aspect ratio, it returns 0.
	// Negative values are never returned.
	IntrinsicAspectRatio() float64
	// IntrinsicHeight gets the preferred height the @paintable would like to be
	// displayed at. Consumers of this interface can use this to reserve enough
	// space to draw the paintable.
	//
	// This is a purely informational value and does not in any way limit the
	// values that may be passed to gdk_paintable_snapshot().
	//
	// If the @paintable does not have a preferred height, it returns 0.
	// Negative values are never returned.
	IntrinsicHeight() int
	// IntrinsicWidth gets the preferred width the @paintable would like to be
	// displayed at. Consumers of this interface can use this to reserve enough
	// space to draw the paintable.
	//
	// This is a purely informational value and does not in any way limit the
	// values that may be passed to gdk_paintable_snapshot().
	//
	// If the @paintable does not have a preferred width, it returns 0. Negative
	// values are never returned.
	IntrinsicWidth() int
	// Snapshot snapshots the given paintable with the given @width and @height
	// at the current (0,0) offset of the @snapshot. If @width and @height are
	// not larger than zero, this function will do nothing.
	Snapshot(snapshot Snapshot, width float64, height float64)
}

// Paintable is a simple interface used by GDK and GTK to represent objects that
// can be painted anywhere at any size without requiring any sort of layout. The
// interface is inspired by similar concepts elsewhere, such as ClutterContent
// (https://developer.gnome.org/clutter/stable/ClutterContent.html), HTML/CSS
// Paint Sources (https://www.w3.org/TR/css-images-4/#paint-source), or SVG
// Paint Servers (https://www.w3.org/TR/SVG2/pservers.html).
//
// A Paintable can be snapshot at any time and size using
// gdk_paintable_snapshot(). How the paintable interprets that size and if it
// scales or centers itself into the given rectangle is implementation defined,
// though if you are implementing a Paintable and don't know what to do, it is
// suggested that you scale your paintable ignoring any potential aspect ratio.
//
// The contents that a Paintable produces may depend on the Snapshot passed to
// it. For example, paintables may decide to use more detailed images on higher
// resolution screens or when OpenGL is available. A Paintable will however
// always produce the same output for the same snapshot.
//
// A Paintable may change its contents, meaning that it will now produce a
// different output with the same snapshot. Once that happens, it will call
// gdk_paintable_invalidate_contents() which will emit the
// Paintable::invalidate-contents signal. If a paintable is known to never
// change its contents, it will set the GDK_PAINTABLE_STATIC_CONTENTS flag. If a
// consumer cannot deal with changing contents, it may call
// gdk_paintable_get_current_image() which will return a static paintable and
// use that.
//
// A paintable can report an intrinsic (or preferred) size or aspect ratio it
// wishes to be rendered at, though it doesn't have to. Consumers of the
// interface can use this information to layout thepaintable appropriately. Just
// like the contents, the size of a paintable can change. A paintable will
// indicate this by calling gdk_paintable_invalidate_size() which will emit the
// Paintable::invalidate-size signal. And just like for contents, if a paintable
// is known to never change its size, it will set the GDK_PAINTABLE_STATIC_SIZE
// flag.
//
// Besides API for applications, there are some functions that are only useful
// for implementing subclasses and should not be used by applications:
// gdk_paintable_invalidate_contents(), gdk_paintable_invalidate_size(),
// gdk_paintable_new_empty().
type Paintable interface {
	gextras.Objector
	PaintableOverrider

	// ComputeConcreteSize applies the sizing algorithm outlined in
	// https://drafts.csswg.org/css-images-3/#default-sizing to the given
	// @paintable. See that link for more details.
	//
	// It is not necessary to call this function when both @specified_width and
	// @specified_height are known, but it is useful to call this function in
	// GtkWidget:measure implementations to compute the other dimension when
	// only one dimension is given.
	ComputeConcreteSize(specifiedWidth float64, specifiedHeight float64, defaultWidth float64, defaultHeight float64) (concreteWidth float64, concreteHeight float64)
	// InvalidateContents: called by implementations of Paintable to invalidate
	// their contents. Unless the contents are invalidated, implementations must
	// guarantee that multiple calls of gdk_paintable_snapshot() produce the
	// same output.
	//
	// This function will emit the Paintable::invalidate-contents signal.
	//
	// If a @paintable reports the GDK_PAINTABLE_STATIC_CONTENTS flag, it must
	// not call this function.
	InvalidateContents()
	// InvalidateSize: called by implementations of Paintable to invalidate
	// their size. As long as the size is not invalidated, @paintable must
	// return the same values for its intrinsic width, height and aspect ratio.
	//
	// This function will emit the Paintable::invalidate-size signal.
	//
	// If a @paintable reports the GDK_PAINTABLE_STATIC_SIZE flag, it must not
	// call this function.
	InvalidateSize()
}

// paintable implements the Paintable interface.
type paintable struct {
	gextras.Objector
}

var _ Paintable = (*paintable)(nil)

// WrapPaintable wraps a GObject to a type that implements interface
// Paintable. It is primarily used internally.
func WrapPaintable(obj *externglib.Object) Paintable {
	return Paintable{
		Objector: obj,
	}
}

func marshalPaintable(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapPaintable(obj), nil
}

// ComputeConcreteSize applies the sizing algorithm outlined in
// https://drafts.csswg.org/css-images-3/#default-sizing to the given
// @paintable. See that link for more details.
//
// It is not necessary to call this function when both @specified_width and
// @specified_height are known, but it is useful to call this function in
// GtkWidget:measure implementations to compute the other dimension when
// only one dimension is given.
func (p paintable) ComputeConcreteSize(specifiedWidth float64, specifiedHeight float64, defaultWidth float64, defaultHeight float64) (concreteWidth float64, concreteHeight float64) {
	var arg0 *C.GdkPaintable
	var arg1 C.double
	var arg2 C.double
	var arg3 C.double
	var arg4 C.double

	arg0 = (*C.GdkPaintable)(unsafe.Pointer(p.Native()))
	arg1 = C.double(specifiedWidth)
	arg2 = C.double(specifiedHeight)
	arg3 = C.double(defaultWidth)
	arg4 = C.double(defaultHeight)

	var arg5 *C.double
	var ret5 float64
	var arg6 *C.double
	var ret6 float64

	C.gdk_paintable_compute_concrete_size(arg0, specifiedWidth, specifiedHeight, defaultWidth, defaultHeight, &arg5, &arg6)

	ret5 = *C.double(arg5)
	ret6 = *C.double(arg6)

	return ret5, ret6
}

// CurrentImage gets an immutable paintable for the current contents
// displayed by @paintable.
//
// This is useful when you want to retain the current state of an animation,
// for example to take a screenshot of a running animation.
//
// If the @paintable is already immutable, it will return itself.
func (p paintable) CurrentImage() Paintable {
	var arg0 *C.GdkPaintable

	arg0 = (*C.GdkPaintable)(unsafe.Pointer(p.Native()))

	var cret *C.GdkPaintable
	var goret1 Paintable

	cret = C.gdk_paintable_get_current_image(arg0)

	goret1 = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(cret.Native()))).(Paintable)

	return goret1
}

// Flags: get flags for the paintable. This is oftentimes useful for
// optimizations.
//
// See PaintableFlags for the flags and what they mean.
func (p paintable) Flags() PaintableFlags {
	var arg0 *C.GdkPaintable

	arg0 = (*C.GdkPaintable)(unsafe.Pointer(p.Native()))

	var cret C.GdkPaintableFlags
	var goret1 PaintableFlags

	cret = C.gdk_paintable_get_flags(arg0)

	goret1 = PaintableFlags(cret)

	return goret1
}

// IntrinsicAspectRatio gets the preferred aspect ratio the @paintable would
// like to be displayed at. The aspect ratio is the width divided by the
// height, so a value of 0.5 means that the @paintable prefers to be
// displayed twice as high as it is wide. Consumers of this interface can
// use this to preserve aspect ratio when displaying the paintable.
//
// This is a purely informational value and does not in any way limit the
// values that may be passed to gdk_paintable_snapshot().
//
// Usually when a @paintable returns nonzero values from
// gdk_paintable_get_intrinsic_width() and
// gdk_paintable_get_intrinsic_height() the aspect ratio should conform to
// those values, though that is not required.
//
// If the @paintable does not have a preferred aspect ratio, it returns 0.
// Negative values are never returned.
func (p paintable) IntrinsicAspectRatio() float64 {
	var arg0 *C.GdkPaintable

	arg0 = (*C.GdkPaintable)(unsafe.Pointer(p.Native()))

	var cret C.double
	var goret1 float64

	cret = C.gdk_paintable_get_intrinsic_aspect_ratio(arg0)

	goret1 = C.double(cret)

	return goret1
}

// IntrinsicHeight gets the preferred height the @paintable would like to be
// displayed at. Consumers of this interface can use this to reserve enough
// space to draw the paintable.
//
// This is a purely informational value and does not in any way limit the
// values that may be passed to gdk_paintable_snapshot().
//
// If the @paintable does not have a preferred height, it returns 0.
// Negative values are never returned.
func (p paintable) IntrinsicHeight() int {
	var arg0 *C.GdkPaintable

	arg0 = (*C.GdkPaintable)(unsafe.Pointer(p.Native()))

	var cret C.int
	var goret1 int

	cret = C.gdk_paintable_get_intrinsic_height(arg0)

	goret1 = C.int(cret)

	return goret1
}

// IntrinsicWidth gets the preferred width the @paintable would like to be
// displayed at. Consumers of this interface can use this to reserve enough
// space to draw the paintable.
//
// This is a purely informational value and does not in any way limit the
// values that may be passed to gdk_paintable_snapshot().
//
// If the @paintable does not have a preferred width, it returns 0. Negative
// values are never returned.
func (p paintable) IntrinsicWidth() int {
	var arg0 *C.GdkPaintable

	arg0 = (*C.GdkPaintable)(unsafe.Pointer(p.Native()))

	var cret C.int
	var goret1 int

	cret = C.gdk_paintable_get_intrinsic_width(arg0)

	goret1 = C.int(cret)

	return goret1
}

// InvalidateContents: called by implementations of Paintable to invalidate
// their contents. Unless the contents are invalidated, implementations must
// guarantee that multiple calls of gdk_paintable_snapshot() produce the
// same output.
//
// This function will emit the Paintable::invalidate-contents signal.
//
// If a @paintable reports the GDK_PAINTABLE_STATIC_CONTENTS flag, it must
// not call this function.
func (p paintable) InvalidateContents() {
	var arg0 *C.GdkPaintable

	arg0 = (*C.GdkPaintable)(unsafe.Pointer(p.Native()))

	C.gdk_paintable_invalidate_contents(arg0)
}

// InvalidateSize: called by implementations of Paintable to invalidate
// their size. As long as the size is not invalidated, @paintable must
// return the same values for its intrinsic width, height and aspect ratio.
//
// This function will emit the Paintable::invalidate-size signal.
//
// If a @paintable reports the GDK_PAINTABLE_STATIC_SIZE flag, it must not
// call this function.
func (p paintable) InvalidateSize() {
	var arg0 *C.GdkPaintable

	arg0 = (*C.GdkPaintable)(unsafe.Pointer(p.Native()))

	C.gdk_paintable_invalidate_size(arg0)
}

// Snapshot snapshots the given paintable with the given @width and @height
// at the current (0,0) offset of the @snapshot. If @width and @height are
// not larger than zero, this function will do nothing.
func (p paintable) Snapshot(snapshot Snapshot, width float64, height float64) {
	var arg0 *C.GdkPaintable
	var arg1 *C.GdkSnapshot
	var arg2 C.double
	var arg3 C.double

	arg0 = (*C.GdkPaintable)(unsafe.Pointer(p.Native()))
	arg1 = (*C.GdkSnapshot)(unsafe.Pointer(snapshot.Native()))
	arg2 = C.double(width)
	arg3 = C.double(height)

	C.gdk_paintable_snapshot(arg0, snapshot, width, height)
}
