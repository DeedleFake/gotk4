// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gdk/gdk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gdk_popup_get_type()), F: marshalPopup},
	})
}

// Popup: a Popup is a surface that is attached to another surface, called its
// Popup:parent, and is positioned relative to it.
//
// Popups are typically used to implement menus and similar popups. They can be
// modal, which is indicated by the Popup:autohide property.
type Popup interface {
	Surface

	// Autohide returns whether this popup is set to hide on outside clicks.
	Autohide(p Popup) bool
	// Parent returns the parent surface of a popup.
	Parent(p Popup)
	// PositionX obtains the position of the popup relative to its parent.
	PositionX(p Popup)
	// PositionY obtains the position of the popup relative to its parent.
	PositionY(p Popup)
	// RectAnchor gets the current popup rectangle anchor.
	//
	// The value returned may change after calling gdk_popup_present(), or after
	// the Surface::layout signal is emitted.
	RectAnchor(p Popup)
	// SurfaceAnchor gets the current popup surface anchor.
	//
	// The value returned may change after calling gdk_popup_present(), or after
	// the Surface::layout signal is emitted.
	SurfaceAnchor(p Popup)
	// Present: present @popup after having processed the PopupLayout rules. If
	// the popup was previously now showing, it will be showed, otherwise it
	// will change position according to @layout.
	//
	// After calling this function, the result should be handled in response to
	// the Surface::layout signal being emitted. The resulting popup position
	// can be queried using gdk_popup_get_position_x(),
	// gdk_popup_get_position_y(), and the resulting size will be sent as
	// parameters in the layout signal. Use gdk_popup_get_rect_anchor() and
	// gdk_popup_get_surface_anchor() to get the resulting anchors.
	//
	// Presenting may fail, for example if the @popup is set to autohide and is
	// immediately hidden upon being presented. If presenting failed, the
	// Surface::layout signal will not me emitted.
	Present(p Popup, width int, height int, layout *PopupLayout) bool
}

// popup implements the Popup interface.
type popup struct {
	Surface
}

var _ Popup = (*popup)(nil)

// WrapPopup wraps a GObject to a type that implements interface
// Popup. It is primarily used internally.
func WrapPopup(obj *externglib.Object) Popup {
	return Popup{
		Surface: WrapSurface(obj),
	}
}

func marshalPopup(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapPopup(obj), nil
}

// Autohide returns whether this popup is set to hide on outside clicks.
func (p popup) Autohide(p Popup) bool {
	var arg0 *C.GdkPopup

	arg0 = (*C.GdkPopup)(unsafe.Pointer(p.Native()))

	var cret C.gboolean
	var ok bool

	cret = C.gdk_popup_get_autohide(arg0)

	if cret {
		ok = true
	}

	return ok
}

// Parent returns the parent surface of a popup.
func (p popup) Parent(p Popup) {
	var arg0 *C.GdkPopup

	arg0 = (*C.GdkPopup)(unsafe.Pointer(p.Native()))

	C.gdk_popup_get_parent(arg0)
}

// PositionX obtains the position of the popup relative to its parent.
func (p popup) PositionX(p Popup) {
	var arg0 *C.GdkPopup

	arg0 = (*C.GdkPopup)(unsafe.Pointer(p.Native()))

	C.gdk_popup_get_position_x(arg0)
}

// PositionY obtains the position of the popup relative to its parent.
func (p popup) PositionY(p Popup) {
	var arg0 *C.GdkPopup

	arg0 = (*C.GdkPopup)(unsafe.Pointer(p.Native()))

	C.gdk_popup_get_position_y(arg0)
}

// RectAnchor gets the current popup rectangle anchor.
//
// The value returned may change after calling gdk_popup_present(), or after
// the Surface::layout signal is emitted.
func (p popup) RectAnchor(p Popup) {
	var arg0 *C.GdkPopup

	arg0 = (*C.GdkPopup)(unsafe.Pointer(p.Native()))

	C.gdk_popup_get_rect_anchor(arg0)
}

// SurfaceAnchor gets the current popup surface anchor.
//
// The value returned may change after calling gdk_popup_present(), or after
// the Surface::layout signal is emitted.
func (p popup) SurfaceAnchor(p Popup) {
	var arg0 *C.GdkPopup

	arg0 = (*C.GdkPopup)(unsafe.Pointer(p.Native()))

	C.gdk_popup_get_surface_anchor(arg0)
}

// Present: present @popup after having processed the PopupLayout rules. If
// the popup was previously now showing, it will be showed, otherwise it
// will change position according to @layout.
//
// After calling this function, the result should be handled in response to
// the Surface::layout signal being emitted. The resulting popup position
// can be queried using gdk_popup_get_position_x(),
// gdk_popup_get_position_y(), and the resulting size will be sent as
// parameters in the layout signal. Use gdk_popup_get_rect_anchor() and
// gdk_popup_get_surface_anchor() to get the resulting anchors.
//
// Presenting may fail, for example if the @popup is set to autohide and is
// immediately hidden upon being presented. If presenting failed, the
// Surface::layout signal will not me emitted.
func (p popup) Present(p Popup, width int, height int, layout *PopupLayout) bool {
	var arg0 *C.GdkPopup
	var arg1 C.int
	var arg2 C.int
	var arg3 *C.GdkPopupLayout

	arg0 = (*C.GdkPopup)(unsafe.Pointer(p.Native()))
	arg1 = C.int(width)
	arg2 = C.int(height)
	arg3 = (*C.GdkPopupLayout)(unsafe.Pointer(layout.Native()))

	var cret C.gboolean
	var ok bool

	cret = C.gdk_popup_present(arg0, arg1, arg2, arg3)

	if cret {
		ok = true
	}

	return ok
}
