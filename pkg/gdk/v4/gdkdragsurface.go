// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"unsafe"

	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <gdk/gdk.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gdk_drag_surface_get_type()), F: marshalDragSurface},
	})
}

// DragSurface is an interface for surfaces used during DND.
type DragSurface interface {
	Surface

	// Present @drag_surface.
	Present(width int, height int) bool
}

// dragSurface implements the DragSurface interface.
type dragSurface struct {
	Surface
}

var _ DragSurface = (*dragSurface)(nil)

// WrapDragSurface wraps a GObject to a type that implements
// interface DragSurface. It is primarily used internally.
func WrapDragSurface(obj *externglib.Object) DragSurface {
	return dragSurface{
		Surface: WrapSurface(obj),
	}
}

func marshalDragSurface(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapDragSurface(obj), nil
}

func (d dragSurface) Present(width int, height int) bool {
	var _arg0 *C.GdkDragSurface // out
	var _arg1 C.int             // out
	var _arg2 C.int             // out
	var _cret C.gboolean        // in

	_arg0 = (*C.GdkDragSurface)(unsafe.Pointer(d.Native()))
	_arg1 = C.int(width)
	_arg2 = C.int(height)

	_cret = C.gdk_drag_surface_present(_arg0, _arg1, _arg2)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}
