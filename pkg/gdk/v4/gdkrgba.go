// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"runtime"
	"unsafe"

	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <stdbool.h>
// #include <glib-object.h>
// #include <gdk/gdk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gdk_rgba_get_type()), F: marshalRGBA},
	})
}

// RGBA: a `GdkRGBA` is used to represent a color, in a way that is compatible
// with cairo’s notion of color.
//
// `GdkRGBA` is a convenient way to pass colors around. It’s based on cairo’s
// way to deal with colors and mirrors its behavior. All values are in the range
// from 0.0 to 1.0 inclusive. So the color (0.0, 0.0, 0.0, 0.0) represents
// transparent black and (1.0, 1.0, 1.0, 1.0) is opaque white. Other values will
// be clamped to this range when drawing.
type RGBA struct {
	native C.GdkRGBA
}

// WrapRGBA wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapRGBA(ptr unsafe.Pointer) *RGBA {
	if ptr == nil {
		return nil
	}

	return (*RGBA)(ptr)
}

func marshalRGBA(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapRGBA(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (r *RGBA) Native() unsafe.Pointer {
	return unsafe.Pointer(&r.native)
}

// Red gets the field inside the struct.
func (r *RGBA) Red() float32 {
	var ret float32
	ret = float32(r.native.red)
	return ret
}

// Green gets the field inside the struct.
func (r *RGBA) Green() float32 {
	var ret float32
	ret = float32(r.native.green)
	return ret
}

// Blue gets the field inside the struct.
func (r *RGBA) Blue() float32 {
	var ret float32
	ret = float32(r.native.blue)
	return ret
}

// Alpha gets the field inside the struct.
func (r *RGBA) Alpha() float32 {
	var ret float32
	ret = float32(r.native.alpha)
	return ret
}

// Copy makes a copy of a `GdkRGBA`.
//
// The result must be freed through [method@Gdk.RGBA.free].
func (r *RGBA) Copy() *RGBA {
	var arg0 *C.GdkRGBA

	arg0 = (*C.GdkRGBA)(r.Native())

	ret := C.gdk_rgba_copy(arg0)

	var ret0 *RGBA

	{
		ret0 = WrapRGBA(unsafe.Pointer(ret))
		runtime.SetFinalizer(ret0, func(v *RGBA) {
			C.free(unsafe.Pointer(v.Native()))
		})
	}

	return ret0
}

// Equal compares two `GdkRGBA` colors.
func (p *RGBA) Equal(p2 RGBA) bool {
	var arg0 C.gpointer
	var arg1 C.gpointer

	arg0 = (C.gpointer)(p.Native())
	arg1 = (C.gpointer)(p2.Native())

	ret := C.gdk_rgba_equal(arg0, arg1)

	var ret0 bool

	ret0 = C.bool(ret) != 0

	return ret0
}

// Free frees a `GdkRGBA`.
func (r *RGBA) Free() {
	var arg0 *C.GdkRGBA

	arg0 = (*C.GdkRGBA)(r.Native())

	C.gdk_rgba_free(arg0)
}

// Hash: a hash function suitable for using for a hash table that stores
// `GdkRGBA`s.
func (p *RGBA) Hash() uint {
	var arg0 C.gpointer

	arg0 = (C.gpointer)(p.Native())

	ret := C.gdk_rgba_hash(arg0)

	var ret0 uint

	ret0 = uint(ret)

	return ret0
}

// IsClear checks if an @rgba value is transparent.
//
// That is, drawing with the value would not produce any change.
func (r *RGBA) IsClear() bool {
	var arg0 *C.GdkRGBA

	arg0 = (*C.GdkRGBA)(r.Native())

	ret := C.gdk_rgba_is_clear(arg0)

	var ret0 bool

	ret0 = C.bool(ret) != 0

	return ret0
}

// IsOpaque checks if an @rgba value is opaque.
//
// That is, drawing with the value will not retain any results from previous
// contents.
func (r *RGBA) IsOpaque() bool {
	var arg0 *C.GdkRGBA

	arg0 = (*C.GdkRGBA)(r.Native())

	ret := C.gdk_rgba_is_opaque(arg0)

	var ret0 bool

	ret0 = C.bool(ret) != 0

	return ret0
}

// Parse parses a textual representation of a color.
//
// The string can be either one of:
//
// - A standard name (Taken from the X11 rgb.txt file). - A hexadecimal value in
// the form “\#rgb”, “\#rrggbb”, “\#rrrgggbbb” or ”\#rrrrggggbbbb” - A
// hexadecimal value in the form “\#rgba”, “\#rrggbbaa”, or ”\#rrrrggggbbbbaaaa”
// - A RGB color in the form “rgb(r,g,b)” (In this case the color will have full
// opacity) - A RGBA color in the form “rgba(r,g,b,a)”
//
// Where “r”, “g”, “b” and “a” are respectively the red, green, blue and alpha
// color values. In the last two cases, “r”, “g”, and “b” are either integers in
// the range 0 to 255 or percentage values in the range 0% to 100%, and a is a
// floating point value in the range 0 to 1.
func (r *RGBA) Parse(spec string) bool {
	var arg0 *C.GdkRGBA
	var arg1 *C.char

	arg0 = (*C.GdkRGBA)(r.Native())
	arg1 = (*C.gchar)(C.CString(spec))
	defer C.free(unsafe.Pointer(arg1))

	ret := C.gdk_rgba_parse(arg0, arg1)

	var ret0 bool

	ret0 = C.bool(ret) != 0

	return ret0
}

// String returns a textual specification of @rgba in the form `rgb(r,g,b)` or
// `rgba(r,g,b,a)`, where “r”, “g”, “b” and “a” represent the red, green, blue
// and alpha values respectively. “r”, “g”, and “b” are represented as integers
// in the range 0 to 255, and “a” is represented as a floating point value in
// the range 0 to 1.
//
// These string forms are string forms that are supported by the CSS3 colors
// module, and can be parsed by [method@Gdk.RGBA.parse].
//
// Note that this string representation may lose some precision, since “r”, “g”
// and “b” are represented as 8-bit integers. If this is a concern, you should
// use a different representation.
func (r *RGBA) String() string {
	var arg0 *C.GdkRGBA

	arg0 = (*C.GdkRGBA)(r.Native())

	ret := C.gdk_rgba_to_string(arg0)

	var ret0 string

	ret0 = C.GoString(ret)
	C.free(unsafe.Pointer(ret))

	return ret0
}
