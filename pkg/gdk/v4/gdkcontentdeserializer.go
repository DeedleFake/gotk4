// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: glib-2.0 gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <gdk/gdk.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gdk_content_deserializer_get_type()), F: marshalContentDeserializer},
	})
}

// ContentDeserializer: a `GdkContentDeserializer` is used to deserialize
// content received via inter-application data transfers.
//
// The `GdkContentDeserializer` transforms serialized content that is identified
// by a mime type into an object identified by a GType.
//
// GTK provides serializers and deserializers for common data types such as
// text, colors, images or file lists. To register your own deserialization
// functions, use [func@content_register_deserializer].
//
// Also see [class@Gdk.ContentSerializer].
type ContentDeserializer interface {
	gextras.Objector
	gio.AsyncResult

	// GType gets the GType to create an instance of.
	GType() externglib.Type
	// MIMEType gets the mime type to deserialize from.
	MIMEType() string
	// Priority gets the I/O priority for the current operation.
	//
	// This is the priority that was passed to [funccontent_deserialize_async].
	Priority() int
	// TaskData gets the data that was associated with the current operation.
	//
	// See [method@Gdk.ContentDeserializer.set_task_data].
	TaskData() interface{}
	// UserData gets the user data that was passed when the deserializer was
	// registered.
	UserData() interface{}
	// Value gets the `GValue` to store the deserialized object in.
	Value() **externglib.Value
	// ReturnSuccess: indicate that the deserialization has been successfully
	// completed.
	ReturnSuccess()
}

// contentDeserializer implements the ContentDeserializer class.
type contentDeserializer struct {
	gextras.Objector
	gio.AsyncResult
}

var _ ContentDeserializer = (*contentDeserializer)(nil)

// WrapContentDeserializer wraps a GObject to the right type. It is
// primarily used internally.
func WrapContentDeserializer(obj *externglib.Object) ContentDeserializer {
	return contentDeserializer{
		Objector:        obj,
		gio.AsyncResult: gio.WrapAsyncResult(obj),
	}
}

func marshalContentDeserializer(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapContentDeserializer(obj), nil
}

// GType gets the GType to create an instance of.
func (d contentDeserializer) GType() externglib.Type {
	var _arg0 *C.GdkContentDeserializer // out

	_arg0 = (*C.GdkContentDeserializer)(unsafe.Pointer(d.Native()))

	var _cret C.GType // in

	_cret = C.gdk_content_deserializer_get_gtype(_arg0)

	var _gType externglib.Type // out

	_gType = externglib.Type(_cret)

	return _gType
}

// MIMEType gets the mime type to deserialize from.
func (d contentDeserializer) MIMEType() string {
	var _arg0 *C.GdkContentDeserializer // out

	_arg0 = (*C.GdkContentDeserializer)(unsafe.Pointer(d.Native()))

	var _cret *C.char // in

	_cret = C.gdk_content_deserializer_get_mime_type(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

// Priority gets the I/O priority for the current operation.
//
// This is the priority that was passed to [funccontent_deserialize_async].
func (d contentDeserializer) Priority() int {
	var _arg0 *C.GdkContentDeserializer // out

	_arg0 = (*C.GdkContentDeserializer)(unsafe.Pointer(d.Native()))

	var _cret C.int // in

	_cret = C.gdk_content_deserializer_get_priority(_arg0)

	var _gint int // out

	_gint = (int)(_cret)

	return _gint
}

// TaskData gets the data that was associated with the current operation.
//
// See [method@Gdk.ContentDeserializer.set_task_data].
func (d contentDeserializer) TaskData() interface{} {
	var _arg0 *C.GdkContentDeserializer // out

	_arg0 = (*C.GdkContentDeserializer)(unsafe.Pointer(d.Native()))

	var _cret C.gpointer // in

	_cret = C.gdk_content_deserializer_get_task_data(_arg0)

	var _gpointer interface{} // out

	_gpointer = (interface{})(_cret)

	return _gpointer
}

// UserData gets the user data that was passed when the deserializer was
// registered.
func (d contentDeserializer) UserData() interface{} {
	var _arg0 *C.GdkContentDeserializer // out

	_arg0 = (*C.GdkContentDeserializer)(unsafe.Pointer(d.Native()))

	var _cret C.gpointer // in

	_cret = C.gdk_content_deserializer_get_user_data(_arg0)

	var _gpointer interface{} // out

	_gpointer = (interface{})(_cret)

	return _gpointer
}

// Value gets the `GValue` to store the deserialized object in.
func (d contentDeserializer) Value() **externglib.Value {
	var _arg0 *C.GdkContentDeserializer // out

	_arg0 = (*C.GdkContentDeserializer)(unsafe.Pointer(d.Native()))

	var _cret *C.GValue // in

	_cret = C.gdk_content_deserializer_get_value(_arg0)

	var _value **externglib.Value // out

	_value = externglib.ValueFromNative(unsafe.Pointer(_cret))

	return _value
}

// ReturnSuccess: indicate that the deserialization has been successfully
// completed.
func (d contentDeserializer) ReturnSuccess() {
	var _arg0 *C.GdkContentDeserializer // out

	_arg0 = (*C.GdkContentDeserializer)(unsafe.Pointer(d.Native()))

	C.gdk_content_deserializer_return_success(_arg0)
}
