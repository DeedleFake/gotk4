// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/internal/box"
	"github.com/diamondburned/gotk4/internal/gextras"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <gdk/gdk.h>
//
// extern void callbackDelete(gpointer);
import "C"

//export callbackDelete
func callbackDelete(ptr C.gpointer) {
	box.Delete(box.Callback, uintptr(ptr))
}

// ContentDeserializeAsync: read content from the given input stream and
// deserialize it, asynchronously.
//
// The default I/O priority is G_PRIORITY_DEFAULT (i.e. 0), and lower numbers
// indicate a higher priority.
//
// When the operation is finished, @callback will be called. You must then call
// [func@content_deserialize_finish] to get the result of the operation.
func ContentDeserializeAsync(stream gio.InputStream, mimeType string, typ externglib.Type, ioPriority int, cancellable gio.Cancellable, callback gio.AsyncReadyCallback) {
	var arg1 *C.GInputStream
	var arg2 *C.char
	var arg3 C.GType
	var arg4 C.int
	var arg5 *C.GCancellable
	var arg6 C.GAsyncReadyCallback
	var arg7 C.gpointer

	arg1 = (*C.GInputStream)(stream.Native())
	arg2 = (*C.gchar)(C.CString(mimeType))
	defer C.free(unsafe.Pointer(arg2))
	arg3 = C.GType(typ)
	arg4 = C.int(ioPriority)
	arg5 = (*C.GCancellable)(cancellable.Native())
	arg6 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	arg7 = C.gpointer(box.Assign(callback))

	C.gdk_content_deserialize_async(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
}

// ContentDeserializeFinish finishes a content deserialization operation.
func ContentDeserializeFinish(result gio.AsyncResult, value *externglib.Value) error {
	var arg1 *C.GAsyncResult
	var arg2 *C.GValue
	var gError *C.GError

	arg1 = (*C.GAsyncResult)(result.Native())
	arg2 = (*C.GValue)(value.GValue)

	ret := C.gdk_content_deserialize_finish(arg1, arg2, &gError)

	var goError error

	if gError != nil {
		goError = fmt.Errorf("%d: %s", gError.code, C.GoString(gError.message))
		C.g_error_free(gError)
	}

	return goError
}

// ContentRegisterDeserializer registers a function to deserialize object of a
// given type.
func ContentRegisterDeserializer(mimeType string, typ externglib.Type, deserialize ContentDeserializeFunc) {
	var arg1 *C.char
	var arg2 C.GType
	var arg3 C.GdkContentDeserializeFunc
	var arg4 C.gpointer
	var arg5 C.GDestroyNotify

	arg1 = (*C.gchar)(C.CString(mimeType))
	defer C.free(unsafe.Pointer(arg1))
	arg2 = C.GType(typ)
	arg3 = (*[0]byte)(C.gotk4_ContentDeserializeFunc)
	arg4 = C.gpointer(box.Assign(deserialize))
	arg5 = (*[0]byte)(C.callbackDelete)

	C.gdk_content_register_deserializer(arg1, arg2, arg3, arg4, arg5)
}
