// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/core/gerror"
	"github.com/diamondburned/gotk4/core/gextras"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <gdk/gdk.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gdk_content_deserializer_get_type()), F: marshalContentDeserializer},
	})
}

// ContentDeserializeFinish finishes a content deserialization operation.
func ContentDeserializeFinish(result gio.AsyncResult, value externglib.Value) error {
	var _arg1 *C.GAsyncResult // out
	var _arg2 *C.GValue       // out
	var _cerr *C.GError       // in

	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(result.Native()))
	_arg2 = (*C.GValue)(unsafe.Pointer(&value.GValue))

	C.gdk_content_deserialize_finish(_arg1, _arg2, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

// ContentDeserializer: a `GdkContentDeserializer` is used to deserialize
// content received via inter-application data transfers.
//
// The `GdkContentDeserializer` transforms serialized content that is identified
// by a mime type into an object identified by a GType.
//
// GTK provides serializers and deserializers for common data types such as
// text, colors, images or file lists. To register your own deserialization
// functions, use [func@content_register_deserializer].
//
// Also see [class@Gdk.ContentSerializer].
type ContentDeserializer interface {
	gio.AsyncResult

	// Cancellable:
	Cancellable() gio.Cancellable
	// GType:
	GType() externglib.Type
	// InputStream:
	InputStream() gio.InputStream
	// MIMEType:
	MIMEType() string
	// Priority:
	Priority() int
	// Value:
	Value() externglib.Value
	// ReturnErrorContentDeserializer:
	ReturnErrorContentDeserializer(err error)
	// ReturnSuccessContentDeserializer:
	ReturnSuccessContentDeserializer()
}

// contentDeserializer implements the ContentDeserializer class.
type contentDeserializer struct {
	gextras.Objector
}

// WrapContentDeserializer wraps a GObject to the right type. It is
// primarily used internally.
func WrapContentDeserializer(obj *externglib.Object) ContentDeserializer {
	return contentDeserializer{
		Objector: obj,
	}
}

func marshalContentDeserializer(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapContentDeserializer(obj), nil
}

func (d contentDeserializer) Cancellable() gio.Cancellable {
	var _arg0 *C.GdkContentDeserializer // out
	var _cret *C.GCancellable           // in

	_arg0 = (*C.GdkContentDeserializer)(unsafe.Pointer(d.Native()))

	_cret = C.gdk_content_deserializer_get_cancellable(_arg0)

	var _cancellable gio.Cancellable // out

	_cancellable = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(gio.Cancellable)

	return _cancellable
}

func (d contentDeserializer) GType() externglib.Type {
	var _arg0 *C.GdkContentDeserializer // out
	var _cret C.GType                   // in

	_arg0 = (*C.GdkContentDeserializer)(unsafe.Pointer(d.Native()))

	_cret = C.gdk_content_deserializer_get_gtype(_arg0)

	var _gType externglib.Type // out

	_gType = externglib.Type(_cret)

	return _gType
}

func (d contentDeserializer) InputStream() gio.InputStream {
	var _arg0 *C.GdkContentDeserializer // out
	var _cret *C.GInputStream           // in

	_arg0 = (*C.GdkContentDeserializer)(unsafe.Pointer(d.Native()))

	_cret = C.gdk_content_deserializer_get_input_stream(_arg0)

	var _inputStream gio.InputStream // out

	_inputStream = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(gio.InputStream)

	return _inputStream
}

func (d contentDeserializer) MIMEType() string {
	var _arg0 *C.GdkContentDeserializer // out
	var _cret *C.char                   // in

	_arg0 = (*C.GdkContentDeserializer)(unsafe.Pointer(d.Native()))

	_cret = C.gdk_content_deserializer_get_mime_type(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

func (d contentDeserializer) Priority() int {
	var _arg0 *C.GdkContentDeserializer // out
	var _cret C.int                     // in

	_arg0 = (*C.GdkContentDeserializer)(unsafe.Pointer(d.Native()))

	_cret = C.gdk_content_deserializer_get_priority(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (d contentDeserializer) Value() externglib.Value {
	var _arg0 *C.GdkContentDeserializer // out
	var _cret *C.GValue                 // in

	_arg0 = (*C.GdkContentDeserializer)(unsafe.Pointer(d.Native()))

	_cret = C.gdk_content_deserializer_get_value(_arg0)

	var _value externglib.Value // out

	_value = externglib.ValueFromNative(unsafe.Pointer(_cret))

	return _value
}

func (d contentDeserializer) ReturnErrorContentDeserializer(err error) {
	var _arg0 *C.GdkContentDeserializer // out
	var _arg1 *C.GError                 // out

	_arg0 = (*C.GdkContentDeserializer)(unsafe.Pointer(d.Native()))
	_arg1 = (*C.GError)(gerror.New(err))
	defer C.g_error_free(_arg1)

	C.gdk_content_deserializer_return_error(_arg0, _arg1)
}

func (d contentDeserializer) ReturnSuccessContentDeserializer() {
	var _arg0 *C.GdkContentDeserializer // out

	_arg0 = (*C.GdkContentDeserializer)(unsafe.Pointer(d.Native()))

	C.gdk_content_deserializer_return_success(_arg0)
}

func (r contentDeserializer) SourceObject() gextras.Objector {
	return gio.WrapAsyncResult(gextras.InternObject(r)).SourceObject()
}

func (r contentDeserializer) LegacyPropagateError() error {
	return gio.WrapAsyncResult(gextras.InternObject(r)).LegacyPropagateError()
}
