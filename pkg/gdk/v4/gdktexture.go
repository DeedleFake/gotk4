// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gerror"
	"github.com/diamondburned/gotk4/internal/gextras"
	"github.com/diamondburned/gotk4/pkg/gdkpixbuf/v2"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <stdbool.h>
// #include <glib-object.h>
// #include <gdk/gdk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gdk_texture_get_type()), F: marshalTexture},
	})
}

// Texture: the `GdkTexture` structure contains only private data.
type Texture interface {
	gextras.Objector
	Paintable

	// Height returns the height of the @texture, in pixels.
	Height() int
	// Width returns the width of @texture, in pixels.
	Width() int
	// SaveToPng: store the given @texture to the @filename as a PNG file.
	//
	// This is a utility function intended for debugging and testing. If you
	// want more control over formats, proper error handling or want to store to
	// a #GFile or other location, you might want to look into using the
	// gdk-pixbuf library.
	SaveToPng(filename string) bool
}

// texture implements the Texture interface.
type texture struct {
	gextras.Objector
	Paintable
}

var _ Texture = (*texture)(nil)

// WrapTexture wraps a GObject to the right type. It is
// primarily used internally.
func WrapTexture(obj *externglib.Object) Texture {
	return Texture{
		Objector:  obj,
		Paintable: WrapPaintable(obj),
	}
}

func marshalTexture(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapTexture(obj), nil
}

// NewTextureForPixbuf constructs a class Texture.
func NewTextureForPixbuf(pixbuf gdkpixbuf.Pixbuf) Texture {
	var arg1 *C.GdkPixbuf

	arg1 = (*C.GdkPixbuf)(unsafe.Pointer(pixbuf.Native()))

	var cret C.GdkTexture
	var ret1 Texture

	cret = C.gdk_texture_new_for_pixbuf(pixbuf)

	ret1 = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(cret.Native()))).(Texture)

	return ret1
}

// NewTextureFromFile constructs a class Texture.
func NewTextureFromFile(file gio.File) (texture Texture, err error) {
	var arg1 *C.GFile

	arg1 = (*C.GFile)(unsafe.Pointer(file.Native()))

	var errout *C.GError
	var goerr error
	var cret C.GdkTexture
	var ret2 Texture

	cret = C.gdk_texture_new_from_file(file, &errout)

	goerr = gerror.Take(unsafe.Pointer(errout))
	ret2 = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(cret.Native()))).(Texture)

	return goerr, ret2
}

// NewTextureFromResource constructs a class Texture.
func NewTextureFromResource(resourcePath string) Texture {
	var arg1 *C.char

	arg1 = (*C.char)(C.CString(resourcePath))
	defer C.free(unsafe.Pointer(arg1))

	var cret C.GdkTexture
	var ret1 Texture

	cret = C.gdk_texture_new_from_resource(resourcePath)

	ret1 = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(cret.Native()))).(Texture)

	return ret1
}

// Height returns the height of the @texture, in pixels.
func (t texture) Height() int {
	var arg0 *C.GdkTexture

	arg0 = (*C.GdkTexture)(unsafe.Pointer(t.Native()))

	var cret C.int
	var ret1 int

	cret = C.gdk_texture_get_height(arg0)

	ret1 = C.int(cret)

	return ret1
}

// Width returns the width of @texture, in pixels.
func (t texture) Width() int {
	var arg0 *C.GdkTexture

	arg0 = (*C.GdkTexture)(unsafe.Pointer(t.Native()))

	var cret C.int
	var ret1 int

	cret = C.gdk_texture_get_width(arg0)

	ret1 = C.int(cret)

	return ret1
}

// SaveToPng: store the given @texture to the @filename as a PNG file.
//
// This is a utility function intended for debugging and testing. If you
// want more control over formats, proper error handling or want to store to
// a #GFile or other location, you might want to look into using the
// gdk-pixbuf library.
func (t texture) SaveToPng(filename string) bool {
	var arg0 *C.GdkTexture
	var arg1 *C.char

	arg0 = (*C.GdkTexture)(unsafe.Pointer(t.Native()))
	arg1 = (*C.char)(C.CString(filename))
	defer C.free(unsafe.Pointer(arg1))

	var cret C.gboolean
	var ret1 bool

	cret = C.gdk_texture_save_to_png(arg0, filename)

	ret1 = C.bool(cret) != C.false

	return ret1
}
