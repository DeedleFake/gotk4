// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/core/gerror"
	"github.com/diamondburned/gotk4/core/gextras"
	"github.com/diamondburned/gotk4/pkg/cairo"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <gdk/gdk.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gdk_surface_get_type()), F: marshalSurface},
	})
}

// Surface: a `GdkSurface` is a rectangular region on the screen.
//
// Itâ€™s a low-level object, used to implement high-level objects such as
// [class@Gtk.Window] or [class@Gtk.Dialog] in GTK.
//
// The surfaces you see in practice are either [class@Gdk.Toplevel] or
// [class@Gdk.Popup], and those interfaces provide much of the required API to
// interact with these surfaces. Other, more specialized surface types exist,
// but you will rarely interact with them directly.
type Surface interface {
	gextras.Objector

	// BeepSurface:
	BeepSurface()
	// CreateCairoContextSurface:
	CreateCairoContextSurface() CairoContext
	// CreateGLContextSurface:
	CreateGLContextSurface() (GLContext, error)
	// CreateSimilarSurfaceSurface:
	CreateSimilarSurfaceSurface(content cairo.Content, width int, height int) *cairo.Surface
	// CreateVulkanContextSurface:
	CreateVulkanContextSurface() (VulkanContext, error)
	// DestroySurface:
	DestroySurface()
	// Cursor:
	Cursor() Cursor
	// DeviceCursor:
	DeviceCursor(device Device) Cursor
	// DevicePosition:
	DevicePosition(device Device) (x float64, y float64, mask ModifierType, ok bool)
	// Display:
	Display() Display
	// FrameClock:
	FrameClock() FrameClock
	// Height:
	Height() int
	// Mapped:
	Mapped() bool
	// ScaleFactor:
	ScaleFactor() int
	// Width:
	Width() int
	// HideSurface:
	HideSurface()
	// IsDestroyedSurface:
	IsDestroyedSurface() bool
	// QueueRenderSurface:
	QueueRenderSurface()
	// RequestLayoutSurface:
	RequestLayoutSurface()
	// SetCursorSurface:
	SetCursorSurface(cursor Cursor)
	// SetDeviceCursorSurface:
	SetDeviceCursorSurface(device Device, cursor Cursor)
	// SetInputRegionSurface:
	SetInputRegionSurface(region *cairo.Region)
	// SetOpaqueRegionSurface:
	SetOpaqueRegionSurface(region *cairo.Region)
}

// surface implements the Surface class.
type surface struct {
	gextras.Objector
}

// WrapSurface wraps a GObject to the right type. It is
// primarily used internally.
func WrapSurface(obj *externglib.Object) Surface {
	return surface{
		Objector: obj,
	}
}

func marshalSurface(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapSurface(obj), nil
}

// NewSurfacePopup:
func NewSurfacePopup(parent Surface, autohide bool) Surface {
	var _arg1 *C.GdkSurface // out
	var _arg2 C.gboolean    // out
	var _cret *C.GdkSurface // in

	_arg1 = (*C.GdkSurface)(unsafe.Pointer(parent.Native()))
	if autohide {
		_arg2 = C.TRUE
	}

	_cret = C.gdk_surface_new_popup(_arg1, _arg2)

	var _surface Surface // out

	_surface = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(Surface)

	return _surface
}

// NewSurfaceToplevel:
func NewSurfaceToplevel(display Display) Surface {
	var _arg1 *C.GdkDisplay // out
	var _cret *C.GdkSurface // in

	_arg1 = (*C.GdkDisplay)(unsafe.Pointer(display.Native()))

	_cret = C.gdk_surface_new_toplevel(_arg1)

	var _surface Surface // out

	_surface = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(Surface)

	return _surface
}

func (s surface) BeepSurface() {
	var _arg0 *C.GdkSurface // out

	_arg0 = (*C.GdkSurface)(unsafe.Pointer(s.Native()))

	C.gdk_surface_beep(_arg0)
}

func (s surface) CreateCairoContextSurface() CairoContext {
	var _arg0 *C.GdkSurface      // out
	var _cret *C.GdkCairoContext // in

	_arg0 = (*C.GdkSurface)(unsafe.Pointer(s.Native()))

	_cret = C.gdk_surface_create_cairo_context(_arg0)

	var _cairoContext CairoContext // out

	_cairoContext = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(CairoContext)

	return _cairoContext
}

func (s surface) CreateGLContextSurface() (GLContext, error) {
	var _arg0 *C.GdkSurface   // out
	var _cret *C.GdkGLContext // in
	var _cerr *C.GError       // in

	_arg0 = (*C.GdkSurface)(unsafe.Pointer(s.Native()))

	_cret = C.gdk_surface_create_gl_context(_arg0, &_cerr)

	var _glContext GLContext // out
	var _goerr error         // out

	_glContext = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(GLContext)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _glContext, _goerr
}

func (s surface) CreateSimilarSurfaceSurface(content cairo.Content, width int, height int) *cairo.Surface {
	var _arg0 *C.GdkSurface      // out
	var _arg1 C.cairo_content_t  // out
	var _arg2 C.int              // out
	var _arg3 C.int              // out
	var _cret *C.cairo_surface_t // in

	_arg0 = (*C.GdkSurface)(unsafe.Pointer(s.Native()))
	_arg1 = C.cairo_content_t(content)
	_arg2 = C.int(width)
	_arg3 = C.int(height)

	_cret = C.gdk_surface_create_similar_surface(_arg0, _arg1, _arg2, _arg3)

	var _ret *cairo.Surface // out

	_ret = (*cairo.Surface)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(&_ret, func(v **cairo.Surface) {
		C.free(unsafe.Pointer(v))
	})

	return _ret
}

func (s surface) CreateVulkanContextSurface() (VulkanContext, error) {
	var _arg0 *C.GdkSurface       // out
	var _cret *C.GdkVulkanContext // in
	var _cerr *C.GError           // in

	_arg0 = (*C.GdkSurface)(unsafe.Pointer(s.Native()))

	_cret = C.gdk_surface_create_vulkan_context(_arg0, &_cerr)

	var _vulkanContext VulkanContext // out
	var _goerr error                 // out

	_vulkanContext = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(VulkanContext)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _vulkanContext, _goerr
}

func (s surface) DestroySurface() {
	var _arg0 *C.GdkSurface // out

	_arg0 = (*C.GdkSurface)(unsafe.Pointer(s.Native()))

	C.gdk_surface_destroy(_arg0)
}

func (s surface) Cursor() Cursor {
	var _arg0 *C.GdkSurface // out
	var _cret *C.GdkCursor  // in

	_arg0 = (*C.GdkSurface)(unsafe.Pointer(s.Native()))

	_cret = C.gdk_surface_get_cursor(_arg0)

	var _cursor Cursor // out

	_cursor = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Cursor)

	return _cursor
}

func (s surface) DeviceCursor(device Device) Cursor {
	var _arg0 *C.GdkSurface // out
	var _arg1 *C.GdkDevice  // out
	var _cret *C.GdkCursor  // in

	_arg0 = (*C.GdkSurface)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GdkDevice)(unsafe.Pointer(device.Native()))

	_cret = C.gdk_surface_get_device_cursor(_arg0, _arg1)

	var _cursor Cursor // out

	_cursor = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Cursor)

	return _cursor
}

func (s surface) DevicePosition(device Device) (x float64, y float64, mask ModifierType, ok bool) {
	var _arg0 *C.GdkSurface     // out
	var _arg1 *C.GdkDevice      // out
	var _arg2 C.double          // in
	var _arg3 C.double          // in
	var _arg4 C.GdkModifierType // in
	var _cret C.gboolean        // in

	_arg0 = (*C.GdkSurface)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GdkDevice)(unsafe.Pointer(device.Native()))

	_cret = C.gdk_surface_get_device_position(_arg0, _arg1, &_arg2, &_arg3, &_arg4)

	var _x float64         // out
	var _y float64         // out
	var _mask ModifierType // out
	var _ok bool           // out

	_x = float64(_arg2)
	_y = float64(_arg3)
	_mask = ModifierType(_arg4)
	if _cret != 0 {
		_ok = true
	}

	return _x, _y, _mask, _ok
}

func (s surface) Display() Display {
	var _arg0 *C.GdkSurface // out
	var _cret *C.GdkDisplay // in

	_arg0 = (*C.GdkSurface)(unsafe.Pointer(s.Native()))

	_cret = C.gdk_surface_get_display(_arg0)

	var _display Display // out

	_display = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Display)

	return _display
}

func (s surface) FrameClock() FrameClock {
	var _arg0 *C.GdkSurface    // out
	var _cret *C.GdkFrameClock // in

	_arg0 = (*C.GdkSurface)(unsafe.Pointer(s.Native()))

	_cret = C.gdk_surface_get_frame_clock(_arg0)

	var _frameClock FrameClock // out

	_frameClock = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(FrameClock)

	return _frameClock
}

func (s surface) Height() int {
	var _arg0 *C.GdkSurface // out
	var _cret C.int         // in

	_arg0 = (*C.GdkSurface)(unsafe.Pointer(s.Native()))

	_cret = C.gdk_surface_get_height(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (s surface) Mapped() bool {
	var _arg0 *C.GdkSurface // out
	var _cret C.gboolean    // in

	_arg0 = (*C.GdkSurface)(unsafe.Pointer(s.Native()))

	_cret = C.gdk_surface_get_mapped(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (s surface) ScaleFactor() int {
	var _arg0 *C.GdkSurface // out
	var _cret C.int         // in

	_arg0 = (*C.GdkSurface)(unsafe.Pointer(s.Native()))

	_cret = C.gdk_surface_get_scale_factor(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (s surface) Width() int {
	var _arg0 *C.GdkSurface // out
	var _cret C.int         // in

	_arg0 = (*C.GdkSurface)(unsafe.Pointer(s.Native()))

	_cret = C.gdk_surface_get_width(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (s surface) HideSurface() {
	var _arg0 *C.GdkSurface // out

	_arg0 = (*C.GdkSurface)(unsafe.Pointer(s.Native()))

	C.gdk_surface_hide(_arg0)
}

func (s surface) IsDestroyedSurface() bool {
	var _arg0 *C.GdkSurface // out
	var _cret C.gboolean    // in

	_arg0 = (*C.GdkSurface)(unsafe.Pointer(s.Native()))

	_cret = C.gdk_surface_is_destroyed(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (s surface) QueueRenderSurface() {
	var _arg0 *C.GdkSurface // out

	_arg0 = (*C.GdkSurface)(unsafe.Pointer(s.Native()))

	C.gdk_surface_queue_render(_arg0)
}

func (s surface) RequestLayoutSurface() {
	var _arg0 *C.GdkSurface // out

	_arg0 = (*C.GdkSurface)(unsafe.Pointer(s.Native()))

	C.gdk_surface_request_layout(_arg0)
}

func (s surface) SetCursorSurface(cursor Cursor) {
	var _arg0 *C.GdkSurface // out
	var _arg1 *C.GdkCursor  // out

	_arg0 = (*C.GdkSurface)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GdkCursor)(unsafe.Pointer(cursor.Native()))

	C.gdk_surface_set_cursor(_arg0, _arg1)
}

func (s surface) SetDeviceCursorSurface(device Device, cursor Cursor) {
	var _arg0 *C.GdkSurface // out
	var _arg1 *C.GdkDevice  // out
	var _arg2 *C.GdkCursor  // out

	_arg0 = (*C.GdkSurface)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GdkDevice)(unsafe.Pointer(device.Native()))
	_arg2 = (*C.GdkCursor)(unsafe.Pointer(cursor.Native()))

	C.gdk_surface_set_device_cursor(_arg0, _arg1, _arg2)
}

func (s surface) SetInputRegionSurface(region *cairo.Region) {
	var _arg0 *C.GdkSurface     // out
	var _arg1 *C.cairo_region_t // out

	_arg0 = (*C.GdkSurface)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.cairo_region_t)(unsafe.Pointer(region.Native()))

	C.gdk_surface_set_input_region(_arg0, _arg1)
}

func (s surface) SetOpaqueRegionSurface(region *cairo.Region) {
	var _arg0 *C.GdkSurface     // out
	var _arg1 *C.cairo_region_t // out

	_arg0 = (*C.GdkSurface)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.cairo_region_t)(unsafe.Pointer(region.Native()))

	C.gdk_surface_set_opaque_region(_arg0, _arg1)
}
