// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <gdk/gdk.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gdk_drop_get_type()), F: marshalDropper},
	})
}

// Dropper describes Drop's methods.
type Dropper interface {
	// Actions returns the possible actions for this `GdkDrop`.
	Actions() DragAction
	// Device returns the `GdkDevice` performing the drop.
	Device() *Device
	// Display gets the `GdkDisplay` that @self was created for.
	Display() *Display
	// Drag: if this is an in-app drag-and-drop operation, returns the `GdkDrag`
	// that corresponds to this drop.
	Drag() *Drag
	// Formats returns the `GdkContentFormats` that the drop offers the data to
	// be read in.
	Formats() *ContentFormats
	// Surface returns the `GdkSurface` performing the drop.
	Surface() *Surface
	// ReadFinish finishes an async drop read operation.
	ReadFinish(result gio.AsyncResulter) (string, *gio.InputStream, error)
	// ReadValueFinish finishes an async drop read.
	ReadValueFinish(result gio.AsyncResulter) (*externglib.Value, error)
}

// Drop: `GdkDrop` object represents the target of an ongoing DND operation.
//
// Possible drop sites get informed about the status of the ongoing drag
// operation with events of type GDK_DRAG_ENTER, GDK_DRAG_LEAVE, GDK_DRAG_MOTION
// and GDK_DROP_START. The `GdkDrop` object can be obtained from these
// [class@Gdk.Event] types using [method@Gdk.DNDEvent.get_drop].
//
// The actual data transfer is initiated from the target side via an async read,
// using one of the `GdkDrop` methods for this purpose:
// [method@Gdk.Drop.read_async] or [method@Gdk.Drop.read_value_async].
//
// GTK provides a higher level abstraction based on top of these functions, and
// so they are not normally needed in GTK applications. See the "Drag and Drop"
// section of the GTK documentation for more information.
type Drop struct {
	*externglib.Object
}

var (
	_ Dropper         = (*Drop)(nil)
	_ gextras.Nativer = (*Drop)(nil)
)

func wrapDrop(obj *externglib.Object) Dropper {
	return &Drop{
		Object: obj,
	}
}

func marshalDropper(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapDrop(obj), nil
}

// Actions returns the possible actions for this `GdkDrop`.
//
// If this value contains multiple actions - i.e.
// [func@Gdk.DragAction.is_unique] returns false for the result -
// [method@Gdk.Drop.finish] must choose the action to use when accepting the
// drop. This will only happen if you passed GDK_ACTION_ASK as one of the
// possible actions in [method@Gdk.Drop.status]. GDK_ACTION_ASK itself will not
// be included in the actions returned by this function.
//
// This value may change over the lifetime of the [class@Gdk.Drop] both as a
// response to source side actions as well as to calls to
// [method@Gdk.Drop.status] or [method@Gdk.Drop.finish]. The source side will
// not change this value anymore once a drop has started.
func (self *Drop) Actions() DragAction {
	var _arg0 *C.GdkDrop      // out
	var _cret C.GdkDragAction // in

	_arg0 = (*C.GdkDrop)(unsafe.Pointer(self.Native()))

	_cret = C.gdk_drop_get_actions(_arg0)

	var _dragAction DragAction // out

	_dragAction = DragAction(_cret)

	return _dragAction
}

// Device returns the `GdkDevice` performing the drop.
func (self *Drop) Device() *Device {
	var _arg0 *C.GdkDrop   // out
	var _cret *C.GdkDevice // in

	_arg0 = (*C.GdkDrop)(unsafe.Pointer(self.Native()))

	_cret = C.gdk_drop_get_device(_arg0)

	var _device *Device // out

	_device = (gextras.CastObject(externglib.Take(unsafe.Pointer(_cret)))).(*Device)

	return _device
}

// Display gets the `GdkDisplay` that @self was created for.
func (self *Drop) Display() *Display {
	var _arg0 *C.GdkDrop    // out
	var _cret *C.GdkDisplay // in

	_arg0 = (*C.GdkDrop)(unsafe.Pointer(self.Native()))

	_cret = C.gdk_drop_get_display(_arg0)

	var _display *Display // out

	_display = (gextras.CastObject(externglib.Take(unsafe.Pointer(_cret)))).(*Display)

	return _display
}

// Drag: if this is an in-app drag-and-drop operation, returns the `GdkDrag`
// that corresponds to this drop.
//
// If it is not, nil is returned.
func (self *Drop) Drag() *Drag {
	var _arg0 *C.GdkDrop // out
	var _cret *C.GdkDrag // in

	_arg0 = (*C.GdkDrop)(unsafe.Pointer(self.Native()))

	_cret = C.gdk_drop_get_drag(_arg0)

	var _drag *Drag // out

	_drag = (gextras.CastObject(externglib.Take(unsafe.Pointer(_cret)))).(*Drag)

	return _drag
}

// Formats returns the `GdkContentFormats` that the drop offers the data to be
// read in.
func (self *Drop) Formats() *ContentFormats {
	var _arg0 *C.GdkDrop           // out
	var _cret *C.GdkContentFormats // in

	_arg0 = (*C.GdkDrop)(unsafe.Pointer(self.Native()))

	_cret = C.gdk_drop_get_formats(_arg0)

	var _contentFormats *ContentFormats // out

	_contentFormats = (*ContentFormats)(unsafe.Pointer(_cret))
	C.gdk_content_formats_ref(_cret)
	runtime.SetFinalizer(_contentFormats, func(v *ContentFormats) {
		C.gdk_content_formats_unref((*C.GdkContentFormats)(unsafe.Pointer(v)))
	})

	return _contentFormats
}

// Surface returns the `GdkSurface` performing the drop.
func (self *Drop) Surface() *Surface {
	var _arg0 *C.GdkDrop    // out
	var _cret *C.GdkSurface // in

	_arg0 = (*C.GdkDrop)(unsafe.Pointer(self.Native()))

	_cret = C.gdk_drop_get_surface(_arg0)

	var _surface *Surface // out

	_surface = (gextras.CastObject(externglib.Take(unsafe.Pointer(_cret)))).(*Surface)

	return _surface
}

// ReadFinish finishes an async drop read operation.
//
// Note that you must not use blocking read calls on the returned stream in the
// GTK thread, since some platforms might require communication with GTK to
// complete the data transfer. You can use async APIs such as
// g_input_stream_read_bytes_async().
//
// See [method@Gdk.Drop.read_async].
func (self *Drop) ReadFinish(result gio.AsyncResulter) (string, *gio.InputStream, error) {
	var _arg0 *C.GdkDrop      // out
	var _arg1 *C.GAsyncResult // out
	var _arg2 *C.char         // in
	var _cret *C.GInputStream // in
	var _cerr *C.GError       // in

	_arg0 = (*C.GdkDrop)(unsafe.Pointer(self.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer((result).(gextras.Nativer).Native()))

	_cret = C.gdk_drop_read_finish(_arg0, _arg1, &_arg2, &_cerr)

	var _outMimeType string           // out
	var _inputStream *gio.InputStream // out
	var _goerr error                  // out

	_outMimeType = C.GoString((*C.gchar)(unsafe.Pointer(_arg2)))
	defer C.free(unsafe.Pointer(_arg2))
	_inputStream = (gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret)))).(*gio.InputStream)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _outMimeType, _inputStream, _goerr
}

// ReadValueFinish finishes an async drop read.
//
// See [method@Gdk.Drop.read_value_async].
func (self *Drop) ReadValueFinish(result gio.AsyncResulter) (*externglib.Value, error) {
	var _arg0 *C.GdkDrop      // out
	var _arg1 *C.GAsyncResult // out
	var _cret *C.GValue       // in
	var _cerr *C.GError       // in

	_arg0 = (*C.GdkDrop)(unsafe.Pointer(self.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer((result).(gextras.Nativer).Native()))

	_cret = C.gdk_drop_read_value_finish(_arg0, _arg1, &_cerr)

	var _value *externglib.Value // out
	var _goerr error             // out

	_value = externglib.ValueFromNative(unsafe.Pointer(_cret))
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _value, _goerr
}
