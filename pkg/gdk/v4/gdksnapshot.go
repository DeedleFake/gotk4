// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <gdk/gdk.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gdk_snapshot_get_type()), F: marshalSnapshot},
	})
}

// Snapshot: base type for snapshot operations.
//
// The subclass of `GdkSnapshot` used by GTK is [class@Gtk.Snapshot].
type Snapshot interface {
	gextras.Objector

	privateSnapshotClass()
}

// SnapshotClass implements the Snapshot interface.
type SnapshotClass struct {
	*externglib.Object
}

var _ Snapshot = (*SnapshotClass)(nil)

func wrapSnapshot(obj *externglib.Object) Snapshot {
	return &SnapshotClass{
		Object: obj,
	}
}

func marshalSnapshot(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapSnapshot(obj), nil
}

func (*SnapshotClass) privateSnapshotClass() {}
