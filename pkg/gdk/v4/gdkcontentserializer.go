// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/box"
	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <gdk/gdk.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gdk_content_serializer_get_type()), F: marshalContentSerializer},
	})
}

// ContentSerializer: `GdkContentSerializer` is used to serialize content for
// inter-application data transfers.
//
// The `GdkContentSerializer` transforms an object that is identified by a GType
// into a serialized form (i.e. a byte stream) that is identified by a mime
// type.
//
// GTK provides serializers and deserializers for common data types such as
// text, colors, images or file lists. To register your own serialization
// functions, use [func@content_register_serializer].
//
// Also see [class@Gdk.ContentDeserializer].
type ContentSerializer interface {
	gextras.Objector

	// Cancellable gets the cancellable for the current operation.
	//
	// This is the `GCancellable` that was passed to [content_serialize_async].
	Cancellable() *gio.CancellableClass
	// GType gets the `GType` to of the object to serialize.
	GType() externglib.Type
	// MIMEType gets the mime type to serialize to.
	MIMEType() string
	// OutputStream gets the output stream for the current operation.
	//
	// This is the stream that was passed to [func@content_serialize_async].
	OutputStream() *gio.OutputStreamClass
	// Priority gets the I/O priority for the current operation.
	//
	// This is the priority that was passed to [func@content_serialize_async].
	Priority() int
	// TaskData gets the data that was associated with the current operation.
	//
	// See [method@Gdk.ContentSerializer.set_task_data].
	TaskData() interface{}
	// UserData gets the user data that was passed when the serializer was
	// registered.
	UserData() interface{}
	// ReturnError: indicate that the serialization has ended with an error.
	//
	// This function consumes @error.
	ReturnError(err error)
	// ReturnSuccess: indicate that the serialization has been successfully
	// completed.
	ReturnSuccess()
}

// ContentSerializerClass implements the ContentSerializer interface.
type ContentSerializerClass struct {
	*externglib.Object
}

var _ ContentSerializer = (*ContentSerializerClass)(nil)

func wrapContentSerializer(obj *externglib.Object) ContentSerializer {
	return &ContentSerializerClass{
		Object: obj,
	}
}

func marshalContentSerializer(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapContentSerializer(obj), nil
}

// Cancellable gets the cancellable for the current operation.
//
// This is the `GCancellable` that was passed to [content_serialize_async].
func (s *ContentSerializerClass) Cancellable() *gio.CancellableClass {
	var _arg0 *C.GdkContentSerializer // out
	var _cret *C.GCancellable         // in

	_arg0 = (*C.GdkContentSerializer)(unsafe.Pointer((&ContentSerializer).Native()))

	_cret = C.gdk_content_serializer_get_cancellable(_arg0)

	var _cancellable *gio.CancellableClass // out

	_cancellable = gextras.CastObject(
		externglib.Take(unsafe.Pointer(_cret))).(*gio.CancellableClass)

	return _cancellable
}

// GType gets the `GType` to of the object to serialize.
func (s *ContentSerializerClass) GType() externglib.Type {
	var _arg0 *C.GdkContentSerializer // out
	var _cret C.GType                 // in

	_arg0 = (*C.GdkContentSerializer)(unsafe.Pointer((&ContentSerializer).Native()))

	_cret = C.gdk_content_serializer_get_gtype(_arg0)

	var _gType externglib.Type // out

	_gType = externglib.Type(C.GType)

	return _gType
}

// MIMEType gets the mime type to serialize to.
func (s *ContentSerializerClass) MIMEType() string {
	var _arg0 *C.GdkContentSerializer // out
	var _cret *C.char                 // in

	_arg0 = (*C.GdkContentSerializer)(unsafe.Pointer((&ContentSerializer).Native()))

	_cret = C.gdk_content_serializer_get_mime_type(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

// OutputStream gets the output stream for the current operation.
//
// This is the stream that was passed to [func@content_serialize_async].
func (s *ContentSerializerClass) OutputStream() *gio.OutputStreamClass {
	var _arg0 *C.GdkContentSerializer // out
	var _cret *C.GOutputStream        // in

	_arg0 = (*C.GdkContentSerializer)(unsafe.Pointer((&ContentSerializer).Native()))

	_cret = C.gdk_content_serializer_get_output_stream(_arg0)

	var _outputStream *gio.OutputStreamClass // out

	_outputStream = gextras.CastObject(
		externglib.Take(unsafe.Pointer(_cret))).(*gio.OutputStreamClass)

	return _outputStream
}

// Priority gets the I/O priority for the current operation.
//
// This is the priority that was passed to [func@content_serialize_async].
func (s *ContentSerializerClass) Priority() int {
	var _arg0 *C.GdkContentSerializer // out
	var _cret C.int                   // in

	_arg0 = (*C.GdkContentSerializer)(unsafe.Pointer((&ContentSerializer).Native()))

	_cret = C.gdk_content_serializer_get_priority(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// TaskData gets the data that was associated with the current operation.
//
// See [method@Gdk.ContentSerializer.set_task_data].
func (s *ContentSerializerClass) TaskData() interface{} {
	var _arg0 *C.GdkContentSerializer // out
	var _cret C.gpointer              // in

	_arg0 = (*C.GdkContentSerializer)(unsafe.Pointer((&ContentSerializer).Native()))

	_cret = C.gdk_content_serializer_get_task_data(_arg0)

	var _gpointer interface{} // out

	_gpointer = box.Get(uintptr(_cret))

	return _gpointer
}

// UserData gets the user data that was passed when the serializer was
// registered.
func (s *ContentSerializerClass) UserData() interface{} {
	var _arg0 *C.GdkContentSerializer // out
	var _cret C.gpointer              // in

	_arg0 = (*C.GdkContentSerializer)(unsafe.Pointer((&ContentSerializer).Native()))

	_cret = C.gdk_content_serializer_get_user_data(_arg0)

	var _gpointer interface{} // out

	_gpointer = box.Get(uintptr(_cret))

	return _gpointer
}

// ReturnError: indicate that the serialization has ended with an error.
//
// This function consumes @error.
func (s *ContentSerializerClass) ReturnError(err error) {
	var _arg0 *C.GdkContentSerializer // out
	var _arg1 *C.GError               // out

	_arg0 = (*C.GdkContentSerializer)(unsafe.Pointer((&ContentSerializer).Native()))
	_arg1 = (*C.GError)(gerror.New(err))

	C.gdk_content_serializer_return_error(_arg0, _arg1)
}

// ReturnSuccess: indicate that the serialization has been successfully
// completed.
func (s *ContentSerializerClass) ReturnSuccess() {
	var _arg0 *C.GdkContentSerializer // out

	_arg0 = (*C.GdkContentSerializer)(unsafe.Pointer((&ContentSerializer).Native()))

	C.gdk_content_serializer_return_success(_arg0)
}
