// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"unsafe"

	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gdk/gdk.h>
import "C"

func ToplevelSizeGetType() externglib.Type {
	ret := C.gdk_toplevel_size_get_type()

	var ret0 externglib.Type

	ret0 = externglib.Type(ret)

	return ret0
}

// ToplevelSize: the `GdkToplevelSize` struct contains information that is
// useful to compute the size of a toplevel.
type ToplevelSize struct {
	native C.GdkToplevelSize
}

// WrapToplevelSize wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapToplevelSize(ptr unsafe.Pointer) *ToplevelSize {
	if ptr == nil {
		return nil
	}

	return (*ToplevelSize)(ptr)
}

func marshalToplevelSize(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapToplevelSize(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (t *ToplevelSize) Native() unsafe.Pointer {
	return unsafe.Pointer(&t.native)
}

// Bounds retrieves the bounds the toplevel is placed within.
//
// The bounds represent the largest size a toplevel may have while still being
// able to fit within some type of boundary. Depending on the backend, this may
// be equivalent to the dimensions of the work area or the monitor on which the
// window is being presented on, or something else that limits the way a
// toplevel can be presented.
func (s *ToplevelSize) Bounds() (boundsWidth int, boundsHeight int) {
	var arg0 *C.GdkToplevelSize
	var arg1 *C.int // out
	var arg2 *C.int // out

	arg0 = (*C.GdkToplevelSize)(s.Native())

	C.gdk_toplevel_size_get_bounds(arg0, &arg1, &arg2)

	var ret0 int
	var ret1 int

	ret0 = int(arg1)

	ret1 = int(arg2)

	return ret0, ret1
}

// SetMinSize sets the minimum size of the toplevel.
//
// The minimum size corresponds to the limitations the toplevel can be shrunk
// to, without resulting in incorrect painting. A user of a `GdkToplevel` should
// calculate these given both the existing size, and the bounds retrieved from
// the `GdkToplevelSize` object.
//
// The minimum size should be within the bounds (see
// [method@Gdk.ToplevelSize.get_bounds]).
func (s *ToplevelSize) SetMinSize(minWidth int, minHeight int) {
	var arg0 *C.GdkToplevelSize
	var arg1 C.int
	var arg2 C.int

	arg0 = (*C.GdkToplevelSize)(s.Native())
	arg1 = C.int(minWidth)
	arg2 = C.int(minHeight)

	C.gdk_toplevel_size_set_min_size(arg0, arg1, arg2)
}

// SetShadowWidth sets the shadows size of the toplevel.
//
// The shadow width corresponds to the part of the computed surface size that
// would consist of the shadow margin surrounding the window, would there be
// any.
func (s *ToplevelSize) SetShadowWidth(left int, right int, top int, bottom int) {
	var arg0 *C.GdkToplevelSize
	var arg1 C.int
	var arg2 C.int
	var arg3 C.int
	var arg4 C.int

	arg0 = (*C.GdkToplevelSize)(s.Native())
	arg1 = C.int(left)
	arg2 = C.int(right)
	arg3 = C.int(top)
	arg4 = C.int(bottom)

	C.gdk_toplevel_size_set_shadow_width(arg0, arg1, arg2, arg3, arg4)
}

// SetSize sets the size the toplevel prefers to be resized to.
//
// The size should be within the bounds (see
// [method@Gdk.ToplevelSize.get_bounds]). The set size should be considered as a
// hint, and should not be assumed to be respected by the windowing system, or
// backend.
func (s *ToplevelSize) SetSize(width int, height int) {
	var arg0 *C.GdkToplevelSize
	var arg1 C.int
	var arg2 C.int

	arg0 = (*C.GdkToplevelSize)(s.Native())
	arg1 = C.int(width)
	arg2 = C.int(height)

	C.gdk_toplevel_size_set_size(arg0, arg1, arg2)
}
