// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"unsafe"

	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gdk-3.0 glib-2.0 gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <gdk/gdk.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gdk_axis_use_get_type()), F: marshalAxisUse},
		{T: externglib.Type(C.gdk_byte_order_get_type()), F: marshalByteOrder},
		{T: externglib.Type(C.gdk_gl_error_get_type()), F: marshalGLError},
		{T: externglib.Type(C.gdk_grab_ownership_get_type()), F: marshalGrabOwnership},
		{T: externglib.Type(C.gdk_grab_status_get_type()), F: marshalGrabStatus},
		{T: externglib.Type(C.gdk_modifier_intent_get_type()), F: marshalModifierIntent},
		{T: externglib.Type(C.gdk_window_type_hint_get_type()), F: marshalWindowTypeHint},
		{T: externglib.Type(C.gdk_axis_flags_get_type()), F: marshalAxisFlags},
		{T: externglib.Type(C.gdk_event_mask_get_type()), F: marshalEventMask},
		{T: externglib.Type(C.gdk_modifier_type_get_type()), F: marshalModifierType},
		{T: externglib.Type(C.gdk_rectangle_get_type()), F: marshalRectangle},
	})
}

// AxisUse: an enumeration describing the way in which a device axis (valuator)
// maps onto the predefined valuator types that GTK+ understands.
//
// Note that the X and Y axes are not really needed; pointer devices report
// their location via the x/y members of events regardless. Whether X and Y are
// present as axes depends on the GDK backend.
type AxisUse int

const (
	// AxisUseIgnore: the axis is ignored.
	AxisUseIgnore AxisUse = 0
	// AxisUseX: the axis is used as the x axis.
	AxisUseX AxisUse = 1
	// AxisUseY: the axis is used as the y axis.
	AxisUseY AxisUse = 2
	// AxisUsePressure: the axis is used for pressure information.
	AxisUsePressure AxisUse = 3
	// AxisUseXtilt: the axis is used for x tilt information.
	AxisUseXtilt AxisUse = 4
	// AxisUseYtilt: the axis is used for y tilt information.
	AxisUseYtilt AxisUse = 5
	// AxisUseWheel: the axis is used for wheel information.
	AxisUseWheel AxisUse = 6
	// AxisUseDistance: the axis is used for pen/tablet distance information.
	// (Since: 3.22)
	AxisUseDistance AxisUse = 7
	// AxisUseRotation: the axis is used for pen rotation information. (Since:
	// 3.22)
	AxisUseRotation AxisUse = 8
	// AxisUseSlider: the axis is used for pen slider information. (Since: 3.22)
	AxisUseSlider AxisUse = 9
	// AxisUseLast: a constant equal to the numerically highest axis value.
	AxisUseLast AxisUse = 10
)

func marshalAxisUse(p uintptr) (interface{}, error) {
	return AxisUse(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// ByteOrder: a set of values describing the possible byte-orders for storing
// pixel values in memory.
type ByteOrder int

const (
	// ByteOrderLsbFirst: the values are stored with the least-significant byte
	// first. For instance, the 32-bit value 0xffeecc would be stored in memory
	// as 0xcc, 0xee, 0xff, 0x00.
	ByteOrderLsbFirst ByteOrder = 0
	// ByteOrderMsbFirst: the values are stored with the most-significant byte
	// first. For instance, the 32-bit value 0xffeecc would be stored in memory
	// as 0x00, 0xff, 0xee, 0xcc.
	ByteOrderMsbFirst ByteOrder = 1
)

func marshalByteOrder(p uintptr) (interface{}, error) {
	return ByteOrder(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// GLError: error enumeration for GLContext.
type GLError int

const (
	// GLErrorNotAvailable: openGL support is not available
	GLErrorNotAvailable GLError = 0
	// GLErrorUnsupportedFormat: the requested visual format is not supported
	GLErrorUnsupportedFormat GLError = 1
	// GLErrorUnsupportedProfile: the requested profile is not supported
	GLErrorUnsupportedProfile GLError = 2
)

func marshalGLError(p uintptr) (interface{}, error) {
	return GLError(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// GrabOwnership defines how device grabs interact with other devices.
type GrabOwnership int

const (
	// GrabOwnershipNone: all other devices’ events are allowed.
	GrabOwnershipNone GrabOwnership = 0
	// GrabOwnershipWindow: other devices’ events are blocked for the grab
	// window.
	GrabOwnershipWindow GrabOwnership = 1
	// GrabOwnershipApplication: other devices’ events are blocked for the whole
	// application.
	GrabOwnershipApplication GrabOwnership = 2
)

func marshalGrabOwnership(p uintptr) (interface{}, error) {
	return GrabOwnership(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// GrabStatus: returned by gdk_device_grab(), gdk_pointer_grab() and
// gdk_keyboard_grab() to indicate success or the reason for the failure of the
// grab attempt.
type GrabStatus int

const (
	// GrabStatusSuccess: the resource was successfully grabbed.
	GrabStatusSuccess GrabStatus = 0
	// GrabStatusAlreadyGrabbed: the resource is actively grabbed by another
	// client.
	GrabStatusAlreadyGrabbed GrabStatus = 1
	// GrabStatusInvalidTime: the resource was grabbed more recently than the
	// specified time.
	GrabStatusInvalidTime GrabStatus = 2
	// GrabStatusNotViewable: the grab window or the @confine_to window are not
	// viewable.
	GrabStatusNotViewable GrabStatus = 3
	// GrabStatusFrozen: the resource is frozen by an active grab of another
	// client.
	GrabStatusFrozen GrabStatus = 4
	// GrabStatusFailed: the grab failed for some other reason. Since 3.16
	GrabStatusFailed GrabStatus = 5
)

func marshalGrabStatus(p uintptr) (interface{}, error) {
	return GrabStatus(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// ModifierIntent: this enum is used with gdk_keymap_get_modifier_mask() in
// order to determine what modifiers the currently used windowing system backend
// uses for particular purposes. For example, on X11/Windows, the Control key is
// used for invoking menu shortcuts (accelerators), whereas on Apple computers
// it’s the Command key (which correspond to GDK_CONTROL_MASK and GDK_MOD2_MASK,
// respectively).
type ModifierIntent int

const (
	// ModifierIntentPrimaryAccelerator: the primary modifier used to invoke
	// menu accelerators.
	ModifierIntentPrimaryAccelerator ModifierIntent = 0
	// ModifierIntentContextMenu: the modifier used to invoke context menus.
	// Note that mouse button 3 always triggers context menus. When this
	// modifier is not 0, it additionally triggers context menus when used with
	// mouse button 1.
	ModifierIntentContextMenu ModifierIntent = 1
	// ModifierIntentExtendSelection: the modifier used to extend selections
	// using `modifier`-click or `modifier`-cursor-key
	ModifierIntentExtendSelection ModifierIntent = 2
	// ModifierIntentModifySelection: the modifier used to modify selections,
	// which in most cases means toggling the clicked item into or out of the
	// selection.
	ModifierIntentModifySelection ModifierIntent = 3
	// ModifierIntentNoTextInput: when any of these modifiers is pressed, the
	// key event cannot produce a symbol directly. This is meant to be used for
	// input methods, and for use cases like typeahead search.
	ModifierIntentNoTextInput ModifierIntent = 4
	// ModifierIntentShiftGroup: the modifier that switches between keyboard
	// groups (AltGr on X11/Windows and Option/Alt on OS X).
	ModifierIntentShiftGroup ModifierIntent = 5
	// ModifierIntentDefaultModMask: the set of modifier masks accepted as
	// modifiers in accelerators. Needed because Command is mapped to MOD2 on
	// OSX, which is widely used, but on X11 MOD2 is NumLock and using that for
	// a mod key is problematic at best. Ref:
	// https://bugzilla.gnome.org/show_bug.cgi?id=736125.
	ModifierIntentDefaultModMask ModifierIntent = 6
)

func marshalModifierIntent(p uintptr) (interface{}, error) {
	return ModifierIntent(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// WindowTypeHint: these are hints for the window manager that indicate what
// type of function the window has. The window manager can use this when
// determining decoration and behaviour of the window. The hint must be set
// before mapping the window.
//
// See the Extended Window Manager Hints
// (http://www.freedesktop.org/Standards/wm-spec) specification for more details
// about window types.
type WindowTypeHint int

const (
	// WindowTypeHintNormal: normal toplevel window.
	WindowTypeHintNormal WindowTypeHint = 0
	// WindowTypeHintDialog: dialog window.
	WindowTypeHintDialog WindowTypeHint = 1
	// WindowTypeHintMenu: window used to implement a menu; GTK+ uses this hint
	// only for torn-off menus, see TearoffMenuItem.
	WindowTypeHintMenu WindowTypeHint = 2
	// WindowTypeHintToolbar: window used to implement toolbars.
	WindowTypeHintToolbar WindowTypeHint = 3
	// WindowTypeHintSplashscreen: window used to display a splash screen during
	// application startup.
	WindowTypeHintSplashscreen WindowTypeHint = 4
	// WindowTypeHintUtility: utility windows which are not detached toolbars or
	// dialogs.
	WindowTypeHintUtility WindowTypeHint = 5
	// WindowTypeHintDock: used for creating dock or panel windows.
	WindowTypeHintDock WindowTypeHint = 6
	// WindowTypeHintDesktop: used for creating the desktop background window.
	WindowTypeHintDesktop WindowTypeHint = 7
	// WindowTypeHintDropdownMenu: a menu that belongs to a menubar.
	WindowTypeHintDropdownMenu WindowTypeHint = 8
	// WindowTypeHintPopupMenu: a menu that does not belong to a menubar, e.g. a
	// context menu.
	WindowTypeHintPopupMenu WindowTypeHint = 9
	// WindowTypeHintTooltip: a tooltip.
	WindowTypeHintTooltip WindowTypeHint = 10
	// WindowTypeHintNotification: a notification - typically a “bubble” that
	// belongs to a status icon.
	WindowTypeHintNotification WindowTypeHint = 11
	// WindowTypeHintCombo: a popup from a combo box.
	WindowTypeHintCombo WindowTypeHint = 12
	// WindowTypeHintDnd: a window that is used to implement a DND cursor.
	WindowTypeHintDnd WindowTypeHint = 13
)

func marshalWindowTypeHint(p uintptr) (interface{}, error) {
	return WindowTypeHint(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// AxisFlags flags describing the current capabilities of a device/tool.
type AxisFlags int

const (
	// AxisFlagsX: x axis is present
	AxisFlagsX AxisFlags = 2
	// AxisFlagsY: y axis is present
	AxisFlagsY AxisFlags = 4
	// AxisFlagsPressure: pressure axis is present
	AxisFlagsPressure AxisFlags = 8
	// AxisFlagsXtilt: x tilt axis is present
	AxisFlagsXtilt AxisFlags = 16
	// AxisFlagsYtilt: y tilt axis is present
	AxisFlagsYtilt AxisFlags = 32
	// AxisFlagsWheel: wheel axis is present
	AxisFlagsWheel AxisFlags = 64
	// AxisFlagsDistance: distance axis is present
	AxisFlagsDistance AxisFlags = 128
	// AxisFlagsRotation z-axis rotation is present
	AxisFlagsRotation AxisFlags = 256
	// AxisFlagsSlider: slider axis is present
	AxisFlagsSlider AxisFlags = 512
)

func marshalAxisFlags(p uintptr) (interface{}, error) {
	return AxisFlags(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// EventMask: a set of bit-flags to indicate which events a window is to
// receive. Most of these masks map onto one or more of the EventType event
// types above.
//
// See the [input handling overview][chap-input-handling] for details of [event
// masks][event-masks] and [event propagation][event-propagation].
//
// GDK_POINTER_MOTION_HINT_MASK is deprecated. It is a special mask to reduce
// the number of GDK_MOTION_NOTIFY events received. When using
// GDK_POINTER_MOTION_HINT_MASK, fewer GDK_MOTION_NOTIFY events will be sent,
// some of which are marked as a hint (the is_hint member is true). To receive
// more motion events after a motion hint event, the application needs to asks
// for more, by calling gdk_event_request_motions().
//
// Since GTK 3.8, motion events are already compressed by default, independent
// of this mechanism. This compression can be disabled with
// gdk_window_set_event_compression(). See the documentation of that function
// for details.
//
// If GDK_TOUCH_MASK is enabled, the window will receive touch events from
// touch-enabled devices. Those will come as sequences of EventTouch with type
// GDK_TOUCH_UPDATE, enclosed by two events with type GDK_TOUCH_BEGIN and
// GDK_TOUCH_END (or GDK_TOUCH_CANCEL). gdk_event_get_event_sequence() returns
// the event sequence for these events, so different sequences may be
// distinguished.
type EventMask int

const (
	// EventMaskExposureMask: receive expose events
	EventMaskExposureMask EventMask = 2
	// EventMaskPointerMotionMask: receive all pointer motion events
	EventMaskPointerMotionMask EventMask = 4
	// EventMaskPointerMotionHintMask: deprecated. see the explanation above
	EventMaskPointerMotionHintMask EventMask = 8
	// EventMaskButtonMotionMask: receive pointer motion events while any button
	// is pressed
	EventMaskButtonMotionMask EventMask = 16
	// EventMaskButton1MotionMask: receive pointer motion events while 1 button
	// is pressed
	EventMaskButton1MotionMask EventMask = 32
	// EventMaskButton2MotionMask: receive pointer motion events while 2 button
	// is pressed
	EventMaskButton2MotionMask EventMask = 64
	// EventMaskButton3MotionMask: receive pointer motion events while 3 button
	// is pressed
	EventMaskButton3MotionMask EventMask = 128
	// EventMaskButtonPressMask: receive button press events
	EventMaskButtonPressMask EventMask = 256
	// EventMaskButtonReleaseMask: receive button release events
	EventMaskButtonReleaseMask EventMask = 512
	// EventMaskKeyPressMask: receive key press events
	EventMaskKeyPressMask EventMask = 1024
	// EventMaskKeyReleaseMask: receive key release events
	EventMaskKeyReleaseMask EventMask = 2048
	// EventMaskEnterNotifyMask: receive window enter events
	EventMaskEnterNotifyMask EventMask = 4096
	// EventMaskLeaveNotifyMask: receive window leave events
	EventMaskLeaveNotifyMask EventMask = 8192
	// EventMaskFocusChangeMask: receive focus change events
	EventMaskFocusChangeMask EventMask = 16384
	// EventMaskStructureMask: receive events about window configuration change
	EventMaskStructureMask EventMask = 32768
	// EventMaskPropertyChangeMask: receive property change events
	EventMaskPropertyChangeMask EventMask = 65536
	// EventMaskVisibilityNotifyMask: receive visibility change events
	EventMaskVisibilityNotifyMask EventMask = 131072
	// EventMaskProximityInMask: receive proximity in events
	EventMaskProximityInMask EventMask = 262144
	// EventMaskProximityOutMask: receive proximity out events
	EventMaskProximityOutMask EventMask = 524288
	// EventMaskSubstructureMask: receive events about window configuration
	// changes of child windows
	EventMaskSubstructureMask EventMask = 1048576
	// EventMaskScrollMask: receive scroll events
	EventMaskScrollMask EventMask = 2097152
	// EventMaskTouchMask: receive touch events. Since 3.4
	EventMaskTouchMask EventMask = 4194304
	// EventMaskSmoothScrollMask: receive smooth scrolling events. Since 3.4
	EventMaskSmoothScrollMask EventMask = 8388608
	// EventMaskTouchpadGestureMask: receive touchpad gesture events. Since 3.18
	EventMaskTouchpadGestureMask EventMask = 16777216
	// EventMaskTabletPadMask: receive tablet pad events. Since 3.22
	EventMaskTabletPadMask EventMask = 33554432
	// EventMaskAllEventsMask: the combination of all the above event masks.
	EventMaskAllEventsMask EventMask = 67108862
)

func marshalEventMask(p uintptr) (interface{}, error) {
	return EventMask(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// ModifierType: a set of bit-flags to indicate the state of modifier keys and
// mouse buttons in various event types. Typical modifier keys are Shift,
// Control, Meta, Super, Hyper, Alt, Compose, Apple, CapsLock or ShiftLock.
//
// Like the X Window System, GDK supports 8 modifier keys and 5 mouse buttons.
//
// Since 2.10, GDK recognizes which of the Meta, Super or Hyper keys are mapped
// to Mod2 - Mod5, and indicates this by setting GDK_SUPER_MASK, GDK_HYPER_MASK
// or GDK_META_MASK in the state field of key events.
//
// Note that GDK may add internal values to events which include reserved values
// such as GDK_MODIFIER_RESERVED_13_MASK. Your code should preserve and ignore
// them. You can use GDK_MODIFIER_MASK to remove all reserved values.
//
// Also note that the GDK X backend interprets button press events for button
// 4-7 as scroll events, so GDK_BUTTON4_MASK and GDK_BUTTON5_MASK will never be
// set.
type ModifierType int

const (
	// ModifierTypeShiftMask: the Shift key.
	ModifierTypeShiftMask ModifierType = 1
	// ModifierTypeLockMask: a Lock key (depending on the modifier mapping of
	// the X server this may either be CapsLock or ShiftLock).
	ModifierTypeLockMask ModifierType = 2
	// ModifierTypeControlMask: the Control key.
	ModifierTypeControlMask ModifierType = 4
	// ModifierTypeMod1Mask: the fourth modifier key (it depends on the modifier
	// mapping of the X server which key is interpreted as this modifier, but
	// normally it is the Alt key).
	ModifierTypeMod1Mask ModifierType = 8
	// ModifierTypeMod2Mask: the fifth modifier key (it depends on the modifier
	// mapping of the X server which key is interpreted as this modifier).
	ModifierTypeMod2Mask ModifierType = 16
	// ModifierTypeMod3Mask: the sixth modifier key (it depends on the modifier
	// mapping of the X server which key is interpreted as this modifier).
	ModifierTypeMod3Mask ModifierType = 32
	// ModifierTypeMod4Mask: the seventh modifier key (it depends on the
	// modifier mapping of the X server which key is interpreted as this
	// modifier).
	ModifierTypeMod4Mask ModifierType = 64
	// ModifierTypeMod5Mask: the eighth modifier key (it depends on the modifier
	// mapping of the X server which key is interpreted as this modifier).
	ModifierTypeMod5Mask ModifierType = 128
	// ModifierTypeButton1Mask: the first mouse button.
	ModifierTypeButton1Mask ModifierType = 256
	// ModifierTypeButton2Mask: the second mouse button.
	ModifierTypeButton2Mask ModifierType = 512
	// ModifierTypeButton3Mask: the third mouse button.
	ModifierTypeButton3Mask ModifierType = 1024
	// ModifierTypeButton4Mask: the fourth mouse button.
	ModifierTypeButton4Mask ModifierType = 2048
	// ModifierTypeButton5Mask: the fifth mouse button.
	ModifierTypeButton5Mask ModifierType = 4096
	// ModifierTypeModifierReserved13Mask: a reserved bit flag; do not use in
	// your own code
	ModifierTypeModifierReserved13Mask ModifierType = 8192
	// ModifierTypeModifierReserved14Mask: a reserved bit flag; do not use in
	// your own code
	ModifierTypeModifierReserved14Mask ModifierType = 16384
	// ModifierTypeModifierReserved15Mask: a reserved bit flag; do not use in
	// your own code
	ModifierTypeModifierReserved15Mask ModifierType = 32768
	// ModifierTypeModifierReserved16Mask: a reserved bit flag; do not use in
	// your own code
	ModifierTypeModifierReserved16Mask ModifierType = 65536
	// ModifierTypeModifierReserved17Mask: a reserved bit flag; do not use in
	// your own code
	ModifierTypeModifierReserved17Mask ModifierType = 131072
	// ModifierTypeModifierReserved18Mask: a reserved bit flag; do not use in
	// your own code
	ModifierTypeModifierReserved18Mask ModifierType = 262144
	// ModifierTypeModifierReserved19Mask: a reserved bit flag; do not use in
	// your own code
	ModifierTypeModifierReserved19Mask ModifierType = 524288
	// ModifierTypeModifierReserved20Mask: a reserved bit flag; do not use in
	// your own code
	ModifierTypeModifierReserved20Mask ModifierType = 1048576
	// ModifierTypeModifierReserved21Mask: a reserved bit flag; do not use in
	// your own code
	ModifierTypeModifierReserved21Mask ModifierType = 2097152
	// ModifierTypeModifierReserved22Mask: a reserved bit flag; do not use in
	// your own code
	ModifierTypeModifierReserved22Mask ModifierType = 4194304
	// ModifierTypeModifierReserved23Mask: a reserved bit flag; do not use in
	// your own code
	ModifierTypeModifierReserved23Mask ModifierType = 8388608
	// ModifierTypeModifierReserved24Mask: a reserved bit flag; do not use in
	// your own code
	ModifierTypeModifierReserved24Mask ModifierType = 16777216
	// ModifierTypeModifierReserved25Mask: a reserved bit flag; do not use in
	// your own code
	ModifierTypeModifierReserved25Mask ModifierType = 33554432
	// ModifierTypeSuperMask: the Super modifier. Since 2.10
	ModifierTypeSuperMask ModifierType = 67108864
	// ModifierTypeHyperMask: the Hyper modifier. Since 2.10
	ModifierTypeHyperMask ModifierType = 134217728
	// ModifierTypeMetaMask: the Meta modifier. Since 2.10
	ModifierTypeMetaMask ModifierType = 268435456
	// ModifierTypeModifierReserved29Mask: a reserved bit flag; do not use in
	// your own code
	ModifierTypeModifierReserved29Mask ModifierType = 536870912
	// ModifierTypeReleaseMask: not used in GDK itself. GTK+ uses it to
	// differentiate between (keyval, modifiers) pairs from key press and
	// release events.
	ModifierTypeReleaseMask ModifierType = 1073741824
	// ModifierTypeModifierMask: a mask covering all modifier types.
	ModifierTypeModifierMask ModifierType = 1543512063
)

func marshalModifierType(p uintptr) (interface{}, error) {
	return ModifierType(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// Atom: an opaque type representing a string as an index into a table of
// strings on the X server.
type Atom struct {
	native C.GdkAtom
}

// WrapAtom wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapAtom(ptr unsafe.Pointer) *Atom {
	if ptr == nil {
		return nil
	}

	return (*Atom)(ptr)
}

// Native returns the underlying C source pointer.
func (a *Atom) Native() unsafe.Pointer {
	return unsafe.Pointer(&a.native)
}

// Name determines the string corresponding to an atom.
func (a *Atom) Name() string {
	var _arg0 C.GdkAtom // out

	_arg0 = (C.GdkAtom)(unsafe.Pointer(a.Native()))

	var _cret *C.gchar // in

	_cret = C.gdk_atom_name(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Point defines the x and y coordinates of a point.
type Point struct {
	native C.GdkPoint
}

// WrapPoint wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPoint(ptr unsafe.Pointer) *Point {
	if ptr == nil {
		return nil
	}

	return (*Point)(ptr)
}

// Native returns the underlying C source pointer.
func (p *Point) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

// X gets the field inside the struct.
func (p *Point) X() int {
	var v int // out
	v = (int)(p.native.x)
	return v
}

// Y gets the field inside the struct.
func (p *Point) Y() int {
	var v int // out
	v = (int)(p.native.y)
	return v
}

// Rectangle defines the position and size of a rectangle. It is identical to
// #cairo_rectangle_int_t.
type Rectangle struct {
	native C.GdkRectangle
}

// WrapRectangle wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapRectangle(ptr unsafe.Pointer) *Rectangle {
	if ptr == nil {
		return nil
	}

	return (*Rectangle)(ptr)
}

func marshalRectangle(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapRectangle(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (r *Rectangle) Native() unsafe.Pointer {
	return unsafe.Pointer(&r.native)
}

// X gets the field inside the struct.
func (r *Rectangle) X() int {
	var v int // out
	v = (int)(r.native.x)
	return v
}

// Y gets the field inside the struct.
func (r *Rectangle) Y() int {
	var v int // out
	v = (int)(r.native.y)
	return v
}

// Width gets the field inside the struct.
func (r *Rectangle) Width() int {
	var v int // out
	v = (int)(r.native.width)
	return v
}

// Height gets the field inside the struct.
func (r *Rectangle) Height() int {
	var v int // out
	v = (int)(r.native.height)
	return v
}

// Equal checks if the two given rectangles are equal.
func (r *Rectangle) Equal(rect2 *Rectangle) bool {
	var _arg0 *C.GdkRectangle // out
	var _arg1 *C.GdkRectangle // out

	_arg0 = (*C.GdkRectangle)(unsafe.Pointer(r.Native()))
	_arg1 = (*C.GdkRectangle)(unsafe.Pointer(rect2.Native()))

	var _cret C.gboolean // in

	_cret = C.gdk_rectangle_equal(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Intersect calculates the intersection of two rectangles. It is allowed for
// @dest to be the same as either @src1 or @src2. If the rectangles do not
// intersect, @dest’s width and height is set to 0 and its x and y values are
// undefined. If you are only interested in whether the rectangles intersect,
// but not in the intersecting area itself, pass nil for @dest.
func (s *Rectangle) Intersect(src2 *Rectangle) (Rectangle, bool) {
	var _arg0 *C.GdkRectangle // out
	var _arg1 *C.GdkRectangle // out

	_arg0 = (*C.GdkRectangle)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GdkRectangle)(unsafe.Pointer(src2.Native()))

	var _dest Rectangle
	var _cret C.gboolean // in

	_cret = C.gdk_rectangle_intersect(_arg0, _arg1, (*C.GdkRectangle)(unsafe.Pointer(&_dest)))

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _dest, _ok
}

// Union calculates the union of two rectangles. The union of rectangles @src1
// and @src2 is the smallest rectangle which includes both @src1 and @src2
// within it. It is allowed for @dest to be the same as either @src1 or @src2.
//
// Note that this function does not ignore 'empty' rectangles (ie. with zero
// width or height).
func (s *Rectangle) Union(src2 *Rectangle) Rectangle {
	var _arg0 *C.GdkRectangle // out
	var _arg1 *C.GdkRectangle // out

	_arg0 = (*C.GdkRectangle)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GdkRectangle)(unsafe.Pointer(src2.Native()))

	var _dest Rectangle

	C.gdk_rectangle_union(_arg0, _arg1, (*C.GdkRectangle)(unsafe.Pointer(&_dest)))

	return _dest
}
