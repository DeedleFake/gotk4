// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
)

// #cgo pkg-config: gdk-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <gdk/gdk.h>
import "C"

// ListVisuals lists the available visuals for the default screen. (See
// gdk_screen_list_visuals()) A visual describes a hardware image data format.
// For example, a visual might support 24-bit color, or 8-bit color, and might
// expect pixels to be in a certain format.
//
// Call g_list_free() on the return value when you’re finished with it.
func ListVisuals() *glib.List {
	ret := C.gdk_list_visuals()

	var ret0 *glib.List

	{
		ret0 = glib.WrapList(unsafe.Pointer(ret))
		runtime.SetFinalizer(ret0, func(v *glib.List) {
			C.free(unsafe.Pointer(v.Native()))
		})
	}

	return ret0
}

// QueryDepths: this function returns the available bit depths for the default
// screen. It’s equivalent to listing the visuals (gdk_list_visuals()) and then
// looking at the depth field in each visual, removing duplicates.
//
// The array returned by this function should not be freed.
func QueryDepths() (depths []int, count int) {
	var arg1 **C.gint // out
	var arg2 *C.gint  // out

	C.gdk_query_depths(&arg1, &arg2)

	var ret0 []int
	var ret1 int

	{
		ret0 = make([]int, arg2)
		for i := 0; i < uintptr(arg2); i++ {
			src := (*C.gint)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + i))
			ret0[i] = int(src)
		}
	}

	ret1 = int(arg2)

	return ret0, ret1
}

// QueryVisualTypes: this function returns the available visual types for the
// default screen. It’s equivalent to listing the visuals (gdk_list_visuals())
// and then looking at the type field in each visual, removing duplicates.
//
// The array returned by this function should not be freed.
func QueryVisualTypes() (visualTypes []*VisualType, count int) {
	var arg1 **C.GdkVisualType // out
	var arg2 *C.gint           // out

	C.gdk_query_visual_types(&arg1, &arg2)

	var ret0 []*VisualType
	var ret1 int

	{
		ret0 = make([]*VisualType, arg2)
		for i := 0; i < uintptr(arg2); i++ {
			src := (*C.GdkVisualType)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + i))
			ret0[i] = (*VisualType)(src)
		}
	}

	ret1 = int(arg2)

	return ret0, ret1
}
