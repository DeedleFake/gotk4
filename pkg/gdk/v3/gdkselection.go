// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
)

// #cgo pkg-config: gdk-3.0 gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <stdbool.h>
// #include <gdk/gdk.h>
import "C"

// SelectionConvert retrieves the contents of a selection in a given form.
func SelectionConvert(requestor Window, selection Atom, target Atom, time_ uint32) {
	var arg1 *C.GdkWindow
	var arg2 C.GdkAtom
	var arg3 C.GdkAtom
	var arg4 C.guint32

	arg1 = (*C.GdkWindow)(unsafe.Pointer(requestor.Native()))
	arg2 = (C.GdkAtom)(unsafe.Pointer(selection.Native()))
	arg3 = (C.GdkAtom)(unsafe.Pointer(target.Native()))
	arg4 = C.guint32(time_)

	C.gdk_selection_convert(requestor, selection, target, time_)
}

// SelectionOwnerGet determines the owner of the given selection.
func SelectionOwnerGet(selection Atom) Window {
	var arg1 C.GdkAtom

	arg1 = (C.GdkAtom)(unsafe.Pointer(selection.Native()))

	var cret *C.GdkWindow
	var ret1 Window

	cret = C.gdk_selection_owner_get(selection)

	ret1 = gextras.CastObject(externglib.Take(unsafe.Pointer(cret.Native()))).(Window)

	return ret1
}

// SelectionOwnerGetForDisplay: determine the owner of the given selection.
//
// Note that the return value may be owned by a different process if a foreign
// window was previously created for that window, but a new foreign window will
// never be created by this call.
func SelectionOwnerGetForDisplay(display Display, selection Atom) Window {
	var arg1 *C.GdkDisplay
	var arg2 C.GdkAtom

	arg1 = (*C.GdkDisplay)(unsafe.Pointer(display.Native()))
	arg2 = (C.GdkAtom)(unsafe.Pointer(selection.Native()))

	var cret *C.GdkWindow
	var ret1 Window

	cret = C.gdk_selection_owner_get_for_display(display, selection)

	ret1 = gextras.CastObject(externglib.Take(unsafe.Pointer(cret.Native()))).(Window)

	return ret1
}

// SelectionOwnerSet sets the owner of the given selection.
func SelectionOwnerSet(owner Window, selection Atom, time_ uint32, sendEvent bool) bool {
	var arg1 *C.GdkWindow
	var arg2 C.GdkAtom
	var arg3 C.guint32
	var arg4 C.gboolean

	arg1 = (*C.GdkWindow)(unsafe.Pointer(owner.Native()))
	arg2 = (C.GdkAtom)(unsafe.Pointer(selection.Native()))
	arg3 = C.guint32(time_)
	if sendEvent {
		arg4 = C.gboolean(1)
	}

	var cret C.gboolean
	var ret1 bool

	cret = C.gdk_selection_owner_set(owner, selection, time_, sendEvent)

	ret1 = C.bool(cret) != C.false

	return ret1
}

// SelectionOwnerSetForDisplay sets the Window @owner as the current owner of
// the selection @selection.
func SelectionOwnerSetForDisplay(display Display, owner Window, selection Atom, time_ uint32, sendEvent bool) bool {
	var arg1 *C.GdkDisplay
	var arg2 *C.GdkWindow
	var arg3 C.GdkAtom
	var arg4 C.guint32
	var arg5 C.gboolean

	arg1 = (*C.GdkDisplay)(unsafe.Pointer(display.Native()))
	arg2 = (*C.GdkWindow)(unsafe.Pointer(owner.Native()))
	arg3 = (C.GdkAtom)(unsafe.Pointer(selection.Native()))
	arg4 = C.guint32(time_)
	if sendEvent {
		arg5 = C.gboolean(1)
	}

	var cret C.gboolean
	var ret1 bool

	cret = C.gdk_selection_owner_set_for_display(display, owner, selection, time_, sendEvent)

	ret1 = C.bool(cret) != C.false

	return ret1
}

// SelectionPropertyGet retrieves selection data that was stored by the
// selection data in response to a call to gdk_selection_convert(). This
// function will not be used by applications, who should use the Clipboard API
// instead.
func SelectionPropertyGet(requestor Window, data byte, propType *Atom, propFormat int) int {
	var arg1 *C.GdkWindow
	var arg2 **C.guchar
	var arg3 *C.GdkAtom
	var arg4 *C.gint

	arg1 = (*C.GdkWindow)(unsafe.Pointer(requestor.Native()))
	arg2 = **C.guchar(data)
	arg3 = (*C.GdkAtom)(unsafe.Pointer(propType.Native()))
	arg4 = *C.gint(propFormat)

	var cret C.gint
	var ret1 int

	cret = C.gdk_selection_property_get(requestor, data, propType, propFormat)

	ret1 = C.gint(cret)

	return ret1
}

// SelectionSendNotify sends a response to SelectionRequest event.
func SelectionSendNotify(requestor Window, selection Atom, target Atom, property Atom, time_ uint32) {
	var arg1 *C.GdkWindow
	var arg2 C.GdkAtom
	var arg3 C.GdkAtom
	var arg4 C.GdkAtom
	var arg5 C.guint32

	arg1 = (*C.GdkWindow)(unsafe.Pointer(requestor.Native()))
	arg2 = (C.GdkAtom)(unsafe.Pointer(selection.Native()))
	arg3 = (C.GdkAtom)(unsafe.Pointer(target.Native()))
	arg4 = (C.GdkAtom)(unsafe.Pointer(property.Native()))
	arg5 = C.guint32(time_)

	C.gdk_selection_send_notify(requestor, selection, target, property, time_)
}

// SelectionSendNotifyForDisplay: send a response to SelectionRequest event.
func SelectionSendNotifyForDisplay(display Display, requestor Window, selection Atom, target Atom, property Atom, time_ uint32) {
	var arg1 *C.GdkDisplay
	var arg2 *C.GdkWindow
	var arg3 C.GdkAtom
	var arg4 C.GdkAtom
	var arg5 C.GdkAtom
	var arg6 C.guint32

	arg1 = (*C.GdkDisplay)(unsafe.Pointer(display.Native()))
	arg2 = (*C.GdkWindow)(unsafe.Pointer(requestor.Native()))
	arg3 = (C.GdkAtom)(unsafe.Pointer(selection.Native()))
	arg4 = (C.GdkAtom)(unsafe.Pointer(target.Native()))
	arg5 = (C.GdkAtom)(unsafe.Pointer(property.Native()))
	arg6 = C.guint32(time_)

	C.gdk_selection_send_notify_for_display(display, requestor, selection, target, property, time_)
}
