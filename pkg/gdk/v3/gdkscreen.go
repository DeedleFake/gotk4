// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	"github.com/diamondburned/gotk4/pkg/cairo"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gdk-3.0 glib-2.0 gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <gdk/gdk.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gdk_screen_get_type()), F: marshalScreen},
	})
}

// Screen objects are the GDK representation of the screen on which windows can
// be displayed and on which the pointer moves. X originally identified screens
// with physical screens, but nowadays it is more common to have a single Screen
// which combines several physical monitors (see gdk_screen_get_n_monitors()).
//
// GdkScreen is used throughout GDK and GTK+ to specify which screen the top
// level windows are to be displayed on. it is also used to query the screen
// specification and default settings such as the default visual
// (gdk_screen_get_system_visual()), the dimensions of the physical monitors
// (gdk_screen_get_monitor_geometry()), etc.
type Screen interface {
	gextras.Objector

	// ActiveWindow returns the screen’s currently active window.
	//
	// On X11, this is done by inspecting the _NET_ACTIVE_WINDOW property on the
	// root window, as described in the Extended Window Manager Hints
	// (http://www.freedesktop.org/Standards/wm-spec). If there is no currently
	// currently active window, or the window manager does not support the
	// _NET_ACTIVE_WINDOW hint, this function returns nil.
	//
	// On other platforms, this function may return nil, depending on whether it
	// is implementable on that platform.
	//
	// The returned window should be unrefed using g_object_unref() when no
	// longer needed.
	ActiveWindow() Window
	// Display gets the display to which the @screen belongs.
	Display() Display
	// FontOptions gets any options previously set with
	// gdk_screen_set_font_options().
	FontOptions() *cairo.FontOptions
	// Height gets the height of @screen in pixels. The returned size is in
	// ”application pixels”, not in ”device pixels” (see
	// gdk_screen_get_monitor_scale_factor()).
	Height() int
	// HeightMm returns the height of @screen in millimeters.
	//
	// Note that this value is somewhat ill-defined when the screen has multiple
	// monitors of different resolution. It is recommended to use the monitor
	// dimensions instead.
	HeightMm() int
	// MonitorAtPoint returns the monitor number in which the point (@x,@y) is
	// located.
	MonitorAtPoint(x int, y int) int
	// MonitorAtWindow returns the number of the monitor in which the largest
	// area of the bounding rectangle of @window resides.
	MonitorAtWindow(window Window) int
	// MonitorGeometry retrieves the Rectangle representing the size and
	// position of the individual monitor within the entire screen area. The
	// returned geometry is in ”application pixels”, not in ”device pixels” (see
	// gdk_screen_get_monitor_scale_factor()).
	//
	// Monitor numbers start at 0. To obtain the number of monitors of @screen,
	// use gdk_screen_get_n_monitors().
	//
	// Note that the size of the entire screen area can be retrieved via
	// gdk_screen_get_width() and gdk_screen_get_height().
	MonitorGeometry(monitorNum int) Rectangle
	// MonitorHeightMm gets the height in millimeters of the specified monitor.
	MonitorHeightMm(monitorNum int) int
	// MonitorPlugName returns the output name of the specified monitor. Usually
	// something like VGA, DVI, or TV, not the actual product name of the
	// display device.
	MonitorPlugName(monitorNum int) string
	// MonitorScaleFactor returns the internal scale factor that maps from
	// monitor coordinates to the actual device pixels. On traditional systems
	// this is 1, but on very high density outputs this can be a higher value
	// (often 2).
	//
	// This can be used if you want to create pixel based data for a particular
	// monitor, but most of the time you’re drawing to a window where it is
	// better to use gdk_window_get_scale_factor() instead.
	MonitorScaleFactor(monitorNum int) int
	// MonitorWidthMm gets the width in millimeters of the specified monitor, if
	// available.
	MonitorWidthMm(monitorNum int) int
	// MonitorWorkarea retrieves the Rectangle representing the size and
	// position of the “work area” on a monitor within the entire screen area.
	// The returned geometry is in ”application pixels”, not in ”device pixels”
	// (see gdk_screen_get_monitor_scale_factor()).
	//
	// The work area should be considered when positioning menus and similar
	// popups, to avoid placing them below panels, docks or other desktop
	// components.
	//
	// Note that not all backends may have a concept of workarea. This function
	// will return the monitor geometry if a workarea is not available, or does
	// not apply.
	//
	// Monitor numbers start at 0. To obtain the number of monitors of @screen,
	// use gdk_screen_get_n_monitors().
	MonitorWorkarea(monitorNum int) Rectangle
	// NMonitors returns the number of monitors which @screen consists of.
	NMonitors() int
	// Number gets the index of @screen among the screens in the display to
	// which it belongs. (See gdk_screen_get_display())
	Number() int
	// PrimaryMonitor gets the primary monitor for @screen. The primary monitor
	// is considered the monitor where the “main desktop” lives. While normal
	// application windows typically allow the window manager to place the
	// windows, specialized desktop applications such as panels should place
	// themselves on the primary monitor.
	//
	// If no primary monitor is configured by the user, the return value will be
	// 0, defaulting to the first monitor.
	PrimaryMonitor() int
	// Resolution gets the resolution for font handling on the screen; see
	// gdk_screen_set_resolution() for full details.
	Resolution() float64
	// RGBAVisual gets a visual to use for creating windows with an alpha
	// channel. The windowing system on which GTK+ is running may not support
	// this capability, in which case nil will be returned. Even if a non-nil
	// value is returned, its possible that the window’s alpha channel won’t be
	// honored when displaying the window on the screen: in particular, for X an
	// appropriate windowing manager and compositing manager must be running to
	// provide appropriate display.
	//
	// This functionality is not implemented in the Windows backend.
	//
	// For setting an overall opacity for a top-level window, see
	// gdk_window_set_opacity().
	RGBAVisual() Visual
	// RootWindow gets the root window of @screen.
	RootWindow() Window
	// Setting retrieves a desktop-wide setting such as double-click time for
	// the Screen @screen.
	//
	// FIXME needs a list of valid settings here, or a link to more information.
	Setting(name string, value **externglib.Value) bool
	// SystemVisual: get the system’s default visual for @screen. This is the
	// visual for the root window of the display. The return value should not be
	// freed.
	SystemVisual() Visual
	// Width gets the width of @screen in pixels. The returned size is in
	// ”application pixels”, not in ”device pixels” (see
	// gdk_screen_get_monitor_scale_factor()).
	Width() int
	// WidthMm gets the width of @screen in millimeters.
	//
	// Note that this value is somewhat ill-defined when the screen has multiple
	// monitors of different resolution. It is recommended to use the monitor
	// dimensions instead.
	WidthMm() int
	// IsComposited returns whether windows with an RGBA visual can reasonably
	// be expected to have their alpha channel drawn correctly on the screen.
	//
	// On X11 this function returns whether a compositing manager is compositing
	// @screen.
	IsComposited() bool
	// MakeDisplayName determines the name to pass to gdk_display_open() to get
	// a Display with this screen as the default screen.
	MakeDisplayName() string
	// SetFontOptions sets the default font options for the screen. These
	// options will be set on any Context’s newly created with
	// gdk_pango_context_get_for_screen(). Changing the default set of font
	// options does not affect contexts that have already been created.
	SetFontOptions(options *cairo.FontOptions)
	// SetResolution sets the resolution for font handling on the screen. This
	// is a scale factor between points specified in a FontDescription and cairo
	// units. The default value is 96, meaning that a 10 point font will be 13
	// units high. (10 * 96. / 72. = 13.3).
	SetResolution(dpi float64)
}

// screen implements the Screen class.
type screen struct {
	gextras.Objector
}

var _ Screen = (*screen)(nil)

// WrapScreen wraps a GObject to the right type. It is
// primarily used internally.
func WrapScreen(obj *externglib.Object) Screen {
	return screen{
		Objector: obj,
	}
}

func marshalScreen(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapScreen(obj), nil
}

// ActiveWindow returns the screen’s currently active window.
//
// On X11, this is done by inspecting the _NET_ACTIVE_WINDOW property on the
// root window, as described in the Extended Window Manager Hints
// (http://www.freedesktop.org/Standards/wm-spec). If there is no currently
// currently active window, or the window manager does not support the
// _NET_ACTIVE_WINDOW hint, this function returns nil.
//
// On other platforms, this function may return nil, depending on whether it
// is implementable on that platform.
//
// The returned window should be unrefed using g_object_unref() when no
// longer needed.
func (s screen) ActiveWindow() Window {
	var _arg0 *C.GdkScreen // out
	var _cret *C.GdkWindow // in

	_arg0 = (*C.GdkScreen)(unsafe.Pointer(s.Native()))

	_cret = C.gdk_screen_get_active_window(_arg0)

	var _window Window // out

	_window = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret.Native()))).(Window)

	return _window
}

// Display gets the display to which the @screen belongs.
func (s screen) Display() Display {
	var _arg0 *C.GdkScreen  // out
	var _cret *C.GdkDisplay // in

	_arg0 = (*C.GdkScreen)(unsafe.Pointer(s.Native()))

	_cret = C.gdk_screen_get_display(_arg0)

	var _display Display // out

	_display = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret.Native()))).(Display)

	return _display
}

// FontOptions gets any options previously set with
// gdk_screen_set_font_options().
func (s screen) FontOptions() *cairo.FontOptions {
	var _arg0 *C.GdkScreen            // out
	var _cret *C.cairo_font_options_t // in

	_arg0 = (*C.GdkScreen)(unsafe.Pointer(s.Native()))

	_cret = C.gdk_screen_get_font_options(_arg0)

	var _fontOptions *cairo.FontOptions // out

	_fontOptions = cairo.WrapFontOptions(unsafe.Pointer(_cret))

	return _fontOptions
}

// Height gets the height of @screen in pixels. The returned size is in
// ”application pixels”, not in ”device pixels” (see
// gdk_screen_get_monitor_scale_factor()).
func (s screen) Height() int {
	var _arg0 *C.GdkScreen // out
	var _cret C.gint       // in

	_arg0 = (*C.GdkScreen)(unsafe.Pointer(s.Native()))

	_cret = C.gdk_screen_get_height(_arg0)

	var _gint int // out

	_gint = (int)(_cret)

	return _gint
}

// HeightMm returns the height of @screen in millimeters.
//
// Note that this value is somewhat ill-defined when the screen has multiple
// monitors of different resolution. It is recommended to use the monitor
// dimensions instead.
func (s screen) HeightMm() int {
	var _arg0 *C.GdkScreen // out
	var _cret C.gint       // in

	_arg0 = (*C.GdkScreen)(unsafe.Pointer(s.Native()))

	_cret = C.gdk_screen_get_height_mm(_arg0)

	var _gint int // out

	_gint = (int)(_cret)

	return _gint
}

// MonitorAtPoint returns the monitor number in which the point (@x,@y) is
// located.
func (s screen) MonitorAtPoint(x int, y int) int {
	var _arg0 *C.GdkScreen // out
	var _arg1 C.gint       // out
	var _arg2 C.gint       // out
	var _cret C.gint       // in

	_arg0 = (*C.GdkScreen)(unsafe.Pointer(s.Native()))
	_arg1 = (C.gint)(x)
	_arg2 = (C.gint)(y)

	_cret = C.gdk_screen_get_monitor_at_point(_arg0, _arg1, _arg2)

	var _gint int // out

	_gint = (int)(_cret)

	return _gint
}

// MonitorAtWindow returns the number of the monitor in which the largest
// area of the bounding rectangle of @window resides.
func (s screen) MonitorAtWindow(window Window) int {
	var _arg0 *C.GdkScreen // out
	var _arg1 *C.GdkWindow // out
	var _cret C.gint       // in

	_arg0 = (*C.GdkScreen)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GdkWindow)(unsafe.Pointer(window.Native()))

	_cret = C.gdk_screen_get_monitor_at_window(_arg0, _arg1)

	var _gint int // out

	_gint = (int)(_cret)

	return _gint
}

// MonitorGeometry retrieves the Rectangle representing the size and
// position of the individual monitor within the entire screen area. The
// returned geometry is in ”application pixels”, not in ”device pixels” (see
// gdk_screen_get_monitor_scale_factor()).
//
// Monitor numbers start at 0. To obtain the number of monitors of @screen,
// use gdk_screen_get_n_monitors().
//
// Note that the size of the entire screen area can be retrieved via
// gdk_screen_get_width() and gdk_screen_get_height().
func (s screen) MonitorGeometry(monitorNum int) Rectangle {
	var _arg0 *C.GdkScreen // out
	var _arg1 C.gint       // out
	var _dest Rectangle

	_arg0 = (*C.GdkScreen)(unsafe.Pointer(s.Native()))
	_arg1 = (C.gint)(monitorNum)

	C.gdk_screen_get_monitor_geometry(_arg0, _arg1, (*C.GdkRectangle)(unsafe.Pointer(&_dest)))

	return _dest
}

// MonitorHeightMm gets the height in millimeters of the specified monitor.
func (s screen) MonitorHeightMm(monitorNum int) int {
	var _arg0 *C.GdkScreen // out
	var _arg1 C.gint       // out
	var _cret C.gint       // in

	_arg0 = (*C.GdkScreen)(unsafe.Pointer(s.Native()))
	_arg1 = (C.gint)(monitorNum)

	_cret = C.gdk_screen_get_monitor_height_mm(_arg0, _arg1)

	var _gint int // out

	_gint = (int)(_cret)

	return _gint
}

// MonitorPlugName returns the output name of the specified monitor. Usually
// something like VGA, DVI, or TV, not the actual product name of the
// display device.
func (s screen) MonitorPlugName(monitorNum int) string {
	var _arg0 *C.GdkScreen // out
	var _arg1 C.gint       // out
	var _cret *C.gchar     // in

	_arg0 = (*C.GdkScreen)(unsafe.Pointer(s.Native()))
	_arg1 = (C.gint)(monitorNum)

	_cret = C.gdk_screen_get_monitor_plug_name(_arg0, _arg1)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// MonitorScaleFactor returns the internal scale factor that maps from
// monitor coordinates to the actual device pixels. On traditional systems
// this is 1, but on very high density outputs this can be a higher value
// (often 2).
//
// This can be used if you want to create pixel based data for a particular
// monitor, but most of the time you’re drawing to a window where it is
// better to use gdk_window_get_scale_factor() instead.
func (s screen) MonitorScaleFactor(monitorNum int) int {
	var _arg0 *C.GdkScreen // out
	var _arg1 C.gint       // out
	var _cret C.gint       // in

	_arg0 = (*C.GdkScreen)(unsafe.Pointer(s.Native()))
	_arg1 = (C.gint)(monitorNum)

	_cret = C.gdk_screen_get_monitor_scale_factor(_arg0, _arg1)

	var _gint int // out

	_gint = (int)(_cret)

	return _gint
}

// MonitorWidthMm gets the width in millimeters of the specified monitor, if
// available.
func (s screen) MonitorWidthMm(monitorNum int) int {
	var _arg0 *C.GdkScreen // out
	var _arg1 C.gint       // out
	var _cret C.gint       // in

	_arg0 = (*C.GdkScreen)(unsafe.Pointer(s.Native()))
	_arg1 = (C.gint)(monitorNum)

	_cret = C.gdk_screen_get_monitor_width_mm(_arg0, _arg1)

	var _gint int // out

	_gint = (int)(_cret)

	return _gint
}

// MonitorWorkarea retrieves the Rectangle representing the size and
// position of the “work area” on a monitor within the entire screen area.
// The returned geometry is in ”application pixels”, not in ”device pixels”
// (see gdk_screen_get_monitor_scale_factor()).
//
// The work area should be considered when positioning menus and similar
// popups, to avoid placing them below panels, docks or other desktop
// components.
//
// Note that not all backends may have a concept of workarea. This function
// will return the monitor geometry if a workarea is not available, or does
// not apply.
//
// Monitor numbers start at 0. To obtain the number of monitors of @screen,
// use gdk_screen_get_n_monitors().
func (s screen) MonitorWorkarea(monitorNum int) Rectangle {
	var _arg0 *C.GdkScreen // out
	var _arg1 C.gint       // out
	var _dest Rectangle

	_arg0 = (*C.GdkScreen)(unsafe.Pointer(s.Native()))
	_arg1 = (C.gint)(monitorNum)

	C.gdk_screen_get_monitor_workarea(_arg0, _arg1, (*C.GdkRectangle)(unsafe.Pointer(&_dest)))

	return _dest
}

// NMonitors returns the number of monitors which @screen consists of.
func (s screen) NMonitors() int {
	var _arg0 *C.GdkScreen // out
	var _cret C.gint       // in

	_arg0 = (*C.GdkScreen)(unsafe.Pointer(s.Native()))

	_cret = C.gdk_screen_get_n_monitors(_arg0)

	var _gint int // out

	_gint = (int)(_cret)

	return _gint
}

// Number gets the index of @screen among the screens in the display to
// which it belongs. (See gdk_screen_get_display())
func (s screen) Number() int {
	var _arg0 *C.GdkScreen // out
	var _cret C.gint       // in

	_arg0 = (*C.GdkScreen)(unsafe.Pointer(s.Native()))

	_cret = C.gdk_screen_get_number(_arg0)

	var _gint int // out

	_gint = (int)(_cret)

	return _gint
}

// PrimaryMonitor gets the primary monitor for @screen. The primary monitor
// is considered the monitor where the “main desktop” lives. While normal
// application windows typically allow the window manager to place the
// windows, specialized desktop applications such as panels should place
// themselves on the primary monitor.
//
// If no primary monitor is configured by the user, the return value will be
// 0, defaulting to the first monitor.
func (s screen) PrimaryMonitor() int {
	var _arg0 *C.GdkScreen // out
	var _cret C.gint       // in

	_arg0 = (*C.GdkScreen)(unsafe.Pointer(s.Native()))

	_cret = C.gdk_screen_get_primary_monitor(_arg0)

	var _gint int // out

	_gint = (int)(_cret)

	return _gint
}

// Resolution gets the resolution for font handling on the screen; see
// gdk_screen_set_resolution() for full details.
func (s screen) Resolution() float64 {
	var _arg0 *C.GdkScreen // out
	var _cret C.gdouble    // in

	_arg0 = (*C.GdkScreen)(unsafe.Pointer(s.Native()))

	_cret = C.gdk_screen_get_resolution(_arg0)

	var _gdouble float64 // out

	_gdouble = (float64)(_cret)

	return _gdouble
}

// RGBAVisual gets a visual to use for creating windows with an alpha
// channel. The windowing system on which GTK+ is running may not support
// this capability, in which case nil will be returned. Even if a non-nil
// value is returned, its possible that the window’s alpha channel won’t be
// honored when displaying the window on the screen: in particular, for X an
// appropriate windowing manager and compositing manager must be running to
// provide appropriate display.
//
// This functionality is not implemented in the Windows backend.
//
// For setting an overall opacity for a top-level window, see
// gdk_window_set_opacity().
func (s screen) RGBAVisual() Visual {
	var _arg0 *C.GdkScreen // out
	var _cret *C.GdkVisual // in

	_arg0 = (*C.GdkScreen)(unsafe.Pointer(s.Native()))

	_cret = C.gdk_screen_get_rgba_visual(_arg0)

	var _visual Visual // out

	_visual = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret.Native()))).(Visual)

	return _visual
}

// RootWindow gets the root window of @screen.
func (s screen) RootWindow() Window {
	var _arg0 *C.GdkScreen // out
	var _cret *C.GdkWindow // in

	_arg0 = (*C.GdkScreen)(unsafe.Pointer(s.Native()))

	_cret = C.gdk_screen_get_root_window(_arg0)

	var _window Window // out

	_window = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret.Native()))).(Window)

	return _window
}

// Setting retrieves a desktop-wide setting such as double-click time for
// the Screen @screen.
//
// FIXME needs a list of valid settings here, or a link to more information.
func (s screen) Setting(name string, value **externglib.Value) bool {
	var _arg0 *C.GdkScreen // out
	var _arg1 *C.gchar     // out
	var _arg2 *C.GValue    // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GdkScreen)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.gchar)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.GValue)(value.GValue)

	_cret = C.gdk_screen_get_setting(_arg0, _arg1, _arg2)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SystemVisual: get the system’s default visual for @screen. This is the
// visual for the root window of the display. The return value should not be
// freed.
func (s screen) SystemVisual() Visual {
	var _arg0 *C.GdkScreen // out
	var _cret *C.GdkVisual // in

	_arg0 = (*C.GdkScreen)(unsafe.Pointer(s.Native()))

	_cret = C.gdk_screen_get_system_visual(_arg0)

	var _visual Visual // out

	_visual = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret.Native()))).(Visual)

	return _visual
}

// Width gets the width of @screen in pixels. The returned size is in
// ”application pixels”, not in ”device pixels” (see
// gdk_screen_get_monitor_scale_factor()).
func (s screen) Width() int {
	var _arg0 *C.GdkScreen // out
	var _cret C.gint       // in

	_arg0 = (*C.GdkScreen)(unsafe.Pointer(s.Native()))

	_cret = C.gdk_screen_get_width(_arg0)

	var _gint int // out

	_gint = (int)(_cret)

	return _gint
}

// WidthMm gets the width of @screen in millimeters.
//
// Note that this value is somewhat ill-defined when the screen has multiple
// monitors of different resolution. It is recommended to use the monitor
// dimensions instead.
func (s screen) WidthMm() int {
	var _arg0 *C.GdkScreen // out
	var _cret C.gint       // in

	_arg0 = (*C.GdkScreen)(unsafe.Pointer(s.Native()))

	_cret = C.gdk_screen_get_width_mm(_arg0)

	var _gint int // out

	_gint = (int)(_cret)

	return _gint
}

// IsComposited returns whether windows with an RGBA visual can reasonably
// be expected to have their alpha channel drawn correctly on the screen.
//
// On X11 this function returns whether a compositing manager is compositing
// @screen.
func (s screen) IsComposited() bool {
	var _arg0 *C.GdkScreen // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GdkScreen)(unsafe.Pointer(s.Native()))

	_cret = C.gdk_screen_is_composited(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// MakeDisplayName determines the name to pass to gdk_display_open() to get
// a Display with this screen as the default screen.
func (s screen) MakeDisplayName() string {
	var _arg0 *C.GdkScreen // out
	var _cret *C.gchar     // in

	_arg0 = (*C.GdkScreen)(unsafe.Pointer(s.Native()))

	_cret = C.gdk_screen_make_display_name(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// SetFontOptions sets the default font options for the screen. These
// options will be set on any Context’s newly created with
// gdk_pango_context_get_for_screen(). Changing the default set of font
// options does not affect contexts that have already been created.
func (s screen) SetFontOptions(options *cairo.FontOptions) {
	var _arg0 *C.GdkScreen            // out
	var _arg1 *C.cairo_font_options_t // out

	_arg0 = (*C.GdkScreen)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.cairo_font_options_t)(unsafe.Pointer(options.Native()))

	C.gdk_screen_set_font_options(_arg0, _arg1)
}

// SetResolution sets the resolution for font handling on the screen. This
// is a scale factor between points specified in a FontDescription and cairo
// units. The default value is 96, meaning that a 10 point font will be 13
// units high. (10 * 96. / 72. = 13.3).
func (s screen) SetResolution(dpi float64) {
	var _arg0 *C.GdkScreen // out
	var _arg1 C.gdouble    // out

	_arg0 = (*C.GdkScreen)(unsafe.Pointer(s.Native()))
	_arg1 = (C.gdouble)(dpi)

	C.gdk_screen_set_resolution(_arg0, _arg1)
}
