// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/core/gextras"
	"github.com/diamondburned/gotk4/pkg/cairo"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gdk-3.0 gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <gdk/gdk.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gdk_screen_get_type()), F: marshalScreen},
	})
}

// Screen objects are the GDK representation of the screen on which windows can
// be displayed and on which the pointer moves. X originally identified screens
// with physical screens, but nowadays it is more common to have a single Screen
// which combines several physical monitors (see gdk_screen_get_n_monitors()).
//
// GdkScreen is used throughout GDK and GTK+ to specify which screen the top
// level windows are to be displayed on. it is also used to query the screen
// specification and default settings such as the default visual
// (gdk_screen_get_system_visual()), the dimensions of the physical monitors
// (gdk_screen_get_monitor_geometry()), etc.
type Screen interface {
	gextras.Objector

	// ActiveWindow:
	ActiveWindow() Window
	// Display:
	Display() Display
	// FontOptions:
	FontOptions() *cairo.FontOptions
	// Height:
	Height() int
	// HeightMm:
	HeightMm() int
	// MonitorAtPoint:
	MonitorAtPoint(x int, y int) int
	// MonitorAtWindow:
	MonitorAtWindow(window Window) int
	// MonitorGeometry:
	MonitorGeometry(monitorNum int) Rectangle
	// MonitorHeightMm:
	MonitorHeightMm(monitorNum int) int
	// MonitorPlugName:
	MonitorPlugName(monitorNum int) string
	// MonitorScaleFactor:
	MonitorScaleFactor(monitorNum int) int
	// MonitorWidthMm:
	MonitorWidthMm(monitorNum int) int
	// MonitorWorkarea:
	MonitorWorkarea(monitorNum int) Rectangle
	// NMonitors:
	NMonitors() int
	// Number:
	Number() int
	// PrimaryMonitor:
	PrimaryMonitor() int
	// Resolution:
	Resolution() float64
	// RGBAVisual:
	RGBAVisual() Visual
	// RootWindow:
	RootWindow() Window
	// Setting:
	Setting(name string, value externglib.Value) bool
	// SystemVisual:
	SystemVisual() Visual
	// Width:
	Width() int
	// WidthMm:
	WidthMm() int
	// IsCompositedScreen:
	IsCompositedScreen() bool
	// MakeDisplayNameScreen:
	MakeDisplayNameScreen() string
	// SetFontOptionsScreen:
	SetFontOptionsScreen(options *cairo.FontOptions)
	// SetResolutionScreen:
	SetResolutionScreen(dpi float64)
}

// screen implements the Screen class.
type screen struct {
	gextras.Objector
}

// WrapScreen wraps a GObject to the right type. It is
// primarily used internally.
func WrapScreen(obj *externglib.Object) Screen {
	return screen{
		Objector: obj,
	}
}

func marshalScreen(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapScreen(obj), nil
}

func (s screen) ActiveWindow() Window {
	var _arg0 *C.GdkScreen // out
	var _cret *C.GdkWindow // in

	_arg0 = (*C.GdkScreen)(unsafe.Pointer(s.Native()))

	_cret = C.gdk_screen_get_active_window(_arg0)

	var _window Window // out

	_window = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(Window)

	return _window
}

func (s screen) Display() Display {
	var _arg0 *C.GdkScreen  // out
	var _cret *C.GdkDisplay // in

	_arg0 = (*C.GdkScreen)(unsafe.Pointer(s.Native()))

	_cret = C.gdk_screen_get_display(_arg0)

	var _display Display // out

	_display = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Display)

	return _display
}

func (s screen) FontOptions() *cairo.FontOptions {
	var _arg0 *C.GdkScreen            // out
	var _cret *C.cairo_font_options_t // in

	_arg0 = (*C.GdkScreen)(unsafe.Pointer(s.Native()))

	_cret = C.gdk_screen_get_font_options(_arg0)

	var _fontOptions *cairo.FontOptions // out

	_fontOptions = (*cairo.FontOptions)(unsafe.Pointer(_cret))

	return _fontOptions
}

func (s screen) Height() int {
	var _arg0 *C.GdkScreen // out
	var _cret C.gint       // in

	_arg0 = (*C.GdkScreen)(unsafe.Pointer(s.Native()))

	_cret = C.gdk_screen_get_height(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (s screen) HeightMm() int {
	var _arg0 *C.GdkScreen // out
	var _cret C.gint       // in

	_arg0 = (*C.GdkScreen)(unsafe.Pointer(s.Native()))

	_cret = C.gdk_screen_get_height_mm(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (s screen) MonitorAtPoint(x int, y int) int {
	var _arg0 *C.GdkScreen // out
	var _arg1 C.gint       // out
	var _arg2 C.gint       // out
	var _cret C.gint       // in

	_arg0 = (*C.GdkScreen)(unsafe.Pointer(s.Native()))
	_arg1 = C.gint(x)
	_arg2 = C.gint(y)

	_cret = C.gdk_screen_get_monitor_at_point(_arg0, _arg1, _arg2)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (s screen) MonitorAtWindow(window Window) int {
	var _arg0 *C.GdkScreen // out
	var _arg1 *C.GdkWindow // out
	var _cret C.gint       // in

	_arg0 = (*C.GdkScreen)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GdkWindow)(unsafe.Pointer(window.Native()))

	_cret = C.gdk_screen_get_monitor_at_window(_arg0, _arg1)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (s screen) MonitorGeometry(monitorNum int) Rectangle {
	var _arg0 *C.GdkScreen   // out
	var _arg1 C.gint         // out
	var _arg2 C.GdkRectangle // in

	_arg0 = (*C.GdkScreen)(unsafe.Pointer(s.Native()))
	_arg1 = C.gint(monitorNum)

	C.gdk_screen_get_monitor_geometry(_arg0, _arg1, &_arg2)

	var _dest Rectangle // out

	{
		var refTmpIn *C.GdkRectangle
		var refTmpOut *Rectangle

		in0 := &_arg2
		refTmpIn = in0

		refTmpOut = (*Rectangle)(unsafe.Pointer(refTmpIn))

		_dest = *refTmpOut
	}

	return _dest
}

func (s screen) MonitorHeightMm(monitorNum int) int {
	var _arg0 *C.GdkScreen // out
	var _arg1 C.gint       // out
	var _cret C.gint       // in

	_arg0 = (*C.GdkScreen)(unsafe.Pointer(s.Native()))
	_arg1 = C.gint(monitorNum)

	_cret = C.gdk_screen_get_monitor_height_mm(_arg0, _arg1)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (s screen) MonitorPlugName(monitorNum int) string {
	var _arg0 *C.GdkScreen // out
	var _arg1 C.gint       // out
	var _cret *C.gchar     // in

	_arg0 = (*C.GdkScreen)(unsafe.Pointer(s.Native()))
	_arg1 = C.gint(monitorNum)

	_cret = C.gdk_screen_get_monitor_plug_name(_arg0, _arg1)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

func (s screen) MonitorScaleFactor(monitorNum int) int {
	var _arg0 *C.GdkScreen // out
	var _arg1 C.gint       // out
	var _cret C.gint       // in

	_arg0 = (*C.GdkScreen)(unsafe.Pointer(s.Native()))
	_arg1 = C.gint(monitorNum)

	_cret = C.gdk_screen_get_monitor_scale_factor(_arg0, _arg1)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (s screen) MonitorWidthMm(monitorNum int) int {
	var _arg0 *C.GdkScreen // out
	var _arg1 C.gint       // out
	var _cret C.gint       // in

	_arg0 = (*C.GdkScreen)(unsafe.Pointer(s.Native()))
	_arg1 = C.gint(monitorNum)

	_cret = C.gdk_screen_get_monitor_width_mm(_arg0, _arg1)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (s screen) MonitorWorkarea(monitorNum int) Rectangle {
	var _arg0 *C.GdkScreen   // out
	var _arg1 C.gint         // out
	var _arg2 C.GdkRectangle // in

	_arg0 = (*C.GdkScreen)(unsafe.Pointer(s.Native()))
	_arg1 = C.gint(monitorNum)

	C.gdk_screen_get_monitor_workarea(_arg0, _arg1, &_arg2)

	var _dest Rectangle // out

	{
		var refTmpIn *C.GdkRectangle
		var refTmpOut *Rectangle

		in0 := &_arg2
		refTmpIn = in0

		refTmpOut = (*Rectangle)(unsafe.Pointer(refTmpIn))

		_dest = *refTmpOut
	}

	return _dest
}

func (s screen) NMonitors() int {
	var _arg0 *C.GdkScreen // out
	var _cret C.gint       // in

	_arg0 = (*C.GdkScreen)(unsafe.Pointer(s.Native()))

	_cret = C.gdk_screen_get_n_monitors(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (s screen) Number() int {
	var _arg0 *C.GdkScreen // out
	var _cret C.gint       // in

	_arg0 = (*C.GdkScreen)(unsafe.Pointer(s.Native()))

	_cret = C.gdk_screen_get_number(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (s screen) PrimaryMonitor() int {
	var _arg0 *C.GdkScreen // out
	var _cret C.gint       // in

	_arg0 = (*C.GdkScreen)(unsafe.Pointer(s.Native()))

	_cret = C.gdk_screen_get_primary_monitor(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (s screen) Resolution() float64 {
	var _arg0 *C.GdkScreen // out
	var _cret C.gdouble    // in

	_arg0 = (*C.GdkScreen)(unsafe.Pointer(s.Native()))

	_cret = C.gdk_screen_get_resolution(_arg0)

	var _gdouble float64 // out

	_gdouble = float64(_cret)

	return _gdouble
}

func (s screen) RGBAVisual() Visual {
	var _arg0 *C.GdkScreen // out
	var _cret *C.GdkVisual // in

	_arg0 = (*C.GdkScreen)(unsafe.Pointer(s.Native()))

	_cret = C.gdk_screen_get_rgba_visual(_arg0)

	var _visual Visual // out

	_visual = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Visual)

	return _visual
}

func (s screen) RootWindow() Window {
	var _arg0 *C.GdkScreen // out
	var _cret *C.GdkWindow // in

	_arg0 = (*C.GdkScreen)(unsafe.Pointer(s.Native()))

	_cret = C.gdk_screen_get_root_window(_arg0)

	var _window Window // out

	_window = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Window)

	return _window
}

func (s screen) Setting(name string, value externglib.Value) bool {
	var _arg0 *C.GdkScreen // out
	var _arg1 *C.gchar     // out
	var _arg2 *C.GValue    // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GdkScreen)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.gchar)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.GValue)(unsafe.Pointer(&value.GValue))

	_cret = C.gdk_screen_get_setting(_arg0, _arg1, _arg2)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (s screen) SystemVisual() Visual {
	var _arg0 *C.GdkScreen // out
	var _cret *C.GdkVisual // in

	_arg0 = (*C.GdkScreen)(unsafe.Pointer(s.Native()))

	_cret = C.gdk_screen_get_system_visual(_arg0)

	var _visual Visual // out

	_visual = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Visual)

	return _visual
}

func (s screen) Width() int {
	var _arg0 *C.GdkScreen // out
	var _cret C.gint       // in

	_arg0 = (*C.GdkScreen)(unsafe.Pointer(s.Native()))

	_cret = C.gdk_screen_get_width(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (s screen) WidthMm() int {
	var _arg0 *C.GdkScreen // out
	var _cret C.gint       // in

	_arg0 = (*C.GdkScreen)(unsafe.Pointer(s.Native()))

	_cret = C.gdk_screen_get_width_mm(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (s screen) IsCompositedScreen() bool {
	var _arg0 *C.GdkScreen // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GdkScreen)(unsafe.Pointer(s.Native()))

	_cret = C.gdk_screen_is_composited(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (s screen) MakeDisplayNameScreen() string {
	var _arg0 *C.GdkScreen // out
	var _cret *C.gchar     // in

	_arg0 = (*C.GdkScreen)(unsafe.Pointer(s.Native()))

	_cret = C.gdk_screen_make_display_name(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

func (s screen) SetFontOptionsScreen(options *cairo.FontOptions) {
	var _arg0 *C.GdkScreen            // out
	var _arg1 *C.cairo_font_options_t // out

	_arg0 = (*C.GdkScreen)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.cairo_font_options_t)(unsafe.Pointer(options.Native()))

	C.gdk_screen_set_font_options(_arg0, _arg1)
}

func (s screen) SetResolutionScreen(dpi float64) {
	var _arg0 *C.GdkScreen // out
	var _arg1 C.gdouble    // out

	_arg0 = (*C.GdkScreen)(unsafe.Pointer(s.Native()))
	_arg1 = C.gdouble(dpi)

	C.gdk_screen_set_resolution(_arg0, _arg1)
}
