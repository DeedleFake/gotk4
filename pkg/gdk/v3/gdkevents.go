// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/cairo"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gdk-3.0 gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <gdk/gdk.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gdk_crossing_mode_get_type()), F: marshalCrossingMode},
		{T: externglib.Type(C.gdk_event_type_get_type()), F: marshalEventType},
		{T: externglib.Type(C.gdk_filter_return_get_type()), F: marshalFilterReturn},
		{T: externglib.Type(C.gdk_notify_type_get_type()), F: marshalNotifyType},
		{T: externglib.Type(C.gdk_owner_change_get_type()), F: marshalOwnerChange},
		{T: externglib.Type(C.gdk_property_state_get_type()), F: marshalPropertyState},
		{T: externglib.Type(C.gdk_scroll_direction_get_type()), F: marshalScrollDirection},
		{T: externglib.Type(C.gdk_setting_action_get_type()), F: marshalSettingAction},
		{T: externglib.Type(C.gdk_touchpad_gesture_phase_get_type()), F: marshalTouchpadGesturePhase},
		{T: externglib.Type(C.gdk_visibility_state_get_type()), F: marshalVisibilityState},
		{T: externglib.Type(C.gdk_window_state_get_type()), F: marshalWindowState},
		{T: externglib.Type(C.gdk_event_sequence_get_type()), F: marshalEventSequence},
	})
}

// XEvent: used to represent native events (XEvents for the X11 backend, MSGs
// for Win32).
type XEvent = C.void

// CrossingMode specifies the crossing mode for EventCrossing.
type CrossingMode int

const (
	// Normal: crossing because of pointer motion.
	CrossingNormal CrossingMode = iota
	// Grab: crossing because a grab is activated.
	CrossingGrab
	// Ungrab: crossing because a grab is deactivated.
	CrossingUngrab
	// GTKGrab: crossing because a GTK+ grab is activated.
	CrossingGTKGrab
	// GTKUngrab: crossing because a GTK+ grab is deactivated.
	CrossingGTKUngrab
	// StateChanged: crossing because a GTK+ widget changed state (e.g.
	// sensitivity).
	CrossingStateChanged
	// TouchBegin: crossing because a touch sequence has begun, this event is
	// synthetic as the pointer might have not left the window.
	CrossingTouchBegin
	// TouchEnd: crossing because a touch sequence has ended, this event is
	// synthetic as the pointer might have not left the window.
	CrossingTouchEnd
	// DeviceSwitch: crossing because of a device switch (i.e. a mouse taking
	// control of the pointer after a touch device), this event is synthetic as
	// the pointer didn’t leave the window.
	CrossingDeviceSwitch
)

func marshalCrossingMode(p uintptr) (interface{}, error) {
	return CrossingMode(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// EventType specifies the type of the event.
//
// Do not confuse these events with the signals that GTK+ widgets emit. Although
// many of these events result in corresponding signals being emitted, the
// events are often transformed or filtered along the way.
//
// In some language bindings, the values GDK_2BUTTON_PRESS and GDK_3BUTTON_PRESS
// would translate into something syntactically invalid (eg
// `Gdk.EventType.2ButtonPress`, where a symbol is not allowed to start with a
// number). In that case, the aliases GDK_DOUBLE_BUTTON_PRESS and
// GDK_TRIPLE_BUTTON_PRESS can be used instead.
type EventType int

const (
	// Nothing: special code to indicate a null event.
	Nothing EventType = -1
	// Delete: the window manager has requested that the toplevel window be
	// hidden or destroyed, usually when the user clicks on a special icon in
	// the title bar.
	Delete EventType = 0
	// Destroy: the window has been destroyed.
	Destroy EventType = 1
	// Expose: all or part of the window has become visible and needs to be
	// redrawn.
	Expose EventType = 2
	// MotionNotify: the pointer (usually a mouse) has moved.
	MotionNotify EventType = 3
	// ButtonPress: mouse button has been pressed.
	ButtonPress EventType = 4
	// 2ButtonPress: mouse button has been double-clicked (clicked twice within
	// a short period of time). Note that each click also generates a
	// GDK_BUTTON_PRESS event.
	TwoButtonPress EventType = 5
	// DoubleButtonPress alias for GDK_2BUTTON_PRESS, added in 3.6.
	DoubleButtonPress EventType = 5
	// 3ButtonPress: mouse button has been clicked 3 times in a short period of
	// time. Note that each click also generates a GDK_BUTTON_PRESS event.
	ThreeButtonPress EventType = 6
	// TripleButtonPress alias for GDK_3BUTTON_PRESS, added in 3.6.
	TripleButtonPress EventType = 6
	// ButtonRelease: mouse button has been released.
	ButtonRelease EventType = 7
	// KeyPress: key has been pressed.
	KeyPress EventType = 8
	// KeyRelease: key has been released.
	KeyRelease EventType = 9
	// EnterNotify: the pointer has entered the window.
	EnterNotify EventType = 10
	// LeaveNotify: the pointer has left the window.
	LeaveNotify EventType = 11
	// FocusChange: the keyboard focus has entered or left the window.
	FocusChange EventType = 12
	// Configure: the size, position or stacking order of the window has
	// changed. Note that GTK+ discards these events for GDK_WINDOW_CHILD
	// windows.
	Configure EventType = 13
	// Map: the window has been mapped.
	Map EventType = 14
	// Unmap: the window has been unmapped.
	Unmap EventType = 15
	// PropertyNotify: property on the window has been changed or deleted.
	PropertyNotify EventType = 16
	// SelectionClear: the application has lost ownership of a selection.
	SelectionClear EventType = 17
	// SelectionRequest: another application has requested a selection.
	SelectionRequest EventType = 18
	// SelectionNotify: selection has been received.
	SelectionNotify EventType = 19
	// ProximityIn: input device has moved into contact with a sensing surface
	// (e.g. a touchscreen or graphics tablet).
	ProximityIn EventType = 20
	// ProximityOut: input device has moved out of contact with a sensing
	// surface.
	ProximityOut EventType = 21
	// DragEnter: the mouse has entered the window while a drag is in progress.
	DragEnter EventType = 22
	// DragLeave: the mouse has left the window while a drag is in progress.
	DragLeave EventType = 23
	// DragMotion: the mouse has moved in the window while a drag is in
	// progress.
	DragMotion EventType = 24
	// DragStatus: the status of the drag operation initiated by the window has
	// changed.
	DragStatus EventType = 25
	// DropStart: drop operation onto the window has started.
	DropStart EventType = 26
	// DropFinished: the drop operation initiated by the window has completed.
	DropFinished EventType = 27
	// ClientEvent: message has been received from another application.
	ClientEvent EventType = 28
	// VisibilityNotify: the window visibility status has changed.
	VisibilityNotify EventType = 29
	// Scroll: the scroll wheel was turned
	Scroll EventType = 31
	// WindowState: the state of a window has changed. See WindowState for the
	// possible window states
	WindowState EventType = 32
	// Setting has been modified.
	Setting EventType = 33
	// OwnerChange: the owner of a selection has changed. This event type was
	// added in 2.6
	OwnerChange EventType = 34
	// GrabBroken: pointer or keyboard grab was broken. This event type was
	// added in 2.8.
	GrabBroken EventType = 35
	// Damage: the content of the window has been changed. This event type was
	// added in 2.14.
	Damage EventType = 36
	// TouchBegin: new touch event sequence has just started. This event type
	// was added in 3.4.
	TouchBegin EventType = 37
	// TouchUpdate: touch event sequence has been updated. This event type was
	// added in 3.4.
	TouchUpdate EventType = 38
	// TouchEnd: touch event sequence has finished. This event type was added in
	// 3.4.
	TouchEnd EventType = 39
	// TouchCancel: touch event sequence has been canceled. This event type was
	// added in 3.4.
	TouchCancel EventType = 40
	// TouchpadSwipe: touchpad swipe gesture event, the current state is
	// determined by its phase field. This event type was added in 3.18.
	TouchpadSwipe EventType = 41
	// TouchpadPinch: touchpad pinch gesture event, the current state is
	// determined by its phase field. This event type was added in 3.18.
	TouchpadPinch EventType = 42
	// PadButtonPress: tablet pad button press event. This event type was added
	// in 3.22.
	PadButtonPress EventType = 43
	// PadButtonRelease: tablet pad button release event. This event type was
	// added in 3.22.
	PadButtonRelease EventType = 44
	// PadRing: tablet pad axis event from a "ring". This event type was added
	// in 3.22.
	PadRing EventType = 45
	// PadStrip: tablet pad axis event from a "strip". This event type was added
	// in 3.22.
	PadStrip EventType = 46
	// PadGroupMode: tablet pad group mode change. This event type was added in
	// 3.22.
	PadGroupMode EventType = 47
	// EventLast marks the end of the GdkEventType enumeration. Added in 2.18
	EventLast EventType = 48
)

func marshalEventType(p uintptr) (interface{}, error) {
	return EventType(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// FilterReturn specifies the result of applying a FilterFunc to a native event.
type FilterReturn int

const (
	// Continue: event not handled, continue processing.
	FilterContinue FilterReturn = iota
	// Translate: native event translated into a GDK event and stored in the
	// `event` structure that was passed in.
	FilterTranslate
	// Remove: event handled, terminate processing.
	FilterRemove
)

func marshalFilterReturn(p uintptr) (interface{}, error) {
	return FilterReturn(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// NotifyType specifies the kind of crossing for EventCrossing.
//
// See the X11 protocol specification of LeaveNotify for full details of
// crossing event generation.
type NotifyType int

const (
	// Ancestor: the window is entered from an ancestor or left towards an
	// ancestor.
	NotifyAncestor NotifyType = iota
	// Virtual: the pointer moves between an ancestor and an inferior of the
	// window.
	NotifyVirtual
	// Inferior: the window is entered from an inferior or left towards an
	// inferior.
	NotifyInferior
	// Nonlinear: the window is entered from or left towards a window which is
	// neither an ancestor nor an inferior.
	NotifyNonlinear
	// NonlinearVirtual: the pointer moves between two windows which are not
	// ancestors of each other and the window is part of the ancestor chain
	// between one of these windows and their least common ancestor.
	NotifyNonlinearVirtual
	// Unknown type of enter/leave event occurred.
	NotifyUnknown
)

func marshalNotifyType(p uintptr) (interface{}, error) {
	return NotifyType(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// OwnerChange specifies why a selection ownership was changed.
type OwnerChange int

const (
	// NewOwner: some other app claimed the ownership
	OwnerChangeNewOwner OwnerChange = iota
	// Destroy: the window was destroyed
	OwnerChangeDestroy
	// Close: the client was closed
	OwnerChangeClose
)

func marshalOwnerChange(p uintptr) (interface{}, error) {
	return OwnerChange(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// PropertyState specifies the type of a property change for a EventProperty.
type PropertyState int

const (
	// NewValue: the property value was changed.
	PropertyNewValue PropertyState = iota
	// Delete: the property was deleted.
	PropertyDelete
)

func marshalPropertyState(p uintptr) (interface{}, error) {
	return PropertyState(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// ScrollDirection specifies the direction for EventScroll.
type ScrollDirection int

const (
	// Up: the window is scrolled up.
	ScrollUp ScrollDirection = iota
	// Down: the window is scrolled down.
	ScrollDown
	// Left: the window is scrolled to the left.
	ScrollLeft
	// Right: the window is scrolled to the right.
	ScrollRight
	// Smooth: the scrolling is determined by the delta values in EventScroll.
	// See gdk_event_get_scroll_deltas(). Since: 3.4
	ScrollSmooth
)

func marshalScrollDirection(p uintptr) (interface{}, error) {
	return ScrollDirection(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// SettingAction specifies the kind of modification applied to a setting in a
// EventSetting.
type SettingAction int

const (
	// New: setting was added.
	NewSettingAction SettingAction = iota
	// Changed: setting was changed.
	SettingActionChanged
	// Deleted: setting was deleted.
	SettingActionDeleted
)

func marshalSettingAction(p uintptr) (interface{}, error) {
	return SettingAction(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// TouchpadGesturePhase specifies the current state of a touchpad gesture. All
// gestures are guaranteed to begin with an event with phase
// GDK_TOUCHPAD_GESTURE_PHASE_BEGIN, followed by 0 or several events with phase
// GDK_TOUCHPAD_GESTURE_PHASE_UPDATE.
//
// A finished gesture may have 2 possible outcomes, an event with phase
// GDK_TOUCHPAD_GESTURE_PHASE_END will be emitted when the gesture is considered
// successful, this should be used as the hint to perform any permanent changes.
//
// Cancelled gestures may be so for a variety of reasons, due to hardware or the
// compositor, or due to the gesture recognition layers hinting the gesture did
// not finish resolutely (eg. a 3rd finger being added during a pinch gesture).
// In these cases, the last event will report the phase
// GDK_TOUCHPAD_GESTURE_PHASE_CANCEL, this should be used as a hint to undo any
// visible/permanent changes that were done throughout the progress of the
// gesture.
//
// See also EventTouchpadSwipe and EventTouchpadPinch.
type TouchpadGesturePhase int

const (
	// Begin: the gesture has begun.
	TouchpadGesturePhaseBegin TouchpadGesturePhase = iota
	// Update: the gesture has been updated.
	TouchpadGesturePhaseUpdate
	// End: the gesture was finished, changes should be permanently applied.
	TouchpadGesturePhaseEnd
	// Cancel: the gesture was cancelled, all changes should be undone.
	TouchpadGesturePhaseCancel
)

func marshalTouchpadGesturePhase(p uintptr) (interface{}, error) {
	return TouchpadGesturePhase(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// VisibilityState specifies the visiblity status of a window for a
// EventVisibility.
type VisibilityState int

const (
	// Unobscured: the window is completely visible.
	VisibilityUnobscured VisibilityState = iota
	// Partial: the window is partially visible.
	VisibilityPartial
	// FullyObscured: the window is not visible at all.
	VisibilityFullyObscured
)

func marshalVisibilityState(p uintptr) (interface{}, error) {
	return VisibilityState(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// WindowState specifies the state of a toplevel window.
type WindowState int

const (
	// WindowStateWithdrawn: the window is not shown.
	WindowStateWithdrawn WindowState = 0b1
	// WindowStateIconified: the window is minimized.
	WindowStateIconified WindowState = 0b10
	// WindowStateMaximized: the window is maximized.
	WindowStateMaximized WindowState = 0b100
	// WindowStateSticky: the window is sticky.
	WindowStateSticky WindowState = 0b1000
	// WindowStateFullscreen: the window is maximized without decorations.
	WindowStateFullscreen WindowState = 0b10000
	// WindowStateAbove: the window is kept above other windows.
	WindowStateAbove WindowState = 0b100000
	// WindowStateBelow: the window is kept below other windows.
	WindowStateBelow WindowState = 0b1000000
	// WindowStateFocused: the window is presented as focused (with active
	// decorations).
	WindowStateFocused WindowState = 0b10000000
	// WindowStateTiled: the window is in a tiled state, Since 3.10. Since
	// 3.22.23, this is deprecated in favor of per-edge information.
	WindowStateTiled WindowState = 0b100000000
	// WindowStateTopTiled: whether the top edge is tiled, Since 3.22.23
	WindowStateTopTiled WindowState = 0b1000000000
	// WindowStateTopResizable: whether the top edge is resizable, Since 3.22.23
	WindowStateTopResizable WindowState = 0b10000000000
	// WindowStateRightTiled: whether the right edge is tiled, Since 3.22.23
	WindowStateRightTiled WindowState = 0b100000000000
	// WindowStateRightResizable: whether the right edge is resizable, Since
	// 3.22.23
	WindowStateRightResizable WindowState = 0b1000000000000
	// WindowStateBottomTiled: whether the bottom edge is tiled, Since 3.22.23
	WindowStateBottomTiled WindowState = 0b10000000000000
	// WindowStateBottomResizable: whether the bottom edge is resizable, Since
	// 3.22.23
	WindowStateBottomResizable WindowState = 0b100000000000000
	// WindowStateLeftTiled: whether the left edge is tiled, Since 3.22.23
	WindowStateLeftTiled WindowState = 0b1000000000000000
	// WindowStateLeftResizable: whether the left edge is resizable, Since
	// 3.22.23
	WindowStateLeftResizable WindowState = 0b10000000000000000
)

func marshalWindowState(p uintptr) (interface{}, error) {
	return WindowState(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// EventsPending checks if any events are ready to be processed for any display.
func EventsPending() bool {
	var _cret C.gboolean // in

	_cret = C.gdk_events_pending()

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// GetShowEvents gets whether event debugging output is enabled.
func GetShowEvents() bool {
	var _cret C.gboolean // in

	_cret = C.gdk_get_show_events()

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetShowEvents sets whether a trace of received events is output. Note that
// GTK+ must be compiled with debugging (that is, configured using the
// `--enable-debug` option) to use this option.
func SetShowEvents(showEvents bool) {
	var _arg1 C.gboolean // out

	if showEvents {
		_arg1 = C.TRUE
	}

	C.gdk_set_show_events(_arg1)
}

// SettingGet obtains a desktop-wide setting, such as the double-click time, for
// the default screen. See gdk_screen_get_setting().
func SettingGet(name string, value externglib.Value) bool {
	var _arg1 *C.gchar   // out
	var _arg2 *C.GValue  // out
	var _cret C.gboolean // in

	_arg1 = (*C.gchar)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.GValue)(unsafe.Pointer(&value.GValue))

	_cret = C.gdk_setting_get(_arg1, _arg2)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// EventAny contains the fields which are common to all event structs. Any event
// pointer can safely be cast to a pointer to a EventAny to access these fields.
type EventAny struct {
	native C.GdkEventAny
}

// WrapEventAny wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapEventAny(ptr unsafe.Pointer) *EventAny {
	return (*EventAny)(ptr)
}

// Native returns the underlying C source pointer.
func (e *EventAny) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

// Type: the type of the event.
func (e *EventAny) Type() EventType {
	var v EventType // out
	v = EventType(e._type)
	return v
}

// Window: the window which received the event.
func (e *EventAny) Window() Window {
	var v Window // out
	v = gextras.CastObject(externglib.Take(unsafe.Pointer(e.window))).(Window)
	return v
}

// SendEvent: true if the event was sent explicitly.
func (e *EventAny) SendEvent() int8 {
	var v int8 // out
	v = int8(e.send_event)
	return v
}

// EventButton: used for button press and button release events. The @type field
// will be one of GDK_BUTTON_PRESS, GDK_2BUTTON_PRESS, GDK_3BUTTON_PRESS or
// GDK_BUTTON_RELEASE,
//
// Double and triple-clicks result in a sequence of events being received. For
// double-clicks the order of events will be:
//
// - GDK_BUTTON_PRESS - GDK_BUTTON_RELEASE - GDK_BUTTON_PRESS -
// GDK_2BUTTON_PRESS - GDK_BUTTON_RELEASE
//
// Note that the first click is received just like a normal button press, while
// the second click results in a GDK_2BUTTON_PRESS being received just after the
// GDK_BUTTON_PRESS.
//
// Triple-clicks are very similar to double-clicks, except that
// GDK_3BUTTON_PRESS is inserted after the third click. The order of the events
// is:
//
// - GDK_BUTTON_PRESS - GDK_BUTTON_RELEASE - GDK_BUTTON_PRESS -
// GDK_2BUTTON_PRESS - GDK_BUTTON_RELEASE - GDK_BUTTON_PRESS - GDK_3BUTTON_PRESS
// - GDK_BUTTON_RELEASE
//
// For a double click to occur, the second button press must occur within 1/4 of
// a second of the first. For a triple click to occur, the third button press
// must also occur within 1/2 second of the first button press.
type EventButton struct {
	native C.GdkEventButton
}

// WrapEventButton wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapEventButton(ptr unsafe.Pointer) *EventButton {
	return (*EventButton)(ptr)
}

// Native returns the underlying C source pointer.
func (e *EventButton) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

// Type: the type of the event (GDK_BUTTON_PRESS, GDK_2BUTTON_PRESS,
// GDK_3BUTTON_PRESS or GDK_BUTTON_RELEASE).
func (e *EventButton) Type() EventType {
	var v EventType // out
	v = EventType(e._type)
	return v
}

// Window: the window which received the event.
func (e *EventButton) Window() Window {
	var v Window // out
	v = gextras.CastObject(externglib.Take(unsafe.Pointer(e.window))).(Window)
	return v
}

// SendEvent: true if the event was sent explicitly.
func (e *EventButton) SendEvent() int8 {
	var v int8 // out
	v = int8(e.send_event)
	return v
}

// Time: the time of the event in milliseconds.
func (e *EventButton) Time() uint32 {
	var v uint32 // out
	v = uint32(e.time)
	return v
}

// X: the x coordinate of the pointer relative to the window.
func (e *EventButton) X() float64 {
	var v float64 // out
	v = float64(e.x)
	return v
}

// Y: the y coordinate of the pointer relative to the window.
func (e *EventButton) Y() float64 {
	var v float64 // out
	v = float64(e.y)
	return v
}

// Axes: @x, @y translated to the axes of @device, or nil if @device is the
// mouse.
func (e *EventButton) Axes() *float64 {
	var v *float64 // out
	v = (*float64)(unsafe.Pointer(e.axes))
	return v
}

// State: bit-mask representing the state of the modifier keys (e.g. Control,
// Shift and Alt) and the pointer buttons. See ModifierType.
func (e *EventButton) State() ModifierType {
	var v ModifierType // out
	v = ModifierType(e.state)
	return v
}

// Button: the button which was pressed or released, numbered from 1 to 5.
// Normally button 1 is the left mouse button, 2 is the middle button, and 3 is
// the right button. On 2-button mice, the middle button can often be simulated
// by pressing both mouse buttons together.
func (e *EventButton) Button() uint {
	var v uint // out
	v = uint(e.button)
	return v
}

// Device: the master device that the event originated from. Use
// gdk_event_get_source_device() to get the slave device.
func (e *EventButton) Device() Device {
	var v Device // out
	v = gextras.CastObject(externglib.Take(unsafe.Pointer(e.device))).(Device)
	return v
}

// XRoot: the x coordinate of the pointer relative to the root of the screen.
func (e *EventButton) XRoot() float64 {
	var v float64 // out
	v = float64(e.x_root)
	return v
}

// YRoot: the y coordinate of the pointer relative to the root of the screen.
func (e *EventButton) YRoot() float64 {
	var v float64 // out
	v = float64(e.y_root)
	return v
}

// EventConfigure: generated when a window size or position has changed.
type EventConfigure struct {
	native C.GdkEventConfigure
}

// WrapEventConfigure wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapEventConfigure(ptr unsafe.Pointer) *EventConfigure {
	return (*EventConfigure)(ptr)
}

// Native returns the underlying C source pointer.
func (e *EventConfigure) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

// Type: the type of the event (GDK_CONFIGURE).
func (e *EventConfigure) Type() EventType {
	var v EventType // out
	v = EventType(e._type)
	return v
}

// Window: the window which received the event.
func (e *EventConfigure) Window() Window {
	var v Window // out
	v = gextras.CastObject(externglib.Take(unsafe.Pointer(e.window))).(Window)
	return v
}

// SendEvent: true if the event was sent explicitly.
func (e *EventConfigure) SendEvent() int8 {
	var v int8 // out
	v = int8(e.send_event)
	return v
}

// X: the new x coordinate of the window, relative to its parent.
func (e *EventConfigure) X() int {
	var v int // out
	v = int(e.x)
	return v
}

// Y: the new y coordinate of the window, relative to its parent.
func (e *EventConfigure) Y() int {
	var v int // out
	v = int(e.y)
	return v
}

// Width: the new width of the window.
func (e *EventConfigure) Width() int {
	var v int // out
	v = int(e.width)
	return v
}

// Height: the new height of the window.
func (e *EventConfigure) Height() int {
	var v int // out
	v = int(e.height)
	return v
}

// EventCrossing: generated when the pointer enters or leaves a window.
type EventCrossing struct {
	native C.GdkEventCrossing
}

// WrapEventCrossing wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapEventCrossing(ptr unsafe.Pointer) *EventCrossing {
	return (*EventCrossing)(ptr)
}

// Native returns the underlying C source pointer.
func (e *EventCrossing) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

// Type: the type of the event (GDK_ENTER_NOTIFY or GDK_LEAVE_NOTIFY).
func (e *EventCrossing) Type() EventType {
	var v EventType // out
	v = EventType(e._type)
	return v
}

// Window: the window which received the event.
func (e *EventCrossing) Window() Window {
	var v Window // out
	v = gextras.CastObject(externglib.Take(unsafe.Pointer(e.window))).(Window)
	return v
}

// SendEvent: true if the event was sent explicitly.
func (e *EventCrossing) SendEvent() int8 {
	var v int8 // out
	v = int8(e.send_event)
	return v
}

// Subwindow: the window that was entered or left.
func (e *EventCrossing) Subwindow() Window {
	var v Window // out
	v = gextras.CastObject(externglib.Take(unsafe.Pointer(e.subwindow))).(Window)
	return v
}

// Time: the time of the event in milliseconds.
func (e *EventCrossing) Time() uint32 {
	var v uint32 // out
	v = uint32(e.time)
	return v
}

// X: the x coordinate of the pointer relative to the window.
func (e *EventCrossing) X() float64 {
	var v float64 // out
	v = float64(e.x)
	return v
}

// Y: the y coordinate of the pointer relative to the window.
func (e *EventCrossing) Y() float64 {
	var v float64 // out
	v = float64(e.y)
	return v
}

// XRoot: the x coordinate of the pointer relative to the root of the screen.
func (e *EventCrossing) XRoot() float64 {
	var v float64 // out
	v = float64(e.x_root)
	return v
}

// YRoot: the y coordinate of the pointer relative to the root of the screen.
func (e *EventCrossing) YRoot() float64 {
	var v float64 // out
	v = float64(e.y_root)
	return v
}

// Mode: the crossing mode (GDK_CROSSING_NORMAL, GDK_CROSSING_GRAB,
// GDK_CROSSING_UNGRAB, GDK_CROSSING_GTK_GRAB, GDK_CROSSING_GTK_UNGRAB or
// GDK_CROSSING_STATE_CHANGED). GDK_CROSSING_GTK_GRAB, GDK_CROSSING_GTK_UNGRAB,
// and GDK_CROSSING_STATE_CHANGED were added in 2.14 and are always synthesized,
// never native.
func (e *EventCrossing) Mode() CrossingMode {
	var v CrossingMode // out
	v = CrossingMode(e.mode)
	return v
}

// Detail: the kind of crossing that happened (GDK_NOTIFY_INFERIOR,
// GDK_NOTIFY_ANCESTOR, GDK_NOTIFY_VIRTUAL, GDK_NOTIFY_NONLINEAR or
// GDK_NOTIFY_NONLINEAR_VIRTUAL).
func (e *EventCrossing) Detail() NotifyType {
	var v NotifyType // out
	v = NotifyType(e.detail)
	return v
}

// Focus: true if @window is the focus window or an inferior.
func (e *EventCrossing) Focus() bool {
	var v bool // out
	if e.focus != 0 {
		v = true
	}
	return v
}

// State: bit-mask representing the state of the modifier keys (e.g. Control,
// Shift and Alt) and the pointer buttons. See ModifierType.
func (e *EventCrossing) State() ModifierType {
	var v ModifierType // out
	v = ModifierType(e.state)
	return v
}

// EventDND: generated during DND operations.
type EventDND struct {
	native C.GdkEventDND
}

// WrapEventDND wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapEventDND(ptr unsafe.Pointer) *EventDND {
	return (*EventDND)(ptr)
}

// Native returns the underlying C source pointer.
func (e *EventDND) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

// Type: the type of the event (GDK_DRAG_ENTER, GDK_DRAG_LEAVE, GDK_DRAG_MOTION,
// GDK_DRAG_STATUS, GDK_DROP_START or GDK_DROP_FINISHED).
func (e *EventDND) Type() EventType {
	var v EventType // out
	v = EventType(e._type)
	return v
}

// Window: the window which received the event.
func (e *EventDND) Window() Window {
	var v Window // out
	v = gextras.CastObject(externglib.Take(unsafe.Pointer(e.window))).(Window)
	return v
}

// SendEvent: true if the event was sent explicitly.
func (e *EventDND) SendEvent() int8 {
	var v int8 // out
	v = int8(e.send_event)
	return v
}

// Context: the DragContext for the current DND operation.
func (e *EventDND) Context() DragContext {
	var v DragContext // out
	v = gextras.CastObject(externglib.Take(unsafe.Pointer(e.context))).(DragContext)
	return v
}

// Time: the time of the event in milliseconds.
func (e *EventDND) Time() uint32 {
	var v uint32 // out
	v = uint32(e.time)
	return v
}

// XRoot: the x coordinate of the pointer relative to the root of the screen,
// only set for GDK_DRAG_MOTION and GDK_DROP_START.
func (e *EventDND) XRoot() int16 {
	var v int16 // out
	v = int16(e.x_root)
	return v
}

// YRoot: the y coordinate of the pointer relative to the root of the screen,
// only set for GDK_DRAG_MOTION and GDK_DROP_START.
func (e *EventDND) YRoot() int16 {
	var v int16 // out
	v = int16(e.y_root)
	return v
}

// EventExpose: generated when all or part of a window becomes visible and needs
// to be redrawn.
type EventExpose struct {
	native C.GdkEventExpose
}

// WrapEventExpose wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapEventExpose(ptr unsafe.Pointer) *EventExpose {
	return (*EventExpose)(ptr)
}

// Native returns the underlying C source pointer.
func (e *EventExpose) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

// Type: the type of the event (GDK_EXPOSE or GDK_DAMAGE).
func (e *EventExpose) Type() EventType {
	var v EventType // out
	v = EventType(e._type)
	return v
}

// Window: the window which received the event.
func (e *EventExpose) Window() Window {
	var v Window // out
	v = gextras.CastObject(externglib.Take(unsafe.Pointer(e.window))).(Window)
	return v
}

// SendEvent: true if the event was sent explicitly.
func (e *EventExpose) SendEvent() int8 {
	var v int8 // out
	v = int8(e.send_event)
	return v
}

// Area: bounding box of @region.
func (e *EventExpose) Area() Rectangle {
	var v Rectangle // out
	{
		var refTmpIn *C.GdkRectangle
		var refTmpOut *Rectangle

		in0 := &e.area
		refTmpIn = in0

		refTmpOut = (*Rectangle)(unsafe.Pointer(refTmpIn))

		v = *refTmpOut
	}
	return v
}

// Region: the region that needs to be redrawn.
func (e *EventExpose) Region() *cairo.Region {
	var v *cairo.Region // out
	v = (*cairo.Region)(unsafe.Pointer(e.region))
	return v
}

// Count: the number of contiguous GDK_EXPOSE events following this one. The
// only use for this is “exposure compression”, i.e. handling all contiguous
// GDK_EXPOSE events in one go, though GDK performs some exposure compression so
// this is not normally needed.
func (e *EventExpose) Count() int {
	var v int // out
	v = int(e.count)
	return v
}

// EventFocus describes a change of keyboard focus.
type EventFocus struct {
	native C.GdkEventFocus
}

// WrapEventFocus wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapEventFocus(ptr unsafe.Pointer) *EventFocus {
	return (*EventFocus)(ptr)
}

// Native returns the underlying C source pointer.
func (e *EventFocus) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

// Type: the type of the event (GDK_FOCUS_CHANGE).
func (e *EventFocus) Type() EventType {
	var v EventType // out
	v = EventType(e._type)
	return v
}

// Window: the window which received the event.
func (e *EventFocus) Window() Window {
	var v Window // out
	v = gextras.CastObject(externglib.Take(unsafe.Pointer(e.window))).(Window)
	return v
}

// SendEvent: true if the event was sent explicitly.
func (e *EventFocus) SendEvent() int8 {
	var v int8 // out
	v = int8(e.send_event)
	return v
}

// In: true if the window has gained the keyboard focus, false if it has lost
// the focus.
func (e *EventFocus) In() int16 {
	var v int16 // out
	v = int16(e.in)
	return v
}

// EventGrabBroken: generated when a pointer or keyboard grab is broken. On X11,
// this happens when the grab window becomes unviewable (i.e. it or one of its
// ancestors is unmapped), or if the same application grabs the pointer or
// keyboard again. Note that implicit grabs (which are initiated by button
// presses) can also cause EventGrabBroken events.
type EventGrabBroken struct {
	native C.GdkEventGrabBroken
}

// WrapEventGrabBroken wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapEventGrabBroken(ptr unsafe.Pointer) *EventGrabBroken {
	return (*EventGrabBroken)(ptr)
}

// Native returns the underlying C source pointer.
func (e *EventGrabBroken) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

// Type: the type of the event (GDK_GRAB_BROKEN)
func (e *EventGrabBroken) Type() EventType {
	var v EventType // out
	v = EventType(e._type)
	return v
}

// Window: the window which received the event, i.e. the window that previously
// owned the grab
func (e *EventGrabBroken) Window() Window {
	var v Window // out
	v = gextras.CastObject(externglib.Take(unsafe.Pointer(e.window))).(Window)
	return v
}

// SendEvent: true if the event was sent explicitly.
func (e *EventGrabBroken) SendEvent() int8 {
	var v int8 // out
	v = int8(e.send_event)
	return v
}

// Keyboard: true if a keyboard grab was broken, false if a pointer grab was
// broken
func (e *EventGrabBroken) Keyboard() bool {
	var v bool // out
	if e.keyboard != 0 {
		v = true
	}
	return v
}

// Implicit: true if the broken grab was implicit
func (e *EventGrabBroken) Implicit() bool {
	var v bool // out
	if e.implicit != 0 {
		v = true
	}
	return v
}

// GrabWindow: if this event is caused by another grab in the same application,
// @grab_window contains the new grab window. Otherwise @grab_window is nil.
func (e *EventGrabBroken) GrabWindow() Window {
	var v Window // out
	v = gextras.CastObject(externglib.Take(unsafe.Pointer(e.grab_window))).(Window)
	return v
}

// EventKey describes a key press or key release event.
type EventKey struct {
	native C.GdkEventKey
}

// WrapEventKey wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapEventKey(ptr unsafe.Pointer) *EventKey {
	return (*EventKey)(ptr)
}

// Native returns the underlying C source pointer.
func (e *EventKey) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

// Type: the type of the event (GDK_KEY_PRESS or GDK_KEY_RELEASE).
func (e *EventKey) Type() EventType {
	var v EventType // out
	v = EventType(e._type)
	return v
}

// Window: the window which received the event.
func (e *EventKey) Window() Window {
	var v Window // out
	v = gextras.CastObject(externglib.Take(unsafe.Pointer(e.window))).(Window)
	return v
}

// SendEvent: true if the event was sent explicitly.
func (e *EventKey) SendEvent() int8 {
	var v int8 // out
	v = int8(e.send_event)
	return v
}

// Time: the time of the event in milliseconds.
func (e *EventKey) Time() uint32 {
	var v uint32 // out
	v = uint32(e.time)
	return v
}

// State: bit-mask representing the state of the modifier keys (e.g. Control,
// Shift and Alt) and the pointer buttons. See ModifierType.
func (e *EventKey) State() ModifierType {
	var v ModifierType // out
	v = ModifierType(e.state)
	return v
}

// Keyval: the key that was pressed or released. See the `gdk/gdkkeysyms.h`
// header file for a complete list of GDK key codes.
func (e *EventKey) Keyval() uint {
	var v uint // out
	v = uint(e.keyval)
	return v
}

// Length: the length of @string.
func (e *EventKey) Length() int {
	var v int // out
	v = int(e.length)
	return v
}

// String: string containing an approximation of the text that would result from
// this keypress. The only correct way to handle text input of text is using
// input methods (see IMContext), so this field is deprecated and should never
// be used. (gdk_unicode_to_keyval() provides a non-deprecated way of getting an
// approximate translation for a key.) The string is encoded in the encoding of
// the current locale (Note: this for backwards compatibility: strings in GTK+
// and GDK are typically in UTF-8.) and NUL-terminated. In some cases, the
// translation of the key code will be a single NUL byte, in which case looking
// at @length is necessary to distinguish it from the an empty translation.
func (e *EventKey) String() string {
	var v string // out
	v = C.GoString(e._string)
	return v
}

// HardwareKeycode: the raw code of the key that was pressed or released.
func (e *EventKey) HardwareKeycode() uint16 {
	var v uint16 // out
	v = uint16(e.hardware_keycode)
	return v
}

// Group: the keyboard group.
func (e *EventKey) Group() byte {
	var v byte // out
	v = byte(e.group)
	return v
}

// EventMotion: generated when the pointer moves.
type EventMotion struct {
	native C.GdkEventMotion
}

// WrapEventMotion wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapEventMotion(ptr unsafe.Pointer) *EventMotion {
	return (*EventMotion)(ptr)
}

// Native returns the underlying C source pointer.
func (e *EventMotion) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

// Type: the type of the event.
func (e *EventMotion) Type() EventType {
	var v EventType // out
	v = EventType(e._type)
	return v
}

// Window: the window which received the event.
func (e *EventMotion) Window() Window {
	var v Window // out
	v = gextras.CastObject(externglib.Take(unsafe.Pointer(e.window))).(Window)
	return v
}

// SendEvent: true if the event was sent explicitly.
func (e *EventMotion) SendEvent() int8 {
	var v int8 // out
	v = int8(e.send_event)
	return v
}

// Time: the time of the event in milliseconds.
func (e *EventMotion) Time() uint32 {
	var v uint32 // out
	v = uint32(e.time)
	return v
}

// X: the x coordinate of the pointer relative to the window.
func (e *EventMotion) X() float64 {
	var v float64 // out
	v = float64(e.x)
	return v
}

// Y: the y coordinate of the pointer relative to the window.
func (e *EventMotion) Y() float64 {
	var v float64 // out
	v = float64(e.y)
	return v
}

// Axes: @x, @y translated to the axes of @device, or nil if @device is the
// mouse.
func (e *EventMotion) Axes() *float64 {
	var v *float64 // out
	v = (*float64)(unsafe.Pointer(e.axes))
	return v
}

// State: bit-mask representing the state of the modifier keys (e.g. Control,
// Shift and Alt) and the pointer buttons. See ModifierType.
func (e *EventMotion) State() ModifierType {
	var v ModifierType // out
	v = ModifierType(e.state)
	return v
}

// IsHint: set to 1 if this event is just a hint, see the
// GDK_POINTER_MOTION_HINT_MASK value of EventMask.
func (e *EventMotion) IsHint() int16 {
	var v int16 // out
	v = int16(e.is_hint)
	return v
}

// Device: the master device that the event originated from. Use
// gdk_event_get_source_device() to get the slave device.
func (e *EventMotion) Device() Device {
	var v Device // out
	v = gextras.CastObject(externglib.Take(unsafe.Pointer(e.device))).(Device)
	return v
}

// XRoot: the x coordinate of the pointer relative to the root of the screen.
func (e *EventMotion) XRoot() float64 {
	var v float64 // out
	v = float64(e.x_root)
	return v
}

// YRoot: the y coordinate of the pointer relative to the root of the screen.
func (e *EventMotion) YRoot() float64 {
	var v float64 // out
	v = float64(e.y_root)
	return v
}

// EventOwnerChange: generated when the owner of a selection changes. On X11,
// this information is only available if the X server supports the XFIXES
// extension.
type EventOwnerChange struct {
	native C.GdkEventOwnerChange
}

// WrapEventOwnerChange wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapEventOwnerChange(ptr unsafe.Pointer) *EventOwnerChange {
	return (*EventOwnerChange)(ptr)
}

// Native returns the underlying C source pointer.
func (e *EventOwnerChange) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

// Type: the type of the event (GDK_OWNER_CHANGE).
func (e *EventOwnerChange) Type() EventType {
	var v EventType // out
	v = EventType(e._type)
	return v
}

// Window: the window which received the event
func (e *EventOwnerChange) Window() Window {
	var v Window // out
	v = gextras.CastObject(externglib.Take(unsafe.Pointer(e.window))).(Window)
	return v
}

// SendEvent: true if the event was sent explicitly.
func (e *EventOwnerChange) SendEvent() int8 {
	var v int8 // out
	v = int8(e.send_event)
	return v
}

// Owner: the new owner of the selection, or nil if there is none
func (e *EventOwnerChange) Owner() Window {
	var v Window // out
	v = gextras.CastObject(externglib.Take(unsafe.Pointer(e.owner))).(Window)
	return v
}

// Reason: the reason for the ownership change as a OwnerChange value
func (e *EventOwnerChange) Reason() OwnerChange {
	var v OwnerChange // out
	v = OwnerChange(e.reason)
	return v
}

// Time: the timestamp of the event
func (e *EventOwnerChange) Time() uint32 {
	var v uint32 // out
	v = uint32(e.time)
	return v
}

// SelectionTime: the time at which the selection ownership was taken over
func (e *EventOwnerChange) SelectionTime() uint32 {
	var v uint32 // out
	v = uint32(e.selection_time)
	return v
}

// EventPadAxis: generated during GDK_SOURCE_TABLET_PAD interaction with tactile
// sensors.
type EventPadAxis struct {
	native C.GdkEventPadAxis
}

// WrapEventPadAxis wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapEventPadAxis(ptr unsafe.Pointer) *EventPadAxis {
	return (*EventPadAxis)(ptr)
}

// Native returns the underlying C source pointer.
func (e *EventPadAxis) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

// Type: the type of the event (GDK_PAD_RING or GDK_PAD_STRIP).
func (e *EventPadAxis) Type() EventType {
	var v EventType // out
	v = EventType(e._type)
	return v
}

// Window: the window which received the event.
func (e *EventPadAxis) Window() Window {
	var v Window // out
	v = gextras.CastObject(externglib.Take(unsafe.Pointer(e.window))).(Window)
	return v
}

// SendEvent: true if the event was sent explicitly.
func (e *EventPadAxis) SendEvent() int8 {
	var v int8 // out
	v = int8(e.send_event)
	return v
}

// Time: the time of the event in milliseconds.
func (e *EventPadAxis) Time() uint32 {
	var v uint32 // out
	v = uint32(e.time)
	return v
}

// Group: the pad group the ring/strip belongs to. A GDK_SOURCE_TABLET_PAD
// device may have one or more groups containing a set of buttons/rings/strips
// each.
func (e *EventPadAxis) Group() uint {
	var v uint // out
	v = uint(e.group)
	return v
}

// Index: number of strip/ring that was interacted. This number is 0-indexed.
func (e *EventPadAxis) Index() uint {
	var v uint // out
	v = uint(e.index)
	return v
}

// Mode: the current mode of @group. Different groups in a GDK_SOURCE_TABLET_PAD
// device may have different current modes.
func (e *EventPadAxis) Mode() uint {
	var v uint // out
	v = uint(e.mode)
	return v
}

// Value: the current value for the given axis.
func (e *EventPadAxis) Value() float64 {
	var v float64 // out
	v = float64(e.value)
	return v
}

// EventPadButton: generated during GDK_SOURCE_TABLET_PAD button presses and
// releases.
type EventPadButton struct {
	native C.GdkEventPadButton
}

// WrapEventPadButton wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapEventPadButton(ptr unsafe.Pointer) *EventPadButton {
	return (*EventPadButton)(ptr)
}

// Native returns the underlying C source pointer.
func (e *EventPadButton) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

// Type: the type of the event (GDK_PAD_BUTTON_PRESS or GDK_PAD_BUTTON_RELEASE).
func (e *EventPadButton) Type() EventType {
	var v EventType // out
	v = EventType(e._type)
	return v
}

// Window: the window which received the event.
func (e *EventPadButton) Window() Window {
	var v Window // out
	v = gextras.CastObject(externglib.Take(unsafe.Pointer(e.window))).(Window)
	return v
}

// SendEvent: true if the event was sent explicitly.
func (e *EventPadButton) SendEvent() int8 {
	var v int8 // out
	v = int8(e.send_event)
	return v
}

// Time: the time of the event in milliseconds.
func (e *EventPadButton) Time() uint32 {
	var v uint32 // out
	v = uint32(e.time)
	return v
}

// Group: the pad group the button belongs to. A GDK_SOURCE_TABLET_PAD device
// may have one or more groups containing a set of buttons/rings/strips each.
func (e *EventPadButton) Group() uint {
	var v uint // out
	v = uint(e.group)
	return v
}

// Button: the pad button that was pressed.
func (e *EventPadButton) Button() uint {
	var v uint // out
	v = uint(e.button)
	return v
}

// Mode: the current mode of @group. Different groups in a GDK_SOURCE_TABLET_PAD
// device may have different current modes.
func (e *EventPadButton) Mode() uint {
	var v uint // out
	v = uint(e.mode)
	return v
}

// EventPadGroupMode: generated during GDK_SOURCE_TABLET_PAD mode switches in a
// group.
type EventPadGroupMode struct {
	native C.GdkEventPadGroupMode
}

// WrapEventPadGroupMode wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapEventPadGroupMode(ptr unsafe.Pointer) *EventPadGroupMode {
	return (*EventPadGroupMode)(ptr)
}

// Native returns the underlying C source pointer.
func (e *EventPadGroupMode) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

// Type: the type of the event (GDK_PAD_GROUP_MODE).
func (e *EventPadGroupMode) Type() EventType {
	var v EventType // out
	v = EventType(e._type)
	return v
}

// Window: the window which received the event.
func (e *EventPadGroupMode) Window() Window {
	var v Window // out
	v = gextras.CastObject(externglib.Take(unsafe.Pointer(e.window))).(Window)
	return v
}

// SendEvent: true if the event was sent explicitly.
func (e *EventPadGroupMode) SendEvent() int8 {
	var v int8 // out
	v = int8(e.send_event)
	return v
}

// Time: the time of the event in milliseconds.
func (e *EventPadGroupMode) Time() uint32 {
	var v uint32 // out
	v = uint32(e.time)
	return v
}

// Group: the pad group that is switching mode. A GDK_SOURCE_TABLET_PAD device
// may have one or more groups containing a set of buttons/rings/strips each.
func (e *EventPadGroupMode) Group() uint {
	var v uint // out
	v = uint(e.group)
	return v
}

// Mode: the new mode of @group. Different groups in a GDK_SOURCE_TABLET_PAD
// device may have different current modes.
func (e *EventPadGroupMode) Mode() uint {
	var v uint // out
	v = uint(e.mode)
	return v
}

// EventProperty describes a property change on a window.
type EventProperty struct {
	native C.GdkEventProperty
}

// WrapEventProperty wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapEventProperty(ptr unsafe.Pointer) *EventProperty {
	return (*EventProperty)(ptr)
}

// Native returns the underlying C source pointer.
func (e *EventProperty) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

// Type: the type of the event (GDK_PROPERTY_NOTIFY).
func (e *EventProperty) Type() EventType {
	var v EventType // out
	v = EventType(e._type)
	return v
}

// Window: the window which received the event.
func (e *EventProperty) Window() Window {
	var v Window // out
	v = gextras.CastObject(externglib.Take(unsafe.Pointer(e.window))).(Window)
	return v
}

// SendEvent: true if the event was sent explicitly.
func (e *EventProperty) SendEvent() int8 {
	var v int8 // out
	v = int8(e.send_event)
	return v
}

// Time: the time of the event in milliseconds.
func (e *EventProperty) Time() uint32 {
	var v uint32 // out
	v = uint32(e.time)
	return v
}

// State: whether the property was changed (GDK_PROPERTY_NEW_VALUE) or deleted
// (GDK_PROPERTY_DELETE).
func (e *EventProperty) State() PropertyState {
	var v PropertyState // out
	v = PropertyState(e.state)
	return v
}

// EventProximity: proximity events are generated when using GDK’s wrapper for
// the XInput extension. The XInput extension is an add-on for standard X that
// allows you to use nonstandard devices such as graphics tablets. A proximity
// event indicates that the stylus has moved in or out of contact with the
// tablet, or perhaps that the user’s finger has moved in or out of contact with
// a touch screen.
//
// This event type will be used pretty rarely. It only is important for XInput
// aware programs that are drawing their own cursor.
type EventProximity struct {
	native C.GdkEventProximity
}

// WrapEventProximity wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapEventProximity(ptr unsafe.Pointer) *EventProximity {
	return (*EventProximity)(ptr)
}

// Native returns the underlying C source pointer.
func (e *EventProximity) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

// Type: the type of the event (GDK_PROXIMITY_IN or GDK_PROXIMITY_OUT).
func (e *EventProximity) Type() EventType {
	var v EventType // out
	v = EventType(e._type)
	return v
}

// Window: the window which received the event.
func (e *EventProximity) Window() Window {
	var v Window // out
	v = gextras.CastObject(externglib.Take(unsafe.Pointer(e.window))).(Window)
	return v
}

// SendEvent: true if the event was sent explicitly.
func (e *EventProximity) SendEvent() int8 {
	var v int8 // out
	v = int8(e.send_event)
	return v
}

// Time: the time of the event in milliseconds.
func (e *EventProximity) Time() uint32 {
	var v uint32 // out
	v = uint32(e.time)
	return v
}

// Device: the master device that the event originated from. Use
// gdk_event_get_source_device() to get the slave device.
func (e *EventProximity) Device() Device {
	var v Device // out
	v = gextras.CastObject(externglib.Take(unsafe.Pointer(e.device))).(Device)
	return v
}

// EventScroll: generated from button presses for the buttons 4 to 7. Wheel mice
// are usually configured to generate button press events for buttons 4 and 5
// when the wheel is turned.
//
// Some GDK backends can also generate “smooth” scroll events, which can be
// recognized by the GDK_SCROLL_SMOOTH scroll direction. For these, the scroll
// deltas can be obtained with gdk_event_get_scroll_deltas().
type EventScroll struct {
	native C.GdkEventScroll
}

// WrapEventScroll wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapEventScroll(ptr unsafe.Pointer) *EventScroll {
	return (*EventScroll)(ptr)
}

// Native returns the underlying C source pointer.
func (e *EventScroll) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

// Type: the type of the event (GDK_SCROLL).
func (e *EventScroll) Type() EventType {
	var v EventType // out
	v = EventType(e._type)
	return v
}

// Window: the window which received the event.
func (e *EventScroll) Window() Window {
	var v Window // out
	v = gextras.CastObject(externglib.Take(unsafe.Pointer(e.window))).(Window)
	return v
}

// SendEvent: true if the event was sent explicitly.
func (e *EventScroll) SendEvent() int8 {
	var v int8 // out
	v = int8(e.send_event)
	return v
}

// Time: the time of the event in milliseconds.
func (e *EventScroll) Time() uint32 {
	var v uint32 // out
	v = uint32(e.time)
	return v
}

// X: the x coordinate of the pointer relative to the window.
func (e *EventScroll) X() float64 {
	var v float64 // out
	v = float64(e.x)
	return v
}

// Y: the y coordinate of the pointer relative to the window.
func (e *EventScroll) Y() float64 {
	var v float64 // out
	v = float64(e.y)
	return v
}

// State: bit-mask representing the state of the modifier keys (e.g. Control,
// Shift and Alt) and the pointer buttons. See ModifierType.
func (e *EventScroll) State() ModifierType {
	var v ModifierType // out
	v = ModifierType(e.state)
	return v
}

// Direction: the direction to scroll to (one of GDK_SCROLL_UP, GDK_SCROLL_DOWN,
// GDK_SCROLL_LEFT, GDK_SCROLL_RIGHT or GDK_SCROLL_SMOOTH).
func (e *EventScroll) Direction() ScrollDirection {
	var v ScrollDirection // out
	v = ScrollDirection(e.direction)
	return v
}

// Device: the master device that the event originated from. Use
// gdk_event_get_source_device() to get the slave device.
func (e *EventScroll) Device() Device {
	var v Device // out
	v = gextras.CastObject(externglib.Take(unsafe.Pointer(e.device))).(Device)
	return v
}

// XRoot: the x coordinate of the pointer relative to the root of the screen.
func (e *EventScroll) XRoot() float64 {
	var v float64 // out
	v = float64(e.x_root)
	return v
}

// YRoot: the y coordinate of the pointer relative to the root of the screen.
func (e *EventScroll) YRoot() float64 {
	var v float64 // out
	v = float64(e.y_root)
	return v
}

// DeltaX: the x coordinate of the scroll delta
func (e *EventScroll) DeltaX() float64 {
	var v float64 // out
	v = float64(e.delta_x)
	return v
}

// DeltaY: the y coordinate of the scroll delta
func (e *EventScroll) DeltaY() float64 {
	var v float64 // out
	v = float64(e.delta_y)
	return v
}

// EventSelection: generated when a selection is requested or ownership of a
// selection is taken over by another client application.
type EventSelection struct {
	native C.GdkEventSelection
}

// WrapEventSelection wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapEventSelection(ptr unsafe.Pointer) *EventSelection {
	return (*EventSelection)(ptr)
}

// Native returns the underlying C source pointer.
func (e *EventSelection) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

// Type: the type of the event (GDK_SELECTION_CLEAR, GDK_SELECTION_NOTIFY or
// GDK_SELECTION_REQUEST).
func (e *EventSelection) Type() EventType {
	var v EventType // out
	v = EventType(e._type)
	return v
}

// Window: the window which received the event.
func (e *EventSelection) Window() Window {
	var v Window // out
	v = gextras.CastObject(externglib.Take(unsafe.Pointer(e.window))).(Window)
	return v
}

// SendEvent: true if the event was sent explicitly.
func (e *EventSelection) SendEvent() int8 {
	var v int8 // out
	v = int8(e.send_event)
	return v
}

// Time: the time of the event in milliseconds.
func (e *EventSelection) Time() uint32 {
	var v uint32 // out
	v = uint32(e.time)
	return v
}

// Requestor: the window on which to place @property or nil if none.
func (e *EventSelection) Requestor() Window {
	var v Window // out
	v = gextras.CastObject(externglib.Take(unsafe.Pointer(e.requestor))).(Window)
	return v
}

type EventSequence struct {
	native C.GdkEventSequence
}

// WrapEventSequence wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapEventSequence(ptr unsafe.Pointer) *EventSequence {
	return (*EventSequence)(ptr)
}

func marshalEventSequence(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return (*EventSequence)(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (e *EventSequence) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

// EventSetting: generated when a setting is modified.
type EventSetting struct {
	native C.GdkEventSetting
}

// WrapEventSetting wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapEventSetting(ptr unsafe.Pointer) *EventSetting {
	return (*EventSetting)(ptr)
}

// Native returns the underlying C source pointer.
func (e *EventSetting) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

// Type: the type of the event (GDK_SETTING).
func (e *EventSetting) Type() EventType {
	var v EventType // out
	v = EventType(e._type)
	return v
}

// Window: the window which received the event.
func (e *EventSetting) Window() Window {
	var v Window // out
	v = gextras.CastObject(externglib.Take(unsafe.Pointer(e.window))).(Window)
	return v
}

// SendEvent: true if the event was sent explicitly.
func (e *EventSetting) SendEvent() int8 {
	var v int8 // out
	v = int8(e.send_event)
	return v
}

// Action: what happened to the setting (GDK_SETTING_ACTION_NEW,
// GDK_SETTING_ACTION_CHANGED or GDK_SETTING_ACTION_DELETED).
func (e *EventSetting) Action() SettingAction {
	var v SettingAction // out
	v = SettingAction(e.action)
	return v
}

// Name: the name of the setting.
func (e *EventSetting) Name() string {
	var v string // out
	v = C.GoString(e.name)
	return v
}

// EventTouch: used for touch events. @type field will be one of
// GDK_TOUCH_BEGIN, GDK_TOUCH_UPDATE, GDK_TOUCH_END or GDK_TOUCH_CANCEL.
//
// Touch events are grouped into sequences by means of the @sequence field,
// which can also be obtained with gdk_event_get_event_sequence(). Each sequence
// begins with a GDK_TOUCH_BEGIN event, followed by any number of
// GDK_TOUCH_UPDATE events, and ends with a GDK_TOUCH_END (or GDK_TOUCH_CANCEL)
// event. With multitouch devices, there may be several active sequences at the
// same time.
type EventTouch struct {
	native C.GdkEventTouch
}

// WrapEventTouch wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapEventTouch(ptr unsafe.Pointer) *EventTouch {
	return (*EventTouch)(ptr)
}

// Native returns the underlying C source pointer.
func (e *EventTouch) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

// Type: the type of the event (GDK_TOUCH_BEGIN, GDK_TOUCH_UPDATE,
// GDK_TOUCH_END, GDK_TOUCH_CANCEL)
func (e *EventTouch) Type() EventType {
	var v EventType // out
	v = EventType(e._type)
	return v
}

// Window: the window which received the event
func (e *EventTouch) Window() Window {
	var v Window // out
	v = gextras.CastObject(externglib.Take(unsafe.Pointer(e.window))).(Window)
	return v
}

// SendEvent: true if the event was sent explicitly.
func (e *EventTouch) SendEvent() int8 {
	var v int8 // out
	v = int8(e.send_event)
	return v
}

// Time: the time of the event in milliseconds.
func (e *EventTouch) Time() uint32 {
	var v uint32 // out
	v = uint32(e.time)
	return v
}

// X: the x coordinate of the pointer relative to the window
func (e *EventTouch) X() float64 {
	var v float64 // out
	v = float64(e.x)
	return v
}

// Y: the y coordinate of the pointer relative to the window
func (e *EventTouch) Y() float64 {
	var v float64 // out
	v = float64(e.y)
	return v
}

// Axes: @x, @y translated to the axes of @device, or nil if @device is the
// mouse
func (e *EventTouch) Axes() *float64 {
	var v *float64 // out
	v = (*float64)(unsafe.Pointer(e.axes))
	return v
}

// State: bit-mask representing the state of the modifier keys (e.g. Control,
// Shift and Alt) and the pointer buttons. See ModifierType
func (e *EventTouch) State() ModifierType {
	var v ModifierType // out
	v = ModifierType(e.state)
	return v
}

// Sequence: the event sequence that the event belongs to
func (e *EventTouch) Sequence() *EventSequence {
	var v *EventSequence // out
	v = (*EventSequence)(unsafe.Pointer(e.sequence))
	return v
}

// EmulatingPointer: whether the event should be used for emulating pointer
// event
func (e *EventTouch) EmulatingPointer() bool {
	var v bool // out
	if e.emulating_pointer != 0 {
		v = true
	}
	return v
}

// Device: the master device that the event originated from. Use
// gdk_event_get_source_device() to get the slave device.
func (e *EventTouch) Device() Device {
	var v Device // out
	v = gextras.CastObject(externglib.Take(unsafe.Pointer(e.device))).(Device)
	return v
}

// XRoot: the x coordinate of the pointer relative to the root of the screen
func (e *EventTouch) XRoot() float64 {
	var v float64 // out
	v = float64(e.x_root)
	return v
}

// YRoot: the y coordinate of the pointer relative to the root of the screen
func (e *EventTouch) YRoot() float64 {
	var v float64 // out
	v = float64(e.y_root)
	return v
}

// EventTouchpadPinch: generated during touchpad swipe gestures.
type EventTouchpadPinch struct {
	native C.GdkEventTouchpadPinch
}

// WrapEventTouchpadPinch wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapEventTouchpadPinch(ptr unsafe.Pointer) *EventTouchpadPinch {
	return (*EventTouchpadPinch)(ptr)
}

// Native returns the underlying C source pointer.
func (e *EventTouchpadPinch) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

// Type: the type of the event (GDK_TOUCHPAD_PINCH)
func (e *EventTouchpadPinch) Type() EventType {
	var v EventType // out
	v = EventType(e._type)
	return v
}

// Window: the window which received the event
func (e *EventTouchpadPinch) Window() Window {
	var v Window // out
	v = gextras.CastObject(externglib.Take(unsafe.Pointer(e.window))).(Window)
	return v
}

// SendEvent: true if the event was sent explicitly
func (e *EventTouchpadPinch) SendEvent() int8 {
	var v int8 // out
	v = int8(e.send_event)
	return v
}

// Phase: the current phase of the gesture
func (e *EventTouchpadPinch) Phase() int8 {
	var v int8 // out
	v = int8(e.phase)
	return v
}

// NFingers: the number of fingers triggering the pinch
func (e *EventTouchpadPinch) NFingers() int8 {
	var v int8 // out
	v = int8(e.n_fingers)
	return v
}

// Time: the time of the event in milliseconds
func (e *EventTouchpadPinch) Time() uint32 {
	var v uint32 // out
	v = uint32(e.time)
	return v
}

// X: the X coordinate of the pointer
func (e *EventTouchpadPinch) X() float64 {
	var v float64 // out
	v = float64(e.x)
	return v
}

// Y: the Y coordinate of the pointer
func (e *EventTouchpadPinch) Y() float64 {
	var v float64 // out
	v = float64(e.y)
	return v
}

// Dx: movement delta in the X axis of the swipe focal point
func (e *EventTouchpadPinch) Dx() float64 {
	var v float64 // out
	v = float64(e.dx)
	return v
}

// Dy: movement delta in the Y axis of the swipe focal point
func (e *EventTouchpadPinch) Dy() float64 {
	var v float64 // out
	v = float64(e.dy)
	return v
}

// AngleDelta: the angle change in radians, negative angles denote
// counter-clockwise movements
func (e *EventTouchpadPinch) AngleDelta() float64 {
	var v float64 // out
	v = float64(e.angle_delta)
	return v
}

// Scale: the current scale, relative to that at the time of the corresponding
// GDK_TOUCHPAD_GESTURE_PHASE_BEGIN event
func (e *EventTouchpadPinch) Scale() float64 {
	var v float64 // out
	v = float64(e.scale)
	return v
}

// XRoot: the X coordinate of the pointer, relative to the root of the screen.
func (e *EventTouchpadPinch) XRoot() float64 {
	var v float64 // out
	v = float64(e.x_root)
	return v
}

// YRoot: the Y coordinate of the pointer, relative to the root of the screen.
func (e *EventTouchpadPinch) YRoot() float64 {
	var v float64 // out
	v = float64(e.y_root)
	return v
}

// State: bit-mask representing the state of the modifier keys (e.g. Control,
// Shift and Alt) and the pointer buttons. See ModifierType.
func (e *EventTouchpadPinch) State() ModifierType {
	var v ModifierType // out
	v = ModifierType(e.state)
	return v
}

// EventTouchpadSwipe: generated during touchpad swipe gestures.
type EventTouchpadSwipe struct {
	native C.GdkEventTouchpadSwipe
}

// WrapEventTouchpadSwipe wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapEventTouchpadSwipe(ptr unsafe.Pointer) *EventTouchpadSwipe {
	return (*EventTouchpadSwipe)(ptr)
}

// Native returns the underlying C source pointer.
func (e *EventTouchpadSwipe) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

// Type: the type of the event (GDK_TOUCHPAD_SWIPE)
func (e *EventTouchpadSwipe) Type() EventType {
	var v EventType // out
	v = EventType(e._type)
	return v
}

// Window: the window which received the event
func (e *EventTouchpadSwipe) Window() Window {
	var v Window // out
	v = gextras.CastObject(externglib.Take(unsafe.Pointer(e.window))).(Window)
	return v
}

// SendEvent: true if the event was sent explicitly
func (e *EventTouchpadSwipe) SendEvent() int8 {
	var v int8 // out
	v = int8(e.send_event)
	return v
}

// Phase: the current phase of the gesture
func (e *EventTouchpadSwipe) Phase() int8 {
	var v int8 // out
	v = int8(e.phase)
	return v
}

// NFingers: the number of fingers triggering the swipe
func (e *EventTouchpadSwipe) NFingers() int8 {
	var v int8 // out
	v = int8(e.n_fingers)
	return v
}

// Time: the time of the event in milliseconds
func (e *EventTouchpadSwipe) Time() uint32 {
	var v uint32 // out
	v = uint32(e.time)
	return v
}

// X: the X coordinate of the pointer
func (e *EventTouchpadSwipe) X() float64 {
	var v float64 // out
	v = float64(e.x)
	return v
}

// Y: the Y coordinate of the pointer
func (e *EventTouchpadSwipe) Y() float64 {
	var v float64 // out
	v = float64(e.y)
	return v
}

// Dx: movement delta in the X axis of the swipe focal point
func (e *EventTouchpadSwipe) Dx() float64 {
	var v float64 // out
	v = float64(e.dx)
	return v
}

// Dy: movement delta in the Y axis of the swipe focal point
func (e *EventTouchpadSwipe) Dy() float64 {
	var v float64 // out
	v = float64(e.dy)
	return v
}

// XRoot: the X coordinate of the pointer, relative to the root of the screen.
func (e *EventTouchpadSwipe) XRoot() float64 {
	var v float64 // out
	v = float64(e.x_root)
	return v
}

// YRoot: the Y coordinate of the pointer, relative to the root of the screen.
func (e *EventTouchpadSwipe) YRoot() float64 {
	var v float64 // out
	v = float64(e.y_root)
	return v
}

// State: bit-mask representing the state of the modifier keys (e.g. Control,
// Shift and Alt) and the pointer buttons. See ModifierType.
func (e *EventTouchpadSwipe) State() ModifierType {
	var v ModifierType // out
	v = ModifierType(e.state)
	return v
}

// EventVisibility: generated when the window visibility status has changed.
//
// Deprecated: since version 3.12.
type EventVisibility struct {
	native C.GdkEventVisibility
}

// WrapEventVisibility wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapEventVisibility(ptr unsafe.Pointer) *EventVisibility {
	return (*EventVisibility)(ptr)
}

// Native returns the underlying C source pointer.
func (e *EventVisibility) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

// Type: the type of the event (GDK_VISIBILITY_NOTIFY).
func (e *EventVisibility) Type() EventType {
	var v EventType // out
	v = EventType(e._type)
	return v
}

// Window: the window which received the event.
func (e *EventVisibility) Window() Window {
	var v Window // out
	v = gextras.CastObject(externglib.Take(unsafe.Pointer(e.window))).(Window)
	return v
}

// SendEvent: true if the event was sent explicitly.
func (e *EventVisibility) SendEvent() int8 {
	var v int8 // out
	v = int8(e.send_event)
	return v
}

// State: the new visibility state (GDK_VISIBILITY_FULLY_OBSCURED,
// GDK_VISIBILITY_PARTIAL or GDK_VISIBILITY_UNOBSCURED).
func (e *EventVisibility) State() VisibilityState {
	var v VisibilityState // out
	v = VisibilityState(e.state)
	return v
}

// EventWindowState: generated when the state of a toplevel window changes.
type EventWindowState struct {
	native C.GdkEventWindowState
}

// WrapEventWindowState wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapEventWindowState(ptr unsafe.Pointer) *EventWindowState {
	return (*EventWindowState)(ptr)
}

// Native returns the underlying C source pointer.
func (e *EventWindowState) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

// Type: the type of the event (GDK_WINDOW_STATE).
func (e *EventWindowState) Type() EventType {
	var v EventType // out
	v = EventType(e._type)
	return v
}

// Window: the window which received the event.
func (e *EventWindowState) Window() Window {
	var v Window // out
	v = gextras.CastObject(externglib.Take(unsafe.Pointer(e.window))).(Window)
	return v
}

// SendEvent: true if the event was sent explicitly.
func (e *EventWindowState) SendEvent() int8 {
	var v int8 // out
	v = int8(e.send_event)
	return v
}

// ChangedMask: mask specifying what flags have changed.
func (e *EventWindowState) ChangedMask() WindowState {
	var v WindowState // out
	v = WindowState(e.changed_mask)
	return v
}

// NewWindowState: the new window state, a combination of WindowState bits.
func (e *EventWindowState) NewWindowState() WindowState {
	var v WindowState // out
	v = WindowState(e.new_window_state)
	return v
}
