// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/box"
	"github.com/diamondburned/gotk4/internal/gextras"
	"github.com/diamondburned/gotk4/pkg/cairo"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gdk-3.0 gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gdk/gdk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gdk_event_sequence_get_type()), F: marshalEventSequence},
	})
}

// EventFunc specifies the type of function passed to gdk_event_handler_set() to
// handle all GDK events.
type EventFunc func()

//export gotk4_EventFunc
func gotk4_EventFunc(arg0 *C.GdkEvent, arg1 C.gpointer) {
	v := box.Get(uintptr(arg1))
	if v == nil {
		panic(`callback not found`)
	}

	fn := v.(EventFunc)
	fn()
}

// FilterFunc specifies the type of function used to filter native events before
// they are converted to GDK events.
//
// When a filter is called, @event is unpopulated, except for `event->window`.
// The filter may translate the native event to a GDK event and store the result
// in @event, or handle it without translation. If the filter translates the
// event and processing should continue, it should return GDK_FILTER_TRANSLATE.
type FilterFunc func() (filterReturn FilterReturn)

//export gotk4_FilterFunc
func gotk4_FilterFunc(arg0 *C.GdkXEvent, arg1 *C.GdkEvent, arg2 C.gpointer) C.GdkFilterReturn {
	v := box.Get(uintptr(arg2))
	if v == nil {
		panic(`callback not found`)
	}

	fn := v.(FilterFunc)
	filterReturn := fn()

	cret = (C.GdkFilterReturn)(filterReturn)
}

// EventsPending checks if any events are ready to be processed for any display.
func EventsPending() bool {
	var _cret C.gboolean

	cret = C.gdk_events_pending()

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// GetShowEvents gets whether event debugging output is enabled.
func GetShowEvents() bool {
	var _cret C.gboolean

	cret = C.gdk_get_show_events()

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// SetShowEvents sets whether a trace of received events is output. Note that
// GTK+ must be compiled with debugging (that is, configured using the
// `--enable-debug` option) to use this option.
func SetShowEvents(showEvents bool) {
	var _arg1 C.gboolean

	if showEvents {
		_arg1 = C.gboolean(1)
	}

	C.gdk_set_show_events(_arg1)
}

// SettingGet obtains a desktop-wide setting, such as the double-click time, for
// the default screen. See gdk_screen_get_setting().
func SettingGet(name string, value **externglib.Value) bool {
	var _arg1 *C.gchar
	var _arg2 *C.GValue

	_arg1 = (*C.gchar)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.GValue)(value.GValue)

	var _cret C.gboolean

	cret = C.gdk_setting_get(_arg1, _arg2)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// EventAny contains the fields which are common to all event structs. Any event
// pointer can safely be cast to a pointer to a EventAny to access these fields.
type EventAny struct {
	native C.GdkEventAny
}

// WrapEventAny wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapEventAny(ptr unsafe.Pointer) *EventAny {
	if ptr == nil {
		return nil
	}

	return (*EventAny)(ptr)
}

func marshalEventAny(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapEventAny(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (e *EventAny) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

// Type gets the field inside the struct.
func (e *EventAny) Type() EventType {
	var v EventType
	v = EventType(e.native._type)
	return v
}

// Window gets the field inside the struct.
func (e *EventAny) Window() Window {
	var v Window
	v = gextras.CastObject(externglib.Take(unsafe.Pointer(e.native.window.Native()))).(Window)
	return v
}

// SendEvent gets the field inside the struct.
func (e *EventAny) SendEvent() int8 {
	var v int8
	v = (int8)(e.native.send_event)
	return v
}

// EventButton: used for button press and button release events. The @type field
// will be one of GDK_BUTTON_PRESS, GDK_2BUTTON_PRESS, GDK_3BUTTON_PRESS or
// GDK_BUTTON_RELEASE,
//
// Double and triple-clicks result in a sequence of events being received. For
// double-clicks the order of events will be:
//
// - GDK_BUTTON_PRESS - GDK_BUTTON_RELEASE - GDK_BUTTON_PRESS -
// GDK_2BUTTON_PRESS - GDK_BUTTON_RELEASE
//
// Note that the first click is received just like a normal button press, while
// the second click results in a GDK_2BUTTON_PRESS being received just after the
// GDK_BUTTON_PRESS.
//
// Triple-clicks are very similar to double-clicks, except that
// GDK_3BUTTON_PRESS is inserted after the third click. The order of the events
// is:
//
// - GDK_BUTTON_PRESS - GDK_BUTTON_RELEASE - GDK_BUTTON_PRESS -
// GDK_2BUTTON_PRESS - GDK_BUTTON_RELEASE - GDK_BUTTON_PRESS - GDK_3BUTTON_PRESS
// - GDK_BUTTON_RELEASE
//
// For a double click to occur, the second button press must occur within 1/4 of
// a second of the first. For a triple click to occur, the third button press
// must also occur within 1/2 second of the first button press.
type EventButton struct {
	native C.GdkEventButton
}

// WrapEventButton wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapEventButton(ptr unsafe.Pointer) *EventButton {
	if ptr == nil {
		return nil
	}

	return (*EventButton)(ptr)
}

func marshalEventButton(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapEventButton(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (e *EventButton) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

// Type gets the field inside the struct.
func (e *EventButton) Type() EventType {
	var v EventType
	v = EventType(e.native._type)
	return v
}

// Window gets the field inside the struct.
func (e *EventButton) Window() Window {
	var v Window
	v = gextras.CastObject(externglib.Take(unsafe.Pointer(e.native.window.Native()))).(Window)
	return v
}

// SendEvent gets the field inside the struct.
func (e *EventButton) SendEvent() int8 {
	var v int8
	v = (int8)(e.native.send_event)
	return v
}

// Time gets the field inside the struct.
func (e *EventButton) Time() uint32 {
	var v uint32
	v = (uint32)(e.native.time)
	return v
}

// X gets the field inside the struct.
func (e *EventButton) X() float64 {
	var v float64
	v = (float64)(e.native.x)
	return v
}

// Y gets the field inside the struct.
func (e *EventButton) Y() float64 {
	var v float64
	v = (float64)(e.native.y)
	return v
}

// Axes gets the field inside the struct.
func (e *EventButton) Axes() *float64 {
	var v *float64
	v = (*float64)(e.native.axes)
	return v
}

// State gets the field inside the struct.
func (e *EventButton) State() ModifierType {
	var v ModifierType
	v = ModifierType(e.native.state)
	return v
}

// Button gets the field inside the struct.
func (e *EventButton) Button() uint {
	var v uint
	v = (uint)(e.native.button)
	return v
}

// Device gets the field inside the struct.
func (e *EventButton) Device() Device {
	var v Device
	v = gextras.CastObject(externglib.Take(unsafe.Pointer(e.native.device.Native()))).(Device)
	return v
}

// XRoot gets the field inside the struct.
func (e *EventButton) XRoot() float64 {
	var v float64
	v = (float64)(e.native.x_root)
	return v
}

// YRoot gets the field inside the struct.
func (e *EventButton) YRoot() float64 {
	var v float64
	v = (float64)(e.native.y_root)
	return v
}

// EventConfigure: generated when a window size or position has changed.
type EventConfigure struct {
	native C.GdkEventConfigure
}

// WrapEventConfigure wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapEventConfigure(ptr unsafe.Pointer) *EventConfigure {
	if ptr == nil {
		return nil
	}

	return (*EventConfigure)(ptr)
}

func marshalEventConfigure(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapEventConfigure(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (e *EventConfigure) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

// Type gets the field inside the struct.
func (e *EventConfigure) Type() EventType {
	var v EventType
	v = EventType(e.native._type)
	return v
}

// Window gets the field inside the struct.
func (e *EventConfigure) Window() Window {
	var v Window
	v = gextras.CastObject(externglib.Take(unsafe.Pointer(e.native.window.Native()))).(Window)
	return v
}

// SendEvent gets the field inside the struct.
func (e *EventConfigure) SendEvent() int8 {
	var v int8
	v = (int8)(e.native.send_event)
	return v
}

// X gets the field inside the struct.
func (e *EventConfigure) X() int {
	var v int
	v = (int)(e.native.x)
	return v
}

// Y gets the field inside the struct.
func (e *EventConfigure) Y() int {
	var v int
	v = (int)(e.native.y)
	return v
}

// Width gets the field inside the struct.
func (e *EventConfigure) Width() int {
	var v int
	v = (int)(e.native.width)
	return v
}

// Height gets the field inside the struct.
func (e *EventConfigure) Height() int {
	var v int
	v = (int)(e.native.height)
	return v
}

// EventCrossing: generated when the pointer enters or leaves a window.
type EventCrossing struct {
	native C.GdkEventCrossing
}

// WrapEventCrossing wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapEventCrossing(ptr unsafe.Pointer) *EventCrossing {
	if ptr == nil {
		return nil
	}

	return (*EventCrossing)(ptr)
}

func marshalEventCrossing(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapEventCrossing(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (e *EventCrossing) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

// Type gets the field inside the struct.
func (e *EventCrossing) Type() EventType {
	var v EventType
	v = EventType(e.native._type)
	return v
}

// Window gets the field inside the struct.
func (e *EventCrossing) Window() Window {
	var v Window
	v = gextras.CastObject(externglib.Take(unsafe.Pointer(e.native.window.Native()))).(Window)
	return v
}

// SendEvent gets the field inside the struct.
func (e *EventCrossing) SendEvent() int8 {
	var v int8
	v = (int8)(e.native.send_event)
	return v
}

// Subwindow gets the field inside the struct.
func (e *EventCrossing) Subwindow() Window {
	var v Window
	v = gextras.CastObject(externglib.Take(unsafe.Pointer(e.native.subwindow.Native()))).(Window)
	return v
}

// Time gets the field inside the struct.
func (e *EventCrossing) Time() uint32 {
	var v uint32
	v = (uint32)(e.native.time)
	return v
}

// X gets the field inside the struct.
func (e *EventCrossing) X() float64 {
	var v float64
	v = (float64)(e.native.x)
	return v
}

// Y gets the field inside the struct.
func (e *EventCrossing) Y() float64 {
	var v float64
	v = (float64)(e.native.y)
	return v
}

// XRoot gets the field inside the struct.
func (e *EventCrossing) XRoot() float64 {
	var v float64
	v = (float64)(e.native.x_root)
	return v
}

// YRoot gets the field inside the struct.
func (e *EventCrossing) YRoot() float64 {
	var v float64
	v = (float64)(e.native.y_root)
	return v
}

// Mode gets the field inside the struct.
func (e *EventCrossing) Mode() CrossingMode {
	var v CrossingMode
	v = CrossingMode(e.native.mode)
	return v
}

// Detail gets the field inside the struct.
func (e *EventCrossing) Detail() NotifyType {
	var v NotifyType
	v = NotifyType(e.native.detail)
	return v
}

// Focus gets the field inside the struct.
func (e *EventCrossing) Focus() bool {
	var v bool
	if e.native.focus {
		v = true
	}
	return v
}

// State gets the field inside the struct.
func (e *EventCrossing) State() ModifierType {
	var v ModifierType
	v = ModifierType(e.native.state)
	return v
}

// EventDND: generated during DND operations.
type EventDND struct {
	native C.GdkEventDND
}

// WrapEventDND wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapEventDND(ptr unsafe.Pointer) *EventDND {
	if ptr == nil {
		return nil
	}

	return (*EventDND)(ptr)
}

func marshalEventDND(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapEventDND(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (e *EventDND) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

// Type gets the field inside the struct.
func (e *EventDND) Type() EventType {
	var v EventType
	v = EventType(e.native._type)
	return v
}

// Window gets the field inside the struct.
func (e *EventDND) Window() Window {
	var v Window
	v = gextras.CastObject(externglib.Take(unsafe.Pointer(e.native.window.Native()))).(Window)
	return v
}

// SendEvent gets the field inside the struct.
func (e *EventDND) SendEvent() int8 {
	var v int8
	v = (int8)(e.native.send_event)
	return v
}

// Context gets the field inside the struct.
func (e *EventDND) Context() DragContext {
	var v DragContext
	v = gextras.CastObject(externglib.Take(unsafe.Pointer(e.native.context.Native()))).(DragContext)
	return v
}

// Time gets the field inside the struct.
func (e *EventDND) Time() uint32 {
	var v uint32
	v = (uint32)(e.native.time)
	return v
}

// XRoot gets the field inside the struct.
func (e *EventDND) XRoot() int16 {
	var v int16
	v = (int16)(e.native.x_root)
	return v
}

// YRoot gets the field inside the struct.
func (e *EventDND) YRoot() int16 {
	var v int16
	v = (int16)(e.native.y_root)
	return v
}

// EventExpose: generated when all or part of a window becomes visible and needs
// to be redrawn.
type EventExpose struct {
	native C.GdkEventExpose
}

// WrapEventExpose wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapEventExpose(ptr unsafe.Pointer) *EventExpose {
	if ptr == nil {
		return nil
	}

	return (*EventExpose)(ptr)
}

func marshalEventExpose(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapEventExpose(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (e *EventExpose) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

// Type gets the field inside the struct.
func (e *EventExpose) Type() EventType {
	var v EventType
	v = EventType(e.native._type)
	return v
}

// Window gets the field inside the struct.
func (e *EventExpose) Window() Window {
	var v Window
	v = gextras.CastObject(externglib.Take(unsafe.Pointer(e.native.window.Native()))).(Window)
	return v
}

// SendEvent gets the field inside the struct.
func (e *EventExpose) SendEvent() int8 {
	var v int8
	v = (int8)(e.native.send_event)
	return v
}

// Area gets the field inside the struct.
func (e *EventExpose) Area() Rectangle {
	var v Rectangle
	v = *WrapRectangle(unsafe.Pointer(&e.native.area))
	return v
}

// Region gets the field inside the struct.
func (e *EventExpose) Region() *cairo.Region {
	var v *cairo.Region
	v = cairo.WrapRegion(unsafe.Pointer(e.native.region))
	return v
}

// Count gets the field inside the struct.
func (e *EventExpose) Count() int {
	var v int
	v = (int)(e.native.count)
	return v
}

// EventFocus describes a change of keyboard focus.
type EventFocus struct {
	native C.GdkEventFocus
}

// WrapEventFocus wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapEventFocus(ptr unsafe.Pointer) *EventFocus {
	if ptr == nil {
		return nil
	}

	return (*EventFocus)(ptr)
}

func marshalEventFocus(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapEventFocus(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (e *EventFocus) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

// Type gets the field inside the struct.
func (e *EventFocus) Type() EventType {
	var v EventType
	v = EventType(e.native._type)
	return v
}

// Window gets the field inside the struct.
func (e *EventFocus) Window() Window {
	var v Window
	v = gextras.CastObject(externglib.Take(unsafe.Pointer(e.native.window.Native()))).(Window)
	return v
}

// SendEvent gets the field inside the struct.
func (e *EventFocus) SendEvent() int8 {
	var v int8
	v = (int8)(e.native.send_event)
	return v
}

// In gets the field inside the struct.
func (e *EventFocus) In() int16 {
	var v int16
	v = (int16)(e.native.in)
	return v
}

// EventGrabBroken: generated when a pointer or keyboard grab is broken. On X11,
// this happens when the grab window becomes unviewable (i.e. it or one of its
// ancestors is unmapped), or if the same application grabs the pointer or
// keyboard again. Note that implicit grabs (which are initiated by button
// presses) can also cause EventGrabBroken events.
type EventGrabBroken struct {
	native C.GdkEventGrabBroken
}

// WrapEventGrabBroken wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapEventGrabBroken(ptr unsafe.Pointer) *EventGrabBroken {
	if ptr == nil {
		return nil
	}

	return (*EventGrabBroken)(ptr)
}

func marshalEventGrabBroken(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapEventGrabBroken(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (e *EventGrabBroken) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

// Type gets the field inside the struct.
func (e *EventGrabBroken) Type() EventType {
	var v EventType
	v = EventType(e.native._type)
	return v
}

// Window gets the field inside the struct.
func (e *EventGrabBroken) Window() Window {
	var v Window
	v = gextras.CastObject(externglib.Take(unsafe.Pointer(e.native.window.Native()))).(Window)
	return v
}

// SendEvent gets the field inside the struct.
func (e *EventGrabBroken) SendEvent() int8 {
	var v int8
	v = (int8)(e.native.send_event)
	return v
}

// Keyboard gets the field inside the struct.
func (e *EventGrabBroken) Keyboard() bool {
	var v bool
	if e.native.keyboard {
		v = true
	}
	return v
}

// Implicit gets the field inside the struct.
func (e *EventGrabBroken) Implicit() bool {
	var v bool
	if e.native.implicit {
		v = true
	}
	return v
}

// GrabWindow gets the field inside the struct.
func (e *EventGrabBroken) GrabWindow() Window {
	var v Window
	v = gextras.CastObject(externglib.Take(unsafe.Pointer(e.native.grab_window.Native()))).(Window)
	return v
}

// EventKey describes a key press or key release event.
type EventKey struct {
	native C.GdkEventKey
}

// WrapEventKey wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapEventKey(ptr unsafe.Pointer) *EventKey {
	if ptr == nil {
		return nil
	}

	return (*EventKey)(ptr)
}

func marshalEventKey(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapEventKey(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (e *EventKey) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

// Type gets the field inside the struct.
func (e *EventKey) Type() EventType {
	var v EventType
	v = EventType(e.native._type)
	return v
}

// Window gets the field inside the struct.
func (e *EventKey) Window() Window {
	var v Window
	v = gextras.CastObject(externglib.Take(unsafe.Pointer(e.native.window.Native()))).(Window)
	return v
}

// SendEvent gets the field inside the struct.
func (e *EventKey) SendEvent() int8 {
	var v int8
	v = (int8)(e.native.send_event)
	return v
}

// Time gets the field inside the struct.
func (e *EventKey) Time() uint32 {
	var v uint32
	v = (uint32)(e.native.time)
	return v
}

// State gets the field inside the struct.
func (e *EventKey) State() ModifierType {
	var v ModifierType
	v = ModifierType(e.native.state)
	return v
}

// Keyval gets the field inside the struct.
func (e *EventKey) Keyval() uint {
	var v uint
	v = (uint)(e.native.keyval)
	return v
}

// Length gets the field inside the struct.
func (e *EventKey) Length() int {
	var v int
	v = (int)(e.native.length)
	return v
}

// String gets the field inside the struct.
func (e *EventKey) String() string {
	var v string
	v = C.GoString(e.native.string)
	return v
}

// HardwareKeycode gets the field inside the struct.
func (e *EventKey) HardwareKeycode() uint16 {
	var v uint16
	v = (uint16)(e.native.hardware_keycode)
	return v
}

// Group gets the field inside the struct.
func (e *EventKey) Group() byte {
	var v byte
	v = (byte)(e.native.group)
	return v
}

// EventMotion: generated when the pointer moves.
type EventMotion struct {
	native C.GdkEventMotion
}

// WrapEventMotion wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapEventMotion(ptr unsafe.Pointer) *EventMotion {
	if ptr == nil {
		return nil
	}

	return (*EventMotion)(ptr)
}

func marshalEventMotion(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapEventMotion(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (e *EventMotion) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

// Type gets the field inside the struct.
func (e *EventMotion) Type() EventType {
	var v EventType
	v = EventType(e.native._type)
	return v
}

// Window gets the field inside the struct.
func (e *EventMotion) Window() Window {
	var v Window
	v = gextras.CastObject(externglib.Take(unsafe.Pointer(e.native.window.Native()))).(Window)
	return v
}

// SendEvent gets the field inside the struct.
func (e *EventMotion) SendEvent() int8 {
	var v int8
	v = (int8)(e.native.send_event)
	return v
}

// Time gets the field inside the struct.
func (e *EventMotion) Time() uint32 {
	var v uint32
	v = (uint32)(e.native.time)
	return v
}

// X gets the field inside the struct.
func (e *EventMotion) X() float64 {
	var v float64
	v = (float64)(e.native.x)
	return v
}

// Y gets the field inside the struct.
func (e *EventMotion) Y() float64 {
	var v float64
	v = (float64)(e.native.y)
	return v
}

// Axes gets the field inside the struct.
func (e *EventMotion) Axes() *float64 {
	var v *float64
	v = (*float64)(e.native.axes)
	return v
}

// State gets the field inside the struct.
func (e *EventMotion) State() ModifierType {
	var v ModifierType
	v = ModifierType(e.native.state)
	return v
}

// IsHint gets the field inside the struct.
func (e *EventMotion) IsHint() int16 {
	var v int16
	v = (int16)(e.native.is_hint)
	return v
}

// Device gets the field inside the struct.
func (e *EventMotion) Device() Device {
	var v Device
	v = gextras.CastObject(externglib.Take(unsafe.Pointer(e.native.device.Native()))).(Device)
	return v
}

// XRoot gets the field inside the struct.
func (e *EventMotion) XRoot() float64 {
	var v float64
	v = (float64)(e.native.x_root)
	return v
}

// YRoot gets the field inside the struct.
func (e *EventMotion) YRoot() float64 {
	var v float64
	v = (float64)(e.native.y_root)
	return v
}

// EventOwnerChange: generated when the owner of a selection changes. On X11,
// this information is only available if the X server supports the XFIXES
// extension.
type EventOwnerChange struct {
	native C.GdkEventOwnerChange
}

// WrapEventOwnerChange wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapEventOwnerChange(ptr unsafe.Pointer) *EventOwnerChange {
	if ptr == nil {
		return nil
	}

	return (*EventOwnerChange)(ptr)
}

func marshalEventOwnerChange(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapEventOwnerChange(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (e *EventOwnerChange) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

// Type gets the field inside the struct.
func (e *EventOwnerChange) Type() EventType {
	var v EventType
	v = EventType(e.native._type)
	return v
}

// Window gets the field inside the struct.
func (e *EventOwnerChange) Window() Window {
	var v Window
	v = gextras.CastObject(externglib.Take(unsafe.Pointer(e.native.window.Native()))).(Window)
	return v
}

// SendEvent gets the field inside the struct.
func (e *EventOwnerChange) SendEvent() int8 {
	var v int8
	v = (int8)(e.native.send_event)
	return v
}

// Owner gets the field inside the struct.
func (e *EventOwnerChange) Owner() Window {
	var v Window
	v = gextras.CastObject(externglib.Take(unsafe.Pointer(e.native.owner.Native()))).(Window)
	return v
}

// Reason gets the field inside the struct.
func (e *EventOwnerChange) Reason() OwnerChange {
	var v OwnerChange
	v = OwnerChange(e.native.reason)
	return v
}

// Selection gets the field inside the struct.
func (e *EventOwnerChange) Selection() Atom {
	var v Atom
	v = *WrapAtom(unsafe.Pointer(&e.native.selection))
	return v
}

// Time gets the field inside the struct.
func (e *EventOwnerChange) Time() uint32 {
	var v uint32
	v = (uint32)(e.native.time)
	return v
}

// SelectionTime gets the field inside the struct.
func (e *EventOwnerChange) SelectionTime() uint32 {
	var v uint32
	v = (uint32)(e.native.selection_time)
	return v
}

// EventPadAxis: generated during GDK_SOURCE_TABLET_PAD interaction with tactile
// sensors.
type EventPadAxis struct {
	native C.GdkEventPadAxis
}

// WrapEventPadAxis wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapEventPadAxis(ptr unsafe.Pointer) *EventPadAxis {
	if ptr == nil {
		return nil
	}

	return (*EventPadAxis)(ptr)
}

func marshalEventPadAxis(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapEventPadAxis(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (e *EventPadAxis) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

// Type gets the field inside the struct.
func (e *EventPadAxis) Type() EventType {
	var v EventType
	v = EventType(e.native._type)
	return v
}

// Window gets the field inside the struct.
func (e *EventPadAxis) Window() Window {
	var v Window
	v = gextras.CastObject(externglib.Take(unsafe.Pointer(e.native.window.Native()))).(Window)
	return v
}

// SendEvent gets the field inside the struct.
func (e *EventPadAxis) SendEvent() int8 {
	var v int8
	v = (int8)(e.native.send_event)
	return v
}

// Time gets the field inside the struct.
func (e *EventPadAxis) Time() uint32 {
	var v uint32
	v = (uint32)(e.native.time)
	return v
}

// Group gets the field inside the struct.
func (e *EventPadAxis) Group() uint {
	var v uint
	v = (uint)(e.native.group)
	return v
}

// Index gets the field inside the struct.
func (e *EventPadAxis) Index() uint {
	var v uint
	v = (uint)(e.native.index)
	return v
}

// Mode gets the field inside the struct.
func (e *EventPadAxis) Mode() uint {
	var v uint
	v = (uint)(e.native.mode)
	return v
}

// Value gets the field inside the struct.
func (e *EventPadAxis) Value() float64 {
	var v float64
	v = (float64)(e.native.value)
	return v
}

// EventPadButton: generated during GDK_SOURCE_TABLET_PAD button presses and
// releases.
type EventPadButton struct {
	native C.GdkEventPadButton
}

// WrapEventPadButton wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapEventPadButton(ptr unsafe.Pointer) *EventPadButton {
	if ptr == nil {
		return nil
	}

	return (*EventPadButton)(ptr)
}

func marshalEventPadButton(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapEventPadButton(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (e *EventPadButton) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

// Type gets the field inside the struct.
func (e *EventPadButton) Type() EventType {
	var v EventType
	v = EventType(e.native._type)
	return v
}

// Window gets the field inside the struct.
func (e *EventPadButton) Window() Window {
	var v Window
	v = gextras.CastObject(externglib.Take(unsafe.Pointer(e.native.window.Native()))).(Window)
	return v
}

// SendEvent gets the field inside the struct.
func (e *EventPadButton) SendEvent() int8 {
	var v int8
	v = (int8)(e.native.send_event)
	return v
}

// Time gets the field inside the struct.
func (e *EventPadButton) Time() uint32 {
	var v uint32
	v = (uint32)(e.native.time)
	return v
}

// Group gets the field inside the struct.
func (e *EventPadButton) Group() uint {
	var v uint
	v = (uint)(e.native.group)
	return v
}

// Button gets the field inside the struct.
func (e *EventPadButton) Button() uint {
	var v uint
	v = (uint)(e.native.button)
	return v
}

// Mode gets the field inside the struct.
func (e *EventPadButton) Mode() uint {
	var v uint
	v = (uint)(e.native.mode)
	return v
}

// EventPadGroupMode: generated during GDK_SOURCE_TABLET_PAD mode switches in a
// group.
type EventPadGroupMode struct {
	native C.GdkEventPadGroupMode
}

// WrapEventPadGroupMode wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapEventPadGroupMode(ptr unsafe.Pointer) *EventPadGroupMode {
	if ptr == nil {
		return nil
	}

	return (*EventPadGroupMode)(ptr)
}

func marshalEventPadGroupMode(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapEventPadGroupMode(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (e *EventPadGroupMode) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

// Type gets the field inside the struct.
func (e *EventPadGroupMode) Type() EventType {
	var v EventType
	v = EventType(e.native._type)
	return v
}

// Window gets the field inside the struct.
func (e *EventPadGroupMode) Window() Window {
	var v Window
	v = gextras.CastObject(externglib.Take(unsafe.Pointer(e.native.window.Native()))).(Window)
	return v
}

// SendEvent gets the field inside the struct.
func (e *EventPadGroupMode) SendEvent() int8 {
	var v int8
	v = (int8)(e.native.send_event)
	return v
}

// Time gets the field inside the struct.
func (e *EventPadGroupMode) Time() uint32 {
	var v uint32
	v = (uint32)(e.native.time)
	return v
}

// Group gets the field inside the struct.
func (e *EventPadGroupMode) Group() uint {
	var v uint
	v = (uint)(e.native.group)
	return v
}

// Mode gets the field inside the struct.
func (e *EventPadGroupMode) Mode() uint {
	var v uint
	v = (uint)(e.native.mode)
	return v
}

// EventProperty describes a property change on a window.
type EventProperty struct {
	native C.GdkEventProperty
}

// WrapEventProperty wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapEventProperty(ptr unsafe.Pointer) *EventProperty {
	if ptr == nil {
		return nil
	}

	return (*EventProperty)(ptr)
}

func marshalEventProperty(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapEventProperty(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (e *EventProperty) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

// Type gets the field inside the struct.
func (e *EventProperty) Type() EventType {
	var v EventType
	v = EventType(e.native._type)
	return v
}

// Window gets the field inside the struct.
func (e *EventProperty) Window() Window {
	var v Window
	v = gextras.CastObject(externglib.Take(unsafe.Pointer(e.native.window.Native()))).(Window)
	return v
}

// SendEvent gets the field inside the struct.
func (e *EventProperty) SendEvent() int8 {
	var v int8
	v = (int8)(e.native.send_event)
	return v
}

// Atom gets the field inside the struct.
func (e *EventProperty) Atom() Atom {
	var v Atom
	v = *WrapAtom(unsafe.Pointer(&e.native.atom))
	return v
}

// Time gets the field inside the struct.
func (e *EventProperty) Time() uint32 {
	var v uint32
	v = (uint32)(e.native.time)
	return v
}

// State gets the field inside the struct.
func (e *EventProperty) State() PropertyState {
	var v PropertyState
	v = PropertyState(e.native.state)
	return v
}

// EventProximity: proximity events are generated when using GDK’s wrapper for
// the XInput extension. The XInput extension is an add-on for standard X that
// allows you to use nonstandard devices such as graphics tablets. A proximity
// event indicates that the stylus has moved in or out of contact with the
// tablet, or perhaps that the user’s finger has moved in or out of contact with
// a touch screen.
//
// This event type will be used pretty rarely. It only is important for XInput
// aware programs that are drawing their own cursor.
type EventProximity struct {
	native C.GdkEventProximity
}

// WrapEventProximity wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapEventProximity(ptr unsafe.Pointer) *EventProximity {
	if ptr == nil {
		return nil
	}

	return (*EventProximity)(ptr)
}

func marshalEventProximity(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapEventProximity(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (e *EventProximity) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

// Type gets the field inside the struct.
func (e *EventProximity) Type() EventType {
	var v EventType
	v = EventType(e.native._type)
	return v
}

// Window gets the field inside the struct.
func (e *EventProximity) Window() Window {
	var v Window
	v = gextras.CastObject(externglib.Take(unsafe.Pointer(e.native.window.Native()))).(Window)
	return v
}

// SendEvent gets the field inside the struct.
func (e *EventProximity) SendEvent() int8 {
	var v int8
	v = (int8)(e.native.send_event)
	return v
}

// Time gets the field inside the struct.
func (e *EventProximity) Time() uint32 {
	var v uint32
	v = (uint32)(e.native.time)
	return v
}

// Device gets the field inside the struct.
func (e *EventProximity) Device() Device {
	var v Device
	v = gextras.CastObject(externglib.Take(unsafe.Pointer(e.native.device.Native()))).(Device)
	return v
}

// EventScroll: generated from button presses for the buttons 4 to 7. Wheel mice
// are usually configured to generate button press events for buttons 4 and 5
// when the wheel is turned.
//
// Some GDK backends can also generate “smooth” scroll events, which can be
// recognized by the GDK_SCROLL_SMOOTH scroll direction. For these, the scroll
// deltas can be obtained with gdk_event_get_scroll_deltas().
type EventScroll struct {
	native C.GdkEventScroll
}

// WrapEventScroll wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapEventScroll(ptr unsafe.Pointer) *EventScroll {
	if ptr == nil {
		return nil
	}

	return (*EventScroll)(ptr)
}

func marshalEventScroll(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapEventScroll(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (e *EventScroll) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

// Type gets the field inside the struct.
func (e *EventScroll) Type() EventType {
	var v EventType
	v = EventType(e.native._type)
	return v
}

// Window gets the field inside the struct.
func (e *EventScroll) Window() Window {
	var v Window
	v = gextras.CastObject(externglib.Take(unsafe.Pointer(e.native.window.Native()))).(Window)
	return v
}

// SendEvent gets the field inside the struct.
func (e *EventScroll) SendEvent() int8 {
	var v int8
	v = (int8)(e.native.send_event)
	return v
}

// Time gets the field inside the struct.
func (e *EventScroll) Time() uint32 {
	var v uint32
	v = (uint32)(e.native.time)
	return v
}

// X gets the field inside the struct.
func (e *EventScroll) X() float64 {
	var v float64
	v = (float64)(e.native.x)
	return v
}

// Y gets the field inside the struct.
func (e *EventScroll) Y() float64 {
	var v float64
	v = (float64)(e.native.y)
	return v
}

// State gets the field inside the struct.
func (e *EventScroll) State() ModifierType {
	var v ModifierType
	v = ModifierType(e.native.state)
	return v
}

// Direction gets the field inside the struct.
func (e *EventScroll) Direction() ScrollDirection {
	var v ScrollDirection
	v = ScrollDirection(e.native.direction)
	return v
}

// Device gets the field inside the struct.
func (e *EventScroll) Device() Device {
	var v Device
	v = gextras.CastObject(externglib.Take(unsafe.Pointer(e.native.device.Native()))).(Device)
	return v
}

// XRoot gets the field inside the struct.
func (e *EventScroll) XRoot() float64 {
	var v float64
	v = (float64)(e.native.x_root)
	return v
}

// YRoot gets the field inside the struct.
func (e *EventScroll) YRoot() float64 {
	var v float64
	v = (float64)(e.native.y_root)
	return v
}

// DeltaX gets the field inside the struct.
func (e *EventScroll) DeltaX() float64 {
	var v float64
	v = (float64)(e.native.delta_x)
	return v
}

// DeltaY gets the field inside the struct.
func (e *EventScroll) DeltaY() float64 {
	var v float64
	v = (float64)(e.native.delta_y)
	return v
}

// EventSelection: generated when a selection is requested or ownership of a
// selection is taken over by another client application.
type EventSelection struct {
	native C.GdkEventSelection
}

// WrapEventSelection wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapEventSelection(ptr unsafe.Pointer) *EventSelection {
	if ptr == nil {
		return nil
	}

	return (*EventSelection)(ptr)
}

func marshalEventSelection(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapEventSelection(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (e *EventSelection) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

// Type gets the field inside the struct.
func (e *EventSelection) Type() EventType {
	var v EventType
	v = EventType(e.native._type)
	return v
}

// Window gets the field inside the struct.
func (e *EventSelection) Window() Window {
	var v Window
	v = gextras.CastObject(externglib.Take(unsafe.Pointer(e.native.window.Native()))).(Window)
	return v
}

// SendEvent gets the field inside the struct.
func (e *EventSelection) SendEvent() int8 {
	var v int8
	v = (int8)(e.native.send_event)
	return v
}

// Selection gets the field inside the struct.
func (e *EventSelection) Selection() Atom {
	var v Atom
	v = *WrapAtom(unsafe.Pointer(&e.native.selection))
	return v
}

// Target gets the field inside the struct.
func (e *EventSelection) Target() Atom {
	var v Atom
	v = *WrapAtom(unsafe.Pointer(&e.native.target))
	return v
}

// Property gets the field inside the struct.
func (e *EventSelection) Property() Atom {
	var v Atom
	v = *WrapAtom(unsafe.Pointer(&e.native.property))
	return v
}

// Time gets the field inside the struct.
func (e *EventSelection) Time() uint32 {
	var v uint32
	v = (uint32)(e.native.time)
	return v
}

// Requestor gets the field inside the struct.
func (e *EventSelection) Requestor() Window {
	var v Window
	v = gextras.CastObject(externglib.Take(unsafe.Pointer(e.native.requestor.Native()))).(Window)
	return v
}

type EventSequence struct {
	native C.GdkEventSequence
}

// WrapEventSequence wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapEventSequence(ptr unsafe.Pointer) *EventSequence {
	if ptr == nil {
		return nil
	}

	return (*EventSequence)(ptr)
}

func marshalEventSequence(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapEventSequence(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (e *EventSequence) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

// EventSetting: generated when a setting is modified.
type EventSetting struct {
	native C.GdkEventSetting
}

// WrapEventSetting wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapEventSetting(ptr unsafe.Pointer) *EventSetting {
	if ptr == nil {
		return nil
	}

	return (*EventSetting)(ptr)
}

func marshalEventSetting(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapEventSetting(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (e *EventSetting) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

// Type gets the field inside the struct.
func (e *EventSetting) Type() EventType {
	var v EventType
	v = EventType(e.native._type)
	return v
}

// Window gets the field inside the struct.
func (e *EventSetting) Window() Window {
	var v Window
	v = gextras.CastObject(externglib.Take(unsafe.Pointer(e.native.window.Native()))).(Window)
	return v
}

// SendEvent gets the field inside the struct.
func (e *EventSetting) SendEvent() int8 {
	var v int8
	v = (int8)(e.native.send_event)
	return v
}

// Action gets the field inside the struct.
func (e *EventSetting) Action() SettingAction {
	var v SettingAction
	v = SettingAction(e.native.action)
	return v
}

// Name gets the field inside the struct.
func (e *EventSetting) Name() string {
	var v string
	v = C.GoString(e.native.name)
	return v
}

// EventTouch: used for touch events. @type field will be one of
// GDK_TOUCH_BEGIN, GDK_TOUCH_UPDATE, GDK_TOUCH_END or GDK_TOUCH_CANCEL.
//
// Touch events are grouped into sequences by means of the @sequence field,
// which can also be obtained with gdk_event_get_event_sequence(). Each sequence
// begins with a GDK_TOUCH_BEGIN event, followed by any number of
// GDK_TOUCH_UPDATE events, and ends with a GDK_TOUCH_END (or GDK_TOUCH_CANCEL)
// event. With multitouch devices, there may be several active sequences at the
// same time.
type EventTouch struct {
	native C.GdkEventTouch
}

// WrapEventTouch wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapEventTouch(ptr unsafe.Pointer) *EventTouch {
	if ptr == nil {
		return nil
	}

	return (*EventTouch)(ptr)
}

func marshalEventTouch(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapEventTouch(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (e *EventTouch) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

// Type gets the field inside the struct.
func (e *EventTouch) Type() EventType {
	var v EventType
	v = EventType(e.native._type)
	return v
}

// Window gets the field inside the struct.
func (e *EventTouch) Window() Window {
	var v Window
	v = gextras.CastObject(externglib.Take(unsafe.Pointer(e.native.window.Native()))).(Window)
	return v
}

// SendEvent gets the field inside the struct.
func (e *EventTouch) SendEvent() int8 {
	var v int8
	v = (int8)(e.native.send_event)
	return v
}

// Time gets the field inside the struct.
func (e *EventTouch) Time() uint32 {
	var v uint32
	v = (uint32)(e.native.time)
	return v
}

// X gets the field inside the struct.
func (e *EventTouch) X() float64 {
	var v float64
	v = (float64)(e.native.x)
	return v
}

// Y gets the field inside the struct.
func (e *EventTouch) Y() float64 {
	var v float64
	v = (float64)(e.native.y)
	return v
}

// Axes gets the field inside the struct.
func (e *EventTouch) Axes() *float64 {
	var v *float64
	v = (*float64)(e.native.axes)
	return v
}

// State gets the field inside the struct.
func (e *EventTouch) State() ModifierType {
	var v ModifierType
	v = ModifierType(e.native.state)
	return v
}

// Sequence gets the field inside the struct.
func (e *EventTouch) Sequence() *EventSequence {
	var v *EventSequence
	v = WrapEventSequence(unsafe.Pointer(e.native.sequence))
	return v
}

// EmulatingPointer gets the field inside the struct.
func (e *EventTouch) EmulatingPointer() bool {
	var v bool
	if e.native.emulating_pointer {
		v = true
	}
	return v
}

// Device gets the field inside the struct.
func (e *EventTouch) Device() Device {
	var v Device
	v = gextras.CastObject(externglib.Take(unsafe.Pointer(e.native.device.Native()))).(Device)
	return v
}

// XRoot gets the field inside the struct.
func (e *EventTouch) XRoot() float64 {
	var v float64
	v = (float64)(e.native.x_root)
	return v
}

// YRoot gets the field inside the struct.
func (e *EventTouch) YRoot() float64 {
	var v float64
	v = (float64)(e.native.y_root)
	return v
}

// EventTouchpadPinch: generated during touchpad swipe gestures.
type EventTouchpadPinch struct {
	native C.GdkEventTouchpadPinch
}

// WrapEventTouchpadPinch wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapEventTouchpadPinch(ptr unsafe.Pointer) *EventTouchpadPinch {
	if ptr == nil {
		return nil
	}

	return (*EventTouchpadPinch)(ptr)
}

func marshalEventTouchpadPinch(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapEventTouchpadPinch(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (e *EventTouchpadPinch) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

// Type gets the field inside the struct.
func (e *EventTouchpadPinch) Type() EventType {
	var v EventType
	v = EventType(e.native._type)
	return v
}

// Window gets the field inside the struct.
func (e *EventTouchpadPinch) Window() Window {
	var v Window
	v = gextras.CastObject(externglib.Take(unsafe.Pointer(e.native.window.Native()))).(Window)
	return v
}

// SendEvent gets the field inside the struct.
func (e *EventTouchpadPinch) SendEvent() int8 {
	var v int8
	v = (int8)(e.native.send_event)
	return v
}

// Phase gets the field inside the struct.
func (e *EventTouchpadPinch) Phase() int8 {
	var v int8
	v = (int8)(e.native.phase)
	return v
}

// NFingers gets the field inside the struct.
func (e *EventTouchpadPinch) NFingers() int8 {
	var v int8
	v = (int8)(e.native.n_fingers)
	return v
}

// Time gets the field inside the struct.
func (e *EventTouchpadPinch) Time() uint32 {
	var v uint32
	v = (uint32)(e.native.time)
	return v
}

// X gets the field inside the struct.
func (e *EventTouchpadPinch) X() float64 {
	var v float64
	v = (float64)(e.native.x)
	return v
}

// Y gets the field inside the struct.
func (e *EventTouchpadPinch) Y() float64 {
	var v float64
	v = (float64)(e.native.y)
	return v
}

// Dx gets the field inside the struct.
func (e *EventTouchpadPinch) Dx() float64 {
	var v float64
	v = (float64)(e.native.dx)
	return v
}

// Dy gets the field inside the struct.
func (e *EventTouchpadPinch) Dy() float64 {
	var v float64
	v = (float64)(e.native.dy)
	return v
}

// AngleDelta gets the field inside the struct.
func (e *EventTouchpadPinch) AngleDelta() float64 {
	var v float64
	v = (float64)(e.native.angle_delta)
	return v
}

// Scale gets the field inside the struct.
func (e *EventTouchpadPinch) Scale() float64 {
	var v float64
	v = (float64)(e.native.scale)
	return v
}

// XRoot gets the field inside the struct.
func (e *EventTouchpadPinch) XRoot() float64 {
	var v float64
	v = (float64)(e.native.x_root)
	return v
}

// YRoot gets the field inside the struct.
func (e *EventTouchpadPinch) YRoot() float64 {
	var v float64
	v = (float64)(e.native.y_root)
	return v
}

// State gets the field inside the struct.
func (e *EventTouchpadPinch) State() ModifierType {
	var v ModifierType
	v = ModifierType(e.native.state)
	return v
}

// EventTouchpadSwipe: generated during touchpad swipe gestures.
type EventTouchpadSwipe struct {
	native C.GdkEventTouchpadSwipe
}

// WrapEventTouchpadSwipe wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapEventTouchpadSwipe(ptr unsafe.Pointer) *EventTouchpadSwipe {
	if ptr == nil {
		return nil
	}

	return (*EventTouchpadSwipe)(ptr)
}

func marshalEventTouchpadSwipe(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapEventTouchpadSwipe(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (e *EventTouchpadSwipe) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

// Type gets the field inside the struct.
func (e *EventTouchpadSwipe) Type() EventType {
	var v EventType
	v = EventType(e.native._type)
	return v
}

// Window gets the field inside the struct.
func (e *EventTouchpadSwipe) Window() Window {
	var v Window
	v = gextras.CastObject(externglib.Take(unsafe.Pointer(e.native.window.Native()))).(Window)
	return v
}

// SendEvent gets the field inside the struct.
func (e *EventTouchpadSwipe) SendEvent() int8 {
	var v int8
	v = (int8)(e.native.send_event)
	return v
}

// Phase gets the field inside the struct.
func (e *EventTouchpadSwipe) Phase() int8 {
	var v int8
	v = (int8)(e.native.phase)
	return v
}

// NFingers gets the field inside the struct.
func (e *EventTouchpadSwipe) NFingers() int8 {
	var v int8
	v = (int8)(e.native.n_fingers)
	return v
}

// Time gets the field inside the struct.
func (e *EventTouchpadSwipe) Time() uint32 {
	var v uint32
	v = (uint32)(e.native.time)
	return v
}

// X gets the field inside the struct.
func (e *EventTouchpadSwipe) X() float64 {
	var v float64
	v = (float64)(e.native.x)
	return v
}

// Y gets the field inside the struct.
func (e *EventTouchpadSwipe) Y() float64 {
	var v float64
	v = (float64)(e.native.y)
	return v
}

// Dx gets the field inside the struct.
func (e *EventTouchpadSwipe) Dx() float64 {
	var v float64
	v = (float64)(e.native.dx)
	return v
}

// Dy gets the field inside the struct.
func (e *EventTouchpadSwipe) Dy() float64 {
	var v float64
	v = (float64)(e.native.dy)
	return v
}

// XRoot gets the field inside the struct.
func (e *EventTouchpadSwipe) XRoot() float64 {
	var v float64
	v = (float64)(e.native.x_root)
	return v
}

// YRoot gets the field inside the struct.
func (e *EventTouchpadSwipe) YRoot() float64 {
	var v float64
	v = (float64)(e.native.y_root)
	return v
}

// State gets the field inside the struct.
func (e *EventTouchpadSwipe) State() ModifierType {
	var v ModifierType
	v = ModifierType(e.native.state)
	return v
}

// EventVisibility: generated when the window visibility status has changed.
type EventVisibility struct {
	native C.GdkEventVisibility
}

// WrapEventVisibility wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapEventVisibility(ptr unsafe.Pointer) *EventVisibility {
	if ptr == nil {
		return nil
	}

	return (*EventVisibility)(ptr)
}

func marshalEventVisibility(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapEventVisibility(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (e *EventVisibility) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

// Type gets the field inside the struct.
func (e *EventVisibility) Type() EventType {
	var v EventType
	v = EventType(e.native._type)
	return v
}

// Window gets the field inside the struct.
func (e *EventVisibility) Window() Window {
	var v Window
	v = gextras.CastObject(externglib.Take(unsafe.Pointer(e.native.window.Native()))).(Window)
	return v
}

// SendEvent gets the field inside the struct.
func (e *EventVisibility) SendEvent() int8 {
	var v int8
	v = (int8)(e.native.send_event)
	return v
}

// State gets the field inside the struct.
func (e *EventVisibility) State() VisibilityState {
	var v VisibilityState
	v = VisibilityState(e.native.state)
	return v
}

// EventWindowState: generated when the state of a toplevel window changes.
type EventWindowState struct {
	native C.GdkEventWindowState
}

// WrapEventWindowState wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapEventWindowState(ptr unsafe.Pointer) *EventWindowState {
	if ptr == nil {
		return nil
	}

	return (*EventWindowState)(ptr)
}

func marshalEventWindowState(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapEventWindowState(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (e *EventWindowState) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

// Type gets the field inside the struct.
func (e *EventWindowState) Type() EventType {
	var v EventType
	v = EventType(e.native._type)
	return v
}

// Window gets the field inside the struct.
func (e *EventWindowState) Window() Window {
	var v Window
	v = gextras.CastObject(externglib.Take(unsafe.Pointer(e.native.window.Native()))).(Window)
	return v
}

// SendEvent gets the field inside the struct.
func (e *EventWindowState) SendEvent() int8 {
	var v int8
	v = (int8)(e.native.send_event)
	return v
}

// ChangedMask gets the field inside the struct.
func (e *EventWindowState) ChangedMask() WindowState {
	var v WindowState
	v = WindowState(e.native.changed_mask)
	return v
}

// NewWindowState gets the field inside the struct.
func (e *EventWindowState) NewWindowState() WindowState {
	var v WindowState
	v = WindowState(e.native.new_window_state)
	return v
}
