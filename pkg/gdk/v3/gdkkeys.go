// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/pango"
)

// #cgo pkg-config: gdk-3.0 gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gdk/gdk.h>
import "C"

// KeyvalConvertCase obtains the upper- and lower-case versions of the keyval
// @symbol. Examples of keyvals are K_KEY_a, K_KEY_Enter, K_KEY_F1, etc.
func KeyvalConvertCase(symbol uint) (lower uint, upper uint) {
	var arg1 C.guint

	arg1 = C.guint(symbol)

	arg2 := new(C.guint)
	var ret2 uint
	arg3 := new(C.guint)
	var ret3 uint

	C.gdk_keyval_convert_case(arg1, arg2, arg3)

	ret2 = uint(*arg2)
	ret3 = uint(*arg3)

	return ret2, ret3
}

// KeyvalFromName converts a key name to a key value.
//
// The names are the same as those in the `gdk/gdkkeysyms.h` header file but
// without the leading “GDK_KEY_”.
func KeyvalFromName(keyvalName string) uint {
	var arg1 *C.gchar

	arg1 = (*C.gchar)(C.CString(keyvalName))
	defer C.free(unsafe.Pointer(arg1))

	var cret C.guint
	var goret uint

	cret = C.gdk_keyval_from_name(arg1)

	goret = uint(cret)

	return goret
}

// KeyvalIsLower returns true if the given key value is in lower case.
func KeyvalIsLower(keyval uint) bool {
	var arg1 C.guint

	arg1 = C.guint(keyval)

	var cret C.gboolean
	var goret bool

	cret = C.gdk_keyval_is_lower(arg1)

	if cret {
		goret = true
	}

	return goret
}

// KeyvalIsUpper returns true if the given key value is in upper case.
func KeyvalIsUpper(keyval uint) bool {
	var arg1 C.guint

	arg1 = C.guint(keyval)

	var cret C.gboolean
	var goret bool

	cret = C.gdk_keyval_is_upper(arg1)

	if cret {
		goret = true
	}

	return goret
}

// KeyvalName converts a key value into a symbolic name.
//
// The names are the same as those in the `gdk/gdkkeysyms.h` header file but
// without the leading “GDK_KEY_”.
func KeyvalName(keyval uint) string {
	var arg1 C.guint

	arg1 = C.guint(keyval)

	var cret *C.gchar
	var goret string

	cret = C.gdk_keyval_name(arg1)

	goret = C.GoString(cret)

	return goret
}

// KeyvalToLower converts a key value to lower case, if applicable.
func KeyvalToLower(keyval uint) uint {
	var arg1 C.guint

	arg1 = C.guint(keyval)

	var cret C.guint
	var goret uint

	cret = C.gdk_keyval_to_lower(arg1)

	goret = uint(cret)

	return goret
}

// KeyvalToUnicode: convert from a GDK key symbol to the corresponding ISO10646
// (Unicode) character.
func KeyvalToUnicode(keyval uint) uint32 {
	var arg1 C.guint

	arg1 = C.guint(keyval)

	var cret C.guint32
	var goret uint32

	cret = C.gdk_keyval_to_unicode(arg1)

	goret = uint32(cret)

	return goret
}

// KeyvalToUpper converts a key value to upper case, if applicable.
func KeyvalToUpper(keyval uint) uint {
	var arg1 C.guint

	arg1 = C.guint(keyval)

	var cret C.guint
	var goret uint

	cret = C.gdk_keyval_to_upper(arg1)

	goret = uint(cret)

	return goret
}

// UnicodeToKeyval: convert from a ISO10646 character to a key symbol.
func UnicodeToKeyval(wc uint32) uint {
	var arg1 C.guint32

	arg1 = C.guint32(wc)

	var cret C.guint
	var goret uint

	cret = C.gdk_unicode_to_keyval(arg1)

	goret = uint(cret)

	return goret
}

// KeymapKey: a KeymapKey is a hardware key that can be mapped to a keyval.
type KeymapKey struct {
	native C.GdkKeymapKey
}

// WrapKeymapKey wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapKeymapKey(ptr unsafe.Pointer) *KeymapKey {
	if ptr == nil {
		return nil
	}

	return (*KeymapKey)(ptr)
}

func marshalKeymapKey(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapKeymapKey(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (k *KeymapKey) Native() unsafe.Pointer {
	return unsafe.Pointer(&k.native)
}

// Keycode gets the field inside the struct.
func (k *KeymapKey) Keycode() uint {
	var v uint
	v = uint(k.native.keycode)
	return v
}

// Group gets the field inside the struct.
func (k *KeymapKey) Group() int {
	var v int
	v = int(k.native.group)
	return v
}

// Level gets the field inside the struct.
func (k *KeymapKey) Level() int {
	var v int
	v = int(k.native.level)
	return v
}
