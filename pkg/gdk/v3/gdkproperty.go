// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"unsafe"
)

// #cgo pkg-config: gdk-3.0 gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <gdk/gdk.h>
import "C"

// AtomIntern finds or creates an atom corresponding to a given string.
func AtomIntern(atomName string, onlyIfExists bool) Atom {
	var arg1 *C.gchar
	var arg2 C.gboolean

	arg1 = (*C.gchar)(C.CString(atomName))
	defer C.free(unsafe.Pointer(arg1))
	if onlyIfExists {
		arg2 = C.gboolean(1)
	}

	var cret C.GdkAtom
	var ret1 Atom

	cret = C.gdk_atom_intern(atomName, onlyIfExists)

	ret1 = WrapAtom(unsafe.Pointer(cret))

	return ret1
}

// AtomInternStaticString finds or creates an atom corresponding to a given
// string.
//
// Note that this function is identical to gdk_atom_intern() except that if a
// new Atom is created the string itself is used rather than a copy. This saves
// memory, but can only be used if the string will always exist. It can be used
// with statically allocated strings in the main program, but not with
// statically allocated memory in dynamically loaded modules, if you expect to
// ever unload the module again (e.g. do not use this function in GTK+ theme
// engines).
func AtomInternStaticString(atomName string) Atom {
	var arg1 *C.gchar

	arg1 = (*C.gchar)(C.CString(atomName))
	defer C.free(unsafe.Pointer(arg1))

	var cret C.GdkAtom
	var ret1 Atom

	cret = C.gdk_atom_intern_static_string(atomName)

	ret1 = WrapAtom(unsafe.Pointer(cret))

	return ret1
}

// PropertyChange changes the contents of a property on a window.
func PropertyChange(window Window, property Atom, typ Atom, format int, mode PropMode, data byte, nelements int) {
	var arg1 *C.GdkWindow
	var arg2 C.GdkAtom
	var arg3 C.GdkAtom
	var arg4 C.gint
	var arg5 C.GdkPropMode
	var arg6 *C.guchar
	var arg7 C.gint

	arg1 = (*C.GdkWindow)(unsafe.Pointer(window.Native()))
	arg2 = (C.GdkAtom)(unsafe.Pointer(property.Native()))
	arg3 = (C.GdkAtom)(unsafe.Pointer(typ.Native()))
	arg4 = C.gint(format)
	arg5 = (C.GdkPropMode)(mode)
	arg6 = *C.guchar(data)
	arg7 = C.gint(nelements)

	C.gdk_property_change(window, property, typ, format, mode, data, nelements)
}

// PropertyDelete deletes a property from a window.
func PropertyDelete(window Window, property Atom) {
	var arg1 *C.GdkWindow
	var arg2 C.GdkAtom

	arg1 = (*C.GdkWindow)(unsafe.Pointer(window.Native()))
	arg2 = (C.GdkAtom)(unsafe.Pointer(property.Native()))

	C.gdk_property_delete(window, property)
}

// UTF8ToStringTarget converts an UTF-8 string into the best possible
// representation as a STRING. The representation of characters not in STRING is
// not specified; it may be as pseudo-escape sequences \x{ABCD}, or it may be in
// some other form of approximation.
func UTF8ToStringTarget(str string) string {
	var arg1 *C.gchar

	arg1 = (*C.gchar)(C.CString(str))
	defer C.free(unsafe.Pointer(arg1))

	var cret *C.gchar
	var ret1 string

	cret = C.gdk_utf8_to_string_target(str)

	ret1 = C.GoString(cret)
	defer C.free(unsafe.Pointer(cret))

	return ret1
}
