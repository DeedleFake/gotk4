// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/core/gerror"
	"github.com/diamondburned/gotk4/core/gextras"
	"github.com/diamondburned/gotk4/pkg/cairo"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gdk-3.0 gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <gdk/gdk.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gdk_fullscreen_mode_get_type()), F: marshalFullscreenMode},
		{T: externglib.Type(C.gdk_gravity_get_type()), F: marshalGravity},
		{T: externglib.Type(C.gdk_window_edge_get_type()), F: marshalWindowEdge},
		{T: externglib.Type(C.gdk_window_type_get_type()), F: marshalWindowType},
		{T: externglib.Type(C.gdk_window_window_class_get_type()), F: marshalWindowWindowClass},
		{T: externglib.Type(C.gdk_anchor_hints_get_type()), F: marshalAnchorHints},
		{T: externglib.Type(C.gdk_wm_decoration_get_type()), F: marshalWMDecoration},
		{T: externglib.Type(C.gdk_wm_function_get_type()), F: marshalWMFunction},
		{T: externglib.Type(C.gdk_window_attributes_type_get_type()), F: marshalWindowAttributesType},
		{T: externglib.Type(C.gdk_window_hints_get_type()), F: marshalWindowHints},
		{T: externglib.Type(C.gdk_window_get_type()), F: marshalWindow},
	})
}

// FullscreenMode indicates which monitor (in a multi-head setup) a window
// should span over when in fullscreen mode.
type FullscreenMode int

const (
	// CurrentMonitor: fullscreen on current monitor only.
	FullscreenModeCurrentMonitor FullscreenMode = 0
	// AllMonitors: span across all monitors when fullscreen.
	FullscreenModeAllMonitors FullscreenMode = 1
)

func marshalFullscreenMode(p uintptr) (interface{}, error) {
	return FullscreenMode(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// Gravity defines the reference point of a window and the meaning of
// coordinates passed to gtk_window_move(). See gtk_window_move() and the
// "implementation notes" section of the Extended Window Manager Hints
// (http://www.freedesktop.org/Standards/wm-spec) specification for more
// details.
type Gravity int

const (
	// NorthWest: the reference point is at the top left corner.
	GravityNorthWest Gravity = 1
	// north: the reference point is in the middle of the top edge.
	GravityNorth Gravity = 2
	// NorthEast: the reference point is at the top right corner.
	GravityNorthEast Gravity = 3
	// west: the reference point is at the middle of the left edge.
	GravityWest Gravity = 4
	// center: the reference point is at the center of the window.
	GravityCenter Gravity = 5
	// east: the reference point is at the middle of the right edge.
	GravityEast Gravity = 6
	// SouthWest: the reference point is at the lower left corner.
	GravitySouthWest Gravity = 7
	// south: the reference point is at the middle of the lower edge.
	GravitySouth Gravity = 8
	// SouthEast: the reference point is at the lower right corner.
	GravitySouthEast Gravity = 9
	// static: the reference point is at the top left corner of the window
	// itself, ignoring window manager decorations.
	GravityStatic Gravity = 10
)

func marshalGravity(p uintptr) (interface{}, error) {
	return Gravity(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// WindowEdge determines a window edge or corner.
type WindowEdge int

const (
	// NorthWest: the top left corner.
	WindowEdgeNorthWest WindowEdge = 0
	// north: the top edge.
	WindowEdgeNorth WindowEdge = 1
	// NorthEast: the top right corner.
	WindowEdgeNorthEast WindowEdge = 2
	// west: the left edge.
	WindowEdgeWest WindowEdge = 3
	// east: the right edge.
	WindowEdgeEast WindowEdge = 4
	// SouthWest: the lower left corner.
	WindowEdgeSouthWest WindowEdge = 5
	// south: the lower edge.
	WindowEdgeSouth WindowEdge = 6
	// SouthEast: the lower right corner.
	WindowEdgeSouthEast WindowEdge = 7
)

func marshalWindowEdge(p uintptr) (interface{}, error) {
	return WindowEdge(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// WindowType describes the kind of window.
type WindowType int

const (
	// root: root window; this window has no parent, covers the entire screen,
	// and is created by the window system
	WindowTypeRoot WindowType = 0
	// toplevel: toplevel window (used to implement Window)
	WindowTypeToplevel WindowType = 1
	// child: child window (used to implement e.g. Entry)
	WindowTypeChild WindowType = 2
	// temp: override redirect temporary window (used to implement Menu)
	WindowTypeTemp WindowType = 3
	// foreign: foreign window (see gdk_window_foreign_new())
	WindowTypeForeign WindowType = 4
	// offscreen: offscreen window (see [Offscreen Windows][OFFSCREEN-WINDOWS]).
	// Since 2.18
	WindowTypeOffscreen WindowType = 5
	// subsurface: subsurface-based window; This window is visually tied to a
	// toplevel, and is moved/stacked with it. Currently this window type is
	// only implemented in Wayland. Since 3.14
	WindowTypeSubsurface WindowType = 6
)

func marshalWindowType(p uintptr) (interface{}, error) {
	return WindowType(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// WindowWindowClass: @GDK_INPUT_OUTPUT windows are the standard kind of window
// you might expect. Such windows receive events and are also displayed on
// screen. @GDK_INPUT_ONLY windows are invisible; they are usually placed above
// other windows in order to trap or filter the events. You can’t draw on
// @GDK_INPUT_ONLY windows.
type WindowWindowClass int

const (
	// InputOutput: window for graphics and events
	WindowWindowClassInputOutput WindowWindowClass = 0
	// InputOnly: window for events only
	WindowWindowClassInputOnly WindowWindowClass = 1
)

func marshalWindowWindowClass(p uintptr) (interface{}, error) {
	return WindowWindowClass(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// AnchorHints: positioning hints for aligning a window relative to a rectangle.
//
// These hints determine how the window should be positioned in the case that
// the window would fall off-screen if placed in its ideal position.
//
// For example, GDK_ANCHOR_FLIP_X will replace GDK_GRAVITY_NORTH_WEST with
// GDK_GRAVITY_NORTH_EAST and vice versa if the window extends beyond the left
// or right edges of the monitor.
//
// If GDK_ANCHOR_SLIDE_X is set, the window can be shifted horizontally to fit
// on-screen. If GDK_ANCHOR_RESIZE_X is set, the window can be shrunken
// horizontally to fit.
//
// In general, when multiple flags are set, flipping should take precedence over
// sliding, which should take precedence over resizing.
type AnchorHints int

const (
	// AnchorHintsFlipX: allow flipping anchors horizontally
	AnchorHintsFlipX AnchorHints = 0b1
	// AnchorHintsFlipY: allow flipping anchors vertically
	AnchorHintsFlipY AnchorHints = 0b10
	// AnchorHintsSlideX: allow sliding window horizontally
	AnchorHintsSlideX AnchorHints = 0b100
	// AnchorHintsSlideY: allow sliding window vertically
	AnchorHintsSlideY AnchorHints = 0b1000
	// AnchorHintsResizeX: allow resizing window horizontally
	AnchorHintsResizeX AnchorHints = 0b10000
	// AnchorHintsResizeY: allow resizing window vertically
	AnchorHintsResizeY AnchorHints = 0b100000
	// AnchorHintsFlip: allow flipping anchors on both axes
	AnchorHintsFlip AnchorHints = 0b11
	// AnchorHintsSlide: allow sliding window on both axes
	AnchorHintsSlide AnchorHints = 0b1100
	// AnchorHintsResize: allow resizing window on both axes
	AnchorHintsResize AnchorHints = 0b110000
)

func marshalAnchorHints(p uintptr) (interface{}, error) {
	return AnchorHints(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// WMDecoration: these are hints originally defined by the Motif toolkit. The
// window manager can use them when determining how to decorate the window. The
// hint must be set before mapping the window.
type WMDecoration int

const (
	// WMDecorationAll: all decorations should be applied.
	WMDecorationAll WMDecoration = 0b1
	// WMDecorationBorder: a frame should be drawn around the window.
	WMDecorationBorder WMDecoration = 0b10
	// WMDecorationResizeh: the frame should have resize handles.
	WMDecorationResizeh WMDecoration = 0b100
	// WMDecorationTitle: a titlebar should be placed above the window.
	WMDecorationTitle WMDecoration = 0b1000
	// WMDecorationMenu: a button for opening a menu should be included.
	WMDecorationMenu WMDecoration = 0b10000
	// WMDecorationMinimize: a minimize button should be included.
	WMDecorationMinimize WMDecoration = 0b100000
	// WMDecorationMaximize: a maximize button should be included.
	WMDecorationMaximize WMDecoration = 0b1000000
)

func marshalWMDecoration(p uintptr) (interface{}, error) {
	return WMDecoration(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// WMFunction: these are hints originally defined by the Motif toolkit. The
// window manager can use them when determining the functions to offer for the
// window. The hint must be set before mapping the window.
type WMFunction int

const (
	// WMFunctionAll: all functions should be offered.
	WMFunctionAll WMFunction = 0b1
	// WMFunctionResize: the window should be resizable.
	WMFunctionResize WMFunction = 0b10
	// WMFunctionMove: the window should be movable.
	WMFunctionMove WMFunction = 0b100
	// WMFunctionMinimize: the window should be minimizable.
	WMFunctionMinimize WMFunction = 0b1000
	// WMFunctionMaximize: the window should be maximizable.
	WMFunctionMaximize WMFunction = 0b10000
	// WMFunctionClose: the window should be closable.
	WMFunctionClose WMFunction = 0b100000
)

func marshalWMFunction(p uintptr) (interface{}, error) {
	return WMFunction(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// WindowAttributesType: used to indicate which fields in the WindowAttr struct
// should be honored. For example, if you filled in the “cursor” and “x” fields
// of WindowAttr, pass “@GDK_WA_X | @GDK_WA_CURSOR” to gdk_window_new(). Fields
// in WindowAttr not covered by a bit in this enum are required; for example,
// the @width/@height, @wclass, and @window_type fields are required, they have
// no corresponding flag in WindowAttributesType.
type WindowAttributesType int

const (
	// WindowAttributesTypeTitle: honor the title field
	WindowAttributesTypeTitle WindowAttributesType = 0b10
	// WindowAttributesTypeX: honor the X coordinate field
	WindowAttributesTypeX WindowAttributesType = 0b100
	// WindowAttributesTypeY: honor the Y coordinate field
	WindowAttributesTypeY WindowAttributesType = 0b1000
	// WindowAttributesTypeCursor: honor the cursor field
	WindowAttributesTypeCursor WindowAttributesType = 0b10000
	// WindowAttributesTypeVisual: honor the visual field
	WindowAttributesTypeVisual WindowAttributesType = 0b100000
	// WindowAttributesTypeWmclass: honor the wmclass_class and wmclass_name
	// fields
	WindowAttributesTypeWmclass WindowAttributesType = 0b1000000
	// WindowAttributesTypeNoredir: honor the override_redirect field
	WindowAttributesTypeNoredir WindowAttributesType = 0b10000000
	// WindowAttributesTypeTypeHint: honor the type_hint field
	WindowAttributesTypeTypeHint WindowAttributesType = 0b100000000
)

func marshalWindowAttributesType(p uintptr) (interface{}, error) {
	return WindowAttributesType(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// WindowHints: used to indicate which fields of a Geometry struct should be
// paid attention to. Also, the presence/absence of @GDK_HINT_POS,
// @GDK_HINT_USER_POS, and @GDK_HINT_USER_SIZE is significant, though they don't
// directly refer to Geometry fields. @GDK_HINT_USER_POS will be set
// automatically by Window if you call gtk_window_move(). @GDK_HINT_USER_POS and
// @GDK_HINT_USER_SIZE should be set if the user specified a size/position using
// a --geometry command-line argument; gtk_window_parse_geometry() automatically
// sets these flags.
type WindowHints int

const (
	// WindowHintsPos indicates that the program has positioned the window
	WindowHintsPos WindowHints = 0b1
	// WindowHintsMinSize: min size fields are set
	WindowHintsMinSize WindowHints = 0b10
	// WindowHintsMaxSize: max size fields are set
	WindowHintsMaxSize WindowHints = 0b100
	// WindowHintsBaseSize: base size fields are set
	WindowHintsBaseSize WindowHints = 0b1000
	// WindowHintsAspect: aspect ratio fields are set
	WindowHintsAspect WindowHints = 0b10000
	// WindowHintsResizeInc: resize increment fields are set
	WindowHintsResizeInc WindowHints = 0b100000
	// WindowHintsWinGravity: window gravity field is set
	WindowHintsWinGravity WindowHints = 0b1000000
	// WindowHintsUserPos indicates that the window’s position was explicitly
	// set by the user
	WindowHintsUserPos WindowHints = 0b10000000
	// WindowHintsUserSize indicates that the window’s size was explicitly set
	// by the user
	WindowHintsUserSize WindowHints = 0b100000000
)

func marshalWindowHints(p uintptr) (interface{}, error) {
	return WindowHints(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// GetDefaultRootWindow obtains the root window (parent all other windows are
// inside) for the default display and screen.
func GetDefaultRootWindow() Window {
	var _cret *C.GdkWindow // in

	_cret = C.gdk_get_default_root_window()

	var _window Window // out

	_window = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Window)

	return _window
}

// OffscreenWindowGetEmbedder gets the window that @window is embedded in.
func OffscreenWindowGetEmbedder(window Window) Window {
	var _arg1 *C.GdkWindow // out
	var _cret *C.GdkWindow // in

	_arg1 = (*C.GdkWindow)(unsafe.Pointer(window.Native()))

	_cret = C.gdk_offscreen_window_get_embedder(_arg1)

	var _ret Window // out

	_ret = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Window)

	return _ret
}

// OffscreenWindowGetSurface gets the offscreen surface that an offscreen window
// renders into. If you need to keep this around over window resizes, you need
// to add a reference to it.
func OffscreenWindowGetSurface(window Window) *cairo.Surface {
	var _arg1 *C.GdkWindow       // out
	var _cret *C.cairo_surface_t // in

	_arg1 = (*C.GdkWindow)(unsafe.Pointer(window.Native()))

	_cret = C.gdk_offscreen_window_get_surface(_arg1)

	var _surface *cairo.Surface // out

	_surface = (*cairo.Surface)(unsafe.Pointer(_cret))

	return _surface
}

// OffscreenWindowSetEmbedder sets @window to be embedded in @embedder.
//
// To fully embed an offscreen window, in addition to calling this function, it
// is also necessary to handle the Window::pick-embedded-child signal on the
// @embedder and the Window::to-embedder and Window::from-embedder signals on
// @window.
func OffscreenWindowSetEmbedder(window Window, embedder Window) {
	var _arg1 *C.GdkWindow // out
	var _arg2 *C.GdkWindow // out

	_arg1 = (*C.GdkWindow)(unsafe.Pointer(window.Native()))
	_arg2 = (*C.GdkWindow)(unsafe.Pointer(embedder.Native()))

	C.gdk_offscreen_window_set_embedder(_arg1, _arg2)
}

// Window:
type Window interface {
	gextras.Objector

	// BeepWindow:
	BeepWindow()
	// BeginDrawFrameWindow:
	BeginDrawFrameWindow(region *cairo.Region) DrawingContext
	// BeginMoveDragWindow:
	BeginMoveDragWindow(button int, rootX int, rootY int, timestamp uint32)
	// BeginMoveDragForDeviceWindow:
	BeginMoveDragForDeviceWindow(device Device, button int, rootX int, rootY int, timestamp uint32)
	// BeginPaintRectWindow:
	BeginPaintRectWindow(rectangle *Rectangle)
	// BeginPaintRegionWindow:
	BeginPaintRegionWindow(region *cairo.Region)
	// BeginResizeDragWindow:
	BeginResizeDragWindow(edge WindowEdge, button int, rootX int, rootY int, timestamp uint32)
	// BeginResizeDragForDeviceWindow:
	BeginResizeDragForDeviceWindow(edge WindowEdge, device Device, button int, rootX int, rootY int, timestamp uint32)
	// ConfigureFinishedWindow:
	ConfigureFinishedWindow()
	// CoordsFromParentWindow:
	CoordsFromParentWindow(parentX float64, parentY float64) (x float64, y float64)
	// CoordsToParentWindow:
	CoordsToParentWindow(x float64, y float64) (parentX float64, parentY float64)
	// CreateGLContextWindow:
	CreateGLContextWindow() (GLContext, error)
	// CreateSimilarImageSurfaceWindow:
	CreateSimilarImageSurfaceWindow(format cairo.Format, width int, height int, scale int) *cairo.Surface
	// CreateSimilarSurfaceWindow:
	CreateSimilarSurfaceWindow(content cairo.Content, width int, height int) *cairo.Surface
	// DeiconifyWindow:
	DeiconifyWindow()
	// DestroyWindow:
	DestroyWindow()
	// DestroyNotifyWindow:
	DestroyNotifyWindow()
	// EnableSynchronizedConfigureWindow:
	EnableSynchronizedConfigureWindow()
	// EndDrawFrameWindow:
	EndDrawFrameWindow(context DrawingContext)
	// EndPaintWindow:
	EndPaintWindow()
	// EnsureNativeWindow:
	EnsureNativeWindow() bool
	// FlushWindow:
	FlushWindow()
	// FocusWindow:
	FocusWindow(timestamp uint32)
	// FreezeToplevelUpdatesLibgtkOnlyWindow:
	FreezeToplevelUpdatesLibgtkOnlyWindow()
	// FreezeUpdatesWindow:
	FreezeUpdatesWindow()
	// FullscreenWindow:
	FullscreenWindow()
	// FullscreenOnMonitorWindow:
	FullscreenOnMonitorWindow(monitor int)
	// GeometryChangedWindow:
	GeometryChangedWindow()
	// AcceptFocus:
	AcceptFocus() bool
	// BackgroundPattern:
	BackgroundPattern() *cairo.Pattern
	// ClipRegion:
	ClipRegion() *cairo.Region
	// Composited:
	Composited() bool
	// Cursor:
	Cursor() Cursor
	// Decorations:
	Decorations() (WMDecoration, bool)
	// DeviceCursor:
	DeviceCursor(device Device) Cursor
	// DeviceEvents:
	DeviceEvents(device Device) EventMask
	// DevicePosition:
	DevicePosition(device Device) (x int, y int, mask ModifierType, ret Window)
	// DevicePositionDouble:
	DevicePositionDouble(device Device) (x float64, y float64, mask ModifierType, ret Window)
	// Display:
	Display() Display
	// DragProtocol:
	DragProtocol() (Window, DragProtocol)
	// EffectiveParent:
	EffectiveParent() Window
	// EffectiveToplevel:
	EffectiveToplevel() Window
	// EventCompression:
	EventCompression() bool
	// Events:
	Events() EventMask
	// FocusOnMap:
	FocusOnMap() bool
	// FrameClock:
	FrameClock() FrameClock
	// FrameExtents:
	FrameExtents() Rectangle
	// FullscreenMode:
	FullscreenMode() FullscreenMode
	// Geometry:
	Geometry() (x int, y int, width int, height int)
	// Group:
	Group() Window
	// Height:
	Height() int
	// ModalHint:
	ModalHint() bool
	// Origin:
	Origin() (x int, y int, gint int)
	// Parent:
	Parent() Window
	// PassThrough:
	PassThrough() bool
	// Pointer:
	Pointer() (x int, y int, mask ModifierType, ret Window)
	// Position:
	Position() (x int, y int)
	// RootCoords:
	RootCoords(x int, y int) (rootX int, rootY int)
	// RootOrigin:
	RootOrigin() (x int, y int)
	// ScaleFactor:
	ScaleFactor() int
	// Screen:
	Screen() Screen
	// SourceEvents:
	SourceEvents(source InputSource) EventMask
	// State:
	State() WindowState
	// SupportMultidevice:
	SupportMultidevice() bool
	// Toplevel:
	Toplevel() Window
	// TypeHint:
	TypeHint() WindowTypeHint
	// UpdateArea:
	UpdateArea() *cairo.Region
	// VisibleRegion:
	VisibleRegion() *cairo.Region
	// Visual:
	Visual() Visual
	// Width:
	Width() int
	// WindowType:
	WindowType() WindowType
	// HasNativeWindow:
	HasNativeWindow() bool
	// HideWindow:
	HideWindow()
	// IconifyWindow:
	IconifyWindow()
	// InputShapeCombineRegionWindow:
	InputShapeCombineRegionWindow(shapeRegion *cairo.Region, offsetX int, offsetY int)
	// InvalidateRectWindow:
	InvalidateRectWindow(rect *Rectangle, invalidateChildren bool)
	// InvalidateRegionWindow:
	InvalidateRegionWindow(region *cairo.Region, invalidateChildren bool)
	// IsDestroyedWindow:
	IsDestroyedWindow() bool
	// IsInputOnlyWindow:
	IsInputOnlyWindow() bool
	// IsShapedWindow:
	IsShapedWindow() bool
	// IsViewableWindow:
	IsViewableWindow() bool
	// IsVisibleWindow:
	IsVisibleWindow() bool
	// LowerWindow:
	LowerWindow()
	// MarkPaintFromClipWindow:
	MarkPaintFromClipWindow(cr *cairo.Context)
	// MaximizeWindow:
	MaximizeWindow()
	// MergeChildInputShapesWindow:
	MergeChildInputShapesWindow()
	// MergeChildShapesWindow:
	MergeChildShapesWindow()
	// MoveWindow:
	MoveWindow(x int, y int)
	// MoveRegionWindow:
	MoveRegionWindow(region *cairo.Region, dx int, dy int)
	// MoveResizeWindow:
	MoveResizeWindow(x int, y int, width int, height int)
	// MoveToRectWindow:
	MoveToRectWindow(rect *Rectangle, rectAnchor Gravity, windowAnchor Gravity, anchorHints AnchorHints, rectAnchorDx int, rectAnchorDy int)
	// ProcessUpdatesWindow:
	ProcessUpdatesWindow(updateChildren bool)
	// RaiseWindow:
	RaiseWindow()
	// RegisterDndWindow:
	RegisterDndWindow()
	// ReparentWindow:
	ReparentWindow(newParent Window, x int, y int)
	// ResizeWindow:
	ResizeWindow(width int, height int)
	// RestackWindow:
	RestackWindow(sibling Window, above bool)
	// ScrollWindow:
	ScrollWindow(dx int, dy int)
	// SetAcceptFocusWindow:
	SetAcceptFocusWindow(acceptFocus bool)
	// SetBackgroundWindow:
	SetBackgroundWindow(color *Color)
	// SetBackgroundPatternWindow:
	SetBackgroundPatternWindow(pattern *cairo.Pattern)
	// SetBackgroundRGBAWindow:
	SetBackgroundRGBAWindow(rgba *RGBA)
	// SetChildInputShapesWindow:
	SetChildInputShapesWindow()
	// SetChildShapesWindow:
	SetChildShapesWindow()
	// SetCompositedWindow:
	SetCompositedWindow(composited bool)
	// SetCursorWindow:
	SetCursorWindow(cursor Cursor)
	// SetDecorationsWindow:
	SetDecorationsWindow(decorations WMDecoration)
	// SetDeviceCursorWindow:
	SetDeviceCursorWindow(device Device, cursor Cursor)
	// SetDeviceEventsWindow:
	SetDeviceEventsWindow(device Device, eventMask EventMask)
	// SetEventCompressionWindow:
	SetEventCompressionWindow(eventCompression bool)
	// SetEventsWindow:
	SetEventsWindow(eventMask EventMask)
	// SetFocusOnMapWindow:
	SetFocusOnMapWindow(focusOnMap bool)
	// SetFullscreenModeWindow:
	SetFullscreenModeWindow(mode FullscreenMode)
	// SetFunctionsWindow:
	SetFunctionsWindow(functions WMFunction)
	// SetGeometryHintsWindow:
	SetGeometryHintsWindow(geometry *Geometry, geomMask WindowHints)
	// SetGroupWindow:
	SetGroupWindow(leader Window)
	// SetIconNameWindow:
	SetIconNameWindow(name string)
	// SetKeepAboveWindow:
	SetKeepAboveWindow(setting bool)
	// SetKeepBelowWindow:
	SetKeepBelowWindow(setting bool)
	// SetModalHintWindow:
	SetModalHintWindow(modal bool)
	// SetOpacityWindow:
	SetOpacityWindow(opacity float64)
	// SetOpaqueRegionWindow:
	SetOpaqueRegionWindow(region *cairo.Region)
	// SetOverrideRedirectWindow:
	SetOverrideRedirectWindow(overrideRedirect bool)
	// SetPassThroughWindow:
	SetPassThroughWindow(passThrough bool)
	// SetRoleWindow:
	SetRoleWindow(role string)
	// SetShadowWidthWindow:
	SetShadowWidthWindow(left int, right int, top int, bottom int)
	// SetSkipPagerHintWindow:
	SetSkipPagerHintWindow(skipsPager bool)
	// SetSkipTaskbarHintWindow:
	SetSkipTaskbarHintWindow(skipsTaskbar bool)
	// SetSourceEventsWindow:
	SetSourceEventsWindow(source InputSource, eventMask EventMask)
	// SetStartupIDWindow:
	SetStartupIDWindow(startupId string)
	// SetStaticGravitiesWindow:
	SetStaticGravitiesWindow(useStatic bool) bool
	// SetSupportMultideviceWindow:
	SetSupportMultideviceWindow(supportMultidevice bool)
	// SetTitleWindow:
	SetTitleWindow(title string)
	// SetTransientForWindow:
	SetTransientForWindow(parent Window)
	// SetTypeHintWindow:
	SetTypeHintWindow(hint WindowTypeHint)
	// SetUrgencyHintWindow:
	SetUrgencyHintWindow(urgent bool)
	// SetUserDataWindow:
	SetUserDataWindow(userData gextras.Objector)
	// ShapeCombineRegionWindow:
	ShapeCombineRegionWindow(shapeRegion *cairo.Region, offsetX int, offsetY int)
	// ShowWindow:
	ShowWindow()
	// ShowUnraisedWindow:
	ShowUnraisedWindow()
	// StickWindow:
	StickWindow()
	// ThawToplevelUpdatesLibgtkOnlyWindow:
	ThawToplevelUpdatesLibgtkOnlyWindow()
	// ThawUpdatesWindow:
	ThawUpdatesWindow()
	// UnfullscreenWindow:
	UnfullscreenWindow()
	// UnmaximizeWindow:
	UnmaximizeWindow()
	// UnstickWindow:
	UnstickWindow()
	// WithdrawWindow:
	WithdrawWindow()
}

// window implements the Window class.
type window struct {
	gextras.Objector
}

// WrapWindow wraps a GObject to the right type. It is
// primarily used internally.
func WrapWindow(obj *externglib.Object) Window {
	return window{
		Objector: obj,
	}
}

func marshalWindow(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapWindow(obj), nil
}

// NewWindow:
func NewWindow(parent Window, attributes *WindowAttr, attributesMask WindowAttributesType) Window {
	var _arg1 *C.GdkWindow     // out
	var _arg2 *C.GdkWindowAttr // out
	var _arg3 C.gint           // out
	var _cret *C.GdkWindow     // in

	_arg1 = (*C.GdkWindow)(unsafe.Pointer(parent.Native()))
	_arg2 = (*C.GdkWindowAttr)(unsafe.Pointer(attributes.Native()))
	_arg3 = C.gint(attributesMask)

	_cret = C.gdk_window_new(_arg1, _arg2, _arg3)

	var _window Window // out

	_window = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(Window)

	return _window
}

func (w window) BeepWindow() {
	var _arg0 *C.GdkWindow // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))

	C.gdk_window_beep(_arg0)
}

func (w window) BeginDrawFrameWindow(region *cairo.Region) DrawingContext {
	var _arg0 *C.GdkWindow         // out
	var _arg1 *C.cairo_region_t    // out
	var _cret *C.GdkDrawingContext // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.cairo_region_t)(unsafe.Pointer(region.Native()))

	_cret = C.gdk_window_begin_draw_frame(_arg0, _arg1)

	var _drawingContext DrawingContext // out

	_drawingContext = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(DrawingContext)

	return _drawingContext
}

func (w window) BeginMoveDragWindow(button int, rootX int, rootY int, timestamp uint32) {
	var _arg0 *C.GdkWindow // out
	var _arg1 C.gint       // out
	var _arg2 C.gint       // out
	var _arg3 C.gint       // out
	var _arg4 C.guint32    // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	_arg1 = C.gint(button)
	_arg2 = C.gint(rootX)
	_arg3 = C.gint(rootY)
	_arg4 = C.guint32(timestamp)

	C.gdk_window_begin_move_drag(_arg0, _arg1, _arg2, _arg3, _arg4)
}

func (w window) BeginMoveDragForDeviceWindow(device Device, button int, rootX int, rootY int, timestamp uint32) {
	var _arg0 *C.GdkWindow // out
	var _arg1 *C.GdkDevice // out
	var _arg2 C.gint       // out
	var _arg3 C.gint       // out
	var _arg4 C.gint       // out
	var _arg5 C.guint32    // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GdkDevice)(unsafe.Pointer(device.Native()))
	_arg2 = C.gint(button)
	_arg3 = C.gint(rootX)
	_arg4 = C.gint(rootY)
	_arg5 = C.guint32(timestamp)

	C.gdk_window_begin_move_drag_for_device(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
}

func (w window) BeginPaintRectWindow(rectangle *Rectangle) {
	var _arg0 *C.GdkWindow    // out
	var _arg1 *C.GdkRectangle // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GdkRectangle)(unsafe.Pointer(rectangle.Native()))

	C.gdk_window_begin_paint_rect(_arg0, _arg1)
}

func (w window) BeginPaintRegionWindow(region *cairo.Region) {
	var _arg0 *C.GdkWindow      // out
	var _arg1 *C.cairo_region_t // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.cairo_region_t)(unsafe.Pointer(region.Native()))

	C.gdk_window_begin_paint_region(_arg0, _arg1)
}

func (w window) BeginResizeDragWindow(edge WindowEdge, button int, rootX int, rootY int, timestamp uint32) {
	var _arg0 *C.GdkWindow    // out
	var _arg1 C.GdkWindowEdge // out
	var _arg2 C.gint          // out
	var _arg3 C.gint          // out
	var _arg4 C.gint          // out
	var _arg5 C.guint32       // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	_arg1 = C.GdkWindowEdge(edge)
	_arg2 = C.gint(button)
	_arg3 = C.gint(rootX)
	_arg4 = C.gint(rootY)
	_arg5 = C.guint32(timestamp)

	C.gdk_window_begin_resize_drag(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
}

func (w window) BeginResizeDragForDeviceWindow(edge WindowEdge, device Device, button int, rootX int, rootY int, timestamp uint32) {
	var _arg0 *C.GdkWindow    // out
	var _arg1 C.GdkWindowEdge // out
	var _arg2 *C.GdkDevice    // out
	var _arg3 C.gint          // out
	var _arg4 C.gint          // out
	var _arg5 C.gint          // out
	var _arg6 C.guint32       // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	_arg1 = C.GdkWindowEdge(edge)
	_arg2 = (*C.GdkDevice)(unsafe.Pointer(device.Native()))
	_arg3 = C.gint(button)
	_arg4 = C.gint(rootX)
	_arg5 = C.gint(rootY)
	_arg6 = C.guint32(timestamp)

	C.gdk_window_begin_resize_drag_for_device(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6)
}

func (w window) ConfigureFinishedWindow() {
	var _arg0 *C.GdkWindow // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))

	C.gdk_window_configure_finished(_arg0)
}

func (w window) CoordsFromParentWindow(parentX float64, parentY float64) (x float64, y float64) {
	var _arg0 *C.GdkWindow // out
	var _arg1 C.gdouble    // out
	var _arg2 C.gdouble    // out
	var _arg3 C.gdouble    // in
	var _arg4 C.gdouble    // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	_arg1 = C.gdouble(parentX)
	_arg2 = C.gdouble(parentY)

	C.gdk_window_coords_from_parent(_arg0, _arg1, _arg2, &_arg3, &_arg4)

	var _x float64 // out
	var _y float64 // out

	_x = float64(_arg3)
	_y = float64(_arg4)

	return _x, _y
}

func (w window) CoordsToParentWindow(x float64, y float64) (parentX float64, parentY float64) {
	var _arg0 *C.GdkWindow // out
	var _arg1 C.gdouble    // out
	var _arg2 C.gdouble    // out
	var _arg3 C.gdouble    // in
	var _arg4 C.gdouble    // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	_arg1 = C.gdouble(x)
	_arg2 = C.gdouble(y)

	C.gdk_window_coords_to_parent(_arg0, _arg1, _arg2, &_arg3, &_arg4)

	var _parentX float64 // out
	var _parentY float64 // out

	_parentX = float64(_arg3)
	_parentY = float64(_arg4)

	return _parentX, _parentY
}

func (w window) CreateGLContextWindow() (GLContext, error) {
	var _arg0 *C.GdkWindow    // out
	var _cret *C.GdkGLContext // in
	var _cerr *C.GError       // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))

	_cret = C.gdk_window_create_gl_context(_arg0, &_cerr)

	var _glContext GLContext // out
	var _goerr error         // out

	_glContext = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(GLContext)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _glContext, _goerr
}

func (w window) CreateSimilarImageSurfaceWindow(format cairo.Format, width int, height int, scale int) *cairo.Surface {
	var _arg0 *C.GdkWindow       // out
	var _arg1 C.cairo_format_t   // out
	var _arg2 C.int              // out
	var _arg3 C.int              // out
	var _arg4 C.int              // out
	var _cret *C.cairo_surface_t // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	_arg1 = C.cairo_format_t(format)
	_arg2 = C.int(width)
	_arg3 = C.int(height)
	_arg4 = C.int(scale)

	_cret = C.gdk_window_create_similar_image_surface(_arg0, _arg1, _arg2, _arg3, _arg4)

	var _surface *cairo.Surface // out

	_surface = (*cairo.Surface)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(&_surface, func(v **cairo.Surface) {
		C.free(unsafe.Pointer(v))
	})

	return _surface
}

func (w window) CreateSimilarSurfaceWindow(content cairo.Content, width int, height int) *cairo.Surface {
	var _arg0 *C.GdkWindow       // out
	var _arg1 C.cairo_content_t  // out
	var _arg2 C.int              // out
	var _arg3 C.int              // out
	var _cret *C.cairo_surface_t // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	_arg1 = C.cairo_content_t(content)
	_arg2 = C.int(width)
	_arg3 = C.int(height)

	_cret = C.gdk_window_create_similar_surface(_arg0, _arg1, _arg2, _arg3)

	var _surface *cairo.Surface // out

	_surface = (*cairo.Surface)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(&_surface, func(v **cairo.Surface) {
		C.free(unsafe.Pointer(v))
	})

	return _surface
}

func (w window) DeiconifyWindow() {
	var _arg0 *C.GdkWindow // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))

	C.gdk_window_deiconify(_arg0)
}

func (w window) DestroyWindow() {
	var _arg0 *C.GdkWindow // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))

	C.gdk_window_destroy(_arg0)
}

func (w window) DestroyNotifyWindow() {
	var _arg0 *C.GdkWindow // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))

	C.gdk_window_destroy_notify(_arg0)
}

func (w window) EnableSynchronizedConfigureWindow() {
	var _arg0 *C.GdkWindow // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))

	C.gdk_window_enable_synchronized_configure(_arg0)
}

func (w window) EndDrawFrameWindow(context DrawingContext) {
	var _arg0 *C.GdkWindow         // out
	var _arg1 *C.GdkDrawingContext // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GdkDrawingContext)(unsafe.Pointer(context.Native()))

	C.gdk_window_end_draw_frame(_arg0, _arg1)
}

func (w window) EndPaintWindow() {
	var _arg0 *C.GdkWindow // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))

	C.gdk_window_end_paint(_arg0)
}

func (w window) EnsureNativeWindow() bool {
	var _arg0 *C.GdkWindow // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))

	_cret = C.gdk_window_ensure_native(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w window) FlushWindow() {
	var _arg0 *C.GdkWindow // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))

	C.gdk_window_flush(_arg0)
}

func (w window) FocusWindow(timestamp uint32) {
	var _arg0 *C.GdkWindow // out
	var _arg1 C.guint32    // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	_arg1 = C.guint32(timestamp)

	C.gdk_window_focus(_arg0, _arg1)
}

func (w window) FreezeToplevelUpdatesLibgtkOnlyWindow() {
	var _arg0 *C.GdkWindow // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))

	C.gdk_window_freeze_toplevel_updates_libgtk_only(_arg0)
}

func (w window) FreezeUpdatesWindow() {
	var _arg0 *C.GdkWindow // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))

	C.gdk_window_freeze_updates(_arg0)
}

func (w window) FullscreenWindow() {
	var _arg0 *C.GdkWindow // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))

	C.gdk_window_fullscreen(_arg0)
}

func (w window) FullscreenOnMonitorWindow(monitor int) {
	var _arg0 *C.GdkWindow // out
	var _arg1 C.gint       // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	_arg1 = C.gint(monitor)

	C.gdk_window_fullscreen_on_monitor(_arg0, _arg1)
}

func (w window) GeometryChangedWindow() {
	var _arg0 *C.GdkWindow // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))

	C.gdk_window_geometry_changed(_arg0)
}

func (w window) AcceptFocus() bool {
	var _arg0 *C.GdkWindow // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))

	_cret = C.gdk_window_get_accept_focus(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w window) BackgroundPattern() *cairo.Pattern {
	var _arg0 *C.GdkWindow       // out
	var _cret *C.cairo_pattern_t // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))

	_cret = C.gdk_window_get_background_pattern(_arg0)

	var _pattern *cairo.Pattern // out

	_pattern = (*cairo.Pattern)(unsafe.Pointer(_cret))

	return _pattern
}

func (w window) ClipRegion() *cairo.Region {
	var _arg0 *C.GdkWindow      // out
	var _cret *C.cairo_region_t // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))

	_cret = C.gdk_window_get_clip_region(_arg0)

	var _region *cairo.Region // out

	_region = (*cairo.Region)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(&_region, func(v **cairo.Region) {
		C.free(unsafe.Pointer(v))
	})

	return _region
}

func (w window) Composited() bool {
	var _arg0 *C.GdkWindow // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))

	_cret = C.gdk_window_get_composited(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w window) Cursor() Cursor {
	var _arg0 *C.GdkWindow // out
	var _cret *C.GdkCursor // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))

	_cret = C.gdk_window_get_cursor(_arg0)

	var _cursor Cursor // out

	_cursor = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Cursor)

	return _cursor
}

func (w window) Decorations() (WMDecoration, bool) {
	var _arg0 *C.GdkWindow      // out
	var _arg1 C.GdkWMDecoration // in
	var _cret C.gboolean        // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))

	_cret = C.gdk_window_get_decorations(_arg0, &_arg1)

	var _decorations WMDecoration // out
	var _ok bool                  // out

	_decorations = WMDecoration(_arg1)
	if _cret != 0 {
		_ok = true
	}

	return _decorations, _ok
}

func (w window) DeviceCursor(device Device) Cursor {
	var _arg0 *C.GdkWindow // out
	var _arg1 *C.GdkDevice // out
	var _cret *C.GdkCursor // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GdkDevice)(unsafe.Pointer(device.Native()))

	_cret = C.gdk_window_get_device_cursor(_arg0, _arg1)

	var _cursor Cursor // out

	_cursor = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Cursor)

	return _cursor
}

func (w window) DeviceEvents(device Device) EventMask {
	var _arg0 *C.GdkWindow   // out
	var _arg1 *C.GdkDevice   // out
	var _cret C.GdkEventMask // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GdkDevice)(unsafe.Pointer(device.Native()))

	_cret = C.gdk_window_get_device_events(_arg0, _arg1)

	var _eventMask EventMask // out

	_eventMask = EventMask(_cret)

	return _eventMask
}

func (w window) DevicePosition(device Device) (x int, y int, mask ModifierType, ret Window) {
	var _arg0 *C.GdkWindow      // out
	var _arg1 *C.GdkDevice      // out
	var _arg2 C.gint            // in
	var _arg3 C.gint            // in
	var _arg4 C.GdkModifierType // in
	var _cret *C.GdkWindow      // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GdkDevice)(unsafe.Pointer(device.Native()))

	_cret = C.gdk_window_get_device_position(_arg0, _arg1, &_arg2, &_arg3, &_arg4)

	var _x int             // out
	var _y int             // out
	var _mask ModifierType // out
	var _ret Window        // out

	_x = int(_arg2)
	_y = int(_arg3)
	_mask = ModifierType(_arg4)
	_ret = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Window)

	return _x, _y, _mask, _ret
}

func (w window) DevicePositionDouble(device Device) (x float64, y float64, mask ModifierType, ret Window) {
	var _arg0 *C.GdkWindow      // out
	var _arg1 *C.GdkDevice      // out
	var _arg2 C.gdouble         // in
	var _arg3 C.gdouble         // in
	var _arg4 C.GdkModifierType // in
	var _cret *C.GdkWindow      // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GdkDevice)(unsafe.Pointer(device.Native()))

	_cret = C.gdk_window_get_device_position_double(_arg0, _arg1, &_arg2, &_arg3, &_arg4)

	var _x float64         // out
	var _y float64         // out
	var _mask ModifierType // out
	var _ret Window        // out

	_x = float64(_arg2)
	_y = float64(_arg3)
	_mask = ModifierType(_arg4)
	_ret = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Window)

	return _x, _y, _mask, _ret
}

func (w window) Display() Display {
	var _arg0 *C.GdkWindow  // out
	var _cret *C.GdkDisplay // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))

	_cret = C.gdk_window_get_display(_arg0)

	var _display Display // out

	_display = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Display)

	return _display
}

func (w window) DragProtocol() (Window, DragProtocol) {
	var _arg0 *C.GdkWindow      // out
	var _arg1 *C.GdkWindow      // in
	var _cret C.GdkDragProtocol // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))

	_cret = C.gdk_window_get_drag_protocol(_arg0, &_arg1)

	var _target Window             // out
	var _dragProtocol DragProtocol // out

	_target = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_arg1))).(Window)
	_dragProtocol = DragProtocol(_cret)

	return _target, _dragProtocol
}

func (w window) EffectiveParent() Window {
	var _arg0 *C.GdkWindow // out
	var _cret *C.GdkWindow // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))

	_cret = C.gdk_window_get_effective_parent(_arg0)

	var _ret Window // out

	_ret = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Window)

	return _ret
}

func (w window) EffectiveToplevel() Window {
	var _arg0 *C.GdkWindow // out
	var _cret *C.GdkWindow // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))

	_cret = C.gdk_window_get_effective_toplevel(_arg0)

	var _ret Window // out

	_ret = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Window)

	return _ret
}

func (w window) EventCompression() bool {
	var _arg0 *C.GdkWindow // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))

	_cret = C.gdk_window_get_event_compression(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w window) Events() EventMask {
	var _arg0 *C.GdkWindow   // out
	var _cret C.GdkEventMask // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))

	_cret = C.gdk_window_get_events(_arg0)

	var _eventMask EventMask // out

	_eventMask = EventMask(_cret)

	return _eventMask
}

func (w window) FocusOnMap() bool {
	var _arg0 *C.GdkWindow // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))

	_cret = C.gdk_window_get_focus_on_map(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w window) FrameClock() FrameClock {
	var _arg0 *C.GdkWindow     // out
	var _cret *C.GdkFrameClock // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))

	_cret = C.gdk_window_get_frame_clock(_arg0)

	var _frameClock FrameClock // out

	_frameClock = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(FrameClock)

	return _frameClock
}

func (w window) FrameExtents() Rectangle {
	var _arg0 *C.GdkWindow   // out
	var _arg1 C.GdkRectangle // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))

	C.gdk_window_get_frame_extents(_arg0, &_arg1)

	var _rect Rectangle // out

	{
		var refTmpIn *C.GdkRectangle
		var refTmpOut *Rectangle

		in0 := &_arg1
		refTmpIn = in0

		refTmpOut = (*Rectangle)(unsafe.Pointer(refTmpIn))

		_rect = *refTmpOut
	}

	return _rect
}

func (w window) FullscreenMode() FullscreenMode {
	var _arg0 *C.GdkWindow        // out
	var _cret C.GdkFullscreenMode // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))

	_cret = C.gdk_window_get_fullscreen_mode(_arg0)

	var _fullscreenMode FullscreenMode // out

	_fullscreenMode = FullscreenMode(_cret)

	return _fullscreenMode
}

func (w window) Geometry() (x int, y int, width int, height int) {
	var _arg0 *C.GdkWindow // out
	var _arg1 C.gint       // in
	var _arg2 C.gint       // in
	var _arg3 C.gint       // in
	var _arg4 C.gint       // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))

	C.gdk_window_get_geometry(_arg0, &_arg1, &_arg2, &_arg3, &_arg4)

	var _x int      // out
	var _y int      // out
	var _width int  // out
	var _height int // out

	_x = int(_arg1)
	_y = int(_arg2)
	_width = int(_arg3)
	_height = int(_arg4)

	return _x, _y, _width, _height
}

func (w window) Group() Window {
	var _arg0 *C.GdkWindow // out
	var _cret *C.GdkWindow // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))

	_cret = C.gdk_window_get_group(_arg0)

	var _ret Window // out

	_ret = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Window)

	return _ret
}

func (w window) Height() int {
	var _arg0 *C.GdkWindow // out
	var _cret C.int        // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))

	_cret = C.gdk_window_get_height(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (w window) ModalHint() bool {
	var _arg0 *C.GdkWindow // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))

	_cret = C.gdk_window_get_modal_hint(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w window) Origin() (x int, y int, gint int) {
	var _arg0 *C.GdkWindow // out
	var _arg1 C.gint       // in
	var _arg2 C.gint       // in
	var _cret C.gint       // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))

	_cret = C.gdk_window_get_origin(_arg0, &_arg1, &_arg2)

	var _x int    // out
	var _y int    // out
	var _gint int // out

	_x = int(_arg1)
	_y = int(_arg2)
	_gint = int(_cret)

	return _x, _y, _gint
}

func (w window) Parent() Window {
	var _arg0 *C.GdkWindow // out
	var _cret *C.GdkWindow // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))

	_cret = C.gdk_window_get_parent(_arg0)

	var _ret Window // out

	_ret = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Window)

	return _ret
}

func (w window) PassThrough() bool {
	var _arg0 *C.GdkWindow // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))

	_cret = C.gdk_window_get_pass_through(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w window) Pointer() (x int, y int, mask ModifierType, ret Window) {
	var _arg0 *C.GdkWindow      // out
	var _arg1 C.gint            // in
	var _arg2 C.gint            // in
	var _arg3 C.GdkModifierType // in
	var _cret *C.GdkWindow      // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))

	_cret = C.gdk_window_get_pointer(_arg0, &_arg1, &_arg2, &_arg3)

	var _x int             // out
	var _y int             // out
	var _mask ModifierType // out
	var _ret Window        // out

	_x = int(_arg1)
	_y = int(_arg2)
	_mask = ModifierType(_arg3)
	_ret = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Window)

	return _x, _y, _mask, _ret
}

func (w window) Position() (x int, y int) {
	var _arg0 *C.GdkWindow // out
	var _arg1 C.gint       // in
	var _arg2 C.gint       // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))

	C.gdk_window_get_position(_arg0, &_arg1, &_arg2)

	var _x int // out
	var _y int // out

	_x = int(_arg1)
	_y = int(_arg2)

	return _x, _y
}

func (w window) RootCoords(x int, y int) (rootX int, rootY int) {
	var _arg0 *C.GdkWindow // out
	var _arg1 C.gint       // out
	var _arg2 C.gint       // out
	var _arg3 C.gint       // in
	var _arg4 C.gint       // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	_arg1 = C.gint(x)
	_arg2 = C.gint(y)

	C.gdk_window_get_root_coords(_arg0, _arg1, _arg2, &_arg3, &_arg4)

	var _rootX int // out
	var _rootY int // out

	_rootX = int(_arg3)
	_rootY = int(_arg4)

	return _rootX, _rootY
}

func (w window) RootOrigin() (x int, y int) {
	var _arg0 *C.GdkWindow // out
	var _arg1 C.gint       // in
	var _arg2 C.gint       // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))

	C.gdk_window_get_root_origin(_arg0, &_arg1, &_arg2)

	var _x int // out
	var _y int // out

	_x = int(_arg1)
	_y = int(_arg2)

	return _x, _y
}

func (w window) ScaleFactor() int {
	var _arg0 *C.GdkWindow // out
	var _cret C.gint       // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))

	_cret = C.gdk_window_get_scale_factor(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (w window) Screen() Screen {
	var _arg0 *C.GdkWindow // out
	var _cret *C.GdkScreen // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))

	_cret = C.gdk_window_get_screen(_arg0)

	var _screen Screen // out

	_screen = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Screen)

	return _screen
}

func (w window) SourceEvents(source InputSource) EventMask {
	var _arg0 *C.GdkWindow     // out
	var _arg1 C.GdkInputSource // out
	var _cret C.GdkEventMask   // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	_arg1 = C.GdkInputSource(source)

	_cret = C.gdk_window_get_source_events(_arg0, _arg1)

	var _eventMask EventMask // out

	_eventMask = EventMask(_cret)

	return _eventMask
}

func (w window) State() WindowState {
	var _arg0 *C.GdkWindow     // out
	var _cret C.GdkWindowState // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))

	_cret = C.gdk_window_get_state(_arg0)

	var _windowState WindowState // out

	_windowState = WindowState(_cret)

	return _windowState
}

func (w window) SupportMultidevice() bool {
	var _arg0 *C.GdkWindow // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))

	_cret = C.gdk_window_get_support_multidevice(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w window) Toplevel() Window {
	var _arg0 *C.GdkWindow // out
	var _cret *C.GdkWindow // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))

	_cret = C.gdk_window_get_toplevel(_arg0)

	var _ret Window // out

	_ret = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Window)

	return _ret
}

func (w window) TypeHint() WindowTypeHint {
	var _arg0 *C.GdkWindow        // out
	var _cret C.GdkWindowTypeHint // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))

	_cret = C.gdk_window_get_type_hint(_arg0)

	var _windowTypeHint WindowTypeHint // out

	_windowTypeHint = WindowTypeHint(_cret)

	return _windowTypeHint
}

func (w window) UpdateArea() *cairo.Region {
	var _arg0 *C.GdkWindow      // out
	var _cret *C.cairo_region_t // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))

	_cret = C.gdk_window_get_update_area(_arg0)

	var _region *cairo.Region // out

	_region = (*cairo.Region)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(&_region, func(v **cairo.Region) {
		C.free(unsafe.Pointer(v))
	})

	return _region
}

func (w window) VisibleRegion() *cairo.Region {
	var _arg0 *C.GdkWindow      // out
	var _cret *C.cairo_region_t // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))

	_cret = C.gdk_window_get_visible_region(_arg0)

	var _region *cairo.Region // out

	_region = (*cairo.Region)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(&_region, func(v **cairo.Region) {
		C.free(unsafe.Pointer(v))
	})

	return _region
}

func (w window) Visual() Visual {
	var _arg0 *C.GdkWindow // out
	var _cret *C.GdkVisual // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))

	_cret = C.gdk_window_get_visual(_arg0)

	var _visual Visual // out

	_visual = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Visual)

	return _visual
}

func (w window) Width() int {
	var _arg0 *C.GdkWindow // out
	var _cret C.int        // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))

	_cret = C.gdk_window_get_width(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (w window) WindowType() WindowType {
	var _arg0 *C.GdkWindow    // out
	var _cret C.GdkWindowType // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))

	_cret = C.gdk_window_get_window_type(_arg0)

	var _windowType WindowType // out

	_windowType = WindowType(_cret)

	return _windowType
}

func (w window) HasNativeWindow() bool {
	var _arg0 *C.GdkWindow // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))

	_cret = C.gdk_window_has_native(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w window) HideWindow() {
	var _arg0 *C.GdkWindow // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))

	C.gdk_window_hide(_arg0)
}

func (w window) IconifyWindow() {
	var _arg0 *C.GdkWindow // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))

	C.gdk_window_iconify(_arg0)
}

func (w window) InputShapeCombineRegionWindow(shapeRegion *cairo.Region, offsetX int, offsetY int) {
	var _arg0 *C.GdkWindow      // out
	var _arg1 *C.cairo_region_t // out
	var _arg2 C.gint            // out
	var _arg3 C.gint            // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.cairo_region_t)(unsafe.Pointer(shapeRegion.Native()))
	_arg2 = C.gint(offsetX)
	_arg3 = C.gint(offsetY)

	C.gdk_window_input_shape_combine_region(_arg0, _arg1, _arg2, _arg3)
}

func (w window) InvalidateRectWindow(rect *Rectangle, invalidateChildren bool) {
	var _arg0 *C.GdkWindow    // out
	var _arg1 *C.GdkRectangle // out
	var _arg2 C.gboolean      // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GdkRectangle)(unsafe.Pointer(rect.Native()))
	if invalidateChildren {
		_arg2 = C.TRUE
	}

	C.gdk_window_invalidate_rect(_arg0, _arg1, _arg2)
}

func (w window) InvalidateRegionWindow(region *cairo.Region, invalidateChildren bool) {
	var _arg0 *C.GdkWindow      // out
	var _arg1 *C.cairo_region_t // out
	var _arg2 C.gboolean        // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.cairo_region_t)(unsafe.Pointer(region.Native()))
	if invalidateChildren {
		_arg2 = C.TRUE
	}

	C.gdk_window_invalidate_region(_arg0, _arg1, _arg2)
}

func (w window) IsDestroyedWindow() bool {
	var _arg0 *C.GdkWindow // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))

	_cret = C.gdk_window_is_destroyed(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w window) IsInputOnlyWindow() bool {
	var _arg0 *C.GdkWindow // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))

	_cret = C.gdk_window_is_input_only(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w window) IsShapedWindow() bool {
	var _arg0 *C.GdkWindow // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))

	_cret = C.gdk_window_is_shaped(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w window) IsViewableWindow() bool {
	var _arg0 *C.GdkWindow // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))

	_cret = C.gdk_window_is_viewable(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w window) IsVisibleWindow() bool {
	var _arg0 *C.GdkWindow // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))

	_cret = C.gdk_window_is_visible(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w window) LowerWindow() {
	var _arg0 *C.GdkWindow // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))

	C.gdk_window_lower(_arg0)
}

func (w window) MarkPaintFromClipWindow(cr *cairo.Context) {
	var _arg0 *C.GdkWindow // out
	var _arg1 *C.cairo_t   // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.cairo_t)(unsafe.Pointer(cr.Native()))

	C.gdk_window_mark_paint_from_clip(_arg0, _arg1)
}

func (w window) MaximizeWindow() {
	var _arg0 *C.GdkWindow // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))

	C.gdk_window_maximize(_arg0)
}

func (w window) MergeChildInputShapesWindow() {
	var _arg0 *C.GdkWindow // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))

	C.gdk_window_merge_child_input_shapes(_arg0)
}

func (w window) MergeChildShapesWindow() {
	var _arg0 *C.GdkWindow // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))

	C.gdk_window_merge_child_shapes(_arg0)
}

func (w window) MoveWindow(x int, y int) {
	var _arg0 *C.GdkWindow // out
	var _arg1 C.gint       // out
	var _arg2 C.gint       // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	_arg1 = C.gint(x)
	_arg2 = C.gint(y)

	C.gdk_window_move(_arg0, _arg1, _arg2)
}

func (w window) MoveRegionWindow(region *cairo.Region, dx int, dy int) {
	var _arg0 *C.GdkWindow      // out
	var _arg1 *C.cairo_region_t // out
	var _arg2 C.gint            // out
	var _arg3 C.gint            // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.cairo_region_t)(unsafe.Pointer(region.Native()))
	_arg2 = C.gint(dx)
	_arg3 = C.gint(dy)

	C.gdk_window_move_region(_arg0, _arg1, _arg2, _arg3)
}

func (w window) MoveResizeWindow(x int, y int, width int, height int) {
	var _arg0 *C.GdkWindow // out
	var _arg1 C.gint       // out
	var _arg2 C.gint       // out
	var _arg3 C.gint       // out
	var _arg4 C.gint       // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	_arg1 = C.gint(x)
	_arg2 = C.gint(y)
	_arg3 = C.gint(width)
	_arg4 = C.gint(height)

	C.gdk_window_move_resize(_arg0, _arg1, _arg2, _arg3, _arg4)
}

func (w window) MoveToRectWindow(rect *Rectangle, rectAnchor Gravity, windowAnchor Gravity, anchorHints AnchorHints, rectAnchorDx int, rectAnchorDy int) {
	var _arg0 *C.GdkWindow     // out
	var _arg1 *C.GdkRectangle  // out
	var _arg2 C.GdkGravity     // out
	var _arg3 C.GdkGravity     // out
	var _arg4 C.GdkAnchorHints // out
	var _arg5 C.gint           // out
	var _arg6 C.gint           // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GdkRectangle)(unsafe.Pointer(rect.Native()))
	_arg2 = C.GdkGravity(rectAnchor)
	_arg3 = C.GdkGravity(windowAnchor)
	_arg4 = C.GdkAnchorHints(anchorHints)
	_arg5 = C.gint(rectAnchorDx)
	_arg6 = C.gint(rectAnchorDy)

	C.gdk_window_move_to_rect(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6)
}

func (w window) ProcessUpdatesWindow(updateChildren bool) {
	var _arg0 *C.GdkWindow // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	if updateChildren {
		_arg1 = C.TRUE
	}

	C.gdk_window_process_updates(_arg0, _arg1)
}

func (w window) RaiseWindow() {
	var _arg0 *C.GdkWindow // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))

	C.gdk_window_raise(_arg0)
}

func (w window) RegisterDndWindow() {
	var _arg0 *C.GdkWindow // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))

	C.gdk_window_register_dnd(_arg0)
}

func (w window) ReparentWindow(newParent Window, x int, y int) {
	var _arg0 *C.GdkWindow // out
	var _arg1 *C.GdkWindow // out
	var _arg2 C.gint       // out
	var _arg3 C.gint       // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GdkWindow)(unsafe.Pointer(newParent.Native()))
	_arg2 = C.gint(x)
	_arg3 = C.gint(y)

	C.gdk_window_reparent(_arg0, _arg1, _arg2, _arg3)
}

func (w window) ResizeWindow(width int, height int) {
	var _arg0 *C.GdkWindow // out
	var _arg1 C.gint       // out
	var _arg2 C.gint       // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	_arg1 = C.gint(width)
	_arg2 = C.gint(height)

	C.gdk_window_resize(_arg0, _arg1, _arg2)
}

func (w window) RestackWindow(sibling Window, above bool) {
	var _arg0 *C.GdkWindow // out
	var _arg1 *C.GdkWindow // out
	var _arg2 C.gboolean   // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GdkWindow)(unsafe.Pointer(sibling.Native()))
	if above {
		_arg2 = C.TRUE
	}

	C.gdk_window_restack(_arg0, _arg1, _arg2)
}

func (w window) ScrollWindow(dx int, dy int) {
	var _arg0 *C.GdkWindow // out
	var _arg1 C.gint       // out
	var _arg2 C.gint       // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	_arg1 = C.gint(dx)
	_arg2 = C.gint(dy)

	C.gdk_window_scroll(_arg0, _arg1, _arg2)
}

func (w window) SetAcceptFocusWindow(acceptFocus bool) {
	var _arg0 *C.GdkWindow // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	if acceptFocus {
		_arg1 = C.TRUE
	}

	C.gdk_window_set_accept_focus(_arg0, _arg1)
}

func (w window) SetBackgroundWindow(color *Color) {
	var _arg0 *C.GdkWindow // out
	var _arg1 *C.GdkColor  // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GdkColor)(unsafe.Pointer(color.Native()))

	C.gdk_window_set_background(_arg0, _arg1)
}

func (w window) SetBackgroundPatternWindow(pattern *cairo.Pattern) {
	var _arg0 *C.GdkWindow       // out
	var _arg1 *C.cairo_pattern_t // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.cairo_pattern_t)(unsafe.Pointer(pattern.Native()))

	C.gdk_window_set_background_pattern(_arg0, _arg1)
}

func (w window) SetBackgroundRGBAWindow(rgba *RGBA) {
	var _arg0 *C.GdkWindow // out
	var _arg1 *C.GdkRGBA   // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GdkRGBA)(unsafe.Pointer(rgba.Native()))

	C.gdk_window_set_background_rgba(_arg0, _arg1)
}

func (w window) SetChildInputShapesWindow() {
	var _arg0 *C.GdkWindow // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))

	C.gdk_window_set_child_input_shapes(_arg0)
}

func (w window) SetChildShapesWindow() {
	var _arg0 *C.GdkWindow // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))

	C.gdk_window_set_child_shapes(_arg0)
}

func (w window) SetCompositedWindow(composited bool) {
	var _arg0 *C.GdkWindow // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	if composited {
		_arg1 = C.TRUE
	}

	C.gdk_window_set_composited(_arg0, _arg1)
}

func (w window) SetCursorWindow(cursor Cursor) {
	var _arg0 *C.GdkWindow // out
	var _arg1 *C.GdkCursor // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GdkCursor)(unsafe.Pointer(cursor.Native()))

	C.gdk_window_set_cursor(_arg0, _arg1)
}

func (w window) SetDecorationsWindow(decorations WMDecoration) {
	var _arg0 *C.GdkWindow      // out
	var _arg1 C.GdkWMDecoration // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	_arg1 = C.GdkWMDecoration(decorations)

	C.gdk_window_set_decorations(_arg0, _arg1)
}

func (w window) SetDeviceCursorWindow(device Device, cursor Cursor) {
	var _arg0 *C.GdkWindow // out
	var _arg1 *C.GdkDevice // out
	var _arg2 *C.GdkCursor // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GdkDevice)(unsafe.Pointer(device.Native()))
	_arg2 = (*C.GdkCursor)(unsafe.Pointer(cursor.Native()))

	C.gdk_window_set_device_cursor(_arg0, _arg1, _arg2)
}

func (w window) SetDeviceEventsWindow(device Device, eventMask EventMask) {
	var _arg0 *C.GdkWindow   // out
	var _arg1 *C.GdkDevice   // out
	var _arg2 C.GdkEventMask // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GdkDevice)(unsafe.Pointer(device.Native()))
	_arg2 = C.GdkEventMask(eventMask)

	C.gdk_window_set_device_events(_arg0, _arg1, _arg2)
}

func (w window) SetEventCompressionWindow(eventCompression bool) {
	var _arg0 *C.GdkWindow // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	if eventCompression {
		_arg1 = C.TRUE
	}

	C.gdk_window_set_event_compression(_arg0, _arg1)
}

func (w window) SetEventsWindow(eventMask EventMask) {
	var _arg0 *C.GdkWindow   // out
	var _arg1 C.GdkEventMask // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	_arg1 = C.GdkEventMask(eventMask)

	C.gdk_window_set_events(_arg0, _arg1)
}

func (w window) SetFocusOnMapWindow(focusOnMap bool) {
	var _arg0 *C.GdkWindow // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	if focusOnMap {
		_arg1 = C.TRUE
	}

	C.gdk_window_set_focus_on_map(_arg0, _arg1)
}

func (w window) SetFullscreenModeWindow(mode FullscreenMode) {
	var _arg0 *C.GdkWindow        // out
	var _arg1 C.GdkFullscreenMode // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	_arg1 = C.GdkFullscreenMode(mode)

	C.gdk_window_set_fullscreen_mode(_arg0, _arg1)
}

func (w window) SetFunctionsWindow(functions WMFunction) {
	var _arg0 *C.GdkWindow    // out
	var _arg1 C.GdkWMFunction // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	_arg1 = C.GdkWMFunction(functions)

	C.gdk_window_set_functions(_arg0, _arg1)
}

func (w window) SetGeometryHintsWindow(geometry *Geometry, geomMask WindowHints) {
	var _arg0 *C.GdkWindow     // out
	var _arg1 *C.GdkGeometry   // out
	var _arg2 C.GdkWindowHints // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GdkGeometry)(unsafe.Pointer(geometry.Native()))
	_arg2 = C.GdkWindowHints(geomMask)

	C.gdk_window_set_geometry_hints(_arg0, _arg1, _arg2)
}

func (w window) SetGroupWindow(leader Window) {
	var _arg0 *C.GdkWindow // out
	var _arg1 *C.GdkWindow // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GdkWindow)(unsafe.Pointer(leader.Native()))

	C.gdk_window_set_group(_arg0, _arg1)
}

func (w window) SetIconNameWindow(name string) {
	var _arg0 *C.GdkWindow // out
	var _arg1 *C.gchar     // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.gchar)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg1))

	C.gdk_window_set_icon_name(_arg0, _arg1)
}

func (w window) SetKeepAboveWindow(setting bool) {
	var _arg0 *C.GdkWindow // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	if setting {
		_arg1 = C.TRUE
	}

	C.gdk_window_set_keep_above(_arg0, _arg1)
}

func (w window) SetKeepBelowWindow(setting bool) {
	var _arg0 *C.GdkWindow // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	if setting {
		_arg1 = C.TRUE
	}

	C.gdk_window_set_keep_below(_arg0, _arg1)
}

func (w window) SetModalHintWindow(modal bool) {
	var _arg0 *C.GdkWindow // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	if modal {
		_arg1 = C.TRUE
	}

	C.gdk_window_set_modal_hint(_arg0, _arg1)
}

func (w window) SetOpacityWindow(opacity float64) {
	var _arg0 *C.GdkWindow // out
	var _arg1 C.gdouble    // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	_arg1 = C.gdouble(opacity)

	C.gdk_window_set_opacity(_arg0, _arg1)
}

func (w window) SetOpaqueRegionWindow(region *cairo.Region) {
	var _arg0 *C.GdkWindow      // out
	var _arg1 *C.cairo_region_t // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.cairo_region_t)(unsafe.Pointer(region.Native()))

	C.gdk_window_set_opaque_region(_arg0, _arg1)
}

func (w window) SetOverrideRedirectWindow(overrideRedirect bool) {
	var _arg0 *C.GdkWindow // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	if overrideRedirect {
		_arg1 = C.TRUE
	}

	C.gdk_window_set_override_redirect(_arg0, _arg1)
}

func (w window) SetPassThroughWindow(passThrough bool) {
	var _arg0 *C.GdkWindow // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	if passThrough {
		_arg1 = C.TRUE
	}

	C.gdk_window_set_pass_through(_arg0, _arg1)
}

func (w window) SetRoleWindow(role string) {
	var _arg0 *C.GdkWindow // out
	var _arg1 *C.gchar     // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.gchar)(C.CString(role))
	defer C.free(unsafe.Pointer(_arg1))

	C.gdk_window_set_role(_arg0, _arg1)
}

func (w window) SetShadowWidthWindow(left int, right int, top int, bottom int) {
	var _arg0 *C.GdkWindow // out
	var _arg1 C.gint       // out
	var _arg2 C.gint       // out
	var _arg3 C.gint       // out
	var _arg4 C.gint       // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	_arg1 = C.gint(left)
	_arg2 = C.gint(right)
	_arg3 = C.gint(top)
	_arg4 = C.gint(bottom)

	C.gdk_window_set_shadow_width(_arg0, _arg1, _arg2, _arg3, _arg4)
}

func (w window) SetSkipPagerHintWindow(skipsPager bool) {
	var _arg0 *C.GdkWindow // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	if skipsPager {
		_arg1 = C.TRUE
	}

	C.gdk_window_set_skip_pager_hint(_arg0, _arg1)
}

func (w window) SetSkipTaskbarHintWindow(skipsTaskbar bool) {
	var _arg0 *C.GdkWindow // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	if skipsTaskbar {
		_arg1 = C.TRUE
	}

	C.gdk_window_set_skip_taskbar_hint(_arg0, _arg1)
}

func (w window) SetSourceEventsWindow(source InputSource, eventMask EventMask) {
	var _arg0 *C.GdkWindow     // out
	var _arg1 C.GdkInputSource // out
	var _arg2 C.GdkEventMask   // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	_arg1 = C.GdkInputSource(source)
	_arg2 = C.GdkEventMask(eventMask)

	C.gdk_window_set_source_events(_arg0, _arg1, _arg2)
}

func (w window) SetStartupIDWindow(startupId string) {
	var _arg0 *C.GdkWindow // out
	var _arg1 *C.gchar     // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.gchar)(C.CString(startupId))
	defer C.free(unsafe.Pointer(_arg1))

	C.gdk_window_set_startup_id(_arg0, _arg1)
}

func (w window) SetStaticGravitiesWindow(useStatic bool) bool {
	var _arg0 *C.GdkWindow // out
	var _arg1 C.gboolean   // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	if useStatic {
		_arg1 = C.TRUE
	}

	_cret = C.gdk_window_set_static_gravities(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w window) SetSupportMultideviceWindow(supportMultidevice bool) {
	var _arg0 *C.GdkWindow // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	if supportMultidevice {
		_arg1 = C.TRUE
	}

	C.gdk_window_set_support_multidevice(_arg0, _arg1)
}

func (w window) SetTitleWindow(title string) {
	var _arg0 *C.GdkWindow // out
	var _arg1 *C.gchar     // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.gchar)(C.CString(title))
	defer C.free(unsafe.Pointer(_arg1))

	C.gdk_window_set_title(_arg0, _arg1)
}

func (w window) SetTransientForWindow(parent Window) {
	var _arg0 *C.GdkWindow // out
	var _arg1 *C.GdkWindow // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GdkWindow)(unsafe.Pointer(parent.Native()))

	C.gdk_window_set_transient_for(_arg0, _arg1)
}

func (w window) SetTypeHintWindow(hint WindowTypeHint) {
	var _arg0 *C.GdkWindow        // out
	var _arg1 C.GdkWindowTypeHint // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	_arg1 = C.GdkWindowTypeHint(hint)

	C.gdk_window_set_type_hint(_arg0, _arg1)
}

func (w window) SetUrgencyHintWindow(urgent bool) {
	var _arg0 *C.GdkWindow // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	if urgent {
		_arg1 = C.TRUE
	}

	C.gdk_window_set_urgency_hint(_arg0, _arg1)
}

func (w window) SetUserDataWindow(userData gextras.Objector) {
	var _arg0 *C.GdkWindow // out
	var _arg1 C.gpointer   // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	_arg1 = (C.gpointer)(unsafe.Pointer(userData.Native()))

	C.gdk_window_set_user_data(_arg0, _arg1)
}

func (w window) ShapeCombineRegionWindow(shapeRegion *cairo.Region, offsetX int, offsetY int) {
	var _arg0 *C.GdkWindow      // out
	var _arg1 *C.cairo_region_t // out
	var _arg2 C.gint            // out
	var _arg3 C.gint            // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.cairo_region_t)(unsafe.Pointer(shapeRegion.Native()))
	_arg2 = C.gint(offsetX)
	_arg3 = C.gint(offsetY)

	C.gdk_window_shape_combine_region(_arg0, _arg1, _arg2, _arg3)
}

func (w window) ShowWindow() {
	var _arg0 *C.GdkWindow // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))

	C.gdk_window_show(_arg0)
}

func (w window) ShowUnraisedWindow() {
	var _arg0 *C.GdkWindow // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))

	C.gdk_window_show_unraised(_arg0)
}

func (w window) StickWindow() {
	var _arg0 *C.GdkWindow // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))

	C.gdk_window_stick(_arg0)
}

func (w window) ThawToplevelUpdatesLibgtkOnlyWindow() {
	var _arg0 *C.GdkWindow // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))

	C.gdk_window_thaw_toplevel_updates_libgtk_only(_arg0)
}

func (w window) ThawUpdatesWindow() {
	var _arg0 *C.GdkWindow // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))

	C.gdk_window_thaw_updates(_arg0)
}

func (w window) UnfullscreenWindow() {
	var _arg0 *C.GdkWindow // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))

	C.gdk_window_unfullscreen(_arg0)
}

func (w window) UnmaximizeWindow() {
	var _arg0 *C.GdkWindow // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))

	C.gdk_window_unmaximize(_arg0)
}

func (w window) UnstickWindow() {
	var _arg0 *C.GdkWindow // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))

	C.gdk_window_unstick(_arg0)
}

func (w window) WithdrawWindow() {
	var _arg0 *C.GdkWindow // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))

	C.gdk_window_withdraw(_arg0)
}

// Geometry: the Geometry struct gives the window manager information about a
// window’s geometry constraints. Normally you would set these on the GTK+ level
// using gtk_window_set_geometry_hints(). Window then sets the hints on the
// Window it creates.
//
// gdk_window_set_geometry_hints() expects the hints to be fully valid already
// and simply passes them to the window manager; in contrast,
// gtk_window_set_geometry_hints() performs some interpretation. For example,
// Window will apply the hints to the geometry widget instead of the toplevel
// window, if you set a geometry widget. Also, the
// @min_width/@min_height/@max_width/@max_height fields may be set to -1, and
// Window will substitute the size request of the window or geometry widget. If
// the minimum size hint is not provided, Window will use its requisition as the
// minimum size. If the minimum size is provided and a geometry widget is set,
// Window will take the minimum size as the minimum size of the geometry widget
// rather than the entire window. The base size is treated similarly.
//
// The canonical use-case for gtk_window_set_geometry_hints() is to get a
// terminal widget to resize properly. Here, the terminal text area should be
// the geometry widget; Window will then automatically set the base size to the
// size of other widgets in the terminal window, such as the menubar and
// scrollbar. Then, the @width_inc and @height_inc fields should be set to the
// size of one character in the terminal. Finally, the base size should be set
// to the size of one character. The net effect is that the minimum size of the
// terminal will have a 1x1 character terminal area, and only terminal sizes on
// the “character grid” will be allowed.
//
// Here’s an example of how the terminal example would be implemented, assuming
// a terminal area widget called “terminal” and a toplevel window “toplevel”:
//
//    	GdkGeometry hints;
//
//    	hints.base_width = terminal->char_width;
//            hints.base_height = terminal->char_height;
//            hints.min_width = terminal->char_width;
//            hints.min_height = terminal->char_height;
//            hints.width_inc = terminal->char_width;
//            hints.height_inc = terminal->char_height;
//
//     gtk_window_set_geometry_hints (GTK_WINDOW (toplevel),
//                                    GTK_WIDGET (terminal),
//                                    &hints,
//                                    GDK_HINT_RESIZE_INC |
//                                    GDK_HINT_MIN_SIZE |
//                                    GDK_HINT_BASE_SIZE);
//
// The other useful fields are the @min_aspect and @max_aspect fields; these
// contain a width/height ratio as a floating point number. If a geometry widget
// is set, the aspect applies to the geometry widget rather than the entire
// window. The most common use of these hints is probably to set @min_aspect and
// @max_aspect to the same value, thus forcing the window to keep a constant
// aspect ratio.
type Geometry C.GdkGeometry

// WrapGeometry wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapGeometry(ptr unsafe.Pointer) *Geometry {
	return (*Geometry)(ptr)
}

// Native returns the underlying C source pointer.
func (g *Geometry) Native() unsafe.Pointer {
	return unsafe.Pointer(g)
}

// WindowAttr attributes to use for a newly-created window.
type WindowAttr C.GdkWindowAttr

// WrapWindowAttr wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapWindowAttr(ptr unsafe.Pointer) *WindowAttr {
	return (*WindowAttr)(ptr)
}

// Native returns the underlying C source pointer.
func (w *WindowAttr) Native() unsafe.Pointer {
	return unsafe.Pointer(w)
}

// WindowRedirect:
type WindowRedirect C.GdkWindowRedirect

// WrapWindowRedirect wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapWindowRedirect(ptr unsafe.Pointer) *WindowRedirect {
	return (*WindowRedirect)(ptr)
}

// Native returns the underlying C source pointer.
func (w *WindowRedirect) Native() unsafe.Pointer {
	return unsafe.Pointer(w)
}
