// Code generated by girgen. DO NOT EDIT.

package gdkx11

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/gdk/v3"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gdk-x11-3.0 gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <gdk/gdkx.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gdk_x11_cursor_get_type()), F: marshalX11Cursor},
	})
}

type X11Cursor interface {
	gdk.Cursor
}

// x11Cursor implements the X11Cursor class.
type x11Cursor struct {
	gdk.Cursor
}

// WrapX11Cursor wraps a GObject to the right type. It is
// primarily used internally.
func WrapX11Cursor(obj *externglib.Object) X11Cursor {
	return x11Cursor{
		Cursor: gdk.WrapCursor(obj),
	}
}

func marshalX11Cursor(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapX11Cursor(obj), nil
}
