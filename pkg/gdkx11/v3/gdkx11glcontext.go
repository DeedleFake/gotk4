// Code generated by girgen. DO NOT EDIT.

package gdkx11

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gdk-x11-3.0 gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <gdk/gdkx.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gdk_x11_gl_context_get_type()), F: marshalX11GLContexter},
	})
}

// X11GLContexter describes X11GLContext's methods.
type X11GLContexter interface {
	gextras.Objector

	privateX11GLContext()
}

type X11GLContext struct {
	gdk.GLContext
}

var _ X11GLContexter = (*X11GLContext)(nil)

func wrapX11GLContexter(obj *externglib.Object) X11GLContexter {
	return &X11GLContext{
		GLContext: gdk.GLContext{
			Object: obj,
		},
	}
}

func marshalX11GLContexter(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapX11GLContexter(obj), nil
}

func (*X11GLContext) privateX11GLContext() {}
