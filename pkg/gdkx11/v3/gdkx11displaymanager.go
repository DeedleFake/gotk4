// Code generated by girgen. DO NOT EDIT.

package gdkx11

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gdk-x11-3.0 gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <gdk/gdkx.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gdk_x11_display_manager_get_type()), F: marshalX11DisplayManager},
	})
}

type X11DisplayManager interface {
	gdk.DisplayManager

	// AsDisplayManager casts the class to the gdk.DisplayManager interface.
	AsDisplayManager() gdk.DisplayManager

	// GetDefaultDisplay gets the default Display.
	//
	// This method is inherited from gdk.DisplayManager
	GetDefaultDisplay() gdk.Display
	// OpenDisplay opens a display.
	//
	// This method is inherited from gdk.DisplayManager
	OpenDisplay(name string) gdk.Display
	// SetDefaultDisplay sets @display as the default display.
	//
	// This method is inherited from gdk.DisplayManager
	SetDefaultDisplay(display gdk.Display)
}

// x11DisplayManager implements the X11DisplayManager interface.
type x11DisplayManager struct {
	*externglib.Object
}

var _ X11DisplayManager = (*x11DisplayManager)(nil)

// WrapX11DisplayManager wraps a GObject to a type that implements
// interface X11DisplayManager. It is primarily used internally.
func WrapX11DisplayManager(obj *externglib.Object) X11DisplayManager {
	return x11DisplayManager{obj}
}

func marshalX11DisplayManager(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapX11DisplayManager(obj), nil
}

func (x x11DisplayManager) AsDisplayManager() gdk.DisplayManager {
	return gdk.WrapDisplayManager(gextras.InternObject(x))
}

func (m x11DisplayManager) GetDefaultDisplay() gdk.Display {
	return gdk.WrapDisplayManager(gextras.InternObject(m)).GetDefaultDisplay()
}

func (m x11DisplayManager) OpenDisplay(name string) gdk.Display {
	return gdk.WrapDisplayManager(gextras.InternObject(m)).OpenDisplay(name)
}

func (m x11DisplayManager) SetDefaultDisplay(display gdk.Display) {
	gdk.WrapDisplayManager(gextras.InternObject(m)).SetDefaultDisplay(display)
}
