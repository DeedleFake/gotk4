// Code generated by girgen. DO NOT EDIT.

package gdkx11

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gdk-x11-3.0 gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <gdk/gdkx.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gdk_x11_app_launch_context_get_type()), F: marshalX11AppLaunchContext},
	})
}

type X11AppLaunchContext interface {
	gextras.Objector

	privateX11AppLaunchContextClass()
}

// X11AppLaunchContextClass implements the X11AppLaunchContext interface.
type X11AppLaunchContextClass struct {
	gdk.AppLaunchContextClass
}

var _ X11AppLaunchContext = (*X11AppLaunchContextClass)(nil)

func wrapX11AppLaunchContext(obj *externglib.Object) X11AppLaunchContext {
	return &X11AppLaunchContextClass{
		AppLaunchContextClass: gdk.AppLaunchContextClass{
			AppLaunchContextClass: gio.AppLaunchContextClass{
				Object: obj,
			},
		},
	}
}

func marshalX11AppLaunchContext(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapX11AppLaunchContext(obj), nil
}

func (*X11AppLaunchContextClass) privateX11AppLaunchContextClass() {}
