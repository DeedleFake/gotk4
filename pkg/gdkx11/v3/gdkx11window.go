// Code generated by girgen. DO NOT EDIT.

package gdkx11

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/cairo"
	"github.com/diamondburned/gotk4/pkg/core/box"
	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gdk-x11-3.0 gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <gdk/gdkx.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gdk_x11_window_get_type()), F: marshalX11Window},
	})
}

// X11GetServerTime: routine to get the current X server time stamp.
func X11GetServerTime(window X11Window) uint32 {
	var _arg1 *C.GdkWindow // out
	var _cret C.guint32    // in

	_arg1 = (*C.GdkWindow)(unsafe.Pointer(window.Native()))

	_cret = C.gdk_x11_get_server_time(_arg1)

	var _guint32 uint32 // out

	_guint32 = uint32(_cret)

	return _guint32
}

type X11Window interface {
	gdk.Window

	// AsWindow casts the class to the gdk.Window interface.
	AsWindow() gdk.Window

	// Beep emits a short beep associated to @window in the appropriate display,
	// if supported. Otherwise, emits a short beep on the display just as
	// gdk_display_beep().
	//
	// This method is inherited from gdk.Window
	Beep()
	// BeginDrawFrame indicates that you are beginning the process of redrawing
	// @region on @window, and provides you with a DrawingContext.
	//
	// If @window is a top level Window, backed by a native window
	// implementation, a backing store (offscreen buffer) large enough to
	// contain @region will be created. The backing store will be initialized
	// with the background color or background surface for @window. Then, all
	// drawing operations performed on @window will be diverted to the backing
	// store. When you call gdk_window_end_frame(), the contents of the backing
	// store will be copied to @window, making it visible on screen. Only the
	// part of @window contained in @region will be modified; that is, drawing
	// operations are clipped to @region.
	//
	// The net result of all this is to remove flicker, because the user sees
	// the finished product appear all at once when you call
	// gdk_window_end_draw_frame(). If you draw to @window directly without
	// calling gdk_window_begin_draw_frame(), the user may see flicker as
	// individual drawing operations are performed in sequence.
	//
	// When using GTK+, the widget system automatically places calls to
	// gdk_window_begin_draw_frame() and gdk_window_end_draw_frame() around
	// emissions of the `GtkWidget::draw` signal. That is, if you’re drawing the
	// contents of the widget yourself, you can assume that the widget has a
	// cleared background, is already set as the clip region, and already has a
	// backing store. Therefore in most cases, application code in GTK does not
	// need to call gdk_window_begin_draw_frame() explicitly.
	//
	// This method is inherited from gdk.Window
	BeginDrawFrame(region *cairo.Region) gdk.DrawingContext
	// BeginMoveDrag begins a window move operation (for a toplevel window).
	//
	// This function assumes that the drag is controlled by the client pointer
	// device, use gdk_window_begin_move_drag_for_device() to begin a drag with
	// a different device.
	//
	// This method is inherited from gdk.Window
	BeginMoveDrag(button int, rootX int, rootY int, timestamp uint32)
	// BeginMoveDragForDevice begins a window move operation (for a toplevel
	// window). You might use this function to implement a “window move grip,”
	// for example. The function works best with window managers that support
	// the Extended Window Manager Hints
	// (http://www.freedesktop.org/Standards/wm-spec) but has a fallback
	// implementation for other window managers.
	//
	// This method is inherited from gdk.Window
	BeginMoveDragForDevice(device gdk.Device, button int, rootX int, rootY int, timestamp uint32)
	// BeginPaintRect: convenience wrapper around
	// gdk_window_begin_paint_region() which creates a rectangular region for
	// you. See gdk_window_begin_paint_region() for details.
	//
	// Deprecated: since version 3.22.
	//
	// This method is inherited from gdk.Window
	BeginPaintRect(rectangle *gdk.Rectangle)
	// BeginPaintRegion indicates that you are beginning the process of
	// redrawing @region. A backing store (offscreen buffer) large enough to
	// contain @region will be created. The backing store will be initialized
	// with the background color or background surface for @window. Then, all
	// drawing operations performed on @window will be diverted to the backing
	// store. When you call gdk_window_end_paint(), the backing store will be
	// copied to @window, making it visible onscreen. Only the part of @window
	// contained in @region will be modified; that is, drawing operations are
	// clipped to @region.
	//
	// The net result of all this is to remove flicker, because the user sees
	// the finished product appear all at once when you call
	// gdk_window_end_paint(). If you draw to @window directly without calling
	// gdk_window_begin_paint_region(), the user may see flicker as individual
	// drawing operations are performed in sequence. The clipping and
	// background-initializing features of gdk_window_begin_paint_region() are
	// conveniences for the programmer, so you can avoid doing that work
	// yourself.
	//
	// When using GTK+, the widget system automatically places calls to
	// gdk_window_begin_paint_region() and gdk_window_end_paint() around
	// emissions of the expose_event signal. That is, if you’re writing an
	// expose event handler, you can assume that the exposed area in EventExpose
	// has already been cleared to the window background, is already set as the
	// clip region, and already has a backing store. Therefore in most cases,
	// application code need not call gdk_window_begin_paint_region(). (You can
	// disable the automatic calls around expose events on a widget-by-widget
	// basis by calling gtk_widget_set_double_buffered().)
	//
	// If you call this function multiple times before calling the matching
	// gdk_window_end_paint(), the backing stores are pushed onto a stack.
	// gdk_window_end_paint() copies the topmost backing store onscreen,
	// subtracts the topmost region from all other regions in the stack, and
	// pops the stack. All drawing operations affect only the topmost backing
	// store in the stack. One matching call to gdk_window_end_paint() is
	// required for each call to gdk_window_begin_paint_region().
	//
	// Deprecated: since version 3.22.
	//
	// This method is inherited from gdk.Window
	BeginPaintRegion(region *cairo.Region)
	// BeginResizeDrag begins a window resize operation (for a toplevel window).
	//
	// This function assumes that the drag is controlled by the client pointer
	// device, use gdk_window_begin_resize_drag_for_device() to begin a drag
	// with a different device.
	//
	// This method is inherited from gdk.Window
	BeginResizeDrag(edge gdk.WindowEdge, button int, rootX int, rootY int, timestamp uint32)
	// BeginResizeDragForDevice begins a window resize operation (for a toplevel
	// window). You might use this function to implement a “window resize grip,”
	// for example; in fact Statusbar uses it. The function works best with
	// window managers that support the Extended Window Manager Hints
	// (http://www.freedesktop.org/Standards/wm-spec) but has a fallback
	// implementation for other window managers.
	//
	// This method is inherited from gdk.Window
	BeginResizeDragForDevice(edge gdk.WindowEdge, device gdk.Device, button int, rootX int, rootY int, timestamp uint32)
	// ConfigureFinished does nothing, present only for compatiblity.
	//
	// Deprecated: since version 3.8.
	//
	// This method is inherited from gdk.Window
	ConfigureFinished()
	// CoordsFromParent transforms window coordinates from a parent window to a
	// child window, where the parent window is the normal parent as returned by
	// gdk_window_get_parent() for normal windows, and the window's embedder as
	// returned by gdk_offscreen_window_get_embedder() for offscreen windows.
	//
	// For normal windows, calling this function is equivalent to subtracting
	// the return values of gdk_window_get_position() from the parent
	// coordinates. For offscreen windows however (which can be arbitrarily
	// transformed), this function calls the GdkWindow::from-embedder: signal to
	// translate the coordinates.
	//
	// You should always use this function when writing generic code that walks
	// down a window hierarchy.
	//
	// See also: gdk_window_coords_to_parent()
	//
	// This method is inherited from gdk.Window
	CoordsFromParent(parentX float64, parentY float64) (x float64, y float64)
	// CoordsToParent transforms window coordinates from a child window to its
	// parent window, where the parent window is the normal parent as returned
	// by gdk_window_get_parent() for normal windows, and the window's embedder
	// as returned by gdk_offscreen_window_get_embedder() for offscreen windows.
	//
	// For normal windows, calling this function is equivalent to adding the
	// return values of gdk_window_get_position() to the child coordinates. For
	// offscreen windows however (which can be arbitrarily transformed), this
	// function calls the GdkWindow::to-embedder: signal to translate the
	// coordinates.
	//
	// You should always use this function when writing generic code that walks
	// up a window hierarchy.
	//
	// See also: gdk_window_coords_from_parent()
	//
	// This method is inherited from gdk.Window
	CoordsToParent(x float64, y float64) (parentX float64, parentY float64)
	// CreateGLContext creates a new GLContext matching the framebuffer format
	// to the visual of the Window. The context is disconnected from any
	// particular window or surface.
	//
	// If the creation of the GLContext failed, @error will be set.
	//
	// Before using the returned GLContext, you will need to call
	// gdk_gl_context_make_current() or gdk_gl_context_realize().
	//
	// This method is inherited from gdk.Window
	CreateGLContext() (gdk.GLContext, error)
	// CreateSimilarImageSurface: create a new image surface that is efficient
	// to draw on the given @window.
	//
	// Initially the surface contents are all 0 (transparent if contents have
	// transparency, black otherwise.)
	//
	// The @width and @height of the new surface are not affected by the scaling
	// factor of the @window, or by the @scale argument; they are the size of
	// the surface in device pixels. If you wish to create an image surface
	// capable of holding the contents of @window you can use:
	//
	//      int scale = gdk_window_get_scale_factor (window);
	//      int width = gdk_window_get_width (window) * scale;
	//      int height = gdk_window_get_height (window) * scale;
	//
	//      // format is set elsewhere
	//      cairo_surface_t *surface =
	//        gdk_window_create_similar_image_surface (window,
	//                                                 format,
	//                                                 width, height,
	//                                                 scale);
	//
	// Note that unlike cairo_surface_create_similar_image(), the new surface's
	// device scale is set to @scale, or to the scale factor of @window if
	// @scale is 0.
	//
	// This method is inherited from gdk.Window
	CreateSimilarImageSurface(format cairo.Format, width int, height int, scale int) *cairo.Surface
	// CreateSimilarSurface: create a new surface that is as compatible as
	// possible with the given @window. For example the new surface will have
	// the same fallback resolution and font options as @window. Generally, the
	// new surface will also use the same backend as @window, unless that is not
	// possible for some reason. The type of the returned surface may be
	// examined with cairo_surface_get_type().
	//
	// Initially the surface contents are all 0 (transparent if contents have
	// transparency, black otherwise.)
	//
	// This method is inherited from gdk.Window
	CreateSimilarSurface(content cairo.Content, width int, height int) *cairo.Surface
	// Deiconify: attempt to deiconify (unminimize) @window. On X11 the window
	// manager may choose to ignore the request to deiconify. When using GTK+,
	// use gtk_window_deiconify() instead of the Window variant. Or better yet,
	// you probably want to use gtk_window_present_with_time(), which raises the
	// window, focuses it, unminimizes it, and puts it on the current desktop.
	//
	// This method is inherited from gdk.Window
	Deiconify()
	// Destroy destroys the window system resources associated with @window and
	// decrements @window's reference count. The window system resources for all
	// children of @window are also destroyed, but the children’s reference
	// counts are not decremented.
	//
	// Note that a window will not be destroyed automatically when its reference
	// count reaches zero. You must call this function yourself before that
	// happens.
	//
	// This method is inherited from gdk.Window
	Destroy()
	// DestroyNotify: this method is inherited from gdk.Window
	DestroyNotify()
	// EnableSynchronizedConfigure does nothing, present only for compatiblity.
	//
	// Deprecated: since version 3.8.
	//
	// This method is inherited from gdk.Window
	EnableSynchronizedConfigure()
	// EndDrawFrame indicates that the drawing of the contents of @window
	// started with gdk_window_begin_frame() has been completed.
	//
	// This function will take care of destroying the DrawingContext.
	//
	// It is an error to call this function without a matching
	// gdk_window_begin_frame() first.
	//
	// This method is inherited from gdk.Window
	EndDrawFrame(context gdk.DrawingContext)
	// EndPaint indicates that the backing store created by the most recent call
	// to gdk_window_begin_paint_region() should be copied onscreen and deleted,
	// leaving the next-most-recent backing store or no backing store at all as
	// the active paint region. See gdk_window_begin_paint_region() for full
	// details.
	//
	// It is an error to call this function without a matching
	// gdk_window_begin_paint_region() first.
	//
	// This method is inherited from gdk.Window
	EndPaint()
	// EnsureNative tries to ensure that there is a window-system native window
	// for this GdkWindow. This may fail in some situations, returning false.
	//
	// Offscreen window and children of them can never have native windows.
	//
	// Some backends may not support native child windows.
	//
	// This method is inherited from gdk.Window
	EnsureNative() bool
	// Flush: this function does nothing.
	//
	// Deprecated: since version 3.14.
	//
	// This method is inherited from gdk.Window
	Flush()
	// Focus sets keyboard focus to @window. In most cases,
	// gtk_window_present_with_time() should be used on a Window, rather than
	// calling this function.
	//
	// This method is inherited from gdk.Window
	Focus(timestamp uint32)
	// FreezeToplevelUpdatesLibgtkOnly: temporarily freezes a window and all its
	// descendants such that it won't receive expose events. The window will
	// begin receiving expose events again when
	// gdk_window_thaw_toplevel_updates_libgtk_only() is called. If
	// gdk_window_freeze_toplevel_updates_libgtk_only() has been called more
	// than once, gdk_window_thaw_toplevel_updates_libgtk_only() must be called
	// an equal number of times to begin processing exposes.
	//
	// This function is not part of the GDK public API and is only for use by
	// GTK+.
	//
	// Deprecated: since version 3.16.
	//
	// This method is inherited from gdk.Window
	FreezeToplevelUpdatesLibgtkOnly()
	// FreezeUpdates: temporarily freezes a window such that it won’t receive
	// expose events. The window will begin receiving expose events again when
	// gdk_window_thaw_updates() is called. If gdk_window_freeze_updates() has
	// been called more than once, gdk_window_thaw_updates() must be called an
	// equal number of times to begin processing exposes.
	//
	// This method is inherited from gdk.Window
	FreezeUpdates()
	// Fullscreen moves the window into fullscreen mode. This means the window
	// covers the entire screen and is above any panels or task bars.
	//
	// If the window was already fullscreen, then this function does nothing.
	//
	// On X11, asks the window manager to put @window in a fullscreen state, if
	// the window manager supports this operation. Not all window managers
	// support this, and some deliberately ignore it or don’t have a concept of
	// “fullscreen”; so you can’t rely on the fullscreenification actually
	// happening. But it will happen with most standard window managers, and GDK
	// makes a best effort to get it to happen.
	//
	// This method is inherited from gdk.Window
	Fullscreen()
	// FullscreenOnMonitor moves the window into fullscreen mode on the given
	// monitor. This means the window covers the entire screen and is above any
	// panels or task bars.
	//
	// If the window was already fullscreen, then this function does nothing.
	//
	// This method is inherited from gdk.Window
	FullscreenOnMonitor(monitor int)
	// GeometryChanged: this function informs GDK that the geometry of an
	// embedded offscreen window has changed. This is necessary for GDK to keep
	// track of which offscreen window the pointer is in.
	//
	// This method is inherited from gdk.Window
	GeometryChanged()
	// GetAcceptFocus determines whether or not the desktop environment shuld be
	// hinted that the window does not want to receive input focus.
	//
	// This method is inherited from gdk.Window
	GetAcceptFocus() bool
	// GetBackgroundPattern gets the pattern used to clear the background on
	// @window.
	//
	// Deprecated: since version 3.22.
	//
	// This method is inherited from gdk.Window
	GetBackgroundPattern() *cairo.Pattern
	// GetClipRegion computes the region of a window that potentially can be
	// written to by drawing primitives. This region may not take into account
	// other factors such as if the window is obscured by other windows, but no
	// area outside of this region will be affected by drawing primitives.
	//
	// This method is inherited from gdk.Window
	GetClipRegion() *cairo.Region
	// GetComposited determines whether @window is composited.
	//
	// See gdk_window_set_composited().
	//
	// Deprecated: since version 3.16.
	//
	// This method is inherited from gdk.Window
	GetComposited() bool
	// GetCursor retrieves a Cursor pointer for the cursor currently set on the
	// specified Window, or nil. If the return value is nil then there is no
	// custom cursor set on the specified window, and it is using the cursor for
	// its parent window.
	//
	// This method is inherited from gdk.Window
	GetCursor() gdk.Cursor
	// GetDecorations returns the decorations set on the GdkWindow with
	// gdk_window_set_decorations().
	//
	// This method is inherited from gdk.Window
	GetDecorations() (gdk.WMDecoration, bool)
	// GetDeviceCursor retrieves a Cursor pointer for the @device currently set
	// on the specified Window, or nil. If the return value is nil then there is
	// no custom cursor set on the specified window, and it is using the cursor
	// for its parent window.
	//
	// This method is inherited from gdk.Window
	GetDeviceCursor(device gdk.Device) gdk.Cursor
	// GetDeviceEvents returns the event mask for @window corresponding to an
	// specific device.
	//
	// This method is inherited from gdk.Window
	GetDeviceEvents(device gdk.Device) gdk.EventMask
	// GetDevicePosition obtains the current device position and modifier state.
	// The position is given in coordinates relative to the upper left corner of
	// @window.
	//
	// Use gdk_window_get_device_position_double() if you need subpixel
	// precision.
	//
	// This method is inherited from gdk.Window
	GetDevicePosition(device gdk.Device) (x int, y int, mask gdk.ModifierType, ret gdk.Window)
	// GetDevicePositionDouble obtains the current device position in doubles
	// and modifier state. The position is given in coordinates relative to the
	// upper left corner of @window.
	//
	// This method is inherited from gdk.Window
	GetDevicePositionDouble(device gdk.Device) (x float64, y float64, mask gdk.ModifierType, ret gdk.Window)
	// GetDisplay gets the Display associated with a Window.
	//
	// This method is inherited from gdk.Window
	GetDisplay() gdk.Display
	// GetDragProtocol finds out the DND protocol supported by a window.
	//
	// This method is inherited from gdk.Window
	GetDragProtocol() (gdk.Window, gdk.DragProtocol)
	// GetEffectiveParent obtains the parent of @window, as known to GDK. Works
	// like gdk_window_get_parent() for normal windows, but returns the window’s
	// embedder for offscreen windows.
	//
	// See also: gdk_offscreen_window_get_embedder()
	//
	// This method is inherited from gdk.Window
	GetEffectiveParent() gdk.Window
	// GetEffectiveToplevel gets the toplevel window that’s an ancestor of
	// @window.
	//
	// Works like gdk_window_get_toplevel(), but treats an offscreen window's
	// embedder as its parent, using gdk_window_get_effective_parent().
	//
	// See also: gdk_offscreen_window_get_embedder()
	//
	// This method is inherited from gdk.Window
	GetEffectiveToplevel() gdk.Window
	// GetEventCompression: get the current event compression setting for this
	// window.
	//
	// This method is inherited from gdk.Window
	GetEventCompression() bool
	// GetEvents gets the event mask for @window for all master input devices.
	// See gdk_window_set_events().
	//
	// This method is inherited from gdk.Window
	GetEvents() gdk.EventMask
	// GetFocusOnMap determines whether or not the desktop environment should be
	// hinted that the window does not want to receive input focus when it is
	// mapped.
	//
	// This method is inherited from gdk.Window
	GetFocusOnMap() bool
	// GetFrameClock gets the frame clock for the window. The frame clock for a
	// window never changes unless the window is reparented to a new toplevel
	// window.
	//
	// This method is inherited from gdk.Window
	GetFrameClock() gdk.FrameClock
	// GetFrameExtents obtains the bounding box of the window, including window
	// manager titlebar/borders if any. The frame position is given in root
	// window coordinates. To get the position of the window itself (rather than
	// the frame) in root window coordinates, use gdk_window_get_origin().
	//
	// This method is inherited from gdk.Window
	GetFrameExtents() gdk.Rectangle
	// GetFullscreenMode obtains the FullscreenMode of the @window.
	//
	// This method is inherited from gdk.Window
	GetFullscreenMode() gdk.FullscreenMode
	// GetGeometry: any of the return location arguments to this function may be
	// nil, if you aren’t interested in getting the value of that field.
	//
	// The X and Y coordinates returned are relative to the parent window of
	// @window, which for toplevels usually means relative to the window
	// decorations (titlebar, etc.) rather than relative to the root window
	// (screen-size background window).
	//
	// On the X11 platform, the geometry is obtained from the X server, so
	// reflects the latest position of @window; this may be out-of-sync with the
	// position of @window delivered in the most-recently-processed
	// EventConfigure. gdk_window_get_position() in contrast gets the position
	// from the most recent configure event.
	//
	// Note: If @window is not a toplevel, it is much better to call
	// gdk_window_get_position(), gdk_window_get_width() and
	// gdk_window_get_height() instead, because it avoids the roundtrip to the X
	// server and because these functions support the full 32-bit coordinate
	// space, whereas gdk_window_get_geometry() is restricted to the 16-bit
	// coordinates of X11.
	//
	// This method is inherited from gdk.Window
	GetGeometry() (x int, y int, width int, height int)
	// GetGroup returns the group leader window for @window. See
	// gdk_window_set_group().
	//
	// This method is inherited from gdk.Window
	GetGroup() gdk.Window
	// GetHeight returns the height of the given @window.
	//
	// On the X11 platform the returned size is the size reported in the
	// most-recently-processed configure event, rather than the current size on
	// the X server.
	//
	// This method is inherited from gdk.Window
	GetHeight() int
	// GetModalHint determines whether or not the window manager is hinted that
	// @window has modal behaviour.
	//
	// This method is inherited from gdk.Window
	GetModalHint() bool
	// GetOrigin obtains the position of a window in root window coordinates.
	// (Compare with gdk_window_get_position() and gdk_window_get_geometry()
	// which return the position of a window relative to its parent window.)
	//
	// This method is inherited from gdk.Window
	GetOrigin() (x int, y int, gint int)
	// GetParent obtains the parent of @window, as known to GDK. Does not query
	// the X server; thus this returns the parent as passed to gdk_window_new(),
	// not the actual parent. This should never matter unless you’re using Xlib
	// calls mixed with GDK calls on the X11 platform. It may also matter for
	// toplevel windows, because the window manager may choose to reparent them.
	//
	// Note that you should use gdk_window_get_effective_parent() when writing
	// generic code that walks up a window hierarchy, because
	// gdk_window_get_parent() will most likely not do what you expect if there
	// are offscreen windows in the hierarchy.
	//
	// This method is inherited from gdk.Window
	GetParent() gdk.Window
	// GetPassThrough returns whether input to the window is passed through to
	// the window below.
	//
	// See gdk_window_set_pass_through() for details
	//
	// This method is inherited from gdk.Window
	GetPassThrough() bool
	// GetPointer obtains the current pointer position and modifier state. The
	// position is given in coordinates relative to the upper left corner of
	// @window.
	//
	// Deprecated: since version 3.0.
	//
	// This method is inherited from gdk.Window
	GetPointer() (x int, y int, mask gdk.ModifierType, ret gdk.Window)
	// GetPosition obtains the position of the window as reported in the
	// most-recently-processed EventConfigure. Contrast with
	// gdk_window_get_geometry() which queries the X server for the current
	// window position, regardless of which events have been received or
	// processed.
	//
	// The position coordinates are relative to the window’s parent window.
	//
	// This method is inherited from gdk.Window
	GetPosition() (x int, y int)
	// GetRootCoords obtains the position of a window position in root window
	// coordinates. This is similar to gdk_window_get_origin() but allows you to
	// pass in any position in the window, not just the origin.
	//
	// This method is inherited from gdk.Window
	GetRootCoords(x int, y int) (rootX int, rootY int)
	// GetRootOrigin obtains the top-left corner of the window manager frame in
	// root window coordinates.
	//
	// This method is inherited from gdk.Window
	GetRootOrigin() (x int, y int)
	// GetScaleFactor returns the internal scale factor that maps from window
	// coordiantes to the actual device pixels. On traditional systems this is
	// 1, but on very high density outputs this can be a higher value (often 2).
	//
	// A higher value means that drawing is automatically scaled up to a higher
	// resolution, so any code doing drawing will automatically look nicer.
	// However, if you are supplying pixel-based data the scale value can be
	// used to determine whether to use a pixel resource with higher resolution
	// data.
	//
	// The scale of a window may change during runtime, if this happens a
	// configure event will be sent to the toplevel window.
	//
	// This method is inherited from gdk.Window
	GetScaleFactor() int
	// GetScreen gets the Screen associated with a Window.
	//
	// This method is inherited from gdk.Window
	GetScreen() gdk.Screen
	// GetSourceEvents returns the event mask for @window corresponding to the
	// device class specified by @source.
	//
	// This method is inherited from gdk.Window
	GetSourceEvents(source gdk.InputSource) gdk.EventMask
	// GetState gets the bitwise OR of the currently active window state flags,
	// from the WindowState enumeration.
	//
	// This method is inherited from gdk.Window
	GetState() gdk.WindowState
	// GetSupportMultidevice returns true if the window is aware of the
	// existence of multiple devices.
	//
	// This method is inherited from gdk.Window
	GetSupportMultidevice() bool
	// GetToplevel gets the toplevel window that’s an ancestor of @window.
	//
	// Any window type but GDK_WINDOW_CHILD is considered a toplevel window, as
	// is a GDK_WINDOW_CHILD window that has a root window as parent.
	//
	// Note that you should use gdk_window_get_effective_toplevel() when you
	// want to get to a window’s toplevel as seen on screen, because
	// gdk_window_get_toplevel() will most likely not do what you expect if
	// there are offscreen windows in the hierarchy.
	//
	// This method is inherited from gdk.Window
	GetToplevel() gdk.Window
	// GetTypeHint: this function returns the type hint set for a window.
	//
	// This method is inherited from gdk.Window
	GetTypeHint() gdk.WindowTypeHint
	// GetUpdateArea transfers ownership of the update area from @window to the
	// caller of the function. That is, after calling this function, @window
	// will no longer have an invalid/dirty region; the update area is removed
	// from @window and handed to you. If a window has no update area,
	// gdk_window_get_update_area() returns nil. You are responsible for calling
	// cairo_region_destroy() on the returned region if it’s non-nil.
	//
	// This method is inherited from gdk.Window
	GetUpdateArea() *cairo.Region
	// GetUserData retrieves the user data for @window, which is normally the
	// widget that @window belongs to. See gdk_window_set_user_data().
	//
	// This method is inherited from gdk.Window
	GetUserData() interface{}
	// GetVisibleRegion computes the region of the @window that is potentially
	// visible. This does not necessarily take into account if the window is
	// obscured by other windows, but no area outside of this region is visible.
	//
	// This method is inherited from gdk.Window
	GetVisibleRegion() *cairo.Region
	// GetVisual gets the Visual describing the pixel format of @window.
	//
	// This method is inherited from gdk.Window
	GetVisual() gdk.Visual
	// GetWidth returns the width of the given @window.
	//
	// On the X11 platform the returned size is the size reported in the
	// most-recently-processed configure event, rather than the current size on
	// the X server.
	//
	// This method is inherited from gdk.Window
	GetWidth() int
	// GetWindowType gets the type of the window. See WindowType.
	//
	// This method is inherited from gdk.Window
	GetWindowType() gdk.WindowType
	// HasNative checks whether the window has a native window or not. Note that
	// you can use gdk_window_ensure_native() if a native window is needed.
	//
	// This method is inherited from gdk.Window
	HasNative() bool
	// Hide: for toplevel windows, withdraws them, so they will no longer be
	// known to the window manager; for all windows, unmaps them, so they won’t
	// be displayed. Normally done automatically as part of gtk_widget_hide().
	//
	// This method is inherited from gdk.Window
	Hide()
	// Iconify asks to iconify (minimize) @window. The window manager may choose
	// to ignore the request, but normally will honor it. Using
	// gtk_window_iconify() is preferred, if you have a Window widget.
	//
	// This function only makes sense when @window is a toplevel window.
	//
	// This method is inherited from gdk.Window
	Iconify()
	// InputShapeCombineRegion: like gdk_window_shape_combine_region(), but the
	// shape applies only to event handling. Mouse events which happen while the
	// pointer position corresponds to an unset bit in the mask will be passed
	// on the window below @window.
	//
	// An input shape is typically used with RGBA windows. The alpha channel of
	// the window defines which pixels are invisible and allows for nicely
	// antialiased borders, and the input shape controls where the window is
	// “clickable”.
	//
	// On the X11 platform, this requires version 1.1 of the shape extension.
	//
	// On the Win32 platform, this functionality is not present and the function
	// does nothing.
	//
	// This method is inherited from gdk.Window
	InputShapeCombineRegion(shapeRegion *cairo.Region, offsetX int, offsetY int)
	// InvalidateRect: convenience wrapper around gdk_window_invalidate_region()
	// which invalidates a rectangular region. See
	// gdk_window_invalidate_region() for details.
	//
	// This method is inherited from gdk.Window
	InvalidateRect(rect *gdk.Rectangle, invalidateChildren bool)
	// InvalidateRegion adds @region to the update area for @window. The update
	// area is the region that needs to be redrawn, or “dirty region.” The call
	// gdk_window_process_updates() sends one or more expose events to the
	// window, which together cover the entire update area. An application would
	// normally redraw the contents of @window in response to those expose
	// events.
	//
	// GDK will call gdk_window_process_all_updates() on your behalf whenever
	// your program returns to the main loop and becomes idle, so normally
	// there’s no need to do that manually, you just need to invalidate regions
	// that you know should be redrawn.
	//
	// The @invalidate_children parameter controls whether the region of each
	// child window that intersects @region will also be invalidated. If false,
	// then the update area for child windows will remain unaffected. See
	// gdk_window_invalidate_maybe_recurse if you need fine grained control over
	// which children are invalidated.
	//
	// This method is inherited from gdk.Window
	InvalidateRegion(region *cairo.Region, invalidateChildren bool)
	// IsDestroyed: check to see if a window is destroyed..
	//
	// This method is inherited from gdk.Window
	IsDestroyed() bool
	// IsInputOnly determines whether or not the window is an input only window.
	//
	// This method is inherited from gdk.Window
	IsInputOnly() bool
	// IsShaped determines whether or not the window is shaped.
	//
	// This method is inherited from gdk.Window
	IsShaped() bool
	// IsViewable: check if the window and all ancestors of the window are
	// mapped. (This is not necessarily "viewable" in the X sense, since we only
	// check as far as we have GDK window parents, not to the root window.)
	//
	// This method is inherited from gdk.Window
	IsViewable() bool
	// IsVisible checks whether the window has been mapped (with
	// gdk_window_show() or gdk_window_show_unraised()).
	//
	// This method is inherited from gdk.Window
	IsVisible() bool
	// Lower lowers @window to the bottom of the Z-order (stacking order), so
	// that other windows with the same parent window appear above @window. This
	// is true whether or not the other windows are visible.
	//
	// If @window is a toplevel, the window manager may choose to deny the
	// request to move the window in the Z-order, gdk_window_lower() only
	// requests the restack, does not guarantee it.
	//
	// Note that gdk_window_show() raises the window again, so don’t call this
	// function before gdk_window_show(). (Try gdk_window_show_unraised().)
	//
	// This method is inherited from gdk.Window
	Lower()
	// MarkPaintFromClip: if you call this during a paint (e.g. between
	// gdk_window_begin_paint_region() and gdk_window_end_paint() then GDK will
	// mark the current clip region of the window as being drawn. This is
	// required when mixing GL rendering via gdk_cairo_draw_from_gl() and cairo
	// rendering, as otherwise GDK has no way of knowing when something paints
	// over the GL-drawn regions.
	//
	// This is typically called automatically by GTK+ and you don't need to care
	// about this.
	//
	// This method is inherited from gdk.Window
	MarkPaintFromClip(cr *cairo.Context)
	// Maximize maximizes the window. If the window was already maximized, then
	// this function does nothing.
	//
	// On X11, asks the window manager to maximize @window, if the window
	// manager supports this operation. Not all window managers support this,
	// and some deliberately ignore it or don’t have a concept of “maximized”;
	// so you can’t rely on the maximization actually happening. But it will
	// happen with most standard window managers, and GDK makes a best effort to
	// get it to happen.
	//
	// On Windows, reliably maximizes the window.
	//
	// This method is inherited from gdk.Window
	Maximize()
	// MergeChildInputShapes merges the input shape masks for any child windows
	// into the input shape mask for @window. i.e. the union of all input masks
	// for @window and its children will become the new input mask for @window.
	// See gdk_window_input_shape_combine_region().
	//
	// This function is distinct from gdk_window_set_child_input_shapes()
	// because it includes @window’s input shape mask in the set of shapes to be
	// merged.
	//
	// This method is inherited from gdk.Window
	MergeChildInputShapes()
	// MergeChildShapes merges the shape masks for any child windows into the
	// shape mask for @window. i.e. the union of all masks for @window and its
	// children will become the new mask for @window. See
	// gdk_window_shape_combine_region().
	//
	// This function is distinct from gdk_window_set_child_shapes() because it
	// includes @window’s shape mask in the set of shapes to be merged.
	//
	// This method is inherited from gdk.Window
	MergeChildShapes()
	// Move repositions a window relative to its parent window. For toplevel
	// windows, window managers may ignore or modify the move; you should
	// probably use gtk_window_move() on a Window widget anyway, instead of
	// using GDK functions. For child windows, the move will reliably succeed.
	//
	// If you’re also planning to resize the window, use
	// gdk_window_move_resize() to both move and resize simultaneously, for a
	// nicer visual effect.
	//
	// This method is inherited from gdk.Window
	Move(x int, y int)
	// MoveRegion: move the part of @window indicated by @region by @dy pixels
	// in the Y direction and @dx pixels in the X direction. The portions of
	// @region that not covered by the new position of @region are invalidated.
	//
	// Child windows are not moved.
	//
	// This method is inherited from gdk.Window
	MoveRegion(region *cairo.Region, dx int, dy int)
	// MoveResize: equivalent to calling gdk_window_move() and
	// gdk_window_resize(), except that both operations are performed at once,
	// avoiding strange visual effects. (i.e. the user may be able to see the
	// window first move, then resize, if you don’t use
	// gdk_window_move_resize().)
	//
	// This method is inherited from gdk.Window
	MoveResize(x int, y int, width int, height int)
	// MoveToRect moves @window to @rect, aligning their anchor points.
	//
	// @rect is relative to the top-left corner of the window that @window is
	// transient for. @rect_anchor and @window_anchor determine anchor points on
	// @rect and @window to pin together. @rect's anchor point can optionally be
	// offset by @rect_anchor_dx and @rect_anchor_dy, which is equivalent to
	// offsetting the position of @window.
	//
	// @anchor_hints determines how @window will be moved if the anchor points
	// cause it to move off-screen. For example, GDK_ANCHOR_FLIP_X will replace
	// GDK_GRAVITY_NORTH_WEST with GDK_GRAVITY_NORTH_EAST and vice versa if
	// @window extends beyond the left or right edges of the monitor.
	//
	// Connect to the Window::moved-to-rect signal to find out how it was
	// actually positioned.
	//
	// This method is inherited from gdk.Window
	MoveToRect(rect *gdk.Rectangle, rectAnchor gdk.Gravity, windowAnchor gdk.Gravity, anchorHints gdk.AnchorHints, rectAnchorDx int, rectAnchorDy int)
	// ProcessUpdates sends one or more expose events to @window. The areas in
	// each expose event will cover the entire update area for the window (see
	// gdk_window_invalidate_region() for details). Normally GDK calls
	// gdk_window_process_all_updates() on your behalf, so there’s no need to
	// call this function unless you want to force expose events to be delivered
	// immediately and synchronously (vs. the usual case, where GDK delivers
	// them in an idle handler). Occasionally this is useful to produce nicer
	// scrolling behavior, for example.
	//
	// Deprecated: since version 3.22.
	//
	// This method is inherited from gdk.Window
	ProcessUpdates(updateChildren bool)
	// Raise raises @window to the top of the Z-order (stacking order), so that
	// other windows with the same parent window appear below @window. This is
	// true whether or not the windows are visible.
	//
	// If @window is a toplevel, the window manager may choose to deny the
	// request to move the window in the Z-order, gdk_window_raise() only
	// requests the restack, does not guarantee it.
	//
	// This method is inherited from gdk.Window
	Raise()
	// RegisterDnd registers a window as a potential drop destination.
	//
	// This method is inherited from gdk.Window
	RegisterDnd()
	// Reparent reparents @window into the given @new_parent. The window being
	// reparented will be unmapped as a side effect.
	//
	// This method is inherited from gdk.Window
	Reparent(newParent gdk.Window, x int, y int)
	// Resize resizes @window; for toplevel windows, asks the window manager to
	// resize the window. The window manager may not allow the resize. When
	// using GTK+, use gtk_window_resize() instead of this low-level GDK
	// function.
	//
	// Windows may not be resized below 1x1.
	//
	// If you’re also planning to move the window, use gdk_window_move_resize()
	// to both move and resize simultaneously, for a nicer visual effect.
	//
	// This method is inherited from gdk.Window
	Resize(width int, height int)
	// Restack changes the position of @window in the Z-order (stacking order),
	// so that it is above @sibling (if @above is true) or below @sibling (if
	// @above is false).
	//
	// If @sibling is nil, then this either raises (if @above is true) or lowers
	// the window.
	//
	// If @window is a toplevel, the window manager may choose to deny the
	// request to move the window in the Z-order, gdk_window_restack() only
	// requests the restack, does not guarantee it.
	//
	// This method is inherited from gdk.Window
	Restack(sibling gdk.Window, above bool)
	// Scroll the contents of @window, both pixels and children, by the given
	// amount. @window itself does not move. Portions of the window that the
	// scroll operation brings in from offscreen areas are invalidated. The
	// invalidated region may be bigger than what would strictly be necessary.
	//
	// For X11, a minimum area will be invalidated if the window has no
	// subwindows, or if the edges of the window’s parent do not extend beyond
	// the edges of the window. In other cases, a multi-step process is used to
	// scroll the window which may produce temporary visual artifacts and
	// unnecessary invalidations.
	//
	// This method is inherited from gdk.Window
	Scroll(dx int, dy int)
	// SetAcceptFocus: setting @accept_focus to false hints the desktop
	// environment that the window doesn’t want to receive input focus.
	//
	// On X, it is the responsibility of the window manager to interpret this
	// hint. ICCCM-compliant window manager usually respect it.
	//
	// This method is inherited from gdk.Window
	SetAcceptFocus(acceptFocus bool)
	// SetBackground sets the background color of @window.
	//
	// However, when using GTK+, influence the background of a widget using a
	// style class or CSS — if you’re an application — or with
	// gtk_style_context_set_background() — if you're implementing a custom
	// widget.
	//
	// Deprecated: since version 3.4.
	//
	// This method is inherited from gdk.Window
	SetBackground(color *gdk.Color)
	// SetBackgroundPattern sets the background of @window.
	//
	// A background of nil means that the window won't have any background. On
	// the X11 backend it's also possible to inherit the background from the
	// parent window using gdk_x11_get_parent_relative_pattern().
	//
	// The windowing system will normally fill a window with its background when
	// the window is obscured then exposed.
	//
	// Deprecated: since version 3.22.
	//
	// This method is inherited from gdk.Window
	SetBackgroundPattern(pattern *cairo.Pattern)
	// SetBackgroundRGBA sets the background color of @window.
	//
	// See also gdk_window_set_background_pattern().
	//
	// Deprecated: since version 3.22.
	//
	// This method is inherited from gdk.Window
	SetBackgroundRGBA(rgba *gdk.RGBA)
	// SetChildInputShapes sets the input shape mask of @window to the union of
	// input shape masks for all children of @window, ignoring the input shape
	// mask of @window itself. Contrast with
	// gdk_window_merge_child_input_shapes() which includes the input shape mask
	// of @window in the masks to be merged.
	//
	// This method is inherited from gdk.Window
	SetChildInputShapes()
	// SetChildShapes sets the shape mask of @window to the union of shape masks
	// for all children of @window, ignoring the shape mask of @window itself.
	// Contrast with gdk_window_merge_child_shapes() which includes the shape
	// mask of @window in the masks to be merged.
	//
	// This method is inherited from gdk.Window
	SetChildShapes()
	// SetComposited sets a Window as composited, or unsets it. Composited
	// windows do not automatically have their contents drawn to the screen.
	// Drawing is redirected to an offscreen buffer and an expose event is
	// emitted on the parent of the composited window. It is the responsibility
	// of the parent’s expose handler to manually merge the off-screen content
	// onto the screen in whatever way it sees fit.
	//
	// It only makes sense for child windows to be composited; see
	// gdk_window_set_opacity() if you need translucent toplevel windows.
	//
	// An additional effect of this call is that the area of this window is no
	// longer clipped from regions marked for invalidation on its parent. Draws
	// done on the parent window are also no longer clipped by the child.
	//
	// This call is only supported on some systems (currently, only X11 with new
	// enough Xcomposite and Xdamage extensions). You must call
	// gdk_display_supports_composite() to check if setting a window as
	// composited is supported before attempting to do so.
	//
	// Deprecated: since version 3.16.
	//
	// This method is inherited from gdk.Window
	SetComposited(composited bool)
	// SetCursor sets the default mouse pointer for a Window.
	//
	// Note that @cursor must be for the same display as @window.
	//
	// Use gdk_cursor_new_for_display() or gdk_cursor_new_from_pixbuf() to
	// create the cursor. To make the cursor invisible, use GDK_BLANK_CURSOR.
	// Passing nil for the @cursor argument to gdk_window_set_cursor() means
	// that @window will use the cursor of its parent window. Most windows
	// should use this default.
	//
	// This method is inherited from gdk.Window
	SetCursor(cursor gdk.Cursor)
	// SetDecorations: “Decorations” are the features the window manager adds to
	// a toplevel Window. This function sets the traditional Motif window
	// manager hints that tell the window manager which decorations you would
	// like your window to have. Usually you should use
	// gtk_window_set_decorated() on a Window instead of using the GDK function
	// directly.
	//
	// The @decorations argument is the logical OR of the fields in the
	// WMDecoration enumeration. If K_DECOR_ALL is included in the mask, the
	// other bits indicate which decorations should be turned off. If
	// K_DECOR_ALL is not included, then the other bits indicate which
	// decorations should be turned on.
	//
	// Most window managers honor a decorations hint of 0 to disable all
	// decorations, but very few honor all possible combinations of bits.
	//
	// This method is inherited from gdk.Window
	SetDecorations(decorations gdk.WMDecoration)
	// SetDeviceCursor sets a specific Cursor for a given device when it gets
	// inside @window. Use gdk_cursor_new_for_display() or
	// gdk_cursor_new_from_pixbuf() to create the cursor. To make the cursor
	// invisible, use GDK_BLANK_CURSOR. Passing nil for the @cursor argument to
	// gdk_window_set_cursor() means that @window will use the cursor of its
	// parent window. Most windows should use this default.
	//
	// This method is inherited from gdk.Window
	SetDeviceCursor(device gdk.Device, cursor gdk.Cursor)
	// SetDeviceEvents sets the event mask for a given device (Normally a
	// floating device, not attached to any visible pointer) to @window. For
	// example, an event mask including K_BUTTON_PRESS_MASK means the window
	// should report button press events. The event mask is the bitwise OR of
	// values from the EventMask enumeration.
	//
	// See the [input handling overview][event-masks] for details.
	//
	// This method is inherited from gdk.Window
	SetDeviceEvents(device gdk.Device, eventMask gdk.EventMask)
	// SetEventCompression determines whether or not extra unprocessed motion
	// events in the event queue can be discarded. If true only the most recent
	// event will be delivered.
	//
	// Some types of applications, e.g. paint programs, need to see all motion
	// events and will benefit from turning off event compression.
	//
	// By default, event compression is enabled.
	//
	// This method is inherited from gdk.Window
	SetEventCompression(eventCompression bool)
	// SetEvents: the event mask for a window determines which events will be
	// reported for that window from all master input devices. For example, an
	// event mask including K_BUTTON_PRESS_MASK means the window should report
	// button press events. The event mask is the bitwise OR of values from the
	// EventMask enumeration.
	//
	// See the [input handling overview][event-masks] for details.
	//
	// This method is inherited from gdk.Window
	SetEvents(eventMask gdk.EventMask)
	// SetFocusOnMap: setting @focus_on_map to false hints the desktop
	// environment that the window doesn’t want to receive input focus when it
	// is mapped. focus_on_map should be turned off for windows that aren’t
	// triggered interactively (such as popups from network activity).
	//
	// On X, it is the responsibility of the window manager to interpret this
	// hint. Window managers following the freedesktop.org window manager
	// extension specification should respect it.
	//
	// This method is inherited from gdk.Window
	SetFocusOnMap(focusOnMap bool)
	// SetFullscreenMode specifies whether the @window should span over all
	// monitors (in a multi-head setup) or only the current monitor when in
	// fullscreen mode.
	//
	// The @mode argument is from the FullscreenMode enumeration. If
	// K_FULLSCREEN_ON_ALL_MONITORS is specified, the fullscreen @window will
	// span over all monitors from the Screen.
	//
	// On X11, searches through the list of monitors from the Screen the ones
	// which delimit the 4 edges of the entire Screen and will ask the window
	// manager to span the @window over these monitors.
	//
	// If the XINERAMA extension is not available or not usable, this function
	// has no effect.
	//
	// Not all window managers support this, so you can’t rely on the fullscreen
	// window to span over the multiple monitors when
	// K_FULLSCREEN_ON_ALL_MONITORS is specified.
	//
	// This method is inherited from gdk.Window
	SetFullscreenMode(mode gdk.FullscreenMode)
	// SetFunctions sets hints about the window management functions to make
	// available via buttons on the window frame.
	//
	// On the X backend, this function sets the traditional Motif window manager
	// hint for this purpose. However, few window managers do anything reliable
	// or interesting with this hint. Many ignore it entirely.
	//
	// The @functions argument is the logical OR of values from the WMFunction
	// enumeration. If the bitmask includes K_FUNC_ALL, then the other bits
	// indicate which functions to disable; if it doesn’t include K_FUNC_ALL, it
	// indicates which functions to enable.
	//
	// This method is inherited from gdk.Window
	SetFunctions(functions gdk.WMFunction)
	// SetGeometryHints sets the geometry hints for @window. Hints flagged in
	// @geom_mask are set, hints not flagged in @geom_mask are unset. To unset
	// all hints, use a @geom_mask of 0 and a @geometry of nil.
	//
	// This function provides hints to the windowing system about acceptable
	// sizes for a toplevel window. The purpose of this is to constrain user
	// resizing, but the windowing system will typically (but is not required
	// to) also constrain the current size of the window to the provided values
	// and constrain programatic resizing via gdk_window_resize() or
	// gdk_window_move_resize().
	//
	// Note that on X11, this effect has no effect on windows of type
	// GDK_WINDOW_TEMP or windows where override redirect has been turned on via
	// gdk_window_set_override_redirect() since these windows are not resizable
	// by the user.
	//
	// Since you can’t count on the windowing system doing the constraints for
	// programmatic resizes, you should generally call
	// gdk_window_constrain_size() yourself to determine appropriate sizes.
	//
	// This method is inherited from gdk.Window
	SetGeometryHints(geometry *gdk.Geometry, geomMask gdk.WindowHints)
	// SetGroup sets the group leader window for @window. By default, GDK sets
	// the group leader for all toplevel windows to a global window implicitly
	// created by GDK. With this function you can override this default.
	//
	// The group leader window allows the window manager to distinguish all
	// windows that belong to a single application. It may for example allow
	// users to minimize/unminimize all windows belonging to an application at
	// once. You should only set a non-default group window if your application
	// pretends to be multiple applications.
	//
	// This method is inherited from gdk.Window
	SetGroup(leader gdk.Window)
	// SetIconName windows may have a name used while minimized, distinct from
	// the name they display in their titlebar. Most of the time this is a bad
	// idea from a user interface standpoint. But you can set such a name with
	// this function, if you like.
	//
	// After calling this with a non-nil @name, calls to gdk_window_set_title()
	// will not update the icon title.
	//
	// Using nil for @name unsets the icon title; further calls to
	// gdk_window_set_title() will again update the icon title as well.
	//
	// Note that some platforms don't support window icons.
	//
	// This method is inherited from gdk.Window
	SetIconName(name string)
	// SetKeepAbove: set if @window must be kept above other windows. If the
	// window was already above, then this function does nothing.
	//
	// On X11, asks the window manager to keep @window above, if the window
	// manager supports this operation. Not all window managers support this,
	// and some deliberately ignore it or don’t have a concept of “keep above”;
	// so you can’t rely on the window being kept above. But it will happen with
	// most standard window managers, and GDK makes a best effort to get it to
	// happen.
	//
	// This method is inherited from gdk.Window
	SetKeepAbove(setting bool)
	// SetKeepBelow: set if @window must be kept below other windows. If the
	// window was already below, then this function does nothing.
	//
	// On X11, asks the window manager to keep @window below, if the window
	// manager supports this operation. Not all window managers support this,
	// and some deliberately ignore it or don’t have a concept of “keep below”;
	// so you can’t rely on the window being kept below. But it will happen with
	// most standard window managers, and GDK makes a best effort to get it to
	// happen.
	//
	// This method is inherited from gdk.Window
	SetKeepBelow(setting bool)
	// SetModalHint: the application can use this hint to tell the window
	// manager that a certain window has modal behaviour. The window manager can
	// use this information to handle modal windows in a special way.
	//
	// You should only use this on windows for which you have previously called
	// gdk_window_set_transient_for()
	//
	// This method is inherited from gdk.Window
	SetModalHint(modal bool)
	// SetOpacity: set @window to render as partially transparent, with opacity
	// 0 being fully transparent and 1 fully opaque. (Values of the opacity
	// parameter are clamped to the [0,1] range.)
	//
	// For toplevel windows this depends on support from the windowing system
	// that may not always be there. For instance, On X11, this works only on X
	// screens with a compositing manager running. On Wayland, there is no
	// per-window opacity value that the compositor would apply. Instead, use
	// `gdk_window_set_opaque_region (window, NULL)` to tell the compositor that
	// the entire window is (potentially) non-opaque, and draw your content with
	// alpha, or use gtk_widget_set_opacity() to set an overall opacity for your
	// widgets.
	//
	// For child windows this function only works for non-native windows.
	//
	// For setting up per-pixel alpha topelevels, see
	// gdk_screen_get_rgba_visual(), and for non-toplevels, see
	// gdk_window_set_composited().
	//
	// Support for non-toplevel windows was added in 3.8.
	//
	// This method is inherited from gdk.Window
	SetOpacity(opacity float64)
	// SetOpaqueRegion: for optimisation purposes, compositing window managers
	// may like to not draw obscured regions of windows, or turn off blending
	// during for these regions. With RGB windows with no transparency, this is
	// just the shape of the window, but with ARGB32 windows, the compositor
	// does not know what regions of the window are transparent or not.
	//
	// This function only works for toplevel windows.
	//
	// GTK+ will update this property automatically if the @window background is
	// opaque, as we know where the opaque regions are. If your window
	// background is not opaque, please update this property in your
	// Widget::style-updated handler.
	//
	// This method is inherited from gdk.Window
	SetOpaqueRegion(region *cairo.Region)
	// SetOverrideRedirect: override redirect window is not under the control of
	// the window manager. This means it won’t have a titlebar, won’t be
	// minimizable, etc. - it will be entirely under the control of the
	// application. The window manager can’t see the override redirect window at
	// all.
	//
	// Override redirect should only be used for short-lived temporary windows,
	// such as popup menus. Menu uses an override redirect window in its
	// implementation, for example.
	//
	// This method is inherited from gdk.Window
	SetOverrideRedirect(overrideRedirect bool)
	// SetPassThrough sets whether input to the window is passed through to the
	// window below.
	//
	// The default value of this is false, which means that pointer events that
	// happen inside the window are send first to the window, but if the event
	// is not selected by the event mask then the event is sent to the parent
	// window, and so on up the hierarchy.
	//
	// If @pass_through is true then such pointer events happen as if the window
	// wasn't there at all, and thus will be sent first to any windows below
	// @window. This is useful if the window is used in a transparent fashion.
	// In the terminology of the web this would be called "pointer-events:
	// none".
	//
	// Note that a window with @pass_through true can still have a subwindow
	// without pass through, so you can get events on a subset of a window. And
	// in that cases you would get the in-between related events such as the
	// pointer enter/leave events on its way to the destination window.
	//
	// This method is inherited from gdk.Window
	SetPassThrough(passThrough bool)
	// SetRole: when using GTK+, typically you should use gtk_window_set_role()
	// instead of this low-level function.
	//
	// The window manager and session manager use a window’s role to distinguish
	// it from other kinds of window in the same application. When an
	// application is restarted after being saved in a previous session, all
	// windows with the same title and role are treated as interchangeable. So
	// if you have two windows with the same title that should be distinguished
	// for session management purposes, you should set the role on those
	// windows. It doesn’t matter what string you use for the role, as long as
	// you have a different role for each non-interchangeable kind of window.
	//
	// This method is inherited from gdk.Window
	SetRole(role string)
	// SetShadowWidth: newer GTK+ windows using client-side decorations use
	// extra geometry around their frames for effects like shadows and invisible
	// borders. Window managers that want to maximize windows or snap to edges
	// need to know where the extents of the actual frame lie, so that users
	// don’t feel like windows are snapping against random invisible edges.
	//
	// Note that this property is automatically updated by GTK+, so this
	// function should only be used by applications which do not use GTK+ to
	// create toplevel windows.
	//
	// This method is inherited from gdk.Window
	SetShadowWidth(left int, right int, top int, bottom int)
	// SetSkipPagerHint toggles whether a window should appear in a pager
	// (workspace switcher, or other desktop utility program that displays a
	// small thumbnail representation of the windows on the desktop). If a
	// window’s semantic type as specified with gdk_window_set_type_hint()
	// already fully describes the window, this function should not be called in
	// addition, instead you should allow the window to be treated according to
	// standard policy for its semantic type.
	//
	// This method is inherited from gdk.Window
	SetSkipPagerHint(skipsPager bool)
	// SetSkipTaskbarHint toggles whether a window should appear in a task list
	// or window list. If a window’s semantic type as specified with
	// gdk_window_set_type_hint() already fully describes the window, this
	// function should not be called in addition, instead you should allow the
	// window to be treated according to standard policy for its semantic type.
	//
	// This method is inherited from gdk.Window
	SetSkipTaskbarHint(skipsTaskbar bool)
	// SetSourceEvents sets the event mask for any floating device (i.e. not
	// attached to any visible pointer) that has the source defined as @source.
	// This event mask will be applied both to currently existing, newly added
	// devices after this call, and devices being attached/detached.
	//
	// This method is inherited from gdk.Window
	SetSourceEvents(source gdk.InputSource, eventMask gdk.EventMask)
	// SetStartupID: when using GTK+, typically you should use
	// gtk_window_set_startup_id() instead of this low-level function.
	//
	// This method is inherited from gdk.Window
	SetStartupID(startupId string)
	// SetStaticGravities: used to set the bit gravity of the given window to
	// static, and flag it so all children get static subwindow gravity. This is
	// used if you are implementing scary features that involve deep knowledge
	// of the windowing system. Don’t worry about it.
	//
	// Deprecated: since version 3.16.
	//
	// This method is inherited from gdk.Window
	SetStaticGravities(useStatic bool) bool
	// SetSupportMultidevice: this function will enable multidevice features in
	// @window.
	//
	// Multidevice aware windows will need to handle properly multiple, per
	// device enter/leave events, device grabs and grab ownerships.
	//
	// This method is inherited from gdk.Window
	SetSupportMultidevice(supportMultidevice bool)
	// SetTitle sets the title of a toplevel window, to be displayed in the
	// titlebar. If you haven’t explicitly set the icon name for the window
	// (using gdk_window_set_icon_name()), the icon name will be set to @title
	// as well. @title must be in UTF-8 encoding (as with all user-readable
	// strings in GDK/GTK+). @title may not be nil.
	//
	// This method is inherited from gdk.Window
	SetTitle(title string)
	// SetTransientFor indicates to the window manager that @window is a
	// transient dialog associated with the application window @parent. This
	// allows the window manager to do things like center @window on @parent and
	// keep @window above @parent.
	//
	// See gtk_window_set_transient_for() if you’re using Window or Dialog.
	//
	// This method is inherited from gdk.Window
	SetTransientFor(parent gdk.Window)
	// SetTypeHint: the application can use this call to provide a hint to the
	// window manager about the functionality of a window. The window manager
	// can use this information when determining the decoration and behaviour of
	// the window.
	//
	// The hint must be set before the window is mapped.
	//
	// This method is inherited from gdk.Window
	SetTypeHint(hint gdk.WindowTypeHint)
	// SetUrgencyHint toggles whether a window needs the user's urgent
	// attention.
	//
	// This method is inherited from gdk.Window
	SetUrgencyHint(urgent bool)
	// SetUserData: for most purposes this function is deprecated in favor of
	// g_object_set_data(). However, for historical reasons GTK+ stores the
	// Widget that owns a Window as user data on the Window. So, custom widget
	// implementations should use this function for that. If GTK+ receives an
	// event for a Window, and the user data for the window is non-nil, GTK+
	// will assume the user data is a Widget, and forward the event to that
	// widget.
	//
	// This method is inherited from gdk.Window
	SetUserData(userData gextras.Objector)
	// ShapeCombineRegion makes pixels in @window outside @shape_region be
	// transparent, so that the window may be nonrectangular.
	//
	// If @shape_region is nil, the shape will be unset, so the whole window
	// will be opaque again. @offset_x and @offset_y are ignored if
	// @shape_region is nil.
	//
	// On the X11 platform, this uses an X server extension which is widely
	// available on most common platforms, but not available on very old X
	// servers, and occasionally the implementation will be buggy. On servers
	// without the shape extension, this function will do nothing.
	//
	// This function works on both toplevel and child windows.
	//
	// This method is inherited from gdk.Window
	ShapeCombineRegion(shapeRegion *cairo.Region, offsetX int, offsetY int)
	// Show: like gdk_window_show_unraised(), but also raises the window to the
	// top of the window stack (moves the window to the front of the Z-order).
	//
	// This function maps a window so it’s visible onscreen. Its opposite is
	// gdk_window_hide().
	//
	// When implementing a Widget, you should call this function on the widget's
	// Window as part of the “map” method.
	//
	// This method is inherited from gdk.Window
	Show()
	// ShowUnraised shows a Window onscreen, but does not modify its stacking
	// order. In contrast, gdk_window_show() will raise the window to the top of
	// the window stack.
	//
	// On the X11 platform, in Xlib terms, this function calls XMapWindow() (it
	// also updates some internal GDK state, which means that you can’t really
	// use XMapWindow() directly on a GDK window).
	//
	// This method is inherited from gdk.Window
	ShowUnraised()
	// Stick: “Pins” a window such that it’s on all workspaces and does not
	// scroll with viewports, for window managers that have scrollable
	// viewports. (When using Window, gtk_window_stick() may be more useful.)
	//
	// On the X11 platform, this function depends on window manager support, so
	// may have no effect with many window managers. However, GDK will do the
	// best it can to convince the window manager to stick the window. For
	// window managers that don’t support this operation, there’s nothing you
	// can do to force it to happen.
	//
	// This method is inherited from gdk.Window
	Stick()
	// ThawToplevelUpdatesLibgtkOnly thaws a window frozen with
	// gdk_window_freeze_toplevel_updates_libgtk_only().
	//
	// This function is not part of the GDK public API and is only for use by
	// GTK+.
	//
	// Deprecated: since version 3.16.
	//
	// This method is inherited from gdk.Window
	ThawToplevelUpdatesLibgtkOnly()
	// ThawUpdates thaws a window frozen with gdk_window_freeze_updates().
	//
	// This method is inherited from gdk.Window
	ThawUpdates()
	// Unfullscreen moves the window out of fullscreen mode. If the window was
	// not fullscreen, does nothing.
	//
	// On X11, asks the window manager to move @window out of the fullscreen
	// state, if the window manager supports this operation. Not all window
	// managers support this, and some deliberately ignore it or don’t have a
	// concept of “fullscreen”; so you can’t rely on the unfullscreenification
	// actually happening. But it will happen with most standard window
	// managers, and GDK makes a best effort to get it to happen.
	//
	// This method is inherited from gdk.Window
	Unfullscreen()
	// Unmaximize unmaximizes the window. If the window wasn’t maximized, then
	// this function does nothing.
	//
	// On X11, asks the window manager to unmaximize @window, if the window
	// manager supports this operation. Not all window managers support this,
	// and some deliberately ignore it or don’t have a concept of “maximized”;
	// so you can’t rely on the unmaximization actually happening. But it will
	// happen with most standard window managers, and GDK makes a best effort to
	// get it to happen.
	//
	// On Windows, reliably unmaximizes the window.
	//
	// This method is inherited from gdk.Window
	Unmaximize()
	// Unstick: reverse operation for gdk_window_stick(); see
	// gdk_window_stick(), and gtk_window_unstick().
	//
	// This method is inherited from gdk.Window
	Unstick()
	// Withdraw withdraws a window (unmaps it and asks the window manager to
	// forget about it). This function is not really useful as gdk_window_hide()
	// automatically withdraws toplevel windows before hiding them.
	//
	// This method is inherited from gdk.Window
	Withdraw()

	// Desktop gets the number of the workspace @window is on.
	Desktop() uint32
	// MoveToCurrentDesktop moves the window to the correct workspace when
	// running under a window manager that supports multiple workspaces, as
	// described in the Extended Window Manager Hints
	// (http://www.freedesktop.org/Standards/wm-spec) specification. Will not do
	// anything if the window is already on all workspaces.
	MoveToCurrentDesktop()
	// MoveToDesktop moves the window to the given workspace when running unde a
	// window manager that supports multiple workspaces, as described in the
	// Extended Window Manager Hints
	// (http://www.freedesktop.org/Standards/wm-spec) specification.
	MoveToDesktop(desktop uint32)
	// SetFrameExtents: this is the same as gdk_window_set_shadow_width() but it
	// only works on GdkX11Window.
	//
	// Deprecated: since version 3.12.
	SetFrameExtents(left int, right int, top int, bottom int)
	// SetFrameSyncEnabled: this function can be used to disable frame
	// synchronization for a window. Normally frame synchronziation will be
	// enabled or disabled based on whether the system has a compositor that
	// supports frame synchronization, but if the window is not directly managed
	// by the window manager, then frame synchronziation may need to be
	// disabled. This is the case for a window embedded via the XEMBED protocol.
	SetFrameSyncEnabled(frameSyncEnabled bool)
	// SetHideTitlebarWhenMaximized: set a hint for the window manager,
	// requesting that the titlebar should be hidden when the window is
	// maximized.
	//
	// Note that this property is automatically updated by GTK+, so this
	// function should only be used by applications which do not use GTK+ to
	// create toplevel windows.
	SetHideTitlebarWhenMaximized(hideTitlebarWhenMaximized bool)
	// SetThemeVariant: GTK+ applications can request a dark theme variant. In
	// order to make other applications - namely window managers using GTK+ for
	// themeing - aware of this choice, GTK+ uses this function to export the
	// requested theme variant as _GTK_THEME_VARIANT property on toplevel
	// windows.
	//
	// Note that this property is automatically updated by GTK+, so this
	// function should only be used by applications which do not use GTK+ to
	// create toplevel windows.
	SetThemeVariant(variant string)
	// SetUserTime: the application can use this call to update the
	// _NET_WM_USER_TIME property on a toplevel window. This property stores an
	// Xserver time which represents the time of the last user input event
	// received for this window. This property may be used by the window manager
	// to alter the focus, stacking, and/or placement behavior of windows when
	// they are mapped depending on whether the new window was created by a user
	// action or is a "pop-up" window activated by a timer or some other event.
	//
	// Note that this property is automatically updated by GDK, so this function
	// should only be used by applications which handle input events bypassing
	// GDK.
	SetUserTime(timestamp uint32)
	// SetUTF8Property: this function modifies or removes an arbitrary X11
	// window property of type UTF8_STRING. If the given @window is not a
	// toplevel window, it is ignored.
	SetUTF8Property(name string, value string)
}

// x11Window implements the X11Window interface.
type x11Window struct {
	*externglib.Object
}

var _ X11Window = (*x11Window)(nil)

// WrapX11Window wraps a GObject to a type that implements
// interface X11Window. It is primarily used internally.
func WrapX11Window(obj *externglib.Object) X11Window {
	return x11Window{obj}
}

func marshalX11Window(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapX11Window(obj), nil
}

func (x x11Window) AsWindow() gdk.Window {
	return gdk.WrapWindow(gextras.InternObject(x))
}

func (w x11Window) Beep() {
	gdk.WrapWindow(gextras.InternObject(w)).Beep()
}

func (w x11Window) BeginDrawFrame(region *cairo.Region) gdk.DrawingContext {
	return gdk.WrapWindow(gextras.InternObject(w)).BeginDrawFrame(region)
}

func (w x11Window) BeginMoveDrag(button int, rootX int, rootY int, timestamp uint32) {
	gdk.WrapWindow(gextras.InternObject(w)).BeginMoveDrag(button, rootX, rootY, timestamp)
}

func (w x11Window) BeginMoveDragForDevice(device gdk.Device, button int, rootX int, rootY int, timestamp uint32) {
	gdk.WrapWindow(gextras.InternObject(w)).BeginMoveDragForDevice(device, button, rootX, rootY, timestamp)
}

func (w x11Window) BeginPaintRect(rectangle *gdk.Rectangle) {
	gdk.WrapWindow(gextras.InternObject(w)).BeginPaintRect(rectangle)
}

func (w x11Window) BeginPaintRegion(region *cairo.Region) {
	gdk.WrapWindow(gextras.InternObject(w)).BeginPaintRegion(region)
}

func (w x11Window) BeginResizeDrag(edge gdk.WindowEdge, button int, rootX int, rootY int, timestamp uint32) {
	gdk.WrapWindow(gextras.InternObject(w)).BeginResizeDrag(edge, button, rootX, rootY, timestamp)
}

func (w x11Window) BeginResizeDragForDevice(edge gdk.WindowEdge, device gdk.Device, button int, rootX int, rootY int, timestamp uint32) {
	gdk.WrapWindow(gextras.InternObject(w)).BeginResizeDragForDevice(edge, device, button, rootX, rootY, timestamp)
}

func (w x11Window) ConfigureFinished() {
	gdk.WrapWindow(gextras.InternObject(w)).ConfigureFinished()
}

func (w x11Window) CoordsFromParent(parentX float64, parentY float64) (x float64, y float64) {
	return gdk.WrapWindow(gextras.InternObject(w)).CoordsFromParent(parentX, parentY)
}

func (w x11Window) CoordsToParent(x float64, y float64) (parentX float64, parentY float64) {
	return gdk.WrapWindow(gextras.InternObject(w)).CoordsToParent(x, y)
}

func (w x11Window) CreateGLContext() (gdk.GLContext, error) {
	return gdk.WrapWindow(gextras.InternObject(w)).CreateGLContext()
}

func (w x11Window) CreateSimilarImageSurface(format cairo.Format, width int, height int, scale int) *cairo.Surface {
	return gdk.WrapWindow(gextras.InternObject(w)).CreateSimilarImageSurface(format, width, height, scale)
}

func (w x11Window) CreateSimilarSurface(content cairo.Content, width int, height int) *cairo.Surface {
	return gdk.WrapWindow(gextras.InternObject(w)).CreateSimilarSurface(content, width, height)
}

func (w x11Window) Deiconify() {
	gdk.WrapWindow(gextras.InternObject(w)).Deiconify()
}

func (w x11Window) Destroy() {
	gdk.WrapWindow(gextras.InternObject(w)).Destroy()
}

func (w x11Window) DestroyNotify() {
	gdk.WrapWindow(gextras.InternObject(w)).DestroyNotify()
}

func (w x11Window) EnableSynchronizedConfigure() {
	gdk.WrapWindow(gextras.InternObject(w)).EnableSynchronizedConfigure()
}

func (w x11Window) EndDrawFrame(context gdk.DrawingContext) {
	gdk.WrapWindow(gextras.InternObject(w)).EndDrawFrame(context)
}

func (w x11Window) EndPaint() {
	gdk.WrapWindow(gextras.InternObject(w)).EndPaint()
}

func (w x11Window) EnsureNative() bool {
	return gdk.WrapWindow(gextras.InternObject(w)).EnsureNative()
}

func (w x11Window) Flush() {
	gdk.WrapWindow(gextras.InternObject(w)).Flush()
}

func (w x11Window) Focus(timestamp uint32) {
	gdk.WrapWindow(gextras.InternObject(w)).Focus(timestamp)
}

func (w x11Window) FreezeToplevelUpdatesLibgtkOnly() {
	gdk.WrapWindow(gextras.InternObject(w)).FreezeToplevelUpdatesLibgtkOnly()
}

func (w x11Window) FreezeUpdates() {
	gdk.WrapWindow(gextras.InternObject(w)).FreezeUpdates()
}

func (w x11Window) Fullscreen() {
	gdk.WrapWindow(gextras.InternObject(w)).Fullscreen()
}

func (w x11Window) FullscreenOnMonitor(monitor int) {
	gdk.WrapWindow(gextras.InternObject(w)).FullscreenOnMonitor(monitor)
}

func (w x11Window) GeometryChanged() {
	gdk.WrapWindow(gextras.InternObject(w)).GeometryChanged()
}

func (w x11Window) GetAcceptFocus() bool {
	return gdk.WrapWindow(gextras.InternObject(w)).GetAcceptFocus()
}

func (w x11Window) GetBackgroundPattern() *cairo.Pattern {
	return gdk.WrapWindow(gextras.InternObject(w)).GetBackgroundPattern()
}

func (w x11Window) GetClipRegion() *cairo.Region {
	return gdk.WrapWindow(gextras.InternObject(w)).GetClipRegion()
}

func (w x11Window) GetComposited() bool {
	return gdk.WrapWindow(gextras.InternObject(w)).GetComposited()
}

func (w x11Window) GetCursor() gdk.Cursor {
	return gdk.WrapWindow(gextras.InternObject(w)).GetCursor()
}

func (w x11Window) GetDecorations() (gdk.WMDecoration, bool) {
	return gdk.WrapWindow(gextras.InternObject(w)).GetDecorations()
}

func (w x11Window) GetDeviceCursor(device gdk.Device) gdk.Cursor {
	return gdk.WrapWindow(gextras.InternObject(w)).GetDeviceCursor(device)
}

func (w x11Window) GetDeviceEvents(device gdk.Device) gdk.EventMask {
	return gdk.WrapWindow(gextras.InternObject(w)).GetDeviceEvents(device)
}

func (w x11Window) GetDevicePosition(device gdk.Device) (x int, y int, mask gdk.ModifierType, ret gdk.Window) {
	return gdk.WrapWindow(gextras.InternObject(w)).GetDevicePosition(device)
}

func (w x11Window) GetDevicePositionDouble(device gdk.Device) (x float64, y float64, mask gdk.ModifierType, ret gdk.Window) {
	return gdk.WrapWindow(gextras.InternObject(w)).GetDevicePositionDouble(device)
}

func (w x11Window) GetDisplay() gdk.Display {
	return gdk.WrapWindow(gextras.InternObject(w)).GetDisplay()
}

func (w x11Window) GetDragProtocol() (gdk.Window, gdk.DragProtocol) {
	return gdk.WrapWindow(gextras.InternObject(w)).GetDragProtocol()
}

func (w x11Window) GetEffectiveParent() gdk.Window {
	return gdk.WrapWindow(gextras.InternObject(w)).GetEffectiveParent()
}

func (w x11Window) GetEffectiveToplevel() gdk.Window {
	return gdk.WrapWindow(gextras.InternObject(w)).GetEffectiveToplevel()
}

func (w x11Window) GetEventCompression() bool {
	return gdk.WrapWindow(gextras.InternObject(w)).GetEventCompression()
}

func (w x11Window) GetEvents() gdk.EventMask {
	return gdk.WrapWindow(gextras.InternObject(w)).GetEvents()
}

func (w x11Window) GetFocusOnMap() bool {
	return gdk.WrapWindow(gextras.InternObject(w)).GetFocusOnMap()
}

func (w x11Window) GetFrameClock() gdk.FrameClock {
	return gdk.WrapWindow(gextras.InternObject(w)).GetFrameClock()
}

func (w x11Window) GetFrameExtents() gdk.Rectangle {
	return gdk.WrapWindow(gextras.InternObject(w)).GetFrameExtents()
}

func (w x11Window) GetFullscreenMode() gdk.FullscreenMode {
	return gdk.WrapWindow(gextras.InternObject(w)).GetFullscreenMode()
}

func (w x11Window) GetGeometry() (x int, y int, width int, height int) {
	return gdk.WrapWindow(gextras.InternObject(w)).GetGeometry()
}

func (w x11Window) GetGroup() gdk.Window {
	return gdk.WrapWindow(gextras.InternObject(w)).GetGroup()
}

func (w x11Window) GetHeight() int {
	return gdk.WrapWindow(gextras.InternObject(w)).GetHeight()
}

func (w x11Window) GetModalHint() bool {
	return gdk.WrapWindow(gextras.InternObject(w)).GetModalHint()
}

func (w x11Window) GetOrigin() (x int, y int, gint int) {
	return gdk.WrapWindow(gextras.InternObject(w)).GetOrigin()
}

func (w x11Window) GetParent() gdk.Window {
	return gdk.WrapWindow(gextras.InternObject(w)).GetParent()
}

func (w x11Window) GetPassThrough() bool {
	return gdk.WrapWindow(gextras.InternObject(w)).GetPassThrough()
}

func (w x11Window) GetPointer() (x int, y int, mask gdk.ModifierType, ret gdk.Window) {
	return gdk.WrapWindow(gextras.InternObject(w)).GetPointer()
}

func (w x11Window) GetPosition() (x int, y int) {
	return gdk.WrapWindow(gextras.InternObject(w)).GetPosition()
}

func (w x11Window) GetRootCoords(x int, y int) (rootX int, rootY int) {
	return gdk.WrapWindow(gextras.InternObject(w)).GetRootCoords(x, y)
}

func (w x11Window) GetRootOrigin() (x int, y int) {
	return gdk.WrapWindow(gextras.InternObject(w)).GetRootOrigin()
}

func (w x11Window) GetScaleFactor() int {
	return gdk.WrapWindow(gextras.InternObject(w)).GetScaleFactor()
}

func (w x11Window) GetScreen() gdk.Screen {
	return gdk.WrapWindow(gextras.InternObject(w)).GetScreen()
}

func (w x11Window) GetSourceEvents(source gdk.InputSource) gdk.EventMask {
	return gdk.WrapWindow(gextras.InternObject(w)).GetSourceEvents(source)
}

func (w x11Window) GetState() gdk.WindowState {
	return gdk.WrapWindow(gextras.InternObject(w)).GetState()
}

func (w x11Window) GetSupportMultidevice() bool {
	return gdk.WrapWindow(gextras.InternObject(w)).GetSupportMultidevice()
}

func (w x11Window) GetToplevel() gdk.Window {
	return gdk.WrapWindow(gextras.InternObject(w)).GetToplevel()
}

func (w x11Window) GetTypeHint() gdk.WindowTypeHint {
	return gdk.WrapWindow(gextras.InternObject(w)).GetTypeHint()
}

func (w x11Window) GetUpdateArea() *cairo.Region {
	return gdk.WrapWindow(gextras.InternObject(w)).GetUpdateArea()
}

func (w x11Window) GetUserData() interface{} {
	return gdk.WrapWindow(gextras.InternObject(w)).GetUserData()
}

func (w x11Window) GetVisibleRegion() *cairo.Region {
	return gdk.WrapWindow(gextras.InternObject(w)).GetVisibleRegion()
}

func (w x11Window) GetVisual() gdk.Visual {
	return gdk.WrapWindow(gextras.InternObject(w)).GetVisual()
}

func (w x11Window) GetWidth() int {
	return gdk.WrapWindow(gextras.InternObject(w)).GetWidth()
}

func (w x11Window) GetWindowType() gdk.WindowType {
	return gdk.WrapWindow(gextras.InternObject(w)).GetWindowType()
}

func (w x11Window) HasNative() bool {
	return gdk.WrapWindow(gextras.InternObject(w)).HasNative()
}

func (w x11Window) Hide() {
	gdk.WrapWindow(gextras.InternObject(w)).Hide()
}

func (w x11Window) Iconify() {
	gdk.WrapWindow(gextras.InternObject(w)).Iconify()
}

func (w x11Window) InputShapeCombineRegion(shapeRegion *cairo.Region, offsetX int, offsetY int) {
	gdk.WrapWindow(gextras.InternObject(w)).InputShapeCombineRegion(shapeRegion, offsetX, offsetY)
}

func (w x11Window) InvalidateRect(rect *gdk.Rectangle, invalidateChildren bool) {
	gdk.WrapWindow(gextras.InternObject(w)).InvalidateRect(rect, invalidateChildren)
}

func (w x11Window) InvalidateRegion(region *cairo.Region, invalidateChildren bool) {
	gdk.WrapWindow(gextras.InternObject(w)).InvalidateRegion(region, invalidateChildren)
}

func (w x11Window) IsDestroyed() bool {
	return gdk.WrapWindow(gextras.InternObject(w)).IsDestroyed()
}

func (w x11Window) IsInputOnly() bool {
	return gdk.WrapWindow(gextras.InternObject(w)).IsInputOnly()
}

func (w x11Window) IsShaped() bool {
	return gdk.WrapWindow(gextras.InternObject(w)).IsShaped()
}

func (w x11Window) IsViewable() bool {
	return gdk.WrapWindow(gextras.InternObject(w)).IsViewable()
}

func (w x11Window) IsVisible() bool {
	return gdk.WrapWindow(gextras.InternObject(w)).IsVisible()
}

func (w x11Window) Lower() {
	gdk.WrapWindow(gextras.InternObject(w)).Lower()
}

func (w x11Window) MarkPaintFromClip(cr *cairo.Context) {
	gdk.WrapWindow(gextras.InternObject(w)).MarkPaintFromClip(cr)
}

func (w x11Window) Maximize() {
	gdk.WrapWindow(gextras.InternObject(w)).Maximize()
}

func (w x11Window) MergeChildInputShapes() {
	gdk.WrapWindow(gextras.InternObject(w)).MergeChildInputShapes()
}

func (w x11Window) MergeChildShapes() {
	gdk.WrapWindow(gextras.InternObject(w)).MergeChildShapes()
}

func (w x11Window) Move(x int, y int) {
	gdk.WrapWindow(gextras.InternObject(w)).Move(x, y)
}

func (w x11Window) MoveRegion(region *cairo.Region, dx int, dy int) {
	gdk.WrapWindow(gextras.InternObject(w)).MoveRegion(region, dx, dy)
}

func (w x11Window) MoveResize(x int, y int, width int, height int) {
	gdk.WrapWindow(gextras.InternObject(w)).MoveResize(x, y, width, height)
}

func (w x11Window) MoveToRect(rect *gdk.Rectangle, rectAnchor gdk.Gravity, windowAnchor gdk.Gravity, anchorHints gdk.AnchorHints, rectAnchorDx int, rectAnchorDy int) {
	gdk.WrapWindow(gextras.InternObject(w)).MoveToRect(rect, rectAnchor, windowAnchor, anchorHints, rectAnchorDx, rectAnchorDy)
}

func (w x11Window) ProcessUpdates(updateChildren bool) {
	gdk.WrapWindow(gextras.InternObject(w)).ProcessUpdates(updateChildren)
}

func (w x11Window) Raise() {
	gdk.WrapWindow(gextras.InternObject(w)).Raise()
}

func (w x11Window) RegisterDnd() {
	gdk.WrapWindow(gextras.InternObject(w)).RegisterDnd()
}

func (w x11Window) Reparent(newParent gdk.Window, x int, y int) {
	gdk.WrapWindow(gextras.InternObject(w)).Reparent(newParent, x, y)
}

func (w x11Window) Resize(width int, height int) {
	gdk.WrapWindow(gextras.InternObject(w)).Resize(width, height)
}

func (w x11Window) Restack(sibling gdk.Window, above bool) {
	gdk.WrapWindow(gextras.InternObject(w)).Restack(sibling, above)
}

func (w x11Window) Scroll(dx int, dy int) {
	gdk.WrapWindow(gextras.InternObject(w)).Scroll(dx, dy)
}

func (w x11Window) SetAcceptFocus(acceptFocus bool) {
	gdk.WrapWindow(gextras.InternObject(w)).SetAcceptFocus(acceptFocus)
}

func (w x11Window) SetBackground(color *gdk.Color) {
	gdk.WrapWindow(gextras.InternObject(w)).SetBackground(color)
}

func (w x11Window) SetBackgroundPattern(pattern *cairo.Pattern) {
	gdk.WrapWindow(gextras.InternObject(w)).SetBackgroundPattern(pattern)
}

func (w x11Window) SetBackgroundRGBA(rgba *gdk.RGBA) {
	gdk.WrapWindow(gextras.InternObject(w)).SetBackgroundRGBA(rgba)
}

func (w x11Window) SetChildInputShapes() {
	gdk.WrapWindow(gextras.InternObject(w)).SetChildInputShapes()
}

func (w x11Window) SetChildShapes() {
	gdk.WrapWindow(gextras.InternObject(w)).SetChildShapes()
}

func (w x11Window) SetComposited(composited bool) {
	gdk.WrapWindow(gextras.InternObject(w)).SetComposited(composited)
}

func (w x11Window) SetCursor(cursor gdk.Cursor) {
	gdk.WrapWindow(gextras.InternObject(w)).SetCursor(cursor)
}

func (w x11Window) SetDecorations(decorations gdk.WMDecoration) {
	gdk.WrapWindow(gextras.InternObject(w)).SetDecorations(decorations)
}

func (w x11Window) SetDeviceCursor(device gdk.Device, cursor gdk.Cursor) {
	gdk.WrapWindow(gextras.InternObject(w)).SetDeviceCursor(device, cursor)
}

func (w x11Window) SetDeviceEvents(device gdk.Device, eventMask gdk.EventMask) {
	gdk.WrapWindow(gextras.InternObject(w)).SetDeviceEvents(device, eventMask)
}

func (w x11Window) SetEventCompression(eventCompression bool) {
	gdk.WrapWindow(gextras.InternObject(w)).SetEventCompression(eventCompression)
}

func (w x11Window) SetEvents(eventMask gdk.EventMask) {
	gdk.WrapWindow(gextras.InternObject(w)).SetEvents(eventMask)
}

func (w x11Window) SetFocusOnMap(focusOnMap bool) {
	gdk.WrapWindow(gextras.InternObject(w)).SetFocusOnMap(focusOnMap)
}

func (w x11Window) SetFullscreenMode(mode gdk.FullscreenMode) {
	gdk.WrapWindow(gextras.InternObject(w)).SetFullscreenMode(mode)
}

func (w x11Window) SetFunctions(functions gdk.WMFunction) {
	gdk.WrapWindow(gextras.InternObject(w)).SetFunctions(functions)
}

func (w x11Window) SetGeometryHints(geometry *gdk.Geometry, geomMask gdk.WindowHints) {
	gdk.WrapWindow(gextras.InternObject(w)).SetGeometryHints(geometry, geomMask)
}

func (w x11Window) SetGroup(leader gdk.Window) {
	gdk.WrapWindow(gextras.InternObject(w)).SetGroup(leader)
}

func (w x11Window) SetIconName(name string) {
	gdk.WrapWindow(gextras.InternObject(w)).SetIconName(name)
}

func (w x11Window) SetKeepAbove(setting bool) {
	gdk.WrapWindow(gextras.InternObject(w)).SetKeepAbove(setting)
}

func (w x11Window) SetKeepBelow(setting bool) {
	gdk.WrapWindow(gextras.InternObject(w)).SetKeepBelow(setting)
}

func (w x11Window) SetModalHint(modal bool) {
	gdk.WrapWindow(gextras.InternObject(w)).SetModalHint(modal)
}

func (w x11Window) SetOpacity(opacity float64) {
	gdk.WrapWindow(gextras.InternObject(w)).SetOpacity(opacity)
}

func (w x11Window) SetOpaqueRegion(region *cairo.Region) {
	gdk.WrapWindow(gextras.InternObject(w)).SetOpaqueRegion(region)
}

func (w x11Window) SetOverrideRedirect(overrideRedirect bool) {
	gdk.WrapWindow(gextras.InternObject(w)).SetOverrideRedirect(overrideRedirect)
}

func (w x11Window) SetPassThrough(passThrough bool) {
	gdk.WrapWindow(gextras.InternObject(w)).SetPassThrough(passThrough)
}

func (w x11Window) SetRole(role string) {
	gdk.WrapWindow(gextras.InternObject(w)).SetRole(role)
}

func (w x11Window) SetShadowWidth(left int, right int, top int, bottom int) {
	gdk.WrapWindow(gextras.InternObject(w)).SetShadowWidth(left, right, top, bottom)
}

func (w x11Window) SetSkipPagerHint(skipsPager bool) {
	gdk.WrapWindow(gextras.InternObject(w)).SetSkipPagerHint(skipsPager)
}

func (w x11Window) SetSkipTaskbarHint(skipsTaskbar bool) {
	gdk.WrapWindow(gextras.InternObject(w)).SetSkipTaskbarHint(skipsTaskbar)
}

func (w x11Window) SetSourceEvents(source gdk.InputSource, eventMask gdk.EventMask) {
	gdk.WrapWindow(gextras.InternObject(w)).SetSourceEvents(source, eventMask)
}

func (w x11Window) SetStartupID(startupId string) {
	gdk.WrapWindow(gextras.InternObject(w)).SetStartupID(startupId)
}

func (w x11Window) SetStaticGravities(useStatic bool) bool {
	return gdk.WrapWindow(gextras.InternObject(w)).SetStaticGravities(useStatic)
}

func (w x11Window) SetSupportMultidevice(supportMultidevice bool) {
	gdk.WrapWindow(gextras.InternObject(w)).SetSupportMultidevice(supportMultidevice)
}

func (w x11Window) SetTitle(title string) {
	gdk.WrapWindow(gextras.InternObject(w)).SetTitle(title)
}

func (w x11Window) SetTransientFor(parent gdk.Window) {
	gdk.WrapWindow(gextras.InternObject(w)).SetTransientFor(parent)
}

func (w x11Window) SetTypeHint(hint gdk.WindowTypeHint) {
	gdk.WrapWindow(gextras.InternObject(w)).SetTypeHint(hint)
}

func (w x11Window) SetUrgencyHint(urgent bool) {
	gdk.WrapWindow(gextras.InternObject(w)).SetUrgencyHint(urgent)
}

func (w x11Window) SetUserData(userData gextras.Objector) {
	gdk.WrapWindow(gextras.InternObject(w)).SetUserData(userData)
}

func (w x11Window) ShapeCombineRegion(shapeRegion *cairo.Region, offsetX int, offsetY int) {
	gdk.WrapWindow(gextras.InternObject(w)).ShapeCombineRegion(shapeRegion, offsetX, offsetY)
}

func (w x11Window) Show() {
	gdk.WrapWindow(gextras.InternObject(w)).Show()
}

func (w x11Window) ShowUnraised() {
	gdk.WrapWindow(gextras.InternObject(w)).ShowUnraised()
}

func (w x11Window) Stick() {
	gdk.WrapWindow(gextras.InternObject(w)).Stick()
}

func (w x11Window) ThawToplevelUpdatesLibgtkOnly() {
	gdk.WrapWindow(gextras.InternObject(w)).ThawToplevelUpdatesLibgtkOnly()
}

func (w x11Window) ThawUpdates() {
	gdk.WrapWindow(gextras.InternObject(w)).ThawUpdates()
}

func (w x11Window) Unfullscreen() {
	gdk.WrapWindow(gextras.InternObject(w)).Unfullscreen()
}

func (w x11Window) Unmaximize() {
	gdk.WrapWindow(gextras.InternObject(w)).Unmaximize()
}

func (w x11Window) Unstick() {
	gdk.WrapWindow(gextras.InternObject(w)).Unstick()
}

func (w x11Window) Withdraw() {
	gdk.WrapWindow(gextras.InternObject(w)).Withdraw()
}

func (w x11Window) Desktop() uint32 {
	var _arg0 *C.GdkWindow // out
	var _cret C.guint32    // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))

	_cret = C.gdk_x11_window_get_desktop(_arg0)

	var _guint32 uint32 // out

	_guint32 = uint32(_cret)

	return _guint32
}

func (w x11Window) MoveToCurrentDesktop() {
	var _arg0 *C.GdkWindow // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))

	C.gdk_x11_window_move_to_current_desktop(_arg0)
}

func (w x11Window) MoveToDesktop(desktop uint32) {
	var _arg0 *C.GdkWindow // out
	var _arg1 C.guint32    // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	_arg1 = C.guint32(desktop)

	C.gdk_x11_window_move_to_desktop(_arg0, _arg1)
}

func (w x11Window) SetFrameExtents(left int, right int, top int, bottom int) {
	var _arg0 *C.GdkWindow // out
	var _arg1 C.int        // out
	var _arg2 C.int        // out
	var _arg3 C.int        // out
	var _arg4 C.int        // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	_arg1 = C.int(left)
	_arg2 = C.int(right)
	_arg3 = C.int(top)
	_arg4 = C.int(bottom)

	C.gdk_x11_window_set_frame_extents(_arg0, _arg1, _arg2, _arg3, _arg4)
}

func (w x11Window) SetFrameSyncEnabled(frameSyncEnabled bool) {
	var _arg0 *C.GdkWindow // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	if frameSyncEnabled {
		_arg1 = C.TRUE
	}

	C.gdk_x11_window_set_frame_sync_enabled(_arg0, _arg1)
}

func (w x11Window) SetHideTitlebarWhenMaximized(hideTitlebarWhenMaximized bool) {
	var _arg0 *C.GdkWindow // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	if hideTitlebarWhenMaximized {
		_arg1 = C.TRUE
	}

	C.gdk_x11_window_set_hide_titlebar_when_maximized(_arg0, _arg1)
}

func (w x11Window) SetThemeVariant(variant string) {
	var _arg0 *C.GdkWindow // out
	var _arg1 *C.char      // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.char)(C.CString(variant))
	defer C.free(unsafe.Pointer(_arg1))

	C.gdk_x11_window_set_theme_variant(_arg0, _arg1)
}

func (w x11Window) SetUserTime(timestamp uint32) {
	var _arg0 *C.GdkWindow // out
	var _arg1 C.guint32    // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	_arg1 = C.guint32(timestamp)

	C.gdk_x11_window_set_user_time(_arg0, _arg1)
}

func (w x11Window) SetUTF8Property(name string, value string) {
	var _arg0 *C.GdkWindow // out
	var _arg1 *C.gchar     // out
	var _arg2 *C.gchar     // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.gchar)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(value))
	defer C.free(unsafe.Pointer(_arg2))

	C.gdk_x11_window_set_utf8_property(_arg0, _arg1, _arg2)
}
