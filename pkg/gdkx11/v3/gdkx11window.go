// Code generated by girgen. DO NOT EDIT.

package gdkx11

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/gdk/v3"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gdk-x11-3.0 gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gdk/gdkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gdk_x11_window_get_type()), F: marshalX11Window},
	})
}

// X11GetServerTime: routine to get the current X server time stamp.
func X11GetServerTime(window X11Window) uint32 {
	var arg1 *C.GdkWindow

	arg1 = (*C.GdkWindow)(unsafe.Pointer(window.Native()))

	var cret C.guint32
	var goret1 uint32

	cret = C.gdk_x11_get_server_time(window)

	goret1 = C.guint32(cret)

	return goret1
}

type X11Window interface {
	gdk.Window

	// Desktop gets the number of the workspace @window is on.
	Desktop() uint32
	// MoveToCurrentDesktop moves the window to the correct workspace when
	// running under a window manager that supports multiple workspaces, as
	// described in the Extended Window Manager Hints
	// (http://www.freedesktop.org/Standards/wm-spec) specification. Will not do
	// anything if the window is already on all workspaces.
	MoveToCurrentDesktop()
	// MoveToDesktop moves the window to the given workspace when running unde a
	// window manager that supports multiple workspaces, as described in the
	// Extended Window Manager Hints
	// (http://www.freedesktop.org/Standards/wm-spec) specification.
	MoveToDesktop(desktop uint32)
	// SetFrameExtents: this is the same as gdk_window_set_shadow_width() but it
	// only works on GdkX11Window.
	SetFrameExtents(left int, right int, top int, bottom int)
	// SetFrameSyncEnabled: this function can be used to disable frame
	// synchronization for a window. Normally frame synchronziation will be
	// enabled or disabled based on whether the system has a compositor that
	// supports frame synchronization, but if the window is not directly managed
	// by the window manager, then frame synchronziation may need to be
	// disabled. This is the case for a window embedded via the XEMBED protocol.
	SetFrameSyncEnabled(frameSyncEnabled bool)
	// SetHideTitlebarWhenMaximized: set a hint for the window manager,
	// requesting that the titlebar should be hidden when the window is
	// maximized.
	//
	// Note that this property is automatically updated by GTK+, so this
	// function should only be used by applications which do not use GTK+ to
	// create toplevel windows.
	SetHideTitlebarWhenMaximized(hideTitlebarWhenMaximized bool)
	// SetThemeVariant: GTK+ applications can request a dark theme variant. In
	// order to make other applications - namely window managers using GTK+ for
	// themeing - aware of this choice, GTK+ uses this function to export the
	// requested theme variant as _GTK_THEME_VARIANT property on toplevel
	// windows.
	//
	// Note that this property is automatically updated by GTK+, so this
	// function should only be used by applications which do not use GTK+ to
	// create toplevel windows.
	SetThemeVariant(variant string)
	// SetUserTime: the application can use this call to update the
	// _NET_WM_USER_TIME property on a toplevel window. This property stores an
	// Xserver time which represents the time of the last user input event
	// received for this window. This property may be used by the window manager
	// to alter the focus, stacking, and/or placement behavior of windows when
	// they are mapped depending on whether the new window was created by a user
	// action or is a "pop-up" window activated by a timer or some other event.
	//
	// Note that this property is automatically updated by GDK, so this function
	// should only be used by applications which handle input events bypassing
	// GDK.
	SetUserTime(timestamp uint32)
	// SetUTF8Property: this function modifies or removes an arbitrary X11
	// window property of type UTF8_STRING. If the given @window is not a
	// toplevel window, it is ignored.
	SetUTF8Property(name string, value string)
}

// x11Window implements the X11Window interface.
type x11Window struct {
	gdk.Window
}

var _ X11Window = (*x11Window)(nil)

// WrapX11Window wraps a GObject to the right type. It is
// primarily used internally.
func WrapX11Window(obj *externglib.Object) X11Window {
	return X11Window{
		gdk.Window: gdk.WrapWindow(obj),
	}
}

func marshalX11Window(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapX11Window(obj), nil
}

// Desktop gets the number of the workspace @window is on.
func (w x11Window) Desktop() uint32 {
	var arg0 *C.GdkWindow

	arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))

	var cret C.guint32
	var goret1 uint32

	cret = C.gdk_x11_window_get_desktop(arg0)

	goret1 = C.guint32(cret)

	return goret1
}

// MoveToCurrentDesktop moves the window to the correct workspace when
// running under a window manager that supports multiple workspaces, as
// described in the Extended Window Manager Hints
// (http://www.freedesktop.org/Standards/wm-spec) specification. Will not do
// anything if the window is already on all workspaces.
func (w x11Window) MoveToCurrentDesktop() {
	var arg0 *C.GdkWindow

	arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))

	C.gdk_x11_window_move_to_current_desktop(arg0)
}

// MoveToDesktop moves the window to the given workspace when running unde a
// window manager that supports multiple workspaces, as described in the
// Extended Window Manager Hints
// (http://www.freedesktop.org/Standards/wm-spec) specification.
func (w x11Window) MoveToDesktop(desktop uint32) {
	var arg0 *C.GdkWindow
	var arg1 C.guint32

	arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	arg1 = C.guint32(desktop)

	C.gdk_x11_window_move_to_desktop(arg0, desktop)
}

// SetFrameExtents: this is the same as gdk_window_set_shadow_width() but it
// only works on GdkX11Window.
func (w x11Window) SetFrameExtents(left int, right int, top int, bottom int) {
	var arg0 *C.GdkWindow
	var arg1 C.int
	var arg2 C.int
	var arg3 C.int
	var arg4 C.int

	arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	arg1 = C.int(left)
	arg2 = C.int(right)
	arg3 = C.int(top)
	arg4 = C.int(bottom)

	C.gdk_x11_window_set_frame_extents(arg0, left, right, top, bottom)
}

// SetFrameSyncEnabled: this function can be used to disable frame
// synchronization for a window. Normally frame synchronziation will be
// enabled or disabled based on whether the system has a compositor that
// supports frame synchronization, but if the window is not directly managed
// by the window manager, then frame synchronziation may need to be
// disabled. This is the case for a window embedded via the XEMBED protocol.
func (w x11Window) SetFrameSyncEnabled(frameSyncEnabled bool) {
	var arg0 *C.GdkWindow
	var arg1 C.gboolean

	arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	if frameSyncEnabled {
		arg1 = C.gboolean(1)
	}

	C.gdk_x11_window_set_frame_sync_enabled(arg0, frameSyncEnabled)
}

// SetHideTitlebarWhenMaximized: set a hint for the window manager,
// requesting that the titlebar should be hidden when the window is
// maximized.
//
// Note that this property is automatically updated by GTK+, so this
// function should only be used by applications which do not use GTK+ to
// create toplevel windows.
func (w x11Window) SetHideTitlebarWhenMaximized(hideTitlebarWhenMaximized bool) {
	var arg0 *C.GdkWindow
	var arg1 C.gboolean

	arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	if hideTitlebarWhenMaximized {
		arg1 = C.gboolean(1)
	}

	C.gdk_x11_window_set_hide_titlebar_when_maximized(arg0, hideTitlebarWhenMaximized)
}

// SetThemeVariant: GTK+ applications can request a dark theme variant. In
// order to make other applications - namely window managers using GTK+ for
// themeing - aware of this choice, GTK+ uses this function to export the
// requested theme variant as _GTK_THEME_VARIANT property on toplevel
// windows.
//
// Note that this property is automatically updated by GTK+, so this
// function should only be used by applications which do not use GTK+ to
// create toplevel windows.
func (w x11Window) SetThemeVariant(variant string) {
	var arg0 *C.GdkWindow
	var arg1 *C.char

	arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	arg1 = (*C.char)(C.CString(variant))
	defer C.free(unsafe.Pointer(arg1))

	C.gdk_x11_window_set_theme_variant(arg0, variant)
}

// SetUserTime: the application can use this call to update the
// _NET_WM_USER_TIME property on a toplevel window. This property stores an
// Xserver time which represents the time of the last user input event
// received for this window. This property may be used by the window manager
// to alter the focus, stacking, and/or placement behavior of windows when
// they are mapped depending on whether the new window was created by a user
// action or is a "pop-up" window activated by a timer or some other event.
//
// Note that this property is automatically updated by GDK, so this function
// should only be used by applications which handle input events bypassing
// GDK.
func (w x11Window) SetUserTime(timestamp uint32) {
	var arg0 *C.GdkWindow
	var arg1 C.guint32

	arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	arg1 = C.guint32(timestamp)

	C.gdk_x11_window_set_user_time(arg0, timestamp)
}

// SetUTF8Property: this function modifies or removes an arbitrary X11
// window property of type UTF8_STRING. If the given @window is not a
// toplevel window, it is ignored.
func (w x11Window) SetUTF8Property(name string, value string) {
	var arg0 *C.GdkWindow
	var arg1 *C.gchar
	var arg2 *C.gchar

	arg0 = (*C.GdkWindow)(unsafe.Pointer(w.Native()))
	arg1 = (*C.gchar)(C.CString(name))
	defer C.free(unsafe.Pointer(arg1))
	arg2 = (*C.gchar)(C.CString(value))
	defer C.free(unsafe.Pointer(arg2))

	C.gdk_x11_window_set_utf8_property(arg0, name, value)
}
