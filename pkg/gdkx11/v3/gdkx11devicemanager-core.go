// Code generated by girgen. DO NOT EDIT.

package gdkx11

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gdk-x11-3.0 gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <gdk/gdkx.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gdk_x11_device_manager_core_get_type()), F: marshalX11DeviceManagerCore},
	})
}

type X11DeviceManagerCore interface {
	gdk.DeviceManager

	// AsDeviceManager casts the class to the gdk.DeviceManager interface.
	AsDeviceManager() gdk.DeviceManager

	// GetClientPointer returns the client pointer, that is, the master pointer
	// that acts as the core pointer for this application. In X11, window
	// managers may change this depending on the interaction pattern under the
	// presence of several pointers.
	//
	// You should use this function seldomly, only in code that isn’t triggered
	// by a Event and there aren’t other means to get a meaningful Device to
	// operate on.
	//
	// Deprecated: since version 3.20.
	//
	// This method is inherited from gdk.DeviceManager
	GetClientPointer() gdk.Device
	// GetDisplay gets the Display associated to @device_manager.
	//
	// This method is inherited from gdk.DeviceManager
	GetDisplay() gdk.Display
}

// x11DeviceManagerCore implements the X11DeviceManagerCore interface.
type x11DeviceManagerCore struct {
	*externglib.Object
}

var _ X11DeviceManagerCore = (*x11DeviceManagerCore)(nil)

// WrapX11DeviceManagerCore wraps a GObject to a type that implements
// interface X11DeviceManagerCore. It is primarily used internally.
func WrapX11DeviceManagerCore(obj *externglib.Object) X11DeviceManagerCore {
	return x11DeviceManagerCore{obj}
}

func marshalX11DeviceManagerCore(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapX11DeviceManagerCore(obj), nil
}

func (x x11DeviceManagerCore) AsDeviceManager() gdk.DeviceManager {
	return gdk.WrapDeviceManager(gextras.InternObject(x))
}

func (d x11DeviceManagerCore) GetClientPointer() gdk.Device {
	return gdk.WrapDeviceManager(gextras.InternObject(d)).GetClientPointer()
}

func (d x11DeviceManagerCore) GetDisplay() gdk.Display {
	return gdk.WrapDeviceManager(gextras.InternObject(d)).GetDisplay()
}
