// Code generated by girgen. DO NOT EDIT.

package gdkx11

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gdk-x11-3.0 gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <gdk/gdkx.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gdk_x11_device_manager_core_get_type()), F: marshalX11DeviceManagerCorer},
	})
}

// X11DeviceManagerCorer describes X11DeviceManagerCore's methods.
type X11DeviceManagerCorer interface {
	privateX11DeviceManagerCore()
}

type X11DeviceManagerCore struct {
	gdk.DeviceManager
}

var (
	_ X11DeviceManagerCorer = (*X11DeviceManagerCore)(nil)
	_ gextras.Nativer       = (*X11DeviceManagerCore)(nil)
)

func wrapX11DeviceManagerCore(obj *externglib.Object) X11DeviceManagerCorer {
	return &X11DeviceManagerCore{
		DeviceManager: gdk.DeviceManager{
			Object: obj,
		},
	}
}

func marshalX11DeviceManagerCorer(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapX11DeviceManagerCore(obj), nil
}

func (*X11DeviceManagerCore) privateX11DeviceManagerCore() {}
