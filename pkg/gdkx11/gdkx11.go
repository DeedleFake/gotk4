// Code generated by girgen. DO NOT EDIT.

package gdkx11

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/gdk"
	"github.com/diamondburned/gotk4/pkg/xlib"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4-x11
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <gdk/x11/gdkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		// Enums
		// Skipped X11DeviceType.

		// Records
		// Skipped X11AppLaunchContextClass.
		// Skipped X11DeviceManagerXI2Class.
		// Skipped X11DeviceXI2Class.
		// Skipped X11DisplayClass.
		// Skipped X11DragClass.
		// Skipped X11GLContextClass.
		// Skipped X11MonitorClass.
		// Skipped X11ScreenClass.
		// Skipped X11SurfaceClass.

		// Classes
		{T: externglib.Type(C.gdk_x11_app_launch_context_get_type()), F: marshalX11AppLaunchContext},
		{T: externglib.Type(C.gdk_x11_device_manager_xi2_get_type()), F: marshalX11DeviceManagerXI2},
		{T: externglib.Type(C.gdk_x11_device_xi2_get_type()), F: marshalX11DeviceXI2},
		{T: externglib.Type(C.gdk_x11_display_get_type()), F: marshalX11Display},
		{T: externglib.Type(C.gdk_x11_drag_get_type()), F: marshalX11Drag},
		// Skipped X11GLContext.
		{T: externglib.Type(C.gdk_x11_monitor_get_type()), F: marshalX11Monitor},
		{T: externglib.Type(C.gdk_x11_screen_get_type()), F: marshalX11Screen},
		{T: externglib.Type(C.gdk_x11_surface_get_type()), F: marshalX11Surface},
	})
}

type X11DeviceType int

const (
	X11DeviceTypeLogical X11DeviceType = 0

	X11DeviceTypePhysical X11DeviceType = 1

	X11DeviceTypeFloating X11DeviceType = 2
)

// X11DeviceGetID: returns the device ID as seen by XInput2.
func X11DeviceGetID(device *X11DeviceXI2) int

// X11DeviceManagerLookup: returns the Device that wraps the given device ID.
func X11DeviceManagerLookup(deviceManager *X11DeviceManagerXI2, deviceID int) *X11DeviceXI2

// X11FreeCompoundText: frees the data returned from
// gdk_x11_display_string_to_compound_text().
func X11FreeCompoundText(ctext uint8)

// X11FreeTextList: frees the array of strings created by
// gdk_x11_display_text_property_to_text_list().
func X11FreeTextList(list string)

// X11GetServerTime: routine to get the current X server time stamp.
func X11GetServerTime(surface *X11Surface) uint32

// X11GetXatomByNameForDisplay: returns the X atom for a Display corresponding
// to @atom_name. This function caches the result, so if called repeatedly it is
// much faster than XInternAtom(), which is a round trip to the server each
// time.
func X11GetXatomByNameForDisplay(display *X11Display, atomName string) xlib.Atom

// X11GetXatomNameForDisplay: returns the name of an X atom for its display.
// This function is meant mainly for debugging, so for convenience, unlike
// XAtomName() and the result doesn’t need to be freed.
func X11GetXatomNameForDisplay(display *X11Display, xatom xlib.Atom) string

// X11LookupXdisplay: find the Display corresponding to @xdisplay, if any
// exists.
func X11LookupXdisplay(xdisplay *xlib.Display) *X11Display

// X11SetSmClientID: sets the `SM_CLIENT_ID` property on the application’s
// leader window so that the window manager can save the application’s state
// using the X11R6 ICCCM session management protocol.
//
// See the X Session Management Library documentation for more information on
// session management and the Inter-Client Communication Conventions Manual
func X11SetSmClientID(smClientID string)

type X11AppLaunchContext struct {
	gdk.AppLaunchContext
}

func wrapX11AppLaunchContext(obj *externglib.Object) *X11AppLaunchContext {
	return &X11AppLaunchContext{AppLaunchContext{AppLaunchContext{*externglib.Object{obj}}}}
}

func marshalX11AppLaunchContext(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapWidget(obj), nil
}

type X11DeviceManagerXI2 struct {
	*externglib.Object
}

func wrapX11DeviceManagerXI2(obj *externglib.Object) *X11DeviceManagerXI2 {
	return &X11DeviceManagerXI2{*externglib.Object{obj}}
}

func marshalX11DeviceManagerXI2(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapWidget(obj), nil
}

type X11DeviceXI2 struct {
	gdk.Device
}

func wrapX11DeviceXI2(obj *externglib.Object) *X11DeviceXI2 {
	return &X11DeviceXI2{Device{*externglib.Object{obj}}}
}

func marshalX11DeviceXI2(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapWidget(obj), nil
}

type X11Display struct {
	gdk.Display
}

func wrapX11Display(obj *externglib.Object) *X11Display {
	return &X11Display{Display{*externglib.Object{obj}}}
}

func marshalX11Display(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapWidget(obj), nil
}

type X11Drag struct {
	gdk.Drag
}

func wrapX11Drag(obj *externglib.Object) *X11Drag {
	return &X11Drag{Drag{*externglib.Object{obj}}}
}

func marshalX11Drag(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapWidget(obj), nil
}

type X11Monitor struct {
	gdk.Monitor
}

func wrapX11Monitor(obj *externglib.Object) *X11Monitor {
	return &X11Monitor{Monitor{*externglib.Object{obj}}}
}

func marshalX11Monitor(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapWidget(obj), nil
}

type X11Screen struct {
	*externglib.Object
}

func wrapX11Screen(obj *externglib.Object) *X11Screen {
	return &X11Screen{*externglib.Object{obj}}
}

func marshalX11Screen(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapWidget(obj), nil
}

type X11Surface struct {
	gdk.Surface
}

func wrapX11Surface(obj *externglib.Object) *X11Surface {
	return &X11Surface{Surface{*externglib.Object{obj}}}
}

func marshalX11Surface(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapWidget(obj), nil
}
