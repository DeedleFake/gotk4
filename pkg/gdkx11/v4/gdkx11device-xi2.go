// Code generated by girgen. DO NOT EDIT.

package gdkx11

import (
	"github.com/diamondburned/gotk4/internal/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4-x11
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gdk/x11/gdkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gdk_x11_device_xi2_get_type()), F: marshalX11DeviceXI2},
	})
}

type X11DeviceType int

const (
	X11DeviceTypeLogical X11DeviceType = 0

	X11DeviceTypePhysical X11DeviceType = 1

	X11DeviceTypeFloating X11DeviceType = 2
)

type X11DeviceXI2 interface {
	gdk.Device
}

// x11DeviceXI2 implements the X11DeviceXI2 interface.
type x11DeviceXI2 struct {
	gdk.Device
}

var _ X11DeviceXI2 = (*x11DeviceXI2)(nil)

// WrapX11DeviceXI2 wraps a GObject to the right type. It is
// primarily used internally.
func WrapX11DeviceXI2(obj *externglib.Object) X11DeviceXI2 {
	return X11DeviceXI2{
		gdk.Device: gdk.WrapDevice(obj),
	}
}

func marshalX11DeviceXI2(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapX11DeviceXI2(obj), nil
}
