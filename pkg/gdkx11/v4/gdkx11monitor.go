// Code generated by girgen. DO NOT EDIT.

package gdkx11

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/gdk/v4"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4-x11 gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <gdk/x11/gdkx.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gdk_x11_monitor_get_type()), F: marshalX11Monitorrer},
	})
}

// X11Monitorrer describes X11Monitor's methods.
type X11Monitorrer interface {
	gextras.Objector

	Workarea() gdk.Rectangle
}

type X11Monitor struct {
	gdk.Monitor
}

var _ X11Monitorrer = (*X11Monitor)(nil)

func wrapX11Monitorrer(obj *externglib.Object) X11Monitorrer {
	return &X11Monitor{
		Monitor: gdk.Monitor{
			Object: obj,
		},
	}
}

func marshalX11Monitorrer(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapX11Monitorrer(obj), nil
}

// Workarea retrieves the size and position of the “work area” on a monitor
// within the display coordinate space. The returned geometry is in ”application
// pixels”, not in ”device pixels” (see gdk_monitor_get_scale_factor()).
func (monitor *X11Monitor) Workarea() gdk.Rectangle {
	var _arg0 *C.GdkMonitor  // out
	var _arg1 C.GdkRectangle // in

	_arg0 = (*C.GdkMonitor)(unsafe.Pointer(monitor.Native()))

	C.gdk_x11_monitor_get_workarea(_arg0, &_arg1)

	var _workarea gdk.Rectangle // out

	_workarea = *(*gdk.Rectangle)(unsafe.Pointer((&_arg1)))

	return _workarea
}
