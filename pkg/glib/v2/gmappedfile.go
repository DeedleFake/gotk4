// Code generated by girgen. DO NOT EDIT.

package glib

import (
	"runtime"
	"unsafe"

	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: glib-2.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <glib.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_mapped_file_get_type()), F: marshalMappedFile},
	})
}

// MappedFile: the File represents a file mapping created with
// g_mapped_file_new(). It has only private members and should not be accessed
// directly.
type MappedFile struct {
	native C.GMappedFile
}

// WrapMappedFile wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapMappedFile(ptr unsafe.Pointer) *MappedFile {
	if ptr == nil {
		return nil
	}

	return (*MappedFile)(ptr)
}

func marshalMappedFile(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapMappedFile(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (m *MappedFile) Native() unsafe.Pointer {
	return unsafe.Pointer(&m.native)
}

// NewMappedFile constructs a struct MappedFile.
func NewMappedFile(filename string, writable bool) (mappedFile *MappedFile, err error) {
	var arg1 *C.gchar
	var arg2 C.gboolean
	var gError *C.GError

	arg1 = (*C.gchar)(C.CString(filename))
	defer C.free(unsafe.Pointer(arg1))
	if writable {
		arg2 = C.TRUE
	}

	ret := C.g_mapped_file_new(arg1, arg2, &gError)

	var ret0 *MappedFile
	var goError error

	{
		ret0 = WrapMappedFile(unsafe.Pointer(ret))
		runtime.SetFinalizer(ret0, func(v *MappedFile) {
			C.free(unsafe.Pointer(v.Native()))
		})
	}

	if gError != nil {
		goError = fmt.Errorf("%d: %s", gError.code, C.GoString(gError.message))
		C.g_error_free(gError)
	}

	return ret0, goError
}

// NewMappedFileFromFd constructs a struct MappedFile.
func NewMappedFileFromFd(fd int, writable bool) (mappedFile *MappedFile, err error) {
	var arg1 C.gint
	var arg2 C.gboolean
	var gError *C.GError

	arg1 = C.gint(fd)
	if writable {
		arg2 = C.TRUE
	}

	ret := C.g_mapped_file_new_from_fd(arg1, arg2, &gError)

	var ret0 *MappedFile
	var goError error

	{
		ret0 = WrapMappedFile(unsafe.Pointer(ret))
		runtime.SetFinalizer(ret0, func(v *MappedFile) {
			C.free(unsafe.Pointer(v.Native()))
		})
	}

	if gError != nil {
		goError = fmt.Errorf("%d: %s", gError.code, C.GoString(gError.message))
		C.g_error_free(gError)
	}

	return ret0, goError
}

// Free: this call existed before File had refcounting and is currently exactly
// the same as g_mapped_file_unref().
func (f *MappedFile) Free() {
	var arg0 *C.GMappedFile

	arg0 = (*C.GMappedFile)(f.Native())

	C.g_mapped_file_free(arg0)
}

// Bytes creates a new #GBytes which references the data mapped from @file. The
// mapped contents of the file must not be modified after creating this bytes
// object, because a #GBytes should be immutable.
func (f *MappedFile) Bytes() *Bytes {
	var arg0 *C.GMappedFile

	arg0 = (*C.GMappedFile)(f.Native())

	ret := C.g_mapped_file_get_bytes(arg0)

	var ret0 *Bytes

	{
		ret0 = WrapBytes(unsafe.Pointer(ret))
		runtime.SetFinalizer(ret0, func(v *Bytes) {
			C.free(unsafe.Pointer(v.Native()))
		})
	}

	return ret0
}

// Contents returns the contents of a File.
//
// Note that the contents may not be zero-terminated, even if the File is backed
// by a text file.
//
// If the file is empty then nil is returned.
func (f *MappedFile) Contents() string {
	var arg0 *C.GMappedFile

	arg0 = (*C.GMappedFile)(f.Native())

	ret := C.g_mapped_file_get_contents(arg0)

	var ret0 string

	ret0 = C.GoString(ret)
	C.free(unsafe.Pointer(ret))

	return ret0
}

// Length returns the length of the contents of a File.
func (f *MappedFile) Length() uint {
	var arg0 *C.GMappedFile

	arg0 = (*C.GMappedFile)(f.Native())

	ret := C.g_mapped_file_get_length(arg0)

	var ret0 uint

	ret0 = uint(ret)

	return ret0
}

// Ref increments the reference count of @file by one. It is safe to call this
// function from any thread.
func (f *MappedFile) Ref() *MappedFile {
	var arg0 *C.GMappedFile

	arg0 = (*C.GMappedFile)(f.Native())

	ret := C.g_mapped_file_ref(arg0)

	var ret0 *MappedFile

	{
		ret0 = WrapMappedFile(unsafe.Pointer(ret))
		runtime.SetFinalizer(ret0, func(v *MappedFile) {
			C.free(unsafe.Pointer(v.Native()))
		})
	}

	return ret0
}

// Unref decrements the reference count of @file by one. If the reference count
// drops to 0, unmaps the buffer of @file and frees it.
//
// It is safe to call this function from any thread.
//
// Since 2.22
func (f *MappedFile) Unref() {
	var arg0 *C.GMappedFile

	arg0 = (*C.GMappedFile)(f.Native())

	C.g_mapped_file_unref(arg0)
}
