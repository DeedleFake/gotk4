// Code generated by girgen. DO NOT EDIT.

package glib

import (
	"unsafe"
)

// #cgo pkg-config: glib-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib.h>
import "C"

// ComputeHMACForData computes the HMAC for a binary @data of @length. This is a
// convenience wrapper for g_hmac_new(), g_hmac_get_string() and g_hmac_unref().
//
// The hexadecimal string returned will be in lower case.
func ComputeHMACForData(digestType ChecksumType, key []byte, data []byte) string {
	var _arg1 C.GChecksumType // out
	var _arg2 *C.guchar
	var _arg3 C.gsize
	var _arg4 *C.guchar
	var _arg5 C.gsize
	var _cret *C.gchar // in

	_arg1 = C.GChecksumType(digestType)
	_arg3 = C.gsize(len(key))
	_arg2 = (*C.guchar)(unsafe.Pointer(&key[0]))
	_arg5 = C.gsize(len(data))
	_arg4 = (*C.guchar)(unsafe.Pointer(&data[0]))

	_cret = C.g_compute_hmac_for_data(_arg1, _arg2, _arg3, _arg4, _arg5)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// ComputeHMACForString computes the HMAC for a string.
//
// The hexadecimal string returned will be in lower case.
func ComputeHMACForString(digestType ChecksumType, key []byte, str string, length int) string {
	var _arg1 C.GChecksumType // out
	var _arg2 *C.guchar
	var _arg3 C.gsize
	var _arg4 *C.gchar // out
	var _arg5 C.gssize // out
	var _cret *C.gchar // in

	_arg1 = C.GChecksumType(digestType)
	_arg3 = C.gsize(len(key))
	_arg2 = (*C.guchar)(unsafe.Pointer(&key[0]))
	_arg4 = (*C.gchar)(C.CString(str))
	defer C.free(unsafe.Pointer(_arg4))
	_arg5 = C.gssize(length)

	_cret = C.g_compute_hmac_for_string(_arg1, _arg2, _arg3, _arg4, _arg5)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// HMAC: an opaque structure representing a HMAC operation. To create a new
// GHmac, use g_hmac_new(). To free a GHmac, use g_hmac_unref().
type HMAC C.GHmac

// WrapHMAC wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapHMAC(ptr unsafe.Pointer) *HMAC {
	return (*HMAC)(ptr)
}

// Native returns the underlying C source pointer.
func (h *HMAC) Native() unsafe.Pointer {
	return unsafe.Pointer(h)
}

// String feeds @data into an existing #GHmac.
//
// The HMAC must still be open, that is g_hmac_get_string() or
// g_hmac_get_digest() must not have been called on @hmac.
func (h *HMAC) String() string {
	var _arg0 *C.GHmac // out
	var _cret *C.gchar // in

	_arg0 = (*C.GHmac)(unsafe.Pointer(h.Native()))

	_cret = C.g_hmac_get_string(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

// Unref feeds @data into an existing #GHmac.
//
// The HMAC must still be open, that is g_hmac_get_string() or
// g_hmac_get_digest() must not have been called on @hmac.
func (h *HMAC) Unref() {
	var _arg0 *C.GHmac // out

	_arg0 = (*C.GHmac)(unsafe.Pointer(h.Native()))

	C.g_hmac_unref(_arg0)
}

// Update feeds @data into an existing #GHmac.
//
// The HMAC must still be open, that is g_hmac_get_string() or
// g_hmac_get_digest() must not have been called on @hmac.
func (h *HMAC) Update(data []byte) {
	var _arg0 *C.GHmac // out
	var _arg1 *C.guchar
	var _arg2 C.gssize

	_arg0 = (*C.GHmac)(unsafe.Pointer(h.Native()))
	_arg2 = C.gssize(len(data))
	_arg1 = (*C.guchar)(unsafe.Pointer(&data[0]))

	C.g_hmac_update(_arg0, _arg1, _arg2)
}
