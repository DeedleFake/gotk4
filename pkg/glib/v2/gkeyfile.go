// Code generated by girgen. DO NOT EDIT.

package glib

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gerror"
	"github.com/diamondburned/gotk4/internal/ptr"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: glib-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <stdbool.h>
// #include <glib.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_key_file_get_type()), F: marshalKeyFile},
	})
}

// KeyFileError: error codes returned by key file parsing.
type KeyFileError int

const (
	// KeyFileErrorUnknownEncoding: the text being parsed was in an unknown
	// encoding
	KeyFileErrorUnknownEncoding KeyFileError = 0
	// KeyFileErrorParse: document was ill-formed
	KeyFileErrorParse KeyFileError = 1
	// KeyFileErrorNotFound: the file was not found
	KeyFileErrorNotFound KeyFileError = 2
	// KeyFileErrorKeyNotFound: a requested key was not found
	KeyFileErrorKeyNotFound KeyFileError = 3
	// KeyFileErrorGroupNotFound: a requested group was not found
	KeyFileErrorGroupNotFound KeyFileError = 4
	// KeyFileErrorInvalidValue: a value could not be parsed
	KeyFileErrorInvalidValue KeyFileError = 5
)

// KeyFileFlags flags which influence the parsing.
type KeyFileFlags int

const (
	// KeyFileFlagsNone: no flags, default behaviour
	KeyFileFlagsNone KeyFileFlags = 0b0
	// KeyFileFlagsKeepComments: use this flag if you plan to write the
	// (possibly modified) contents of the key file back to a file; otherwise
	// all comments will be lost when the key file is written back.
	KeyFileFlagsKeepComments KeyFileFlags = 0b1
	// KeyFileFlagsKeepTranslations: use this flag if you plan to write the
	// (possibly modified) contents of the key file back to a file; otherwise
	// only the translations for the current language will be written back.
	KeyFileFlagsKeepTranslations KeyFileFlags = 0b10
)

// KeyFile: the GKeyFile struct contains only private data and should not be
// accessed directly.
type KeyFile struct {
	native C.GKeyFile
}

// WrapKeyFile wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapKeyFile(ptr unsafe.Pointer) *KeyFile {
	if ptr == nil {
		return nil
	}

	return (*KeyFile)(ptr)
}

func marshalKeyFile(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapKeyFile(unsafe.Pointer(b)), nil
}

// NewKeyFile constructs a struct KeyFile.
func NewKeyFile() *KeyFile {
	var cret *C.GKeyFile
	var ret1 *KeyFile

	cret = C.g_key_file_new()

	ret1 = WrapKeyFile(unsafe.Pointer(cret))
	runtime.SetFinalizer(ret1, func(v *KeyFile) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return ret1
}

// Native returns the underlying C source pointer.
func (k *KeyFile) Native() unsafe.Pointer {
	return unsafe.Pointer(&k.native)
}

// Free clears all keys and groups from @key_file, and decreases the reference
// count by 1. If the reference count reaches zero, frees the key file and all
// its allocated memory.
func (k *KeyFile) Free() {
	var arg0 *C.GKeyFile

	arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))

	C.g_key_file_free(arg0)
}

// Boolean returns the value associated with @key under @group_name as a
// boolean.
//
// If @key cannot be found then false is returned and @error is set to
// KEY_FILE_ERROR_KEY_NOT_FOUND. Likewise, if the value associated with @key
// cannot be interpreted as a boolean then false is returned and @error is set
// to KEY_FILE_ERROR_INVALID_VALUE.
func (k *KeyFile) Boolean(groupName string, key string) error {
	var arg0 *C.GKeyFile
	var arg1 *C.gchar
	var arg2 *C.gchar

	arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	arg1 = (*C.gchar)(C.CString(groupName))
	defer C.free(unsafe.Pointer(arg1))
	arg2 = (*C.gchar)(C.CString(key))
	defer C.free(unsafe.Pointer(arg2))

	var errout *C.GError
	var goerr error

	C.g_key_file_get_boolean(arg0, groupName, key, &errout)

	goerr = gerror.Take(unsafe.Pointer(errout))

	return goerr
}

// BooleanList returns the values associated with @key under @group_name as
// booleans.
//
// If @key cannot be found then nil is returned and @error is set to
// KEY_FILE_ERROR_KEY_NOT_FOUND. Likewise, if the values associated with @key
// cannot be interpreted as booleans then nil is returned and @error is set to
// KEY_FILE_ERROR_INVALID_VALUE.
func (k *KeyFile) BooleanList(groupName string, key string) (length uint, oks []bool, err error) {
	var arg0 *C.GKeyFile
	var arg1 *C.gchar
	var arg2 *C.gchar

	arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	arg1 = (*C.gchar)(C.CString(groupName))
	defer C.free(unsafe.Pointer(arg1))
	arg2 = (*C.gchar)(C.CString(key))
	defer C.free(unsafe.Pointer(arg2))

	var errout *C.GError
	var goerr error
	var cret *C.gboolean
	var arg3 *C.gsize
	var ret3 []bool

	cret = C.g_key_file_get_boolean_list(arg0, groupName, key, &arg3, &errout)

	goerr = gerror.Take(unsafe.Pointer(errout))
	ptr.SetSlice(unsafe.Pointer(&ret3), unsafe.Pointer(cret), int(arg3))
	runtime.SetFinalizer(&ret3, func(v *[]bool) {
		C.free(ptr.Slice(unsafe.Pointer(v)))
	})

	return ret3, goerr, ret3
}

// Comment retrieves a comment above @key from @group_name. If @key is nil then
// @comment will be read from above @group_name. If both @key and @group_name
// are nil, then @comment will be read from above the first group in the file.
//
// Note that the returned string does not include the '#' comment markers, but
// does include any whitespace after them (on each line). It includes the line
// breaks between lines, but does not include the final line break.
func (k *KeyFile) Comment(groupName string, key string) (utf8 string, err error) {
	var arg0 *C.GKeyFile
	var arg1 *C.gchar
	var arg2 *C.gchar

	arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	arg1 = (*C.gchar)(C.CString(groupName))
	defer C.free(unsafe.Pointer(arg1))
	arg2 = (*C.gchar)(C.CString(key))
	defer C.free(unsafe.Pointer(arg2))

	var errout *C.GError
	var goerr error
	var cret *C.gchar
	var ret2 string

	cret = C.g_key_file_get_comment(arg0, groupName, key, &errout)

	goerr = gerror.Take(unsafe.Pointer(errout))
	ret2 = C.GoString(cret)
	defer C.free(unsafe.Pointer(cret))

	return goerr, ret2
}

// Double returns the value associated with @key under @group_name as a double.
// If @group_name is nil, the start_group is used.
//
// If @key cannot be found then 0.0 is returned and @error is set to
// KEY_FILE_ERROR_KEY_NOT_FOUND. Likewise, if the value associated with @key
// cannot be interpreted as a double then 0.0 is returned and @error is set to
// KEY_FILE_ERROR_INVALID_VALUE.
func (k *KeyFile) Double(groupName string, key string) (gdouble float64, err error) {
	var arg0 *C.GKeyFile
	var arg1 *C.gchar
	var arg2 *C.gchar

	arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	arg1 = (*C.gchar)(C.CString(groupName))
	defer C.free(unsafe.Pointer(arg1))
	arg2 = (*C.gchar)(C.CString(key))
	defer C.free(unsafe.Pointer(arg2))

	var errout *C.GError
	var goerr error
	var cret C.gdouble
	var ret2 float64

	cret = C.g_key_file_get_double(arg0, groupName, key, &errout)

	goerr = gerror.Take(unsafe.Pointer(errout))
	ret2 = C.gdouble(cret)

	return goerr, ret2
}

// DoubleList returns the values associated with @key under @group_name as
// doubles.
//
// If @key cannot be found then nil is returned and @error is set to
// KEY_FILE_ERROR_KEY_NOT_FOUND. Likewise, if the values associated with @key
// cannot be interpreted as doubles then nil is returned and @error is set to
// KEY_FILE_ERROR_INVALID_VALUE.
func (k *KeyFile) DoubleList(groupName string, key string) (length uint, gdoubles []float64, err error) {
	var arg0 *C.GKeyFile
	var arg1 *C.gchar
	var arg2 *C.gchar

	arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	arg1 = (*C.gchar)(C.CString(groupName))
	defer C.free(unsafe.Pointer(arg1))
	arg2 = (*C.gchar)(C.CString(key))
	defer C.free(unsafe.Pointer(arg2))

	var errout *C.GError
	var goerr error
	var cret *C.gdouble
	var arg3 *C.gsize
	var ret3 []float64

	cret = C.g_key_file_get_double_list(arg0, groupName, key, &arg3, &errout)

	goerr = gerror.Take(unsafe.Pointer(errout))
	ptr.SetSlice(unsafe.Pointer(&ret3), unsafe.Pointer(cret), int(arg3))
	runtime.SetFinalizer(&ret3, func(v *[]float64) {
		C.free(ptr.Slice(unsafe.Pointer(v)))
	})

	return ret3, goerr, ret3
}

// Groups returns all groups in the key file loaded with @key_file. The array of
// returned groups will be nil-terminated, so @length may optionally be nil.
func (k *KeyFile) Groups() (length uint, utf8s []string) {
	var arg0 *C.GKeyFile

	arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))

	var arg1 C.gsize
	var ret1 uint
	var cret **C.gchar
	var ret2 []string

	cret = C.g_key_file_get_groups(arg0, &arg1)

	*ret1 = C.gsize(arg1)
	{
		var length int
		for p := cret; *p != 0; p = (**C.gchar)(ptr.Add(unsafe.Pointer(p), unsafe.Sizeof(int(0)))) {
			length++
			if length < 0 {
				panic(`length overflow`)
			}
		}

		ret2 = make([]string, length)
		for i := uintptr(0); i < uintptr(length); i += unsafe.Sizeof(int(0)) {
			src := (*C.gchar)(ptr.Add(unsafe.Pointer(cret), i))
			ret2[i] = C.GoString(src)
			defer C.free(unsafe.Pointer(src))
		}
	}

	return ret1, ret2
}

// Int64 returns the value associated with @key under @group_name as a signed
// 64-bit integer. This is similar to g_key_file_get_integer() but can return
// 64-bit results without truncation.
func (k *KeyFile) Int64(groupName string, key string) (gint64 int64, err error) {
	var arg0 *C.GKeyFile
	var arg1 *C.gchar
	var arg2 *C.gchar

	arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	arg1 = (*C.gchar)(C.CString(groupName))
	defer C.free(unsafe.Pointer(arg1))
	arg2 = (*C.gchar)(C.CString(key))
	defer C.free(unsafe.Pointer(arg2))

	var errout *C.GError
	var goerr error
	var cret C.gint64
	var ret2 int64

	cret = C.g_key_file_get_int64(arg0, groupName, key, &errout)

	goerr = gerror.Take(unsafe.Pointer(errout))
	ret2 = C.gint64(cret)

	return goerr, ret2
}

// Integer returns the value associated with @key under @group_name as an
// integer.
//
// If @key cannot be found then 0 is returned and @error is set to
// KEY_FILE_ERROR_KEY_NOT_FOUND. Likewise, if the value associated with @key
// cannot be interpreted as an integer, or is out of range for a #gint, then 0
// is returned and @error is set to KEY_FILE_ERROR_INVALID_VALUE.
func (k *KeyFile) Integer(groupName string, key string) (gint int, err error) {
	var arg0 *C.GKeyFile
	var arg1 *C.gchar
	var arg2 *C.gchar

	arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	arg1 = (*C.gchar)(C.CString(groupName))
	defer C.free(unsafe.Pointer(arg1))
	arg2 = (*C.gchar)(C.CString(key))
	defer C.free(unsafe.Pointer(arg2))

	var errout *C.GError
	var goerr error
	var cret C.gint
	var ret2 int

	cret = C.g_key_file_get_integer(arg0, groupName, key, &errout)

	goerr = gerror.Take(unsafe.Pointer(errout))
	ret2 = C.gint(cret)

	return goerr, ret2
}

// IntegerList returns the values associated with @key under @group_name as
// integers.
//
// If @key cannot be found then nil is returned and @error is set to
// KEY_FILE_ERROR_KEY_NOT_FOUND. Likewise, if the values associated with @key
// cannot be interpreted as integers, or are out of range for #gint, then nil is
// returned and @error is set to KEY_FILE_ERROR_INVALID_VALUE.
func (k *KeyFile) IntegerList(groupName string, key string) (length uint, gints []int, err error) {
	var arg0 *C.GKeyFile
	var arg1 *C.gchar
	var arg2 *C.gchar

	arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	arg1 = (*C.gchar)(C.CString(groupName))
	defer C.free(unsafe.Pointer(arg1))
	arg2 = (*C.gchar)(C.CString(key))
	defer C.free(unsafe.Pointer(arg2))

	var errout *C.GError
	var goerr error
	var cret *C.gint
	var arg3 *C.gsize
	var ret3 []int

	cret = C.g_key_file_get_integer_list(arg0, groupName, key, &arg3, &errout)

	goerr = gerror.Take(unsafe.Pointer(errout))
	ptr.SetSlice(unsafe.Pointer(&ret3), unsafe.Pointer(cret), int(arg3))
	runtime.SetFinalizer(&ret3, func(v *[]int) {
		C.free(ptr.Slice(unsafe.Pointer(v)))
	})

	return ret3, goerr, ret3
}

// Keys returns all keys for the group name @group_name. The array of returned
// keys will be nil-terminated, so @length may optionally be nil. In the event
// that the @group_name cannot be found, nil is returned and @error is set to
// KEY_FILE_ERROR_GROUP_NOT_FOUND.
func (k *KeyFile) Keys(groupName string) (length uint, utf8s []string, err error) {
	var arg0 *C.GKeyFile
	var arg1 *C.gchar

	arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	arg1 = (*C.gchar)(C.CString(groupName))
	defer C.free(unsafe.Pointer(arg1))

	var arg2 C.gsize
	var ret2 uint
	var errout *C.GError
	var goerr error
	var cret **C.gchar
	var ret3 []string

	cret = C.g_key_file_get_keys(arg0, groupName, &arg2, &errout)

	*ret2 = C.gsize(arg2)
	goerr = gerror.Take(unsafe.Pointer(errout))
	{
		var length int
		for p := cret; *p != 0; p = (**C.gchar)(ptr.Add(unsafe.Pointer(p), unsafe.Sizeof(int(0)))) {
			length++
			if length < 0 {
				panic(`length overflow`)
			}
		}

		ret3 = make([]string, length)
		for i := uintptr(0); i < uintptr(length); i += unsafe.Sizeof(int(0)) {
			src := (*C.gchar)(ptr.Add(unsafe.Pointer(cret), i))
			ret3[i] = C.GoString(src)
			defer C.free(unsafe.Pointer(src))
		}
	}

	return ret2, goerr, ret3
}

// LocaleForKey returns the actual locale which the result of
// g_key_file_get_locale_string() or g_key_file_get_locale_string_list() came
// from.
//
// If calling g_key_file_get_locale_string() or
// g_key_file_get_locale_string_list() with exactly the same @key_file,
// @group_name, @key and @locale, the result of those functions will have
// originally been tagged with the locale that is the result of this function.
func (k *KeyFile) LocaleForKey(groupName string, key string, locale string) string {
	var arg0 *C.GKeyFile
	var arg1 *C.gchar
	var arg2 *C.gchar
	var arg3 *C.gchar

	arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	arg1 = (*C.gchar)(C.CString(groupName))
	defer C.free(unsafe.Pointer(arg1))
	arg2 = (*C.gchar)(C.CString(key))
	defer C.free(unsafe.Pointer(arg2))
	arg3 = (*C.gchar)(C.CString(locale))
	defer C.free(unsafe.Pointer(arg3))

	var cret *C.gchar
	var ret1 string

	cret = C.g_key_file_get_locale_for_key(arg0, groupName, key, locale)

	ret1 = C.GoString(cret)
	defer C.free(unsafe.Pointer(cret))

	return ret1
}

// LocaleString returns the value associated with @key under @group_name
// translated in the given @locale if available. If @locale is nil then the
// current locale is assumed.
//
// If @locale is to be non-nil, or if the current locale will change over the
// lifetime of the File, it must be loaded with G_KEY_FILE_KEEP_TRANSLATIONS in
// order to load strings for all locales.
//
// If @key cannot be found then nil is returned and @error is set to
// KEY_FILE_ERROR_KEY_NOT_FOUND. If the value associated with @key cannot be
// interpreted or no suitable translation can be found then the untranslated
// value is returned.
func (k *KeyFile) LocaleString(groupName string, key string, locale string) (utf8 string, err error) {
	var arg0 *C.GKeyFile
	var arg1 *C.gchar
	var arg2 *C.gchar
	var arg3 *C.gchar

	arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	arg1 = (*C.gchar)(C.CString(groupName))
	defer C.free(unsafe.Pointer(arg1))
	arg2 = (*C.gchar)(C.CString(key))
	defer C.free(unsafe.Pointer(arg2))
	arg3 = (*C.gchar)(C.CString(locale))
	defer C.free(unsafe.Pointer(arg3))

	var errout *C.GError
	var goerr error
	var cret *C.gchar
	var ret2 string

	cret = C.g_key_file_get_locale_string(arg0, groupName, key, locale, &errout)

	goerr = gerror.Take(unsafe.Pointer(errout))
	ret2 = C.GoString(cret)
	defer C.free(unsafe.Pointer(cret))

	return goerr, ret2
}

// LocaleStringList returns the values associated with @key under @group_name
// translated in the given @locale if available. If @locale is nil then the
// current locale is assumed.
//
// If @locale is to be non-nil, or if the current locale will change over the
// lifetime of the File, it must be loaded with G_KEY_FILE_KEEP_TRANSLATIONS in
// order to load strings for all locales.
//
// If @key cannot be found then nil is returned and @error is set to
// KEY_FILE_ERROR_KEY_NOT_FOUND. If the values associated with @key cannot be
// interpreted or no suitable translations can be found then the untranslated
// values are returned. The returned array is nil-terminated, so @length may
// optionally be nil.
func (k *KeyFile) LocaleStringList(groupName string, key string, locale string) (length uint, utf8s []string, err error) {
	var arg0 *C.GKeyFile
	var arg1 *C.gchar
	var arg2 *C.gchar
	var arg3 *C.gchar

	arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	arg1 = (*C.gchar)(C.CString(groupName))
	defer C.free(unsafe.Pointer(arg1))
	arg2 = (*C.gchar)(C.CString(key))
	defer C.free(unsafe.Pointer(arg2))
	arg3 = (*C.gchar)(C.CString(locale))
	defer C.free(unsafe.Pointer(arg3))

	var errout *C.GError
	var goerr error
	var cret **C.gchar
	var arg4 *C.gsize
	var ret3 []string

	cret = C.g_key_file_get_locale_string_list(arg0, groupName, key, locale, &arg4, &errout)

	goerr = gerror.Take(unsafe.Pointer(errout))
	ret3 = make([]string, arg4)
	for i := 0; i < uintptr(arg4); i++ {
		src := (*C.gchar)(ptr.Add(unsafe.Pointer(cret), i))
		ret3[i] = C.GoString(src)
		defer C.free(unsafe.Pointer(src))
	}

	return ret4, goerr, ret3
}

// StartGroup returns the name of the start group of the file.
func (k *KeyFile) StartGroup() string {
	var arg0 *C.GKeyFile

	arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))

	var cret *C.gchar
	var ret1 string

	cret = C.g_key_file_get_start_group(arg0)

	ret1 = C.GoString(cret)
	defer C.free(unsafe.Pointer(cret))

	return ret1
}

// String returns the string value associated with @key under @group_name.
// Unlike g_key_file_get_value(), this function handles escape sequences like
// \s.
//
// In the event the key cannot be found, nil is returned and @error is set to
// KEY_FILE_ERROR_KEY_NOT_FOUND. In the event that the @group_name cannot be
// found, nil is returned and @error is set to KEY_FILE_ERROR_GROUP_NOT_FOUND.
func (k *KeyFile) String(groupName string, key string) (utf8 string, err error) {
	var arg0 *C.GKeyFile
	var arg1 *C.gchar
	var arg2 *C.gchar

	arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	arg1 = (*C.gchar)(C.CString(groupName))
	defer C.free(unsafe.Pointer(arg1))
	arg2 = (*C.gchar)(C.CString(key))
	defer C.free(unsafe.Pointer(arg2))

	var errout *C.GError
	var goerr error
	var cret *C.gchar
	var ret2 string

	cret = C.g_key_file_get_string(arg0, groupName, key, &errout)

	goerr = gerror.Take(unsafe.Pointer(errout))
	ret2 = C.GoString(cret)
	defer C.free(unsafe.Pointer(cret))

	return goerr, ret2
}

// StringList returns the values associated with @key under @group_name.
//
// In the event the key cannot be found, nil is returned and @error is set to
// KEY_FILE_ERROR_KEY_NOT_FOUND. In the event that the @group_name cannot be
// found, nil is returned and @error is set to KEY_FILE_ERROR_GROUP_NOT_FOUND.
func (k *KeyFile) StringList(groupName string, key string) (length uint, utf8s []string, err error) {
	var arg0 *C.GKeyFile
	var arg1 *C.gchar
	var arg2 *C.gchar

	arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	arg1 = (*C.gchar)(C.CString(groupName))
	defer C.free(unsafe.Pointer(arg1))
	arg2 = (*C.gchar)(C.CString(key))
	defer C.free(unsafe.Pointer(arg2))

	var errout *C.GError
	var goerr error
	var cret **C.gchar
	var arg3 *C.gsize
	var ret3 []string

	cret = C.g_key_file_get_string_list(arg0, groupName, key, &arg3, &errout)

	goerr = gerror.Take(unsafe.Pointer(errout))
	ret3 = make([]string, arg3)
	for i := 0; i < uintptr(arg3); i++ {
		src := (*C.gchar)(ptr.Add(unsafe.Pointer(cret), i))
		ret3[i] = C.GoString(src)
		defer C.free(unsafe.Pointer(src))
	}

	return ret3, goerr, ret3
}

// Uint64 returns the value associated with @key under @group_name as an
// unsigned 64-bit integer. This is similar to g_key_file_get_integer() but can
// return large positive results without truncation.
func (k *KeyFile) Uint64(groupName string, key string) (guint64 uint64, err error) {
	var arg0 *C.GKeyFile
	var arg1 *C.gchar
	var arg2 *C.gchar

	arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	arg1 = (*C.gchar)(C.CString(groupName))
	defer C.free(unsafe.Pointer(arg1))
	arg2 = (*C.gchar)(C.CString(key))
	defer C.free(unsafe.Pointer(arg2))

	var errout *C.GError
	var goerr error
	var cret C.guint64
	var ret2 uint64

	cret = C.g_key_file_get_uint64(arg0, groupName, key, &errout)

	goerr = gerror.Take(unsafe.Pointer(errout))
	ret2 = C.guint64(cret)

	return goerr, ret2
}

// Value returns the raw value associated with @key under @group_name. Use
// g_key_file_get_string() to retrieve an unescaped UTF-8 string.
//
// In the event the key cannot be found, nil is returned and @error is set to
// KEY_FILE_ERROR_KEY_NOT_FOUND. In the event that the @group_name cannot be
// found, nil is returned and @error is set to KEY_FILE_ERROR_GROUP_NOT_FOUND.
func (k *KeyFile) Value(groupName string, key string) (utf8 string, err error) {
	var arg0 *C.GKeyFile
	var arg1 *C.gchar
	var arg2 *C.gchar

	arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	arg1 = (*C.gchar)(C.CString(groupName))
	defer C.free(unsafe.Pointer(arg1))
	arg2 = (*C.gchar)(C.CString(key))
	defer C.free(unsafe.Pointer(arg2))

	var errout *C.GError
	var goerr error
	var cret *C.gchar
	var ret2 string

	cret = C.g_key_file_get_value(arg0, groupName, key, &errout)

	goerr = gerror.Take(unsafe.Pointer(errout))
	ret2 = C.GoString(cret)
	defer C.free(unsafe.Pointer(cret))

	return goerr, ret2
}

// HasGroup looks whether the key file has the group @group_name.
func (k *KeyFile) HasGroup(groupName string) bool {
	var arg0 *C.GKeyFile
	var arg1 *C.gchar

	arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	arg1 = (*C.gchar)(C.CString(groupName))
	defer C.free(unsafe.Pointer(arg1))

	var cret C.gboolean
	var ret1 bool

	cret = C.g_key_file_has_group(arg0, groupName)

	ret1 = C.bool(cret) != C.false

	return ret1
}

// HasKey looks whether the key file has the key @key in the group @group_name.
//
// Note that this function does not follow the rules for #GError strictly; the
// return value both carries meaning and signals an error. To use this function,
// you must pass a #GError pointer in @error, and check whether it is not nil to
// see if an error occurred.
//
// Language bindings should use g_key_file_get_value() to test whether or not a
// key exists.
func (k *KeyFile) HasKey(groupName string, key string) error {
	var arg0 *C.GKeyFile
	var arg1 *C.gchar
	var arg2 *C.gchar

	arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	arg1 = (*C.gchar)(C.CString(groupName))
	defer C.free(unsafe.Pointer(arg1))
	arg2 = (*C.gchar)(C.CString(key))
	defer C.free(unsafe.Pointer(arg2))

	var errout *C.GError
	var goerr error

	C.g_key_file_has_key(arg0, groupName, key, &errout)

	goerr = gerror.Take(unsafe.Pointer(errout))

	return goerr
}

// LoadFromBytes loads a key file from the data in @bytes into an empty File
// structure. If the object cannot be created then error is set to a FileError.
func (k *KeyFile) LoadFromBytes(bytes *Bytes, flags KeyFileFlags) error {
	var arg0 *C.GKeyFile
	var arg1 *C.GBytes
	var arg2 C.GKeyFileFlags

	arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	arg1 = (*C.GBytes)(unsafe.Pointer(bytes.Native()))
	arg2 = (C.GKeyFileFlags)(flags)

	var errout *C.GError
	var goerr error

	C.g_key_file_load_from_bytes(arg0, bytes, flags, &errout)

	goerr = gerror.Take(unsafe.Pointer(errout))

	return goerr
}

// LoadFromData loads a key file from memory into an empty File structure. If
// the object cannot be created then error is set to a FileError.
func (k *KeyFile) LoadFromData(data string, length uint, flags KeyFileFlags) error {
	var arg0 *C.GKeyFile
	var arg1 *C.gchar
	var arg2 C.gsize
	var arg3 C.GKeyFileFlags

	arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	arg1 = (*C.gchar)(C.CString(data))
	defer C.free(unsafe.Pointer(arg1))
	arg2 = C.gsize(length)
	arg3 = (C.GKeyFileFlags)(flags)

	var errout *C.GError
	var goerr error

	C.g_key_file_load_from_data(arg0, data, length, flags, &errout)

	goerr = gerror.Take(unsafe.Pointer(errout))

	return goerr
}

// LoadFromDataDirs: this function looks for a key file named @file in the paths
// returned from g_get_user_data_dir() and g_get_system_data_dirs(), loads the
// file into @key_file and returns the file's full path in @full_path. If the
// file could not be loaded then an error is set to either a Error or FileError.
func (k *KeyFile) LoadFromDataDirs(file string, flags KeyFileFlags) (fullPath string, err error) {
	var arg0 *C.GKeyFile
	var arg1 *C.gchar
	var arg3 C.GKeyFileFlags

	arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	arg1 = (*C.gchar)(C.CString(file))
	defer C.free(unsafe.Pointer(arg1))
	arg3 = (C.GKeyFileFlags)(flags)

	var arg2 *C.gchar
	var ret2 string
	var errout *C.GError
	var goerr error

	C.g_key_file_load_from_data_dirs(arg0, file, &arg2, flags, &errout)

	*ret2 = C.GoString(arg2)
	defer C.free(unsafe.Pointer(arg2))
	goerr = gerror.Take(unsafe.Pointer(errout))

	return ret2, goerr
}

// LoadFromDirs: this function looks for a key file named @file in the paths
// specified in @search_dirs, loads the file into @key_file and returns the
// file's full path in @full_path.
//
// If the file could not be found in any of the @search_dirs,
// G_KEY_FILE_ERROR_NOT_FOUND is returned. If the file is found but the OS
// returns an error when opening or reading the file, a G_FILE_ERROR is
// returned. If there is a problem parsing the file, a G_KEY_FILE_ERROR is
// returned.
func (k *KeyFile) LoadFromDirs(file string, searchDirs []string, flags KeyFileFlags) (fullPath string, err error) {
	var arg0 *C.GKeyFile
	var arg1 *C.gchar
	var arg2 **C.gchar
	var arg4 C.GKeyFileFlags

	arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	arg1 = (*C.gchar)(C.CString(file))
	defer C.free(unsafe.Pointer(arg1))
	arg2 = C.malloc(len(searchDirs) * (unsafe.Sizeof(int(0)) + 1))
	defer C.free(unsafe.Pointer(arg2))

	{
		var out []*C.gchar
		ptr.SetSlice(unsafe.Pointer(&dst), unsafe.Pointer(arg2), int(len(searchDirs)))

		for i := range searchDirs {
			out[i] = (*C.gchar)(C.CString(searchDirs[i]))
			defer C.free(unsafe.Pointer(out[i]))
		}
	}
	arg4 = (C.GKeyFileFlags)(flags)

	var arg3 *C.gchar
	var ret3 string
	var errout *C.GError
	var goerr error

	C.g_key_file_load_from_dirs(arg0, file, searchDirs, &arg3, flags, &errout)

	*ret3 = C.GoString(arg3)
	defer C.free(unsafe.Pointer(arg3))
	goerr = gerror.Take(unsafe.Pointer(errout))

	return ret3, goerr
}

// LoadFromFile loads a key file into an empty File structure.
//
// If the OS returns an error when opening or reading the file, a G_FILE_ERROR
// is returned. If there is a problem parsing the file, a G_KEY_FILE_ERROR is
// returned.
//
// This function will never return a G_KEY_FILE_ERROR_NOT_FOUND error. If the
// @file is not found, G_FILE_ERROR_NOENT is returned.
func (k *KeyFile) LoadFromFile(file string, flags KeyFileFlags) error {
	var arg0 *C.GKeyFile
	var arg1 *C.gchar
	var arg2 C.GKeyFileFlags

	arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	arg1 = (*C.gchar)(C.CString(file))
	defer C.free(unsafe.Pointer(arg1))
	arg2 = (C.GKeyFileFlags)(flags)

	var errout *C.GError
	var goerr error

	C.g_key_file_load_from_file(arg0, file, flags, &errout)

	goerr = gerror.Take(unsafe.Pointer(errout))

	return goerr
}

// Ref increases the reference count of @key_file.
func (k *KeyFile) Ref() *KeyFile {
	var arg0 *C.GKeyFile

	arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))

	var cret *C.GKeyFile
	var ret1 *KeyFile

	cret = C.g_key_file_ref(arg0)

	ret1 = WrapKeyFile(unsafe.Pointer(cret))
	runtime.SetFinalizer(ret1, func(v *KeyFile) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return ret1
}

// RemoveComment removes a comment above @key from @group_name. If @key is nil
// then @comment will be removed above @group_name. If both @key and @group_name
// are nil, then @comment will be removed above the first group in the file.
func (k *KeyFile) RemoveComment(groupName string, key string) error {
	var arg0 *C.GKeyFile
	var arg1 *C.gchar
	var arg2 *C.gchar

	arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	arg1 = (*C.gchar)(C.CString(groupName))
	defer C.free(unsafe.Pointer(arg1))
	arg2 = (*C.gchar)(C.CString(key))
	defer C.free(unsafe.Pointer(arg2))

	var errout *C.GError
	var goerr error

	C.g_key_file_remove_comment(arg0, groupName, key, &errout)

	goerr = gerror.Take(unsafe.Pointer(errout))

	return goerr
}

// RemoveGroup removes the specified group, @group_name, from the key file.
func (k *KeyFile) RemoveGroup(groupName string) error {
	var arg0 *C.GKeyFile
	var arg1 *C.gchar

	arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	arg1 = (*C.gchar)(C.CString(groupName))
	defer C.free(unsafe.Pointer(arg1))

	var errout *C.GError
	var goerr error

	C.g_key_file_remove_group(arg0, groupName, &errout)

	goerr = gerror.Take(unsafe.Pointer(errout))

	return goerr
}

// RemoveKey removes @key in @group_name from the key file.
func (k *KeyFile) RemoveKey(groupName string, key string) error {
	var arg0 *C.GKeyFile
	var arg1 *C.gchar
	var arg2 *C.gchar

	arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	arg1 = (*C.gchar)(C.CString(groupName))
	defer C.free(unsafe.Pointer(arg1))
	arg2 = (*C.gchar)(C.CString(key))
	defer C.free(unsafe.Pointer(arg2))

	var errout *C.GError
	var goerr error

	C.g_key_file_remove_key(arg0, groupName, key, &errout)

	goerr = gerror.Take(unsafe.Pointer(errout))

	return goerr
}

// SaveToFile writes the contents of @key_file to @filename using
// g_file_set_contents(). If you need stricter guarantees about durability of
// the written file than are provided by g_file_set_contents(), use
// g_file_set_contents_full() with the return value of g_key_file_to_data().
//
// This function can fail for any of the reasons that g_file_set_contents() may
// fail.
func (k *KeyFile) SaveToFile(filename string) error {
	var arg0 *C.GKeyFile
	var arg1 *C.gchar

	arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	arg1 = (*C.gchar)(C.CString(filename))
	defer C.free(unsafe.Pointer(arg1))

	var errout *C.GError
	var goerr error

	C.g_key_file_save_to_file(arg0, filename, &errout)

	goerr = gerror.Take(unsafe.Pointer(errout))

	return goerr
}

// SetBoolean associates a new boolean value with @key under @group_name. If
// @key cannot be found then it is created.
func (k *KeyFile) SetBoolean(groupName string, key string, value bool) {
	var arg0 *C.GKeyFile
	var arg1 *C.gchar
	var arg2 *C.gchar
	var arg3 C.gboolean

	arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	arg1 = (*C.gchar)(C.CString(groupName))
	defer C.free(unsafe.Pointer(arg1))
	arg2 = (*C.gchar)(C.CString(key))
	defer C.free(unsafe.Pointer(arg2))
	if value {
		arg3 = C.gboolean(1)
	}

	C.g_key_file_set_boolean(arg0, groupName, key, value)
}

// SetBooleanList associates a list of boolean values with @key under
// @group_name. If @key cannot be found then it is created. If @group_name is
// nil, the start_group is used.
func (k *KeyFile) SetBooleanList(groupName string, key string, list []bool) {
	var arg0 *C.GKeyFile

	arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))

	C.g_key_file_set_boolean_list(arg0, groupName, key, list, length)
}

// SetComment places a comment above @key from @group_name.
//
// If @key is nil then @comment will be written above @group_name. If both @key
// and @group_name are nil, then @comment will be written above the first group
// in the file.
//
// Note that this function prepends a '#' comment marker to each line of
// @comment.
func (k *KeyFile) SetComment(groupName string, key string, comment string) error {
	var arg0 *C.GKeyFile
	var arg1 *C.gchar
	var arg2 *C.gchar
	var arg3 *C.gchar

	arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	arg1 = (*C.gchar)(C.CString(groupName))
	defer C.free(unsafe.Pointer(arg1))
	arg2 = (*C.gchar)(C.CString(key))
	defer C.free(unsafe.Pointer(arg2))
	arg3 = (*C.gchar)(C.CString(comment))
	defer C.free(unsafe.Pointer(arg3))

	var errout *C.GError
	var goerr error

	C.g_key_file_set_comment(arg0, groupName, key, comment, &errout)

	goerr = gerror.Take(unsafe.Pointer(errout))

	return goerr
}

// SetDouble associates a new double value with @key under @group_name. If @key
// cannot be found then it is created.
func (k *KeyFile) SetDouble(groupName string, key string, value float64) {
	var arg0 *C.GKeyFile
	var arg1 *C.gchar
	var arg2 *C.gchar
	var arg3 C.gdouble

	arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	arg1 = (*C.gchar)(C.CString(groupName))
	defer C.free(unsafe.Pointer(arg1))
	arg2 = (*C.gchar)(C.CString(key))
	defer C.free(unsafe.Pointer(arg2))
	arg3 = C.gdouble(value)

	C.g_key_file_set_double(arg0, groupName, key, value)
}

// SetDoubleList associates a list of double values with @key under @group_name.
// If @key cannot be found then it is created.
func (k *KeyFile) SetDoubleList(groupName string, key string, list []float64) {
	var arg0 *C.GKeyFile

	arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))

	C.g_key_file_set_double_list(arg0, groupName, key, list, length)
}

// SetInt64 associates a new integer value with @key under @group_name. If @key
// cannot be found then it is created.
func (k *KeyFile) SetInt64(groupName string, key string, value int64) {
	var arg0 *C.GKeyFile
	var arg1 *C.gchar
	var arg2 *C.gchar
	var arg3 C.gint64

	arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	arg1 = (*C.gchar)(C.CString(groupName))
	defer C.free(unsafe.Pointer(arg1))
	arg2 = (*C.gchar)(C.CString(key))
	defer C.free(unsafe.Pointer(arg2))
	arg3 = C.gint64(value)

	C.g_key_file_set_int64(arg0, groupName, key, value)
}

// SetInteger associates a new integer value with @key under @group_name. If
// @key cannot be found then it is created.
func (k *KeyFile) SetInteger(groupName string, key string, value int) {
	var arg0 *C.GKeyFile
	var arg1 *C.gchar
	var arg2 *C.gchar
	var arg3 C.gint

	arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	arg1 = (*C.gchar)(C.CString(groupName))
	defer C.free(unsafe.Pointer(arg1))
	arg2 = (*C.gchar)(C.CString(key))
	defer C.free(unsafe.Pointer(arg2))
	arg3 = C.gint(value)

	C.g_key_file_set_integer(arg0, groupName, key, value)
}

// SetIntegerList associates a list of integer values with @key under
// @group_name. If @key cannot be found then it is created.
func (k *KeyFile) SetIntegerList(groupName string, key string, list []int) {
	var arg0 *C.GKeyFile

	arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))

	C.g_key_file_set_integer_list(arg0, groupName, key, list, length)
}

// SetListSeparator sets the character which is used to separate values in
// lists. Typically ';' or ',' are used as separators. The default list
// separator is ';'.
func (k *KeyFile) SetListSeparator(separator byte) {
	var arg0 *C.GKeyFile
	var arg1 C.gchar

	arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	arg1 = C.gchar(separator)

	C.g_key_file_set_list_separator(arg0, separator)
}

// SetLocaleString associates a string value for @key and @locale under
// @group_name. If the translation for @key cannot be found then it is created.
func (k *KeyFile) SetLocaleString(groupName string, key string, locale string, string string) {
	var arg0 *C.GKeyFile
	var arg1 *C.gchar
	var arg2 *C.gchar
	var arg3 *C.gchar
	var arg4 *C.gchar

	arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	arg1 = (*C.gchar)(C.CString(groupName))
	defer C.free(unsafe.Pointer(arg1))
	arg2 = (*C.gchar)(C.CString(key))
	defer C.free(unsafe.Pointer(arg2))
	arg3 = (*C.gchar)(C.CString(locale))
	defer C.free(unsafe.Pointer(arg3))
	arg4 = (*C.gchar)(C.CString(string))
	defer C.free(unsafe.Pointer(arg4))

	C.g_key_file_set_locale_string(arg0, groupName, key, locale, string)
}

// SetLocaleStringList associates a list of string values for @key and @locale
// under @group_name. If the translation for @key cannot be found then it is
// created.
func (k *KeyFile) SetLocaleStringList(groupName string, key string, locale string, list []string) {
	var arg0 *C.GKeyFile

	arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))

	C.g_key_file_set_locale_string_list(arg0, groupName, key, locale, list, length)
}

// SetString associates a new string value with @key under @group_name. If @key
// cannot be found then it is created. If @group_name cannot be found then it is
// created. Unlike g_key_file_set_value(), this function handles characters that
// need escaping, such as newlines.
func (k *KeyFile) SetString(groupName string, key string, string string) {
	var arg0 *C.GKeyFile
	var arg1 *C.gchar
	var arg2 *C.gchar
	var arg3 *C.gchar

	arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	arg1 = (*C.gchar)(C.CString(groupName))
	defer C.free(unsafe.Pointer(arg1))
	arg2 = (*C.gchar)(C.CString(key))
	defer C.free(unsafe.Pointer(arg2))
	arg3 = (*C.gchar)(C.CString(string))
	defer C.free(unsafe.Pointer(arg3))

	C.g_key_file_set_string(arg0, groupName, key, string)
}

// SetStringList associates a list of string values for @key under @group_name.
// If @key cannot be found then it is created. If @group_name cannot be found
// then it is created.
func (k *KeyFile) SetStringList(groupName string, key string, list []string) {
	var arg0 *C.GKeyFile

	arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))

	C.g_key_file_set_string_list(arg0, groupName, key, list, length)
}

// SetUint64 associates a new integer value with @key under @group_name. If @key
// cannot be found then it is created.
func (k *KeyFile) SetUint64(groupName string, key string, value uint64) {
	var arg0 *C.GKeyFile
	var arg1 *C.gchar
	var arg2 *C.gchar
	var arg3 C.guint64

	arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	arg1 = (*C.gchar)(C.CString(groupName))
	defer C.free(unsafe.Pointer(arg1))
	arg2 = (*C.gchar)(C.CString(key))
	defer C.free(unsafe.Pointer(arg2))
	arg3 = C.guint64(value)

	C.g_key_file_set_uint64(arg0, groupName, key, value)
}

// SetValue associates a new value with @key under @group_name.
//
// If @key cannot be found then it is created. If @group_name cannot be found
// then it is created. To set an UTF-8 string which may contain characters that
// need escaping (such as newlines or spaces), use g_key_file_set_string().
func (k *KeyFile) SetValue(groupName string, key string, value string) {
	var arg0 *C.GKeyFile
	var arg1 *C.gchar
	var arg2 *C.gchar
	var arg3 *C.gchar

	arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	arg1 = (*C.gchar)(C.CString(groupName))
	defer C.free(unsafe.Pointer(arg1))
	arg2 = (*C.gchar)(C.CString(key))
	defer C.free(unsafe.Pointer(arg2))
	arg3 = (*C.gchar)(C.CString(value))
	defer C.free(unsafe.Pointer(arg3))

	C.g_key_file_set_value(arg0, groupName, key, value)
}

// ToData: this function outputs @key_file as a string.
//
// Note that this function never reports an error, so it is safe to pass nil as
// @error.
func (k *KeyFile) ToData() (length uint, utf8 string, err error) {
	var arg0 *C.GKeyFile

	arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))

	var arg1 C.gsize
	var ret1 uint
	var errout *C.GError
	var goerr error
	var cret *C.gchar
	var ret3 string

	cret = C.g_key_file_to_data(arg0, &arg1, &errout)

	*ret1 = C.gsize(arg1)
	goerr = gerror.Take(unsafe.Pointer(errout))
	ret3 = C.GoString(cret)
	defer C.free(unsafe.Pointer(cret))

	return ret1, goerr, ret3
}

// Unref decreases the reference count of @key_file by 1. If the reference count
// reaches zero, frees the key file and all its allocated memory.
func (k *KeyFile) Unref() {
	var arg0 *C.GKeyFile

	arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))

	C.g_key_file_unref(arg0)
}
