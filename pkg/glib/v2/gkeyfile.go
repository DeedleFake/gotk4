// Code generated by girgen. DO NOT EDIT.

package glib

import (
	"unsafe"

	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: glib-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <glib.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_key_file_get_type()), F: marshalKeyFile},
	})
}

// KeyFileError: error codes returned by key file parsing.
type KeyFileError int

const (
	// UnknownEncoding: the text being parsed was in an unknown encoding
	KeyFileErrorUnknownEncoding KeyFileError = 0
	// parse: document was ill-formed
	KeyFileErrorParse KeyFileError = 1
	// NotFound: the file was not found
	KeyFileErrorNotFound KeyFileError = 2
	// KeyNotFound: a requested key was not found
	KeyFileErrorKeyNotFound KeyFileError = 3
	// GroupNotFound: a requested group was not found
	KeyFileErrorGroupNotFound KeyFileError = 4
	// InvalidValue: a value could not be parsed
	KeyFileErrorInvalidValue KeyFileError = 5
)

// KeyFileFlags flags which influence the parsing.
type KeyFileFlags int

const (
	// KeyFileFlagsNone: no flags, default behaviour
	KeyFileFlagsNone KeyFileFlags = 0b0
	// KeyFileFlagsKeepComments: use this flag if you plan to write the
	// (possibly modified) contents of the key file back to a file; otherwise
	// all comments will be lost when the key file is written back.
	KeyFileFlagsKeepComments KeyFileFlags = 0b1
	// KeyFileFlagsKeepTranslations: use this flag if you plan to write the
	// (possibly modified) contents of the key file back to a file; otherwise
	// only the translations for the current language will be written back.
	KeyFileFlagsKeepTranslations KeyFileFlags = 0b10
)

// KeyFile: the GKeyFile struct contains only private data and should not be
// accessed directly.
type KeyFile C.GKeyFile

// WrapKeyFile wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapKeyFile(ptr unsafe.Pointer) *KeyFile {
	return (*KeyFile)(ptr)
}

func marshalKeyFile(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return (*KeyFile)(unsafe.Pointer(b)), nil
}

// NewKeyFile constructs a struct KeyFile.
func NewKeyFile() *KeyFile {
	var _cret *C.GKeyFile // in

	_cret = C.g_key_file_new()

	var _keyFile *KeyFile // out

	_keyFile = (*KeyFile)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(&_keyFile, func(v **KeyFile) {
		C.free(unsafe.Pointer(v))
	})

	return _keyFile
}

// Native returns the underlying C source pointer.
func (k *KeyFile) Native() unsafe.Pointer {
	return unsafe.Pointer(k)
}

// Boolean decreases the reference count of @key_file by 1. If the reference
// count reaches zero, frees the key file and all its allocated memory.
func (k *KeyFile) Boolean(groupName string, key string) error {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out
	var _arg2 *C.gchar    // out
	var _cerr *C.GError   // in

	_arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	_arg1 = (*C.gchar)(C.CString(groupName))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(key))
	defer C.free(unsafe.Pointer(_arg2))

	C.g_key_file_get_boolean(_arg0, _arg1, _arg2, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

// Comment decreases the reference count of @key_file by 1. If the reference
// count reaches zero, frees the key file and all its allocated memory.
func (k *KeyFile) Comment(groupName string, key string) (string, error) {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out
	var _arg2 *C.gchar    // out
	var _cret *C.gchar    // in
	var _cerr *C.GError   // in

	_arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	_arg1 = (*C.gchar)(C.CString(groupName))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(key))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.g_key_file_get_comment(_arg0, _arg1, _arg2, &_cerr)

	var _utf8 string // out
	var _goerr error // out

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _utf8, _goerr
}

// Double decreases the reference count of @key_file by 1. If the reference
// count reaches zero, frees the key file and all its allocated memory.
func (k *KeyFile) Double(groupName string, key string) (float64, error) {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out
	var _arg2 *C.gchar    // out
	var _cret C.gdouble   // in
	var _cerr *C.GError   // in

	_arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	_arg1 = (*C.gchar)(C.CString(groupName))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(key))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.g_key_file_get_double(_arg0, _arg1, _arg2, &_cerr)

	var _gdouble float64 // out
	var _goerr error     // out

	_gdouble = float64(_cret)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _gdouble, _goerr
}

// Groups decreases the reference count of @key_file by 1. If the reference
// count reaches zero, frees the key file and all its allocated memory.
func (k *KeyFile) Groups() (uint, []string) {
	var _arg0 *C.GKeyFile // out
	var _arg1 C.gsize     // in
	var _cret **C.gchar

	_arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))

	_cret = C.g_key_file_get_groups(_arg0, &_arg1)

	var _length uint // out
	var _utf8s []string

	_length = uint(_arg1)
	{
		var i int
		var z *C.gchar
		for p := _cret; *p != z; p = &unsafe.Slice(p, i+1)[i] {
			i++
		}

		src := unsafe.Slice(_cret, i)
		_utf8s = make([]string, i)
		for i := range src {
			_utf8s[i] = C.GoString(src[i])
			defer C.free(unsafe.Pointer(src[i]))
		}
	}

	return _length, _utf8s
}

// Int64 decreases the reference count of @key_file by 1. If the reference count
// reaches zero, frees the key file and all its allocated memory.
func (k *KeyFile) Int64(groupName string, key string) (int64, error) {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out
	var _arg2 *C.gchar    // out
	var _cret C.gint64    // in
	var _cerr *C.GError   // in

	_arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	_arg1 = (*C.gchar)(C.CString(groupName))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(key))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.g_key_file_get_int64(_arg0, _arg1, _arg2, &_cerr)

	var _gint64 int64 // out
	var _goerr error  // out

	_gint64 = int64(_cret)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _gint64, _goerr
}

// Integer decreases the reference count of @key_file by 1. If the reference
// count reaches zero, frees the key file and all its allocated memory.
func (k *KeyFile) Integer(groupName string, key string) (int, error) {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out
	var _arg2 *C.gchar    // out
	var _cret C.gint      // in
	var _cerr *C.GError   // in

	_arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	_arg1 = (*C.gchar)(C.CString(groupName))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(key))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.g_key_file_get_integer(_arg0, _arg1, _arg2, &_cerr)

	var _gint int    // out
	var _goerr error // out

	_gint = int(_cret)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _gint, _goerr
}

// Keys decreases the reference count of @key_file by 1. If the reference count
// reaches zero, frees the key file and all its allocated memory.
func (k *KeyFile) Keys(groupName string) (uint, []string, error) {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out
	var _arg2 C.gsize     // in
	var _cret **C.gchar
	var _cerr *C.GError // in

	_arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	_arg1 = (*C.gchar)(C.CString(groupName))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.g_key_file_get_keys(_arg0, _arg1, &_arg2, &_cerr)

	var _length uint // out
	var _utf8s []string
	var _goerr error // out

	_length = uint(_arg2)
	{
		var i int
		var z *C.gchar
		for p := _cret; *p != z; p = &unsafe.Slice(p, i+1)[i] {
			i++
		}

		src := unsafe.Slice(_cret, i)
		_utf8s = make([]string, i)
		for i := range src {
			_utf8s[i] = C.GoString(src[i])
			defer C.free(unsafe.Pointer(src[i]))
		}
	}
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _length, _utf8s, _goerr
}

// LocaleForKey decreases the reference count of @key_file by 1. If the
// reference count reaches zero, frees the key file and all its allocated
// memory.
func (k *KeyFile) LocaleForKey(groupName string, key string, locale string) string {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out
	var _arg2 *C.gchar    // out
	var _arg3 *C.gchar    // out
	var _cret *C.gchar    // in

	_arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	_arg1 = (*C.gchar)(C.CString(groupName))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(key))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = (*C.gchar)(C.CString(locale))
	defer C.free(unsafe.Pointer(_arg3))

	_cret = C.g_key_file_get_locale_for_key(_arg0, _arg1, _arg2, _arg3)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// LocaleString decreases the reference count of @key_file by 1. If the
// reference count reaches zero, frees the key file and all its allocated
// memory.
func (k *KeyFile) LocaleString(groupName string, key string, locale string) (string, error) {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out
	var _arg2 *C.gchar    // out
	var _arg3 *C.gchar    // out
	var _cret *C.gchar    // in
	var _cerr *C.GError   // in

	_arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	_arg1 = (*C.gchar)(C.CString(groupName))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(key))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = (*C.gchar)(C.CString(locale))
	defer C.free(unsafe.Pointer(_arg3))

	_cret = C.g_key_file_get_locale_string(_arg0, _arg1, _arg2, _arg3, &_cerr)

	var _utf8 string // out
	var _goerr error // out

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _utf8, _goerr
}

// StartGroup decreases the reference count of @key_file by 1. If the reference
// count reaches zero, frees the key file and all its allocated memory.
func (k *KeyFile) StartGroup() string {
	var _arg0 *C.GKeyFile // out
	var _cret *C.gchar    // in

	_arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))

	_cret = C.g_key_file_get_start_group(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// String decreases the reference count of @key_file by 1. If the reference
// count reaches zero, frees the key file and all its allocated memory.
func (k *KeyFile) String(groupName string, key string) (string, error) {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out
	var _arg2 *C.gchar    // out
	var _cret *C.gchar    // in
	var _cerr *C.GError   // in

	_arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	_arg1 = (*C.gchar)(C.CString(groupName))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(key))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.g_key_file_get_string(_arg0, _arg1, _arg2, &_cerr)

	var _utf8 string // out
	var _goerr error // out

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _utf8, _goerr
}

// Uint64 decreases the reference count of @key_file by 1. If the reference
// count reaches zero, frees the key file and all its allocated memory.
func (k *KeyFile) Uint64(groupName string, key string) (uint64, error) {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out
	var _arg2 *C.gchar    // out
	var _cret C.guint64   // in
	var _cerr *C.GError   // in

	_arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	_arg1 = (*C.gchar)(C.CString(groupName))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(key))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.g_key_file_get_uint64(_arg0, _arg1, _arg2, &_cerr)

	var _guint64 uint64 // out
	var _goerr error    // out

	_guint64 = uint64(_cret)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _guint64, _goerr
}

// Value decreases the reference count of @key_file by 1. If the reference count
// reaches zero, frees the key file and all its allocated memory.
func (k *KeyFile) Value(groupName string, key string) (string, error) {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out
	var _arg2 *C.gchar    // out
	var _cret *C.gchar    // in
	var _cerr *C.GError   // in

	_arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	_arg1 = (*C.gchar)(C.CString(groupName))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(key))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.g_key_file_get_value(_arg0, _arg1, _arg2, &_cerr)

	var _utf8 string // out
	var _goerr error // out

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _utf8, _goerr
}

// HasGroup decreases the reference count of @key_file by 1. If the reference
// count reaches zero, frees the key file and all its allocated memory.
func (k *KeyFile) HasGroup(groupName string) bool {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out
	var _cret C.gboolean  // in

	_arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	_arg1 = (*C.gchar)(C.CString(groupName))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.g_key_file_has_group(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// LoadFromData decreases the reference count of @key_file by 1. If the
// reference count reaches zero, frees the key file and all its allocated
// memory.
func (k *KeyFile) LoadFromData(data string, length uint, flags KeyFileFlags) error {
	var _arg0 *C.GKeyFile     // out
	var _arg1 *C.gchar        // out
	var _arg2 C.gsize         // out
	var _arg3 C.GKeyFileFlags // out
	var _cerr *C.GError       // in

	_arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	_arg1 = (*C.gchar)(C.CString(data))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.gsize(length)
	_arg3 = C.GKeyFileFlags(flags)

	C.g_key_file_load_from_data(_arg0, _arg1, _arg2, _arg3, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

// LoadFromDataDirs decreases the reference count of @key_file by 1. If the
// reference count reaches zero, frees the key file and all its allocated
// memory.
func (k *KeyFile) LoadFromDataDirs(file string, flags KeyFileFlags) (string, error) {
	var _arg0 *C.GKeyFile     // out
	var _arg1 *C.gchar        // out
	var _arg2 *C.gchar        // in
	var _arg3 C.GKeyFileFlags // out
	var _cerr *C.GError       // in

	_arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	_arg1 = (*C.gchar)(C.CString(file))
	defer C.free(unsafe.Pointer(_arg1))
	_arg3 = C.GKeyFileFlags(flags)

	C.g_key_file_load_from_data_dirs(_arg0, _arg1, &_arg2, _arg3, &_cerr)

	var _fullPath string // out
	var _goerr error     // out

	_fullPath = C.GoString(_arg2)
	defer C.free(unsafe.Pointer(_arg2))
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _fullPath, _goerr
}

// LoadFromDirs decreases the reference count of @key_file by 1. If the
// reference count reaches zero, frees the key file and all its allocated
// memory.
func (k *KeyFile) LoadFromDirs(file string, searchDirs []string, flags KeyFileFlags) (string, error) {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out
	var _arg2 **C.gchar
	var _arg3 *C.gchar        // in
	var _arg4 C.GKeyFileFlags // out
	var _cerr *C.GError       // in

	_arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	_arg1 = (*C.gchar)(C.CString(file))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (**C.gchar)(C.malloc(C.ulong(len(searchDirs)+1) * C.ulong(unsafe.Sizeof(uint(0)))))
	defer C.free(unsafe.Pointer(_arg2))
	{
		out := unsafe.Slice(_arg2, len(searchDirs))
		for i := range searchDirs {
			out[i] = (*C.gchar)(C.CString(searchDirs[i]))
			defer C.free(unsafe.Pointer(out[i]))
		}
	}
	_arg4 = C.GKeyFileFlags(flags)

	C.g_key_file_load_from_dirs(_arg0, _arg1, _arg2, &_arg3, _arg4, &_cerr)

	var _fullPath string // out
	var _goerr error     // out

	_fullPath = C.GoString(_arg3)
	defer C.free(unsafe.Pointer(_arg3))
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _fullPath, _goerr
}

// LoadFromFile decreases the reference count of @key_file by 1. If the
// reference count reaches zero, frees the key file and all its allocated
// memory.
func (k *KeyFile) LoadFromFile(file string, flags KeyFileFlags) error {
	var _arg0 *C.GKeyFile     // out
	var _arg1 *C.gchar        // out
	var _arg2 C.GKeyFileFlags // out
	var _cerr *C.GError       // in

	_arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	_arg1 = (*C.gchar)(C.CString(file))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.GKeyFileFlags(flags)

	C.g_key_file_load_from_file(_arg0, _arg1, _arg2, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

// RemoveComment decreases the reference count of @key_file by 1. If the
// reference count reaches zero, frees the key file and all its allocated
// memory.
func (k *KeyFile) RemoveComment(groupName string, key string) error {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out
	var _arg2 *C.gchar    // out
	var _cerr *C.GError   // in

	_arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	_arg1 = (*C.gchar)(C.CString(groupName))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(key))
	defer C.free(unsafe.Pointer(_arg2))

	C.g_key_file_remove_comment(_arg0, _arg1, _arg2, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

// RemoveGroup decreases the reference count of @key_file by 1. If the reference
// count reaches zero, frees the key file and all its allocated memory.
func (k *KeyFile) RemoveGroup(groupName string) error {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out
	var _cerr *C.GError   // in

	_arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	_arg1 = (*C.gchar)(C.CString(groupName))
	defer C.free(unsafe.Pointer(_arg1))

	C.g_key_file_remove_group(_arg0, _arg1, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

// RemoveKey decreases the reference count of @key_file by 1. If the reference
// count reaches zero, frees the key file and all its allocated memory.
func (k *KeyFile) RemoveKey(groupName string, key string) error {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out
	var _arg2 *C.gchar    // out
	var _cerr *C.GError   // in

	_arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	_arg1 = (*C.gchar)(C.CString(groupName))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(key))
	defer C.free(unsafe.Pointer(_arg2))

	C.g_key_file_remove_key(_arg0, _arg1, _arg2, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

// SaveToFile decreases the reference count of @key_file by 1. If the reference
// count reaches zero, frees the key file and all its allocated memory.
func (k *KeyFile) SaveToFile(filename string) error {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out
	var _cerr *C.GError   // in

	_arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	_arg1 = (*C.gchar)(C.CString(filename))
	defer C.free(unsafe.Pointer(_arg1))

	C.g_key_file_save_to_file(_arg0, _arg1, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

// SetBoolean decreases the reference count of @key_file by 1. If the reference
// count reaches zero, frees the key file and all its allocated memory.
func (k *KeyFile) SetBoolean(groupName string, key string, value bool) {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out
	var _arg2 *C.gchar    // out
	var _arg3 C.gboolean  // out

	_arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	_arg1 = (*C.gchar)(C.CString(groupName))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(key))
	defer C.free(unsafe.Pointer(_arg2))
	if value {
		_arg3 = C.TRUE
	}

	C.g_key_file_set_boolean(_arg0, _arg1, _arg2, _arg3)
}

// SetBooleanList decreases the reference count of @key_file by 1. If the
// reference count reaches zero, frees the key file and all its allocated
// memory.
func (k *KeyFile) SetBooleanList(groupName string, key string, list []bool) {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out
	var _arg2 *C.gchar    // out
	var _arg3 *C.gboolean
	var _arg4 C.gsize

	_arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	_arg1 = (*C.gchar)(C.CString(groupName))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(key))
	defer C.free(unsafe.Pointer(_arg2))
	_arg4 = C.gsize(len(list))
	_arg3 = (*C.gboolean)(unsafe.Pointer(&list[0]))

	C.g_key_file_set_boolean_list(_arg0, _arg1, _arg2, _arg3, _arg4)
}

// SetComment decreases the reference count of @key_file by 1. If the reference
// count reaches zero, frees the key file and all its allocated memory.
func (k *KeyFile) SetComment(groupName string, key string, comment string) error {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out
	var _arg2 *C.gchar    // out
	var _arg3 *C.gchar    // out
	var _cerr *C.GError   // in

	_arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	_arg1 = (*C.gchar)(C.CString(groupName))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(key))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = (*C.gchar)(C.CString(comment))
	defer C.free(unsafe.Pointer(_arg3))

	C.g_key_file_set_comment(_arg0, _arg1, _arg2, _arg3, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

// SetDouble decreases the reference count of @key_file by 1. If the reference
// count reaches zero, frees the key file and all its allocated memory.
func (k *KeyFile) SetDouble(groupName string, key string, value float64) {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out
	var _arg2 *C.gchar    // out
	var _arg3 C.gdouble   // out

	_arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	_arg1 = (*C.gchar)(C.CString(groupName))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(key))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = C.gdouble(value)

	C.g_key_file_set_double(_arg0, _arg1, _arg2, _arg3)
}

// SetDoubleList decreases the reference count of @key_file by 1. If the
// reference count reaches zero, frees the key file and all its allocated
// memory.
func (k *KeyFile) SetDoubleList(groupName string, key string, list []float64) {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out
	var _arg2 *C.gchar    // out
	var _arg3 *C.gdouble
	var _arg4 C.gsize

	_arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	_arg1 = (*C.gchar)(C.CString(groupName))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(key))
	defer C.free(unsafe.Pointer(_arg2))
	_arg4 = C.gsize(len(list))
	_arg3 = (*C.gdouble)(unsafe.Pointer(&list[0]))

	C.g_key_file_set_double_list(_arg0, _arg1, _arg2, _arg3, _arg4)
}

// SetInt64 decreases the reference count of @key_file by 1. If the reference
// count reaches zero, frees the key file and all its allocated memory.
func (k *KeyFile) SetInt64(groupName string, key string, value int64) {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out
	var _arg2 *C.gchar    // out
	var _arg3 C.gint64    // out

	_arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	_arg1 = (*C.gchar)(C.CString(groupName))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(key))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = C.gint64(value)

	C.g_key_file_set_int64(_arg0, _arg1, _arg2, _arg3)
}

// SetInteger decreases the reference count of @key_file by 1. If the reference
// count reaches zero, frees the key file and all its allocated memory.
func (k *KeyFile) SetInteger(groupName string, key string, value int) {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out
	var _arg2 *C.gchar    // out
	var _arg3 C.gint      // out

	_arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	_arg1 = (*C.gchar)(C.CString(groupName))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(key))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = C.gint(value)

	C.g_key_file_set_integer(_arg0, _arg1, _arg2, _arg3)
}

// SetIntegerList decreases the reference count of @key_file by 1. If the
// reference count reaches zero, frees the key file and all its allocated
// memory.
func (k *KeyFile) SetIntegerList(groupName string, key string, list []int) {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out
	var _arg2 *C.gchar    // out
	var _arg3 *C.gint
	var _arg4 C.gsize

	_arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	_arg1 = (*C.gchar)(C.CString(groupName))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(key))
	defer C.free(unsafe.Pointer(_arg2))
	_arg4 = C.gsize(len(list))
	_arg3 = (*C.gint)(unsafe.Pointer(&list[0]))

	C.g_key_file_set_integer_list(_arg0, _arg1, _arg2, _arg3, _arg4)
}

// SetListSeparator decreases the reference count of @key_file by 1. If the
// reference count reaches zero, frees the key file and all its allocated
// memory.
func (k *KeyFile) SetListSeparator(separator byte) {
	var _arg0 *C.GKeyFile // out
	var _arg1 C.gchar     // out

	_arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	_arg1 = C.gchar(separator)

	C.g_key_file_set_list_separator(_arg0, _arg1)
}

// SetLocaleString decreases the reference count of @key_file by 1. If the
// reference count reaches zero, frees the key file and all its allocated
// memory.
func (k *KeyFile) SetLocaleString(groupName string, key string, locale string, _string string) {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out
	var _arg2 *C.gchar    // out
	var _arg3 *C.gchar    // out
	var _arg4 *C.gchar    // out

	_arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	_arg1 = (*C.gchar)(C.CString(groupName))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(key))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = (*C.gchar)(C.CString(locale))
	defer C.free(unsafe.Pointer(_arg3))
	_arg4 = (*C.gchar)(C.CString(_string))
	defer C.free(unsafe.Pointer(_arg4))

	C.g_key_file_set_locale_string(_arg0, _arg1, _arg2, _arg3, _arg4)
}

// SetLocaleStringList decreases the reference count of @key_file by 1. If the
// reference count reaches zero, frees the key file and all its allocated
// memory.
func (k *KeyFile) SetLocaleStringList(groupName string, key string, locale string, list []string) {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out
	var _arg2 *C.gchar    // out
	var _arg3 *C.gchar    // out
	var _arg4 **C.gchar
	var _arg5 C.gsize

	_arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	_arg1 = (*C.gchar)(C.CString(groupName))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(key))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = (*C.gchar)(C.CString(locale))
	defer C.free(unsafe.Pointer(_arg3))
	_arg5 = C.gsize(len(list))
	_arg4 = (**C.gchar)(C.malloc(C.ulong(len(list)) * C.ulong(unsafe.Sizeof(uint(0)))))
	defer C.free(unsafe.Pointer(_arg4))
	{
		out := unsafe.Slice(_arg4, len(list))
		for i := range list {
			out[i] = (*C.gchar)(C.CString(list[i]))
			defer C.free(unsafe.Pointer(out[i]))
		}
	}

	C.g_key_file_set_locale_string_list(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
}

// SetString decreases the reference count of @key_file by 1. If the reference
// count reaches zero, frees the key file and all its allocated memory.
func (k *KeyFile) SetString(groupName string, key string, _string string) {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out
	var _arg2 *C.gchar    // out
	var _arg3 *C.gchar    // out

	_arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	_arg1 = (*C.gchar)(C.CString(groupName))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(key))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = (*C.gchar)(C.CString(_string))
	defer C.free(unsafe.Pointer(_arg3))

	C.g_key_file_set_string(_arg0, _arg1, _arg2, _arg3)
}

// SetStringList decreases the reference count of @key_file by 1. If the
// reference count reaches zero, frees the key file and all its allocated
// memory.
func (k *KeyFile) SetStringList(groupName string, key string, list []string) {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out
	var _arg2 *C.gchar    // out
	var _arg3 **C.gchar
	var _arg4 C.gsize

	_arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	_arg1 = (*C.gchar)(C.CString(groupName))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(key))
	defer C.free(unsafe.Pointer(_arg2))
	_arg4 = C.gsize(len(list))
	_arg3 = (**C.gchar)(C.malloc(C.ulong(len(list)) * C.ulong(unsafe.Sizeof(uint(0)))))
	defer C.free(unsafe.Pointer(_arg3))
	{
		out := unsafe.Slice(_arg3, len(list))
		for i := range list {
			out[i] = (*C.gchar)(C.CString(list[i]))
			defer C.free(unsafe.Pointer(out[i]))
		}
	}

	C.g_key_file_set_string_list(_arg0, _arg1, _arg2, _arg3, _arg4)
}

// SetUint64 decreases the reference count of @key_file by 1. If the reference
// count reaches zero, frees the key file and all its allocated memory.
func (k *KeyFile) SetUint64(groupName string, key string, value uint64) {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out
	var _arg2 *C.gchar    // out
	var _arg3 C.guint64   // out

	_arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	_arg1 = (*C.gchar)(C.CString(groupName))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(key))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = C.guint64(value)

	C.g_key_file_set_uint64(_arg0, _arg1, _arg2, _arg3)
}

// SetValue decreases the reference count of @key_file by 1. If the reference
// count reaches zero, frees the key file and all its allocated memory.
func (k *KeyFile) SetValue(groupName string, key string, value string) {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out
	var _arg2 *C.gchar    // out
	var _arg3 *C.gchar    // out

	_arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	_arg1 = (*C.gchar)(C.CString(groupName))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(key))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = (*C.gchar)(C.CString(value))
	defer C.free(unsafe.Pointer(_arg3))

	C.g_key_file_set_value(_arg0, _arg1, _arg2, _arg3)
}

// ToData decreases the reference count of @key_file by 1. If the reference
// count reaches zero, frees the key file and all its allocated memory.
func (k *KeyFile) ToData() (uint, string, error) {
	var _arg0 *C.GKeyFile // out
	var _arg1 C.gsize     // in
	var _cret *C.gchar    // in
	var _cerr *C.GError   // in

	_arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))

	_cret = C.g_key_file_to_data(_arg0, &_arg1, &_cerr)

	var _length uint // out
	var _utf8 string // out
	var _goerr error // out

	_length = uint(_arg1)
	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _length, _utf8, _goerr
}

// Unref decreases the reference count of @key_file by 1. If the reference count
// reaches zero, frees the key file and all its allocated memory.
func (k *KeyFile) Unref() {
	var _arg0 *C.GKeyFile // out

	_arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))

	C.g_key_file_unref(_arg0)
}
