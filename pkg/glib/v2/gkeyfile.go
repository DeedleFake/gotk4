// Code generated by girgen. DO NOT EDIT.

package glib

import (
	"unsafe"

	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: glib-2.0 glib-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <glib.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_key_file_get_type()), F: marshalKeyFile},
	})
}

// KeyFileError: error codes returned by key file parsing.
type KeyFileError int

const (
	// KeyFileErrorUnknownEncoding: the text being parsed was in an unknown
	// encoding
	KeyFileErrorUnknownEncoding KeyFileError = 0
	// KeyFileErrorParse: document was ill-formed
	KeyFileErrorParse KeyFileError = 1
	// KeyFileErrorNotFound: the file was not found
	KeyFileErrorNotFound KeyFileError = 2
	// KeyFileErrorKeyNotFound: a requested key was not found
	KeyFileErrorKeyNotFound KeyFileError = 3
	// KeyFileErrorGroupNotFound: a requested group was not found
	KeyFileErrorGroupNotFound KeyFileError = 4
	// KeyFileErrorInvalidValue: a value could not be parsed
	KeyFileErrorInvalidValue KeyFileError = 5
)

// KeyFileFlags flags which influence the parsing.
type KeyFileFlags int

const (
	// KeyFileFlagsNone: no flags, default behaviour
	KeyFileFlagsNone KeyFileFlags = 0
	// KeyFileFlagsKeepComments: use this flag if you plan to write the
	// (possibly modified) contents of the key file back to a file; otherwise
	// all comments will be lost when the key file is written back.
	KeyFileFlagsKeepComments KeyFileFlags = 1
	// KeyFileFlagsKeepTranslations: use this flag if you plan to write the
	// (possibly modified) contents of the key file back to a file; otherwise
	// only the translations for the current language will be written back.
	KeyFileFlagsKeepTranslations KeyFileFlags = 2
)

// KeyFile: the GKeyFile struct contains only private data and should not be
// accessed directly.
type KeyFile struct {
	native C.GKeyFile
}

// WrapKeyFile wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapKeyFile(ptr unsafe.Pointer) *KeyFile {
	if ptr == nil {
		return nil
	}

	return (*KeyFile)(ptr)
}

func marshalKeyFile(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapKeyFile(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (k *KeyFile) Native() unsafe.Pointer {
	return unsafe.Pointer(&k.native)
}

// Groups returns all groups in the key file loaded with @key_file. The array of
// returned groups will be nil-terminated, so @length may optionally be nil.
func (k *KeyFile) Groups() (uint, []string) {
	var _arg0 *C.GKeyFile // out

	_arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))

	var _arg1 C.gsize // in
	var _cret **C.gchar

	_cret = C.g_key_file_get_groups(_arg0, &_arg1)

	var _length uint // out
	var _utf8s []string

	_length = (uint)(_arg1)
	{
		var length int
		for p := _cret; *p != nil; p = (**C.gchar)(unsafe.Add(unsafe.Pointer(p), unsafe.Sizeof(uint(0)))) {
			length++
			if length < 0 {
				panic(`length overflow`)
			}
		}

		src := unsafe.Slice(_cret, length)
		_utf8s = make([]string, length)
		for i := range src {
			_utf8s[i] = C.GoString(src[i])
			defer C.free(unsafe.Pointer(src[i]))
		}
	}

	return _length, _utf8s
}

// LocaleForKey returns the actual locale which the result of
// g_key_file_get_locale_string() or g_key_file_get_locale_string_list() came
// from.
//
// If calling g_key_file_get_locale_string() or
// g_key_file_get_locale_string_list() with exactly the same @key_file,
// @group_name, @key and @locale, the result of those functions will have
// originally been tagged with the locale that is the result of this function.
func (k *KeyFile) LocaleForKey(groupName string, key string, locale string) string {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out
	var _arg2 *C.gchar    // out
	var _arg3 *C.gchar    // out

	_arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	_arg1 = (*C.gchar)(C.CString(groupName))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(key))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = (*C.gchar)(C.CString(locale))
	defer C.free(unsafe.Pointer(_arg3))

	var _cret *C.gchar // in

	_cret = C.g_key_file_get_locale_for_key(_arg0, _arg1, _arg2, _arg3)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// StartGroup returns the name of the start group of the file.
func (k *KeyFile) StartGroup() string {
	var _arg0 *C.GKeyFile // out

	_arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))

	var _cret *C.gchar // in

	_cret = C.g_key_file_get_start_group(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// HasGroup looks whether the key file has the group @group_name.
func (k *KeyFile) HasGroup(groupName string) bool {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out

	_arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	_arg1 = (*C.gchar)(C.CString(groupName))
	defer C.free(unsafe.Pointer(_arg1))

	var _cret C.gboolean // in

	_cret = C.g_key_file_has_group(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetBoolean associates a new boolean value with @key under @group_name. If
// @key cannot be found then it is created.
func (k *KeyFile) SetBoolean(groupName string, key string, value bool) {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out
	var _arg2 *C.gchar    // out
	var _arg3 C.gboolean  // out

	_arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	_arg1 = (*C.gchar)(C.CString(groupName))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(key))
	defer C.free(unsafe.Pointer(_arg2))
	if value {
		_arg3 = C.TRUE
	}

	C.g_key_file_set_boolean(_arg0, _arg1, _arg2, _arg3)
}

// SetBooleanList associates a list of boolean values with @key under
// @group_name. If @key cannot be found then it is created. If @group_name is
// nil, the start_group is used.
func (k *KeyFile) SetBooleanList(groupName string, key string, list []bool) {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out
	var _arg2 *C.gchar    // out
	var _arg3 *C.gboolean
	var _arg4 C.gsize

	_arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	_arg1 = (*C.gchar)(C.CString(groupName))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(key))
	defer C.free(unsafe.Pointer(_arg2))
	_arg4 = C.gsize(len(list))
	_arg3 = (*C.gboolean)(unsafe.Pointer(&list[0]))

	C.g_key_file_set_boolean_list(_arg0, _arg1, _arg2, _arg3, _arg4)
}

// SetDouble associates a new double value with @key under @group_name. If @key
// cannot be found then it is created.
func (k *KeyFile) SetDouble(groupName string, key string, value float64) {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out
	var _arg2 *C.gchar    // out
	var _arg3 C.gdouble   // out

	_arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	_arg1 = (*C.gchar)(C.CString(groupName))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(key))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = C.gdouble(value)

	C.g_key_file_set_double(_arg0, _arg1, _arg2, _arg3)
}

// SetDoubleList associates a list of double values with @key under @group_name.
// If @key cannot be found then it is created.
func (k *KeyFile) SetDoubleList(groupName string, key string, list []float64) {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out
	var _arg2 *C.gchar    // out
	var _arg3 *C.gdouble
	var _arg4 C.gsize

	_arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	_arg1 = (*C.gchar)(C.CString(groupName))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(key))
	defer C.free(unsafe.Pointer(_arg2))
	_arg4 = C.gsize(len(list))
	_arg3 = (*C.gdouble)(unsafe.Pointer(&list[0]))

	C.g_key_file_set_double_list(_arg0, _arg1, _arg2, _arg3, _arg4)
}

// SetInt64 associates a new integer value with @key under @group_name. If @key
// cannot be found then it is created.
func (k *KeyFile) SetInt64(groupName string, key string, value int64) {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out
	var _arg2 *C.gchar    // out
	var _arg3 C.gint64    // out

	_arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	_arg1 = (*C.gchar)(C.CString(groupName))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(key))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = C.gint64(value)

	C.g_key_file_set_int64(_arg0, _arg1, _arg2, _arg3)
}

// SetInteger associates a new integer value with @key under @group_name. If
// @key cannot be found then it is created.
func (k *KeyFile) SetInteger(groupName string, key string, value int) {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out
	var _arg2 *C.gchar    // out
	var _arg3 C.gint      // out

	_arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	_arg1 = (*C.gchar)(C.CString(groupName))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(key))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = C.gint(value)

	C.g_key_file_set_integer(_arg0, _arg1, _arg2, _arg3)
}

// SetIntegerList associates a list of integer values with @key under
// @group_name. If @key cannot be found then it is created.
func (k *KeyFile) SetIntegerList(groupName string, key string, list []int) {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out
	var _arg2 *C.gchar    // out
	var _arg3 *C.gint
	var _arg4 C.gsize

	_arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	_arg1 = (*C.gchar)(C.CString(groupName))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(key))
	defer C.free(unsafe.Pointer(_arg2))
	_arg4 = C.gsize(len(list))
	_arg3 = (*C.gint)(unsafe.Pointer(&list[0]))

	C.g_key_file_set_integer_list(_arg0, _arg1, _arg2, _arg3, _arg4)
}

// SetListSeparator sets the character which is used to separate values in
// lists. Typically ';' or ',' are used as separators. The default list
// separator is ';'.
func (k *KeyFile) SetListSeparator(separator byte) {
	var _arg0 *C.GKeyFile // out
	var _arg1 C.gchar     // out

	_arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	_arg1 = C.gchar(separator)

	C.g_key_file_set_list_separator(_arg0, _arg1)
}

// SetLocaleString associates a string value for @key and @locale under
// @group_name. If the translation for @key cannot be found then it is created.
func (k *KeyFile) SetLocaleString(groupName string, key string, locale string, string string) {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out
	var _arg2 *C.gchar    // out
	var _arg3 *C.gchar    // out
	var _arg4 *C.gchar    // out

	_arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	_arg1 = (*C.gchar)(C.CString(groupName))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(key))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = (*C.gchar)(C.CString(locale))
	defer C.free(unsafe.Pointer(_arg3))
	_arg4 = (*C.gchar)(C.CString(string))
	defer C.free(unsafe.Pointer(_arg4))

	C.g_key_file_set_locale_string(_arg0, _arg1, _arg2, _arg3, _arg4)
}

// SetLocaleStringList associates a list of string values for @key and @locale
// under @group_name. If the translation for @key cannot be found then it is
// created.
func (k *KeyFile) SetLocaleStringList(groupName string, key string, locale string, list []string) {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out
	var _arg2 *C.gchar    // out
	var _arg3 *C.gchar    // out
	var _arg4 **C.gchar
	var _arg5 C.gsize

	_arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	_arg1 = (*C.gchar)(C.CString(groupName))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(key))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = (*C.gchar)(C.CString(locale))
	defer C.free(unsafe.Pointer(_arg3))
	_arg5 = C.gsize(len(list))
	_arg4 = (**C.gchar)(C.malloc(C.ulong(len(list)) * C.ulong(unsafe.Sizeof(uint(0)))))
	defer C.free(unsafe.Pointer(_arg4))

	{
		out := unsafe.Slice(_arg4, len(list))
		for i := range list {
			out[i] = (*C.gchar)(C.CString(list[i]))
			defer C.free(unsafe.Pointer(out[i]))
		}
	}

	C.g_key_file_set_locale_string_list(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
}

// SetString associates a new string value with @key under @group_name. If @key
// cannot be found then it is created. If @group_name cannot be found then it is
// created. Unlike g_key_file_set_value(), this function handles characters that
// need escaping, such as newlines.
func (k *KeyFile) SetString(groupName string, key string, string string) {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out
	var _arg2 *C.gchar    // out
	var _arg3 *C.gchar    // out

	_arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	_arg1 = (*C.gchar)(C.CString(groupName))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(key))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = (*C.gchar)(C.CString(string))
	defer C.free(unsafe.Pointer(_arg3))

	C.g_key_file_set_string(_arg0, _arg1, _arg2, _arg3)
}

// SetStringList associates a list of string values for @key under @group_name.
// If @key cannot be found then it is created. If @group_name cannot be found
// then it is created.
func (k *KeyFile) SetStringList(groupName string, key string, list []string) {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out
	var _arg2 *C.gchar    // out
	var _arg3 **C.gchar
	var _arg4 C.gsize

	_arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	_arg1 = (*C.gchar)(C.CString(groupName))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(key))
	defer C.free(unsafe.Pointer(_arg2))
	_arg4 = C.gsize(len(list))
	_arg3 = (**C.gchar)(C.malloc(C.ulong(len(list)) * C.ulong(unsafe.Sizeof(uint(0)))))
	defer C.free(unsafe.Pointer(_arg3))

	{
		out := unsafe.Slice(_arg3, len(list))
		for i := range list {
			out[i] = (*C.gchar)(C.CString(list[i]))
			defer C.free(unsafe.Pointer(out[i]))
		}
	}

	C.g_key_file_set_string_list(_arg0, _arg1, _arg2, _arg3, _arg4)
}

// SetUint64 associates a new integer value with @key under @group_name. If @key
// cannot be found then it is created.
func (k *KeyFile) SetUint64(groupName string, key string, value uint64) {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out
	var _arg2 *C.gchar    // out
	var _arg3 C.guint64   // out

	_arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	_arg1 = (*C.gchar)(C.CString(groupName))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(key))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = C.guint64(value)

	C.g_key_file_set_uint64(_arg0, _arg1, _arg2, _arg3)
}

// SetValue associates a new value with @key under @group_name.
//
// If @key cannot be found then it is created. If @group_name cannot be found
// then it is created. To set an UTF-8 string which may contain characters that
// need escaping (such as newlines or spaces), use g_key_file_set_string().
func (k *KeyFile) SetValue(groupName string, key string, value string) {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out
	var _arg2 *C.gchar    // out
	var _arg3 *C.gchar    // out

	_arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))
	_arg1 = (*C.gchar)(C.CString(groupName))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(key))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = (*C.gchar)(C.CString(value))
	defer C.free(unsafe.Pointer(_arg3))

	C.g_key_file_set_value(_arg0, _arg1, _arg2, _arg3)
}

// Unref decreases the reference count of @key_file by 1. If the reference count
// reaches zero, frees the key file and all its allocated memory.
func (k *KeyFile) Unref() {
	var _arg0 *C.GKeyFile // out

	_arg0 = (*C.GKeyFile)(unsafe.Pointer(k.Native()))

	C.g_key_file_unref(_arg0)
}
