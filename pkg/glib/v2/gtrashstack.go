// Code generated by girgen. DO NOT EDIT.

package glib

import (
	"unsafe"
)

// #cgo pkg-config: glib-2.0 gobject-introspection-1.0 glib-2.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <glib.h>
import "C"

// TrashStack: each piece of memory that is pushed onto the stack is cast to a
// GTrashStack*.
type TrashStack struct {
	native C.GTrashStack
}

// WrapTrashStack wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapTrashStack(ptr unsafe.Pointer) *TrashStack {
	if ptr == nil {
		return nil
	}

	return (*TrashStack)(ptr)
}

func marshalTrashStack(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapTrashStack(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (t *TrashStack) Native() unsafe.Pointer {
	return unsafe.Pointer(&t.native)
}
