// Code generated by girgen. DO NOT EDIT.

package glib

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/box"
)

// #cgo pkg-config: glib-2.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <glib.h>
import "C"

// TrashStackHeight returns the height of a Stack.
//
// Note that execution of this function is of O(N) complexity where N denotes
// the number of items on the stack.
func TrashStackHeight(stackP **TrashStack) uint {
	var arg1 **C.GTrashStack

	arg1 = (**C.GTrashStack)(stackP.Native())

	ret := C.g_trash_stack_height(arg1)

	var ret0 uint

	ret0 = uint(ret)

	return ret0
}

// TrashStackPeek returns the element at the top of a Stack which may be nil.
func TrashStackPeek(stackP **TrashStack) interface{} {
	var arg1 **C.GTrashStack

	arg1 = (**C.GTrashStack)(stackP.Native())

	ret := C.g_trash_stack_peek(arg1)

	var ret0 interface{}

	ret0 = box.Get(uintptr(ret)).(interface{})

	return ret0
}

// TrashStackPop pops a piece of memory off a Stack.
func TrashStackPop(stackP **TrashStack) interface{} {
	var arg1 **C.GTrashStack

	arg1 = (**C.GTrashStack)(stackP.Native())

	ret := C.g_trash_stack_pop(arg1)

	var ret0 interface{}

	ret0 = box.Get(uintptr(ret)).(interface{})

	return ret0
}

// TrashStackPush pushes a piece of memory onto a Stack.
func TrashStackPush(stackP **TrashStack, dataP interface{}) {
	var arg1 **C.GTrashStack
	var arg2 C.gpointer

	arg1 = (**C.GTrashStack)(stackP.Native())
	arg2 = C.gpointer(box.Assign(dataP))

	C.g_trash_stack_push(arg1, arg2)
}

// TrashStack: each piece of memory that is pushed onto the stack is cast to a
// GTrashStack*.
type TrashStack struct {
	native C.GTrashStack
}

// WrapTrashStack wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapTrashStack(ptr unsafe.Pointer) *TrashStack {
	if ptr == nil {
		return nil
	}

	return (*TrashStack)(ptr)
}

func marshalTrashStack(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapTrashStack(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (t *TrashStack) Native() unsafe.Pointer {
	return unsafe.Pointer(&t.native)
}

// Next gets the field inside the struct.
func (t *TrashStack) Next() *TrashStack {
	var ret *TrashStack
	{
		ret = WrapTrashStack(unsafe.Pointer(t.native.next))
	}
	return ret
}
