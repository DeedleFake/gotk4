// Code generated by girgen. DO NOT EDIT.

package glib

import (
	"unsafe"

	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: glib-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <glib.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_time_zone_get_type()), F: marshalTimeZone},
	})
}

// TimeType disambiguates a given time in two ways.
//
// First, specifies if the given time is in universal or local time.
//
// Second, if the time is in local time, specifies if it is local standard time
// or local daylight time. This is important for the case where the same local
// time occurs twice (during daylight savings time transitions, for example).
type TimeType int

const (
	// standard: the time is in local standard time
	TimeTypeStandard TimeType = 0
	// daylight: the time is in local daylight time
	TimeTypeDaylight TimeType = 1
	// universal: the time is in UTC
	TimeTypeUniversal TimeType = 2
)

// TimeZone is an opaque structure whose members cannot be accessed directly.
type TimeZone C.GTimeZone

// WrapTimeZone wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapTimeZone(ptr unsafe.Pointer) *TimeZone {
	return (*TimeZone)(ptr)
}

func marshalTimeZone(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return (*TimeZone)(unsafe.Pointer(b)), nil
}

// NewTimeZone constructs a struct TimeZone.
func NewTimeZone(identifier string) *TimeZone {
	var _arg1 *C.gchar     // out
	var _cret *C.GTimeZone // in

	_arg1 = (*C.gchar)(C.CString(identifier))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.g_time_zone_new(_arg1)

	var _timeZone *TimeZone // out

	_timeZone = (*TimeZone)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(&_timeZone, func(v **TimeZone) {
		C.free(unsafe.Pointer(v))
	})

	return _timeZone
}

// NewTimeZoneIdentifier constructs a struct TimeZone.
func NewTimeZoneIdentifier(identifier string) *TimeZone {
	var _arg1 *C.gchar     // out
	var _cret *C.GTimeZone // in

	_arg1 = (*C.gchar)(C.CString(identifier))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.g_time_zone_new_identifier(_arg1)

	var _timeZone *TimeZone // out

	_timeZone = (*TimeZone)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(&_timeZone, func(v **TimeZone) {
		C.free(unsafe.Pointer(v))
	})

	return _timeZone
}

// NewTimeZoneLocal constructs a struct TimeZone.
func NewTimeZoneLocal() *TimeZone {
	var _cret *C.GTimeZone // in

	_cret = C.g_time_zone_new_local()

	var _timeZone *TimeZone // out

	_timeZone = (*TimeZone)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(&_timeZone, func(v **TimeZone) {
		C.free(unsafe.Pointer(v))
	})

	return _timeZone
}

// NewTimeZoneOffset constructs a struct TimeZone.
func NewTimeZoneOffset(seconds int32) *TimeZone {
	var _arg1 C.gint32     // out
	var _cret *C.GTimeZone // in

	_arg1 = C.gint32(seconds)

	_cret = C.g_time_zone_new_offset(_arg1)

	var _timeZone *TimeZone // out

	_timeZone = (*TimeZone)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(&_timeZone, func(v **TimeZone) {
		C.free(unsafe.Pointer(v))
	})

	return _timeZone
}

// NewTimeZoneUtc constructs a struct TimeZone.
func NewTimeZoneUtc() *TimeZone {
	var _cret *C.GTimeZone // in

	_cret = C.g_time_zone_new_utc()

	var _timeZone *TimeZone // out

	_timeZone = (*TimeZone)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(&_timeZone, func(v **TimeZone) {
		C.free(unsafe.Pointer(v))
	})

	return _timeZone
}

// Native returns the underlying C source pointer.
func (t *TimeZone) Native() unsafe.Pointer {
	return unsafe.Pointer(t)
}

// AdjustTime decreases the reference count on @tz.
func (t *TimeZone) AdjustTime(typ TimeType, time_ *int64) int {
	var _arg0 *C.GTimeZone // out
	var _arg1 C.GTimeType  // out
	var _arg2 *C.gint64    // out
	var _cret C.gint       // in

	_arg0 = (*C.GTimeZone)(unsafe.Pointer(t.Native()))
	_arg1 = C.GTimeType(typ)
	_arg2 = (*C.gint64)(unsafe.Pointer(time_))

	_cret = C.g_time_zone_adjust_time(_arg0, _arg1, _arg2)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// FindInterval decreases the reference count on @tz.
func (t *TimeZone) FindInterval(typ TimeType, time_ int64) int {
	var _arg0 *C.GTimeZone // out
	var _arg1 C.GTimeType  // out
	var _arg2 C.gint64     // out
	var _cret C.gint       // in

	_arg0 = (*C.GTimeZone)(unsafe.Pointer(t.Native()))
	_arg1 = C.GTimeType(typ)
	_arg2 = C.gint64(time_)

	_cret = C.g_time_zone_find_interval(_arg0, _arg1, _arg2)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// Abbreviation decreases the reference count on @tz.
func (t *TimeZone) Abbreviation(interval int) string {
	var _arg0 *C.GTimeZone // out
	var _arg1 C.gint       // out
	var _cret *C.gchar     // in

	_arg0 = (*C.GTimeZone)(unsafe.Pointer(t.Native()))
	_arg1 = C.gint(interval)

	_cret = C.g_time_zone_get_abbreviation(_arg0, _arg1)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

// Identifier decreases the reference count on @tz.
func (t *TimeZone) Identifier() string {
	var _arg0 *C.GTimeZone // out
	var _cret *C.gchar     // in

	_arg0 = (*C.GTimeZone)(unsafe.Pointer(t.Native()))

	_cret = C.g_time_zone_get_identifier(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

// Offset decreases the reference count on @tz.
func (t *TimeZone) Offset(interval int) int32 {
	var _arg0 *C.GTimeZone // out
	var _arg1 C.gint       // out
	var _cret C.gint32     // in

	_arg0 = (*C.GTimeZone)(unsafe.Pointer(t.Native()))
	_arg1 = C.gint(interval)

	_cret = C.g_time_zone_get_offset(_arg0, _arg1)

	var _gint32 int32 // out

	_gint32 = int32(_cret)

	return _gint32
}

// IsDst decreases the reference count on @tz.
func (t *TimeZone) IsDst(interval int) bool {
	var _arg0 *C.GTimeZone // out
	var _arg1 C.gint       // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GTimeZone)(unsafe.Pointer(t.Native()))
	_arg1 = C.gint(interval)

	_cret = C.g_time_zone_is_dst(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Ref decreases the reference count on @tz.
func (t *TimeZone) Ref() *TimeZone {
	var _arg0 *C.GTimeZone // out
	var _cret *C.GTimeZone // in

	_arg0 = (*C.GTimeZone)(unsafe.Pointer(t.Native()))

	_cret = C.g_time_zone_ref(_arg0)

	var _timeZone *TimeZone // out

	_timeZone = (*TimeZone)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(&_timeZone, func(v **TimeZone) {
		C.free(unsafe.Pointer(v))
	})

	return _timeZone
}

// Unref decreases the reference count on @tz.
func (t *TimeZone) Unref() {
	var _arg0 *C.GTimeZone // out

	_arg0 = (*C.GTimeZone)(unsafe.Pointer(t.Native()))

	C.g_time_zone_unref(_arg0)
}
