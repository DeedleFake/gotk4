// Code generated by girgen. DO NOT EDIT.

package glib

import (
	"runtime"
	"unsafe"

	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: glib-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <glib.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_time_zone_get_type()), F: marshalTimeZone},
	})
}

// TimeType disambiguates a given time in two ways.
//
// First, specifies if the given time is in universal or local time.
//
// Second, if the time is in local time, specifies if it is local standard time
// or local daylight time. This is important for the case where the same local
// time occurs twice (during daylight savings time transitions, for example).
type TimeType int

const (
	// TimeTypeStandard: the time is in local standard time
	TimeTypeStandard TimeType = 0
	// TimeTypeDaylight: the time is in local daylight time
	TimeTypeDaylight TimeType = 1
	// TimeTypeUniversal: the time is in UTC
	TimeTypeUniversal TimeType = 2
)

// TimeZone is an opaque structure whose members cannot be accessed directly.
type TimeZone struct {
	native C.GTimeZone
}

// WrapTimeZone wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapTimeZone(ptr unsafe.Pointer) *TimeZone {
	if ptr == nil {
		return nil
	}

	return (*TimeZone)(ptr)
}

func marshalTimeZone(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapTimeZone(unsafe.Pointer(b)), nil
}

// NewTimeZone constructs a struct TimeZone.
func NewTimeZone(identifier string) *TimeZone {
	var arg1 *C.gchar

	arg1 = (*C.gchar)(C.CString(identifier))
	defer C.free(unsafe.Pointer(arg1))

	cret := new(C.GTimeZone)
	var goret *TimeZone

	cret = C.g_time_zone_new(arg1)

	goret = WrapTimeZone(unsafe.Pointer(cret))
	runtime.SetFinalizer(goret, func(v *TimeZone) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return goret
}

// NewTimeZoneIdentifier constructs a struct TimeZone.
func NewTimeZoneIdentifier(identifier string) *TimeZone {
	var arg1 *C.gchar

	arg1 = (*C.gchar)(C.CString(identifier))
	defer C.free(unsafe.Pointer(arg1))

	cret := new(C.GTimeZone)
	var goret *TimeZone

	cret = C.g_time_zone_new_identifier(arg1)

	goret = WrapTimeZone(unsafe.Pointer(cret))
	runtime.SetFinalizer(goret, func(v *TimeZone) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return goret
}

// NewTimeZoneLocal constructs a struct TimeZone.
func NewTimeZoneLocal() *TimeZone {
	cret := new(C.GTimeZone)
	var goret *TimeZone

	cret = C.g_time_zone_new_local()

	goret = WrapTimeZone(unsafe.Pointer(cret))
	runtime.SetFinalizer(goret, func(v *TimeZone) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return goret
}

// NewTimeZoneOffset constructs a struct TimeZone.
func NewTimeZoneOffset(seconds int32) *TimeZone {
	var arg1 C.gint32

	arg1 = C.gint32(seconds)

	cret := new(C.GTimeZone)
	var goret *TimeZone

	cret = C.g_time_zone_new_offset(arg1)

	goret = WrapTimeZone(unsafe.Pointer(cret))
	runtime.SetFinalizer(goret, func(v *TimeZone) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return goret
}

// NewTimeZoneUtc constructs a struct TimeZone.
func NewTimeZoneUtc() *TimeZone {
	cret := new(C.GTimeZone)
	var goret *TimeZone

	cret = C.g_time_zone_new_utc()

	goret = WrapTimeZone(unsafe.Pointer(cret))
	runtime.SetFinalizer(goret, func(v *TimeZone) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return goret
}

// Native returns the underlying C source pointer.
func (t *TimeZone) Native() unsafe.Pointer {
	return unsafe.Pointer(&t.native)
}

// AdjustTime finds an interval within @tz that corresponds to the given @time_,
// possibly adjusting @time_ if required to fit into an interval. The meaning of
// @time_ depends on @type.
//
// This function is similar to g_time_zone_find_interval(), with the difference
// that it always succeeds (by making the adjustments described below).
//
// In any of the cases where g_time_zone_find_interval() succeeds then this
// function returns the same value, without modifying @time_.
//
// This function may, however, modify @time_ in order to deal with non-existent
// times. If the non-existent local @time_ of 02:30 were requested on March 14th
// 2010 in Toronto then this function would adjust @time_ to be 03:00 and return
// the interval containing the adjusted time.
func (t *TimeZone) AdjustTime(typ TimeType, time_ int64) int {
	var arg0 *C.GTimeZone
	var arg1 C.GTimeType
	var arg2 *C.gint64

	arg0 = (*C.GTimeZone)(unsafe.Pointer(t.Native()))
	arg1 = (C.GTimeType)(typ)
	arg2 = *C.gint64(time_)

	var cret C.gint
	var goret int

	cret = C.g_time_zone_adjust_time(arg0, arg1, arg2)

	goret = int(cret)

	return goret
}

// FindInterval finds an interval within @tz that corresponds to the given
// @time_. The meaning of @time_ depends on @type.
//
// If @type is G_TIME_TYPE_UNIVERSAL then this function will always succeed
// (since universal time is monotonic and continuous).
//
// Otherwise @time_ is treated as local time. The distinction between
// G_TIME_TYPE_STANDARD and G_TIME_TYPE_DAYLIGHT is ignored except in the case
// that the given @time_ is ambiguous. In Toronto, for example, 01:30 on
// November 7th 2010 occurred twice (once inside of daylight savings time and
// the next, an hour later, outside of daylight savings time). In this case, the
// different value of @type would result in a different interval being returned.
//
// It is still possible for this function to fail. In Toronto, for example,
// 02:00 on March 14th 2010 does not exist (due to the leap forward to begin
// daylight savings time). -1 is returned in that case.
func (t *TimeZone) FindInterval(typ TimeType, time_ int64) int {
	var arg0 *C.GTimeZone
	var arg1 C.GTimeType
	var arg2 C.gint64

	arg0 = (*C.GTimeZone)(unsafe.Pointer(t.Native()))
	arg1 = (C.GTimeType)(typ)
	arg2 = C.gint64(time_)

	var cret C.gint
	var goret int

	cret = C.g_time_zone_find_interval(arg0, arg1, arg2)

	goret = int(cret)

	return goret
}

// Abbreviation determines the time zone abbreviation to be used during a
// particular @interval of time in the time zone @tz.
//
// For example, in Toronto this is currently "EST" during the winter months and
// "EDT" during the summer months when daylight savings time is in effect.
func (t *TimeZone) Abbreviation(interval int) string {
	var arg0 *C.GTimeZone
	var arg1 C.gint

	arg0 = (*C.GTimeZone)(unsafe.Pointer(t.Native()))
	arg1 = C.gint(interval)

	var cret *C.gchar
	var goret string

	cret = C.g_time_zone_get_abbreviation(arg0, arg1)

	goret = C.GoString(cret)

	return goret
}

// Identifier: get the identifier of this Zone, as passed to g_time_zone_new().
// If the identifier passed at construction time was not recognised, `UTC` will
// be returned. If it was nil, the identifier of the local timezone at
// construction time will be returned.
//
// The identifier will be returned in the same format as provided at
// construction time: if provided as a time offset, that will be returned by
// this function.
func (t *TimeZone) Identifier() string {
	var arg0 *C.GTimeZone

	arg0 = (*C.GTimeZone)(unsafe.Pointer(t.Native()))

	var cret *C.gchar
	var goret string

	cret = C.g_time_zone_get_identifier(arg0)

	goret = C.GoString(cret)

	return goret
}

// Offset determines the offset to UTC in effect during a particular @interval
// of time in the time zone @tz.
//
// The offset is the number of seconds that you add to UTC time to arrive at
// local time for @tz (ie: negative numbers for time zones west of GMT, positive
// numbers for east).
func (t *TimeZone) Offset(interval int) int32 {
	var arg0 *C.GTimeZone
	var arg1 C.gint

	arg0 = (*C.GTimeZone)(unsafe.Pointer(t.Native()))
	arg1 = C.gint(interval)

	var cret C.gint32
	var goret int32

	cret = C.g_time_zone_get_offset(arg0, arg1)

	goret = int32(cret)

	return goret
}

// IsDst determines if daylight savings time is in effect during a particular
// @interval of time in the time zone @tz.
func (t *TimeZone) IsDst(interval int) bool {
	var arg0 *C.GTimeZone
	var arg1 C.gint

	arg0 = (*C.GTimeZone)(unsafe.Pointer(t.Native()))
	arg1 = C.gint(interval)

	var cret C.gboolean
	var goret bool

	cret = C.g_time_zone_is_dst(arg0, arg1)

	if cret {
		goret = true
	}

	return goret
}

// Ref increases the reference count on @tz.
func (t *TimeZone) Ref() *TimeZone {
	var arg0 *C.GTimeZone

	arg0 = (*C.GTimeZone)(unsafe.Pointer(t.Native()))

	cret := new(C.GTimeZone)
	var goret *TimeZone

	cret = C.g_time_zone_ref(arg0)

	goret = WrapTimeZone(unsafe.Pointer(cret))
	runtime.SetFinalizer(goret, func(v *TimeZone) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return goret
}

// Unref decreases the reference count on @tz.
func (t *TimeZone) Unref() {
	var arg0 *C.GTimeZone

	arg0 = (*C.GTimeZone)(unsafe.Pointer(t.Native()))

	C.g_time_zone_unref(arg0)
}
