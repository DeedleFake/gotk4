// Code generated by girgen. DO NOT EDIT.

package glib

import (
	"unsafe"
)

// #cgo pkg-config: glib-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <glib.h>
import "C"

// HookFlagMask flags used internally in the #GHook implementation.
type HookFlagMask int

const (
	// HookFlagMaskActive: set if the hook has not been destroyed
	HookFlagMaskActive HookFlagMask = 1
	// HookFlagMaskInCall: set if the hook is currently being run
	HookFlagMaskInCall HookFlagMask = 2
	// HookFlagMaskMask: a mask covering all bits reserved for hook flags; see
	// G_HOOK_FLAG_USER_SHIFT
	HookFlagMaskMask HookFlagMask = 15
)

// Hook: the #GHook struct represents a single hook function in a List.
type Hook struct {
	native C.GHook
}

// WrapHook wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapHook(ptr unsafe.Pointer) *Hook {
	if ptr == nil {
		return nil
	}

	return (*Hook)(ptr)
}

func marshalHook(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapHook(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (h *Hook) Native() unsafe.Pointer {
	return unsafe.Pointer(&h.native)
}

// Data gets the field inside the struct.
func (h *Hook) Data() interface{} {
	var v interface{}
	v = interface{}(h.native.data)
	return v
}

// Next gets the field inside the struct.
func (h *Hook) Next() *Hook {
	var v *Hook
	v = WrapHook(unsafe.Pointer(h.native.next))
	return v
}

// Prev gets the field inside the struct.
func (h *Hook) Prev() *Hook {
	var v *Hook
	v = WrapHook(unsafe.Pointer(h.native.prev))
	return v
}

// RefCount gets the field inside the struct.
func (h *Hook) RefCount() uint {
	var v uint
	v = uint(h.native.ref_count)
	return v
}

// HookID gets the field inside the struct.
func (h *Hook) HookID() uint32 {
	var v uint32
	v = uint32(h.native.hook_id)
	return v
}

// Flags gets the field inside the struct.
func (h *Hook) Flags() uint {
	var v uint
	v = uint(h.native.flags)
	return v
}

// Func gets the field inside the struct.
func (h *Hook) Func() interface{} {
	var v interface{}
	v = interface{}(h.native._func)
	return v
}

// CompareIds compares the ids of two #GHook elements, returning a negative
// value if the second id is greater than the first.
func (n *Hook) CompareIds(sibling *Hook) int {
	var arg0 *C.GHook
	var arg1 *C.GHook

	arg0 = (*C.GHook)(unsafe.Pointer(n.Native()))
	arg1 = (*C.GHook)(unsafe.Pointer(sibling.Native()))

	var cret C.gint
	var goret int

	cret = C.g_hook_compare_ids(arg0, arg1)

	goret = int(cret)

	return goret
}

// HookList: the List struct represents a list of hook functions.
type HookList struct {
	native C.GHookList
}

// WrapHookList wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapHookList(ptr unsafe.Pointer) *HookList {
	if ptr == nil {
		return nil
	}

	return (*HookList)(ptr)
}

func marshalHookList(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapHookList(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (h *HookList) Native() unsafe.Pointer {
	return unsafe.Pointer(&h.native)
}

// SeqID gets the field inside the struct.
func (h *HookList) SeqID() uint32 {
	var v uint32
	v = uint32(h.native.seq_id)
	return v
}

// Hooks gets the field inside the struct.
func (h *HookList) Hooks() *Hook {
	var v *Hook
	v = WrapHook(unsafe.Pointer(h.native.hooks))
	return v
}

// Dummy3 gets the field inside the struct.
func (h *HookList) Dummy3() interface{} {
	var v interface{}
	v = interface{}(h.native.dummy3)
	return v
}

// Dummy gets the field inside the struct.
func (h *HookList) Dummy() [2]interface{} {
	var v [2]interface{}
	v = *(*[2]interface{})(unsafe.Pointer(h.native.dummy))
	return v
}

// Clear removes all the #GHook elements from a List.
func (h *HookList) Clear() {
	var arg0 *C.GHookList

	arg0 = (*C.GHookList)(unsafe.Pointer(h.Native()))

	C.g_hook_list_clear(arg0)
}

// Init initializes a List. This must be called before the List is used.
func (h *HookList) Init(hookSize uint) {
	var arg0 *C.GHookList
	var arg1 C.guint

	arg0 = (*C.GHookList)(unsafe.Pointer(h.Native()))
	arg1 = C.guint(hookSize)

	C.g_hook_list_init(arg0, arg1)
}

// Invoke calls all of the #GHook functions in a List.
func (h *HookList) Invoke(mayRecurse bool) {
	var arg0 *C.GHookList
	var arg1 C.gboolean

	arg0 = (*C.GHookList)(unsafe.Pointer(h.Native()))
	if mayRecurse {
		arg1 = C.gboolean(1)
	}

	C.g_hook_list_invoke(arg0, arg1)
}

// InvokeCheck calls all of the #GHook functions in a List. Any function which
// returns false is removed from the List.
func (h *HookList) InvokeCheck(mayRecurse bool) {
	var arg0 *C.GHookList
	var arg1 C.gboolean

	arg0 = (*C.GHookList)(unsafe.Pointer(h.Native()))
	if mayRecurse {
		arg1 = C.gboolean(1)
	}

	C.g_hook_list_invoke_check(arg0, arg1)
}

// Marshal calls a function on each valid #GHook.
func (h *HookList) Marshal() {
	var arg0 *C.GHookList

	arg0 = (*C.GHookList)(unsafe.Pointer(h.Native()))

	C.g_hook_list_marshal(arg0, arg1, arg2, arg3)
}

// MarshalCheck calls a function on each valid #GHook and destroys it if the
// function returns false.
func (h *HookList) MarshalCheck() {
	var arg0 *C.GHookList

	arg0 = (*C.GHookList)(unsafe.Pointer(h.Native()))

	C.g_hook_list_marshal_check(arg0, arg1, arg2, arg3)
}
