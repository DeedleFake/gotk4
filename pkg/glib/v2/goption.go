// Code generated by girgen. DO NOT EDIT.

package glib

import (
	"unsafe"

	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: glib-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <glib.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_option_group_get_type()), F: marshalOptionGroup},
	})
}

// OptionArg: the Arg enum values determine which type of extra argument the
// options expect to find. If an option expects an extra argument, it can be
// specified in several ways; with a short option: `-x arg`, with a long option:
// `--name arg` or combined in a single argument: `--name=arg`.
type OptionArg int

const (
	// none: no extra argument. This is useful for simple flags.
	OptionArgNone OptionArg = 0
	// string: the option takes a UTF-8 string argument.
	OptionArgString OptionArg = 1
	// int: the option takes an integer argument.
	OptionArgInt OptionArg = 2
	// callback: the option provides a callback (of type ArgFunc) to parse the
	// extra argument.
	OptionArgCallback OptionArg = 3
	// filename: the option takes a filename as argument, which will be in the
	// GLib filename encoding rather than UTF-8.
	OptionArgFilename OptionArg = 4
	// StringArray: the option takes a string argument, multiple uses of the
	// option are collected into an array of strings.
	OptionArgStringArray OptionArg = 5
	// FilenameArray: the option takes a filename as argument, multiple uses of
	// the option are collected into an array of strings.
	OptionArgFilenameArray OptionArg = 6
	// double: the option takes a double argument. The argument can be formatted
	// either for the user's locale or for the "C" locale. Since 2.12
	OptionArgDouble OptionArg = 7
	// int64: the option takes a 64-bit integer. Like G_OPTION_ARG_INT but for
	// larger numbers. The number can be in decimal base, or in hexadecimal
	// (when prefixed with `0x`, for example, `0xffffffff`). Since 2.12
	OptionArgInt64 OptionArg = 8
)

// OptionError: error codes returned by option parsing.
type OptionError int

const (
	// UnknownOption: an option was not known to the parser. This error will
	// only be reported, if the parser hasn't been instructed to ignore unknown
	// options, see g_option_context_set_ignore_unknown_options().
	OptionErrorUnknownOption OptionError = 0
	// BadValue: a value couldn't be parsed.
	OptionErrorBadValue OptionError = 1
	// failed: a ArgFunc callback failed.
	OptionErrorFailed OptionError = 2
)

// OptionFlags flags which modify individual options.
type OptionFlags int

const (
	// OptionFlagsNone: no flags. Since: 2.42.
	OptionFlagsNone OptionFlags = 0b0
	// OptionFlagsHidden: the option doesn't appear in `--help` output.
	OptionFlagsHidden OptionFlags = 0b1
	// OptionFlagsInMain: the option appears in the main section of the `--help`
	// output, even if it is defined in a group.
	OptionFlagsInMain OptionFlags = 0b10
	// OptionFlagsReverse: for options of the G_OPTION_ARG_NONE kind, this flag
	// indicates that the sense of the option is reversed.
	OptionFlagsReverse OptionFlags = 0b100
	// OptionFlagsNoArg: for options of the G_OPTION_ARG_CALLBACK kind, this
	// flag indicates that the callback does not take any argument (like a
	// G_OPTION_ARG_NONE option). Since 2.8
	OptionFlagsNoArg OptionFlags = 0b1000
	// OptionFlagsFilename: for options of the G_OPTION_ARG_CALLBACK kind, this
	// flag indicates that the argument should be passed to the callback in the
	// GLib filename encoding rather than UTF-8. Since 2.8
	OptionFlagsFilename OptionFlags = 0b10000
	// OptionFlagsOptionalArg: for options of the G_OPTION_ARG_CALLBACK kind,
	// this flag indicates that the argument supply is optional. If no argument
	// is given then data of GOptionParseFunc will be set to NULL. Since 2.8
	OptionFlagsOptionalArg OptionFlags = 0b100000
	// OptionFlagsNoalias: this flag turns off the automatic conflict resolution
	// which prefixes long option names with `groupname-` if there is a
	// conflict. This option should only be used in situations where aliasing is
	// necessary to model some legacy commandline interface. It is not safe to
	// use this option, unless all option groups are under your direct control.
	// Since 2.8.
	OptionFlagsNoalias OptionFlags = 0b1000000
)

// OptionContext: a `GOptionContext` struct defines which options are accepted
// by the commandline option parser. The struct has only private fields and
// should not be directly accessed.
type OptionContext C.GOptionContext

// WrapOptionContext wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapOptionContext(ptr unsafe.Pointer) *OptionContext {
	return (*OptionContext)(ptr)
}

// Native returns the underlying C source pointer.
func (o *OptionContext) Native() unsafe.Pointer {
	return unsafe.Pointer(o)
}

// AddGroup: a convenience function to use gettext() for translating
// user-visible strings.
func (c *OptionContext) AddGroup(group *OptionGroup) {
	var _arg0 *C.GOptionContext // out
	var _arg1 *C.GOptionGroup   // out

	_arg0 = (*C.GOptionContext)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.GOptionGroup)(unsafe.Pointer(group.Native()))

	C.g_option_context_add_group(_arg0, _arg1)
}

// AddMainEntries: a convenience function to use gettext() for translating
// user-visible strings.
func (c *OptionContext) AddMainEntries(entries []OptionEntry, translationDomain string) {
	var _arg0 *C.GOptionContext // out
	var _arg1 *C.GOptionEntry
	var _arg2 *C.gchar // out

	_arg0 = (*C.GOptionContext)(unsafe.Pointer(c.Native()))
	{
		var zero OptionEntry
		entries = append(entries, zero)
	}
	_arg1 = (*C.GOptionEntry)(unsafe.Pointer(&entries[0]))
	_arg2 = (*C.gchar)(C.CString(translationDomain))
	defer C.free(unsafe.Pointer(_arg2))

	C.g_option_context_add_main_entries(_arg0, _arg1, _arg2)
}

// Free: a convenience function to use gettext() for translating user-visible
// strings.
func (c *OptionContext) Free() {
	var _arg0 *C.GOptionContext // out

	_arg0 = (*C.GOptionContext)(unsafe.Pointer(c.Native()))

	C.g_option_context_free(_arg0)
}

// Description: a convenience function to use gettext() for translating
// user-visible strings.
func (c *OptionContext) Description() string {
	var _arg0 *C.GOptionContext // out
	var _cret *C.gchar          // in

	_arg0 = (*C.GOptionContext)(unsafe.Pointer(c.Native()))

	_cret = C.g_option_context_get_description(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

// Help: a convenience function to use gettext() for translating user-visible
// strings.
func (c *OptionContext) Help(mainHelp bool, group *OptionGroup) string {
	var _arg0 *C.GOptionContext // out
	var _arg1 C.gboolean        // out
	var _arg2 *C.GOptionGroup   // out
	var _cret *C.gchar          // in

	_arg0 = (*C.GOptionContext)(unsafe.Pointer(c.Native()))
	if mainHelp {
		_arg1 = C.TRUE
	}
	_arg2 = (*C.GOptionGroup)(unsafe.Pointer(group.Native()))

	_cret = C.g_option_context_get_help(_arg0, _arg1, _arg2)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// HelpEnabled: a convenience function to use gettext() for translating
// user-visible strings.
func (c *OptionContext) HelpEnabled() bool {
	var _arg0 *C.GOptionContext // out
	var _cret C.gboolean        // in

	_arg0 = (*C.GOptionContext)(unsafe.Pointer(c.Native()))

	_cret = C.g_option_context_get_help_enabled(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// IgnoreUnknownOptions: a convenience function to use gettext() for translating
// user-visible strings.
func (c *OptionContext) IgnoreUnknownOptions() bool {
	var _arg0 *C.GOptionContext // out
	var _cret C.gboolean        // in

	_arg0 = (*C.GOptionContext)(unsafe.Pointer(c.Native()))

	_cret = C.g_option_context_get_ignore_unknown_options(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// MainGroup: a convenience function to use gettext() for translating
// user-visible strings.
func (c *OptionContext) MainGroup() *OptionGroup {
	var _arg0 *C.GOptionContext // out
	var _cret *C.GOptionGroup   // in

	_arg0 = (*C.GOptionContext)(unsafe.Pointer(c.Native()))

	_cret = C.g_option_context_get_main_group(_arg0)

	var _optionGroup *OptionGroup // out

	_optionGroup = (*OptionGroup)(unsafe.Pointer(_cret))

	return _optionGroup
}

// StrictPosix: a convenience function to use gettext() for translating
// user-visible strings.
func (c *OptionContext) StrictPosix() bool {
	var _arg0 *C.GOptionContext // out
	var _cret C.gboolean        // in

	_arg0 = (*C.GOptionContext)(unsafe.Pointer(c.Native()))

	_cret = C.g_option_context_get_strict_posix(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Summary: a convenience function to use gettext() for translating user-visible
// strings.
func (c *OptionContext) Summary() string {
	var _arg0 *C.GOptionContext // out
	var _cret *C.gchar          // in

	_arg0 = (*C.GOptionContext)(unsafe.Pointer(c.Native()))

	_cret = C.g_option_context_get_summary(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

// SetDescription: a convenience function to use gettext() for translating
// user-visible strings.
func (c *OptionContext) SetDescription(description string) {
	var _arg0 *C.GOptionContext // out
	var _arg1 *C.gchar          // out

	_arg0 = (*C.GOptionContext)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.gchar)(C.CString(description))
	defer C.free(unsafe.Pointer(_arg1))

	C.g_option_context_set_description(_arg0, _arg1)
}

// SetHelpEnabled: a convenience function to use gettext() for translating
// user-visible strings.
func (c *OptionContext) SetHelpEnabled(helpEnabled bool) {
	var _arg0 *C.GOptionContext // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.GOptionContext)(unsafe.Pointer(c.Native()))
	if helpEnabled {
		_arg1 = C.TRUE
	}

	C.g_option_context_set_help_enabled(_arg0, _arg1)
}

// SetIgnoreUnknownOptions: a convenience function to use gettext() for
// translating user-visible strings.
func (c *OptionContext) SetIgnoreUnknownOptions(ignoreUnknown bool) {
	var _arg0 *C.GOptionContext // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.GOptionContext)(unsafe.Pointer(c.Native()))
	if ignoreUnknown {
		_arg1 = C.TRUE
	}

	C.g_option_context_set_ignore_unknown_options(_arg0, _arg1)
}

// SetMainGroup: a convenience function to use gettext() for translating
// user-visible strings.
func (c *OptionContext) SetMainGroup(group *OptionGroup) {
	var _arg0 *C.GOptionContext // out
	var _arg1 *C.GOptionGroup   // out

	_arg0 = (*C.GOptionContext)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.GOptionGroup)(unsafe.Pointer(group.Native()))

	C.g_option_context_set_main_group(_arg0, _arg1)
}

// SetStrictPosix: a convenience function to use gettext() for translating
// user-visible strings.
func (c *OptionContext) SetStrictPosix(strictPosix bool) {
	var _arg0 *C.GOptionContext // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.GOptionContext)(unsafe.Pointer(c.Native()))
	if strictPosix {
		_arg1 = C.TRUE
	}

	C.g_option_context_set_strict_posix(_arg0, _arg1)
}

// SetSummary: a convenience function to use gettext() for translating
// user-visible strings.
func (c *OptionContext) SetSummary(summary string) {
	var _arg0 *C.GOptionContext // out
	var _arg1 *C.gchar          // out

	_arg0 = (*C.GOptionContext)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.gchar)(C.CString(summary))
	defer C.free(unsafe.Pointer(_arg1))

	C.g_option_context_set_summary(_arg0, _arg1)
}

// SetTranslationDomain: a convenience function to use gettext() for translating
// user-visible strings.
func (c *OptionContext) SetTranslationDomain(domain string) {
	var _arg0 *C.GOptionContext // out
	var _arg1 *C.gchar          // out

	_arg0 = (*C.GOptionContext)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.gchar)(C.CString(domain))
	defer C.free(unsafe.Pointer(_arg1))

	C.g_option_context_set_translation_domain(_arg0, _arg1)
}

// OptionEntry: a GOptionEntry struct defines a single option. To have an
// effect, they must be added to a Group with
// g_option_context_add_main_entries() or g_option_group_add_entries().
type OptionEntry C.GOptionEntry

// WrapOptionEntry wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapOptionEntry(ptr unsafe.Pointer) *OptionEntry {
	return (*OptionEntry)(ptr)
}

// Native returns the underlying C source pointer.
func (o *OptionEntry) Native() unsafe.Pointer {
	return unsafe.Pointer(o)
}

// OptionGroup: a `GOptionGroup` struct defines the options in a single group.
// The struct has only private fields and should not be directly accessed.
//
// All options in a group share the same translation function. Libraries which
// need to parse commandline options are expected to provide a function for
// getting a `GOptionGroup` holding their options, which the application can
// then add to its Context.
type OptionGroup C.GOptionGroup

// WrapOptionGroup wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapOptionGroup(ptr unsafe.Pointer) *OptionGroup {
	return (*OptionGroup)(ptr)
}

func marshalOptionGroup(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return (*OptionGroup)(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (o *OptionGroup) Native() unsafe.Pointer {
	return unsafe.Pointer(o)
}

// AddEntries decrements the reference count of @group by one. If the reference
// count drops to 0, the @group will be freed. and all memory allocated by the
// @group is released.
func (g *OptionGroup) AddEntries(entries []OptionEntry) {
	var _arg0 *C.GOptionGroup // out
	var _arg1 *C.GOptionEntry

	_arg0 = (*C.GOptionGroup)(unsafe.Pointer(g.Native()))
	{
		var zero OptionEntry
		entries = append(entries, zero)
	}
	_arg1 = (*C.GOptionEntry)(unsafe.Pointer(&entries[0]))

	C.g_option_group_add_entries(_arg0, _arg1)
}

// Free decrements the reference count of @group by one. If the reference count
// drops to 0, the @group will be freed. and all memory allocated by the @group
// is released.
func (g *OptionGroup) Free() {
	var _arg0 *C.GOptionGroup // out

	_arg0 = (*C.GOptionGroup)(unsafe.Pointer(g.Native()))

	C.g_option_group_free(_arg0)
}

// Ref decrements the reference count of @group by one. If the reference count
// drops to 0, the @group will be freed. and all memory allocated by the @group
// is released.
func (g *OptionGroup) Ref() *OptionGroup {
	var _arg0 *C.GOptionGroup // out
	var _cret *C.GOptionGroup // in

	_arg0 = (*C.GOptionGroup)(unsafe.Pointer(g.Native()))

	_cret = C.g_option_group_ref(_arg0)

	var _optionGroup *OptionGroup // out

	_optionGroup = (*OptionGroup)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(&_optionGroup, func(v **OptionGroup) {
		C.free(unsafe.Pointer(v))
	})

	return _optionGroup
}

// SetTranslationDomain decrements the reference count of @group by one. If the
// reference count drops to 0, the @group will be freed. and all memory
// allocated by the @group is released.
func (g *OptionGroup) SetTranslationDomain(domain string) {
	var _arg0 *C.GOptionGroup // out
	var _arg1 *C.gchar        // out

	_arg0 = (*C.GOptionGroup)(unsafe.Pointer(g.Native()))
	_arg1 = (*C.gchar)(C.CString(domain))
	defer C.free(unsafe.Pointer(_arg1))

	C.g_option_group_set_translation_domain(_arg0, _arg1)
}

// Unref decrements the reference count of @group by one. If the reference count
// drops to 0, the @group will be freed. and all memory allocated by the @group
// is released.
func (g *OptionGroup) Unref() {
	var _arg0 *C.GOptionGroup // out

	_arg0 = (*C.GOptionGroup)(unsafe.Pointer(g.Native()))

	C.g_option_group_unref(_arg0)
}
