// Code generated by girgen. DO NOT EDIT.

package glib

import (
	"unsafe"
)

// #cgo pkg-config: glib-2.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <stdbool.h>
// #include <glib.h>
import "C"

// GetCharset obtains the character set for the [current locale][setlocale]; you
// might use this character set as an argument to g_convert(), to convert from
// the current locale's encoding to some other encoding. (Frequently
// g_locale_to_utf8() and g_locale_from_utf8() are nice shortcuts, though.)
//
// On Windows the character set returned by this function is the so-called
// system default ANSI code-page. That is the character set used by the "narrow"
// versions of C library and Win32 functions that handle file names. It might be
// different from the character set used by the C library's current locale.
//
// On Linux, the character set is found by consulting nl_langinfo() if
// available. If not, the environment variables `LC_ALL`, `LC_CTYPE`, `LANG` and
// `CHARSET` are queried in order.
//
// The return value is true if the locale's encoding is UTF-8, in that case you
// can perhaps avoid calling g_convert().
//
// The string returned in @charset is not allocated, and should not be freed.
func GetCharset() (charset string, ok bool) {
	var arg1 **C.char // out

	ret := C.g_get_charset(&arg1)

	var ret0 string
	var ret1 bool

	ret0 = C.GoString(arg1)

	ret1 = C.bool(ret) != 0

	return ret0, ret1
}

// GetCodeset gets the character set for the current locale.
func GetCodeset() string {
	ret := C.g_get_codeset()

	var ret0 string

	ret0 = C.GoString(ret)
	C.free(unsafe.Pointer(ret))

	return ret0
}

// GetConsoleCharset obtains the character set used by the console attached to
// the process, which is suitable for printing output to the terminal.
//
// Usually this matches the result returned by g_get_charset(), but in
// environments where the locale's character set does not match the encoding of
// the console this function tries to guess a more suitable value instead.
//
// On Windows the character set returned by this function is the output code
// page used by the console associated with the calling process. If the codepage
// can't be determined (for example because there is no console attached) UTF-8
// is assumed.
//
// The return value is true if the locale's encoding is UTF-8, in that case you
// can perhaps avoid calling g_convert().
//
// The string returned in @charset is not allocated, and should not be freed.
func GetConsoleCharset() (charset string, ok bool) {
	var arg1 **C.char // out

	ret := C.g_get_console_charset(&arg1)

	var ret0 string
	var ret1 bool

	ret0 = C.GoString(arg1)

	ret1 = C.bool(ret) != 0

	return ret0, ret1
}

// GetLanguageNames computes a list of applicable locale names, which can be
// used to e.g. construct locale-dependent filenames or search paths. The
// returned list is sorted from most desirable to least desirable and always
// contains the default locale "C".
//
// For example, if LANGUAGE=de:en_US, then the returned list is "de", "en_US",
// "en", "C".
//
// This function consults the environment variables `LANGUAGE`, `LC_ALL`,
// `LC_MESSAGES` and `LANG` to find the list of locales specified by the user.
func GetLanguageNames() []string {
	ret := C.g_get_language_names()

	var ret0 []string

	{
		var length uint
		for p := unsafe.Pointer(ret); *p != 0; p = unsafe.Pointer(uintptr(p) + 1) {
			length++
		}

		ret0 = make([]string, length)
		for i := 0; i < length; i++ {
			src := (*C.gchar)(unsafe.Pointer(uintptr(unsafe.Pointer(ret)) + i))
			ret0[i] = C.GoString(src)
		}
	}

	return ret0
}

// GetLanguageNamesWithCategory computes a list of applicable locale names with
// a locale category name, which can be used to construct the fallback
// locale-dependent filenames or search paths. The returned list is sorted from
// most desirable to least desirable and always contains the default locale "C".
//
// This function consults the environment variables `LANGUAGE`, `LC_ALL`,
// @category_name, and `LANG` to find the list of locales specified by the user.
//
// g_get_language_names() returns
// g_get_language_names_with_category("LC_MESSAGES").
func GetLanguageNamesWithCategory(categoryName string) []string {
	var arg1 *C.gchar

	arg1 = (*C.gchar)(C.CString(categoryName))
	defer C.free(unsafe.Pointer(arg1))

	ret := C.g_get_language_names_with_category(arg1)

	var ret0 []string

	{
		var length uint
		for p := unsafe.Pointer(ret); *p != 0; p = unsafe.Pointer(uintptr(p) + 1) {
			length++
		}

		ret0 = make([]string, length)
		for i := 0; i < length; i++ {
			src := (*C.gchar)(unsafe.Pointer(uintptr(unsafe.Pointer(ret)) + i))
			ret0[i] = C.GoString(src)
		}
	}

	return ret0
}

// GetLocaleVariants returns a list of derived variants of @locale, which can be
// used to e.g. construct locale-dependent filenames or search paths. The
// returned list is sorted from most desirable to least desirable. This function
// handles territory, charset and extra locale modifiers. See `setlocale(3)`
// (man:setlocale) for information about locales and their format.
//
// @locale itself is guaranteed to be returned in the output.
//
// For example, if @locale is `fr_BE`, then the returned list is `fr_BE`, `fr`.
// If @locale is `en_GB.UTF-8@euro`, then the returned list is
// `en_GB.UTF-8@euro`, `en_GB.UTF-8`, `en_GB@euro`, `en_GB`, `en.UTF-8@euro`,
// `en.UTF-8`, `en@euro`, `en`.
//
// If you need the list of variants for the current locale, use
// g_get_language_names().
func GetLocaleVariants(locale string) []string {
	var arg1 *C.gchar

	arg1 = (*C.gchar)(C.CString(locale))
	defer C.free(unsafe.Pointer(arg1))

	ret := C.g_get_locale_variants(arg1)

	var ret0 []string

	{
		var length uint
		for p := unsafe.Pointer(ret); *p != 0; p = unsafe.Pointer(uintptr(p) + 1) {
			length++
		}

		ret0 = make([]string, length)
		for i := 0; i < length; i++ {
			src := (*C.gchar)(unsafe.Pointer(uintptr(unsafe.Pointer(ret)) + i))
			ret0[i] = C.GoString(src)
			C.free(unsafe.Pointer(src))
		}
	}

	return ret0
}
