// Code generated by girgen. DO NOT EDIT.

package glib

import (
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: glib-2.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <glib.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_io_condition_get_type()), F: marshalIOCondition},
	})
}

// IOCondition: a bitwise combination representing a condition to watch for on
// an event source.
type IOCondition int

const (
	// IOConditionIn: there is data to read.
	IOConditionIn IOCondition = 0b1
	// IOConditionOut: data can be written (without blocking).
	IOConditionOut IOCondition = 0b100
	// IOConditionPri: there is urgent data to read.
	IOConditionPri IOCondition = 0b10
	// IOConditionErr: error condition.
	IOConditionErr IOCondition = 0b1000
	// IOConditionHup: hung up (the connection has been broken, usually for
	// pipes and sockets).
	IOConditionHup IOCondition = 0b10000
	// IOConditionNval: invalid request. The file descriptor is not open.
	IOConditionNval IOCondition = 0b100000
)

func marshalIOCondition(p uintptr) (interface{}, error) {
	return IOCondition(C.g_value_get_bitfield((*C.GValue)(unsafe.Pointer(p)))), nil
}

func BookmarkFileErrorQuark() Quark {
	ret := C.g_bookmark_file_error_quark()

	var ret0 Quark

	{
		var tmp uint32
		tmp = uint32(ret)
		ret0 = Quark(tmp)
	}

	return ret0
}

func ConvertErrorQuark() Quark {
	ret := C.g_convert_error_quark()

	var ret0 Quark

	{
		var tmp uint32
		tmp = uint32(ret)
		ret0 = Quark(tmp)
	}

	return ret0
}

func FileErrorQuark() Quark {
	ret := C.g_file_error_quark()

	var ret0 Quark

	{
		var tmp uint32
		tmp = uint32(ret)
		ret0 = Quark(tmp)
	}

	return ret0
}

func IOChannelErrorQuark() Quark {
	ret := C.g_io_channel_error_quark()

	var ret0 Quark

	{
		var tmp uint32
		tmp = uint32(ret)
		ret0 = Quark(tmp)
	}

	return ret0
}

func KeyFileErrorQuark() Quark {
	ret := C.g_key_file_error_quark()

	var ret0 Quark

	{
		var tmp uint32
		tmp = uint32(ret)
		ret0 = Quark(tmp)
	}

	return ret0
}

func MarkupErrorQuark() Quark {
	ret := C.g_markup_error_quark()

	var ret0 Quark

	{
		var tmp uint32
		tmp = uint32(ret)
		ret0 = Quark(tmp)
	}

	return ret0
}

func NumberParserErrorQuark() Quark {
	ret := C.g_number_parser_error_quark()

	var ret0 Quark

	{
		var tmp uint32
		tmp = uint32(ret)
		ret0 = Quark(tmp)
	}

	return ret0
}

func OptionErrorQuark() Quark {
	ret := C.g_option_error_quark()

	var ret0 Quark

	{
		var tmp uint32
		tmp = uint32(ret)
		ret0 = Quark(tmp)
	}

	return ret0
}

func RegexErrorQuark() Quark {
	ret := C.g_regex_error_quark()

	var ret0 Quark

	{
		var tmp uint32
		tmp = uint32(ret)
		ret0 = Quark(tmp)
	}

	return ret0
}

func ShellErrorQuark() Quark {
	ret := C.g_shell_error_quark()

	var ret0 Quark

	{
		var tmp uint32
		tmp = uint32(ret)
		ret0 = Quark(tmp)
	}

	return ret0
}

func SpawnErrorQuark() Quark {
	ret := C.g_spawn_error_quark()

	var ret0 Quark

	{
		var tmp uint32
		tmp = uint32(ret)
		ret0 = Quark(tmp)
	}

	return ret0
}

func SpawnExitErrorQuark() Quark {
	ret := C.g_spawn_exit_error_quark()

	var ret0 Quark

	{
		var tmp uint32
		tmp = uint32(ret)
		ret0 = Quark(tmp)
	}

	return ret0
}

func ThreadErrorQuark() Quark {
	ret := C.g_thread_error_quark()

	var ret0 Quark

	{
		var tmp uint32
		tmp = uint32(ret)
		ret0 = Quark(tmp)
	}

	return ret0
}

func UnixErrorQuark() Quark {
	ret := C.g_unix_error_quark()

	var ret0 Quark

	{
		var tmp uint32
		tmp = uint32(ret)
		ret0 = Quark(tmp)
	}

	return ret0
}

func URIErrorQuark() Quark {
	ret := C.g_uri_error_quark()

	var ret0 Quark

	{
		var tmp uint32
		tmp = uint32(ret)
		ret0 = Quark(tmp)
	}

	return ret0
}

func VariantParseErrorQuark() Quark {
	ret := C.g_variant_parse_error_quark()

	var ret0 Quark

	{
		var tmp uint32
		tmp = uint32(ret)
		ret0 = Quark(tmp)
	}

	return ret0
}

// VariantParserGetErrorQuark: same as g_variant_error_quark().
func VariantParserGetErrorQuark() Quark {
	ret := C.g_variant_parser_get_error_quark()

	var ret0 Quark

	{
		var tmp uint32
		tmp = uint32(ret)
		ret0 = Quark(tmp)
	}

	return ret0
}
