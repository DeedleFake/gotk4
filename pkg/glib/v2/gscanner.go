// Code generated by girgen. DO NOT EDIT.

package glib

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/box"
)

// #cgo pkg-config: glib-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <glib.h>
import "C"

// ErrorType: the possible errors, used in the @v_error field of Value, when the
// token is a G_TOKEN_ERROR.
type ErrorType int

const (
	// ErrorTypeUnknown: unknown error
	ErrorTypeUnknown ErrorType = 0
	// ErrorTypeUnexpEOF: unexpected end of file
	ErrorTypeUnexpEOF ErrorType = 1
	// ErrorTypeUnexpEOFInString: unterminated string constant
	ErrorTypeUnexpEOFInString ErrorType = 2
	// ErrorTypeUnexpEOFInComment: unterminated comment
	ErrorTypeUnexpEOFInComment ErrorType = 3
	// ErrorTypeNonDigitInConst: non-digit character in a number
	ErrorTypeNonDigitInConst ErrorType = 4
	// ErrorTypeDigitRadix: digit beyond radix in a number
	ErrorTypeDigitRadix ErrorType = 5
	// ErrorTypeFloatRadix: non-decimal floating point number
	ErrorTypeFloatRadix ErrorType = 6
	// ErrorTypeFloatMalformed: malformed floating point number
	ErrorTypeFloatMalformed ErrorType = 7
)

// TokenType: the possible types of token returned from each
// g_scanner_get_next_token() call.
type TokenType int

const (
	// TokenTypeEOF: the end of the file
	TokenTypeEOF TokenType = 0
	// TokenTypeLeftParen: a '(' character
	TokenTypeLeftParen TokenType = 40
	// TokenTypeRightParen: a ')' character
	TokenTypeRightParen TokenType = 41
	// TokenTypeLeftCurly: a '{' character
	TokenTypeLeftCurly TokenType = 123
	// TokenTypeRightCurly: a '}' character
	TokenTypeRightCurly TokenType = 125
	// TokenTypeLeftBrace: a '[' character
	TokenTypeLeftBrace TokenType = 91
	// TokenTypeRightBrace: a ']' character
	TokenTypeRightBrace TokenType = 93
	// TokenTypeEqualSign: a '=' character
	TokenTypeEqualSign TokenType = 61
	// TokenTypeComma: a ',' character
	TokenTypeComma TokenType = 44
	// TokenTypeNone: not a token
	TokenTypeNone TokenType = 256
	// TokenTypeError: an error occurred
	TokenTypeError TokenType = 257
	// TokenTypeChar: a character
	TokenTypeChar TokenType = 258
	// TokenTypeBinary: a binary integer
	TokenTypeBinary TokenType = 259
	// TokenTypeOctal: an octal integer
	TokenTypeOctal TokenType = 260
	// TokenTypeInt: an integer
	TokenTypeInt TokenType = 261
	// TokenTypeHex: a hex integer
	TokenTypeHex TokenType = 262
	// TokenTypeFloat: a floating point number
	TokenTypeFloat TokenType = 263
	// TokenTypeString: a string
	TokenTypeString TokenType = 264
	// TokenTypeSymbol: a symbol
	TokenTypeSymbol TokenType = 265
	// TokenTypeIdentifier: an identifier
	TokenTypeIdentifier TokenType = 266
	// TokenTypeIdentifierNull: a null identifier
	TokenTypeIdentifierNull TokenType = 267
	// TokenTypeCommentSingle: one line comment
	TokenTypeCommentSingle TokenType = 268
	// TokenTypeCommentMulti: multi line comment
	TokenTypeCommentMulti TokenType = 269
)

// Scanner: the data structure representing a lexical scanner.
//
// You should set @input_name after creating the scanner, since it is used by
// the default message handler when displaying warnings and errors. If you are
// scanning a file, the filename would be a good choice.
//
// The @user_data and @max_parse_errors fields are not used. If you need to
// associate extra data with the scanner you can place them here.
//
// If you want to use your own message handler you can set the @msg_handler
// field. The type of the message handler function is declared by MsgFunc.
type Scanner struct {
	native C.GScanner
}

// WrapScanner wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapScanner(ptr unsafe.Pointer) *Scanner {
	if ptr == nil {
		return nil
	}

	return (*Scanner)(ptr)
}

func marshalScanner(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapScanner(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (s *Scanner) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

// UserData gets the field inside the struct.
func (s *Scanner) UserData() interface{} {
	var v interface{}
	v = (interface{})(s.native.user_data)
	return v
}

// MaxParseErrors gets the field inside the struct.
func (s *Scanner) MaxParseErrors() uint {
	var v uint
	v = (uint)(s.native.max_parse_errors)
	return v
}

// ParseErrors gets the field inside the struct.
func (s *Scanner) ParseErrors() uint {
	var v uint
	v = (uint)(s.native.parse_errors)
	return v
}

// InputName gets the field inside the struct.
func (s *Scanner) InputName() string {
	var v string
	v = C.GoString(s.native.input_name)
	return v
}

// Line gets the field inside the struct.
func (s *Scanner) Line() uint {
	var v uint
	v = (uint)(s.native.line)
	return v
}

// Position gets the field inside the struct.
func (s *Scanner) Position() uint {
	var v uint
	v = (uint)(s.native.position)
	return v
}

// NextLine gets the field inside the struct.
func (s *Scanner) NextLine() uint {
	var v uint
	v = (uint)(s.native.next_line)
	return v
}

// NextPosition gets the field inside the struct.
func (s *Scanner) NextPosition() uint {
	var v uint
	v = (uint)(s.native.next_position)
	return v
}

// CurLine returns the current line in the input stream (counting from 1). This
// is the line of the last token parsed via g_scanner_get_next_token().
func (s *Scanner) CurLine() uint {
	var _arg0 *C.GScanner

	_arg0 = (*C.GScanner)(unsafe.Pointer(s.Native()))

	var _cret C.guint

	_cret = C.g_scanner_cur_line(_arg0)

	var _guint uint

	_guint = (uint)(_cret)

	return _guint
}

// CurPosition returns the current position in the current line (counting from
// 0). This is the position of the last token parsed via
// g_scanner_get_next_token().
func (s *Scanner) CurPosition() uint {
	var _arg0 *C.GScanner

	_arg0 = (*C.GScanner)(unsafe.Pointer(s.Native()))

	var _cret C.guint

	_cret = C.g_scanner_cur_position(_arg0)

	var _guint uint

	_guint = (uint)(_cret)

	return _guint
}

// Destroy frees all memory used by the #GScanner.
func (s *Scanner) Destroy() {
	var _arg0 *C.GScanner

	_arg0 = (*C.GScanner)(unsafe.Pointer(s.Native()))

	C.g_scanner_destroy(_arg0)
}

// EOF returns true if the scanner has reached the end of the file or text
// buffer.
func (s *Scanner) EOF() bool {
	var _arg0 *C.GScanner

	_arg0 = (*C.GScanner)(unsafe.Pointer(s.Native()))

	var _cret C.gboolean

	_cret = C.g_scanner_eof(_arg0)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// InputFile prepares to scan a file.
func (s *Scanner) InputFile(inputFd int) {
	var _arg0 *C.GScanner
	var _arg1 C.gint

	_arg0 = (*C.GScanner)(unsafe.Pointer(s.Native()))
	_arg1 = C.gint(inputFd)

	C.g_scanner_input_file(_arg0, _arg1)
}

// InputText prepares to scan a text buffer.
func (s *Scanner) InputText(text string, textLen uint) {
	var _arg0 *C.GScanner
	var _arg1 *C.gchar
	var _arg2 C.guint

	_arg0 = (*C.GScanner)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.gchar)(C.CString(text))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.guint(textLen)

	C.g_scanner_input_text(_arg0, _arg1, _arg2)
}

// LookupSymbol looks up a symbol in the current scope and return its value. If
// the symbol is not bound in the current scope, nil is returned.
func (s *Scanner) LookupSymbol(symbol string) interface{} {
	var _arg0 *C.GScanner
	var _arg1 *C.gchar

	_arg0 = (*C.GScanner)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.gchar)(C.CString(symbol))
	defer C.free(unsafe.Pointer(_arg1))

	var _cret C.gpointer

	_cret = C.g_scanner_lookup_symbol(_arg0, _arg1)

	var _gpointer interface{}

	_gpointer = (interface{})(_cret)

	return _gpointer
}

// ScopeAddSymbol adds a symbol to the given scope.
func (s *Scanner) ScopeAddSymbol(scopeId uint, symbol string, value interface{}) {
	var _arg0 *C.GScanner
	var _arg1 C.guint
	var _arg2 *C.gchar
	var _arg3 C.gpointer

	_arg0 = (*C.GScanner)(unsafe.Pointer(s.Native()))
	_arg1 = C.guint(scopeId)
	_arg2 = (*C.gchar)(C.CString(symbol))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = C.gpointer(value)

	C.g_scanner_scope_add_symbol(_arg0, _arg1, _arg2, _arg3)
}

// ScopeForeachSymbol calls the given function for each of the symbol/value
// pairs in the given scope of the #GScanner. The function is passed the symbol
// and value of each pair, and the given @user_data parameter.
func (s *Scanner) ScopeForeachSymbol(scopeId uint, fn HFunc) {
	var _arg0 *C.GScanner
	var _arg1 C.guint
	var _arg2 C.GHFunc
	var _arg3 C.gpointer

	_arg0 = (*C.GScanner)(unsafe.Pointer(s.Native()))
	_arg1 = C.guint(scopeId)
	_arg2 = (*[0]byte)(C.gotk4_HFunc)
	_arg3 = C.gpointer(box.Assign(fn))

	C.g_scanner_scope_foreach_symbol(_arg0, _arg1, _arg2, _arg3)
}

// ScopeLookupSymbol looks up a symbol in a scope and return its value. If the
// symbol is not bound in the scope, nil is returned.
func (s *Scanner) ScopeLookupSymbol(scopeId uint, symbol string) interface{} {
	var _arg0 *C.GScanner
	var _arg1 C.guint
	var _arg2 *C.gchar

	_arg0 = (*C.GScanner)(unsafe.Pointer(s.Native()))
	_arg1 = C.guint(scopeId)
	_arg2 = (*C.gchar)(C.CString(symbol))
	defer C.free(unsafe.Pointer(_arg2))

	var _cret C.gpointer

	_cret = C.g_scanner_scope_lookup_symbol(_arg0, _arg1, _arg2)

	var _gpointer interface{}

	_gpointer = (interface{})(_cret)

	return _gpointer
}

// ScopeRemoveSymbol removes a symbol from a scope.
func (s *Scanner) ScopeRemoveSymbol(scopeId uint, symbol string) {
	var _arg0 *C.GScanner
	var _arg1 C.guint
	var _arg2 *C.gchar

	_arg0 = (*C.GScanner)(unsafe.Pointer(s.Native()))
	_arg1 = C.guint(scopeId)
	_arg2 = (*C.gchar)(C.CString(symbol))
	defer C.free(unsafe.Pointer(_arg2))

	C.g_scanner_scope_remove_symbol(_arg0, _arg1, _arg2)
}

// SetScope sets the current scope.
func (s *Scanner) SetScope(scopeId uint) uint {
	var _arg0 *C.GScanner
	var _arg1 C.guint

	_arg0 = (*C.GScanner)(unsafe.Pointer(s.Native()))
	_arg1 = C.guint(scopeId)

	var _cret C.guint

	_cret = C.g_scanner_set_scope(_arg0, _arg1)

	var _guint uint

	_guint = (uint)(_cret)

	return _guint
}

// SyncFileOffset rewinds the filedescriptor to the current buffer position and
// blows the file read ahead buffer. This is useful for third party uses of the
// scanners filedescriptor, which hooks onto the current scanning position.
func (s *Scanner) SyncFileOffset() {
	var _arg0 *C.GScanner

	_arg0 = (*C.GScanner)(unsafe.Pointer(s.Native()))

	C.g_scanner_sync_file_offset(_arg0)
}

// UnexpToken outputs a message through the scanner's msg_handler, resulting
// from an unexpected token in the input stream. Note that you should not call
// g_scanner_peek_next_token() followed by g_scanner_unexp_token() without an
// intermediate call to g_scanner_get_next_token(), as g_scanner_unexp_token()
// evaluates the scanner's current token (not the peeked token) to construct
// part of the message.
func (s *Scanner) UnexpToken(expectedToken TokenType, identifierSpec string, symbolSpec string, symbolName string, message string, isError int) {
	var _arg0 *C.GScanner
	var _arg1 C.GTokenType
	var _arg2 *C.gchar
	var _arg3 *C.gchar
	var _arg4 *C.gchar
	var _arg5 *C.gchar
	var _arg6 C.gint

	_arg0 = (*C.GScanner)(unsafe.Pointer(s.Native()))
	_arg1 = (C.GTokenType)(expectedToken)
	_arg2 = (*C.gchar)(C.CString(identifierSpec))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = (*C.gchar)(C.CString(symbolSpec))
	defer C.free(unsafe.Pointer(_arg3))
	_arg4 = (*C.gchar)(C.CString(symbolName))
	defer C.free(unsafe.Pointer(_arg4))
	_arg5 = (*C.gchar)(C.CString(message))
	defer C.free(unsafe.Pointer(_arg5))
	_arg6 = C.gint(isError)

	C.g_scanner_unexp_token(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6)
}

// ScannerConfig specifies the #GScanner parser configuration. Most settings can
// be changed during the parsing phase and will affect the lexical parsing of
// the next unpeeked token.
type ScannerConfig struct {
	native C.GScannerConfig
}

// WrapScannerConfig wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapScannerConfig(ptr unsafe.Pointer) *ScannerConfig {
	if ptr == nil {
		return nil
	}

	return (*ScannerConfig)(ptr)
}

func marshalScannerConfig(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapScannerConfig(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (s *ScannerConfig) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

// CsetSkipCharacters gets the field inside the struct.
func (s *ScannerConfig) CsetSkipCharacters() string {
	var v string
	v = C.GoString(s.native.cset_skip_characters)
	return v
}

// CsetIdentifierFirst gets the field inside the struct.
func (s *ScannerConfig) CsetIdentifierFirst() string {
	var v string
	v = C.GoString(s.native.cset_identifier_first)
	return v
}

// CsetIdentifierNth gets the field inside the struct.
func (s *ScannerConfig) CsetIdentifierNth() string {
	var v string
	v = C.GoString(s.native.cset_identifier_nth)
	return v
}

// CpairCommentSingle gets the field inside the struct.
func (s *ScannerConfig) CpairCommentSingle() string {
	var v string
	v = C.GoString(s.native.cpair_comment_single)
	return v
}
