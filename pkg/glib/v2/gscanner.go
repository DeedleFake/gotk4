// Code generated by girgen. DO NOT EDIT.

package glib

import (
	"unsafe"
)

// #cgo pkg-config: glib-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib.h>
import "C"

// ErrorType: the possible errors, used in the @v_error field of Value, when the
// token is a G_TOKEN_ERROR.
type ErrorType int

const (
	// Unknown error
	ErrUnknown ErrorType = iota
	// UnexpEOF: unexpected end of file
	ErrUnexpEOF
	// UnexpEOFInString: unterminated string constant
	ErrUnexpEOFInString
	// UnexpEOFInComment: unterminated comment
	ErrUnexpEOFInComment
	// NonDigitInConst: non-digit character in a number
	ErrNonDigitInConst
	// DigitRadix: digit beyond radix in a number
	ErrDigitRadix
	// FloatRadix: non-decimal floating point number
	ErrFloatRadix
	// FloatMalformed: malformed floating point number
	ErrFloatMalformed
)

// TokenType: the possible types of token returned from each
// g_scanner_get_next_token() call.
type TokenType int

const (
	// EOF: the end of the file
	TokenEOF TokenType = 0
	// LeftParen: '(' character
	TokenLeftParen TokenType = 40
	// RightParen: ')' character
	TokenRightParen TokenType = 41
	// LeftCurly: '{' character
	TokenLeftCurly TokenType = 123
	// RightCurly: '}' character
	TokenRightCurly TokenType = 125
	// LeftBrace: '[' character
	TokenLeftBrace TokenType = 91
	// RightBrace: ']' character
	TokenRightBrace TokenType = 93
	// EqualSign: '=' character
	TokenEqualSign TokenType = 61
	// Comma: ',' character
	TokenComma TokenType = 44
	// None: not a token
	TokenNone TokenType = 256
	// Error occurred
	TokenError TokenType = 257
	// Char: character
	TokenChar TokenType = 258
	// Binary integer
	TokenBinary TokenType = 259
	// Octal integer
	TokenOctal TokenType = 260
	// Int: integer
	TokenInt TokenType = 261
	// Hex integer
	TokenHex TokenType = 262
	// Float: floating point number
	TokenFloat TokenType = 263
	// String: string
	TokenString TokenType = 264
	// Symbol: symbol
	TokenSymbol TokenType = 265
	// Identifier: identifier
	TokenIdentifier TokenType = 266
	// IdentifierNull: null identifier
	TokenIdentifierNull TokenType = 267
	// CommentSingle: one line comment
	TokenCommentSingle TokenType = 268
	// CommentMulti: multi line comment
	TokenCommentMulti TokenType = 269
)

// ScannerConfig specifies the #GScanner parser configuration. Most settings can
// be changed during the parsing phase and will affect the lexical parsing of
// the next unpeeked token.
type ScannerConfig struct {
	native C.GScannerConfig
}

// WrapScannerConfig wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapScannerConfig(ptr unsafe.Pointer) *ScannerConfig {
	return (*ScannerConfig)(ptr)
}

// Native returns the underlying C source pointer.
func (s *ScannerConfig) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

// CsetSkipCharacters specifies which characters should be skipped by the
// scanner (the default is the whitespace characters: space, tab,
// carriage-return and line-feed).
func (s *ScannerConfig) CsetSkipCharacters() string {
	var v string // out
	v = C.GoString(s.cset_skip_characters)
	return v
}

// CsetIdentifierFirst specifies the characters which can start identifiers (the
// default is CSET_a_2_z, "_", and CSET_A_2_Z).
func (s *ScannerConfig) CsetIdentifierFirst() string {
	var v string // out
	v = C.GoString(s.cset_identifier_first)
	return v
}

// CsetIdentifierNth specifies the characters which can be used in identifiers,
// after the first character (the default is CSET_a_2_z, "_0123456789",
// CSET_A_2_Z, CSET_LATINS, CSET_LATINC).
func (s *ScannerConfig) CsetIdentifierNth() string {
	var v string // out
	v = C.GoString(s.cset_identifier_nth)
	return v
}

// CpairCommentSingle specifies the characters at the start and end of
// single-line comments. The default is "#\n" which means that single-line
// comments start with a '#' and continue until a '\n' (end of line).
func (s *ScannerConfig) CpairCommentSingle() string {
	var v string // out
	v = C.GoString(s.cpair_comment_single)
	return v
}
