// Code generated by girgen. DO NOT EDIT.

package glib

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/box"
)

// #cgo pkg-config: glib-2.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <glib.h>
import "C"

// ClearSlist clears a pointer to a List, freeing it and, optionally, freeing
// its elements using @destroy.
//
// @slist_ptr must be a valid pointer. If @slist_ptr points to a null List, this
// does nothing.
func ClearSlist(slistPtr **SList) {
	var arg1 **C.GSList
	var arg2 C.GDestroyNotify

	arg1 = (**C.GSList)(slistPtr.Native())

	C.g_clear_slist(arg1, arg2)
}

// SList: the List struct is used for each element in the singly-linked list.
type SList struct {
	native C.GSList
}

// WrapSList wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSList(ptr unsafe.Pointer) *SList {
	if ptr == nil {
		return nil
	}

	return (*SList)(ptr)
}

func marshalSList(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSList(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (s *SList) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

// Data gets the field inside the struct.
func (s *SList) Data() interface{} {
	var ret interface{}
	ret = box.Get(uintptr(s.native.data))
	return ret
}

// Next gets the field inside the struct.
func (s *SList) Next() *SList {
	var ret *SList
	{
		ret = WrapSList(unsafe.Pointer(s.native.next))
	}
	return ret
}
