// Code generated by girgen. DO NOT EDIT.

package glib

import (
	"runtime"
	"unsafe"

	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: glib-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <glib.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_gstring_get_type()), F: marshalString},
	})
}

// NewString creates a new #GString, initialized with the given string.
func NewString(init string) *String {
	var arg1 *C.gchar

	arg1 = (*C.gchar)(C.CString(init))
	defer C.free(unsafe.Pointer(arg1))

	var cret *C.GString

	cret = C.g_string_new(arg1)

	var string *String

	string = WrapString(unsafe.Pointer(cret))
	runtime.SetFinalizer(string, func(v *String) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return string
}

// StringNewLen creates a new #GString with @len bytes of the @init buffer.
// Because a length is provided, @init need not be nul-terminated, and can
// contain embedded nul bytes.
//
// Since this function does not stop at nul bytes, it is the caller's
// responsibility to ensure that @init has at least @len addressable bytes.
func StringNewLen(init string, len int) *String {
	var arg1 *C.gchar
	var arg2 C.gssize

	arg1 = (*C.gchar)(C.CString(init))
	defer C.free(unsafe.Pointer(arg1))
	arg2 = C.gssize(len)

	var cret *C.GString

	cret = C.g_string_new_len(arg1, arg2)

	var string *String

	string = WrapString(unsafe.Pointer(cret))
	runtime.SetFinalizer(string, func(v *String) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return string
}

// NewStringSized creates a new #GString, with enough space for @dfl_size bytes.
// This is useful if you are going to add a lot of text to the string and don't
// want it to be reallocated too often.
func NewStringSized(dflSize uint) *String {
	var arg1 C.gsize

	arg1 = C.gsize(dflSize)

	var cret *C.GString

	cret = C.g_string_sized_new(arg1)

	var string *String

	string = WrapString(unsafe.Pointer(cret))
	runtime.SetFinalizer(string, func(v *String) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return string
}

// String: the GString struct contains the public fields of a GString.
type String struct {
	native C.GString
}

// WrapString wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapString(ptr unsafe.Pointer) *String {
	if ptr == nil {
		return nil
	}

	return (*String)(ptr)
}

func marshalString(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapString(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (s *String) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

// Str gets the field inside the struct.
func (s *String) Str() string {
	var v string
	v = C.GoString(s.native.str)
	return v
}

// Len gets the field inside the struct.
func (s *String) Len() uint {
	var v uint
	v = (uint)(s.native.len)
	return v
}

// AllocatedLen gets the field inside the struct.
func (s *String) AllocatedLen() uint {
	var v uint
	v = (uint)(s.native.allocated_len)
	return v
}

// Append adds a string onto the end of a #GString, expanding it if necessary.
func (s *String) Append(val string) *String {
	var arg0 *C.GString
	var arg1 *C.gchar

	arg0 = (*C.GString)(unsafe.Pointer(s.Native()))
	arg1 = (*C.gchar)(C.CString(val))
	defer C.free(unsafe.Pointer(arg1))

	var cret *C.GString

	cret = C.g_string_append(arg0, arg1)

	var ret *String

	ret = WrapString(unsafe.Pointer(cret))

	return ret
}

// AppendC adds a byte onto the end of a #GString, expanding it if necessary.
func (s *String) AppendC(c byte) *String {
	var arg0 *C.GString
	var arg1 C.gchar

	arg0 = (*C.GString)(unsafe.Pointer(s.Native()))
	arg1 = C.gchar(c)

	var cret *C.GString

	cret = C.g_string_append_c(arg0, arg1)

	var ret *String

	ret = WrapString(unsafe.Pointer(cret))

	return ret
}

// AppendLen appends @len bytes of @val to @string.
//
// If @len is positive, @val may contain embedded nuls and need not be
// nul-terminated. It is the caller's responsibility to ensure that @val has at
// least @len addressable bytes.
//
// If @len is negative, @val must be nul-terminated and @len is considered to
// request the entire string length. This makes g_string_append_len() equivalent
// to g_string_append().
func (s *String) AppendLen(val string, len int) *String {
	var arg0 *C.GString
	var arg1 *C.gchar
	var arg2 C.gssize

	arg0 = (*C.GString)(unsafe.Pointer(s.Native()))
	arg1 = (*C.gchar)(C.CString(val))
	defer C.free(unsafe.Pointer(arg1))
	arg2 = C.gssize(len)

	var cret *C.GString

	cret = C.g_string_append_len(arg0, arg1, arg2)

	var ret *String

	ret = WrapString(unsafe.Pointer(cret))

	return ret
}

// AppendUnichar converts a Unicode character into UTF-8, and appends it to the
// string.
func (s *String) AppendUnichar(wc uint32) *String {
	var arg0 *C.GString
	var arg1 C.gunichar

	arg0 = (*C.GString)(unsafe.Pointer(s.Native()))
	arg1 = C.gunichar(wc)

	var cret *C.GString

	cret = C.g_string_append_unichar(arg0, arg1)

	var ret *String

	ret = WrapString(unsafe.Pointer(cret))

	return ret
}

// AppendURIEscaped appends @unescaped to @string, escaping any characters that
// are reserved in URIs using URI-style escape sequences.
func (s *String) AppendURIEscaped(unescaped string, reservedCharsAllowed string, allowUtf8 bool) *String {
	var arg0 *C.GString
	var arg1 *C.gchar
	var arg2 *C.gchar
	var arg3 C.gboolean

	arg0 = (*C.GString)(unsafe.Pointer(s.Native()))
	arg1 = (*C.gchar)(C.CString(unescaped))
	defer C.free(unsafe.Pointer(arg1))
	arg2 = (*C.gchar)(C.CString(reservedCharsAllowed))
	defer C.free(unsafe.Pointer(arg2))
	if allowUtf8 {
		arg3 = C.gboolean(1)
	}

	var cret *C.GString

	cret = C.g_string_append_uri_escaped(arg0, arg1, arg2, arg3)

	var ret *String

	ret = WrapString(unsafe.Pointer(cret))

	return ret
}

// ASCIIDown converts all uppercase ASCII letters to lowercase ASCII letters.
func (s *String) ASCIIDown() *String {
	var arg0 *C.GString

	arg0 = (*C.GString)(unsafe.Pointer(s.Native()))

	var cret *C.GString

	cret = C.g_string_ascii_down(arg0)

	var ret *String

	ret = WrapString(unsafe.Pointer(cret))

	return ret
}

// ASCIIUp converts all lowercase ASCII letters to uppercase ASCII letters.
func (s *String) ASCIIUp() *String {
	var arg0 *C.GString

	arg0 = (*C.GString)(unsafe.Pointer(s.Native()))

	var cret *C.GString

	cret = C.g_string_ascii_up(arg0)

	var ret *String

	ret = WrapString(unsafe.Pointer(cret))

	return ret
}

// Assign copies the bytes from a string into a #GString, destroying any
// previous contents. It is rather like the standard strcpy() function, except
// that you do not have to worry about having enough space to copy the string.
func (s *String) Assign(rval string) *String {
	var arg0 *C.GString
	var arg1 *C.gchar

	arg0 = (*C.GString)(unsafe.Pointer(s.Native()))
	arg1 = (*C.gchar)(C.CString(rval))
	defer C.free(unsafe.Pointer(arg1))

	var cret *C.GString

	cret = C.g_string_assign(arg0, arg1)

	var ret *String

	ret = WrapString(unsafe.Pointer(cret))

	return ret
}

// Down converts a #GString to lowercase.
func (s *String) Down() *String {
	var arg0 *C.GString

	arg0 = (*C.GString)(unsafe.Pointer(s.Native()))

	var cret *C.GString

	cret = C.g_string_down(arg0)

	var ret *String

	ret = WrapString(unsafe.Pointer(cret))

	return ret
}

// Equal compares two strings for equality, returning true if they are equal.
// For use with Table.
func (v *String) Equal(v2 *String) bool {
	var arg0 *C.GString
	var arg1 *C.GString

	arg0 = (*C.GString)(unsafe.Pointer(v.Native()))
	arg1 = (*C.GString)(unsafe.Pointer(v2.Native()))

	var cret C.gboolean

	cret = C.g_string_equal(arg0, arg1)

	var ok bool

	if cret {
		ok = true
	}

	return ok
}

// Erase removes @len bytes from a #GString, starting at position @pos. The rest
// of the #GString is shifted down to fill the gap.
func (s *String) Erase(pos int, len int) *String {
	var arg0 *C.GString
	var arg1 C.gssize
	var arg2 C.gssize

	arg0 = (*C.GString)(unsafe.Pointer(s.Native()))
	arg1 = C.gssize(pos)
	arg2 = C.gssize(len)

	var cret *C.GString

	cret = C.g_string_erase(arg0, arg1, arg2)

	var ret *String

	ret = WrapString(unsafe.Pointer(cret))

	return ret
}

// Free frees the memory allocated for the #GString. If @free_segment is true it
// also frees the character data. If it's false, the caller gains ownership of
// the buffer and must free it after use with g_free().
func (s *String) Free(freeSegment bool) string {
	var arg0 *C.GString
	var arg1 C.gboolean

	arg0 = (*C.GString)(unsafe.Pointer(s.Native()))
	if freeSegment {
		arg1 = C.gboolean(1)
	}

	var cret *C.gchar

	cret = C.g_string_free(arg0, arg1)

	var utf8 string

	utf8 = C.GoString(cret)
	defer C.free(unsafe.Pointer(cret))

	return utf8
}

// Hash creates a hash code for @str; for use with Table.
func (s *String) Hash() uint {
	var arg0 *C.GString

	arg0 = (*C.GString)(unsafe.Pointer(s.Native()))

	var cret C.guint

	cret = C.g_string_hash(arg0)

	var guint uint

	guint = (uint)(cret)

	return guint
}

// Insert inserts a copy of a string into a #GString, expanding it if necessary.
func (s *String) Insert(pos int, val string) *String {
	var arg0 *C.GString
	var arg1 C.gssize
	var arg2 *C.gchar

	arg0 = (*C.GString)(unsafe.Pointer(s.Native()))
	arg1 = C.gssize(pos)
	arg2 = (*C.gchar)(C.CString(val))
	defer C.free(unsafe.Pointer(arg2))

	var cret *C.GString

	cret = C.g_string_insert(arg0, arg1, arg2)

	var ret *String

	ret = WrapString(unsafe.Pointer(cret))

	return ret
}

// InsertC inserts a byte into a #GString, expanding it if necessary.
func (s *String) InsertC(pos int, c byte) *String {
	var arg0 *C.GString
	var arg1 C.gssize
	var arg2 C.gchar

	arg0 = (*C.GString)(unsafe.Pointer(s.Native()))
	arg1 = C.gssize(pos)
	arg2 = C.gchar(c)

	var cret *C.GString

	cret = C.g_string_insert_c(arg0, arg1, arg2)

	var ret *String

	ret = WrapString(unsafe.Pointer(cret))

	return ret
}

// InsertLen inserts @len bytes of @val into @string at @pos.
//
// If @len is positive, @val may contain embedded nuls and need not be
// nul-terminated. It is the caller's responsibility to ensure that @val has at
// least @len addressable bytes.
//
// If @len is negative, @val must be nul-terminated and @len is considered to
// request the entire string length.
//
// If @pos is -1, bytes are inserted at the end of the string.
func (s *String) InsertLen(pos int, val string, len int) *String {
	var arg0 *C.GString
	var arg1 C.gssize
	var arg2 *C.gchar
	var arg3 C.gssize

	arg0 = (*C.GString)(unsafe.Pointer(s.Native()))
	arg1 = C.gssize(pos)
	arg2 = (*C.gchar)(C.CString(val))
	defer C.free(unsafe.Pointer(arg2))
	arg3 = C.gssize(len)

	var cret *C.GString

	cret = C.g_string_insert_len(arg0, arg1, arg2, arg3)

	var ret *String

	ret = WrapString(unsafe.Pointer(cret))

	return ret
}

// InsertUnichar converts a Unicode character into UTF-8, and insert it into the
// string at the given position.
func (s *String) InsertUnichar(pos int, wc uint32) *String {
	var arg0 *C.GString
	var arg1 C.gssize
	var arg2 C.gunichar

	arg0 = (*C.GString)(unsafe.Pointer(s.Native()))
	arg1 = C.gssize(pos)
	arg2 = C.gunichar(wc)

	var cret *C.GString

	cret = C.g_string_insert_unichar(arg0, arg1, arg2)

	var ret *String

	ret = WrapString(unsafe.Pointer(cret))

	return ret
}

// Overwrite overwrites part of a string, lengthening it if necessary.
func (s *String) Overwrite(pos uint, val string) *String {
	var arg0 *C.GString
	var arg1 C.gsize
	var arg2 *C.gchar

	arg0 = (*C.GString)(unsafe.Pointer(s.Native()))
	arg1 = C.gsize(pos)
	arg2 = (*C.gchar)(C.CString(val))
	defer C.free(unsafe.Pointer(arg2))

	var cret *C.GString

	cret = C.g_string_overwrite(arg0, arg1, arg2)

	var ret *String

	ret = WrapString(unsafe.Pointer(cret))

	return ret
}

// OverwriteLen overwrites part of a string, lengthening it if necessary. This
// function will work with embedded nuls.
func (s *String) OverwriteLen(pos uint, val string, len int) *String {
	var arg0 *C.GString
	var arg1 C.gsize
	var arg2 *C.gchar
	var arg3 C.gssize

	arg0 = (*C.GString)(unsafe.Pointer(s.Native()))
	arg1 = C.gsize(pos)
	arg2 = (*C.gchar)(C.CString(val))
	defer C.free(unsafe.Pointer(arg2))
	arg3 = C.gssize(len)

	var cret *C.GString

	cret = C.g_string_overwrite_len(arg0, arg1, arg2, arg3)

	var ret *String

	ret = WrapString(unsafe.Pointer(cret))

	return ret
}

// Prepend adds a string on to the start of a #GString, expanding it if
// necessary.
func (s *String) Prepend(val string) *String {
	var arg0 *C.GString
	var arg1 *C.gchar

	arg0 = (*C.GString)(unsafe.Pointer(s.Native()))
	arg1 = (*C.gchar)(C.CString(val))
	defer C.free(unsafe.Pointer(arg1))

	var cret *C.GString

	cret = C.g_string_prepend(arg0, arg1)

	var ret *String

	ret = WrapString(unsafe.Pointer(cret))

	return ret
}

// PrependC adds a byte onto the start of a #GString, expanding it if necessary.
func (s *String) PrependC(c byte) *String {
	var arg0 *C.GString
	var arg1 C.gchar

	arg0 = (*C.GString)(unsafe.Pointer(s.Native()))
	arg1 = C.gchar(c)

	var cret *C.GString

	cret = C.g_string_prepend_c(arg0, arg1)

	var ret *String

	ret = WrapString(unsafe.Pointer(cret))

	return ret
}

// PrependLen prepends @len bytes of @val to @string.
//
// If @len is positive, @val may contain embedded nuls and need not be
// nul-terminated. It is the caller's responsibility to ensure that @val has at
// least @len addressable bytes.
//
// If @len is negative, @val must be nul-terminated and @len is considered to
// request the entire string length. This makes g_string_prepend_len()
// equivalent to g_string_prepend().
func (s *String) PrependLen(val string, len int) *String {
	var arg0 *C.GString
	var arg1 *C.gchar
	var arg2 C.gssize

	arg0 = (*C.GString)(unsafe.Pointer(s.Native()))
	arg1 = (*C.gchar)(C.CString(val))
	defer C.free(unsafe.Pointer(arg1))
	arg2 = C.gssize(len)

	var cret *C.GString

	cret = C.g_string_prepend_len(arg0, arg1, arg2)

	var ret *String

	ret = WrapString(unsafe.Pointer(cret))

	return ret
}

// PrependUnichar converts a Unicode character into UTF-8, and prepends it to
// the string.
func (s *String) PrependUnichar(wc uint32) *String {
	var arg0 *C.GString
	var arg1 C.gunichar

	arg0 = (*C.GString)(unsafe.Pointer(s.Native()))
	arg1 = C.gunichar(wc)

	var cret *C.GString

	cret = C.g_string_prepend_unichar(arg0, arg1)

	var ret *String

	ret = WrapString(unsafe.Pointer(cret))

	return ret
}

// SetSize sets the length of a #GString. If the length is less than the current
// length, the string will be truncated. If the length is greater than the
// current length, the contents of the newly added area are undefined. (However,
// as always, string->str[string->len] will be a nul byte.)
func (s *String) SetSize(len uint) *String {
	var arg0 *C.GString
	var arg1 C.gsize

	arg0 = (*C.GString)(unsafe.Pointer(s.Native()))
	arg1 = C.gsize(len)

	var cret *C.GString

	cret = C.g_string_set_size(arg0, arg1)

	var ret *String

	ret = WrapString(unsafe.Pointer(cret))

	return ret
}

// Truncate cuts off the end of the GString, leaving the first @len bytes.
func (s *String) Truncate(len uint) *String {
	var arg0 *C.GString
	var arg1 C.gsize

	arg0 = (*C.GString)(unsafe.Pointer(s.Native()))
	arg1 = C.gsize(len)

	var cret *C.GString

	cret = C.g_string_truncate(arg0, arg1)

	var ret *String

	ret = WrapString(unsafe.Pointer(cret))

	return ret
}

// Up converts a #GString to uppercase.
func (s *String) Up() *String {
	var arg0 *C.GString

	arg0 = (*C.GString)(unsafe.Pointer(s.Native()))

	var cret *C.GString

	cret = C.g_string_up(arg0)

	var ret *String

	ret = WrapString(unsafe.Pointer(cret))

	return ret
}
