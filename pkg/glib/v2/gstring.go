// Code generated by girgen. DO NOT EDIT.

package glib

import (
	"unsafe"

	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: glib-2.0 gobject-introspection-1.0 glib-2.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <glib.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_gstring_get_type()), F: marshalString},
	})
}

// String: the GString struct contains the public fields of a GString.
type String struct {
	native C.GString
}

// WrapString wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapString(ptr unsafe.Pointer) *String {
	if ptr == nil {
		return nil
	}

	return (*String)(ptr)
}

func marshalString(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapString(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (s *String) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

// Str gets the field inside the struct.
func (s *String) Str() string {
	var v string // out
	v = C.GoString(s.native.str)
	return v
}

// Len gets the field inside the struct.
func (s *String) Len() uint {
	var v uint // out
	v = (uint)(s.native.len)
	return v
}

// AllocatedLen gets the field inside the struct.
func (s *String) AllocatedLen() uint {
	var v uint // out
	v = (uint)(s.native.allocated_len)
	return v
}

// Equal compares two strings for equality, returning true if they are equal.
// For use with Table.
func (v *String) Equal(v2 *String) bool {
	var _arg0 *C.GString // out
	var _arg1 *C.GString // out

	_arg0 = (*C.GString)(unsafe.Pointer(v.Native()))
	_arg1 = (*C.GString)(unsafe.Pointer(v2.Native()))

	var _cret C.gboolean // in

	_cret = C.g_string_equal(_arg0, _arg1)

	var _ok bool // out

	if _cret {
		_ok = true
	}

	return _ok
}

// Free frees the memory allocated for the #GString. If @free_segment is true it
// also frees the character data. If it's false, the caller gains ownership of
// the buffer and must free it after use with g_free().
func (s *String) Free(freeSegment bool) string {
	var _arg0 *C.GString // out
	var _arg1 C.gboolean // out

	_arg0 = (*C.GString)(unsafe.Pointer(s.Native()))
	if freeSegment {
		_arg1 = C.gboolean(1)
	}

	var _cret *C.gchar // in

	_cret = C.g_string_free(_arg0, _arg1)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Hash creates a hash code for @str; for use with Table.
func (s *String) Hash() uint {
	var _arg0 *C.GString // out

	_arg0 = (*C.GString)(unsafe.Pointer(s.Native()))

	var _cret C.guint // in

	_cret = C.g_string_hash(_arg0)

	var _guint uint // out

	_guint = (uint)(_cret)

	return _guint
}

// Replace replaces the string @find with the string @replace in a #GString up
// to @limit times. If the number of instances of @find in the #GString is less
// than @limit, all instances are replaced. If the number of instances is `0`,
// all instances of @find are replaced.
func (s *String) Replace(find string, replace string, limit uint) uint {
	var _arg0 *C.GString // out
	var _arg1 *C.gchar   // out
	var _arg2 *C.gchar   // out
	var _arg3 C.guint    // out

	_arg0 = (*C.GString)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.gchar)(C.CString(find))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(replace))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = C.guint(limit)

	var _cret C.guint // in

	_cret = C.g_string_replace(_arg0, _arg1, _arg2, _arg3)

	var _guint uint // out

	_guint = (uint)(_cret)

	return _guint
}
