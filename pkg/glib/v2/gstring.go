// Code generated by girgen. DO NOT EDIT.

package glib

import (
	"unsafe"

	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: glib-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <glib.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_gstring_get_type()), F: marshalString},
	})
}

// String: the GString struct contains the public fields of a GString.
type String C.GString

// WrapString wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapString(ptr unsafe.Pointer) *String {
	return (*String)(ptr)
}

func marshalString(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return (*String)(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (s *String) Native() unsafe.Pointer {
	return unsafe.Pointer(s)
}
