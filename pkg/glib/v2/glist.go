// Code generated by girgen. DO NOT EDIT.

package glib

import (
	"unsafe"
)

// #cgo pkg-config: glib-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <glib.h>
import "C"

// List: the #GList struct is used for each element in a doubly-linked list.
type List struct {
	native C.GList
}

// WrapList wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapList(ptr unsafe.Pointer) *List {
	if ptr == nil {
		return nil
	}

	return (*List)(ptr)
}

func marshalList(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapList(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (l *List) Native() unsafe.Pointer {
	return unsafe.Pointer(&l.native)
}

// Data gets the field inside the struct.
func (l *List) Data() interface{} {
	var v interface{}
	v = interface{}(l.native.data)
	return v
}

// Next gets the field inside the struct.
func (l *List) Next() *List {
	var v *List
	v = WrapList(unsafe.Pointer(l.native.next))
	return v
}

// Prev gets the field inside the struct.
func (l *List) Prev() *List {
	var v *List
	v = WrapList(unsafe.Pointer(l.native.prev))
	return v
}
