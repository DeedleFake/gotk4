// Code generated by girgen. DO NOT EDIT.

package glib

// #cgo pkg-config: glib-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib.h>
import "C"

// AtomicRefCountCompare: atomically compares the current value of @arc with
// @val.
func AtomicRefCountCompare(arc *int, val int) bool {
	var _arg1 *C.gatomicrefcount
	var _arg2 C.gint

	_arg1 = *C.gatomicrefcount(arc)
	_arg2 = C.gint(val)

	var _cret C.gboolean

	_cret = C.g_atomic_ref_count_compare(_arg1, _arg2)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// AtomicRefCountDec: atomically decreases the reference count.
func AtomicRefCountDec(arc *int) bool {
	var _arg1 *C.gatomicrefcount

	_arg1 = *C.gatomicrefcount(arc)

	var _cret C.gboolean

	_cret = C.g_atomic_ref_count_dec(_arg1)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// AtomicRefCountInc: atomically increases the reference count.
func AtomicRefCountInc(arc *int) {
	var _arg1 *C.gatomicrefcount

	_arg1 = *C.gatomicrefcount(arc)

	C.g_atomic_ref_count_inc(_arg1)
}

// AtomicRefCountInit initializes a reference count variable.
func AtomicRefCountInit(arc *int) {
	var _arg1 *C.gatomicrefcount

	_arg1 = *C.gatomicrefcount(arc)

	C.g_atomic_ref_count_init(_arg1)
}

// RefCountCompare compares the current value of @rc with @val.
func RefCountCompare(rc *int, val int) bool {
	var _arg1 *C.grefcount
	var _arg2 C.gint

	_arg1 = *C.grefcount(rc)
	_arg2 = C.gint(val)

	var _cret C.gboolean

	_cret = C.g_ref_count_compare(_arg1, _arg2)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// RefCountDec decreases the reference count.
func RefCountDec(rc *int) bool {
	var _arg1 *C.grefcount

	_arg1 = *C.grefcount(rc)

	var _cret C.gboolean

	_cret = C.g_ref_count_dec(_arg1)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// RefCountInc increases the reference count.
func RefCountInc(rc *int) {
	var _arg1 *C.grefcount

	_arg1 = *C.grefcount(rc)

	C.g_ref_count_inc(_arg1)
}

// RefCountInit initializes a reference count variable.
func RefCountInit(rc *int) {
	var _arg1 *C.grefcount

	_arg1 = *C.grefcount(rc)

	C.g_ref_count_init(_arg1)
}
