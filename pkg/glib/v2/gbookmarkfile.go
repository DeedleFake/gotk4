// Code generated by girgen. DO NOT EDIT.

package glib

import (
	"unsafe"
)

// #cgo pkg-config: glib-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib.h>
import "C"

// BookmarkFileError: error codes returned by bookmark file parsing.
type BookmarkFileError int

const (
	// InvalidURI: URI was ill-formed
	BookmarkFileErrorInvalidURI BookmarkFileError = 0
	// InvalidValue: a requested field was not found
	BookmarkFileErrorInvalidValue BookmarkFileError = 1
	// AppNotRegistered: a requested application did not register a bookmark
	BookmarkFileErrorAppNotRegistered BookmarkFileError = 2
	// URINotFound: a requested URI was not found
	BookmarkFileErrorURINotFound BookmarkFileError = 3
	// read: document was ill formed
	BookmarkFileErrorRead BookmarkFileError = 4
	// UnknownEncoding: the text being parsed was in an unknown encoding
	BookmarkFileErrorUnknownEncoding BookmarkFileError = 5
	// write: an error occurred while writing
	BookmarkFileErrorWrite BookmarkFileError = 6
	// FileNotFound: requested file was not found
	BookmarkFileErrorFileNotFound BookmarkFileError = 7
)

// BookmarkFile: the `GBookmarkFile` structure contains only private data and
// should not be directly accessed.
type BookmarkFile C.GBookmarkFile

// WrapBookmarkFile wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapBookmarkFile(ptr unsafe.Pointer) *BookmarkFile {
	return (*BookmarkFile)(ptr)
}

// Native returns the underlying C source pointer.
func (b *BookmarkFile) Native() unsafe.Pointer {
	return unsafe.Pointer(b)
}

// AddApplication: this function outputs @bookmark into a file. The write
// process is guaranteed to be atomic by using g_file_set_contents() internally.
func (b *BookmarkFile) AddApplication(uri string, name string, exec string) {
	var _arg0 *C.GBookmarkFile // out
	var _arg1 *C.gchar         // out
	var _arg2 *C.gchar         // out
	var _arg3 *C.gchar         // out

	_arg0 = (*C.GBookmarkFile)(unsafe.Pointer(b.Native()))
	_arg1 = (*C.gchar)(C.CString(uri))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = (*C.gchar)(C.CString(exec))
	defer C.free(unsafe.Pointer(_arg3))

	C.g_bookmark_file_add_application(_arg0, _arg1, _arg2, _arg3)
}

// AddGroup: this function outputs @bookmark into a file. The write process is
// guaranteed to be atomic by using g_file_set_contents() internally.
func (b *BookmarkFile) AddGroup(uri string, group string) {
	var _arg0 *C.GBookmarkFile // out
	var _arg1 *C.gchar         // out
	var _arg2 *C.gchar         // out

	_arg0 = (*C.GBookmarkFile)(unsafe.Pointer(b.Native()))
	_arg1 = (*C.gchar)(C.CString(uri))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(group))
	defer C.free(unsafe.Pointer(_arg2))

	C.g_bookmark_file_add_group(_arg0, _arg1, _arg2)
}

// Free: this function outputs @bookmark into a file. The write process is
// guaranteed to be atomic by using g_file_set_contents() internally.
func (b *BookmarkFile) Free() {
	var _arg0 *C.GBookmarkFile // out

	_arg0 = (*C.GBookmarkFile)(unsafe.Pointer(b.Native()))

	C.g_bookmark_file_free(_arg0)
}

// Added: this function outputs @bookmark into a file. The write process is
// guaranteed to be atomic by using g_file_set_contents() internally.
func (b *BookmarkFile) Added(uri string) (int32, error) {
	var _arg0 *C.GBookmarkFile // out
	var _arg1 *C.gchar         // out
	var _cret C.time_t         // in
	var _cerr *C.GError        // in

	_arg0 = (*C.GBookmarkFile)(unsafe.Pointer(b.Native()))
	_arg1 = (*C.gchar)(C.CString(uri))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.g_bookmark_file_get_added(_arg0, _arg1, &_cerr)

	var _glong int32 // out
	var _goerr error // out

	_glong = int32(_cret)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _glong, _goerr
}

// AppInfo: this function outputs @bookmark into a file. The write process is
// guaranteed to be atomic by using g_file_set_contents() internally.
func (b *BookmarkFile) AppInfo(uri string, name string) (string, uint, int32, error) {
	var _arg0 *C.GBookmarkFile // out
	var _arg1 *C.gchar         // out
	var _arg2 *C.gchar         // out
	var _arg3 *C.gchar         // in
	var _arg4 C.guint          // in
	var _arg5 C.time_t         // in
	var _cerr *C.GError        // in

	_arg0 = (*C.GBookmarkFile)(unsafe.Pointer(b.Native()))
	_arg1 = (*C.gchar)(C.CString(uri))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg2))

	C.g_bookmark_file_get_app_info(_arg0, _arg1, _arg2, &_arg3, &_arg4, &_arg5, &_cerr)

	var _exec string // out
	var _count uint  // out
	var _stamp int32 // out
	var _goerr error // out

	_exec = C.GoString(_arg3)
	defer C.free(unsafe.Pointer(_arg3))
	_count = uint(_arg4)
	_stamp = int32(_arg5)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _exec, _count, _stamp, _goerr
}

// Description: this function outputs @bookmark into a file. The write process
// is guaranteed to be atomic by using g_file_set_contents() internally.
func (b *BookmarkFile) Description(uri string) (string, error) {
	var _arg0 *C.GBookmarkFile // out
	var _arg1 *C.gchar         // out
	var _cret *C.gchar         // in
	var _cerr *C.GError        // in

	_arg0 = (*C.GBookmarkFile)(unsafe.Pointer(b.Native()))
	_arg1 = (*C.gchar)(C.CString(uri))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.g_bookmark_file_get_description(_arg0, _arg1, &_cerr)

	var _utf8 string // out
	var _goerr error // out

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _utf8, _goerr
}

// Icon: this function outputs @bookmark into a file. The write process is
// guaranteed to be atomic by using g_file_set_contents() internally.
func (b *BookmarkFile) Icon(uri string) (href string, mimeType string, goerr error) {
	var _arg0 *C.GBookmarkFile // out
	var _arg1 *C.gchar         // out
	var _arg2 *C.gchar         // in
	var _arg3 *C.gchar         // in
	var _cerr *C.GError        // in

	_arg0 = (*C.GBookmarkFile)(unsafe.Pointer(b.Native()))
	_arg1 = (*C.gchar)(C.CString(uri))
	defer C.free(unsafe.Pointer(_arg1))

	C.g_bookmark_file_get_icon(_arg0, _arg1, &_arg2, &_arg3, &_cerr)

	var _href string     // out
	var _mimeType string // out
	var _goerr error     // out

	_href = C.GoString(_arg2)
	defer C.free(unsafe.Pointer(_arg2))
	_mimeType = C.GoString(_arg3)
	defer C.free(unsafe.Pointer(_arg3))
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _href, _mimeType, _goerr
}

// IsPrivate: this function outputs @bookmark into a file. The write process is
// guaranteed to be atomic by using g_file_set_contents() internally.
func (b *BookmarkFile) IsPrivate(uri string) error {
	var _arg0 *C.GBookmarkFile // out
	var _arg1 *C.gchar         // out
	var _cerr *C.GError        // in

	_arg0 = (*C.GBookmarkFile)(unsafe.Pointer(b.Native()))
	_arg1 = (*C.gchar)(C.CString(uri))
	defer C.free(unsafe.Pointer(_arg1))

	C.g_bookmark_file_get_is_private(_arg0, _arg1, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

// MIMEType: this function outputs @bookmark into a file. The write process is
// guaranteed to be atomic by using g_file_set_contents() internally.
func (b *BookmarkFile) MIMEType(uri string) (string, error) {
	var _arg0 *C.GBookmarkFile // out
	var _arg1 *C.gchar         // out
	var _cret *C.gchar         // in
	var _cerr *C.GError        // in

	_arg0 = (*C.GBookmarkFile)(unsafe.Pointer(b.Native()))
	_arg1 = (*C.gchar)(C.CString(uri))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.g_bookmark_file_get_mime_type(_arg0, _arg1, &_cerr)

	var _utf8 string // out
	var _goerr error // out

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _utf8, _goerr
}

// Modified: this function outputs @bookmark into a file. The write process is
// guaranteed to be atomic by using g_file_set_contents() internally.
func (b *BookmarkFile) Modified(uri string) (int32, error) {
	var _arg0 *C.GBookmarkFile // out
	var _arg1 *C.gchar         // out
	var _cret C.time_t         // in
	var _cerr *C.GError        // in

	_arg0 = (*C.GBookmarkFile)(unsafe.Pointer(b.Native()))
	_arg1 = (*C.gchar)(C.CString(uri))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.g_bookmark_file_get_modified(_arg0, _arg1, &_cerr)

	var _glong int32 // out
	var _goerr error // out

	_glong = int32(_cret)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _glong, _goerr
}

// Size: this function outputs @bookmark into a file. The write process is
// guaranteed to be atomic by using g_file_set_contents() internally.
func (b *BookmarkFile) Size() int {
	var _arg0 *C.GBookmarkFile // out
	var _cret C.gint           // in

	_arg0 = (*C.GBookmarkFile)(unsafe.Pointer(b.Native()))

	_cret = C.g_bookmark_file_get_size(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// Title: this function outputs @bookmark into a file. The write process is
// guaranteed to be atomic by using g_file_set_contents() internally.
func (b *BookmarkFile) Title(uri string) (string, error) {
	var _arg0 *C.GBookmarkFile // out
	var _arg1 *C.gchar         // out
	var _cret *C.gchar         // in
	var _cerr *C.GError        // in

	_arg0 = (*C.GBookmarkFile)(unsafe.Pointer(b.Native()))
	_arg1 = (*C.gchar)(C.CString(uri))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.g_bookmark_file_get_title(_arg0, _arg1, &_cerr)

	var _utf8 string // out
	var _goerr error // out

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _utf8, _goerr
}

// Visited: this function outputs @bookmark into a file. The write process is
// guaranteed to be atomic by using g_file_set_contents() internally.
func (b *BookmarkFile) Visited(uri string) (int32, error) {
	var _arg0 *C.GBookmarkFile // out
	var _arg1 *C.gchar         // out
	var _cret C.time_t         // in
	var _cerr *C.GError        // in

	_arg0 = (*C.GBookmarkFile)(unsafe.Pointer(b.Native()))
	_arg1 = (*C.gchar)(C.CString(uri))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.g_bookmark_file_get_visited(_arg0, _arg1, &_cerr)

	var _glong int32 // out
	var _goerr error // out

	_glong = int32(_cret)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _glong, _goerr
}

// HasApplication: this function outputs @bookmark into a file. The write
// process is guaranteed to be atomic by using g_file_set_contents() internally.
func (b *BookmarkFile) HasApplication(uri string, name string) error {
	var _arg0 *C.GBookmarkFile // out
	var _arg1 *C.gchar         // out
	var _arg2 *C.gchar         // out
	var _cerr *C.GError        // in

	_arg0 = (*C.GBookmarkFile)(unsafe.Pointer(b.Native()))
	_arg1 = (*C.gchar)(C.CString(uri))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg2))

	C.g_bookmark_file_has_application(_arg0, _arg1, _arg2, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

// HasGroup: this function outputs @bookmark into a file. The write process is
// guaranteed to be atomic by using g_file_set_contents() internally.
func (b *BookmarkFile) HasGroup(uri string, group string) error {
	var _arg0 *C.GBookmarkFile // out
	var _arg1 *C.gchar         // out
	var _arg2 *C.gchar         // out
	var _cerr *C.GError        // in

	_arg0 = (*C.GBookmarkFile)(unsafe.Pointer(b.Native()))
	_arg1 = (*C.gchar)(C.CString(uri))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(group))
	defer C.free(unsafe.Pointer(_arg2))

	C.g_bookmark_file_has_group(_arg0, _arg1, _arg2, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

// HasItem: this function outputs @bookmark into a file. The write process is
// guaranteed to be atomic by using g_file_set_contents() internally.
func (b *BookmarkFile) HasItem(uri string) bool {
	var _arg0 *C.GBookmarkFile // out
	var _arg1 *C.gchar         // out
	var _cret C.gboolean       // in

	_arg0 = (*C.GBookmarkFile)(unsafe.Pointer(b.Native()))
	_arg1 = (*C.gchar)(C.CString(uri))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.g_bookmark_file_has_item(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// LoadFromData: this function outputs @bookmark into a file. The write process
// is guaranteed to be atomic by using g_file_set_contents() internally.
func (b *BookmarkFile) LoadFromData(data []byte) error {
	var _arg0 *C.GBookmarkFile // out
	var _arg1 *C.gchar
	var _arg2 C.gsize
	var _cerr *C.GError // in

	_arg0 = (*C.GBookmarkFile)(unsafe.Pointer(b.Native()))
	_arg2 = C.gsize(len(data))
	_arg1 = (*C.gchar)(unsafe.Pointer(&data[0]))

	C.g_bookmark_file_load_from_data(_arg0, _arg1, _arg2, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

// LoadFromDataDirs: this function outputs @bookmark into a file. The write
// process is guaranteed to be atomic by using g_file_set_contents() internally.
func (b *BookmarkFile) LoadFromDataDirs(file string) (string, error) {
	var _arg0 *C.GBookmarkFile // out
	var _arg1 *C.gchar         // out
	var _arg2 *C.gchar         // in
	var _cerr *C.GError        // in

	_arg0 = (*C.GBookmarkFile)(unsafe.Pointer(b.Native()))
	_arg1 = (*C.gchar)(C.CString(file))
	defer C.free(unsafe.Pointer(_arg1))

	C.g_bookmark_file_load_from_data_dirs(_arg0, _arg1, &_arg2, &_cerr)

	var _fullPath string // out
	var _goerr error     // out

	_fullPath = C.GoString(_arg2)
	defer C.free(unsafe.Pointer(_arg2))
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _fullPath, _goerr
}

// LoadFromFile: this function outputs @bookmark into a file. The write process
// is guaranteed to be atomic by using g_file_set_contents() internally.
func (b *BookmarkFile) LoadFromFile(filename string) error {
	var _arg0 *C.GBookmarkFile // out
	var _arg1 *C.gchar         // out
	var _cerr *C.GError        // in

	_arg0 = (*C.GBookmarkFile)(unsafe.Pointer(b.Native()))
	_arg1 = (*C.gchar)(C.CString(filename))
	defer C.free(unsafe.Pointer(_arg1))

	C.g_bookmark_file_load_from_file(_arg0, _arg1, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

// MoveItem: this function outputs @bookmark into a file. The write process is
// guaranteed to be atomic by using g_file_set_contents() internally.
func (b *BookmarkFile) MoveItem(oldUri string, newUri string) error {
	var _arg0 *C.GBookmarkFile // out
	var _arg1 *C.gchar         // out
	var _arg2 *C.gchar         // out
	var _cerr *C.GError        // in

	_arg0 = (*C.GBookmarkFile)(unsafe.Pointer(b.Native()))
	_arg1 = (*C.gchar)(C.CString(oldUri))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(newUri))
	defer C.free(unsafe.Pointer(_arg2))

	C.g_bookmark_file_move_item(_arg0, _arg1, _arg2, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

// RemoveApplication: this function outputs @bookmark into a file. The write
// process is guaranteed to be atomic by using g_file_set_contents() internally.
func (b *BookmarkFile) RemoveApplication(uri string, name string) error {
	var _arg0 *C.GBookmarkFile // out
	var _arg1 *C.gchar         // out
	var _arg2 *C.gchar         // out
	var _cerr *C.GError        // in

	_arg0 = (*C.GBookmarkFile)(unsafe.Pointer(b.Native()))
	_arg1 = (*C.gchar)(C.CString(uri))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg2))

	C.g_bookmark_file_remove_application(_arg0, _arg1, _arg2, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

// RemoveGroup: this function outputs @bookmark into a file. The write process
// is guaranteed to be atomic by using g_file_set_contents() internally.
func (b *BookmarkFile) RemoveGroup(uri string, group string) error {
	var _arg0 *C.GBookmarkFile // out
	var _arg1 *C.gchar         // out
	var _arg2 *C.gchar         // out
	var _cerr *C.GError        // in

	_arg0 = (*C.GBookmarkFile)(unsafe.Pointer(b.Native()))
	_arg1 = (*C.gchar)(C.CString(uri))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(group))
	defer C.free(unsafe.Pointer(_arg2))

	C.g_bookmark_file_remove_group(_arg0, _arg1, _arg2, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

// RemoveItem: this function outputs @bookmark into a file. The write process is
// guaranteed to be atomic by using g_file_set_contents() internally.
func (b *BookmarkFile) RemoveItem(uri string) error {
	var _arg0 *C.GBookmarkFile // out
	var _arg1 *C.gchar         // out
	var _cerr *C.GError        // in

	_arg0 = (*C.GBookmarkFile)(unsafe.Pointer(b.Native()))
	_arg1 = (*C.gchar)(C.CString(uri))
	defer C.free(unsafe.Pointer(_arg1))

	C.g_bookmark_file_remove_item(_arg0, _arg1, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

// SetAdded: this function outputs @bookmark into a file. The write process is
// guaranteed to be atomic by using g_file_set_contents() internally.
func (b *BookmarkFile) SetAdded(uri string, added int32) {
	var _arg0 *C.GBookmarkFile // out
	var _arg1 *C.gchar         // out
	var _arg2 C.time_t         // out

	_arg0 = (*C.GBookmarkFile)(unsafe.Pointer(b.Native()))
	_arg1 = (*C.gchar)(C.CString(uri))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.time_t(added)

	C.g_bookmark_file_set_added(_arg0, _arg1, _arg2)
}

// SetAppInfo: this function outputs @bookmark into a file. The write process is
// guaranteed to be atomic by using g_file_set_contents() internally.
func (b *BookmarkFile) SetAppInfo(uri string, name string, exec string, count int, stamp int32) error {
	var _arg0 *C.GBookmarkFile // out
	var _arg1 *C.gchar         // out
	var _arg2 *C.gchar         // out
	var _arg3 *C.gchar         // out
	var _arg4 C.gint           // out
	var _arg5 C.time_t         // out
	var _cerr *C.GError        // in

	_arg0 = (*C.GBookmarkFile)(unsafe.Pointer(b.Native()))
	_arg1 = (*C.gchar)(C.CString(uri))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = (*C.gchar)(C.CString(exec))
	defer C.free(unsafe.Pointer(_arg3))
	_arg4 = C.gint(count)
	_arg5 = C.time_t(stamp)

	C.g_bookmark_file_set_app_info(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

// SetDescription: this function outputs @bookmark into a file. The write
// process is guaranteed to be atomic by using g_file_set_contents() internally.
func (b *BookmarkFile) SetDescription(uri string, description string) {
	var _arg0 *C.GBookmarkFile // out
	var _arg1 *C.gchar         // out
	var _arg2 *C.gchar         // out

	_arg0 = (*C.GBookmarkFile)(unsafe.Pointer(b.Native()))
	_arg1 = (*C.gchar)(C.CString(uri))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(description))
	defer C.free(unsafe.Pointer(_arg2))

	C.g_bookmark_file_set_description(_arg0, _arg1, _arg2)
}

// SetGroups: this function outputs @bookmark into a file. The write process is
// guaranteed to be atomic by using g_file_set_contents() internally.
func (b *BookmarkFile) SetGroups(uri string, groups []string) {
	var _arg0 *C.GBookmarkFile // out
	var _arg1 *C.gchar         // out
	var _arg2 **C.gchar
	var _arg3 C.gsize

	_arg0 = (*C.GBookmarkFile)(unsafe.Pointer(b.Native()))
	_arg1 = (*C.gchar)(C.CString(uri))
	defer C.free(unsafe.Pointer(_arg1))
	_arg3 = C.gsize(len(groups))
	_arg2 = (**C.gchar)(C.malloc(C.ulong(len(groups)) * C.ulong(unsafe.Sizeof(uint(0)))))
	defer C.free(unsafe.Pointer(_arg2))
	{
		out := unsafe.Slice(_arg2, len(groups))
		for i := range groups {
			out[i] = (*C.gchar)(C.CString(groups[i]))
			defer C.free(unsafe.Pointer(out[i]))
		}
	}

	C.g_bookmark_file_set_groups(_arg0, _arg1, _arg2, _arg3)
}

// SetIcon: this function outputs @bookmark into a file. The write process is
// guaranteed to be atomic by using g_file_set_contents() internally.
func (b *BookmarkFile) SetIcon(uri string, href string, mimeType string) {
	var _arg0 *C.GBookmarkFile // out
	var _arg1 *C.gchar         // out
	var _arg2 *C.gchar         // out
	var _arg3 *C.gchar         // out

	_arg0 = (*C.GBookmarkFile)(unsafe.Pointer(b.Native()))
	_arg1 = (*C.gchar)(C.CString(uri))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(href))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = (*C.gchar)(C.CString(mimeType))
	defer C.free(unsafe.Pointer(_arg3))

	C.g_bookmark_file_set_icon(_arg0, _arg1, _arg2, _arg3)
}

// SetIsPrivate: this function outputs @bookmark into a file. The write process
// is guaranteed to be atomic by using g_file_set_contents() internally.
func (b *BookmarkFile) SetIsPrivate(uri string, isPrivate bool) {
	var _arg0 *C.GBookmarkFile // out
	var _arg1 *C.gchar         // out
	var _arg2 C.gboolean       // out

	_arg0 = (*C.GBookmarkFile)(unsafe.Pointer(b.Native()))
	_arg1 = (*C.gchar)(C.CString(uri))
	defer C.free(unsafe.Pointer(_arg1))
	if isPrivate {
		_arg2 = C.TRUE
	}

	C.g_bookmark_file_set_is_private(_arg0, _arg1, _arg2)
}

// SetMIMEType: this function outputs @bookmark into a file. The write process
// is guaranteed to be atomic by using g_file_set_contents() internally.
func (b *BookmarkFile) SetMIMEType(uri string, mimeType string) {
	var _arg0 *C.GBookmarkFile // out
	var _arg1 *C.gchar         // out
	var _arg2 *C.gchar         // out

	_arg0 = (*C.GBookmarkFile)(unsafe.Pointer(b.Native()))
	_arg1 = (*C.gchar)(C.CString(uri))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(mimeType))
	defer C.free(unsafe.Pointer(_arg2))

	C.g_bookmark_file_set_mime_type(_arg0, _arg1, _arg2)
}

// SetModified: this function outputs @bookmark into a file. The write process
// is guaranteed to be atomic by using g_file_set_contents() internally.
func (b *BookmarkFile) SetModified(uri string, modified int32) {
	var _arg0 *C.GBookmarkFile // out
	var _arg1 *C.gchar         // out
	var _arg2 C.time_t         // out

	_arg0 = (*C.GBookmarkFile)(unsafe.Pointer(b.Native()))
	_arg1 = (*C.gchar)(C.CString(uri))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.time_t(modified)

	C.g_bookmark_file_set_modified(_arg0, _arg1, _arg2)
}

// SetTitle: this function outputs @bookmark into a file. The write process is
// guaranteed to be atomic by using g_file_set_contents() internally.
func (b *BookmarkFile) SetTitle(uri string, title string) {
	var _arg0 *C.GBookmarkFile // out
	var _arg1 *C.gchar         // out
	var _arg2 *C.gchar         // out

	_arg0 = (*C.GBookmarkFile)(unsafe.Pointer(b.Native()))
	_arg1 = (*C.gchar)(C.CString(uri))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(title))
	defer C.free(unsafe.Pointer(_arg2))

	C.g_bookmark_file_set_title(_arg0, _arg1, _arg2)
}

// SetVisited: this function outputs @bookmark into a file. The write process is
// guaranteed to be atomic by using g_file_set_contents() internally.
func (b *BookmarkFile) SetVisited(uri string, visited int32) {
	var _arg0 *C.GBookmarkFile // out
	var _arg1 *C.gchar         // out
	var _arg2 C.time_t         // out

	_arg0 = (*C.GBookmarkFile)(unsafe.Pointer(b.Native()))
	_arg1 = (*C.gchar)(C.CString(uri))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.time_t(visited)

	C.g_bookmark_file_set_visited(_arg0, _arg1, _arg2)
}

// ToFile: this function outputs @bookmark into a file. The write process is
// guaranteed to be atomic by using g_file_set_contents() internally.
func (b *BookmarkFile) ToFile(filename string) error {
	var _arg0 *C.GBookmarkFile // out
	var _arg1 *C.gchar         // out
	var _cerr *C.GError        // in

	_arg0 = (*C.GBookmarkFile)(unsafe.Pointer(b.Native()))
	_arg1 = (*C.gchar)(C.CString(filename))
	defer C.free(unsafe.Pointer(_arg1))

	C.g_bookmark_file_to_file(_arg0, _arg1, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}
