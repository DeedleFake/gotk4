// Code generated by girgen. DO NOT EDIT.

package glib

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/internal/ptr"
)

// #cgo pkg-config: glib-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib.h>
import "C"

// Base64Decode: decode a sequence of Base-64 encoded text into binary data.
// Note that the returned binary data is not necessarily zero-terminated, so it
// should not be used as a character string.
func Base64Decode(text string) []byte {
	var _arg1 *C.gchar

	_arg1 = (*C.gchar)(C.CString(text))
	defer C.free(unsafe.Pointer(_arg1))

	var _cret *C.guchar
	var _arg2 *C.gsize

	cret = C.g_base64_decode(_arg1)

	var _guint8s []byte

	ptr.SetSlice(unsafe.Pointer(&_guint8s), unsafe.Pointer(_cret), int(_arg2))
	runtime.SetFinalizer(&_guint8s, func(v *[]byte) {
		C.free(ptr.Slice(unsafe.Pointer(v)))
	})

	return _guint8s
}

// Base64DecodeInplace: decode a sequence of Base-64 encoded text into binary
// data by overwriting the input data.
func Base64DecodeInplace() *byte {
	var _cret *C.guchar

	cret = C.g_base64_decode_inplace()

	var _guint8 *byte

	_guint8 = (*byte)(_cret)

	return _guint8
}

// Base64Encode: encode a sequence of binary data into its Base-64 stringified
// representation.
func Base64Encode() string {
	var _cret *C.gchar

	cret = C.g_base64_encode()

	var _utf8 string

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}
