// Code generated by girgen. DO NOT EDIT.

package glib

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/internal/ptr"
)

// #cgo pkg-config: glib-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib.h>
import "C"

// Base64Decode: decode a sequence of Base-64 encoded text into binary data.
// Note that the returned binary data is not necessarily zero-terminated, so it
// should not be used as a character string.
func Base64Decode(text string) (outLen uint, guint8s []byte) {
	var arg1 *C.gchar

	arg1 = (*C.gchar)(C.CString(text))
	defer C.free(unsafe.Pointer(arg1))

	var cret *C.guchar
	var arg2 *C.gsize
	var goret2 []byte

	cret = C.g_base64_decode(text, &arg2)

	ptr.SetSlice(unsafe.Pointer(&goret2), unsafe.Pointer(cret), int(arg2))
	runtime.SetFinalizer(&goret2, func(v *[]byte) {
		C.free(ptr.Slice(unsafe.Pointer(v)))
	})

	return ret2, goret2
}

// Base64DecodeInplace: decode a sequence of Base-64 encoded text into binary
// data by overwriting the input data.
func Base64DecodeInplace(text []byte) byte {

	var cret *C.guchar
	var goret1 byte

	cret = C.g_base64_decode_inplace(text, outLen)

	goret1 = *C.guchar(cret)

	return goret1
}

// Base64Encode: encode a sequence of binary data into its Base-64 stringified
// representation.
func Base64Encode(data []byte) string {

	var cret *C.gchar
	var goret1 string

	cret = C.g_base64_encode(data, len)

	goret1 = C.GoString(cret)
	defer C.free(unsafe.Pointer(cret))

	return goret1
}
