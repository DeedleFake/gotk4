// Code generated by girgen. DO NOT EDIT.

package glib

import (
	"reflect"
	"runtime"
	"unsafe"
)

// #cgo pkg-config: glib-2.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib.h>
import "C"

// Base64Decode: decode a sequence of Base-64 encoded text into binary data.
// Note that the returned binary data is not necessarily zero-terminated, so it
// should not be used as a character string.
func Base64Decode(text string) (outLen uint, guint8s []byte) {
	var arg1 *C.gchar
	var arg2 *C.gsize // out

	arg1 = (*C.gchar)(C.CString(text))
	defer C.free(unsafe.Pointer(arg1))

	ret := C.g_base64_decode(arg1, &arg2)

	var ret0 uint
	var ret1 []byte

	ret0 = uint(arg2)

	{
		sliceHeader := (*reflect.SliceHeader)(unsafe.Pointer(&ret1))
		sliceHeader.Data = uintptr(unsafe.Pointer(ret))
		sliceHeader.Len = arg2
		sliceHeader.Cap = arg2
		runtime.SetFinalizer(&ret, func() {
			C.free(unsafe.Pointer(ret))
		})
		defer runtime.KeepAlive(ret)
	}

	return ret0, ret1
}

// Base64DecodeInplace: decode a sequence of Base-64 encoded text into binary
// data by overwriting the input data.
func Base64DecodeInplace(text []byte) byte {
	var arg1 *C.gchar
	var arg2 *C.gsize

	{
		var dst []C.guint8
		ptr := C.malloc(C.sizeof_guint8 * len(text))
		sliceHeader := (*reflect.SliceHeader)(unsafe.Pointer(&dst))
		sliceHeader.Data = uintptr(unsafe.Pointer(ptr))
		sliceHeader.Len = len(text)
		sliceHeader.Cap = len(text)

		for i := 0; i < len(text); i++ {
			src := text[i]
			dst[i] = C.guint8(src)
		}

		arg1 = (*C.gchar)(unsafe.Pointer(ptr))
		arg2 = len(text)
	}

	ret := C.g_base64_decode_inplace(arg1, arg2)

	var ret0 byte

	ret0 = byte(ret)

	return ret0
}

// Base64Encode: encode a sequence of binary data into its Base-64 stringified
// representation.
func Base64Encode(data []byte) string {
	var arg1 *C.guchar
	var arg2 C.gsize

	arg1 = (*C.guchar)(unsafe.Pointer(&data[0]))
	arg2 = len(data)
	defer runtime.KeepAlive(data)

	ret := C.g_base64_encode(arg1, arg2)

	var ret0 string

	ret0 = C.GoString(ret)
	C.free(unsafe.Pointer(ret))

	return ret0
}
