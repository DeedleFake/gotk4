// Code generated by girgen. DO NOT EDIT.

package glib

// #cgo pkg-config: glib-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib.h>
import "C"

// ThreadPoolGetMaxIdleTime: this function will return the maximum @interval
// that a thread will wait in the thread pool for new tasks before being
// stopped.
//
// If this function returns 0, threads waiting in the thread pool for new work
// are not stopped.
func ThreadPoolGetMaxIdleTime() uint {
	var _cret C.guint // in

	_cret = C.g_thread_pool_get_max_idle_time()

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// ThreadPoolGetMaxUnusedThreads returns the maximal allowed number of unused
// threads.
func ThreadPoolGetMaxUnusedThreads() int {
	var _cret C.gint // in

	_cret = C.g_thread_pool_get_max_unused_threads()

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// ThreadPoolGetNumUnusedThreads returns the number of currently unused threads.
func ThreadPoolGetNumUnusedThreads() uint {
	var _cret C.guint // in

	_cret = C.g_thread_pool_get_num_unused_threads()

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// ThreadPoolSetMaxIdleTime: this function will set the maximum @interval that a
// thread waiting in the pool for new tasks can be idle for before being
// stopped. This function is similar to calling
// g_thread_pool_stop_unused_threads() on a regular timeout, except this is done
// on a per thread basis.
//
// By setting @interval to 0, idle threads will not be stopped.
//
// The default value is 15000 (15 seconds).
func ThreadPoolSetMaxIdleTime(interval uint) {
	var _arg1 C.guint // out

	_arg1 = C.guint(interval)

	C.g_thread_pool_set_max_idle_time(_arg1)
}

// ThreadPoolSetMaxUnusedThreads sets the maximal number of unused threads to
// @max_threads. If @max_threads is -1, no limit is imposed on the number of
// unused threads.
//
// The default value is 2.
func ThreadPoolSetMaxUnusedThreads(maxThreads int) {
	var _arg1 C.gint // out

	_arg1 = C.gint(maxThreads)

	C.g_thread_pool_set_max_unused_threads(_arg1)
}

// ThreadPoolStopUnusedThreads stops all currently unused threads. This does not
// change the maximal number of unused threads. This function can be used to
// regularly stop all unused threads e.g. from g_timeout_add().
func ThreadPoolStopUnusedThreads() {
	C.g_thread_pool_stop_unused_threads()
}
