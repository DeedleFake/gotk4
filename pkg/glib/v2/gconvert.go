// Code generated by girgen. DO NOT EDIT.

package glib

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gerror"
	"github.com/diamondburned/gotk4/internal/ptr"
)

// #cgo pkg-config: glib-2.0 gobject-introspection-1.0 glib-2.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <glib.h>
import "C"

// ConvertError: error codes returned by character set conversion routines.
type ConvertError int

const (
	// ConvertErrorNoConversion: conversion between the requested character sets
	// is not supported.
	ConvertErrorNoConversion ConvertError = 0
	// ConvertErrorIllegalSequence: invalid byte sequence in conversion input;
	// or the character sequence could not be represented in the target
	// character set.
	ConvertErrorIllegalSequence ConvertError = 1
	// ConvertErrorFailed: conversion failed for some reason.
	ConvertErrorFailed ConvertError = 2
	// ConvertErrorPartialInput: partial character sequence at end of input.
	ConvertErrorPartialInput ConvertError = 3
	// ConvertErrorBadURI: URI is invalid.
	ConvertErrorBadURI ConvertError = 4
	// ConvertErrorNotAbsolutePath: pathname is not an absolute path.
	ConvertErrorNotAbsolutePath ConvertError = 5
	// ConvertErrorNoMemory: no memory available. Since: 2.40
	ConvertErrorNoMemory ConvertError = 6
	// ConvertErrorEmbeddedNUL: an embedded NUL character is present in
	// conversion output where a NUL-terminated string is expected. Since: 2.56
	ConvertErrorEmbeddedNUL ConvertError = 7
)

// Convert converts a string from one character set to another.
//
// Note that you should use g_iconv() for streaming conversions. Despite the
// fact that @bytes_read can return information about partial characters, the
// g_convert_... functions are not generally suitable for streaming. If the
// underlying converter maintains internal state, then this won't be preserved
// across successive calls to g_convert(), g_convert_with_iconv() or
// g_convert_with_fallback(). (An example of this is the GNU C converter for
// CP1255 which does not emit a base character until it knows that the next
// character is not a mark that could combine with the base character.)
//
// Using extensions such as "//TRANSLIT" may not work (or may not work well) on
// many platforms. Consider using g_str_to_ascii() instead.
func Convert(str []byte, toCodeset string, fromCodeset string) (uint, []byte, error) {
	var _arg1 *C.gchar
	var _arg2 C.gssize
	var _arg3 *C.gchar // out
	var _arg4 *C.gchar // out

	_arg2 = C.gssize(len(str))
	_arg1 = (*C.gchar)(unsafe.Pointer(&str[0]))
	_arg3 = (*C.gchar)(C.CString(toCodeset))
	defer C.free(unsafe.Pointer(_arg3))
	_arg4 = (*C.gchar)(C.CString(fromCodeset))
	defer C.free(unsafe.Pointer(_arg4))

	var _arg5 C.gsize // in
	var _cret *C.gchar
	var _arg6 C.gsize   // in
	var _cerr *C.GError // in

	_cret = C.g_convert(_arg1, _arg2, _arg3, _arg4, &_arg5, &_arg6, &_cerr)

	var _bytesRead uint // out
	var _guint8s []byte
	var _goerr error // out

	_bytesRead = (uint)(_arg5)
	ptr.SetSlice(unsafe.Pointer(&_guint8s), unsafe.Pointer(_cret), int(_arg6))
	runtime.SetFinalizer(&_guint8s, func(v *[]byte) {
		C.free(ptr.Slice(unsafe.Pointer(v)))
	})
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _bytesRead, _guint8s, _goerr
}

// ConvertWithFallback converts a string from one character set to another,
// possibly including fallback sequences for characters not representable in the
// output. Note that it is not guaranteed that the specification for the
// fallback sequences in @fallback will be honored. Some systems may do an
// approximate conversion from @from_codeset to @to_codeset in their iconv()
// functions, in which case GLib will simply return that approximate conversion.
//
// Note that you should use g_iconv() for streaming conversions. Despite the
// fact that @bytes_read can return information about partial characters, the
// g_convert_... functions are not generally suitable for streaming. If the
// underlying converter maintains internal state, then this won't be preserved
// across successive calls to g_convert(), g_convert_with_iconv() or
// g_convert_with_fallback(). (An example of this is the GNU C converter for
// CP1255 which does not emit a base character until it knows that the next
// character is not a mark that could combine with the base character.)
func ConvertWithFallback(str []byte, toCodeset string, fromCodeset string, fallback string) (uint, []byte, error) {
	var _arg1 *C.gchar
	var _arg2 C.gssize
	var _arg3 *C.gchar // out
	var _arg4 *C.gchar // out
	var _arg5 *C.gchar // out

	_arg2 = C.gssize(len(str))
	_arg1 = (*C.gchar)(unsafe.Pointer(&str[0]))
	_arg3 = (*C.gchar)(C.CString(toCodeset))
	defer C.free(unsafe.Pointer(_arg3))
	_arg4 = (*C.gchar)(C.CString(fromCodeset))
	defer C.free(unsafe.Pointer(_arg4))
	_arg5 = (*C.gchar)(C.CString(fallback))
	defer C.free(unsafe.Pointer(_arg5))

	var _arg6 C.gsize // in
	var _cret *C.gchar
	var _arg7 C.gsize   // in
	var _cerr *C.GError // in

	_cret = C.g_convert_with_fallback(_arg1, _arg2, _arg3, _arg4, _arg5, &_arg6, &_arg7, &_cerr)

	var _bytesRead uint // out
	var _guint8s []byte
	var _goerr error // out

	_bytesRead = (uint)(_arg6)
	ptr.SetSlice(unsafe.Pointer(&_guint8s), unsafe.Pointer(_cret), int(_arg7))
	runtime.SetFinalizer(&_guint8s, func(v *[]byte) {
		C.free(ptr.Slice(unsafe.Pointer(v)))
	})
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _bytesRead, _guint8s, _goerr
}

// ConvertWithIconv converts a string from one character set to another.
//
// Note that you should use g_iconv() for streaming conversions. Despite the
// fact that @bytes_read can return information about partial characters, the
// g_convert_... functions are not generally suitable for streaming. If the
// underlying converter maintains internal state, then this won't be preserved
// across successive calls to g_convert(), g_convert_with_iconv() or
// g_convert_with_fallback(). (An example of this is the GNU C converter for
// CP1255 which does not emit a base character until it knows that the next
// character is not a mark that could combine with the base character.)
//
// Characters which are valid in the input character set, but which have no
// representation in the output character set will result in a
// G_CONVERT_ERROR_ILLEGAL_SEQUENCE error. This is in contrast to the iconv()
// specification, which leaves this behaviour implementation defined. Note that
// this is the same error code as is returned for an invalid byte sequence in
// the input character set. To get defined behaviour for conversion of
// unrepresentable characters, use g_convert_with_fallback().
func ConvertWithIconv(str []byte, converter IConv) (uint, []byte, error) {
	var _arg1 *C.gchar
	var _arg2 C.gssize
	var _arg3 C.GIConv // out

	_arg2 = C.gssize(len(str))
	_arg1 = (*C.gchar)(unsafe.Pointer(&str[0]))
	_arg3 = (C.GIConv)(unsafe.Pointer(converter.Native()))

	var _arg4 C.gsize // in
	var _cret *C.gchar
	var _arg5 C.gsize   // in
	var _cerr *C.GError // in

	_cret = C.g_convert_with_iconv(_arg1, _arg2, _arg3, &_arg4, &_arg5, &_cerr)

	var _bytesRead uint // out
	var _guint8s []byte
	var _goerr error // out

	_bytesRead = (uint)(_arg4)
	ptr.SetSlice(unsafe.Pointer(&_guint8s), unsafe.Pointer(_cret), int(_arg5))
	runtime.SetFinalizer(&_guint8s, func(v *[]byte) {
		C.free(ptr.Slice(unsafe.Pointer(v)))
	})
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _bytesRead, _guint8s, _goerr
}

// FilenameDisplayBasename returns the display basename for the particular
// filename, guaranteed to be valid UTF-8. The display name might not be
// identical to the filename, for instance there might be problems converting it
// to UTF-8, and some files can be translated in the display.
//
// If GLib cannot make sense of the encoding of @filename, as a last resort it
// replaces unknown characters with U+FFFD, the Unicode replacement character.
// You can search the result for the UTF-8 encoding of this character (which is
// "\357\277\275" in octal notation) to find out if @filename was in an invalid
// encoding.
//
// You must pass the whole absolute pathname to this functions so that
// translation of well known locations can be done.
//
// This function is preferred over g_filename_display_name() if you know the
// whole path, as it allows translation.
func FilenameDisplayBasename(filename *string) string {
	var _arg1 *C.gchar // out

	_arg1 = (*C.gchar)(C.CString(filename))
	defer C.free(unsafe.Pointer(_arg1))

	var _cret *C.gchar // in

	_cret = C.g_filename_display_basename(_arg1)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// FilenameDisplayName converts a filename into a valid UTF-8 string. The
// conversion is not necessarily reversible, so you should keep the original
// around and use the return value of this function only for display purposes.
// Unlike g_filename_to_utf8(), the result is guaranteed to be non-nil even if
// the filename actually isn't in the GLib file name encoding.
//
// If GLib cannot make sense of the encoding of @filename, as a last resort it
// replaces unknown characters with U+FFFD, the Unicode replacement character.
// You can search the result for the UTF-8 encoding of this character (which is
// "\357\277\275" in octal notation) to find out if @filename was in an invalid
// encoding.
//
// If you know the whole pathname of the file you should use
// g_filename_display_basename(), since that allows location-based translation
// of filenames.
func FilenameDisplayName(filename *string) string {
	var _arg1 *C.gchar // out

	_arg1 = (*C.gchar)(C.CString(filename))
	defer C.free(unsafe.Pointer(_arg1))

	var _cret *C.gchar // in

	_cret = C.g_filename_display_name(_arg1)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// FilenameFromURI converts an escaped ASCII-encoded URI to a local filename in
// the encoding used for filenames.
func FilenameFromURI(uri string) (string, *string, error) {
	var _arg1 *C.gchar // out

	_arg1 = (*C.gchar)(C.CString(uri))
	defer C.free(unsafe.Pointer(_arg1))

	var _arg2 *C.gchar  // in
	var _cret *C.gchar  // in
	var _cerr *C.GError // in

	_cret = C.g_filename_from_uri(_arg1, &_arg2, &_cerr)

	var _hostname string  // out
	var _filename *string // out
	var _goerr error      // out

	_hostname = C.GoString(_arg2)
	defer C.free(unsafe.Pointer(_arg2))
	_filename = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _hostname, _filename, _goerr
}

// FilenameFromUTF8 converts a string from UTF-8 to the encoding GLib uses for
// filenames. Note that on Windows GLib uses UTF-8 for filenames; on other
// platforms, this function indirectly depends on the [current
// locale][setlocale].
//
// The input string shall not contain nul characters even if the @len argument
// is positive. A nul character found inside the string will result in error
// G_CONVERT_ERROR_ILLEGAL_SEQUENCE. If the filename encoding is not UTF-8 and
// the conversion output contains a nul character, the error
// G_CONVERT_ERROR_EMBEDDED_NUL is set and the function returns nil.
func FilenameFromUTF8(utf8String string, len int) (bytesRead uint, bytesWritten uint, filename *string, goerr error) {
	var _arg1 *C.gchar // out
	var _arg2 C.gssize // out

	_arg1 = (*C.gchar)(C.CString(utf8String))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.gssize(len)

	var _arg3 C.gsize   // in
	var _arg4 C.gsize   // in
	var _cret *C.gchar  // in
	var _cerr *C.GError // in

	_cret = C.g_filename_from_utf8(_arg1, _arg2, &_arg3, &_arg4, &_cerr)

	var _bytesRead uint    // out
	var _bytesWritten uint // out
	var _filename *string  // out
	var _goerr error       // out

	_bytesRead = (uint)(_arg3)
	_bytesWritten = (uint)(_arg4)
	_filename = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _bytesRead, _bytesWritten, _filename, _goerr
}

// FilenameToURI converts an absolute filename to an escaped ASCII-encoded URI,
// with the path component following Section 3.3. of RFC 2396.
func FilenameToURI(filename *string, hostname string) (string, error) {
	var _arg1 *C.gchar // out
	var _arg2 *C.gchar // out

	_arg1 = (*C.gchar)(C.CString(filename))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(hostname))
	defer C.free(unsafe.Pointer(_arg2))

	var _cret *C.gchar  // in
	var _cerr *C.GError // in

	_cret = C.g_filename_to_uri(_arg1, _arg2, &_cerr)

	var _utf8 string // out
	var _goerr error // out

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _utf8, _goerr
}

// FilenameToUTF8 converts a string which is in the encoding used by GLib for
// filenames into a UTF-8 string. Note that on Windows GLib uses UTF-8 for
// filenames; on other platforms, this function indirectly depends on the
// [current locale][setlocale].
//
// The input string shall not contain nul characters even if the @len argument
// is positive. A nul character found inside the string will result in error
// G_CONVERT_ERROR_ILLEGAL_SEQUENCE. If the source encoding is not UTF-8 and the
// conversion output contains a nul character, the error
// G_CONVERT_ERROR_EMBEDDED_NUL is set and the function returns nil. Use
// g_convert() to produce output that may contain embedded nul characters.
func FilenameToUTF8(opsysstring *string, len int) (bytesRead uint, bytesWritten uint, utf8 string, goerr error) {
	var _arg1 *C.gchar // out
	var _arg2 C.gssize // out

	_arg1 = (*C.gchar)(C.CString(opsysstring))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.gssize(len)

	var _arg3 C.gsize   // in
	var _arg4 C.gsize   // in
	var _cret *C.gchar  // in
	var _cerr *C.GError // in

	_cret = C.g_filename_to_utf8(_arg1, _arg2, &_arg3, &_arg4, &_cerr)

	var _bytesRead uint    // out
	var _bytesWritten uint // out
	var _utf8 string       // out
	var _goerr error       // out

	_bytesRead = (uint)(_arg3)
	_bytesWritten = (uint)(_arg4)
	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _bytesRead, _bytesWritten, _utf8, _goerr
}

// GetFilenameCharsets determines the preferred character sets used for
// filenames. The first character set from the @charsets is the filename
// encoding, the subsequent character sets are used when trying to generate a
// displayable representation of a filename, see g_filename_display_name().
//
// On Unix, the character sets are determined by consulting the environment
// variables `G_FILENAME_ENCODING` and `G_BROKEN_FILENAMES`. On Windows, the
// character set used in the GLib API is always UTF-8 and said environment
// variables have no effect.
//
// `G_FILENAME_ENCODING` may be set to a comma-separated list of character set
// names. The special token "\@locale" is taken to mean the character set for
// the [current locale][setlocale]. If `G_FILENAME_ENCODING` is not set, but
// `G_BROKEN_FILENAMES` is, the character set of the current locale is taken as
// the filename encoding. If neither environment variable is set, UTF-8 is taken
// as the filename encoding, but the character set of the current locale is also
// put in the list of encodings.
//
// The returned @charsets belong to GLib and must not be freed.
//
// Note that on Unix, regardless of the locale character set or
// `G_FILENAME_ENCODING` value, the actual file names present on a system might
// be in any random encoding or just gibberish.
func GetFilenameCharsets() ([]*string, bool) {
	var _arg1 **C.gchar
	var _cret C.gboolean // in

	_cret = C.g_get_filename_charsets(&_arg1)

	var _filenameCharsets []*string
	var _ok bool // out

	{
		var length int
		for p := _arg1; *p != 0; p = (**C.gchar)(ptr.Add(unsafe.Pointer(p), unsafe.Sizeof(int(0)))) {
			length++
			if length < 0 {
				panic(`length overflow`)
			}
		}

		var src []**C.gchar
		ptr.SetSlice(unsafe.Pointer(&src), unsafe.Pointer(_arg1), int(length))

		_filenameCharsets = make([]*string, length)
		for i := range src {
			_filenameCharsets = C.GoString(_arg1)
		}
	}
	if _cret {
		_ok = true
	}

	return _filenameCharsets, _ok
}

// Iconv: same as the standard UNIX routine iconv(), but may be implemented via
// libiconv on UNIX flavors that lack a native implementation.
//
// GLib provides g_convert() and g_locale_to_utf8() which are likely more
// convenient than the raw iconv wrappers.
//
// Note that the behaviour of iconv() for characters which are valid in the
// input character set, but which have no representation in the output character
// set, is implementation defined. This function may return success (with a
// positive number of non-reversible conversions as replacement characters were
// used), or it may return -1 and set an error such as EILSEQ, in such a
// situation.
func Iconv(converter IConv, inbuf *string, inbytesLeft *uint, outbuf *string, outbytesLeft *uint) uint {
	var _arg1 C.GIConv  // out
	var _arg2 **C.gchar // out
	var _arg3 *C.gsize  // out
	var _arg4 **C.gchar // out
	var _arg5 *C.gsize  // out

	_arg1 = (C.GIConv)(unsafe.Pointer(converter.Native()))
	_arg2 = (**C.gchar)(C.CString(inbuf))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = *C.gsize(inbytesLeft)
	_arg4 = (**C.gchar)(C.CString(outbuf))
	defer C.free(unsafe.Pointer(_arg4))
	_arg5 = *C.gsize(outbytesLeft)

	var _cret C.gsize // in

	_cret = C.g_iconv(_arg1, _arg2, _arg3, _arg4, _arg5)

	var _gsize uint // out

	_gsize = (uint)(_cret)

	return _gsize
}

// LocaleFromUTF8 converts a string from UTF-8 to the encoding used for strings
// by the C runtime (usually the same as that used by the operating system) in
// the [current locale][setlocale]. On Windows this means the system codepage.
//
// The input string shall not contain nul characters even if the @len argument
// is positive. A nul character found inside the string will result in error
// G_CONVERT_ERROR_ILLEGAL_SEQUENCE. Use g_convert() to convert input that may
// contain embedded nul characters.
func LocaleFromUTF8(utf8String string, len int) (uint, []byte, error) {
	var _arg1 *C.gchar // out
	var _arg2 C.gssize // out

	_arg1 = (*C.gchar)(C.CString(utf8String))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.gssize(len)

	var _arg3 C.gsize // in
	var _cret *C.gchar
	var _arg4 C.gsize   // in
	var _cerr *C.GError // in

	_cret = C.g_locale_from_utf8(_arg1, _arg2, &_arg3, &_arg4, &_cerr)

	var _bytesRead uint // out
	var _guint8s []byte
	var _goerr error // out

	_bytesRead = (uint)(_arg3)
	ptr.SetSlice(unsafe.Pointer(&_guint8s), unsafe.Pointer(_cret), int(_arg4))
	runtime.SetFinalizer(&_guint8s, func(v *[]byte) {
		C.free(ptr.Slice(unsafe.Pointer(v)))
	})
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _bytesRead, _guint8s, _goerr
}

// LocaleToUTF8 converts a string which is in the encoding used for strings by
// the C runtime (usually the same as that used by the operating system) in the
// [current locale][setlocale] into a UTF-8 string.
//
// If the source encoding is not UTF-8 and the conversion output contains a nul
// character, the error G_CONVERT_ERROR_EMBEDDED_NUL is set and the function
// returns nil. If the source encoding is UTF-8, an embedded nul character is
// treated with the G_CONVERT_ERROR_ILLEGAL_SEQUENCE error for backward
// compatibility with earlier versions of this library. Use g_convert() to
// produce output that may contain embedded nul characters.
func LocaleToUTF8(opsysstring []byte) (bytesRead uint, bytesWritten uint, utf8 string, goerr error) {
	var _arg1 *C.gchar
	var _arg2 C.gssize

	_arg2 = C.gssize(len(opsysstring))
	_arg1 = (*C.gchar)(unsafe.Pointer(&opsysstring[0]))

	var _arg3 C.gsize   // in
	var _arg4 C.gsize   // in
	var _cret *C.gchar  // in
	var _cerr *C.GError // in

	_cret = C.g_locale_to_utf8(_arg1, _arg2, &_arg3, &_arg4, &_cerr)

	var _bytesRead uint    // out
	var _bytesWritten uint // out
	var _utf8 string       // out
	var _goerr error       // out

	_bytesRead = (uint)(_arg3)
	_bytesWritten = (uint)(_arg4)
	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _bytesRead, _bytesWritten, _utf8, _goerr
}

// IConv: the GIConv struct wraps an iconv() conversion descriptor. It contains
// private data and should only be accessed using the following functions.
type IConv struct {
	native C.GIConv
}

// WrapIConv wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapIConv(ptr unsafe.Pointer) *IConv {
	if ptr == nil {
		return nil
	}

	return (*IConv)(ptr)
}

func marshalIConv(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapIConv(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (i *IConv) Native() unsafe.Pointer {
	return unsafe.Pointer(&i.native)
}

// Close: same as the standard UNIX routine iconv_close(), but may be
// implemented via libiconv on UNIX flavors that lack a native implementation.
// Should be called to clean up the conversion descriptor from g_iconv_open()
// when you are done converting things.
//
// GLib provides g_convert() and g_locale_to_utf8() which are likely more
// convenient than the raw iconv wrappers.
func (c *IConv) Close() int {
	var _arg0 C.GIConv // out

	_arg0 = (C.GIConv)(unsafe.Pointer(c.Native()))

	var _cret C.gint // in

	_cret = C.g_iconv_close(_arg0)

	var _gint int // out

	_gint = (int)(_cret)

	return _gint
}
