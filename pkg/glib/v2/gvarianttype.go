// Code generated by girgen. DO NOT EDIT.

package glib

import (
	"runtime"
	"unsafe"

	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: glib-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <stdbool.h>
// #include <glib-object.h>
// #include <glib.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_variant_type_get_gtype()), F: marshalVariantType},
	})
}

func VariantTypeChecked_(arg0 string) *VariantType {
	var arg1 *C.gchar

	arg1 = (*C.gchar)(C.CString(arg0))
	defer C.free(unsafe.Pointer(arg1))

	var cret *C.GVariantType
	var ret1 *VariantType

	cret = C.g_variant_type_checked_(arg0)

	ret1 = WrapVariantType(unsafe.Pointer(cret))

	return ret1
}

func VariantTypeStringGetDepth_(typeString string) uint {
	var arg1 *C.gchar

	arg1 = (*C.gchar)(C.CString(typeString))
	defer C.free(unsafe.Pointer(arg1))

	var cret C.gsize
	var ret1 uint

	cret = C.g_variant_type_string_get_depth_(typeString)

	ret1 = C.gsize(cret)

	return ret1
}

// VariantTypeStringIsValid checks if @type_string is a valid GVariant type
// string. This call is equivalent to calling g_variant_type_string_scan() and
// confirming that the following character is a nul terminator.
func VariantTypeStringIsValid(typeString string) bool {
	var arg1 *C.gchar

	arg1 = (*C.gchar)(C.CString(typeString))
	defer C.free(unsafe.Pointer(arg1))

	var cret C.gboolean
	var ret1 bool

	cret = C.g_variant_type_string_is_valid(typeString)

	ret1 = C.bool(cret) != C.false

	return ret1
}

// VariantTypeStringScan: scan for a single complete and valid GVariant type
// string in @string. The memory pointed to by @limit (or bytes beyond it) is
// never accessed.
//
// If a valid type string is found, @endptr is updated to point to the first
// character past the end of the string that was found and true is returned.
//
// If there is no valid type string starting at @string, or if the type string
// does not end before @limit then false is returned.
//
// For the simple case of checking if a string is a valid type string, see
// g_variant_type_string_is_valid().
func VariantTypeStringScan(string string, limit string) (endptr string, ok bool) {
	var arg1 *C.gchar
	var arg2 *C.gchar

	arg1 = (*C.gchar)(C.CString(string))
	defer C.free(unsafe.Pointer(arg1))
	arg2 = (*C.gchar)(C.CString(limit))
	defer C.free(unsafe.Pointer(arg2))

	var arg3 *C.gchar
	var ret3 string
	var cret C.gboolean
	var ret2 bool

	cret = C.g_variant_type_string_scan(string, limit, &arg3)

	ret3 = C.GoString(arg3)
	defer C.free(unsafe.Pointer(arg3))
	ret2 = C.bool(cret) != C.false

	return ret3, ret2
}

// VariantType: this section introduces the GVariant type system. It is based,
// in large part, on the D-Bus type system, with two major changes and some
// minor lifting of restrictions. The D-Bus specification
// (http://dbus.freedesktop.org/doc/dbus-specification.html), therefore,
// provides a significant amount of information that is useful when working with
// GVariant.
//
// The first major change with respect to the D-Bus type system is the
// introduction of maybe (or "nullable") types. Any type in GVariant can be
// converted to a maybe type, in which case, "nothing" (or "null") becomes a
// valid value. Maybe types have been added by introducing the character "m" to
// type strings.
//
// The second major change is that the GVariant type system supports the concept
// of "indefinite types" -- types that are less specific than the normal types
// found in D-Bus. For example, it is possible to speak of "an array of any
// type" in GVariant, where the D-Bus type system would require you to speak of
// "an array of integers" or "an array of strings". Indefinite types have been
// added by introducing the characters "*", "?" and "r" to type strings.
//
// Finally, all arbitrary restrictions relating to the complexity of types are
// lifted along with the restriction that dictionary entries may only appear
// nested inside of arrays.
//
// Just as in D-Bus, GVariant types are described with strings ("type strings").
// Subject to the differences mentioned above, these strings are of the same
// form as those found in DBus. Note, however: D-Bus always works in terms of
// messages and therefore individual type strings appear nowhere in its
// interface. Instead, "signatures" are a concatenation of the strings of the
// type of each argument in a message. GVariant deals with single values
// directly so GVariant type strings always describe the type of exactly one
// value. This means that a D-Bus signature string is generally not a valid
// GVariant type string -- except in the case that it is the signature of a
// message containing exactly one argument.
//
// An indefinite type is similar in spirit to what may be called an abstract
// type in other type systems. No value can exist that has an indefinite type as
// its type, but values can exist that have types that are subtypes of
// indefinite types. That is to say, g_variant_get_type() will never return an
// indefinite type, but calling g_variant_is_of_type() with an indefinite type
// may return true. For example, you cannot have a value that represents "an
// array of no particular type", but you can have an "array of integers" which
// certainly matches the type of "an array of no particular type", since "array
// of integers" is a subtype of "array of no particular type".
//
// This is similar to how instances of abstract classes may not directly exist
// in other type systems, but instances of their non-abstract subtypes may. For
// example, in GTK, no object that has the type of Bin can exist (since Bin is
// an abstract class), but a Window can certainly be instantiated, and you would
// say that the Window is a Bin (since Window is a subclass of Bin).
//
//
// GVariant Type Strings
//
// A GVariant type string can be any of the following:
//
// - any basic type string (listed below)
//
// - "v", "r" or "*"
//
// - one of the characters 'a' or 'm', followed by another type string
//
// - the character '(', followed by a concatenation of zero or more other type
// strings, followed by the character ')'
//
// - the character '{', followed by a basic type string (see below), followed by
// another type string, followed by the character '}'
//
// A basic type string describes a basic type (as per g_variant_type_is_basic())
// and is always a single character in length. The valid basic type strings are
// "b", "y", "n", "q", "i", "u", "x", "t", "h", "d", "s", "o", "g" and "?".
//
// The above definition is recursive to arbitrary depth. "aaaaai" and
// "(ui(nq((y)))s)" are both valid type strings, as is "a(aa(ui)(qna{ya(yd)}))".
// In order to not hit memory limits, #GVariant imposes a limit on recursion
// depth of 65 nested containers. This is the limit in the D-Bus specification
// (64) plus one to allow a BusMessage to be nested in a top-level tuple.
//
// The meaning of each of the characters is as follows: - `b`: the type string
// of G_VARIANT_TYPE_BOOLEAN; a boolean value. - `y`: the type string of
// G_VARIANT_TYPE_BYTE; a byte. - `n`: the type string of G_VARIANT_TYPE_INT16;
// a signed 16 bit integer. - `q`: the type string of G_VARIANT_TYPE_UINT16; an
// unsigned 16 bit integer. - `i`: the type string of G_VARIANT_TYPE_INT32; a
// signed 32 bit integer. - `u`: the type string of G_VARIANT_TYPE_UINT32; an
// unsigned 32 bit integer. - `x`: the type string of G_VARIANT_TYPE_INT64; a
// signed 64 bit integer. - `t`: the type string of G_VARIANT_TYPE_UINT64; an
// unsigned 64 bit integer. - `h`: the type string of G_VARIANT_TYPE_HANDLE; a
// signed 32 bit value that, by convention, is used as an index into an array of
// file descriptors that are sent alongside a D-Bus message. - `d`: the type
// string of G_VARIANT_TYPE_DOUBLE; a double precision floating point value. -
// `s`: the type string of G_VARIANT_TYPE_STRING; a string. - `o`: the type
// string of G_VARIANT_TYPE_OBJECT_PATH; a string in the form of a D-Bus object
// path. - `g`: the type string of G_VARIANT_TYPE_SIGNATURE; a string in the
// form of a D-Bus type signature. - `?`: the type string of
// G_VARIANT_TYPE_BASIC; an indefinite type that is a supertype of any of the
// basic types. - `v`: the type string of G_VARIANT_TYPE_VARIANT; a container
// type that contain any other type of value. - `a`: used as a prefix on another
// type string to mean an array of that type; the type string "ai", for example,
// is the type of an array of signed 32-bit integers. - `m`: used as a prefix on
// another type string to mean a "maybe", or "nullable", version of that type;
// the type string "ms", for example, is the type of a value that maybe contains
// a string, or maybe contains nothing. - `()`: used to enclose zero or more
// other concatenated type strings to create a tuple type; the type string
// "(is)", for example, is the type of a pair of an integer and a string. - `r`:
// the type string of G_VARIANT_TYPE_TUPLE; an indefinite type that is a
// supertype of any tuple type, regardless of the number of items. - `{}`: used
// to enclose a basic type string concatenated with another type string to
// create a dictionary entry type, which usually appears inside of an array to
// form a dictionary; the type string "a{sd}", for example, is the type of a
// dictionary that maps strings to double precision floating point values.
//
//    The first type (the basic type) is the key type and the second type is
//    the value type. The reason that the first type is restricted to being a
//    basic type is so that it can easily be hashed.
//
// - `*`: the type string of G_VARIANT_TYPE_ANY; the indefinite type that is
//
//    a supertype of all types.  Note that, as with all type strings, this
//    character represents exactly one type. It cannot be used inside of tuples
//    to mean "any number of items".
//
// Any type string of a container that contains an indefinite type is, itself,
// an indefinite type. For example, the type string "a*" (corresponding to
// G_VARIANT_TYPE_ARRAY) is an indefinite type that is a supertype of every
// array type. "(*s)" is a supertype of all tuples that contain exactly two
// items where the second item is a string.
//
// "a{?*}" is an indefinite type that is a supertype of all arrays containing
// dictionary entries where the key is any basic type and the value is any type
// at all. This is, by definition, a dictionary, so this type string corresponds
// to G_VARIANT_TYPE_DICTIONARY. Note that, due to the restriction that the key
// of a dictionary entry must be a basic type, "{**}" is not a valid type
// string.
type VariantType struct {
	native C.GVariantType
}

// WrapVariantType wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapVariantType(ptr unsafe.Pointer) *VariantType {
	if ptr == nil {
		return nil
	}

	return (*VariantType)(ptr)
}

func marshalVariantType(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapVariantType(unsafe.Pointer(b)), nil
}

// NewVariantType constructs a struct VariantType.
func NewVariantType(typeString string) *VariantType {
	var arg1 *C.gchar

	arg1 = (*C.gchar)(C.CString(typeString))
	defer C.free(unsafe.Pointer(arg1))

	var cret *C.GVariantType
	var ret1 *VariantType

	cret = C.g_variant_type_new(typeString)

	ret1 = WrapVariantType(unsafe.Pointer(cret))
	runtime.SetFinalizer(ret1, func(v *VariantType) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return ret1
}

// NewVariantTypeArray constructs a struct VariantType.
func NewVariantTypeArray(element *VariantType) *VariantType {
	var arg1 *C.GVariantType

	arg1 = (*C.GVariantType)(unsafe.Pointer(element.Native()))

	var cret *C.GVariantType
	var ret1 *VariantType

	cret = C.g_variant_type_new_array(element)

	ret1 = WrapVariantType(unsafe.Pointer(cret))
	runtime.SetFinalizer(ret1, func(v *VariantType) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return ret1
}

// NewVariantTypeDictEntry constructs a struct VariantType.
func NewVariantTypeDictEntry(key *VariantType, value *VariantType) *VariantType {
	var arg1 *C.GVariantType
	var arg2 *C.GVariantType

	arg1 = (*C.GVariantType)(unsafe.Pointer(key.Native()))
	arg2 = (*C.GVariantType)(unsafe.Pointer(value.Native()))

	var cret *C.GVariantType
	var ret1 *VariantType

	cret = C.g_variant_type_new_dict_entry(key, value)

	ret1 = WrapVariantType(unsafe.Pointer(cret))
	runtime.SetFinalizer(ret1, func(v *VariantType) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return ret1
}

// NewVariantTypeMaybe constructs a struct VariantType.
func NewVariantTypeMaybe(element *VariantType) *VariantType {
	var arg1 *C.GVariantType

	arg1 = (*C.GVariantType)(unsafe.Pointer(element.Native()))

	var cret *C.GVariantType
	var ret1 *VariantType

	cret = C.g_variant_type_new_maybe(element)

	ret1 = WrapVariantType(unsafe.Pointer(cret))
	runtime.SetFinalizer(ret1, func(v *VariantType) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return ret1
}

// NewVariantTypeTuple constructs a struct VariantType.
func NewVariantTypeTuple(items []*VariantType) *VariantType {

	var cret *C.GVariantType
	var ret1 *VariantType

	cret = C.g_variant_type_new_tuple(items, length)

	ret1 = WrapVariantType(unsafe.Pointer(cret))
	runtime.SetFinalizer(ret1, func(v *VariantType) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return ret1
}

// Native returns the underlying C source pointer.
func (v *VariantType) Native() unsafe.Pointer {
	return unsafe.Pointer(&v.native)
}

// Copy makes a copy of a Type. It is appropriate to call g_variant_type_free()
// on the return value. @type may not be nil.
func (t *VariantType) Copy() *VariantType {
	var arg0 *C.GVariantType

	arg0 = (*C.GVariantType)(unsafe.Pointer(t.Native()))

	var cret *C.GVariantType
	var ret1 *VariantType

	cret = C.g_variant_type_copy(arg0)

	ret1 = WrapVariantType(unsafe.Pointer(cret))
	runtime.SetFinalizer(ret1, func(v *VariantType) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return ret1
}

// DupString returns a newly-allocated copy of the type string corresponding to
// @type. The returned string is nul-terminated. It is appropriate to call
// g_free() on the return value.
func (t *VariantType) DupString() string {
	var arg0 *C.GVariantType

	arg0 = (*C.GVariantType)(unsafe.Pointer(t.Native()))

	var cret *C.gchar
	var ret1 string

	cret = C.g_variant_type_dup_string(arg0)

	ret1 = C.GoString(cret)
	defer C.free(unsafe.Pointer(cret))

	return ret1
}

// Element determines the element type of an array or maybe type.
//
// This function may only be used with array or maybe types.
func (t *VariantType) Element() *VariantType {
	var arg0 *C.GVariantType

	arg0 = (*C.GVariantType)(unsafe.Pointer(t.Native()))

	var cret *C.GVariantType
	var ret1 *VariantType

	cret = C.g_variant_type_element(arg0)

	ret1 = WrapVariantType(unsafe.Pointer(cret))

	return ret1
}

// Equal compares @type1 and @type2 for equality.
//
// Only returns true if the types are exactly equal. Even if one type is an
// indefinite type and the other is a subtype of it, false will be returned if
// they are not exactly equal. If you want to check for subtypes, use
// g_variant_type_is_subtype_of().
//
// The argument types of @type1 and @type2 are only #gconstpointer to allow use
// with Table without function pointer casting. For both arguments, a valid Type
// must be provided.
func (t *VariantType) Equal(type2 VariantType) bool {
	var arg0 C.gpointer
	var arg1 C.gpointer

	arg0 = (C.gpointer)(unsafe.Pointer(t.Native()))
	arg1 = (C.gpointer)(unsafe.Pointer(type2.Native()))

	var cret C.gboolean
	var ret1 bool

	cret = C.g_variant_type_equal(arg0, type2)

	ret1 = C.bool(cret) != C.false

	return ret1
}

// First determines the first item type of a tuple or dictionary entry type.
//
// This function may only be used with tuple or dictionary entry types, but must
// not be used with the generic tuple type G_VARIANT_TYPE_TUPLE.
//
// In the case of a dictionary entry type, this returns the type of the key.
//
// nil is returned in case of @type being G_VARIANT_TYPE_UNIT.
//
// This call, together with g_variant_type_next() provides an iterator interface
// over tuple and dictionary entry types.
func (t *VariantType) First() *VariantType {
	var arg0 *C.GVariantType

	arg0 = (*C.GVariantType)(unsafe.Pointer(t.Native()))

	var cret *C.GVariantType
	var ret1 *VariantType

	cret = C.g_variant_type_first(arg0)

	ret1 = WrapVariantType(unsafe.Pointer(cret))

	return ret1
}

// Free frees a Type that was allocated with g_variant_type_copy(),
// g_variant_type_new() or one of the container type constructor functions.
//
// In the case that @type is nil, this function does nothing.
//
// Since 2.24
func (t *VariantType) Free() {
	var arg0 *C.GVariantType

	arg0 = (*C.GVariantType)(unsafe.Pointer(t.Native()))

	C.g_variant_type_free(arg0)
}

// StringLength returns the length of the type string corresponding to the given
// @type. This function must be used to determine the valid extent of the memory
// region returned by g_variant_type_peek_string().
func (t *VariantType) StringLength() uint {
	var arg0 *C.GVariantType

	arg0 = (*C.GVariantType)(unsafe.Pointer(t.Native()))

	var cret C.gsize
	var ret1 uint

	cret = C.g_variant_type_get_string_length(arg0)

	ret1 = C.gsize(cret)

	return ret1
}

// Hash hashes @type.
//
// The argument type of @type is only #gconstpointer to allow use with Table
// without function pointer casting. A valid Type must be provided.
func (t *VariantType) Hash() uint {
	var arg0 C.gpointer

	arg0 = (C.gpointer)(unsafe.Pointer(t.Native()))

	var cret C.guint
	var ret1 uint

	cret = C.g_variant_type_hash(arg0)

	ret1 = C.guint(cret)

	return ret1
}

// IsArray determines if the given @type is an array type. This is true if the
// type string for @type starts with an 'a'.
//
// This function returns true for any indefinite type for which every definite
// subtype is an array type -- G_VARIANT_TYPE_ARRAY, for example.
func (t *VariantType) IsArray() bool {
	var arg0 *C.GVariantType

	arg0 = (*C.GVariantType)(unsafe.Pointer(t.Native()))

	var cret C.gboolean
	var ret1 bool

	cret = C.g_variant_type_is_array(arg0)

	ret1 = C.bool(cret) != C.false

	return ret1
}

// IsBasic determines if the given @type is a basic type.
//
// Basic types are booleans, bytes, integers, doubles, strings, object paths and
// signatures.
//
// Only a basic type may be used as the key of a dictionary entry.
//
// This function returns false for all indefinite types except
// G_VARIANT_TYPE_BASIC.
func (t *VariantType) IsBasic() bool {
	var arg0 *C.GVariantType

	arg0 = (*C.GVariantType)(unsafe.Pointer(t.Native()))

	var cret C.gboolean
	var ret1 bool

	cret = C.g_variant_type_is_basic(arg0)

	ret1 = C.bool(cret) != C.false

	return ret1
}

// IsContainer determines if the given @type is a container type.
//
// Container types are any array, maybe, tuple, or dictionary entry types plus
// the variant type.
//
// This function returns true for any indefinite type for which every definite
// subtype is a container -- G_VARIANT_TYPE_ARRAY, for example.
func (t *VariantType) IsContainer() bool {
	var arg0 *C.GVariantType

	arg0 = (*C.GVariantType)(unsafe.Pointer(t.Native()))

	var cret C.gboolean
	var ret1 bool

	cret = C.g_variant_type_is_container(arg0)

	ret1 = C.bool(cret) != C.false

	return ret1
}

// IsDefinite determines if the given @type is definite (ie: not indefinite).
//
// A type is definite if its type string does not contain any indefinite type
// characters ('*', '?', or 'r').
//
// A #GVariant instance may not have an indefinite type, so calling this
// function on the result of g_variant_get_type() will always result in true
// being returned. Calling this function on an indefinite type like
// G_VARIANT_TYPE_ARRAY, however, will result in false being returned.
func (t *VariantType) IsDefinite() bool {
	var arg0 *C.GVariantType

	arg0 = (*C.GVariantType)(unsafe.Pointer(t.Native()))

	var cret C.gboolean
	var ret1 bool

	cret = C.g_variant_type_is_definite(arg0)

	ret1 = C.bool(cret) != C.false

	return ret1
}

// IsDictEntry determines if the given @type is a dictionary entry type. This is
// true if the type string for @type starts with a '{'.
//
// This function returns true for any indefinite type for which every definite
// subtype is a dictionary entry type -- G_VARIANT_TYPE_DICT_ENTRY, for example.
func (t *VariantType) IsDictEntry() bool {
	var arg0 *C.GVariantType

	arg0 = (*C.GVariantType)(unsafe.Pointer(t.Native()))

	var cret C.gboolean
	var ret1 bool

	cret = C.g_variant_type_is_dict_entry(arg0)

	ret1 = C.bool(cret) != C.false

	return ret1
}

// IsMaybe determines if the given @type is a maybe type. This is true if the
// type string for @type starts with an 'm'.
//
// This function returns true for any indefinite type for which every definite
// subtype is a maybe type -- G_VARIANT_TYPE_MAYBE, for example.
func (t *VariantType) IsMaybe() bool {
	var arg0 *C.GVariantType

	arg0 = (*C.GVariantType)(unsafe.Pointer(t.Native()))

	var cret C.gboolean
	var ret1 bool

	cret = C.g_variant_type_is_maybe(arg0)

	ret1 = C.bool(cret) != C.false

	return ret1
}

// IsSubtypeOf checks if @type is a subtype of @supertype.
//
// This function returns true if @type is a subtype of @supertype. All types are
// considered to be subtypes of themselves. Aside from that, only indefinite
// types can have subtypes.
func (t *VariantType) IsSubtypeOf(supertype *VariantType) bool {
	var arg0 *C.GVariantType
	var arg1 *C.GVariantType

	arg0 = (*C.GVariantType)(unsafe.Pointer(t.Native()))
	arg1 = (*C.GVariantType)(unsafe.Pointer(supertype.Native()))

	var cret C.gboolean
	var ret1 bool

	cret = C.g_variant_type_is_subtype_of(arg0, supertype)

	ret1 = C.bool(cret) != C.false

	return ret1
}

// IsTuple determines if the given @type is a tuple type. This is true if the
// type string for @type starts with a '(' or if @type is G_VARIANT_TYPE_TUPLE.
//
// This function returns true for any indefinite type for which every definite
// subtype is a tuple type -- G_VARIANT_TYPE_TUPLE, for example.
func (t *VariantType) IsTuple() bool {
	var arg0 *C.GVariantType

	arg0 = (*C.GVariantType)(unsafe.Pointer(t.Native()))

	var cret C.gboolean
	var ret1 bool

	cret = C.g_variant_type_is_tuple(arg0)

	ret1 = C.bool(cret) != C.false

	return ret1
}

// IsVariant determines if the given @type is the variant type.
func (t *VariantType) IsVariant() bool {
	var arg0 *C.GVariantType

	arg0 = (*C.GVariantType)(unsafe.Pointer(t.Native()))

	var cret C.gboolean
	var ret1 bool

	cret = C.g_variant_type_is_variant(arg0)

	ret1 = C.bool(cret) != C.false

	return ret1
}

// Key determines the key type of a dictionary entry type.
//
// This function may only be used with a dictionary entry type. Other than the
// additional restriction, this call is equivalent to g_variant_type_first().
func (t *VariantType) Key() *VariantType {
	var arg0 *C.GVariantType

	arg0 = (*C.GVariantType)(unsafe.Pointer(t.Native()))

	var cret *C.GVariantType
	var ret1 *VariantType

	cret = C.g_variant_type_key(arg0)

	ret1 = WrapVariantType(unsafe.Pointer(cret))

	return ret1
}

// NItems determines the number of items contained in a tuple or dictionary
// entry type.
//
// This function may only be used with tuple or dictionary entry types, but must
// not be used with the generic tuple type G_VARIANT_TYPE_TUPLE.
//
// In the case of a dictionary entry type, this function will always return 2.
func (t *VariantType) NItems() uint {
	var arg0 *C.GVariantType

	arg0 = (*C.GVariantType)(unsafe.Pointer(t.Native()))

	var cret C.gsize
	var ret1 uint

	cret = C.g_variant_type_n_items(arg0)

	ret1 = C.gsize(cret)

	return ret1
}

// Next determines the next item type of a tuple or dictionary entry type.
//
// @type must be the result of a previous call to g_variant_type_first() or
// g_variant_type_next().
//
// If called on the key type of a dictionary entry then this call returns the
// value type. If called on the value type of a dictionary entry then this call
// returns nil.
//
// For tuples, nil is returned when @type is the last item in a tuple.
func (t *VariantType) Next() *VariantType {
	var arg0 *C.GVariantType

	arg0 = (*C.GVariantType)(unsafe.Pointer(t.Native()))

	var cret *C.GVariantType
	var ret1 *VariantType

	cret = C.g_variant_type_next(arg0)

	ret1 = WrapVariantType(unsafe.Pointer(cret))

	return ret1
}

// PeekString returns the type string corresponding to the given @type. The
// result is not nul-terminated; in order to determine its length you must call
// g_variant_type_get_string_length().
//
// To get a nul-terminated string, see g_variant_type_dup_string().
func (t *VariantType) PeekString() string {
	var arg0 *C.GVariantType

	arg0 = (*C.GVariantType)(unsafe.Pointer(t.Native()))

	var cret *C.gchar
	var ret1 string

	cret = C.g_variant_type_peek_string(arg0)

	ret1 = C.GoString(cret)

	return ret1
}

// Value determines the value type of a dictionary entry type.
//
// This function may only be used with a dictionary entry type.
func (t *VariantType) Value() *VariantType {
	var arg0 *C.GVariantType

	arg0 = (*C.GVariantType)(unsafe.Pointer(t.Native()))

	var cret *C.GVariantType
	var ret1 *VariantType

	cret = C.g_variant_type_value(arg0)

	ret1 = WrapVariantType(unsafe.Pointer(cret))

	return ret1
}
