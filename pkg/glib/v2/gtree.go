// Code generated by girgen. DO NOT EDIT.

package glib

import (
	"unsafe"
)

// #cgo pkg-config: glib-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <glib.h>
import "C"

// Tree: the GTree struct is an opaque data structure representing a [balanced
// binary tree][glib-Balanced-Binary-Trees]. It should be accessed only by using
// the following functions.
type Tree struct {
	native C.GTree
}

// WrapTree wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapTree(ptr unsafe.Pointer) *Tree {
	if ptr == nil {
		return nil
	}

	return (*Tree)(ptr)
}

func marshalTree(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapTree(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (t *Tree) Native() unsafe.Pointer {
	return unsafe.Pointer(&t.native)
}

// Destroy removes all keys and values from the #GTree and decreases its
// reference count by one. If keys and/or values are dynamically allocated, you
// should either free them first or create the #GTree using g_tree_new_full().
// In the latter case the destroy functions you supplied will be called on all
// keys and values before destroying the #GTree.
func (t *Tree) Destroy(t *Tree) {
	var arg0 *C.GTree

	arg0 = (*C.GTree)(unsafe.Pointer(t.Native()))

	C.g_tree_destroy(arg0)
}

// Foreach calls the given function for each of the key/value pairs in the
// #GTree. The function is passed the key and value of each pair, and the given
// @data parameter. The tree is traversed in sorted order.
//
// The tree may not be modified while iterating over it (you can't add/remove
// items). To remove all items matching a predicate, you need to add each item
// to a list in your Func as you walk over the tree, then walk the list and
// remove each item.
func (t *Tree) Foreach(t *Tree) {
	var arg0 *C.GTree

	arg0 = (*C.GTree)(unsafe.Pointer(t.Native()))

	C.g_tree_foreach(arg0, arg1, arg2)
}

// Height gets the height of a #GTree.
//
// If the #GTree contains no nodes, the height is 0. If the #GTree contains only
// one root node the height is 1. If the root node has children the height is 2,
// etc.
func (t *Tree) Height(t *Tree) {
	var arg0 *C.GTree

	arg0 = (*C.GTree)(unsafe.Pointer(t.Native()))

	C.g_tree_height(arg0)
}

// Insert inserts a key/value pair into a #GTree.
//
// If the given key already exists in the #GTree its corresponding value is set
// to the new value. If you supplied a @value_destroy_func when creating the
// #GTree, the old value is freed using that function. If you supplied a
// @key_destroy_func when creating the #GTree, the passed key is freed using
// that function.
//
// The tree is automatically 'balanced' as new key/value pairs are added, so
// that the distance from the root to every leaf is as small as possible. The
// cost of maintaining a balanced tree while inserting new key/value result in a
// O(n log(n)) operation where most of the other operations are O(log(n)).
func (t *Tree) Insert(t *Tree, key interface{}, value interface{}) {
	var arg0 *C.GTree
	var arg1 C.gpointer
	var arg2 C.gpointer

	arg0 = (*C.GTree)(unsafe.Pointer(t.Native()))
	arg1 = C.gpointer(key)
	arg2 = C.gpointer(value)

	C.g_tree_insert(arg0, arg1, arg2)
}

// Lookup gets the value corresponding to the given key. Since a #GTree is
// automatically balanced as key/value pairs are added, key lookup is O(log n)
// (where n is the number of key/value pairs in the tree).
func (t *Tree) Lookup(t *Tree, key interface{}) {
	var arg0 *C.GTree
	var arg1 C.gpointer

	arg0 = (*C.GTree)(unsafe.Pointer(t.Native()))
	arg1 = C.gpointer(key)

	C.g_tree_lookup(arg0, arg1)
}

// LookupExtended looks up a key in the #GTree, returning the original key and
// the associated value. This is useful if you need to free the memory allocated
// for the original key, for example before calling g_tree_remove().
func (t *Tree) LookupExtended(t *Tree, lookupKey interface{}) (origKey interface{}, value interface{}, ok bool) {
	var arg0 *C.GTree
	var arg1 C.gpointer

	arg0 = (*C.GTree)(unsafe.Pointer(t.Native()))
	arg1 = C.gpointer(lookupKey)

	var arg2 C.gpointer
	var origKey interface{}
	var arg3 C.gpointer
	var value interface{}
	var cret C.gboolean
	var ok bool

	cret = C.g_tree_lookup_extended(arg0, arg1, &arg2, &arg3)

	origKey = interface{}(&arg2)
	value = interface{}(&arg3)
	if cret {
		ok = true
	}

	return origKey, value, ok
}

// Nnodes gets the number of nodes in a #GTree.
func (t *Tree) Nnodes(t *Tree) {
	var arg0 *C.GTree

	arg0 = (*C.GTree)(unsafe.Pointer(t.Native()))

	C.g_tree_nnodes(arg0)
}

// Ref increments the reference count of @tree by one.
//
// It is safe to call this function from any thread.
func (t *Tree) Ref(t *Tree) {
	var arg0 *C.GTree

	arg0 = (*C.GTree)(unsafe.Pointer(t.Native()))

	C.g_tree_ref(arg0)
}

// Remove removes a key/value pair from a #GTree.
//
// If the #GTree was created using g_tree_new_full(), the key and value are
// freed using the supplied destroy functions, otherwise you have to make sure
// that any dynamically allocated values are freed yourself. If the key does not
// exist in the #GTree, the function does nothing.
//
// The cost of maintaining a balanced tree while removing a key/value result in
// a O(n log(n)) operation where most of the other operations are O(log(n)).
func (t *Tree) Remove(t *Tree, key interface{}) bool {
	var arg0 *C.GTree
	var arg1 C.gpointer

	arg0 = (*C.GTree)(unsafe.Pointer(t.Native()))
	arg1 = C.gpointer(key)

	var cret C.gboolean
	var ok bool

	cret = C.g_tree_remove(arg0, arg1)

	if cret {
		ok = true
	}

	return ok
}

// Replace inserts a new key and value into a #GTree similar to g_tree_insert().
// The difference is that if the key already exists in the #GTree, it gets
// replaced by the new key. If you supplied a @value_destroy_func when creating
// the #GTree, the old value is freed using that function. If you supplied a
// @key_destroy_func when creating the #GTree, the old key is freed using that
// function.
//
// The tree is automatically 'balanced' as new key/value pairs are added, so
// that the distance from the root to every leaf is as small as possible.
func (t *Tree) Replace(t *Tree, key interface{}, value interface{}) {
	var arg0 *C.GTree
	var arg1 C.gpointer
	var arg2 C.gpointer

	arg0 = (*C.GTree)(unsafe.Pointer(t.Native()))
	arg1 = C.gpointer(key)
	arg2 = C.gpointer(value)

	C.g_tree_replace(arg0, arg1, arg2)
}

// Search searches a #GTree using @search_func.
//
// The @search_func is called with a pointer to the key of a key/value pair in
// the tree, and the passed in @user_data. If @search_func returns 0 for a
// key/value pair, then the corresponding value is returned as the result of
// g_tree_search(). If @search_func returns -1, searching will proceed among the
// key/value pairs that have a smaller key; if @search_func returns 1, searching
// will proceed among the key/value pairs that have a larger key.
func (t *Tree) Search(t *Tree) {
	var arg0 *C.GTree

	arg0 = (*C.GTree)(unsafe.Pointer(t.Native()))

	C.g_tree_search(arg0, arg1, arg2)
}

// Steal removes a key and its associated value from a #GTree without calling
// the key and value destroy functions.
//
// If the key does not exist in the #GTree, the function does nothing.
func (t *Tree) Steal(t *Tree, key interface{}) bool {
	var arg0 *C.GTree
	var arg1 C.gpointer

	arg0 = (*C.GTree)(unsafe.Pointer(t.Native()))
	arg1 = C.gpointer(key)

	var cret C.gboolean
	var ok bool

	cret = C.g_tree_steal(arg0, arg1)

	if cret {
		ok = true
	}

	return ok
}

// Traverse calls the given function for each node in the #GTree.
func (t *Tree) Traverse(t *Tree) {
	var arg0 *C.GTree

	arg0 = (*C.GTree)(unsafe.Pointer(t.Native()))

	C.g_tree_traverse(arg0, arg1, arg2, arg3)
}

// Unref decrements the reference count of @tree by one. If the reference count
// drops to 0, all keys and values will be destroyed (if destroy functions were
// specified) and all memory allocated by @tree will be released.
//
// It is safe to call this function from any thread.
func (t *Tree) Unref(t *Tree) {
	var arg0 *C.GTree

	arg0 = (*C.GTree)(unsafe.Pointer(t.Native()))

	C.g_tree_unref(arg0)
}
