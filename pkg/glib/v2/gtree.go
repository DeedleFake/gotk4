// Code generated by girgen. DO NOT EDIT.

package glib

import (
	"unsafe"

	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: glib-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <glib.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_tree_get_type()), F: marshalTree},
	})
}

// Tree: the GTree struct is an opaque data structure representing a [balanced
// binary tree][glib-Balanced-Binary-Trees]. It should be accessed only by using
// the following functions.
type Tree C.GTree

// WrapTree wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapTree(ptr unsafe.Pointer) *Tree {
	return (*Tree)(ptr)
}

func marshalTree(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return (*Tree)(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (t *Tree) Native() unsafe.Pointer {
	return unsafe.Pointer(t)
}

// Destroy gets the upper bound node corresponding to the given key, or nil if
// the tree is empty or all the nodes in the tree have keys that are lower than
// or equal to the searched key.
//
// The upper bound is the first node that has its key strictly greater than the
// searched key.
func (t *Tree) Destroy() {
	var _arg0 *C.GTree // out

	_arg0 = (*C.GTree)(unsafe.Pointer(t.Native()))

	C.g_tree_destroy(_arg0)
}

// Height gets the upper bound node corresponding to the given key, or nil if
// the tree is empty or all the nodes in the tree have keys that are lower than
// or equal to the searched key.
//
// The upper bound is the first node that has its key strictly greater than the
// searched key.
func (t *Tree) Height() int {
	var _arg0 *C.GTree // out
	var _cret C.gint   // in

	_arg0 = (*C.GTree)(unsafe.Pointer(t.Native()))

	_cret = C.g_tree_height(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// Nnodes gets the upper bound node corresponding to the given key, or nil if
// the tree is empty or all the nodes in the tree have keys that are lower than
// or equal to the searched key.
//
// The upper bound is the first node that has its key strictly greater than the
// searched key.
func (t *Tree) Nnodes() int {
	var _arg0 *C.GTree // out
	var _cret C.gint   // in

	_arg0 = (*C.GTree)(unsafe.Pointer(t.Native()))

	_cret = C.g_tree_nnodes(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// NodeFirst gets the upper bound node corresponding to the given key, or nil if
// the tree is empty or all the nodes in the tree have keys that are lower than
// or equal to the searched key.
//
// The upper bound is the first node that has its key strictly greater than the
// searched key.
func (t *Tree) NodeFirst() *TreeNode {
	var _arg0 *C.GTree     // out
	var _cret *C.GTreeNode // in

	_arg0 = (*C.GTree)(unsafe.Pointer(t.Native()))

	_cret = C.g_tree_node_first(_arg0)

	var _treeNode *TreeNode // out

	_treeNode = (*TreeNode)(unsafe.Pointer(_cret))

	return _treeNode
}

// NodeLast gets the upper bound node corresponding to the given key, or nil if
// the tree is empty or all the nodes in the tree have keys that are lower than
// or equal to the searched key.
//
// The upper bound is the first node that has its key strictly greater than the
// searched key.
func (t *Tree) NodeLast() *TreeNode {
	var _arg0 *C.GTree     // out
	var _cret *C.GTreeNode // in

	_arg0 = (*C.GTree)(unsafe.Pointer(t.Native()))

	_cret = C.g_tree_node_last(_arg0)

	var _treeNode *TreeNode // out

	_treeNode = (*TreeNode)(unsafe.Pointer(_cret))

	return _treeNode
}

// Ref gets the upper bound node corresponding to the given key, or nil if the
// tree is empty or all the nodes in the tree have keys that are lower than or
// equal to the searched key.
//
// The upper bound is the first node that has its key strictly greater than the
// searched key.
func (t *Tree) Ref() *Tree {
	var _arg0 *C.GTree // out
	var _cret *C.GTree // in

	_arg0 = (*C.GTree)(unsafe.Pointer(t.Native()))

	_cret = C.g_tree_ref(_arg0)

	var _ret *Tree // out

	_ret = (*Tree)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(&_ret, func(v **Tree) {
		C.free(unsafe.Pointer(v))
	})

	return _ret
}

// Unref gets the upper bound node corresponding to the given key, or nil if the
// tree is empty or all the nodes in the tree have keys that are lower than or
// equal to the searched key.
//
// The upper bound is the first node that has its key strictly greater than the
// searched key.
func (t *Tree) Unref() {
	var _arg0 *C.GTree // out

	_arg0 = (*C.GTree)(unsafe.Pointer(t.Native()))

	C.g_tree_unref(_arg0)
}

// TreeNode: an opaque type which identifies a specific node in a #GTree.
type TreeNode C.GTreeNode

// WrapTreeNode wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapTreeNode(ptr unsafe.Pointer) *TreeNode {
	return (*TreeNode)(ptr)
}

// Native returns the underlying C source pointer.
func (t *TreeNode) Native() unsafe.Pointer {
	return unsafe.Pointer(t)
}

// Next gets the value stored at a particular tree node.
func (n *TreeNode) Next() *TreeNode {
	var _arg0 *C.GTreeNode // out
	var _cret *C.GTreeNode // in

	_arg0 = (*C.GTreeNode)(unsafe.Pointer(n.Native()))

	_cret = C.g_tree_node_next(_arg0)

	var _treeNode *TreeNode // out

	_treeNode = (*TreeNode)(unsafe.Pointer(_cret))

	return _treeNode
}

// Previous gets the value stored at a particular tree node.
func (n *TreeNode) Previous() *TreeNode {
	var _arg0 *C.GTreeNode // out
	var _cret *C.GTreeNode // in

	_arg0 = (*C.GTreeNode)(unsafe.Pointer(n.Native()))

	_cret = C.g_tree_node_previous(_arg0)

	var _treeNode *TreeNode // out

	_treeNode = (*TreeNode)(unsafe.Pointer(_cret))

	return _treeNode
}
