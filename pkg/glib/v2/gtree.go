// Code generated by girgen. DO NOT EDIT.

package glib

import (
	"unsafe"
)

// #cgo pkg-config: glib-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <glib.h>
import "C"

// Tree: the GTree struct is an opaque data structure representing a [balanced
// binary tree][glib-Balanced-Binary-Trees]. It should be accessed only by using
// the following functions.
type Tree struct {
	native C.GTree
}

// WrapTree wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapTree(ptr unsafe.Pointer) *Tree {
	if ptr == nil {
		return nil
	}

	return (*Tree)(ptr)
}

func marshalTree(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapTree(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (t *Tree) Native() unsafe.Pointer {
	return unsafe.Pointer(&t.native)
}

// Destroy removes all keys and values from the #GTree and decreases its
// reference count by one. If keys and/or values are dynamically allocated, you
// should either free them first or create the #GTree using g_tree_new_full().
// In the latter case the destroy functions you supplied will be called on all
// keys and values before destroying the #GTree.
func (t *Tree) Destroy() {
	var _arg0 *C.GTree

	_arg0 = (*C.GTree)(unsafe.Pointer(t.Native()))

	C.g_tree_destroy(_arg0)
}

// Foreach calls the given function for each of the key/value pairs in the
// #GTree. The function is passed the key and value of each pair, and the given
// @data parameter. The tree is traversed in sorted order.
//
// The tree may not be modified while iterating over it (you can't add/remove
// items). To remove all items matching a predicate, you need to add each item
// to a list in your Func as you walk over the tree, then walk the list and
// remove each item.
func (t *Tree) Foreach() {
	var _arg0 *C.GTree

	_arg0 = (*C.GTree)(unsafe.Pointer(t.Native()))

	C.g_tree_foreach(_arg0)
}

// Height gets the height of a #GTree.
//
// If the #GTree contains no nodes, the height is 0. If the #GTree contains only
// one root node the height is 1. If the root node has children the height is 2,
// etc.
func (t *Tree) Height() int {
	var _arg0 *C.GTree

	_arg0 = (*C.GTree)(unsafe.Pointer(t.Native()))

	var _cret C.gint

	cret = C.g_tree_height(_arg0)

	var _gint int

	_gint = (int)(_cret)

	return _gint
}

// Insert inserts a key/value pair into a #GTree.
//
// If the given key already exists in the #GTree its corresponding value is set
// to the new value. If you supplied a @value_destroy_func when creating the
// #GTree, the old value is freed using that function. If you supplied a
// @key_destroy_func when creating the #GTree, the passed key is freed using
// that function.
//
// The tree is automatically 'balanced' as new key/value pairs are added, so
// that the distance from the root to every leaf is as small as possible. The
// cost of maintaining a balanced tree while inserting new key/value result in a
// O(n log(n)) operation where most of the other operations are O(log(n)).
func (t *Tree) Insert(key interface{}, value interface{}) {
	var _arg0 *C.GTree
	var _arg1 C.gpointer
	var _arg2 C.gpointer

	_arg0 = (*C.GTree)(unsafe.Pointer(t.Native()))
	_arg1 = C.gpointer(key)
	_arg2 = C.gpointer(value)

	C.g_tree_insert(_arg0, _arg1, _arg2)
}

// Lookup gets the value corresponding to the given key. Since a #GTree is
// automatically balanced as key/value pairs are added, key lookup is O(log n)
// (where n is the number of key/value pairs in the tree).
func (t *Tree) Lookup(key interface{}) interface{} {
	var _arg0 *C.GTree
	var _arg1 C.gpointer

	_arg0 = (*C.GTree)(unsafe.Pointer(t.Native()))
	_arg1 = C.gpointer(key)

	var _cret C.gpointer

	cret = C.g_tree_lookup(_arg0, _arg1)

	var _gpointer interface{}

	_gpointer = (interface{})(_cret)

	return _gpointer
}

// LookupExtended looks up a key in the #GTree, returning the original key and
// the associated value. This is useful if you need to free the memory allocated
// for the original key, for example before calling g_tree_remove().
func (t *Tree) LookupExtended(lookupKey interface{}) (origKey interface{}, value interface{}, ok bool) {
	var _arg0 *C.GTree
	var _arg1 C.gpointer

	_arg0 = (*C.GTree)(unsafe.Pointer(t.Native()))
	_arg1 = C.gpointer(lookupKey)

	var _arg2 C.gpointer
	var _arg3 C.gpointer
	var _cret C.gboolean

	cret = C.g_tree_lookup_extended(_arg0, _arg1, &_arg2, &_arg3)

	var _origKey interface{}
	var _value interface{}
	var _ok bool

	_origKey = (interface{})(_arg2)
	_value = (interface{})(_arg3)
	if _cret {
		_ok = true
	}

	return _origKey, _value, _ok
}

// Nnodes gets the number of nodes in a #GTree.
func (t *Tree) Nnodes() int {
	var _arg0 *C.GTree

	_arg0 = (*C.GTree)(unsafe.Pointer(t.Native()))

	var _cret C.gint

	cret = C.g_tree_nnodes(_arg0)

	var _gint int

	_gint = (int)(_cret)

	return _gint
}

// Ref increments the reference count of @tree by one.
//
// It is safe to call this function from any thread.
func (t *Tree) Ref() *Tree {
	var _arg0 *C.GTree

	_arg0 = (*C.GTree)(unsafe.Pointer(t.Native()))

	var _cret *C.GTree

	cret = C.g_tree_ref(_arg0)

	var _ret *Tree

	_ret = WrapTree(unsafe.Pointer(_cret))

	return _ret
}

// Remove removes a key/value pair from a #GTree.
//
// If the #GTree was created using g_tree_new_full(), the key and value are
// freed using the supplied destroy functions, otherwise you have to make sure
// that any dynamically allocated values are freed yourself. If the key does not
// exist in the #GTree, the function does nothing.
//
// The cost of maintaining a balanced tree while removing a key/value result in
// a O(n log(n)) operation where most of the other operations are O(log(n)).
func (t *Tree) Remove(key interface{}) bool {
	var _arg0 *C.GTree
	var _arg1 C.gpointer

	_arg0 = (*C.GTree)(unsafe.Pointer(t.Native()))
	_arg1 = C.gpointer(key)

	var _cret C.gboolean

	cret = C.g_tree_remove(_arg0, _arg1)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// Replace inserts a new key and value into a #GTree similar to g_tree_insert().
// The difference is that if the key already exists in the #GTree, it gets
// replaced by the new key. If you supplied a @value_destroy_func when creating
// the #GTree, the old value is freed using that function. If you supplied a
// @key_destroy_func when creating the #GTree, the old key is freed using that
// function.
//
// The tree is automatically 'balanced' as new key/value pairs are added, so
// that the distance from the root to every leaf is as small as possible.
func (t *Tree) Replace(key interface{}, value interface{}) {
	var _arg0 *C.GTree
	var _arg1 C.gpointer
	var _arg2 C.gpointer

	_arg0 = (*C.GTree)(unsafe.Pointer(t.Native()))
	_arg1 = C.gpointer(key)
	_arg2 = C.gpointer(value)

	C.g_tree_replace(_arg0, _arg1, _arg2)
}

// Search searches a #GTree using @search_func.
//
// The @search_func is called with a pointer to the key of a key/value pair in
// the tree, and the passed in @user_data. If @search_func returns 0 for a
// key/value pair, then the corresponding value is returned as the result of
// g_tree_search(). If @search_func returns -1, searching will proceed among the
// key/value pairs that have a smaller key; if @search_func returns 1, searching
// will proceed among the key/value pairs that have a larger key.
func (t *Tree) Search() interface{} {
	var _arg0 *C.GTree

	_arg0 = (*C.GTree)(unsafe.Pointer(t.Native()))

	var _cret C.gpointer

	cret = C.g_tree_search(_arg0)

	var _gpointer interface{}

	_gpointer = (interface{})(_cret)

	return _gpointer
}

// Steal removes a key and its associated value from a #GTree without calling
// the key and value destroy functions.
//
// If the key does not exist in the #GTree, the function does nothing.
func (t *Tree) Steal(key interface{}) bool {
	var _arg0 *C.GTree
	var _arg1 C.gpointer

	_arg0 = (*C.GTree)(unsafe.Pointer(t.Native()))
	_arg1 = C.gpointer(key)

	var _cret C.gboolean

	cret = C.g_tree_steal(_arg0, _arg1)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// Traverse calls the given function for each node in the #GTree.
func (t *Tree) Traverse() {
	var _arg0 *C.GTree

	_arg0 = (*C.GTree)(unsafe.Pointer(t.Native()))

	C.g_tree_traverse(_arg0)
}

// Unref decrements the reference count of @tree by one. If the reference count
// drops to 0, all keys and values will be destroyed (if destroy functions were
// specified) and all memory allocated by @tree will be released.
//
// It is safe to call this function from any thread.
func (t *Tree) Unref() {
	var _arg0 *C.GTree

	_arg0 = (*C.GTree)(unsafe.Pointer(t.Native()))

	C.g_tree_unref(_arg0)
}
