// Code generated by girgen. DO NOT EDIT.

package glib

import (
	"unsafe"
)

// #cgo pkg-config: glib-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <stdbool.h>
// #include <glib-object.h>
// #include <glib.h>
import "C"

// SequenceGet returns the data that @iter points to.
func SequenceGet(iter *SequenceIter) interface{} {
	var arg1 *C.GSequenceIter

	arg1 = (*C.GSequenceIter)(unsafe.Pointer(iter.Native()))

	var cret C.gpointer
	var ret1 interface{}

	cret = C.g_sequence_get(iter)

	ret1 = C.gpointer(cret)

	return ret1
}

// SequenceInsertBefore inserts a new item just before the item pointed to by
// @iter.
func SequenceInsertBefore(iter *SequenceIter, data interface{}) *SequenceIter {
	var arg1 *C.GSequenceIter
	var arg2 C.gpointer

	arg1 = (*C.GSequenceIter)(unsafe.Pointer(iter.Native()))
	arg2 = C.gpointer(data)

	var cret *C.GSequenceIter
	var ret1 *SequenceIter

	cret = C.g_sequence_insert_before(iter, data)

	ret1 = WrapSequenceIter(unsafe.Pointer(cret))

	return ret1
}

// SequenceMove moves the item pointed to by @src to the position indicated by
// @dest. After calling this function @dest will point to the position
// immediately after @src. It is allowed for @src and @dest to point into
// different sequences.
func SequenceMove(src *SequenceIter, dest *SequenceIter) {
	var arg1 *C.GSequenceIter
	var arg2 *C.GSequenceIter

	arg1 = (*C.GSequenceIter)(unsafe.Pointer(src.Native()))
	arg2 = (*C.GSequenceIter)(unsafe.Pointer(dest.Native()))

	C.g_sequence_move(src, dest)
}

// SequenceMoveRange inserts the (@begin, @end) range at the destination pointed
// to by @dest. The @begin and @end iters must point into the same sequence. It
// is allowed for @dest to point to a different sequence than the one pointed
// into by @begin and @end.
//
// If @dest is nil, the range indicated by @begin and @end is removed from the
// sequence. If @dest points to a place within the (@begin, @end) range, the
// range does not move.
func SequenceMoveRange(dest *SequenceIter, begin *SequenceIter, end *SequenceIter) {
	var arg1 *C.GSequenceIter
	var arg2 *C.GSequenceIter
	var arg3 *C.GSequenceIter

	arg1 = (*C.GSequenceIter)(unsafe.Pointer(dest.Native()))
	arg2 = (*C.GSequenceIter)(unsafe.Pointer(begin.Native()))
	arg3 = (*C.GSequenceIter)(unsafe.Pointer(end.Native()))

	C.g_sequence_move_range(dest, begin, end)
}

// SequenceRangeGetMidpoint finds an iterator somewhere in the range (@begin,
// @end). This iterator will be close to the middle of the range, but is not
// guaranteed to be exactly in the middle.
//
// The @begin and @end iterators must both point to the same sequence and @begin
// must come before or be equal to @end in the sequence.
func SequenceRangeGetMidpoint(begin *SequenceIter, end *SequenceIter) *SequenceIter {
	var arg1 *C.GSequenceIter
	var arg2 *C.GSequenceIter

	arg1 = (*C.GSequenceIter)(unsafe.Pointer(begin.Native()))
	arg2 = (*C.GSequenceIter)(unsafe.Pointer(end.Native()))

	var cret *C.GSequenceIter
	var ret1 *SequenceIter

	cret = C.g_sequence_range_get_midpoint(begin, end)

	ret1 = WrapSequenceIter(unsafe.Pointer(cret))

	return ret1
}

// SequenceRemove removes the item pointed to by @iter. It is an error to pass
// the end iterator to this function.
//
// If the sequence has a data destroy function associated with it, this function
// is called on the data for the removed item.
func SequenceRemove(iter *SequenceIter) {
	var arg1 *C.GSequenceIter

	arg1 = (*C.GSequenceIter)(unsafe.Pointer(iter.Native()))

	C.g_sequence_remove(iter)
}

// SequenceRemoveRange removes all items in the (@begin, @end) range.
//
// If the sequence has a data destroy function associated with it, this function
// is called on the data for the removed items.
func SequenceRemoveRange(begin *SequenceIter, end *SequenceIter) {
	var arg1 *C.GSequenceIter
	var arg2 *C.GSequenceIter

	arg1 = (*C.GSequenceIter)(unsafe.Pointer(begin.Native()))
	arg2 = (*C.GSequenceIter)(unsafe.Pointer(end.Native()))

	C.g_sequence_remove_range(begin, end)
}

// SequenceSet changes the data for the item pointed to by @iter to be @data. If
// the sequence has a data destroy function associated with it, that function is
// called on the existing data that @iter pointed to.
func SequenceSet(iter *SequenceIter, data interface{}) {
	var arg1 *C.GSequenceIter
	var arg2 C.gpointer

	arg1 = (*C.GSequenceIter)(unsafe.Pointer(iter.Native()))
	arg2 = C.gpointer(data)

	C.g_sequence_set(iter, data)
}

// SequenceSwap swaps the items pointed to by @a and @b. It is allowed for @a
// and @b to point into difference sequences.
func SequenceSwap(a *SequenceIter, b *SequenceIter) {
	var arg1 *C.GSequenceIter
	var arg2 *C.GSequenceIter

	arg1 = (*C.GSequenceIter)(unsafe.Pointer(a.Native()))
	arg2 = (*C.GSequenceIter)(unsafe.Pointer(b.Native()))

	C.g_sequence_swap(a, b)
}

// Sequence: the #GSequence struct is an opaque data type representing a
// [sequence][glib-Sequences] data type.
type Sequence struct {
	native C.GSequence
}

// WrapSequence wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSequence(ptr unsafe.Pointer) *Sequence {
	if ptr == nil {
		return nil
	}

	return (*Sequence)(ptr)
}

func marshalSequence(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSequence(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (s *Sequence) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

// Append adds a new item to the end of @seq.
func (s *Sequence) Append(data interface{}) *SequenceIter {
	var arg0 *C.GSequence
	var arg1 C.gpointer

	arg0 = (*C.GSequence)(unsafe.Pointer(s.Native()))
	arg1 = C.gpointer(data)

	var cret *C.GSequenceIter
	var ret1 *SequenceIter

	cret = C.g_sequence_append(arg0, data)

	ret1 = WrapSequenceIter(unsafe.Pointer(cret))

	return ret1
}

// Foreach calls @func for each item in the sequence passing @user_data to the
// function. @func must not modify the sequence itself.
func (s *Sequence) Foreach(fn Func) {
	var arg0 *C.GSequence

	arg0 = (*C.GSequence)(unsafe.Pointer(s.Native()))

	C.g_sequence_foreach(arg0, fn, userData)
}

// Free frees the memory allocated for @seq. If @seq has a data destroy function
// associated with it, that function is called on all items in @seq.
func (s *Sequence) Free() {
	var arg0 *C.GSequence

	arg0 = (*C.GSequence)(unsafe.Pointer(s.Native()))

	C.g_sequence_free(arg0)
}

// BeginIter returns the begin iterator for @seq.
func (s *Sequence) BeginIter() *SequenceIter {
	var arg0 *C.GSequence

	arg0 = (*C.GSequence)(unsafe.Pointer(s.Native()))

	var cret *C.GSequenceIter
	var ret1 *SequenceIter

	cret = C.g_sequence_get_begin_iter(arg0)

	ret1 = WrapSequenceIter(unsafe.Pointer(cret))

	return ret1
}

// EndIter returns the end iterator for @seg
func (s *Sequence) EndIter() *SequenceIter {
	var arg0 *C.GSequence

	arg0 = (*C.GSequence)(unsafe.Pointer(s.Native()))

	var cret *C.GSequenceIter
	var ret1 *SequenceIter

	cret = C.g_sequence_get_end_iter(arg0)

	ret1 = WrapSequenceIter(unsafe.Pointer(cret))

	return ret1
}

// IterAtPos returns the iterator at position @pos. If @pos is negative or
// larger than the number of items in @seq, the end iterator is returned.
func (s *Sequence) IterAtPos(pos int) *SequenceIter {
	var arg0 *C.GSequence
	var arg1 C.gint

	arg0 = (*C.GSequence)(unsafe.Pointer(s.Native()))
	arg1 = C.gint(pos)

	var cret *C.GSequenceIter
	var ret1 *SequenceIter

	cret = C.g_sequence_get_iter_at_pos(arg0, pos)

	ret1 = WrapSequenceIter(unsafe.Pointer(cret))

	return ret1
}

// Length returns the length of @seq. Note that this method is O(h) where `h' is
// the height of the tree. It is thus more efficient to use
// g_sequence_is_empty() when comparing the length to zero.
func (s *Sequence) Length() int {
	var arg0 *C.GSequence

	arg0 = (*C.GSequence)(unsafe.Pointer(s.Native()))

	var cret C.gint
	var ret1 int

	cret = C.g_sequence_get_length(arg0)

	ret1 = C.gint(cret)

	return ret1
}

// InsertSorted inserts @data into @seq using @cmp_func to determine the new
// position. The sequence must already be sorted according to @cmp_func;
// otherwise the new position of @data is undefined.
//
// @cmp_func is called with two items of the @seq, and @cmp_data. It should
// return 0 if the items are equal, a negative value if the first item comes
// before the second, and a positive value if the second item comes before the
// first.
//
// Note that when adding a large amount of data to a #GSequence, it is more
// efficient to do unsorted insertions and then call g_sequence_sort() or
// g_sequence_sort_iter().
func (s *Sequence) InsertSorted(data interface{}, cmpFunc CompareDataFunc) *SequenceIter {
	var arg0 *C.GSequence

	arg0 = (*C.GSequence)(unsafe.Pointer(s.Native()))

	var cret *C.GSequenceIter
	var ret1 *SequenceIter

	cret = C.g_sequence_insert_sorted(arg0, data, cmpFunc, cmpData)

	ret1 = WrapSequenceIter(unsafe.Pointer(cret))

	return ret1
}

// InsertSortedIter: like g_sequence_insert_sorted(), but uses a IterCompareFunc
// instead of a DataFunc as the compare function.
//
// @iter_cmp is called with two iterators pointing into @seq. It should return 0
// if the iterators are equal, a negative value if the first iterator comes
// before the second, and a positive value if the second iterator comes before
// the first.
//
// Note that when adding a large amount of data to a #GSequence, it is more
// efficient to do unsorted insertions and then call g_sequence_sort() or
// g_sequence_sort_iter().
func (s *Sequence) InsertSortedIter(data interface{}, iterCmp SequenceIterCompareFunc) *SequenceIter {
	var arg0 *C.GSequence

	arg0 = (*C.GSequence)(unsafe.Pointer(s.Native()))

	var cret *C.GSequenceIter
	var ret1 *SequenceIter

	cret = C.g_sequence_insert_sorted_iter(arg0, data, iterCmp, cmpData)

	ret1 = WrapSequenceIter(unsafe.Pointer(cret))

	return ret1
}

// IsEmpty returns true if the sequence contains zero items.
//
// This function is functionally identical to checking the result of
// g_sequence_get_length() being equal to zero. However this function is
// implemented in O(1) running time.
func (s *Sequence) IsEmpty() bool {
	var arg0 *C.GSequence

	arg0 = (*C.GSequence)(unsafe.Pointer(s.Native()))

	var cret C.gboolean
	var ret1 bool

	cret = C.g_sequence_is_empty(arg0)

	ret1 = C.bool(cret) != C.false

	return ret1
}

// Lookup returns an iterator pointing to the position of the first item found
// equal to @data according to @cmp_func and @cmp_data. If more than one item is
// equal, it is not guaranteed that it is the first which is returned. In that
// case, you can use g_sequence_iter_next() and g_sequence_iter_prev() to get
// others.
//
// @cmp_func is called with two items of the @seq, and @cmp_data. It should
// return 0 if the items are equal, a negative value if the first item comes
// before the second, and a positive value if the second item comes before the
// first.
//
// This function will fail if the data contained in the sequence is unsorted.
func (s *Sequence) Lookup(data interface{}, cmpFunc CompareDataFunc) *SequenceIter {
	var arg0 *C.GSequence

	arg0 = (*C.GSequence)(unsafe.Pointer(s.Native()))

	var cret *C.GSequenceIter
	var ret1 *SequenceIter

	cret = C.g_sequence_lookup(arg0, data, cmpFunc, cmpData)

	ret1 = WrapSequenceIter(unsafe.Pointer(cret))

	return ret1
}

// LookupIter: like g_sequence_lookup(), but uses a IterCompareFunc instead of a
// DataFunc as the compare function.
//
// @iter_cmp is called with two iterators pointing into @seq. It should return 0
// if the iterators are equal, a negative value if the first iterator comes
// before the second, and a positive value if the second iterator comes before
// the first.
//
// This function will fail if the data contained in the sequence is unsorted.
func (s *Sequence) LookupIter(data interface{}, iterCmp SequenceIterCompareFunc) *SequenceIter {
	var arg0 *C.GSequence

	arg0 = (*C.GSequence)(unsafe.Pointer(s.Native()))

	var cret *C.GSequenceIter
	var ret1 *SequenceIter

	cret = C.g_sequence_lookup_iter(arg0, data, iterCmp, cmpData)

	ret1 = WrapSequenceIter(unsafe.Pointer(cret))

	return ret1
}

// Prepend adds a new item to the front of @seq
func (s *Sequence) Prepend(data interface{}) *SequenceIter {
	var arg0 *C.GSequence
	var arg1 C.gpointer

	arg0 = (*C.GSequence)(unsafe.Pointer(s.Native()))
	arg1 = C.gpointer(data)

	var cret *C.GSequenceIter
	var ret1 *SequenceIter

	cret = C.g_sequence_prepend(arg0, data)

	ret1 = WrapSequenceIter(unsafe.Pointer(cret))

	return ret1
}

// Search returns an iterator pointing to the position where @data would be
// inserted according to @cmp_func and @cmp_data.
//
// @cmp_func is called with two items of the @seq, and @cmp_data. It should
// return 0 if the items are equal, a negative value if the first item comes
// before the second, and a positive value if the second item comes before the
// first.
//
// If you are simply searching for an existing element of the sequence, consider
// using g_sequence_lookup().
//
// This function will fail if the data contained in the sequence is unsorted.
func (s *Sequence) Search(data interface{}, cmpFunc CompareDataFunc) *SequenceIter {
	var arg0 *C.GSequence

	arg0 = (*C.GSequence)(unsafe.Pointer(s.Native()))

	var cret *C.GSequenceIter
	var ret1 *SequenceIter

	cret = C.g_sequence_search(arg0, data, cmpFunc, cmpData)

	ret1 = WrapSequenceIter(unsafe.Pointer(cret))

	return ret1
}

// SearchIter: like g_sequence_search(), but uses a IterCompareFunc instead of a
// DataFunc as the compare function.
//
// @iter_cmp is called with two iterators pointing into @seq. It should return 0
// if the iterators are equal, a negative value if the first iterator comes
// before the second, and a positive value if the second iterator comes before
// the first.
//
// If you are simply searching for an existing element of the sequence, consider
// using g_sequence_lookup_iter().
//
// This function will fail if the data contained in the sequence is unsorted.
func (s *Sequence) SearchIter(data interface{}, iterCmp SequenceIterCompareFunc) *SequenceIter {
	var arg0 *C.GSequence

	arg0 = (*C.GSequence)(unsafe.Pointer(s.Native()))

	var cret *C.GSequenceIter
	var ret1 *SequenceIter

	cret = C.g_sequence_search_iter(arg0, data, iterCmp, cmpData)

	ret1 = WrapSequenceIter(unsafe.Pointer(cret))

	return ret1
}

// Sort sorts @seq using @cmp_func.
//
// @cmp_func is passed two items of @seq and should return 0 if they are equal,
// a negative value if the first comes before the second, and a positive value
// if the second comes before the first.
func (s *Sequence) Sort(cmpFunc CompareDataFunc) {
	var arg0 *C.GSequence

	arg0 = (*C.GSequence)(unsafe.Pointer(s.Native()))

	C.g_sequence_sort(arg0, cmpFunc, cmpData)
}

// SortIter: like g_sequence_sort(), but uses a IterCompareFunc instead of a
// DataFunc as the compare function
//
// @cmp_func is called with two iterators pointing into @seq. It should return 0
// if the iterators are equal, a negative value if the first iterator comes
// before the second, and a positive value if the second iterator comes before
// the first.
func (s *Sequence) SortIter(cmpFunc SequenceIterCompareFunc) {
	var arg0 *C.GSequence

	arg0 = (*C.GSequence)(unsafe.Pointer(s.Native()))

	C.g_sequence_sort_iter(arg0, cmpFunc, cmpData)
}

// SequenceIter: the Iter struct is an opaque data type representing an iterator
// pointing into a #GSequence.
type SequenceIter struct {
	native C.GSequenceIter
}

// WrapSequenceIter wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSequenceIter(ptr unsafe.Pointer) *SequenceIter {
	if ptr == nil {
		return nil
	}

	return (*SequenceIter)(ptr)
}

func marshalSequenceIter(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSequenceIter(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (s *SequenceIter) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

// Compare returns a negative number if @a comes before @b, 0 if they are equal,
// and a positive number if @a comes after @b.
//
// The @a and @b iterators must point into the same sequence.
func (a *SequenceIter) Compare(b *SequenceIter) int {
	var arg0 *C.GSequenceIter
	var arg1 *C.GSequenceIter

	arg0 = (*C.GSequenceIter)(unsafe.Pointer(a.Native()))
	arg1 = (*C.GSequenceIter)(unsafe.Pointer(b.Native()))

	var cret C.gint
	var ret1 int

	cret = C.g_sequence_iter_compare(arg0, b)

	ret1 = C.gint(cret)

	return ret1
}

// Position returns the position of @iter
func (i *SequenceIter) Position() int {
	var arg0 *C.GSequenceIter

	arg0 = (*C.GSequenceIter)(unsafe.Pointer(i.Native()))

	var cret C.gint
	var ret1 int

	cret = C.g_sequence_iter_get_position(arg0)

	ret1 = C.gint(cret)

	return ret1
}

// Sequence returns the #GSequence that @iter points into.
func (i *SequenceIter) Sequence() *Sequence {
	var arg0 *C.GSequenceIter

	arg0 = (*C.GSequenceIter)(unsafe.Pointer(i.Native()))

	var cret *C.GSequence
	var ret1 *Sequence

	cret = C.g_sequence_iter_get_sequence(arg0)

	ret1 = WrapSequence(unsafe.Pointer(cret))

	return ret1
}

// IsBegin returns whether @iter is the begin iterator
func (i *SequenceIter) IsBegin() bool {
	var arg0 *C.GSequenceIter

	arg0 = (*C.GSequenceIter)(unsafe.Pointer(i.Native()))

	var cret C.gboolean
	var ret1 bool

	cret = C.g_sequence_iter_is_begin(arg0)

	ret1 = C.bool(cret) != C.false

	return ret1
}

// IsEnd returns whether @iter is the end iterator
func (i *SequenceIter) IsEnd() bool {
	var arg0 *C.GSequenceIter

	arg0 = (*C.GSequenceIter)(unsafe.Pointer(i.Native()))

	var cret C.gboolean
	var ret1 bool

	cret = C.g_sequence_iter_is_end(arg0)

	ret1 = C.bool(cret) != C.false

	return ret1
}

// Move returns the Iter which is @delta positions away from @iter. If @iter is
// closer than -@delta positions to the beginning of the sequence, the begin
// iterator is returned. If @iter is closer than @delta positions to the end of
// the sequence, the end iterator is returned.
func (i *SequenceIter) Move(delta int) *SequenceIter {
	var arg0 *C.GSequenceIter
	var arg1 C.gint

	arg0 = (*C.GSequenceIter)(unsafe.Pointer(i.Native()))
	arg1 = C.gint(delta)

	var cret *C.GSequenceIter
	var ret1 *SequenceIter

	cret = C.g_sequence_iter_move(arg0, delta)

	ret1 = WrapSequenceIter(unsafe.Pointer(cret))

	return ret1
}

// Next returns an iterator pointing to the next position after @iter. If @iter
// is the end iterator, the end iterator is returned.
func (i *SequenceIter) Next() *SequenceIter {
	var arg0 *C.GSequenceIter

	arg0 = (*C.GSequenceIter)(unsafe.Pointer(i.Native()))

	var cret *C.GSequenceIter
	var ret1 *SequenceIter

	cret = C.g_sequence_iter_next(arg0)

	ret1 = WrapSequenceIter(unsafe.Pointer(cret))

	return ret1
}

// Prev returns an iterator pointing to the previous position before @iter. If
// @iter is the begin iterator, the begin iterator is returned.
func (i *SequenceIter) Prev() *SequenceIter {
	var arg0 *C.GSequenceIter

	arg0 = (*C.GSequenceIter)(unsafe.Pointer(i.Native()))

	var cret *C.GSequenceIter
	var ret1 *SequenceIter

	cret = C.g_sequence_iter_prev(arg0)

	ret1 = WrapSequenceIter(unsafe.Pointer(cret))

	return ret1
}
