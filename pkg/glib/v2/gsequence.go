// Code generated by girgen. DO NOT EDIT.

package glib

import (
	"unsafe"
)

// #cgo pkg-config: glib-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib.h>
import "C"

// Sequence: the #GSequence struct is an opaque data type representing a
// [sequence][glib-Sequences] data type.
type Sequence C.GSequence

// WrapSequence wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSequence(ptr unsafe.Pointer) *Sequence {
	return (*Sequence)(ptr)
}

// Native returns the underlying C source pointer.
func (s *Sequence) Native() unsafe.Pointer {
	return unsafe.Pointer(s)
}

// Append: like g_sequence_sort(), but uses a IterCompareFunc instead of a
// DataFunc as the compare function
//
// @cmp_func is called with two iterators pointing into @seq. It should return 0
// if the iterators are equal, a negative value if the first iterator comes
// before the second, and a positive value if the second iterator comes before
// the first.
func (s *Sequence) Append(data interface{}) *SequenceIter {
	var _arg0 *C.GSequence     // out
	var _arg1 C.gpointer       // out
	var _cret *C.GSequenceIter // in

	_arg0 = (*C.GSequence)(unsafe.Pointer(s.Native()))
	_arg1 = C.gpointer(box.Assign(unsafe.Pointer(data)))

	_cret = C.g_sequence_append(_arg0, _arg1)

	var _sequenceIter *SequenceIter // out

	_sequenceIter = (*SequenceIter)(unsafe.Pointer(_cret))

	return _sequenceIter
}

// Free: like g_sequence_sort(), but uses a IterCompareFunc instead of a
// DataFunc as the compare function
//
// @cmp_func is called with two iterators pointing into @seq. It should return 0
// if the iterators are equal, a negative value if the first iterator comes
// before the second, and a positive value if the second iterator comes before
// the first.
func (s *Sequence) Free() {
	var _arg0 *C.GSequence // out

	_arg0 = (*C.GSequence)(unsafe.Pointer(s.Native()))

	C.g_sequence_free(_arg0)
}

// BeginIter: like g_sequence_sort(), but uses a IterCompareFunc instead of a
// DataFunc as the compare function
//
// @cmp_func is called with two iterators pointing into @seq. It should return 0
// if the iterators are equal, a negative value if the first iterator comes
// before the second, and a positive value if the second iterator comes before
// the first.
func (s *Sequence) BeginIter() *SequenceIter {
	var _arg0 *C.GSequence     // out
	var _cret *C.GSequenceIter // in

	_arg0 = (*C.GSequence)(unsafe.Pointer(s.Native()))

	_cret = C.g_sequence_get_begin_iter(_arg0)

	var _sequenceIter *SequenceIter // out

	_sequenceIter = (*SequenceIter)(unsafe.Pointer(_cret))

	return _sequenceIter
}

// EndIter: like g_sequence_sort(), but uses a IterCompareFunc instead of a
// DataFunc as the compare function
//
// @cmp_func is called with two iterators pointing into @seq. It should return 0
// if the iterators are equal, a negative value if the first iterator comes
// before the second, and a positive value if the second iterator comes before
// the first.
func (s *Sequence) EndIter() *SequenceIter {
	var _arg0 *C.GSequence     // out
	var _cret *C.GSequenceIter // in

	_arg0 = (*C.GSequence)(unsafe.Pointer(s.Native()))

	_cret = C.g_sequence_get_end_iter(_arg0)

	var _sequenceIter *SequenceIter // out

	_sequenceIter = (*SequenceIter)(unsafe.Pointer(_cret))

	return _sequenceIter
}

// IterAtPos: like g_sequence_sort(), but uses a IterCompareFunc instead of a
// DataFunc as the compare function
//
// @cmp_func is called with two iterators pointing into @seq. It should return 0
// if the iterators are equal, a negative value if the first iterator comes
// before the second, and a positive value if the second iterator comes before
// the first.
func (s *Sequence) IterAtPos(pos int) *SequenceIter {
	var _arg0 *C.GSequence     // out
	var _arg1 C.gint           // out
	var _cret *C.GSequenceIter // in

	_arg0 = (*C.GSequence)(unsafe.Pointer(s.Native()))
	_arg1 = C.gint(pos)

	_cret = C.g_sequence_get_iter_at_pos(_arg0, _arg1)

	var _sequenceIter *SequenceIter // out

	_sequenceIter = (*SequenceIter)(unsafe.Pointer(_cret))

	return _sequenceIter
}

// Length: like g_sequence_sort(), but uses a IterCompareFunc instead of a
// DataFunc as the compare function
//
// @cmp_func is called with two iterators pointing into @seq. It should return 0
// if the iterators are equal, a negative value if the first iterator comes
// before the second, and a positive value if the second iterator comes before
// the first.
func (s *Sequence) Length() int {
	var _arg0 *C.GSequence // out
	var _cret C.gint       // in

	_arg0 = (*C.GSequence)(unsafe.Pointer(s.Native()))

	_cret = C.g_sequence_get_length(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// IsEmpty: like g_sequence_sort(), but uses a IterCompareFunc instead of a
// DataFunc as the compare function
//
// @cmp_func is called with two iterators pointing into @seq. It should return 0
// if the iterators are equal, a negative value if the first iterator comes
// before the second, and a positive value if the second iterator comes before
// the first.
func (s *Sequence) IsEmpty() bool {
	var _arg0 *C.GSequence // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GSequence)(unsafe.Pointer(s.Native()))

	_cret = C.g_sequence_is_empty(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Prepend: like g_sequence_sort(), but uses a IterCompareFunc instead of a
// DataFunc as the compare function
//
// @cmp_func is called with two iterators pointing into @seq. It should return 0
// if the iterators are equal, a negative value if the first iterator comes
// before the second, and a positive value if the second iterator comes before
// the first.
func (s *Sequence) Prepend(data interface{}) *SequenceIter {
	var _arg0 *C.GSequence     // out
	var _arg1 C.gpointer       // out
	var _cret *C.GSequenceIter // in

	_arg0 = (*C.GSequence)(unsafe.Pointer(s.Native()))
	_arg1 = C.gpointer(box.Assign(unsafe.Pointer(data)))

	_cret = C.g_sequence_prepend(_arg0, _arg1)

	var _sequenceIter *SequenceIter // out

	_sequenceIter = (*SequenceIter)(unsafe.Pointer(_cret))

	return _sequenceIter
}

// SequenceIter: the Iter struct is an opaque data type representing an iterator
// pointing into a #GSequence.
type SequenceIter C.GSequenceIter

// WrapSequenceIter wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSequenceIter(ptr unsafe.Pointer) *SequenceIter {
	return (*SequenceIter)(ptr)
}

// Native returns the underlying C source pointer.
func (s *SequenceIter) Native() unsafe.Pointer {
	return unsafe.Pointer(s)
}

// Compare returns an iterator pointing to the previous position before @iter.
// If @iter is the begin iterator, the begin iterator is returned.
func (i *SequenceIter) Compare(b *SequenceIter) int {
	var _arg0 *C.GSequenceIter // out
	var _arg1 *C.GSequenceIter // out
	var _cret C.gint           // in

	_arg0 = (*C.GSequenceIter)(unsafe.Pointer(a.Native()))
	_arg1 = (*C.GSequenceIter)(unsafe.Pointer(b.Native()))

	_cret = C.g_sequence_iter_compare(_arg0, _arg1)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// Position returns an iterator pointing to the previous position before @iter.
// If @iter is the begin iterator, the begin iterator is returned.
func (i *SequenceIter) Position() int {
	var _arg0 *C.GSequenceIter // out
	var _cret C.gint           // in

	_arg0 = (*C.GSequenceIter)(unsafe.Pointer(i.Native()))

	_cret = C.g_sequence_iter_get_position(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// Sequence returns an iterator pointing to the previous position before @iter.
// If @iter is the begin iterator, the begin iterator is returned.
func (i *SequenceIter) Sequence() *Sequence {
	var _arg0 *C.GSequenceIter // out
	var _cret *C.GSequence     // in

	_arg0 = (*C.GSequenceIter)(unsafe.Pointer(i.Native()))

	_cret = C.g_sequence_iter_get_sequence(_arg0)

	var _sequence *Sequence // out

	_sequence = (*Sequence)(unsafe.Pointer(_cret))

	return _sequence
}

// IsBegin returns an iterator pointing to the previous position before @iter.
// If @iter is the begin iterator, the begin iterator is returned.
func (i *SequenceIter) IsBegin() bool {
	var _arg0 *C.GSequenceIter // out
	var _cret C.gboolean       // in

	_arg0 = (*C.GSequenceIter)(unsafe.Pointer(i.Native()))

	_cret = C.g_sequence_iter_is_begin(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// IsEnd returns an iterator pointing to the previous position before @iter. If
// @iter is the begin iterator, the begin iterator is returned.
func (i *SequenceIter) IsEnd() bool {
	var _arg0 *C.GSequenceIter // out
	var _cret C.gboolean       // in

	_arg0 = (*C.GSequenceIter)(unsafe.Pointer(i.Native()))

	_cret = C.g_sequence_iter_is_end(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Move returns an iterator pointing to the previous position before @iter. If
// @iter is the begin iterator, the begin iterator is returned.
func (i *SequenceIter) Move(delta int) *SequenceIter {
	var _arg0 *C.GSequenceIter // out
	var _arg1 C.gint           // out
	var _cret *C.GSequenceIter // in

	_arg0 = (*C.GSequenceIter)(unsafe.Pointer(i.Native()))
	_arg1 = C.gint(delta)

	_cret = C.g_sequence_iter_move(_arg0, _arg1)

	var _sequenceIter *SequenceIter // out

	_sequenceIter = (*SequenceIter)(unsafe.Pointer(_cret))

	return _sequenceIter
}

// Next returns an iterator pointing to the previous position before @iter. If
// @iter is the begin iterator, the begin iterator is returned.
func (i *SequenceIter) Next() *SequenceIter {
	var _arg0 *C.GSequenceIter // out
	var _cret *C.GSequenceIter // in

	_arg0 = (*C.GSequenceIter)(unsafe.Pointer(i.Native()))

	_cret = C.g_sequence_iter_next(_arg0)

	var _sequenceIter *SequenceIter // out

	_sequenceIter = (*SequenceIter)(unsafe.Pointer(_cret))

	return _sequenceIter
}

// Prev returns an iterator pointing to the previous position before @iter. If
// @iter is the begin iterator, the begin iterator is returned.
func (i *SequenceIter) Prev() *SequenceIter {
	var _arg0 *C.GSequenceIter // out
	var _cret *C.GSequenceIter // in

	_arg0 = (*C.GSequenceIter)(unsafe.Pointer(i.Native()))

	_cret = C.g_sequence_iter_prev(_arg0)

	var _sequenceIter *SequenceIter // out

	_sequenceIter = (*SequenceIter)(unsafe.Pointer(_cret))

	return _sequenceIter
}
