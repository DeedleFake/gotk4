// Code generated by girgen. DO NOT EDIT.

package glib

import (
	"unsafe"
)

// #cgo pkg-config: glib-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib.h>
import "C"

// Sequence: the #GSequence struct is an opaque data type representing a
// [sequence][glib-Sequences] data type.
type Sequence struct {
	native C.GSequence
}

// WrapSequence wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSequence(ptr unsafe.Pointer) *Sequence {
	if ptr == nil {
		return nil
	}

	return (*Sequence)(ptr)
}

// Native returns the underlying C source pointer.
func (s *Sequence) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

// Free frees the memory allocated for @seq. If @seq has a data destroy function
// associated with it, that function is called on all items in @seq.
func (s *Sequence) Free() {
	var _arg0 *C.GSequence // out

	_arg0 = (*C.GSequence)(unsafe.Pointer(s.Native()))

	C.g_sequence_free(_arg0)
}

// Length returns the positive length (>= 0) of @seq. Note that this method is
// O(h) where `h' is the height of the tree. It is thus more efficient to use
// g_sequence_is_empty() when comparing the length to zero.
func (s *Sequence) Length() int {
	var _arg0 *C.GSequence // out

	_arg0 = (*C.GSequence)(unsafe.Pointer(s.Native()))

	var _cret C.gint // in

	_cret = C.g_sequence_get_length(_arg0)

	var _gint int // out

	_gint = (int)(_cret)

	return _gint
}

// IsEmpty returns true if the sequence contains zero items.
//
// This function is functionally identical to checking the result of
// g_sequence_get_length() being equal to zero. However this function is
// implemented in O(1) running time.
func (s *Sequence) IsEmpty() bool {
	var _arg0 *C.GSequence // out

	_arg0 = (*C.GSequence)(unsafe.Pointer(s.Native()))

	var _cret C.gboolean // in

	_cret = C.g_sequence_is_empty(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SequenceIter: the Iter struct is an opaque data type representing an iterator
// pointing into a #GSequence.
type SequenceIter struct {
	native C.GSequenceIter
}

// WrapSequenceIter wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSequenceIter(ptr unsafe.Pointer) *SequenceIter {
	if ptr == nil {
		return nil
	}

	return (*SequenceIter)(ptr)
}

// Native returns the underlying C source pointer.
func (s *SequenceIter) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

// Compare returns a negative number if @a comes before @b, 0 if they are equal,
// and a positive number if @a comes after @b.
//
// The @a and @b iterators must point into the same sequence.
func (a *SequenceIter) Compare(b *SequenceIter) int {
	var _arg0 *C.GSequenceIter // out
	var _arg1 *C.GSequenceIter // out

	_arg0 = (*C.GSequenceIter)(unsafe.Pointer(a.Native()))
	_arg1 = (*C.GSequenceIter)(unsafe.Pointer(b.Native()))

	var _cret C.gint // in

	_cret = C.g_sequence_iter_compare(_arg0, _arg1)

	var _gint int // out

	_gint = (int)(_cret)

	return _gint
}

// Position returns the position of @iter
func (i *SequenceIter) Position() int {
	var _arg0 *C.GSequenceIter // out

	_arg0 = (*C.GSequenceIter)(unsafe.Pointer(i.Native()))

	var _cret C.gint // in

	_cret = C.g_sequence_iter_get_position(_arg0)

	var _gint int // out

	_gint = (int)(_cret)

	return _gint
}

// IsBegin returns whether @iter is the begin iterator
func (i *SequenceIter) IsBegin() bool {
	var _arg0 *C.GSequenceIter // out

	_arg0 = (*C.GSequenceIter)(unsafe.Pointer(i.Native()))

	var _cret C.gboolean // in

	_cret = C.g_sequence_iter_is_begin(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// IsEnd returns whether @iter is the end iterator
func (i *SequenceIter) IsEnd() bool {
	var _arg0 *C.GSequenceIter // out

	_arg0 = (*C.GSequenceIter)(unsafe.Pointer(i.Native()))

	var _cret C.gboolean // in

	_cret = C.g_sequence_iter_is_end(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}
