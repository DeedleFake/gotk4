// Code generated by girgen. DO NOT EDIT.

package glib

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/internal/ptr"
)

// #cgo pkg-config: glib-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <glib.h>
import "C"

// StrvBuilder is a method of easily building dynamically sized NULL-terminated
// string arrays.
//
// The following example shows how to build a two element array:
//
//    g_autoptr(GStrvBuilder) builder = g_strv_builder_new ();
//    g_strv_builder_add (builder, "hello");
//    g_strv_builder_add (builder, "world");
//    g_auto(GStrv) array = g_strv_builder_end (builder);
type StrvBuilder struct {
	native C.GStrvBuilder
}

// WrapStrvBuilder wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapStrvBuilder(ptr unsafe.Pointer) *StrvBuilder {
	if ptr == nil {
		return nil
	}

	return (*StrvBuilder)(ptr)
}

func marshalStrvBuilder(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapStrvBuilder(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (s *StrvBuilder) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

// Add: add a string to the end of the array.
//
// Since 2.68
func (b *StrvBuilder) Add(value string) {
	var _arg0 *C.GStrvBuilder
	var _arg1 *C.char

	_arg0 = (*C.GStrvBuilder)(unsafe.Pointer(b.Native()))
	_arg1 = (*C.char)(C.CString(value))
	defer C.free(unsafe.Pointer(_arg1))

	C.g_strv_builder_add(_arg0, _arg1)
}

// End ends the builder process and returns the constructed NULL-terminated
// string array. The returned value should be freed with g_strfreev() when no
// longer needed.
func (b *StrvBuilder) End() []string {
	var _arg0 *C.GStrvBuilder

	_arg0 = (*C.GStrvBuilder)(unsafe.Pointer(b.Native()))

	var _cret C.GStrv

	cret = C.g_strv_builder_end(_arg0)

	var _utf8s []string

	{
		var length int
		for p := _cret; *p != 0; p = (C.GStrv)(ptr.Add(unsafe.Pointer(p), unsafe.Sizeof(int(0)))) {
			length++
			if length < 0 {
				panic(`length overflow`)
			}
		}

		var src []*C.gchar
		ptr.SetSlice(unsafe.Pointer(&src), unsafe.Pointer(_cret), int(length))

		_utf8s = make([]string, length)
		for i := uintptr(0); i < uintptr(length); i += unsafe.Sizeof(int(0)) {
			_utf8s = C.GoString(_cret)
			defer C.free(unsafe.Pointer(_cret))
		}
	}

	return _utf8s
}

// Ref: atomically increments the reference count of @builder by one. This
// function is thread-safe and may be called from any thread.
func (b *StrvBuilder) Ref() *StrvBuilder {
	var _arg0 *C.GStrvBuilder

	_arg0 = (*C.GStrvBuilder)(unsafe.Pointer(b.Native()))

	var _cret *C.GStrvBuilder

	cret = C.g_strv_builder_ref(_arg0)

	var _strvBuilder *StrvBuilder

	_strvBuilder = WrapStrvBuilder(unsafe.Pointer(_cret))
	runtime.SetFinalizer(_strvBuilder, func(v *StrvBuilder) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return _strvBuilder
}

// Unref decreases the reference count on @builder.
//
// In the event that there are no more references, releases all memory
// associated with the Builder.
func (b *StrvBuilder) Unref() {
	var _arg0 *C.GStrvBuilder

	_arg0 = (*C.GStrvBuilder)(unsafe.Pointer(b.Native()))

	C.g_strv_builder_unref(_arg0)
}
