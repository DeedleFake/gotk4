// Code generated by girgen. DO NOT EDIT.

package glib

import (
	"unsafe"
)

// #cgo pkg-config: glib-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib.h>
import "C"

// OnErrorQuery prompts the user with `[E]xit, [H]alt, show [S]tack trace or
// [P]roceed`. This function is intended to be used for debugging use only. The
// following example shows how it can be used together with the g_log()
// functions.
//
//    #include <glib.h>
//
//    static void
//    log_handler (const gchar   *log_domain,
//                 GLogLevelFlags log_level,
//                 const gchar   *message,
//                 gpointer       user_data)
//    {
//      g_log_default_handler (log_domain, log_level, message, user_data);
//
//      g_on_error_query (MY_PROGRAM_NAME);
//    }
//
//    int
//    main (int argc, char *argv[])
//    {
//      g_log_set_handler (MY_LOG_DOMAIN,
//                         G_LOG_LEVEL_WARNING |
//                         G_LOG_LEVEL_ERROR |
//                         G_LOG_LEVEL_CRITICAL,
//                         log_handler,
//                         NULL);
//      ...
//
// If "[E]xit" is selected, the application terminates with a call to _exit(0).
//
// If "[S]tack" trace is selected, g_on_error_stack_trace() is called. This
// invokes gdb, which attaches to the current process and shows a stack trace.
// The prompt is then shown again.
//
// If "[P]roceed" is selected, the function returns.
//
// This function may cause different actions on non-UNIX platforms.
//
// On Windows consider using the `G_DEBUGGER` environment variable (see Running
// GLib Applications (glib-running.html)) and calling g_on_error_stack_trace()
// instead.
func OnErrorQuery(prgName string) {
	var arg1 *C.gchar

	arg1 = (*C.gchar)(C.CString(prgName))
	defer C.free(unsafe.Pointer(arg1))

	C.g_on_error_query(prgName)
}

// OnErrorStackTrace invokes gdb, which attaches to the current process and
// shows a stack trace. Called by g_on_error_query() when the "[S]tack trace"
// option is selected. You can get the current process's program name with
// g_get_prgname(), assuming that you have called gtk_init() or gdk_init().
//
// This function may cause different actions on non-UNIX platforms.
//
// When running on Windows, this function is *not* called by g_on_error_query().
// If called directly, it will raise an exception, which will crash the program.
// If the `G_DEBUGGER` environment variable is set, a debugger will be invoked
// to attach and handle that exception (see Running GLib Applications
// (glib-running.html)).
func OnErrorStackTrace(prgName string) {
	var arg1 *C.gchar

	arg1 = (*C.gchar)(C.CString(prgName))
	defer C.free(unsafe.Pointer(arg1))

	C.g_on_error_stack_trace(prgName)
}
