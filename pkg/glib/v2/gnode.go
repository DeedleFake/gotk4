// Code generated by girgen. DO NOT EDIT.

package glib

import (
	"unsafe"
)

// #cgo pkg-config: glib-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <glib.h>
import "C"

// TraverseType specifies the type of traversal performed by g_tree_traverse(),
// g_node_traverse() and g_node_find(). The different orders are illustrated
// here: - In order: A, B, C, D, E, F, G, H, I !
// (Sorted_binary_tree_inorder.svg) - Pre order: F, B, A, D, C, E, G, I, H !
// (Sorted_binary_tree_preorder.svg) - Post order: A, C, E, D, B, H, I, G, F !
// (Sorted_binary_tree_postorder.svg) - Level order: F, B, G, A, D, I, C, E, H !
// (Sorted_binary_tree_breadth-first_traversal.svg)
type TraverseType int

const (
	// TraverseTypeInOrder vists a node's left child first, then the node
	// itself, then its right child. This is the one to use if you want the
	// output sorted according to the compare function.
	TraverseTypeInOrder TraverseType = 0
	// TraverseTypePreOrder visits a node, then its children.
	TraverseTypePreOrder TraverseType = 1
	// TraverseTypePostOrder visits the node's children, then the node itself.
	TraverseTypePostOrder TraverseType = 2
	// TraverseTypeLevelOrder is not implemented for [balanced binary
	// trees][glib-Balanced-Binary-Trees]. For [n-ary trees][glib-N-ary-Trees],
	// it vists the root node first, then its children, then its grandchildren,
	// and so on. Note that this is less efficient than the other orders.
	TraverseTypeLevelOrder TraverseType = 3
)

// TraverseFlags specifies which nodes are visited during several of the tree
// functions, including g_node_traverse() and g_node_find().
type TraverseFlags int

const (
	// TraverseFlagsLeaves: only leaf nodes should be visited. This name has
	// been introduced in 2.6, for older version use G_TRAVERSE_LEAFS.
	TraverseFlagsLeaves TraverseFlags = 1
	// TraverseFlagsNonLeaves: only non-leaf nodes should be visited. This name
	// has been introduced in 2.6, for older version use G_TRAVERSE_NON_LEAFS.
	TraverseFlagsNonLeaves TraverseFlags = 2
	// TraverseFlagsAll: all nodes should be visited.
	TraverseFlagsAll TraverseFlags = 3
	// TraverseFlagsMask: a mask of all traverse flags.
	TraverseFlagsMask TraverseFlags = 3
	// TraverseFlagsLeafs: identical to G_TRAVERSE_LEAVES.
	TraverseFlagsLeafs TraverseFlags = 1
	// TraverseFlagsNonLeafs: identical to G_TRAVERSE_NON_LEAVES.
	TraverseFlagsNonLeafs TraverseFlags = 2
)

// Node: the #GNode struct represents one node in a [n-ary
// tree][glib-N-ary-Trees].
type Node struct {
	native C.GNode
}

// WrapNode wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapNode(ptr unsafe.Pointer) *Node {
	if ptr == nil {
		return nil
	}

	return (*Node)(ptr)
}

func marshalNode(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapNode(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (n *Node) Native() unsafe.Pointer {
	return unsafe.Pointer(&n.native)
}

// Data gets the field inside the struct.
func (n *Node) Data() interface{} {
	var v interface{}
	v = (interface{})(n.native.data)
	return v
}

// Next gets the field inside the struct.
func (n *Node) Next() *Node {
	var v *Node
	v = WrapNode(unsafe.Pointer(n.native.next))
	return v
}

// Prev gets the field inside the struct.
func (n *Node) Prev() *Node {
	var v *Node
	v = WrapNode(unsafe.Pointer(n.native.prev))
	return v
}

// Parent gets the field inside the struct.
func (n *Node) Parent() *Node {
	var v *Node
	v = WrapNode(unsafe.Pointer(n.native.parent))
	return v
}

// Children gets the field inside the struct.
func (n *Node) Children() *Node {
	var v *Node
	v = WrapNode(unsafe.Pointer(n.native.children))
	return v
}

// ChildIndex gets the position of the first child of a #GNode which contains
// the given data.
func (n *Node) ChildIndex(data interface{}) int {
	var _arg0 *C.GNode
	var _arg1 C.gpointer

	_arg0 = (*C.GNode)(unsafe.Pointer(n.Native()))
	_arg1 = C.gpointer(data)

	var _cret C.gint

	cret = C.g_node_child_index(_arg0, _arg1)

	var _gint int

	_gint = (int)(_cret)

	return _gint
}

// ChildPosition gets the position of a #GNode with respect to its siblings.
// @child must be a child of @node. The first child is numbered 0, the second 1,
// and so on.
func (n *Node) ChildPosition(child *Node) int {
	var _arg0 *C.GNode
	var _arg1 *C.GNode

	_arg0 = (*C.GNode)(unsafe.Pointer(n.Native()))
	_arg1 = (*C.GNode)(unsafe.Pointer(child.Native()))

	var _cret C.gint

	cret = C.g_node_child_position(_arg0, _arg1)

	var _gint int

	_gint = (int)(_cret)

	return _gint
}

// ChildrenForeach calls a function for each of the children of a #GNode. Note
// that it doesn't descend beneath the child nodes. @func must not do anything
// that would modify the structure of the tree.
func (n *Node) ChildrenForeach() {
	var _arg0 *C.GNode

	_arg0 = (*C.GNode)(unsafe.Pointer(n.Native()))

	C.g_node_children_foreach(_arg0)
}

// Copy: recursively copies a #GNode (but does not deep-copy the data inside the
// nodes, see g_node_copy_deep() if you need that).
func (n *Node) Copy() *Node {
	var _arg0 *C.GNode

	_arg0 = (*C.GNode)(unsafe.Pointer(n.Native()))

	var _cret *C.GNode

	cret = C.g_node_copy(_arg0)

	var _ret *Node

	_ret = WrapNode(unsafe.Pointer(_cret))

	return _ret
}

// CopyDeep: recursively copies a #GNode and its data.
func (n *Node) CopyDeep() *Node {
	var _arg0 *C.GNode

	_arg0 = (*C.GNode)(unsafe.Pointer(n.Native()))

	var _cret *C.GNode

	cret = C.g_node_copy_deep(_arg0)

	var _ret *Node

	_ret = WrapNode(unsafe.Pointer(_cret))

	return _ret
}

// Depth gets the depth of a #GNode.
//
// If @node is nil the depth is 0. The root node has a depth of 1. For the
// children of the root node the depth is 2. And so on.
func (n *Node) Depth() uint {
	var _arg0 *C.GNode

	_arg0 = (*C.GNode)(unsafe.Pointer(n.Native()))

	var _cret C.guint

	cret = C.g_node_depth(_arg0)

	var _guint uint

	_guint = (uint)(_cret)

	return _guint
}

// Destroy removes @root and its children from the tree, freeing any memory
// allocated.
func (r *Node) Destroy() {
	var _arg0 *C.GNode

	_arg0 = (*C.GNode)(unsafe.Pointer(r.Native()))

	C.g_node_destroy(_arg0)
}

// Find finds a #GNode in a tree.
func (r *Node) Find(order TraverseType, flags TraverseFlags, data interface{}) *Node {
	var _arg0 *C.GNode
	var _arg1 C.GTraverseType
	var _arg2 C.GTraverseFlags
	var _arg3 C.gpointer

	_arg0 = (*C.GNode)(unsafe.Pointer(r.Native()))
	_arg1 = (C.GTraverseType)(order)
	_arg2 = (C.GTraverseFlags)(flags)
	_arg3 = C.gpointer(data)

	var _cret *C.GNode

	cret = C.g_node_find(_arg0, _arg1, _arg2, _arg3)

	var _node *Node

	_node = WrapNode(unsafe.Pointer(_cret))

	return _node
}

// FindChild finds the first child of a #GNode with the given data.
func (n *Node) FindChild(flags TraverseFlags, data interface{}) *Node {
	var _arg0 *C.GNode
	var _arg1 C.GTraverseFlags
	var _arg2 C.gpointer

	_arg0 = (*C.GNode)(unsafe.Pointer(n.Native()))
	_arg1 = (C.GTraverseFlags)(flags)
	_arg2 = C.gpointer(data)

	var _cret *C.GNode

	cret = C.g_node_find_child(_arg0, _arg1, _arg2)

	var _ret *Node

	_ret = WrapNode(unsafe.Pointer(_cret))

	return _ret
}

// FirstSibling gets the first sibling of a #GNode. This could possibly be the
// node itself.
func (n *Node) FirstSibling() *Node {
	var _arg0 *C.GNode

	_arg0 = (*C.GNode)(unsafe.Pointer(n.Native()))

	var _cret *C.GNode

	cret = C.g_node_first_sibling(_arg0)

	var _ret *Node

	_ret = WrapNode(unsafe.Pointer(_cret))

	return _ret
}

// Root gets the root of a tree.
func (n *Node) Root() *Node {
	var _arg0 *C.GNode

	_arg0 = (*C.GNode)(unsafe.Pointer(n.Native()))

	var _cret *C.GNode

	cret = C.g_node_get_root(_arg0)

	var _ret *Node

	_ret = WrapNode(unsafe.Pointer(_cret))

	return _ret
}

// Insert inserts a #GNode beneath the parent at the given position.
func (p *Node) Insert(position int, node *Node) *Node {
	var _arg0 *C.GNode
	var _arg1 C.gint
	var _arg2 *C.GNode

	_arg0 = (*C.GNode)(unsafe.Pointer(p.Native()))
	_arg1 = C.gint(position)
	_arg2 = (*C.GNode)(unsafe.Pointer(node.Native()))

	var _cret *C.GNode

	cret = C.g_node_insert(_arg0, _arg1, _arg2)

	var _ret *Node

	_ret = WrapNode(unsafe.Pointer(_cret))

	return _ret
}

// InsertAfter inserts a #GNode beneath the parent after the given sibling.
func (p *Node) InsertAfter(sibling *Node, node *Node) *Node {
	var _arg0 *C.GNode
	var _arg1 *C.GNode
	var _arg2 *C.GNode

	_arg0 = (*C.GNode)(unsafe.Pointer(p.Native()))
	_arg1 = (*C.GNode)(unsafe.Pointer(sibling.Native()))
	_arg2 = (*C.GNode)(unsafe.Pointer(node.Native()))

	var _cret *C.GNode

	cret = C.g_node_insert_after(_arg0, _arg1, _arg2)

	var _ret *Node

	_ret = WrapNode(unsafe.Pointer(_cret))

	return _ret
}

// InsertBefore inserts a #GNode beneath the parent before the given sibling.
func (p *Node) InsertBefore(sibling *Node, node *Node) *Node {
	var _arg0 *C.GNode
	var _arg1 *C.GNode
	var _arg2 *C.GNode

	_arg0 = (*C.GNode)(unsafe.Pointer(p.Native()))
	_arg1 = (*C.GNode)(unsafe.Pointer(sibling.Native()))
	_arg2 = (*C.GNode)(unsafe.Pointer(node.Native()))

	var _cret *C.GNode

	cret = C.g_node_insert_before(_arg0, _arg1, _arg2)

	var _ret *Node

	_ret = WrapNode(unsafe.Pointer(_cret))

	return _ret
}

// IsAncestor returns true if @node is an ancestor of @descendant. This is true
// if node is the parent of @descendant, or if node is the grandparent of
// @descendant etc.
func (n *Node) IsAncestor(descendant *Node) bool {
	var _arg0 *C.GNode
	var _arg1 *C.GNode

	_arg0 = (*C.GNode)(unsafe.Pointer(n.Native()))
	_arg1 = (*C.GNode)(unsafe.Pointer(descendant.Native()))

	var _cret C.gboolean

	cret = C.g_node_is_ancestor(_arg0, _arg1)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// LastChild gets the last child of a #GNode.
func (n *Node) LastChild() *Node {
	var _arg0 *C.GNode

	_arg0 = (*C.GNode)(unsafe.Pointer(n.Native()))

	var _cret *C.GNode

	cret = C.g_node_last_child(_arg0)

	var _ret *Node

	_ret = WrapNode(unsafe.Pointer(_cret))

	return _ret
}

// LastSibling gets the last sibling of a #GNode. This could possibly be the
// node itself.
func (n *Node) LastSibling() *Node {
	var _arg0 *C.GNode

	_arg0 = (*C.GNode)(unsafe.Pointer(n.Native()))

	var _cret *C.GNode

	cret = C.g_node_last_sibling(_arg0)

	var _ret *Node

	_ret = WrapNode(unsafe.Pointer(_cret))

	return _ret
}

// MaxHeight gets the maximum height of all branches beneath a #GNode. This is
// the maximum distance from the #GNode to all leaf nodes.
//
// If @root is nil, 0 is returned. If @root has no children, 1 is returned. If
// @root has children, 2 is returned. And so on.
func (r *Node) MaxHeight() uint {
	var _arg0 *C.GNode

	_arg0 = (*C.GNode)(unsafe.Pointer(r.Native()))

	var _cret C.guint

	cret = C.g_node_max_height(_arg0)

	var _guint uint

	_guint = (uint)(_cret)

	return _guint
}

// NChildren gets the number of children of a #GNode.
func (n *Node) NChildren() uint {
	var _arg0 *C.GNode

	_arg0 = (*C.GNode)(unsafe.Pointer(n.Native()))

	var _cret C.guint

	cret = C.g_node_n_children(_arg0)

	var _guint uint

	_guint = (uint)(_cret)

	return _guint
}

// NNodes gets the number of nodes in a tree.
func (r *Node) NNodes(flags TraverseFlags) uint {
	var _arg0 *C.GNode
	var _arg1 C.GTraverseFlags

	_arg0 = (*C.GNode)(unsafe.Pointer(r.Native()))
	_arg1 = (C.GTraverseFlags)(flags)

	var _cret C.guint

	cret = C.g_node_n_nodes(_arg0, _arg1)

	var _guint uint

	_guint = (uint)(_cret)

	return _guint
}

// NthChild gets a child of a #GNode, using the given index. The first child is
// at index 0. If the index is too big, nil is returned.
func (n *Node) NthChild(n uint) *Node {
	var _arg0 *C.GNode
	var _arg1 C.guint

	_arg0 = (*C.GNode)(unsafe.Pointer(n.Native()))
	_arg1 = C.guint(n)

	var _cret *C.GNode

	cret = C.g_node_nth_child(_arg0, _arg1)

	var _ret *Node

	_ret = WrapNode(unsafe.Pointer(_cret))

	return _ret
}

// Prepend inserts a #GNode as the first child of the given parent.
func (p *Node) Prepend(node *Node) *Node {
	var _arg0 *C.GNode
	var _arg1 *C.GNode

	_arg0 = (*C.GNode)(unsafe.Pointer(p.Native()))
	_arg1 = (*C.GNode)(unsafe.Pointer(node.Native()))

	var _cret *C.GNode

	cret = C.g_node_prepend(_arg0, _arg1)

	var _ret *Node

	_ret = WrapNode(unsafe.Pointer(_cret))

	return _ret
}

// ReverseChildren reverses the order of the children of a #GNode. (It doesn't
// change the order of the grandchildren.)
func (n *Node) ReverseChildren() {
	var _arg0 *C.GNode

	_arg0 = (*C.GNode)(unsafe.Pointer(n.Native()))

	C.g_node_reverse_children(_arg0)
}

// Traverse traverses a tree starting at the given root #GNode. It calls the
// given function for each node visited. The traversal can be halted at any
// point by returning true from @func. @func must not do anything that would
// modify the structure of the tree.
func (r *Node) Traverse() {
	var _arg0 *C.GNode

	_arg0 = (*C.GNode)(unsafe.Pointer(r.Native()))

	C.g_node_traverse(_arg0)
}

// Unlink unlinks a #GNode from a tree, resulting in two separate trees.
func (n *Node) Unlink() {
	var _arg0 *C.GNode

	_arg0 = (*C.GNode)(unsafe.Pointer(n.Native()))

	C.g_node_unlink(_arg0)
}
