// Code generated by girgen. DO NOT EDIT.

package glib

import (
	"github.com/diamondburned/gotk4/internal/callback"
)

// #cgo pkg-config: gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib.h>
// extern void callbackDelete(gpointer);
import "C"

//export callbackDelete
func callbackDelete(ptr C.gpointer) { callback.Delete(ptr) }

type BookmarkFileError int

const (
	// BookmarkFileErrorInvalidUri: URI was ill-formed
	BookmarkFileErrorInvalidUri BookmarkFileError = 0
	// BookmarkFileErrorInvalidValue: a requested field was not found
	BookmarkFileErrorInvalidValue BookmarkFileError = 1
	// BookmarkFileErrorAppNotRegistered: a requested application did not
	// register a bookmark
	BookmarkFileErrorAppNotRegistered BookmarkFileError = 2
	// BookmarkFileErrorUriNotFound: a requested URI was not found
	BookmarkFileErrorUriNotFound BookmarkFileError = 3
	// BookmarkFileErrorRead: document was ill formed
	BookmarkFileErrorRead BookmarkFileError = 4
	// BookmarkFileErrorUnknownEncoding: the text being parsed was in an unknown
	// encoding
	BookmarkFileErrorUnknownEncoding BookmarkFileError = 5
	// BookmarkFileErrorWrite: an error occurred while writing
	BookmarkFileErrorWrite BookmarkFileError = 6
	// BookmarkFileErrorFileNotFound: requested file was not found
	BookmarkFileErrorFileNotFound BookmarkFileError = 7
)

type ChecksumType int

const (
	// ChecksumTypeMd5: use the MD5 hashing algorithm
	ChecksumTypeMd5 ChecksumType = 0
	// ChecksumTypeSha1: use the SHA-1 hashing algorithm
	ChecksumTypeSha1 ChecksumType = 1
	// ChecksumTypeSha256: use the SHA-256 hashing algorithm
	ChecksumTypeSha256 ChecksumType = 2
	// ChecksumTypeSha512: use the SHA-512 hashing algorithm (Since: 2.36)
	ChecksumTypeSha512 ChecksumType = 3
	// ChecksumTypeSha384: use the SHA-384 hashing algorithm (Since: 2.51)
	ChecksumTypeSha384 ChecksumType = 4
)

type ConvertError int

const (
	// ConvertErrorNoConversion: conversion between the requested character sets
	// is not supported.
	ConvertErrorNoConversion ConvertError = 0
	// ConvertErrorIllegalSequence: invalid byte sequence in conversion input;
	// or the character sequence could not be represented in the target
	// character set.
	ConvertErrorIllegalSequence ConvertError = 1
	// ConvertErrorFailed: conversion failed for some reason.
	ConvertErrorFailed ConvertError = 2
	// ConvertErrorPartialInput: partial character sequence at end of input.
	ConvertErrorPartialInput ConvertError = 3
	// ConvertErrorBadUri: URI is invalid.
	ConvertErrorBadUri ConvertError = 4
	// ConvertErrorNotAbsolutePath: pathname is not an absolute path.
	ConvertErrorNotAbsolutePath ConvertError = 5
	// ConvertErrorNoMemory: no memory available. Since: 2.40
	ConvertErrorNoMemory ConvertError = 6
	// ConvertErrorEmbeddedNul: an embedded NUL character is present in
	// conversion output where a NUL-terminated string is expected. Since: 2.56
	ConvertErrorEmbeddedNul ConvertError = 7
)

type DateDMY int

const (
	// DateDMYDay: a day
	DateDMYDay DateDMY = 0
	// DateDMYMonth: a month
	DateDMYMonth DateDMY = 1
	// DateDMYYear: a year
	DateDMYYear DateDMY = 2
)

type DateMonth int

const (
	// DateMonthBadMonth: invalid value
	DateMonthBadMonth DateMonth = 0
	// DateMonthJanuary: january
	DateMonthJanuary DateMonth = 1
	// DateMonthFebruary: february
	DateMonthFebruary DateMonth = 2
	// DateMonthMarch: march
	DateMonthMarch DateMonth = 3
	// DateMonthApril: april
	DateMonthApril DateMonth = 4
	// DateMonthMay: may
	DateMonthMay DateMonth = 5
	// DateMonthJune: june
	DateMonthJune DateMonth = 6
	// DateMonthJuly: july
	DateMonthJuly DateMonth = 7
	// DateMonthAugust: august
	DateMonthAugust DateMonth = 8
	// DateMonthSeptember: september
	DateMonthSeptember DateMonth = 9
	// DateMonthOctober: october
	DateMonthOctober DateMonth = 10
	// DateMonthNovember: november
	DateMonthNovember DateMonth = 11
	// DateMonthDecember: december
	DateMonthDecember DateMonth = 12
)

type DateWeekday int

const (
	// DateWeekdayBadWeekday: invalid value
	DateWeekdayBadWeekday DateWeekday = 0
	// DateWeekdayMonday: monday
	DateWeekdayMonday DateWeekday = 1
	// DateWeekdayTuesday: tuesday
	DateWeekdayTuesday DateWeekday = 2
	// DateWeekdayWednesday: wednesday
	DateWeekdayWednesday DateWeekday = 3
	// DateWeekdayThursday: thursday
	DateWeekdayThursday DateWeekday = 4
	// DateWeekdayFriday: friday
	DateWeekdayFriday DateWeekday = 5
	// DateWeekdaySaturday: saturday
	DateWeekdaySaturday DateWeekday = 6
	// DateWeekdaySunday: sunday
	DateWeekdaySunday DateWeekday = 7
)

type ErrorType int

const (
	// ErrorTypeUnknown: unknown error
	ErrorTypeUnknown ErrorType = 0
	// ErrorTypeUnexpEof: unexpected end of file
	ErrorTypeUnexpEof ErrorType = 1
	// ErrorTypeUnexpEofInString: unterminated string constant
	ErrorTypeUnexpEofInString ErrorType = 2
	// ErrorTypeUnexpEofInComment: unterminated comment
	ErrorTypeUnexpEofInComment ErrorType = 3
	// ErrorTypeNonDigitInConst: non-digit character in a number
	ErrorTypeNonDigitInConst ErrorType = 4
	// ErrorTypeDigitRadix: digit beyond radix in a number
	ErrorTypeDigitRadix ErrorType = 5
	// ErrorTypeFloatRadix: non-decimal floating point number
	ErrorTypeFloatRadix ErrorType = 6
	// ErrorTypeFloatMalformed: malformed floating point number
	ErrorTypeFloatMalformed ErrorType = 7
)

type FileError int

const (
	// FileErrorExist: operation not permitted; only the owner of the file (or
	// other resource) or processes with special privileges can perform the
	// operation.
	FileErrorExist FileError = 0
	// FileErrorIsdir: file is a directory; you cannot open a directory for
	// writing, or create or remove hard links to it.
	FileErrorIsdir FileError = 1
	// FileErrorAcces: permission denied; the file permissions do not allow the
	// attempted operation.
	FileErrorAcces FileError = 2
	// FileErrorNametoolong: filename too long.
	FileErrorNametoolong FileError = 3
	// FileErrorNoent: no such file or directory. This is a "file doesn't exist"
	// error for ordinary files that are referenced in contexts where they are
	// expected to already exist.
	FileErrorNoent FileError = 4
	// FileErrorNotdir: a file that isn't a directory was specified when a
	// directory is required.
	FileErrorNotdir FileError = 5
	// FileErrorNxio: no such device or address. The system tried to use the
	// device represented by a file you specified, and it couldn't find the
	// device. This can mean that the device file was installed incorrectly, or
	// that the physical device is missing or not correctly attached to the
	// computer.
	FileErrorNxio FileError = 6
	// FileErrorNodev: the underlying file system of the specified file does not
	// support memory mapping.
	FileErrorNodev FileError = 7
	// FileErrorRofs: the directory containing the new link can't be modified
	// because it's on a read-only file system.
	FileErrorRofs FileError = 8
	// FileErrorTxtbsy: text file busy.
	FileErrorTxtbsy FileError = 9
	// FileErrorFault: you passed in a pointer to bad memory. (GLib won't
	// reliably return this, don't pass in pointers to bad memory.)
	FileErrorFault FileError = 10
	// FileErrorLoop: too many levels of symbolic links were encountered in
	// looking up a file name. This often indicates a cycle of symbolic links.
	FileErrorLoop FileError = 11
	// FileErrorNospc: no space left on device; write operation on a file failed
	// because the disk is full.
	FileErrorNospc FileError = 12
	// FileErrorNomem: no memory available. The system cannot allocate more
	// virtual memory because its capacity is full.
	FileErrorNomem FileError = 13
	// FileErrorMfile: the current process has too many files open and can't
	// open any more. Duplicate descriptors do count toward this limit.
	FileErrorMfile FileError = 14
	// FileErrorNfile: there are too many distinct file openings in the entire
	// system.
	FileErrorNfile FileError = 15
	// FileErrorBadf: bad file descriptor; for example, I/O on a descriptor that
	// has been closed or reading from a descriptor open only for writing (or
	// vice versa).
	FileErrorBadf FileError = 16
	// FileErrorInval: invalid argument. This is used to indicate various kinds
	// of problems with passing the wrong argument to a library function.
	FileErrorInval FileError = 17
	// FileErrorPipe: broken pipe; there is no process reading from the other
	// end of a pipe. Every library function that returns this error code also
	// generates a 'SIGPIPE' signal; this signal terminates the program if not
	// handled or blocked. Thus, your program will never actually see this code
	// unless it has handled or blocked 'SIGPIPE'.
	FileErrorPipe FileError = 18
	// FileErrorAgain: resource temporarily unavailable; the call might work if
	// you try again later.
	FileErrorAgain FileError = 19
	// FileErrorIntr: interrupted function call; an asynchronous signal occurred
	// and prevented completion of the call. When this happens, you should try
	// the call again.
	FileErrorIntr FileError = 20
	// FileErrorIo: input/output error; usually used for physical read or write
	// errors. i.e. the disk or other physical device hardware is returning
	// errors.
	FileErrorIo FileError = 21
	// FileErrorPerm: operation not permitted; only the owner of the file (or
	// other resource) or processes with special privileges can perform the
	// operation.
	FileErrorPerm FileError = 22
	// FileErrorNosys: function not implemented; this indicates that the system
	// is missing some functionality.
	FileErrorNosys FileError = 23
	// FileErrorFailed: does not correspond to a UNIX error code; this is the
	// standard "failed for unspecified reason" error code present in all
	// #GError error code enumerations. Returned if no specific code applies.
	FileErrorFailed FileError = 24
)

type IOChannelError int

const (
	// IOChannelErrorFbig: file too large.
	IOChannelErrorFbig IOChannelError = 0
	// IOChannelErrorInval: invalid argument.
	IOChannelErrorInval IOChannelError = 1
	// IOChannelErrorIo: IO error.
	IOChannelErrorIo IOChannelError = 2
	// IOChannelErrorIsdir: file is a directory.
	IOChannelErrorIsdir IOChannelError = 3
	// IOChannelErrorNospc: no space left on device.
	IOChannelErrorNospc IOChannelError = 4
	// IOChannelErrorNxio: no such device or address.
	IOChannelErrorNxio IOChannelError = 5
	// IOChannelErrorOverflow: value too large for defined datatype.
	IOChannelErrorOverflow IOChannelError = 6
	// IOChannelErrorPipe: broken pipe.
	IOChannelErrorPipe IOChannelError = 7
	// IOChannelErrorFailed: some other error.
	IOChannelErrorFailed IOChannelError = 8
)

type IOError int

const (
	// IOErrorNone: no error
	IOErrorNone IOError = 0
	// IOErrorAgain: an EAGAIN error occurred
	IOErrorAgain IOError = 1
	// IOErrorInval: an EINVAL error occurred
	IOErrorInval IOError = 2
	// IOErrorUnknown: another error occurred
	IOErrorUnknown IOError = 3
)

type IOStatus int

const (
	// IOStatusError: an error occurred.
	IOStatusError IOStatus = 0
	// IOStatusNormal: success.
	IOStatusNormal IOStatus = 1
	// IOStatusEof: end of file.
	IOStatusEof IOStatus = 2
	// IOStatusAgain: resource temporarily unavailable.
	IOStatusAgain IOStatus = 3
)

type KeyFileError int

const (
	// KeyFileErrorUnknownEncoding: the text being parsed was in an unknown
	// encoding
	KeyFileErrorUnknownEncoding KeyFileError = 0
	// KeyFileErrorParse: document was ill-formed
	KeyFileErrorParse KeyFileError = 1
	// KeyFileErrorNotFound: the file was not found
	KeyFileErrorNotFound KeyFileError = 2
	// KeyFileErrorKeyNotFound: a requested key was not found
	KeyFileErrorKeyNotFound KeyFileError = 3
	// KeyFileErrorGroupNotFound: a requested group was not found
	KeyFileErrorGroupNotFound KeyFileError = 4
	// KeyFileErrorInvalidValue: a value could not be parsed
	KeyFileErrorInvalidValue KeyFileError = 5
)

type LogWriterOutput int

const (
	// LogWriterOutputHandled: log writer has handled the log entry.
	LogWriterOutputHandled LogWriterOutput = 1
	// LogWriterOutputUnhandled: log writer could not handle the log entry.
	LogWriterOutputUnhandled LogWriterOutput = 0
)

type MarkupError int

const (
	// MarkupErrorBadUtf8: text being parsed was not valid UTF-8
	MarkupErrorBadUtf8 MarkupError = 0
	// MarkupErrorEmpty: document contained nothing, or only whitespace
	MarkupErrorEmpty MarkupError = 1
	// MarkupErrorParse: document was ill-formed
	MarkupErrorParse MarkupError = 2
	// MarkupErrorUnknownElement: error should be set by Parser functions;
	// element wasn't known
	MarkupErrorUnknownElement MarkupError = 3
	// MarkupErrorUnknownAttribute: error should be set by Parser functions;
	// attribute wasn't known
	MarkupErrorUnknownAttribute MarkupError = 4
	// MarkupErrorInvalidContent: error should be set by Parser functions;
	// content was invalid
	MarkupErrorInvalidContent MarkupError = 5
	// MarkupErrorMissingAttribute: error should be set by Parser functions; a
	// required attribute was missing
	MarkupErrorMissingAttribute MarkupError = 6
)

type NormalizeMode int

const (
	// NormalizeModeDefault: standardize differences that do not affect the text
	// content, such as the above-mentioned accent representation
	NormalizeModeDefault NormalizeMode = 0
	// NormalizeModeNfd: another name for G_NORMALIZE_DEFAULT
	NormalizeModeNfd NormalizeMode = 0
	// NormalizeModeDefaultCompose: like G_NORMALIZE_DEFAULT, but with composed
	// forms rather than a maximally decomposed form
	NormalizeModeDefaultCompose NormalizeMode = 1
	// NormalizeModeNfc: another name for G_NORMALIZE_DEFAULT_COMPOSE
	NormalizeModeNfc NormalizeMode = 1
	// NormalizeModeAll: beyond G_NORMALIZE_DEFAULT also standardize the
	// "compatibility" characters in Unicode, such as SUPERSCRIPT THREE to the
	// standard forms (in this case DIGIT THREE). Formatting information may be
	// lost but for most text operations such characters should be considered
	// the same
	NormalizeModeAll NormalizeMode = 2
	// NormalizeModeNfkd: another name for G_NORMALIZE_ALL
	NormalizeModeNfkd NormalizeMode = 2
	// NormalizeModeAllCompose: like G_NORMALIZE_ALL, but with composed forms
	// rather than a maximally decomposed form
	NormalizeModeAllCompose NormalizeMode = 3
	// NormalizeModeNfkc: another name for G_NORMALIZE_ALL_COMPOSE
	NormalizeModeNfkc NormalizeMode = 3
)

type NumberParserError int

const (
	// NumberParserErrorInvalid: string was not a valid number.
	NumberParserErrorInvalid NumberParserError = 0
	// NumberParserErrorOutOfBounds: string was a number, but out of bounds.
	NumberParserErrorOutOfBounds NumberParserError = 1
)

type OnceStatus int

const (
	// OnceStatusNotcalled: the function has not been called yet.
	OnceStatusNotcalled OnceStatus = 0
	// OnceStatusProgress: the function call is currently in progress.
	OnceStatusProgress OnceStatus = 1
	// OnceStatusReady: the function has been called.
	OnceStatusReady OnceStatus = 2
)

type OptionArg int

const (
	// OptionArgNone: no extra argument. This is useful for simple flags.
	OptionArgNone OptionArg = 0
	// OptionArgString: the option takes a UTF-8 string argument.
	OptionArgString OptionArg = 1
	// OptionArgInt: the option takes an integer argument.
	OptionArgInt OptionArg = 2
	// OptionArgCallback: the option provides a callback (of type ArgFunc) to
	// parse the extra argument.
	OptionArgCallback OptionArg = 3
	// OptionArgFilename: the option takes a filename as argument, which will be
	// in the GLib filename encoding rather than UTF-8.
	OptionArgFilename OptionArg = 4
	// OptionArgStringArray: the option takes a string argument, multiple uses
	// of the option are collected into an array of strings.
	OptionArgStringArray OptionArg = 5
	// OptionArgFilenameArray: the option takes a filename as argument, multiple
	// uses of the option are collected into an array of strings.
	OptionArgFilenameArray OptionArg = 6
	// OptionArgDouble: the option takes a double argument. The argument can be
	// formatted either for the user's locale or for the "C" locale. Since 2.12
	OptionArgDouble OptionArg = 7
	// OptionArgInt64: the option takes a 64-bit integer. Like G_OPTION_ARG_INT
	// but for larger numbers. The number can be in decimal base, or in
	// hexadecimal (when prefixed with `0x`, for example, `0xffffffff`). Since
	// 2.12
	OptionArgInt64 OptionArg = 8
)

type OptionError int

const (
	// OptionErrorUnknownOption: an option was not known to the parser. This
	// error will only be reported, if the parser hasn't been instructed to
	// ignore unknown options, see
	// g_option_context_set_ignore_unknown_options().
	OptionErrorUnknownOption OptionError = 0
	// OptionErrorBadValue: a value couldn't be parsed.
	OptionErrorBadValue OptionError = 1
	// OptionErrorFailed: a ArgFunc callback failed.
	OptionErrorFailed OptionError = 2
)

type RegexError int

const (
	// RegexErrorCompile: compilation of the regular expression failed.
	RegexErrorCompile RegexError = 0
	// RegexErrorOptimize: optimization of the regular expression failed.
	RegexErrorOptimize RegexError = 1
	// RegexErrorReplace: replacement failed due to an ill-formed replacement
	// string.
	RegexErrorReplace RegexError = 2
	// RegexErrorMatch: the match process failed.
	RegexErrorMatch RegexError = 3
	// RegexErrorInternal: internal error of the regular expression engine.
	// Since 2.16
	RegexErrorInternal RegexError = 4
	// RegexErrorStrayBackslash: "\\" at end of pattern. Since 2.16
	RegexErrorStrayBackslash RegexError = 101
	// RegexErrorMissingControlChar: "\\c" at end of pattern. Since 2.16
	RegexErrorMissingControlChar RegexError = 102
	// RegexErrorUnrecognizedEscape: unrecognized character follows "\\". Since
	// 2.16
	RegexErrorUnrecognizedEscape RegexError = 103
	// RegexErrorQuantifiersOutOfOrder: numbers out of order in "{}" quantifier.
	// Since 2.16
	RegexErrorQuantifiersOutOfOrder RegexError = 104
	// RegexErrorQuantifierTooBig: number too big in "{}" quantifier. Since 2.16
	RegexErrorQuantifierTooBig RegexError = 105
	// RegexErrorUnterminatedCharacterClass: missing terminating "]" for
	// character class. Since 2.16
	RegexErrorUnterminatedCharacterClass RegexError = 106
	// RegexErrorInvalidEscapeInCharacterClass: invalid escape sequence in
	// character class. Since 2.16
	RegexErrorInvalidEscapeInCharacterClass RegexError = 107
	// RegexErrorRangeOutOfOrder: range out of order in character class. Since
	// 2.16
	RegexErrorRangeOutOfOrder RegexError = 108
	// RegexErrorNothingToRepeat: nothing to repeat. Since 2.16
	RegexErrorNothingToRepeat RegexError = 109
	// RegexErrorUnrecognizedCharacter: unrecognized character after "(?",
	// "(?&lt;" or "(?P". Since 2.16
	RegexErrorUnrecognizedCharacter RegexError = 112
	// RegexErrorPosixNamedClassOutsideClass: POSIX named classes are supported
	// only within a class. Since 2.16
	RegexErrorPosixNamedClassOutsideClass RegexError = 113
	// RegexErrorUnmatchedParenthesis: missing terminating ")" or ")" without
	// opening "(". Since 2.16
	RegexErrorUnmatchedParenthesis RegexError = 114
	// RegexErrorInexistentSubpatternReference: reference to non-existent
	// subpattern. Since 2.16
	RegexErrorInexistentSubpatternReference RegexError = 115
	// RegexErrorUnterminatedComment: missing terminating ")" after comment.
	// Since 2.16
	RegexErrorUnterminatedComment RegexError = 118
	// RegexErrorExpressionTooLarge: regular expression too large. Since 2.16
	RegexErrorExpressionTooLarge RegexError = 120
	// RegexErrorMemoryError: failed to get memory. Since 2.16
	RegexErrorMemoryError RegexError = 121
	// RegexErrorVariableLengthLookbehind: lookbehind assertion is not fixed
	// length. Since 2.16
	RegexErrorVariableLengthLookbehind RegexError = 125
	// RegexErrorMalformedCondition: malformed number or name after "(?(". Since
	// 2.16
	RegexErrorMalformedCondition RegexError = 126
	// RegexErrorTooManyConditionalBranches: conditional group contains more
	// than two branches. Since 2.16
	RegexErrorTooManyConditionalBranches RegexError = 127
	// RegexErrorAssertionExpected: assertion expected after "(?(". Since 2.16
	RegexErrorAssertionExpected RegexError = 128
	// RegexErrorUnknownPosixClassName: unknown POSIX class name. Since 2.16
	RegexErrorUnknownPosixClassName RegexError = 130
	// RegexErrorPosixCollatingElementsNotSupported: POSIX collating elements
	// are not supported. Since 2.16
	RegexErrorPosixCollatingElementsNotSupported RegexError = 131
	// RegexErrorHexCodeTooLarge: character value in "\\x{...}" sequence is too
	// large. Since 2.16
	RegexErrorHexCodeTooLarge RegexError = 134
	// RegexErrorInvalidCondition: invalid condition "(?(0)". Since 2.16
	RegexErrorInvalidCondition RegexError = 135
	// RegexErrorSingleByteMatchInLookbehind: \\C not allowed in lookbehind
	// assertion. Since 2.16
	RegexErrorSingleByteMatchInLookbehind RegexError = 136
	// RegexErrorInfiniteLoop: recursive call could loop indefinitely. Since
	// 2.16
	RegexErrorInfiniteLoop RegexError = 140
	// RegexErrorMissingSubpatternNameTerminator: missing terminator in
	// subpattern name. Since 2.16
	RegexErrorMissingSubpatternNameTerminator RegexError = 142
	// RegexErrorDuplicateSubpatternName: two named subpatterns have the same
	// name. Since 2.16
	RegexErrorDuplicateSubpatternName RegexError = 143
	// RegexErrorMalformedProperty: malformed "\\P" or "\\p" sequence. Since
	// 2.16
	RegexErrorMalformedProperty RegexError = 146
	// RegexErrorUnknownProperty: unknown property name after "\\P" or "\\p".
	// Since 2.16
	RegexErrorUnknownProperty RegexError = 147
	// RegexErrorSubpatternNameTooLong: subpattern name is too long (maximum 32
	// characters). Since 2.16
	RegexErrorSubpatternNameTooLong RegexError = 148
	// RegexErrorTooManySubpatterns: too many named subpatterns (maximum
	// 10,000). Since 2.16
	RegexErrorTooManySubpatterns RegexError = 149
	// RegexErrorInvalidOctalValue: octal value is greater than "\\377". Since
	// 2.16
	RegexErrorInvalidOctalValue RegexError = 151
	// RegexErrorTooManyBranchesInDefine: "DEFINE" group contains more than one
	// branch. Since 2.16
	RegexErrorTooManyBranchesInDefine RegexError = 154
	// RegexErrorDefineRepetion: repeating a "DEFINE" group is not allowed. This
	// error is never raised. Since: 2.16 Deprecated: 2.34
	RegexErrorDefineRepetion RegexError = 155
	// RegexErrorInconsistentNewlineOptions: inconsistent newline options. Since
	// 2.16
	RegexErrorInconsistentNewlineOptions RegexError = 156
	// RegexErrorMissingBackReference: "\\g" is not followed by a braced,
	// angle-bracketed, or quoted name or number, or by a plain number. Since:
	// 2.16
	RegexErrorMissingBackReference RegexError = 157
	// RegexErrorInvalidRelativeReference: relative reference must not be zero.
	// Since: 2.34
	RegexErrorInvalidRelativeReference RegexError = 158
	// RegexErrorBacktrackingControlVerbArgumentForbidden: the backtracing
	// control verb used does not allow an argument. Since: 2.34
	RegexErrorBacktrackingControlVerbArgumentForbidden RegexError = 159
	// RegexErrorUnknownBacktrackingControlVerb: unknown backtracing control
	// verb. Since: 2.34
	RegexErrorUnknownBacktrackingControlVerb RegexError = 160
	// RegexErrorNumberTooBig: number is too big in escape sequence. Since: 2.34
	RegexErrorNumberTooBig RegexError = 161
	// RegexErrorMissingSubpatternName: missing subpattern name. Since: 2.34
	RegexErrorMissingSubpatternName RegexError = 162
	// RegexErrorMissingDigit: missing digit. Since 2.34
	RegexErrorMissingDigit RegexError = 163
	// RegexErrorInvalidDataCharacter: in JavaScript compatibility mode, "[" is
	// an invalid data character. Since: 2.34
	RegexErrorInvalidDataCharacter RegexError = 164
	// RegexErrorExtraSubpatternName: different names for subpatterns of the
	// same number are not allowed. Since: 2.34
	RegexErrorExtraSubpatternName RegexError = 165
	// RegexErrorBacktrackingControlVerbArgumentRequired: the backtracing
	// control verb requires an argument. Since: 2.34
	RegexErrorBacktrackingControlVerbArgumentRequired RegexError = 166
	// RegexErrorInvalidControlChar: "\\c" must be followed by an ASCII
	// character. Since: 2.34
	RegexErrorInvalidControlChar RegexError = 168
	// RegexErrorMissingName: "\\k" is not followed by a braced,
	// angle-bracketed, or quoted name. Since: 2.34
	RegexErrorMissingName RegexError = 169
	// RegexErrorNotSupportedInClass: "\\N" is not supported in a class. Since:
	// 2.34
	RegexErrorNotSupportedInClass RegexError = 171
	// RegexErrorTooManyForwardReferences: too many forward references. Since:
	// 2.34
	RegexErrorTooManyForwardReferences RegexError = 172
	// RegexErrorNameTooLong: the name is too long in "(*MARK)", "(*PRUNE)",
	// "(*SKIP)", or "(*THEN)". Since: 2.34
	RegexErrorNameTooLong RegexError = 175
	// RegexErrorCharacterValueTooLarge: the character value in the \\u sequence
	// is too large. Since: 2.34
	RegexErrorCharacterValueTooLarge RegexError = 176
)

type SeekType int

const (
	// SeekTypeCur: the current position in the file.
	SeekTypeCur SeekType = 0
	// SeekTypeSet: the start of the file.
	SeekTypeSet SeekType = 1
	// SeekTypeEnd: the end of the file.
	SeekTypeEnd SeekType = 2
)

type ShellError int

const (
	// ShellErrorBadQuoting: mismatched or otherwise mangled quoting.
	ShellErrorBadQuoting ShellError = 0
	// ShellErrorEmptyString: string to be parsed was empty.
	ShellErrorEmptyString ShellError = 1
	// ShellErrorFailed: some other error.
	ShellErrorFailed ShellError = 2
)

type SliceConfig int

const (
	SliceConfigAlwaysMalloc      SliceConfig = 1
	SliceConfigBypassMagazines   SliceConfig = 2
	SliceConfigWorkingSetMsecs   SliceConfig = 3
	SliceConfigColorIncrement    SliceConfig = 4
	SliceConfigChunkSizes        SliceConfig = 5
	SliceConfigContentionCounter SliceConfig = 6
)

type SpawnError int

const (
	// SpawnErrorFork: fork failed due to lack of memory.
	SpawnErrorFork SpawnError = 0
	// SpawnErrorRead: read or select on pipes failed.
	SpawnErrorRead SpawnError = 1
	// SpawnErrorChdir: changing to working directory failed.
	SpawnErrorChdir SpawnError = 2
	// SpawnErrorAcces: execv() returned `EACCES`
	SpawnErrorAcces SpawnError = 3
	// SpawnErrorPerm: execv() returned `EPERM`
	SpawnErrorPerm SpawnError = 4
	// SpawnErrorTooBig: execv() returned `E2BIG`
	SpawnErrorTooBig SpawnError = 5
	// SpawnError2Big: deprecated alias for G_SPAWN_ERROR_TOO_BIG (deprecated
	// since GLib 2.32)
	SpawnError2Big SpawnError = 5
	// SpawnErrorNoexec: execv() returned `ENOEXEC`
	SpawnErrorNoexec SpawnError = 6
	// SpawnErrorNametoolong: execv() returned `ENAMETOOLONG`
	SpawnErrorNametoolong SpawnError = 7
	// SpawnErrorNoent: execv() returned `ENOENT`
	SpawnErrorNoent SpawnError = 8
	// SpawnErrorNomem: execv() returned `ENOMEM`
	SpawnErrorNomem SpawnError = 9
	// SpawnErrorNotdir: execv() returned `ENOTDIR`
	SpawnErrorNotdir SpawnError = 10
	// SpawnErrorLoop: execv() returned `ELOOP`
	SpawnErrorLoop SpawnError = 11
	// SpawnErrorTxtbusy: execv() returned `ETXTBUSY`
	SpawnErrorTxtbusy SpawnError = 12
	// SpawnErrorIo: execv() returned `EIO`
	SpawnErrorIo SpawnError = 13
	// SpawnErrorNfile: execv() returned `ENFILE`
	SpawnErrorNfile SpawnError = 14
	// SpawnErrorMfile: execv() returned `EMFILE`
	SpawnErrorMfile SpawnError = 15
	// SpawnErrorInval: execv() returned `EINVAL`
	SpawnErrorInval SpawnError = 16
	// SpawnErrorIsdir: execv() returned `EISDIR`
	SpawnErrorIsdir SpawnError = 17
	// SpawnErrorLibbad: execv() returned `ELIBBAD`
	SpawnErrorLibbad SpawnError = 18
	// SpawnErrorFailed: some other fatal failure, `error-&gt;message` should
	// explain.
	SpawnErrorFailed SpawnError = 19
)

type TestFileType int

const (
	// TestFileTypeDist: a file that was included in the distribution tarball
	TestFileTypeDist TestFileType = 0
	// TestFileTypeBuilt: a file that was built on the compiling machine
	TestFileTypeBuilt TestFileType = 1
)

type TestLogType int

const (
	TestLogTypeNone        TestLogType = 0
	TestLogTypeError       TestLogType = 1
	TestLogTypeStartBinary TestLogType = 2
	TestLogTypeListCase    TestLogType = 3
	TestLogTypeSkipCase    TestLogType = 4
	TestLogTypeStartCase   TestLogType = 5
	TestLogTypeStopCase    TestLogType = 6
	TestLogTypeMinResult   TestLogType = 7
	TestLogTypeMaxResult   TestLogType = 8
	TestLogTypeMessage     TestLogType = 9
	TestLogTypeStartSuite  TestLogType = 10
	TestLogTypeStopSuite   TestLogType = 11
)

type TestResult int

const (
	TestResultSuccess    TestResult = 0
	TestResultSkipped    TestResult = 1
	TestResultFailure    TestResult = 2
	TestResultIncomplete TestResult = 3
)

type ThreadError int

const (
	// ThreadErrorThreadErrorAgain: a thread couldn't be created due to resource
	// shortage. Try again later.
	ThreadErrorThreadErrorAgain ThreadError = 0
)

type TimeType int

const (
	// TimeTypeStandard: the time is in local standard time
	TimeTypeStandard TimeType = 0
	// TimeTypeDaylight: the time is in local daylight time
	TimeTypeDaylight TimeType = 1
	// TimeTypeUniversal: the time is in UTC
	TimeTypeUniversal TimeType = 2
)

type TokenType int

const (
	// TokenTypeEof: the end of the file
	TokenTypeEof TokenType = 0
	// TokenTypeLeftParen: a '(' character
	TokenTypeLeftParen TokenType = 40
	// TokenTypeRightParen: a ')' character
	TokenTypeRightParen TokenType = 41
	// TokenTypeLeftCurly: a '{' character
	TokenTypeLeftCurly TokenType = 123
	// TokenTypeRightCurly: a '}' character
	TokenTypeRightCurly TokenType = 125
	// TokenTypeLeftBrace: a '[' character
	TokenTypeLeftBrace TokenType = 91
	// TokenTypeRightBrace: a ']' character
	TokenTypeRightBrace TokenType = 93
	// TokenTypeEqualSign: a '=' character
	TokenTypeEqualSign TokenType = 61
	// TokenTypeComma: a ',' character
	TokenTypeComma TokenType = 44
	// TokenTypeNone: not a token
	TokenTypeNone TokenType = 256
	// TokenTypeError: an error occurred
	TokenTypeError TokenType = 257
	// TokenTypeChar: a character
	TokenTypeChar TokenType = 258
	// TokenTypeBinary: a binary integer
	TokenTypeBinary TokenType = 259
	// TokenTypeOctal: an octal integer
	TokenTypeOctal TokenType = 260
	// TokenTypeInt: an integer
	TokenTypeInt TokenType = 261
	// TokenTypeHex: a hex integer
	TokenTypeHex TokenType = 262
	// TokenTypeFloat: a floating point number
	TokenTypeFloat TokenType = 263
	// TokenTypeString: a string
	TokenTypeString TokenType = 264
	// TokenTypeSymbol: a symbol
	TokenTypeSymbol TokenType = 265
	// TokenTypeIDentifier: an identifier
	TokenTypeIDentifier TokenType = 266
	// TokenTypeIDentifierNull: a null identifier
	TokenTypeIDentifierNull TokenType = 267
	// TokenTypeCommentSingle: one line comment
	TokenTypeCommentSingle TokenType = 268
	// TokenTypeCommentMulti: multi line comment
	TokenTypeCommentMulti TokenType = 269
)

type TraverseType int

const (
	// TraverseTypeInOrder: vists a node's left child first, then the node
	// itself, then its right child. This is the one to use if you want the
	// output sorted according to the compare function.
	TraverseTypeInOrder TraverseType = 0
	// TraverseTypePreOrder: visits a node, then its children.
	TraverseTypePreOrder TraverseType = 1
	// TraverseTypePostOrder: visits the node's children, then the node itself.
	TraverseTypePostOrder TraverseType = 2
	// TraverseTypeLevelOrder: is not implemented for [balanced binary
	// trees][glib-Balanced-Binary-Trees]. For [n-ary trees][glib-N-ary-Trees],
	// it vists the root node first, then its children, then its grandchildren,
	// and so on. Note that this is less efficient than the other orders.
	TraverseTypeLevelOrder TraverseType = 3
)

type UnicodeBreakType int

const (
	// UnicodeBreakTypeMandatory: mandatory Break (BK)
	UnicodeBreakTypeMandatory UnicodeBreakType = 0
	// UnicodeBreakTypeCarriageReturn: carriage Return (CR)
	UnicodeBreakTypeCarriageReturn UnicodeBreakType = 1
	// UnicodeBreakTypeLineFeed: line Feed (LF)
	UnicodeBreakTypeLineFeed UnicodeBreakType = 2
	// UnicodeBreakTypeCombiningMark: attached Characters and Combining Marks
	// (CM)
	UnicodeBreakTypeCombiningMark UnicodeBreakType = 3
	// UnicodeBreakTypeSurrogate: surrogates (SG)
	UnicodeBreakTypeSurrogate UnicodeBreakType = 4
	// UnicodeBreakTypeZeroWidthSpace: zero Width Space (ZW)
	UnicodeBreakTypeZeroWidthSpace UnicodeBreakType = 5
	// UnicodeBreakTypeInseparable: inseparable (IN)
	UnicodeBreakTypeInseparable UnicodeBreakType = 6
	// UnicodeBreakTypeNonBreakingGlue: non-breaking ("Glue") (GL)
	UnicodeBreakTypeNonBreakingGlue UnicodeBreakType = 7
	// UnicodeBreakTypeContingent: contingent Break Opportunity (CB)
	UnicodeBreakTypeContingent UnicodeBreakType = 8
	// UnicodeBreakTypeSpace: space (SP)
	UnicodeBreakTypeSpace UnicodeBreakType = 9
	// UnicodeBreakTypeAfter: break Opportunity After (BA)
	UnicodeBreakTypeAfter UnicodeBreakType = 10
	// UnicodeBreakTypeBefore: break Opportunity Before (BB)
	UnicodeBreakTypeBefore UnicodeBreakType = 11
	// UnicodeBreakTypeBeforeAndAfter: break Opportunity Before and After (B2)
	UnicodeBreakTypeBeforeAndAfter UnicodeBreakType = 12
	// UnicodeBreakTypeHyphen: hyphen (HY)
	UnicodeBreakTypeHyphen UnicodeBreakType = 13
	// UnicodeBreakTypeNonStarter: nonstarter (NS)
	UnicodeBreakTypeNonStarter UnicodeBreakType = 14
	// UnicodeBreakTypeOpenPunctuation: opening Punctuation (OP)
	UnicodeBreakTypeOpenPunctuation UnicodeBreakType = 15
	// UnicodeBreakTypeClosePunctuation: closing Punctuation (CL)
	UnicodeBreakTypeClosePunctuation UnicodeBreakType = 16
	// UnicodeBreakTypeQuotation: ambiguous Quotation (QU)
	UnicodeBreakTypeQuotation UnicodeBreakType = 17
	// UnicodeBreakTypeExclamation: exclamation/Interrogation (EX)
	UnicodeBreakTypeExclamation UnicodeBreakType = 18
	// UnicodeBreakTypeIDeographic: ideographic (ID)
	UnicodeBreakTypeIDeographic UnicodeBreakType = 19
	// UnicodeBreakTypeNumeric: numeric (NU)
	UnicodeBreakTypeNumeric UnicodeBreakType = 20
	// UnicodeBreakTypeInfixSeparator: infix Separator (Numeric) (IS)
	UnicodeBreakTypeInfixSeparator UnicodeBreakType = 21
	// UnicodeBreakTypeSymbol: symbols Allowing Break After (SY)
	UnicodeBreakTypeSymbol UnicodeBreakType = 22
	// UnicodeBreakTypeAlphabetic: ordinary Alphabetic and Symbol Characters
	// (AL)
	UnicodeBreakTypeAlphabetic UnicodeBreakType = 23
	// UnicodeBreakTypePrefix: prefix (Numeric) (PR)
	UnicodeBreakTypePrefix UnicodeBreakType = 24
	// UnicodeBreakTypePostfix: postfix (Numeric) (PO)
	UnicodeBreakTypePostfix UnicodeBreakType = 25
	// UnicodeBreakTypeComplexContext: complex Content Dependent (South East
	// Asian) (SA)
	UnicodeBreakTypeComplexContext UnicodeBreakType = 26
	// UnicodeBreakTypeAmbiguous: ambiguous (Alphabetic or Ideographic) (AI)
	UnicodeBreakTypeAmbiguous UnicodeBreakType = 27
	// UnicodeBreakTypeUnknown: unknown (XX)
	UnicodeBreakTypeUnknown UnicodeBreakType = 28
	// UnicodeBreakTypeNextLine: next Line (NL)
	UnicodeBreakTypeNextLine UnicodeBreakType = 29
	// UnicodeBreakTypeWordJoiner: word Joiner (WJ)
	UnicodeBreakTypeWordJoiner UnicodeBreakType = 30
	// UnicodeBreakTypeHangulLJamo: hangul L Jamo (JL)
	UnicodeBreakTypeHangulLJamo UnicodeBreakType = 31
	// UnicodeBreakTypeHangulVJamo: hangul V Jamo (JV)
	UnicodeBreakTypeHangulVJamo UnicodeBreakType = 32
	// UnicodeBreakTypeHangulTJamo: hangul T Jamo (JT)
	UnicodeBreakTypeHangulTJamo UnicodeBreakType = 33
	// UnicodeBreakTypeHangulLvSyllable: hangul LV Syllable (H2)
	UnicodeBreakTypeHangulLvSyllable UnicodeBreakType = 34
	// UnicodeBreakTypeHangulLvtSyllable: hangul LVT Syllable (H3)
	UnicodeBreakTypeHangulLvtSyllable UnicodeBreakType = 35
	// UnicodeBreakTypeCloseParanthesis: closing Parenthesis (CP). Since 2.28
	UnicodeBreakTypeCloseParanthesis UnicodeBreakType = 36
	// UnicodeBreakTypeConditionalJapaneseStarter: conditional Japanese Starter
	// (CJ). Since: 2.32
	UnicodeBreakTypeConditionalJapaneseStarter UnicodeBreakType = 37
	// UnicodeBreakTypeHebrewLetter: hebrew Letter (HL). Since: 2.32
	UnicodeBreakTypeHebrewLetter UnicodeBreakType = 38
	// UnicodeBreakTypeRegionalIndicator: regional Indicator (RI). Since: 2.36
	UnicodeBreakTypeRegionalIndicator UnicodeBreakType = 39
	// UnicodeBreakTypeEmojiBase: emoji Base (EB). Since: 2.50
	UnicodeBreakTypeEmojiBase UnicodeBreakType = 40
	// UnicodeBreakTypeEmojiModifier: emoji Modifier (EM). Since: 2.50
	UnicodeBreakTypeEmojiModifier UnicodeBreakType = 41
	// UnicodeBreakTypeZeroWidthJoiner: zero Width Joiner (ZWJ). Since: 2.50
	UnicodeBreakTypeZeroWidthJoiner UnicodeBreakType = 42
)

type UnicodeScript int

const (
	// UnicodeScriptInvalidCode: a value never returned from
	// g_unichar_get_script()
	UnicodeScriptInvalidCode UnicodeScript = -1
	// UnicodeScriptCommon: a character used by multiple different scripts
	UnicodeScriptCommon UnicodeScript = 0
	// UnicodeScriptInherited: a mark glyph that takes its script from the base
	// glyph to which it is attached
	UnicodeScriptInherited UnicodeScript = 1
	// UnicodeScriptArabic: arabic
	UnicodeScriptArabic UnicodeScript = 2
	// UnicodeScriptArmenian: armenian
	UnicodeScriptArmenian UnicodeScript = 3
	// UnicodeScriptBengali: bengali
	UnicodeScriptBengali UnicodeScript = 4
	// UnicodeScriptBopomofo: bopomofo
	UnicodeScriptBopomofo UnicodeScript = 5
	// UnicodeScriptCherokee: cherokee
	UnicodeScriptCherokee UnicodeScript = 6
	// UnicodeScriptCoptic: coptic
	UnicodeScriptCoptic UnicodeScript = 7
	// UnicodeScriptCyrillic: cyrillic
	UnicodeScriptCyrillic UnicodeScript = 8
	// UnicodeScriptDeseret: deseret
	UnicodeScriptDeseret UnicodeScript = 9
	// UnicodeScriptDevanagari: devanagari
	UnicodeScriptDevanagari UnicodeScript = 10
	// UnicodeScriptEthiopic: ethiopic
	UnicodeScriptEthiopic UnicodeScript = 11
	// UnicodeScriptGeorgian: georgian
	UnicodeScriptGeorgian UnicodeScript = 12
	// UnicodeScriptGothic: gothic
	UnicodeScriptGothic UnicodeScript = 13
	// UnicodeScriptGreek: greek
	UnicodeScriptGreek UnicodeScript = 14
	// UnicodeScriptGujarati: gujarati
	UnicodeScriptGujarati UnicodeScript = 15
	// UnicodeScriptGurmukhi: gurmukhi
	UnicodeScriptGurmukhi UnicodeScript = 16
	// UnicodeScriptHan: han
	UnicodeScriptHan UnicodeScript = 17
	// UnicodeScriptHangul: hangul
	UnicodeScriptHangul UnicodeScript = 18
	// UnicodeScriptHebrew: hebrew
	UnicodeScriptHebrew UnicodeScript = 19
	// UnicodeScriptHiragana: hiragana
	UnicodeScriptHiragana UnicodeScript = 20
	// UnicodeScriptKannada: kannada
	UnicodeScriptKannada UnicodeScript = 21
	// UnicodeScriptKatakana: katakana
	UnicodeScriptKatakana UnicodeScript = 22
	// UnicodeScriptKhmer: khmer
	UnicodeScriptKhmer UnicodeScript = 23
	// UnicodeScriptLao: lao
	UnicodeScriptLao UnicodeScript = 24
	// UnicodeScriptLatin: latin
	UnicodeScriptLatin UnicodeScript = 25
	// UnicodeScriptMalayalam: malayalam
	UnicodeScriptMalayalam UnicodeScript = 26
	// UnicodeScriptMongolian: mongolian
	UnicodeScriptMongolian UnicodeScript = 27
	// UnicodeScriptMyanmar: myanmar
	UnicodeScriptMyanmar UnicodeScript = 28
	// UnicodeScriptOgham: ogham
	UnicodeScriptOgham UnicodeScript = 29
	// UnicodeScriptOldItalic: old Italic
	UnicodeScriptOldItalic UnicodeScript = 30
	// UnicodeScriptOriya: oriya
	UnicodeScriptOriya UnicodeScript = 31
	// UnicodeScriptRunic: runic
	UnicodeScriptRunic UnicodeScript = 32
	// UnicodeScriptSinhala: sinhala
	UnicodeScriptSinhala UnicodeScript = 33
	// UnicodeScriptSyriac: syriac
	UnicodeScriptSyriac UnicodeScript = 34
	// UnicodeScriptTamil: tamil
	UnicodeScriptTamil UnicodeScript = 35
	// UnicodeScriptTelugu: telugu
	UnicodeScriptTelugu UnicodeScript = 36
	// UnicodeScriptThaana: thaana
	UnicodeScriptThaana UnicodeScript = 37
	// UnicodeScriptThai: thai
	UnicodeScriptThai UnicodeScript = 38
	// UnicodeScriptTibetan: tibetan
	UnicodeScriptTibetan UnicodeScript = 39
	// UnicodeScriptCanadianAboriginal: canadian Aboriginal
	UnicodeScriptCanadianAboriginal UnicodeScript = 40
	// UnicodeScriptYi: yi
	UnicodeScriptYi UnicodeScript = 41
	// UnicodeScriptTagalog: tagalog
	UnicodeScriptTagalog UnicodeScript = 42
	// UnicodeScriptHanunoo: hanunoo
	UnicodeScriptHanunoo UnicodeScript = 43
	// UnicodeScriptBuhid: buhid
	UnicodeScriptBuhid UnicodeScript = 44
	// UnicodeScriptTagbanwa: tagbanwa
	UnicodeScriptTagbanwa UnicodeScript = 45
	// UnicodeScriptBraille: braille
	UnicodeScriptBraille UnicodeScript = 46
	// UnicodeScriptCypriot: cypriot
	UnicodeScriptCypriot UnicodeScript = 47
	// UnicodeScriptLimbu: limbu
	UnicodeScriptLimbu UnicodeScript = 48
	// UnicodeScriptOsmanya: osmanya
	UnicodeScriptOsmanya UnicodeScript = 49
	// UnicodeScriptShavian: shavian
	UnicodeScriptShavian UnicodeScript = 50
	// UnicodeScriptLinearB: linear B
	UnicodeScriptLinearB UnicodeScript = 51
	// UnicodeScriptTaiLe: tai Le
	UnicodeScriptTaiLe UnicodeScript = 52
	// UnicodeScriptUgaritic: ugaritic
	UnicodeScriptUgaritic UnicodeScript = 53
	// UnicodeScriptNewTaiLue: new Tai Lue
	UnicodeScriptNewTaiLue UnicodeScript = 54
	// UnicodeScriptBuginese: buginese
	UnicodeScriptBuginese UnicodeScript = 55
	// UnicodeScriptGlagolitic: glagolitic
	UnicodeScriptGlagolitic UnicodeScript = 56
	// UnicodeScriptTifinagh: tifinagh
	UnicodeScriptTifinagh UnicodeScript = 57
	// UnicodeScriptSylotiNagri: syloti Nagri
	UnicodeScriptSylotiNagri UnicodeScript = 58
	// UnicodeScriptOldPersian: old Persian
	UnicodeScriptOldPersian UnicodeScript = 59
	// UnicodeScriptKharoshthi: kharoshthi
	UnicodeScriptKharoshthi UnicodeScript = 60
	// UnicodeScriptUnknown: an unassigned code point
	UnicodeScriptUnknown UnicodeScript = 61
	// UnicodeScriptBalinese: balinese
	UnicodeScriptBalinese UnicodeScript = 62
	// UnicodeScriptCuneiform: cuneiform
	UnicodeScriptCuneiform UnicodeScript = 63
	// UnicodeScriptPhoenician: phoenician
	UnicodeScriptPhoenician UnicodeScript = 64
	// UnicodeScriptPhagsPa: phags-pa
	UnicodeScriptPhagsPa UnicodeScript = 65
	// UnicodeScriptNko: n'Ko
	UnicodeScriptNko UnicodeScript = 66
	// UnicodeScriptKayahLi: kayah Li. Since 2.16.3
	UnicodeScriptKayahLi UnicodeScript = 67
	// UnicodeScriptLepcha: lepcha. Since 2.16.3
	UnicodeScriptLepcha UnicodeScript = 68
	// UnicodeScriptRejang: rejang. Since 2.16.3
	UnicodeScriptRejang UnicodeScript = 69
	// UnicodeScriptSundanese: sundanese. Since 2.16.3
	UnicodeScriptSundanese UnicodeScript = 70
	// UnicodeScriptSaurashtra: saurashtra. Since 2.16.3
	UnicodeScriptSaurashtra UnicodeScript = 71
	// UnicodeScriptCham: cham. Since 2.16.3
	UnicodeScriptCham UnicodeScript = 72
	// UnicodeScriptOlChiki: ol Chiki. Since 2.16.3
	UnicodeScriptOlChiki UnicodeScript = 73
	// UnicodeScriptVai: vai. Since 2.16.3
	UnicodeScriptVai UnicodeScript = 74
	// UnicodeScriptCarian: carian. Since 2.16.3
	UnicodeScriptCarian UnicodeScript = 75
	// UnicodeScriptLycian: lycian. Since 2.16.3
	UnicodeScriptLycian UnicodeScript = 76
	// UnicodeScriptLydian: lydian. Since 2.16.3
	UnicodeScriptLydian UnicodeScript = 77
	// UnicodeScriptAvestan: avestan. Since 2.26
	UnicodeScriptAvestan UnicodeScript = 78
	// UnicodeScriptBamum: bamum. Since 2.26
	UnicodeScriptBamum UnicodeScript = 79
	// UnicodeScriptEgyptianHieroglyphs: egyptian Hieroglpyhs. Since 2.26
	UnicodeScriptEgyptianHieroglyphs UnicodeScript = 80
	// UnicodeScriptImperialAramaic: imperial Aramaic. Since 2.26
	UnicodeScriptImperialAramaic UnicodeScript = 81
	// UnicodeScriptInscriptionalPahlavi: inscriptional Pahlavi. Since 2.26
	UnicodeScriptInscriptionalPahlavi UnicodeScript = 82
	// UnicodeScriptInscriptionalParthian: inscriptional Parthian. Since 2.26
	UnicodeScriptInscriptionalParthian UnicodeScript = 83
	// UnicodeScriptJavanese: javanese. Since 2.26
	UnicodeScriptJavanese UnicodeScript = 84
	// UnicodeScriptKaithi: kaithi. Since 2.26
	UnicodeScriptKaithi UnicodeScript = 85
	// UnicodeScriptLisu: lisu. Since 2.26
	UnicodeScriptLisu UnicodeScript = 86
	// UnicodeScriptMeeteiMayek: meetei Mayek. Since 2.26
	UnicodeScriptMeeteiMayek UnicodeScript = 87
	// UnicodeScriptOldSouthArabian: old South Arabian. Since 2.26
	UnicodeScriptOldSouthArabian UnicodeScript = 88
	// UnicodeScriptOldTurkic: old Turkic. Since 2.28
	UnicodeScriptOldTurkic UnicodeScript = 89
	// UnicodeScriptSamaritan: samaritan. Since 2.26
	UnicodeScriptSamaritan UnicodeScript = 90
	// UnicodeScriptTaiTham: tai Tham. Since 2.26
	UnicodeScriptTaiTham UnicodeScript = 91
	// UnicodeScriptTaiViet: tai Viet. Since 2.26
	UnicodeScriptTaiViet UnicodeScript = 92
	// UnicodeScriptBatak: batak. Since 2.28
	UnicodeScriptBatak UnicodeScript = 93
	// UnicodeScriptBrahmi: brahmi. Since 2.28
	UnicodeScriptBrahmi UnicodeScript = 94
	// UnicodeScriptMandaic: mandaic. Since 2.28
	UnicodeScriptMandaic UnicodeScript = 95
	// UnicodeScriptChakma: chakma. Since: 2.32
	UnicodeScriptChakma UnicodeScript = 96
	// UnicodeScriptMeroiticCursive: meroitic Cursive. Since: 2.32
	UnicodeScriptMeroiticCursive UnicodeScript = 97
	// UnicodeScriptMeroiticHieroglyphs: meroitic Hieroglyphs. Since: 2.32
	UnicodeScriptMeroiticHieroglyphs UnicodeScript = 98
	// UnicodeScriptMiao: miao. Since: 2.32
	UnicodeScriptMiao UnicodeScript = 99
	// UnicodeScriptSharada: sharada. Since: 2.32
	UnicodeScriptSharada UnicodeScript = 100
	// UnicodeScriptSoraSompeng: sora Sompeng. Since: 2.32
	UnicodeScriptSoraSompeng UnicodeScript = 101
	// UnicodeScriptTakri: takri. Since: 2.32
	UnicodeScriptTakri UnicodeScript = 102
	// UnicodeScriptBassaVah: bassa. Since: 2.42
	UnicodeScriptBassaVah UnicodeScript = 103
	// UnicodeScriptCaucasianAlbanian: caucasian Albanian. Since: 2.42
	UnicodeScriptCaucasianAlbanian UnicodeScript = 104
	// UnicodeScriptDuployan: duployan. Since: 2.42
	UnicodeScriptDuployan UnicodeScript = 105
	// UnicodeScriptElbasan: elbasan. Since: 2.42
	UnicodeScriptElbasan UnicodeScript = 106
	// UnicodeScriptGrantha: grantha. Since: 2.42
	UnicodeScriptGrantha UnicodeScript = 107
	// UnicodeScriptKhojki: kjohki. Since: 2.42
	UnicodeScriptKhojki UnicodeScript = 108
	// UnicodeScriptKhudawadi: khudawadi, Sindhi. Since: 2.42
	UnicodeScriptKhudawadi UnicodeScript = 109
	// UnicodeScriptLinearA: linear A. Since: 2.42
	UnicodeScriptLinearA UnicodeScript = 110
	// UnicodeScriptMahajani: mahajani. Since: 2.42
	UnicodeScriptMahajani UnicodeScript = 111
	// UnicodeScriptManichaean: manichaean. Since: 2.42
	UnicodeScriptManichaean UnicodeScript = 112
	// UnicodeScriptMendeKikakui: mende Kikakui. Since: 2.42
	UnicodeScriptMendeKikakui UnicodeScript = 113
	// UnicodeScriptModi: modi. Since: 2.42
	UnicodeScriptModi UnicodeScript = 114
	// UnicodeScriptMro: mro. Since: 2.42
	UnicodeScriptMro UnicodeScript = 115
	// UnicodeScriptNabataean: nabataean. Since: 2.42
	UnicodeScriptNabataean UnicodeScript = 116
	// UnicodeScriptOldNorthArabian: old North Arabian. Since: 2.42
	UnicodeScriptOldNorthArabian UnicodeScript = 117
	// UnicodeScriptOldPermic: old Permic. Since: 2.42
	UnicodeScriptOldPermic UnicodeScript = 118
	// UnicodeScriptPahawhHmong: pahawh Hmong. Since: 2.42
	UnicodeScriptPahawhHmong UnicodeScript = 119
	// UnicodeScriptPalmyrene: palmyrene. Since: 2.42
	UnicodeScriptPalmyrene UnicodeScript = 120
	// UnicodeScriptPauCinHau: pau Cin Hau. Since: 2.42
	UnicodeScriptPauCinHau UnicodeScript = 121
	// UnicodeScriptPsalterPahlavi: psalter Pahlavi. Since: 2.42
	UnicodeScriptPsalterPahlavi UnicodeScript = 122
	// UnicodeScriptSiddham: siddham. Since: 2.42
	UnicodeScriptSiddham UnicodeScript = 123
	// UnicodeScriptTirhuta: tirhuta. Since: 2.42
	UnicodeScriptTirhuta UnicodeScript = 124
	// UnicodeScriptWarangCiti: warang Citi. Since: 2.42
	UnicodeScriptWarangCiti UnicodeScript = 125
	// UnicodeScriptAhom: ahom. Since: 2.48
	UnicodeScriptAhom UnicodeScript = 126
	// UnicodeScriptAnatolianHieroglyphs: anatolian Hieroglyphs. Since: 2.48
	UnicodeScriptAnatolianHieroglyphs UnicodeScript = 127
	// UnicodeScriptHatran: hatran. Since: 2.48
	UnicodeScriptHatran UnicodeScript = 128
	// UnicodeScriptMultani: multani. Since: 2.48
	UnicodeScriptMultani UnicodeScript = 129
	// UnicodeScriptOldHungarian: old Hungarian. Since: 2.48
	UnicodeScriptOldHungarian UnicodeScript = 130
	// UnicodeScriptSignwriting: signwriting. Since: 2.48
	UnicodeScriptSignwriting UnicodeScript = 131
	// UnicodeScriptAdlam: adlam. Since: 2.50
	UnicodeScriptAdlam UnicodeScript = 132
	// UnicodeScriptBhaiksuki: bhaiksuki. Since: 2.50
	UnicodeScriptBhaiksuki UnicodeScript = 133
	// UnicodeScriptMarchen: marchen. Since: 2.50
	UnicodeScriptMarchen UnicodeScript = 134
	// UnicodeScriptNewa: newa. Since: 2.50
	UnicodeScriptNewa UnicodeScript = 135
	// UnicodeScriptOsage: osage. Since: 2.50
	UnicodeScriptOsage UnicodeScript = 136
	// UnicodeScriptTangut: tangut. Since: 2.50
	UnicodeScriptTangut UnicodeScript = 137
	// UnicodeScriptMasaramGondi: masaram Gondi. Since: 2.54
	UnicodeScriptMasaramGondi UnicodeScript = 138
	// UnicodeScriptNushu: nushu. Since: 2.54
	UnicodeScriptNushu UnicodeScript = 139
	// UnicodeScriptSoyombo: soyombo. Since: 2.54
	UnicodeScriptSoyombo UnicodeScript = 140
	// UnicodeScriptZanabazarSquare: zanabazar Square. Since: 2.54
	UnicodeScriptZanabazarSquare UnicodeScript = 141
	// UnicodeScriptDogra: dogra. Since: 2.58
	UnicodeScriptDogra UnicodeScript = 142
	// UnicodeScriptGunjalaGondi: gunjala Gondi. Since: 2.58
	UnicodeScriptGunjalaGondi UnicodeScript = 143
	// UnicodeScriptHanifiRohingya: hanifi Rohingya. Since: 2.58
	UnicodeScriptHanifiRohingya UnicodeScript = 144
	// UnicodeScriptMakasar: makasar. Since: 2.58
	UnicodeScriptMakasar UnicodeScript = 145
	// UnicodeScriptMedefaidrin: medefaidrin. Since: 2.58
	UnicodeScriptMedefaidrin UnicodeScript = 146
	// UnicodeScriptOldSogdian: old Sogdian. Since: 2.58
	UnicodeScriptOldSogdian UnicodeScript = 147
	// UnicodeScriptSogdian: sogdian. Since: 2.58
	UnicodeScriptSogdian UnicodeScript = 148
	// UnicodeScriptElymaic: elym. Since: 2.62
	UnicodeScriptElymaic UnicodeScript = 149
	// UnicodeScriptNandinagari: nand. Since: 2.62
	UnicodeScriptNandinagari UnicodeScript = 150
	// UnicodeScriptNyiakengPuachueHmong: rohg. Since: 2.62
	UnicodeScriptNyiakengPuachueHmong UnicodeScript = 151
	// UnicodeScriptWancho: wcho. Since: 2.62
	UnicodeScriptWancho UnicodeScript = 152
	// UnicodeScriptChorasmian: chorasmian. Since: 2.66
	UnicodeScriptChorasmian UnicodeScript = 153
	// UnicodeScriptDivesAkuru: dives Akuru. Since: 2.66
	UnicodeScriptDivesAkuru UnicodeScript = 154
	// UnicodeScriptKhitanSmallScript: khitan small script. Since: 2.66
	UnicodeScriptKhitanSmallScript UnicodeScript = 155
	// UnicodeScriptYezidi: yezidi. Since: 2.66
	UnicodeScriptYezidi UnicodeScript = 156
)

type UnicodeType int

const (
	// UnicodeTypeControl: general category "Other, Control" (Cc)
	UnicodeTypeControl UnicodeType = 0
	// UnicodeTypeFormat: general category "Other, Format" (Cf)
	UnicodeTypeFormat UnicodeType = 1
	// UnicodeTypeUnassigned: general category "Other, Not Assigned" (Cn)
	UnicodeTypeUnassigned UnicodeType = 2
	// UnicodeTypePrivateUse: general category "Other, Private Use" (Co)
	UnicodeTypePrivateUse UnicodeType = 3
	// UnicodeTypeSurrogate: general category "Other, Surrogate" (Cs)
	UnicodeTypeSurrogate UnicodeType = 4
	// UnicodeTypeLowercaseLetter: general category "Letter, Lowercase" (Ll)
	UnicodeTypeLowercaseLetter UnicodeType = 5
	// UnicodeTypeModifierLetter: general category "Letter, Modifier" (Lm)
	UnicodeTypeModifierLetter UnicodeType = 6
	// UnicodeTypeOtherLetter: general category "Letter, Other" (Lo)
	UnicodeTypeOtherLetter UnicodeType = 7
	// UnicodeTypeTitlecaseLetter: general category "Letter, Titlecase" (Lt)
	UnicodeTypeTitlecaseLetter UnicodeType = 8
	// UnicodeTypeUppercaseLetter: general category "Letter, Uppercase" (Lu)
	UnicodeTypeUppercaseLetter UnicodeType = 9
	// UnicodeTypeSpacingMark: general category "Mark, Spacing" (Mc)
	UnicodeTypeSpacingMark UnicodeType = 10
	// UnicodeTypeEnclosingMark: general category "Mark, Enclosing" (Me)
	UnicodeTypeEnclosingMark UnicodeType = 11
	// UnicodeTypeNonSpacingMark: general category "Mark, Nonspacing" (Mn)
	UnicodeTypeNonSpacingMark UnicodeType = 12
	// UnicodeTypeDecimalNumber: general category "Number, Decimal Digit" (Nd)
	UnicodeTypeDecimalNumber UnicodeType = 13
	// UnicodeTypeLetterNumber: general category "Number, Letter" (Nl)
	UnicodeTypeLetterNumber UnicodeType = 14
	// UnicodeTypeOtherNumber: general category "Number, Other" (No)
	UnicodeTypeOtherNumber UnicodeType = 15
	// UnicodeTypeConnectPunctuation: general category "Punctuation, Connector"
	// (Pc)
	UnicodeTypeConnectPunctuation UnicodeType = 16
	// UnicodeTypeDashPunctuation: general category "Punctuation, Dash" (Pd)
	UnicodeTypeDashPunctuation UnicodeType = 17
	// UnicodeTypeClosePunctuation: general category "Punctuation, Close" (Pe)
	UnicodeTypeClosePunctuation UnicodeType = 18
	// UnicodeTypeFinalPunctuation: general category "Punctuation, Final quote"
	// (Pf)
	UnicodeTypeFinalPunctuation UnicodeType = 19
	// UnicodeTypeInitialPunctuation: general category "Punctuation, Initial
	// quote" (Pi)
	UnicodeTypeInitialPunctuation UnicodeType = 20
	// UnicodeTypeOtherPunctuation: general category "Punctuation, Other" (Po)
	UnicodeTypeOtherPunctuation UnicodeType = 21
	// UnicodeTypeOpenPunctuation: general category "Punctuation, Open" (Ps)
	UnicodeTypeOpenPunctuation UnicodeType = 22
	// UnicodeTypeCurrencySymbol: general category "Symbol, Currency" (Sc)
	UnicodeTypeCurrencySymbol UnicodeType = 23
	// UnicodeTypeModifierSymbol: general category "Symbol, Modifier" (Sk)
	UnicodeTypeModifierSymbol UnicodeType = 24
	// UnicodeTypeMathSymbol: general category "Symbol, Math" (Sm)
	UnicodeTypeMathSymbol UnicodeType = 25
	// UnicodeTypeOtherSymbol: general category "Symbol, Other" (So)
	UnicodeTypeOtherSymbol UnicodeType = 26
	// UnicodeTypeLineSeparator: general category "Separator, Line" (Zl)
	UnicodeTypeLineSeparator UnicodeType = 27
	// UnicodeTypeParagraphSeparator: general category "Separator, Paragraph"
	// (Zp)
	UnicodeTypeParagraphSeparator UnicodeType = 28
	// UnicodeTypeSpaceSeparator: general category "Separator, Space" (Zs)
	UnicodeTypeSpaceSeparator UnicodeType = 29
)

type UriError int

const (
	// UriErrorFailed: generic error if no more specific error is available. See
	// the error message for details.
	UriErrorFailed UriError = 0
	// UriErrorBadScheme: the scheme of a URI could not be parsed.
	UriErrorBadScheme UriError = 1
	// UriErrorBadUser: the user/userinfo of a URI could not be parsed.
	UriErrorBadUser UriError = 2
	// UriErrorBadPassword: the password of a URI could not be parsed.
	UriErrorBadPassword UriError = 3
	// UriErrorBadAuthParams: the authentication parameters of a URI could not
	// be parsed.
	UriErrorBadAuthParams UriError = 4
	// UriErrorBadHost: the host of a URI could not be parsed.
	UriErrorBadHost UriError = 5
	// UriErrorBadPort: the port of a URI could not be parsed.
	UriErrorBadPort UriError = 6
	// UriErrorBadPath: the path of a URI could not be parsed.
	UriErrorBadPath UriError = 7
	// UriErrorBadQuery: the query of a URI could not be parsed.
	UriErrorBadQuery UriError = 8
	// UriErrorBadFragment: the fragment of a URI could not be parsed.
	UriErrorBadFragment UriError = 9
)

type UserDirectory int

const (
	// UserDirectoryDirectoryDesktop: the user's Desktop directory
	UserDirectoryDirectoryDesktop UserDirectory = 0
	// UserDirectoryDirectoryDocuments: the user's Documents directory
	UserDirectoryDirectoryDocuments UserDirectory = 1
	// UserDirectoryDirectoryDownload: the user's Downloads directory
	UserDirectoryDirectoryDownload UserDirectory = 2
	// UserDirectoryDirectoryMusic: the user's Music directory
	UserDirectoryDirectoryMusic UserDirectory = 3
	// UserDirectoryDirectoryPictures: the user's Pictures directory
	UserDirectoryDirectoryPictures UserDirectory = 4
	// UserDirectoryDirectoryPublicShare: the user's shared directory
	UserDirectoryDirectoryPublicShare UserDirectory = 5
	// UserDirectoryDirectoryTemplates: the user's Templates directory
	UserDirectoryDirectoryTemplates UserDirectory = 6
	// UserDirectoryDirectoryVideos: the user's Movies directory
	UserDirectoryDirectoryVideos UserDirectory = 7
	// UserDirectoryNDirectories: the number of enum values
	UserDirectoryNDirectories UserDirectory = 8
)

type VariantClass int

const (
	// VariantClassBoolean: the #GVariant is a boolean.
	VariantClassBoolean VariantClass = 98
	// VariantClassByte: the #GVariant is a byte.
	VariantClassByte VariantClass = 121
	// VariantClassInt16: the #GVariant is a signed 16 bit integer.
	VariantClassInt16 VariantClass = 110
	// VariantClassUint16: the #GVariant is an unsigned 16 bit integer.
	VariantClassUint16 VariantClass = 113
	// VariantClassInt32: the #GVariant is a signed 32 bit integer.
	VariantClassInt32 VariantClass = 105
	// VariantClassUint32: the #GVariant is an unsigned 32 bit integer.
	VariantClassUint32 VariantClass = 117
	// VariantClassInt64: the #GVariant is a signed 64 bit integer.
	VariantClassInt64 VariantClass = 120
	// VariantClassUint64: the #GVariant is an unsigned 64 bit integer.
	VariantClassUint64 VariantClass = 116
	// VariantClassHandle: the #GVariant is a file handle index.
	VariantClassHandle VariantClass = 104
	// VariantClassDouble: the #GVariant is a double precision floating point
	// value.
	VariantClassDouble VariantClass = 100
	// VariantClassString: the #GVariant is a normal string.
	VariantClassString VariantClass = 115
	// VariantClassObjectPath: the #GVariant is a D-Bus object path string.
	VariantClassObjectPath VariantClass = 111
	// VariantClassSignature: the #GVariant is a D-Bus signature string.
	VariantClassSignature VariantClass = 103
	// VariantClassVariant: the #GVariant is a variant.
	VariantClassVariant VariantClass = 118
	// VariantClassMaybe: the #GVariant is a maybe-typed value.
	VariantClassMaybe VariantClass = 109
	// VariantClassArray: the #GVariant is an array.
	VariantClassArray VariantClass = 97
	// VariantClassTuple: the #GVariant is a tuple.
	VariantClassTuple VariantClass = 40
	// VariantClassDictEntry: the #GVariant is a dictionary entry.
	VariantClassDictEntry VariantClass = 123
)

type VariantParseError int

const (
	// VariantParseErrorFailed: generic error (unused)
	VariantParseErrorFailed VariantParseError = 0
	// VariantParseErrorBasicTypeExpected: a non-basic Type was given where a
	// basic type was expected
	VariantParseErrorBasicTypeExpected VariantParseError = 1
	// VariantParseErrorCannotInferType: cannot infer the Type
	VariantParseErrorCannotInferType VariantParseError = 2
	// VariantParseErrorDefiniteTypeExpected: an indefinite Type was given where
	// a definite type was expected
	VariantParseErrorDefiniteTypeExpected VariantParseError = 3
	// VariantParseErrorInputNotAtEnd: extra data after parsing finished
	VariantParseErrorInputNotAtEnd VariantParseError = 4
	// VariantParseErrorInvalidCharacter: invalid character in number or unicode
	// escape
	VariantParseErrorInvalidCharacter VariantParseError = 5
	// VariantParseErrorInvalidFormatString: not a valid #GVariant format string
	VariantParseErrorInvalidFormatString VariantParseError = 6
	// VariantParseErrorInvalidObjectPath: not a valid object path
	VariantParseErrorInvalidObjectPath VariantParseError = 7
	// VariantParseErrorInvalidSignature: not a valid type signature
	VariantParseErrorInvalidSignature VariantParseError = 8
	// VariantParseErrorInvalidTypeString: not a valid #GVariant type string
	VariantParseErrorInvalidTypeString VariantParseError = 9
	// VariantParseErrorNoCommonType: could not find a common type for array
	// entries
	VariantParseErrorNoCommonType VariantParseError = 10
	// VariantParseErrorNumberOutOfRange: the numerical value is out of range of
	// the given type
	VariantParseErrorNumberOutOfRange VariantParseError = 11
	// VariantParseErrorNumberTooBig: the numerical value is out of range for
	// any type
	VariantParseErrorNumberTooBig VariantParseError = 12
	// VariantParseErrorTypeError: cannot parse as variant of the specified type
	VariantParseErrorTypeError VariantParseError = 13
	// VariantParseErrorUnexpectedToken: an unexpected token was encountered
	VariantParseErrorUnexpectedToken VariantParseError = 14
	// VariantParseErrorUnknownKeyword: an unknown keyword was encountered
	VariantParseErrorUnknownKeyword VariantParseError = 15
	// VariantParseErrorUnterminatedStringConstant: unterminated string constant
	VariantParseErrorUnterminatedStringConstant VariantParseError = 16
	// VariantParseErrorValueExpected: no value given
	VariantParseErrorValueExpected VariantParseError = 17
	// VariantParseErrorRecursion: variant was too deeply nested; #GVariant is
	// only guaranteed to handle nesting up to 64 levels (Since: 2.64)
	VariantParseErrorRecursion VariantParseError = 18
)
