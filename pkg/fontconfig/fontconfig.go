// Code generated by girgen. DO NOT EDIT.

package fontconfig

import (
	"runtime"
	"unsafe"

	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
//
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{

		// Records
		// Skipped Pattern.
		// Skipped CharSet.

	})
}

func Init() {

	C.FcInit()
}

type Pattern struct {
	native *C.FcPattern
}

// WrapPattern wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPattern(ptr unsafe.Pointer) *Pattern {
	p := (*C.FcPattern)(ptr)
	v := Pattern{native: p}

	runtime.SetFinalizer(&v, nil)
	runtime.SetFinalizer(&v, (*Pattern).free)

	return &v
}

func marshalPattern(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPattern(unsafe.Pointer(b))
}

func (p *Pattern) free() {
	C.free(p.Native())
}

// Native returns the underlying source pointer.
func (p *Pattern) Native() unsafe.Pointer {
	return unsafe.Pointer(p.native)
}

// Native returns the pointer to *C.FcPattern. The caller is expected to
// cast.
func (p *Pattern) Native() unsafe.Pointer {
	return unsafe.Pointer(p.native)
}

type CharSet struct {
	native *C.FcCharSet
}

// WrapCharSet wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapCharSet(ptr unsafe.Pointer) *CharSet {
	p := (*C.FcCharSet)(ptr)
	v := CharSet{native: p}

	runtime.SetFinalizer(&v, nil)
	runtime.SetFinalizer(&v, (*CharSet).free)

	return &v
}

func marshalCharSet(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapCharSet(unsafe.Pointer(b))
}

func (c *CharSet) free() {
	C.free(c.Native())
}

// Native returns the underlying source pointer.
func (c *CharSet) Native() unsafe.Pointer {
	return unsafe.Pointer(c.native)
}

// Native returns the pointer to *C.FcCharSet. The caller is expected to
// cast.
func (c *CharSet) Native() unsafe.Pointer {
	return unsafe.Pointer(c.native)
}
