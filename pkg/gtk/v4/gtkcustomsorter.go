// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/box"
	"github.com/diamondburned/gotk4/internal/gextras"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk.h>
//
// extern void callbackDelete(gpointer);
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_custom_sorter_get_type()), F: marshalCustomSorter},
	})
}

//export callbackDelete
func callbackDelete(ptr C.gpointer) {
	box.Delete(box.Callback, uintptr(ptr))
}

// CustomSorter: `GtkCustomSorter` is a `GtkSorter` implementation that sorts
// via a callback function.
type CustomSorter interface {
	Sorter

	// SetSortFunc sets (or unsets) the function used for sorting items.
	//
	// If @sort_func is nil, all items are considered equal.
	//
	// If the sort func changes its sorting behavior, gtk_sorter_changed() needs
	// to be called.
	//
	// If a previous function was set, its @user_destroy will be called now.
	SetSortFunc(sortFunc glib.CompareDataFunc)
}

// customSorter implements the CustomSorter interface.
type customSorter struct {
	Sorter
}

var _ CustomSorter = (*customSorter)(nil)

// WrapCustomSorter wraps a GObject to the right type. It is
// primarily used internally.
func WrapCustomSorter(obj *externglib.Object) CustomSorter {
	return CustomSorter{
		Sorter: WrapSorter(obj),
	}
}

func marshalCustomSorter(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapCustomSorter(obj), nil
}

// NewCustomSorter constructs a class CustomSorter.
func NewCustomSorter(sortFunc glib.CompareDataFunc) CustomSorter {
	var arg1 C.GCompareDataFunc
	var arg2 C.gpointer
	var arg3 C.GDestroyNotify

	arg1 = (*[0]byte)(C.gotk4_CompareDataFunc)
	arg2 = C.gpointer(box.Assign(sortFunc))
	arg3 = (*[0]byte)(C.callbackDelete)

	ret := C.gtk_custom_sorter_new(arg1, arg2, arg3)

	var ret0 CustomSorter

	ret0 = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(ret.Native()))).(CustomSorter)

	return ret0
}

// SetSortFunc sets (or unsets) the function used for sorting items.
//
// If @sort_func is nil, all items are considered equal.
//
// If the sort func changes its sorting behavior, gtk_sorter_changed() needs
// to be called.
//
// If a previous function was set, its @user_destroy will be called now.
func (s customSorter) SetSortFunc(sortFunc glib.CompareDataFunc) {
	var arg0 *C.GtkCustomSorter
	var arg1 C.GCompareDataFunc
	var arg2 C.gpointer
	var arg3 C.GDestroyNotify

	arg0 = (*C.GtkCustomSorter)(s.Native())
	arg1 = (*[0]byte)(C.gotk4_CompareDataFunc)
	arg2 = C.gpointer(box.Assign(sortFunc))
	arg3 = (*[0]byte)(C.callbackDelete)

	C.gtk_custom_sorter_set_sort_func(arg0, arg1, arg2, arg3)
}
