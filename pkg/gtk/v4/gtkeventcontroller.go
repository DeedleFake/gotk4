// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_event_controller_get_type()), F: marshalEventController},
	})
}

// EventController is a base, low-level implementation for event controllers.
// Those react to a series of Events, and possibly trigger actions as a
// consequence of those.
type EventController interface {
	gextras.Objector

	// CurrentEvent returns the event that is currently being handled by the
	// controller, and nil at other times.
	CurrentEvent(c EventController)
	// CurrentEventDevice returns the device of the event that is currently
	// being handled by the controller, and nil otherwise.
	CurrentEventDevice(c EventController)
	// CurrentEventState returns the modifier state of the event that is
	// currently being handled by the controller, and 0 otherwise.
	CurrentEventState(c EventController)
	// CurrentEventTime returns the timestamp of the event that is currently
	// being handled by the controller, and 0 otherwise.
	CurrentEventTime(c EventController)
	// Name gets the name of @controller.
	Name(c EventController)
	// PropagationLimit gets the propagation limit of the event controller.
	PropagationLimit(c EventController)
	// PropagationPhase gets the propagation phase at which @controller handles
	// events.
	PropagationPhase(c EventController)
	// Widget returns the Widget this controller relates to.
	Widget(c EventController)
	// Reset resets the @controller to a clean state. Every interaction the
	// controller did through gtk_event_controller_handle_event() will be
	// dropped at this point.
	Reset(c EventController)
	// SetName sets a name on the controller that can be used for debugging.
	SetName(c EventController, name string)
	// SetPropagationLimit sets the event propagation limit on the event
	// controller.
	//
	// If the limit is set to GTK_LIMIT_SAME_NATIVE, the controller won't handle
	// events that are targeted at widgets on a different surface, such as
	// popovers.
	SetPropagationLimit(c EventController, limit PropagationLimit)
	// SetPropagationPhase sets the propagation phase at which a controller
	// handles events.
	//
	// If @phase is GTK_PHASE_NONE, no automatic event handling will be
	// performed, but other additional gesture maintenance will. In that phase,
	// the events can be managed by calling gtk_event_controller_handle_event().
	SetPropagationPhase(c EventController, phase PropagationPhase)
}

// eventController implements the EventController interface.
type eventController struct {
	gextras.Objector
}

var _ EventController = (*eventController)(nil)

// WrapEventController wraps a GObject to the right type. It is
// primarily used internally.
func WrapEventController(obj *externglib.Object) EventController {
	return EventController{
		Objector: obj,
	}
}

func marshalEventController(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapEventController(obj), nil
}

// CurrentEvent returns the event that is currently being handled by the
// controller, and nil at other times.
func (c eventController) CurrentEvent(c EventController) {
	var arg0 *C.GtkEventController

	arg0 = (*C.GtkEventController)(unsafe.Pointer(c.Native()))

	C.gtk_event_controller_get_current_event(arg0)
}

// CurrentEventDevice returns the device of the event that is currently
// being handled by the controller, and nil otherwise.
func (c eventController) CurrentEventDevice(c EventController) {
	var arg0 *C.GtkEventController

	arg0 = (*C.GtkEventController)(unsafe.Pointer(c.Native()))

	C.gtk_event_controller_get_current_event_device(arg0)
}

// CurrentEventState returns the modifier state of the event that is
// currently being handled by the controller, and 0 otherwise.
func (c eventController) CurrentEventState(c EventController) {
	var arg0 *C.GtkEventController

	arg0 = (*C.GtkEventController)(unsafe.Pointer(c.Native()))

	C.gtk_event_controller_get_current_event_state(arg0)
}

// CurrentEventTime returns the timestamp of the event that is currently
// being handled by the controller, and 0 otherwise.
func (c eventController) CurrentEventTime(c EventController) {
	var arg0 *C.GtkEventController

	arg0 = (*C.GtkEventController)(unsafe.Pointer(c.Native()))

	C.gtk_event_controller_get_current_event_time(arg0)
}

// Name gets the name of @controller.
func (c eventController) Name(c EventController) {
	var arg0 *C.GtkEventController

	arg0 = (*C.GtkEventController)(unsafe.Pointer(c.Native()))

	C.gtk_event_controller_get_name(arg0)
}

// PropagationLimit gets the propagation limit of the event controller.
func (c eventController) PropagationLimit(c EventController) {
	var arg0 *C.GtkEventController

	arg0 = (*C.GtkEventController)(unsafe.Pointer(c.Native()))

	C.gtk_event_controller_get_propagation_limit(arg0)
}

// PropagationPhase gets the propagation phase at which @controller handles
// events.
func (c eventController) PropagationPhase(c EventController) {
	var arg0 *C.GtkEventController

	arg0 = (*C.GtkEventController)(unsafe.Pointer(c.Native()))

	C.gtk_event_controller_get_propagation_phase(arg0)
}

// Widget returns the Widget this controller relates to.
func (c eventController) Widget(c EventController) {
	var arg0 *C.GtkEventController

	arg0 = (*C.GtkEventController)(unsafe.Pointer(c.Native()))

	C.gtk_event_controller_get_widget(arg0)
}

// Reset resets the @controller to a clean state. Every interaction the
// controller did through gtk_event_controller_handle_event() will be
// dropped at this point.
func (c eventController) Reset(c EventController) {
	var arg0 *C.GtkEventController

	arg0 = (*C.GtkEventController)(unsafe.Pointer(c.Native()))

	C.gtk_event_controller_reset(arg0)
}

// SetName sets a name on the controller that can be used for debugging.
func (c eventController) SetName(c EventController, name string) {
	var arg0 *C.GtkEventController
	var arg1 *C.char

	arg0 = (*C.GtkEventController)(unsafe.Pointer(c.Native()))
	arg1 = (*C.char)(C.CString(name))
	defer C.free(unsafe.Pointer(arg1))

	C.gtk_event_controller_set_name(arg0, arg1)
}

// SetPropagationLimit sets the event propagation limit on the event
// controller.
//
// If the limit is set to GTK_LIMIT_SAME_NATIVE, the controller won't handle
// events that are targeted at widgets on a different surface, such as
// popovers.
func (c eventController) SetPropagationLimit(c EventController, limit PropagationLimit) {
	var arg0 *C.GtkEventController
	var arg1 C.GtkPropagationLimit

	arg0 = (*C.GtkEventController)(unsafe.Pointer(c.Native()))
	arg1 = (C.GtkPropagationLimit)(limit)

	C.gtk_event_controller_set_propagation_limit(arg0, arg1)
}

// SetPropagationPhase sets the propagation phase at which a controller
// handles events.
//
// If @phase is GTK_PHASE_NONE, no automatic event handling will be
// performed, but other additional gesture maintenance will. In that phase,
// the events can be managed by calling gtk_event_controller_handle_event().
func (c eventController) SetPropagationPhase(c EventController, phase PropagationPhase) {
	var arg0 *C.GtkEventController
	var arg1 C.GtkPropagationPhase

	arg0 = (*C.GtkEventController)(unsafe.Pointer(c.Native()))
	arg1 = (C.GtkPropagationPhase)(phase)

	C.gtk_event_controller_set_propagation_phase(arg0, arg1)
}
