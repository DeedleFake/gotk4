// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_event_controller_get_type()), F: marshalEventController},
	})
}

// EventController: `GtkEventController` is the base class for event
// controllers.
//
// These are ancillary objects associated to widgets, which react to
// `GdkEvents`, and possibly trigger actions as a consequence.
//
// Event controllers are added to a widget with
// [method@Gtk.Widget.add_controller]. It is rarely necessary to explicitly
// remove a controller with [method@Gtk.Widget.remove_controller].
//
// See the chapter of input handling (input-handling.html) for an overview of
// the basic concepts, such as the capture and bubble phases of even
// propagation.
type EventController interface {
	gextras.Objector

	// CurrentEventTime returns the timestamp of the event that is currently
	// being handled by the controller, and 0 otherwise.
	CurrentEventTime() uint32
	// Name gets the name of @controller.
	Name() string
	// Reset resets the @controller to a clean state.
	Reset()
	// SetName sets a name on the controller that can be used for debugging.
	SetName(name string)
	// SetPropagationLimit sets the event propagation limit on the event
	// controller.
	//
	// If the limit is set to GTK_LIMIT_SAME_NATIVE, the controller won't handle
	// events that are targeted at widgets on a different surface, such as
	// popovers.
	SetPropagationLimit(limit PropagationLimit)
	// SetPropagationPhase sets the propagation phase at which a controller
	// handles events.
	//
	// If @phase is GTK_PHASE_NONE, no automatic event handling will be
	// performed, but other additional gesture maintenance will.
	SetPropagationPhase(phase PropagationPhase)
}

// eventController implements the EventController interface.
type eventController struct {
	gextras.Objector
}

var _ EventController = (*eventController)(nil)

// WrapEventController wraps a GObject to the right type. It is
// primarily used internally.
func WrapEventController(obj *externglib.Object) EventController {
	return EventController{
		Objector: obj,
	}
}

func marshalEventController(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapEventController(obj), nil
}

// CurrentEventTime returns the timestamp of the event that is currently
// being handled by the controller, and 0 otherwise.
func (c eventController) CurrentEventTime() uint32 {
	var _arg0 *C.GtkEventController

	_arg0 = (*C.GtkEventController)(unsafe.Pointer(c.Native()))

	var _cret C.guint32

	_cret = C.gtk_event_controller_get_current_event_time(_arg0)

	var _guint32 uint32

	_guint32 = (uint32)(_cret)

	return _guint32
}

// Name gets the name of @controller.
func (c eventController) Name() string {
	var _arg0 *C.GtkEventController

	_arg0 = (*C.GtkEventController)(unsafe.Pointer(c.Native()))

	var _cret *C.char

	_cret = C.gtk_event_controller_get_name(_arg0)

	var _utf8 string

	_utf8 = C.GoString(_cret)

	return _utf8
}

// Reset resets the @controller to a clean state.
func (c eventController) Reset() {
	var _arg0 *C.GtkEventController

	_arg0 = (*C.GtkEventController)(unsafe.Pointer(c.Native()))

	C.gtk_event_controller_reset(_arg0)
}

// SetName sets a name on the controller that can be used for debugging.
func (c eventController) SetName(name string) {
	var _arg0 *C.GtkEventController
	var _arg1 *C.char

	_arg0 = (*C.GtkEventController)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.char)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_event_controller_set_name(_arg0, _arg1)
}

// SetPropagationLimit sets the event propagation limit on the event
// controller.
//
// If the limit is set to GTK_LIMIT_SAME_NATIVE, the controller won't handle
// events that are targeted at widgets on a different surface, such as
// popovers.
func (c eventController) SetPropagationLimit(limit PropagationLimit) {
	var _arg0 *C.GtkEventController
	var _arg1 C.GtkPropagationLimit

	_arg0 = (*C.GtkEventController)(unsafe.Pointer(c.Native()))
	_arg1 = (C.GtkPropagationLimit)(limit)

	C.gtk_event_controller_set_propagation_limit(_arg0, _arg1)
}

// SetPropagationPhase sets the propagation phase at which a controller
// handles events.
//
// If @phase is GTK_PHASE_NONE, no automatic event handling will be
// performed, but other additional gesture maintenance will.
func (c eventController) SetPropagationPhase(phase PropagationPhase) {
	var _arg0 *C.GtkEventController
	var _arg1 C.GtkPropagationPhase

	_arg0 = (*C.GtkEventController)(unsafe.Pointer(c.Native()))
	_arg1 = (C.GtkPropagationPhase)(phase)

	C.gtk_event_controller_set_propagation_phase(_arg0, _arg1)
}
