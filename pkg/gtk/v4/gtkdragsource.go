// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_drag_source_get_type()), F: marshalDragSource},
	})
}

// DragSource: gtkDragSource is an auxiliary object that is used to initiate
// Drag-And-Drop operations. It can be set up with the necessary ingredients for
// a DND operation ahead of time. This includes the source for the data that is
// being transferred, in the form of a ContentProvider, the desired action, and
// the icon to use during the drag operation. After setting it up, the drag
// source must be added to a widget as an event controller, using
// gtk_widget_add_controller().
//
//    static void
//    on_drag_begin (GtkDragSource *source,
//                   GtkDrag       *drag,
//                   MyWidget      *self)
//    {
//      // Set the widget as the drag icon
//      GdkPaintable *paintable = gtk_widget_paintable_new (GTK_WIDGET (self));
//      gtk_drag_source_set_icon (source, paintable, 0, 0);
//      g_object_unref (paintable);
//    }
//
// During the DND operation, GtkDragSource emits signals that can be used to
// obtain updates about the status of the operation, but it is not normally
// necessary to connect to any signals, except for one case: when the supported
// actions include GDK_ACTION_MOVE, you need to listen for the
// DragSource::drag-end signal and delete the data after it has been
// transferred.
type DragSource interface {
	GestureSingle

	// DragCancel cancels a currently ongoing drag operation.
	DragCancel(s DragSource)
	// Actions gets the actions that are currently set on the DragSource.
	Actions(s DragSource)
	// Content gets the current content provider of a DragSource.
	Content(s DragSource)
	// Drag returns the underlying Drag object for an ongoing drag.
	Drag(s DragSource)
	// SetActions sets the actions on the DragSource.
	//
	// During a DND operation, the actions are offered to potential drop
	// targets. If @actions include GDK_ACTION_MOVE, you need to listen to the
	// DragSource::drag-end signal and handle @delete_data being true.
	//
	// This function can be called before a drag is started, or in a handler for
	// the DragSource::prepare signal.
	SetActions(s DragSource, actions gdk.DragAction)
	// SetContent sets a content provider on a DragSource.
	//
	// When the data is requested in the cause of a DND operation, it will be
	// obtained from the content provider.
	//
	// This function can be called before a drag is started, or in a handler for
	// the DragSource::prepare signal.
	//
	// You may consider setting the content provider back to nil in a
	// DragSource::drag-end signal handler.
	SetContent(s DragSource, content gdk.ContentProvider)
	// SetIcon sets a paintable to use as icon during DND operations.
	//
	// The hotspot coordinates determine the point on the icon that gets aligned
	// with the hotspot of the cursor.
	//
	// If @paintable is nil, a default icon is used.
	//
	// This function can be called before a drag is started, or in a
	// DragSource::prepare or DragSource::drag-begin signal handler.
	SetIcon(s DragSource, paintable gdk.Paintable, hotX int, hotY int)
}

// dragSource implements the DragSource interface.
type dragSource struct {
	GestureSingle
}

var _ DragSource = (*dragSource)(nil)

// WrapDragSource wraps a GObject to the right type. It is
// primarily used internally.
func WrapDragSource(obj *externglib.Object) DragSource {
	return DragSource{
		GestureSingle: WrapGestureSingle(obj),
	}
}

func marshalDragSource(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapDragSource(obj), nil
}

// NewDragSource constructs a class DragSource.
func NewDragSource() {
	C.gtk_drag_source_new()
}

// DragCancel cancels a currently ongoing drag operation.
func (s dragSource) DragCancel(s DragSource) {
	var arg0 *C.GtkDragSource

	arg0 = (*C.GtkDragSource)(unsafe.Pointer(s.Native()))

	C.gtk_drag_source_drag_cancel(arg0)
}

// Actions gets the actions that are currently set on the DragSource.
func (s dragSource) Actions(s DragSource) {
	var arg0 *C.GtkDragSource

	arg0 = (*C.GtkDragSource)(unsafe.Pointer(s.Native()))

	C.gtk_drag_source_get_actions(arg0)
}

// Content gets the current content provider of a DragSource.
func (s dragSource) Content(s DragSource) {
	var arg0 *C.GtkDragSource

	arg0 = (*C.GtkDragSource)(unsafe.Pointer(s.Native()))

	C.gtk_drag_source_get_content(arg0)
}

// Drag returns the underlying Drag object for an ongoing drag.
func (s dragSource) Drag(s DragSource) {
	var arg0 *C.GtkDragSource

	arg0 = (*C.GtkDragSource)(unsafe.Pointer(s.Native()))

	C.gtk_drag_source_get_drag(arg0)
}

// SetActions sets the actions on the DragSource.
//
// During a DND operation, the actions are offered to potential drop
// targets. If @actions include GDK_ACTION_MOVE, you need to listen to the
// DragSource::drag-end signal and handle @delete_data being true.
//
// This function can be called before a drag is started, or in a handler for
// the DragSource::prepare signal.
func (s dragSource) SetActions(s DragSource, actions gdk.DragAction) {
	var arg0 *C.GtkDragSource
	var arg1 C.GdkDragAction

	arg0 = (*C.GtkDragSource)(unsafe.Pointer(s.Native()))
	arg1 = (C.GdkDragAction)(actions)

	C.gtk_drag_source_set_actions(arg0, arg1)
}

// SetContent sets a content provider on a DragSource.
//
// When the data is requested in the cause of a DND operation, it will be
// obtained from the content provider.
//
// This function can be called before a drag is started, or in a handler for
// the DragSource::prepare signal.
//
// You may consider setting the content provider back to nil in a
// DragSource::drag-end signal handler.
func (s dragSource) SetContent(s DragSource, content gdk.ContentProvider) {
	var arg0 *C.GtkDragSource
	var arg1 *C.GdkContentProvider

	arg0 = (*C.GtkDragSource)(unsafe.Pointer(s.Native()))
	arg1 = (*C.GdkContentProvider)(unsafe.Pointer(content.Native()))

	C.gtk_drag_source_set_content(arg0, arg1)
}

// SetIcon sets a paintable to use as icon during DND operations.
//
// The hotspot coordinates determine the point on the icon that gets aligned
// with the hotspot of the cursor.
//
// If @paintable is nil, a default icon is used.
//
// This function can be called before a drag is started, or in a
// DragSource::prepare or DragSource::drag-begin signal handler.
func (s dragSource) SetIcon(s DragSource, paintable gdk.Paintable, hotX int, hotY int) {
	var arg0 *C.GtkDragSource
	var arg1 *C.GdkPaintable
	var arg2 C.int
	var arg3 C.int

	arg0 = (*C.GtkDragSource)(unsafe.Pointer(s.Native()))
	arg1 = (*C.GdkPaintable)(unsafe.Pointer(paintable.Native()))
	arg2 = C.int(hotX)
	arg3 = C.int(hotY)

	C.gtk_drag_source_set_icon(arg0, arg1, arg2, arg3)
}
