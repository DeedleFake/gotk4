// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_shortcuts_group_get_type()), F: marshalShortcutsGroup},
	})
}

// ShortcutsGroup: `GtkShortcutsGroup` represents a group of related keyboard
// shortcuts or gestures.
//
// The group has a title. It may optionally be associated with a view of the
// application, which can be used to show only relevant shortcuts depending on
// the application context.
//
// This widget is only meant to be used with [class@Gtk.ShortcutsWindow].
type ShortcutsGroup interface {
	Box

	// AsAccessible casts the class to the Accessible interface.
	AsAccessible() Accessible
	// AsBuildable casts the class to the Buildable interface.
	AsBuildable() Buildable
	// AsConstraintTarget casts the class to the ConstraintTarget interface.
	AsConstraintTarget() ConstraintTarget
	// AsOrientable casts the class to the Orientable interface.
	AsOrientable() Orientable
}

// shortcutsGroup implements the ShortcutsGroup class.
type shortcutsGroup struct {
	Box
}

// WrapShortcutsGroup wraps a GObject to the right type. It is
// primarily used internally.
func WrapShortcutsGroup(obj *externglib.Object) ShortcutsGroup {
	return shortcutsGroup{
		Box: WrapBox(obj),
	}
}

func marshalShortcutsGroup(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapShortcutsGroup(obj), nil
}

func (s shortcutsGroup) AsAccessible() Accessible {
	return WrapAccessible(gextras.InternObject(s))
}

func (s shortcutsGroup) AsBuildable() Buildable {
	return WrapBuildable(gextras.InternObject(s))
}

func (s shortcutsGroup) AsConstraintTarget() ConstraintTarget {
	return WrapConstraintTarget(gextras.InternObject(s))
}

func (s shortcutsGroup) AsOrientable() Orientable {
	return WrapOrientable(gextras.InternObject(s))
}
