// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_emoji_chooser_get_type()), F: marshalEmojiChooserrer},
	})
}

// EmojiChooserrer describes EmojiChooser's methods.
type EmojiChooserrer interface {
	gextras.Objector

	privateEmojiChooser()
}

// EmojiChooser: the `GtkEmojiChooser` is used by text widgets such as
// `GtkEntry` or `GtkTextView` to let users insert Emoji characters.
//
// !An example GtkEmojiChooser (emojichooser.png)
//
// `GtkEmojiChooser` emits the [signal@Gtk.EmojiChooser::emoji-picked] signal
// when an Emoji is selected.
//
//
// CSS nodes
//
// “` popover ├── box.emoji-searchbar │ ╰── entry.search ╰── box.emoji-toolbar
// ├── button.image-button.emoji-section ├── ... ╰──
// button.image-button.emoji-section “`
//
// Every `GtkEmojiChooser` consists of a main node called popover. The contents
// of the popover are largely implementation defined and supposed to inherit
// general styles. The top searchbar used to search emoji and gets the
// .emoji-searchbar style class itself. The bottom toolbar used to switch
// between different emoji categories consists of buttons with the
// .emoji-section style class and gets the .emoji-toolbar style class itself.
type EmojiChooser struct {
	*externglib.Object

	Popover
	Accessible
	Buildable
	ConstraintTarget
	Native
	ShortcutManager
}

var _ EmojiChooserrer = (*EmojiChooser)(nil)

func wrapEmojiChooserrer(obj *externglib.Object) EmojiChooserrer {
	return &EmojiChooser{
		Object: obj,
		Popover: Popover{
			Object: obj,
			Widget: Widget{
				Object: obj,
				InitiallyUnowned: externglib.InitiallyUnowned{
					Object: obj,
				},
				Accessible: Accessible{
					Object: obj,
				},
				Buildable: Buildable{
					Object: obj,
				},
				ConstraintTarget: ConstraintTarget{
					Object: obj,
				},
			},
			Accessible: Accessible{
				Object: obj,
			},
			Buildable: Buildable{
				Object: obj,
			},
			ConstraintTarget: ConstraintTarget{
				Object: obj,
			},
			Native: Native{
				Object: obj,
				Widget: Widget{
					Object: obj,
					InitiallyUnowned: externglib.InitiallyUnowned{
						Object: obj,
					},
					Accessible: Accessible{
						Object: obj,
					},
					Buildable: Buildable{
						Object: obj,
					},
					ConstraintTarget: ConstraintTarget{
						Object: obj,
					},
				},
			},
			ShortcutManager: ShortcutManager{
				Object: obj,
			},
		},
		Accessible: Accessible{
			Object: obj,
		},
		Buildable: Buildable{
			Object: obj,
		},
		ConstraintTarget: ConstraintTarget{
			Object: obj,
		},
		Native: Native{
			Object: obj,
			Widget: Widget{
				Object: obj,
				InitiallyUnowned: externglib.InitiallyUnowned{
					Object: obj,
				},
				Accessible: Accessible{
					Object: obj,
				},
				Buildable: Buildable{
					Object: obj,
				},
				ConstraintTarget: ConstraintTarget{
					Object: obj,
				},
			},
		},
		ShortcutManager: ShortcutManager{
			Object: obj,
		},
	}
}

func marshalEmojiChooserrer(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapEmojiChooserrer(obj), nil
}

// NewEmojiChooser creates a new `GtkEmojiChooser`.
func NewEmojiChooser() *EmojiChooser {
	var _cret *C.GtkWidget // in

	_cret = C.gtk_emoji_chooser_new()

	var _emojiChooser *EmojiChooser // out

	_emojiChooser = (gextras.CastObject(externglib.Take(unsafe.Pointer(_cret)))).(*EmojiChooser)

	return _emojiChooser
}

func (*EmojiChooser) privateEmojiChooser() {}
