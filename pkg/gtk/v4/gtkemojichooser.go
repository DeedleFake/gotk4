// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_emoji_chooser_get_type()), F: marshalEmojiChooser},
	})
}

// EmojiChooser: the `GtkEmojiChooser` is used by text widgets such as
// `GtkEntry` or `GtkTextView` to let users insert Emoji characters.
//
// !An example GtkEmojiChooser (emojichooser.png)
//
// `GtkEmojiChooser` emits the [signal@Gtk.EmojiChooser::emoji-picked] signal
// when an Emoji is selected.
//
//
// CSS nodes
//
// “` popover ├── box.emoji-searchbar │ ╰── entry.search ╰── box.emoji-toolbar
// ├── button.image-button.emoji-section ├── ... ╰──
// button.image-button.emoji-section “`
//
// Every `GtkEmojiChooser` consists of a main node called popover. The contents
// of the popover are largely implementation defined and supposed to inherit
// general styles. The top searchbar used to search emoji and gets the
// .emoji-searchbar style class itself. The bottom toolbar used to switch
// between different emoji categories consists of buttons with the
// .emoji-section style class and gets the .emoji-toolbar style class itself.
type EmojiChooser interface {
	Popover

	// AsAccessible casts the class to the Accessible interface.
	AsAccessible() Accessible
	// AsBuildable casts the class to the Buildable interface.
	AsBuildable() Buildable
	// AsConstraintTarget casts the class to the ConstraintTarget interface.
	AsConstraintTarget() ConstraintTarget
	// AsNative casts the class to the Native interface.
	AsNative() Native
	// AsShortcutManager casts the class to the ShortcutManager interface.
	AsShortcutManager() ShortcutManager
}

// emojiChooser implements the EmojiChooser class.
type emojiChooser struct {
	Popover
}

// WrapEmojiChooser wraps a GObject to the right type. It is
// primarily used internally.
func WrapEmojiChooser(obj *externglib.Object) EmojiChooser {
	return emojiChooser{
		Popover: WrapPopover(obj),
	}
}

func marshalEmojiChooser(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapEmojiChooser(obj), nil
}

// NewEmojiChooser creates a new `GtkEmojiChooser`.
func NewEmojiChooser() EmojiChooser {
	var _cret *C.GtkWidget // in

	_cret = C.gtk_emoji_chooser_new()

	var _emojiChooser EmojiChooser // out

	_emojiChooser = WrapEmojiChooser(externglib.Take(unsafe.Pointer(_cret)))

	return _emojiChooser
}

func (e emojiChooser) AsAccessible() Accessible {
	return WrapAccessible(gextras.InternObject(e))
}

func (e emojiChooser) AsBuildable() Buildable {
	return WrapBuildable(gextras.InternObject(e))
}

func (e emojiChooser) AsConstraintTarget() ConstraintTarget {
	return WrapConstraintTarget(gextras.InternObject(e))
}

func (e emojiChooser) AsNative() Native {
	return WrapNative(gextras.InternObject(e))
}

func (e emojiChooser) AsShortcutManager() ShortcutManager {
	return WrapShortcutManager(gextras.InternObject(e))
}
