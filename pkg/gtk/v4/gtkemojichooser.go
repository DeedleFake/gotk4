// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_emoji_chooser_get_type()), F: marshalEmojiChooser},
	})
}

// EmojiChooser: the EmojiChooser popover is used by text widgets such as Entry
// or TextView to offer users a convenient way to insert Emoji characters.
//
// GtkEmojiChooser emits the EmojiChooser::emoji-picked signal when an Emoji is
// selected.
//
// CSS nodes
//
//    popover
//    ├── box.emoji-searchbar
//    │   ╰── entry.search
//    ╰── box.emoji-toolbar
//        ├── button.image-button.emoji-section
//        ├── ...
//        ╰── button.image-button.emoji-section
//
// Every EmojiChooser consists of a main node called popover. The contents of
// the popover are largely implementation defined and supposed to inherit
// general styles. The top searchbar used to search emoji and gets the
// .emoji-searchbar style class itself. The bottom toolbar used to switch
// between different emoji categories consists of buttons with the
// .emoji-section style class and gets the .emoji-toolbar style class itself.
type EmojiChooser interface {
	Popover
	Accessible
	Buildable
	ConstraintTarget
	Native
	ShortcutManager
}

// emojiChooser implements the EmojiChooser interface.
type emojiChooser struct {
	Popover
	Accessible
	Buildable
	ConstraintTarget
	Native
	ShortcutManager
}

var _ EmojiChooser = (*emojiChooser)(nil)

// WrapEmojiChooser wraps a GObject to the right type. It is
// primarily used internally.
func WrapEmojiChooser(obj *externglib.Object) EmojiChooser {
	return EmojiChooser{
		Popover:          WrapPopover(obj),
		Accessible:       WrapAccessible(obj),
		Buildable:        WrapBuildable(obj),
		ConstraintTarget: WrapConstraintTarget(obj),
		Native:           WrapNative(obj),
		ShortcutManager:  WrapShortcutManager(obj),
	}
}

func marshalEmojiChooser(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapEmojiChooser(obj), nil
}

// NewEmojiChooser constructs a class EmojiChooser.
func NewEmojiChooser() EmojiChooser {
	var cret C.GtkEmojiChooser

	cret = C.gtk_emoji_chooser_new()

	var emojiChooser EmojiChooser

	emojiChooser = gextras.CastObject(externglib.Take(unsafe.Pointer(cret.Native()))).(EmojiChooser)

	return emojiChooser
}
