// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_font_chooser_dialog_get_type()), F: marshalFontChooserDialogger},
	})
}

// FontChooserDialogger describes FontChooserDialog's methods.
type FontChooserDialogger interface {
	privateFontChooserDialog()
}

// FontChooserDialog: `GtkFontChooserDialog` widget is a dialog for selecting a
// font.
//
// !An example GtkFontChooserDialog (fontchooser.png)
//
// `GtkFontChooserDialog` implements the [iface@Gtk.FontChooser] interface and
// does not provide much API of its own.
//
// To create a `GtkFontChooserDialog`, use [ctor@Gtk.FontChooserDialog.new].
//
//
// GtkFontChooserDialog as GtkBuildable
//
// The `GtkFontChooserDialog` implementation of the `GtkBuildable` interface
// exposes the buttons with the names “select_button” and “cancel_button”.
type FontChooserDialog struct {
	Dialog

	FontChooser
}

var (
	_ FontChooserDialogger = (*FontChooserDialog)(nil)
	_ gextras.Nativer      = (*FontChooserDialog)(nil)
)

func wrapFontChooserDialog(obj *externglib.Object) FontChooserDialogger {
	return &FontChooserDialog{
		Dialog: Dialog{
			Window: Window{
				Widget: Widget{
					InitiallyUnowned: externglib.InitiallyUnowned{
						Object: obj,
					},
					Accessible: Accessible{
						Object: obj,
					},
					Buildable: Buildable{
						Object: obj,
					},
					ConstraintTarget: ConstraintTarget{
						Object: obj,
					},
				},
				Root: Root{
					Native: Native{
						Widget: Widget{
							InitiallyUnowned: externglib.InitiallyUnowned{
								Object: obj,
							},
							Accessible: Accessible{
								Object: obj,
							},
							Buildable: Buildable{
								Object: obj,
							},
							ConstraintTarget: ConstraintTarget{
								Object: obj,
							},
						},
					},
				},
				ShortcutManager: ShortcutManager{
					Object: obj,
				},
			},
		},
		FontChooser: FontChooser{
			Object: obj,
		},
	}
}

func marshalFontChooserDialogger(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapFontChooserDialog(obj), nil
}

// NewFontChooserDialog creates a new `GtkFontChooserDialog`.
func NewFontChooserDialog(title string, parent Windowwer) *FontChooserDialog {
	var _arg1 *C.char      // out
	var _arg2 *C.GtkWindow // out
	var _cret *C.GtkWidget // in

	_arg1 = (*C.char)(C.CString(title))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.GtkWindow)(unsafe.Pointer((parent).(gextras.Nativer).Native()))

	_cret = C.gtk_font_chooser_dialog_new(_arg1, _arg2)

	var _fontChooserDialog *FontChooserDialog // out

	_fontChooserDialog = (gextras.CastObject(externglib.Take(unsafe.Pointer(_cret)))).(*FontChooserDialog)

	return _fontChooserDialog
}

// Native implements gextras.Nativer. It returns the underlying GObject
// field.
func (v *FontChooserDialog) Native() uintptr {
	return v.Dialog.Window.Widget.InitiallyUnowned.Object.Native()
}

func (*FontChooserDialog) privateFontChooserDialog() {}
