// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_accessible_get_type()), F: marshalAccessible},
	})
}

// Accessible: `GtkAccessible` is an interface for describing UI elements for
// Assistive Technologies.
//
// Every accessible implementation has:
//
//    - a “role”, represented by a value of the [enum@Gtk.AccessibleRole]
//      enumeration
//    - an “attribute”, represented by a set of [enum@Gtk.AccessibleState],
//      [enum@Gtk.AccessibleProperty] and [enum@Gtk.AccessibleRelation] values
//
// The role cannot be changed after instantiating a `GtkAccessible`
// implementation.
//
// The attributes are updated every time a UI element's state changes in a way
// that should be reflected by assistive technologies. For instance, if a
// `GtkWidget` visibility changes, the GTK_ACCESSIBLE_STATE_HIDDEN state will
// also change to reflect the [property@Gtk.Widget:visible] property.
type Accessible interface {
	gextras.Objector

	// AccessibleRole retrieves the `GtkAccessibleRole` for the given
	// `GtkAccessible`.
	AccessibleRole() AccessibleRole
}

// AccessibleInterface implements the Accessible interface.
type AccessibleInterface struct {
	*externglib.Object
}

var _ Accessible = (*AccessibleInterface)(nil)

func wrapAccessible(obj *externglib.Object) Accessible {
	return &AccessibleInterface{
		Object: obj,
	}
}

func marshalAccessible(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapAccessible(obj), nil
}

// AccessibleRole retrieves the `GtkAccessibleRole` for the given
// `GtkAccessible`.
func (s *AccessibleInterface) AccessibleRole() AccessibleRole {
	var _arg0 *C.GtkAccessible    // out
	var _cret C.GtkAccessibleRole // in

	_arg0 = (*C.GtkAccessible)(unsafe.Pointer((&s).Native()))

	_cret = C.gtk_accessible_get_accessible_role(_arg0)

	var _accessibleRole AccessibleRole // out

	_accessibleRole = (AccessibleRole)(_cret)

	return _accessibleRole
}
