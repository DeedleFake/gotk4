// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_accessible_get_type()), F: marshalAccessible},
	})
}

func AccessiblePropertyInitValue(property AccessibleProperty, value *externglib.Value) {
	var arg1 C.GtkAccessibleProperty
	var arg2 *C.GValue

	arg1 = (C.GtkAccessibleProperty)(property)
	arg2 = (*C.GValue)(value.GValue)

	C.gtk_accessible_property_init_value(property, value)
}

func AccessibleRelationInitValue(relation AccessibleRelation, value *externglib.Value) {
	var arg1 C.GtkAccessibleRelation
	var arg2 *C.GValue

	arg1 = (C.GtkAccessibleRelation)(relation)
	arg2 = (*C.GValue)(value.GValue)

	C.gtk_accessible_relation_init_value(relation, value)
}

func AccessibleStateInitValue(state AccessibleState, value *externglib.Value) {
	var arg1 C.GtkAccessibleState
	var arg2 *C.GValue

	arg1 = (C.GtkAccessibleState)(state)
	arg2 = (*C.GValue)(value.GValue)

	C.gtk_accessible_state_init_value(state, value)
}

// Accessible: gtkAccessible provides an interface for describing a UI element,
// like a Widget, in a way that can be consumed by Assistive Technologies, or
// “AT”. Every accessible implementation has:
//
//    - a “role”, represented by a value of the AccessibleRole enumeration
//    - an “attribute”, represented by a set of AccessibleState,
//      AccessibleProperty and AccessibleRelation values
//
// The role cannot be changed after instantiating a Accessible implementation.
//
// The attributes are updated every time a UI element's state changes in a way
// that should be reflected by assistive technologies. For instance, if a Widget
// visibility changes, the GTK_ACCESSIBLE_STATE_HIDDEN state will also change to
// reflect the Widget:visible property.
type Accessible interface {
	gextras.Objector

	// AccessibleRole retrieves the AccessibleRole for the given Accessible.
	AccessibleRole() AccessibleRole
	// ResetProperty resets the accessible @property to its default value.
	ResetProperty(property AccessibleProperty)
	// ResetRelation resets the accessible @relation to its default value.
	ResetRelation(relation AccessibleRelation)
	// ResetState resets the accessible @state to its default value.
	ResetState(state AccessibleState)
}

// accessible implements the Accessible interface.
type accessible struct {
	gextras.Objector
}

var _ Accessible = (*accessible)(nil)

// WrapAccessible wraps a GObject to a type that implements interface
// Accessible. It is primarily used internally.
func WrapAccessible(obj *externglib.Object) Accessible {
	return Accessible{
		Objector: obj,
	}
}

func marshalAccessible(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapAccessible(obj), nil
}

// AccessibleRole retrieves the AccessibleRole for the given Accessible.
func (s accessible) AccessibleRole() AccessibleRole {
	var arg0 *C.GtkAccessible

	arg0 = (*C.GtkAccessible)(unsafe.Pointer(s.Native()))

	var cret C.GtkAccessibleRole
	var goret1 AccessibleRole

	cret = C.gtk_accessible_get_accessible_role(arg0)

	goret1 = AccessibleRole(cret)

	return goret1
}

// ResetProperty resets the accessible @property to its default value.
func (s accessible) ResetProperty(property AccessibleProperty) {
	var arg0 *C.GtkAccessible
	var arg1 C.GtkAccessibleProperty

	arg0 = (*C.GtkAccessible)(unsafe.Pointer(s.Native()))
	arg1 = (C.GtkAccessibleProperty)(property)

	C.gtk_accessible_reset_property(arg0, property)
}

// ResetRelation resets the accessible @relation to its default value.
func (s accessible) ResetRelation(relation AccessibleRelation) {
	var arg0 *C.GtkAccessible
	var arg1 C.GtkAccessibleRelation

	arg0 = (*C.GtkAccessible)(unsafe.Pointer(s.Native()))
	arg1 = (C.GtkAccessibleRelation)(relation)

	C.gtk_accessible_reset_relation(arg0, relation)
}

// ResetState resets the accessible @state to its default value.
func (s accessible) ResetState(state AccessibleState) {
	var arg0 *C.GtkAccessible
	var arg1 C.GtkAccessibleState

	arg0 = (*C.GtkAccessible)(unsafe.Pointer(s.Native()))
	arg1 = (C.GtkAccessibleState)(state)

	C.gtk_accessible_reset_state(arg0, state)
}
