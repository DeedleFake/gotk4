// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_any_filter_get_type()), F: marshalAnyFilterrer},
		{T: externglib.Type(C.gtk_every_filter_get_type()), F: marshalEveryFilterrer},
		{T: externglib.Type(C.gtk_multi_filter_get_type()), F: marshalMultiFilterrer},
	})
}

// AnyFilterrer describes AnyFilter's methods.
type AnyFilterrer interface {
	gextras.Objector

	privateAnyFilter()
}

// AnyFilter: `GtkAnyFilter` matches an item when at least one of its filters
// matches.
//
// To add filters to a `GtkAnyFilter`, use [method@Gtk.MultiFilter.append].
type AnyFilter struct {
	*externglib.Object
	MultiFilter
	Buildable
}

var _ AnyFilterrer = (*AnyFilter)(nil)

func wrapAnyFilterrer(obj *externglib.Object) AnyFilterrer {
	return &AnyFilter{
		Object: obj,
		MultiFilter: MultiFilter{
			Object: obj,
			Filter: Filter{
				Object: obj,
			},
			Buildable: Buildable{
				Object: obj,
			},
		},
		Buildable: Buildable{
			Object: obj,
		},
	}
}

func marshalAnyFilterrer(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapAnyFilterrer(obj), nil
}

// NewAnyFilter creates a new empty "any" filter.
//
// Use [method@Gtk.MultiFilter.append] to add filters to it.
//
// This filter matches an item if any of the filters added to it matches the
// item. In particular, this means that if no filter has been added to it, the
// filter matches no item.
func NewAnyFilter() *AnyFilter {
	var _cret *C.GtkAnyFilter // in

	_cret = C.gtk_any_filter_new()

	var _anyFilter *AnyFilter // out

	_anyFilter = (gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret)))).(*AnyFilter)

	return _anyFilter
}

func (*AnyFilter) privateAnyFilter() {}

// EveryFilterrer describes EveryFilter's methods.
type EveryFilterrer interface {
	gextras.Objector

	privateEveryFilter()
}

// EveryFilter: `GtkEveryFilter` matches an item when each of its filters
// matches.
//
// To add filters to a `GtkEveryFilter`, use [method@Gtk.MultiFilter.append].
type EveryFilter struct {
	*externglib.Object
	MultiFilter
	Buildable
}

var _ EveryFilterrer = (*EveryFilter)(nil)

func wrapEveryFilterrer(obj *externglib.Object) EveryFilterrer {
	return &EveryFilter{
		Object: obj,
		MultiFilter: MultiFilter{
			Object: obj,
			Filter: Filter{
				Object: obj,
			},
			Buildable: Buildable{
				Object: obj,
			},
		},
		Buildable: Buildable{
			Object: obj,
		},
	}
}

func marshalEveryFilterrer(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapEveryFilterrer(obj), nil
}

// NewEveryFilter creates a new empty "every" filter.
//
// Use [method@Gtk.MultiFilter.append] to add filters to it.
//
// This filter matches an item if each of the filters added to it matches the
// item. In particular, this means that if no filter has been added to it, the
// filter matches every item.
func NewEveryFilter() *EveryFilter {
	var _cret *C.GtkEveryFilter // in

	_cret = C.gtk_every_filter_new()

	var _everyFilter *EveryFilter // out

	_everyFilter = (gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret)))).(*EveryFilter)

	return _everyFilter
}

func (*EveryFilter) privateEveryFilter() {}

// MultiFilterrer describes MultiFilter's methods.
type MultiFilterrer interface {
	gextras.Objector

	Append(filter Filterrer)
	Remove(position uint)
}

// MultiFilter: `GtkMultiFilter` is the base class for filters that combine
// multiple filters.
type MultiFilter struct {
	*externglib.Object
	Filter
	Buildable
}

var _ MultiFilterrer = (*MultiFilter)(nil)

func wrapMultiFilterrer(obj *externglib.Object) MultiFilterrer {
	return &MultiFilter{
		Object: obj,
		Filter: Filter{
			Object: obj,
		},
		Buildable: Buildable{
			Object: obj,
		},
	}
}

func marshalMultiFilterrer(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapMultiFilterrer(obj), nil
}

// Append adds a @filter to @self to use for matching.
func (self *MultiFilter) Append(filter Filterrer) {
	var _arg0 *C.GtkMultiFilter // out
	var _arg1 *C.GtkFilter      // out

	_arg0 = (*C.GtkMultiFilter)(unsafe.Pointer(self.Native()))
	_arg1 = (*C.GtkFilter)(unsafe.Pointer(filter.Native()))

	C.gtk_multi_filter_append(_arg0, _arg1)
}

// Remove removes the filter at the given @position from the list of filters
// used by @self.
//
// If @position is larger than the number of filters, nothing happens and the
// function returns.
func (self *MultiFilter) Remove(position uint) {
	var _arg0 *C.GtkMultiFilter // out
	var _arg1 C.guint           // out

	_arg0 = (*C.GtkMultiFilter)(unsafe.Pointer(self.Native()))
	_arg1 = C.guint(position)

	C.gtk_multi_filter_remove(_arg0, _arg1)
}
