// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_any_filter_get_type()), F: marshalAnyFilter},
		{T: externglib.Type(C.gtk_every_filter_get_type()), F: marshalEveryFilter},
		{T: externglib.Type(C.gtk_multi_filter_get_type()), F: marshalMultiFilter},
	})
}

// AnyFilter: `GtkAnyFilter` matches an item when at least one of its filters
// matches.
//
// To add filters to a `GtkAnyFilter`, use [method@Gtk.MultiFilter.append].
type AnyFilter interface {
	MultiFilter

	// AsMultiFilter casts the class to the MultiFilter interface.
	AsMultiFilter() MultiFilter
	// AsBuildable casts the class to the Buildable interface.
	AsBuildable() Buildable

	// Append adds a @filter to @self to use for matching.
	//
	// This method is inherited from MultiFilter
	Append(filter Filter)
	// Remove removes the filter at the given @position from the list of filters
	// used by @self.
	//
	// If @position is larger than the number of filters, nothing happens and
	// the function returns.
	//
	// This method is inherited from MultiFilter
	Remove(position uint)
	// Changed emits the Filter::changed signal to notify all users of the
	// filter that the filter changed. Users of the filter should then check
	// items again via gtk_filter_match().
	//
	// Depending on the @change parameter, not all items need to be changed, but
	// only some. Refer to the FilterChange documentation for details.
	//
	// This function is intended for implementors of Filter subclasses and
	// should not be called from other functions.
	//
	// This method is inherited from Filter
	Changed(change FilterChange)
	// GetStrictness gets the known strictness of @filters. If the strictness is
	// not known, GTK_FILTER_MATCH_SOME is returned.
	//
	// This value may change after emission of the Filter::changed signal.
	//
	// This function is meant purely for optimization purposes, filters can
	// choose to omit implementing it, but FilterListModel uses it.
	//
	// This method is inherited from Filter
	GetStrictness() FilterMatch
	// Match checks if the given @item is matched by the filter or not.
	//
	// This method is inherited from Filter
	Match(item gextras.Objector) bool
	// GetBuildableID gets the ID of the @buildable object.
	//
	// `GtkBuilder` sets the name based on the ID attribute of the <object> tag
	// used to construct the @buildable.
	//
	// This method is inherited from Buildable
	GetBuildableID() string
	// GetBuildableID gets the ID of the @buildable object.
	//
	// `GtkBuilder` sets the name based on the ID attribute of the <object> tag
	// used to construct the @buildable.
	//
	// This method is inherited from Buildable
	GetBuildableID() string
}

// anyFilter implements the AnyFilter interface.
type anyFilter struct {
	*externglib.Object
}

var _ AnyFilter = (*anyFilter)(nil)

// WrapAnyFilter wraps a GObject to a type that implements
// interface AnyFilter. It is primarily used internally.
func WrapAnyFilter(obj *externglib.Object) AnyFilter {
	return anyFilter{obj}
}

func marshalAnyFilter(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapAnyFilter(obj), nil
}

// NewAnyFilter creates a new empty "any" filter.
//
// Use [method@Gtk.MultiFilter.append] to add filters to it.
//
// This filter matches an item if any of the filters added to it matches the
// item. In particular, this means that if no filter has been added to it, the
// filter matches no item.
func NewAnyFilter() AnyFilter {
	var _cret *C.GtkAnyFilter // in

	_cret = C.gtk_any_filter_new()

	var _anyFilter AnyFilter // out

	_anyFilter = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(AnyFilter)

	return _anyFilter
}

func (a anyFilter) AsMultiFilter() MultiFilter {
	return WrapMultiFilter(gextras.InternObject(a))
}

func (a anyFilter) AsBuildable() Buildable {
	return WrapBuildable(gextras.InternObject(a))
}

func (s anyFilter) Append(filter Filter) {
	WrapMultiFilter(gextras.InternObject(s)).Append(filter)
}

func (s anyFilter) Remove(position uint) {
	WrapMultiFilter(gextras.InternObject(s)).Remove(position)
}

func (s anyFilter) Changed(change FilterChange) {
	WrapFilter(gextras.InternObject(s)).Changed(change)
}

func (s anyFilter) GetStrictness() FilterMatch {
	return WrapFilter(gextras.InternObject(s)).GetStrictness()
}

func (s anyFilter) Match(item gextras.Objector) bool {
	return WrapFilter(gextras.InternObject(s)).Match(item)
}

func (b anyFilter) GetBuildableID() string {
	return WrapBuildable(gextras.InternObject(b)).GetBuildableID()
}

func (b anyFilter) GetBuildableID() string {
	return WrapBuildable(gextras.InternObject(b)).GetBuildableID()
}

// EveryFilter: `GtkEveryFilter` matches an item when each of its filters
// matches.
//
// To add filters to a `GtkEveryFilter`, use [method@Gtk.MultiFilter.append].
type EveryFilter interface {
	MultiFilter

	// AsMultiFilter casts the class to the MultiFilter interface.
	AsMultiFilter() MultiFilter
	// AsBuildable casts the class to the Buildable interface.
	AsBuildable() Buildable

	// Append adds a @filter to @self to use for matching.
	//
	// This method is inherited from MultiFilter
	Append(filter Filter)
	// Remove removes the filter at the given @position from the list of filters
	// used by @self.
	//
	// If @position is larger than the number of filters, nothing happens and
	// the function returns.
	//
	// This method is inherited from MultiFilter
	Remove(position uint)
	// Changed emits the Filter::changed signal to notify all users of the
	// filter that the filter changed. Users of the filter should then check
	// items again via gtk_filter_match().
	//
	// Depending on the @change parameter, not all items need to be changed, but
	// only some. Refer to the FilterChange documentation for details.
	//
	// This function is intended for implementors of Filter subclasses and
	// should not be called from other functions.
	//
	// This method is inherited from Filter
	Changed(change FilterChange)
	// GetStrictness gets the known strictness of @filters. If the strictness is
	// not known, GTK_FILTER_MATCH_SOME is returned.
	//
	// This value may change after emission of the Filter::changed signal.
	//
	// This function is meant purely for optimization purposes, filters can
	// choose to omit implementing it, but FilterListModel uses it.
	//
	// This method is inherited from Filter
	GetStrictness() FilterMatch
	// Match checks if the given @item is matched by the filter or not.
	//
	// This method is inherited from Filter
	Match(item gextras.Objector) bool
	// GetBuildableID gets the ID of the @buildable object.
	//
	// `GtkBuilder` sets the name based on the ID attribute of the <object> tag
	// used to construct the @buildable.
	//
	// This method is inherited from Buildable
	GetBuildableID() string
	// GetBuildableID gets the ID of the @buildable object.
	//
	// `GtkBuilder` sets the name based on the ID attribute of the <object> tag
	// used to construct the @buildable.
	//
	// This method is inherited from Buildable
	GetBuildableID() string
}

// everyFilter implements the EveryFilter interface.
type everyFilter struct {
	*externglib.Object
}

var _ EveryFilter = (*everyFilter)(nil)

// WrapEveryFilter wraps a GObject to a type that implements
// interface EveryFilter. It is primarily used internally.
func WrapEveryFilter(obj *externglib.Object) EveryFilter {
	return everyFilter{obj}
}

func marshalEveryFilter(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapEveryFilter(obj), nil
}

// NewEveryFilter creates a new empty "every" filter.
//
// Use [method@Gtk.MultiFilter.append] to add filters to it.
//
// This filter matches an item if each of the filters added to it matches the
// item. In particular, this means that if no filter has been added to it, the
// filter matches every item.
func NewEveryFilter() EveryFilter {
	var _cret *C.GtkEveryFilter // in

	_cret = C.gtk_every_filter_new()

	var _everyFilter EveryFilter // out

	_everyFilter = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(EveryFilter)

	return _everyFilter
}

func (e everyFilter) AsMultiFilter() MultiFilter {
	return WrapMultiFilter(gextras.InternObject(e))
}

func (e everyFilter) AsBuildable() Buildable {
	return WrapBuildable(gextras.InternObject(e))
}

func (s everyFilter) Append(filter Filter) {
	WrapMultiFilter(gextras.InternObject(s)).Append(filter)
}

func (s everyFilter) Remove(position uint) {
	WrapMultiFilter(gextras.InternObject(s)).Remove(position)
}

func (s everyFilter) Changed(change FilterChange) {
	WrapFilter(gextras.InternObject(s)).Changed(change)
}

func (s everyFilter) GetStrictness() FilterMatch {
	return WrapFilter(gextras.InternObject(s)).GetStrictness()
}

func (s everyFilter) Match(item gextras.Objector) bool {
	return WrapFilter(gextras.InternObject(s)).Match(item)
}

func (b everyFilter) GetBuildableID() string {
	return WrapBuildable(gextras.InternObject(b)).GetBuildableID()
}

func (b everyFilter) GetBuildableID() string {
	return WrapBuildable(gextras.InternObject(b)).GetBuildableID()
}

// MultiFilter: `GtkMultiFilter` is the base class for filters that combine
// multiple filters.
type MultiFilter interface {
	Filter

	// AsFilter casts the class to the Filter interface.
	AsFilter() Filter
	// AsBuildable casts the class to the Buildable interface.
	AsBuildable() Buildable

	// Changed emits the Filter::changed signal to notify all users of the
	// filter that the filter changed. Users of the filter should then check
	// items again via gtk_filter_match().
	//
	// Depending on the @change parameter, not all items need to be changed, but
	// only some. Refer to the FilterChange documentation for details.
	//
	// This function is intended for implementors of Filter subclasses and
	// should not be called from other functions.
	//
	// This method is inherited from Filter
	Changed(change FilterChange)
	// GetStrictness gets the known strictness of @filters. If the strictness is
	// not known, GTK_FILTER_MATCH_SOME is returned.
	//
	// This value may change after emission of the Filter::changed signal.
	//
	// This function is meant purely for optimization purposes, filters can
	// choose to omit implementing it, but FilterListModel uses it.
	//
	// This method is inherited from Filter
	GetStrictness() FilterMatch
	// Match checks if the given @item is matched by the filter or not.
	//
	// This method is inherited from Filter
	Match(item gextras.Objector) bool
	// GetBuildableID gets the ID of the @buildable object.
	//
	// `GtkBuilder` sets the name based on the ID attribute of the <object> tag
	// used to construct the @buildable.
	//
	// This method is inherited from Buildable
	GetBuildableID() string

	// Append adds a @filter to @self to use for matching.
	Append(filter Filter)
	// Remove removes the filter at the given @position from the list of filters
	// used by @self.
	//
	// If @position is larger than the number of filters, nothing happens and
	// the function returns.
	Remove(position uint)
}

// multiFilter implements the MultiFilter interface.
type multiFilter struct {
	*externglib.Object
}

var _ MultiFilter = (*multiFilter)(nil)

// WrapMultiFilter wraps a GObject to a type that implements
// interface MultiFilter. It is primarily used internally.
func WrapMultiFilter(obj *externglib.Object) MultiFilter {
	return multiFilter{obj}
}

func marshalMultiFilter(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapMultiFilter(obj), nil
}

func (m multiFilter) AsFilter() Filter {
	return WrapFilter(gextras.InternObject(m))
}

func (m multiFilter) AsBuildable() Buildable {
	return WrapBuildable(gextras.InternObject(m))
}

func (s multiFilter) Changed(change FilterChange) {
	WrapFilter(gextras.InternObject(s)).Changed(change)
}

func (s multiFilter) GetStrictness() FilterMatch {
	return WrapFilter(gextras.InternObject(s)).GetStrictness()
}

func (s multiFilter) Match(item gextras.Objector) bool {
	return WrapFilter(gextras.InternObject(s)).Match(item)
}

func (b multiFilter) GetBuildableID() string {
	return WrapBuildable(gextras.InternObject(b)).GetBuildableID()
}

func (s multiFilter) Append(filter Filter) {
	var _arg0 *C.GtkMultiFilter // out
	var _arg1 *C.GtkFilter      // out

	_arg0 = (*C.GtkMultiFilter)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GtkFilter)(unsafe.Pointer(filter.Native()))

	C.gtk_multi_filter_append(_arg0, _arg1)
}

func (s multiFilter) Remove(position uint) {
	var _arg0 *C.GtkMultiFilter // out
	var _arg1 C.guint           // out

	_arg0 = (*C.GtkMultiFilter)(unsafe.Pointer(s.Native()))
	_arg1 = C.guint(position)

	C.gtk_multi_filter_remove(_arg0, _arg1)
}
