// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_any_filter_get_type()), F: marshalAnyFilter},
		{T: externglib.Type(C.gtk_every_filter_get_type()), F: marshalEveryFilter},
		{T: externglib.Type(C.gtk_multi_filter_get_type()), F: marshalMultiFilter},
	})
}

// AnyFilter: `GtkAnyFilter` matches an item when at least one of its filters
// matches.
//
// To add filters to a `GtkAnyFilter`, use [method@Gtk.MultiFilter.append].
type AnyFilter interface {
	gextras.Objector

	privateAnyFilterClass()
}

// AnyFilterClass implements the AnyFilter interface.
type AnyFilterClass struct {
	*externglib.Object
	MultiFilterClass
	BuildableInterface
}

var _ AnyFilter = (*AnyFilterClass)(nil)

func wrapAnyFilter(obj *externglib.Object) AnyFilter {
	return &AnyFilterClass{
		Object: obj,
		MultiFilterClass: MultiFilterClass{
			Object: obj,
			FilterClass: FilterClass{
				Object: obj,
			},
			BuildableInterface: BuildableInterface{
				Object: obj,
			},
		},
		BuildableInterface: BuildableInterface{
			Object: obj,
		},
	}
}

func marshalAnyFilter(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapAnyFilter(obj), nil
}

// NewAnyFilter creates a new empty "any" filter.
//
// Use [method@Gtk.MultiFilter.append] to add filters to it.
//
// This filter matches an item if any of the filters added to it matches the
// item. In particular, this means that if no filter has been added to it, the
// filter matches no item.
func NewAnyFilter() *AnyFilterClass {
	var _cret *C.GtkAnyFilter // in

	_cret = C.gtk_any_filter_new()

	var _anyFilter *AnyFilterClass // out

	_anyFilter = (gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret)))).(*AnyFilterClass)

	return _anyFilter
}

func (*AnyFilterClass) privateAnyFilterClass() {}

// EveryFilter: `GtkEveryFilter` matches an item when each of its filters
// matches.
//
// To add filters to a `GtkEveryFilter`, use [method@Gtk.MultiFilter.append].
type EveryFilter interface {
	gextras.Objector

	privateEveryFilterClass()
}

// EveryFilterClass implements the EveryFilter interface.
type EveryFilterClass struct {
	*externglib.Object
	MultiFilterClass
	BuildableInterface
}

var _ EveryFilter = (*EveryFilterClass)(nil)

func wrapEveryFilter(obj *externglib.Object) EveryFilter {
	return &EveryFilterClass{
		Object: obj,
		MultiFilterClass: MultiFilterClass{
			Object: obj,
			FilterClass: FilterClass{
				Object: obj,
			},
			BuildableInterface: BuildableInterface{
				Object: obj,
			},
		},
		BuildableInterface: BuildableInterface{
			Object: obj,
		},
	}
}

func marshalEveryFilter(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapEveryFilter(obj), nil
}

// NewEveryFilter creates a new empty "every" filter.
//
// Use [method@Gtk.MultiFilter.append] to add filters to it.
//
// This filter matches an item if each of the filters added to it matches the
// item. In particular, this means that if no filter has been added to it, the
// filter matches every item.
func NewEveryFilter() *EveryFilterClass {
	var _cret *C.GtkEveryFilter // in

	_cret = C.gtk_every_filter_new()

	var _everyFilter *EveryFilterClass // out

	_everyFilter = (gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret)))).(*EveryFilterClass)

	return _everyFilter
}

func (*EveryFilterClass) privateEveryFilterClass() {}

// MultiFilter: `GtkMultiFilter` is the base class for filters that combine
// multiple filters.
type MultiFilter interface {
	gextras.Objector

	// Append adds a @filter to @self to use for matching.
	Append(filter Filter)
	// Remove removes the filter at the given @position from the list of filters
	// used by @self.
	//
	// If @position is larger than the number of filters, nothing happens and
	// the function returns.
	Remove(position uint)
}

// MultiFilterClass implements the MultiFilter interface.
type MultiFilterClass struct {
	*externglib.Object
	FilterClass
	BuildableInterface
}

var _ MultiFilter = (*MultiFilterClass)(nil)

func wrapMultiFilter(obj *externglib.Object) MultiFilter {
	return &MultiFilterClass{
		Object: obj,
		FilterClass: FilterClass{
			Object: obj,
		},
		BuildableInterface: BuildableInterface{
			Object: obj,
		},
	}
}

func marshalMultiFilter(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapMultiFilter(obj), nil
}

// Append adds a @filter to @self to use for matching.
func (s *MultiFilterClass) Append(filter Filter) {
	var _arg0 *C.GtkMultiFilter // out
	var _arg1 *C.GtkFilter      // out

	_arg0 = (*C.GtkMultiFilter)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GtkFilter)(unsafe.Pointer(filter.Native()))

	C.gtk_multi_filter_append(_arg0, _arg1)
}

// Remove removes the filter at the given @position from the list of filters
// used by @self.
//
// If @position is larger than the number of filters, nothing happens and the
// function returns.
func (s *MultiFilterClass) Remove(position uint) {
	var _arg0 *C.GtkMultiFilter // out
	var _arg1 C.guint           // out

	_arg0 = (*C.GtkMultiFilter)(unsafe.Pointer(s.Native()))
	_arg1 = C.guint(position)

	C.gtk_multi_filter_remove(_arg0, _arg1)
}
