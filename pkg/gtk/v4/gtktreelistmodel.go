// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/box"
	"github.com/diamondburned/gotk4/internal/gextras"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: glib-2.0 gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_tree_list_model_get_type()), F: marshalTreeListModel},
		{T: externglib.Type(C.gtk_tree_list_row_get_type()), F: marshalTreeListRow},
	})
}

// TreeListModelCreateModelFunc: prototype of the function called to create new
// child models when gtk_tree_list_row_set_expanded() is called.
//
// This function can return nil to indicate that @item is guaranteed to be a
// leaf node and will never have children. If it does not have children but may
// get children later, it should return an empty model that is filled once
// children arrive.
type TreeListModelCreateModelFunc func(item gextras.Objector) (listModel gio.ListModel)

//export gotk4_TreeListModelCreateModelFunc
func gotk4_TreeListModelCreateModelFunc(arg0 C.gpointer, arg1 C.gpointer) *C.GListModel {
	v := box.Get(uintptr(arg1))
	if v == nil {
		panic(`callback not found`)
	}

	var item gextras.Objector // out

	item = gextras.CastObject(externglib.Take(unsafe.Pointer(arg0.Native()))).(gextras.Objector)

	fn := v.(TreeListModelCreateModelFunc)
	listModel := fn(item)

	var cret *C.GListModel // out

	cret = (*C.GListModel)(unsafe.Pointer(listModel.Native()))

	return cret
}

// TreeListModel: `GtkTreeListModel` is a list model that can create child
// models on demand.
type TreeListModel interface {
	gextras.Objector
	gio.ListModel

	// Autoexpand gets whether the model is set to automatically expand new rows
	// that get added.
	//
	// This can be either rows added by changes to the underlying models or via
	// [method@Gtk.TreeListRow.set_expanded].
	Autoexpand() bool
	// Passthrough gets whether the model is passing through original row items.
	//
	// If this function returns false, the `GListModel` functions for @self
	// return custom `GtkTreeListRow` objects. You need to call
	// [method@Gtk.TreeListRow.get_item] on these objects to get the original
	// item.
	//
	// If true, the values of the child models are passed through in their
	// original state. You then need to call [method@Gtk.TreeListModel.get_row]
	// to get the custom `GtkTreeListRow`s.
	Passthrough() bool
	// SetAutoexpand sets whether the model should autoexpand.
	//
	// If set to true, the model will recursively expand all rows that get added
	// to the model. This can be either rows added by changes to the underlying
	// models or via [method@Gtk.TreeListRow.set_expanded].
	SetAutoexpand(autoexpand bool)
}

// treeListModel implements the TreeListModel class.
type treeListModel struct {
	gextras.Objector
	gio.ListModel
}

var _ TreeListModel = (*treeListModel)(nil)

// WrapTreeListModel wraps a GObject to the right type. It is
// primarily used internally.
func WrapTreeListModel(obj *externglib.Object) TreeListModel {
	return treeListModel{
		Objector:      obj,
		gio.ListModel: gio.WrapListModel(obj),
	}
}

func marshalTreeListModel(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapTreeListModel(obj), nil
}

// Autoexpand gets whether the model is set to automatically expand new rows
// that get added.
//
// This can be either rows added by changes to the underlying models or via
// [method@Gtk.TreeListRow.set_expanded].
func (s treeListModel) Autoexpand() bool {
	var _arg0 *C.GtkTreeListModel // out

	_arg0 = (*C.GtkTreeListModel)(unsafe.Pointer(s.Native()))

	var _cret C.gboolean // in

	_cret = C.gtk_tree_list_model_get_autoexpand(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Passthrough gets whether the model is passing through original row items.
//
// If this function returns false, the `GListModel` functions for @self
// return custom `GtkTreeListRow` objects. You need to call
// [method@Gtk.TreeListRow.get_item] on these objects to get the original
// item.
//
// If true, the values of the child models are passed through in their
// original state. You then need to call [method@Gtk.TreeListModel.get_row]
// to get the custom `GtkTreeListRow`s.
func (s treeListModel) Passthrough() bool {
	var _arg0 *C.GtkTreeListModel // out

	_arg0 = (*C.GtkTreeListModel)(unsafe.Pointer(s.Native()))

	var _cret C.gboolean // in

	_cret = C.gtk_tree_list_model_get_passthrough(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetAutoexpand sets whether the model should autoexpand.
//
// If set to true, the model will recursively expand all rows that get added
// to the model. This can be either rows added by changes to the underlying
// models or via [method@Gtk.TreeListRow.set_expanded].
func (s treeListModel) SetAutoexpand(autoexpand bool) {
	var _arg0 *C.GtkTreeListModel // out
	var _arg1 C.gboolean          // out

	_arg0 = (*C.GtkTreeListModel)(unsafe.Pointer(s.Native()))
	if autoexpand {
		_arg1 = C.TRUE
	}

	C.gtk_tree_list_model_set_autoexpand(_arg0, _arg1)
}

// TreeListRow: `GtkTreeListRow` is used by `GtkTreeListModel` to represent
// items.
//
// It allows navigating the model as a tree and modify the state of rows.
//
// `GtkTreeListRow` instances are created by a `GtkTreeListModel` only when the
// [property@Gtk.TreeListModel:passthrough] property is not set.
//
// There are various support objects that can make use of `GtkTreeListRow`
// objects, such as the [class@Gtk.TreeExpander] widget that allows displaying
// an icon to expand or collapse a row or [class@Gtk.TreeListRowSorter] that
// makes it possible to sort trees properly.
type TreeListRow interface {
	gextras.Objector

	// Depth gets the depth of this row.
	//
	// Rows that correspond to items in the root model have a depth of zero,
	// rows corresponding to items of models of direct children of the root
	// model have a depth of 1 and so on.
	//
	// The depth of a row never changes until the row is destroyed.
	Depth() uint
	// Expanded gets if a row is currently expanded.
	Expanded() bool
	// Item gets the item corresponding to this row,
	//
	// The value returned by this function never changes until the row is
	// destroyed.
	Item() gextras.Objector
	// Position returns the position in the `GtkTreeListModel` that @self
	// occupies at the moment.
	Position() uint
	// IsExpandable checks if a row can be expanded.
	//
	// This does not mean that the row is actually expanded, this can be checked
	// with [method@Gtk.TreeListRow.get_expanded].
	//
	// If a row is expandable never changes until the row is destroyed.
	IsExpandable() bool
	// SetExpanded expands or collapses a row.
	//
	// If a row is expanded, the model of calling the
	// [callback@Gtk.TreeListModelCreateModelFunc] for the row's item will be
	// inserted after this row. If a row is collapsed, those items will be
	// removed from the model.
	//
	// If the row is not expandable, this function does nothing.
	SetExpanded(expanded bool)
}

// treeListRow implements the TreeListRow class.
type treeListRow struct {
	gextras.Objector
}

var _ TreeListRow = (*treeListRow)(nil)

// WrapTreeListRow wraps a GObject to the right type. It is
// primarily used internally.
func WrapTreeListRow(obj *externglib.Object) TreeListRow {
	return treeListRow{
		Objector: obj,
	}
}

func marshalTreeListRow(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapTreeListRow(obj), nil
}

// Depth gets the depth of this row.
//
// Rows that correspond to items in the root model have a depth of zero,
// rows corresponding to items of models of direct children of the root
// model have a depth of 1 and so on.
//
// The depth of a row never changes until the row is destroyed.
func (s treeListRow) Depth() uint {
	var _arg0 *C.GtkTreeListRow // out

	_arg0 = (*C.GtkTreeListRow)(unsafe.Pointer(s.Native()))

	var _cret C.guint // in

	_cret = C.gtk_tree_list_row_get_depth(_arg0)

	var _guint uint // out

	_guint = (uint)(_cret)

	return _guint
}

// Expanded gets if a row is currently expanded.
func (s treeListRow) Expanded() bool {
	var _arg0 *C.GtkTreeListRow // out

	_arg0 = (*C.GtkTreeListRow)(unsafe.Pointer(s.Native()))

	var _cret C.gboolean // in

	_cret = C.gtk_tree_list_row_get_expanded(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Item gets the item corresponding to this row,
//
// The value returned by this function never changes until the row is
// destroyed.
func (s treeListRow) Item() gextras.Objector {
	var _arg0 *C.GtkTreeListRow // out

	_arg0 = (*C.GtkTreeListRow)(unsafe.Pointer(s.Native()))

	var _cret C.gpointer // in

	_cret = C.gtk_tree_list_row_get_item(_arg0)

	var _object gextras.Objector // out

	_object = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret.Native()))).(gextras.Objector)

	return _object
}

// Position returns the position in the `GtkTreeListModel` that @self
// occupies at the moment.
func (s treeListRow) Position() uint {
	var _arg0 *C.GtkTreeListRow // out

	_arg0 = (*C.GtkTreeListRow)(unsafe.Pointer(s.Native()))

	var _cret C.guint // in

	_cret = C.gtk_tree_list_row_get_position(_arg0)

	var _guint uint // out

	_guint = (uint)(_cret)

	return _guint
}

// IsExpandable checks if a row can be expanded.
//
// This does not mean that the row is actually expanded, this can be checked
// with [method@Gtk.TreeListRow.get_expanded].
//
// If a row is expandable never changes until the row is destroyed.
func (s treeListRow) IsExpandable() bool {
	var _arg0 *C.GtkTreeListRow // out

	_arg0 = (*C.GtkTreeListRow)(unsafe.Pointer(s.Native()))

	var _cret C.gboolean // in

	_cret = C.gtk_tree_list_row_is_expandable(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetExpanded expands or collapses a row.
//
// If a row is expanded, the model of calling the
// [callback@Gtk.TreeListModelCreateModelFunc] for the row's item will be
// inserted after this row. If a row is collapsed, those items will be
// removed from the model.
//
// If the row is not expandable, this function does nothing.
func (s treeListRow) SetExpanded(expanded bool) {
	var _arg0 *C.GtkTreeListRow // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.GtkTreeListRow)(unsafe.Pointer(s.Native()))
	if expanded {
		_arg1 = C.TRUE
	}

	C.gtk_tree_list_row_set_expanded(_arg0, _arg1)
}
