// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_tree_list_model_get_type()), F: marshalTreeListModel},
		{T: externglib.Type(C.gtk_tree_list_row_get_type()), F: marshalTreeListRow},
	})
}

// TreeListModel: `GtkTreeListModel` is a list model that can create child
// models on demand.
type TreeListModel interface {
	gextras.Objector

	Autoexpand() bool

	ChildRow(position uint) TreeListRow

	Passthrough() bool

	Row(position uint) TreeListRow

	SetAutoexpandTreeListModel(autoexpand bool)
}

// treeListModel implements the TreeListModel class.
type treeListModel struct {
	gextras.Objector
}

// WrapTreeListModel wraps a GObject to the right type. It is
// primarily used internally.
func WrapTreeListModel(obj *externglib.Object) TreeListModel {
	return treeListModel{
		Objector: obj,
	}
}

func marshalTreeListModel(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapTreeListModel(obj), nil
}

func (s treeListModel) Autoexpand() bool {
	var _arg0 *C.GtkTreeListModel // out
	var _cret C.gboolean          // in

	_arg0 = (*C.GtkTreeListModel)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_tree_list_model_get_autoexpand(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (s treeListModel) ChildRow(position uint) TreeListRow {
	var _arg0 *C.GtkTreeListModel // out
	var _arg1 C.guint             // out
	var _cret *C.GtkTreeListRow   // in

	_arg0 = (*C.GtkTreeListModel)(unsafe.Pointer(s.Native()))
	_arg1 = C.guint(position)

	_cret = C.gtk_tree_list_model_get_child_row(_arg0, _arg1)

	var _treeListRow TreeListRow // out

	_treeListRow = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(TreeListRow)

	return _treeListRow
}

func (s treeListModel) Passthrough() bool {
	var _arg0 *C.GtkTreeListModel // out
	var _cret C.gboolean          // in

	_arg0 = (*C.GtkTreeListModel)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_tree_list_model_get_passthrough(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (s treeListModel) Row(position uint) TreeListRow {
	var _arg0 *C.GtkTreeListModel // out
	var _arg1 C.guint             // out
	var _cret *C.GtkTreeListRow   // in

	_arg0 = (*C.GtkTreeListModel)(unsafe.Pointer(s.Native()))
	_arg1 = C.guint(position)

	_cret = C.gtk_tree_list_model_get_row(_arg0, _arg1)

	var _treeListRow TreeListRow // out

	_treeListRow = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(TreeListRow)

	return _treeListRow
}

func (s treeListModel) SetAutoexpandTreeListModel(autoexpand bool) {
	var _arg0 *C.GtkTreeListModel // out
	var _arg1 C.gboolean          // out

	_arg0 = (*C.GtkTreeListModel)(unsafe.Pointer(s.Native()))
	if autoexpand {
		_arg1 = C.TRUE
	}

	C.gtk_tree_list_model_set_autoexpand(_arg0, _arg1)
}

// TreeListRow: `GtkTreeListRow` is used by `GtkTreeListModel` to represent
// items.
//
// It allows navigating the model as a tree and modify the state of rows.
//
// `GtkTreeListRow` instances are created by a `GtkTreeListModel` only when the
// [property@Gtk.TreeListModel:passthrough] property is not set.
//
// There are various support objects that can make use of `GtkTreeListRow`
// objects, such as the [class@Gtk.TreeExpander] widget that allows displaying
// an icon to expand or collapse a row or [class@Gtk.TreeListRowSorter] that
// makes it possible to sort trees properly.
type TreeListRow interface {
	gextras.Objector

	ChildRow(position uint) TreeListRow

	Depth() uint

	Expanded() bool

	Item() gextras.Objector

	Parent() TreeListRow

	Position() uint

	IsExpandableTreeListRow() bool

	SetExpandedTreeListRow(expanded bool)
}

// treeListRow implements the TreeListRow class.
type treeListRow struct {
	gextras.Objector
}

// WrapTreeListRow wraps a GObject to the right type. It is
// primarily used internally.
func WrapTreeListRow(obj *externglib.Object) TreeListRow {
	return treeListRow{
		Objector: obj,
	}
}

func marshalTreeListRow(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapTreeListRow(obj), nil
}

func (s treeListRow) ChildRow(position uint) TreeListRow {
	var _arg0 *C.GtkTreeListRow // out
	var _arg1 C.guint           // out
	var _cret *C.GtkTreeListRow // in

	_arg0 = (*C.GtkTreeListRow)(unsafe.Pointer(s.Native()))
	_arg1 = C.guint(position)

	_cret = C.gtk_tree_list_row_get_child_row(_arg0, _arg1)

	var _treeListRow TreeListRow // out

	_treeListRow = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(TreeListRow)

	return _treeListRow
}

func (s treeListRow) Depth() uint {
	var _arg0 *C.GtkTreeListRow // out
	var _cret C.guint           // in

	_arg0 = (*C.GtkTreeListRow)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_tree_list_row_get_depth(_arg0)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

func (s treeListRow) Expanded() bool {
	var _arg0 *C.GtkTreeListRow // out
	var _cret C.gboolean        // in

	_arg0 = (*C.GtkTreeListRow)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_tree_list_row_get_expanded(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (s treeListRow) Item() gextras.Objector {
	var _arg0 *C.GtkTreeListRow // out
	var _cret C.gpointer        // in

	_arg0 = (*C.GtkTreeListRow)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_tree_list_row_get_item(_arg0)

	var _object gextras.Objector // out

	_object = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(gextras.Objector)

	return _object
}

func (s treeListRow) Parent() TreeListRow {
	var _arg0 *C.GtkTreeListRow // out
	var _cret *C.GtkTreeListRow // in

	_arg0 = (*C.GtkTreeListRow)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_tree_list_row_get_parent(_arg0)

	var _treeListRow TreeListRow // out

	_treeListRow = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(TreeListRow)

	return _treeListRow
}

func (s treeListRow) Position() uint {
	var _arg0 *C.GtkTreeListRow // out
	var _cret C.guint           // in

	_arg0 = (*C.GtkTreeListRow)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_tree_list_row_get_position(_arg0)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

func (s treeListRow) IsExpandableTreeListRow() bool {
	var _arg0 *C.GtkTreeListRow // out
	var _cret C.gboolean        // in

	_arg0 = (*C.GtkTreeListRow)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_tree_list_row_is_expandable(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (s treeListRow) SetExpandedTreeListRow(expanded bool) {
	var _arg0 *C.GtkTreeListRow // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.GtkTreeListRow)(unsafe.Pointer(s.Native()))
	if expanded {
		_arg1 = C.TRUE
	}

	C.gtk_tree_list_row_set_expanded(_arg0, _arg1)
}
