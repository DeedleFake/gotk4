// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/box"
	"github.com/diamondburned/gotk4/internal/gextras"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <stdbool.h>
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_tree_list_model_get_type()), F: marshalTreeListModel},
		{T: externglib.Type(C.gtk_tree_list_row_get_type()), F: marshalTreeListRow},
	})
}

// TreeListModelCreateModelFunc: prototype of the function called to create new
// child models when gtk_tree_list_row_set_expanded() is called.
//
// This function can return nil to indicate that @item is guaranteed to be a
// leaf node and will never have children. If it does not have children but may
// get children later, it should return an empty model that is filled once
// children arrive.
type TreeListModelCreateModelFunc func(item gextras.Objector) gio.ListModel

//export gotk4_TreeListModelCreateModelFunc
func gotk4_TreeListModelCreateModelFunc(arg0 C.gpointer, arg1 C.gpointer) *C.GListModel {
	v := box.Get(uintptr(arg1))
	if v == nil {
		panic(`callback not found`)
	}
	fn := v.(TreeListModelCreateModelFunc)

	ret := fn(item, userData)

	cret = (*C.GListModel)(unsafe.Pointer(ret.Native()))

	return cret
}

// TreeListModel is a Model implementation that can expand rows by creating new
// child list models on demand.
type TreeListModel interface {
	gextras.Objector
	gio.ListModel

	// Autoexpand gets whether the model is set to automatically expand new rows
	// that get added. This can be either rows added by changes to the
	// underlying models or via gtk_tree_list_row_set_expanded().
	Autoexpand() bool
	// ChildRow gets the row item corresponding to the child at index @position
	// for @self's root model.
	//
	// If @position is greater than the number of children in the root model,
	// nil is returned.
	//
	// Do not confuse this function with gtk_tree_list_model_get_row().
	ChildRow(position uint) TreeListRow
	// Model gets the root model that @self was created with.
	Model() gio.ListModel
	// Passthrough: if this function returns false, the Model functions for
	// @self return custom TreeListRow objects. You need to call
	// gtk_tree_list_row_get_item() on these objects to get the original item.
	//
	// If true, the values of the child models are passed through in their
	// original state. You then need to call gtk_tree_list_model_get_row() to
	// get the custom TreeListRows.
	Passthrough() bool
	// Row gets the row object for the given row. If @position is greater than
	// the number of items in @self, nil is returned.
	//
	// The row object can be used to expand and collapse rows as well as to
	// inspect its position in the tree. See its documentation for details.
	//
	// This row object is persistent and will refer to the current item as long
	// as the row is present in @self, independent of other rows being added or
	// removed.
	//
	// If @self is set to not be passthrough, this function is equivalent to
	// calling g_list_model_get_item().
	//
	// Do not confuse this function with gtk_tree_list_model_get_child_row().
	Row(position uint) TreeListRow
	// SetAutoexpand: if set to true, the model will recursively expand all rows
	// that get added to the model. This can be either rows added by changes to
	// the underlying models or via gtk_tree_list_row_set_expanded().
	SetAutoexpand(autoexpand bool)
}

// treeListModel implements the TreeListModel interface.
type treeListModel struct {
	gextras.Objector
	gio.ListModel
}

var _ TreeListModel = (*treeListModel)(nil)

// WrapTreeListModel wraps a GObject to the right type. It is
// primarily used internally.
func WrapTreeListModel(obj *externglib.Object) TreeListModel {
	return TreeListModel{
		Objector:      obj,
		gio.ListModel: gio.WrapListModel(obj),
	}
}

func marshalTreeListModel(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapTreeListModel(obj), nil
}

// NewTreeListModel constructs a class TreeListModel.
func NewTreeListModel(root gio.ListModel, passthrough bool, autoexpand bool, createFunc TreeListModelCreateModelFunc) TreeListModel {

	var cret C.GtkTreeListModel
	var goret1 TreeListModel

	cret = C.gtk_tree_list_model_new(root, passthrough, autoexpand, createFunc, userData, userDestroy)

	goret1 = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(cret.Native()))).(TreeListModel)

	return goret1
}

// Autoexpand gets whether the model is set to automatically expand new rows
// that get added. This can be either rows added by changes to the
// underlying models or via gtk_tree_list_row_set_expanded().
func (s treeListModel) Autoexpand() bool {
	var arg0 *C.GtkTreeListModel

	arg0 = (*C.GtkTreeListModel)(unsafe.Pointer(s.Native()))

	var cret C.gboolean
	var goret1 bool

	cret = C.gtk_tree_list_model_get_autoexpand(arg0)

	goret1 = C.bool(cret) != C.false

	return goret1
}

// ChildRow gets the row item corresponding to the child at index @position
// for @self's root model.
//
// If @position is greater than the number of children in the root model,
// nil is returned.
//
// Do not confuse this function with gtk_tree_list_model_get_row().
func (s treeListModel) ChildRow(position uint) TreeListRow {
	var arg0 *C.GtkTreeListModel
	var arg1 C.guint

	arg0 = (*C.GtkTreeListModel)(unsafe.Pointer(s.Native()))
	arg1 = C.guint(position)

	var cret *C.GtkTreeListRow
	var goret1 TreeListRow

	cret = C.gtk_tree_list_model_get_child_row(arg0, position)

	goret1 = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(cret.Native()))).(TreeListRow)

	return goret1
}

// Model gets the root model that @self was created with.
func (s treeListModel) Model() gio.ListModel {
	var arg0 *C.GtkTreeListModel

	arg0 = (*C.GtkTreeListModel)(unsafe.Pointer(s.Native()))

	var cret *C.GListModel
	var goret1 gio.ListModel

	cret = C.gtk_tree_list_model_get_model(arg0)

	goret1 = gextras.CastObject(externglib.Take(unsafe.Pointer(cret.Native()))).(gio.ListModel)

	return goret1
}

// Passthrough: if this function returns false, the Model functions for
// @self return custom TreeListRow objects. You need to call
// gtk_tree_list_row_get_item() on these objects to get the original item.
//
// If true, the values of the child models are passed through in their
// original state. You then need to call gtk_tree_list_model_get_row() to
// get the custom TreeListRows.
func (s treeListModel) Passthrough() bool {
	var arg0 *C.GtkTreeListModel

	arg0 = (*C.GtkTreeListModel)(unsafe.Pointer(s.Native()))

	var cret C.gboolean
	var goret1 bool

	cret = C.gtk_tree_list_model_get_passthrough(arg0)

	goret1 = C.bool(cret) != C.false

	return goret1
}

// Row gets the row object for the given row. If @position is greater than
// the number of items in @self, nil is returned.
//
// The row object can be used to expand and collapse rows as well as to
// inspect its position in the tree. See its documentation for details.
//
// This row object is persistent and will refer to the current item as long
// as the row is present in @self, independent of other rows being added or
// removed.
//
// If @self is set to not be passthrough, this function is equivalent to
// calling g_list_model_get_item().
//
// Do not confuse this function with gtk_tree_list_model_get_child_row().
func (s treeListModel) Row(position uint) TreeListRow {
	var arg0 *C.GtkTreeListModel
	var arg1 C.guint

	arg0 = (*C.GtkTreeListModel)(unsafe.Pointer(s.Native()))
	arg1 = C.guint(position)

	var cret *C.GtkTreeListRow
	var goret1 TreeListRow

	cret = C.gtk_tree_list_model_get_row(arg0, position)

	goret1 = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(cret.Native()))).(TreeListRow)

	return goret1
}

// SetAutoexpand: if set to true, the model will recursively expand all rows
// that get added to the model. This can be either rows added by changes to
// the underlying models or via gtk_tree_list_row_set_expanded().
func (s treeListModel) SetAutoexpand(autoexpand bool) {
	var arg0 *C.GtkTreeListModel
	var arg1 C.gboolean

	arg0 = (*C.GtkTreeListModel)(unsafe.Pointer(s.Native()))
	if autoexpand {
		arg1 = C.gboolean(1)
	}

	C.gtk_tree_list_model_set_autoexpand(arg0, autoexpand)
}

// TreeListRow is the object used by TreeListModel to represent items. It allows
// navigating the model as a tree and modify the state of rows.
//
// TreeListRow instances are created by a TreeListModel only when the
// TreeListModel:passthrough property is not set.
//
// There are various support objects that can make use of TreeListRow objects,
// such as the TreeExpander widget that allows displaying an icon to expand or
// collapse a row or TreeListRowSorter that makes it possible to sort trees
// properly.
type TreeListRow interface {
	gextras.Objector

	// ChildRow: if @self is not expanded or @position is greater than the
	// number of children, nil is returned.
	ChildRow(position uint) TreeListRow
	// Children: if the row is expanded, gets the model holding the children of
	// @self.
	//
	// This model is the model created by the TreeListModelCreateModelFunc and
	// contains the original items, no matter what value
	// TreeListModel:passthrough is set to.
	Children() gio.ListModel
	// Depth gets the depth of this row. Rows that correspond to items in the
	// root model have a depth of zero, rows corresponding to items of models of
	// direct children of the root model have a depth of 1 and so on.
	//
	// The depth of a row never changes until the row is destroyed.
	Depth() uint
	// Expanded gets if a row is currently expanded.
	Expanded() bool
	// Item gets the item corresponding to this row,
	//
	// The value returned by this function never changes until the row is
	// destroyed.
	Item() gextras.Objector
	// Parent gets the row representing the parent for @self. That is the row
	// that would need to be collapsed to make this row disappear.
	//
	// If @self is a row corresponding to the root model, nil is returned.
	//
	// The value returned by this function never changes until the row is
	// destroyed.
	Parent() TreeListRow
	// Position returns the position in the TreeListModel that @self occupies at
	// the moment.
	Position() uint
	// IsExpandable checks if a row can be expanded. This does not mean that the
	// row is actually expanded, this can be checked with
	// gtk_tree_list_row_get_expanded()
	//
	// If a row is expandable never changes until the row is destroyed.
	IsExpandable() bool
	// SetExpanded expands or collapses a row.
	//
	// If a row is expanded, the model of calling the
	// TreeListModelCreateModelFunc for the row's item will be inserted after
	// this row. If a row is collapsed, those items will be removed from the
	// model.
	//
	// If the row is not expandable, this function does nothing.
	SetExpanded(expanded bool)
}

// treeListRow implements the TreeListRow interface.
type treeListRow struct {
	gextras.Objector
}

var _ TreeListRow = (*treeListRow)(nil)

// WrapTreeListRow wraps a GObject to the right type. It is
// primarily used internally.
func WrapTreeListRow(obj *externglib.Object) TreeListRow {
	return TreeListRow{
		Objector: obj,
	}
}

func marshalTreeListRow(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapTreeListRow(obj), nil
}

// ChildRow: if @self is not expanded or @position is greater than the
// number of children, nil is returned.
func (s treeListRow) ChildRow(position uint) TreeListRow {
	var arg0 *C.GtkTreeListRow
	var arg1 C.guint

	arg0 = (*C.GtkTreeListRow)(unsafe.Pointer(s.Native()))
	arg1 = C.guint(position)

	var cret *C.GtkTreeListRow
	var goret1 TreeListRow

	cret = C.gtk_tree_list_row_get_child_row(arg0, position)

	goret1 = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(cret.Native()))).(TreeListRow)

	return goret1
}

// Children: if the row is expanded, gets the model holding the children of
// @self.
//
// This model is the model created by the TreeListModelCreateModelFunc and
// contains the original items, no matter what value
// TreeListModel:passthrough is set to.
func (s treeListRow) Children() gio.ListModel {
	var arg0 *C.GtkTreeListRow

	arg0 = (*C.GtkTreeListRow)(unsafe.Pointer(s.Native()))

	var cret *C.GListModel
	var goret1 gio.ListModel

	cret = C.gtk_tree_list_row_get_children(arg0)

	goret1 = gextras.CastObject(externglib.Take(unsafe.Pointer(cret.Native()))).(gio.ListModel)

	return goret1
}

// Depth gets the depth of this row. Rows that correspond to items in the
// root model have a depth of zero, rows corresponding to items of models of
// direct children of the root model have a depth of 1 and so on.
//
// The depth of a row never changes until the row is destroyed.
func (s treeListRow) Depth() uint {
	var arg0 *C.GtkTreeListRow

	arg0 = (*C.GtkTreeListRow)(unsafe.Pointer(s.Native()))

	var cret C.guint
	var goret1 uint

	cret = C.gtk_tree_list_row_get_depth(arg0)

	goret1 = C.guint(cret)

	return goret1
}

// Expanded gets if a row is currently expanded.
func (s treeListRow) Expanded() bool {
	var arg0 *C.GtkTreeListRow

	arg0 = (*C.GtkTreeListRow)(unsafe.Pointer(s.Native()))

	var cret C.gboolean
	var goret1 bool

	cret = C.gtk_tree_list_row_get_expanded(arg0)

	goret1 = C.bool(cret) != C.false

	return goret1
}

// Item gets the item corresponding to this row,
//
// The value returned by this function never changes until the row is
// destroyed.
func (s treeListRow) Item() gextras.Objector {
	var arg0 *C.GtkTreeListRow

	arg0 = (*C.GtkTreeListRow)(unsafe.Pointer(s.Native()))

	var cret C.gpointer
	var goret1 gextras.Objector

	cret = C.gtk_tree_list_row_get_item(arg0)

	goret1 = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(cret.Native()))).(gextras.Objector)

	return goret1
}

// Parent gets the row representing the parent for @self. That is the row
// that would need to be collapsed to make this row disappear.
//
// If @self is a row corresponding to the root model, nil is returned.
//
// The value returned by this function never changes until the row is
// destroyed.
func (s treeListRow) Parent() TreeListRow {
	var arg0 *C.GtkTreeListRow

	arg0 = (*C.GtkTreeListRow)(unsafe.Pointer(s.Native()))

	var cret *C.GtkTreeListRow
	var goret1 TreeListRow

	cret = C.gtk_tree_list_row_get_parent(arg0)

	goret1 = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(cret.Native()))).(TreeListRow)

	return goret1
}

// Position returns the position in the TreeListModel that @self occupies at
// the moment.
func (s treeListRow) Position() uint {
	var arg0 *C.GtkTreeListRow

	arg0 = (*C.GtkTreeListRow)(unsafe.Pointer(s.Native()))

	var cret C.guint
	var goret1 uint

	cret = C.gtk_tree_list_row_get_position(arg0)

	goret1 = C.guint(cret)

	return goret1
}

// IsExpandable checks if a row can be expanded. This does not mean that the
// row is actually expanded, this can be checked with
// gtk_tree_list_row_get_expanded()
//
// If a row is expandable never changes until the row is destroyed.
func (s treeListRow) IsExpandable() bool {
	var arg0 *C.GtkTreeListRow

	arg0 = (*C.GtkTreeListRow)(unsafe.Pointer(s.Native()))

	var cret C.gboolean
	var goret1 bool

	cret = C.gtk_tree_list_row_is_expandable(arg0)

	goret1 = C.bool(cret) != C.false

	return goret1
}

// SetExpanded expands or collapses a row.
//
// If a row is expanded, the model of calling the
// TreeListModelCreateModelFunc for the row's item will be inserted after
// this row. If a row is collapsed, those items will be removed from the
// model.
//
// If the row is not expandable, this function does nothing.
func (s treeListRow) SetExpanded(expanded bool) {
	var arg0 *C.GtkTreeListRow
	var arg1 C.gboolean

	arg0 = (*C.GtkTreeListRow)(unsafe.Pointer(s.Native()))
	if expanded {
		arg1 = C.gboolean(1)
	}

	C.gtk_tree_list_row_set_expanded(arg0, expanded)
}
