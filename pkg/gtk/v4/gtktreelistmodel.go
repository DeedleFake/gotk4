// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/box"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_tree_list_model_get_type()), F: marshalTreeListModeller},
		{T: externglib.Type(C.gtk_tree_list_row_get_type()), F: marshalTreeListRowwer},
	})
}

// TreeListModelCreateModelFunc: prototype of the function called to create new
// child models when gtk_tree_list_row_set_expanded() is called.
//
// This function can return nil to indicate that @item is guaranteed to be a
// leaf node and will never have children. If it does not have children but may
// get children later, it should return an empty model that is filled once
// children arrive.
type TreeListModelCreateModelFunc func(item *externglib.Object, userData interface{}) (listModel *gio.ListModel)

//export gotk4_TreeListModelCreateModelFunc
func gotk4_TreeListModelCreateModelFunc(arg0 C.gpointer, arg1 C.gpointer) (cret *C.GListModel) {
	v := box.Get(uintptr(arg1))
	if v == nil {
		panic(`callback not found`)
	}

	var item *externglib.Object // out
	var userData interface{}    // out

	item = (gextras.CastObject(externglib.Take(unsafe.Pointer(arg0)))).(*externglib.Object)
	userData = box.Get(uintptr(arg1))

	fn := v.(TreeListModelCreateModelFunc)
	listModel := fn(item, userData)

	cret = (*C.GListModel)(unsafe.Pointer(listModel.Native()))

	return cret
}

// TreeListModeller describes TreeListModel's methods.
type TreeListModeller interface {
	gextras.Objector

	Autoexpand() bool
	ChildRow(position uint) *TreeListRow
	Model() *gio.ListModel
	Passthrough() bool
	Row(position uint) *TreeListRow
	SetAutoexpand(autoexpand bool)
}

// TreeListModel: `GtkTreeListModel` is a list model that can create child
// models on demand.
type TreeListModel struct {
	*externglib.Object

	gio.ListModel
}

var _ TreeListModeller = (*TreeListModel)(nil)

func wrapTreeListModeller(obj *externglib.Object) TreeListModeller {
	return &TreeListModel{
		Object: obj,
		ListModel: gio.ListModel{
			Object: obj,
		},
	}
}

func marshalTreeListModeller(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapTreeListModeller(obj), nil
}

// Autoexpand gets whether the model is set to automatically expand new rows
// that get added.
//
// This can be either rows added by changes to the underlying models or via
// [method@Gtk.TreeListRow.set_expanded].
func (self *TreeListModel) Autoexpand() bool {
	var _arg0 *C.GtkTreeListModel // out
	var _cret C.gboolean          // in

	_arg0 = (*C.GtkTreeListModel)(unsafe.Pointer(self.Native()))

	_cret = C.gtk_tree_list_model_get_autoexpand(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// ChildRow gets the row item corresponding to the child at index @position for
// @self's root model.
//
// If @position is greater than the number of children in the root model, nil is
// returned.
//
// Do not confuse this function with [method@Gtk.TreeListModel.get_row].
func (self *TreeListModel) ChildRow(position uint) *TreeListRow {
	var _arg0 *C.GtkTreeListModel // out
	var _arg1 C.guint             // out
	var _cret *C.GtkTreeListRow   // in

	_arg0 = (*C.GtkTreeListModel)(unsafe.Pointer(self.Native()))
	_arg1 = C.guint(position)

	_cret = C.gtk_tree_list_model_get_child_row(_arg0, _arg1)

	var _treeListRow *TreeListRow // out

	_treeListRow = (gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret)))).(*TreeListRow)

	return _treeListRow
}

// Model gets the root model that @self was created with.
func (self *TreeListModel) Model() *gio.ListModel {
	var _arg0 *C.GtkTreeListModel // out
	var _cret *C.GListModel       // in

	_arg0 = (*C.GtkTreeListModel)(unsafe.Pointer(self.Native()))

	_cret = C.gtk_tree_list_model_get_model(_arg0)

	var _listModel *gio.ListModel // out

	_listModel = (gextras.CastObject(externglib.Take(unsafe.Pointer(_cret)))).(*gio.ListModel)

	return _listModel
}

// Passthrough gets whether the model is passing through original row items.
//
// If this function returns false, the `GListModel` functions for @self return
// custom `GtkTreeListRow` objects. You need to call
// [method@Gtk.TreeListRow.get_item] on these objects to get the original item.
//
// If true, the values of the child models are passed through in their original
// state. You then need to call [method@Gtk.TreeListModel.get_row] to get the
// custom `GtkTreeListRow`s.
func (self *TreeListModel) Passthrough() bool {
	var _arg0 *C.GtkTreeListModel // out
	var _cret C.gboolean          // in

	_arg0 = (*C.GtkTreeListModel)(unsafe.Pointer(self.Native()))

	_cret = C.gtk_tree_list_model_get_passthrough(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Row gets the row object for the given row.
//
// If @position is greater than the number of items in @self, nil is returned.
//
// The row object can be used to expand and collapse rows as well as to inspect
// its position in the tree. See its documentation for details.
//
// This row object is persistent and will refer to the current item as long as
// the row is present in @self, independent of other rows being added or
// removed.
//
// If @self is set to not be passthrough, this function is equivalent to calling
// g_list_model_get_item().
//
// Do not confuse this function with [method@Gtk.TreeListModel.get_child_row].
func (self *TreeListModel) Row(position uint) *TreeListRow {
	var _arg0 *C.GtkTreeListModel // out
	var _arg1 C.guint             // out
	var _cret *C.GtkTreeListRow   // in

	_arg0 = (*C.GtkTreeListModel)(unsafe.Pointer(self.Native()))
	_arg1 = C.guint(position)

	_cret = C.gtk_tree_list_model_get_row(_arg0, _arg1)

	var _treeListRow *TreeListRow // out

	_treeListRow = (gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret)))).(*TreeListRow)

	return _treeListRow
}

// SetAutoexpand sets whether the model should autoexpand.
//
// If set to true, the model will recursively expand all rows that get added to
// the model. This can be either rows added by changes to the underlying models
// or via [method@Gtk.TreeListRow.set_expanded].
func (self *TreeListModel) SetAutoexpand(autoexpand bool) {
	var _arg0 *C.GtkTreeListModel // out
	var _arg1 C.gboolean          // out

	_arg0 = (*C.GtkTreeListModel)(unsafe.Pointer(self.Native()))
	if autoexpand {
		_arg1 = C.TRUE
	}

	C.gtk_tree_list_model_set_autoexpand(_arg0, _arg1)
}

// TreeListRowwer describes TreeListRow's methods.
type TreeListRowwer interface {
	gextras.Objector

	ChildRow(position uint) *TreeListRow
	Children() *gio.ListModel
	Depth() uint
	Expanded() bool
	Item() *externglib.Object
	Parent() *TreeListRow
	Position() uint
	IsExpandable() bool
	SetExpanded(expanded bool)
}

// TreeListRow: `GtkTreeListRow` is used by `GtkTreeListModel` to represent
// items.
//
// It allows navigating the model as a tree and modify the state of rows.
//
// `GtkTreeListRow` instances are created by a `GtkTreeListModel` only when the
// [property@Gtk.TreeListModel:passthrough] property is not set.
//
// There are various support objects that can make use of `GtkTreeListRow`
// objects, such as the [class@Gtk.TreeExpander] widget that allows displaying
// an icon to expand or collapse a row or [class@Gtk.TreeListRowSorter] that
// makes it possible to sort trees properly.
type TreeListRow struct {
	*externglib.Object
}

var _ TreeListRowwer = (*TreeListRow)(nil)

func wrapTreeListRowwer(obj *externglib.Object) TreeListRowwer {
	return &TreeListRow{
		Object: obj,
	}
}

func marshalTreeListRowwer(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapTreeListRowwer(obj), nil
}

// ChildRow: if @self is not expanded or @position is greater than the number of
// children, nil is returned.
func (self *TreeListRow) ChildRow(position uint) *TreeListRow {
	var _arg0 *C.GtkTreeListRow // out
	var _arg1 C.guint           // out
	var _cret *C.GtkTreeListRow // in

	_arg0 = (*C.GtkTreeListRow)(unsafe.Pointer(self.Native()))
	_arg1 = C.guint(position)

	_cret = C.gtk_tree_list_row_get_child_row(_arg0, _arg1)

	var _treeListRow *TreeListRow // out

	_treeListRow = (gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret)))).(*TreeListRow)

	return _treeListRow
}

// Children: if the row is expanded, gets the model holding the children of
// @self.
//
// This model is the model created by the
// [callback@Gtk.TreeListModelCreateModelFunc] and contains the original items,
// no matter what value [property@Gtk.TreeListModel:passthrough] is set to.
func (self *TreeListRow) Children() *gio.ListModel {
	var _arg0 *C.GtkTreeListRow // out
	var _cret *C.GListModel     // in

	_arg0 = (*C.GtkTreeListRow)(unsafe.Pointer(self.Native()))

	_cret = C.gtk_tree_list_row_get_children(_arg0)

	var _listModel *gio.ListModel // out

	_listModel = (gextras.CastObject(externglib.Take(unsafe.Pointer(_cret)))).(*gio.ListModel)

	return _listModel
}

// Depth gets the depth of this row.
//
// Rows that correspond to items in the root model have a depth of zero, rows
// corresponding to items of models of direct children of the root model have a
// depth of 1 and so on.
//
// The depth of a row never changes until the row is destroyed.
func (self *TreeListRow) Depth() uint {
	var _arg0 *C.GtkTreeListRow // out
	var _cret C.guint           // in

	_arg0 = (*C.GtkTreeListRow)(unsafe.Pointer(self.Native()))

	_cret = C.gtk_tree_list_row_get_depth(_arg0)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// Expanded gets if a row is currently expanded.
func (self *TreeListRow) Expanded() bool {
	var _arg0 *C.GtkTreeListRow // out
	var _cret C.gboolean        // in

	_arg0 = (*C.GtkTreeListRow)(unsafe.Pointer(self.Native()))

	_cret = C.gtk_tree_list_row_get_expanded(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Item gets the item corresponding to this row,
//
// The value returned by this function never changes until the row is destroyed.
func (self *TreeListRow) Item() *externglib.Object {
	var _arg0 *C.GtkTreeListRow // out
	var _cret C.gpointer        // in

	_arg0 = (*C.GtkTreeListRow)(unsafe.Pointer(self.Native()))

	_cret = C.gtk_tree_list_row_get_item(_arg0)

	var _object *externglib.Object // out

	_object = (gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret)))).(*externglib.Object)

	return _object
}

// Parent gets the row representing the parent for @self.
//
// That is the row that would need to be collapsed to make this row disappear.
//
// If @self is a row corresponding to the root model, nil is returned.
//
// The value returned by this function never changes until the row is destroyed.
func (self *TreeListRow) Parent() *TreeListRow {
	var _arg0 *C.GtkTreeListRow // out
	var _cret *C.GtkTreeListRow // in

	_arg0 = (*C.GtkTreeListRow)(unsafe.Pointer(self.Native()))

	_cret = C.gtk_tree_list_row_get_parent(_arg0)

	var _treeListRow *TreeListRow // out

	_treeListRow = (gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret)))).(*TreeListRow)

	return _treeListRow
}

// Position returns the position in the `GtkTreeListModel` that @self occupies
// at the moment.
func (self *TreeListRow) Position() uint {
	var _arg0 *C.GtkTreeListRow // out
	var _cret C.guint           // in

	_arg0 = (*C.GtkTreeListRow)(unsafe.Pointer(self.Native()))

	_cret = C.gtk_tree_list_row_get_position(_arg0)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// IsExpandable checks if a row can be expanded.
//
// This does not mean that the row is actually expanded, this can be checked
// with [method@Gtk.TreeListRow.get_expanded].
//
// If a row is expandable never changes until the row is destroyed.
func (self *TreeListRow) IsExpandable() bool {
	var _arg0 *C.GtkTreeListRow // out
	var _cret C.gboolean        // in

	_arg0 = (*C.GtkTreeListRow)(unsafe.Pointer(self.Native()))

	_cret = C.gtk_tree_list_row_is_expandable(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetExpanded expands or collapses a row.
//
// If a row is expanded, the model of calling the
// [callback@Gtk.TreeListModelCreateModelFunc] for the row's item will be
// inserted after this row. If a row is collapsed, those items will be removed
// from the model.
//
// If the row is not expandable, this function does nothing.
func (self *TreeListRow) SetExpanded(expanded bool) {
	var _arg0 *C.GtkTreeListRow // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.GtkTreeListRow)(unsafe.Pointer(self.Native()))
	if expanded {
		_arg1 = C.TRUE
	}

	C.gtk_tree_list_row_set_expanded(_arg0, _arg1)
}
