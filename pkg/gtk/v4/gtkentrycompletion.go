// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/box"
	"github.com/diamondburned/gotk4/internal/gextras"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <stdbool.h>
// #include <gtk/gtk.h>
//
// extern gboolean gotk4_EntryCompletionMatchFunc(GtkEntryCompletion* _0, const char* _1, GtkTreeIter* _2, gpointer _3);
// extern void callbackDelete(gpointer);
import "C"

//export callbackDelete
func callbackDelete(ptr C.gpointer) {
	box.Delete(box.Callback, uintptr(ptr))
}

// EntryCompletionMatchFunc: a function which decides whether the row indicated
// by @iter matches a given @key, and should be displayed as a possible
// completion for @key.
//
// Note that @key is normalized and case-folded (see g_utf8_normalize() and
// g_utf8_casefold()). If this is not appropriate, match functions have access
// to the unmodified key via `gtk_editable_get_text (GTK_EDITABLE
// (gtk_entry_completion_get_entry ()))`.
type EntryCompletionMatchFunc func(completion EntryCompletion, key string, iter *TreeIter) bool

//export gotk4_EntryCompletionMatchFunc
func gotk4_EntryCompletionMatchFunc(arg0 *C.GtkEntryCompletion, arg1 *C.char, arg2 *C.GtkTreeIter, arg3 C.gpointer) C.gboolean {
	v := box.Get(uintptr(arg3))
	if v == nil {
		panic(`callback not found`)
	}

	var completion EntryCompletion
	var key string
	var iter *TreeIter

	completion = gextras.CastObject(externglib.Take(unsafe.Pointer(arg0.Native()))).(EntryCompletion)

	key = C.GoString(arg1)

	{
		iter = WrapTreeIter(unsafe.Pointer(arg2))
	}

	ok := v.(EntryCompletionMatchFunc)(completion, key, iter)
}
