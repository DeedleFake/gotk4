// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/gdk/v4"
	"github.com/diamondburned/gotk4/pkg/gdkpixbuf/v2"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_picture_get_type()), F: marshalPicturer},
	})
}

// Picturer describes Picture's methods.
type Picturer interface {
	// AlternativeText gets the alternative textual description of the picture.
	AlternativeText() string
	// CanShrink returns whether the `GtkPicture` respects its contents size.
	CanShrink() bool
	// File gets the `GFile` currently displayed if @self is displaying a file.
	File() *gio.File
	// KeepAspectRatio returns whether the `GtkPicture` preserves its contents
	// aspect ratio.
	KeepAspectRatio() bool
	// Paintable gets the `GdkPaintable` being displayed by the `GtkPicture`.
	Paintable() *gdk.Paintable
	// SetAlternativeText sets an alternative textual description for the
	// picture contents.
	SetAlternativeText(alternativeText string)
	// SetCanShrink: if set to true, the @self can be made smaller than its
	// contents.
	SetCanShrink(canShrink bool)
	// SetFile makes @self load and display @file.
	SetFile(file gio.Filer)
	// SetFilename makes @self load and display the given @filename.
	SetFilename(filename string)
	// SetKeepAspectRatio: if set to true, the @self will render its contents
	// according to their aspect ratio.
	SetKeepAspectRatio(keepAspectRatio bool)
	// SetPaintable makes @self display the given @paintable.
	SetPaintable(paintable gdk.Paintabler)
	// SetPixbuf sets a `GtkPicture` to show a `GdkPixbuf`.
	SetPixbuf(pixbuf gdkpixbuf.Pixbufer)
	// SetResource makes @self load and display the resource at the given
	// @resource_path.
	SetResource(resourcePath string)
}

// Picture: `GtkPicture` widget displays a `GdkPaintable`.
//
// !An example GtkPicture (picture.png)
//
// Many convenience functions are provided to make pictures simple to use. For
// example, if you want to load an image from a file, and then display it,
// there’s a convenience function to do this:
//
// “`c GtkWidget *widget = gtk_picture_new_for_filename ("myfile.png"); “`
//
// If the file isn’t loaded successfully, the picture will contain a “broken
// image” icon similar to that used in many web browsers. If you want to handle
// errors in loading the file yourself, for example by displaying an error
// message, then load the image with [ctor@Gdk.Texture.new_from_file], then
// create the `GtkPicture` with [ctor@Gtk.Picture.new_for_paintable].
//
// Sometimes an application will want to avoid depending on external data files,
// such as image files. See the documentation of `GResource` for details. In
// this case, [ctor@Gtk.Picture.new_for_resource] and
// [method@Gtk.Picture.set_resource] should be used.
//
// `GtkPicture` displays an image at its natural size. See [class@Gtk.Image] if
// you want to display a fixed-size image, such as an icon.
//
//
// Sizing the paintable
//
// You can influence how the paintable is displayed inside the `GtkPicture`. By
// turning off [property@Gtk.Picture:keep-aspect-ratio] you can allow the
// paintable to get stretched. [property@Gtk.Picture:can-shrink] can be unset to
// make sure that paintables are never made smaller than their ideal size - but
// be careful if you do not know the size of the paintable in use (like when
// displaying user-loaded images). This can easily cause the picture to grow
// larger than the screen. And [property@GtkWidget:halign] and
// [property@GtkWidget:valign] can be used to make sure the paintable doesn't
// fill all available space but is instead displayed at its original size.
//
//
// CSS nodes
//
// `GtkPicture` has a single CSS node with the name `picture`.
//
//
// Accessibility
//
// `GtkPicture` uses the `GTK_ACCESSIBLE_ROLE_IMG` role.
type Picture struct {
	Widget
}

var (
	_ Picturer        = (*Picture)(nil)
	_ gextras.Nativer = (*Picture)(nil)
)

func wrapPicture(obj *externglib.Object) *Picture {
	return &Picture{
		Widget: Widget{
			InitiallyUnowned: externglib.InitiallyUnowned{
				Object: obj,
			},
			Accessible: Accessible{
				Object: obj,
			},
			Buildable: Buildable{
				Object: obj,
			},
			ConstraintTarget: ConstraintTarget{
				Object: obj,
			},
		},
	}
}

func marshalPicturer(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapPicture(obj), nil
}

// NewPicture creates a new empty `GtkPicture` widget.
func NewPicture() *Picture {
	var _cret *C.GtkWidget // in

	_cret = C.gtk_picture_new()

	var _picture *Picture // out

	_picture = wrapPicture(externglib.Take(unsafe.Pointer(_cret)))

	return _picture
}

// NewPictureForFile creates a new `GtkPicture` displaying the given @file.
//
// If the file isn’t found or can’t be loaded, the resulting `GtkPicture` is
// empty.
//
// If you need to detect failures to load the file, use
// [ctor@Gdk.Texture.new_from_file] to load the file yourself, then create the
// `GtkPicture` from the texture.
func NewPictureForFile(file gio.Filer) *Picture {
	var _arg1 *C.GFile     // out
	var _cret *C.GtkWidget // in

	_arg1 = (*C.GFile)(unsafe.Pointer((file).(gextras.Nativer).Native()))

	_cret = C.gtk_picture_new_for_file(_arg1)

	var _picture *Picture // out

	_picture = wrapPicture(externglib.Take(unsafe.Pointer(_cret)))

	return _picture
}

// NewPictureForFilename creates a new `GtkPicture` displaying the file
// @filename.
//
// This is a utility function that calls [ctor@Gtk.Picture.new_for_file]. See
// that function for details.
func NewPictureForFilename(filename string) *Picture {
	var _arg1 *C.char      // out
	var _cret *C.GtkWidget // in

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(filename)))

	_cret = C.gtk_picture_new_for_filename(_arg1)

	var _picture *Picture // out

	_picture = wrapPicture(externglib.Take(unsafe.Pointer(_cret)))

	return _picture
}

// NewPictureForPaintable creates a new `GtkPicture` displaying @paintable.
//
// The `GtkPicture` will track changes to the @paintable and update its size and
// contents in response to it.
func NewPictureForPaintable(paintable gdk.Paintabler) *Picture {
	var _arg1 *C.GdkPaintable // out
	var _cret *C.GtkWidget    // in

	_arg1 = (*C.GdkPaintable)(unsafe.Pointer((paintable).(gextras.Nativer).Native()))

	_cret = C.gtk_picture_new_for_paintable(_arg1)

	var _picture *Picture // out

	_picture = wrapPicture(externglib.Take(unsafe.Pointer(_cret)))

	return _picture
}

// NewPictureForPixbuf creates a new `GtkPicture` displaying @pixbuf.
//
// This is a utility function that calls [ctor@Gtk.Picture.new_for_paintable],
// See that function for details.
//
// The pixbuf must not be modified after passing it to this function.
func NewPictureForPixbuf(pixbuf gdkpixbuf.Pixbufer) *Picture {
	var _arg1 *C.GdkPixbuf // out
	var _cret *C.GtkWidget // in

	_arg1 = (*C.GdkPixbuf)(unsafe.Pointer((pixbuf).(gextras.Nativer).Native()))

	_cret = C.gtk_picture_new_for_pixbuf(_arg1)

	var _picture *Picture // out

	_picture = wrapPicture(externglib.Take(unsafe.Pointer(_cret)))

	return _picture
}

// NewPictureForResource creates a new `GtkPicture` displaying the resource at
// @resource_path.
//
// This is a utility function that calls [ctor@Gtk.Picture.new_for_file]. See
// that function for details.
func NewPictureForResource(resourcePath string) *Picture {
	var _arg1 *C.char      // out
	var _cret *C.GtkWidget // in

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(resourcePath)))

	_cret = C.gtk_picture_new_for_resource(_arg1)

	var _picture *Picture // out

	_picture = wrapPicture(externglib.Take(unsafe.Pointer(_cret)))

	return _picture
}

// AlternativeText gets the alternative textual description of the picture.
//
// The returned string will be nil if the picture cannot be described textually.
func (self *Picture) AlternativeText() string {
	var _arg0 *C.GtkPicture // out
	var _cret *C.char       // in

	_arg0 = (*C.GtkPicture)(unsafe.Pointer(self.Native()))

	_cret = C.gtk_picture_get_alternative_text(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// CanShrink returns whether the `GtkPicture` respects its contents size.
func (self *Picture) CanShrink() bool {
	var _arg0 *C.GtkPicture // out
	var _cret C.gboolean    // in

	_arg0 = (*C.GtkPicture)(unsafe.Pointer(self.Native()))

	_cret = C.gtk_picture_get_can_shrink(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// File gets the `GFile` currently displayed if @self is displaying a file.
//
// If @self is not displaying a file, for example when
// [method@Gtk.Picture.set_paintable] was used, then nil is returned.
func (self *Picture) File() *gio.File {
	var _arg0 *C.GtkPicture // out
	var _cret *C.GFile      // in

	_arg0 = (*C.GtkPicture)(unsafe.Pointer(self.Native()))

	_cret = C.gtk_picture_get_file(_arg0)

	var _file *gio.File // out

	{
		obj := externglib.Take(unsafe.Pointer(_cret))
		_file = &gio.File{
			Object: obj,
		}
	}

	return _file
}

// KeepAspectRatio returns whether the `GtkPicture` preserves its contents
// aspect ratio.
func (self *Picture) KeepAspectRatio() bool {
	var _arg0 *C.GtkPicture // out
	var _cret C.gboolean    // in

	_arg0 = (*C.GtkPicture)(unsafe.Pointer(self.Native()))

	_cret = C.gtk_picture_get_keep_aspect_ratio(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Paintable gets the `GdkPaintable` being displayed by the `GtkPicture`.
func (self *Picture) Paintable() *gdk.Paintable {
	var _arg0 *C.GtkPicture   // out
	var _cret *C.GdkPaintable // in

	_arg0 = (*C.GtkPicture)(unsafe.Pointer(self.Native()))

	_cret = C.gtk_picture_get_paintable(_arg0)

	var _paintable *gdk.Paintable // out

	{
		obj := externglib.Take(unsafe.Pointer(_cret))
		_paintable = &gdk.Paintable{
			Object: obj,
		}
	}

	return _paintable
}

// SetAlternativeText sets an alternative textual description for the picture
// contents.
//
// It is equivalent to the "alt" attribute for images on websites.
//
// This text will be made available to accessibility tools.
//
// If the picture cannot be described textually, set this property to nil.
func (self *Picture) SetAlternativeText(alternativeText string) {
	var _arg0 *C.GtkPicture // out
	var _arg1 *C.char       // out

	_arg0 = (*C.GtkPicture)(unsafe.Pointer(self.Native()))
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(alternativeText)))

	C.gtk_picture_set_alternative_text(_arg0, _arg1)
}

// SetCanShrink: if set to true, the @self can be made smaller than its
// contents.
//
// The contents will then be scaled down when rendering.
//
// If you want to still force a minimum size manually, consider using
// [method@Gtk.Widget.set_size_request].
//
// Also of note is that a similar function for growing does not exist because
// the grow behavior can be controlled via [method@Gtk.Widget.set_halign] and
// [method@Gtk.Widget.set_valign].
func (self *Picture) SetCanShrink(canShrink bool) {
	var _arg0 *C.GtkPicture // out
	var _arg1 C.gboolean    // out

	_arg0 = (*C.GtkPicture)(unsafe.Pointer(self.Native()))
	if canShrink {
		_arg1 = C.TRUE
	}

	C.gtk_picture_set_can_shrink(_arg0, _arg1)
}

// SetFile makes @self load and display @file.
//
// See [ctor@Gtk.Picture.new_for_file] for details.
func (self *Picture) SetFile(file gio.Filer) {
	var _arg0 *C.GtkPicture // out
	var _arg1 *C.GFile      // out

	_arg0 = (*C.GtkPicture)(unsafe.Pointer(self.Native()))
	_arg1 = (*C.GFile)(unsafe.Pointer((file).(gextras.Nativer).Native()))

	C.gtk_picture_set_file(_arg0, _arg1)
}

// SetFilename makes @self load and display the given @filename.
//
// This is a utility function that calls [method@Gtk.Picture.set_file].
func (self *Picture) SetFilename(filename string) {
	var _arg0 *C.GtkPicture // out
	var _arg1 *C.char       // out

	_arg0 = (*C.GtkPicture)(unsafe.Pointer(self.Native()))
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(filename)))

	C.gtk_picture_set_filename(_arg0, _arg1)
}

// SetKeepAspectRatio: if set to true, the @self will render its contents
// according to their aspect ratio.
//
// That means that empty space may show up at the top/bottom or left/right of
// @self.
//
// If set to false or if the contents provide no aspect ratio, the contents will
// be stretched over the picture's whole area.
func (self *Picture) SetKeepAspectRatio(keepAspectRatio bool) {
	var _arg0 *C.GtkPicture // out
	var _arg1 C.gboolean    // out

	_arg0 = (*C.GtkPicture)(unsafe.Pointer(self.Native()))
	if keepAspectRatio {
		_arg1 = C.TRUE
	}

	C.gtk_picture_set_keep_aspect_ratio(_arg0, _arg1)
}

// SetPaintable makes @self display the given @paintable.
//
// If @paintable is nil, nothing will be displayed.
//
// See [ctor@Gtk.Picture.new_for_paintable] for details.
func (self *Picture) SetPaintable(paintable gdk.Paintabler) {
	var _arg0 *C.GtkPicture   // out
	var _arg1 *C.GdkPaintable // out

	_arg0 = (*C.GtkPicture)(unsafe.Pointer(self.Native()))
	_arg1 = (*C.GdkPaintable)(unsafe.Pointer((paintable).(gextras.Nativer).Native()))

	C.gtk_picture_set_paintable(_arg0, _arg1)
}

// SetPixbuf sets a `GtkPicture` to show a `GdkPixbuf`.
//
// See [ctor@Gtk.Picture.new_for_pixbuf] for details.
//
// This is a utility function that calls [method@Gtk.Picture.set_paintable].
func (self *Picture) SetPixbuf(pixbuf gdkpixbuf.Pixbufer) {
	var _arg0 *C.GtkPicture // out
	var _arg1 *C.GdkPixbuf  // out

	_arg0 = (*C.GtkPicture)(unsafe.Pointer(self.Native()))
	_arg1 = (*C.GdkPixbuf)(unsafe.Pointer((pixbuf).(gextras.Nativer).Native()))

	C.gtk_picture_set_pixbuf(_arg0, _arg1)
}

// SetResource makes @self load and display the resource at the given
// @resource_path.
//
// This is a utility function that calls [method@Gtk.Picture.set_file].
func (self *Picture) SetResource(resourcePath string) {
	var _arg0 *C.GtkPicture // out
	var _arg1 *C.char       // out

	_arg0 = (*C.GtkPicture)(unsafe.Pointer(self.Native()))
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(resourcePath)))

	C.gtk_picture_set_resource(_arg0, _arg1)
}
