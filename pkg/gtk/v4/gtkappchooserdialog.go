// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/gdk/v4"
	"github.com/diamondburned/gotk4/pkg/gsk/v4"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_app_chooser_dialog_get_type()), F: marshalAppChooserDialog},
	})
}

// AppChooserDialog: `GtkAppChooserDialog` shows a `GtkAppChooserWidget` inside
// a `GtkDialog`.
//
// !An example GtkAppChooserDialog (appchooserdialog.png)
//
// Note that `GtkAppChooserDialog` does not have any interesting methods of its
// own. Instead, you should get the embedded `GtkAppChooserWidget` using
// [method@Gtk.AppChooserDialog.get_widget] and call its methods if the generic
// [iface@Gtk.AppChooser] interface is not sufficient for your needs.
//
// To set the heading that is shown above the `GtkAppChooserWidget`, use
// [method@Gtk.AppChooserDialog.set_heading].
type AppChooserDialog interface {
	Dialog
	AppChooser

	Heading() string

	Widget() Widget

	SetHeadingAppChooserDialog(heading string)
}

// appChooserDialog implements the AppChooserDialog class.
type appChooserDialog struct {
	Dialog
}

// WrapAppChooserDialog wraps a GObject to the right type. It is
// primarily used internally.
func WrapAppChooserDialog(obj *externglib.Object) AppChooserDialog {
	return appChooserDialog{
		Dialog: WrapDialog(obj),
	}
}

func marshalAppChooserDialog(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapAppChooserDialog(obj), nil
}

func NewAppChooserDialogForContentType(parent Window, flags DialogFlags, contentType string) AppChooserDialog {
	var _arg1 *C.GtkWindow     // out
	var _arg2 C.GtkDialogFlags // out
	var _arg3 *C.char          // out
	var _cret *C.GtkWidget     // in

	_arg1 = (*C.GtkWindow)(unsafe.Pointer(parent.Native()))
	_arg2 = C.GtkDialogFlags(flags)
	_arg3 = (*C.char)(C.CString(contentType))
	defer C.free(unsafe.Pointer(_arg3))

	_cret = C.gtk_app_chooser_dialog_new_for_content_type(_arg1, _arg2, _arg3)

	var _appChooserDialog AppChooserDialog // out

	_appChooserDialog = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(AppChooserDialog)

	return _appChooserDialog
}

func (s appChooserDialog) Heading() string {
	var _arg0 *C.GtkAppChooserDialog // out
	var _cret *C.char                // in

	_arg0 = (*C.GtkAppChooserDialog)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_app_chooser_dialog_get_heading(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

func (s appChooserDialog) Widget() Widget {
	var _arg0 *C.GtkAppChooserDialog // out
	var _cret *C.GtkWidget           // in

	_arg0 = (*C.GtkAppChooserDialog)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_app_chooser_dialog_get_widget(_arg0)

	var _widget Widget // out

	_widget = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Widget)

	return _widget
}

func (s appChooserDialog) SetHeadingAppChooserDialog(heading string) {
	var _arg0 *C.GtkAppChooserDialog // out
	var _arg1 *C.char                // out

	_arg0 = (*C.GtkAppChooserDialog)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.char)(C.CString(heading))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_app_chooser_dialog_set_heading(_arg0, _arg1)
}

func (s appChooserDialog) Display() gdk.Display {
	return WrapRoot(gextras.InternObject(s)).Display()
}

func (s appChooserDialog) Focus() Widget {
	return WrapRoot(gextras.InternObject(s)).Focus()
}

func (s appChooserDialog) SetFocus(focus Widget) {
	WrapRoot(gextras.InternObject(s)).SetFocus(focus)
}

func (s appChooserDialog) Renderer() gsk.Renderer {
	return WrapNative(gextras.InternObject(s)).Renderer()
}

func (s appChooserDialog) Surface() gdk.Surface {
	return WrapNative(gextras.InternObject(s)).Surface()
}

func (s appChooserDialog) SurfaceTransform() (x float64, y float64) {
	return WrapNative(gextras.InternObject(s)).SurfaceTransform()
}

func (s appChooserDialog) Realize() {
	WrapNative(gextras.InternObject(s)).Realize()
}

func (s appChooserDialog) Unrealize() {
	WrapNative(gextras.InternObject(s)).Unrealize()
}

func (s appChooserDialog) AccessibleRole() AccessibleRole {
	return WrapAccessible(gextras.InternObject(s)).AccessibleRole()
}

func (s appChooserDialog) ResetProperty(property AccessibleProperty) {
	WrapAccessible(gextras.InternObject(s)).ResetProperty(property)
}

func (s appChooserDialog) ResetRelation(relation AccessibleRelation) {
	WrapAccessible(gextras.InternObject(s)).ResetRelation(relation)
}

func (s appChooserDialog) ResetState(state AccessibleState) {
	WrapAccessible(gextras.InternObject(s)).ResetState(state)
}

func (s appChooserDialog) UpdatePropertyValue(properties []AccessibleProperty, values []externglib.Value) {
	WrapAccessible(gextras.InternObject(s)).UpdatePropertyValue(properties, values)
}

func (s appChooserDialog) UpdateRelationValue(relations []AccessibleRelation, values []externglib.Value) {
	WrapAccessible(gextras.InternObject(s)).UpdateRelationValue(relations, values)
}

func (s appChooserDialog) UpdateStateValue(states []AccessibleState, values []externglib.Value) {
	WrapAccessible(gextras.InternObject(s)).UpdateStateValue(states, values)
}

func (b appChooserDialog) BuildableID() string {
	return WrapBuildable(gextras.InternObject(b)).BuildableID()
}

func (s appChooserDialog) ContentType() string {
	return WrapAppChooser(gextras.InternObject(s)).ContentType()
}

func (s appChooserDialog) Refresh() {
	WrapAppChooser(gextras.InternObject(s)).Refresh()
}

func (s appChooserDialog) AccessibleRole() AccessibleRole {
	return WrapAccessible(gextras.InternObject(s)).AccessibleRole()
}

func (s appChooserDialog) ResetProperty(property AccessibleProperty) {
	WrapAccessible(gextras.InternObject(s)).ResetProperty(property)
}

func (s appChooserDialog) ResetRelation(relation AccessibleRelation) {
	WrapAccessible(gextras.InternObject(s)).ResetRelation(relation)
}

func (s appChooserDialog) ResetState(state AccessibleState) {
	WrapAccessible(gextras.InternObject(s)).ResetState(state)
}

func (s appChooserDialog) UpdatePropertyValue(properties []AccessibleProperty, values []externglib.Value) {
	WrapAccessible(gextras.InternObject(s)).UpdatePropertyValue(properties, values)
}

func (s appChooserDialog) UpdateRelationValue(relations []AccessibleRelation, values []externglib.Value) {
	WrapAccessible(gextras.InternObject(s)).UpdateRelationValue(relations, values)
}

func (s appChooserDialog) UpdateStateValue(states []AccessibleState, values []externglib.Value) {
	WrapAccessible(gextras.InternObject(s)).UpdateStateValue(states, values)
}

func (b appChooserDialog) BuildableID() string {
	return WrapBuildable(gextras.InternObject(b)).BuildableID()
}
