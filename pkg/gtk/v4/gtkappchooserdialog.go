// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_app_chooser_dialog_get_type()), F: marshalAppChooserDialog},
	})
}

// AppChooserDialog: `GtkAppChooserDialog` shows a `GtkAppChooserWidget` inside
// a `GtkDialog`.
//
// !An example GtkAppChooserDialog (appchooserdialog.png)
//
// Note that `GtkAppChooserDialog` does not have any interesting methods of its
// own. Instead, you should get the embedded `GtkAppChooserWidget` using
// [method@Gtk.AppChooserDialog.get_widget] and call its methods if the generic
// [iface@Gtk.AppChooser] interface is not sufficient for your needs.
//
// To set the heading that is shown above the `GtkAppChooserWidget`, use
// [method@Gtk.AppChooserDialog.set_heading].
type AppChooserDialog interface {
	Dialog

	// AsAccessible casts the class to the Accessible interface.
	AsAccessible() Accessible
	// AsAppChooser casts the class to the AppChooser interface.
	AsAppChooser() AppChooser
	// AsBuildable casts the class to the Buildable interface.
	AsBuildable() Buildable
	// AsConstraintTarget casts the class to the ConstraintTarget interface.
	AsConstraintTarget() ConstraintTarget
	// AsNative casts the class to the Native interface.
	AsNative() Native
	// AsRoot casts the class to the Root interface.
	AsRoot() Root
	// AsShortcutManager casts the class to the ShortcutManager interface.
	AsShortcutManager() ShortcutManager

	// Heading returns the text to display at the top of the dialog.
	Heading() string
	// Widget returns the `GtkAppChooserWidget` of this dialog.
	Widget() Widget
	// SetHeading sets the text to display at the top of the dialog.
	//
	// If the heading is not set, the dialog displays a default text.
	SetHeading(heading string)
}

// appChooserDialog implements the AppChooserDialog class.
type appChooserDialog struct {
	Dialog
}

// WrapAppChooserDialog wraps a GObject to the right type. It is
// primarily used internally.
func WrapAppChooserDialog(obj *externglib.Object) AppChooserDialog {
	return appChooserDialog{
		Dialog: WrapDialog(obj),
	}
}

func marshalAppChooserDialog(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapAppChooserDialog(obj), nil
}

// NewAppChooserDialogForContentType creates a new `GtkAppChooserDialog` for the
// provided content type.
//
// The dialog will show applications that can open the content type.
func NewAppChooserDialogForContentType(parent Window, flags DialogFlags, contentType string) AppChooserDialog {
	var _arg1 *C.GtkWindow     // out
	var _arg2 C.GtkDialogFlags // out
	var _arg3 *C.char          // out
	var _cret *C.GtkWidget     // in

	_arg1 = (*C.GtkWindow)(unsafe.Pointer(parent.Native()))
	_arg2 = C.GtkDialogFlags(flags)
	_arg3 = (*C.char)(C.CString(contentType))
	defer C.free(unsafe.Pointer(_arg3))

	_cret = C.gtk_app_chooser_dialog_new_for_content_type(_arg1, _arg2, _arg3)

	var _appChooserDialog AppChooserDialog // out

	_appChooserDialog = WrapAppChooserDialog(externglib.Take(unsafe.Pointer(_cret)))

	return _appChooserDialog
}

func (a appChooserDialog) AsAccessible() Accessible {
	return WrapAccessible(gextras.InternObject(a))
}

func (a appChooserDialog) AsAppChooser() AppChooser {
	return WrapAppChooser(gextras.InternObject(a))
}

func (a appChooserDialog) AsBuildable() Buildable {
	return WrapBuildable(gextras.InternObject(a))
}

func (a appChooserDialog) AsConstraintTarget() ConstraintTarget {
	return WrapConstraintTarget(gextras.InternObject(a))
}

func (a appChooserDialog) AsNative() Native {
	return WrapNative(gextras.InternObject(a))
}

func (a appChooserDialog) AsRoot() Root {
	return WrapRoot(gextras.InternObject(a))
}

func (a appChooserDialog) AsShortcutManager() ShortcutManager {
	return WrapShortcutManager(gextras.InternObject(a))
}

func (s appChooserDialog) Heading() string {
	var _arg0 *C.GtkAppChooserDialog // out
	var _cret *C.char                // in

	_arg0 = (*C.GtkAppChooserDialog)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_app_chooser_dialog_get_heading(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

func (s appChooserDialog) Widget() Widget {
	var _arg0 *C.GtkAppChooserDialog // out
	var _cret *C.GtkWidget           // in

	_arg0 = (*C.GtkAppChooserDialog)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_app_chooser_dialog_get_widget(_arg0)

	var _widget Widget // out

	_widget = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Widget)

	return _widget
}

func (s appChooserDialog) SetHeading(heading string) {
	var _arg0 *C.GtkAppChooserDialog // out
	var _arg1 *C.char                // out

	_arg0 = (*C.GtkAppChooserDialog)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.char)(C.CString(heading))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_app_chooser_dialog_set_heading(_arg0, _arg1)
}
