// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_app_chooser_dialog_get_type()), F: marshalAppChooserDialoger},
	})
}

// AppChooserDialog: GtkAppChooserDialog shows a GtkAppChooserWidget inside a
// GtkDialog.
//
// !An example GtkAppChooserDialog (appchooserdialog.png)
//
// Note that GtkAppChooserDialog does not have any interesting methods of its
// own. Instead, you should get the embedded GtkAppChooserWidget using
// gtk.AppChooserDialog.GetWidget() and call its methods if the generic
// gtk.AppChooser interface is not sufficient for your needs.
//
// To set the heading that is shown above the GtkAppChooserWidget, use
// gtk.AppChooserDialog.SetHeading().
type AppChooserDialog struct {
	Dialog

	AppChooser
}

var _ gextras.Nativer = (*AppChooserDialog)(nil)

func wrapAppChooserDialog(obj *externglib.Object) *AppChooserDialog {
	return &AppChooserDialog{
		Dialog: Dialog{
			Window: Window{
				Widget: Widget{
					InitiallyUnowned: externglib.InitiallyUnowned{
						Object: obj,
					},
					Accessible: Accessible{
						Object: obj,
					},
					Buildable: Buildable{
						Object: obj,
					},
					ConstraintTarget: ConstraintTarget{
						Object: obj,
					},
				},
				Root: Root{
					NativeSurface: NativeSurface{
						Widget: Widget{
							InitiallyUnowned: externglib.InitiallyUnowned{
								Object: obj,
							},
							Accessible: Accessible{
								Object: obj,
							},
							Buildable: Buildable{
								Object: obj,
							},
							ConstraintTarget: ConstraintTarget{
								Object: obj,
							},
						},
					},
				},
				ShortcutManager: ShortcutManager{
					Object: obj,
				},
			},
		},
		AppChooser: AppChooser{
			Widget: Widget{
				InitiallyUnowned: externglib.InitiallyUnowned{
					Object: obj,
				},
				Accessible: Accessible{
					Object: obj,
				},
				Buildable: Buildable{
					Object: obj,
				},
				ConstraintTarget: ConstraintTarget{
					Object: obj,
				},
			},
		},
	}
}

func marshalAppChooserDialoger(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapAppChooserDialog(obj), nil
}

// NewAppChooserDialog creates a new GtkAppChooserDialog for the provided GFile.
//
// The dialog will show applications that can open the file.
func NewAppChooserDialog(parent *Window, flags DialogFlags, file gio.Filer) *AppChooserDialog {
	var _arg1 *C.GtkWindow     // out
	var _arg2 C.GtkDialogFlags // out
	var _arg3 *C.GFile         // out
	var _cret *C.GtkWidget     // in

	_arg1 = (*C.GtkWindow)(unsafe.Pointer(parent.Native()))
	_arg2 = C.GtkDialogFlags(flags)
	_arg3 = (*C.GFile)(unsafe.Pointer((file).(gextras.Nativer).Native()))

	_cret = C.gtk_app_chooser_dialog_new(_arg1, _arg2, _arg3)

	var _appChooserDialog *AppChooserDialog // out

	_appChooserDialog = wrapAppChooserDialog(externglib.Take(unsafe.Pointer(_cret)))

	return _appChooserDialog
}

// NewAppChooserDialogForContentType creates a new GtkAppChooserDialog for the
// provided content type.
//
// The dialog will show applications that can open the content type.
func NewAppChooserDialogForContentType(parent *Window, flags DialogFlags, contentType string) *AppChooserDialog {
	var _arg1 *C.GtkWindow     // out
	var _arg2 C.GtkDialogFlags // out
	var _arg3 *C.char          // out
	var _cret *C.GtkWidget     // in

	_arg1 = (*C.GtkWindow)(unsafe.Pointer(parent.Native()))
	_arg2 = C.GtkDialogFlags(flags)
	_arg3 = (*C.char)(unsafe.Pointer(C.CString(contentType)))

	_cret = C.gtk_app_chooser_dialog_new_for_content_type(_arg1, _arg2, _arg3)

	var _appChooserDialog *AppChooserDialog // out

	_appChooserDialog = wrapAppChooserDialog(externglib.Take(unsafe.Pointer(_cret)))

	return _appChooserDialog
}

// Native implements gextras.Nativer. It returns the underlying GObject
// field.
func (v *AppChooserDialog) Native() uintptr {
	return v.Dialog.Window.Widget.InitiallyUnowned.Object.Native()
}

// Heading returns the text to display at the top of the dialog.
func (self *AppChooserDialog) Heading() string {
	var _arg0 *C.GtkAppChooserDialog // out
	var _cret *C.char                // in

	_arg0 = (*C.GtkAppChooserDialog)(unsafe.Pointer(self.Native()))

	_cret = C.gtk_app_chooser_dialog_get_heading(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// Widget returns the GtkAppChooserWidget of this dialog.
func (self *AppChooserDialog) Widget() Widgeter {
	var _arg0 *C.GtkAppChooserDialog // out
	var _cret *C.GtkWidget           // in

	_arg0 = (*C.GtkAppChooserDialog)(unsafe.Pointer(self.Native()))

	_cret = C.gtk_app_chooser_dialog_get_widget(_arg0)

	var _widget Widgeter // out

	_widget = (*gextras.CastObject(externglib.Take(unsafe.Pointer(_cret)))).(Widgeter)

	return _widget
}

// SetHeading sets the text to display at the top of the dialog.
//
// If the heading is not set, the dialog displays a default text.
func (self *AppChooserDialog) SetHeading(heading string) {
	var _arg0 *C.GtkAppChooserDialog // out
	var _arg1 *C.char                // out

	_arg0 = (*C.GtkAppChooserDialog)(unsafe.Pointer(self.Native()))
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(heading)))

	C.gtk_app_chooser_dialog_set_heading(_arg0, _arg1)
}
