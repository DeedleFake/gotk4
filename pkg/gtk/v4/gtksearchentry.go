// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_search_entry_get_type()), F: marshalSearchEntry},
	})
}

// SearchEntry: `GtkSearchEntry` is an entry widget that has been tailored for
// use as a search entry.
//
// The main API for interacting with a `GtkSearchEntry` as entry is the
// `GtkEditable` interface.
//
// !An example GtkSearchEntry (search-entry.png)
//
// It will show an inactive symbolic “find” icon when the search entry is empty,
// and a symbolic “clear” icon when there is text. Clicking on the “clear” icon
// will empty the search entry.
//
// To make filtering appear more reactive, it is a good idea to not react to
// every change in the entry text immediately, but only after a short delay. To
// support this, `GtkSearchEntry` emits the
// [signal@Gtk.SearchEntry::search-changed] signal which can be used instead of
// the [signal@Gtk.Editable::changed] signal.
//
// The [signal@Gtk.SearchEntry::previous-match],
// [signal@Gtk.SearchEntry::next-match] and
// [signal@Gtk.SearchEntry::stop-search] signals can be used to implement moving
// between search results and ending the search.
//
// Often, `GtkSearchEntry` will be fed events by means of being placed inside a
// [class@Gtk.SearchBar]. If that is not the case, you can use
// [method@Gtk.SearchEntry.set_key_capture_widget] to let it capture key input
// from another widget.
//
// `GtkSearchEntry` provides only minimal API and should be used with the
// [iface@Gtk.Editable] API.
//
//
// CSS Nodes
//
// “` entry.search ╰── text “`
//
// `GtkSearchEntry` has a single CSS node with name entry that carries a
// `.search` style class, and the text node is a child of that.
//
//
// Accessibility
//
// `GtkSearchEntry` uses the GTK_ACCESSIBLE_ROLE_SEARCH_BOX role.
type SearchEntry interface {
	Editable

	KeyCaptureWidget() Widget

	SetKeyCaptureWidgetSearchEntry(widget Widget)
}

// searchEntry implements the SearchEntry class.
type searchEntry struct {
	Widget
}

// WrapSearchEntry wraps a GObject to the right type. It is
// primarily used internally.
func WrapSearchEntry(obj *externglib.Object) SearchEntry {
	return searchEntry{
		Widget: WrapWidget(obj),
	}
}

func marshalSearchEntry(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapSearchEntry(obj), nil
}

func NewSearchEntry() SearchEntry {
	var _cret *C.GtkWidget // in

	_cret = C.gtk_search_entry_new()

	var _searchEntry SearchEntry // out

	_searchEntry = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(SearchEntry)

	return _searchEntry
}

func (e searchEntry) KeyCaptureWidget() Widget {
	var _arg0 *C.GtkSearchEntry // out
	var _cret *C.GtkWidget      // in

	_arg0 = (*C.GtkSearchEntry)(unsafe.Pointer(e.Native()))

	_cret = C.gtk_search_entry_get_key_capture_widget(_arg0)

	var _widget Widget // out

	_widget = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Widget)

	return _widget
}

func (e searchEntry) SetKeyCaptureWidgetSearchEntry(widget Widget) {
	var _arg0 *C.GtkSearchEntry // out
	var _arg1 *C.GtkWidget      // out

	_arg0 = (*C.GtkSearchEntry)(unsafe.Pointer(e.Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(widget.Native()))

	C.gtk_search_entry_set_key_capture_widget(_arg0, _arg1)
}

func (e searchEntry) DeleteSelection() {
	WrapEditable(gextras.InternObject(e)).DeleteSelection()
}

func (e searchEntry) DeleteText(startPos int, endPos int) {
	WrapEditable(gextras.InternObject(e)).DeleteText(startPos, endPos)
}

func (e searchEntry) FinishDelegate() {
	WrapEditable(gextras.InternObject(e)).FinishDelegate()
}

func (e searchEntry) Alignment() float32 {
	return WrapEditable(gextras.InternObject(e)).Alignment()
}

func (e searchEntry) Chars(startPos int, endPos int) string {
	return WrapEditable(gextras.InternObject(e)).Chars(startPos, endPos)
}

func (e searchEntry) Delegate() Editable {
	return WrapEditable(gextras.InternObject(e)).Delegate()
}

func (e searchEntry) Editable() bool {
	return WrapEditable(gextras.InternObject(e)).Editable()
}

func (e searchEntry) EnableUndo() bool {
	return WrapEditable(gextras.InternObject(e)).EnableUndo()
}

func (e searchEntry) MaxWidthChars() int {
	return WrapEditable(gextras.InternObject(e)).MaxWidthChars()
}

func (e searchEntry) Position() int {
	return WrapEditable(gextras.InternObject(e)).Position()
}

func (e searchEntry) SelectionBounds() (startPos int, endPos int, ok bool) {
	return WrapEditable(gextras.InternObject(e)).SelectionBounds()
}

func (e searchEntry) Text() string {
	return WrapEditable(gextras.InternObject(e)).Text()
}

func (e searchEntry) WidthChars() int {
	return WrapEditable(gextras.InternObject(e)).WidthChars()
}

func (e searchEntry) InitDelegate() {
	WrapEditable(gextras.InternObject(e)).InitDelegate()
}

func (e searchEntry) SelectRegion(startPos int, endPos int) {
	WrapEditable(gextras.InternObject(e)).SelectRegion(startPos, endPos)
}

func (e searchEntry) SetAlignment(xalign float32) {
	WrapEditable(gextras.InternObject(e)).SetAlignment(xalign)
}

func (e searchEntry) SetEditable(isEditable bool) {
	WrapEditable(gextras.InternObject(e)).SetEditable(isEditable)
}

func (e searchEntry) SetEnableUndo(enableUndo bool) {
	WrapEditable(gextras.InternObject(e)).SetEnableUndo(enableUndo)
}

func (e searchEntry) SetMaxWidthChars(nChars int) {
	WrapEditable(gextras.InternObject(e)).SetMaxWidthChars(nChars)
}

func (e searchEntry) SetPosition(position int) {
	WrapEditable(gextras.InternObject(e)).SetPosition(position)
}

func (e searchEntry) SetText(text string) {
	WrapEditable(gextras.InternObject(e)).SetText(text)
}

func (e searchEntry) SetWidthChars(nChars int) {
	WrapEditable(gextras.InternObject(e)).SetWidthChars(nChars)
}

func (s searchEntry) AccessibleRole() AccessibleRole {
	return WrapAccessible(gextras.InternObject(s)).AccessibleRole()
}

func (s searchEntry) ResetProperty(property AccessibleProperty) {
	WrapAccessible(gextras.InternObject(s)).ResetProperty(property)
}

func (s searchEntry) ResetRelation(relation AccessibleRelation) {
	WrapAccessible(gextras.InternObject(s)).ResetRelation(relation)
}

func (s searchEntry) ResetState(state AccessibleState) {
	WrapAccessible(gextras.InternObject(s)).ResetState(state)
}

func (s searchEntry) UpdatePropertyValue(properties []AccessibleProperty, values []externglib.Value) {
	WrapAccessible(gextras.InternObject(s)).UpdatePropertyValue(properties, values)
}

func (s searchEntry) UpdateRelationValue(relations []AccessibleRelation, values []externglib.Value) {
	WrapAccessible(gextras.InternObject(s)).UpdateRelationValue(relations, values)
}

func (s searchEntry) UpdateStateValue(states []AccessibleState, values []externglib.Value) {
	WrapAccessible(gextras.InternObject(s)).UpdateStateValue(states, values)
}

func (b searchEntry) BuildableID() string {
	return WrapBuildable(gextras.InternObject(b)).BuildableID()
}
