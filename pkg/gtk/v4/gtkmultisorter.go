// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_multi_sorter_get_type()), F: marshalMultiSorterrer},
	})
}

// MultiSorterrer describes MultiSorter's methods.
type MultiSorterrer interface {
	gextras.Objector

	Append(sorter Sorterrer)
	Remove(position uint)
}

// MultiSorter: `GtkMultiSorter` combines multiple sorters by trying them in
// turn.
//
// If the first sorter compares two items as equal, the second is tried next,
// and so on.
type MultiSorter struct {
	*externglib.Object

	Sorter
	gio.ListModel
	Buildable
}

var _ MultiSorterrer = (*MultiSorter)(nil)

func wrapMultiSorterrer(obj *externglib.Object) MultiSorterrer {
	return &MultiSorter{
		Object: obj,
		Sorter: Sorter{
			Object: obj,
		},
		ListModel: gio.ListModel{
			Object: obj,
		},
		Buildable: Buildable{
			Object: obj,
		},
	}
}

func marshalMultiSorterrer(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapMultiSorterrer(obj), nil
}

// NewMultiSorter creates a new multi sorter.
//
// This sorter compares items by trying each of the sorters in turn, until one
// returns non-zero. In particular, if no sorter has been added to it, it will
// always compare items as equal.
func NewMultiSorter() *MultiSorter {
	var _cret *C.GtkMultiSorter // in

	_cret = C.gtk_multi_sorter_new()

	var _multiSorter *MultiSorter // out

	_multiSorter = (gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret)))).(*MultiSorter)

	return _multiSorter
}

// Append: add @sorter to @self to use for sorting at the end.
//
// @self will consult all existing sorters before it will sort with the given
// @sorter.
func (self *MultiSorter) Append(sorter Sorterrer) {
	var _arg0 *C.GtkMultiSorter // out
	var _arg1 *C.GtkSorter      // out

	_arg0 = (*C.GtkMultiSorter)(unsafe.Pointer(self.Native()))
	_arg1 = (*C.GtkSorter)(unsafe.Pointer(sorter.Native()))

	C.gtk_multi_sorter_append(_arg0, _arg1)
}

// Remove removes the sorter at the given @position from the list of sorter used
// by @self.
//
// If @position is larger than the number of sorters, nothing happens.
func (self *MultiSorter) Remove(position uint) {
	var _arg0 *C.GtkMultiSorter // out
	var _arg1 C.guint           // out

	_arg0 = (*C.GtkMultiSorter)(unsafe.Pointer(self.Native()))
	_arg1 = C.guint(position)

	C.gtk_multi_sorter_remove(_arg0, _arg1)
}
