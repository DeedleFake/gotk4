// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	"github.com/diamondburned/gotk4/pkg/gdk/v4"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <stdbool.h>
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_tree_drag_dest_get_type()), F: marshalTreeDragDest},
		{T: externglib.Type(C.gtk_tree_drag_source_get_type()), F: marshalTreeDragSource},
	})
}

// TreeCreateRowDragContent creates a content provider for dragging @path from
// @tree_model.
func TreeCreateRowDragContent(treeModel TreeModel, path *TreePath) gdk.ContentProvider {
	var arg1 *C.GtkTreeModel
	var arg2 *C.GtkTreePath

	arg1 = (*C.GtkTreeModel)(unsafe.Pointer(treeModel.Native()))
	arg2 = (*C.GtkTreePath)(unsafe.Pointer(path.Native()))

	var cret *C.GdkContentProvider
	var ret1 gdk.ContentProvider

	cret = C.gtk_tree_create_row_drag_content(treeModel, path)

	ret1 = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(cret.Native()))).(gdk.ContentProvider)

	return ret1
}

// TreeGetRowDragData obtains a @tree_model and @path from value of target type
// GTK_TYPE_TREE_ROW_DATA.
//
// The returned path must be freed with gtk_tree_path_free().
func TreeGetRowDragData(value *externglib.Value) (treeModel TreeModel, path *TreePath, ok bool) {
	var arg1 *C.GValue

	arg1 = (*C.GValue)(value.GValue)

	var arg2 *C.GtkTreeModel
	var ret2 *TreeModel
	var arg3 *C.GtkTreePath
	var ret3 **TreePath
	var cret C.gboolean
	var ret3 bool

	cret = C.gtk_tree_get_row_drag_data(value, &arg2, &arg3)

	*ret2 = gextras.CastObject(externglib.Take(unsafe.Pointer(arg2.Native()))).(*TreeModel)
	*ret3 = WrapTreePath(unsafe.Pointer(arg3))
	runtime.SetFinalizer(*ret3, func(v **TreePath) {
		C.free(unsafe.Pointer(v.Native()))
	})
	ret3 = C.bool(cret) != C.false

	return ret2, ret3, ret3
}

// TreeDragDestOverrider contains methods that are overridable. This
// interface is a subset of the interface TreeDragDest.
type TreeDragDestOverrider interface {
	// DragDataReceived asks the TreeDragDest to insert a row before the path
	// @dest, deriving the contents of the row from @value. If @dest is outside
	// the tree so that inserting before it is impossible, false will be
	// returned. Also, false may be returned if the new row is not created for
	// some model-specific reason. Should robustly handle a @dest no longer
	// found in the model!
	DragDataReceived(dest *TreePath, value *externglib.Value) bool
	// RowDropPossible determines whether a drop is possible before the given
	// @dest_path, at the same depth as @dest_path. i.e., can we drop the data
	// in @value at that location. @dest_path does not have to exist; the return
	// value will almost certainly be false if the parent of @dest_path doesn’t
	// exist, though.
	RowDropPossible(destPath *TreePath, value *externglib.Value) bool
}

type TreeDragDest interface {
	gextras.Objector
	TreeDragDestOverrider
}

// treeDragDest implements the TreeDragDest interface.
type treeDragDest struct {
	gextras.Objector
}

var _ TreeDragDest = (*treeDragDest)(nil)

// WrapTreeDragDest wraps a GObject to a type that implements interface
// TreeDragDest. It is primarily used internally.
func WrapTreeDragDest(obj *externglib.Object) TreeDragDest {
	return TreeDragDest{
		Objector: obj,
	}
}

func marshalTreeDragDest(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapTreeDragDest(obj), nil
}

// DragDataReceived asks the TreeDragDest to insert a row before the path
// @dest, deriving the contents of the row from @value. If @dest is outside
// the tree so that inserting before it is impossible, false will be
// returned. Also, false may be returned if the new row is not created for
// some model-specific reason. Should robustly handle a @dest no longer
// found in the model!
func (d treeDragDest) DragDataReceived(dest *TreePath, value *externglib.Value) bool {
	var arg0 *C.GtkTreeDragDest
	var arg1 *C.GtkTreePath
	var arg2 *C.GValue

	arg0 = (*C.GtkTreeDragDest)(unsafe.Pointer(d.Native()))
	arg1 = (*C.GtkTreePath)(unsafe.Pointer(dest.Native()))
	arg2 = (*C.GValue)(value.GValue)

	var cret C.gboolean
	var ret1 bool

	cret = C.gtk_tree_drag_dest_drag_data_received(arg0, dest, value)

	ret1 = C.bool(cret) != C.false

	return ret1
}

// RowDropPossible determines whether a drop is possible before the given
// @dest_path, at the same depth as @dest_path. i.e., can we drop the data
// in @value at that location. @dest_path does not have to exist; the return
// value will almost certainly be false if the parent of @dest_path doesn’t
// exist, though.
func (d treeDragDest) RowDropPossible(destPath *TreePath, value *externglib.Value) bool {
	var arg0 *C.GtkTreeDragDest
	var arg1 *C.GtkTreePath
	var arg2 *C.GValue

	arg0 = (*C.GtkTreeDragDest)(unsafe.Pointer(d.Native()))
	arg1 = (*C.GtkTreePath)(unsafe.Pointer(destPath.Native()))
	arg2 = (*C.GValue)(value.GValue)

	var cret C.gboolean
	var ret1 bool

	cret = C.gtk_tree_drag_dest_row_drop_possible(arg0, destPath, value)

	ret1 = C.bool(cret) != C.false

	return ret1
}

// TreeDragSourceOverrider contains methods that are overridable. This
// interface is a subset of the interface TreeDragSource.
type TreeDragSourceOverrider interface {
	// DragDataDelete asks the TreeDragSource to delete the row at @path,
	// because it was moved somewhere else via drag-and-drop. Returns false if
	// the deletion fails because @path no longer exists, or for some
	// model-specific reason. Should robustly handle a @path no longer found in
	// the model!
	DragDataDelete(path *TreePath) bool
	// DragDataGet asks the TreeDragSource to return a ContentProvider
	// representing the row at @path. Should robustly handle a @path no longer
	// found in the model!
	DragDataGet(path *TreePath) gdk.ContentProvider
	// RowDraggable asks the TreeDragSource whether a particular row can be used
	// as the source of a DND operation. If the source doesn’t implement this
	// interface, the row is assumed draggable.
	RowDraggable(path *TreePath) bool
}

type TreeDragSource interface {
	gextras.Objector
	TreeDragSourceOverrider
}

// treeDragSource implements the TreeDragSource interface.
type treeDragSource struct {
	gextras.Objector
}

var _ TreeDragSource = (*treeDragSource)(nil)

// WrapTreeDragSource wraps a GObject to a type that implements interface
// TreeDragSource. It is primarily used internally.
func WrapTreeDragSource(obj *externglib.Object) TreeDragSource {
	return TreeDragSource{
		Objector: obj,
	}
}

func marshalTreeDragSource(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapTreeDragSource(obj), nil
}

// DragDataDelete asks the TreeDragSource to delete the row at @path,
// because it was moved somewhere else via drag-and-drop. Returns false if
// the deletion fails because @path no longer exists, or for some
// model-specific reason. Should robustly handle a @path no longer found in
// the model!
func (d treeDragSource) DragDataDelete(path *TreePath) bool {
	var arg0 *C.GtkTreeDragSource
	var arg1 *C.GtkTreePath

	arg0 = (*C.GtkTreeDragSource)(unsafe.Pointer(d.Native()))
	arg1 = (*C.GtkTreePath)(unsafe.Pointer(path.Native()))

	var cret C.gboolean
	var ret1 bool

	cret = C.gtk_tree_drag_source_drag_data_delete(arg0, path)

	ret1 = C.bool(cret) != C.false

	return ret1
}

// DragDataGet asks the TreeDragSource to return a ContentProvider
// representing the row at @path. Should robustly handle a @path no longer
// found in the model!
func (d treeDragSource) DragDataGet(path *TreePath) gdk.ContentProvider {
	var arg0 *C.GtkTreeDragSource
	var arg1 *C.GtkTreePath

	arg0 = (*C.GtkTreeDragSource)(unsafe.Pointer(d.Native()))
	arg1 = (*C.GtkTreePath)(unsafe.Pointer(path.Native()))

	var cret *C.GdkContentProvider
	var ret1 gdk.ContentProvider

	cret = C.gtk_tree_drag_source_drag_data_get(arg0, path)

	ret1 = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(cret.Native()))).(gdk.ContentProvider)

	return ret1
}

// RowDraggable asks the TreeDragSource whether a particular row can be used
// as the source of a DND operation. If the source doesn’t implement this
// interface, the row is assumed draggable.
func (d treeDragSource) RowDraggable(path *TreePath) bool {
	var arg0 *C.GtkTreeDragSource
	var arg1 *C.GtkTreePath

	arg0 = (*C.GtkTreeDragSource)(unsafe.Pointer(d.Native()))
	arg1 = (*C.GtkTreePath)(unsafe.Pointer(path.Native()))

	var cret C.gboolean
	var ret1 bool

	cret = C.gtk_tree_drag_source_row_draggable(arg0, path)

	ret1 = C.bool(cret) != C.false

	return ret1
}
