// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_constraint_guide_get_type()), F: marshalConstraintGuide},
	})
}

// ConstraintGuide: a ConstraintGuide is an invisible layout element that can be
// used by widgets inside a ConstraintLayout as a source or a target of a
// Constraint. Guides can be used like guidelines or as flexible space.
//
// Unlike a Widget, a ConstraintGuide will not be drawn.
type ConstraintGuide interface {
	gextras.Objector
	ConstraintTarget

	// MaxSize gets the maximum size of @guide.
	MaxSize(width int, height int)
	// MinSize gets the minimum size of @guide.
	MinSize(width int, height int)
	// Name retrieves the name set using gtk_constraint_guide_set_name().
	Name() string
	// NatSize gets the natural size of @guide.
	NatSize(width int, height int)
	// Strength retrieves the strength set using
	// gtk_constraint_guide_set_strength().
	Strength() ConstraintStrength
	// SetMaxSize sets the maximum size of @guide.
	//
	// If @guide is attached to a ConstraintLayout, the constraints will be
	// updated to reflect the new size.
	SetMaxSize(width int, height int)
	// SetMinSize sets the minimum size of @guide.
	//
	// If @guide is attached to a ConstraintLayout, the constraints will be
	// updated to reflect the new size.
	SetMinSize(width int, height int)
	// SetName sets a name for the given ConstraintGuide.
	//
	// The name is useful for debugging purposes.
	SetName(name string)
	// SetNatSize sets the natural size of @guide.
	//
	// If @guide is attached to a ConstraintLayout, the constraints will be
	// updated to reflect the new size.
	SetNatSize(width int, height int)
	// SetStrength sets the strength of the constraint on the natural size of
	// the given ConstraintGuide.
	SetStrength(strength ConstraintStrength)
}

// constraintGuide implements the ConstraintGuide interface.
type constraintGuide struct {
	gextras.Objector
	ConstraintTarget
}

var _ ConstraintGuide = (*constraintGuide)(nil)

// WrapConstraintGuide wraps a GObject to the right type. It is
// primarily used internally.
func WrapConstraintGuide(obj *externglib.Object) ConstraintGuide {
	return ConstraintGuide{
		Objector:         obj,
		ConstraintTarget: WrapConstraintTarget(obj),
	}
}

func marshalConstraintGuide(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapConstraintGuide(obj), nil
}

// NewConstraintGuide constructs a class ConstraintGuide.
func NewConstraintGuide() ConstraintGuide {
	var cret C.GtkConstraintGuide
	var goret1 ConstraintGuide

	cret = C.gtk_constraint_guide_new()

	goret1 = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(cret.Native()))).(ConstraintGuide)

	return goret1
}

// MaxSize gets the maximum size of @guide.
func (g constraintGuide) MaxSize(width int, height int) {
	var arg0 *C.GtkConstraintGuide
	var arg1 *C.int
	var arg2 *C.int

	arg0 = (*C.GtkConstraintGuide)(unsafe.Pointer(g.Native()))
	arg1 = *C.int(width)
	arg2 = *C.int(height)

	C.gtk_constraint_guide_get_max_size(arg0, width, height)
}

// MinSize gets the minimum size of @guide.
func (g constraintGuide) MinSize(width int, height int) {
	var arg0 *C.GtkConstraintGuide
	var arg1 *C.int
	var arg2 *C.int

	arg0 = (*C.GtkConstraintGuide)(unsafe.Pointer(g.Native()))
	arg1 = *C.int(width)
	arg2 = *C.int(height)

	C.gtk_constraint_guide_get_min_size(arg0, width, height)
}

// Name retrieves the name set using gtk_constraint_guide_set_name().
func (g constraintGuide) Name() string {
	var arg0 *C.GtkConstraintGuide

	arg0 = (*C.GtkConstraintGuide)(unsafe.Pointer(g.Native()))

	var cret *C.char
	var goret1 string

	cret = C.gtk_constraint_guide_get_name(arg0)

	goret1 = C.GoString(cret)

	return goret1
}

// NatSize gets the natural size of @guide.
func (g constraintGuide) NatSize(width int, height int) {
	var arg0 *C.GtkConstraintGuide
	var arg1 *C.int
	var arg2 *C.int

	arg0 = (*C.GtkConstraintGuide)(unsafe.Pointer(g.Native()))
	arg1 = *C.int(width)
	arg2 = *C.int(height)

	C.gtk_constraint_guide_get_nat_size(arg0, width, height)
}

// Strength retrieves the strength set using
// gtk_constraint_guide_set_strength().
func (g constraintGuide) Strength() ConstraintStrength {
	var arg0 *C.GtkConstraintGuide

	arg0 = (*C.GtkConstraintGuide)(unsafe.Pointer(g.Native()))

	var cret C.GtkConstraintStrength
	var goret1 ConstraintStrength

	cret = C.gtk_constraint_guide_get_strength(arg0)

	goret1 = ConstraintStrength(cret)

	return goret1
}

// SetMaxSize sets the maximum size of @guide.
//
// If @guide is attached to a ConstraintLayout, the constraints will be
// updated to reflect the new size.
func (g constraintGuide) SetMaxSize(width int, height int) {
	var arg0 *C.GtkConstraintGuide
	var arg1 C.int
	var arg2 C.int

	arg0 = (*C.GtkConstraintGuide)(unsafe.Pointer(g.Native()))
	arg1 = C.int(width)
	arg2 = C.int(height)

	C.gtk_constraint_guide_set_max_size(arg0, width, height)
}

// SetMinSize sets the minimum size of @guide.
//
// If @guide is attached to a ConstraintLayout, the constraints will be
// updated to reflect the new size.
func (g constraintGuide) SetMinSize(width int, height int) {
	var arg0 *C.GtkConstraintGuide
	var arg1 C.int
	var arg2 C.int

	arg0 = (*C.GtkConstraintGuide)(unsafe.Pointer(g.Native()))
	arg1 = C.int(width)
	arg2 = C.int(height)

	C.gtk_constraint_guide_set_min_size(arg0, width, height)
}

// SetName sets a name for the given ConstraintGuide.
//
// The name is useful for debugging purposes.
func (g constraintGuide) SetName(name string) {
	var arg0 *C.GtkConstraintGuide
	var arg1 *C.char

	arg0 = (*C.GtkConstraintGuide)(unsafe.Pointer(g.Native()))
	arg1 = (*C.char)(C.CString(name))
	defer C.free(unsafe.Pointer(arg1))

	C.gtk_constraint_guide_set_name(arg0, name)
}

// SetNatSize sets the natural size of @guide.
//
// If @guide is attached to a ConstraintLayout, the constraints will be
// updated to reflect the new size.
func (g constraintGuide) SetNatSize(width int, height int) {
	var arg0 *C.GtkConstraintGuide
	var arg1 C.int
	var arg2 C.int

	arg0 = (*C.GtkConstraintGuide)(unsafe.Pointer(g.Native()))
	arg1 = C.int(width)
	arg2 = C.int(height)

	C.gtk_constraint_guide_set_nat_size(arg0, width, height)
}

// SetStrength sets the strength of the constraint on the natural size of
// the given ConstraintGuide.
func (g constraintGuide) SetStrength(strength ConstraintStrength) {
	var arg0 *C.GtkConstraintGuide
	var arg1 C.GtkConstraintStrength

	arg0 = (*C.GtkConstraintGuide)(unsafe.Pointer(g.Native()))
	arg1 = (C.GtkConstraintStrength)(strength)

	C.gtk_constraint_guide_set_strength(arg0, strength)
}
