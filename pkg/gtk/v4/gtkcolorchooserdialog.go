// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/core/gextras"
	"github.com/diamondburned/gotk4/pkg/gdk/v4"
	"github.com/diamondburned/gotk4/pkg/gsk/v4"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_color_chooser_dialog_get_type()), F: marshalColorChooserDialog},
	})
}

// ColorChooserDialog: a dialog for choosing a color.
//
// !An example GtkColorChooserDialog (colorchooser.png)
//
// `GtkColorChooserDialog` implements the [iface@Gtk.ColorChooser] interface and
// does not provide much API of its own.
//
// To create a `GtkColorChooserDialog`, use [ctor@Gtk.ColorChooserDialog.new].
//
// To change the initially selected color, use
// [method@Gtk.ColorChooser.set_rgba]. To get the selected color use
// [method@Gtk.ColorChooser.get_rgba].
type ColorChooserDialog interface {
	Dialog
	ColorChooser
}

// colorChooserDialog implements the ColorChooserDialog class.
type colorChooserDialog struct {
	Dialog
}

// WrapColorChooserDialog wraps a GObject to the right type. It is
// primarily used internally.
func WrapColorChooserDialog(obj *externglib.Object) ColorChooserDialog {
	return colorChooserDialog{
		Dialog: WrapDialog(obj),
	}
}

func marshalColorChooserDialog(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapColorChooserDialog(obj), nil
}

// NewColorChooserDialog:
func NewColorChooserDialog(title string, parent Window) ColorChooserDialog {
	var _arg1 *C.char      // out
	var _arg2 *C.GtkWindow // out
	var _cret *C.GtkWidget // in

	_arg1 = (*C.char)(C.CString(title))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.GtkWindow)(unsafe.Pointer(parent.Native()))

	_cret = C.gtk_color_chooser_dialog_new(_arg1, _arg2)

	var _colorChooserDialog ColorChooserDialog // out

	_colorChooserDialog = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(ColorChooserDialog)

	return _colorChooserDialog
}

func (s colorChooserDialog) Display() gdk.Display {
	return WrapRoot(gextras.InternObject(s)).Display()
}

func (s colorChooserDialog) Focus() Widget {
	return WrapRoot(gextras.InternObject(s)).Focus()
}

func (s colorChooserDialog) SetFocus(focus Widget) {
	WrapRoot(gextras.InternObject(s)).SetFocus(focus)
}

func (s colorChooserDialog) Renderer() gsk.Renderer {
	return WrapNative(gextras.InternObject(s)).Renderer()
}

func (s colorChooserDialog) Surface() gdk.Surface {
	return WrapNative(gextras.InternObject(s)).Surface()
}

func (s colorChooserDialog) SurfaceTransform() (x float64, y float64) {
	return WrapNative(gextras.InternObject(s)).SurfaceTransform()
}

func (s colorChooserDialog) Realize() {
	WrapNative(gextras.InternObject(s)).Realize()
}

func (s colorChooserDialog) Unrealize() {
	WrapNative(gextras.InternObject(s)).Unrealize()
}

func (s colorChooserDialog) AccessibleRole() AccessibleRole {
	return WrapAccessible(gextras.InternObject(s)).AccessibleRole()
}

func (s colorChooserDialog) ResetProperty(property AccessibleProperty) {
	WrapAccessible(gextras.InternObject(s)).ResetProperty(property)
}

func (s colorChooserDialog) ResetRelation(relation AccessibleRelation) {
	WrapAccessible(gextras.InternObject(s)).ResetRelation(relation)
}

func (s colorChooserDialog) ResetState(state AccessibleState) {
	WrapAccessible(gextras.InternObject(s)).ResetState(state)
}

func (s colorChooserDialog) UpdatePropertyValue(properties []AccessibleProperty, values []externglib.Value) {
	WrapAccessible(gextras.InternObject(s)).UpdatePropertyValue(properties, values)
}

func (s colorChooserDialog) UpdateRelationValue(relations []AccessibleRelation, values []externglib.Value) {
	WrapAccessible(gextras.InternObject(s)).UpdateRelationValue(relations, values)
}

func (s colorChooserDialog) UpdateStateValue(states []AccessibleState, values []externglib.Value) {
	WrapAccessible(gextras.InternObject(s)).UpdateStateValue(states, values)
}

func (b colorChooserDialog) BuildableID() string {
	return WrapBuildable(gextras.InternObject(b)).BuildableID()
}

func (c colorChooserDialog) AddPalette(orientation Orientation, colorsPerLine int, colors []gdk.RGBA) {
	WrapColorChooser(gextras.InternObject(c)).AddPalette(orientation, colorsPerLine, colors)
}

func (c colorChooserDialog) RGBA() gdk.RGBA {
	return WrapColorChooser(gextras.InternObject(c)).RGBA()
}

func (c colorChooserDialog) UseAlpha() bool {
	return WrapColorChooser(gextras.InternObject(c)).UseAlpha()
}

func (c colorChooserDialog) SetRGBA(color *gdk.RGBA) {
	WrapColorChooser(gextras.InternObject(c)).SetRGBA(color)
}

func (c colorChooserDialog) SetUseAlpha(useAlpha bool) {
	WrapColorChooser(gextras.InternObject(c)).SetUseAlpha(useAlpha)
}
