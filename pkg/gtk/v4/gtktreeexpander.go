// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_tree_expander_get_type()), F: marshalTreeExpander},
	})
}

// TreeExpander: gtkTreeExpander is a widget that provides an expander for a
// list.
//
// It is typically placed as a bottommost child into a ListView to allow users
// to expand and collapse children in a list with a TreeListModel. It will
// provide the common UI elements, gestures and keybindings for this purpose.
//
// On top of this, the "listitem.expand", "listitem.collapse" and
// "listitem.toggle-expand" actions are provided to allow adding custom UI for
// managing expanded state.
//
// The TreeListModel must be set to not be passthrough. Then it will provide
// TreeListRow items which can be set via gtk_tree_expander_set_list_row() on
// the expander. The expander will then watch that row item automatically.
// gtk_tree_expander_set_child() sets the widget that displays the actual row
// contents.
//
// CSS nodes
//
//    treeexpander
//    ├── [indent]*
//    ├── [expander]
//    ╰── <child>
//
// GtkTreeExpander has zero or one CSS nodes with the name "expander" that
// should display the expander icon. The node will be `:checked` when it is
// expanded. If the node is not expandable, an "indent" node will be displayed
// instead.
//
// For every level of depth, another "indent" node is prepended.
//
//
// Accessibility
//
// GtkTreeExpander uses the GTK_ACCESSIBLE_ROLE_GROUP role. The expander icon is
// represented as a GTK_ACCESSIBLE_ROLE_BUTTON, labelled by the expander's
// child, and toggling it will change the GTK_ACCESSIBLE_STATE_EXPANDED state.
type TreeExpander interface {
	Widget
	Accessible
	Buildable
	ConstraintTarget

	// Child gets the child widget displayed by @self.
	Child(s TreeExpander)
	// Item forwards the item set on the TreeListRow that @self is managing.
	//
	// This call is essentially equivalent to calling:
	//
	//    gtk_tree_list_row_get_item (gtk_tree_expander_get_list_row (@self));
	Item(s TreeExpander)
	// ListRow gets the list row managed by @self.
	ListRow(s TreeExpander)
	// SetChild sets the content widget to display.
	SetChild(s TreeExpander, child Widget)
	// SetListRow sets the tree list row that this expander should manage.
	SetListRow(s TreeExpander, listRow TreeListRow)
}

// treeExpander implements the TreeExpander interface.
type treeExpander struct {
	Widget
	Accessible
	Buildable
	ConstraintTarget
}

var _ TreeExpander = (*treeExpander)(nil)

// WrapTreeExpander wraps a GObject to the right type. It is
// primarily used internally.
func WrapTreeExpander(obj *externglib.Object) TreeExpander {
	return TreeExpander{
		Widget:           WrapWidget(obj),
		Accessible:       WrapAccessible(obj),
		Buildable:        WrapBuildable(obj),
		ConstraintTarget: WrapConstraintTarget(obj),
	}
}

func marshalTreeExpander(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapTreeExpander(obj), nil
}

// NewTreeExpander constructs a class TreeExpander.
func NewTreeExpander() {
	C.gtk_tree_expander_new()
}

// Child gets the child widget displayed by @self.
func (s treeExpander) Child(s TreeExpander) {
	var arg0 *C.GtkTreeExpander

	arg0 = (*C.GtkTreeExpander)(unsafe.Pointer(s.Native()))

	C.gtk_tree_expander_get_child(arg0)
}

// Item forwards the item set on the TreeListRow that @self is managing.
//
// This call is essentially equivalent to calling:
//
//    gtk_tree_list_row_get_item (gtk_tree_expander_get_list_row (@self));
func (s treeExpander) Item(s TreeExpander) {
	var arg0 *C.GtkTreeExpander

	arg0 = (*C.GtkTreeExpander)(unsafe.Pointer(s.Native()))

	C.gtk_tree_expander_get_item(arg0)
}

// ListRow gets the list row managed by @self.
func (s treeExpander) ListRow(s TreeExpander) {
	var arg0 *C.GtkTreeExpander

	arg0 = (*C.GtkTreeExpander)(unsafe.Pointer(s.Native()))

	C.gtk_tree_expander_get_list_row(arg0)
}

// SetChild sets the content widget to display.
func (s treeExpander) SetChild(s TreeExpander, child Widget) {
	var arg0 *C.GtkTreeExpander
	var arg1 *C.GtkWidget

	arg0 = (*C.GtkTreeExpander)(unsafe.Pointer(s.Native()))
	arg1 = (*C.GtkWidget)(unsafe.Pointer(child.Native()))

	C.gtk_tree_expander_set_child(arg0, arg1)
}

// SetListRow sets the tree list row that this expander should manage.
func (s treeExpander) SetListRow(s TreeExpander, listRow TreeListRow) {
	var arg0 *C.GtkTreeExpander
	var arg1 *C.GtkTreeListRow

	arg0 = (*C.GtkTreeExpander)(unsafe.Pointer(s.Native()))
	arg1 = (*C.GtkTreeListRow)(unsafe.Pointer(listRow.Native()))

	C.gtk_tree_expander_set_list_row(arg0, arg1)
}
