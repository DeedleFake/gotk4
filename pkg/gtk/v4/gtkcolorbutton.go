// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: glib-2.0 gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_color_button_get_type()), F: marshalColorButton},
	})
}

// ColorButton: the `GtkColorButton` allows to open a color chooser dialog to
// change the color.
//
// !An example GtkColorButton (color-button.png)
//
// It is suitable widget for selecting a color in a preference dialog.
//
//
// CSS nodes
//
// “` colorbutton ╰── button.color ╰── [content] “`
//
// `GtkColorButton` has a single CSS node with name colorbutton which contains a
// button node. To differentiate it from a plain `GtkButton`, it gets the .color
// style class.
type ColorButton interface {
	Widget
	Accessible
	Buildable
	ColorChooser
	ConstraintTarget

	// Modal gets whether the dialog is modal.
	Modal() bool
	// Title gets the title of the color chooser dialog.
	Title() string
	// SetModal sets whether the dialog should be modal.
	SetModal(modal bool)
	// SetTitle sets the title for the color chooser dialog.
	SetTitle(title string)
}

// colorButton implements the ColorButton class.
type colorButton struct {
	Widget
	Accessible
	Buildable
	ColorChooser
	ConstraintTarget
}

var _ ColorButton = (*colorButton)(nil)

// WrapColorButton wraps a GObject to the right type. It is
// primarily used internally.
func WrapColorButton(obj *externglib.Object) ColorButton {
	return colorButton{
		Widget:           WrapWidget(obj),
		Accessible:       WrapAccessible(obj),
		Buildable:        WrapBuildable(obj),
		ColorChooser:     WrapColorChooser(obj),
		ConstraintTarget: WrapConstraintTarget(obj),
	}
}

func marshalColorButton(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapColorButton(obj), nil
}

// Modal gets whether the dialog is modal.
func (b colorButton) Modal() bool {
	var _arg0 *C.GtkColorButton // out

	_arg0 = (*C.GtkColorButton)(unsafe.Pointer(b.Native()))

	var _cret C.gboolean // in

	_cret = C.gtk_color_button_get_modal(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Title gets the title of the color chooser dialog.
func (b colorButton) Title() string {
	var _arg0 *C.GtkColorButton // out

	_arg0 = (*C.GtkColorButton)(unsafe.Pointer(b.Native()))

	var _cret *C.char // in

	_cret = C.gtk_color_button_get_title(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

// SetModal sets whether the dialog should be modal.
func (b colorButton) SetModal(modal bool) {
	var _arg0 *C.GtkColorButton // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.GtkColorButton)(unsafe.Pointer(b.Native()))
	if modal {
		_arg1 = C.TRUE
	}

	C.gtk_color_button_set_modal(_arg0, _arg1)
}

// SetTitle sets the title for the color chooser dialog.
func (b colorButton) SetTitle(title string) {
	var _arg0 *C.GtkColorButton // out
	var _arg1 *C.char           // out

	_arg0 = (*C.GtkColorButton)(unsafe.Pointer(b.Native()))
	_arg1 = (*C.char)(C.CString(title))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_color_button_set_title(_arg0, _arg1)
}
