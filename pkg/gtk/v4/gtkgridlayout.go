// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_grid_layout_get_type()), F: marshalGridLayout},
		{T: externglib.Type(C.gtk_grid_layout_child_get_type()), F: marshalGridLayoutChild},
	})
}

// GridLayout: gtkGridLayout is a layout manager which arranges child widgets in
// rows and columns, with arbitrary positions and horizontal/vertical spans.
//
// Children have an "attach point" defined by the horizontal and vertical index
// of the cell they occupy; children can span multiple rows or columns. The
// layout properties for setting the attach points and spans are set using the
// GridLayoutChild associated to each child widget.
//
// The behaviour of GtkGrid when several children occupy the same grid cell is
// undefined.
//
// GtkGridLayout can be used like a BoxLayout if all children are attached to
// the same row or column; however, if you only ever need a single row or
// column, you should consider using BoxLayout.
type GridLayout interface {
	LayoutManager

	// BaselineRow retrieves the row set with
	// gtk_grid_layout_set_baseline_row().
	BaselineRow(g GridLayout)
	// ColumnHomogeneous checks whether all columns of @grid should have the
	// same width.
	ColumnHomogeneous(g GridLayout) bool
	// ColumnSpacing retrieves the spacing set with
	// gtk_grid_layout_set_column_spacing().
	ColumnSpacing(g GridLayout)
	// RowBaselinePosition returns the baseline position of @row as set by
	// gtk_grid_layout_set_row_baseline_position(), or the default value of
	// GTK_BASELINE_POSITION_CENTER.
	RowBaselinePosition(g GridLayout, row int)
	// RowHomogeneous checks whether all rows of @grid should have the same
	// height.
	RowHomogeneous(g GridLayout) bool
	// RowSpacing retrieves the spacing set with
	// gtk_grid_layout_set_row_spacing().
	RowSpacing(g GridLayout)
	// SetBaselineRow sets which row defines the global baseline for the entire
	// grid.
	//
	// Each row in the grid can have its own local baseline, but only one of
	// those is global, meaning it will be the baseline in the parent of the
	// @grid.
	SetBaselineRow(g GridLayout, row int)
	// SetColumnHomogeneous sets whether all columns of @grid should have the
	// same width.
	SetColumnHomogeneous(g GridLayout, homogeneous bool)
	// SetColumnSpacing sets the amount of space to insert between consecutive
	// columns.
	SetColumnSpacing(g GridLayout, spacing uint)
	// SetRowBaselinePosition sets how the baseline should be positioned on @row
	// of the grid, in case that row is assigned more space than is requested.
	SetRowBaselinePosition(g GridLayout, row int, pos BaselinePosition)
	// SetRowHomogeneous sets whether all rows of @grid should have the same
	// height.
	SetRowHomogeneous(g GridLayout, homogeneous bool)
	// SetRowSpacing sets the amount of space to insert between consecutive
	// rows.
	SetRowSpacing(g GridLayout, spacing uint)
}

// gridLayout implements the GridLayout interface.
type gridLayout struct {
	LayoutManager
}

var _ GridLayout = (*gridLayout)(nil)

// WrapGridLayout wraps a GObject to the right type. It is
// primarily used internally.
func WrapGridLayout(obj *externglib.Object) GridLayout {
	return GridLayout{
		LayoutManager: WrapLayoutManager(obj),
	}
}

func marshalGridLayout(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapGridLayout(obj), nil
}

// NewGridLayout constructs a class GridLayout.
func NewGridLayout() {
	C.gtk_grid_layout_new()
}

// BaselineRow retrieves the row set with
// gtk_grid_layout_set_baseline_row().
func (g gridLayout) BaselineRow(g GridLayout) {
	var arg0 *C.GtkGridLayout

	arg0 = (*C.GtkGridLayout)(unsafe.Pointer(g.Native()))

	C.gtk_grid_layout_get_baseline_row(arg0)
}

// ColumnHomogeneous checks whether all columns of @grid should have the
// same width.
func (g gridLayout) ColumnHomogeneous(g GridLayout) bool {
	var arg0 *C.GtkGridLayout

	arg0 = (*C.GtkGridLayout)(unsafe.Pointer(g.Native()))

	var cret C.gboolean
	var ok bool

	cret = C.gtk_grid_layout_get_column_homogeneous(arg0)

	if cret {
		ok = true
	}

	return ok
}

// ColumnSpacing retrieves the spacing set with
// gtk_grid_layout_set_column_spacing().
func (g gridLayout) ColumnSpacing(g GridLayout) {
	var arg0 *C.GtkGridLayout

	arg0 = (*C.GtkGridLayout)(unsafe.Pointer(g.Native()))

	C.gtk_grid_layout_get_column_spacing(arg0)
}

// RowBaselinePosition returns the baseline position of @row as set by
// gtk_grid_layout_set_row_baseline_position(), or the default value of
// GTK_BASELINE_POSITION_CENTER.
func (g gridLayout) RowBaselinePosition(g GridLayout, row int) {
	var arg0 *C.GtkGridLayout
	var arg1 C.int

	arg0 = (*C.GtkGridLayout)(unsafe.Pointer(g.Native()))
	arg1 = C.int(row)

	C.gtk_grid_layout_get_row_baseline_position(arg0, arg1)
}

// RowHomogeneous checks whether all rows of @grid should have the same
// height.
func (g gridLayout) RowHomogeneous(g GridLayout) bool {
	var arg0 *C.GtkGridLayout

	arg0 = (*C.GtkGridLayout)(unsafe.Pointer(g.Native()))

	var cret C.gboolean
	var ok bool

	cret = C.gtk_grid_layout_get_row_homogeneous(arg0)

	if cret {
		ok = true
	}

	return ok
}

// RowSpacing retrieves the spacing set with
// gtk_grid_layout_set_row_spacing().
func (g gridLayout) RowSpacing(g GridLayout) {
	var arg0 *C.GtkGridLayout

	arg0 = (*C.GtkGridLayout)(unsafe.Pointer(g.Native()))

	C.gtk_grid_layout_get_row_spacing(arg0)
}

// SetBaselineRow sets which row defines the global baseline for the entire
// grid.
//
// Each row in the grid can have its own local baseline, but only one of
// those is global, meaning it will be the baseline in the parent of the
// @grid.
func (g gridLayout) SetBaselineRow(g GridLayout, row int) {
	var arg0 *C.GtkGridLayout
	var arg1 C.int

	arg0 = (*C.GtkGridLayout)(unsafe.Pointer(g.Native()))
	arg1 = C.int(row)

	C.gtk_grid_layout_set_baseline_row(arg0, arg1)
}

// SetColumnHomogeneous sets whether all columns of @grid should have the
// same width.
func (g gridLayout) SetColumnHomogeneous(g GridLayout, homogeneous bool) {
	var arg0 *C.GtkGridLayout
	var arg1 C.gboolean

	arg0 = (*C.GtkGridLayout)(unsafe.Pointer(g.Native()))
	if homogeneous {
		arg1 = C.gboolean(1)
	}

	C.gtk_grid_layout_set_column_homogeneous(arg0, arg1)
}

// SetColumnSpacing sets the amount of space to insert between consecutive
// columns.
func (g gridLayout) SetColumnSpacing(g GridLayout, spacing uint) {
	var arg0 *C.GtkGridLayout
	var arg1 C.guint

	arg0 = (*C.GtkGridLayout)(unsafe.Pointer(g.Native()))
	arg1 = C.guint(spacing)

	C.gtk_grid_layout_set_column_spacing(arg0, arg1)
}

// SetRowBaselinePosition sets how the baseline should be positioned on @row
// of the grid, in case that row is assigned more space than is requested.
func (g gridLayout) SetRowBaselinePosition(g GridLayout, row int, pos BaselinePosition) {
	var arg0 *C.GtkGridLayout
	var arg1 C.int
	var arg2 C.GtkBaselinePosition

	arg0 = (*C.GtkGridLayout)(unsafe.Pointer(g.Native()))
	arg1 = C.int(row)
	arg2 = (C.GtkBaselinePosition)(pos)

	C.gtk_grid_layout_set_row_baseline_position(arg0, arg1, arg2)
}

// SetRowHomogeneous sets whether all rows of @grid should have the same
// height.
func (g gridLayout) SetRowHomogeneous(g GridLayout, homogeneous bool) {
	var arg0 *C.GtkGridLayout
	var arg1 C.gboolean

	arg0 = (*C.GtkGridLayout)(unsafe.Pointer(g.Native()))
	if homogeneous {
		arg1 = C.gboolean(1)
	}

	C.gtk_grid_layout_set_row_homogeneous(arg0, arg1)
}

// SetRowSpacing sets the amount of space to insert between consecutive
// rows.
func (g gridLayout) SetRowSpacing(g GridLayout, spacing uint) {
	var arg0 *C.GtkGridLayout
	var arg1 C.guint

	arg0 = (*C.GtkGridLayout)(unsafe.Pointer(g.Native()))
	arg1 = C.guint(spacing)

	C.gtk_grid_layout_set_row_spacing(arg0, arg1)
}

// GridLayoutChild: layout properties for children of GridLayout.
type GridLayoutChild interface {
	LayoutChild

	// Column retrieves the column number to which @child attaches its left
	// side.
	Column(c GridLayoutChild)
	// ColumnSpan retrieves the number of columns that @child spans to.
	ColumnSpan(c GridLayoutChild)
	// Row retrieves the row number to which @child attaches its top side.
	Row(c GridLayoutChild)
	// RowSpan retrieves the number of rows that @child spans to.
	RowSpan(c GridLayoutChild)
	// SetColumn sets the column number to attach the left side of @child.
	SetColumn(c GridLayoutChild, column int)
	// SetColumnSpan sets the number of columns @child spans to.
	SetColumnSpan(c GridLayoutChild, span int)
	// SetRow sets the row to place @child in.
	SetRow(c GridLayoutChild, row int)
	// SetRowSpan sets the number of rows @child spans to.
	SetRowSpan(c GridLayoutChild, span int)
}

// gridLayoutChild implements the GridLayoutChild interface.
type gridLayoutChild struct {
	LayoutChild
}

var _ GridLayoutChild = (*gridLayoutChild)(nil)

// WrapGridLayoutChild wraps a GObject to the right type. It is
// primarily used internally.
func WrapGridLayoutChild(obj *externglib.Object) GridLayoutChild {
	return GridLayoutChild{
		LayoutChild: WrapLayoutChild(obj),
	}
}

func marshalGridLayoutChild(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapGridLayoutChild(obj), nil
}

// Column retrieves the column number to which @child attaches its left
// side.
func (c gridLayoutChild) Column(c GridLayoutChild) {
	var arg0 *C.GtkGridLayoutChild

	arg0 = (*C.GtkGridLayoutChild)(unsafe.Pointer(c.Native()))

	C.gtk_grid_layout_child_get_column(arg0)
}

// ColumnSpan retrieves the number of columns that @child spans to.
func (c gridLayoutChild) ColumnSpan(c GridLayoutChild) {
	var arg0 *C.GtkGridLayoutChild

	arg0 = (*C.GtkGridLayoutChild)(unsafe.Pointer(c.Native()))

	C.gtk_grid_layout_child_get_column_span(arg0)
}

// Row retrieves the row number to which @child attaches its top side.
func (c gridLayoutChild) Row(c GridLayoutChild) {
	var arg0 *C.GtkGridLayoutChild

	arg0 = (*C.GtkGridLayoutChild)(unsafe.Pointer(c.Native()))

	C.gtk_grid_layout_child_get_row(arg0)
}

// RowSpan retrieves the number of rows that @child spans to.
func (c gridLayoutChild) RowSpan(c GridLayoutChild) {
	var arg0 *C.GtkGridLayoutChild

	arg0 = (*C.GtkGridLayoutChild)(unsafe.Pointer(c.Native()))

	C.gtk_grid_layout_child_get_row_span(arg0)
}

// SetColumn sets the column number to attach the left side of @child.
func (c gridLayoutChild) SetColumn(c GridLayoutChild, column int) {
	var arg0 *C.GtkGridLayoutChild
	var arg1 C.int

	arg0 = (*C.GtkGridLayoutChild)(unsafe.Pointer(c.Native()))
	arg1 = C.int(column)

	C.gtk_grid_layout_child_set_column(arg0, arg1)
}

// SetColumnSpan sets the number of columns @child spans to.
func (c gridLayoutChild) SetColumnSpan(c GridLayoutChild, span int) {
	var arg0 *C.GtkGridLayoutChild
	var arg1 C.int

	arg0 = (*C.GtkGridLayoutChild)(unsafe.Pointer(c.Native()))
	arg1 = C.int(span)

	C.gtk_grid_layout_child_set_column_span(arg0, arg1)
}

// SetRow sets the row to place @child in.
func (c gridLayoutChild) SetRow(c GridLayoutChild, row int) {
	var arg0 *C.GtkGridLayoutChild
	var arg1 C.int

	arg0 = (*C.GtkGridLayoutChild)(unsafe.Pointer(c.Native()))
	arg1 = C.int(row)

	C.gtk_grid_layout_child_set_row(arg0, arg1)
}

// SetRowSpan sets the number of rows @child spans to.
func (c gridLayoutChild) SetRowSpan(c GridLayoutChild, span int) {
	var arg0 *C.GtkGridLayoutChild
	var arg1 C.int

	arg0 = (*C.GtkGridLayoutChild)(unsafe.Pointer(c.Native()))
	arg1 = C.int(span)

	C.gtk_grid_layout_child_set_row_span(arg0, arg1)
}
