// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_grid_layout_get_type()), F: marshalGridLayout},
		{T: externglib.Type(C.gtk_grid_layout_child_get_type()), F: marshalGridLayoutChild},
	})
}

// GridLayout: `GtkGridLayout` is a layout manager which arranges child widgets
// in rows and columns.
//
// Children have an "attach point" defined by the horizontal and vertical index
// of the cell they occupy; children can span multiple rows or columns. The
// layout properties for setting the attach points and spans are set using the
// [class@Gtk.GridLayoutChild] associated to each child widget.
//
// The behaviour of `GtkGridLayout` when several children occupy the same grid
// cell is undefined.
//
// `GtkGridLayout` can be used like a `GtkBoxLayout` if all children are
// attached to the same row or column; however, if you only ever need a single
// row or column, you should consider using `GtkBoxLayout`.
type GridLayout interface {
	LayoutManager

	BaselineRow() int

	ColumnHomogeneous() bool

	ColumnSpacing() uint

	RowBaselinePosition(row int) BaselinePosition

	RowHomogeneous() bool

	RowSpacing() uint

	SetBaselineRowGridLayout(row int)

	SetColumnHomogeneousGridLayout(homogeneous bool)

	SetColumnSpacingGridLayout(spacing uint)

	SetRowBaselinePositionGridLayout(row int, pos BaselinePosition)

	SetRowHomogeneousGridLayout(homogeneous bool)

	SetRowSpacingGridLayout(spacing uint)
}

// gridLayout implements the GridLayout class.
type gridLayout struct {
	LayoutManager
}

// WrapGridLayout wraps a GObject to the right type. It is
// primarily used internally.
func WrapGridLayout(obj *externglib.Object) GridLayout {
	return gridLayout{
		LayoutManager: WrapLayoutManager(obj),
	}
}

func marshalGridLayout(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapGridLayout(obj), nil
}

func NewGridLayout() GridLayout {
	var _cret *C.GtkLayoutManager // in

	_cret = C.gtk_grid_layout_new()

	var _gridLayout GridLayout // out

	_gridLayout = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(GridLayout)

	return _gridLayout
}

func (g gridLayout) BaselineRow() int {
	var _arg0 *C.GtkGridLayout // out
	var _cret C.int            // in

	_arg0 = (*C.GtkGridLayout)(unsafe.Pointer(g.Native()))

	_cret = C.gtk_grid_layout_get_baseline_row(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (g gridLayout) ColumnHomogeneous() bool {
	var _arg0 *C.GtkGridLayout // out
	var _cret C.gboolean       // in

	_arg0 = (*C.GtkGridLayout)(unsafe.Pointer(g.Native()))

	_cret = C.gtk_grid_layout_get_column_homogeneous(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (g gridLayout) ColumnSpacing() uint {
	var _arg0 *C.GtkGridLayout // out
	var _cret C.guint          // in

	_arg0 = (*C.GtkGridLayout)(unsafe.Pointer(g.Native()))

	_cret = C.gtk_grid_layout_get_column_spacing(_arg0)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

func (g gridLayout) RowBaselinePosition(row int) BaselinePosition {
	var _arg0 *C.GtkGridLayout      // out
	var _arg1 C.int                 // out
	var _cret C.GtkBaselinePosition // in

	_arg0 = (*C.GtkGridLayout)(unsafe.Pointer(g.Native()))
	_arg1 = C.int(row)

	_cret = C.gtk_grid_layout_get_row_baseline_position(_arg0, _arg1)

	var _baselinePosition BaselinePosition // out

	_baselinePosition = BaselinePosition(_cret)

	return _baselinePosition
}

func (g gridLayout) RowHomogeneous() bool {
	var _arg0 *C.GtkGridLayout // out
	var _cret C.gboolean       // in

	_arg0 = (*C.GtkGridLayout)(unsafe.Pointer(g.Native()))

	_cret = C.gtk_grid_layout_get_row_homogeneous(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (g gridLayout) RowSpacing() uint {
	var _arg0 *C.GtkGridLayout // out
	var _cret C.guint          // in

	_arg0 = (*C.GtkGridLayout)(unsafe.Pointer(g.Native()))

	_cret = C.gtk_grid_layout_get_row_spacing(_arg0)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

func (g gridLayout) SetBaselineRowGridLayout(row int) {
	var _arg0 *C.GtkGridLayout // out
	var _arg1 C.int            // out

	_arg0 = (*C.GtkGridLayout)(unsafe.Pointer(g.Native()))
	_arg1 = C.int(row)

	C.gtk_grid_layout_set_baseline_row(_arg0, _arg1)
}

func (g gridLayout) SetColumnHomogeneousGridLayout(homogeneous bool) {
	var _arg0 *C.GtkGridLayout // out
	var _arg1 C.gboolean       // out

	_arg0 = (*C.GtkGridLayout)(unsafe.Pointer(g.Native()))
	if homogeneous {
		_arg1 = C.TRUE
	}

	C.gtk_grid_layout_set_column_homogeneous(_arg0, _arg1)
}

func (g gridLayout) SetColumnSpacingGridLayout(spacing uint) {
	var _arg0 *C.GtkGridLayout // out
	var _arg1 C.guint          // out

	_arg0 = (*C.GtkGridLayout)(unsafe.Pointer(g.Native()))
	_arg1 = C.guint(spacing)

	C.gtk_grid_layout_set_column_spacing(_arg0, _arg1)
}

func (g gridLayout) SetRowBaselinePositionGridLayout(row int, pos BaselinePosition) {
	var _arg0 *C.GtkGridLayout      // out
	var _arg1 C.int                 // out
	var _arg2 C.GtkBaselinePosition // out

	_arg0 = (*C.GtkGridLayout)(unsafe.Pointer(g.Native()))
	_arg1 = C.int(row)
	_arg2 = C.GtkBaselinePosition(pos)

	C.gtk_grid_layout_set_row_baseline_position(_arg0, _arg1, _arg2)
}

func (g gridLayout) SetRowHomogeneousGridLayout(homogeneous bool) {
	var _arg0 *C.GtkGridLayout // out
	var _arg1 C.gboolean       // out

	_arg0 = (*C.GtkGridLayout)(unsafe.Pointer(g.Native()))
	if homogeneous {
		_arg1 = C.TRUE
	}

	C.gtk_grid_layout_set_row_homogeneous(_arg0, _arg1)
}

func (g gridLayout) SetRowSpacingGridLayout(spacing uint) {
	var _arg0 *C.GtkGridLayout // out
	var _arg1 C.guint          // out

	_arg0 = (*C.GtkGridLayout)(unsafe.Pointer(g.Native()))
	_arg1 = C.guint(spacing)

	C.gtk_grid_layout_set_row_spacing(_arg0, _arg1)
}

// GridLayoutChild: `GtkLayoutChild` subclass for children in a `GtkGridLayout`.
type GridLayoutChild interface {
	LayoutChild

	Column() int

	ColumnSpan() int

	Row() int

	RowSpan() int

	SetColumnGridLayoutChild(column int)

	SetColumnSpanGridLayoutChild(span int)

	SetRowGridLayoutChild(row int)

	SetRowSpanGridLayoutChild(span int)
}

// gridLayoutChild implements the GridLayoutChild class.
type gridLayoutChild struct {
	LayoutChild
}

// WrapGridLayoutChild wraps a GObject to the right type. It is
// primarily used internally.
func WrapGridLayoutChild(obj *externglib.Object) GridLayoutChild {
	return gridLayoutChild{
		LayoutChild: WrapLayoutChild(obj),
	}
}

func marshalGridLayoutChild(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapGridLayoutChild(obj), nil
}

func (c gridLayoutChild) Column() int {
	var _arg0 *C.GtkGridLayoutChild // out
	var _cret C.int                 // in

	_arg0 = (*C.GtkGridLayoutChild)(unsafe.Pointer(c.Native()))

	_cret = C.gtk_grid_layout_child_get_column(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (c gridLayoutChild) ColumnSpan() int {
	var _arg0 *C.GtkGridLayoutChild // out
	var _cret C.int                 // in

	_arg0 = (*C.GtkGridLayoutChild)(unsafe.Pointer(c.Native()))

	_cret = C.gtk_grid_layout_child_get_column_span(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (c gridLayoutChild) Row() int {
	var _arg0 *C.GtkGridLayoutChild // out
	var _cret C.int                 // in

	_arg0 = (*C.GtkGridLayoutChild)(unsafe.Pointer(c.Native()))

	_cret = C.gtk_grid_layout_child_get_row(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (c gridLayoutChild) RowSpan() int {
	var _arg0 *C.GtkGridLayoutChild // out
	var _cret C.int                 // in

	_arg0 = (*C.GtkGridLayoutChild)(unsafe.Pointer(c.Native()))

	_cret = C.gtk_grid_layout_child_get_row_span(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (c gridLayoutChild) SetColumnGridLayoutChild(column int) {
	var _arg0 *C.GtkGridLayoutChild // out
	var _arg1 C.int                 // out

	_arg0 = (*C.GtkGridLayoutChild)(unsafe.Pointer(c.Native()))
	_arg1 = C.int(column)

	C.gtk_grid_layout_child_set_column(_arg0, _arg1)
}

func (c gridLayoutChild) SetColumnSpanGridLayoutChild(span int) {
	var _arg0 *C.GtkGridLayoutChild // out
	var _arg1 C.int                 // out

	_arg0 = (*C.GtkGridLayoutChild)(unsafe.Pointer(c.Native()))
	_arg1 = C.int(span)

	C.gtk_grid_layout_child_set_column_span(_arg0, _arg1)
}

func (c gridLayoutChild) SetRowGridLayoutChild(row int) {
	var _arg0 *C.GtkGridLayoutChild // out
	var _arg1 C.int                 // out

	_arg0 = (*C.GtkGridLayoutChild)(unsafe.Pointer(c.Native()))
	_arg1 = C.int(row)

	C.gtk_grid_layout_child_set_row(_arg0, _arg1)
}

func (c gridLayoutChild) SetRowSpanGridLayoutChild(span int) {
	var _arg0 *C.GtkGridLayoutChild // out
	var _arg1 C.int                 // out

	_arg0 = (*C.GtkGridLayoutChild)(unsafe.Pointer(c.Native()))
	_arg1 = C.int(span)

	C.gtk_grid_layout_child_set_row_span(_arg0, _arg1)
}
