// Code generated by girgen. DO NOT EDIT.

package gtk

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <gtk/gtk.h>
import "C"

// RenderActivity renders an activity indicator (such as in Spinner). The state
// GTK_STATE_FLAG_CHECKED determines whether there is activity going on.
func RenderActivity(context StyleContext, cr *cairo.Context, x float64, y float64, width float64, height float64) {
	var arg1 *C.GtkStyleContext
	var arg2 *C.cairo_t
	var arg3 C.double
	var arg4 C.double
	var arg5 C.double
	var arg6 C.double

	arg1 = (*C.GtkStyleContext)(unsafe.Pointer(context.Native()))
	arg2 = (*C.cairo_t)(unsafe.Pointer(cr.Native()))
	arg3 = C.double(x)
	arg4 = C.double(y)
	arg5 = C.double(width)
	arg6 = C.double(height)

	C.gtk_render_activity(arg1, arg2, arg3, arg4, arg5, arg6)
}

// RenderArrow renders an arrow pointing to @angle.
//
// Typical arrow rendering at 0, 1⁄2 π;, π; and 3⁄2 π:
//
// ! (arrows.png)
func RenderArrow(context StyleContext, cr *cairo.Context, angle float64, x float64, y float64, size float64) {
	var arg1 *C.GtkStyleContext
	var arg2 *C.cairo_t
	var arg3 C.double
	var arg4 C.double
	var arg5 C.double
	var arg6 C.double

	arg1 = (*C.GtkStyleContext)(unsafe.Pointer(context.Native()))
	arg2 = (*C.cairo_t)(unsafe.Pointer(cr.Native()))
	arg3 = C.double(angle)
	arg4 = C.double(x)
	arg5 = C.double(y)
	arg6 = C.double(size)

	C.gtk_render_arrow(arg1, arg2, arg3, arg4, arg5, arg6)
}

// RenderBackground renders the background of an element.
//
// Typical background rendering, showing the effect of `background-image`,
// `border-width` and `border-radius`:
//
// ! (background.png)
func RenderBackground(context StyleContext, cr *cairo.Context, x float64, y float64, width float64, height float64) {
	var arg1 *C.GtkStyleContext
	var arg2 *C.cairo_t
	var arg3 C.double
	var arg4 C.double
	var arg5 C.double
	var arg6 C.double

	arg1 = (*C.GtkStyleContext)(unsafe.Pointer(context.Native()))
	arg2 = (*C.cairo_t)(unsafe.Pointer(cr.Native()))
	arg3 = C.double(x)
	arg4 = C.double(y)
	arg5 = C.double(width)
	arg6 = C.double(height)

	C.gtk_render_background(arg1, arg2, arg3, arg4, arg5, arg6)
}

// RenderCheck renders a checkmark (as in a CheckButton).
//
// The GTK_STATE_FLAG_CHECKED state determines whether the check is on or off,
// and GTK_STATE_FLAG_INCONSISTENT determines whether it should be marked as
// undefined.
//
// Typical checkmark rendering:
//
// ! (checks.png)
func RenderCheck(context StyleContext, cr *cairo.Context, x float64, y float64, width float64, height float64) {
	var arg1 *C.GtkStyleContext
	var arg2 *C.cairo_t
	var arg3 C.double
	var arg4 C.double
	var arg5 C.double
	var arg6 C.double

	arg1 = (*C.GtkStyleContext)(unsafe.Pointer(context.Native()))
	arg2 = (*C.cairo_t)(unsafe.Pointer(cr.Native()))
	arg3 = C.double(x)
	arg4 = C.double(y)
	arg5 = C.double(width)
	arg6 = C.double(height)

	C.gtk_render_check(arg1, arg2, arg3, arg4, arg5, arg6)
}

// RenderExpander renders an expander (as used in TreeView and Expander) in the
// area defined by @x, @y, @width, @height. The state GTK_STATE_FLAG_CHECKED
// determines whether the expander is collapsed or expanded.
//
// Typical expander rendering:
//
// ! (expanders.png)
func RenderExpander(context StyleContext, cr *cairo.Context, x float64, y float64, width float64, height float64) {
	var arg1 *C.GtkStyleContext
	var arg2 *C.cairo_t
	var arg3 C.double
	var arg4 C.double
	var arg5 C.double
	var arg6 C.double

	arg1 = (*C.GtkStyleContext)(unsafe.Pointer(context.Native()))
	arg2 = (*C.cairo_t)(unsafe.Pointer(cr.Native()))
	arg3 = C.double(x)
	arg4 = C.double(y)
	arg5 = C.double(width)
	arg6 = C.double(height)

	C.gtk_render_expander(arg1, arg2, arg3, arg4, arg5, arg6)
}

// RenderFocus renders a focus indicator on the rectangle determined by @x, @y,
// @width, @height.
//
// Typical focus rendering:
//
// ! (focus.png)
func RenderFocus(context StyleContext, cr *cairo.Context, x float64, y float64, width float64, height float64) {
	var arg1 *C.GtkStyleContext
	var arg2 *C.cairo_t
	var arg3 C.double
	var arg4 C.double
	var arg5 C.double
	var arg6 C.double

	arg1 = (*C.GtkStyleContext)(unsafe.Pointer(context.Native()))
	arg2 = (*C.cairo_t)(unsafe.Pointer(cr.Native()))
	arg3 = C.double(x)
	arg4 = C.double(y)
	arg5 = C.double(width)
	arg6 = C.double(height)

	C.gtk_render_focus(arg1, arg2, arg3, arg4, arg5, arg6)
}

// RenderFrame renders a frame around the rectangle defined by @x, @y, @width,
// @height.
//
// Examples of frame rendering, showing the effect of `border-image`,
// `border-color`, `border-width`, `border-radius` and junctions:
//
// ! (frames.png)
func RenderFrame(context StyleContext, cr *cairo.Context, x float64, y float64, width float64, height float64) {
	var arg1 *C.GtkStyleContext
	var arg2 *C.cairo_t
	var arg3 C.double
	var arg4 C.double
	var arg5 C.double
	var arg6 C.double

	arg1 = (*C.GtkStyleContext)(unsafe.Pointer(context.Native()))
	arg2 = (*C.cairo_t)(unsafe.Pointer(cr.Native()))
	arg3 = C.double(x)
	arg4 = C.double(y)
	arg5 = C.double(width)
	arg6 = C.double(height)

	C.gtk_render_frame(arg1, arg2, arg3, arg4, arg5, arg6)
}

// RenderHandle renders a handle (as in Paned and Window’s resize grip), in the
// rectangle determined by @x, @y, @width, @height.
//
// Handles rendered for the paned and grip classes:
//
// ! (handles.png)
func RenderHandle(context StyleContext, cr *cairo.Context, x float64, y float64, width float64, height float64) {
	var arg1 *C.GtkStyleContext
	var arg2 *C.cairo_t
	var arg3 C.double
	var arg4 C.double
	var arg5 C.double
	var arg6 C.double

	arg1 = (*C.GtkStyleContext)(unsafe.Pointer(context.Native()))
	arg2 = (*C.cairo_t)(unsafe.Pointer(cr.Native()))
	arg3 = C.double(x)
	arg4 = C.double(y)
	arg5 = C.double(width)
	arg6 = C.double(height)

	C.gtk_render_handle(arg1, arg2, arg3, arg4, arg5, arg6)
}

// RenderIcon renders the icon in @texture at the specified @x and @y
// coordinates.
//
// This function will render the icon in @texture at exactly its size,
// regardless of scaling factors, which may not be appropriate when drawing on
// displays with high pixel densities.
func RenderIcon(context StyleContext, cr *cairo.Context, texture gdk.Texture, x float64, y float64) {
	var arg1 *C.GtkStyleContext
	var arg2 *C.cairo_t
	var arg3 *C.GdkTexture
	var arg4 C.double
	var arg5 C.double

	arg1 = (*C.GtkStyleContext)(unsafe.Pointer(context.Native()))
	arg2 = (*C.cairo_t)(unsafe.Pointer(cr.Native()))
	arg3 = (*C.GdkTexture)(unsafe.Pointer(texture.Native()))
	arg4 = C.double(x)
	arg5 = C.double(y)

	C.gtk_render_icon(arg1, arg2, arg3, arg4, arg5)
}

// RenderLayout renders @layout on the coordinates @x, @y
func RenderLayout(context StyleContext, cr *cairo.Context, x float64, y float64, layout pango.Layout) {
	var arg1 *C.GtkStyleContext
	var arg2 *C.cairo_t
	var arg3 C.double
	var arg4 C.double
	var arg5 *C.PangoLayout

	arg1 = (*C.GtkStyleContext)(unsafe.Pointer(context.Native()))
	arg2 = (*C.cairo_t)(unsafe.Pointer(cr.Native()))
	arg3 = C.double(x)
	arg4 = C.double(y)
	arg5 = (*C.PangoLayout)(unsafe.Pointer(layout.Native()))

	C.gtk_render_layout(arg1, arg2, arg3, arg4, arg5)
}

// RenderLine renders a line from (x0, y0) to (x1, y1).
func RenderLine(context StyleContext, cr *cairo.Context, x0 float64, y0 float64, x1 float64, y1 float64) {
	var arg1 *C.GtkStyleContext
	var arg2 *C.cairo_t
	var arg3 C.double
	var arg4 C.double
	var arg5 C.double
	var arg6 C.double

	arg1 = (*C.GtkStyleContext)(unsafe.Pointer(context.Native()))
	arg2 = (*C.cairo_t)(unsafe.Pointer(cr.Native()))
	arg3 = C.double(x0)
	arg4 = C.double(y0)
	arg5 = C.double(x1)
	arg6 = C.double(y1)

	C.gtk_render_line(arg1, arg2, arg3, arg4, arg5, arg6)
}

// RenderOption renders an option mark (as in a radio button), the
// GTK_STATE_FLAG_CHECKED state will determine whether the option is on or off,
// and GTK_STATE_FLAG_INCONSISTENT whether it should be marked as undefined.
//
// Typical option mark rendering:
//
// ! (options.png)
func RenderOption(context StyleContext, cr *cairo.Context, x float64, y float64, width float64, height float64) {
	var arg1 *C.GtkStyleContext
	var arg2 *C.cairo_t
	var arg3 C.double
	var arg4 C.double
	var arg5 C.double
	var arg6 C.double

	arg1 = (*C.GtkStyleContext)(unsafe.Pointer(context.Native()))
	arg2 = (*C.cairo_t)(unsafe.Pointer(cr.Native()))
	arg3 = C.double(x)
	arg4 = C.double(y)
	arg5 = C.double(width)
	arg6 = C.double(height)

	C.gtk_render_option(arg1, arg2, arg3, arg4, arg5, arg6)
}
