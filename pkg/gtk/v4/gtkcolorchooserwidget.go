// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_color_chooser_widget_get_type()), F: marshalColorChooserWidgeter},
	})
}

// ColorChooserWidgeter describes ColorChooserWidget's methods.
type ColorChooserWidgeter interface {
	privateColorChooserWidget()
}

// ColorChooserWidget: `GtkColorChooserWidget` widget lets the user select a
// color.
//
// By default, the chooser presents a predefined palette of colors, plus a small
// number of settable custom colors. It is also possible to select a different
// color with the single-color editor.
//
// To enter the single-color editing mode, use the context menu of any color of
// the palette, or use the '+' button to add a new custom color.
//
// The chooser automatically remembers the last selection, as well as custom
// colors.
//
// To create a `GtkColorChooserWidget`, use [ctor@Gtk.ColorChooserWidget.new].
//
// To change the initially selected color, use
// [method@Gtk.ColorChooser.set_rgba]. To get the selected color use
// [method@Gtk.ColorChooser.get_rgba].
//
// The `GtkColorChooserWidget` is used in the [class@Gtk.ColorChooserDialog] to
// provide a dialog for selecting colors.
//
//
// CSS names
//
// `GtkColorChooserWidget` has a single CSS node with name colorchooser.
type ColorChooserWidget struct {
	Widget

	ColorChooser
}

var (
	_ ColorChooserWidgeter = (*ColorChooserWidget)(nil)
	_ gextras.Nativer      = (*ColorChooserWidget)(nil)
)

func wrapColorChooserWidget(obj *externglib.Object) ColorChooserWidgeter {
	return &ColorChooserWidget{
		Widget: Widget{
			InitiallyUnowned: externglib.InitiallyUnowned{
				Object: obj,
			},
			Accessible: Accessible{
				Object: obj,
			},
			Buildable: Buildable{
				Object: obj,
			},
			ConstraintTarget: ConstraintTarget{
				Object: obj,
			},
		},
		ColorChooser: ColorChooser{
			Object: obj,
		},
	}
}

func marshalColorChooserWidgeter(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapColorChooserWidget(obj), nil
}

// NewColorChooserWidget creates a new `GtkColorChooserWidget`.
func NewColorChooserWidget() *ColorChooserWidget {
	var _cret *C.GtkWidget // in

	_cret = C.gtk_color_chooser_widget_new()

	var _colorChooserWidget *ColorChooserWidget // out

	_colorChooserWidget = (gextras.CastObject(externglib.Take(unsafe.Pointer(_cret)))).(*ColorChooserWidget)

	return _colorChooserWidget
}

// Native implements gextras.Nativer. It returns the underlying GObject
// field.
func (v *ColorChooserWidget) Native() uintptr {
	return v.Widget.InitiallyUnowned.Object.Native()
}

func (*ColorChooserWidget) privateColorChooserWidget() {}
