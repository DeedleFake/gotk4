// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: glib-2.0 gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_color_chooser_widget_get_type()), F: marshalColorChooserWidget},
	})
}

// ColorChooserWidget: the `GtkColorChooserWidget` widget lets the user select a
// color.
//
// By default, the chooser presents a predefined palette of colors, plus a small
// number of settable custom colors. It is also possible to select a different
// color with the single-color editor.
//
// To enter the single-color editing mode, use the context menu of any color of
// the palette, or use the '+' button to add a new custom color.
//
// The chooser automatically remembers the last selection, as well as custom
// colors.
//
// To create a `GtkColorChooserWidget`, use [ctor@Gtk.ColorChooserWidget.new].
//
// To change the initially selected color, use
// [method@Gtk.ColorChooser.set_rgba]. To get the selected color use
// [method@Gtk.ColorChooser.get_rgba].
//
// The `GtkColorChooserWidget` is used in the [class@Gtk.ColorChooserDialog] to
// provide a dialog for selecting colors.
//
//
// CSS names
//
// `GtkColorChooserWidget` has a single CSS node with name colorchooser.
type ColorChooserWidget interface {
	Widget
	Accessible
	Buildable
	ColorChooser
	ConstraintTarget
}

// colorChooserWidget implements the ColorChooserWidget class.
type colorChooserWidget struct {
	Widget
	Accessible
	Buildable
	ColorChooser
	ConstraintTarget
}

var _ ColorChooserWidget = (*colorChooserWidget)(nil)

// WrapColorChooserWidget wraps a GObject to the right type. It is
// primarily used internally.
func WrapColorChooserWidget(obj *externglib.Object) ColorChooserWidget {
	return colorChooserWidget{
		Widget:           WrapWidget(obj),
		Accessible:       WrapAccessible(obj),
		Buildable:        WrapBuildable(obj),
		ColorChooser:     WrapColorChooser(obj),
		ConstraintTarget: WrapConstraintTarget(obj),
	}
}

func marshalColorChooserWidget(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapColorChooserWidget(obj), nil
}

// NewColorChooserWidget constructs a class ColorChooserWidget.
func NewColorChooserWidget() ColorChooserWidget {
	var _cret C.GtkColorChooserWidget // in

	_cret = C.gtk_color_chooser_widget_new()

	var _colorChooserWidget ColorChooserWidget // out

	_colorChooserWidget = WrapColorChooserWidget(externglib.Take(unsafe.Pointer(_cret)))

	return _colorChooserWidget
}
