// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/core/gextras"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_filter_list_model_get_type()), F: marshalFilterListModel},
	})
}

// FilterListModel: `GtkFilterListModel` is a list model that filters the
// elements of the underlying model according to a `GtkFilter`.
//
// It hides some elements from the other model according to criteria given by a
// `GtkFilter`.
//
// The model can be set up to do incremental searching, so that filtering long
// lists doesn't block the UI. See [method@Gtk.FilterListModel.set_incremental]
// for details.
type FilterListModel interface {
	gio.ListModel

	// Filter:
	Filter() Filter
	// Incremental:
	Incremental() bool
	// Model:
	Model() gio.ListModel
	// Pending:
	Pending() uint
	// SetFilterFilterListModel:
	SetFilterFilterListModel(filter Filter)
	// SetIncrementalFilterListModel:
	SetIncrementalFilterListModel(incremental bool)
	// SetModelFilterListModel:
	SetModelFilterListModel(model gio.ListModel)
}

// filterListModel implements the FilterListModel class.
type filterListModel struct {
	gextras.Objector
}

// WrapFilterListModel wraps a GObject to the right type. It is
// primarily used internally.
func WrapFilterListModel(obj *externglib.Object) FilterListModel {
	return filterListModel{
		Objector: obj,
	}
}

func marshalFilterListModel(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapFilterListModel(obj), nil
}

// NewFilterListModel:
func NewFilterListModel(model gio.ListModel, filter Filter) FilterListModel {
	var _arg1 *C.GListModel         // out
	var _arg2 *C.GtkFilter          // out
	var _cret *C.GtkFilterListModel // in

	_arg1 = (*C.GListModel)(unsafe.Pointer(model.Native()))
	_arg2 = (*C.GtkFilter)(unsafe.Pointer(filter.Native()))

	_cret = C.gtk_filter_list_model_new(_arg1, _arg2)

	var _filterListModel FilterListModel // out

	_filterListModel = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(FilterListModel)

	return _filterListModel
}

func (s filterListModel) Filter() Filter {
	var _arg0 *C.GtkFilterListModel // out
	var _cret *C.GtkFilter          // in

	_arg0 = (*C.GtkFilterListModel)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_filter_list_model_get_filter(_arg0)

	var _filter Filter // out

	_filter = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Filter)

	return _filter
}

func (s filterListModel) Incremental() bool {
	var _arg0 *C.GtkFilterListModel // out
	var _cret C.gboolean            // in

	_arg0 = (*C.GtkFilterListModel)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_filter_list_model_get_incremental(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (s filterListModel) Model() gio.ListModel {
	var _arg0 *C.GtkFilterListModel // out
	var _cret *C.GListModel         // in

	_arg0 = (*C.GtkFilterListModel)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_filter_list_model_get_model(_arg0)

	var _listModel gio.ListModel // out

	_listModel = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(gio.ListModel)

	return _listModel
}

func (s filterListModel) Pending() uint {
	var _arg0 *C.GtkFilterListModel // out
	var _cret C.guint               // in

	_arg0 = (*C.GtkFilterListModel)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_filter_list_model_get_pending(_arg0)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

func (s filterListModel) SetFilterFilterListModel(filter Filter) {
	var _arg0 *C.GtkFilterListModel // out
	var _arg1 *C.GtkFilter          // out

	_arg0 = (*C.GtkFilterListModel)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GtkFilter)(unsafe.Pointer(filter.Native()))

	C.gtk_filter_list_model_set_filter(_arg0, _arg1)
}

func (s filterListModel) SetIncrementalFilterListModel(incremental bool) {
	var _arg0 *C.GtkFilterListModel // out
	var _arg1 C.gboolean            // out

	_arg0 = (*C.GtkFilterListModel)(unsafe.Pointer(s.Native()))
	if incremental {
		_arg1 = C.TRUE
	}

	C.gtk_filter_list_model_set_incremental(_arg0, _arg1)
}

func (s filterListModel) SetModelFilterListModel(model gio.ListModel) {
	var _arg0 *C.GtkFilterListModel // out
	var _arg1 *C.GListModel         // out

	_arg0 = (*C.GtkFilterListModel)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GListModel)(unsafe.Pointer(model.Native()))

	C.gtk_filter_list_model_set_model(_arg0, _arg1)
}

func (l filterListModel) ItemType() externglib.Type {
	return gio.WrapListModel(gextras.InternObject(l)).ItemType()
}

func (l filterListModel) NItems() uint {
	return gio.WrapListModel(gextras.InternObject(l)).NItems()
}

func (l filterListModel) Object(position uint) gextras.Objector {
	return gio.WrapListModel(gextras.InternObject(l)).Object(position)
}

func (l filterListModel) ItemsChanged(position uint, removed uint, added uint) {
	gio.WrapListModel(gextras.InternObject(l)).ItemsChanged(position, removed, added)
}
