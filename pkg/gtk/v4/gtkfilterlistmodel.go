// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"github.com/diamondburned/gotk4/pkg/gio/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_filter_list_model_get_type()), F: marshalFilterListModel},
	})
}

// FilterListModel is a list model that filters a given other listmodel. It
// hides some elements from the other model according to criteria given by a
// Filter.
//
// The model can be set up to do incremental searching, so that filtering long
// lists doesn't block the UI. See gtk_filter_list_model_set_incremental() for
// details.
type FilterListModel interface {
	gextras.Objector
	gio.ListModel

	// Filter gets the Filter currently set on @self.
	Filter(s FilterListModel)
	// Incremental returns whether incremental filtering was enabled via
	// gtk_filter_list_model_set_incremental().
	Incremental(s FilterListModel) bool
	// Model gets the model currently filtered or nil if none.
	Model(s FilterListModel)
	// Pending returns the number of items that have not been filtered yet.
	//
	// You can use this value to check if @self is busy filtering by comparing
	// the return value to 0 or you can compute the percentage of the filter
	// remaining by dividing the return value by the total number of items in
	// the underlying model:
	//
	//    pending = gtk_filter_list_model_get_pending (self);
	//    model = gtk_filter_list_model_get_model (self);
	//    percentage = pending / (double) g_list_model_get_n_items (model);
	//
	// If no filter operation is ongoing - in particular when
	// FilterListModel:incremental is false - this function returns 0.
	Pending(s FilterListModel)
	// SetFilter sets the filter used to filter items.
	SetFilter(s FilterListModel, filter Filter)
	// SetIncremental: when incremental filtering is enabled, the
	// GtkFilterListModel will not run filters immediately, but will instead
	// queue an idle handler that incrementally filters the items and adds them
	// to the list. This of course means that items are not instantly added to
	// the list, but only appear incrementally.
	//
	// When your filter blocks the UI while filtering, you might consider
	// turning this on. Depending on your model and filters, this may become
	// interesting around 10,000 to 100,000 items.
	//
	// By default, incremental filtering is disabled.
	//
	// See gtk_filter_list_model_get_pending() for progress information about an
	// ongoing incremental filtering operation.
	SetIncremental(s FilterListModel, incremental bool)
	// SetModel sets the model to be filtered.
	//
	// Note that GTK makes no effort to ensure that @model conforms to the item
	// type of @self. It assumes that the caller knows what they are doing and
	// have set up an appropriate filter to ensure that item types match.
	SetModel(s FilterListModel, model gio.ListModel)
}

// filterListModel implements the FilterListModel interface.
type filterListModel struct {
	gextras.Objector
	gio.ListModel
}

var _ FilterListModel = (*filterListModel)(nil)

// WrapFilterListModel wraps a GObject to the right type. It is
// primarily used internally.
func WrapFilterListModel(obj *externglib.Object) FilterListModel {
	return FilterListModel{
		Objector:      obj,
		gio.ListModel: gio.WrapListModel(obj),
	}
}

func marshalFilterListModel(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapFilterListModel(obj), nil
}

// NewFilterListModel constructs a class FilterListModel.
func NewFilterListModel(model gio.ListModel, filter Filter) {
	var arg1 *C.GListModel
	var arg2 *C.GtkFilter

	arg1 = (*C.GListModel)(unsafe.Pointer(model.Native()))
	arg2 = (*C.GtkFilter)(unsafe.Pointer(filter.Native()))

	C.gtk_filter_list_model_new(arg1, arg2)
}

// Filter gets the Filter currently set on @self.
func (s filterListModel) Filter(s FilterListModel) {
	var arg0 *C.GtkFilterListModel

	arg0 = (*C.GtkFilterListModel)(unsafe.Pointer(s.Native()))

	C.gtk_filter_list_model_get_filter(arg0)
}

// Incremental returns whether incremental filtering was enabled via
// gtk_filter_list_model_set_incremental().
func (s filterListModel) Incremental(s FilterListModel) bool {
	var arg0 *C.GtkFilterListModel

	arg0 = (*C.GtkFilterListModel)(unsafe.Pointer(s.Native()))

	var cret C.gboolean
	var ok bool

	cret = C.gtk_filter_list_model_get_incremental(arg0)

	if cret {
		ok = true
	}

	return ok
}

// Model gets the model currently filtered or nil if none.
func (s filterListModel) Model(s FilterListModel) {
	var arg0 *C.GtkFilterListModel

	arg0 = (*C.GtkFilterListModel)(unsafe.Pointer(s.Native()))

	C.gtk_filter_list_model_get_model(arg0)
}

// Pending returns the number of items that have not been filtered yet.
//
// You can use this value to check if @self is busy filtering by comparing
// the return value to 0 or you can compute the percentage of the filter
// remaining by dividing the return value by the total number of items in
// the underlying model:
//
//    pending = gtk_filter_list_model_get_pending (self);
//    model = gtk_filter_list_model_get_model (self);
//    percentage = pending / (double) g_list_model_get_n_items (model);
//
// If no filter operation is ongoing - in particular when
// FilterListModel:incremental is false - this function returns 0.
func (s filterListModel) Pending(s FilterListModel) {
	var arg0 *C.GtkFilterListModel

	arg0 = (*C.GtkFilterListModel)(unsafe.Pointer(s.Native()))

	C.gtk_filter_list_model_get_pending(arg0)
}

// SetFilter sets the filter used to filter items.
func (s filterListModel) SetFilter(s FilterListModel, filter Filter) {
	var arg0 *C.GtkFilterListModel
	var arg1 *C.GtkFilter

	arg0 = (*C.GtkFilterListModel)(unsafe.Pointer(s.Native()))
	arg1 = (*C.GtkFilter)(unsafe.Pointer(filter.Native()))

	C.gtk_filter_list_model_set_filter(arg0, arg1)
}

// SetIncremental: when incremental filtering is enabled, the
// GtkFilterListModel will not run filters immediately, but will instead
// queue an idle handler that incrementally filters the items and adds them
// to the list. This of course means that items are not instantly added to
// the list, but only appear incrementally.
//
// When your filter blocks the UI while filtering, you might consider
// turning this on. Depending on your model and filters, this may become
// interesting around 10,000 to 100,000 items.
//
// By default, incremental filtering is disabled.
//
// See gtk_filter_list_model_get_pending() for progress information about an
// ongoing incremental filtering operation.
func (s filterListModel) SetIncremental(s FilterListModel, incremental bool) {
	var arg0 *C.GtkFilterListModel
	var arg1 C.gboolean

	arg0 = (*C.GtkFilterListModel)(unsafe.Pointer(s.Native()))
	if incremental {
		arg1 = C.gboolean(1)
	}

	C.gtk_filter_list_model_set_incremental(arg0, arg1)
}

// SetModel sets the model to be filtered.
//
// Note that GTK makes no effort to ensure that @model conforms to the item
// type of @self. It assumes that the caller knows what they are doing and
// have set up an appropriate filter to ensure that item types match.
func (s filterListModel) SetModel(s FilterListModel, model gio.ListModel) {
	var arg0 *C.GtkFilterListModel
	var arg1 *C.GListModel

	arg0 = (*C.GtkFilterListModel)(unsafe.Pointer(s.Native()))
	arg1 = (*C.GListModel)(unsafe.Pointer(model.Native()))

	C.gtk_filter_list_model_set_model(arg0, arg1)
}
