// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_adjustment_get_type()), F: marshalAdjustment},
	})
}

// Adjustment: `GtkAdjustment` is a model for a numeric value.
//
// The `GtkAdjustment has an associated lower and upper bound. It also contains
// step and page increments, and a page size.
//
// Adjustments are used within several GTK widgets, including
// [class@Gtk.SpinButton], [class@Gtk.Viewport], [class@Gtk.Scrollbar] and
// [class@Gtk.Scale].
//
// The `GtkAdjustment` object does not update the value itself. Instead it is
// left up to the owner of the `GtkAdjustment` to control the value.
type Adjustment interface {
	gextras.Objector

	// ClampPage updates the value property to ensure that the range between
	// @lower and @upper is in the current page.
	//
	// The current page goes from `value` to `value` + `page-size`. If the range
	// is larger than the page size, then only the start of it will be in the
	// current page.
	//
	// A [signal@Gtk.Adjustment::value-changed] signal will be emitted if the
	// value is changed.
	ClampPage(lower float64, upper float64)
	// Configure sets all properties of the adjustment at once.
	//
	// Use this function to avoid multiple emissions of the
	// [signal@Gtk.Adjustment::changed] signal. See
	// [method@Gtk.Adjustment.set_lower] for an alternative way of compressing
	// multiple emissions of [signal@Gtk.Adjustment::changed] into one.
	Configure(value float64, lower float64, upper float64, stepIncrement float64, pageIncrement float64, pageSize float64)
	// Lower retrieves the minimum value of the adjustment.
	Lower() float64
	// MinimumIncrement gets the smaller of step increment and page increment.
	MinimumIncrement() float64
	// PageIncrement retrieves the page increment of the adjustment.
	PageIncrement() float64
	// PageSize retrieves the page size of the adjustment.
	PageSize() float64
	// StepIncrement retrieves the step increment of the adjustment.
	StepIncrement() float64
	// Upper retrieves the maximum value of the adjustment.
	Upper() float64
	// Value gets the current value of the adjustment.
	Value() float64
	// SetLower sets the minimum value of the adjustment.
	//
	// When setting multiple adjustment properties via their individual setters,
	// multiple [signal@Gtk.Adjustment::changed] signals will be emitted.
	// However, since the emission of the [signal@Gtk.Adjustment::changed]
	// signal is tied to the emission of the ::notify signals of the changed
	// properties, itâ€™s possible to compress the
	// [signal@Gtk.Adjustment::changed] signals into one by calling
	// g_object_freeze_notify() and g_object_thaw_notify() around the calls to
	// the individual setters.
	//
	// Alternatively, using a single g_object_set() for all the properties to
	// change, or using [method@Gtk.Adjustment.configure] has the same effect.
	SetLower(lower float64)
	// SetPageIncrement sets the page increment of the adjustment.
	//
	// See [method@Gtk.Adjustment.set_lower] about how to compress multiple
	// emissions of the [signal@Gtk.Adjustment::changed] signal when setting
	// multiple adjustment properties.
	SetPageIncrement(pageIncrement float64)
	// SetPageSize sets the page size of the adjustment.
	//
	// See [method@Gtk.Adjustment.set_lower] about how to compress multiple
	// emissions of the [signal@Gtk.Adjustment::changed] signal when setting
	// multiple adjustment properties.
	SetPageSize(pageSize float64)
	// SetStepIncrement sets the step increment of the adjustment.
	//
	// See [method@Gtk.Adjustment.set_lower] about how to compress multiple
	// emissions of the [signal@Gtk.Adjustment::changed] signal when setting
	// multiple adjustment properties.
	SetStepIncrement(stepIncrement float64)
	// SetUpper sets the maximum value of the adjustment.
	//
	// Note that values will be restricted by `upper - page-size` if the
	// page-size property is nonzero.
	//
	// See [method@Gtk.Adjustment.set_lower] about how to compress multiple
	// emissions of the [signal@Gtk.Adjustment::changed] signal when setting
	// multiple adjustment properties.
	SetUpper(upper float64)
	// SetValue sets the `GtkAdjustment` value.
	//
	// The value is clamped to lie between [property@Gtk.Adjustment:lower] and
	// [property@Gtk.Adjustment:upper].
	//
	// Note that for adjustments which are used in a `GtkScrollbar`, the
	// effective range of allowed values goes from
	// [property@Gtk.Adjustment:lower] to [property@Gtk.Adjustment:upper] -
	// [property@Gtk.Adjustment:page-size].
	SetValue(value float64)
}

// adjustment implements the Adjustment interface.
type adjustment struct {
	gextras.Objector
}

var _ Adjustment = (*adjustment)(nil)

// WrapAdjustment wraps a GObject to the right type. It is
// primarily used internally.
func WrapAdjustment(obj *externglib.Object) Adjustment {
	return Adjustment{
		Objector: obj,
	}
}

func marshalAdjustment(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapAdjustment(obj), nil
}

// NewAdjustment constructs a class Adjustment.
func NewAdjustment(value float64, lower float64, upper float64, stepIncrement float64, pageIncrement float64, pageSize float64) Adjustment {
	var _arg1 C.double
	var _arg2 C.double
	var _arg3 C.double
	var _arg4 C.double
	var _arg5 C.double
	var _arg6 C.double

	_arg1 = C.double(value)
	_arg2 = C.double(lower)
	_arg3 = C.double(upper)
	_arg4 = C.double(stepIncrement)
	_arg5 = C.double(pageIncrement)
	_arg6 = C.double(pageSize)

	var _cret C.GtkAdjustment

	cret = C.gtk_adjustment_new(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6)

	var _adjustment Adjustment

	_adjustment = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret.Native()))).(Adjustment)

	return _adjustment
}

// ClampPage updates the value property to ensure that the range between
// @lower and @upper is in the current page.
//
// The current page goes from `value` to `value` + `page-size`. If the range
// is larger than the page size, then only the start of it will be in the
// current page.
//
// A [signal@Gtk.Adjustment::value-changed] signal will be emitted if the
// value is changed.
func (a adjustment) ClampPage(lower float64, upper float64) {
	var _arg0 *C.GtkAdjustment
	var _arg1 C.double
	var _arg2 C.double

	_arg0 = (*C.GtkAdjustment)(unsafe.Pointer(a.Native()))
	_arg1 = C.double(lower)
	_arg2 = C.double(upper)

	C.gtk_adjustment_clamp_page(_arg0, _arg1, _arg2)
}

// Configure sets all properties of the adjustment at once.
//
// Use this function to avoid multiple emissions of the
// [signal@Gtk.Adjustment::changed] signal. See
// [method@Gtk.Adjustment.set_lower] for an alternative way of compressing
// multiple emissions of [signal@Gtk.Adjustment::changed] into one.
func (a adjustment) Configure(value float64, lower float64, upper float64, stepIncrement float64, pageIncrement float64, pageSize float64) {
	var _arg0 *C.GtkAdjustment
	var _arg1 C.double
	var _arg2 C.double
	var _arg3 C.double
	var _arg4 C.double
	var _arg5 C.double
	var _arg6 C.double

	_arg0 = (*C.GtkAdjustment)(unsafe.Pointer(a.Native()))
	_arg1 = C.double(value)
	_arg2 = C.double(lower)
	_arg3 = C.double(upper)
	_arg4 = C.double(stepIncrement)
	_arg5 = C.double(pageIncrement)
	_arg6 = C.double(pageSize)

	C.gtk_adjustment_configure(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6)
}

// Lower retrieves the minimum value of the adjustment.
func (a adjustment) Lower() float64 {
	var _arg0 *C.GtkAdjustment

	_arg0 = (*C.GtkAdjustment)(unsafe.Pointer(a.Native()))

	var _cret C.double

	cret = C.gtk_adjustment_get_lower(_arg0)

	var _gdouble float64

	_gdouble = (float64)(_cret)

	return _gdouble
}

// MinimumIncrement gets the smaller of step increment and page increment.
func (a adjustment) MinimumIncrement() float64 {
	var _arg0 *C.GtkAdjustment

	_arg0 = (*C.GtkAdjustment)(unsafe.Pointer(a.Native()))

	var _cret C.double

	cret = C.gtk_adjustment_get_minimum_increment(_arg0)

	var _gdouble float64

	_gdouble = (float64)(_cret)

	return _gdouble
}

// PageIncrement retrieves the page increment of the adjustment.
func (a adjustment) PageIncrement() float64 {
	var _arg0 *C.GtkAdjustment

	_arg0 = (*C.GtkAdjustment)(unsafe.Pointer(a.Native()))

	var _cret C.double

	cret = C.gtk_adjustment_get_page_increment(_arg0)

	var _gdouble float64

	_gdouble = (float64)(_cret)

	return _gdouble
}

// PageSize retrieves the page size of the adjustment.
func (a adjustment) PageSize() float64 {
	var _arg0 *C.GtkAdjustment

	_arg0 = (*C.GtkAdjustment)(unsafe.Pointer(a.Native()))

	var _cret C.double

	cret = C.gtk_adjustment_get_page_size(_arg0)

	var _gdouble float64

	_gdouble = (float64)(_cret)

	return _gdouble
}

// StepIncrement retrieves the step increment of the adjustment.
func (a adjustment) StepIncrement() float64 {
	var _arg0 *C.GtkAdjustment

	_arg0 = (*C.GtkAdjustment)(unsafe.Pointer(a.Native()))

	var _cret C.double

	cret = C.gtk_adjustment_get_step_increment(_arg0)

	var _gdouble float64

	_gdouble = (float64)(_cret)

	return _gdouble
}

// Upper retrieves the maximum value of the adjustment.
func (a adjustment) Upper() float64 {
	var _arg0 *C.GtkAdjustment

	_arg0 = (*C.GtkAdjustment)(unsafe.Pointer(a.Native()))

	var _cret C.double

	cret = C.gtk_adjustment_get_upper(_arg0)

	var _gdouble float64

	_gdouble = (float64)(_cret)

	return _gdouble
}

// Value gets the current value of the adjustment.
func (a adjustment) Value() float64 {
	var _arg0 *C.GtkAdjustment

	_arg0 = (*C.GtkAdjustment)(unsafe.Pointer(a.Native()))

	var _cret C.double

	cret = C.gtk_adjustment_get_value(_arg0)

	var _gdouble float64

	_gdouble = (float64)(_cret)

	return _gdouble
}

// SetLower sets the minimum value of the adjustment.
//
// When setting multiple adjustment properties via their individual setters,
// multiple [signal@Gtk.Adjustment::changed] signals will be emitted.
// However, since the emission of the [signal@Gtk.Adjustment::changed]
// signal is tied to the emission of the ::notify signals of the changed
// properties, itâ€™s possible to compress the
// [signal@Gtk.Adjustment::changed] signals into one by calling
// g_object_freeze_notify() and g_object_thaw_notify() around the calls to
// the individual setters.
//
// Alternatively, using a single g_object_set() for all the properties to
// change, or using [method@Gtk.Adjustment.configure] has the same effect.
func (a adjustment) SetLower(lower float64) {
	var _arg0 *C.GtkAdjustment
	var _arg1 C.double

	_arg0 = (*C.GtkAdjustment)(unsafe.Pointer(a.Native()))
	_arg1 = C.double(lower)

	C.gtk_adjustment_set_lower(_arg0, _arg1)
}

// SetPageIncrement sets the page increment of the adjustment.
//
// See [method@Gtk.Adjustment.set_lower] about how to compress multiple
// emissions of the [signal@Gtk.Adjustment::changed] signal when setting
// multiple adjustment properties.
func (a adjustment) SetPageIncrement(pageIncrement float64) {
	var _arg0 *C.GtkAdjustment
	var _arg1 C.double

	_arg0 = (*C.GtkAdjustment)(unsafe.Pointer(a.Native()))
	_arg1 = C.double(pageIncrement)

	C.gtk_adjustment_set_page_increment(_arg0, _arg1)
}

// SetPageSize sets the page size of the adjustment.
//
// See [method@Gtk.Adjustment.set_lower] about how to compress multiple
// emissions of the [signal@Gtk.Adjustment::changed] signal when setting
// multiple adjustment properties.
func (a adjustment) SetPageSize(pageSize float64) {
	var _arg0 *C.GtkAdjustment
	var _arg1 C.double

	_arg0 = (*C.GtkAdjustment)(unsafe.Pointer(a.Native()))
	_arg1 = C.double(pageSize)

	C.gtk_adjustment_set_page_size(_arg0, _arg1)
}

// SetStepIncrement sets the step increment of the adjustment.
//
// See [method@Gtk.Adjustment.set_lower] about how to compress multiple
// emissions of the [signal@Gtk.Adjustment::changed] signal when setting
// multiple adjustment properties.
func (a adjustment) SetStepIncrement(stepIncrement float64) {
	var _arg0 *C.GtkAdjustment
	var _arg1 C.double

	_arg0 = (*C.GtkAdjustment)(unsafe.Pointer(a.Native()))
	_arg1 = C.double(stepIncrement)

	C.gtk_adjustment_set_step_increment(_arg0, _arg1)
}

// SetUpper sets the maximum value of the adjustment.
//
// Note that values will be restricted by `upper - page-size` if the
// page-size property is nonzero.
//
// See [method@Gtk.Adjustment.set_lower] about how to compress multiple
// emissions of the [signal@Gtk.Adjustment::changed] signal when setting
// multiple adjustment properties.
func (a adjustment) SetUpper(upper float64) {
	var _arg0 *C.GtkAdjustment
	var _arg1 C.double

	_arg0 = (*C.GtkAdjustment)(unsafe.Pointer(a.Native()))
	_arg1 = C.double(upper)

	C.gtk_adjustment_set_upper(_arg0, _arg1)
}

// SetValue sets the `GtkAdjustment` value.
//
// The value is clamped to lie between [property@Gtk.Adjustment:lower] and
// [property@Gtk.Adjustment:upper].
//
// Note that for adjustments which are used in a `GtkScrollbar`, the
// effective range of allowed values goes from
// [property@Gtk.Adjustment:lower] to [property@Gtk.Adjustment:upper] -
// [property@Gtk.Adjustment:page-size].
func (a adjustment) SetValue(value float64) {
	var _arg0 *C.GtkAdjustment
	var _arg1 C.double

	_arg0 = (*C.GtkAdjustment)(unsafe.Pointer(a.Native()))
	_arg1 = C.double(value)

	C.gtk_adjustment_set_value(_arg0, _arg1)
}
