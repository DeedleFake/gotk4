// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/glib/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_css_section_get_type()), F: marshalCSSSection},
	})
}

// CSSSection defines a part of a CSS document.
//
// Because sections are nested into one another, you can use
// gtk_css_section_get_parent() to get the containing region.
type CSSSection struct {
	native C.GtkCssSection
}

// WrapCSSSection wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapCSSSection(ptr unsafe.Pointer) *CSSSection {
	if ptr == nil {
		return nil
	}

	return (*CSSSection)(ptr)
}

func marshalCSSSection(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapCSSSection(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (c *CSSSection) Native() unsafe.Pointer {
	return unsafe.Pointer(&c.native)
}

// Print prints the `section` into `string` in a human-readable form.
//
// This is a form like `gtk.css:32:1-23` to denote line 32, characters 1 to 23
// in the file `gtk.css`.
func (s *CSSSection) Print(string *glib.String) {
	var _arg0 *C.GtkCssSection
	var _arg1 *C.GString

	_arg0 = (*C.GtkCssSection)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GString)(unsafe.Pointer(string.Native()))

	C.gtk_css_section_print(_arg0, _arg1)
}

// String prints the section into a human-readable text form using
// [method@Gtk.CssSection.print].
func (s *CSSSection) String() string {
	var _arg0 *C.GtkCssSection

	_arg0 = (*C.GtkCssSection)(unsafe.Pointer(s.Native()))

	var _cret *C.char

	_cret = C.gtk_css_section_to_string(_arg0)

	var _utf8 string

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Unref decrements the reference count on `section`, freeing the structure if
// the reference count reaches 0.
func (s *CSSSection) Unref() {
	var _arg0 *C.GtkCssSection

	_arg0 = (*C.GtkCssSection)(unsafe.Pointer(s.Native()))

	C.gtk_css_section_unref(_arg0)
}
