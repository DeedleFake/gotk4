// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_bool_filter_get_type()), F: marshalBoolFilter},
	})
}

// BoolFilter: `GtkBoolFilter` evaluates a boolean `GtkExpression` to determine
// whether to include items.
type BoolFilter interface {
	Filter

	Expression() Expression

	Invert() bool

	SetExpressionBoolFilter(expression Expression)

	SetInvertBoolFilter(invert bool)
}

// boolFilter implements the BoolFilter class.
type boolFilter struct {
	Filter
}

// WrapBoolFilter wraps a GObject to the right type. It is
// primarily used internally.
func WrapBoolFilter(obj *externglib.Object) BoolFilter {
	return boolFilter{
		Filter: WrapFilter(obj),
	}
}

func marshalBoolFilter(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapBoolFilter(obj), nil
}

func NewBoolFilter(expression Expression) BoolFilter {
	var _arg1 *C.GtkExpression // out
	var _cret *C.GtkBoolFilter // in

	_arg1 = (*C.GtkExpression)(unsafe.Pointer(expression.Native()))

	_cret = C.gtk_bool_filter_new(_arg1)

	var _boolFilter BoolFilter // out

	_boolFilter = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(BoolFilter)

	return _boolFilter
}

func (s boolFilter) Expression() Expression {
	var _arg0 *C.GtkBoolFilter // out
	var _cret *C.GtkExpression // in

	_arg0 = (*C.GtkBoolFilter)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_bool_filter_get_expression(_arg0)

	var _expression Expression // out

	_expression = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Expression)

	return _expression
}

func (s boolFilter) Invert() bool {
	var _arg0 *C.GtkBoolFilter // out
	var _cret C.gboolean       // in

	_arg0 = (*C.GtkBoolFilter)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_bool_filter_get_invert(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (s boolFilter) SetExpressionBoolFilter(expression Expression) {
	var _arg0 *C.GtkBoolFilter // out
	var _arg1 *C.GtkExpression // out

	_arg0 = (*C.GtkBoolFilter)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GtkExpression)(unsafe.Pointer(expression.Native()))

	C.gtk_bool_filter_set_expression(_arg0, _arg1)
}

func (s boolFilter) SetInvertBoolFilter(invert bool) {
	var _arg0 *C.GtkBoolFilter // out
	var _arg1 C.gboolean       // out

	_arg0 = (*C.GtkBoolFilter)(unsafe.Pointer(s.Native()))
	if invert {
		_arg1 = C.TRUE
	}

	C.gtk_bool_filter_set_invert(_arg0, _arg1)
}
