// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: glib-2.0 gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_bool_filter_get_type()), F: marshalBoolFilter},
	})
}

// BoolFilter: `GtkBoolFilter` evaluates a boolean `GtkExpression` to determine
// whether to include items.
type BoolFilter interface {
	Filter

	// Invert returns whether the filter inverts the expression.
	Invert() bool
	// SetExpression sets the expression that the filter uses to check if items
	// should be filtered.
	//
	// The expression must have a value type of G_TYPE_BOOLEAN.
	SetExpression(expression Expression)
	// SetInvert sets whether the filter should invert the expression.
	SetInvert(invert bool)
}

// boolFilter implements the BoolFilter class.
type boolFilter struct {
	Filter
}

var _ BoolFilter = (*boolFilter)(nil)

// WrapBoolFilter wraps a GObject to the right type. It is
// primarily used internally.
func WrapBoolFilter(obj *externglib.Object) BoolFilter {
	return boolFilter{
		Filter: WrapFilter(obj),
	}
}

func marshalBoolFilter(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapBoolFilter(obj), nil
}

// Invert returns whether the filter inverts the expression.
func (s boolFilter) Invert() bool {
	var _arg0 *C.GtkBoolFilter // out

	_arg0 = (*C.GtkBoolFilter)(unsafe.Pointer(s.Native()))

	var _cret C.gboolean // in

	_cret = C.gtk_bool_filter_get_invert(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetExpression sets the expression that the filter uses to check if items
// should be filtered.
//
// The expression must have a value type of G_TYPE_BOOLEAN.
func (s boolFilter) SetExpression(expression Expression) {
	var _arg0 *C.GtkBoolFilter // out
	var _arg1 *C.GtkExpression // out

	_arg0 = (*C.GtkBoolFilter)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GtkExpression)(unsafe.Pointer(expression.Native()))

	C.gtk_bool_filter_set_expression(_arg0, _arg1)
}

// SetInvert sets whether the filter should invert the expression.
func (s boolFilter) SetInvert(invert bool) {
	var _arg0 *C.GtkBoolFilter // out
	var _arg1 C.gboolean       // out

	_arg0 = (*C.GtkBoolFilter)(unsafe.Pointer(s.Native()))
	if invert {
		_arg1 = C.TRUE
	}

	C.gtk_bool_filter_set_invert(_arg0, _arg1)
}
