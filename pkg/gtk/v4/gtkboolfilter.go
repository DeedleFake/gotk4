// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <stdbool.h>
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_bool_filter_get_type()), F: marshalBoolFilter},
	})
}

// BoolFilter: gtkBoolFilter is a simple filter that takes a boolean Expression
// to determine whether to include items.
type BoolFilter interface {
	Filter

	// Expression gets the expression that the filter uses to evaluate if an
	// item should be filtered.
	Expression() Expression
	// Invert returns whether the filter inverts the expression.
	Invert() bool
	// SetExpression sets the expression that the filter uses to check if items
	// should be filtered. The expression must have a value type of
	// TYPE_BOOLEAN.
	SetExpression(expression Expression)
	// SetInvert sets whether the filter should invert the expression.
	SetInvert(invert bool)
}

// boolFilter implements the BoolFilter interface.
type boolFilter struct {
	Filter
}

var _ BoolFilter = (*boolFilter)(nil)

// WrapBoolFilter wraps a GObject to the right type. It is
// primarily used internally.
func WrapBoolFilter(obj *externglib.Object) BoolFilter {
	return BoolFilter{
		Filter: WrapFilter(obj),
	}
}

func marshalBoolFilter(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapBoolFilter(obj), nil
}

// NewBoolFilter constructs a class BoolFilter.
func NewBoolFilter(expression Expression) BoolFilter {
	var arg1 *C.GtkExpression

	arg1 = (*C.GtkExpression)(unsafe.Pointer(expression.Native()))

	var cret C.GtkBoolFilter
	var ret1 BoolFilter

	cret = C.gtk_bool_filter_new(expression)

	ret1 = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(cret.Native()))).(BoolFilter)

	return ret1
}

// Expression gets the expression that the filter uses to evaluate if an
// item should be filtered.
func (s boolFilter) Expression() Expression {
	var arg0 *C.GtkBoolFilter

	arg0 = (*C.GtkBoolFilter)(unsafe.Pointer(s.Native()))

	var cret *C.GtkExpression
	var ret1 Expression

	cret = C.gtk_bool_filter_get_expression(arg0)

	ret1 = gextras.CastObject(externglib.Take(unsafe.Pointer(cret.Native()))).(Expression)

	return ret1
}

// Invert returns whether the filter inverts the expression.
func (s boolFilter) Invert() bool {
	var arg0 *C.GtkBoolFilter

	arg0 = (*C.GtkBoolFilter)(unsafe.Pointer(s.Native()))

	var cret C.gboolean
	var ret1 bool

	cret = C.gtk_bool_filter_get_invert(arg0)

	ret1 = C.bool(cret) != C.false

	return ret1
}

// SetExpression sets the expression that the filter uses to check if items
// should be filtered. The expression must have a value type of
// TYPE_BOOLEAN.
func (s boolFilter) SetExpression(expression Expression) {
	var arg0 *C.GtkBoolFilter
	var arg1 *C.GtkExpression

	arg0 = (*C.GtkBoolFilter)(unsafe.Pointer(s.Native()))
	arg1 = (*C.GtkExpression)(unsafe.Pointer(expression.Native()))

	C.gtk_bool_filter_set_expression(arg0, expression)
}

// SetInvert sets whether the filter should invert the expression.
func (s boolFilter) SetInvert(invert bool) {
	var arg0 *C.GtkBoolFilter
	var arg1 C.gboolean

	arg0 = (*C.GtkBoolFilter)(unsafe.Pointer(s.Native()))
	if invert {
		arg1 = C.gboolean(1)
	}

	C.gtk_bool_filter_set_invert(arg0, invert)
}
