// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_bool_filter_get_type()), F: marshalBoolFilter},
	})
}

// BoolFilter: `GtkBoolFilter` evaluates a boolean `GtkExpression` to determine
// whether to include items.
type BoolFilter interface {
	gextras.Objector

	// AsFilter casts the class to the Filter interface.
	AsFilter() Filter

	// Changed emits the Filter::changed signal to notify all users of the
	// filter that the filter changed. Users of the filter should then check
	// items again via gtk_filter_match().
	//
	// Depending on the @change parameter, not all items need to be changed, but
	// only some. Refer to the FilterChange documentation for details.
	//
	// This function is intended for implementors of Filter subclasses and
	// should not be called from other functions.
	//
	// This method is inherited from Filter
	Changed(change FilterChange)
	// GetStrictness gets the known strictness of @filters. If the strictness is
	// not known, GTK_FILTER_MATCH_SOME is returned.
	//
	// This value may change after emission of the Filter::changed signal.
	//
	// This function is meant purely for optimization purposes, filters can
	// choose to omit implementing it, but FilterListModel uses it.
	//
	// This method is inherited from Filter
	GetStrictness() FilterMatch
	// Match checks if the given @item is matched by the filter or not.
	//
	// This method is inherited from Filter
	Match(item gextras.Objector) bool

	// Expression gets the expression that the filter uses to evaluate if an
	// item should be filtered.
	Expression() Expression
	// Invert returns whether the filter inverts the expression.
	Invert() bool
	// SetExpression sets the expression that the filter uses to check if items
	// should be filtered.
	//
	// The expression must have a value type of G_TYPE_BOOLEAN.
	SetExpression(expression Expression)
	// SetInvert sets whether the filter should invert the expression.
	SetInvert(invert bool)
}

// boolFilter implements the BoolFilter interface.
type boolFilter struct {
	*externglib.Object
}

var _ BoolFilter = (*boolFilter)(nil)

// WrapBoolFilter wraps a GObject to a type that implements
// interface BoolFilter. It is primarily used internally.
func WrapBoolFilter(obj *externglib.Object) BoolFilter {
	return boolFilter{obj}
}

func marshalBoolFilter(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapBoolFilter(obj), nil
}

// NewBoolFilter creates a new bool filter.
func NewBoolFilter(expression Expression) BoolFilter {
	var _arg1 *C.GtkExpression // out
	var _cret *C.GtkBoolFilter // in

	_arg1 = (*C.GtkExpression)(unsafe.Pointer(expression.Native()))

	_cret = C.gtk_bool_filter_new(_arg1)

	var _boolFilter BoolFilter // out

	_boolFilter = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(BoolFilter)

	return _boolFilter
}

func (b boolFilter) AsFilter() Filter {
	return WrapFilter(gextras.InternObject(b))
}

func (s boolFilter) Changed(change FilterChange) {
	WrapFilter(gextras.InternObject(s)).Changed(change)
}

func (s boolFilter) GetStrictness() FilterMatch {
	return WrapFilter(gextras.InternObject(s)).GetStrictness()
}

func (s boolFilter) Match(item gextras.Objector) bool {
	return WrapFilter(gextras.InternObject(s)).Match(item)
}

func (s boolFilter) Expression() Expression {
	var _arg0 *C.GtkBoolFilter // out
	var _cret *C.GtkExpression // in

	_arg0 = (*C.GtkBoolFilter)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_bool_filter_get_expression(_arg0)

	var _expression Expression // out

	_expression = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Expression)

	return _expression
}

func (s boolFilter) Invert() bool {
	var _arg0 *C.GtkBoolFilter // out
	var _cret C.gboolean       // in

	_arg0 = (*C.GtkBoolFilter)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_bool_filter_get_invert(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (s boolFilter) SetExpression(expression Expression) {
	var _arg0 *C.GtkBoolFilter // out
	var _arg1 *C.GtkExpression // out

	_arg0 = (*C.GtkBoolFilter)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GtkExpression)(unsafe.Pointer(expression.Native()))

	C.gtk_bool_filter_set_expression(_arg0, _arg1)
}

func (s boolFilter) SetInvert(invert bool) {
	var _arg0 *C.GtkBoolFilter // out
	var _arg1 C.gboolean       // out

	_arg0 = (*C.GtkBoolFilter)(unsafe.Pointer(s.Native()))
	if invert {
		_arg1 = C.TRUE
	}

	C.gtk_bool_filter_set_invert(_arg0, _arg1)
}
