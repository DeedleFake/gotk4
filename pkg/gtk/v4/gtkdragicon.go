// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_drag_icon_get_type()), F: marshalDragIcon},
	})
}

// DragIcon: `GtkDragIcon` is a `GtkRoot` implementation for drag icons.
//
// A drag icon moves with the pointer during a Drag-and-Drop operation and is
// destroyed when the drag ends.
//
// To set up a drag icon and associate it with an ongoing drag operation, use
// [func@Gtk.DragIcon.get_for_drag] to get the icon for a drag. You can then use
// it like any other widget and use [method@Gtk.DragIcon.set_child] to set
// whatever widget should be used for the drag icon.
//
// Keep in mind that drag icons do not allow user input.
type DragIcon interface {
	Widget

	// AsAccessible casts the class to the Accessible interface.
	AsAccessible() Accessible
	// AsBuildable casts the class to the Buildable interface.
	AsBuildable() Buildable
	// AsConstraintTarget casts the class to the ConstraintTarget interface.
	AsConstraintTarget() ConstraintTarget
	// AsNative casts the class to the Native interface.
	AsNative() Native
	// AsRoot casts the class to the Root interface.
	AsRoot() Root

	// Child gets the widget currently used as drag icon.
	Child() Widget
	// SetChildDragIcon sets the widget to display as the drag icon.
	SetChildDragIcon(child Widget)
}

// dragIcon implements the DragIcon class.
type dragIcon struct {
	Widget
}

// WrapDragIcon wraps a GObject to the right type. It is
// primarily used internally.
func WrapDragIcon(obj *externglib.Object) DragIcon {
	return dragIcon{
		Widget: WrapWidget(obj),
	}
}

func marshalDragIcon(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapDragIcon(obj), nil
}

func (s dragIcon) Child() Widget {
	var _arg0 *C.GtkDragIcon // out
	var _cret *C.GtkWidget   // in

	_arg0 = (*C.GtkDragIcon)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_drag_icon_get_child(_arg0)

	var _widget Widget // out

	_widget = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Widget)

	return _widget
}

func (s dragIcon) SetChildDragIcon(child Widget) {
	var _arg0 *C.GtkDragIcon // out
	var _arg1 *C.GtkWidget   // out

	_arg0 = (*C.GtkDragIcon)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(child.Native()))

	C.gtk_drag_icon_set_child(_arg0, _arg1)
}

func (d dragIcon) AsAccessible() Accessible {
	return WrapAccessible(gextras.InternObject(d))
}

func (d dragIcon) AsBuildable() Buildable {
	return WrapBuildable(gextras.InternObject(d))
}

func (d dragIcon) AsConstraintTarget() ConstraintTarget {
	return WrapConstraintTarget(gextras.InternObject(d))
}

func (d dragIcon) AsNative() Native {
	return WrapNative(gextras.InternObject(d))
}

func (d dragIcon) AsRoot() Root {
	return WrapRoot(gextras.InternObject(d))
}
