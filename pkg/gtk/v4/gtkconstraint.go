// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_constraint_target_get_type()), F: marshalConstraintTarget},
		{T: externglib.Type(C.gtk_constraint_get_type()), F: marshalConstraint},
	})
}

// ConstraintTarget: the `GtkConstraintTarget` interface is implemented by
// objects that can be used as source or target in `GtkConstraint`s.
//
// Besides `GtkWidget`, it is also implemented by `GtkConstraintGuide`.
type ConstraintTarget interface {
	gextras.Objector
}

// constraintTarget implements the ConstraintTarget interface.
type constraintTarget struct {
	gextras.Objector
}

var _ ConstraintTarget = (*constraintTarget)(nil)

// WrapConstraintTarget wraps a GObject to a type that implements interface
// ConstraintTarget. It is primarily used internally.
func WrapConstraintTarget(obj *externglib.Object) ConstraintTarget {
	return ConstraintTarget{
		Objector: obj,
	}
}

func marshalConstraintTarget(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapConstraintTarget(obj), nil
}

// Constraint: `GtkConstraint` describes a constraint between attributes of two
// widgets, expressed as a linear equation.
//
// The typical equation for a constraint is:
//
// “` target.target_attr = source.source_attr × multiplier + constant “`
//
// Each `GtkConstraint` is part of a system that will be solved by a
// [class@Gtk.ConstraintLayout] in order to allocate and position each child
// widget or guide.
//
// The source and target, as well as their attributes, of a `GtkConstraint`
// instance are immutable after creation.
type Constraint interface {
	gextras.Objector

	// Constant retrieves the constant factor added to the source attributes'
	// value.
	Constant() float64
	// Multiplier retrieves the multiplication factor applied to the source
	// attribute's value.
	Multiplier() float64
	// Relation: the order relation between the terms of the constraint.
	Relation() ConstraintRelation
	// Source retrieves the [iface@Gtk.ConstraintTarget] used as the source for
	// the constraint.
	//
	// If the source is set to `NULL` at creation, the constraint will use the
	// widget using the [class@Gtk.ConstraintLayout] as the source.
	Source() ConstraintTarget
	// SourceAttribute retrieves the attribute of the source to be read by the
	// constraint.
	SourceAttribute() ConstraintAttribute
	// Strength retrieves the strength of the constraint.
	Strength() int
	// Target retrieves the [iface@Gtk.ConstraintTarget] used as the target for
	// the constraint.
	//
	// If the targe is set to `NULL` at creation, the constraint will use the
	// widget using the [class@Gtk.ConstraintLayout] as the target.
	Target() ConstraintTarget
	// TargetAttribute retrieves the attribute of the target to be set by the
	// constraint.
	TargetAttribute() ConstraintAttribute
	// IsAttached checks whether the constraint is attached to a
	// [class@Gtk.ConstraintLayout], and it is contributing to the layout.
	IsAttached() bool
	// IsConstant checks whether the constraint describes a relation between an
	// attribute on the [property@Gtk.Constraint:target] and a constant value.
	IsConstant() bool
	// IsRequired checks whether the constraint is a required relation for
	// solving the constraint layout.
	IsRequired() bool
}

// constraint implements the Constraint interface.
type constraint struct {
	gextras.Objector
}

var _ Constraint = (*constraint)(nil)

// WrapConstraint wraps a GObject to the right type. It is
// primarily used internally.
func WrapConstraint(obj *externglib.Object) Constraint {
	return Constraint{
		Objector: obj,
	}
}

func marshalConstraint(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapConstraint(obj), nil
}

// NewConstraint constructs a class Constraint.
func NewConstraint(target ConstraintTarget, targetAttribute ConstraintAttribute, relation ConstraintRelation, source ConstraintTarget, sourceAttribute ConstraintAttribute, multiplier float64, constant float64, strength int) Constraint {
	var arg1 C.gpointer
	var arg2 C.GtkConstraintAttribute
	var arg3 C.GtkConstraintRelation
	var arg4 C.gpointer
	var arg5 C.GtkConstraintAttribute
	var arg6 C.double
	var arg7 C.double
	var arg8 C.int

	arg1 = (C.gpointer)(unsafe.Pointer(target.Native()))
	arg2 = (C.GtkConstraintAttribute)(targetAttribute)
	arg3 = (C.GtkConstraintRelation)(relation)
	arg4 = (C.gpointer)(unsafe.Pointer(source.Native()))
	arg5 = (C.GtkConstraintAttribute)(sourceAttribute)
	arg6 = C.double(multiplier)
	arg7 = C.double(constant)
	arg8 = C.int(strength)

	cret := new(C.GtkConstraint)
	var goret Constraint

	cret = C.gtk_constraint_new(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)

	goret = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(cret.Native()))).(Constraint)

	return goret
}

// NewConstraintConstant constructs a class Constraint.
func NewConstraintConstant(target ConstraintTarget, targetAttribute ConstraintAttribute, relation ConstraintRelation, constant float64, strength int) Constraint {
	var arg1 C.gpointer
	var arg2 C.GtkConstraintAttribute
	var arg3 C.GtkConstraintRelation
	var arg4 C.double
	var arg5 C.int

	arg1 = (C.gpointer)(unsafe.Pointer(target.Native()))
	arg2 = (C.GtkConstraintAttribute)(targetAttribute)
	arg3 = (C.GtkConstraintRelation)(relation)
	arg4 = C.double(constant)
	arg5 = C.int(strength)

	cret := new(C.GtkConstraint)
	var goret Constraint

	cret = C.gtk_constraint_new_constant(arg1, arg2, arg3, arg4, arg5)

	goret = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(cret.Native()))).(Constraint)

	return goret
}

// Constant retrieves the constant factor added to the source attributes'
// value.
func (c constraint) Constant() float64 {
	var arg0 *C.GtkConstraint

	arg0 = (*C.GtkConstraint)(unsafe.Pointer(c.Native()))

	var cret C.double
	var goret float64

	cret = C.gtk_constraint_get_constant(arg0)

	goret = float64(cret)

	return goret
}

// Multiplier retrieves the multiplication factor applied to the source
// attribute's value.
func (c constraint) Multiplier() float64 {
	var arg0 *C.GtkConstraint

	arg0 = (*C.GtkConstraint)(unsafe.Pointer(c.Native()))

	var cret C.double
	var goret float64

	cret = C.gtk_constraint_get_multiplier(arg0)

	goret = float64(cret)

	return goret
}

// Relation: the order relation between the terms of the constraint.
func (c constraint) Relation() ConstraintRelation {
	var arg0 *C.GtkConstraint

	arg0 = (*C.GtkConstraint)(unsafe.Pointer(c.Native()))

	var cret C.GtkConstraintRelation
	var goret ConstraintRelation

	cret = C.gtk_constraint_get_relation(arg0)

	goret = ConstraintRelation(cret)

	return goret
}

// Source retrieves the [iface@Gtk.ConstraintTarget] used as the source for
// the constraint.
//
// If the source is set to `NULL` at creation, the constraint will use the
// widget using the [class@Gtk.ConstraintLayout] as the source.
func (c constraint) Source() ConstraintTarget {
	var arg0 *C.GtkConstraint

	arg0 = (*C.GtkConstraint)(unsafe.Pointer(c.Native()))

	var cret *C.GtkConstraintTarget
	var goret ConstraintTarget

	cret = C.gtk_constraint_get_source(arg0)

	goret = gextras.CastObject(externglib.Take(unsafe.Pointer(cret.Native()))).(ConstraintTarget)

	return goret
}

// SourceAttribute retrieves the attribute of the source to be read by the
// constraint.
func (c constraint) SourceAttribute() ConstraintAttribute {
	var arg0 *C.GtkConstraint

	arg0 = (*C.GtkConstraint)(unsafe.Pointer(c.Native()))

	var cret C.GtkConstraintAttribute
	var goret ConstraintAttribute

	cret = C.gtk_constraint_get_source_attribute(arg0)

	goret = ConstraintAttribute(cret)

	return goret
}

// Strength retrieves the strength of the constraint.
func (c constraint) Strength() int {
	var arg0 *C.GtkConstraint

	arg0 = (*C.GtkConstraint)(unsafe.Pointer(c.Native()))

	var cret C.int
	var goret int

	cret = C.gtk_constraint_get_strength(arg0)

	goret = int(cret)

	return goret
}

// Target retrieves the [iface@Gtk.ConstraintTarget] used as the target for
// the constraint.
//
// If the targe is set to `NULL` at creation, the constraint will use the
// widget using the [class@Gtk.ConstraintLayout] as the target.
func (c constraint) Target() ConstraintTarget {
	var arg0 *C.GtkConstraint

	arg0 = (*C.GtkConstraint)(unsafe.Pointer(c.Native()))

	var cret *C.GtkConstraintTarget
	var goret ConstraintTarget

	cret = C.gtk_constraint_get_target(arg0)

	goret = gextras.CastObject(externglib.Take(unsafe.Pointer(cret.Native()))).(ConstraintTarget)

	return goret
}

// TargetAttribute retrieves the attribute of the target to be set by the
// constraint.
func (c constraint) TargetAttribute() ConstraintAttribute {
	var arg0 *C.GtkConstraint

	arg0 = (*C.GtkConstraint)(unsafe.Pointer(c.Native()))

	var cret C.GtkConstraintAttribute
	var goret ConstraintAttribute

	cret = C.gtk_constraint_get_target_attribute(arg0)

	goret = ConstraintAttribute(cret)

	return goret
}

// IsAttached checks whether the constraint is attached to a
// [class@Gtk.ConstraintLayout], and it is contributing to the layout.
func (c constraint) IsAttached() bool {
	var arg0 *C.GtkConstraint

	arg0 = (*C.GtkConstraint)(unsafe.Pointer(c.Native()))

	var cret C.gboolean
	var goret bool

	cret = C.gtk_constraint_is_attached(arg0)

	if cret {
		goret = true
	}

	return goret
}

// IsConstant checks whether the constraint describes a relation between an
// attribute on the [property@Gtk.Constraint:target] and a constant value.
func (c constraint) IsConstant() bool {
	var arg0 *C.GtkConstraint

	arg0 = (*C.GtkConstraint)(unsafe.Pointer(c.Native()))

	var cret C.gboolean
	var goret bool

	cret = C.gtk_constraint_is_constant(arg0)

	if cret {
		goret = true
	}

	return goret
}

// IsRequired checks whether the constraint is a required relation for
// solving the constraint layout.
func (c constraint) IsRequired() bool {
	var arg0 *C.GtkConstraint

	arg0 = (*C.GtkConstraint)(unsafe.Pointer(c.Native()))

	var cret C.gboolean
	var goret bool

	cret = C.gtk_constraint_is_required(arg0)

	if cret {
		goret = true
	}

	return goret
}
