// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4 glib-2.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_constraint_target_get_type()), F: marshalConstraintTarget},
		{T: externglib.Type(C.gtk_constraint_get_type()), F: marshalConstraint},
	})
}

// ConstraintTarget: the `GtkConstraintTarget` interface is implemented by
// objects that can be used as source or target in `GtkConstraint`s.
//
// Besides `GtkWidget`, it is also implemented by `GtkConstraintGuide`.
type ConstraintTarget interface {
	gextras.Objector
}

// constraintTarget implements the ConstraintTarget interface.
type constraintTarget struct {
	gextras.Objector
}

var _ ConstraintTarget = (*constraintTarget)(nil)

// WrapConstraintTarget wraps a GObject to a type that implements interface
// ConstraintTarget. It is primarily used internally.
func WrapConstraintTarget(obj *externglib.Object) ConstraintTarget {
	return ConstraintTarget{
		Objector: obj,
	}
}

func marshalConstraintTarget(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapConstraintTarget(obj), nil
}

// Constraint: `GtkConstraint` describes a constraint between attributes of two
// widgets, expressed as a linear equation.
//
// The typical equation for a constraint is:
//
// “` target.target_attr = source.source_attr × multiplier + constant “`
//
// Each `GtkConstraint` is part of a system that will be solved by a
// [class@Gtk.ConstraintLayout] in order to allocate and position each child
// widget or guide.
//
// The source and target, as well as their attributes, of a `GtkConstraint`
// instance are immutable after creation.
type Constraint interface {
	gextras.Objector

	// Constant retrieves the constant factor added to the source attributes'
	// value.
	Constant() float64
	// Multiplier retrieves the multiplication factor applied to the source
	// attribute's value.
	Multiplier() float64
	// Strength retrieves the strength of the constraint.
	Strength() int
	// IsAttached checks whether the constraint is attached to a
	// [class@Gtk.ConstraintLayout], and it is contributing to the layout.
	IsAttached() bool
	// IsConstant checks whether the constraint describes a relation between an
	// attribute on the [property@Gtk.Constraint:target] and a constant value.
	IsConstant() bool
	// IsRequired checks whether the constraint is a required relation for
	// solving the constraint layout.
	IsRequired() bool
}

// constraint implements the Constraint interface.
type constraint struct {
	gextras.Objector
}

var _ Constraint = (*constraint)(nil)

// WrapConstraint wraps a GObject to the right type. It is
// primarily used internally.
func WrapConstraint(obj *externglib.Object) Constraint {
	return Constraint{
		Objector: obj,
	}
}

func marshalConstraint(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapConstraint(obj), nil
}

// Constant retrieves the constant factor added to the source attributes'
// value.
func (c constraint) Constant() float64 {
	var _arg0 *C.GtkConstraint // out

	_arg0 = (*C.GtkConstraint)(unsafe.Pointer(c.Native()))

	var _cret C.double // in

	_cret = C.gtk_constraint_get_constant(_arg0)

	var _gdouble float64 // out

	_gdouble = (float64)(_cret)

	return _gdouble
}

// Multiplier retrieves the multiplication factor applied to the source
// attribute's value.
func (c constraint) Multiplier() float64 {
	var _arg0 *C.GtkConstraint // out

	_arg0 = (*C.GtkConstraint)(unsafe.Pointer(c.Native()))

	var _cret C.double // in

	_cret = C.gtk_constraint_get_multiplier(_arg0)

	var _gdouble float64 // out

	_gdouble = (float64)(_cret)

	return _gdouble
}

// Strength retrieves the strength of the constraint.
func (c constraint) Strength() int {
	var _arg0 *C.GtkConstraint // out

	_arg0 = (*C.GtkConstraint)(unsafe.Pointer(c.Native()))

	var _cret C.int // in

	_cret = C.gtk_constraint_get_strength(_arg0)

	var _gint int // out

	_gint = (int)(_cret)

	return _gint
}

// IsAttached checks whether the constraint is attached to a
// [class@Gtk.ConstraintLayout], and it is contributing to the layout.
func (c constraint) IsAttached() bool {
	var _arg0 *C.GtkConstraint // out

	_arg0 = (*C.GtkConstraint)(unsafe.Pointer(c.Native()))

	var _cret C.gboolean // in

	_cret = C.gtk_constraint_is_attached(_arg0)

	var _ok bool // out

	if _cret {
		_ok = true
	}

	return _ok
}

// IsConstant checks whether the constraint describes a relation between an
// attribute on the [property@Gtk.Constraint:target] and a constant value.
func (c constraint) IsConstant() bool {
	var _arg0 *C.GtkConstraint // out

	_arg0 = (*C.GtkConstraint)(unsafe.Pointer(c.Native()))

	var _cret C.gboolean // in

	_cret = C.gtk_constraint_is_constant(_arg0)

	var _ok bool // out

	if _cret {
		_ok = true
	}

	return _ok
}

// IsRequired checks whether the constraint is a required relation for
// solving the constraint layout.
func (c constraint) IsRequired() bool {
	var _arg0 *C.GtkConstraint // out

	_arg0 = (*C.GtkConstraint)(unsafe.Pointer(c.Native()))

	var _cret C.gboolean // in

	_cret = C.gtk_constraint_is_required(_arg0)

	var _ok bool // out

	if _cret {
		_ok = true
	}

	return _ok
}
