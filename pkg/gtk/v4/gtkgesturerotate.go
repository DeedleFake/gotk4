// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_gesture_rotate_get_type()), F: marshalGestureRotate},
	})
}

// GestureRotate: `GtkGestureRotate` is a `GtkGesture` for 2-finger rotations.
//
// Whenever the angle between both handled sequences changes, the
// [signal@Gtk.GestureRotate::angle-changed] signal is emitted.
type GestureRotate interface {
	Gesture

	// AngleDelta gets the angle delta in radians.
	//
	// If @gesture is active, this function returns the angle difference in
	// radians since the gesture was first recognized. If @gesture is not
	// active, 0 is returned.
	AngleDelta() float64
}

// gestureRotate implements the GestureRotate interface.
type gestureRotate struct {
	Gesture
}

var _ GestureRotate = (*gestureRotate)(nil)

// WrapGestureRotate wraps a GObject to the right type. It is
// primarily used internally.
func WrapGestureRotate(obj *externglib.Object) GestureRotate {
	return GestureRotate{
		Gesture: WrapGesture(obj),
	}
}

func marshalGestureRotate(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapGestureRotate(obj), nil
}

// NewGestureRotate constructs a class GestureRotate.
func NewGestureRotate() GestureRotate {
	ret := C.gtk_gesture_rotate_new()

	var ret0 GestureRotate

	ret0 = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(ret.Native()))).(GestureRotate)

	return ret0
}

// AngleDelta gets the angle delta in radians.
//
// If @gesture is active, this function returns the angle difference in
// radians since the gesture was first recognized. If @gesture is not
// active, 0 is returned.
func (g gestureRotate) AngleDelta() float64 {
	var arg0 *C.GtkGestureRotate

	arg0 = (*C.GtkGestureRotate)(g.Native())

	ret := C.gtk_gesture_rotate_get_angle_delta(arg0)

	var ret0 float64

	ret0 = float64(ret)

	return ret0
}
