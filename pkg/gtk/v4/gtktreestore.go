// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_tree_store_get_type()), F: marshalTreeStore},
	})
}

// TreeStore: tree-like data structure that can be used with the GtkTreeView
//
// The TreeStore object is a list model for use with a TreeView widget. It
// implements the TreeModel interface, and consequently, can use all of the
// methods available there. It also implements the TreeSortable interface so it
// can be sorted by the view. Finally, it also implements the tree [drag and
// drop][gtk3-GtkTreeView-drag-and-drop] interfaces.
//
//
// GtkTreeStore as GtkBuildable
//
// The GtkTreeStore implementation of the Buildable interface allows to specify
// the model columns with a <columns> element that may contain multiple <column>
// elements, each specifying one model column. The “type” attribute specifies
// the data type for the column.
//
// An example of a UI Definition fragment for a tree store:
//
//    <object class="GtkTreeStore">
//      <columns>
//        <column type="gchararray"/>
//        <column type="gchararray"/>
//        <column type="gint"/>
//      </columns>
//    </object>
type TreeStore interface {
	gextras.Objector

	// AsBuildable casts the class to the Buildable interface.
	AsBuildable() Buildable
	// AsTreeDragDest casts the class to the TreeDragDest interface.
	AsTreeDragDest() TreeDragDest
	// AsTreeDragSource casts the class to the TreeDragSource interface.
	AsTreeDragSource() TreeDragSource
	// AsTreeModel casts the class to the TreeModel interface.
	AsTreeModel() TreeModel
	// AsTreeSortable casts the class to the TreeSortable interface.
	AsTreeSortable() TreeSortable

	// AppendTreeStore appends a new row to @tree_store. If @parent is non-nil,
	// then it will append the new row after the last child of @parent,
	// otherwise it will append a row to the top level. @iter will be changed to
	// point to this new row. The row will be empty after this function is
	// called. To fill in values, you need to call gtk_tree_store_set() or
	// gtk_tree_store_set_value().
	AppendTreeStore(parent *TreeIter) TreeIter
	// ClearTreeStore removes all rows from @tree_store
	ClearTreeStore()
	// InsertTreeStore creates a new row at @position. If parent is non-nil,
	// then the row will be made a child of @parent. Otherwise, the row will be
	// created at the toplevel. If @position is -1 or is larger than the number
	// of rows at that level, then the new row will be inserted to the end of
	// the list. @iter will be changed to point to this new row. The row will be
	// empty after this function is called. To fill in values, you need to call
	// gtk_tree_store_set() or gtk_tree_store_set_value().
	InsertTreeStore(parent *TreeIter, position int) TreeIter
	// InsertAfterTreeStore inserts a new row after @sibling. If @sibling is
	// nil, then the row will be prepended to @parent ’s children. If @parent
	// and @sibling are nil, then the row will be prepended to the toplevel. If
	// both @sibling and @parent are set, then @parent must be the parent of
	// @sibling. When @sibling is set, @parent is optional.
	//
	// @iter will be changed to point to this new row. The row will be empty
	// after this function is called. To fill in values, you need to call
	// gtk_tree_store_set() or gtk_tree_store_set_value().
	InsertAfterTreeStore(parent *TreeIter, sibling *TreeIter) TreeIter
	// InsertBeforeTreeStore inserts a new row before @sibling. If @sibling is
	// nil, then the row will be appended to @parent ’s children. If @parent and
	// @sibling are nil, then the row will be appended to the toplevel. If both
	// @sibling and @parent are set, then @parent must be the parent of
	// @sibling. When @sibling is set, @parent is optional.
	//
	// @iter will be changed to point to this new row. The row will be empty
	// after this function is called. To fill in values, you need to call
	// gtk_tree_store_set() or gtk_tree_store_set_value().
	InsertBeforeTreeStore(parent *TreeIter, sibling *TreeIter) TreeIter
	// InsertWithValuesvTreeStore: variant of
	// gtk_tree_store_insert_with_values() which takes the columns and values as
	// two arrays, instead of varargs. This function is mainly intended for
	// language bindings.
	InsertWithValuesvTreeStore(parent *TreeIter, position int, columns []int, values []externglib.Value) TreeIter
	// IsAncestorTreeStore returns true if @iter is an ancestor of @descendant.
	// That is, @iter is the parent (or grandparent or great-grandparent) of
	// @descendant.
	IsAncestorTreeStore(iter *TreeIter, descendant *TreeIter) bool
	// IterDepthTreeStore returns the depth of @iter. This will be 0 for
	// anything on the root level, 1 for anything down a level, etc.
	IterDepthTreeStore(iter *TreeIter) int
	// IterIsValidTreeStore: WARNING: This function is slow. Only use it for
	// debugging and/or testing purposes.
	//
	// Checks if the given iter is a valid iter for this TreeStore.
	IterIsValidTreeStore(iter *TreeIter) bool
	// MoveAfterTreeStore moves @iter in @tree_store to the position after
	// @position. @iter and @position should be in the same level. Note that
	// this function only works with unsorted stores. If @position is nil, @iter
	// will be moved to the start of the level.
	MoveAfterTreeStore(iter *TreeIter, position *TreeIter)
	// MoveBeforeTreeStore moves @iter in @tree_store to the position before
	// @position. @iter and @position should be in the same level. Note that
	// this function only works with unsorted stores. If @position is nil, @iter
	// will be moved to the end of the level.
	MoveBeforeTreeStore(iter *TreeIter, position *TreeIter)
	// PrependTreeStore prepends a new row to @tree_store. If @parent is
	// non-nil, then it will prepend the new row before the first child of
	// @parent, otherwise it will prepend a row to the top level. @iter will be
	// changed to point to this new row. The row will be empty after this
	// function is called. To fill in values, you need to call
	// gtk_tree_store_set() or gtk_tree_store_set_value().
	PrependTreeStore(parent *TreeIter) TreeIter
	// RemoveTreeStore removes @iter from @tree_store. After being removed,
	// @iter is set to the next valid row at that level, or invalidated if it
	// previously pointed to the last one.
	RemoveTreeStore(iter *TreeIter) bool
	// SetColumnTypesTreeStore: this function is meant primarily for #GObjects
	// that inherit from TreeStore, and should only be used when constructing a
	// new TreeStore. It will not function after a row has been added, or a
	// method on the TreeModel interface is called.
	SetColumnTypesTreeStore(types []externglib.Type)
	// SetValueTreeStore sets the data in the cell specified by @iter and
	// @column. The type of @value must be convertible to the type of the
	// column.
	SetValueTreeStore(iter *TreeIter, column int, value externglib.Value)
	// SetValuesvTreeStore: variant of gtk_tree_store_set_valist() which takes
	// the columns and values as two arrays, instead of varargs. This function
	// is mainly intended for language bindings or in case the number of columns
	// to change is not known until run-time.
	SetValuesvTreeStore(iter *TreeIter, columns []int, values []externglib.Value)
	// SwapTreeStore swaps @a and @b in the same level of @tree_store. Note that
	// this function only works with unsorted stores.
	SwapTreeStore(a *TreeIter, b *TreeIter)
}

// treeStore implements the TreeStore class.
type treeStore struct {
	gextras.Objector
}

// WrapTreeStore wraps a GObject to the right type. It is
// primarily used internally.
func WrapTreeStore(obj *externglib.Object) TreeStore {
	return treeStore{
		Objector: obj,
	}
}

func marshalTreeStore(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapTreeStore(obj), nil
}

// NewTreeStoreV: non vararg creation function. Used primarily by language
// bindings.
func NewTreeStoreV(types []externglib.Type) TreeStore {
	var _arg2 *C.GType
	var _arg1 C.int
	var _cret *C.GtkTreeStore // in

	_arg1 = C.int(len(types))
	_arg2 = (*C.GType)(C.malloc(C.ulong(len(types)) * C.ulong(C.sizeof_GType)))
	defer C.free(unsafe.Pointer(_arg2))
	{
		out := unsafe.Slice(_arg2, len(types))
		for i := range types {
			out[i] = (C.GType)(types[i])
		}
	}

	_cret = C.gtk_tree_store_newv(_arg1, _arg2)

	var _treeStore TreeStore // out

	_treeStore = WrapTreeStore(externglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _treeStore
}

func (t treeStore) AppendTreeStore(parent *TreeIter) TreeIter {
	var _arg0 *C.GtkTreeStore // out
	var _arg1 C.GtkTreeIter   // in
	var _arg2 *C.GtkTreeIter  // out

	_arg0 = (*C.GtkTreeStore)(unsafe.Pointer(t.Native()))
	_arg2 = (*C.GtkTreeIter)(unsafe.Pointer(parent))

	C.gtk_tree_store_append(_arg0, &_arg1, _arg2)

	var _iter TreeIter // out

	{
		var refTmpIn *C.GtkTreeIter
		var refTmpOut *TreeIter

		in0 := &_arg1
		refTmpIn = in0

		refTmpOut = (*TreeIter)(unsafe.Pointer(refTmpIn))

		_iter = *refTmpOut
	}

	return _iter
}

func (t treeStore) ClearTreeStore() {
	var _arg0 *C.GtkTreeStore // out

	_arg0 = (*C.GtkTreeStore)(unsafe.Pointer(t.Native()))

	C.gtk_tree_store_clear(_arg0)
}

func (t treeStore) InsertTreeStore(parent *TreeIter, position int) TreeIter {
	var _arg0 *C.GtkTreeStore // out
	var _arg1 C.GtkTreeIter   // in
	var _arg2 *C.GtkTreeIter  // out
	var _arg3 C.int           // out

	_arg0 = (*C.GtkTreeStore)(unsafe.Pointer(t.Native()))
	_arg2 = (*C.GtkTreeIter)(unsafe.Pointer(parent))
	_arg3 = C.int(position)

	C.gtk_tree_store_insert(_arg0, &_arg1, _arg2, _arg3)

	var _iter TreeIter // out

	{
		var refTmpIn *C.GtkTreeIter
		var refTmpOut *TreeIter

		in0 := &_arg1
		refTmpIn = in0

		refTmpOut = (*TreeIter)(unsafe.Pointer(refTmpIn))

		_iter = *refTmpOut
	}

	return _iter
}

func (t treeStore) InsertAfterTreeStore(parent *TreeIter, sibling *TreeIter) TreeIter {
	var _arg0 *C.GtkTreeStore // out
	var _arg1 C.GtkTreeIter   // in
	var _arg2 *C.GtkTreeIter  // out
	var _arg3 *C.GtkTreeIter  // out

	_arg0 = (*C.GtkTreeStore)(unsafe.Pointer(t.Native()))
	_arg2 = (*C.GtkTreeIter)(unsafe.Pointer(parent))
	_arg3 = (*C.GtkTreeIter)(unsafe.Pointer(sibling))

	C.gtk_tree_store_insert_after(_arg0, &_arg1, _arg2, _arg3)

	var _iter TreeIter // out

	{
		var refTmpIn *C.GtkTreeIter
		var refTmpOut *TreeIter

		in0 := &_arg1
		refTmpIn = in0

		refTmpOut = (*TreeIter)(unsafe.Pointer(refTmpIn))

		_iter = *refTmpOut
	}

	return _iter
}

func (t treeStore) InsertBeforeTreeStore(parent *TreeIter, sibling *TreeIter) TreeIter {
	var _arg0 *C.GtkTreeStore // out
	var _arg1 C.GtkTreeIter   // in
	var _arg2 *C.GtkTreeIter  // out
	var _arg3 *C.GtkTreeIter  // out

	_arg0 = (*C.GtkTreeStore)(unsafe.Pointer(t.Native()))
	_arg2 = (*C.GtkTreeIter)(unsafe.Pointer(parent))
	_arg3 = (*C.GtkTreeIter)(unsafe.Pointer(sibling))

	C.gtk_tree_store_insert_before(_arg0, &_arg1, _arg2, _arg3)

	var _iter TreeIter // out

	{
		var refTmpIn *C.GtkTreeIter
		var refTmpOut *TreeIter

		in0 := &_arg1
		refTmpIn = in0

		refTmpOut = (*TreeIter)(unsafe.Pointer(refTmpIn))

		_iter = *refTmpOut
	}

	return _iter
}

func (t treeStore) InsertWithValuesvTreeStore(parent *TreeIter, position int, columns []int, values []externglib.Value) TreeIter {
	var _arg0 *C.GtkTreeStore // out
	var _arg1 C.GtkTreeIter   // in
	var _arg2 *C.GtkTreeIter  // out
	var _arg3 C.int           // out
	var _arg4 *C.int
	var _arg6 C.int
	var _arg5 *C.GValue
	var _arg6 C.int

	_arg0 = (*C.GtkTreeStore)(unsafe.Pointer(t.Native()))
	_arg2 = (*C.GtkTreeIter)(unsafe.Pointer(parent))
	_arg3 = C.int(position)
	_arg6 = C.int(len(columns))
	_arg4 = (*C.int)(unsafe.Pointer(&columns[0]))
	_arg6 = C.int(len(values))
	_arg5 = (*C.GValue)(C.malloc(C.ulong(len(values)) * C.ulong(C.sizeof_GValue)))
	defer C.free(unsafe.Pointer(_arg5))
	{
		out := unsafe.Slice(_arg5, len(values))
		for i := range values {
			{
				var refTmpIn *externglib.Value
				var refTmpOut *C.GValue

				in0 := &values[i]
				refTmpIn = in0

				refTmpOut = (*C.GValue)(unsafe.Pointer(&refTmpIn.GValue))

				out[i] = *refTmpOut
			}
		}
	}

	C.gtk_tree_store_insert_with_valuesv(_arg0, &_arg1, _arg2, _arg3, _arg4, _arg5, _arg6)

	var _iter TreeIter // out

	{
		var refTmpIn *C.GtkTreeIter
		var refTmpOut *TreeIter

		in0 := &_arg1
		refTmpIn = in0

		refTmpOut = (*TreeIter)(unsafe.Pointer(refTmpIn))

		_iter = *refTmpOut
	}

	return _iter
}

func (t treeStore) IsAncestorTreeStore(iter *TreeIter, descendant *TreeIter) bool {
	var _arg0 *C.GtkTreeStore // out
	var _arg1 *C.GtkTreeIter  // out
	var _arg2 *C.GtkTreeIter  // out
	var _cret C.gboolean      // in

	_arg0 = (*C.GtkTreeStore)(unsafe.Pointer(t.Native()))
	_arg1 = (*C.GtkTreeIter)(unsafe.Pointer(iter))
	_arg2 = (*C.GtkTreeIter)(unsafe.Pointer(descendant))

	_cret = C.gtk_tree_store_is_ancestor(_arg0, _arg1, _arg2)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (t treeStore) IterDepthTreeStore(iter *TreeIter) int {
	var _arg0 *C.GtkTreeStore // out
	var _arg1 *C.GtkTreeIter  // out
	var _cret C.int           // in

	_arg0 = (*C.GtkTreeStore)(unsafe.Pointer(t.Native()))
	_arg1 = (*C.GtkTreeIter)(unsafe.Pointer(iter))

	_cret = C.gtk_tree_store_iter_depth(_arg0, _arg1)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (t treeStore) IterIsValidTreeStore(iter *TreeIter) bool {
	var _arg0 *C.GtkTreeStore // out
	var _arg1 *C.GtkTreeIter  // out
	var _cret C.gboolean      // in

	_arg0 = (*C.GtkTreeStore)(unsafe.Pointer(t.Native()))
	_arg1 = (*C.GtkTreeIter)(unsafe.Pointer(iter))

	_cret = C.gtk_tree_store_iter_is_valid(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (t treeStore) MoveAfterTreeStore(iter *TreeIter, position *TreeIter) {
	var _arg0 *C.GtkTreeStore // out
	var _arg1 *C.GtkTreeIter  // out
	var _arg2 *C.GtkTreeIter  // out

	_arg0 = (*C.GtkTreeStore)(unsafe.Pointer(t.Native()))
	_arg1 = (*C.GtkTreeIter)(unsafe.Pointer(iter))
	_arg2 = (*C.GtkTreeIter)(unsafe.Pointer(position))

	C.gtk_tree_store_move_after(_arg0, _arg1, _arg2)
}

func (t treeStore) MoveBeforeTreeStore(iter *TreeIter, position *TreeIter) {
	var _arg0 *C.GtkTreeStore // out
	var _arg1 *C.GtkTreeIter  // out
	var _arg2 *C.GtkTreeIter  // out

	_arg0 = (*C.GtkTreeStore)(unsafe.Pointer(t.Native()))
	_arg1 = (*C.GtkTreeIter)(unsafe.Pointer(iter))
	_arg2 = (*C.GtkTreeIter)(unsafe.Pointer(position))

	C.gtk_tree_store_move_before(_arg0, _arg1, _arg2)
}

func (t treeStore) PrependTreeStore(parent *TreeIter) TreeIter {
	var _arg0 *C.GtkTreeStore // out
	var _arg1 C.GtkTreeIter   // in
	var _arg2 *C.GtkTreeIter  // out

	_arg0 = (*C.GtkTreeStore)(unsafe.Pointer(t.Native()))
	_arg2 = (*C.GtkTreeIter)(unsafe.Pointer(parent))

	C.gtk_tree_store_prepend(_arg0, &_arg1, _arg2)

	var _iter TreeIter // out

	{
		var refTmpIn *C.GtkTreeIter
		var refTmpOut *TreeIter

		in0 := &_arg1
		refTmpIn = in0

		refTmpOut = (*TreeIter)(unsafe.Pointer(refTmpIn))

		_iter = *refTmpOut
	}

	return _iter
}

func (t treeStore) RemoveTreeStore(iter *TreeIter) bool {
	var _arg0 *C.GtkTreeStore // out
	var _arg1 *C.GtkTreeIter  // out
	var _cret C.gboolean      // in

	_arg0 = (*C.GtkTreeStore)(unsafe.Pointer(t.Native()))
	_arg1 = (*C.GtkTreeIter)(unsafe.Pointer(iter))

	_cret = C.gtk_tree_store_remove(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (t treeStore) SetColumnTypesTreeStore(types []externglib.Type) {
	var _arg0 *C.GtkTreeStore // out
	var _arg2 *C.GType
	var _arg1 C.int

	_arg0 = (*C.GtkTreeStore)(unsafe.Pointer(t.Native()))
	_arg1 = C.int(len(types))
	_arg2 = (*C.GType)(C.malloc(C.ulong(len(types)) * C.ulong(C.sizeof_GType)))
	defer C.free(unsafe.Pointer(_arg2))
	{
		out := unsafe.Slice(_arg2, len(types))
		for i := range types {
			out[i] = (C.GType)(types[i])
		}
	}

	C.gtk_tree_store_set_column_types(_arg0, _arg1, _arg2)
}

func (t treeStore) SetValueTreeStore(iter *TreeIter, column int, value externglib.Value) {
	var _arg0 *C.GtkTreeStore // out
	var _arg1 *C.GtkTreeIter  // out
	var _arg2 C.int           // out
	var _arg3 *C.GValue       // out

	_arg0 = (*C.GtkTreeStore)(unsafe.Pointer(t.Native()))
	_arg1 = (*C.GtkTreeIter)(unsafe.Pointer(iter))
	_arg2 = C.int(column)
	_arg3 = (*C.GValue)(unsafe.Pointer(&value.GValue))

	C.gtk_tree_store_set_value(_arg0, _arg1, _arg2, _arg3)
}

func (t treeStore) SetValuesvTreeStore(iter *TreeIter, columns []int, values []externglib.Value) {
	var _arg0 *C.GtkTreeStore // out
	var _arg1 *C.GtkTreeIter  // out
	var _arg2 *C.int
	var _arg4 C.int
	var _arg3 *C.GValue
	var _arg4 C.int

	_arg0 = (*C.GtkTreeStore)(unsafe.Pointer(t.Native()))
	_arg1 = (*C.GtkTreeIter)(unsafe.Pointer(iter))
	_arg4 = C.int(len(columns))
	_arg2 = (*C.int)(unsafe.Pointer(&columns[0]))
	_arg4 = C.int(len(values))
	_arg3 = (*C.GValue)(C.malloc(C.ulong(len(values)) * C.ulong(C.sizeof_GValue)))
	defer C.free(unsafe.Pointer(_arg3))
	{
		out := unsafe.Slice(_arg3, len(values))
		for i := range values {
			{
				var refTmpIn *externglib.Value
				var refTmpOut *C.GValue

				in0 := &values[i]
				refTmpIn = in0

				refTmpOut = (*C.GValue)(unsafe.Pointer(&refTmpIn.GValue))

				out[i] = *refTmpOut
			}
		}
	}

	C.gtk_tree_store_set_valuesv(_arg0, _arg1, _arg2, _arg3, _arg4)
}

func (t treeStore) SwapTreeStore(a *TreeIter, b *TreeIter) {
	var _arg0 *C.GtkTreeStore // out
	var _arg1 *C.GtkTreeIter  // out
	var _arg2 *C.GtkTreeIter  // out

	_arg0 = (*C.GtkTreeStore)(unsafe.Pointer(t.Native()))
	_arg1 = (*C.GtkTreeIter)(unsafe.Pointer(a))
	_arg2 = (*C.GtkTreeIter)(unsafe.Pointer(b))

	C.gtk_tree_store_swap(_arg0, _arg1, _arg2)
}

func (t treeStore) AsBuildable() Buildable {
	return WrapBuildable(gextras.InternObject(t))
}

func (t treeStore) AsTreeDragDest() TreeDragDest {
	return WrapTreeDragDest(gextras.InternObject(t))
}

func (t treeStore) AsTreeDragSource() TreeDragSource {
	return WrapTreeDragSource(gextras.InternObject(t))
}

func (t treeStore) AsTreeModel() TreeModel {
	return WrapTreeModel(gextras.InternObject(t))
}

func (t treeStore) AsTreeSortable() TreeSortable {
	return WrapTreeSortable(gextras.InternObject(t))
}
