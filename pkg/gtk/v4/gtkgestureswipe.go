// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <stdbool.h>
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_gesture_swipe_get_type()), F: marshalGestureSwipe},
	})
}

// GestureSwipe is a Gesture implementation able to recognize swipes, after a
// press/move/.../move/release sequence happens, the GestureSwipe::swipe signal
// will be emitted, providing the velocity and directionality of the sequence at
// the time it was lifted.
//
// If the velocity is desired in intermediate points,
// gtk_gesture_swipe_get_velocity() can be called on eg. a Gesture::update
// handler.
//
// All velocities are reported in pixels/sec units.
type GestureSwipe interface {
	GestureSingle

	// Velocity: if the gesture is recognized, this function returns true and
	// fill in @velocity_x and @velocity_y with the recorded velocity, as per
	// the last event(s) processed.
	Velocity() (velocityX float64, velocityY float64, ok bool)
}

// gestureSwipe implements the GestureSwipe interface.
type gestureSwipe struct {
	GestureSingle
}

var _ GestureSwipe = (*gestureSwipe)(nil)

// WrapGestureSwipe wraps a GObject to the right type. It is
// primarily used internally.
func WrapGestureSwipe(obj *externglib.Object) GestureSwipe {
	return GestureSwipe{
		GestureSingle: WrapGestureSingle(obj),
	}
}

func marshalGestureSwipe(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapGestureSwipe(obj), nil
}

// NewGestureSwipe constructs a class GestureSwipe.
func NewGestureSwipe() GestureSwipe {
	var cret C.GtkGestureSwipe
	var goret1 GestureSwipe

	cret = C.gtk_gesture_swipe_new()

	goret1 = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(cret.Native()))).(GestureSwipe)

	return goret1
}

// Velocity: if the gesture is recognized, this function returns true and
// fill in @velocity_x and @velocity_y with the recorded velocity, as per
// the last event(s) processed.
func (g gestureSwipe) Velocity() (velocityX float64, velocityY float64, ok bool) {
	var arg0 *C.GtkGestureSwipe

	arg0 = (*C.GtkGestureSwipe)(unsafe.Pointer(g.Native()))

	var arg1 *C.double
	var ret1 float64
	var arg2 *C.double
	var ret2 float64
	var cret C.gboolean
	var goret3 bool

	cret = C.gtk_gesture_swipe_get_velocity(arg0, &arg1, &arg2)

	ret1 = *C.double(arg1)
	ret2 = *C.double(arg2)
	goret3 = C.bool(cret) != C.false

	return ret1, ret2, goret3
}
