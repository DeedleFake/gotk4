// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <stdbool.h>
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_editable_label_get_type()), F: marshalEditableLabel},
	})
}

// EditableLabel: a GtkEditableLabel is a Label that allows users to edit the
// text by switching the widget to an “edit mode”.
//
// GtkEditableLabel does not have API of its own, but it implements the Editable
// interface.
//
// The default bindings for activating the edit mode is to click or press the
// Enter key. The default bindings for leaving the edit mode are the Enter key
// (to save the results) or the Escape key (to cancel the editing).
//
// CSS nodes
//
//    editablelabel[.editing]
//    ╰── stack
//        ├── label
//        ╰── text
//
// GtkEditableLabel has a main node with the name editablelabel. When the entry
// is in editing mode, it gets the .editing style class.
//
// For all the subnodes added to the text node in various situations, see Text.
type EditableLabel interface {
	Widget
	Accessible
	Buildable
	ConstraintTarget
	Editable

	// Editing returns whether the label is currently in “editing mode”.
	Editing() bool
	// StartEditing switches the label into “editing mode”.
	StartEditing()
	// StopEditing switches the label out of “editing mode”. If @commit is true,
	// the resulting text is kept as the Editable:text property value, otherwise
	// the resulting text is discarded and the label will keep its previous
	// Editable:text property value.
	StopEditing(commit bool)
}

// editableLabel implements the EditableLabel interface.
type editableLabel struct {
	Widget
	Accessible
	Buildable
	ConstraintTarget
	Editable
}

var _ EditableLabel = (*editableLabel)(nil)

// WrapEditableLabel wraps a GObject to the right type. It is
// primarily used internally.
func WrapEditableLabel(obj *externglib.Object) EditableLabel {
	return EditableLabel{
		Widget:           WrapWidget(obj),
		Accessible:       WrapAccessible(obj),
		Buildable:        WrapBuildable(obj),
		ConstraintTarget: WrapConstraintTarget(obj),
		Editable:         WrapEditable(obj),
	}
}

func marshalEditableLabel(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapEditableLabel(obj), nil
}

// NewEditableLabel constructs a class EditableLabel.
func NewEditableLabel(str string) EditableLabel {
	var arg1 *C.char

	arg1 = (*C.char)(C.CString(str))
	defer C.free(unsafe.Pointer(arg1))

	var cret C.GtkEditableLabel
	var ret1 EditableLabel

	cret = C.gtk_editable_label_new(str)

	ret1 = gextras.CastObject(externglib.Take(unsafe.Pointer(cret.Native()))).(EditableLabel)

	return ret1
}

// Editing returns whether the label is currently in “editing mode”.
func (s editableLabel) Editing() bool {
	var arg0 *C.GtkEditableLabel

	arg0 = (*C.GtkEditableLabel)(unsafe.Pointer(s.Native()))

	var cret C.gboolean
	var ret1 bool

	cret = C.gtk_editable_label_get_editing(arg0)

	ret1 = C.bool(cret) != C.false

	return ret1
}

// StartEditing switches the label into “editing mode”.
func (s editableLabel) StartEditing() {
	var arg0 *C.GtkEditableLabel

	arg0 = (*C.GtkEditableLabel)(unsafe.Pointer(s.Native()))

	C.gtk_editable_label_start_editing(arg0)
}

// StopEditing switches the label out of “editing mode”. If @commit is true,
// the resulting text is kept as the Editable:text property value, otherwise
// the resulting text is discarded and the label will keep its previous
// Editable:text property value.
func (s editableLabel) StopEditing(commit bool) {
	var arg0 *C.GtkEditableLabel
	var arg1 C.gboolean

	arg0 = (*C.GtkEditableLabel)(unsafe.Pointer(s.Native()))
	if commit {
		arg1 = C.gboolean(1)
	}

	C.gtk_editable_label_stop_editing(arg0, commit)
}
