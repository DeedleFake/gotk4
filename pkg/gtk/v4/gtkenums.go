// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_accessible_autocomplete_get_type()), F: marshalAccessibleAutocomplete},
		{T: externglib.Type(C.gtk_accessible_invalid_state_get_type()), F: marshalAccessibleInvalidState},
		{T: externglib.Type(C.gtk_accessible_property_get_type()), F: marshalAccessibleProperty},
		{T: externglib.Type(C.gtk_accessible_relation_get_type()), F: marshalAccessibleRelation},
		{T: externglib.Type(C.gtk_accessible_role_get_type()), F: marshalAccessibleRole},
		{T: externglib.Type(C.gtk_accessible_sort_get_type()), F: marshalAccessibleSort},
		{T: externglib.Type(C.gtk_accessible_state_get_type()), F: marshalAccessibleState},
		{T: externglib.Type(C.gtk_accessible_tristate_get_type()), F: marshalAccessibleTristate},
		{T: externglib.Type(C.gtk_align_get_type()), F: marshalAlign},
		{T: externglib.Type(C.gtk_arrow_type_get_type()), F: marshalArrowType},
		{T: externglib.Type(C.gtk_baseline_position_get_type()), F: marshalBaselinePosition},
		{T: externglib.Type(C.gtk_border_style_get_type()), F: marshalBorderStyle},
		{T: externglib.Type(C.gtk_constraint_attribute_get_type()), F: marshalConstraintAttribute},
		{T: externglib.Type(C.gtk_constraint_relation_get_type()), F: marshalConstraintRelation},
		{T: externglib.Type(C.gtk_constraint_strength_get_type()), F: marshalConstraintStrength},
		{T: externglib.Type(C.gtk_constraint_vfl_parser_error_get_type()), F: marshalConstraintVflParserError},
		{T: externglib.Type(C.gtk_delete_type_get_type()), F: marshalDeleteType},
		{T: externglib.Type(C.gtk_direction_type_get_type()), F: marshalDirectionType},
		{T: externglib.Type(C.gtk_event_sequence_state_get_type()), F: marshalEventSequenceState},
		{T: externglib.Type(C.gtk_icon_size_get_type()), F: marshalIconSize},
		{T: externglib.Type(C.gtk_input_purpose_get_type()), F: marshalInputPurpose},
		{T: externglib.Type(C.gtk_justification_get_type()), F: marshalJustification},
		{T: externglib.Type(C.gtk_level_bar_mode_get_type()), F: marshalLevelBarMode},
		{T: externglib.Type(C.gtk_message_type_get_type()), F: marshalMessageType},
		{T: externglib.Type(C.gtk_movement_step_get_type()), F: marshalMovementStep},
		{T: externglib.Type(C.gtk_number_up_layout_get_type()), F: marshalNumberUpLayout},
		{T: externglib.Type(C.gtk_ordering_get_type()), F: marshalOrdering},
		{T: externglib.Type(C.gtk_orientation_get_type()), F: marshalOrientation},
		{T: externglib.Type(C.gtk_overflow_get_type()), F: marshalOverflow},
		{T: externglib.Type(C.gtk_pack_type_get_type()), F: marshalPackType},
		{T: externglib.Type(C.gtk_page_orientation_get_type()), F: marshalPageOrientation},
		{T: externglib.Type(C.gtk_page_set_get_type()), F: marshalPageSet},
		{T: externglib.Type(C.gtk_pan_direction_get_type()), F: marshalPanDirection},
		{T: externglib.Type(C.gtk_position_type_get_type()), F: marshalPositionType},
		{T: externglib.Type(C.gtk_print_duplex_get_type()), F: marshalPrintDuplex},
		{T: externglib.Type(C.gtk_print_pages_get_type()), F: marshalPrintPages},
		{T: externglib.Type(C.gtk_print_quality_get_type()), F: marshalPrintQuality},
		{T: externglib.Type(C.gtk_propagation_limit_get_type()), F: marshalPropagationLimit},
		{T: externglib.Type(C.gtk_propagation_phase_get_type()), F: marshalPropagationPhase},
		{T: externglib.Type(C.gtk_scroll_step_get_type()), F: marshalScrollStep},
		{T: externglib.Type(C.gtk_scroll_type_get_type()), F: marshalScrollType},
		{T: externglib.Type(C.gtk_scrollable_policy_get_type()), F: marshalScrollablePolicy},
		{T: externglib.Type(C.gtk_selection_mode_get_type()), F: marshalSelectionMode},
		{T: externglib.Type(C.gtk_sensitivity_type_get_type()), F: marshalSensitivityType},
		{T: externglib.Type(C.gtk_shortcut_scope_get_type()), F: marshalShortcutScope},
		{T: externglib.Type(C.gtk_size_group_mode_get_type()), F: marshalSizeGroupMode},
		{T: externglib.Type(C.gtk_size_request_mode_get_type()), F: marshalSizeRequestMode},
		{T: externglib.Type(C.gtk_sort_type_get_type()), F: marshalSortType},
		{T: externglib.Type(C.gtk_system_setting_get_type()), F: marshalSystemSetting},
		{T: externglib.Type(C.gtk_text_direction_get_type()), F: marshalTextDirection},
		{T: externglib.Type(C.gtk_tree_view_grid_lines_get_type()), F: marshalTreeViewGridLines},
		{T: externglib.Type(C.gtk_unit_get_type()), F: marshalUnit},
		{T: externglib.Type(C.gtk_wrap_mode_get_type()), F: marshalWrapMode},
		{T: externglib.Type(C.gtk_input_hints_get_type()), F: marshalInputHints},
		{T: externglib.Type(C.gtk_pick_flags_get_type()), F: marshalPickFlags},
		{T: externglib.Type(C.gtk_state_flags_get_type()), F: marshalStateFlags},
	})
}

// AccessibleAutocomplete: the possible values for the
// GTK_ACCESSIBLE_PROPERTY_AUTOCOMPLETE accessible property.
type AccessibleAutocomplete int

const (
	// None: automatic suggestions are not displayed.
	None AccessibleAutocomplete = iota
	// Inline: when a user is providing input, text suggesting one way to
	// complete the provided input may be dynamically inserted after the caret.
	Inline
	// List: when a user is providing input, an element containing a collection
	// of values that could complete the provided input may be displayed.
	List
	// Both: when a user is providing input, an element containing a collection
	// of values that could complete the provided input may be displayed. If
	// displayed, one value in the collection is automatically selected, and the
	// text needed to complete the automatically selected value appears after
	// the caret in the input.
	Both
)

func marshalAccessibleAutocomplete(p uintptr) (interface{}, error) {
	return AccessibleAutocomplete(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// AccessibleInvalidState: the possible values for the
// GTK_ACCESSIBLE_STATE_INVALID accessible state.
//
// Note that the GTK_ACCESSIBLE_INVALID_FALSE and GTK_ACCESSIBLE_INVALID_TRUE
// have the same values as false and true.
type AccessibleInvalidState int

const (
	// False: there are no detected errors in the value
	False AccessibleInvalidState = iota
	// True: the value entered by the user has failed validation
	True
	// Grammar: grammatical error was detected
	Grammar
	// Spelling error was detected
	Spelling
)

func marshalAccessibleInvalidState(p uintptr) (interface{}, error) {
	return AccessibleInvalidState(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// AccessibleProperty: the possible accessible properties of a `GtkAccessible`.
type AccessibleProperty int

const (
	// Autocomplete indicates whether inputting text could trigger display of
	// one or more predictions of the user's intended value for a combobox,
	// searchbox, or textbox and specifies how predictions would be presented if
	// they were made. Value type: AccessibleAutocomplete
	Autocomplete AccessibleProperty = iota
	// Description defines a string value that describes or annotates the
	// current element. Value type: string
	Description
	// HasPopup indicates the availability and type of interactive popup
	// element, such as menu or dialog, that can be triggered by an element.
	HasPopup
	// KeyShortcuts indicates keyboard shortcuts that an author has implemented
	// to activate or give focus to an element. Value type: string
	KeyShortcuts
	// Label defines a string value that labels the current element. Value type:
	// string
	Label
	// Level defines the hierarchical level of an element within a structure.
	// Value type: integer
	Level
	// Modal indicates whether an element is modal when displayed. Value type:
	// boolean
	Modal
	// MultiLine indicates whether a text box accepts multiple lines of input or
	// only a single line. Value type: boolean
	MultiLine
	// MultiSelectable indicates that the user may select more than one item
	// from the current selectable descendants. Value type: boolean
	MultiSelectable
	// Orientation indicates whether the element's orientation is horizontal,
	// vertical, or unknown/ambiguous. Value type: Orientation
	Orientation
	// Placeholder defines a short hint (a word or short phrase) intended to aid
	// the user with data entry when the control has no value. A hint could be a
	// sample value or a brief description of the expected format. Value type:
	// string
	Placeholder
	// ReadOnly indicates that the element is not editable, but is otherwise
	// operable. Value type: boolean
	ReadOnly
	// Required indicates that user input is required on the element before a
	// form may be submitted. Value type: boolean
	Required
	// RoleDescription defines a human-readable, author-localized description
	// for the role of an element. Value type: string
	RoleDescription
	// Sort indicates if items in a table or grid are sorted in ascending or
	// descending order. Possible property values are in the AccessibleSort
	// enumeration. Value type: AccessibleSort
	Sort
	// ValueMax defines the maximum allowed value for a range widget. Value
	// type: double
	ValueMax
	// ValueMin defines the minimum allowed value for a range widget. Value
	// type: double
	ValueMin
	// ValueNow defines the current value for a range widget. Value type: double
	ValueNow
	// ValueText defines the human readable text alternative of aria-valuenow
	// for a range widget. Value type: string
	ValueText
)

func marshalAccessibleProperty(p uintptr) (interface{}, error) {
	return AccessibleProperty(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// AccessibleRelation: the possible accessible relations of a `GtkAccessible`.
//
// Accessible relations can be references to other widgets, integers or strings.
type AccessibleRelation int

const (
	// ActiveDescendant identifies the currently active element when focus is on
	// a composite widget, combobox, textbox, group, or application. Value type:
	// reference
	ActiveDescendant AccessibleRelation = iota
	// ColCount defines the total number of columns in a table, grid, or
	// treegrid. Value type: integer
	ColCount
	// ColIndex defines an element's column index or position with respect to
	// the total number of columns within a table, grid, or treegrid. Value
	// type: integer
	ColIndex
	// ColIndexText defines a human readable text alternative of
	// GTK_ACCESSIBLE_RELATION_COL_INDEX. Value type: string
	ColIndexText
	// ColSpan defines the number of columns spanned by a cell or gridcell
	// within a table, grid, or treegrid. Value type: integer
	ColSpan
	// Controls identifies the element (or elements) whose contents or presence
	// are controlled by the current element. Value type: reference
	Controls
	// DescribedBy identifies the element (or elements) that describes the
	// object. Value type: reference
	DescribedBy
	// Details identifies the element (or elements) that provide additional
	// information related to the object. Value type: reference
	Details
	// ErrorMessage identifies the element that provides an error message for an
	// object. Value type: reference
	ErrorMessage
	// FlowTo identifies the next element (or elements) in an alternate reading
	// order of content which, at the user's discretion, allows assistive
	// technology to override the general default of reading in document source
	// order. Value type: reference
	FlowTo
	// LabelledBy identifies the element (or elements) that labels the current
	// element. Value type: reference
	LabelledBy
	// Owns identifies an element (or elements) in order to define a visual,
	// functional, or contextual parent/child relationship between elements
	// where the widget hierarchy cannot be used to represent the relationship.
	// Value type: reference
	Owns
	// PosInSet defines an element's number or position in the current set of
	// listitems or treeitems. Value type: integer
	PosInSet
	// RowCount defines the total number of rows in a table, grid, or treegrid.
	// Value type: integer
	RowCount
	// RowIndex defines an element's row index or position with respect to the
	// total number of rows within a table, grid, or treegrid. Value type:
	// integer
	RowIndex
	// RowIndexText defines a human readable text alternative of aria-rowindex.
	// Value type: string
	RowIndexText
	// RowSpan defines the number of rows spanned by a cell or gridcell within a
	// table, grid, or treegrid. Value type: integer
	RowSpan
	// SetSize defines the number of items in the current set of listitems or
	// treeitems. Value type: integer
	SetSize
)

func marshalAccessibleRelation(p uintptr) (interface{}, error) {
	return AccessibleRelation(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// AccessibleRole: the accessible role for a `GtkAccessible` implementation.
//
// Abstract roles are only used as part of the ontology; application developers
// must not use abstract roles in their code.
type AccessibleRole int

const (
	// Alert: element with important, and usually time-sensitive, information
	Alert AccessibleRole = iota
	// AlertDialog: type of dialog that contains an alert message
	AlertDialog
	// Banner: unused
	Banner
	// Button: input element that allows for user-triggered actions when clicked
	// or pressed
	Button
	// Caption: unused
	Caption
	// Cell: unused
	Cell
	// Checkbox: checkable input element that has three possible values: `true`,
	// `false`, or `mixed`
	Checkbox
	// ColumnHeader: header in a columned list.
	ColumnHeader
	// ComboBox: input that controls another element, such as a list or a grid,
	// that can dynamically pop up to help the user set the value of the input
	ComboBox
	// Command: abstract role.
	Command
	// Composite: abstract role.
	Composite
	// Dialog is a window that is designed to interrupt the current processing
	// of an application in order to prompt the user to enter information or
	// require a response.
	Dialog
	// Document: unused
	Document
	// Feed: unused
	Feed
	// Form: unused
	Form
	// Generic: unused
	Generic
	// Grid of items.
	Grid
	// GridCell: item in a grid or tree grid.
	GridCell
	// Group: element that groups multiple widgets. GTK uses this role for
	// various containers, like Box, Viewport, and HeaderBar.
	Group
	// Heading: unused
	Heading
	// Img: image.
	Img
	// Input: abstract role.
	Input
	// Label: visible name or caption for a user interface component.
	Label
	// Landmark: abstract role.
	Landmark
	// Legend: unused
	Legend
	// Link: clickable link.
	Link
	// List of items.
	List
	// ListBox: unused.
	ListBox
	// ListItem: item in a list.
	ListItem
	// Log: unused
	Log
	// Main: unused
	Main
	// Marquee: unused
	Marquee
	// Math: unused
	Math
	// Meter: element that represents a value within a known range.
	Meter
	// Menu: menu.
	Menu
	// MenuBar: menubar.
	MenuBar
	// MenuItem: item in a menu.
	MenuItem
	// MenuItemCheckbox: check item in a menu.
	MenuItemCheckbox
	// MenuItemRadio: radio item in a menu.
	MenuItemRadio
	// Navigation: unused
	Navigation
	// None: element that is not represented to accessibility technologies.
	None
	// Note: unused
	Note
	// Option: unused
	Option
	// Presentation: element that is not represented to accessibility
	// technologies.
	Presentation
	// ProgressBar: element that displays the progress status for tasks that
	// take a long time.
	ProgressBar
	// Radio: checkable input in a group of radio roles, only one of which can
	// be checked at a time.
	Radio
	// RadioGroup: unused
	RadioGroup
	// Range: abstract role.
	Range
	// Region: unused
	Region
	// Row in a columned list.
	Row
	// RowGroup: unused
	RowGroup
	// RowHeader: unused
	RowHeader
	// Scrollbar: graphical object that controls the scrolling of content within
	// a viewing area, regardless of whether the content is fully displayed
	// within the viewing area.
	Scrollbar
	// Search: unused
	Search
	// SearchBox: type of textbox intended for specifying search criteria.
	SearchBox
	// Section: abstract role.
	Section
	// SectionHead: abstract role.
	SectionHead
	// Select: abstract role.
	Select
	// Separator: divider that separates and distinguishes sections of content
	// or groups of menuitems.
	Separator
	// Slider: user input where the user selects a value from within a given
	// range.
	Slider
	// SpinButton: form of range that expects the user to select from among
	// discrete choices.
	SpinButton
	// Status: unused
	Status
	// Structure: abstract role.
	Structure
	// Switch: type of checkbox that represents on/off values, as opposed to
	// checked/unchecked values.
	Switch
	// Tab: item in a list of tab used for switching pages.
	Tab
	// Table: unused
	Table
	// TabList: list of tabs for switching pages.
	TabList
	// TabPanel: page in a notebook or stack.
	TabPanel
	// TextBox: type of input that allows free-form text as its value.
	TextBox
	// Time: unused
	Time
	// Timer: unused
	Timer
	// Toolbar: unused
	Toolbar
	// Tooltip: unused
	Tooltip
	// Tree: unused
	Tree
	// TreeGrid: treeview-like, columned list.
	TreeGrid
	// TreeItem: unused
	TreeItem
	// Widget: interactive component of a graphical user interface. This is the
	// role that GTK uses by default for widgets.
	Widget
	// Window: application window.
	Window
)

func marshalAccessibleRole(p uintptr) (interface{}, error) {
	return AccessibleRole(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// AccessibleSort: the possible values for the GTK_ACCESSIBLE_PROPERTY_SORT
// accessible property.
type AccessibleSort int

const (
	// None: there is no defined sort applied to the column.
	None AccessibleSort = iota
	// Ascending items are sorted in ascending order by this column.
	Ascending
	// Descending items are sorted in descending order by this column.
	Descending
	// Other: sort algorithm other than ascending or descending has been
	// applied.
	Other
)

func marshalAccessibleSort(p uintptr) (interface{}, error) {
	return AccessibleSort(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// AccessibleState: the possible accessible states of a `GtkAccessible`.
type AccessibleState int

const (
	// Busy: “busy” state. This state has boolean values
	Busy AccessibleState = iota
	// Checked: “checked” state; indicates the current state of a CheckButton.
	// Value type: AccessibleTristate
	Checked
	// Disabled: “disabled” state; corresponds to the Widget:sensitive property
	// on Widget. It indicates a UI element that is perceivable, but not
	// editable or operable. Value type: boolean
	Disabled
	// Expanded: “expanded” state; corresponds to the Expander:expanded property
	// on Expander. Value type: boolean or undefined
	Expanded
	// Hidden: “hidden” state; corresponds to the Widget:visible property on
	// Widget. You can use this state explicitly on UI elements that should not
	// be exposed to an assistive technology. Value type: boolean See also:
	// GTK_ACCESSIBLE_STATE_DISABLED
	Hidden
	// Invalid: “invalid” state; set when a widget is showing an error. Value
	// type: AccessibleInvalidState
	Invalid
	// Pressed: “pressed” state; indicates the current state of a ToggleButton.
	// Value type: AccessibleTristate enumeration
	Pressed
	// Selected: “selected” state; set when a widget is selected. Value type:
	// boolean or undefined
	Selected
)

func marshalAccessibleState(p uintptr) (interface{}, error) {
	return AccessibleState(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// AccessibleTristate: the possible values for the GTK_ACCESSIBLE_STATE_PRESSED
// accessible state.
//
// Note that the GTK_ACCESSIBLE_TRISTATE_FALSE and GTK_ACCESSIBLE_TRISTATE_TRUE
// have the same values as false and true.
type AccessibleTristate int

const (
	// False: the state is `false`
	False AccessibleTristate = iota
	// True: the state is `true`
	True
	// Mixed: the state is `mixed`
	Mixed
)

func marshalAccessibleTristate(p uintptr) (interface{}, error) {
	return AccessibleTristate(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// Align controls how a widget deals with extra space in a single dimension.
//
// Alignment only matters if the widget receives a “too large” allocation, for
// example if you packed the widget with the [property@Gtk.Widget:hexpand]
// property inside a `GtkBox`, then the widget might get extra space. If you
// have for example a 16x16 icon inside a 32x32 space, the icon could be scaled
// and stretched, it could be centered, or it could be positioned to one side of
// the space.
//
// Note that in horizontal context GTK_ALIGN_START and GTK_ALIGN_END are
// interpreted relative to text direction.
//
// GTK_ALIGN_BASELINE support is optional for containers and widgets, and it is
// only supported for vertical alignment. When it's not supported by a child or
// a container it is treated as GTK_ALIGN_FILL.
type Align int

const (
	// Fill: stretch to fill all space if possible, center if no meaningful way
	// to stretch
	Fill Align = iota
	// Start: snap to left or top side, leaving space on right or bottom
	Start
	// End: snap to right or bottom side, leaving space on left or top
	End
	// Center natural width of widget inside the allocation
	Center
	// Baseline: align the widget according to the baseline. See Widget
	Baseline
)

func marshalAlign(p uintptr) (interface{}, error) {
	return Align(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// ArrowType: used to indicate the direction in which an arrow should point.
type ArrowType int

const (
	// Up represents an upward pointing arrow.
	Up ArrowType = iota
	// Down represents a downward pointing arrow.
	Down
	// Left represents a left pointing arrow.
	Left
	// Right represents a right pointing arrow.
	Right
	// None: no arrow.
	None
)

func marshalArrowType(p uintptr) (interface{}, error) {
	return ArrowType(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// BaselinePosition: baseline position in a row of widgets.
//
// Whenever a container has some form of natural row it may align children in
// that row along a common typographical baseline. If the amount of vertical
// space in the row is taller than the total requested height of the
// baseline-aligned children then it can use a `GtkBaselinePosition` to select
// where to put the baseline inside the extra available space.
type BaselinePosition int

const (
	// Top: align the baseline at the top
	Top BaselinePosition = iota
	// Center: center the baseline
	Center
	// Bottom: align the baseline at the bottom
	Bottom
)

func marshalBaselinePosition(p uintptr) (interface{}, error) {
	return BaselinePosition(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// BorderStyle describes how the border of a UI element should be rendered.
type BorderStyle int

const (
	// None: no visible border
	None BorderStyle = iota
	// Hidden: same as GTK_BORDER_STYLE_NONE
	Hidden
	// Solid: single line segment
	Solid
	// Inset looks as if the content is sunken into the canvas
	Inset
	// Outset looks as if the content is coming out of the canvas
	Outset
	// Dotted series of round dots
	Dotted
	// Dashed series of square-ended dashes
	Dashed
	// Double: two parallel lines with some space between them
	Double
	// Groove looks as if it were carved in the canvas
	Groove
	// Ridge looks as if it were coming out of the canvas
	Ridge
)

func marshalBorderStyle(p uintptr) (interface{}, error) {
	return BorderStyle(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// ConstraintAttribute: the widget attributes that can be used when creating a
// `GtkConstraint`.
type ConstraintAttribute int

const (
	// None: no attribute, used for constant relations
	None ConstraintAttribute = iota
	// Left: the left edge of a widget, regardless of text direction
	Left
	// Right: the right edge of a widget, regardless of text direction
	Right
	// Top: the top edge of a widget
	Top
	// Bottom: the bottom edge of a widget
	Bottom
	// Start: the leading edge of a widget, depending on text direction;
	// equivalent to GTK_CONSTRAINT_ATTRIBUTE_LEFT for LTR languages, and
	// GTK_CONSTRAINT_ATTRIBUTE_RIGHT for RTL ones
	Start
	// End: the trailing edge of a widget, depending on text direction;
	// equivalent to GTK_CONSTRAINT_ATTRIBUTE_RIGHT for LTR languages, and
	// GTK_CONSTRAINT_ATTRIBUTE_LEFT for RTL ones
	End
	// Width: the width of a widget
	Width
	// Height: the height of a widget
	Height
	// CenterX: the center of a widget, on the horizontal axis
	CenterX
	// CenterY: the center of a widget, on the vertical axis
	CenterY
	// Baseline: the baseline of a widget
	Baseline
)

func marshalConstraintAttribute(p uintptr) (interface{}, error) {
	return ConstraintAttribute(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// ConstraintRelation: the relation between two terms of a constraint.
type ConstraintRelation int

const (
	// Le less than, or equal
	Le ConstraintRelation = -1
	// Eq: equal
	Eq ConstraintRelation = 0
	// Ge: greater than, or equal
	Ge ConstraintRelation = 1
)

func marshalConstraintRelation(p uintptr) (interface{}, error) {
	return ConstraintRelation(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// ConstraintStrength: the strength of a constraint, expressed as a symbolic
// constant.
//
// The strength of a Constraint can be expressed with any positive integer; the
// values of this enumeration can be used for readability.
type ConstraintStrength int

const (
	// Required: the constraint is required towards solving the layout
	Required ConstraintStrength = 1001001000
	// Strong constraint
	Strong ConstraintStrength = 1000000000
	// Medium constraint
	Medium ConstraintStrength = 1000
	// Weak constraint
	Weak ConstraintStrength = 1
)

func marshalConstraintStrength(p uintptr) (interface{}, error) {
	return ConstraintStrength(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// ConstraintVflParserError: domain for VFL parsing errors.
type ConstraintVflParserError int

const (
	// Symbol: invalid or unknown symbol
	Symbol ConstraintVflParserError = iota
	// Attribute: invalid or unknown attribute
	Attribute
	// View: invalid or unknown view
	View
	// Metric: invalid or unknown metric
	Metric
	// Priority: invalid or unknown priority
	Priority
	// Relation: invalid or unknown relation
	Relation
)

func marshalConstraintVflParserError(p uintptr) (interface{}, error) {
	return ConstraintVflParserError(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// DeleteType: passed to various keybinding signals for deleting text.
type DeleteType int

const (
	// Chars: delete characters.
	Chars DeleteType = iota
	// WordEnds: delete only the portion of the word to the left/right of cursor
	// if we’re in the middle of a word.
	WordEnds
	// Words: delete words.
	Words
	// DisplayLines: delete display-lines. Display-lines refers to the visible
	// lines, with respect to the current line breaks. As opposed to paragraphs,
	// which are defined by line breaks in the input.
	DisplayLines
	// DisplayLineEnds: delete only the portion of the display-line to the
	// left/right of cursor.
	DisplayLineEnds
	// ParagraphEnds: delete to the end of the paragraph. Like C-k in Emacs (or
	// its reverse).
	ParagraphEnds
	// Paragraphs: delete entire line. Like C-k in pico.
	Paragraphs
	// Whitespace: delete only whitespace. Like M-\ in Emacs.
	Whitespace
)

func marshalDeleteType(p uintptr) (interface{}, error) {
	return DeleteType(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// DirectionType focus movement types.
type DirectionType int

const (
	// TabForward: move forward.
	TabForward DirectionType = iota
	// TabBackward: move backward.
	TabBackward
	// Up: move up.
	Up
	// Down: move down.
	Down
	// Left: move left.
	Left
	// Right: move right.
	Right
)

func marshalDirectionType(p uintptr) (interface{}, error) {
	return DirectionType(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// EventSequenceState describes the state of a `GdkEventSequence` in a
// `GtkGesture`.
type EventSequenceState int

const (
	// None: the sequence is handled, but not grabbed.
	None EventSequenceState = iota
	// Claimed: the sequence is handled and grabbed.
	Claimed
	// Denied: the sequence is denied.
	Denied
)

func marshalEventSequenceState(p uintptr) (interface{}, error) {
	return EventSequenceState(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// IconSize: built-in icon sizes.
//
// Icon sizes default to being inherited. Where they cannot be inherited, text
// size is the default.
//
// All widgets which use `GtkIconSize` set the normal-icons or large-icons style
// classes correspondingly, and let themes determine the actual size to be used
// with the `-gtk-icon-size` CSS property.
type IconSize int

const (
	// Inherit: keep the size of the parent element
	Inherit IconSize = iota
	// Normal: size similar to text size
	Normal
	// Large: large size, for example in an icon view
	Large
)

func marshalIconSize(p uintptr) (interface{}, error) {
	return IconSize(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// InputPurpose describes primary purpose of the input widget.
//
// This information is useful for on-screen keyboards and similar input methods
// to decide which keys should be presented to the user.
//
// Note that the purpose is not meant to impose a totally strict rule about
// allowed characters, and does not replace input validation. It is fine for an
// on-screen keyboard to let the user override the character set restriction
// that is expressed by the purpose. The application is expected to validate the
// entry contents, even if it specified a purpose.
//
// The difference between GTK_INPUT_PURPOSE_DIGITS and GTK_INPUT_PURPOSE_NUMBER
// is that the former accepts only digits while the latter also some punctuation
// (like commas or points, plus, minus) and “e” or “E” as in 3.14E+000.
//
// This enumeration may be extended in the future; input methods should
// interpret unknown values as “free form”.
type InputPurpose int

const (
	// FreeForm: allow any character
	FreeForm InputPurpose = iota
	// Alpha: allow only alphabetic characters
	Alpha
	// Digits: allow only digits
	Digits
	// Number: edited field expects numbers
	Number
	// Phone: edited field expects phone number
	Phone
	// URL: edited field expects URL
	URL
	// Email: edited field expects email address
	Email
	// Name: edited field expects the name of a person
	Name
	// Password: like GTK_INPUT_PURPOSE_FREE_FORM, but characters are hidden
	Password
	// Pin: like GTK_INPUT_PURPOSE_DIGITS, but characters are hidden
	Pin
	// Terminal: allow any character, in addition to control codes
	Terminal
)

func marshalInputPurpose(p uintptr) (interface{}, error) {
	return InputPurpose(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// Justification: used for justifying the text inside a `GtkLabel` widget.
type Justification int

const (
	// Left: the text is placed at the left edge of the label.
	Left Justification = iota
	// Right: the text is placed at the right edge of the label.
	Right
	// Center: the text is placed in the center of the label.
	Center
	// Fill: the text is placed is distributed across the label.
	Fill
)

func marshalJustification(p uintptr) (interface{}, error) {
	return Justification(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// LevelBarMode describes how `GtkLevelBar` contents should be rendered.
//
// Note that this enumeration could be extended with additional modes in the
// future.
type LevelBarMode int

const (
	// Continuous: the bar has a continuous mode
	Continuous LevelBarMode = iota
	// Discrete: the bar has a discrete mode
	Discrete
)

func marshalLevelBarMode(p uintptr) (interface{}, error) {
	return LevelBarMode(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// MessageType: the type of message being displayed in a `GtkMessageDialog`.
type MessageType int

const (
	// Info: informational message
	Info MessageType = iota
	// Warning: non-fatal warning message
	Warning
	// Question: question requiring a choice
	Question
	// Error: fatal error message
	Error
	// Other: none of the above
	Other
)

func marshalMessageType(p uintptr) (interface{}, error) {
	return MessageType(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// MovementStep: passed as argument to various keybinding signals for moving the
// cursor position.
type MovementStep int

const (
	// LogicalPositions: move forward or back by graphemes
	LogicalPositions MovementStep = iota
	// VisualPositions: move left or right by graphemes
	VisualPositions
	// Words: move forward or back by words
	Words
	// DisplayLines: move up or down lines (wrapped lines)
	DisplayLines
	// DisplayLineEnds: move to either end of a line
	DisplayLineEnds
	// Paragraphs: move up or down paragraphs (newline-ended lines)
	Paragraphs
	// ParagraphEnds: move to either end of a paragraph
	ParagraphEnds
	// Pages: move by pages
	Pages
	// BufferEnds: move to ends of the buffer
	BufferEnds
	// HorizontalPages: move horizontally by pages
	HorizontalPages
)

func marshalMovementStep(p uintptr) (interface{}, error) {
	return MovementStep(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// NumberUpLayout: used to determine the layout of pages on a sheet when
// printing multiple pages per sheet.
type NumberUpLayout int

const (
	// Lrtb: ! (layout-lrtb.png)
	Lrtb NumberUpLayout = iota
	// Lrbt: ! (layout-lrbt.png)
	Lrbt
	// Rltb: ! (layout-rltb.png)
	Rltb
	// Rlbt: ! (layout-rlbt.png)
	Rlbt
	// Tblr: ! (layout-tblr.png)
	Tblr
	// Tbrl: ! (layout-tbrl.png)
	Tbrl
	// Btlr: ! (layout-btlr.png)
	Btlr
	// Btrl: ! (layout-btrl.png)
	Btrl
)

func marshalNumberUpLayout(p uintptr) (interface{}, error) {
	return NumberUpLayout(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// Ordering describes the way two values can be compared.
//
// These values can be used with a `GCompareFunc`. However, a `GCompareFunc` is
// allowed to return any integer values. For converting such a value to a
// `GtkOrdering` value, use [func@Gtk.Ordering.from_cmpfunc].
type Ordering int

const (
	// Smaller: the first value is smaller than the second
	Smaller Ordering = -1
	// Equal: the two values are equal
	Equal Ordering = 0
	// Larger: the first value is larger than the second
	Larger Ordering = 1
)

func marshalOrdering(p uintptr) (interface{}, error) {
	return Ordering(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// Orientation represents the orientation of widgets and other objects.
//
// Typical examples are `GtkBox or `GtkGesturePan`.
type Orientation int

const (
	// Horizontal: the element is in horizontal orientation.
	Horizontal Orientation = iota
	// Vertical: the element is in vertical orientation.
	Vertical
)

func marshalOrientation(p uintptr) (interface{}, error) {
	return Orientation(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// Overflow defines how content overflowing a given area should be handled.
//
// This is used in [method@Gtk.Widget.set_overflow]. The
// [property@Gtk.Widget:overflow] property is modeled after the CSS overflow
// property, but implements it only partially.
type Overflow int

const (
	// Visible: no change is applied. Content is drawn at the specified
	// position.
	Visible Overflow = iota
	// Hidden: content is clipped to the bounds of the area. Content outside the
	// area is not drawn and cannot be interacted with.
	Hidden
)

func marshalOverflow(p uintptr) (interface{}, error) {
	return Overflow(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// PackType represents the packing location of a children in its parent.
//
// See `GtkWindowControls` for example.
type PackType int

const (
	// Start: the child is packed into the start of the widget
	Start PackType = iota
	// End: the child is packed into the end of the widget
	End
)

func marshalPackType(p uintptr) (interface{}, error) {
	return PackType(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// PageOrientation: see also gtk_print_settings_set_orientation().
type PageOrientation int

const (
	// Portrait: portrait mode.
	Portrait PageOrientation = iota
	// Landscape: landscape mode.
	Landscape
	// ReversePortrait: reverse portrait mode.
	ReversePortrait
	// ReverseLandscape: reverse landscape mode.
	ReverseLandscape
)

func marshalPageOrientation(p uintptr) (interface{}, error) {
	return PageOrientation(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// PageSet: see also gtk_print_job_set_page_set().
type PageSet int

const (
	// All: all pages.
	All PageSet = iota
	// Even: even pages.
	Even
	// Odd: odd pages.
	Odd
)

func marshalPageSet(p uintptr) (interface{}, error) {
	return PageSet(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// PanDirection describes the panning direction of a `GtkGesturePan`
type PanDirection int

const (
	// Left: panned towards the left
	Left PanDirection = iota
	// Right: panned towards the right
	Right
	// Up: panned upwards
	Up
	// Down: panned downwards
	Down
)

func marshalPanDirection(p uintptr) (interface{}, error) {
	return PanDirection(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// PositionType describes which edge of a widget a certain feature is positioned
// at.
//
// For examples, see the tabs of a `GtkNotebook`, or the label of a `GtkScale`.
type PositionType int

const (
	// Left: the feature is at the left edge.
	Left PositionType = iota
	// Right: the feature is at the right edge.
	Right
	// Top: the feature is at the top edge.
	Top
	// Bottom: the feature is at the bottom edge.
	Bottom
)

func marshalPositionType(p uintptr) (interface{}, error) {
	return PositionType(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// PrintDuplex: see also gtk_print_settings_set_duplex().
type PrintDuplex int

const (
	// Simplex: no duplex.
	Simplex PrintDuplex = iota
	// Horizontal: horizontal duplex.
	Horizontal
	// Vertical: vertical duplex.
	Vertical
)

func marshalPrintDuplex(p uintptr) (interface{}, error) {
	return PrintDuplex(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// PrintPages: see also gtk_print_job_set_pages()
type PrintPages int

const (
	// All: all pages.
	All PrintPages = iota
	// Current: current page.
	Current
	// Ranges: range of pages.
	Ranges
	// Selection: selected pages.
	Selection
)

func marshalPrintPages(p uintptr) (interface{}, error) {
	return PrintPages(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// PrintQuality: see also gtk_print_settings_set_quality().
type PrintQuality int

const (
	// Low: low quality.
	Low PrintQuality = iota
	// Normal: normal quality.
	Normal
	// High: high quality.
	High
	// Draft: draft quality.
	Draft
)

func marshalPrintQuality(p uintptr) (interface{}, error) {
	return PrintQuality(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// PropagationLimit describes limits of a `GtkEventController` for handling
// events targeting other widgets.
type PropagationLimit int

const (
	// None events are handled regardless of what their target is.
	None PropagationLimit = iota
	// SameNative events are only handled if their target is in the same Native
	// as the event controllers widget. Note that some event types have two
	// targets (origin and destination).
	SameNative
)

func marshalPropagationLimit(p uintptr) (interface{}, error) {
	return PropagationLimit(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// PropagationPhase describes the stage at which events are fed into a
// `GtkEventController`.
type PropagationPhase int

const (
	// None events are not delivered.
	None PropagationPhase = iota
	// Capture events are delivered in the capture phase. The capture phase
	// happens before the bubble phase, runs from the toplevel down to the event
	// widget. This option should only be used on containers that might possibly
	// handle events before their children do.
	Capture
	// Bubble events are delivered in the bubble phase. The bubble phase happens
	// after the capture phase, and before the default handlers are run. This
	// phase runs from the event widget, up to the toplevel.
	Bubble
	// Target events are delivered in the default widget event handlers, note
	// that widget implementations must chain up on button, motion, touch and
	// grab broken handlers for controllers in this phase to be run.
	Target
)

func marshalPropagationPhase(p uintptr) (interface{}, error) {
	return PropagationPhase(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// ScrollStep: passed as argument to various keybinding signals.
type ScrollStep int

const (
	// Steps: scroll in steps.
	Steps ScrollStep = iota
	// Pages: scroll by pages.
	Pages
	// Ends: scroll to ends.
	Ends
	// HorizontalSteps: scroll in horizontal steps.
	HorizontalSteps
	// HorizontalPages: scroll by horizontal pages.
	HorizontalPages
	// HorizontalEnds: scroll to the horizontal ends.
	HorizontalEnds
)

func marshalScrollStep(p uintptr) (interface{}, error) {
	return ScrollStep(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// ScrollType: scrolling types.
type ScrollType int

const (
	// None: no scrolling.
	None ScrollType = iota
	// Jump: jump to new location.
	Jump
	// StepBackward: step backward.
	StepBackward
	// StepForward: step forward.
	StepForward
	// PageBackward: page backward.
	PageBackward
	// PageForward: page forward.
	PageForward
	// StepUp: step up.
	StepUp
	// StepDown: step down.
	StepDown
	// PageUp: page up.
	PageUp
	// PageDown: page down.
	PageDown
	// StepLeft: step to the left.
	StepLeft
	// StepRight: step to the right.
	StepRight
	// PageLeft: page to the left.
	PageLeft
	// PageRight: page to the right.
	PageRight
	// Start: scroll to start.
	Start
	// End: scroll to end.
	End
)

func marshalScrollType(p uintptr) (interface{}, error) {
	return ScrollType(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// ScrollablePolicy defines the policy to be used in a scrollable widget when
// updating the scrolled window adjustments in a given orientation.
type ScrollablePolicy int

const (
	// Minimum: scrollable adjustments are based on the minimum size
	Minimum ScrollablePolicy = iota
	// Natural: scrollable adjustments are based on the natural size
	Natural
)

func marshalScrollablePolicy(p uintptr) (interface{}, error) {
	return ScrollablePolicy(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// SelectionMode: used to control what selections users are allowed to make.
type SelectionMode int

const (
	// None: no selection is possible.
	None SelectionMode = iota
	// Single: zero or one element may be selected.
	Single
	// Browse: exactly one element is selected. In some circumstances, such as
	// initially or during a search operation, it’s possible for no element to
	// be selected with GTK_SELECTION_BROWSE. What is really enforced is that
	// the user can’t deselect a currently selected element except by selecting
	// another element.
	Browse
	// Multiple: any number of elements may be selected. The Ctrl key may be
	// used to enlarge the selection, and Shift key to select between the focus
	// and the child pointed to. Some widgets may also allow Click-drag to
	// select a range of elements.
	Multiple
)

func marshalSelectionMode(p uintptr) (interface{}, error) {
	return SelectionMode(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// SensitivityType determines how GTK handles the sensitivity of various
// controls, such as combo box buttons.
type SensitivityType int

const (
	// Auto: the control is made insensitive if no action can be triggered
	Auto SensitivityType = iota
	// On: the control is always sensitive
	On
	// Off: the control is always insensitive
	Off
)

func marshalSensitivityType(p uintptr) (interface{}, error) {
	return SensitivityType(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// ShortcutScope describes where `GtkShortcut`s added to a
// `GtkShortcutController` get handled.
type ShortcutScope int

const (
	// Local shortcuts are handled inside the widget the controller belongs to.
	Local ShortcutScope = iota
	// Managed shortcuts are handled by the first ancestor that is a
	// ShortcutManager
	Managed
	// Global shortcuts are handled by the root widget.
	Global
)

func marshalShortcutScope(p uintptr) (interface{}, error) {
	return ShortcutScope(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// SizeGroupMode: the mode of the size group determines the directions in which
// the size group affects the requested sizes of its component widgets.
type SizeGroupMode int

const (
	// None: group has no effect
	None SizeGroupMode = iota
	// Horizontal: group affects horizontal requisition
	Horizontal
	// Vertical: group affects vertical requisition
	Vertical
	// Both: group affects both horizontal and vertical requisition
	Both
)

func marshalSizeGroupMode(p uintptr) (interface{}, error) {
	return SizeGroupMode(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// SizeRequestMode specifies a preference for height-for-width or
// width-for-height geometry management.
type SizeRequestMode int

const (
	// HeightForWidth: prefer height-for-width geometry management
	HeightForWidth SizeRequestMode = iota
	// WidthForHeight: prefer width-for-height geometry management
	WidthForHeight
	// ConstantSize: don’t trade height-for-width or width-for-height
	ConstantSize
)

func marshalSizeRequestMode(p uintptr) (interface{}, error) {
	return SizeRequestMode(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// SortType determines the direction of a sort.
type SortType int

const (
	// Ascending: sorting is in ascending order.
	Ascending SortType = iota
	// Descending: sorting is in descending order.
	Descending
)

func marshalSortType(p uintptr) (interface{}, error) {
	return SortType(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// SystemSetting values that can be passed to the
// GtkWidgetClass.system_setting_changed vfunc.
//
// The values indicate which system setting has changed. Widgets may need to
// drop caches, or react otherwise.
//
// Most of the values correspond to `GtkSettings` properties.
//
// More values may be added over time.
type SystemSetting int

const (
	// DPI: the Settings:gtk-xft-dpi setting has changed
	DPI SystemSetting = iota
	// FontName: the Settings:gtk-font-name setting has changed
	FontName
	// FontConfig: the font configuration has changed in a way that requires
	// text to be redrawn. This can be any of the Settings:gtk-xft-antialias,
	// Settings:gtk-xft-hinting, Settings:gtk-xft-hintstyle,
	// Settings:gtk-xft-rgba or Settings:gtk-fontconfig-timestamp settings
	FontConfig
	// Display: the display has changed
	Display
	// IconTheme: the icon theme has changed in a way that requires icons to be
	// looked up again
	IconTheme
)

func marshalSystemSetting(p uintptr) (interface{}, error) {
	return SystemSetting(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// TextDirection: reading directions for text.
type TextDirection int

const (
	// None: no direction.
	None TextDirection = iota
	// LTR: left to right text direction.
	LTR
	// RTL: right to left text direction.
	RTL
)

func marshalTextDirection(p uintptr) (interface{}, error) {
	return TextDirection(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// TreeViewGridLines: used to indicate which grid lines to draw in a tree view.
type TreeViewGridLines int

const (
	// None: no grid lines.
	None TreeViewGridLines = iota
	// Horizontal: horizontal grid lines.
	Horizontal
	// Vertical: vertical grid lines.
	Vertical
	// Both: horizontal and vertical grid lines.
	Both
)

func marshalTreeViewGridLines(p uintptr) (interface{}, error) {
	return TreeViewGridLines(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// Unit: see also gtk_print_settings_set_paper_width().
type Unit int

const (
	// None: no units.
	None Unit = iota
	// Points dimensions in points.
	Points
	// Inch dimensions in inches.
	Inch
	// Mm dimensions in millimeters
	Mm
)

func marshalUnit(p uintptr) (interface{}, error) {
	return Unit(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// WrapMode describes a type of line wrapping.
type WrapMode int

const (
	// None: do not wrap lines; just make the text area wider
	None WrapMode = iota
	// Char: wrap text, breaking lines anywhere the cursor can appear (between
	// characters, usually - if you want to be technical, between graphemes, see
	// pango_get_log_attrs())
	Char
	// Word: wrap text, breaking lines in between words
	Word
	// WordChar: wrap text, breaking lines in between words, or if that is not
	// enough, also between graphemes
	WordChar
)

func marshalWrapMode(p uintptr) (interface{}, error) {
	return WrapMode(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// InputHints describes hints that might be taken into account by input methods
// or applications.
//
// Note that input methods may already tailor their behaviour according to the
// `GtkInputPurpose` of the entry.
//
// Some common sense is expected when using these flags - mixing
// GTK_INPUT_HINT_LOWERCASE with any of the uppercase hints makes no sense.
//
// This enumeration may be extended in the future; input methods should ignore
// unknown values.
type InputHints int

const (
	// InputHintsNone: no special behaviour suggested
	InputHintsNone InputHints = 0b0
	// InputHintsSpellcheck: suggest checking for typos
	InputHintsSpellcheck InputHints = 0b1
	// InputHintsNoSpellcheck: suggest not checking for typos
	InputHintsNoSpellcheck InputHints = 0b10
	// InputHintsWordCompletion: suggest word completion
	InputHintsWordCompletion InputHints = 0b100
	// InputHintsLowercase: suggest to convert all text to lowercase
	InputHintsLowercase InputHints = 0b1000
	// InputHintsUppercaseChars: suggest to capitalize all text
	InputHintsUppercaseChars InputHints = 0b10000
	// InputHintsUppercaseWords: suggest to capitalize the first character of
	// each word
	InputHintsUppercaseWords InputHints = 0b100000
	// InputHintsUppercaseSentences: suggest to capitalize the first word of
	// each sentence
	InputHintsUppercaseSentences InputHints = 0b1000000
	// InputHintsInhibitOsk: suggest to not show an onscreen keyboard (e.g for a
	// calculator that already has all the keys).
	InputHintsInhibitOsk InputHints = 0b10000000
	// InputHintsVerticalWriting: the text is vertical
	InputHintsVerticalWriting InputHints = 0b100000000
	// InputHintsEmoji: suggest offering Emoji support
	InputHintsEmoji InputHints = 0b1000000000
	// InputHintsNoEmoji: suggest not offering Emoji support
	InputHintsNoEmoji InputHints = 0b10000000000
	// InputHintsPrivate: request that the input method should not update
	// personalized data (like typing history)
	InputHintsPrivate InputHints = 0b100000000000
)

func marshalInputHints(p uintptr) (interface{}, error) {
	return InputHints(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// PickFlags flags that influence the behavior of gtk_widget_pick().
type PickFlags int

const (
	// PickFlagsDefault: the default behavior, include widgets that are
	// receiving events
	PickFlagsDefault PickFlags = 0b0
	// PickFlagsInsensitive: include widgets that are insensitive
	PickFlagsInsensitive PickFlags = 0b1
	// PickFlagsNonTargetable: include widgets that are marked as
	// non-targetable. See Widget:can-target
	PickFlagsNonTargetable PickFlags = 0b10
)

func marshalPickFlags(p uintptr) (interface{}, error) {
	return PickFlags(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// StateFlags describes a widget state.
//
// Widget states are used to match the widget against CSS pseudo-classes. Note
// that GTK extends the regular CSS classes and sometimes uses different names.
type StateFlags int

const (
	// StateFlagsNormal: state during normal operation
	StateFlagsNormal StateFlags = 0b0
	// StateFlagsActive: widget is active
	StateFlagsActive StateFlags = 0b1
	// StateFlagsPrelight: widget has a mouse pointer over it
	StateFlagsPrelight StateFlags = 0b10
	// StateFlagsSelected: widget is selected
	StateFlagsSelected StateFlags = 0b100
	// StateFlagsInsensitive: widget is insensitive
	StateFlagsInsensitive StateFlags = 0b1000
	// StateFlagsInconsistent: widget is inconsistent
	StateFlagsInconsistent StateFlags = 0b10000
	// StateFlagsFocused: widget has the keyboard focus
	StateFlagsFocused StateFlags = 0b100000
	// StateFlagsBackdrop: widget is in a background toplevel window
	StateFlagsBackdrop StateFlags = 0b1000000
	// StateFlagsDirLTR: widget is in left-to-right text direction
	StateFlagsDirLTR StateFlags = 0b10000000
	// StateFlagsDirRTL: widget is in right-to-left text direction
	StateFlagsDirRTL StateFlags = 0b100000000
	// StateFlagsLink: widget is a link
	StateFlagsLink StateFlags = 0b1000000000
	// StateFlagsVisited: the location the widget points to has already been
	// visited
	StateFlagsVisited StateFlags = 0b10000000000
	// StateFlagsChecked: widget is checked
	StateFlagsChecked StateFlags = 0b100000000000
	// StateFlagsDropActive: widget is highlighted as a drop target for DND
	StateFlagsDropActive StateFlags = 0b1000000000000
	// StateFlagsFocusVisible: widget has the visible focus
	StateFlagsFocusVisible StateFlags = 0b10000000000000
	// StateFlagsFocusWithin: widget contains the keyboard focus
	StateFlagsFocusWithin StateFlags = 0b100000000000000
)

func marshalStateFlags(p uintptr) (interface{}, error) {
	return StateFlags(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}
