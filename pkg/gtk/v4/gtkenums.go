// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_accessible_autocomplete_get_type()), F: marshalAccessibleAutocomplete},
		{T: externglib.Type(C.gtk_accessible_invalid_state_get_type()), F: marshalAccessibleInvalidState},
		{T: externglib.Type(C.gtk_accessible_property_get_type()), F: marshalAccessibleProperty},
		{T: externglib.Type(C.gtk_accessible_relation_get_type()), F: marshalAccessibleRelation},
		{T: externglib.Type(C.gtk_accessible_role_get_type()), F: marshalAccessibleRole},
		{T: externglib.Type(C.gtk_accessible_sort_get_type()), F: marshalAccessibleSort},
		{T: externglib.Type(C.gtk_accessible_state_get_type()), F: marshalAccessibleState},
		{T: externglib.Type(C.gtk_accessible_tristate_get_type()), F: marshalAccessibleTristate},
		{T: externglib.Type(C.gtk_align_get_type()), F: marshalAlign},
		{T: externglib.Type(C.gtk_arrow_type_get_type()), F: marshalArrowType},
		{T: externglib.Type(C.gtk_baseline_position_get_type()), F: marshalBaselinePosition},
		{T: externglib.Type(C.gtk_border_style_get_type()), F: marshalBorderStyle},
		{T: externglib.Type(C.gtk_constraint_attribute_get_type()), F: marshalConstraintAttribute},
		{T: externglib.Type(C.gtk_constraint_relation_get_type()), F: marshalConstraintRelation},
		{T: externglib.Type(C.gtk_constraint_strength_get_type()), F: marshalConstraintStrength},
		{T: externglib.Type(C.gtk_constraint_vfl_parser_error_get_type()), F: marshalConstraintVflParserError},
		{T: externglib.Type(C.gtk_delete_type_get_type()), F: marshalDeleteType},
		{T: externglib.Type(C.gtk_direction_type_get_type()), F: marshalDirectionType},
		{T: externglib.Type(C.gtk_event_sequence_state_get_type()), F: marshalEventSequenceState},
		{T: externglib.Type(C.gtk_icon_size_get_type()), F: marshalIconSize},
		{T: externglib.Type(C.gtk_input_purpose_get_type()), F: marshalInputPurpose},
		{T: externglib.Type(C.gtk_justification_get_type()), F: marshalJustification},
		{T: externglib.Type(C.gtk_level_bar_mode_get_type()), F: marshalLevelBarMode},
		{T: externglib.Type(C.gtk_message_type_get_type()), F: marshalMessageType},
		{T: externglib.Type(C.gtk_movement_step_get_type()), F: marshalMovementStep},
		{T: externglib.Type(C.gtk_number_up_layout_get_type()), F: marshalNumberUpLayout},
		{T: externglib.Type(C.gtk_ordering_get_type()), F: marshalOrdering},
		{T: externglib.Type(C.gtk_orientation_get_type()), F: marshalOrientation},
		{T: externglib.Type(C.gtk_overflow_get_type()), F: marshalOverflow},
		{T: externglib.Type(C.gtk_pack_type_get_type()), F: marshalPackType},
		{T: externglib.Type(C.gtk_page_orientation_get_type()), F: marshalPageOrientation},
		{T: externglib.Type(C.gtk_page_set_get_type()), F: marshalPageSet},
		{T: externglib.Type(C.gtk_pan_direction_get_type()), F: marshalPanDirection},
		{T: externglib.Type(C.gtk_position_type_get_type()), F: marshalPositionType},
		{T: externglib.Type(C.gtk_print_duplex_get_type()), F: marshalPrintDuplex},
		{T: externglib.Type(C.gtk_print_pages_get_type()), F: marshalPrintPages},
		{T: externglib.Type(C.gtk_print_quality_get_type()), F: marshalPrintQuality},
		{T: externglib.Type(C.gtk_propagation_limit_get_type()), F: marshalPropagationLimit},
		{T: externglib.Type(C.gtk_propagation_phase_get_type()), F: marshalPropagationPhase},
		{T: externglib.Type(C.gtk_scroll_step_get_type()), F: marshalScrollStep},
		{T: externglib.Type(C.gtk_scroll_type_get_type()), F: marshalScrollType},
		{T: externglib.Type(C.gtk_scrollable_policy_get_type()), F: marshalScrollablePolicy},
		{T: externglib.Type(C.gtk_selection_mode_get_type()), F: marshalSelectionMode},
		{T: externglib.Type(C.gtk_sensitivity_type_get_type()), F: marshalSensitivityType},
		{T: externglib.Type(C.gtk_shortcut_scope_get_type()), F: marshalShortcutScope},
		{T: externglib.Type(C.gtk_size_group_mode_get_type()), F: marshalSizeGroupMode},
		{T: externglib.Type(C.gtk_size_request_mode_get_type()), F: marshalSizeRequestMode},
		{T: externglib.Type(C.gtk_sort_type_get_type()), F: marshalSortType},
		{T: externglib.Type(C.gtk_system_setting_get_type()), F: marshalSystemSetting},
		{T: externglib.Type(C.gtk_text_direction_get_type()), F: marshalTextDirection},
		{T: externglib.Type(C.gtk_tree_view_grid_lines_get_type()), F: marshalTreeViewGridLines},
		{T: externglib.Type(C.gtk_unit_get_type()), F: marshalUnit},
		{T: externglib.Type(C.gtk_wrap_mode_get_type()), F: marshalWrapMode},
		{T: externglib.Type(C.gtk_input_hints_get_type()), F: marshalInputHints},
		{T: externglib.Type(C.gtk_pick_flags_get_type()), F: marshalPickFlags},
		{T: externglib.Type(C.gtk_state_flags_get_type()), F: marshalStateFlags},
	})
}

// AccessibleAutocomplete: the possible values for the
// GTK_ACCESSIBLE_PROPERTY_AUTOCOMPLETE accessible property.
type AccessibleAutocomplete int

const (
	// none: automatic suggestions are not displayed.
	AccessibleAutocompleteNone AccessibleAutocomplete = 0
	// inline: when a user is providing input, text suggesting one way to
	// complete the provided input may be dynamically inserted after the caret.
	AccessibleAutocompleteInline AccessibleAutocomplete = 1
	// list: when a user is providing input, an element containing a collection
	// of values that could complete the provided input may be displayed.
	AccessibleAutocompleteList AccessibleAutocomplete = 2
	// both: when a user is providing input, an element containing a collection
	// of values that could complete the provided input may be displayed. If
	// displayed, one value in the collection is automatically selected, and the
	// text needed to complete the automatically selected value appears after
	// the caret in the input.
	AccessibleAutocompleteBoth AccessibleAutocomplete = 3
)

func marshalAccessibleAutocomplete(p uintptr) (interface{}, error) {
	return AccessibleAutocomplete(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// AccessibleInvalidState: the possible values for the
// GTK_ACCESSIBLE_STATE_INVALID accessible state.
//
// Note that the GTK_ACCESSIBLE_INVALID_FALSE and GTK_ACCESSIBLE_INVALID_TRUE
// have the same values as false and true.
type AccessibleInvalidState int

const (
	// false: there are no detected errors in the value
	AccessibleInvalidStateFalse AccessibleInvalidState = 0
	// true: the value entered by the user has failed validation
	AccessibleInvalidStateTrue AccessibleInvalidState = 1
	// grammar: a grammatical error was detected
	AccessibleInvalidStateGrammar AccessibleInvalidState = 2
	// spelling: a spelling error was detected
	AccessibleInvalidStateSpelling AccessibleInvalidState = 3
)

func marshalAccessibleInvalidState(p uintptr) (interface{}, error) {
	return AccessibleInvalidState(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// AccessibleProperty: the possible accessible properties of a `GtkAccessible`.
type AccessibleProperty int

const (
	// autocomplete indicates whether inputting text could trigger display of
	// one or more predictions of the user's intended value for a combobox,
	// searchbox, or textbox and specifies how predictions would be presented if
	// they were made. Value type: AccessibleAutocomplete
	AccessiblePropertyAutocomplete AccessibleProperty = 0
	// description defines a string value that describes or annotates the
	// current element. Value type: string
	AccessiblePropertyDescription AccessibleProperty = 1
	// HasPopup indicates the availability and type of interactive popup
	// element, such as menu or dialog, that can be triggered by an element.
	AccessiblePropertyHasPopup AccessibleProperty = 2
	// KeyShortcuts indicates keyboard shortcuts that an author has implemented
	// to activate or give focus to an element. Value type: string
	AccessiblePropertyKeyShortcuts AccessibleProperty = 3
	// label defines a string value that labels the current element. Value type:
	// string
	AccessiblePropertyLabel AccessibleProperty = 4
	// level defines the hierarchical level of an element within a structure.
	// Value type: integer
	AccessiblePropertyLevel AccessibleProperty = 5
	// modal indicates whether an element is modal when displayed. Value type:
	// boolean
	AccessiblePropertyModal AccessibleProperty = 6
	// MultiLine indicates whether a text box accepts multiple lines of input or
	// only a single line. Value type: boolean
	AccessiblePropertyMultiLine AccessibleProperty = 7
	// MultiSelectable indicates that the user may select more than one item
	// from the current selectable descendants. Value type: boolean
	AccessiblePropertyMultiSelectable AccessibleProperty = 8
	// orientation indicates whether the element's orientation is horizontal,
	// vertical, or unknown/ambiguous. Value type: Orientation
	AccessiblePropertyOrientation AccessibleProperty = 9
	// placeholder defines a short hint (a word or short phrase) intended to aid
	// the user with data entry when the control has no value. A hint could be a
	// sample value or a brief description of the expected format. Value type:
	// string
	AccessiblePropertyPlaceholder AccessibleProperty = 10
	// ReadOnly indicates that the element is not editable, but is otherwise
	// operable. Value type: boolean
	AccessiblePropertyReadOnly AccessibleProperty = 11
	// required indicates that user input is required on the element before a
	// form may be submitted. Value type: boolean
	AccessiblePropertyRequired AccessibleProperty = 12
	// RoleDescription defines a human-readable, author-localized description
	// for the role of an element. Value type: string
	AccessiblePropertyRoleDescription AccessibleProperty = 13
	// sort indicates if items in a table or grid are sorted in ascending or
	// descending order. Possible property values are in the AccessibleSort
	// enumeration. Value type: AccessibleSort
	AccessiblePropertySort AccessibleProperty = 14
	// ValueMax defines the maximum allowed value for a range widget. Value
	// type: double
	AccessiblePropertyValueMax AccessibleProperty = 15
	// ValueMin defines the minimum allowed value for a range widget. Value
	// type: double
	AccessiblePropertyValueMin AccessibleProperty = 16
	// ValueNow defines the current value for a range widget. Value type: double
	AccessiblePropertyValueNow AccessibleProperty = 17
	// ValueText defines the human readable text alternative of aria-valuenow
	// for a range widget. Value type: string
	AccessiblePropertyValueText AccessibleProperty = 18
)

func marshalAccessibleProperty(p uintptr) (interface{}, error) {
	return AccessibleProperty(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// AccessibleRelation: the possible accessible relations of a `GtkAccessible`.
//
// Accessible relations can be references to other widgets, integers or strings.
type AccessibleRelation int

const (
	// ActiveDescendant identifies the currently active element when focus is on
	// a composite widget, combobox, textbox, group, or application. Value type:
	// reference
	AccessibleRelationActiveDescendant AccessibleRelation = 0
	// ColCount defines the total number of columns in a table, grid, or
	// treegrid. Value type: integer
	AccessibleRelationColCount AccessibleRelation = 1
	// ColIndex defines an element's column index or position with respect to
	// the total number of columns within a table, grid, or treegrid. Value
	// type: integer
	AccessibleRelationColIndex AccessibleRelation = 2
	// ColIndexText defines a human readable text alternative of
	// GTK_ACCESSIBLE_RELATION_COL_INDEX. Value type: string
	AccessibleRelationColIndexText AccessibleRelation = 3
	// ColSpan defines the number of columns spanned by a cell or gridcell
	// within a table, grid, or treegrid. Value type: integer
	AccessibleRelationColSpan AccessibleRelation = 4
	// controls identifies the element (or elements) whose contents or presence
	// are controlled by the current element. Value type: reference
	AccessibleRelationControls AccessibleRelation = 5
	// DescribedBy identifies the element (or elements) that describes the
	// object. Value type: reference
	AccessibleRelationDescribedBy AccessibleRelation = 6
	// details identifies the element (or elements) that provide additional
	// information related to the object. Value type: reference
	AccessibleRelationDetails AccessibleRelation = 7
	// ErrorMessage identifies the element that provides an error message for an
	// object. Value type: reference
	AccessibleRelationErrorMessage AccessibleRelation = 8
	// FlowTo identifies the next element (or elements) in an alternate reading
	// order of content which, at the user's discretion, allows assistive
	// technology to override the general default of reading in document source
	// order. Value type: reference
	AccessibleRelationFlowTo AccessibleRelation = 9
	// LabelledBy identifies the element (or elements) that labels the current
	// element. Value type: reference
	AccessibleRelationLabelledBy AccessibleRelation = 10
	// owns identifies an element (or elements) in order to define a visual,
	// functional, or contextual parent/child relationship between elements
	// where the widget hierarchy cannot be used to represent the relationship.
	// Value type: reference
	AccessibleRelationOwns AccessibleRelation = 11
	// PosInSet defines an element's number or position in the current set of
	// listitems or treeitems. Value type: integer
	AccessibleRelationPosInSet AccessibleRelation = 12
	// RowCount defines the total number of rows in a table, grid, or treegrid.
	// Value type: integer
	AccessibleRelationRowCount AccessibleRelation = 13
	// RowIndex defines an element's row index or position with respect to the
	// total number of rows within a table, grid, or treegrid. Value type:
	// integer
	AccessibleRelationRowIndex AccessibleRelation = 14
	// RowIndexText defines a human readable text alternative of aria-rowindex.
	// Value type: string
	AccessibleRelationRowIndexText AccessibleRelation = 15
	// RowSpan defines the number of rows spanned by a cell or gridcell within a
	// table, grid, or treegrid. Value type: integer
	AccessibleRelationRowSpan AccessibleRelation = 16
	// SetSize defines the number of items in the current set of listitems or
	// treeitems. Value type: integer
	AccessibleRelationSetSize AccessibleRelation = 17
)

func marshalAccessibleRelation(p uintptr) (interface{}, error) {
	return AccessibleRelation(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// AccessibleRole: the accessible role for a `GtkAccessible` implementation.
//
// Abstract roles are only used as part of the ontology; application developers
// must not use abstract roles in their code.
type AccessibleRole int

const (
	// alert: an element with important, and usually time-sensitive, information
	AccessibleRoleAlert AccessibleRole = 0
	// AlertDialog: a type of dialog that contains an alert message
	AccessibleRoleAlertDialog AccessibleRole = 1
	// banner: unused
	AccessibleRoleBanner AccessibleRole = 2
	// button: an input element that allows for user-triggered actions when
	// clicked or pressed
	AccessibleRoleButton AccessibleRole = 3
	// caption: unused
	AccessibleRoleCaption AccessibleRole = 4
	// cell: unused
	AccessibleRoleCell AccessibleRole = 5
	// checkbox: a checkable input element that has three possible values:
	// `true`, `false`, or `mixed`
	AccessibleRoleCheckbox AccessibleRole = 6
	// ColumnHeader: a header in a columned list.
	AccessibleRoleColumnHeader AccessibleRole = 7
	// ComboBox: an input that controls another element, such as a list or a
	// grid, that can dynamically pop up to help the user set the value of the
	// input
	AccessibleRoleComboBox AccessibleRole = 8
	// command: abstract role.
	AccessibleRoleCommand AccessibleRole = 9
	// composite: abstract role.
	AccessibleRoleComposite AccessibleRole = 10
	// dialog: a dialog is a window that is designed to interrupt the current
	// processing of an application in order to prompt the user to enter
	// information or require a response.
	AccessibleRoleDialog AccessibleRole = 11
	// document: unused
	AccessibleRoleDocument AccessibleRole = 12
	// feed: unused
	AccessibleRoleFeed AccessibleRole = 13
	// form: unused
	AccessibleRoleForm AccessibleRole = 14
	// generic: unused
	AccessibleRoleGeneric AccessibleRole = 15
	// grid: a grid of items.
	AccessibleRoleGrid AccessibleRole = 16
	// GridCell: an item in a grid or tree grid.
	AccessibleRoleGridCell AccessibleRole = 17
	// group: an element that groups multiple widgets. GTK uses this role for
	// various containers, like Box, Viewport, and HeaderBar.
	AccessibleRoleGroup AccessibleRole = 18
	// heading: unused
	AccessibleRoleHeading AccessibleRole = 19
	// img: an image.
	AccessibleRoleImg AccessibleRole = 20
	// input: abstract role.
	AccessibleRoleInput AccessibleRole = 21
	// label: a visible name or caption for a user interface component.
	AccessibleRoleLabel AccessibleRole = 22
	// landmark: abstract role.
	AccessibleRoleLandmark AccessibleRole = 23
	// legend: unused
	AccessibleRoleLegend AccessibleRole = 24
	// link: a clickable link.
	AccessibleRoleLink AccessibleRole = 25
	// list: a list of items.
	AccessibleRoleList AccessibleRole = 26
	// ListBox: unused.
	AccessibleRoleListBox AccessibleRole = 27
	// ListItem: an item in a list.
	AccessibleRoleListItem AccessibleRole = 28
	// log: unused
	AccessibleRoleLog AccessibleRole = 29
	// main: unused
	AccessibleRoleMain AccessibleRole = 30
	// marquee: unused
	AccessibleRoleMarquee AccessibleRole = 31
	// math: unused
	AccessibleRoleMath AccessibleRole = 32
	// meter: an element that represents a value within a known range.
	AccessibleRoleMeter AccessibleRole = 33
	// menu: a menu.
	AccessibleRoleMenu AccessibleRole = 34
	// MenuBar: a menubar.
	AccessibleRoleMenuBar AccessibleRole = 35
	// MenuItem: an item in a menu.
	AccessibleRoleMenuItem AccessibleRole = 36
	// MenuItemCheckbox: a check item in a menu.
	AccessibleRoleMenuItemCheckbox AccessibleRole = 37
	// MenuItemRadio: a radio item in a menu.
	AccessibleRoleMenuItemRadio AccessibleRole = 38
	// navigation: unused
	AccessibleRoleNavigation AccessibleRole = 39
	// none: an element that is not represented to accessibility technologies.
	AccessibleRoleNone AccessibleRole = 40
	// note: unused
	AccessibleRoleNote AccessibleRole = 41
	// option: unused
	AccessibleRoleOption AccessibleRole = 42
	// presentation: an element that is not represented to accessibility
	// technologies.
	AccessibleRolePresentation AccessibleRole = 43
	// ProgressBar: an element that displays the progress status for tasks that
	// take a long time.
	AccessibleRoleProgressBar AccessibleRole = 44
	// radio: a checkable input in a group of radio roles, only one of which can
	// be checked at a time.
	AccessibleRoleRadio AccessibleRole = 45
	// RadioGroup: unused
	AccessibleRoleRadioGroup AccessibleRole = 46
	// range: abstract role.
	AccessibleRoleRange AccessibleRole = 47
	// region: unused
	AccessibleRoleRegion AccessibleRole = 48
	// row: a row in a columned list.
	AccessibleRoleRow AccessibleRole = 49
	// RowGroup: unused
	AccessibleRoleRowGroup AccessibleRole = 50
	// RowHeader: unused
	AccessibleRoleRowHeader AccessibleRole = 51
	// scrollbar: a graphical object that controls the scrolling of content
	// within a viewing area, regardless of whether the content is fully
	// displayed within the viewing area.
	AccessibleRoleScrollbar AccessibleRole = 52
	// search: unused
	AccessibleRoleSearch AccessibleRole = 53
	// SearchBox: a type of textbox intended for specifying search criteria.
	AccessibleRoleSearchBox AccessibleRole = 54
	// section: abstract role.
	AccessibleRoleSection AccessibleRole = 55
	// SectionHead: abstract role.
	AccessibleRoleSectionHead AccessibleRole = 56
	// select: abstract role.
	AccessibleRoleSelect AccessibleRole = 57
	// separator: a divider that separates and distinguishes sections of content
	// or groups of menuitems.
	AccessibleRoleSeparator AccessibleRole = 58
	// slider: a user input where the user selects a value from within a given
	// range.
	AccessibleRoleSlider AccessibleRole = 59
	// SpinButton: a form of range that expects the user to select from among
	// discrete choices.
	AccessibleRoleSpinButton AccessibleRole = 60
	// status: unused
	AccessibleRoleStatus AccessibleRole = 61
	// structure: abstract role.
	AccessibleRoleStructure AccessibleRole = 62
	// switch: a type of checkbox that represents on/off values, as opposed to
	// checked/unchecked values.
	AccessibleRoleSwitch AccessibleRole = 63
	// tab: an item in a list of tab used for switching pages.
	AccessibleRoleTab AccessibleRole = 64
	// table: unused
	AccessibleRoleTable AccessibleRole = 65
	// TabList: a list of tabs for switching pages.
	AccessibleRoleTabList AccessibleRole = 66
	// TabPanel: a page in a notebook or stack.
	AccessibleRoleTabPanel AccessibleRole = 67
	// TextBox: a type of input that allows free-form text as its value.
	AccessibleRoleTextBox AccessibleRole = 68
	// time: unused
	AccessibleRoleTime AccessibleRole = 69
	// timer: unused
	AccessibleRoleTimer AccessibleRole = 70
	// toolbar: unused
	AccessibleRoleToolbar AccessibleRole = 71
	// tooltip: unused
	AccessibleRoleTooltip AccessibleRole = 72
	// tree: unused
	AccessibleRoleTree AccessibleRole = 73
	// TreeGrid: a treeview-like, columned list.
	AccessibleRoleTreeGrid AccessibleRole = 74
	// TreeItem: unused
	AccessibleRoleTreeItem AccessibleRole = 75
	// widget: an interactive component of a graphical user interface. This is
	// the role that GTK uses by default for widgets.
	AccessibleRoleWidget AccessibleRole = 76
	// window: an application window.
	AccessibleRoleWindow AccessibleRole = 77
)

func marshalAccessibleRole(p uintptr) (interface{}, error) {
	return AccessibleRole(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// AccessibleSort: the possible values for the GTK_ACCESSIBLE_PROPERTY_SORT
// accessible property.
type AccessibleSort int

const (
	// none: there is no defined sort applied to the column.
	AccessibleSortNone AccessibleSort = 0
	// ascending items are sorted in ascending order by this column.
	AccessibleSortAscending AccessibleSort = 1
	// descending items are sorted in descending order by this column.
	AccessibleSortDescending AccessibleSort = 2
	// other: a sort algorithm other than ascending or descending has been
	// applied.
	AccessibleSortOther AccessibleSort = 3
)

func marshalAccessibleSort(p uintptr) (interface{}, error) {
	return AccessibleSort(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// AccessibleState: the possible accessible states of a `GtkAccessible`.
type AccessibleState int

const (
	// busy: a “busy” state. This state has boolean values
	AccessibleStateBusy AccessibleState = 0
	// checked: a “checked” state; indicates the current state of a CheckButton.
	// Value type: AccessibleTristate
	AccessibleStateChecked AccessibleState = 1
	// disabled: a “disabled” state; corresponds to the Widget:sensitive
	// property on Widget. It indicates a UI element that is perceivable, but
	// not editable or operable. Value type: boolean
	AccessibleStateDisabled AccessibleState = 2
	// expanded: an “expanded” state; corresponds to the Expander:expanded
	// property on Expander. Value type: boolean or undefined
	AccessibleStateExpanded AccessibleState = 3
	// hidden: a “hidden” state; corresponds to the Widget:visible property on
	// Widget. You can use this state explicitly on UI elements that should not
	// be exposed to an assistive technology. Value type: boolean See also:
	// GTK_ACCESSIBLE_STATE_DISABLED
	AccessibleStateHidden AccessibleState = 4
	// invalid: an “invalid” state; set when a widget is showing an error. Value
	// type: AccessibleInvalidState
	AccessibleStateInvalid AccessibleState = 5
	// pressed: a “pressed” state; indicates the current state of a
	// ToggleButton. Value type: AccessibleTristate enumeration
	AccessibleStatePressed AccessibleState = 6
	// selected: a “selected” state; set when a widget is selected. Value type:
	// boolean or undefined
	AccessibleStateSelected AccessibleState = 7
)

func marshalAccessibleState(p uintptr) (interface{}, error) {
	return AccessibleState(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// AccessibleTristate: the possible values for the GTK_ACCESSIBLE_STATE_PRESSED
// accessible state.
//
// Note that the GTK_ACCESSIBLE_TRISTATE_FALSE and GTK_ACCESSIBLE_TRISTATE_TRUE
// have the same values as false and true.
type AccessibleTristate int

const (
	// false: the state is `false`
	AccessibleTristateFalse AccessibleTristate = 0
	// true: the state is `true`
	AccessibleTristateTrue AccessibleTristate = 1
	// mixed: the state is `mixed`
	AccessibleTristateMixed AccessibleTristate = 2
)

func marshalAccessibleTristate(p uintptr) (interface{}, error) {
	return AccessibleTristate(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// Align controls how a widget deals with extra space in a single dimension.
//
// Alignment only matters if the widget receives a “too large” allocation, for
// example if you packed the widget with the [property@Gtk.Widget:hexpand]
// property inside a `GtkBox`, then the widget might get extra space. If you
// have for example a 16x16 icon inside a 32x32 space, the icon could be scaled
// and stretched, it could be centered, or it could be positioned to one side of
// the space.
//
// Note that in horizontal context GTK_ALIGN_START and GTK_ALIGN_END are
// interpreted relative to text direction.
//
// GTK_ALIGN_BASELINE support is optional for containers and widgets, and it is
// only supported for vertical alignment. When it's not supported by a child or
// a container it is treated as GTK_ALIGN_FILL.
type Align int

const (
	// fill: stretch to fill all space if possible, center if no meaningful way
	// to stretch
	AlignFill Align = 0
	// start: snap to left or top side, leaving space on right or bottom
	AlignStart Align = 1
	// end: snap to right or bottom side, leaving space on left or top
	AlignEnd Align = 2
	// center: center natural width of widget inside the allocation
	AlignCenter Align = 3
	// baseline: align the widget according to the baseline. See Widget
	AlignBaseline Align = 4
)

func marshalAlign(p uintptr) (interface{}, error) {
	return Align(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// ArrowType: used to indicate the direction in which an arrow should point.
type ArrowType int

const (
	// up represents an upward pointing arrow.
	ArrowTypeUp ArrowType = 0
	// down represents a downward pointing arrow.
	ArrowTypeDown ArrowType = 1
	// left represents a left pointing arrow.
	ArrowTypeLeft ArrowType = 2
	// right represents a right pointing arrow.
	ArrowTypeRight ArrowType = 3
	// none: no arrow.
	ArrowTypeNone ArrowType = 4
)

func marshalArrowType(p uintptr) (interface{}, error) {
	return ArrowType(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// BaselinePosition: baseline position in a row of widgets.
//
// Whenever a container has some form of natural row it may align children in
// that row along a common typographical baseline. If the amount of vertical
// space in the row is taller than the total requested height of the
// baseline-aligned children then it can use a `GtkBaselinePosition` to select
// where to put the baseline inside the extra available space.
type BaselinePosition int

const (
	// top: align the baseline at the top
	BaselinePositionTop BaselinePosition = 0
	// center: center the baseline
	BaselinePositionCenter BaselinePosition = 1
	// bottom: align the baseline at the bottom
	BaselinePositionBottom BaselinePosition = 2
)

func marshalBaselinePosition(p uintptr) (interface{}, error) {
	return BaselinePosition(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// BorderStyle describes how the border of a UI element should be rendered.
type BorderStyle int

const (
	// none: no visible border
	BorderStyleNone BorderStyle = 0
	// hidden: same as GTK_BORDER_STYLE_NONE
	BorderStyleHidden BorderStyle = 1
	// solid: a single line segment
	BorderStyleSolid BorderStyle = 2
	// inset looks as if the content is sunken into the canvas
	BorderStyleInset BorderStyle = 3
	// outset looks as if the content is coming out of the canvas
	BorderStyleOutset BorderStyle = 4
	// dotted: a series of round dots
	BorderStyleDotted BorderStyle = 5
	// dashed: a series of square-ended dashes
	BorderStyleDashed BorderStyle = 6
	// double: two parallel lines with some space between them
	BorderStyleDouble BorderStyle = 7
	// groove looks as if it were carved in the canvas
	BorderStyleGroove BorderStyle = 8
	// ridge looks as if it were coming out of the canvas
	BorderStyleRidge BorderStyle = 9
)

func marshalBorderStyle(p uintptr) (interface{}, error) {
	return BorderStyle(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// ConstraintAttribute: the widget attributes that can be used when creating a
// `GtkConstraint`.
type ConstraintAttribute int

const (
	// none: no attribute, used for constant relations
	ConstraintAttributeNone ConstraintAttribute = 0
	// left: the left edge of a widget, regardless of text direction
	ConstraintAttributeLeft ConstraintAttribute = 1
	// right: the right edge of a widget, regardless of text direction
	ConstraintAttributeRight ConstraintAttribute = 2
	// top: the top edge of a widget
	ConstraintAttributeTop ConstraintAttribute = 3
	// bottom: the bottom edge of a widget
	ConstraintAttributeBottom ConstraintAttribute = 4
	// start: the leading edge of a widget, depending on text direction;
	// equivalent to GTK_CONSTRAINT_ATTRIBUTE_LEFT for LTR languages, and
	// GTK_CONSTRAINT_ATTRIBUTE_RIGHT for RTL ones
	ConstraintAttributeStart ConstraintAttribute = 5
	// end: the trailing edge of a widget, depending on text direction;
	// equivalent to GTK_CONSTRAINT_ATTRIBUTE_RIGHT for LTR languages, and
	// GTK_CONSTRAINT_ATTRIBUTE_LEFT for RTL ones
	ConstraintAttributeEnd ConstraintAttribute = 6
	// width: the width of a widget
	ConstraintAttributeWidth ConstraintAttribute = 7
	// height: the height of a widget
	ConstraintAttributeHeight ConstraintAttribute = 8
	// CenterX: the center of a widget, on the horizontal axis
	ConstraintAttributeCenterX ConstraintAttribute = 9
	// CenterY: the center of a widget, on the vertical axis
	ConstraintAttributeCenterY ConstraintAttribute = 10
	// baseline: the baseline of a widget
	ConstraintAttributeBaseline ConstraintAttribute = 11
)

func marshalConstraintAttribute(p uintptr) (interface{}, error) {
	return ConstraintAttribute(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// ConstraintRelation: the relation between two terms of a constraint.
type ConstraintRelation int

const (
	// le less than, or equal
	ConstraintRelationLe ConstraintRelation = -1
	// eq: equal
	ConstraintRelationEq ConstraintRelation = 0
	// ge: greater than, or equal
	ConstraintRelationGe ConstraintRelation = 1
)

func marshalConstraintRelation(p uintptr) (interface{}, error) {
	return ConstraintRelation(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// ConstraintStrength: the strength of a constraint, expressed as a symbolic
// constant.
//
// The strength of a Constraint can be expressed with any positive integer; the
// values of this enumeration can be used for readability.
type ConstraintStrength int

const (
	// required: the constraint is required towards solving the layout
	ConstraintStrengthRequired ConstraintStrength = 1001001000
	// strong: a strong constraint
	ConstraintStrengthStrong ConstraintStrength = 1000000000
	// medium: a medium constraint
	ConstraintStrengthMedium ConstraintStrength = 1000
	// weak: a weak constraint
	ConstraintStrengthWeak ConstraintStrength = 1
)

func marshalConstraintStrength(p uintptr) (interface{}, error) {
	return ConstraintStrength(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// ConstraintVflParserError: domain for VFL parsing errors.
type ConstraintVflParserError int

const (
	// symbol: invalid or unknown symbol
	ConstraintVflParserErrorSymbol ConstraintVflParserError = 0
	// attribute: invalid or unknown attribute
	ConstraintVflParserErrorAttribute ConstraintVflParserError = 1
	// view: invalid or unknown view
	ConstraintVflParserErrorView ConstraintVflParserError = 2
	// metric: invalid or unknown metric
	ConstraintVflParserErrorMetric ConstraintVflParserError = 3
	// priority: invalid or unknown priority
	ConstraintVflParserErrorPriority ConstraintVflParserError = 4
	// relation: invalid or unknown relation
	ConstraintVflParserErrorRelation ConstraintVflParserError = 5
)

func marshalConstraintVflParserError(p uintptr) (interface{}, error) {
	return ConstraintVflParserError(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// DeleteType: passed to various keybinding signals for deleting text.
type DeleteType int

const (
	// chars: delete characters.
	DeleteTypeChars DeleteType = 0
	// WordEnds: delete only the portion of the word to the left/right of cursor
	// if we’re in the middle of a word.
	DeleteTypeWordEnds DeleteType = 1
	// words: delete words.
	DeleteTypeWords DeleteType = 2
	// DisplayLines: delete display-lines. Display-lines refers to the visible
	// lines, with respect to the current line breaks. As opposed to paragraphs,
	// which are defined by line breaks in the input.
	DeleteTypeDisplayLines DeleteType = 3
	// DisplayLineEnds: delete only the portion of the display-line to the
	// left/right of cursor.
	DeleteTypeDisplayLineEnds DeleteType = 4
	// ParagraphEnds: delete to the end of the paragraph. Like C-k in Emacs (or
	// its reverse).
	DeleteTypeParagraphEnds DeleteType = 5
	// paragraphs: delete entire line. Like C-k in pico.
	DeleteTypeParagraphs DeleteType = 6
	// whitespace: delete only whitespace. Like M-\ in Emacs.
	DeleteTypeWhitespace DeleteType = 7
)

func marshalDeleteType(p uintptr) (interface{}, error) {
	return DeleteType(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// DirectionType focus movement types.
type DirectionType int

const (
	// TabForward: move forward.
	DirectionTypeTabForward DirectionType = 0
	// TabBackward: move backward.
	DirectionTypeTabBackward DirectionType = 1
	// up: move up.
	DirectionTypeUp DirectionType = 2
	// down: move down.
	DirectionTypeDown DirectionType = 3
	// left: move left.
	DirectionTypeLeft DirectionType = 4
	// right: move right.
	DirectionTypeRight DirectionType = 5
)

func marshalDirectionType(p uintptr) (interface{}, error) {
	return DirectionType(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// EventSequenceState describes the state of a `GdkEventSequence` in a
// `GtkGesture`.
type EventSequenceState int

const (
	// none: the sequence is handled, but not grabbed.
	EventSequenceStateNone EventSequenceState = 0
	// claimed: the sequence is handled and grabbed.
	EventSequenceStateClaimed EventSequenceState = 1
	// denied: the sequence is denied.
	EventSequenceStateDenied EventSequenceState = 2
)

func marshalEventSequenceState(p uintptr) (interface{}, error) {
	return EventSequenceState(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// IconSize: built-in icon sizes.
//
// Icon sizes default to being inherited. Where they cannot be inherited, text
// size is the default.
//
// All widgets which use `GtkIconSize` set the normal-icons or large-icons style
// classes correspondingly, and let themes determine the actual size to be used
// with the `-gtk-icon-size` CSS property.
type IconSize int

const (
	// inherit: keep the size of the parent element
	IconSizeInherit IconSize = 0
	// normal: size similar to text size
	IconSizeNormal IconSize = 1
	// large: large size, for example in an icon view
	IconSizeLarge IconSize = 2
)

func marshalIconSize(p uintptr) (interface{}, error) {
	return IconSize(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// InputPurpose describes primary purpose of the input widget.
//
// This information is useful for on-screen keyboards and similar input methods
// to decide which keys should be presented to the user.
//
// Note that the purpose is not meant to impose a totally strict rule about
// allowed characters, and does not replace input validation. It is fine for an
// on-screen keyboard to let the user override the character set restriction
// that is expressed by the purpose. The application is expected to validate the
// entry contents, even if it specified a purpose.
//
// The difference between GTK_INPUT_PURPOSE_DIGITS and GTK_INPUT_PURPOSE_NUMBER
// is that the former accepts only digits while the latter also some punctuation
// (like commas or points, plus, minus) and “e” or “E” as in 3.14E+000.
//
// This enumeration may be extended in the future; input methods should
// interpret unknown values as “free form”.
type InputPurpose int

const (
	// FreeForm: allow any character
	InputPurposeFreeForm InputPurpose = 0
	// alpha: allow only alphabetic characters
	InputPurposeAlpha InputPurpose = 1
	// digits: allow only digits
	InputPurposeDigits InputPurpose = 2
	// number: edited field expects numbers
	InputPurposeNumber InputPurpose = 3
	// phone: edited field expects phone number
	InputPurposePhone InputPurpose = 4
	// url: edited field expects URL
	InputPurposeURL InputPurpose = 5
	// email: edited field expects email address
	InputPurposeEmail InputPurpose = 6
	// name: edited field expects the name of a person
	InputPurposeName InputPurpose = 7
	// password: like GTK_INPUT_PURPOSE_FREE_FORM, but characters are hidden
	InputPurposePassword InputPurpose = 8
	// pin: like GTK_INPUT_PURPOSE_DIGITS, but characters are hidden
	InputPurposePin InputPurpose = 9
	// terminal: allow any character, in addition to control codes
	InputPurposeTerminal InputPurpose = 10
)

func marshalInputPurpose(p uintptr) (interface{}, error) {
	return InputPurpose(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// Justification: used for justifying the text inside a `GtkLabel` widget.
type Justification int

const (
	// left: the text is placed at the left edge of the label.
	JustificationLeft Justification = 0
	// right: the text is placed at the right edge of the label.
	JustificationRight Justification = 1
	// center: the text is placed in the center of the label.
	JustificationCenter Justification = 2
	// fill: the text is placed is distributed across the label.
	JustificationFill Justification = 3
)

func marshalJustification(p uintptr) (interface{}, error) {
	return Justification(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// LevelBarMode describes how `GtkLevelBar` contents should be rendered.
//
// Note that this enumeration could be extended with additional modes in the
// future.
type LevelBarMode int

const (
	// continuous: the bar has a continuous mode
	LevelBarModeContinuous LevelBarMode = 0
	// discrete: the bar has a discrete mode
	LevelBarModeDiscrete LevelBarMode = 1
)

func marshalLevelBarMode(p uintptr) (interface{}, error) {
	return LevelBarMode(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// MessageType: the type of message being displayed in a `GtkMessageDialog`.
type MessageType int

const (
	// info: informational message
	MessageTypeInfo MessageType = 0
	// warning: non-fatal warning message
	MessageTypeWarning MessageType = 1
	// question: question requiring a choice
	MessageTypeQuestion MessageType = 2
	// error: fatal error message
	MessageTypeError MessageType = 3
	// other: none of the above
	MessageTypeOther MessageType = 4
)

func marshalMessageType(p uintptr) (interface{}, error) {
	return MessageType(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// MovementStep: passed as argument to various keybinding signals for moving the
// cursor position.
type MovementStep int

const (
	// LogicalPositions: move forward or back by graphemes
	MovementStepLogicalPositions MovementStep = 0
	// VisualPositions: move left or right by graphemes
	MovementStepVisualPositions MovementStep = 1
	// words: move forward or back by words
	MovementStepWords MovementStep = 2
	// DisplayLines: move up or down lines (wrapped lines)
	MovementStepDisplayLines MovementStep = 3
	// DisplayLineEnds: move to either end of a line
	MovementStepDisplayLineEnds MovementStep = 4
	// paragraphs: move up or down paragraphs (newline-ended lines)
	MovementStepParagraphs MovementStep = 5
	// ParagraphEnds: move to either end of a paragraph
	MovementStepParagraphEnds MovementStep = 6
	// pages: move by pages
	MovementStepPages MovementStep = 7
	// BufferEnds: move to ends of the buffer
	MovementStepBufferEnds MovementStep = 8
	// HorizontalPages: move horizontally by pages
	MovementStepHorizontalPages MovementStep = 9
)

func marshalMovementStep(p uintptr) (interface{}, error) {
	return MovementStep(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// NumberUpLayout: used to determine the layout of pages on a sheet when
// printing multiple pages per sheet.
type NumberUpLayout int

const (
	// lrtb: ! (layout-lrtb.png)
	NumberUpLayoutLrtb NumberUpLayout = 0
	// lrbt: ! (layout-lrbt.png)
	NumberUpLayoutLrbt NumberUpLayout = 1
	// rltb: ! (layout-rltb.png)
	NumberUpLayoutRltb NumberUpLayout = 2
	// rlbt: ! (layout-rlbt.png)
	NumberUpLayoutRlbt NumberUpLayout = 3
	// tblr: ! (layout-tblr.png)
	NumberUpLayoutTblr NumberUpLayout = 4
	// tbrl: ! (layout-tbrl.png)
	NumberUpLayoutTbrl NumberUpLayout = 5
	// btlr: ! (layout-btlr.png)
	NumberUpLayoutBtlr NumberUpLayout = 6
	// btrl: ! (layout-btrl.png)
	NumberUpLayoutBtrl NumberUpLayout = 7
)

func marshalNumberUpLayout(p uintptr) (interface{}, error) {
	return NumberUpLayout(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// Ordering describes the way two values can be compared.
//
// These values can be used with a `GCompareFunc`. However, a `GCompareFunc` is
// allowed to return any integer values. For converting such a value to a
// `GtkOrdering` value, use [func@Gtk.Ordering.from_cmpfunc].
type Ordering int

const (
	// smaller: the first value is smaller than the second
	OrderingSmaller Ordering = -1
	// equal: the two values are equal
	OrderingEqual Ordering = 0
	// larger: the first value is larger than the second
	OrderingLarger Ordering = 1
)

func marshalOrdering(p uintptr) (interface{}, error) {
	return Ordering(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// Orientation represents the orientation of widgets and other objects.
//
// Typical examples are `GtkBox or `GtkGesturePan`.
type Orientation int

const (
	// horizontal: the element is in horizontal orientation.
	OrientationHorizontal Orientation = 0
	// vertical: the element is in vertical orientation.
	OrientationVertical Orientation = 1
)

func marshalOrientation(p uintptr) (interface{}, error) {
	return Orientation(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// Overflow defines how content overflowing a given area should be handled.
//
// This is used in [method@Gtk.Widget.set_overflow]. The
// [property@Gtk.Widget:overflow] property is modeled after the CSS overflow
// property, but implements it only partially.
type Overflow int

const (
	// visible: no change is applied. Content is drawn at the specified
	// position.
	OverflowVisible Overflow = 0
	// hidden: content is clipped to the bounds of the area. Content outside the
	// area is not drawn and cannot be interacted with.
	OverflowHidden Overflow = 1
)

func marshalOverflow(p uintptr) (interface{}, error) {
	return Overflow(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// PackType represents the packing location of a children in its parent.
//
// See `GtkWindowControls` for example.
type PackType int

const (
	// start: the child is packed into the start of the widget
	PackTypeStart PackType = 0
	// end: the child is packed into the end of the widget
	PackTypeEnd PackType = 1
)

func marshalPackType(p uintptr) (interface{}, error) {
	return PackType(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// PageOrientation: see also gtk_print_settings_set_orientation().
type PageOrientation int

const (
	// portrait: portrait mode.
	PageOrientationPortrait PageOrientation = 0
	// landscape: landscape mode.
	PageOrientationLandscape PageOrientation = 1
	// ReversePortrait: reverse portrait mode.
	PageOrientationReversePortrait PageOrientation = 2
	// ReverseLandscape: reverse landscape mode.
	PageOrientationReverseLandscape PageOrientation = 3
)

func marshalPageOrientation(p uintptr) (interface{}, error) {
	return PageOrientation(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// PageSet: see also gtk_print_job_set_page_set().
type PageSet int

const (
	// all: all pages.
	PageSetAll PageSet = 0
	// even: even pages.
	PageSetEven PageSet = 1
	// odd: odd pages.
	PageSetOdd PageSet = 2
)

func marshalPageSet(p uintptr) (interface{}, error) {
	return PageSet(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// PanDirection describes the panning direction of a `GtkGesturePan`
type PanDirection int

const (
	// left: panned towards the left
	PanDirectionLeft PanDirection = 0
	// right: panned towards the right
	PanDirectionRight PanDirection = 1
	// up: panned upwards
	PanDirectionUp PanDirection = 2
	// down: panned downwards
	PanDirectionDown PanDirection = 3
)

func marshalPanDirection(p uintptr) (interface{}, error) {
	return PanDirection(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// PositionType describes which edge of a widget a certain feature is positioned
// at.
//
// For examples, see the tabs of a `GtkNotebook`, or the label of a `GtkScale`.
type PositionType int

const (
	// left: the feature is at the left edge.
	PositionTypeLeft PositionType = 0
	// right: the feature is at the right edge.
	PositionTypeRight PositionType = 1
	// top: the feature is at the top edge.
	PositionTypeTop PositionType = 2
	// bottom: the feature is at the bottom edge.
	PositionTypeBottom PositionType = 3
)

func marshalPositionType(p uintptr) (interface{}, error) {
	return PositionType(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// PrintDuplex: see also gtk_print_settings_set_duplex().
type PrintDuplex int

const (
	// simplex: no duplex.
	PrintDuplexSimplex PrintDuplex = 0
	// horizontal: horizontal duplex.
	PrintDuplexHorizontal PrintDuplex = 1
	// vertical: vertical duplex.
	PrintDuplexVertical PrintDuplex = 2
)

func marshalPrintDuplex(p uintptr) (interface{}, error) {
	return PrintDuplex(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// PrintPages: see also gtk_print_job_set_pages()
type PrintPages int

const (
	// all: all pages.
	PrintPagesAll PrintPages = 0
	// current: current page.
	PrintPagesCurrent PrintPages = 1
	// ranges: range of pages.
	PrintPagesRanges PrintPages = 2
	// selection: selected pages.
	PrintPagesSelection PrintPages = 3
)

func marshalPrintPages(p uintptr) (interface{}, error) {
	return PrintPages(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// PrintQuality: see also gtk_print_settings_set_quality().
type PrintQuality int

const (
	// low: low quality.
	PrintQualityLow PrintQuality = 0
	// normal: normal quality.
	PrintQualityNormal PrintQuality = 1
	// high: high quality.
	PrintQualityHigh PrintQuality = 2
	// draft: draft quality.
	PrintQualityDraft PrintQuality = 3
)

func marshalPrintQuality(p uintptr) (interface{}, error) {
	return PrintQuality(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// PropagationLimit describes limits of a `GtkEventController` for handling
// events targeting other widgets.
type PropagationLimit int

const (
	// none events are handled regardless of what their target is.
	PropagationLimitNone PropagationLimit = 0
	// SameNative events are only handled if their target is in the same Native
	// as the event controllers widget. Note that some event types have two
	// targets (origin and destination).
	PropagationLimitSameNative PropagationLimit = 1
)

func marshalPropagationLimit(p uintptr) (interface{}, error) {
	return PropagationLimit(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// PropagationPhase describes the stage at which events are fed into a
// `GtkEventController`.
type PropagationPhase int

const (
	// none events are not delivered.
	PropagationPhaseNone PropagationPhase = 0
	// capture events are delivered in the capture phase. The capture phase
	// happens before the bubble phase, runs from the toplevel down to the event
	// widget. This option should only be used on containers that might possibly
	// handle events before their children do.
	PropagationPhaseCapture PropagationPhase = 1
	// bubble events are delivered in the bubble phase. The bubble phase happens
	// after the capture phase, and before the default handlers are run. This
	// phase runs from the event widget, up to the toplevel.
	PropagationPhaseBubble PropagationPhase = 2
	// target events are delivered in the default widget event handlers, note
	// that widget implementations must chain up on button, motion, touch and
	// grab broken handlers for controllers in this phase to be run.
	PropagationPhaseTarget PropagationPhase = 3
)

func marshalPropagationPhase(p uintptr) (interface{}, error) {
	return PropagationPhase(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// ScrollStep: passed as argument to various keybinding signals.
type ScrollStep int

const (
	// steps: scroll in steps.
	ScrollStepSteps ScrollStep = 0
	// pages: scroll by pages.
	ScrollStepPages ScrollStep = 1
	// ends: scroll to ends.
	ScrollStepEnds ScrollStep = 2
	// HorizontalSteps: scroll in horizontal steps.
	ScrollStepHorizontalSteps ScrollStep = 3
	// HorizontalPages: scroll by horizontal pages.
	ScrollStepHorizontalPages ScrollStep = 4
	// HorizontalEnds: scroll to the horizontal ends.
	ScrollStepHorizontalEnds ScrollStep = 5
)

func marshalScrollStep(p uintptr) (interface{}, error) {
	return ScrollStep(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// ScrollType: scrolling types.
type ScrollType int

const (
	// none: no scrolling.
	ScrollTypeNone ScrollType = 0
	// jump: jump to new location.
	ScrollTypeJump ScrollType = 1
	// StepBackward: step backward.
	ScrollTypeStepBackward ScrollType = 2
	// StepForward: step forward.
	ScrollTypeStepForward ScrollType = 3
	// PageBackward: page backward.
	ScrollTypePageBackward ScrollType = 4
	// PageForward: page forward.
	ScrollTypePageForward ScrollType = 5
	// StepUp: step up.
	ScrollTypeStepUp ScrollType = 6
	// StepDown: step down.
	ScrollTypeStepDown ScrollType = 7
	// PageUp: page up.
	ScrollTypePageUp ScrollType = 8
	// PageDown: page down.
	ScrollTypePageDown ScrollType = 9
	// StepLeft: step to the left.
	ScrollTypeStepLeft ScrollType = 10
	// StepRight: step to the right.
	ScrollTypeStepRight ScrollType = 11
	// PageLeft: page to the left.
	ScrollTypePageLeft ScrollType = 12
	// PageRight: page to the right.
	ScrollTypePageRight ScrollType = 13
	// start: scroll to start.
	ScrollTypeStart ScrollType = 14
	// end: scroll to end.
	ScrollTypeEnd ScrollType = 15
)

func marshalScrollType(p uintptr) (interface{}, error) {
	return ScrollType(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// ScrollablePolicy defines the policy to be used in a scrollable widget when
// updating the scrolled window adjustments in a given orientation.
type ScrollablePolicy int

const (
	// minimum: scrollable adjustments are based on the minimum size
	ScrollablePolicyMinimum ScrollablePolicy = 0
	// natural: scrollable adjustments are based on the natural size
	ScrollablePolicyNatural ScrollablePolicy = 1
)

func marshalScrollablePolicy(p uintptr) (interface{}, error) {
	return ScrollablePolicy(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// SelectionMode: used to control what selections users are allowed to make.
type SelectionMode int

const (
	// none: no selection is possible.
	SelectionModeNone SelectionMode = 0
	// single: zero or one element may be selected.
	SelectionModeSingle SelectionMode = 1
	// browse: exactly one element is selected. In some circumstances, such as
	// initially or during a search operation, it’s possible for no element to
	// be selected with GTK_SELECTION_BROWSE. What is really enforced is that
	// the user can’t deselect a currently selected element except by selecting
	// another element.
	SelectionModeBrowse SelectionMode = 2
	// multiple: any number of elements may be selected. The Ctrl key may be
	// used to enlarge the selection, and Shift key to select between the focus
	// and the child pointed to. Some widgets may also allow Click-drag to
	// select a range of elements.
	SelectionModeMultiple SelectionMode = 3
)

func marshalSelectionMode(p uintptr) (interface{}, error) {
	return SelectionMode(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// SensitivityType determines how GTK handles the sensitivity of various
// controls, such as combo box buttons.
type SensitivityType int

const (
	// auto: the control is made insensitive if no action can be triggered
	SensitivityTypeAuto SensitivityType = 0
	// on: the control is always sensitive
	SensitivityTypeOn SensitivityType = 1
	// off: the control is always insensitive
	SensitivityTypeOff SensitivityType = 2
)

func marshalSensitivityType(p uintptr) (interface{}, error) {
	return SensitivityType(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// ShortcutScope describes where `GtkShortcut`s added to a
// `GtkShortcutController` get handled.
type ShortcutScope int

const (
	// local shortcuts are handled inside the widget the controller belongs to.
	ShortcutScopeLocal ShortcutScope = 0
	// managed shortcuts are handled by the first ancestor that is a
	// ShortcutManager
	ShortcutScopeManaged ShortcutScope = 1
	// global shortcuts are handled by the root widget.
	ShortcutScopeGlobal ShortcutScope = 2
)

func marshalShortcutScope(p uintptr) (interface{}, error) {
	return ShortcutScope(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// SizeGroupMode: the mode of the size group determines the directions in which
// the size group affects the requested sizes of its component widgets.
type SizeGroupMode int

const (
	// none: group has no effect
	SizeGroupModeNone SizeGroupMode = 0
	// horizontal: group affects horizontal requisition
	SizeGroupModeHorizontal SizeGroupMode = 1
	// vertical: group affects vertical requisition
	SizeGroupModeVertical SizeGroupMode = 2
	// both: group affects both horizontal and vertical requisition
	SizeGroupModeBoth SizeGroupMode = 3
)

func marshalSizeGroupMode(p uintptr) (interface{}, error) {
	return SizeGroupMode(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// SizeRequestMode specifies a preference for height-for-width or
// width-for-height geometry management.
type SizeRequestMode int

const (
	// HeightForWidth: prefer height-for-width geometry management
	SizeRequestModeHeightForWidth SizeRequestMode = 0
	// WidthForHeight: prefer width-for-height geometry management
	SizeRequestModeWidthForHeight SizeRequestMode = 1
	// ConstantSize: don’t trade height-for-width or width-for-height
	SizeRequestModeConstantSize SizeRequestMode = 2
)

func marshalSizeRequestMode(p uintptr) (interface{}, error) {
	return SizeRequestMode(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// SortType determines the direction of a sort.
type SortType int

const (
	// ascending: sorting is in ascending order.
	SortTypeAscending SortType = 0
	// descending: sorting is in descending order.
	SortTypeDescending SortType = 1
)

func marshalSortType(p uintptr) (interface{}, error) {
	return SortType(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// SystemSetting values that can be passed to the
// GtkWidgetClass.system_setting_changed vfunc.
//
// The values indicate which system setting has changed. Widgets may need to
// drop caches, or react otherwise.
//
// Most of the values correspond to `GtkSettings` properties.
//
// More values may be added over time.
type SystemSetting int

const (
	// dpi: the Settings:gtk-xft-dpi setting has changed
	SystemSettingDPI SystemSetting = 0
	// FontName: the Settings:gtk-font-name setting has changed
	SystemSettingFontName SystemSetting = 1
	// FontConfig: the font configuration has changed in a way that requires
	// text to be redrawn. This can be any of the Settings:gtk-xft-antialias,
	// Settings:gtk-xft-hinting, Settings:gtk-xft-hintstyle,
	// Settings:gtk-xft-rgba or Settings:gtk-fontconfig-timestamp settings
	SystemSettingFontConfig SystemSetting = 2
	// display: the display has changed
	SystemSettingDisplay SystemSetting = 3
	// IconTheme: the icon theme has changed in a way that requires icons to be
	// looked up again
	SystemSettingIconTheme SystemSetting = 4
)

func marshalSystemSetting(p uintptr) (interface{}, error) {
	return SystemSetting(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// TextDirection: reading directions for text.
type TextDirection int

const (
	// none: no direction.
	TextDirectionNone TextDirection = 0
	// ltr: left to right text direction.
	TextDirectionLTR TextDirection = 1
	// rtl: right to left text direction.
	TextDirectionRTL TextDirection = 2
)

func marshalTextDirection(p uintptr) (interface{}, error) {
	return TextDirection(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// TreeViewGridLines: used to indicate which grid lines to draw in a tree view.
type TreeViewGridLines int

const (
	// none: no grid lines.
	TreeViewGridLinesNone TreeViewGridLines = 0
	// horizontal: horizontal grid lines.
	TreeViewGridLinesHorizontal TreeViewGridLines = 1
	// vertical: vertical grid lines.
	TreeViewGridLinesVertical TreeViewGridLines = 2
	// both: horizontal and vertical grid lines.
	TreeViewGridLinesBoth TreeViewGridLines = 3
)

func marshalTreeViewGridLines(p uintptr) (interface{}, error) {
	return TreeViewGridLines(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// Unit: see also gtk_print_settings_set_paper_width().
type Unit int

const (
	// none: no units.
	UnitNone Unit = 0
	// points dimensions in points.
	UnitPoints Unit = 1
	// inch dimensions in inches.
	UnitInch Unit = 2
	// mm dimensions in millimeters
	UnitMm Unit = 3
)

func marshalUnit(p uintptr) (interface{}, error) {
	return Unit(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// WrapMode describes a type of line wrapping.
type WrapMode int

const (
	// none: do not wrap lines; just make the text area wider
	WrapModeNone WrapMode = 0
	// char: wrap text, breaking lines anywhere the cursor can appear (between
	// characters, usually - if you want to be technical, between graphemes, see
	// pango_get_log_attrs())
	WrapModeChar WrapMode = 1
	// word: wrap text, breaking lines in between words
	WrapModeWord WrapMode = 2
	// WordChar: wrap text, breaking lines in between words, or if that is not
	// enough, also between graphemes
	WrapModeWordChar WrapMode = 3
)

func marshalWrapMode(p uintptr) (interface{}, error) {
	return WrapMode(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// InputHints describes hints that might be taken into account by input methods
// or applications.
//
// Note that input methods may already tailor their behaviour according to the
// `GtkInputPurpose` of the entry.
//
// Some common sense is expected when using these flags - mixing
// GTK_INPUT_HINT_LOWERCASE with any of the uppercase hints makes no sense.
//
// This enumeration may be extended in the future; input methods should ignore
// unknown values.
type InputHints int

const (
	// InputHintsNone: no special behaviour suggested
	InputHintsNone InputHints = 0b0
	// InputHintsSpellcheck: suggest checking for typos
	InputHintsSpellcheck InputHints = 0b1
	// InputHintsNoSpellcheck: suggest not checking for typos
	InputHintsNoSpellcheck InputHints = 0b10
	// InputHintsWordCompletion: suggest word completion
	InputHintsWordCompletion InputHints = 0b100
	// InputHintsLowercase: suggest to convert all text to lowercase
	InputHintsLowercase InputHints = 0b1000
	// InputHintsUppercaseChars: suggest to capitalize all text
	InputHintsUppercaseChars InputHints = 0b10000
	// InputHintsUppercaseWords: suggest to capitalize the first character of
	// each word
	InputHintsUppercaseWords InputHints = 0b100000
	// InputHintsUppercaseSentences: suggest to capitalize the first word of
	// each sentence
	InputHintsUppercaseSentences InputHints = 0b1000000
	// InputHintsInhibitOsk: suggest to not show an onscreen keyboard (e.g for a
	// calculator that already has all the keys).
	InputHintsInhibitOsk InputHints = 0b10000000
	// InputHintsVerticalWriting: the text is vertical
	InputHintsVerticalWriting InputHints = 0b100000000
	// InputHintsEmoji: suggest offering Emoji support
	InputHintsEmoji InputHints = 0b1000000000
	// InputHintsNoEmoji: suggest not offering Emoji support
	InputHintsNoEmoji InputHints = 0b10000000000
	// InputHintsPrivate: request that the input method should not update
	// personalized data (like typing history)
	InputHintsPrivate InputHints = 0b100000000000
)

func marshalInputHints(p uintptr) (interface{}, error) {
	return InputHints(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// PickFlags flags that influence the behavior of gtk_widget_pick().
type PickFlags int

const (
	// PickFlagsDefault: the default behavior, include widgets that are
	// receiving events
	PickFlagsDefault PickFlags = 0b0
	// PickFlagsInsensitive: include widgets that are insensitive
	PickFlagsInsensitive PickFlags = 0b1
	// PickFlagsNonTargetable: include widgets that are marked as
	// non-targetable. See Widget:can-target
	PickFlagsNonTargetable PickFlags = 0b10
)

func marshalPickFlags(p uintptr) (interface{}, error) {
	return PickFlags(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// StateFlags describes a widget state.
//
// Widget states are used to match the widget against CSS pseudo-classes. Note
// that GTK extends the regular CSS classes and sometimes uses different names.
type StateFlags int

const (
	// StateFlagsNormal: state during normal operation
	StateFlagsNormal StateFlags = 0b0
	// StateFlagsActive: widget is active
	StateFlagsActive StateFlags = 0b1
	// StateFlagsPrelight: widget has a mouse pointer over it
	StateFlagsPrelight StateFlags = 0b10
	// StateFlagsSelected: widget is selected
	StateFlagsSelected StateFlags = 0b100
	// StateFlagsInsensitive: widget is insensitive
	StateFlagsInsensitive StateFlags = 0b1000
	// StateFlagsInconsistent: widget is inconsistent
	StateFlagsInconsistent StateFlags = 0b10000
	// StateFlagsFocused: widget has the keyboard focus
	StateFlagsFocused StateFlags = 0b100000
	// StateFlagsBackdrop: widget is in a background toplevel window
	StateFlagsBackdrop StateFlags = 0b1000000
	// StateFlagsDirLTR: widget is in left-to-right text direction
	StateFlagsDirLTR StateFlags = 0b10000000
	// StateFlagsDirRTL: widget is in right-to-left text direction
	StateFlagsDirRTL StateFlags = 0b100000000
	// StateFlagsLink: widget is a link
	StateFlagsLink StateFlags = 0b1000000000
	// StateFlagsVisited: the location the widget points to has already been
	// visited
	StateFlagsVisited StateFlags = 0b10000000000
	// StateFlagsChecked: widget is checked
	StateFlagsChecked StateFlags = 0b100000000000
	// StateFlagsDropActive: widget is highlighted as a drop target for DND
	StateFlagsDropActive StateFlags = 0b1000000000000
	// StateFlagsFocusVisible: widget has the visible focus
	StateFlagsFocusVisible StateFlags = 0b10000000000000
	// StateFlagsFocusWithin: widget contains the keyboard focus
	StateFlagsFocusWithin StateFlags = 0b100000000000000
)

func marshalStateFlags(p uintptr) (interface{}, error) {
	return StateFlags(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}
