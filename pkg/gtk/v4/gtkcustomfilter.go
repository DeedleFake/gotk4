// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/box"
	"github.com/diamondburned/gotk4/internal/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_custom_filter_get_type()), F: marshalCustomFilter},
	})
}

// CustomFilterFunc: user function that is called to determine if the @item
// should be matched. If the filter matches the item, this function must return
// true. If the item should be filtered out, false must be returned.
type CustomFilterFunc func() (ok bool)

//export gotk4_CustomFilterFunc
func gotk4_CustomFilterFunc(arg0 C.gpointer, arg1 C.gpointer) C.gboolean {
	v := box.Get(uintptr(arg1))
	if v == nil {
		panic(`callback not found`)
	}

	fn := v.(CustomFilterFunc)
	ok := fn()

	if ok {
		cret = C.gboolean(1)
	}
}

// CustomFilter is a Filter that uses a callback to determine whether to include
// an item or not.
type CustomFilter interface {
	Filter

	// SetFilterFunc sets (or unsets) the function used for filtering items.
	//
	// If @match_func is nil, the filter matches all items.
	//
	// If the filter func changes its filtering behavior, gtk_filter_changed()
	// needs to be called.
	//
	// If a previous function was set, its @user_destroy will be called now.
	SetFilterFunc()
}

// customFilter implements the CustomFilter interface.
type customFilter struct {
	Filter
}

var _ CustomFilter = (*customFilter)(nil)

// WrapCustomFilter wraps a GObject to the right type. It is
// primarily used internally.
func WrapCustomFilter(obj *externglib.Object) CustomFilter {
	return CustomFilter{
		Filter: WrapFilter(obj),
	}
}

func marshalCustomFilter(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapCustomFilter(obj), nil
}

// NewCustomFilter constructs a class CustomFilter.
func NewCustomFilter() CustomFilter {
	var _cret C.GtkCustomFilter

	cret = C.gtk_custom_filter_new()

	var _customFilter CustomFilter

	_customFilter = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret.Native()))).(CustomFilter)

	return _customFilter
}

// SetFilterFunc sets (or unsets) the function used for filtering items.
//
// If @match_func is nil, the filter matches all items.
//
// If the filter func changes its filtering behavior, gtk_filter_changed()
// needs to be called.
//
// If a previous function was set, its @user_destroy will be called now.
func (s customFilter) SetFilterFunc() {
	var _arg0 *C.GtkCustomFilter

	_arg0 = (*C.GtkCustomFilter)(unsafe.Pointer(s.Native()))

	C.gtk_custom_filter_set_filter_func(_arg0)
}
