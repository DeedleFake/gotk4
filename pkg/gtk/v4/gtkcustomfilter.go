// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/box"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_custom_filter_get_type()), F: marshalCustomFilter},
	})
}

// CustomFilterFunc: user function that is called to determine if the @item
// should be matched.
//
// If the filter matches the item, this function must return true. If the item
// should be filtered out, false must be returned.
type CustomFilterFunc func(item gextras.Objector) (ok bool)

//export gotk4_CustomFilterFunc
func gotk4_CustomFilterFunc(arg0 C.gpointer, arg1 C.gpointer) (cret C.gboolean) {
	v := box.Get(uintptr(arg1))
	if v == nil {
		panic(`callback not found`)
	}

	var item gextras.Objector // out

	item = gextras.CastObject(externglib.Take(unsafe.Pointer(arg0))).(gextras.Objector)

	fn := v.(CustomFilterFunc)
	ok := fn(item)

	if ok {
		cret = C.TRUE
	}

	return cret
}

// CustomFilter: `GtkCustomFilter` determines whether to include items with a
// callback.
type CustomFilter interface {
	Filter

	// AsFilter casts the class to the Filter interface.
	AsFilter() Filter

	// Changed emits the Filter::changed signal to notify all users of the
	// filter that the filter changed. Users of the filter should then check
	// items again via gtk_filter_match().
	//
	// Depending on the @change parameter, not all items need to be changed, but
	// only some. Refer to the FilterChange documentation for details.
	//
	// This function is intended for implementors of Filter subclasses and
	// should not be called from other functions.
	//
	// This method is inherited from Filter
	Changed(change FilterChange)
	// GetStrictness gets the known strictness of @filters. If the strictness is
	// not known, GTK_FILTER_MATCH_SOME is returned.
	//
	// This value may change after emission of the Filter::changed signal.
	//
	// This function is meant purely for optimization purposes, filters can
	// choose to omit implementing it, but FilterListModel uses it.
	//
	// This method is inherited from Filter
	GetStrictness() FilterMatch
	// Match checks if the given @item is matched by the filter or not.
	//
	// This method is inherited from Filter
	Match(item gextras.Objector) bool
}

// customFilter implements the CustomFilter interface.
type customFilter struct {
	*externglib.Object
}

var _ CustomFilter = (*customFilter)(nil)

// WrapCustomFilter wraps a GObject to a type that implements
// interface CustomFilter. It is primarily used internally.
func WrapCustomFilter(obj *externglib.Object) CustomFilter {
	return customFilter{obj}
}

func marshalCustomFilter(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapCustomFilter(obj), nil
}

func (c customFilter) AsFilter() Filter {
	return WrapFilter(gextras.InternObject(c))
}

func (s customFilter) Changed(change FilterChange) {
	WrapFilter(gextras.InternObject(s)).Changed(change)
}

func (s customFilter) GetStrictness() FilterMatch {
	return WrapFilter(gextras.InternObject(s)).GetStrictness()
}

func (s customFilter) Match(item gextras.Objector) bool {
	return WrapFilter(gextras.InternObject(s)).Match(item)
}
