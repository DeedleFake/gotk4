// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <gtk/gtk.h>
import "C"

func TestAccessibleAssertionMessageRole(domain string, file string, line int, fn string, expr string, accessible Accessible, expectedRole AccessibleRole, actualRole AccessibleRole) {
	var _arg1 *C.char
	var _arg2 *C.char
	var _arg3 C.int
	var _arg4 *C.char
	var _arg5 *C.char
	var _arg6 *C.GtkAccessible
	var _arg7 C.GtkAccessibleRole
	var _arg8 C.GtkAccessibleRole

	_arg1 = (*C.char)(C.CString(domain))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.char)(C.CString(file))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = C.int(line)
	_arg4 = (*C.char)(C.CString(fn))
	defer C.free(unsafe.Pointer(_arg4))
	_arg5 = (*C.char)(C.CString(expr))
	defer C.free(unsafe.Pointer(_arg5))
	_arg6 = (*C.GtkAccessible)(unsafe.Pointer(accessible.Native()))
	_arg7 = (C.GtkAccessibleRole)(expectedRole)
	_arg8 = (C.GtkAccessibleRole)(actualRole)

	C.gtk_test_accessible_assertion_message_role(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7, _arg8)
}

// TestAccessibleHasProperty checks whether the Accessible has @property set.
func TestAccessibleHasProperty(accessible Accessible, property AccessibleProperty) bool {
	var _arg1 *C.GtkAccessible
	var _arg2 C.GtkAccessibleProperty

	_arg1 = (*C.GtkAccessible)(unsafe.Pointer(accessible.Native()))
	_arg2 = (C.GtkAccessibleProperty)(property)

	var _cret C.gboolean

	cret = C.gtk_test_accessible_has_property(_arg1, _arg2)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// TestAccessibleHasRelation checks whether the Accessible has @relation set.
func TestAccessibleHasRelation(accessible Accessible, relation AccessibleRelation) bool {
	var _arg1 *C.GtkAccessible
	var _arg2 C.GtkAccessibleRelation

	_arg1 = (*C.GtkAccessible)(unsafe.Pointer(accessible.Native()))
	_arg2 = (C.GtkAccessibleRelation)(relation)

	var _cret C.gboolean

	cret = C.gtk_test_accessible_has_relation(_arg1, _arg2)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// TestAccessibleHasRole checks whether the Accessible:accessible-role of the
// accessible is @role.
func TestAccessibleHasRole(accessible Accessible, role AccessibleRole) bool {
	var _arg1 *C.GtkAccessible
	var _arg2 C.GtkAccessibleRole

	_arg1 = (*C.GtkAccessible)(unsafe.Pointer(accessible.Native()))
	_arg2 = (C.GtkAccessibleRole)(role)

	var _cret C.gboolean

	cret = C.gtk_test_accessible_has_role(_arg1, _arg2)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// TestAccessibleHasState checks whether the Accessible has @state set.
func TestAccessibleHasState(accessible Accessible, state AccessibleState) bool {
	var _arg1 *C.GtkAccessible
	var _arg2 C.GtkAccessibleState

	_arg1 = (*C.GtkAccessible)(unsafe.Pointer(accessible.Native()))
	_arg2 = (C.GtkAccessibleState)(state)

	var _cret C.gboolean

	cret = C.gtk_test_accessible_has_state(_arg1, _arg2)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}
