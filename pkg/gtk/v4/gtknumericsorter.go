// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_numeric_sorter_get_type()), F: marshalNumericSorter},
	})
}

// NumericSorter: `GtkNumericSorter` is a `GtkSorter` that compares numbers.
//
// To obtain the numbers to compare, this sorter evaluates a
// [class@Gtk.Expression].
type NumericSorter interface {
	Sorter

	// AsSorter casts the class to the Sorter interface.
	AsSorter() Sorter

	// Changed emits the [signal@Gtk.Sorter::changed] signal to notify all users
	// of the sorter that it has changed.
	//
	// Users of the sorter should then update the sort order via
	// gtk_sorter_compare().
	//
	// Depending on the @change parameter, it may be possible to update the sort
	// order without a full resorting. Refer to the [enum@Gtk.SorterChange]
	// documentation for details.
	//
	// This function is intended for implementors of `GtkSorter` subclasses and
	// should not be called from other functions.
	//
	// This method is inherited from Sorter
	Changed(change SorterChange)
	// Compare compares two given items according to the sort order implemented
	// by the sorter.
	//
	// Sorters implement a partial order:
	//
	// * It is reflexive, ie a = a * It is antisymmetric, ie if a < b and b < a,
	// then a = b * It is transitive, ie given any 3 items with a ≤ b and b ≤ c,
	// then a ≤ c
	//
	// The sorter may signal it conforms to additional constraints via the
	// return value of [method@Gtk.Sorter.get_order].
	//
	// This method is inherited from Sorter
	Compare(item1 gextras.Objector, item2 gextras.Objector) Ordering
	// GetOrder gets the order that @self conforms to.
	//
	// See [enum@Gtk.SorterOrder] for details of the possible return values.
	//
	// This function is intended to allow optimizations.
	//
	// This method is inherited from Sorter
	GetOrder() SorterOrder

	// Expression gets the expression that is evaluated to obtain numbers from
	// items.
	Expression() Expression
	// SortOrder gets whether this sorter will sort smaller numbers first.
	SortOrder() SortType
	// SetExpression sets the expression that is evaluated to obtain numbers
	// from items.
	//
	// Unless an expression is set on @self, the sorter will always compare
	// items as invalid.
	//
	// The expression must have a return type that can be compared numerically,
	// such as G_TYPE_INT or G_TYPE_DOUBLE.
	SetExpression(expression Expression)
	// SetSortOrder sets whether to sort smaller numbers before larger ones.
	SetSortOrder(sortOrder SortType)
}

// numericSorter implements the NumericSorter interface.
type numericSorter struct {
	*externglib.Object
}

var _ NumericSorter = (*numericSorter)(nil)

// WrapNumericSorter wraps a GObject to a type that implements
// interface NumericSorter. It is primarily used internally.
func WrapNumericSorter(obj *externglib.Object) NumericSorter {
	return numericSorter{obj}
}

func marshalNumericSorter(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapNumericSorter(obj), nil
}

// NewNumericSorter creates a new numeric sorter using the given @expression.
//
// Smaller numbers will be sorted first. You can call
// [method@Gtk.NumericSorter.set_sort_order] to change this.
func NewNumericSorter(expression Expression) NumericSorter {
	var _arg1 *C.GtkExpression    // out
	var _cret *C.GtkNumericSorter // in

	_arg1 = (*C.GtkExpression)(unsafe.Pointer(expression.Native()))

	_cret = C.gtk_numeric_sorter_new(_arg1)

	var _numericSorter NumericSorter // out

	_numericSorter = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(NumericSorter)

	return _numericSorter
}

func (n numericSorter) AsSorter() Sorter {
	return WrapSorter(gextras.InternObject(n))
}

func (s numericSorter) Changed(change SorterChange) {
	WrapSorter(gextras.InternObject(s)).Changed(change)
}

func (s numericSorter) Compare(item1 gextras.Objector, item2 gextras.Objector) Ordering {
	return WrapSorter(gextras.InternObject(s)).Compare(item1, item2)
}

func (s numericSorter) GetOrder() SorterOrder {
	return WrapSorter(gextras.InternObject(s)).GetOrder()
}

func (s numericSorter) Expression() Expression {
	var _arg0 *C.GtkNumericSorter // out
	var _cret *C.GtkExpression    // in

	_arg0 = (*C.GtkNumericSorter)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_numeric_sorter_get_expression(_arg0)

	var _expression Expression // out

	_expression = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Expression)

	return _expression
}

func (s numericSorter) SortOrder() SortType {
	var _arg0 *C.GtkNumericSorter // out
	var _cret C.GtkSortType       // in

	_arg0 = (*C.GtkNumericSorter)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_numeric_sorter_get_sort_order(_arg0)

	var _sortType SortType // out

	_sortType = SortType(_cret)

	return _sortType
}

func (s numericSorter) SetExpression(expression Expression) {
	var _arg0 *C.GtkNumericSorter // out
	var _arg1 *C.GtkExpression    // out

	_arg0 = (*C.GtkNumericSorter)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GtkExpression)(unsafe.Pointer(expression.Native()))

	C.gtk_numeric_sorter_set_expression(_arg0, _arg1)
}

func (s numericSorter) SetSortOrder(sortOrder SortType) {
	var _arg0 *C.GtkNumericSorter // out
	var _arg1 C.GtkSortType       // out

	_arg0 = (*C.GtkNumericSorter)(unsafe.Pointer(s.Native()))
	_arg1 = C.GtkSortType(sortOrder)

	C.gtk_numeric_sorter_set_sort_order(_arg0, _arg1)
}
