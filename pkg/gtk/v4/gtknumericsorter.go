// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_numeric_sorter_get_type()), F: marshalNumericSorter},
	})
}

// NumericSorter: gtkNumericSorter is a Sorter that compares numbers.
//
// To obtain the numbers to compare, this sorter evaluates a Expression.
type NumericSorter interface {
	Sorter

	// Expression gets the expression that is evaluated to obtain numbers from
	// items.
	Expression(s NumericSorter)
	// SortOrder gets whether this sorter will sort smaller numbers first.
	SortOrder(s NumericSorter)
	// SetExpression sets the expression that is evaluated to obtain numbers
	// from items.
	//
	// Unless an expression is set on @self, the sorter will always compare
	// items as invalid.
	//
	// The expression must have a return type that can be compared numerically,
	// such as TYPE_INT or TYPE_DOUBLE.
	SetExpression(s NumericSorter, expression Expression)
	// SetSortOrder sets whether to sort smaller numbers before larger ones.
	SetSortOrder(s NumericSorter, sortOrder SortType)
}

// numericSorter implements the NumericSorter interface.
type numericSorter struct {
	Sorter
}

var _ NumericSorter = (*numericSorter)(nil)

// WrapNumericSorter wraps a GObject to the right type. It is
// primarily used internally.
func WrapNumericSorter(obj *externglib.Object) NumericSorter {
	return NumericSorter{
		Sorter: WrapSorter(obj),
	}
}

func marshalNumericSorter(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapNumericSorter(obj), nil
}

// NewNumericSorter constructs a class NumericSorter.
func NewNumericSorter(expression Expression) {
	var arg1 *C.GtkExpression

	arg1 = (*C.GtkExpression)(unsafe.Pointer(expression.Native()))

	C.gtk_numeric_sorter_new(arg1)
}

// Expression gets the expression that is evaluated to obtain numbers from
// items.
func (s numericSorter) Expression(s NumericSorter) {
	var arg0 *C.GtkNumericSorter

	arg0 = (*C.GtkNumericSorter)(unsafe.Pointer(s.Native()))

	C.gtk_numeric_sorter_get_expression(arg0)
}

// SortOrder gets whether this sorter will sort smaller numbers first.
func (s numericSorter) SortOrder(s NumericSorter) {
	var arg0 *C.GtkNumericSorter

	arg0 = (*C.GtkNumericSorter)(unsafe.Pointer(s.Native()))

	C.gtk_numeric_sorter_get_sort_order(arg0)
}

// SetExpression sets the expression that is evaluated to obtain numbers
// from items.
//
// Unless an expression is set on @self, the sorter will always compare
// items as invalid.
//
// The expression must have a return type that can be compared numerically,
// such as TYPE_INT or TYPE_DOUBLE.
func (s numericSorter) SetExpression(s NumericSorter, expression Expression) {
	var arg0 *C.GtkNumericSorter
	var arg1 *C.GtkExpression

	arg0 = (*C.GtkNumericSorter)(unsafe.Pointer(s.Native()))
	arg1 = (*C.GtkExpression)(unsafe.Pointer(expression.Native()))

	C.gtk_numeric_sorter_set_expression(arg0, arg1)
}

// SetSortOrder sets whether to sort smaller numbers before larger ones.
func (s numericSorter) SetSortOrder(s NumericSorter, sortOrder SortType) {
	var arg0 *C.GtkNumericSorter
	var arg1 C.GtkSortType

	arg0 = (*C.GtkNumericSorter)(unsafe.Pointer(s.Native()))
	arg1 = (C.GtkSortType)(sortOrder)

	C.gtk_numeric_sorter_set_sort_order(arg0, arg1)
}
