// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: glib-2.0 gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_gesture_get_type()), F: marshalGesture},
	})
}

// Gesture: `GtkGesture` is the base class for gesture recognition.
//
// Although `GtkGesture` is quite generalized to serve as a base for multi-touch
// gestures, it is suitable to implement single-touch and pointer-based gestures
// (using the special nil `GdkEventSequence` value for these).
//
// The number of touches that a `GtkGesture` need to be recognized is controlled
// by the [property@Gtk.Gesture:n-points] property, if a gesture is keeping
// track of less or more than that number of sequences, it won't check whether
// the gesture is recognized.
//
// As soon as the gesture has the expected number of touches, it will check
// regularly if it is recognized, the criteria to consider a gesture as
// "recognized" is left to `GtkGesture` subclasses.
//
// A recognized gesture will then emit the following signals:
//
// - [signal@Gtk.Gesture::begin] when the gesture is recognized. -
// [signal@Gtk.Gesture::update], whenever an input event is processed. -
// [signal@Gtk.Gesture::end] when the gesture is no longer recognized.
//
//
// Event propagation
//
// In order to receive events, a gesture needs to set a propagation phase
// through [method@Gtk.EventController.set_propagation_phase].
//
// In the capture phase, events are propagated from the toplevel down to the
// target widget, and gestures that are attached to containers above the widget
// get a chance to interact with the event before it reaches the target.
//
// In the bubble phase, events are propagated up from the target widget to the
// toplevel, and gestures that are attached to containers above the widget get a
// chance to interact with events that have not been handled yet.
//
//
// States of a sequence
//
// Whenever input interaction happens, a single event may trigger a cascade of
// `GtkGesture`s, both across the parents of the widget receiving the event and
// in parallel within an individual widget. It is a responsibility of the
// widgets using those gestures to set the state of touch sequences accordingly
// in order to enable cooperation of gestures around the `GdkEventSequence`s
// triggering those.
//
// Within a widget, gestures can be grouped through [method@Gtk.Gesture.group].
// Grouped gestures synchronize the state of sequences, so calling
// [method@Gtk.Gesture.set_sequence_state] on one will effectively propagate the
// state throughout the group.
//
// By default, all sequences start out in the GTK_EVENT_SEQUENCE_NONE state,
// sequences in this state trigger the gesture event handler, but event
// propagation will continue unstopped by gestures.
//
// If a sequence enters into the GTK_EVENT_SEQUENCE_DENIED state, the gesture
// group will effectively ignore the sequence, letting events go unstopped
// through the gesture, but the "slot" will still remain occupied while the
// touch is active.
//
// If a sequence enters in the GTK_EVENT_SEQUENCE_CLAIMED state, the gesture
// group will grab all interaction on the sequence, by:
//
// - Setting the same sequence to GTK_EVENT_SEQUENCE_DENIED on every other
// gesture group within the widget, and every gesture on parent widgets in the
// propagation chain. - Emitting [signal@Gtk.Gesture::cancel] on every gesture
// in widgets underneath in the propagation chain. - Stopping event propagation
// after the gesture group handles the event.
//
// Note: if a sequence is set early to GTK_EVENT_SEQUENCE_CLAIMED on
// GDK_TOUCH_BEGIN/GDK_BUTTON_PRESS (so those events are captured before
// reaching the event widget, this implies GTK_PHASE_CAPTURE), one similar event
// will emulated if the sequence changes to GTK_EVENT_SEQUENCE_DENIED. This way
// event coherence is preserved before event propagation is unstopped again.
//
// Sequence states can't be changed freely. See
// [method@Gtk.Gesture.set_sequence_state] to know about the possible lifetimes
// of a `GdkEventSequence`.
//
//
// Touchpad gestures
//
// On the platforms that support it, `GtkGesture` will handle transparently
// touchpad gesture events. The only precautions users of `GtkGesture` should do
// to enable this support are:
//
// - If the gesture has GTK_PHASE_NONE, ensuring events of type
// GDK_TOUCHPAD_SWIPE and GDK_TOUCHPAD_PINCH are handled by the `GtkGesture`
type Gesture interface {
	EventController

	// BoundingBoxCenter: if there are touch sequences being currently handled
	// by @gesture, returns true and fills in @x and @y with the center of the
	// bounding box containing all active touches.
	//
	// Otherwise, false will be returned.
	BoundingBoxCenter() (x float64, y float64, ok bool)
	// Group adds @gesture to the same group than @group_gesture.
	//
	// Gestures are by default isolated in their own groups.
	//
	// Both gestures must have been added to the same widget before they can be
	// grouped.
	//
	// When gestures are grouped, the state of `GdkEventSequences` is kept in
	// sync for all of those, so calling
	// [method@Gtk.Gesture.set_sequence_state], on one will transfer the same
	// value to the others.
	//
	// Groups also perform an "implicit grabbing" of sequences, if a
	// `GdkEventSequence` state is set to GTK_EVENT_SEQUENCE_CLAIMED on one
	// group, every other gesture group attached to the same `GtkWidget` will
	// switch the state for that sequence to GTK_EVENT_SEQUENCE_DENIED.
	Group(gesture Gesture)
	// IsActive returns true if the gesture is currently active.
	//
	// A gesture is active while there are touch sequences interacting with it.
	IsActive() bool
	// IsGroupedWith returns true if both gestures pertain to the same group.
	IsGroupedWith(other Gesture) bool
	// IsRecognized returns true if the gesture is currently recognized.
	//
	// A gesture is recognized if there are as many interacting touch sequences
	// as required by @gesture.
	IsRecognized() bool
	// SetState sets the state of all sequences that @gesture is currently
	// interacting with.
	//
	// See [method@Gtk.Gesture.set_sequence_state] for more details on sequence
	// states.
	SetState(state EventSequenceState) bool
	// Ungroup separates @gesture into an isolated group.
	Ungroup()
}

// gesture implements the Gesture class.
type gesture struct {
	EventController
}

var _ Gesture = (*gesture)(nil)

// WrapGesture wraps a GObject to the right type. It is
// primarily used internally.
func WrapGesture(obj *externglib.Object) Gesture {
	return gesture{
		EventController: WrapEventController(obj),
	}
}

func marshalGesture(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapGesture(obj), nil
}

// BoundingBoxCenter: if there are touch sequences being currently handled
// by @gesture, returns true and fills in @x and @y with the center of the
// bounding box containing all active touches.
//
// Otherwise, false will be returned.
func (g gesture) BoundingBoxCenter() (x float64, y float64, ok bool) {
	var _arg0 *C.GtkGesture // out

	_arg0 = (*C.GtkGesture)(unsafe.Pointer(g.Native()))

	var _arg1 C.double   // in
	var _arg2 C.double   // in
	var _cret C.gboolean // in

	_cret = C.gtk_gesture_get_bounding_box_center(_arg0, &_arg1, &_arg2)

	var _x float64 // out
	var _y float64 // out
	var _ok bool   // out

	_x = (float64)(_arg1)
	_y = (float64)(_arg2)
	if _cret != 0 {
		_ok = true
	}

	return _x, _y, _ok
}

// Group adds @gesture to the same group than @group_gesture.
//
// Gestures are by default isolated in their own groups.
//
// Both gestures must have been added to the same widget before they can be
// grouped.
//
// When gestures are grouped, the state of `GdkEventSequences` is kept in
// sync for all of those, so calling
// [method@Gtk.Gesture.set_sequence_state], on one will transfer the same
// value to the others.
//
// Groups also perform an "implicit grabbing" of sequences, if a
// `GdkEventSequence` state is set to GTK_EVENT_SEQUENCE_CLAIMED on one
// group, every other gesture group attached to the same `GtkWidget` will
// switch the state for that sequence to GTK_EVENT_SEQUENCE_DENIED.
func (g gesture) Group(gesture Gesture) {
	var _arg0 *C.GtkGesture // out
	var _arg1 *C.GtkGesture // out

	_arg0 = (*C.GtkGesture)(unsafe.Pointer(g.Native()))
	_arg1 = (*C.GtkGesture)(unsafe.Pointer(gesture.Native()))

	C.gtk_gesture_group(_arg0, _arg1)
}

// IsActive returns true if the gesture is currently active.
//
// A gesture is active while there are touch sequences interacting with it.
func (g gesture) IsActive() bool {
	var _arg0 *C.GtkGesture // out

	_arg0 = (*C.GtkGesture)(unsafe.Pointer(g.Native()))

	var _cret C.gboolean // in

	_cret = C.gtk_gesture_is_active(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// IsGroupedWith returns true if both gestures pertain to the same group.
func (g gesture) IsGroupedWith(other Gesture) bool {
	var _arg0 *C.GtkGesture // out
	var _arg1 *C.GtkGesture // out

	_arg0 = (*C.GtkGesture)(unsafe.Pointer(g.Native()))
	_arg1 = (*C.GtkGesture)(unsafe.Pointer(other.Native()))

	var _cret C.gboolean // in

	_cret = C.gtk_gesture_is_grouped_with(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// IsRecognized returns true if the gesture is currently recognized.
//
// A gesture is recognized if there are as many interacting touch sequences
// as required by @gesture.
func (g gesture) IsRecognized() bool {
	var _arg0 *C.GtkGesture // out

	_arg0 = (*C.GtkGesture)(unsafe.Pointer(g.Native()))

	var _cret C.gboolean // in

	_cret = C.gtk_gesture_is_recognized(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetState sets the state of all sequences that @gesture is currently
// interacting with.
//
// See [method@Gtk.Gesture.set_sequence_state] for more details on sequence
// states.
func (g gesture) SetState(state EventSequenceState) bool {
	var _arg0 *C.GtkGesture           // out
	var _arg1 C.GtkEventSequenceState // out

	_arg0 = (*C.GtkGesture)(unsafe.Pointer(g.Native()))
	_arg1 = (C.GtkEventSequenceState)(state)

	var _cret C.gboolean // in

	_cret = C.gtk_gesture_set_state(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Ungroup separates @gesture into an isolated group.
func (g gesture) Ungroup() {
	var _arg0 *C.GtkGesture // out

	_arg0 = (*C.GtkGesture)(unsafe.Pointer(g.Native()))

	C.gtk_gesture_ungroup(_arg0)
}
