// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_gesture_get_type()), F: marshalGesture},
	})
}

// Gesture is the base object for gesture recognition, although this object is
// quite generalized to serve as a base for multi-touch gestures, it is suitable
// to implement single-touch and pointer-based gestures (using the special nil
// EventSequence value for these).
//
// The number of touches that a Gesture need to be recognized is controlled by
// the Gesture:n-points property, if a gesture is keeping track of less or more
// than that number of sequences, it won't check whether the gesture is
// recognized.
//
// As soon as the gesture has the expected number of touches, it will check
// regularly if it is recognized, the criteria to consider a gesture as
// "recognized" is left to Gesture subclasses.
//
// A recognized gesture will then emit the following signals: - Gesture::begin
// when the gesture is recognized. - A number of Gesture::update, whenever an
// input event is processed. - Gesture::end when the gesture is no longer
// recognized.
//
//
// Event propagation
//
// In order to receive events, a gesture needs to set a propagation phase
// through gtk_event_controller_set_propagation_phase().
//
// In the capture phase, events are propagated from the toplevel down to the
// target widget, and gestures that are attached to containers above the widget
// get a chance to interact with the event before it reaches the target.
//
// In the bubble phase, events are propagated up from the target widget to the
// toplevel, and gestures that are attached to containers above the widget get a
// chance to interact with events that have not been handled yet.
//
//
// States of a sequence
//
// Whenever input interaction happens, a single event may trigger a cascade of
// Gestures, both across the parents of the widget receiving the event and in
// parallel within an individual widget. It is a responsibility of the widgets
// using those gestures to set the state of touch sequences accordingly in order
// to enable cooperation of gestures around the EventSequences triggering those.
//
// Within a widget, gestures can be grouped through gtk_gesture_group(), grouped
// gestures synchronize the state of sequences, so calling
// gtk_gesture_set_sequence_state() on one will effectively propagate the state
// throughout the group.
//
// By default, all sequences start out in the K_EVENT_SEQUENCE_NONE state,
// sequences in this state trigger the gesture event handler, but event
// propagation will continue unstopped by gestures.
//
// If a sequence enters into the K_EVENT_SEQUENCE_DENIED state, the gesture
// group will effectively ignore the sequence, letting events go unstopped
// through the gesture, but the "slot" will still remain occupied while the
// touch is active.
//
// If a sequence enters in the K_EVENT_SEQUENCE_CLAIMED state, the gesture group
// will grab all interaction on the sequence, by: - Setting the same sequence to
// K_EVENT_SEQUENCE_DENIED on every other gesture group within the widget, and
// every gesture on parent widgets in the propagation chain. - calling
// Gesture::cancel on every gesture in widgets underneath in the propagation
// chain. - Stopping event propagation after the gesture group handles the
// event.
//
// Note: if a sequence is set early to K_EVENT_SEQUENCE_CLAIMED on
// K_TOUCH_BEGIN/K_BUTTON_PRESS (so those events are captured before reaching
// the event widget, this implies K_PHASE_CAPTURE), one similar event will
// emulated if the sequence changes to K_EVENT_SEQUENCE_DENIED. This way event
// coherence is preserved before event propagation is unstopped again.
//
// Sequence states can't be changed freely, see gtk_gesture_set_sequence_state()
// to know about the possible lifetimes of a EventSequence.
//
//
// Touchpad gestures
//
// On the platforms that support it, Gesture will handle transparently touchpad
// gesture events. The only precautions users of Gesture should do to enable
// this support are: - Enabling GDK_TOUCHPAD_GESTURE_MASK on their Surfaces - If
// the gesture has GTK_PHASE_NONE, ensuring events of type GDK_TOUCHPAD_SWIPE
// and GDK_TOUCHPAD_PINCH are handled by the Gesture
type Gesture interface {
	EventController

	// BoundingBox: if there are touch sequences being currently handled by
	// @gesture, this function returns true and fills in @rect with the bounding
	// box containing all active touches. Otherwise, false will be returned.
	//
	// Note: This function will yield unexpected results on touchpad gestures.
	// Since there is no correlation between physical and pixel distances, these
	// will look as if constrained in an infinitely small area, @rect width and
	// height will thus be 0 regardless of the number of touchpoints.
	BoundingBox(g Gesture) (rect *gdk.Rectangle, ok bool)
	// BoundingBoxCenter: if there are touch sequences being currently handled
	// by @gesture, this function returns true and fills in @x and @y with the
	// center of the bounding box containing all active touches. Otherwise,
	// false will be returned.
	BoundingBoxCenter(g Gesture) (x float64, y float64, ok bool)
	// Device returns the logical Device that is currently operating on
	// @gesture, or nil if the gesture is not being interacted.
	Device(g Gesture)
	// GetGroup returns all gestures in the group of @gesture
	GetGroup(g Gesture)
	// LastEvent returns the last event that was processed for @sequence.
	//
	// Note that the returned pointer is only valid as long as the @sequence is
	// still interpreted by the @gesture. If in doubt, you should make a copy of
	// the event.
	LastEvent(g Gesture, sequence *gdk.EventSequence)
	// LastUpdatedSequence returns the EventSequence that was last updated on
	// @gesture.
	LastUpdatedSequence(g Gesture)
	// Point: if @sequence is currently being interpreted by @gesture, this
	// function returns true and fills in @x and @y with the last coordinates
	// stored for that event sequence. The coordinates are always relative to
	// the widget allocation.
	Point(g Gesture, sequence *gdk.EventSequence) (x float64, y float64, ok bool)
	// SequenceState returns the @sequence state, as seen by @gesture.
	SequenceState(g Gesture, sequence *gdk.EventSequence)
	// Sequences returns the list of EventSequences currently being interpreted
	// by @gesture.
	Sequences(g Gesture)
	// Group adds @gesture to the same group than @group_gesture. Gestures are
	// by default isolated in their own groups.
	//
	// Both gestures must have been added to the same widget before they can be
	// grouped.
	//
	// When gestures are grouped, the state of EventSequences is kept in sync
	// for all of those, so calling gtk_gesture_set_sequence_state(), on one
	// will transfer the same value to the others.
	//
	// Groups also perform an "implicit grabbing" of sequences, if a
	// EventSequence state is set to K_EVENT_SEQUENCE_CLAIMED on one group,
	// every other gesture group attached to the same Widget will switch the
	// state for that sequence to K_EVENT_SEQUENCE_DENIED.
	Group(g Gesture, gesture Gesture)
	// HandlesSequence returns true if @gesture is currently handling events
	// corresponding to @sequence.
	HandlesSequence(g Gesture, sequence *gdk.EventSequence) bool
	// IsActive returns true if the gesture is currently active. A gesture is
	// active meanwhile there are touch sequences interacting with it.
	IsActive(g Gesture) bool
	// IsGroupedWith returns true if both gestures pertain to the same group.
	IsGroupedWith(g Gesture, other Gesture) bool
	// IsRecognized returns true if the gesture is currently recognized. A
	// gesture is recognized if there are as many interacting touch sequences as
	// required by @gesture.
	IsRecognized(g Gesture) bool
	// SetSequenceState sets the state of @sequence in @gesture. Sequences start
	// in state K_EVENT_SEQUENCE_NONE, and whenever they change state, they can
	// never go back to that state. Likewise, sequences in state
	// K_EVENT_SEQUENCE_DENIED cannot turn back to a not denied state. With
	// these rules, the lifetime of an event sequence is constrained to the next
	// four:
	//
	// * None * None → Denied * None → Claimed * None → Claimed → Denied
	//
	// Note: Due to event handling ordering, it may be unsafe to set the state
	// on another gesture within a Gesture::begin signal handler, as the
	// callback might be executed before the other gesture knows about the
	// sequence. A safe way to perform this could be:
	//
	//    static void
	//    first_gesture_begin_cb (GtkGesture       *first_gesture,
	//                            GdkEventSequence *sequence,
	//                            gpointer          user_data)
	//    {
	//      gtk_gesture_set_sequence_state (first_gesture, sequence, GTK_EVENT_SEQUENCE_CLAIMED);
	//      gtk_gesture_set_sequence_state (second_gesture, sequence, GTK_EVENT_SEQUENCE_DENIED);
	//    }
	//
	//    static void
	//    second_gesture_begin_cb (GtkGesture       *second_gesture,
	//                             GdkEventSequence *sequence,
	//                             gpointer          user_data)
	//    {
	//      if (gtk_gesture_get_sequence_state (first_gesture, sequence) == GTK_EVENT_SEQUENCE_CLAIMED)
	//        gtk_gesture_set_sequence_state (second_gesture, sequence, GTK_EVENT_SEQUENCE_DENIED);
	//    }
	//
	// If both gestures are in the same group, just set the state on the gesture
	// emitting the event, the sequence will be already be initialized to the
	// group's global state when the second gesture processes the event.
	SetSequenceState(g Gesture, sequence *gdk.EventSequence, state EventSequenceState) bool
	// SetState sets the state of all sequences that @gesture is currently
	// interacting with. See gtk_gesture_set_sequence_state() for more details
	// on sequence states.
	SetState(g Gesture, state EventSequenceState) bool
	// Ungroup separates @gesture into an isolated group.
	Ungroup(g Gesture)
}

// gesture implements the Gesture interface.
type gesture struct {
	EventController
}

var _ Gesture = (*gesture)(nil)

// WrapGesture wraps a GObject to the right type. It is
// primarily used internally.
func WrapGesture(obj *externglib.Object) Gesture {
	return Gesture{
		EventController: WrapEventController(obj),
	}
}

func marshalGesture(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapGesture(obj), nil
}

// BoundingBox: if there are touch sequences being currently handled by
// @gesture, this function returns true and fills in @rect with the bounding
// box containing all active touches. Otherwise, false will be returned.
//
// Note: This function will yield unexpected results on touchpad gestures.
// Since there is no correlation between physical and pixel distances, these
// will look as if constrained in an infinitely small area, @rect width and
// height will thus be 0 regardless of the number of touchpoints.
func (g gesture) BoundingBox(g Gesture) (rect *gdk.Rectangle, ok bool) {
	var arg0 *C.GtkGesture

	arg0 = (*C.GtkGesture)(unsafe.Pointer(g.Native()))

	var arg1 C.GdkRectangle
	var rect *gdk.Rectangle
	var cret C.gboolean
	var ok bool

	cret = C.gtk_gesture_get_bounding_box(arg0, &arg1)

	rect = gdk.WrapRectangle(unsafe.Pointer(&arg1))
	if cret {
		ok = true
	}

	return rect, ok
}

// BoundingBoxCenter: if there are touch sequences being currently handled
// by @gesture, this function returns true and fills in @x and @y with the
// center of the bounding box containing all active touches. Otherwise,
// false will be returned.
func (g gesture) BoundingBoxCenter(g Gesture) (x float64, y float64, ok bool) {
	var arg0 *C.GtkGesture

	arg0 = (*C.GtkGesture)(unsafe.Pointer(g.Native()))

	var arg1 C.double
	var x float64
	var arg2 C.double
	var y float64
	var cret C.gboolean
	var ok bool

	cret = C.gtk_gesture_get_bounding_box_center(arg0, &arg1, &arg2)

	x = float64(&arg1)
	y = float64(&arg2)
	if cret {
		ok = true
	}

	return x, y, ok
}

// Device returns the logical Device that is currently operating on
// @gesture, or nil if the gesture is not being interacted.
func (g gesture) Device(g Gesture) {
	var arg0 *C.GtkGesture

	arg0 = (*C.GtkGesture)(unsafe.Pointer(g.Native()))

	C.gtk_gesture_get_device(arg0)
}

// GetGroup returns all gestures in the group of @gesture
func (g gesture) GetGroup(g Gesture) {
	var arg0 *C.GtkGesture

	arg0 = (*C.GtkGesture)(unsafe.Pointer(g.Native()))

	C.gtk_gesture_get_group(arg0)
}

// LastEvent returns the last event that was processed for @sequence.
//
// Note that the returned pointer is only valid as long as the @sequence is
// still interpreted by the @gesture. If in doubt, you should make a copy of
// the event.
func (g gesture) LastEvent(g Gesture, sequence *gdk.EventSequence) {
	var arg0 *C.GtkGesture
	var arg1 *C.GdkEventSequence

	arg0 = (*C.GtkGesture)(unsafe.Pointer(g.Native()))
	arg1 = (*C.GdkEventSequence)(unsafe.Pointer(sequence.Native()))

	C.gtk_gesture_get_last_event(arg0, arg1)
}

// LastUpdatedSequence returns the EventSequence that was last updated on
// @gesture.
func (g gesture) LastUpdatedSequence(g Gesture) {
	var arg0 *C.GtkGesture

	arg0 = (*C.GtkGesture)(unsafe.Pointer(g.Native()))

	C.gtk_gesture_get_last_updated_sequence(arg0)
}

// Point: if @sequence is currently being interpreted by @gesture, this
// function returns true and fills in @x and @y with the last coordinates
// stored for that event sequence. The coordinates are always relative to
// the widget allocation.
func (g gesture) Point(g Gesture, sequence *gdk.EventSequence) (x float64, y float64, ok bool) {
	var arg0 *C.GtkGesture
	var arg1 *C.GdkEventSequence

	arg0 = (*C.GtkGesture)(unsafe.Pointer(g.Native()))
	arg1 = (*C.GdkEventSequence)(unsafe.Pointer(sequence.Native()))

	var arg2 C.double
	var x float64
	var arg3 C.double
	var y float64
	var cret C.gboolean
	var ok bool

	cret = C.gtk_gesture_get_point(arg0, arg1, &arg2, &arg3)

	x = float64(&arg2)
	y = float64(&arg3)
	if cret {
		ok = true
	}

	return x, y, ok
}

// SequenceState returns the @sequence state, as seen by @gesture.
func (g gesture) SequenceState(g Gesture, sequence *gdk.EventSequence) {
	var arg0 *C.GtkGesture
	var arg1 *C.GdkEventSequence

	arg0 = (*C.GtkGesture)(unsafe.Pointer(g.Native()))
	arg1 = (*C.GdkEventSequence)(unsafe.Pointer(sequence.Native()))

	C.gtk_gesture_get_sequence_state(arg0, arg1)
}

// Sequences returns the list of EventSequences currently being interpreted
// by @gesture.
func (g gesture) Sequences(g Gesture) {
	var arg0 *C.GtkGesture

	arg0 = (*C.GtkGesture)(unsafe.Pointer(g.Native()))

	C.gtk_gesture_get_sequences(arg0)
}

// Group adds @gesture to the same group than @group_gesture. Gestures are
// by default isolated in their own groups.
//
// Both gestures must have been added to the same widget before they can be
// grouped.
//
// When gestures are grouped, the state of EventSequences is kept in sync
// for all of those, so calling gtk_gesture_set_sequence_state(), on one
// will transfer the same value to the others.
//
// Groups also perform an "implicit grabbing" of sequences, if a
// EventSequence state is set to K_EVENT_SEQUENCE_CLAIMED on one group,
// every other gesture group attached to the same Widget will switch the
// state for that sequence to K_EVENT_SEQUENCE_DENIED.
func (g gesture) Group(g Gesture, gesture Gesture) {
	var arg0 *C.GtkGesture
	var arg1 *C.GtkGesture

	arg0 = (*C.GtkGesture)(unsafe.Pointer(g.Native()))
	arg1 = (*C.GtkGesture)(unsafe.Pointer(gesture.Native()))

	C.gtk_gesture_group(arg0, arg1)
}

// HandlesSequence returns true if @gesture is currently handling events
// corresponding to @sequence.
func (g gesture) HandlesSequence(g Gesture, sequence *gdk.EventSequence) bool {
	var arg0 *C.GtkGesture
	var arg1 *C.GdkEventSequence

	arg0 = (*C.GtkGesture)(unsafe.Pointer(g.Native()))
	arg1 = (*C.GdkEventSequence)(unsafe.Pointer(sequence.Native()))

	var cret C.gboolean
	var ok bool

	cret = C.gtk_gesture_handles_sequence(arg0, arg1)

	if cret {
		ok = true
	}

	return ok
}

// IsActive returns true if the gesture is currently active. A gesture is
// active meanwhile there are touch sequences interacting with it.
func (g gesture) IsActive(g Gesture) bool {
	var arg0 *C.GtkGesture

	arg0 = (*C.GtkGesture)(unsafe.Pointer(g.Native()))

	var cret C.gboolean
	var ok bool

	cret = C.gtk_gesture_is_active(arg0)

	if cret {
		ok = true
	}

	return ok
}

// IsGroupedWith returns true if both gestures pertain to the same group.
func (g gesture) IsGroupedWith(g Gesture, other Gesture) bool {
	var arg0 *C.GtkGesture
	var arg1 *C.GtkGesture

	arg0 = (*C.GtkGesture)(unsafe.Pointer(g.Native()))
	arg1 = (*C.GtkGesture)(unsafe.Pointer(other.Native()))

	var cret C.gboolean
	var ok bool

	cret = C.gtk_gesture_is_grouped_with(arg0, arg1)

	if cret {
		ok = true
	}

	return ok
}

// IsRecognized returns true if the gesture is currently recognized. A
// gesture is recognized if there are as many interacting touch sequences as
// required by @gesture.
func (g gesture) IsRecognized(g Gesture) bool {
	var arg0 *C.GtkGesture

	arg0 = (*C.GtkGesture)(unsafe.Pointer(g.Native()))

	var cret C.gboolean
	var ok bool

	cret = C.gtk_gesture_is_recognized(arg0)

	if cret {
		ok = true
	}

	return ok
}

// SetSequenceState sets the state of @sequence in @gesture. Sequences start
// in state K_EVENT_SEQUENCE_NONE, and whenever they change state, they can
// never go back to that state. Likewise, sequences in state
// K_EVENT_SEQUENCE_DENIED cannot turn back to a not denied state. With
// these rules, the lifetime of an event sequence is constrained to the next
// four:
//
// * None * None → Denied * None → Claimed * None → Claimed → Denied
//
// Note: Due to event handling ordering, it may be unsafe to set the state
// on another gesture within a Gesture::begin signal handler, as the
// callback might be executed before the other gesture knows about the
// sequence. A safe way to perform this could be:
//
//    static void
//    first_gesture_begin_cb (GtkGesture       *first_gesture,
//                            GdkEventSequence *sequence,
//                            gpointer          user_data)
//    {
//      gtk_gesture_set_sequence_state (first_gesture, sequence, GTK_EVENT_SEQUENCE_CLAIMED);
//      gtk_gesture_set_sequence_state (second_gesture, sequence, GTK_EVENT_SEQUENCE_DENIED);
//    }
//
//    static void
//    second_gesture_begin_cb (GtkGesture       *second_gesture,
//                             GdkEventSequence *sequence,
//                             gpointer          user_data)
//    {
//      if (gtk_gesture_get_sequence_state (first_gesture, sequence) == GTK_EVENT_SEQUENCE_CLAIMED)
//        gtk_gesture_set_sequence_state (second_gesture, sequence, GTK_EVENT_SEQUENCE_DENIED);
//    }
//
// If both gestures are in the same group, just set the state on the gesture
// emitting the event, the sequence will be already be initialized to the
// group's global state when the second gesture processes the event.
func (g gesture) SetSequenceState(g Gesture, sequence *gdk.EventSequence, state EventSequenceState) bool {
	var arg0 *C.GtkGesture
	var arg1 *C.GdkEventSequence
	var arg2 C.GtkEventSequenceState

	arg0 = (*C.GtkGesture)(unsafe.Pointer(g.Native()))
	arg1 = (*C.GdkEventSequence)(unsafe.Pointer(sequence.Native()))
	arg2 = (C.GtkEventSequenceState)(state)

	var cret C.gboolean
	var ok bool

	cret = C.gtk_gesture_set_sequence_state(arg0, arg1, arg2)

	if cret {
		ok = true
	}

	return ok
}

// SetState sets the state of all sequences that @gesture is currently
// interacting with. See gtk_gesture_set_sequence_state() for more details
// on sequence states.
func (g gesture) SetState(g Gesture, state EventSequenceState) bool {
	var arg0 *C.GtkGesture
	var arg1 C.GtkEventSequenceState

	arg0 = (*C.GtkGesture)(unsafe.Pointer(g.Native()))
	arg1 = (C.GtkEventSequenceState)(state)

	var cret C.gboolean
	var ok bool

	cret = C.gtk_gesture_set_state(arg0, arg1)

	if cret {
		ok = true
	}

	return ok
}

// Ungroup separates @gesture into an isolated group.
func (g gesture) Ungroup(g Gesture) {
	var arg0 *C.GtkGesture

	arg0 = (*C.GtkGesture)(unsafe.Pointer(g.Native()))

	C.gtk_gesture_ungroup(arg0)
}
