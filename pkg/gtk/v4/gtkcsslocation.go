// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

// CSSLocation represents a location in a file or other source of data parsed by
// the CSS engine.
//
// The @bytes and @line_bytes offsets are meant to be used to programmatically
// match data. The @lines and @line_chars offsets can be used for printing the
// location in a file.
//
// Note that the @lines parameter starts from 0 and is increased whenever a CSS
// line break is encountered. (CSS defines the C character sequences "\r\n",
// "\r", "\n" and "\f" as newlines.) If your document uses different rules for
// line breaking, you might want run into problems here.
type CSSLocation struct {
	native C.GtkCssLocation
}

// WrapCSSLocation wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapCSSLocation(ptr unsafe.Pointer) *CSSLocation {
	if ptr == nil {
		return nil
	}

	return (*CSSLocation)(ptr)
}

func marshalCSSLocation(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapCSSLocation(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (c *CSSLocation) Native() unsafe.Pointer {
	return unsafe.Pointer(&c.native)
}

// Bytes gets the field inside the struct.
func (c *CSSLocation) Bytes() uint {
	var v uint
	v = (uint)(c.native.bytes)
	return v
}

// Chars gets the field inside the struct.
func (c *CSSLocation) Chars() uint {
	var v uint
	v = (uint)(c.native.chars)
	return v
}

// Lines gets the field inside the struct.
func (c *CSSLocation) Lines() uint {
	var v uint
	v = (uint)(c.native.lines)
	return v
}

// LineBytes gets the field inside the struct.
func (c *CSSLocation) LineBytes() uint {
	var v uint
	v = (uint)(c.native.line_bytes)
	return v
}

// LineChars gets the field inside the struct.
func (c *CSSLocation) LineChars() uint {
	var v uint
	v = (uint)(c.native.line_chars)
	return v
}
