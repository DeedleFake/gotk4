// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: glib-2.0 gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_actionable_get_type()), F: marshalActionable},
	})
}

// ActionableOverrider contains methods that are overridable. This
// interface is a subset of the interface Actionable.
type ActionableOverrider interface {
	// ActionName gets the action name for @actionable.
	ActionName() string
	// SetActionName specifies the name of the action with which this widget
	// should be associated.
	//
	// If @action_name is nil then the widget will be unassociated from any
	// previous action.
	//
	// Usually this function is used when the widget is located (or will be
	// located) within the hierarchy of a `GtkApplicationWindow`.
	//
	// Names are of the form “win.save” or “app.quit” for actions on the
	// containing `GtkApplicationWindow` or its associated `GtkApplication`,
	// respectively. This is the same form used for actions in the `GMenu`
	// associated with the window.
	SetActionName(actionName string)
}

// Actionable: the `GtkActionable` interface provides a convenient way of
// asscociating widgets with actions.
//
// It primarily consists of two properties:
// [property@Gtk.Actionable:action-name] and
// [property@Gtk.Actionable:action-target]. There are also some convenience APIs
// for setting these properties.
//
// The action will be looked up in action groups that are found among the
// widgets ancestors. Most commonly, these will be the actions with the “win.”
// or “app.” prefix that are associated with the `GtkApplicationWindow` or
// `GtkApplication`, but other action groups that are added with
// [method@Gtk.Widget.insert_action_group] will be consulted as well.
type Actionable interface {
	Widget
	ActionableOverrider

	// SetDetailedActionName sets the action-name and associated string target
	// value of an actionable widget.
	//
	// @detailed_action_name is a string in the format accepted by
	// g_action_parse_detailed_name().
	SetDetailedActionName(detailedActionName string)
}

// actionable implements the Actionable interface.
type actionable struct {
	Widget
}

var _ Actionable = (*actionable)(nil)

// WrapActionable wraps a GObject to a type that implements interface
// Actionable. It is primarily used internally.
func WrapActionable(obj *externglib.Object) Actionable {
	return Actionable{
		Widget: WrapWidget(obj),
	}
}

func marshalActionable(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapActionable(obj), nil
}

// ActionName gets the action name for @actionable.
func (a actionable) ActionName() string {
	var _arg0 *C.GtkActionable // out

	_arg0 = (*C.GtkActionable)(unsafe.Pointer(a.Native()))

	var _cret *C.char // in

	_cret = C.gtk_actionable_get_action_name(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

// SetActionName specifies the name of the action with which this widget
// should be associated.
//
// If @action_name is nil then the widget will be unassociated from any
// previous action.
//
// Usually this function is used when the widget is located (or will be
// located) within the hierarchy of a `GtkApplicationWindow`.
//
// Names are of the form “win.save” or “app.quit” for actions on the
// containing `GtkApplicationWindow` or its associated `GtkApplication`,
// respectively. This is the same form used for actions in the `GMenu`
// associated with the window.
func (a actionable) SetActionName(actionName string) {
	var _arg0 *C.GtkActionable // out
	var _arg1 *C.char          // out

	_arg0 = (*C.GtkActionable)(unsafe.Pointer(a.Native()))
	_arg1 = (*C.char)(C.CString(actionName))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_actionable_set_action_name(_arg0, _arg1)
}

// SetDetailedActionName sets the action-name and associated string target
// value of an actionable widget.
//
// @detailed_action_name is a string in the format accepted by
// g_action_parse_detailed_name().
func (a actionable) SetDetailedActionName(detailedActionName string) {
	var _arg0 *C.GtkActionable // out
	var _arg1 *C.char          // out

	_arg0 = (*C.GtkActionable)(unsafe.Pointer(a.Native()))
	_arg1 = (*C.char)(C.CString(detailedActionName))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_actionable_set_detailed_action_name(_arg0, _arg1)
}
