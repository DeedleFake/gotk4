// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_list_base_get_type()), F: marshalListBase},
	})
}

// ListBase: `GtkListBase` is the abstract base class for GTK's list widgets.
type ListBase interface {
	Widget

	// AsAccessible casts the class to the Accessible interface.
	AsAccessible() Accessible
	// AsBuildable casts the class to the Buildable interface.
	AsBuildable() Buildable
	// AsConstraintTarget casts the class to the ConstraintTarget interface.
	AsConstraintTarget() ConstraintTarget
	// AsOrientable casts the class to the Orientable interface.
	AsOrientable() Orientable
	// AsScrollable casts the class to the Scrollable interface.
	AsScrollable() Scrollable
}

// listBase implements the ListBase class.
type listBase struct {
	Widget
}

// WrapListBase wraps a GObject to the right type. It is
// primarily used internally.
func WrapListBase(obj *externglib.Object) ListBase {
	return listBase{
		Widget: WrapWidget(obj),
	}
}

func marshalListBase(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapListBase(obj), nil
}

func (l listBase) AsAccessible() Accessible {
	return WrapAccessible(gextras.InternObject(l))
}

func (l listBase) AsBuildable() Buildable {
	return WrapBuildable(gextras.InternObject(l))
}

func (l listBase) AsConstraintTarget() ConstraintTarget {
	return WrapConstraintTarget(gextras.InternObject(l))
}

func (l listBase) AsOrientable() Orientable {
	return WrapOrientable(gextras.InternObject(l))
}

func (l listBase) AsScrollable() Scrollable {
	return WrapScrollable(gextras.InternObject(l))
}
