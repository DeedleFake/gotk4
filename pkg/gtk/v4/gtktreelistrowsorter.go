// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_tree_list_row_sorter_get_type()), F: marshalTreeListRowSorter},
	})
}

// TreeListRowSorter: `GtkTreeListRowSorter` is a special-purpose sorter that
// will apply a given sorter to the levels in a tree.
//
// Here is an example for setting up a column view with a tree model and a
// `GtkTreeListSorter`:
//
// “`c column_sorter = gtk_column_view_get_sorter (view); sorter =
// gtk_tree_list_row_sorter_new (g_object_ref (column_sorter)); sort_model =
// gtk_sort_list_model_new (tree_model, sorter); selection =
// gtk_single_selection_new (sort_model); gtk_column_view_set_model (view,
// G_LIST_MODEL (selection)); “`
type TreeListRowSorter interface {
	gextras.Objector

	// Sorter returns the sorter used by @self.
	Sorter() *SorterClass
	// SetSorter sets the sorter to use for items with the same parent.
	//
	// This sorter will be passed the [property@Gtk.TreeListRow:item] of the
	// tree list rows passed to @self.
	SetSorter(sorter Sorter)
}

// TreeListRowSorterClass implements the TreeListRowSorter interface.
type TreeListRowSorterClass struct {
	SorterClass
}

var _ TreeListRowSorter = (*TreeListRowSorterClass)(nil)

func wrapTreeListRowSorter(obj *externglib.Object) TreeListRowSorter {
	return &TreeListRowSorterClass{
		SorterClass: SorterClass{
			Object: obj,
		},
	}
}

func marshalTreeListRowSorter(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapTreeListRowSorter(obj), nil
}

// NewTreeListRowSorter: create a special-purpose sorter that applies the
// sorting of @sorter to the levels of a `GtkTreeListModel`.
//
// Note that this sorter relies on [property@Gtk.TreeListModel:passthrough]
// being false as it can only sort [class@Gtk.TreeListRow]s.
func NewTreeListRowSorter(sorter Sorter) *TreeListRowSorterClass {
	var _arg1 *C.GtkSorter            // out
	var _cret *C.GtkTreeListRowSorter // in

	_arg1 = (*C.GtkSorter)(unsafe.Pointer(sorter.Native()))

	_cret = C.gtk_tree_list_row_sorter_new(_arg1)

	var _treeListRowSorter *TreeListRowSorterClass // out

	_treeListRowSorter = (gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret)))).(*TreeListRowSorterClass)

	return _treeListRowSorter
}

// Sorter returns the sorter used by @self.
func (self *TreeListRowSorterClass) Sorter() *SorterClass {
	var _arg0 *C.GtkTreeListRowSorter // out
	var _cret *C.GtkSorter            // in

	_arg0 = (*C.GtkTreeListRowSorter)(unsafe.Pointer(self.Native()))

	_cret = C.gtk_tree_list_row_sorter_get_sorter(_arg0)

	var _sorter *SorterClass // out

	_sorter = (gextras.CastObject(externglib.Take(unsafe.Pointer(_cret)))).(*SorterClass)

	return _sorter
}

// SetSorter sets the sorter to use for items with the same parent.
//
// This sorter will be passed the [property@Gtk.TreeListRow:item] of the tree
// list rows passed to @self.
func (self *TreeListRowSorterClass) SetSorter(sorter Sorter) {
	var _arg0 *C.GtkTreeListRowSorter // out
	var _arg1 *C.GtkSorter            // out

	_arg0 = (*C.GtkTreeListRowSorter)(unsafe.Pointer(self.Native()))
	_arg1 = (*C.GtkSorter)(unsafe.Pointer(sorter.Native()))

	C.gtk_tree_list_row_sorter_set_sorter(_arg0, _arg1)
}
