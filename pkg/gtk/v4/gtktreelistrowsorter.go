// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_tree_list_row_sorter_get_type()), F: marshalTreeListRowSorter},
	})
}

// TreeListRowSorter: `GtkTreeListRowSorter` is a special-purpose sorter that
// will apply a given sorter to the levels in a tree.
//
// Here is an example for setting up a column view with a tree model and a
// `GtkTreeListSorter`:
//
// “`c column_sorter = gtk_column_view_get_sorter (view); sorter =
// gtk_tree_list_row_sorter_new (g_object_ref (column_sorter)); sort_model =
// gtk_sort_list_model_new (tree_model, sorter); selection =
// gtk_single_selection_new (sort_model); gtk_column_view_set_model (view,
// G_LIST_MODEL (selection)); “`
type TreeListRowSorter interface {
	Sorter

	// AsSorter casts the class to the Sorter interface.
	AsSorter() Sorter

	// Changed emits the [signal@Gtk.Sorter::changed] signal to notify all users
	// of the sorter that it has changed.
	//
	// Users of the sorter should then update the sort order via
	// gtk_sorter_compare().
	//
	// Depending on the @change parameter, it may be possible to update the sort
	// order without a full resorting. Refer to the [enum@Gtk.SorterChange]
	// documentation for details.
	//
	// This function is intended for implementors of `GtkSorter` subclasses and
	// should not be called from other functions.
	//
	// This method is inherited from Sorter
	Changed(change SorterChange)
	// Compare compares two given items according to the sort order implemented
	// by the sorter.
	//
	// Sorters implement a partial order:
	//
	// * It is reflexive, ie a = a * It is antisymmetric, ie if a < b and b < a,
	// then a = b * It is transitive, ie given any 3 items with a ≤ b and b ≤ c,
	// then a ≤ c
	//
	// The sorter may signal it conforms to additional constraints via the
	// return value of [method@Gtk.Sorter.get_order].
	//
	// This method is inherited from Sorter
	Compare(item1 gextras.Objector, item2 gextras.Objector) Ordering
	// GetOrder gets the order that @self conforms to.
	//
	// See [enum@Gtk.SorterOrder] for details of the possible return values.
	//
	// This function is intended to allow optimizations.
	//
	// This method is inherited from Sorter
	GetOrder() SorterOrder

	// Sorter returns the sorter used by @self.
	Sorter() Sorter
	// SetSorter sets the sorter to use for items with the same parent.
	//
	// This sorter will be passed the [property@Gtk.TreeListRow:item] of the
	// tree list rows passed to @self.
	SetSorter(sorter Sorter)
}

// treeListRowSorter implements the TreeListRowSorter interface.
type treeListRowSorter struct {
	*externglib.Object
}

var _ TreeListRowSorter = (*treeListRowSorter)(nil)

// WrapTreeListRowSorter wraps a GObject to a type that implements
// interface TreeListRowSorter. It is primarily used internally.
func WrapTreeListRowSorter(obj *externglib.Object) TreeListRowSorter {
	return treeListRowSorter{obj}
}

func marshalTreeListRowSorter(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapTreeListRowSorter(obj), nil
}

// NewTreeListRowSorter: create a special-purpose sorter that applies the
// sorting of @sorter to the levels of a `GtkTreeListModel`.
//
// Note that this sorter relies on [property@Gtk.TreeListModel:passthrough]
// being false as it can only sort [class@Gtk.TreeListRow]s.
func NewTreeListRowSorter(sorter Sorter) TreeListRowSorter {
	var _arg1 *C.GtkSorter            // out
	var _cret *C.GtkTreeListRowSorter // in

	_arg1 = (*C.GtkSorter)(unsafe.Pointer(sorter.Native()))

	_cret = C.gtk_tree_list_row_sorter_new(_arg1)

	var _treeListRowSorter TreeListRowSorter // out

	_treeListRowSorter = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(TreeListRowSorter)

	return _treeListRowSorter
}

func (t treeListRowSorter) AsSorter() Sorter {
	return WrapSorter(gextras.InternObject(t))
}

func (s treeListRowSorter) Changed(change SorterChange) {
	WrapSorter(gextras.InternObject(s)).Changed(change)
}

func (s treeListRowSorter) Compare(item1 gextras.Objector, item2 gextras.Objector) Ordering {
	return WrapSorter(gextras.InternObject(s)).Compare(item1, item2)
}

func (s treeListRowSorter) GetOrder() SorterOrder {
	return WrapSorter(gextras.InternObject(s)).GetOrder()
}

func (s treeListRowSorter) Sorter() Sorter {
	var _arg0 *C.GtkTreeListRowSorter // out
	var _cret *C.GtkSorter            // in

	_arg0 = (*C.GtkTreeListRowSorter)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_tree_list_row_sorter_get_sorter(_arg0)

	var _sorter Sorter // out

	_sorter = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Sorter)

	return _sorter
}

func (s treeListRowSorter) SetSorter(sorter Sorter) {
	var _arg0 *C.GtkTreeListRowSorter // out
	var _arg1 *C.GtkSorter            // out

	_arg0 = (*C.GtkTreeListRowSorter)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GtkSorter)(unsafe.Pointer(sorter.Native()))

	C.gtk_tree_list_row_sorter_set_sorter(_arg0, _arg1)
}
