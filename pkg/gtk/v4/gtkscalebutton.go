// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"reflect"
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_scale_button_get_type()), F: marshalScaleButton},
	})
}

// ScaleButton: `GtkScaleButton` provides a button which pops up a scale widget.
//
// This kind of widget is commonly used for volume controls in multimedia
// applications, and GTK provides a [class@Gtk.VolumeButton] subclass that is
// tailored for this use case.
//
//
// CSS nodes
//
// `GtkScaleButton` has a single CSS node with name button. To differentiate it
// from a plain `GtkButton`, it gets the .scale style class.
type ScaleButton interface {
	Widget
	Accessible
	Buildable
	ConstraintTarget
	Orientable

	// Adjustment gets the `GtkAdjustment` associated with the
	// `GtkScaleButton`’s scale.
	//
	// See [method@Gtk.Range.get_adjustment] for details.
	Adjustment() Adjustment
	// MinusButton retrieves the minus button of the `GtkScaleButton`.
	MinusButton() Button
	// PlusButton retrieves the plus button of the `GtkScaleButton.`
	PlusButton() Button
	// Popup retrieves the popup of the `GtkScaleButton`.
	Popup() Widget
	// Value gets the current value of the scale button.
	Value() float64
	// SetAdjustment sets the `GtkAdjustment` to be used as a model for the
	// `GtkScaleButton`’s scale.
	//
	// See [method@Gtk.Range.set_adjustment] for details.
	SetAdjustment(adjustment Adjustment)
	// SetIcons sets the icons to be used by the scale button.
	SetIcons(icons []string)
	// SetValue sets the current value of the scale.
	//
	// If the value is outside the minimum or maximum range values, it will be
	// clamped to fit inside them.
	//
	// The scale button emits the [signal@Gtk.ScaleButton::value-changed] signal
	// if the value changes.
	SetValue(value float64)
}

// scaleButton implements the ScaleButton interface.
type scaleButton struct {
	Widget
	Accessible
	Buildable
	ConstraintTarget
	Orientable
}

var _ ScaleButton = (*scaleButton)(nil)

// WrapScaleButton wraps a GObject to the right type. It is
// primarily used internally.
func WrapScaleButton(obj *externglib.Object) ScaleButton {
	return ScaleButton{
		Widget:           WrapWidget(obj),
		Accessible:       WrapAccessible(obj),
		Buildable:        WrapBuildable(obj),
		ConstraintTarget: WrapConstraintTarget(obj),
		Orientable:       WrapOrientable(obj),
	}
}

func marshalScaleButton(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapScaleButton(obj), nil
}

// NewScaleButton constructs a class ScaleButton.
func NewScaleButton(min float64, max float64, step float64, icons []string) ScaleButton {
	var arg1 C.double
	var arg2 C.double
	var arg3 C.double
	var arg4 **C.char

	arg1 = C.double(min)
	arg2 = C.double(max)
	arg3 = C.double(step)
	{
		var dst []*C.char
		ptr := C.malloc(unsafe.Sizeof((*struct{})(nil)) * (len(icons) + 1))
		sliceHeader := (*reflect.SliceHeader)(unsafe.Pointer(&dst))
		sliceHeader.Data = uintptr(unsafe.Pointer(ptr))
		sliceHeader.Len = len(icons)
		sliceHeader.Cap = len(icons)
		defer C.free(unsafe.Pointer(ptr))

		for i := 0; i < len(icons); i++ {
			src := icons[i]
			dst[i] = (*C.gchar)(C.CString(src))
			defer C.free(unsafe.Pointer(dst[i]))
		}

		arg4 = (**C.char)(unsafe.Pointer(ptr))
	}

	ret := C.gtk_scale_button_new(arg1, arg2, arg3, arg4)

	var ret0 ScaleButton

	ret0 = gextras.CastObject(externglib.Take(unsafe.Pointer(ret.Native()))).(ScaleButton)

	return ret0
}

// Adjustment gets the `GtkAdjustment` associated with the
// `GtkScaleButton`’s scale.
//
// See [method@Gtk.Range.get_adjustment] for details.
func (b scaleButton) Adjustment() Adjustment {
	var arg0 *C.GtkScaleButton

	arg0 = (*C.GtkScaleButton)(b.Native())

	ret := C.gtk_scale_button_get_adjustment(arg0)

	var ret0 Adjustment

	ret0 = gextras.CastObject(externglib.Take(unsafe.Pointer(ret.Native()))).(Adjustment)

	return ret0
}

// MinusButton retrieves the minus button of the `GtkScaleButton`.
func (b scaleButton) MinusButton() Button {
	var arg0 *C.GtkScaleButton

	arg0 = (*C.GtkScaleButton)(b.Native())

	ret := C.gtk_scale_button_get_minus_button(arg0)

	var ret0 Button

	ret0 = gextras.CastObject(externglib.Take(unsafe.Pointer(ret.Native()))).(Button)

	return ret0
}

// PlusButton retrieves the plus button of the `GtkScaleButton.`
func (b scaleButton) PlusButton() Button {
	var arg0 *C.GtkScaleButton

	arg0 = (*C.GtkScaleButton)(b.Native())

	ret := C.gtk_scale_button_get_plus_button(arg0)

	var ret0 Button

	ret0 = gextras.CastObject(externglib.Take(unsafe.Pointer(ret.Native()))).(Button)

	return ret0
}

// Popup retrieves the popup of the `GtkScaleButton`.
func (b scaleButton) Popup() Widget {
	var arg0 *C.GtkScaleButton

	arg0 = (*C.GtkScaleButton)(b.Native())

	ret := C.gtk_scale_button_get_popup(arg0)

	var ret0 Widget

	ret0 = gextras.CastObject(externglib.Take(unsafe.Pointer(ret.Native()))).(Widget)

	return ret0
}

// Value gets the current value of the scale button.
func (b scaleButton) Value() float64 {
	var arg0 *C.GtkScaleButton

	arg0 = (*C.GtkScaleButton)(b.Native())

	ret := C.gtk_scale_button_get_value(arg0)

	var ret0 float64

	ret0 = float64(ret)

	return ret0
}

// SetAdjustment sets the `GtkAdjustment` to be used as a model for the
// `GtkScaleButton`’s scale.
//
// See [method@Gtk.Range.set_adjustment] for details.
func (b scaleButton) SetAdjustment(adjustment Adjustment) {
	var arg0 *C.GtkScaleButton
	var arg1 *C.GtkAdjustment

	arg0 = (*C.GtkScaleButton)(b.Native())
	arg1 = (*C.GtkAdjustment)(adjustment.Native())

	C.gtk_scale_button_set_adjustment(arg0, arg1)
}

// SetIcons sets the icons to be used by the scale button.
func (b scaleButton) SetIcons(icons []string) {
	var arg0 *C.GtkScaleButton
	var arg1 **C.char

	arg0 = (*C.GtkScaleButton)(b.Native())
	{
		var dst []*C.char
		ptr := C.malloc(unsafe.Sizeof((*struct{})(nil)) * (len(icons) + 1))
		sliceHeader := (*reflect.SliceHeader)(unsafe.Pointer(&dst))
		sliceHeader.Data = uintptr(unsafe.Pointer(ptr))
		sliceHeader.Len = len(icons)
		sliceHeader.Cap = len(icons)
		defer C.free(unsafe.Pointer(ptr))

		for i := 0; i < len(icons); i++ {
			src := icons[i]
			dst[i] = (*C.gchar)(C.CString(src))
			defer C.free(unsafe.Pointer(dst[i]))
		}

		arg1 = (**C.char)(unsafe.Pointer(ptr))
	}

	C.gtk_scale_button_set_icons(arg0, arg1)
}

// SetValue sets the current value of the scale.
//
// If the value is outside the minimum or maximum range values, it will be
// clamped to fit inside them.
//
// The scale button emits the [signal@Gtk.ScaleButton::value-changed] signal
// if the value changes.
func (b scaleButton) SetValue(value float64) {
	var arg0 *C.GtkScaleButton
	var arg1 C.double

	arg0 = (*C.GtkScaleButton)(b.Native())
	arg1 = C.double(value)

	C.gtk_scale_button_set_value(arg0, arg1)
}
