// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_scale_button_get_type()), F: marshalScaleButton},
	})
}

// ScaleButton: `GtkScaleButton` provides a button which pops up a scale widget.
//
// This kind of widget is commonly used for volume controls in multimedia
// applications, and GTK provides a [class@Gtk.VolumeButton] subclass that is
// tailored for this use case.
//
//
// CSS nodes
//
// `GtkScaleButton` has a single CSS node with name button. To differentiate it
// from a plain `GtkButton`, it gets the .scale style class.
type ScaleButton interface {
	Widget
	Orientable

	Adjustment() Adjustment

	MinusButton() Button

	PlusButton() Button

	Popup() Widget

	Value() float64

	SetAdjustmentScaleButton(adjustment Adjustment)

	SetIconsScaleButton(icons []string)

	SetValueScaleButton(value float64)
}

// scaleButton implements the ScaleButton class.
type scaleButton struct {
	Widget
}

// WrapScaleButton wraps a GObject to the right type. It is
// primarily used internally.
func WrapScaleButton(obj *externglib.Object) ScaleButton {
	return scaleButton{
		Widget: WrapWidget(obj),
	}
}

func marshalScaleButton(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapScaleButton(obj), nil
}

func NewScaleButton(min float64, max float64, step float64, icons []string) ScaleButton {
	var _arg1 C.double // out
	var _arg2 C.double // out
	var _arg3 C.double // out
	var _arg4 **C.char
	var _cret *C.GtkWidget // in

	_arg1 = C.double(min)
	_arg2 = C.double(max)
	_arg3 = C.double(step)
	_arg4 = (**C.char)(C.malloc(C.ulong(len(icons)+1) * C.ulong(unsafe.Sizeof(uint(0)))))
	defer C.free(unsafe.Pointer(_arg4))
	{
		out := unsafe.Slice(_arg4, len(icons))
		for i := range icons {
			out[i] = (*C.char)(C.CString(icons[i]))
			defer C.free(unsafe.Pointer(out[i]))
		}
	}

	_cret = C.gtk_scale_button_new(_arg1, _arg2, _arg3, _arg4)

	var _scaleButton ScaleButton // out

	_scaleButton = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(ScaleButton)

	return _scaleButton
}

func (b scaleButton) Adjustment() Adjustment {
	var _arg0 *C.GtkScaleButton // out
	var _cret *C.GtkAdjustment  // in

	_arg0 = (*C.GtkScaleButton)(unsafe.Pointer(b.Native()))

	_cret = C.gtk_scale_button_get_adjustment(_arg0)

	var _adjustment Adjustment // out

	_adjustment = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Adjustment)

	return _adjustment
}

func (b scaleButton) MinusButton() Button {
	var _arg0 *C.GtkScaleButton // out
	var _cret *C.GtkWidget      // in

	_arg0 = (*C.GtkScaleButton)(unsafe.Pointer(b.Native()))

	_cret = C.gtk_scale_button_get_minus_button(_arg0)

	var _ret Button // out

	_ret = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Button)

	return _ret
}

func (b scaleButton) PlusButton() Button {
	var _arg0 *C.GtkScaleButton // out
	var _cret *C.GtkWidget      // in

	_arg0 = (*C.GtkScaleButton)(unsafe.Pointer(b.Native()))

	_cret = C.gtk_scale_button_get_plus_button(_arg0)

	var _ret Button // out

	_ret = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Button)

	return _ret
}

func (b scaleButton) Popup() Widget {
	var _arg0 *C.GtkScaleButton // out
	var _cret *C.GtkWidget      // in

	_arg0 = (*C.GtkScaleButton)(unsafe.Pointer(b.Native()))

	_cret = C.gtk_scale_button_get_popup(_arg0)

	var _widget Widget // out

	_widget = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Widget)

	return _widget
}

func (b scaleButton) Value() float64 {
	var _arg0 *C.GtkScaleButton // out
	var _cret C.double          // in

	_arg0 = (*C.GtkScaleButton)(unsafe.Pointer(b.Native()))

	_cret = C.gtk_scale_button_get_value(_arg0)

	var _gdouble float64 // out

	_gdouble = float64(_cret)

	return _gdouble
}

func (b scaleButton) SetAdjustmentScaleButton(adjustment Adjustment) {
	var _arg0 *C.GtkScaleButton // out
	var _arg1 *C.GtkAdjustment  // out

	_arg0 = (*C.GtkScaleButton)(unsafe.Pointer(b.Native()))
	_arg1 = (*C.GtkAdjustment)(unsafe.Pointer(adjustment.Native()))

	C.gtk_scale_button_set_adjustment(_arg0, _arg1)
}

func (b scaleButton) SetIconsScaleButton(icons []string) {
	var _arg0 *C.GtkScaleButton // out
	var _arg1 **C.char

	_arg0 = (*C.GtkScaleButton)(unsafe.Pointer(b.Native()))
	_arg1 = (**C.char)(C.malloc(C.ulong(len(icons)+1) * C.ulong(unsafe.Sizeof(uint(0)))))
	defer C.free(unsafe.Pointer(_arg1))
	{
		out := unsafe.Slice(_arg1, len(icons))
		for i := range icons {
			out[i] = (*C.char)(C.CString(icons[i]))
			defer C.free(unsafe.Pointer(out[i]))
		}
	}

	C.gtk_scale_button_set_icons(_arg0, _arg1)
}

func (b scaleButton) SetValueScaleButton(value float64) {
	var _arg0 *C.GtkScaleButton // out
	var _arg1 C.double          // out

	_arg0 = (*C.GtkScaleButton)(unsafe.Pointer(b.Native()))
	_arg1 = C.double(value)

	C.gtk_scale_button_set_value(_arg0, _arg1)
}

func (s scaleButton) AccessibleRole() AccessibleRole {
	return WrapAccessible(gextras.InternObject(s)).AccessibleRole()
}

func (s scaleButton) ResetProperty(property AccessibleProperty) {
	WrapAccessible(gextras.InternObject(s)).ResetProperty(property)
}

func (s scaleButton) ResetRelation(relation AccessibleRelation) {
	WrapAccessible(gextras.InternObject(s)).ResetRelation(relation)
}

func (s scaleButton) ResetState(state AccessibleState) {
	WrapAccessible(gextras.InternObject(s)).ResetState(state)
}

func (s scaleButton) UpdatePropertyValue(properties []AccessibleProperty, values []externglib.Value) {
	WrapAccessible(gextras.InternObject(s)).UpdatePropertyValue(properties, values)
}

func (s scaleButton) UpdateRelationValue(relations []AccessibleRelation, values []externglib.Value) {
	WrapAccessible(gextras.InternObject(s)).UpdateRelationValue(relations, values)
}

func (s scaleButton) UpdateStateValue(states []AccessibleState, values []externglib.Value) {
	WrapAccessible(gextras.InternObject(s)).UpdateStateValue(states, values)
}

func (b scaleButton) BuildableID() string {
	return WrapBuildable(gextras.InternObject(b)).BuildableID()
}

func (o scaleButton) Orientation() Orientation {
	return WrapOrientable(gextras.InternObject(o)).Orientation()
}

func (o scaleButton) SetOrientation(orientation Orientation) {
	WrapOrientable(gextras.InternObject(o)).SetOrientation(orientation)
}
