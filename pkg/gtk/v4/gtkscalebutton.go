// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	"github.com/diamondburned/gotk4/internal/ptr"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_scale_button_get_type()), F: marshalScaleButton},
	})
}

// ScaleButton provides a button which pops up a scale widget. This kind of
// widget is commonly used for volume controls in multimedia applications, and
// GTK provides a VolumeButton subclass that is tailored for this use case.
//
//
// CSS nodes
//
// GtkScaleButton has a single CSS node with name button. To differentiate it
// from a plain Button, it gets the .scale style class.
type ScaleButton interface {
	Widget
	Accessible
	Buildable
	ConstraintTarget
	Orientable

	// Adjustment gets the Adjustment associated with the ScaleButton’s scale.
	// See gtk_range_get_adjustment() for details.
	Adjustment() Adjustment
	// MinusButton retrieves the minus button of the ScaleButton.
	MinusButton() Button
	// PlusButton retrieves the plus button of the ScaleButton.
	PlusButton() Button
	// Popup retrieves the popup of the ScaleButton.
	Popup() Widget
	// Value gets the current value of the scale button.
	Value() float64
	// SetAdjustment sets the Adjustment to be used as a model for the
	// ScaleButton’s scale. See gtk_range_set_adjustment() for details.
	SetAdjustment(adjustment Adjustment)
	// SetIcons sets the icons to be used by the scale button. For details, see
	// the ScaleButton:icons property.
	SetIcons(icons []string)
	// SetValue sets the current value of the scale; if the value is outside the
	// minimum or maximum range values, it will be clamped to fit inside them.
	// The scale button emits the ScaleButton::value-changed signal if the value
	// changes.
	SetValue(value float64)
}

// scaleButton implements the ScaleButton interface.
type scaleButton struct {
	Widget
	Accessible
	Buildable
	ConstraintTarget
	Orientable
}

var _ ScaleButton = (*scaleButton)(nil)

// WrapScaleButton wraps a GObject to the right type. It is
// primarily used internally.
func WrapScaleButton(obj *externglib.Object) ScaleButton {
	return ScaleButton{
		Widget:           WrapWidget(obj),
		Accessible:       WrapAccessible(obj),
		Buildable:        WrapBuildable(obj),
		ConstraintTarget: WrapConstraintTarget(obj),
		Orientable:       WrapOrientable(obj),
	}
}

func marshalScaleButton(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapScaleButton(obj), nil
}

// NewScaleButton constructs a class ScaleButton.
func NewScaleButton(min float64, max float64, step float64, icons []string) ScaleButton {
	var arg1 C.double
	var arg2 C.double
	var arg3 C.double
	var arg4 **C.char

	arg1 = C.double(min)
	arg2 = C.double(max)
	arg3 = C.double(step)
	arg4 = C.malloc(len(icons) * (unsafe.Sizeof(int(0)) + 1))
	defer C.free(unsafe.Pointer(arg4))

	{
		var out []*C.char
		ptr.SetSlice(unsafe.Pointer(&dst), unsafe.Pointer(arg4), int(len(icons)))

		for i := range icons {
			out[i] = (*C.char)(C.CString(icons[i]))
			defer C.free(unsafe.Pointer(out[i]))
		}
	}

	var cret C.GtkScaleButton
	var goret1 ScaleButton

	cret = C.gtk_scale_button_new(min, max, step, icons)

	goret1 = gextras.CastObject(externglib.Take(unsafe.Pointer(cret.Native()))).(ScaleButton)

	return goret1
}

// Adjustment gets the Adjustment associated with the ScaleButton’s scale.
// See gtk_range_get_adjustment() for details.
func (b scaleButton) Adjustment() Adjustment {
	var arg0 *C.GtkScaleButton

	arg0 = (*C.GtkScaleButton)(unsafe.Pointer(b.Native()))

	var cret *C.GtkAdjustment
	var goret1 Adjustment

	cret = C.gtk_scale_button_get_adjustment(arg0)

	goret1 = gextras.CastObject(externglib.Take(unsafe.Pointer(cret.Native()))).(Adjustment)

	return goret1
}

// MinusButton retrieves the minus button of the ScaleButton.
func (b scaleButton) MinusButton() Button {
	var arg0 *C.GtkScaleButton

	arg0 = (*C.GtkScaleButton)(unsafe.Pointer(b.Native()))

	var cret *C.GtkWidget
	var goret1 Button

	cret = C.gtk_scale_button_get_minus_button(arg0)

	goret1 = gextras.CastObject(externglib.Take(unsafe.Pointer(cret.Native()))).(Button)

	return goret1
}

// PlusButton retrieves the plus button of the ScaleButton.
func (b scaleButton) PlusButton() Button {
	var arg0 *C.GtkScaleButton

	arg0 = (*C.GtkScaleButton)(unsafe.Pointer(b.Native()))

	var cret *C.GtkWidget
	var goret1 Button

	cret = C.gtk_scale_button_get_plus_button(arg0)

	goret1 = gextras.CastObject(externglib.Take(unsafe.Pointer(cret.Native()))).(Button)

	return goret1
}

// Popup retrieves the popup of the ScaleButton.
func (b scaleButton) Popup() Widget {
	var arg0 *C.GtkScaleButton

	arg0 = (*C.GtkScaleButton)(unsafe.Pointer(b.Native()))

	var cret *C.GtkWidget
	var goret1 Widget

	cret = C.gtk_scale_button_get_popup(arg0)

	goret1 = gextras.CastObject(externglib.Take(unsafe.Pointer(cret.Native()))).(Widget)

	return goret1
}

// Value gets the current value of the scale button.
func (b scaleButton) Value() float64 {
	var arg0 *C.GtkScaleButton

	arg0 = (*C.GtkScaleButton)(unsafe.Pointer(b.Native()))

	var cret C.double
	var goret1 float64

	cret = C.gtk_scale_button_get_value(arg0)

	goret1 = C.double(cret)

	return goret1
}

// SetAdjustment sets the Adjustment to be used as a model for the
// ScaleButton’s scale. See gtk_range_set_adjustment() for details.
func (b scaleButton) SetAdjustment(adjustment Adjustment) {
	var arg0 *C.GtkScaleButton
	var arg1 *C.GtkAdjustment

	arg0 = (*C.GtkScaleButton)(unsafe.Pointer(b.Native()))
	arg1 = (*C.GtkAdjustment)(unsafe.Pointer(adjustment.Native()))

	C.gtk_scale_button_set_adjustment(arg0, adjustment)
}

// SetIcons sets the icons to be used by the scale button. For details, see
// the ScaleButton:icons property.
func (b scaleButton) SetIcons(icons []string) {
	var arg0 *C.GtkScaleButton
	var arg1 **C.char

	arg0 = (*C.GtkScaleButton)(unsafe.Pointer(b.Native()))
	arg1 = C.malloc(len(icons) * (unsafe.Sizeof(int(0)) + 1))
	defer C.free(unsafe.Pointer(arg1))

	{
		var out []*C.char
		ptr.SetSlice(unsafe.Pointer(&dst), unsafe.Pointer(arg1), int(len(icons)))

		for i := range icons {
			out[i] = (*C.char)(C.CString(icons[i]))
			defer C.free(unsafe.Pointer(out[i]))
		}
	}

	C.gtk_scale_button_set_icons(arg0, icons)
}

// SetValue sets the current value of the scale; if the value is outside the
// minimum or maximum range values, it will be clamped to fit inside them.
// The scale button emits the ScaleButton::value-changed signal if the value
// changes.
func (b scaleButton) SetValue(value float64) {
	var arg0 *C.GtkScaleButton
	var arg1 C.double

	arg0 = (*C.GtkScaleButton)(unsafe.Pointer(b.Native()))
	arg1 = C.double(value)

	C.gtk_scale_button_set_value(arg0, value)
}
