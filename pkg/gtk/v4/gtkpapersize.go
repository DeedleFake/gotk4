// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/glib/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <stdbool.h>
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_paper_size_get_type()), F: marshalPaperSize},
	})
}

// PaperSizeGetDefault returns the name of the default paper size, which depends
// on the current locale.
func PaperSizeGetDefault() string {
	var cret *C.char
	var ret1 string

	cret = C.gtk_paper_size_get_default()

	ret1 = C.GoString(cret)

	return ret1
}

// PaperSizeGetPaperSizes creates a list of known paper sizes.
func PaperSizeGetPaperSizes(includeCustom bool) *glib.List {
	var arg1 C.gboolean

	if includeCustom {
		arg1 = C.gboolean(1)
	}

	var cret *C.GList
	var ret1 *glib.List

	cret = C.gtk_paper_size_get_paper_sizes(includeCustom)

	ret1 = glib.WrapList(unsafe.Pointer(cret))
	runtime.SetFinalizer(ret1, func(v *glib.List) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return ret1
}

// PaperSize: gtkPaperSize handles paper sizes. It uses the standard called PWG
// 5101.1-2002 PWG: Standard for Media Standardized Names
// (http://www.pwg.org/standards.html) to name the paper sizes (and to get the
// data for the page sizes). In addition to standard paper sizes, GtkPaperSize
// allows to construct custom paper sizes with arbitrary dimensions.
//
// The PaperSize object stores not only the dimensions (width and height) of a
// paper size and its name, it also provides default [print
// margins][print-margins].
type PaperSize struct {
	native C.GtkPaperSize
}

// WrapPaperSize wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPaperSize(ptr unsafe.Pointer) *PaperSize {
	if ptr == nil {
		return nil
	}

	return (*PaperSize)(ptr)
}

func marshalPaperSize(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPaperSize(unsafe.Pointer(b)), nil
}

// NewPaperSize constructs a struct PaperSize.
func NewPaperSize(name string) *PaperSize {
	var arg1 *C.char

	arg1 = (*C.char)(C.CString(name))
	defer C.free(unsafe.Pointer(arg1))

	var cret *C.GtkPaperSize
	var ret1 *PaperSize

	cret = C.gtk_paper_size_new(name)

	ret1 = WrapPaperSize(unsafe.Pointer(cret))
	runtime.SetFinalizer(ret1, func(v *PaperSize) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return ret1
}

// NewPaperSizeCustom constructs a struct PaperSize.
func NewPaperSizeCustom(name string, displayName string, width float64, height float64, unit Unit) *PaperSize {
	var arg1 *C.char
	var arg2 *C.char
	var arg3 C.double
	var arg4 C.double
	var arg5 C.GtkUnit

	arg1 = (*C.char)(C.CString(name))
	defer C.free(unsafe.Pointer(arg1))
	arg2 = (*C.char)(C.CString(displayName))
	defer C.free(unsafe.Pointer(arg2))
	arg3 = C.double(width)
	arg4 = C.double(height)
	arg5 = (C.GtkUnit)(unit)

	var cret *C.GtkPaperSize
	var ret1 *PaperSize

	cret = C.gtk_paper_size_new_custom(name, displayName, width, height, unit)

	ret1 = WrapPaperSize(unsafe.Pointer(cret))
	runtime.SetFinalizer(ret1, func(v *PaperSize) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return ret1
}

// NewPaperSizeFromGVariant constructs a struct PaperSize.
func NewPaperSizeFromGVariant(variant *glib.Variant) *PaperSize {
	var arg1 *C.GVariant

	arg1 = (*C.GVariant)(unsafe.Pointer(variant.Native()))

	var cret *C.GtkPaperSize
	var ret1 *PaperSize

	cret = C.gtk_paper_size_new_from_gvariant(variant)

	ret1 = WrapPaperSize(unsafe.Pointer(cret))
	runtime.SetFinalizer(ret1, func(v *PaperSize) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return ret1
}

// NewPaperSizeFromIpp constructs a struct PaperSize.
func NewPaperSizeFromIpp(ippName string, width float64, height float64) *PaperSize {
	var arg1 *C.char
	var arg2 C.double
	var arg3 C.double

	arg1 = (*C.char)(C.CString(ippName))
	defer C.free(unsafe.Pointer(arg1))
	arg2 = C.double(width)
	arg3 = C.double(height)

	var cret *C.GtkPaperSize
	var ret1 *PaperSize

	cret = C.gtk_paper_size_new_from_ipp(ippName, width, height)

	ret1 = WrapPaperSize(unsafe.Pointer(cret))
	runtime.SetFinalizer(ret1, func(v *PaperSize) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return ret1
}

// NewPaperSizeFromKeyFile constructs a struct PaperSize.
func NewPaperSizeFromKeyFile(keyFile *glib.KeyFile, groupName string) (paperSize *PaperSize, err error) {
	var arg1 *C.GKeyFile
	var arg2 *C.char
	var errout *C.GError

	arg1 = (*C.GKeyFile)(unsafe.Pointer(keyFile.Native()))
	arg2 = (*C.char)(C.CString(groupName))
	defer C.free(unsafe.Pointer(arg2))

	var cret *C.GtkPaperSize
	var ret1 *PaperSize
	var goerr error

	cret = C.gtk_paper_size_new_from_key_file(keyFile, groupName, &errout)

	ret1 = WrapPaperSize(unsafe.Pointer(cret))
	runtime.SetFinalizer(ret1, func(v *PaperSize) {
		C.free(unsafe.Pointer(v.Native()))
	})
	if errout != nil {
		goerr = fmt.Errorf("%d: %s", errout.code, C.GoString(errout.message))
		C.g_error_free(errout)
	}

	return ret1, goerr
}

// NewPaperSizeFromPpd constructs a struct PaperSize.
func NewPaperSizeFromPpd(ppdName string, ppdDisplayName string, width float64, height float64) *PaperSize {
	var arg1 *C.char
	var arg2 *C.char
	var arg3 C.double
	var arg4 C.double

	arg1 = (*C.char)(C.CString(ppdName))
	defer C.free(unsafe.Pointer(arg1))
	arg2 = (*C.char)(C.CString(ppdDisplayName))
	defer C.free(unsafe.Pointer(arg2))
	arg3 = C.double(width)
	arg4 = C.double(height)

	var cret *C.GtkPaperSize
	var ret1 *PaperSize

	cret = C.gtk_paper_size_new_from_ppd(ppdName, ppdDisplayName, width, height)

	ret1 = WrapPaperSize(unsafe.Pointer(cret))
	runtime.SetFinalizer(ret1, func(v *PaperSize) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return ret1
}

// Native returns the underlying C source pointer.
func (p *PaperSize) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

// Copy copies an existing PaperSize.
func (o *PaperSize) Copy() *PaperSize {
	var arg0 *C.GtkPaperSize

	arg0 = (*C.GtkPaperSize)(unsafe.Pointer(o.Native()))

	var cret *C.GtkPaperSize
	var ret1 *PaperSize

	cret = C.gtk_paper_size_copy(arg0)

	ret1 = WrapPaperSize(unsafe.Pointer(cret))
	runtime.SetFinalizer(ret1, func(v *PaperSize) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return ret1
}

// Free: free the given PaperSize object.
func (s *PaperSize) Free() {
	var arg0 *C.GtkPaperSize

	arg0 = (*C.GtkPaperSize)(unsafe.Pointer(s.Native()))

	C.gtk_paper_size_free(arg0)
}

// DefaultBottomMargin gets the default bottom margin for the PaperSize.
func (s *PaperSize) DefaultBottomMargin(unit Unit) float64 {
	var arg0 *C.GtkPaperSize
	var arg1 C.GtkUnit

	arg0 = (*C.GtkPaperSize)(unsafe.Pointer(s.Native()))
	arg1 = (C.GtkUnit)(unit)

	var cret C.double
	var ret1 float64

	cret = C.gtk_paper_size_get_default_bottom_margin(arg0, unit)

	ret1 = C.double(cret)

	return ret1
}

// DefaultLeftMargin gets the default left margin for the PaperSize.
func (s *PaperSize) DefaultLeftMargin(unit Unit) float64 {
	var arg0 *C.GtkPaperSize
	var arg1 C.GtkUnit

	arg0 = (*C.GtkPaperSize)(unsafe.Pointer(s.Native()))
	arg1 = (C.GtkUnit)(unit)

	var cret C.double
	var ret1 float64

	cret = C.gtk_paper_size_get_default_left_margin(arg0, unit)

	ret1 = C.double(cret)

	return ret1
}

// DefaultRightMargin gets the default right margin for the PaperSize.
func (s *PaperSize) DefaultRightMargin(unit Unit) float64 {
	var arg0 *C.GtkPaperSize
	var arg1 C.GtkUnit

	arg0 = (*C.GtkPaperSize)(unsafe.Pointer(s.Native()))
	arg1 = (C.GtkUnit)(unit)

	var cret C.double
	var ret1 float64

	cret = C.gtk_paper_size_get_default_right_margin(arg0, unit)

	ret1 = C.double(cret)

	return ret1
}

// DefaultTopMargin gets the default top margin for the PaperSize.
func (s *PaperSize) DefaultTopMargin(unit Unit) float64 {
	var arg0 *C.GtkPaperSize
	var arg1 C.GtkUnit

	arg0 = (*C.GtkPaperSize)(unsafe.Pointer(s.Native()))
	arg1 = (C.GtkUnit)(unit)

	var cret C.double
	var ret1 float64

	cret = C.gtk_paper_size_get_default_top_margin(arg0, unit)

	ret1 = C.double(cret)

	return ret1
}

// DisplayName gets the human-readable name of the PaperSize.
func (s *PaperSize) DisplayName() string {
	var arg0 *C.GtkPaperSize

	arg0 = (*C.GtkPaperSize)(unsafe.Pointer(s.Native()))

	var cret *C.char
	var ret1 string

	cret = C.gtk_paper_size_get_display_name(arg0)

	ret1 = C.GoString(cret)

	return ret1
}

// Height gets the paper height of the PaperSize, in units of @unit.
func (s *PaperSize) Height(unit Unit) float64 {
	var arg0 *C.GtkPaperSize
	var arg1 C.GtkUnit

	arg0 = (*C.GtkPaperSize)(unsafe.Pointer(s.Native()))
	arg1 = (C.GtkUnit)(unit)

	var cret C.double
	var ret1 float64

	cret = C.gtk_paper_size_get_height(arg0, unit)

	ret1 = C.double(cret)

	return ret1
}

// Name gets the name of the PaperSize.
func (s *PaperSize) Name() string {
	var arg0 *C.GtkPaperSize

	arg0 = (*C.GtkPaperSize)(unsafe.Pointer(s.Native()))

	var cret *C.char
	var ret1 string

	cret = C.gtk_paper_size_get_name(arg0)

	ret1 = C.GoString(cret)

	return ret1
}

// PpdName gets the PPD name of the PaperSize, which may be nil.
func (s *PaperSize) PpdName() string {
	var arg0 *C.GtkPaperSize

	arg0 = (*C.GtkPaperSize)(unsafe.Pointer(s.Native()))

	var cret *C.char
	var ret1 string

	cret = C.gtk_paper_size_get_ppd_name(arg0)

	ret1 = C.GoString(cret)

	return ret1
}

// Width gets the paper width of the PaperSize, in units of @unit.
func (s *PaperSize) Width(unit Unit) float64 {
	var arg0 *C.GtkPaperSize
	var arg1 C.GtkUnit

	arg0 = (*C.GtkPaperSize)(unsafe.Pointer(s.Native()))
	arg1 = (C.GtkUnit)(unit)

	var cret C.double
	var ret1 float64

	cret = C.gtk_paper_size_get_width(arg0, unit)

	ret1 = C.double(cret)

	return ret1
}

// IsCustom returns true if @size is not a standard paper size.
func (s *PaperSize) IsCustom() bool {
	var arg0 *C.GtkPaperSize

	arg0 = (*C.GtkPaperSize)(unsafe.Pointer(s.Native()))

	var cret C.gboolean
	var ret1 bool

	cret = C.gtk_paper_size_is_custom(arg0)

	ret1 = C.bool(cret) != C.false

	return ret1
}

// IsEqual compares two PaperSize objects.
func (s *PaperSize) IsEqual(size2 *PaperSize) bool {
	var arg0 *C.GtkPaperSize
	var arg1 *C.GtkPaperSize

	arg0 = (*C.GtkPaperSize)(unsafe.Pointer(s.Native()))
	arg1 = (*C.GtkPaperSize)(unsafe.Pointer(size2.Native()))

	var cret C.gboolean
	var ret1 bool

	cret = C.gtk_paper_size_is_equal(arg0, size2)

	ret1 = C.bool(cret) != C.false

	return ret1
}

// IsIpp returns true if @size is an IPP standard paper size.
func (s *PaperSize) IsIpp() bool {
	var arg0 *C.GtkPaperSize

	arg0 = (*C.GtkPaperSize)(unsafe.Pointer(s.Native()))

	var cret C.gboolean
	var ret1 bool

	cret = C.gtk_paper_size_is_ipp(arg0)

	ret1 = C.bool(cret) != C.false

	return ret1
}

// SetSize changes the dimensions of a @size to @width x @height.
func (s *PaperSize) SetSize(width float64, height float64, unit Unit) {
	var arg0 *C.GtkPaperSize
	var arg1 C.double
	var arg2 C.double
	var arg3 C.GtkUnit

	arg0 = (*C.GtkPaperSize)(unsafe.Pointer(s.Native()))
	arg1 = C.double(width)
	arg2 = C.double(height)
	arg3 = (C.GtkUnit)(unit)

	C.gtk_paper_size_set_size(arg0, width, height, unit)
}

// ToGVariant: serialize a paper size to an a{sv} variant.
func (p *PaperSize) ToGVariant() *glib.Variant {
	var arg0 *C.GtkPaperSize

	arg0 = (*C.GtkPaperSize)(unsafe.Pointer(p.Native()))

	var cret *C.GVariant
	var ret1 *glib.Variant

	cret = C.gtk_paper_size_to_gvariant(arg0)

	ret1 = glib.WrapVariant(unsafe.Pointer(cret))

	return ret1
}

// ToKeyFile: this function adds the paper size from @size to @key_file.
func (s *PaperSize) ToKeyFile(keyFile *glib.KeyFile, groupName string) {
	var arg0 *C.GtkPaperSize
	var arg1 *C.GKeyFile
	var arg2 *C.char

	arg0 = (*C.GtkPaperSize)(unsafe.Pointer(s.Native()))
	arg1 = (*C.GKeyFile)(unsafe.Pointer(keyFile.Native()))
	arg2 = (*C.char)(C.CString(groupName))
	defer C.free(unsafe.Pointer(arg2))

	C.gtk_paper_size_to_key_file(arg0, keyFile, groupName)
}
