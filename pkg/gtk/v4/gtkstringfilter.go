// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_string_filter_get_type()), F: marshalStringFilter},
	})
}

// StringFilter: gtkStringFilter determines whether to include items by looking
// at strings and comparing them to a fixed search term. The strings are
// obtained from the items by evaluating a Expression.
//
// GtkStringFilter has several different modes of comparison - it can match the
// whole string, just a prefix, or any substring.
type StringFilter interface {
	Filter

	// Expression gets the expression that the string filter uses to obtain
	// strings from items.
	Expression(s StringFilter)
	// IgnoreCase returns whether the filter ignores case differences.
	IgnoreCase(s StringFilter) bool
	// MatchMode returns the match mode that the filter is using.
	MatchMode(s StringFilter)
	// Search gets the search string set via gtk_string_filter_set_search().
	Search(s StringFilter)
	// SetExpression sets the expression that the string filter uses to obtain
	// strings from items. The expression must have a value type of TYPE_STRING.
	SetExpression(s StringFilter, expression Expression)
	// SetIgnoreCase sets whether the filter ignores case differences.
	SetIgnoreCase(s StringFilter, ignoreCase bool)
	// SetMatchMode sets the match mode for the filter.
	SetMatchMode(s StringFilter, mode StringFilterMatchMode)
	// SetSearch sets the string to search for.
	SetSearch(s StringFilter, search string)
}

// stringFilter implements the StringFilter interface.
type stringFilter struct {
	Filter
}

var _ StringFilter = (*stringFilter)(nil)

// WrapStringFilter wraps a GObject to the right type. It is
// primarily used internally.
func WrapStringFilter(obj *externglib.Object) StringFilter {
	return StringFilter{
		Filter: WrapFilter(obj),
	}
}

func marshalStringFilter(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapStringFilter(obj), nil
}

// NewStringFilter constructs a class StringFilter.
func NewStringFilter(expression Expression) {
	var arg1 *C.GtkExpression

	arg1 = (*C.GtkExpression)(unsafe.Pointer(expression.Native()))

	C.gtk_string_filter_new(arg1)
}

// Expression gets the expression that the string filter uses to obtain
// strings from items.
func (s stringFilter) Expression(s StringFilter) {
	var arg0 *C.GtkStringFilter

	arg0 = (*C.GtkStringFilter)(unsafe.Pointer(s.Native()))

	C.gtk_string_filter_get_expression(arg0)
}

// IgnoreCase returns whether the filter ignores case differences.
func (s stringFilter) IgnoreCase(s StringFilter) bool {
	var arg0 *C.GtkStringFilter

	arg0 = (*C.GtkStringFilter)(unsafe.Pointer(s.Native()))

	var cret C.gboolean
	var ok bool

	cret = C.gtk_string_filter_get_ignore_case(arg0)

	if cret {
		ok = true
	}

	return ok
}

// MatchMode returns the match mode that the filter is using.
func (s stringFilter) MatchMode(s StringFilter) {
	var arg0 *C.GtkStringFilter

	arg0 = (*C.GtkStringFilter)(unsafe.Pointer(s.Native()))

	C.gtk_string_filter_get_match_mode(arg0)
}

// Search gets the search string set via gtk_string_filter_set_search().
func (s stringFilter) Search(s StringFilter) {
	var arg0 *C.GtkStringFilter

	arg0 = (*C.GtkStringFilter)(unsafe.Pointer(s.Native()))

	C.gtk_string_filter_get_search(arg0)
}

// SetExpression sets the expression that the string filter uses to obtain
// strings from items. The expression must have a value type of TYPE_STRING.
func (s stringFilter) SetExpression(s StringFilter, expression Expression) {
	var arg0 *C.GtkStringFilter
	var arg1 *C.GtkExpression

	arg0 = (*C.GtkStringFilter)(unsafe.Pointer(s.Native()))
	arg1 = (*C.GtkExpression)(unsafe.Pointer(expression.Native()))

	C.gtk_string_filter_set_expression(arg0, arg1)
}

// SetIgnoreCase sets whether the filter ignores case differences.
func (s stringFilter) SetIgnoreCase(s StringFilter, ignoreCase bool) {
	var arg0 *C.GtkStringFilter
	var arg1 C.gboolean

	arg0 = (*C.GtkStringFilter)(unsafe.Pointer(s.Native()))
	if ignoreCase {
		arg1 = C.gboolean(1)
	}

	C.gtk_string_filter_set_ignore_case(arg0, arg1)
}

// SetMatchMode sets the match mode for the filter.
func (s stringFilter) SetMatchMode(s StringFilter, mode StringFilterMatchMode) {
	var arg0 *C.GtkStringFilter
	var arg1 C.GtkStringFilterMatchMode

	arg0 = (*C.GtkStringFilter)(unsafe.Pointer(s.Native()))
	arg1 = (C.GtkStringFilterMatchMode)(mode)

	C.gtk_string_filter_set_match_mode(arg0, arg1)
}

// SetSearch sets the string to search for.
func (s stringFilter) SetSearch(s StringFilter, search string) {
	var arg0 *C.GtkStringFilter
	var arg1 *C.char

	arg0 = (*C.GtkStringFilter)(unsafe.Pointer(s.Native()))
	arg1 = (*C.char)(C.CString(search))
	defer C.free(unsafe.Pointer(arg1))

	C.gtk_string_filter_set_search(arg0, arg1)
}
