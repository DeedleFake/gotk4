// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_string_filter_get_type()), F: marshalStringFilter},
	})
}

// StringFilter: `GtkStringFilter` determines whether to include items by
// comparing strings to a fixed search term.
//
// The strings are obtained from the items by evaluating a `GtkExpression` set
// with [method@Gtk.StringFilter.set_expression], and they are compared against
// a search term set with [method@Gtk.StringFilter.set_search].
//
// `GtkStringFilter` has several different modes of comparison - it can match
// the whole string, just a prefix, or any substring. Use
// [method@Gtk.StringFilter.set_match_mode] choose a mode.
//
// It is also possible to make case-insensitive comparisons, with
// [method@Gtk.StringFilter.set_ignore_case].
type StringFilter interface {
	Filter

	// Expression gets the expression that the string filter uses to obtain
	// strings from items.
	Expression() Expression
	// IgnoreCase returns whether the filter ignores case differences.
	IgnoreCase() bool
	// MatchMode returns the match mode that the filter is using.
	MatchMode() StringFilterMatchMode
	// Search gets the search term.
	Search() string
	// SetExpression sets the expression that the string filter uses to obtain
	// strings from items.
	//
	// The expression must have a value type of G_TYPE_STRING.
	SetExpression(expression Expression)
	// SetIgnoreCase sets whether the filter ignores case differences.
	SetIgnoreCase(ignoreCase bool)
	// SetMatchMode sets the match mode for the filter.
	SetMatchMode(mode StringFilterMatchMode)
	// SetSearch sets the string to search for.
	SetSearch(search string)
}

// stringFilter implements the StringFilter interface.
type stringFilter struct {
	Filter
}

var _ StringFilter = (*stringFilter)(nil)

// WrapStringFilter wraps a GObject to the right type. It is
// primarily used internally.
func WrapStringFilter(obj *externglib.Object) StringFilter {
	return StringFilter{
		Filter: WrapFilter(obj),
	}
}

func marshalStringFilter(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapStringFilter(obj), nil
}

// NewStringFilter constructs a class StringFilter.
func NewStringFilter(expression Expression) StringFilter {
	var arg1 *C.GtkExpression

	arg1 = (*C.GtkExpression)(unsafe.Pointer(expression.Native()))

	cret := new(C.GtkStringFilter)
	var goret StringFilter

	cret = C.gtk_string_filter_new(arg1)

	goret = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(cret.Native()))).(StringFilter)

	return goret
}

// Expression gets the expression that the string filter uses to obtain
// strings from items.
func (s stringFilter) Expression() Expression {
	var arg0 *C.GtkStringFilter

	arg0 = (*C.GtkStringFilter)(unsafe.Pointer(s.Native()))

	var cret *C.GtkExpression
	var goret Expression

	cret = C.gtk_string_filter_get_expression(arg0)

	goret = gextras.CastObject(externglib.Take(unsafe.Pointer(cret.Native()))).(Expression)

	return goret
}

// IgnoreCase returns whether the filter ignores case differences.
func (s stringFilter) IgnoreCase() bool {
	var arg0 *C.GtkStringFilter

	arg0 = (*C.GtkStringFilter)(unsafe.Pointer(s.Native()))

	var cret C.gboolean
	var goret bool

	cret = C.gtk_string_filter_get_ignore_case(arg0)

	if cret {
		goret = true
	}

	return goret
}

// MatchMode returns the match mode that the filter is using.
func (s stringFilter) MatchMode() StringFilterMatchMode {
	var arg0 *C.GtkStringFilter

	arg0 = (*C.GtkStringFilter)(unsafe.Pointer(s.Native()))

	var cret C.GtkStringFilterMatchMode
	var goret StringFilterMatchMode

	cret = C.gtk_string_filter_get_match_mode(arg0)

	goret = StringFilterMatchMode(cret)

	return goret
}

// Search gets the search term.
func (s stringFilter) Search() string {
	var arg0 *C.GtkStringFilter

	arg0 = (*C.GtkStringFilter)(unsafe.Pointer(s.Native()))

	var cret *C.char
	var goret string

	cret = C.gtk_string_filter_get_search(arg0)

	goret = C.GoString(cret)

	return goret
}

// SetExpression sets the expression that the string filter uses to obtain
// strings from items.
//
// The expression must have a value type of G_TYPE_STRING.
func (s stringFilter) SetExpression(expression Expression) {
	var arg0 *C.GtkStringFilter
	var arg1 *C.GtkExpression

	arg0 = (*C.GtkStringFilter)(unsafe.Pointer(s.Native()))
	arg1 = (*C.GtkExpression)(unsafe.Pointer(expression.Native()))

	C.gtk_string_filter_set_expression(arg0, arg1)
}

// SetIgnoreCase sets whether the filter ignores case differences.
func (s stringFilter) SetIgnoreCase(ignoreCase bool) {
	var arg0 *C.GtkStringFilter
	var arg1 C.gboolean

	arg0 = (*C.GtkStringFilter)(unsafe.Pointer(s.Native()))
	if ignoreCase {
		arg1 = C.gboolean(1)
	}

	C.gtk_string_filter_set_ignore_case(arg0, arg1)
}

// SetMatchMode sets the match mode for the filter.
func (s stringFilter) SetMatchMode(mode StringFilterMatchMode) {
	var arg0 *C.GtkStringFilter
	var arg1 C.GtkStringFilterMatchMode

	arg0 = (*C.GtkStringFilter)(unsafe.Pointer(s.Native()))
	arg1 = (C.GtkStringFilterMatchMode)(mode)

	C.gtk_string_filter_set_match_mode(arg0, arg1)
}

// SetSearch sets the string to search for.
func (s stringFilter) SetSearch(search string) {
	var arg0 *C.GtkStringFilter
	var arg1 *C.char

	arg0 = (*C.GtkStringFilter)(unsafe.Pointer(s.Native()))
	arg1 = (*C.char)(C.CString(search))
	defer C.free(unsafe.Pointer(arg1))

	C.gtk_string_filter_set_search(arg0, arg1)
}
