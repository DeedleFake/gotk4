// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_signal_list_item_factory_get_type()), F: marshalSignalListItemFactory},
	})
}

// SignalListItemFactory is a ListItemFactory that provides signals that user
// code can connect to to manage listitems. Signals are emitted for every
// listitem in the same order:
//
//    1. SignalListItemFactory::setup is emitted to set up permanent things
//    on the listitem. This usually means constructing the widgets used in the
//    row and adding them to the listitem.
//
//    2. SignalListItemFactory::bind is emitted to bind the item passed via
//    ListItem:item to the widgets that have been created in step 1 or to
//    add item-specific widgets. Signals are connected to listen to changes -
//    both to changes in the item to update the widgets or to changes in the
//    widgets to update the item. After this signal has been called, the
//    listitem may be shown in a list widget.
//
//    3. SignalListItemFactory::unbind is emitted to undo everything done
//    in step 2. Usually this means disconnecting signal handlers. Once this
//    signal has been called, the listitem will no longer be used in a list
//    widget.
//
//    4. SignalListItemFactory::bind and SignalListItemFactory::unbind
//    may be emitted multiple times again to bind the listitem for use with
//    new items. By reusing listitems, potentially costly setup can be
//    avoided. However, it means code needs to make sure to properly clean
//    up the listitem in step 3 so that no information from the previous
//    use leaks into the next use.
//
// 5. SignalListItemFactory::teardown is emitted to allow undoing the effects of
// SignalListItemFactory::setup. After this signal was emitted on a listitem,
// the listitem will be destroyed and not be used again.
//
// Note that during the signal emissions, changing properties on the ListItems
// passed will not trigger notify signals as the listitem's notifications are
// frozen. See g_object_freeze_notify() for details.
//
// For tracking changes in other properties in the ListItem, the
// ListItem::notify signal is recommended. The signal can be connected in the
// SignalListItemFactory::setup signal and removed again during
// SignalListItemFactory::teardown.
type SignalListItemFactory interface {
	ListItemFactory
}

// signalListItemFactory implements the SignalListItemFactory interface.
type signalListItemFactory struct {
	ListItemFactory
}

var _ SignalListItemFactory = (*signalListItemFactory)(nil)

// WrapSignalListItemFactory wraps a GObject to the right type. It is
// primarily used internally.
func WrapSignalListItemFactory(obj *externglib.Object) SignalListItemFactory {
	return SignalListItemFactory{
		ListItemFactory: WrapListItemFactory(obj),
	}
}

func marshalSignalListItemFactory(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapSignalListItemFactory(obj), nil
}

// NewSignalListItemFactory constructs a class SignalListItemFactory.
func NewSignalListItemFactory() SignalListItemFactory {
	var cret C.GtkSignalListItemFactory
	var ret1 SignalListItemFactory

	cret = C.gtk_signal_list_item_factory_new()

	ret1 = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(cret.Native()))).(SignalListItemFactory)

	return ret1
}
