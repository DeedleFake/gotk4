// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_entry_get_type()), F: marshalEntry},
	})
}

// Entry: the Entry widget is a single line text entry widget. A fairly large
// set of key bindings are supported by default. If the entered text is longer
// than the allocation of the widget, the widget will scroll so that the cursor
// position is visible.
//
// When using an entry for passwords and other sensitive information, it can be
// put into “password mode” using gtk_entry_set_visibility(). In this mode,
// entered text is displayed using a “invisible” character. By default, GTK
// picks the best invisible character that is available in the current font, but
// it can be changed with gtk_entry_set_invisible_char().
//
// GtkEntry has the ability to display progress or activity information behind
// the text. To make an entry display such information, use
// gtk_entry_set_progress_fraction() or gtk_entry_set_progress_pulse_step().
//
// Additionally, GtkEntry can show icons at either side of the entry. These
// icons can be activatable by clicking, can be set up as drag source and can
// have tooltips. To add an icon, use gtk_entry_set_icon_from_gicon() or one of
// the various other functions that set an icon from an icon name or a
// paintable. To trigger an action when the user clicks an icon, connect to the
// Entry::icon-press signal. To allow DND operations from an icon, use
// gtk_entry_set_icon_drag_source(). To set a tooltip on an icon, use
// gtk_entry_set_icon_tooltip_text() or the corresponding function for markup.
//
// Note that functionality or information that is only available by clicking on
// an icon in an entry may not be accessible at all to users which are not able
// to use a mouse or other pointing device. It is therefore recommended that any
// such functionality should also be available by other means, e.g. via the
// context menu of the entry.
//
// CSS nodes
//
//    entry[.flat][.warning][.error]
//    ├── text[.readonly]
//    ├── image.left
//    ├── image.right
//    ╰── [progress[.pulse]]
//
// GtkEntry has a main node with the name entry. Depending on the properties of
// the entry, the style classes .read-only and .flat may appear. The style
// classes .warning and .error may also be used with entries.
//
// When the entry shows icons, it adds subnodes with the name image and the
// style class .left or .right, depending on where the icon appears.
//
// When the entry shows progress, it adds a subnode with the name progress. The
// node has the style class .pulse when the shown progress is pulsing.
//
// For all the subnodes added to the text node in various situations, see Text.
//
//
// GtkEntry as GtkBuildable
//
// The GtkEntry implementation of the GtkBuildable interface supports a custom
// <attributes> element, which supports any number of <attribute> elements. The
// <attribute> element has attributes named “name“, “value“, “start“ and “end“
// and allows you to specify Attribute values for this label.
//
// An example of a UI definition fragment specifying Pango attributes:
//
//    <object class="GtkEnry">
//      <attributes>
//        <attribute name="weight" value="PANGO_WEIGHT_BOLD"/>
//        <attribute name="background" value="red" start="5" end="10"/>
//      </attributes>
//    </object>
//
// The start and end attributes specify the range of characters to which the
// Pango attribute applies. If start and end are not specified, the attribute is
// applied to the whole text. Note that specifying ranges does not make much
// sense with translatable attributes. Use markup embedded in the translatable
// content instead.
//
//
// Accessibility
//
// GtkEntry uses the K_ACCESSIBLE_ROLE_TEXT_BOX role.
type Entry interface {
	Widget
	Accessible
	Buildable
	CellEditable
	ConstraintTarget
	Editable

	// ActivatesDefault retrieves the value set by
	// gtk_entry_set_activates_default().
	ActivatesDefault(e Entry) bool
	// Alignment gets the value set by gtk_entry_set_alignment().
	Alignment(e Entry)
	// Attributes gets the attribute list that was set on the entry using
	// gtk_entry_set_attributes(), if any.
	Attributes(e Entry)
	// Buffer: get the EntryBuffer object which holds the text for this widget.
	Buffer(e Entry)
	// Completion returns the auxiliary completion object currently in use by
	// @entry.
	Completion(e Entry)
	// CurrentIconDragSource returns the index of the icon which is the source
	// of the current DND operation, or -1.
	CurrentIconDragSource(e Entry)
	// ExtraMenu gets the menu model set with gtk_entry_set_extra_menu().
	ExtraMenu(e Entry)
	// HasFrame gets the value set by gtk_entry_set_has_frame().
	HasFrame(e Entry) bool
	// IconActivatable returns whether the icon is activatable.
	IconActivatable(e Entry, iconPos EntryIconPosition) bool
	// IconArea gets the area where entry’s icon at @icon_pos is drawn. This
	// function is useful when drawing something to the entry in a draw
	// callback.
	//
	// If the entry is not realized or has no icon at the given position,
	// @icon_area is filled with zeros. Otherwise, @icon_area will be filled
	// with the icon's allocation, relative to @entry's allocation.
	IconArea(e Entry, iconPos EntryIconPosition) *gdk.Rectangle
	// IconAtPos finds the icon at the given position and return its index. The
	// position’s coordinates are relative to the @entry’s top left corner. If
	// @x, @y doesn’t lie inside an icon, -1 is returned. This function is
	// intended for use in a Widget::query-tooltip signal handler.
	IconAtPos(e Entry, x int, y int)
	// IconGIcon retrieves the #GIcon used for the icon, or nil if there is no
	// icon or if the icon was set by some other method (e.g., by paintable or
	// icon name).
	IconGIcon(e Entry, iconPos EntryIconPosition)
	// IconName retrieves the icon name used for the icon, or nil if there is no
	// icon or if the icon was set by some other method (e.g., by paintable or
	// gicon).
	IconName(e Entry, iconPos EntryIconPosition)
	// IconPaintable retrieves the Paintable used for the icon.
	//
	// If no Paintable was used for the icon, nil is returned.
	IconPaintable(e Entry, iconPos EntryIconPosition)
	// IconSensitive returns whether the icon appears sensitive or insensitive.
	IconSensitive(e Entry, iconPos EntryIconPosition) bool
	// IconStorageType gets the type of representation being used by the icon to
	// store image data. If the icon has no image data, the return value will be
	// GTK_IMAGE_EMPTY.
	IconStorageType(e Entry, iconPos EntryIconPosition)
	// IconTooltipMarkup gets the contents of the tooltip on the icon at the
	// specified position in @entry.
	IconTooltipMarkup(e Entry, iconPos EntryIconPosition)
	// IconTooltipText gets the contents of the tooltip on the icon at the
	// specified position in @entry.
	IconTooltipText(e Entry, iconPos EntryIconPosition)
	// InputHints gets the value of the Entry:input-hints property.
	InputHints(e Entry)
	// InputPurpose gets the value of the Entry:input-purpose property.
	InputPurpose(e Entry)
	// InvisibleChar retrieves the character displayed in place of the real
	// characters for entries with visibility set to false. See
	// gtk_entry_set_invisible_char().
	InvisibleChar(e Entry)
	// MaxLength retrieves the maximum allowed length of the text in @entry. See
	// gtk_entry_set_max_length().
	//
	// This is equivalent to getting @entry's EntryBuffer and calling
	// gtk_entry_buffer_get_max_length() on it.
	MaxLength(e Entry)
	// OverwriteMode gets the value set by gtk_entry_set_overwrite_mode().
	OverwriteMode(e Entry) bool
	// PlaceholderText retrieves the text that will be displayed when @entry is
	// empty and unfocused
	PlaceholderText(e Entry)
	// ProgressFraction returns the current fraction of the task that’s been
	// completed. See gtk_entry_set_progress_fraction().
	ProgressFraction(e Entry)
	// ProgressPulseStep retrieves the pulse step set with
	// gtk_entry_set_progress_pulse_step().
	ProgressPulseStep(e Entry)
	// Tabs gets the tabstops that were set on the entry using
	// gtk_entry_set_tabs(), if any.
	Tabs(e Entry)
	// TextLength retrieves the current length of the text in @entry.
	//
	// This is equivalent to getting @entry's EntryBuffer and calling
	// gtk_entry_buffer_get_length() on it.
	TextLength(e Entry)
	// Visibility retrieves whether the text in @entry is visible. See
	// gtk_entry_set_visibility().
	Visibility(e Entry) bool
	// GrabFocusWithoutSelecting causes @entry to have keyboard focus.
	//
	// It behaves like gtk_widget_grab_focus(), except that it doesn't select
	// the contents of the entry. You only want to call this on some special
	// entries which the user usually doesn't want to replace all text in, such
	// as search-as-you-type entries.
	GrabFocusWithoutSelecting(e Entry) bool
	// ProgressPulse indicates that some progress is made, but you don’t know
	// how much. Causes the entry’s progress indicator to enter “activity mode,”
	// where a block bounces back and forth. Each call to
	// gtk_entry_progress_pulse() causes the block to move by a little bit (the
	// amount of movement per pulse is determined by
	// gtk_entry_set_progress_pulse_step()).
	ProgressPulse(e Entry)
	// ResetImContext: reset the input method context of the entry if needed.
	//
	// This can be necessary in the case where modifying the buffer would
	// confuse on-going input method behavior.
	ResetImContext(e Entry)
	// SetActivatesDefault: if @setting is true, pressing Enter in the @entry
	// will activate the default widget for the window containing the entry.
	// This usually means that the dialog box containing the entry will be
	// closed, since the default widget is usually one of the dialog buttons.
	SetActivatesDefault(e Entry, setting bool)
	// SetAlignment sets the alignment for the contents of the entry. This
	// controls the horizontal positioning of the contents when the displayed
	// text is shorter than the width of the entry.
	SetAlignment(e Entry, xalign float32)
	// SetAttributes sets a AttrList; the attributes in the list are applied to
	// the entry text.
	SetAttributes(e Entry, attrs *pango.AttrList)
	// SetBuffer: set the EntryBuffer object which holds the text for this
	// widget.
	SetBuffer(e Entry, buffer EntryBuffer)
	// SetCompletion sets @completion to be the auxiliary completion object to
	// use with @entry. All further configuration of the completion mechanism is
	// done on @completion using the EntryCompletion API. Completion is disabled
	// if @completion is set to nil.
	SetCompletion(e Entry, completion EntryCompletion)
	// SetExtraMenu sets a menu model to add when constructing the context menu
	// for @entry.
	SetExtraMenu(e Entry, model gio.MenuModel)
	// SetHasFrame sets whether the entry has a beveled frame around it.
	SetHasFrame(e Entry, setting bool)
	// SetIconActivatable sets whether the icon is activatable.
	SetIconActivatable(e Entry, iconPos EntryIconPosition, activatable bool)
	// SetIconDragSource sets up the icon at the given position so that GTK will
	// start a drag operation when the user clicks and drags the icon.
	SetIconDragSource(e Entry, iconPos EntryIconPosition, provider gdk.ContentProvider, actions gdk.DragAction)
	// SetIconFromGIcon sets the icon shown in the entry at the specified
	// position from the current icon theme. If the icon isn’t known, a “broken
	// image” icon will be displayed instead.
	//
	// If @icon is nil, no icon will be shown in the specified position.
	SetIconFromGIcon(e Entry, iconPos EntryIconPosition, icon gio.Icon)
	// SetIconFromIconName sets the icon shown in the entry at the specified
	// position from the current icon theme.
	//
	// If the icon name isn’t known, a “broken image” icon will be displayed
	// instead.
	//
	// If @icon_name is nil, no icon will be shown in the specified position.
	SetIconFromIconName(e Entry, iconPos EntryIconPosition, iconName string)
	// SetIconFromPaintable sets the icon shown in the specified position using
	// a Paintable
	//
	// If @paintable is nil, no icon will be shown in the specified position.
	SetIconFromPaintable(e Entry, iconPos EntryIconPosition, paintable gdk.Paintable)
	// SetIconSensitive sets the sensitivity for the specified icon.
	SetIconSensitive(e Entry, iconPos EntryIconPosition, sensitive bool)
	// SetIconTooltipMarkup sets @tooltip as the contents of the tooltip for the
	// icon at the specified position. @tooltip is assumed to be marked up with
	// the [Pango text markup language][PangoMarkupFormat].
	//
	// Use nil for @tooltip to remove an existing tooltip.
	//
	// See also gtk_widget_set_tooltip_markup() and
	// gtk_entry_set_icon_tooltip_text().
	SetIconTooltipMarkup(e Entry, iconPos EntryIconPosition, tooltip string)
	// SetIconTooltipText sets @tooltip as the contents of the tooltip for the
	// icon at the specified position.
	//
	// Use nil for @tooltip to remove an existing tooltip.
	//
	// See also gtk_widget_set_tooltip_text() and
	// gtk_entry_set_icon_tooltip_markup().
	//
	// If you unset the widget tooltip via gtk_widget_set_tooltip_text() or
	// gtk_widget_set_tooltip_markup(), this sets GtkWidget:has-tooltip to
	// false, which suppresses icon tooltips too. You can resolve this by then
	// calling gtk_widget_set_has_tooltip() to set GtkWidget:has-tooltip back to
	// true, or setting at least one non-empty tooltip on any icon achieves the
	// same result.
	SetIconTooltipText(e Entry, iconPos EntryIconPosition, tooltip string)
	// SetInputHints sets the Entry:input-hints property, which allows input
	// methods to fine-tune their behaviour.
	SetInputHints(e Entry, hints InputHints)
	// SetInputPurpose sets the Entry:input-purpose property which can be used
	// by on-screen keyboards and other input methods to adjust their behaviour.
	SetInputPurpose(e Entry, purpose InputPurpose)
	// SetInvisibleChar sets the character to use in place of the actual text
	// when gtk_entry_set_visibility() has been called to set text visibility to
	// false. i.e. this is the character used in “password mode” to show the
	// user how many characters have been typed. By default, GTK picks the best
	// invisible char available in the current font. If you set the invisible
	// char to 0, then the user will get no feedback at all; there will be no
	// text on the screen as they type.
	SetInvisibleChar(e Entry, ch uint32)
	// SetMaxLength sets the maximum allowed length of the contents of the
	// widget. If the current contents are longer than the given length, then
	// they will be truncated to fit.
	//
	// This is equivalent to getting @entry's EntryBuffer and calling
	// gtk_entry_buffer_set_max_length() on it.
	SetMaxLength(e Entry, max int)
	// SetOverwriteMode sets whether the text is overwritten when typing in the
	// Entry.
	SetOverwriteMode(e Entry, overwrite bool)
	// SetPlaceholderText sets text to be displayed in @entry when it is empty.
	// This can be used to give a visual hint of the expected contents of the
	// Entry.
	SetPlaceholderText(e Entry, text string)
	// SetProgressFraction causes the entry’s progress indicator to “fill in”
	// the given fraction of the bar. The fraction should be between 0.0 and
	// 1.0, inclusive.
	SetProgressFraction(e Entry, fraction float64)
	// SetProgressPulseStep sets the fraction of total entry width to move the
	// progress bouncing block for each call to gtk_entry_progress_pulse().
	SetProgressPulseStep(e Entry, fraction float64)
	// SetTabs sets a TabArray; the tabstops in the array are applied to the
	// entry text.
	SetTabs(e Entry, tabs *pango.TabArray)
	// SetVisibility sets whether the contents of the entry are visible or not.
	// When visibility is set to false, characters are displayed as the
	// invisible char, and will also appear that way when the text in the entry
	// widget is copied elsewhere.
	//
	// By default, GTK picks the best invisible character available in the
	// current font, but it can be changed with gtk_entry_set_invisible_char().
	//
	// Note that you probably want to set Entry:input-purpose to
	// GTK_INPUT_PURPOSE_PASSWORD or GTK_INPUT_PURPOSE_PIN to inform input
	// methods about the purpose of this entry, in addition to setting
	// visibility to false.
	SetVisibility(e Entry, visible bool)
	// UnsetInvisibleChar unsets the invisible char previously set with
	// gtk_entry_set_invisible_char(). So that the default invisible char is
	// used again.
	UnsetInvisibleChar(e Entry)
}

// entry implements the Entry interface.
type entry struct {
	Widget
	Accessible
	Buildable
	CellEditable
	ConstraintTarget
	Editable
}

var _ Entry = (*entry)(nil)

// WrapEntry wraps a GObject to the right type. It is
// primarily used internally.
func WrapEntry(obj *externglib.Object) Entry {
	return Entry{
		Widget:           WrapWidget(obj),
		Accessible:       WrapAccessible(obj),
		Buildable:        WrapBuildable(obj),
		CellEditable:     WrapCellEditable(obj),
		ConstraintTarget: WrapConstraintTarget(obj),
		Editable:         WrapEditable(obj),
	}
}

func marshalEntry(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapEntry(obj), nil
}

// NewEntry constructs a class Entry.
func NewEntry() {
	C.gtk_entry_new()
}

// NewEntryWithBuffer constructs a class Entry.
func NewEntryWithBuffer(buffer EntryBuffer) {
	var arg1 *C.GtkEntryBuffer

	arg1 = (*C.GtkEntryBuffer)(unsafe.Pointer(buffer.Native()))

	C.gtk_entry_new_with_buffer(arg1)
}

// ActivatesDefault retrieves the value set by
// gtk_entry_set_activates_default().
func (e entry) ActivatesDefault(e Entry) bool {
	var arg0 *C.GtkEntry

	arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))

	var cret C.gboolean
	var ok bool

	cret = C.gtk_entry_get_activates_default(arg0)

	if cret {
		ok = true
	}

	return ok
}

// Alignment gets the value set by gtk_entry_set_alignment().
func (e entry) Alignment(e Entry) {
	var arg0 *C.GtkEntry

	arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))

	C.gtk_entry_get_alignment(arg0)
}

// Attributes gets the attribute list that was set on the entry using
// gtk_entry_set_attributes(), if any.
func (e entry) Attributes(e Entry) {
	var arg0 *C.GtkEntry

	arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))

	C.gtk_entry_get_attributes(arg0)
}

// Buffer: get the EntryBuffer object which holds the text for this widget.
func (e entry) Buffer(e Entry) {
	var arg0 *C.GtkEntry

	arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))

	C.gtk_entry_get_buffer(arg0)
}

// Completion returns the auxiliary completion object currently in use by
// @entry.
func (e entry) Completion(e Entry) {
	var arg0 *C.GtkEntry

	arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))

	C.gtk_entry_get_completion(arg0)
}

// CurrentIconDragSource returns the index of the icon which is the source
// of the current DND operation, or -1.
func (e entry) CurrentIconDragSource(e Entry) {
	var arg0 *C.GtkEntry

	arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))

	C.gtk_entry_get_current_icon_drag_source(arg0)
}

// ExtraMenu gets the menu model set with gtk_entry_set_extra_menu().
func (e entry) ExtraMenu(e Entry) {
	var arg0 *C.GtkEntry

	arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))

	C.gtk_entry_get_extra_menu(arg0)
}

// HasFrame gets the value set by gtk_entry_set_has_frame().
func (e entry) HasFrame(e Entry) bool {
	var arg0 *C.GtkEntry

	arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))

	var cret C.gboolean
	var ok bool

	cret = C.gtk_entry_get_has_frame(arg0)

	if cret {
		ok = true
	}

	return ok
}

// IconActivatable returns whether the icon is activatable.
func (e entry) IconActivatable(e Entry, iconPos EntryIconPosition) bool {
	var arg0 *C.GtkEntry
	var arg1 C.GtkEntryIconPosition

	arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))
	arg1 = (C.GtkEntryIconPosition)(iconPos)

	var cret C.gboolean
	var ok bool

	cret = C.gtk_entry_get_icon_activatable(arg0, arg1)

	if cret {
		ok = true
	}

	return ok
}

// IconArea gets the area where entry’s icon at @icon_pos is drawn. This
// function is useful when drawing something to the entry in a draw
// callback.
//
// If the entry is not realized or has no icon at the given position,
// @icon_area is filled with zeros. Otherwise, @icon_area will be filled
// with the icon's allocation, relative to @entry's allocation.
func (e entry) IconArea(e Entry, iconPos EntryIconPosition) *gdk.Rectangle {
	var arg0 *C.GtkEntry
	var arg1 C.GtkEntryIconPosition

	arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))
	arg1 = (C.GtkEntryIconPosition)(iconPos)

	var arg2 C.GdkRectangle
	var iconArea *gdk.Rectangle

	C.gtk_entry_get_icon_area(arg0, arg1, &arg2)

	iconArea = gdk.WrapRectangle(unsafe.Pointer(&arg2))

	return iconArea
}

// IconAtPos finds the icon at the given position and return its index. The
// position’s coordinates are relative to the @entry’s top left corner. If
// @x, @y doesn’t lie inside an icon, -1 is returned. This function is
// intended for use in a Widget::query-tooltip signal handler.
func (e entry) IconAtPos(e Entry, x int, y int) {
	var arg0 *C.GtkEntry
	var arg1 C.int
	var arg2 C.int

	arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))
	arg1 = C.int(x)
	arg2 = C.int(y)

	C.gtk_entry_get_icon_at_pos(arg0, arg1, arg2)
}

// IconGIcon retrieves the #GIcon used for the icon, or nil if there is no
// icon or if the icon was set by some other method (e.g., by paintable or
// icon name).
func (e entry) IconGIcon(e Entry, iconPos EntryIconPosition) {
	var arg0 *C.GtkEntry
	var arg1 C.GtkEntryIconPosition

	arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))
	arg1 = (C.GtkEntryIconPosition)(iconPos)

	C.gtk_entry_get_icon_gicon(arg0, arg1)
}

// IconName retrieves the icon name used for the icon, or nil if there is no
// icon or if the icon was set by some other method (e.g., by paintable or
// gicon).
func (e entry) IconName(e Entry, iconPos EntryIconPosition) {
	var arg0 *C.GtkEntry
	var arg1 C.GtkEntryIconPosition

	arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))
	arg1 = (C.GtkEntryIconPosition)(iconPos)

	C.gtk_entry_get_icon_name(arg0, arg1)
}

// IconPaintable retrieves the Paintable used for the icon.
//
// If no Paintable was used for the icon, nil is returned.
func (e entry) IconPaintable(e Entry, iconPos EntryIconPosition) {
	var arg0 *C.GtkEntry
	var arg1 C.GtkEntryIconPosition

	arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))
	arg1 = (C.GtkEntryIconPosition)(iconPos)

	C.gtk_entry_get_icon_paintable(arg0, arg1)
}

// IconSensitive returns whether the icon appears sensitive or insensitive.
func (e entry) IconSensitive(e Entry, iconPos EntryIconPosition) bool {
	var arg0 *C.GtkEntry
	var arg1 C.GtkEntryIconPosition

	arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))
	arg1 = (C.GtkEntryIconPosition)(iconPos)

	var cret C.gboolean
	var ok bool

	cret = C.gtk_entry_get_icon_sensitive(arg0, arg1)

	if cret {
		ok = true
	}

	return ok
}

// IconStorageType gets the type of representation being used by the icon to
// store image data. If the icon has no image data, the return value will be
// GTK_IMAGE_EMPTY.
func (e entry) IconStorageType(e Entry, iconPos EntryIconPosition) {
	var arg0 *C.GtkEntry
	var arg1 C.GtkEntryIconPosition

	arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))
	arg1 = (C.GtkEntryIconPosition)(iconPos)

	C.gtk_entry_get_icon_storage_type(arg0, arg1)
}

// IconTooltipMarkup gets the contents of the tooltip on the icon at the
// specified position in @entry.
func (e entry) IconTooltipMarkup(e Entry, iconPos EntryIconPosition) {
	var arg0 *C.GtkEntry
	var arg1 C.GtkEntryIconPosition

	arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))
	arg1 = (C.GtkEntryIconPosition)(iconPos)

	C.gtk_entry_get_icon_tooltip_markup(arg0, arg1)
}

// IconTooltipText gets the contents of the tooltip on the icon at the
// specified position in @entry.
func (e entry) IconTooltipText(e Entry, iconPos EntryIconPosition) {
	var arg0 *C.GtkEntry
	var arg1 C.GtkEntryIconPosition

	arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))
	arg1 = (C.GtkEntryIconPosition)(iconPos)

	C.gtk_entry_get_icon_tooltip_text(arg0, arg1)
}

// InputHints gets the value of the Entry:input-hints property.
func (e entry) InputHints(e Entry) {
	var arg0 *C.GtkEntry

	arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))

	C.gtk_entry_get_input_hints(arg0)
}

// InputPurpose gets the value of the Entry:input-purpose property.
func (e entry) InputPurpose(e Entry) {
	var arg0 *C.GtkEntry

	arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))

	C.gtk_entry_get_input_purpose(arg0)
}

// InvisibleChar retrieves the character displayed in place of the real
// characters for entries with visibility set to false. See
// gtk_entry_set_invisible_char().
func (e entry) InvisibleChar(e Entry) {
	var arg0 *C.GtkEntry

	arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))

	C.gtk_entry_get_invisible_char(arg0)
}

// MaxLength retrieves the maximum allowed length of the text in @entry. See
// gtk_entry_set_max_length().
//
// This is equivalent to getting @entry's EntryBuffer and calling
// gtk_entry_buffer_get_max_length() on it.
func (e entry) MaxLength(e Entry) {
	var arg0 *C.GtkEntry

	arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))

	C.gtk_entry_get_max_length(arg0)
}

// OverwriteMode gets the value set by gtk_entry_set_overwrite_mode().
func (e entry) OverwriteMode(e Entry) bool {
	var arg0 *C.GtkEntry

	arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))

	var cret C.gboolean
	var ok bool

	cret = C.gtk_entry_get_overwrite_mode(arg0)

	if cret {
		ok = true
	}

	return ok
}

// PlaceholderText retrieves the text that will be displayed when @entry is
// empty and unfocused
func (e entry) PlaceholderText(e Entry) {
	var arg0 *C.GtkEntry

	arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))

	C.gtk_entry_get_placeholder_text(arg0)
}

// ProgressFraction returns the current fraction of the task that’s been
// completed. See gtk_entry_set_progress_fraction().
func (e entry) ProgressFraction(e Entry) {
	var arg0 *C.GtkEntry

	arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))

	C.gtk_entry_get_progress_fraction(arg0)
}

// ProgressPulseStep retrieves the pulse step set with
// gtk_entry_set_progress_pulse_step().
func (e entry) ProgressPulseStep(e Entry) {
	var arg0 *C.GtkEntry

	arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))

	C.gtk_entry_get_progress_pulse_step(arg0)
}

// Tabs gets the tabstops that were set on the entry using
// gtk_entry_set_tabs(), if any.
func (e entry) Tabs(e Entry) {
	var arg0 *C.GtkEntry

	arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))

	C.gtk_entry_get_tabs(arg0)
}

// TextLength retrieves the current length of the text in @entry.
//
// This is equivalent to getting @entry's EntryBuffer and calling
// gtk_entry_buffer_get_length() on it.
func (e entry) TextLength(e Entry) {
	var arg0 *C.GtkEntry

	arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))

	C.gtk_entry_get_text_length(arg0)
}

// Visibility retrieves whether the text in @entry is visible. See
// gtk_entry_set_visibility().
func (e entry) Visibility(e Entry) bool {
	var arg0 *C.GtkEntry

	arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))

	var cret C.gboolean
	var ok bool

	cret = C.gtk_entry_get_visibility(arg0)

	if cret {
		ok = true
	}

	return ok
}

// GrabFocusWithoutSelecting causes @entry to have keyboard focus.
//
// It behaves like gtk_widget_grab_focus(), except that it doesn't select
// the contents of the entry. You only want to call this on some special
// entries which the user usually doesn't want to replace all text in, such
// as search-as-you-type entries.
func (e entry) GrabFocusWithoutSelecting(e Entry) bool {
	var arg0 *C.GtkEntry

	arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))

	var cret C.gboolean
	var ok bool

	cret = C.gtk_entry_grab_focus_without_selecting(arg0)

	if cret {
		ok = true
	}

	return ok
}

// ProgressPulse indicates that some progress is made, but you don’t know
// how much. Causes the entry’s progress indicator to enter “activity mode,”
// where a block bounces back and forth. Each call to
// gtk_entry_progress_pulse() causes the block to move by a little bit (the
// amount of movement per pulse is determined by
// gtk_entry_set_progress_pulse_step()).
func (e entry) ProgressPulse(e Entry) {
	var arg0 *C.GtkEntry

	arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))

	C.gtk_entry_progress_pulse(arg0)
}

// ResetImContext: reset the input method context of the entry if needed.
//
// This can be necessary in the case where modifying the buffer would
// confuse on-going input method behavior.
func (e entry) ResetImContext(e Entry) {
	var arg0 *C.GtkEntry

	arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))

	C.gtk_entry_reset_im_context(arg0)
}

// SetActivatesDefault: if @setting is true, pressing Enter in the @entry
// will activate the default widget for the window containing the entry.
// This usually means that the dialog box containing the entry will be
// closed, since the default widget is usually one of the dialog buttons.
func (e entry) SetActivatesDefault(e Entry, setting bool) {
	var arg0 *C.GtkEntry
	var arg1 C.gboolean

	arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))
	if setting {
		arg1 = C.gboolean(1)
	}

	C.gtk_entry_set_activates_default(arg0, arg1)
}

// SetAlignment sets the alignment for the contents of the entry. This
// controls the horizontal positioning of the contents when the displayed
// text is shorter than the width of the entry.
func (e entry) SetAlignment(e Entry, xalign float32) {
	var arg0 *C.GtkEntry
	var arg1 C.float

	arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))
	arg1 = C.float(xalign)

	C.gtk_entry_set_alignment(arg0, arg1)
}

// SetAttributes sets a AttrList; the attributes in the list are applied to
// the entry text.
func (e entry) SetAttributes(e Entry, attrs *pango.AttrList) {
	var arg0 *C.GtkEntry
	var arg1 *C.PangoAttrList

	arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))
	arg1 = (*C.PangoAttrList)(unsafe.Pointer(attrs.Native()))

	C.gtk_entry_set_attributes(arg0, arg1)
}

// SetBuffer: set the EntryBuffer object which holds the text for this
// widget.
func (e entry) SetBuffer(e Entry, buffer EntryBuffer) {
	var arg0 *C.GtkEntry
	var arg1 *C.GtkEntryBuffer

	arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))
	arg1 = (*C.GtkEntryBuffer)(unsafe.Pointer(buffer.Native()))

	C.gtk_entry_set_buffer(arg0, arg1)
}

// SetCompletion sets @completion to be the auxiliary completion object to
// use with @entry. All further configuration of the completion mechanism is
// done on @completion using the EntryCompletion API. Completion is disabled
// if @completion is set to nil.
func (e entry) SetCompletion(e Entry, completion EntryCompletion) {
	var arg0 *C.GtkEntry
	var arg1 *C.GtkEntryCompletion

	arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))
	arg1 = (*C.GtkEntryCompletion)(unsafe.Pointer(completion.Native()))

	C.gtk_entry_set_completion(arg0, arg1)
}

// SetExtraMenu sets a menu model to add when constructing the context menu
// for @entry.
func (e entry) SetExtraMenu(e Entry, model gio.MenuModel) {
	var arg0 *C.GtkEntry
	var arg1 *C.GMenuModel

	arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))
	arg1 = (*C.GMenuModel)(unsafe.Pointer(model.Native()))

	C.gtk_entry_set_extra_menu(arg0, arg1)
}

// SetHasFrame sets whether the entry has a beveled frame around it.
func (e entry) SetHasFrame(e Entry, setting bool) {
	var arg0 *C.GtkEntry
	var arg1 C.gboolean

	arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))
	if setting {
		arg1 = C.gboolean(1)
	}

	C.gtk_entry_set_has_frame(arg0, arg1)
}

// SetIconActivatable sets whether the icon is activatable.
func (e entry) SetIconActivatable(e Entry, iconPos EntryIconPosition, activatable bool) {
	var arg0 *C.GtkEntry
	var arg1 C.GtkEntryIconPosition
	var arg2 C.gboolean

	arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))
	arg1 = (C.GtkEntryIconPosition)(iconPos)
	if activatable {
		arg2 = C.gboolean(1)
	}

	C.gtk_entry_set_icon_activatable(arg0, arg1, arg2)
}

// SetIconDragSource sets up the icon at the given position so that GTK will
// start a drag operation when the user clicks and drags the icon.
func (e entry) SetIconDragSource(e Entry, iconPos EntryIconPosition, provider gdk.ContentProvider, actions gdk.DragAction) {
	var arg0 *C.GtkEntry
	var arg1 C.GtkEntryIconPosition
	var arg2 *C.GdkContentProvider
	var arg3 C.GdkDragAction

	arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))
	arg1 = (C.GtkEntryIconPosition)(iconPos)
	arg2 = (*C.GdkContentProvider)(unsafe.Pointer(provider.Native()))
	arg3 = (C.GdkDragAction)(actions)

	C.gtk_entry_set_icon_drag_source(arg0, arg1, arg2, arg3)
}

// SetIconFromGIcon sets the icon shown in the entry at the specified
// position from the current icon theme. If the icon isn’t known, a “broken
// image” icon will be displayed instead.
//
// If @icon is nil, no icon will be shown in the specified position.
func (e entry) SetIconFromGIcon(e Entry, iconPos EntryIconPosition, icon gio.Icon) {
	var arg0 *C.GtkEntry
	var arg1 C.GtkEntryIconPosition
	var arg2 *C.GIcon

	arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))
	arg1 = (C.GtkEntryIconPosition)(iconPos)
	arg2 = (*C.GIcon)(unsafe.Pointer(icon.Native()))

	C.gtk_entry_set_icon_from_gicon(arg0, arg1, arg2)
}

// SetIconFromIconName sets the icon shown in the entry at the specified
// position from the current icon theme.
//
// If the icon name isn’t known, a “broken image” icon will be displayed
// instead.
//
// If @icon_name is nil, no icon will be shown in the specified position.
func (e entry) SetIconFromIconName(e Entry, iconPos EntryIconPosition, iconName string) {
	var arg0 *C.GtkEntry
	var arg1 C.GtkEntryIconPosition
	var arg2 *C.char

	arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))
	arg1 = (C.GtkEntryIconPosition)(iconPos)
	arg2 = (*C.char)(C.CString(iconName))
	defer C.free(unsafe.Pointer(arg2))

	C.gtk_entry_set_icon_from_icon_name(arg0, arg1, arg2)
}

// SetIconFromPaintable sets the icon shown in the specified position using
// a Paintable
//
// If @paintable is nil, no icon will be shown in the specified position.
func (e entry) SetIconFromPaintable(e Entry, iconPos EntryIconPosition, paintable gdk.Paintable) {
	var arg0 *C.GtkEntry
	var arg1 C.GtkEntryIconPosition
	var arg2 *C.GdkPaintable

	arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))
	arg1 = (C.GtkEntryIconPosition)(iconPos)
	arg2 = (*C.GdkPaintable)(unsafe.Pointer(paintable.Native()))

	C.gtk_entry_set_icon_from_paintable(arg0, arg1, arg2)
}

// SetIconSensitive sets the sensitivity for the specified icon.
func (e entry) SetIconSensitive(e Entry, iconPos EntryIconPosition, sensitive bool) {
	var arg0 *C.GtkEntry
	var arg1 C.GtkEntryIconPosition
	var arg2 C.gboolean

	arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))
	arg1 = (C.GtkEntryIconPosition)(iconPos)
	if sensitive {
		arg2 = C.gboolean(1)
	}

	C.gtk_entry_set_icon_sensitive(arg0, arg1, arg2)
}

// SetIconTooltipMarkup sets @tooltip as the contents of the tooltip for the
// icon at the specified position. @tooltip is assumed to be marked up with
// the [Pango text markup language][PangoMarkupFormat].
//
// Use nil for @tooltip to remove an existing tooltip.
//
// See also gtk_widget_set_tooltip_markup() and
// gtk_entry_set_icon_tooltip_text().
func (e entry) SetIconTooltipMarkup(e Entry, iconPos EntryIconPosition, tooltip string) {
	var arg0 *C.GtkEntry
	var arg1 C.GtkEntryIconPosition
	var arg2 *C.char

	arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))
	arg1 = (C.GtkEntryIconPosition)(iconPos)
	arg2 = (*C.char)(C.CString(tooltip))
	defer C.free(unsafe.Pointer(arg2))

	C.gtk_entry_set_icon_tooltip_markup(arg0, arg1, arg2)
}

// SetIconTooltipText sets @tooltip as the contents of the tooltip for the
// icon at the specified position.
//
// Use nil for @tooltip to remove an existing tooltip.
//
// See also gtk_widget_set_tooltip_text() and
// gtk_entry_set_icon_tooltip_markup().
//
// If you unset the widget tooltip via gtk_widget_set_tooltip_text() or
// gtk_widget_set_tooltip_markup(), this sets GtkWidget:has-tooltip to
// false, which suppresses icon tooltips too. You can resolve this by then
// calling gtk_widget_set_has_tooltip() to set GtkWidget:has-tooltip back to
// true, or setting at least one non-empty tooltip on any icon achieves the
// same result.
func (e entry) SetIconTooltipText(e Entry, iconPos EntryIconPosition, tooltip string) {
	var arg0 *C.GtkEntry
	var arg1 C.GtkEntryIconPosition
	var arg2 *C.char

	arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))
	arg1 = (C.GtkEntryIconPosition)(iconPos)
	arg2 = (*C.char)(C.CString(tooltip))
	defer C.free(unsafe.Pointer(arg2))

	C.gtk_entry_set_icon_tooltip_text(arg0, arg1, arg2)
}

// SetInputHints sets the Entry:input-hints property, which allows input
// methods to fine-tune their behaviour.
func (e entry) SetInputHints(e Entry, hints InputHints) {
	var arg0 *C.GtkEntry
	var arg1 C.GtkInputHints

	arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))
	arg1 = (C.GtkInputHints)(hints)

	C.gtk_entry_set_input_hints(arg0, arg1)
}

// SetInputPurpose sets the Entry:input-purpose property which can be used
// by on-screen keyboards and other input methods to adjust their behaviour.
func (e entry) SetInputPurpose(e Entry, purpose InputPurpose) {
	var arg0 *C.GtkEntry
	var arg1 C.GtkInputPurpose

	arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))
	arg1 = (C.GtkInputPurpose)(purpose)

	C.gtk_entry_set_input_purpose(arg0, arg1)
}

// SetInvisibleChar sets the character to use in place of the actual text
// when gtk_entry_set_visibility() has been called to set text visibility to
// false. i.e. this is the character used in “password mode” to show the
// user how many characters have been typed. By default, GTK picks the best
// invisible char available in the current font. If you set the invisible
// char to 0, then the user will get no feedback at all; there will be no
// text on the screen as they type.
func (e entry) SetInvisibleChar(e Entry, ch uint32) {
	var arg0 *C.GtkEntry
	var arg1 C.gunichar

	arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))
	arg1 = C.gunichar(ch)

	C.gtk_entry_set_invisible_char(arg0, arg1)
}

// SetMaxLength sets the maximum allowed length of the contents of the
// widget. If the current contents are longer than the given length, then
// they will be truncated to fit.
//
// This is equivalent to getting @entry's EntryBuffer and calling
// gtk_entry_buffer_set_max_length() on it.
func (e entry) SetMaxLength(e Entry, max int) {
	var arg0 *C.GtkEntry
	var arg1 C.int

	arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))
	arg1 = C.int(max)

	C.gtk_entry_set_max_length(arg0, arg1)
}

// SetOverwriteMode sets whether the text is overwritten when typing in the
// Entry.
func (e entry) SetOverwriteMode(e Entry, overwrite bool) {
	var arg0 *C.GtkEntry
	var arg1 C.gboolean

	arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))
	if overwrite {
		arg1 = C.gboolean(1)
	}

	C.gtk_entry_set_overwrite_mode(arg0, arg1)
}

// SetPlaceholderText sets text to be displayed in @entry when it is empty.
// This can be used to give a visual hint of the expected contents of the
// Entry.
func (e entry) SetPlaceholderText(e Entry, text string) {
	var arg0 *C.GtkEntry
	var arg1 *C.char

	arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))
	arg1 = (*C.char)(C.CString(text))
	defer C.free(unsafe.Pointer(arg1))

	C.gtk_entry_set_placeholder_text(arg0, arg1)
}

// SetProgressFraction causes the entry’s progress indicator to “fill in”
// the given fraction of the bar. The fraction should be between 0.0 and
// 1.0, inclusive.
func (e entry) SetProgressFraction(e Entry, fraction float64) {
	var arg0 *C.GtkEntry
	var arg1 C.double

	arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))
	arg1 = C.double(fraction)

	C.gtk_entry_set_progress_fraction(arg0, arg1)
}

// SetProgressPulseStep sets the fraction of total entry width to move the
// progress bouncing block for each call to gtk_entry_progress_pulse().
func (e entry) SetProgressPulseStep(e Entry, fraction float64) {
	var arg0 *C.GtkEntry
	var arg1 C.double

	arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))
	arg1 = C.double(fraction)

	C.gtk_entry_set_progress_pulse_step(arg0, arg1)
}

// SetTabs sets a TabArray; the tabstops in the array are applied to the
// entry text.
func (e entry) SetTabs(e Entry, tabs *pango.TabArray) {
	var arg0 *C.GtkEntry
	var arg1 *C.PangoTabArray

	arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))
	arg1 = (*C.PangoTabArray)(unsafe.Pointer(tabs.Native()))

	C.gtk_entry_set_tabs(arg0, arg1)
}

// SetVisibility sets whether the contents of the entry are visible or not.
// When visibility is set to false, characters are displayed as the
// invisible char, and will also appear that way when the text in the entry
// widget is copied elsewhere.
//
// By default, GTK picks the best invisible character available in the
// current font, but it can be changed with gtk_entry_set_invisible_char().
//
// Note that you probably want to set Entry:input-purpose to
// GTK_INPUT_PURPOSE_PASSWORD or GTK_INPUT_PURPOSE_PIN to inform input
// methods about the purpose of this entry, in addition to setting
// visibility to false.
func (e entry) SetVisibility(e Entry, visible bool) {
	var arg0 *C.GtkEntry
	var arg1 C.gboolean

	arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))
	if visible {
		arg1 = C.gboolean(1)
	}

	C.gtk_entry_set_visibility(arg0, arg1)
}

// UnsetInvisibleChar unsets the invisible char previously set with
// gtk_entry_set_invisible_char(). So that the default invisible char is
// used again.
func (e entry) UnsetInvisibleChar(e Entry) {
	var arg0 *C.GtkEntry

	arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))

	C.gtk_entry_unset_invisible_char(arg0)
}
