// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/gdk/v4"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_alternative_trigger_get_type()), F: marshalAlternativeTrigger},
		{T: externglib.Type(C.gtk_keyval_trigger_get_type()), F: marshalKeyvalTrigger},
		{T: externglib.Type(C.gtk_mnemonic_trigger_get_type()), F: marshalMnemonicTrigger},
		{T: externglib.Type(C.gtk_never_trigger_get_type()), F: marshalNeverTrigger},
		{T: externglib.Type(C.gtk_shortcut_trigger_get_type()), F: marshalShortcutTrigger},
	})
}

// AlternativeTrigger: `GtkShortcutTrigger` that combines two triggers.
//
// The `GtkAlternativeTrigger` triggers when either of two trigger.
//
// This can be cascaded to combine more than two triggers.
type AlternativeTrigger interface {
	gextras.Objector

	// AsShortcutTrigger casts the class to the ShortcutTrigger interface.
	AsShortcutTrigger() ShortcutTrigger

	// Compare: the types of @trigger1 and @trigger2 are #gconstpointer only to
	// allow use of this function as a Func.
	//
	// They must each be a `GtkShortcutTrigger`.
	//
	// This method is inherited from ShortcutTrigger
	Compare(trigger2 ShortcutTrigger) int
	// Equal checks if @trigger1 and @trigger2 trigger under the same
	// conditions.
	//
	// The types of @one and @two are #gconstpointer only to allow use of this
	// function with Table. They must each be a `GtkShortcutTrigger`.
	//
	// This method is inherited from ShortcutTrigger
	Equal(trigger2 ShortcutTrigger) bool
	// Hash generates a hash value for a `GtkShortcutTrigger`.
	//
	// The output of this function is guaranteed to be the same for a given
	// value only per-process. It may change between different processor
	// architectures or even different versions of GTK. Do not use this function
	// as a basis for building protocols or file formats.
	//
	// The types of @trigger is #gconstpointer only to allow use of this
	// function with Table. They must each be a `GtkShortcutTrigger`.
	//
	// This method is inherited from ShortcutTrigger
	Hash() uint
	// ToLabel gets textual representation for the given trigger.
	//
	// This function is returning a translated string for presentation to end
	// users for example in menu items or in help texts.
	//
	// The @display in use may influence the resulting string in various forms,
	// such as resolving hardware keycodes or by causing display-specific
	// modifier names.
	//
	// The form of the representation may change at any time and is not
	// guaranteed to stay identical.
	//
	// This method is inherited from ShortcutTrigger
	ToLabel(display gdk.Display) string
	// ToString prints the given trigger into a human-readable string.
	//
	// This is a small wrapper around [method@Gtk.ShortcutTrigger.print] to help
	// when debugging.
	//
	// This method is inherited from ShortcutTrigger
	ToString() string
	// Trigger checks if the given @event triggers @self.
	//
	// This method is inherited from ShortcutTrigger
	Trigger(event gdk.Event, enableMnemonics bool) gdk.KeyMatch

	// First gets the first of the two alternative triggers that may trigger
	// @self.
	//
	// [method@Gtk.AlternativeTrigger.get_second] will return the other one.
	First() ShortcutTrigger
	// Second gets the second of the two alternative triggers that may trigger
	// @self.
	//
	// [method@Gtk.AlternativeTrigger.get_first] will return the other one.
	Second() ShortcutTrigger
}

// alternativeTrigger implements the AlternativeTrigger interface.
type alternativeTrigger struct {
	*externglib.Object
}

var _ AlternativeTrigger = (*alternativeTrigger)(nil)

// WrapAlternativeTrigger wraps a GObject to a type that implements
// interface AlternativeTrigger. It is primarily used internally.
func WrapAlternativeTrigger(obj *externglib.Object) AlternativeTrigger {
	return alternativeTrigger{obj}
}

func marshalAlternativeTrigger(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapAlternativeTrigger(obj), nil
}

// NewAlternativeTrigger creates a `GtkShortcutTrigger` that will trigger
// whenever either of the two given triggers gets triggered.
//
// Note that nesting is allowed, so if you want more than two alternative,
// create a new alternative trigger for each option.
func NewAlternativeTrigger(first ShortcutTrigger, second ShortcutTrigger) AlternativeTrigger {
	var _arg1 *C.GtkShortcutTrigger // out
	var _arg2 *C.GtkShortcutTrigger // out
	var _cret *C.GtkShortcutTrigger // in

	_arg1 = (*C.GtkShortcutTrigger)(unsafe.Pointer(first.Native()))
	_arg2 = (*C.GtkShortcutTrigger)(unsafe.Pointer(second.Native()))

	_cret = C.gtk_alternative_trigger_new(_arg1, _arg2)

	var _alternativeTrigger AlternativeTrigger // out

	_alternativeTrigger = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(AlternativeTrigger)

	return _alternativeTrigger
}

func (a alternativeTrigger) AsShortcutTrigger() ShortcutTrigger {
	return WrapShortcutTrigger(gextras.InternObject(a))
}

func (t alternativeTrigger) Compare(trigger2 ShortcutTrigger) int {
	return WrapShortcutTrigger(gextras.InternObject(t)).Compare(trigger2)
}

func (t alternativeTrigger) Equal(trigger2 ShortcutTrigger) bool {
	return WrapShortcutTrigger(gextras.InternObject(t)).Equal(trigger2)
}

func (t alternativeTrigger) Hash() uint {
	return WrapShortcutTrigger(gextras.InternObject(t)).Hash()
}

func (s alternativeTrigger) ToLabel(display gdk.Display) string {
	return WrapShortcutTrigger(gextras.InternObject(s)).ToLabel(display)
}

func (s alternativeTrigger) ToString() string {
	return WrapShortcutTrigger(gextras.InternObject(s)).ToString()
}

func (s alternativeTrigger) Trigger(event gdk.Event, enableMnemonics bool) gdk.KeyMatch {
	return WrapShortcutTrigger(gextras.InternObject(s)).Trigger(event, enableMnemonics)
}

func (s alternativeTrigger) First() ShortcutTrigger {
	var _arg0 *C.GtkAlternativeTrigger // out
	var _cret *C.GtkShortcutTrigger    // in

	_arg0 = (*C.GtkAlternativeTrigger)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_alternative_trigger_get_first(_arg0)

	var _shortcutTrigger ShortcutTrigger // out

	_shortcutTrigger = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(ShortcutTrigger)

	return _shortcutTrigger
}

func (s alternativeTrigger) Second() ShortcutTrigger {
	var _arg0 *C.GtkAlternativeTrigger // out
	var _cret *C.GtkShortcutTrigger    // in

	_arg0 = (*C.GtkAlternativeTrigger)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_alternative_trigger_get_second(_arg0)

	var _shortcutTrigger ShortcutTrigger // out

	_shortcutTrigger = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(ShortcutTrigger)

	return _shortcutTrigger
}

// KeyvalTrigger: `GtkShortcutTrigger` that triggers when a specific keyval and
// modifiers are pressed.
type KeyvalTrigger interface {
	gextras.Objector

	// AsShortcutTrigger casts the class to the ShortcutTrigger interface.
	AsShortcutTrigger() ShortcutTrigger

	// Compare: the types of @trigger1 and @trigger2 are #gconstpointer only to
	// allow use of this function as a Func.
	//
	// They must each be a `GtkShortcutTrigger`.
	//
	// This method is inherited from ShortcutTrigger
	Compare(trigger2 ShortcutTrigger) int
	// Equal checks if @trigger1 and @trigger2 trigger under the same
	// conditions.
	//
	// The types of @one and @two are #gconstpointer only to allow use of this
	// function with Table. They must each be a `GtkShortcutTrigger`.
	//
	// This method is inherited from ShortcutTrigger
	Equal(trigger2 ShortcutTrigger) bool
	// Hash generates a hash value for a `GtkShortcutTrigger`.
	//
	// The output of this function is guaranteed to be the same for a given
	// value only per-process. It may change between different processor
	// architectures or even different versions of GTK. Do not use this function
	// as a basis for building protocols or file formats.
	//
	// The types of @trigger is #gconstpointer only to allow use of this
	// function with Table. They must each be a `GtkShortcutTrigger`.
	//
	// This method is inherited from ShortcutTrigger
	Hash() uint
	// ToLabel gets textual representation for the given trigger.
	//
	// This function is returning a translated string for presentation to end
	// users for example in menu items or in help texts.
	//
	// The @display in use may influence the resulting string in various forms,
	// such as resolving hardware keycodes or by causing display-specific
	// modifier names.
	//
	// The form of the representation may change at any time and is not
	// guaranteed to stay identical.
	//
	// This method is inherited from ShortcutTrigger
	ToLabel(display gdk.Display) string
	// ToString prints the given trigger into a human-readable string.
	//
	// This is a small wrapper around [method@Gtk.ShortcutTrigger.print] to help
	// when debugging.
	//
	// This method is inherited from ShortcutTrigger
	ToString() string
	// Trigger checks if the given @event triggers @self.
	//
	// This method is inherited from ShortcutTrigger
	Trigger(event gdk.Event, enableMnemonics bool) gdk.KeyMatch

	// Keyval gets the keyval that must be pressed to succeed triggering @self.
	Keyval() uint
	// Modifiers gets the modifiers that must be present to succeed triggering
	// @self.
	Modifiers() gdk.ModifierType
}

// keyvalTrigger implements the KeyvalTrigger interface.
type keyvalTrigger struct {
	*externglib.Object
}

var _ KeyvalTrigger = (*keyvalTrigger)(nil)

// WrapKeyvalTrigger wraps a GObject to a type that implements
// interface KeyvalTrigger. It is primarily used internally.
func WrapKeyvalTrigger(obj *externglib.Object) KeyvalTrigger {
	return keyvalTrigger{obj}
}

func marshalKeyvalTrigger(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapKeyvalTrigger(obj), nil
}

// NewKeyvalTrigger creates a `GtkShortcutTrigger` that will trigger whenever
// the key with the given @keyval and @modifiers is pressed.
func NewKeyvalTrigger(keyval uint, modifiers gdk.ModifierType) KeyvalTrigger {
	var _arg1 C.guint               // out
	var _arg2 C.GdkModifierType     // out
	var _cret *C.GtkShortcutTrigger // in

	_arg1 = C.guint(keyval)
	_arg2 = C.GdkModifierType(modifiers)

	_cret = C.gtk_keyval_trigger_new(_arg1, _arg2)

	var _keyvalTrigger KeyvalTrigger // out

	_keyvalTrigger = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(KeyvalTrigger)

	return _keyvalTrigger
}

func (k keyvalTrigger) AsShortcutTrigger() ShortcutTrigger {
	return WrapShortcutTrigger(gextras.InternObject(k))
}

func (t keyvalTrigger) Compare(trigger2 ShortcutTrigger) int {
	return WrapShortcutTrigger(gextras.InternObject(t)).Compare(trigger2)
}

func (t keyvalTrigger) Equal(trigger2 ShortcutTrigger) bool {
	return WrapShortcutTrigger(gextras.InternObject(t)).Equal(trigger2)
}

func (t keyvalTrigger) Hash() uint {
	return WrapShortcutTrigger(gextras.InternObject(t)).Hash()
}

func (s keyvalTrigger) ToLabel(display gdk.Display) string {
	return WrapShortcutTrigger(gextras.InternObject(s)).ToLabel(display)
}

func (s keyvalTrigger) ToString() string {
	return WrapShortcutTrigger(gextras.InternObject(s)).ToString()
}

func (s keyvalTrigger) Trigger(event gdk.Event, enableMnemonics bool) gdk.KeyMatch {
	return WrapShortcutTrigger(gextras.InternObject(s)).Trigger(event, enableMnemonics)
}

func (s keyvalTrigger) Keyval() uint {
	var _arg0 *C.GtkKeyvalTrigger // out
	var _cret C.guint             // in

	_arg0 = (*C.GtkKeyvalTrigger)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_keyval_trigger_get_keyval(_arg0)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

func (s keyvalTrigger) Modifiers() gdk.ModifierType {
	var _arg0 *C.GtkKeyvalTrigger // out
	var _cret C.GdkModifierType   // in

	_arg0 = (*C.GtkKeyvalTrigger)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_keyval_trigger_get_modifiers(_arg0)

	var _modifierType gdk.ModifierType // out

	_modifierType = gdk.ModifierType(_cret)

	return _modifierType
}

// MnemonicTrigger: `GtkShortcutTrigger` that triggers when a specific mnemonic
// is pressed.
//
// Mnemonics require a *mnemonic modifier* (typically <kbd>Alt</kbd>) to be
// pressed together with the mnemonic key.
type MnemonicTrigger interface {
	gextras.Objector

	// AsShortcutTrigger casts the class to the ShortcutTrigger interface.
	AsShortcutTrigger() ShortcutTrigger

	// Compare: the types of @trigger1 and @trigger2 are #gconstpointer only to
	// allow use of this function as a Func.
	//
	// They must each be a `GtkShortcutTrigger`.
	//
	// This method is inherited from ShortcutTrigger
	Compare(trigger2 ShortcutTrigger) int
	// Equal checks if @trigger1 and @trigger2 trigger under the same
	// conditions.
	//
	// The types of @one and @two are #gconstpointer only to allow use of this
	// function with Table. They must each be a `GtkShortcutTrigger`.
	//
	// This method is inherited from ShortcutTrigger
	Equal(trigger2 ShortcutTrigger) bool
	// Hash generates a hash value for a `GtkShortcutTrigger`.
	//
	// The output of this function is guaranteed to be the same for a given
	// value only per-process. It may change between different processor
	// architectures or even different versions of GTK. Do not use this function
	// as a basis for building protocols or file formats.
	//
	// The types of @trigger is #gconstpointer only to allow use of this
	// function with Table. They must each be a `GtkShortcutTrigger`.
	//
	// This method is inherited from ShortcutTrigger
	Hash() uint
	// ToLabel gets textual representation for the given trigger.
	//
	// This function is returning a translated string for presentation to end
	// users for example in menu items or in help texts.
	//
	// The @display in use may influence the resulting string in various forms,
	// such as resolving hardware keycodes or by causing display-specific
	// modifier names.
	//
	// The form of the representation may change at any time and is not
	// guaranteed to stay identical.
	//
	// This method is inherited from ShortcutTrigger
	ToLabel(display gdk.Display) string
	// ToString prints the given trigger into a human-readable string.
	//
	// This is a small wrapper around [method@Gtk.ShortcutTrigger.print] to help
	// when debugging.
	//
	// This method is inherited from ShortcutTrigger
	ToString() string
	// Trigger checks if the given @event triggers @self.
	//
	// This method is inherited from ShortcutTrigger
	Trigger(event gdk.Event, enableMnemonics bool) gdk.KeyMatch

	// Keyval gets the keyval that must be pressed to succeed triggering @self.
	Keyval() uint
}

// mnemonicTrigger implements the MnemonicTrigger interface.
type mnemonicTrigger struct {
	*externglib.Object
}

var _ MnemonicTrigger = (*mnemonicTrigger)(nil)

// WrapMnemonicTrigger wraps a GObject to a type that implements
// interface MnemonicTrigger. It is primarily used internally.
func WrapMnemonicTrigger(obj *externglib.Object) MnemonicTrigger {
	return mnemonicTrigger{obj}
}

func marshalMnemonicTrigger(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapMnemonicTrigger(obj), nil
}

// NewMnemonicTrigger creates a `GtkShortcutTrigger` that will trigger whenever
// the key with the given @keyval is pressed and mnemonics have been activated.
//
// Mnemonics are activated by calling code when a key event with the right
// modifiers is detected.
func NewMnemonicTrigger(keyval uint) MnemonicTrigger {
	var _arg1 C.guint               // out
	var _cret *C.GtkShortcutTrigger // in

	_arg1 = C.guint(keyval)

	_cret = C.gtk_mnemonic_trigger_new(_arg1)

	var _mnemonicTrigger MnemonicTrigger // out

	_mnemonicTrigger = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(MnemonicTrigger)

	return _mnemonicTrigger
}

func (m mnemonicTrigger) AsShortcutTrigger() ShortcutTrigger {
	return WrapShortcutTrigger(gextras.InternObject(m))
}

func (t mnemonicTrigger) Compare(trigger2 ShortcutTrigger) int {
	return WrapShortcutTrigger(gextras.InternObject(t)).Compare(trigger2)
}

func (t mnemonicTrigger) Equal(trigger2 ShortcutTrigger) bool {
	return WrapShortcutTrigger(gextras.InternObject(t)).Equal(trigger2)
}

func (t mnemonicTrigger) Hash() uint {
	return WrapShortcutTrigger(gextras.InternObject(t)).Hash()
}

func (s mnemonicTrigger) ToLabel(display gdk.Display) string {
	return WrapShortcutTrigger(gextras.InternObject(s)).ToLabel(display)
}

func (s mnemonicTrigger) ToString() string {
	return WrapShortcutTrigger(gextras.InternObject(s)).ToString()
}

func (s mnemonicTrigger) Trigger(event gdk.Event, enableMnemonics bool) gdk.KeyMatch {
	return WrapShortcutTrigger(gextras.InternObject(s)).Trigger(event, enableMnemonics)
}

func (s mnemonicTrigger) Keyval() uint {
	var _arg0 *C.GtkMnemonicTrigger // out
	var _cret C.guint               // in

	_arg0 = (*C.GtkMnemonicTrigger)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_mnemonic_trigger_get_keyval(_arg0)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// NeverTrigger: `GtkShortcutTrigger` that never triggers.
type NeverTrigger interface {
	gextras.Objector

	// AsShortcutTrigger casts the class to the ShortcutTrigger interface.
	AsShortcutTrigger() ShortcutTrigger

	// Compare: the types of @trigger1 and @trigger2 are #gconstpointer only to
	// allow use of this function as a Func.
	//
	// They must each be a `GtkShortcutTrigger`.
	//
	// This method is inherited from ShortcutTrigger
	Compare(trigger2 ShortcutTrigger) int
	// Equal checks if @trigger1 and @trigger2 trigger under the same
	// conditions.
	//
	// The types of @one and @two are #gconstpointer only to allow use of this
	// function with Table. They must each be a `GtkShortcutTrigger`.
	//
	// This method is inherited from ShortcutTrigger
	Equal(trigger2 ShortcutTrigger) bool
	// Hash generates a hash value for a `GtkShortcutTrigger`.
	//
	// The output of this function is guaranteed to be the same for a given
	// value only per-process. It may change between different processor
	// architectures or even different versions of GTK. Do not use this function
	// as a basis for building protocols or file formats.
	//
	// The types of @trigger is #gconstpointer only to allow use of this
	// function with Table. They must each be a `GtkShortcutTrigger`.
	//
	// This method is inherited from ShortcutTrigger
	Hash() uint
	// ToLabel gets textual representation for the given trigger.
	//
	// This function is returning a translated string for presentation to end
	// users for example in menu items or in help texts.
	//
	// The @display in use may influence the resulting string in various forms,
	// such as resolving hardware keycodes or by causing display-specific
	// modifier names.
	//
	// The form of the representation may change at any time and is not
	// guaranteed to stay identical.
	//
	// This method is inherited from ShortcutTrigger
	ToLabel(display gdk.Display) string
	// ToString prints the given trigger into a human-readable string.
	//
	// This is a small wrapper around [method@Gtk.ShortcutTrigger.print] to help
	// when debugging.
	//
	// This method is inherited from ShortcutTrigger
	ToString() string
	// Trigger checks if the given @event triggers @self.
	//
	// This method is inherited from ShortcutTrigger
	Trigger(event gdk.Event, enableMnemonics bool) gdk.KeyMatch
}

// neverTrigger implements the NeverTrigger interface.
type neverTrigger struct {
	*externglib.Object
}

var _ NeverTrigger = (*neverTrigger)(nil)

// WrapNeverTrigger wraps a GObject to a type that implements
// interface NeverTrigger. It is primarily used internally.
func WrapNeverTrigger(obj *externglib.Object) NeverTrigger {
	return neverTrigger{obj}
}

func marshalNeverTrigger(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapNeverTrigger(obj), nil
}

func (n neverTrigger) AsShortcutTrigger() ShortcutTrigger {
	return WrapShortcutTrigger(gextras.InternObject(n))
}

func (t neverTrigger) Compare(trigger2 ShortcutTrigger) int {
	return WrapShortcutTrigger(gextras.InternObject(t)).Compare(trigger2)
}

func (t neverTrigger) Equal(trigger2 ShortcutTrigger) bool {
	return WrapShortcutTrigger(gextras.InternObject(t)).Equal(trigger2)
}

func (t neverTrigger) Hash() uint {
	return WrapShortcutTrigger(gextras.InternObject(t)).Hash()
}

func (s neverTrigger) ToLabel(display gdk.Display) string {
	return WrapShortcutTrigger(gextras.InternObject(s)).ToLabel(display)
}

func (s neverTrigger) ToString() string {
	return WrapShortcutTrigger(gextras.InternObject(s)).ToString()
}

func (s neverTrigger) Trigger(event gdk.Event, enableMnemonics bool) gdk.KeyMatch {
	return WrapShortcutTrigger(gextras.InternObject(s)).Trigger(event, enableMnemonics)
}

// ShortcutTrigger: `GtkShortcutTrigger` tracks how a `GtkShortcut` should be
// activated.
//
// To find out if a `GtkShortcutTrigger` triggers, you can call
// [method@Gtk.ShortcutTrigger.trigger] on a `GdkEvent`.
//
// `GtkShortcutTriggers` contain functions that allow easy presentation to end
// users as well as being printed for debugging.
//
// All `GtkShortcutTriggers` are immutable, you can only specify their
// properties during construction. If you want to change a trigger, you have to
// replace it with a new one.
type ShortcutTrigger interface {
	gextras.Objector

	// Compare: the types of @trigger1 and @trigger2 are #gconstpointer only to
	// allow use of this function as a Func.
	//
	// They must each be a `GtkShortcutTrigger`.
	Compare(trigger2 ShortcutTrigger) int
	// Equal checks if @trigger1 and @trigger2 trigger under the same
	// conditions.
	//
	// The types of @one and @two are #gconstpointer only to allow use of this
	// function with Table. They must each be a `GtkShortcutTrigger`.
	Equal(trigger2 ShortcutTrigger) bool
	// Hash generates a hash value for a `GtkShortcutTrigger`.
	//
	// The output of this function is guaranteed to be the same for a given
	// value only per-process. It may change between different processor
	// architectures or even different versions of GTK. Do not use this function
	// as a basis for building protocols or file formats.
	//
	// The types of @trigger is #gconstpointer only to allow use of this
	// function with Table. They must each be a `GtkShortcutTrigger`.
	Hash() uint
	// ToLabel gets textual representation for the given trigger.
	//
	// This function is returning a translated string for presentation to end
	// users for example in menu items or in help texts.
	//
	// The @display in use may influence the resulting string in various forms,
	// such as resolving hardware keycodes or by causing display-specific
	// modifier names.
	//
	// The form of the representation may change at any time and is not
	// guaranteed to stay identical.
	ToLabel(display gdk.Display) string
	// String prints the given trigger into a human-readable string.
	//
	// This is a small wrapper around [method@Gtk.ShortcutTrigger.print] to help
	// when debugging.
	String() string
	// Trigger checks if the given @event triggers @self.
	Trigger(event gdk.Event, enableMnemonics bool) gdk.KeyMatch
}

// shortcutTrigger implements the ShortcutTrigger interface.
type shortcutTrigger struct {
	*externglib.Object
}

var _ ShortcutTrigger = (*shortcutTrigger)(nil)

// WrapShortcutTrigger wraps a GObject to a type that implements
// interface ShortcutTrigger. It is primarily used internally.
func WrapShortcutTrigger(obj *externglib.Object) ShortcutTrigger {
	return shortcutTrigger{obj}
}

func marshalShortcutTrigger(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapShortcutTrigger(obj), nil
}

// NewShortcutTriggerParseString tries to parse the given string into a trigger.
//
// On success, the parsed trigger is returned. When parsing failed, nil is
// returned.
//
// The accepted strings are:
//
//    - `never`, for `GtkNeverTrigger`
//    - a string parsed by gtk_accelerator_parse(), for a `GtkKeyvalTrigger`, e.g. `<Control>C`
//    - underscore, followed by a single character, for `GtkMnemonicTrigger`, e.g. `_l`
//    - two valid trigger strings, separated by a `|` character, for a
//      `GtkAlternativeTrigger`: `<Control>q|<Control>w`
//
// Note that you will have to escape the `<` and `>` characters when specifying
// triggers in XML files, such as GtkBuilder ui files. Use `&lt;` instead of `<`
// and `&gt;` instead of `>`.
func NewShortcutTriggerParseString(_string string) ShortcutTrigger {
	var _arg1 *C.char               // out
	var _cret *C.GtkShortcutTrigger // in

	_arg1 = (*C.char)(C.CString(_string))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_shortcut_trigger_parse_string(_arg1)

	var _shortcutTrigger ShortcutTrigger // out

	_shortcutTrigger = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(ShortcutTrigger)

	return _shortcutTrigger
}

func (t shortcutTrigger) Compare(trigger2 ShortcutTrigger) int {
	var _arg0 C.gconstpointer // out
	var _arg1 C.gconstpointer // out
	var _cret C.int           // in

	_arg0 = (C.gconstpointer)(unsafe.Pointer(t.Native()))
	_arg1 = (C.gconstpointer)(unsafe.Pointer(trigger2.Native()))

	_cret = C.gtk_shortcut_trigger_compare(_arg0, _arg1)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (t shortcutTrigger) Equal(trigger2 ShortcutTrigger) bool {
	var _arg0 C.gconstpointer // out
	var _arg1 C.gconstpointer // out
	var _cret C.gboolean      // in

	_arg0 = (C.gconstpointer)(unsafe.Pointer(t.Native()))
	_arg1 = (C.gconstpointer)(unsafe.Pointer(trigger2.Native()))

	_cret = C.gtk_shortcut_trigger_equal(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (t shortcutTrigger) Hash() uint {
	var _arg0 C.gconstpointer // out
	var _cret C.guint         // in

	_arg0 = (C.gconstpointer)(unsafe.Pointer(t.Native()))

	_cret = C.gtk_shortcut_trigger_hash(_arg0)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

func (s shortcutTrigger) ToLabel(display gdk.Display) string {
	var _arg0 *C.GtkShortcutTrigger // out
	var _arg1 *C.GdkDisplay         // out
	var _cret *C.char               // in

	_arg0 = (*C.GtkShortcutTrigger)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GdkDisplay)(unsafe.Pointer(display.Native()))

	_cret = C.gtk_shortcut_trigger_to_label(_arg0, _arg1)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

func (s shortcutTrigger) String() string {
	var _arg0 *C.GtkShortcutTrigger // out
	var _cret *C.char               // in

	_arg0 = (*C.GtkShortcutTrigger)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_shortcut_trigger_to_string(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

func (s shortcutTrigger) Trigger(event gdk.Event, enableMnemonics bool) gdk.KeyMatch {
	var _arg0 *C.GtkShortcutTrigger // out
	var _arg1 *C.GdkEvent           // out
	var _arg2 C.gboolean            // out
	var _cret C.GdkKeyMatch         // in

	_arg0 = (*C.GtkShortcutTrigger)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GdkEvent)(unsafe.Pointer(event.Native()))
	if enableMnemonics {
		_arg2 = C.TRUE
	}

	_cret = C.gtk_shortcut_trigger_trigger(_arg0, _arg1, _arg2)

	var _keyMatch gdk.KeyMatch // out

	_keyMatch = gdk.KeyMatch(_cret)

	return _keyMatch
}
