// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	"github.com/diamondburned/gotk4/pkg/gdk/v4"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <stdbool.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_alternative_trigger_get_type()), F: marshalAlternativeTrigger},
		{T: externglib.Type(C.gtk_keyval_trigger_get_type()), F: marshalKeyvalTrigger},
		{T: externglib.Type(C.gtk_mnemonic_trigger_get_type()), F: marshalMnemonicTrigger},
		{T: externglib.Type(C.gtk_never_trigger_get_type()), F: marshalNeverTrigger},
		{T: externglib.Type(C.gtk_shortcut_trigger_get_type()), F: marshalShortcutTrigger},
	})
}

// AlternativeTrigger: a `GtkShortcutTrigger` that combines two triggers.
//
// The `GtkAlternativeTrigger` triggers when either of two trigger.
//
// This can be cascaded to combine more than two triggers.
type AlternativeTrigger interface {
	ShortcutTrigger

	// First gets the first of the two alternative triggers that may trigger
	// @self.
	//
	// [method@Gtk.AlternativeTrigger.get_second] will return the other one.
	First() ShortcutTrigger
	// Second gets the second of the two alternative triggers that may trigger
	// @self.
	//
	// [method@Gtk.AlternativeTrigger.get_first] will return the other one.
	Second() ShortcutTrigger
}

// alternativeTrigger implements the AlternativeTrigger interface.
type alternativeTrigger struct {
	ShortcutTrigger
}

var _ AlternativeTrigger = (*alternativeTrigger)(nil)

// WrapAlternativeTrigger wraps a GObject to the right type. It is
// primarily used internally.
func WrapAlternativeTrigger(obj *externglib.Object) AlternativeTrigger {
	return AlternativeTrigger{
		ShortcutTrigger: WrapShortcutTrigger(obj),
	}
}

func marshalAlternativeTrigger(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapAlternativeTrigger(obj), nil
}

// NewAlternativeTrigger constructs a class AlternativeTrigger.
func NewAlternativeTrigger(first ShortcutTrigger, second ShortcutTrigger) AlternativeTrigger {
	var arg1 *C.GtkShortcutTrigger
	var arg2 *C.GtkShortcutTrigger

	arg1 = (*C.GtkShortcutTrigger)(first.Native())
	arg2 = (*C.GtkShortcutTrigger)(second.Native())

	ret := C.gtk_alternative_trigger_new(arg1, arg2)

	var ret0 AlternativeTrigger

	ret0 = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(ret.Native()))).(AlternativeTrigger)

	return ret0
}

// First gets the first of the two alternative triggers that may trigger
// @self.
//
// [method@Gtk.AlternativeTrigger.get_second] will return the other one.
func (s alternativeTrigger) First() ShortcutTrigger {
	var arg0 *C.GtkAlternativeTrigger

	arg0 = (*C.GtkAlternativeTrigger)(s.Native())

	ret := C.gtk_alternative_trigger_get_first(arg0)

	var ret0 ShortcutTrigger

	ret0 = gextras.CastObject(externglib.Take(unsafe.Pointer(ret.Native()))).(ShortcutTrigger)

	return ret0
}

// Second gets the second of the two alternative triggers that may trigger
// @self.
//
// [method@Gtk.AlternativeTrigger.get_first] will return the other one.
func (s alternativeTrigger) Second() ShortcutTrigger {
	var arg0 *C.GtkAlternativeTrigger

	arg0 = (*C.GtkAlternativeTrigger)(s.Native())

	ret := C.gtk_alternative_trigger_get_second(arg0)

	var ret0 ShortcutTrigger

	ret0 = gextras.CastObject(externglib.Take(unsafe.Pointer(ret.Native()))).(ShortcutTrigger)

	return ret0
}

// KeyvalTrigger: a `GtkShortcutTrigger` that triggers when a specific keyval
// and modifiers are pressed.
type KeyvalTrigger interface {
	ShortcutTrigger

	// Keyval gets the keyval that must be pressed to succeed triggering @self.
	Keyval() uint
	// Modifiers gets the modifiers that must be present to succeed triggering
	// @self.
	Modifiers() gdk.ModifierType
}

// keyvalTrigger implements the KeyvalTrigger interface.
type keyvalTrigger struct {
	ShortcutTrigger
}

var _ KeyvalTrigger = (*keyvalTrigger)(nil)

// WrapKeyvalTrigger wraps a GObject to the right type. It is
// primarily used internally.
func WrapKeyvalTrigger(obj *externglib.Object) KeyvalTrigger {
	return KeyvalTrigger{
		ShortcutTrigger: WrapShortcutTrigger(obj),
	}
}

func marshalKeyvalTrigger(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapKeyvalTrigger(obj), nil
}

// NewKeyvalTrigger constructs a class KeyvalTrigger.
func NewKeyvalTrigger(keyval uint, modifiers gdk.ModifierType) KeyvalTrigger {
	var arg1 C.guint
	var arg2 C.GdkModifierType

	arg1 = C.guint(keyval)
	arg2 = (C.GdkModifierType)(modifiers)

	ret := C.gtk_keyval_trigger_new(arg1, arg2)

	var ret0 KeyvalTrigger

	ret0 = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(ret.Native()))).(KeyvalTrigger)

	return ret0
}

// Keyval gets the keyval that must be pressed to succeed triggering @self.
func (s keyvalTrigger) Keyval() uint {
	var arg0 *C.GtkKeyvalTrigger

	arg0 = (*C.GtkKeyvalTrigger)(s.Native())

	ret := C.gtk_keyval_trigger_get_keyval(arg0)

	var ret0 uint

	ret0 = uint(ret)

	return ret0
}

// Modifiers gets the modifiers that must be present to succeed triggering
// @self.
func (s keyvalTrigger) Modifiers() gdk.ModifierType {
	var arg0 *C.GtkKeyvalTrigger

	arg0 = (*C.GtkKeyvalTrigger)(s.Native())

	ret := C.gtk_keyval_trigger_get_modifiers(arg0)

	var ret0 gdk.ModifierType

	ret0 = gdk.ModifierType(ret)

	return ret0
}

// MnemonicTrigger: a `GtkShortcutTrigger` that triggers when a specific
// mnemonic is pressed.
//
// Mnemonics require a *mnemonic modifier* (typically <kbd>Alt</kbd>) to be
// pressed together with the mnemonic key.
type MnemonicTrigger interface {
	ShortcutTrigger

	// Keyval gets the keyval that must be pressed to succeed triggering @self.
	Keyval() uint
}

// mnemonicTrigger implements the MnemonicTrigger interface.
type mnemonicTrigger struct {
	ShortcutTrigger
}

var _ MnemonicTrigger = (*mnemonicTrigger)(nil)

// WrapMnemonicTrigger wraps a GObject to the right type. It is
// primarily used internally.
func WrapMnemonicTrigger(obj *externglib.Object) MnemonicTrigger {
	return MnemonicTrigger{
		ShortcutTrigger: WrapShortcutTrigger(obj),
	}
}

func marshalMnemonicTrigger(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapMnemonicTrigger(obj), nil
}

// NewMnemonicTrigger constructs a class MnemonicTrigger.
func NewMnemonicTrigger(keyval uint) MnemonicTrigger {
	var arg1 C.guint

	arg1 = C.guint(keyval)

	ret := C.gtk_mnemonic_trigger_new(arg1)

	var ret0 MnemonicTrigger

	ret0 = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(ret.Native()))).(MnemonicTrigger)

	return ret0
}

// Keyval gets the keyval that must be pressed to succeed triggering @self.
func (s mnemonicTrigger) Keyval() uint {
	var arg0 *C.GtkMnemonicTrigger

	arg0 = (*C.GtkMnemonicTrigger)(s.Native())

	ret := C.gtk_mnemonic_trigger_get_keyval(arg0)

	var ret0 uint

	ret0 = uint(ret)

	return ret0
}

// NeverTrigger: a `GtkShortcutTrigger` that never triggers.
type NeverTrigger interface {
	ShortcutTrigger
}

// neverTrigger implements the NeverTrigger interface.
type neverTrigger struct {
	ShortcutTrigger
}

var _ NeverTrigger = (*neverTrigger)(nil)

// WrapNeverTrigger wraps a GObject to the right type. It is
// primarily used internally.
func WrapNeverTrigger(obj *externglib.Object) NeverTrigger {
	return NeverTrigger{
		ShortcutTrigger: WrapShortcutTrigger(obj),
	}
}

func marshalNeverTrigger(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapNeverTrigger(obj), nil
}

// ShortcutTrigger: `GtkShortcutTrigger` tracks how a `GtkShortcut` should be
// activated.
//
// To find out if a `GtkShortcutTrigger` triggers, you can call
// [method@Gtk.ShortcutTrigger.trigger] on a `GdkEvent`.
//
// `GtkShortcutTriggers` contain functions that allow easy presentation to end
// users as well as being printed for debugging.
//
// All `GtkShortcutTriggers` are immutable, you can only specify their
// properties during construction. If you want to change a trigger, you have to
// replace it with a new one.
type ShortcutTrigger interface {
	gextras.Objector

	// Compare: the types of @trigger1 and @trigger2 are #gconstpointer only to
	// allow use of this function as a Func.
	//
	// They must each be a `GtkShortcutTrigger`.
	Compare(trigger2 ShortcutTrigger) int
	// Equal checks if @trigger1 and @trigger2 trigger under the same
	// conditions.
	//
	// The types of @one and @two are #gconstpointer only to allow use of this
	// function with Table. They must each be a `GtkShortcutTrigger`.
	Equal(trigger2 ShortcutTrigger) bool
	// Hash generates a hash value for a `GtkShortcutTrigger`.
	//
	// The output of this function is guaranteed to be the same for a given
	// value only per-process. It may change between different processor
	// architectures or even different versions of GTK. Do not use this function
	// as a basis for building protocols or file formats.
	//
	// The types of @trigger is #gconstpointer only to allow use of this
	// function with Table. They must each be a `GtkShortcutTrigger`.
	Hash() uint
	// Print prints the given trigger into a string for the developer. This is
	// meant for debugging and logging.
	//
	// The form of the representation may change at any time and is not
	// guaranteed to stay identical.
	Print(string *glib.String)
	// PrintLabel prints the given trigger into a string.
	//
	// This function is returning a translated string for presentation to end
	// users for example in menu items or in help texts.
	//
	// The @display in use may influence the resulting string in various forms,
	// such as resolving hardware keycodes or by causing display-specific
	// modifier names.
	//
	// The form of the representation may change at any time and is not
	// guaranteed to stay identical.
	PrintLabel(display gdk.Display, string *glib.String) bool
	// ToLabel gets textual representation for the given trigger.
	//
	// This function is returning a translated string for presentation to end
	// users for example in menu items or in help texts.
	//
	// The @display in use may influence the resulting string in various forms,
	// such as resolving hardware keycodes or by causing display-specific
	// modifier names.
	//
	// The form of the representation may change at any time and is not
	// guaranteed to stay identical.
	ToLabel(display gdk.Display) string
	// String prints the given trigger into a human-readable string.
	//
	// This is a small wrapper around [method@Gtk.ShortcutTrigger.print] to help
	// when debugging.
	String() string
	// Trigger checks if the given @event triggers @self.
	Trigger(event gdk.Event, enableMnemonics bool) gdk.KeyMatch
}

// shortcutTrigger implements the ShortcutTrigger interface.
type shortcutTrigger struct {
	gextras.Objector
}

var _ ShortcutTrigger = (*shortcutTrigger)(nil)

// WrapShortcutTrigger wraps a GObject to the right type. It is
// primarily used internally.
func WrapShortcutTrigger(obj *externglib.Object) ShortcutTrigger {
	return ShortcutTrigger{
		Objector: obj,
	}
}

func marshalShortcutTrigger(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapShortcutTrigger(obj), nil
}

// NewShortcutTriggerParseString constructs a class ShortcutTrigger.
func NewShortcutTriggerParseString(string string) ShortcutTrigger {
	var arg1 *C.char

	arg1 = (*C.gchar)(C.CString(string))
	defer C.free(unsafe.Pointer(arg1))

	ret := C.gtk_shortcut_trigger_parse_string(arg1)

	var ret0 ShortcutTrigger

	ret0 = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(ret.Native()))).(ShortcutTrigger)

	return ret0
}

// Compare: the types of @trigger1 and @trigger2 are #gconstpointer only to
// allow use of this function as a Func.
//
// They must each be a `GtkShortcutTrigger`.
func (t shortcutTrigger) Compare(trigger2 ShortcutTrigger) int {
	var arg0 C.gpointer
	var arg1 C.gpointer

	arg0 = (C.gpointer)(t.Native())
	arg1 = (C.gpointer)(trigger2.Native())

	ret := C.gtk_shortcut_trigger_compare(arg0, arg1)

	var ret0 int

	ret0 = int(ret)

	return ret0
}

// Equal checks if @trigger1 and @trigger2 trigger under the same
// conditions.
//
// The types of @one and @two are #gconstpointer only to allow use of this
// function with Table. They must each be a `GtkShortcutTrigger`.
func (t shortcutTrigger) Equal(trigger2 ShortcutTrigger) bool {
	var arg0 C.gpointer
	var arg1 C.gpointer

	arg0 = (C.gpointer)(t.Native())
	arg1 = (C.gpointer)(trigger2.Native())

	ret := C.gtk_shortcut_trigger_equal(arg0, arg1)

	var ret0 bool

	ret0 = C.bool(ret) != C.false

	return ret0
}

// Hash generates a hash value for a `GtkShortcutTrigger`.
//
// The output of this function is guaranteed to be the same for a given
// value only per-process. It may change between different processor
// architectures or even different versions of GTK. Do not use this function
// as a basis for building protocols or file formats.
//
// The types of @trigger is #gconstpointer only to allow use of this
// function with Table. They must each be a `GtkShortcutTrigger`.
func (t shortcutTrigger) Hash() uint {
	var arg0 C.gpointer

	arg0 = (C.gpointer)(t.Native())

	ret := C.gtk_shortcut_trigger_hash(arg0)

	var ret0 uint

	ret0 = uint(ret)

	return ret0
}

// Print prints the given trigger into a string for the developer. This is
// meant for debugging and logging.
//
// The form of the representation may change at any time and is not
// guaranteed to stay identical.
func (s shortcutTrigger) Print(string *glib.String) {
	var arg0 *C.GtkShortcutTrigger
	var arg1 *C.GString

	arg0 = (*C.GtkShortcutTrigger)(s.Native())
	arg1 = (*C.GString)(string.Native())

	C.gtk_shortcut_trigger_print(arg0, arg1)
}

// PrintLabel prints the given trigger into a string.
//
// This function is returning a translated string for presentation to end
// users for example in menu items or in help texts.
//
// The @display in use may influence the resulting string in various forms,
// such as resolving hardware keycodes or by causing display-specific
// modifier names.
//
// The form of the representation may change at any time and is not
// guaranteed to stay identical.
func (s shortcutTrigger) PrintLabel(display gdk.Display, string *glib.String) bool {
	var arg0 *C.GtkShortcutTrigger
	var arg1 *C.GdkDisplay
	var arg2 *C.GString

	arg0 = (*C.GtkShortcutTrigger)(s.Native())
	arg1 = (*C.GdkDisplay)(display.Native())
	arg2 = (*C.GString)(string.Native())

	ret := C.gtk_shortcut_trigger_print_label(arg0, arg1, arg2)

	var ret0 bool

	ret0 = C.bool(ret) != C.false

	return ret0
}

// ToLabel gets textual representation for the given trigger.
//
// This function is returning a translated string for presentation to end
// users for example in menu items or in help texts.
//
// The @display in use may influence the resulting string in various forms,
// such as resolving hardware keycodes or by causing display-specific
// modifier names.
//
// The form of the representation may change at any time and is not
// guaranteed to stay identical.
func (s shortcutTrigger) ToLabel(display gdk.Display) string {
	var arg0 *C.GtkShortcutTrigger
	var arg1 *C.GdkDisplay

	arg0 = (*C.GtkShortcutTrigger)(s.Native())
	arg1 = (*C.GdkDisplay)(display.Native())

	ret := C.gtk_shortcut_trigger_to_label(arg0, arg1)

	var ret0 string

	ret0 = C.GoString(ret)
	C.free(unsafe.Pointer(ret))

	return ret0
}

// String prints the given trigger into a human-readable string.
//
// This is a small wrapper around [method@Gtk.ShortcutTrigger.print] to help
// when debugging.
func (s shortcutTrigger) String() string {
	var arg0 *C.GtkShortcutTrigger

	arg0 = (*C.GtkShortcutTrigger)(s.Native())

	ret := C.gtk_shortcut_trigger_to_string(arg0)

	var ret0 string

	ret0 = C.GoString(ret)
	C.free(unsafe.Pointer(ret))

	return ret0
}

// Trigger checks if the given @event triggers @self.
func (s shortcutTrigger) Trigger(event gdk.Event, enableMnemonics bool) gdk.KeyMatch {
	var arg0 *C.GtkShortcutTrigger
	var arg1 *C.GdkEvent
	var arg2 C.gboolean

	arg0 = (*C.GtkShortcutTrigger)(s.Native())
	arg1 = (*C.GdkEvent)(event.Native())
	if enableMnemonics {
		arg2 = C.TRUE
	}

	ret := C.gtk_shortcut_trigger_trigger(arg0, arg1, arg2)

	var ret0 gdk.KeyMatch

	ret0 = gdk.KeyMatch(ret)

	return ret0
}
