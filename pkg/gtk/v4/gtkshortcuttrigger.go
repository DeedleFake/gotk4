// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/gdk/v4"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_alternative_trigger_get_type()), F: marshalAlternativeTrigger},
		{T: externglib.Type(C.gtk_keyval_trigger_get_type()), F: marshalKeyvalTrigger},
		{T: externglib.Type(C.gtk_mnemonic_trigger_get_type()), F: marshalMnemonicTrigger},
		{T: externglib.Type(C.gtk_never_trigger_get_type()), F: marshalNeverTrigger},
		{T: externglib.Type(C.gtk_shortcut_trigger_get_type()), F: marshalShortcutTrigger},
	})
}

// AlternativeTrigger: a `GtkShortcutTrigger` that combines two triggers.
//
// The `GtkAlternativeTrigger` triggers when either of two trigger.
//
// This can be cascaded to combine more than two triggers.
type AlternativeTrigger interface {
	ShortcutTrigger

	First() ShortcutTrigger

	Second() ShortcutTrigger
}

// alternativeTrigger implements the AlternativeTrigger class.
type alternativeTrigger struct {
	ShortcutTrigger
}

// WrapAlternativeTrigger wraps a GObject to the right type. It is
// primarily used internally.
func WrapAlternativeTrigger(obj *externglib.Object) AlternativeTrigger {
	return alternativeTrigger{
		ShortcutTrigger: WrapShortcutTrigger(obj),
	}
}

func marshalAlternativeTrigger(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapAlternativeTrigger(obj), nil
}

func NewAlternativeTrigger(first ShortcutTrigger, second ShortcutTrigger) AlternativeTrigger {
	var _arg1 *C.GtkShortcutTrigger // out
	var _arg2 *C.GtkShortcutTrigger // out
	var _cret *C.GtkShortcutTrigger // in

	_arg1 = (*C.GtkShortcutTrigger)(unsafe.Pointer(first.Native()))
	_arg2 = (*C.GtkShortcutTrigger)(unsafe.Pointer(second.Native()))

	_cret = C.gtk_alternative_trigger_new(_arg1, _arg2)

	var _alternativeTrigger AlternativeTrigger // out

	_alternativeTrigger = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(AlternativeTrigger)

	return _alternativeTrigger
}

func (s alternativeTrigger) First() ShortcutTrigger {
	var _arg0 *C.GtkAlternativeTrigger // out
	var _cret *C.GtkShortcutTrigger    // in

	_arg0 = (*C.GtkAlternativeTrigger)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_alternative_trigger_get_first(_arg0)

	var _shortcutTrigger ShortcutTrigger // out

	_shortcutTrigger = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(ShortcutTrigger)

	return _shortcutTrigger
}

func (s alternativeTrigger) Second() ShortcutTrigger {
	var _arg0 *C.GtkAlternativeTrigger // out
	var _cret *C.GtkShortcutTrigger    // in

	_arg0 = (*C.GtkAlternativeTrigger)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_alternative_trigger_get_second(_arg0)

	var _shortcutTrigger ShortcutTrigger // out

	_shortcutTrigger = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(ShortcutTrigger)

	return _shortcutTrigger
}

// KeyvalTrigger: a `GtkShortcutTrigger` that triggers when a specific keyval
// and modifiers are pressed.
type KeyvalTrigger interface {
	ShortcutTrigger

	Keyval() uint

	Modifiers() gdk.ModifierType
}

// keyvalTrigger implements the KeyvalTrigger class.
type keyvalTrigger struct {
	ShortcutTrigger
}

// WrapKeyvalTrigger wraps a GObject to the right type. It is
// primarily used internally.
func WrapKeyvalTrigger(obj *externglib.Object) KeyvalTrigger {
	return keyvalTrigger{
		ShortcutTrigger: WrapShortcutTrigger(obj),
	}
}

func marshalKeyvalTrigger(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapKeyvalTrigger(obj), nil
}

func NewKeyvalTrigger(keyval uint, modifiers gdk.ModifierType) KeyvalTrigger {
	var _arg1 C.guint               // out
	var _arg2 C.GdkModifierType     // out
	var _cret *C.GtkShortcutTrigger // in

	_arg1 = C.guint(keyval)
	_arg2 = C.GdkModifierType(modifiers)

	_cret = C.gtk_keyval_trigger_new(_arg1, _arg2)

	var _keyvalTrigger KeyvalTrigger // out

	_keyvalTrigger = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(KeyvalTrigger)

	return _keyvalTrigger
}

func (s keyvalTrigger) Keyval() uint {
	var _arg0 *C.GtkKeyvalTrigger // out
	var _cret C.guint             // in

	_arg0 = (*C.GtkKeyvalTrigger)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_keyval_trigger_get_keyval(_arg0)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

func (s keyvalTrigger) Modifiers() gdk.ModifierType {
	var _arg0 *C.GtkKeyvalTrigger // out
	var _cret C.GdkModifierType   // in

	_arg0 = (*C.GtkKeyvalTrigger)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_keyval_trigger_get_modifiers(_arg0)

	var _modifierType gdk.ModifierType // out

	_modifierType = gdk.ModifierType(_cret)

	return _modifierType
}

// MnemonicTrigger: a `GtkShortcutTrigger` that triggers when a specific
// mnemonic is pressed.
//
// Mnemonics require a *mnemonic modifier* (typically <kbd>Alt</kbd>) to be
// pressed together with the mnemonic key.
type MnemonicTrigger interface {
	ShortcutTrigger

	Keyval() uint
}

// mnemonicTrigger implements the MnemonicTrigger class.
type mnemonicTrigger struct {
	ShortcutTrigger
}

// WrapMnemonicTrigger wraps a GObject to the right type. It is
// primarily used internally.
func WrapMnemonicTrigger(obj *externglib.Object) MnemonicTrigger {
	return mnemonicTrigger{
		ShortcutTrigger: WrapShortcutTrigger(obj),
	}
}

func marshalMnemonicTrigger(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapMnemonicTrigger(obj), nil
}

func NewMnemonicTrigger(keyval uint) MnemonicTrigger {
	var _arg1 C.guint               // out
	var _cret *C.GtkShortcutTrigger // in

	_arg1 = C.guint(keyval)

	_cret = C.gtk_mnemonic_trigger_new(_arg1)

	var _mnemonicTrigger MnemonicTrigger // out

	_mnemonicTrigger = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(MnemonicTrigger)

	return _mnemonicTrigger
}

func (s mnemonicTrigger) Keyval() uint {
	var _arg0 *C.GtkMnemonicTrigger // out
	var _cret C.guint               // in

	_arg0 = (*C.GtkMnemonicTrigger)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_mnemonic_trigger_get_keyval(_arg0)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// NeverTrigger: a `GtkShortcutTrigger` that never triggers.
type NeverTrigger interface {
	ShortcutTrigger
}

// neverTrigger implements the NeverTrigger class.
type neverTrigger struct {
	ShortcutTrigger
}

// WrapNeverTrigger wraps a GObject to the right type. It is
// primarily used internally.
func WrapNeverTrigger(obj *externglib.Object) NeverTrigger {
	return neverTrigger{
		ShortcutTrigger: WrapShortcutTrigger(obj),
	}
}

func marshalNeverTrigger(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapNeverTrigger(obj), nil
}

// ShortcutTrigger: `GtkShortcutTrigger` tracks how a `GtkShortcut` should be
// activated.
//
// To find out if a `GtkShortcutTrigger` triggers, you can call
// [method@Gtk.ShortcutTrigger.trigger] on a `GdkEvent`.
//
// `GtkShortcutTriggers` contain functions that allow easy presentation to end
// users as well as being printed for debugging.
//
// All `GtkShortcutTriggers` are immutable, you can only specify their
// properties during construction. If you want to change a trigger, you have to
// replace it with a new one.
type ShortcutTrigger interface {
	gextras.Objector

	CompareShortcutTrigger(trigger2 ShortcutTrigger) int

	EqualShortcutTrigger(trigger2 ShortcutTrigger) bool

	HashShortcutTrigger() uint

	ToLabelShortcutTrigger(display gdk.Display) string

	String() string

	TriggerShortcutTrigger(event gdk.Event, enableMnemonics bool) gdk.KeyMatch
}

// shortcutTrigger implements the ShortcutTrigger class.
type shortcutTrigger struct {
	gextras.Objector
}

// WrapShortcutTrigger wraps a GObject to the right type. It is
// primarily used internally.
func WrapShortcutTrigger(obj *externglib.Object) ShortcutTrigger {
	return shortcutTrigger{
		Objector: obj,
	}
}

func marshalShortcutTrigger(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapShortcutTrigger(obj), nil
}

func NewShortcutTriggerParseString(_string string) ShortcutTrigger {
	var _arg1 *C.char               // out
	var _cret *C.GtkShortcutTrigger // in

	_arg1 = (*C.char)(C.CString(_string))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_shortcut_trigger_parse_string(_arg1)

	var _shortcutTrigger ShortcutTrigger // out

	_shortcutTrigger = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(ShortcutTrigger)

	return _shortcutTrigger
}

func (t shortcutTrigger) CompareShortcutTrigger(trigger2 ShortcutTrigger) int {
	var _arg0 C.gconstpointer // out
	var _arg1 C.gconstpointer // out
	var _cret C.int           // in

	_arg0 = (C.gconstpointer)(unsafe.Pointer(t.Native()))
	_arg1 = (C.gconstpointer)(unsafe.Pointer(trigger2.Native()))

	_cret = C.gtk_shortcut_trigger_compare(_arg0, _arg1)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (t shortcutTrigger) EqualShortcutTrigger(trigger2 ShortcutTrigger) bool {
	var _arg0 C.gconstpointer // out
	var _arg1 C.gconstpointer // out
	var _cret C.gboolean      // in

	_arg0 = (C.gconstpointer)(unsafe.Pointer(t.Native()))
	_arg1 = (C.gconstpointer)(unsafe.Pointer(trigger2.Native()))

	_cret = C.gtk_shortcut_trigger_equal(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (t shortcutTrigger) HashShortcutTrigger() uint {
	var _arg0 C.gconstpointer // out
	var _cret C.guint         // in

	_arg0 = (C.gconstpointer)(unsafe.Pointer(t.Native()))

	_cret = C.gtk_shortcut_trigger_hash(_arg0)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

func (s shortcutTrigger) ToLabelShortcutTrigger(display gdk.Display) string {
	var _arg0 *C.GtkShortcutTrigger // out
	var _arg1 *C.GdkDisplay         // out
	var _cret *C.char               // in

	_arg0 = (*C.GtkShortcutTrigger)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GdkDisplay)(unsafe.Pointer(display.Native()))

	_cret = C.gtk_shortcut_trigger_to_label(_arg0, _arg1)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

func (s shortcutTrigger) String() string {
	var _arg0 *C.GtkShortcutTrigger // out
	var _cret *C.char               // in

	_arg0 = (*C.GtkShortcutTrigger)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_shortcut_trigger_to_string(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

func (s shortcutTrigger) TriggerShortcutTrigger(event gdk.Event, enableMnemonics bool) gdk.KeyMatch {
	var _arg0 *C.GtkShortcutTrigger // out
	var _arg1 *C.GdkEvent           // out
	var _arg2 C.gboolean            // out
	var _cret C.GdkKeyMatch         // in

	_arg0 = (*C.GtkShortcutTrigger)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GdkEvent)(unsafe.Pointer(event.Native()))
	if enableMnemonics {
		_arg2 = C.TRUE
	}

	_cret = C.gtk_shortcut_trigger_trigger(_arg0, _arg1, _arg2)

	var _keyMatch gdk.KeyMatch // out

	_keyMatch = gdk.KeyMatch(_cret)

	return _keyMatch
}
