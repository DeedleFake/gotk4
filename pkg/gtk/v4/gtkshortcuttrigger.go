// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_alternative_trigger_get_type()), F: marshalAlternativeTrigger},
		{T: externglib.Type(C.gtk_keyval_trigger_get_type()), F: marshalKeyvalTrigger},
		{T: externglib.Type(C.gtk_mnemonic_trigger_get_type()), F: marshalMnemonicTrigger},
		{T: externglib.Type(C.gtk_never_trigger_get_type()), F: marshalNeverTrigger},
		{T: externglib.Type(C.gtk_shortcut_trigger_get_type()), F: marshalShortcutTrigger},
	})
}

// AlternativeTrigger: a ShortcutTrigger that triggers when either of two
// ShortcutTriggers trigger.
type AlternativeTrigger interface {
	ShortcutTrigger

	// First gets the first of the two alternative triggers that may trigger
	// @self. gtk_alternative_trigger_get_second() will return the other one.
	First(s AlternativeTrigger)
	// Second gets the second of the two alternative triggers that may trigger
	// @self. gtk_alternative_trigger_get_first() will return the other one.
	Second(s AlternativeTrigger)
}

// alternativeTrigger implements the AlternativeTrigger interface.
type alternativeTrigger struct {
	ShortcutTrigger
}

var _ AlternativeTrigger = (*alternativeTrigger)(nil)

// WrapAlternativeTrigger wraps a GObject to the right type. It is
// primarily used internally.
func WrapAlternativeTrigger(obj *externglib.Object) AlternativeTrigger {
	return AlternativeTrigger{
		ShortcutTrigger: WrapShortcutTrigger(obj),
	}
}

func marshalAlternativeTrigger(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapAlternativeTrigger(obj), nil
}

// NewAlternativeTrigger constructs a class AlternativeTrigger.
func NewAlternativeTrigger(first ShortcutTrigger, second ShortcutTrigger) {
	var arg1 *C.GtkShortcutTrigger
	var arg2 *C.GtkShortcutTrigger

	arg1 = (*C.GtkShortcutTrigger)(unsafe.Pointer(first.Native()))
	arg2 = (*C.GtkShortcutTrigger)(unsafe.Pointer(second.Native()))

	C.gtk_alternative_trigger_new(arg1, arg2)
}

// First gets the first of the two alternative triggers that may trigger
// @self. gtk_alternative_trigger_get_second() will return the other one.
func (s alternativeTrigger) First(s AlternativeTrigger) {
	var arg0 *C.GtkAlternativeTrigger

	arg0 = (*C.GtkAlternativeTrigger)(unsafe.Pointer(s.Native()))

	C.gtk_alternative_trigger_get_first(arg0)
}

// Second gets the second of the two alternative triggers that may trigger
// @self. gtk_alternative_trigger_get_first() will return the other one.
func (s alternativeTrigger) Second(s AlternativeTrigger) {
	var arg0 *C.GtkAlternativeTrigger

	arg0 = (*C.GtkAlternativeTrigger)(unsafe.Pointer(s.Native()))

	C.gtk_alternative_trigger_get_second(arg0)
}

// KeyvalTrigger: a ShortcutTrigger that triggers when a specific keyval and
// (optionally) modifiers are pressed.
type KeyvalTrigger interface {
	ShortcutTrigger

	// Keyval gets the keyval that must be pressed to succeed triggering @self.
	Keyval(s KeyvalTrigger)
	// Modifiers gets the modifiers that must be present to succeed triggering
	// @self.
	Modifiers(s KeyvalTrigger)
}

// keyvalTrigger implements the KeyvalTrigger interface.
type keyvalTrigger struct {
	ShortcutTrigger
}

var _ KeyvalTrigger = (*keyvalTrigger)(nil)

// WrapKeyvalTrigger wraps a GObject to the right type. It is
// primarily used internally.
func WrapKeyvalTrigger(obj *externglib.Object) KeyvalTrigger {
	return KeyvalTrigger{
		ShortcutTrigger: WrapShortcutTrigger(obj),
	}
}

func marshalKeyvalTrigger(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapKeyvalTrigger(obj), nil
}

// NewKeyvalTrigger constructs a class KeyvalTrigger.
func NewKeyvalTrigger(keyval uint, modifiers gdk.ModifierType) {
	var arg1 C.guint
	var arg2 C.GdkModifierType

	arg1 = C.guint(keyval)
	arg2 = (C.GdkModifierType)(modifiers)

	C.gtk_keyval_trigger_new(arg1, arg2)
}

// Keyval gets the keyval that must be pressed to succeed triggering @self.
func (s keyvalTrigger) Keyval(s KeyvalTrigger) {
	var arg0 *C.GtkKeyvalTrigger

	arg0 = (*C.GtkKeyvalTrigger)(unsafe.Pointer(s.Native()))

	C.gtk_keyval_trigger_get_keyval(arg0)
}

// Modifiers gets the modifiers that must be present to succeed triggering
// @self.
func (s keyvalTrigger) Modifiers(s KeyvalTrigger) {
	var arg0 *C.GtkKeyvalTrigger

	arg0 = (*C.GtkKeyvalTrigger)(unsafe.Pointer(s.Native()))

	C.gtk_keyval_trigger_get_modifiers(arg0)
}

// MnemonicTrigger: a ShortcutTrigger that triggers when a specific mnemonic is
// pressed.
type MnemonicTrigger interface {
	ShortcutTrigger

	// Keyval gets the keyval that must be pressed to succeed triggering @self.
	Keyval(s MnemonicTrigger)
}

// mnemonicTrigger implements the MnemonicTrigger interface.
type mnemonicTrigger struct {
	ShortcutTrigger
}

var _ MnemonicTrigger = (*mnemonicTrigger)(nil)

// WrapMnemonicTrigger wraps a GObject to the right type. It is
// primarily used internally.
func WrapMnemonicTrigger(obj *externglib.Object) MnemonicTrigger {
	return MnemonicTrigger{
		ShortcutTrigger: WrapShortcutTrigger(obj),
	}
}

func marshalMnemonicTrigger(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapMnemonicTrigger(obj), nil
}

// NewMnemonicTrigger constructs a class MnemonicTrigger.
func NewMnemonicTrigger(keyval uint) {
	var arg1 C.guint

	arg1 = C.guint(keyval)

	C.gtk_mnemonic_trigger_new(arg1)
}

// Keyval gets the keyval that must be pressed to succeed triggering @self.
func (s mnemonicTrigger) Keyval(s MnemonicTrigger) {
	var arg0 *C.GtkMnemonicTrigger

	arg0 = (*C.GtkMnemonicTrigger)(unsafe.Pointer(s.Native()))

	C.gtk_mnemonic_trigger_get_keyval(arg0)
}

// NeverTrigger: a ShortcutTrigger that never triggers.
type NeverTrigger interface {
	ShortcutTrigger
}

// neverTrigger implements the NeverTrigger interface.
type neverTrigger struct {
	ShortcutTrigger
}

var _ NeverTrigger = (*neverTrigger)(nil)

// WrapNeverTrigger wraps a GObject to the right type. It is
// primarily used internally.
func WrapNeverTrigger(obj *externglib.Object) NeverTrigger {
	return NeverTrigger{
		ShortcutTrigger: WrapShortcutTrigger(obj),
	}
}

func marshalNeverTrigger(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapNeverTrigger(obj), nil
}

// ShortcutTrigger is the object used to track if a Shortcut should be
// activated. For this purpose, gtk_shortcut_trigger_trigger() can be called on
// a Event.
//
// ShortcutTriggers contain functions that allow easy presentation to end users
// as well as being printed for debugging.
//
// All ShortcutTriggers are immutable, you can only specify their properties
// during construction. If you want to change a trigger, you have to replace it
// with a new one.
type ShortcutTrigger interface {
	gextras.Objector

	// Compare: the types of @trigger1 and @trigger2 are #gconstpointer only to
	// allow use of this function as a Func. They must each be a
	// ShortcutTrigger.
	Compare(t ShortcutTrigger, trigger2 ShortcutTrigger)
	// Equal checks if @trigger1 and @trigger2 trigger under the same
	// conditions.
	//
	// The types of @one and @two are #gconstpointer only to allow use of this
	// function with Table. They must each be a ShortcutTrigger.
	Equal(t ShortcutTrigger, trigger2 ShortcutTrigger) bool
	// Hash generates a hash value for a ShortcutTrigger.
	//
	// The output of this function is guaranteed to be the same for a given
	// value only per-process. It may change between different processor
	// architectures or even different versions of GTK. Do not use this function
	// as a basis for building protocols or file formats.
	//
	// The types of @trigger is #gconstpointer only to allow use of this
	// function with Table. They must each be a ShortcutTrigger.
	Hash(t ShortcutTrigger)
	// Print prints the given trigger into a string for the developer. This is
	// meant for debugging and logging.
	//
	// The form of the representation may change at any time and is not
	// guaranteed to stay identical.
	Print(s ShortcutTrigger, string *glib.String)
	// PrintLabel prints the given trigger into a string. This function is
	// returning a translated string for presentation to end users for example
	// in menu items or in help texts.
	//
	// The @display in use may influence the resulting string in various forms,
	// such as resolving hardware keycodes or by causing display-specific
	// modifier names.
	//
	// The form of the representation may change at any time and is not
	// guaranteed to stay identical.
	PrintLabel(s ShortcutTrigger, display gdk.Display, string *glib.String) bool
	// ToLabel gets textual representation for the given trigger. This function
	// is returning a translated string for presentation to end users for
	// example in menu items or in help texts.
	//
	// The @display in use may influence the resulting string in various forms,
	// such as resolving hardware keycodes or by causing display-specific
	// modifier names.
	//
	// The form of the representation may change at any time and is not
	// guaranteed to stay identical.
	ToLabel(s ShortcutTrigger, display gdk.Display)
	// String prints the given trigger into a human-readable string. This is a
	// small wrapper around gtk_shortcut_trigger_print() to help when debugging.
	String(s ShortcutTrigger)
	// Trigger checks if the given @event triggers @self.
	Trigger(s ShortcutTrigger, event gdk.Event, enableMnemonics bool)
}

// shortcutTrigger implements the ShortcutTrigger interface.
type shortcutTrigger struct {
	gextras.Objector
}

var _ ShortcutTrigger = (*shortcutTrigger)(nil)

// WrapShortcutTrigger wraps a GObject to the right type. It is
// primarily used internally.
func WrapShortcutTrigger(obj *externglib.Object) ShortcutTrigger {
	return ShortcutTrigger{
		Objector: obj,
	}
}

func marshalShortcutTrigger(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapShortcutTrigger(obj), nil
}

// NewShortcutTriggerParseString constructs a class ShortcutTrigger.
func NewShortcutTriggerParseString(string string) {
	var arg1 *C.char

	arg1 = (*C.char)(C.CString(string))
	defer C.free(unsafe.Pointer(arg1))

	C.gtk_shortcut_trigger_parse_string(arg1)
}

// Compare: the types of @trigger1 and @trigger2 are #gconstpointer only to
// allow use of this function as a Func. They must each be a
// ShortcutTrigger.
func (t shortcutTrigger) Compare(t ShortcutTrigger, trigger2 ShortcutTrigger) {
	var arg0 C.gpointer
	var arg1 C.gpointer

	arg0 = (C.gpointer)(unsafe.Pointer(t.Native()))
	arg1 = (C.gpointer)(unsafe.Pointer(trigger2.Native()))

	C.gtk_shortcut_trigger_compare(arg0, arg1)
}

// Equal checks if @trigger1 and @trigger2 trigger under the same
// conditions.
//
// The types of @one and @two are #gconstpointer only to allow use of this
// function with Table. They must each be a ShortcutTrigger.
func (t shortcutTrigger) Equal(t ShortcutTrigger, trigger2 ShortcutTrigger) bool {
	var arg0 C.gpointer
	var arg1 C.gpointer

	arg0 = (C.gpointer)(unsafe.Pointer(t.Native()))
	arg1 = (C.gpointer)(unsafe.Pointer(trigger2.Native()))

	var cret C.gboolean
	var ok bool

	cret = C.gtk_shortcut_trigger_equal(arg0, arg1)

	if cret {
		ok = true
	}

	return ok
}

// Hash generates a hash value for a ShortcutTrigger.
//
// The output of this function is guaranteed to be the same for a given
// value only per-process. It may change between different processor
// architectures or even different versions of GTK. Do not use this function
// as a basis for building protocols or file formats.
//
// The types of @trigger is #gconstpointer only to allow use of this
// function with Table. They must each be a ShortcutTrigger.
func (t shortcutTrigger) Hash(t ShortcutTrigger) {
	var arg0 C.gpointer

	arg0 = (C.gpointer)(unsafe.Pointer(t.Native()))

	C.gtk_shortcut_trigger_hash(arg0)
}

// Print prints the given trigger into a string for the developer. This is
// meant for debugging and logging.
//
// The form of the representation may change at any time and is not
// guaranteed to stay identical.
func (s shortcutTrigger) Print(s ShortcutTrigger, string *glib.String) {
	var arg0 *C.GtkShortcutTrigger
	var arg1 *C.GString

	arg0 = (*C.GtkShortcutTrigger)(unsafe.Pointer(s.Native()))
	arg1 = (*C.GString)(unsafe.Pointer(string.Native()))

	C.gtk_shortcut_trigger_print(arg0, arg1)
}

// PrintLabel prints the given trigger into a string. This function is
// returning a translated string for presentation to end users for example
// in menu items or in help texts.
//
// The @display in use may influence the resulting string in various forms,
// such as resolving hardware keycodes or by causing display-specific
// modifier names.
//
// The form of the representation may change at any time and is not
// guaranteed to stay identical.
func (s shortcutTrigger) PrintLabel(s ShortcutTrigger, display gdk.Display, string *glib.String) bool {
	var arg0 *C.GtkShortcutTrigger
	var arg1 *C.GdkDisplay
	var arg2 *C.GString

	arg0 = (*C.GtkShortcutTrigger)(unsafe.Pointer(s.Native()))
	arg1 = (*C.GdkDisplay)(unsafe.Pointer(display.Native()))
	arg2 = (*C.GString)(unsafe.Pointer(string.Native()))

	var cret C.gboolean
	var ok bool

	cret = C.gtk_shortcut_trigger_print_label(arg0, arg1, arg2)

	if cret {
		ok = true
	}

	return ok
}

// ToLabel gets textual representation for the given trigger. This function
// is returning a translated string for presentation to end users for
// example in menu items or in help texts.
//
// The @display in use may influence the resulting string in various forms,
// such as resolving hardware keycodes or by causing display-specific
// modifier names.
//
// The form of the representation may change at any time and is not
// guaranteed to stay identical.
func (s shortcutTrigger) ToLabel(s ShortcutTrigger, display gdk.Display) {
	var arg0 *C.GtkShortcutTrigger
	var arg1 *C.GdkDisplay

	arg0 = (*C.GtkShortcutTrigger)(unsafe.Pointer(s.Native()))
	arg1 = (*C.GdkDisplay)(unsafe.Pointer(display.Native()))

	C.gtk_shortcut_trigger_to_label(arg0, arg1)
}

// String prints the given trigger into a human-readable string. This is a
// small wrapper around gtk_shortcut_trigger_print() to help when debugging.
func (s shortcutTrigger) String(s ShortcutTrigger) {
	var arg0 *C.GtkShortcutTrigger

	arg0 = (*C.GtkShortcutTrigger)(unsafe.Pointer(s.Native()))

	C.gtk_shortcut_trigger_to_string(arg0)
}

// Trigger checks if the given @event triggers @self.
func (s shortcutTrigger) Trigger(s ShortcutTrigger, event gdk.Event, enableMnemonics bool) {
	var arg0 *C.GtkShortcutTrigger
	var arg1 *C.GdkEvent
	var arg2 C.gboolean

	arg0 = (*C.GtkShortcutTrigger)(unsafe.Pointer(s.Native()))
	arg1 = (*C.GdkEvent)(unsafe.Pointer(event.Native()))
	if enableMnemonics {
		arg2 = C.gboolean(1)
	}

	C.gtk_shortcut_trigger_trigger(arg0, arg1, arg2)
}
