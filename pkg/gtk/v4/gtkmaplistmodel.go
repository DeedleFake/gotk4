// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/box"
	"github.com/diamondburned/gotk4/internal/gextras"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <stdbool.h>
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_map_list_model_get_type()), F: marshalMapListModel},
	})
}

// MapListModelMapFunc: user function that is called to map an @item of the
// original model to an item expected by the map model.
//
// The returned items must conform to the item type of the model they are used
// with.
type MapListModelMapFunc func(item gextras.Objector) gextras.Objector

//export gotk4_MapListModelMapFunc
func gotk4_MapListModelMapFunc(arg0 C.gpointer, arg1 C.gpointer) C.gpointer {
	v := box.Get(uintptr(arg1))
	if v == nil {
		panic(`callback not found`)
	}

	fn := v.(MapListModelMapFunc)
	ret := fn(item, userData)

	cret = (*C.GObject)(unsafe.Pointer(ret.Native()))

	return cret
}

// MapListModel is a list model that takes a list model and maps the items in
// that model to different items according to a MapListModelMapFunc.
//
// Example: Create a list of EventControllers
//
//      static gpointer
//      map_to_controllers (gpointer widget,
//                          gpointer data)
//     {
//        gpointer result = gtk_widget_observe_controllers (widget);
//        g_object_unref (widget);
//        return result;
//     }
//
//      widgets = gtk_widget_observe_children (widget);
//
//      controllers = gtk_map_list_model_new (G_TYPE_LIST_MODEL,
//                                            widgets,
//                                            map_to_controllers,
//                                            NULL, NULL);
//
//      model = gtk_flatten_list_model_new (GTK_TYPE_EVENT_CONTROLLER,
//                                          controllers);
//
// MapListModel will attempt to discard the mapped objects as soon as they are
// no longer needed and recreate them if necessary.
type MapListModel interface {
	gextras.Objector
	gio.ListModel

	// Model gets the model that is currently being mapped or nil if none.
	Model() gio.ListModel
	// HasMap checks if a map function is currently set on @self
	HasMap() bool
	// SetMapFunc sets the function used to map items. The function will be
	// called whenever an item needs to be mapped and must return the item to
	// use for the given input item.
	//
	// Note that MapListModel may call this function multiple times on the same
	// item, because it may delete items it doesn't need anymore.
	//
	// GTK makes no effort to ensure that @map_func conforms to the item type of
	// @self. It assumes that the caller knows what they are doing and the map
	// function returns items of the appropriate type.
	SetMapFunc(mapFunc MapListModelMapFunc)
	// SetModel sets the model to be mapped.
	//
	// GTK makes no effort to ensure that @model conforms to the item type
	// expected by the map function. It assumes that the caller knows what they
	// are doing and have set up an appropriate map function.
	SetModel(model gio.ListModel)
}

// mapListModel implements the MapListModel interface.
type mapListModel struct {
	gextras.Objector
	gio.ListModel
}

var _ MapListModel = (*mapListModel)(nil)

// WrapMapListModel wraps a GObject to the right type. It is
// primarily used internally.
func WrapMapListModel(obj *externglib.Object) MapListModel {
	return MapListModel{
		Objector:      obj,
		gio.ListModel: gio.WrapListModel(obj),
	}
}

func marshalMapListModel(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapMapListModel(obj), nil
}

// NewMapListModel constructs a class MapListModel.
func NewMapListModel(model gio.ListModel, mapFunc MapListModelMapFunc) MapListModel {

	var cret C.GtkMapListModel
	var ret1 MapListModel

	cret = C.gtk_map_list_model_new(model, mapFunc, userData, userDestroy)

	ret1 = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(cret.Native()))).(MapListModel)

	return ret1
}

// Model gets the model that is currently being mapped or nil if none.
func (s mapListModel) Model() gio.ListModel {
	var arg0 *C.GtkMapListModel

	arg0 = (*C.GtkMapListModel)(unsafe.Pointer(s.Native()))

	var cret *C.GListModel
	var ret1 gio.ListModel

	cret = C.gtk_map_list_model_get_model(arg0)

	ret1 = gextras.CastObject(externglib.Take(unsafe.Pointer(cret.Native()))).(gio.ListModel)

	return ret1
}

// HasMap checks if a map function is currently set on @self
func (s mapListModel) HasMap() bool {
	var arg0 *C.GtkMapListModel

	arg0 = (*C.GtkMapListModel)(unsafe.Pointer(s.Native()))

	var cret C.gboolean
	var ret1 bool

	cret = C.gtk_map_list_model_has_map(arg0)

	ret1 = C.bool(cret) != C.false

	return ret1
}

// SetMapFunc sets the function used to map items. The function will be
// called whenever an item needs to be mapped and must return the item to
// use for the given input item.
//
// Note that MapListModel may call this function multiple times on the same
// item, because it may delete items it doesn't need anymore.
//
// GTK makes no effort to ensure that @map_func conforms to the item type of
// @self. It assumes that the caller knows what they are doing and the map
// function returns items of the appropriate type.
func (s mapListModel) SetMapFunc(mapFunc MapListModelMapFunc) {
	var arg0 *C.GtkMapListModel

	arg0 = (*C.GtkMapListModel)(unsafe.Pointer(s.Native()))

	C.gtk_map_list_model_set_map_func(arg0, mapFunc, userData, userDestroy)
}

// SetModel sets the model to be mapped.
//
// GTK makes no effort to ensure that @model conforms to the item type
// expected by the map function. It assumes that the caller knows what they
// are doing and have set up an appropriate map function.
func (s mapListModel) SetModel(model gio.ListModel) {
	var arg0 *C.GtkMapListModel
	var arg1 *C.GListModel

	arg0 = (*C.GtkMapListModel)(unsafe.Pointer(s.Native()))
	arg1 = (*C.GListModel)(unsafe.Pointer(model.Native()))

	C.gtk_map_list_model_set_model(arg0, model)
}
