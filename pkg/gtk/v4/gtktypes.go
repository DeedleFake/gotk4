// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_bitset_get_type()), F: marshalBitset},
	})
}

// Bitset: a `GtkBitset` represents a set of unsigned integers.
//
// Another name for this data structure is "bitmap".
//
// The current implementation is based on roaring bitmaps
// (https://roaringbitmap.org/).
//
// A bitset allows adding a set of integers and provides support for set
// operations like unions, intersections and checks for equality or if a value
// is contained in the set. `GtkBitset` also contains various functions to query
// metadata about the bitset, such as the minimum or maximum values or its size.
//
// The fastest way to iterate values in a bitset is [struct@Gtk.BitsetIter].
//
// The main use case for `GtkBitset` is implementing complex selections for
// [iface@Gtk.SelectionModel].
type Bitset C.GtkBitset

// WrapBitset wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapBitset(ptr unsafe.Pointer) *Bitset {
	return (*Bitset)(ptr)
}

func marshalBitset(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return (*Bitset)(unsafe.Pointer(b)), nil
}

// NewBitsetEmpty constructs a struct Bitset.
func NewBitsetEmpty() *Bitset {
	var _cret *C.GtkBitset // in

	_cret = C.gtk_bitset_new_empty()

	var _bitset *Bitset // out

	_bitset = (*Bitset)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(&_bitset, func(v **Bitset) {
		C.free(unsafe.Pointer(v))
	})

	return _bitset
}

// NewBitsetRange constructs a struct Bitset.
func NewBitsetRange(start uint, nItems uint) *Bitset {
	var _arg1 C.guint      // out
	var _arg2 C.guint      // out
	var _cret *C.GtkBitset // in

	_arg1 = C.guint(start)
	_arg2 = C.guint(nItems)

	_cret = C.gtk_bitset_new_range(_arg1, _arg2)

	var _bitset *Bitset // out

	_bitset = (*Bitset)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(&_bitset, func(v **Bitset) {
		C.free(unsafe.Pointer(v))
	})

	return _bitset
}

// Native returns the underlying C source pointer.
func (b *Bitset) Native() unsafe.Pointer {
	return unsafe.Pointer(b)
}

// Add releases a reference on the given `GtkBitset`.
//
// If the reference was the last, the resources associated to the @self are
// freed.
func (s *Bitset) Add(value uint) bool {
	var _arg0 *C.GtkBitset // out
	var _arg1 C.guint      // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkBitset)(unsafe.Pointer(s.Native()))
	_arg1 = C.guint(value)

	_cret = C.gtk_bitset_add(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// AddRange releases a reference on the given `GtkBitset`.
//
// If the reference was the last, the resources associated to the @self are
// freed.
func (s *Bitset) AddRange(start uint, nItems uint) {
	var _arg0 *C.GtkBitset // out
	var _arg1 C.guint      // out
	var _arg2 C.guint      // out

	_arg0 = (*C.GtkBitset)(unsafe.Pointer(s.Native()))
	_arg1 = C.guint(start)
	_arg2 = C.guint(nItems)

	C.gtk_bitset_add_range(_arg0, _arg1, _arg2)
}

// AddRangeClosed releases a reference on the given `GtkBitset`.
//
// If the reference was the last, the resources associated to the @self are
// freed.
func (s *Bitset) AddRangeClosed(first uint, last uint) {
	var _arg0 *C.GtkBitset // out
	var _arg1 C.guint      // out
	var _arg2 C.guint      // out

	_arg0 = (*C.GtkBitset)(unsafe.Pointer(s.Native()))
	_arg1 = C.guint(first)
	_arg2 = C.guint(last)

	C.gtk_bitset_add_range_closed(_arg0, _arg1, _arg2)
}

// AddRectangle releases a reference on the given `GtkBitset`.
//
// If the reference was the last, the resources associated to the @self are
// freed.
func (s *Bitset) AddRectangle(start uint, width uint, height uint, stride uint) {
	var _arg0 *C.GtkBitset // out
	var _arg1 C.guint      // out
	var _arg2 C.guint      // out
	var _arg3 C.guint      // out
	var _arg4 C.guint      // out

	_arg0 = (*C.GtkBitset)(unsafe.Pointer(s.Native()))
	_arg1 = C.guint(start)
	_arg2 = C.guint(width)
	_arg3 = C.guint(height)
	_arg4 = C.guint(stride)

	C.gtk_bitset_add_rectangle(_arg0, _arg1, _arg2, _arg3, _arg4)
}

// Contains releases a reference on the given `GtkBitset`.
//
// If the reference was the last, the resources associated to the @self are
// freed.
func (s *Bitset) Contains(value uint) bool {
	var _arg0 *C.GtkBitset // out
	var _arg1 C.guint      // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkBitset)(unsafe.Pointer(s.Native()))
	_arg1 = C.guint(value)

	_cret = C.gtk_bitset_contains(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Copy releases a reference on the given `GtkBitset`.
//
// If the reference was the last, the resources associated to the @self are
// freed.
func (s *Bitset) Copy() *Bitset {
	var _arg0 *C.GtkBitset // out
	var _cret *C.GtkBitset // in

	_arg0 = (*C.GtkBitset)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_bitset_copy(_arg0)

	var _bitset *Bitset // out

	_bitset = (*Bitset)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(&_bitset, func(v **Bitset) {
		C.free(unsafe.Pointer(v))
	})

	return _bitset
}

// Difference releases a reference on the given `GtkBitset`.
//
// If the reference was the last, the resources associated to the @self are
// freed.
func (s *Bitset) Difference(other *Bitset) {
	var _arg0 *C.GtkBitset // out
	var _arg1 *C.GtkBitset // out

	_arg0 = (*C.GtkBitset)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GtkBitset)(unsafe.Pointer(other.Native()))

	C.gtk_bitset_difference(_arg0, _arg1)
}

// Equals releases a reference on the given `GtkBitset`.
//
// If the reference was the last, the resources associated to the @self are
// freed.
func (s *Bitset) Equals(other *Bitset) bool {
	var _arg0 *C.GtkBitset // out
	var _arg1 *C.GtkBitset // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkBitset)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GtkBitset)(unsafe.Pointer(other.Native()))

	_cret = C.gtk_bitset_equals(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Maximum releases a reference on the given `GtkBitset`.
//
// If the reference was the last, the resources associated to the @self are
// freed.
func (s *Bitset) Maximum() uint {
	var _arg0 *C.GtkBitset // out
	var _cret C.guint      // in

	_arg0 = (*C.GtkBitset)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_bitset_get_maximum(_arg0)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// Minimum releases a reference on the given `GtkBitset`.
//
// If the reference was the last, the resources associated to the @self are
// freed.
func (s *Bitset) Minimum() uint {
	var _arg0 *C.GtkBitset // out
	var _cret C.guint      // in

	_arg0 = (*C.GtkBitset)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_bitset_get_minimum(_arg0)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// Nth releases a reference on the given `GtkBitset`.
//
// If the reference was the last, the resources associated to the @self are
// freed.
func (s *Bitset) Nth(nth uint) uint {
	var _arg0 *C.GtkBitset // out
	var _arg1 C.guint      // out
	var _cret C.guint      // in

	_arg0 = (*C.GtkBitset)(unsafe.Pointer(s.Native()))
	_arg1 = C.guint(nth)

	_cret = C.gtk_bitset_get_nth(_arg0, _arg1)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// Size releases a reference on the given `GtkBitset`.
//
// If the reference was the last, the resources associated to the @self are
// freed.
func (s *Bitset) Size() uint64 {
	var _arg0 *C.GtkBitset // out
	var _cret C.guint64    // in

	_arg0 = (*C.GtkBitset)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_bitset_get_size(_arg0)

	var _guint64 uint64 // out

	_guint64 = uint64(_cret)

	return _guint64
}

// SizeInRange releases a reference on the given `GtkBitset`.
//
// If the reference was the last, the resources associated to the @self are
// freed.
func (s *Bitset) SizeInRange(first uint, last uint) uint64 {
	var _arg0 *C.GtkBitset // out
	var _arg1 C.guint      // out
	var _arg2 C.guint      // out
	var _cret C.guint64    // in

	_arg0 = (*C.GtkBitset)(unsafe.Pointer(s.Native()))
	_arg1 = C.guint(first)
	_arg2 = C.guint(last)

	_cret = C.gtk_bitset_get_size_in_range(_arg0, _arg1, _arg2)

	var _guint64 uint64 // out

	_guint64 = uint64(_cret)

	return _guint64
}

// Intersect releases a reference on the given `GtkBitset`.
//
// If the reference was the last, the resources associated to the @self are
// freed.
func (s *Bitset) Intersect(other *Bitset) {
	var _arg0 *C.GtkBitset // out
	var _arg1 *C.GtkBitset // out

	_arg0 = (*C.GtkBitset)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GtkBitset)(unsafe.Pointer(other.Native()))

	C.gtk_bitset_intersect(_arg0, _arg1)
}

// IsEmpty releases a reference on the given `GtkBitset`.
//
// If the reference was the last, the resources associated to the @self are
// freed.
func (s *Bitset) IsEmpty() bool {
	var _arg0 *C.GtkBitset // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkBitset)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_bitset_is_empty(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Ref releases a reference on the given `GtkBitset`.
//
// If the reference was the last, the resources associated to the @self are
// freed.
func (s *Bitset) Ref() *Bitset {
	var _arg0 *C.GtkBitset // out
	var _cret *C.GtkBitset // in

	_arg0 = (*C.GtkBitset)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_bitset_ref(_arg0)

	var _bitset *Bitset // out

	_bitset = (*Bitset)(unsafe.Pointer(_cret))

	return _bitset
}

// Remove releases a reference on the given `GtkBitset`.
//
// If the reference was the last, the resources associated to the @self are
// freed.
func (s *Bitset) Remove(value uint) bool {
	var _arg0 *C.GtkBitset // out
	var _arg1 C.guint      // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkBitset)(unsafe.Pointer(s.Native()))
	_arg1 = C.guint(value)

	_cret = C.gtk_bitset_remove(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// RemoveAll releases a reference on the given `GtkBitset`.
//
// If the reference was the last, the resources associated to the @self are
// freed.
func (s *Bitset) RemoveAll() {
	var _arg0 *C.GtkBitset // out

	_arg0 = (*C.GtkBitset)(unsafe.Pointer(s.Native()))

	C.gtk_bitset_remove_all(_arg0)
}

// RemoveRange releases a reference on the given `GtkBitset`.
//
// If the reference was the last, the resources associated to the @self are
// freed.
func (s *Bitset) RemoveRange(start uint, nItems uint) {
	var _arg0 *C.GtkBitset // out
	var _arg1 C.guint      // out
	var _arg2 C.guint      // out

	_arg0 = (*C.GtkBitset)(unsafe.Pointer(s.Native()))
	_arg1 = C.guint(start)
	_arg2 = C.guint(nItems)

	C.gtk_bitset_remove_range(_arg0, _arg1, _arg2)
}

// RemoveRangeClosed releases a reference on the given `GtkBitset`.
//
// If the reference was the last, the resources associated to the @self are
// freed.
func (s *Bitset) RemoveRangeClosed(first uint, last uint) {
	var _arg0 *C.GtkBitset // out
	var _arg1 C.guint      // out
	var _arg2 C.guint      // out

	_arg0 = (*C.GtkBitset)(unsafe.Pointer(s.Native()))
	_arg1 = C.guint(first)
	_arg2 = C.guint(last)

	C.gtk_bitset_remove_range_closed(_arg0, _arg1, _arg2)
}

// RemoveRectangle releases a reference on the given `GtkBitset`.
//
// If the reference was the last, the resources associated to the @self are
// freed.
func (s *Bitset) RemoveRectangle(start uint, width uint, height uint, stride uint) {
	var _arg0 *C.GtkBitset // out
	var _arg1 C.guint      // out
	var _arg2 C.guint      // out
	var _arg3 C.guint      // out
	var _arg4 C.guint      // out

	_arg0 = (*C.GtkBitset)(unsafe.Pointer(s.Native()))
	_arg1 = C.guint(start)
	_arg2 = C.guint(width)
	_arg3 = C.guint(height)
	_arg4 = C.guint(stride)

	C.gtk_bitset_remove_rectangle(_arg0, _arg1, _arg2, _arg3, _arg4)
}

// ShiftLeft releases a reference on the given `GtkBitset`.
//
// If the reference was the last, the resources associated to the @self are
// freed.
func (s *Bitset) ShiftLeft(amount uint) {
	var _arg0 *C.GtkBitset // out
	var _arg1 C.guint      // out

	_arg0 = (*C.GtkBitset)(unsafe.Pointer(s.Native()))
	_arg1 = C.guint(amount)

	C.gtk_bitset_shift_left(_arg0, _arg1)
}

// ShiftRight releases a reference on the given `GtkBitset`.
//
// If the reference was the last, the resources associated to the @self are
// freed.
func (s *Bitset) ShiftRight(amount uint) {
	var _arg0 *C.GtkBitset // out
	var _arg1 C.guint      // out

	_arg0 = (*C.GtkBitset)(unsafe.Pointer(s.Native()))
	_arg1 = C.guint(amount)

	C.gtk_bitset_shift_right(_arg0, _arg1)
}

// Splice releases a reference on the given `GtkBitset`.
//
// If the reference was the last, the resources associated to the @self are
// freed.
func (s *Bitset) Splice(position uint, removed uint, added uint) {
	var _arg0 *C.GtkBitset // out
	var _arg1 C.guint      // out
	var _arg2 C.guint      // out
	var _arg3 C.guint      // out

	_arg0 = (*C.GtkBitset)(unsafe.Pointer(s.Native()))
	_arg1 = C.guint(position)
	_arg2 = C.guint(removed)
	_arg3 = C.guint(added)

	C.gtk_bitset_splice(_arg0, _arg1, _arg2, _arg3)
}

// Subtract releases a reference on the given `GtkBitset`.
//
// If the reference was the last, the resources associated to the @self are
// freed.
func (s *Bitset) Subtract(other *Bitset) {
	var _arg0 *C.GtkBitset // out
	var _arg1 *C.GtkBitset // out

	_arg0 = (*C.GtkBitset)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GtkBitset)(unsafe.Pointer(other.Native()))

	C.gtk_bitset_subtract(_arg0, _arg1)
}

// Union releases a reference on the given `GtkBitset`.
//
// If the reference was the last, the resources associated to the @self are
// freed.
func (s *Bitset) Union(other *Bitset) {
	var _arg0 *C.GtkBitset // out
	var _arg1 *C.GtkBitset // out

	_arg0 = (*C.GtkBitset)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GtkBitset)(unsafe.Pointer(other.Native()))

	C.gtk_bitset_union(_arg0, _arg1)
}

// Unref releases a reference on the given `GtkBitset`.
//
// If the reference was the last, the resources associated to the @self are
// freed.
func (s *Bitset) Unref() {
	var _arg0 *C.GtkBitset // out

	_arg0 = (*C.GtkBitset)(unsafe.Pointer(s.Native()))

	C.gtk_bitset_unref(_arg0)
}

type CSSStyleChange C.GtkCssStyleChange

// WrapCSSStyleChange wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapCSSStyleChange(ptr unsafe.Pointer) *CSSStyleChange {
	return (*CSSStyleChange)(ptr)
}

// Native returns the underlying C source pointer.
func (c *CSSStyleChange) Native() unsafe.Pointer {
	return unsafe.Pointer(c)
}
