// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: glib-2.0 gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_password_entry_get_type()), F: marshalPasswordEntry},
	})
}

// PasswordEntry: `GtkPasswordEntry` is an entry that has been tailored for
// entering secrets.
//
// !An example GtkPasswordEntry (password-entry.png)
//
// It does not show its contents in clear text, does not allow to copy it to the
// clipboard, and it shows a warning when Caps Lock is engaged. If the
// underlying platform allows it, `GtkPasswordEntry` will also place the text in
// a non-pageable memory area, to avoid it being written out to disk by the
// operating system.
//
// Optionally, it can offer a way to reveal the contents in clear text.
//
// `GtkPasswordEntry` provides only minimal API and should be used with the
// [iface@Gtk.Editable] API.
//
//
// CSS Nodes
//
// “` entry.password ╰── text ├── image.caps-lock-indicator ┊ “`
//
// `GtkPasswordEntry` has a single CSS node with name entry that carries a
// .passwordstyle class. The text Css node below it has a child with name image
// and style class .caps-lock-indicator for the Caps Lock icon, and possibly
// other children.
//
//
// Accessibility
//
// `GtkPasswordEntry` uses the GTK_ACCESSIBLE_ROLE_TEXT_BOX role.
type PasswordEntry interface {
	Widget
	Accessible
	Buildable
	ConstraintTarget
	Editable

	// ShowPeekIcon returns whether the entry is showing an icon to reveal the
	// contents.
	ShowPeekIcon() bool
	// SetShowPeekIcon sets whether the entry should have a clickable icon to
	// reveal the contents.
	//
	// Setting this to false also hides the text again.
	SetShowPeekIcon(showPeekIcon bool)
}

// passwordEntry implements the PasswordEntry class.
type passwordEntry struct {
	Widget
	Accessible
	Buildable
	ConstraintTarget
	Editable
}

var _ PasswordEntry = (*passwordEntry)(nil)

// WrapPasswordEntry wraps a GObject to the right type. It is
// primarily used internally.
func WrapPasswordEntry(obj *externglib.Object) PasswordEntry {
	return passwordEntry{
		Widget:           WrapWidget(obj),
		Accessible:       WrapAccessible(obj),
		Buildable:        WrapBuildable(obj),
		ConstraintTarget: WrapConstraintTarget(obj),
		Editable:         WrapEditable(obj),
	}
}

func marshalPasswordEntry(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapPasswordEntry(obj), nil
}

// NewPasswordEntry constructs a class PasswordEntry.
func NewPasswordEntry() PasswordEntry {
	var _cret C.GtkPasswordEntry // in

	_cret = C.gtk_password_entry_new()

	var _passwordEntry PasswordEntry // out

	_passwordEntry = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret.Native()))).(PasswordEntry)

	return _passwordEntry
}

// ShowPeekIcon returns whether the entry is showing an icon to reveal the
// contents.
func (e passwordEntry) ShowPeekIcon() bool {
	var _arg0 *C.GtkPasswordEntry // out

	_arg0 = (*C.GtkPasswordEntry)(unsafe.Pointer(e.Native()))

	var _cret C.gboolean // in

	_cret = C.gtk_password_entry_get_show_peek_icon(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetShowPeekIcon sets whether the entry should have a clickable icon to
// reveal the contents.
//
// Setting this to false also hides the text again.
func (e passwordEntry) SetShowPeekIcon(showPeekIcon bool) {
	var _arg0 *C.GtkPasswordEntry // out
	var _arg1 C.gboolean          // out

	_arg0 = (*C.GtkPasswordEntry)(unsafe.Pointer(e.Native()))
	if showPeekIcon {
		_arg1 = C.TRUE
	}

	C.gtk_password_entry_set_show_peek_icon(_arg0, _arg1)
}
