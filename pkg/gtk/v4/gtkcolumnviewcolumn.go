// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_column_view_column_get_type()), F: marshalColumnViewColumner},
	})
}

// ColumnViewColumner describes ColumnViewColumn's methods.
type ColumnViewColumner interface {
	// ColumnView gets the column view that's currently displaying this column.
	ColumnView() *ColumnView
	// Expand returns whether this column should expand.
	Expand() bool
	// Factory gets the factory that's currently used to populate list items for
	// this column.
	Factory() *ListItemFactory
	// FixedWidth gets the fixed width of the column.
	FixedWidth() int
	// HeaderMenu gets the menu model that is used to create the context menu
	// for the column header.
	HeaderMenu() *gio.MenuModel
	// Resizable returns whether this column is resizable.
	Resizable() bool
	// Sorter returns the sorter that is associated with the column.
	Sorter() *Sorter
	// Title returns the title set with gtk_column_view_column_set_title().
	Title() string
	// Visible returns whether this column is visible.
	Visible() bool
	// SetExpand sets the column to take available extra space.
	SetExpand(expand bool)
	// SetFactory sets the `GtkListItemFactory` to use for populating list items
	// for this column.
	SetFactory(factory ListItemFactorier)
	// SetFixedWidth: if @fixed_width is not -1, sets the fixed width of
	// @column; otherwise unsets it.
	SetFixedWidth(fixedWidth int)
	// SetHeaderMenu sets the menu model that is used to create the context menu
	// for the column header.
	SetHeaderMenu(menu gio.MenuModeller)
	// SetResizable sets whether this column should be resizable by dragging.
	SetResizable(resizable bool)
	// SetSorter associates a sorter with the column.
	SetSorter(sorter Sorterer)
	// SetTitle sets the title of this column.
	SetTitle(title string)
	// SetVisible sets whether this column should be visible in views.
	SetVisible(visible bool)
}

// ColumnViewColumn: `GtkColumnViewColumn` represents the columns being added to
// `GtkColumnView`.
//
// The main ingredient for a `GtkColumnViewColumn` is the `GtkListItemFactory`
// that tells the columnview how to create cells for this column from items in
// the model.
//
// Columns have a title, and can optionally have a header menu set with
// [method@Gtk.ColumnViewColumn.set_header_menu].
//
// A sorter can be associated with a column using
// [method@Gtk.ColumnViewColumn.set_sorter], to let users influence sorting by
// clicking on the column header.
type ColumnViewColumn struct {
	*externglib.Object
}

var (
	_ ColumnViewColumner = (*ColumnViewColumn)(nil)
	_ gextras.Nativer    = (*ColumnViewColumn)(nil)
)

func wrapColumnViewColumn(obj *externglib.Object) ColumnViewColumner {
	return &ColumnViewColumn{
		Object: obj,
	}
}

func marshalColumnViewColumner(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapColumnViewColumn(obj), nil
}

// NewColumnViewColumn creates a new `GtkColumnViewColumn` that uses the given
// @factory for mapping items to widgets.
//
// You most likely want to call [method@Gtk.ColumnView.append_column] next.
//
// The function takes ownership of the argument, so you can write code like:
//
// “`c column = gtk_column_view_column_new (_("Name"),
// gtk_builder_list_item_factory_new_from_resource ("/name.ui")); “`
func NewColumnViewColumn(title string, factory ListItemFactorier) *ColumnViewColumn {
	var _arg1 *C.char                // out
	var _arg2 *C.GtkListItemFactory  // out
	var _cret *C.GtkColumnViewColumn // in

	_arg1 = (*C.char)(C.CString(title))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.GtkListItemFactory)(unsafe.Pointer((factory).(gextras.Nativer).Native()))

	_cret = C.gtk_column_view_column_new(_arg1, _arg2)

	var _columnViewColumn *ColumnViewColumn // out

	_columnViewColumn = (gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret)))).(*ColumnViewColumn)

	return _columnViewColumn
}

// ColumnView gets the column view that's currently displaying this column.
//
// If @self has not been added to a column view yet, nil is returned.
func (self *ColumnViewColumn) ColumnView() *ColumnView {
	var _arg0 *C.GtkColumnViewColumn // out
	var _cret *C.GtkColumnView       // in

	_arg0 = (*C.GtkColumnViewColumn)(unsafe.Pointer(self.Native()))

	_cret = C.gtk_column_view_column_get_column_view(_arg0)

	var _columnView *ColumnView // out

	_columnView = (gextras.CastObject(externglib.Take(unsafe.Pointer(_cret)))).(*ColumnView)

	return _columnView
}

// Expand returns whether this column should expand.
func (self *ColumnViewColumn) Expand() bool {
	var _arg0 *C.GtkColumnViewColumn // out
	var _cret C.gboolean             // in

	_arg0 = (*C.GtkColumnViewColumn)(unsafe.Pointer(self.Native()))

	_cret = C.gtk_column_view_column_get_expand(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Factory gets the factory that's currently used to populate list items for
// this column.
func (self *ColumnViewColumn) Factory() *ListItemFactory {
	var _arg0 *C.GtkColumnViewColumn // out
	var _cret *C.GtkListItemFactory  // in

	_arg0 = (*C.GtkColumnViewColumn)(unsafe.Pointer(self.Native()))

	_cret = C.gtk_column_view_column_get_factory(_arg0)

	var _listItemFactory *ListItemFactory // out

	_listItemFactory = (gextras.CastObject(externglib.Take(unsafe.Pointer(_cret)))).(*ListItemFactory)

	return _listItemFactory
}

// FixedWidth gets the fixed width of the column.
func (self *ColumnViewColumn) FixedWidth() int {
	var _arg0 *C.GtkColumnViewColumn // out
	var _cret C.int                  // in

	_arg0 = (*C.GtkColumnViewColumn)(unsafe.Pointer(self.Native()))

	_cret = C.gtk_column_view_column_get_fixed_width(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// HeaderMenu gets the menu model that is used to create the context menu for
// the column header.
func (self *ColumnViewColumn) HeaderMenu() *gio.MenuModel {
	var _arg0 *C.GtkColumnViewColumn // out
	var _cret *C.GMenuModel          // in

	_arg0 = (*C.GtkColumnViewColumn)(unsafe.Pointer(self.Native()))

	_cret = C.gtk_column_view_column_get_header_menu(_arg0)

	var _menuModel *gio.MenuModel // out

	_menuModel = (gextras.CastObject(externglib.Take(unsafe.Pointer(_cret)))).(*gio.MenuModel)

	return _menuModel
}

// Resizable returns whether this column is resizable.
func (self *ColumnViewColumn) Resizable() bool {
	var _arg0 *C.GtkColumnViewColumn // out
	var _cret C.gboolean             // in

	_arg0 = (*C.GtkColumnViewColumn)(unsafe.Pointer(self.Native()))

	_cret = C.gtk_column_view_column_get_resizable(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Sorter returns the sorter that is associated with the column.
func (self *ColumnViewColumn) Sorter() *Sorter {
	var _arg0 *C.GtkColumnViewColumn // out
	var _cret *C.GtkSorter           // in

	_arg0 = (*C.GtkColumnViewColumn)(unsafe.Pointer(self.Native()))

	_cret = C.gtk_column_view_column_get_sorter(_arg0)

	var _sorter *Sorter // out

	_sorter = (gextras.CastObject(externglib.Take(unsafe.Pointer(_cret)))).(*Sorter)

	return _sorter
}

// Title returns the title set with gtk_column_view_column_set_title().
func (self *ColumnViewColumn) Title() string {
	var _arg0 *C.GtkColumnViewColumn // out
	var _cret *C.char                // in

	_arg0 = (*C.GtkColumnViewColumn)(unsafe.Pointer(self.Native()))

	_cret = C.gtk_column_view_column_get_title(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(_cret))

	return _utf8
}

// Visible returns whether this column is visible.
func (self *ColumnViewColumn) Visible() bool {
	var _arg0 *C.GtkColumnViewColumn // out
	var _cret C.gboolean             // in

	_arg0 = (*C.GtkColumnViewColumn)(unsafe.Pointer(self.Native()))

	_cret = C.gtk_column_view_column_get_visible(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetExpand sets the column to take available extra space.
//
// The extra space is shared equally amongst all columns that have the expand
// set to true.
func (self *ColumnViewColumn) SetExpand(expand bool) {
	var _arg0 *C.GtkColumnViewColumn // out
	var _arg1 C.gboolean             // out

	_arg0 = (*C.GtkColumnViewColumn)(unsafe.Pointer(self.Native()))
	if expand {
		_arg1 = C.TRUE
	}

	C.gtk_column_view_column_set_expand(_arg0, _arg1)
}

// SetFactory sets the `GtkListItemFactory` to use for populating list items for
// this column.
func (self *ColumnViewColumn) SetFactory(factory ListItemFactorier) {
	var _arg0 *C.GtkColumnViewColumn // out
	var _arg1 *C.GtkListItemFactory  // out

	_arg0 = (*C.GtkColumnViewColumn)(unsafe.Pointer(self.Native()))
	_arg1 = (*C.GtkListItemFactory)(unsafe.Pointer((factory).(gextras.Nativer).Native()))

	C.gtk_column_view_column_set_factory(_arg0, _arg1)
}

// SetFixedWidth: if @fixed_width is not -1, sets the fixed width of @column;
// otherwise unsets it.
//
// Setting a fixed width overrides the automatically calculated width.
// Interactive resizing also sets the “fixed-width” property.
func (self *ColumnViewColumn) SetFixedWidth(fixedWidth int) {
	var _arg0 *C.GtkColumnViewColumn // out
	var _arg1 C.int                  // out

	_arg0 = (*C.GtkColumnViewColumn)(unsafe.Pointer(self.Native()))
	_arg1 = C.int(fixedWidth)

	C.gtk_column_view_column_set_fixed_width(_arg0, _arg1)
}

// SetHeaderMenu sets the menu model that is used to create the context menu for
// the column header.
func (self *ColumnViewColumn) SetHeaderMenu(menu gio.MenuModeller) {
	var _arg0 *C.GtkColumnViewColumn // out
	var _arg1 *C.GMenuModel          // out

	_arg0 = (*C.GtkColumnViewColumn)(unsafe.Pointer(self.Native()))
	_arg1 = (*C.GMenuModel)(unsafe.Pointer((menu).(gextras.Nativer).Native()))

	C.gtk_column_view_column_set_header_menu(_arg0, _arg1)
}

// SetResizable sets whether this column should be resizable by dragging.
func (self *ColumnViewColumn) SetResizable(resizable bool) {
	var _arg0 *C.GtkColumnViewColumn // out
	var _arg1 C.gboolean             // out

	_arg0 = (*C.GtkColumnViewColumn)(unsafe.Pointer(self.Native()))
	if resizable {
		_arg1 = C.TRUE
	}

	C.gtk_column_view_column_set_resizable(_arg0, _arg1)
}

// SetSorter associates a sorter with the column.
//
// If @sorter is nil, the column will not let users change the sorting by
// clicking on its header.
//
// This sorter can be made active by clicking on the column header, or by
// calling [method@Gtk.ColumnView.sort_by_column].
//
// See [method@Gtk.ColumnView.get_sorter] for the necessary steps for setting up
// customizable sorting for [class@Gtk.ColumnView].
func (self *ColumnViewColumn) SetSorter(sorter Sorterer) {
	var _arg0 *C.GtkColumnViewColumn // out
	var _arg1 *C.GtkSorter           // out

	_arg0 = (*C.GtkColumnViewColumn)(unsafe.Pointer(self.Native()))
	_arg1 = (*C.GtkSorter)(unsafe.Pointer((sorter).(gextras.Nativer).Native()))

	C.gtk_column_view_column_set_sorter(_arg0, _arg1)
}

// SetTitle sets the title of this column.
//
// The title is displayed in the header of a `GtkColumnView` for this column and
// is therefore user-facing text that should be translated.
func (self *ColumnViewColumn) SetTitle(title string) {
	var _arg0 *C.GtkColumnViewColumn // out
	var _arg1 *C.char                // out

	_arg0 = (*C.GtkColumnViewColumn)(unsafe.Pointer(self.Native()))
	_arg1 = (*C.char)(C.CString(title))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_column_view_column_set_title(_arg0, _arg1)
}

// SetVisible sets whether this column should be visible in views.
func (self *ColumnViewColumn) SetVisible(visible bool) {
	var _arg0 *C.GtkColumnViewColumn // out
	var _arg1 C.gboolean             // out

	_arg0 = (*C.GtkColumnViewColumn)(unsafe.Pointer(self.Native()))
	if visible {
		_arg1 = C.TRUE
	}

	C.gtk_column_view_column_set_visible(_arg0, _arg1)
}
