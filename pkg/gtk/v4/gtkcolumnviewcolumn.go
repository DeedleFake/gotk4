// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_column_view_column_get_type()), F: marshalColumnViewColumn},
	})
}

// ColumnViewColumn: `GtkColumnViewColumn` represents the columns being added to
// `GtkColumnView`.
//
// The main ingredient for a `GtkColumnViewColumn` is the `GtkListItemFactory`
// that tells the columnview how to create cells for this column from items in
// the model.
//
// Columns have a title, and can optionally have a header menu set with
// [method@Gtk.ColumnViewColumn.set_header_menu].
//
// A sorter can be associated with a column using
// [method@Gtk.ColumnViewColumn.set_sorter], to let users influence sorting by
// clicking on the column header.
type ColumnViewColumn interface {
	gextras.Objector

	ColumnView() ColumnView

	Expand() bool

	Factory() ListItemFactory

	FixedWidth() int

	HeaderMenu() gio.MenuModel

	Resizable() bool

	Sorter() Sorter

	Title() string

	Visible() bool

	SetExpandColumnViewColumn(expand bool)

	SetFactoryColumnViewColumn(factory ListItemFactory)

	SetFixedWidthColumnViewColumn(fixedWidth int)

	SetHeaderMenuColumnViewColumn(menu gio.MenuModel)

	SetResizableColumnViewColumn(resizable bool)

	SetSorterColumnViewColumn(sorter Sorter)

	SetTitleColumnViewColumn(title string)

	SetVisibleColumnViewColumn(visible bool)
}

// columnViewColumn implements the ColumnViewColumn class.
type columnViewColumn struct {
	gextras.Objector
}

// WrapColumnViewColumn wraps a GObject to the right type. It is
// primarily used internally.
func WrapColumnViewColumn(obj *externglib.Object) ColumnViewColumn {
	return columnViewColumn{
		Objector: obj,
	}
}

func marshalColumnViewColumn(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapColumnViewColumn(obj), nil
}

func NewColumnViewColumn(title string, factory ListItemFactory) ColumnViewColumn {
	var _arg1 *C.char                // out
	var _arg2 *C.GtkListItemFactory  // out
	var _cret *C.GtkColumnViewColumn // in

	_arg1 = (*C.char)(C.CString(title))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.GtkListItemFactory)(unsafe.Pointer(factory.Native()))

	_cret = C.gtk_column_view_column_new(_arg1, _arg2)

	var _columnViewColumn ColumnViewColumn // out

	_columnViewColumn = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(ColumnViewColumn)

	return _columnViewColumn
}

func (s columnViewColumn) ColumnView() ColumnView {
	var _arg0 *C.GtkColumnViewColumn // out
	var _cret *C.GtkColumnView       // in

	_arg0 = (*C.GtkColumnViewColumn)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_column_view_column_get_column_view(_arg0)

	var _columnView ColumnView // out

	_columnView = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(ColumnView)

	return _columnView
}

func (s columnViewColumn) Expand() bool {
	var _arg0 *C.GtkColumnViewColumn // out
	var _cret C.gboolean             // in

	_arg0 = (*C.GtkColumnViewColumn)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_column_view_column_get_expand(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (s columnViewColumn) Factory() ListItemFactory {
	var _arg0 *C.GtkColumnViewColumn // out
	var _cret *C.GtkListItemFactory  // in

	_arg0 = (*C.GtkColumnViewColumn)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_column_view_column_get_factory(_arg0)

	var _listItemFactory ListItemFactory // out

	_listItemFactory = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(ListItemFactory)

	return _listItemFactory
}

func (s columnViewColumn) FixedWidth() int {
	var _arg0 *C.GtkColumnViewColumn // out
	var _cret C.int                  // in

	_arg0 = (*C.GtkColumnViewColumn)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_column_view_column_get_fixed_width(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (s columnViewColumn) HeaderMenu() gio.MenuModel {
	var _arg0 *C.GtkColumnViewColumn // out
	var _cret *C.GMenuModel          // in

	_arg0 = (*C.GtkColumnViewColumn)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_column_view_column_get_header_menu(_arg0)

	var _menuModel gio.MenuModel // out

	_menuModel = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(gio.MenuModel)

	return _menuModel
}

func (s columnViewColumn) Resizable() bool {
	var _arg0 *C.GtkColumnViewColumn // out
	var _cret C.gboolean             // in

	_arg0 = (*C.GtkColumnViewColumn)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_column_view_column_get_resizable(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (s columnViewColumn) Sorter() Sorter {
	var _arg0 *C.GtkColumnViewColumn // out
	var _cret *C.GtkSorter           // in

	_arg0 = (*C.GtkColumnViewColumn)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_column_view_column_get_sorter(_arg0)

	var _sorter Sorter // out

	_sorter = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Sorter)

	return _sorter
}

func (s columnViewColumn) Title() string {
	var _arg0 *C.GtkColumnViewColumn // out
	var _cret *C.char                // in

	_arg0 = (*C.GtkColumnViewColumn)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_column_view_column_get_title(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

func (s columnViewColumn) Visible() bool {
	var _arg0 *C.GtkColumnViewColumn // out
	var _cret C.gboolean             // in

	_arg0 = (*C.GtkColumnViewColumn)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_column_view_column_get_visible(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (s columnViewColumn) SetExpandColumnViewColumn(expand bool) {
	var _arg0 *C.GtkColumnViewColumn // out
	var _arg1 C.gboolean             // out

	_arg0 = (*C.GtkColumnViewColumn)(unsafe.Pointer(s.Native()))
	if expand {
		_arg1 = C.TRUE
	}

	C.gtk_column_view_column_set_expand(_arg0, _arg1)
}

func (s columnViewColumn) SetFactoryColumnViewColumn(factory ListItemFactory) {
	var _arg0 *C.GtkColumnViewColumn // out
	var _arg1 *C.GtkListItemFactory  // out

	_arg0 = (*C.GtkColumnViewColumn)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GtkListItemFactory)(unsafe.Pointer(factory.Native()))

	C.gtk_column_view_column_set_factory(_arg0, _arg1)
}

func (s columnViewColumn) SetFixedWidthColumnViewColumn(fixedWidth int) {
	var _arg0 *C.GtkColumnViewColumn // out
	var _arg1 C.int                  // out

	_arg0 = (*C.GtkColumnViewColumn)(unsafe.Pointer(s.Native()))
	_arg1 = C.int(fixedWidth)

	C.gtk_column_view_column_set_fixed_width(_arg0, _arg1)
}

func (s columnViewColumn) SetHeaderMenuColumnViewColumn(menu gio.MenuModel) {
	var _arg0 *C.GtkColumnViewColumn // out
	var _arg1 *C.GMenuModel          // out

	_arg0 = (*C.GtkColumnViewColumn)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GMenuModel)(unsafe.Pointer(menu.Native()))

	C.gtk_column_view_column_set_header_menu(_arg0, _arg1)
}

func (s columnViewColumn) SetResizableColumnViewColumn(resizable bool) {
	var _arg0 *C.GtkColumnViewColumn // out
	var _arg1 C.gboolean             // out

	_arg0 = (*C.GtkColumnViewColumn)(unsafe.Pointer(s.Native()))
	if resizable {
		_arg1 = C.TRUE
	}

	C.gtk_column_view_column_set_resizable(_arg0, _arg1)
}

func (s columnViewColumn) SetSorterColumnViewColumn(sorter Sorter) {
	var _arg0 *C.GtkColumnViewColumn // out
	var _arg1 *C.GtkSorter           // out

	_arg0 = (*C.GtkColumnViewColumn)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GtkSorter)(unsafe.Pointer(sorter.Native()))

	C.gtk_column_view_column_set_sorter(_arg0, _arg1)
}

func (s columnViewColumn) SetTitleColumnViewColumn(title string) {
	var _arg0 *C.GtkColumnViewColumn // out
	var _arg1 *C.char                // out

	_arg0 = (*C.GtkColumnViewColumn)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.char)(C.CString(title))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_column_view_column_set_title(_arg0, _arg1)
}

func (s columnViewColumn) SetVisibleColumnViewColumn(visible bool) {
	var _arg0 *C.GtkColumnViewColumn // out
	var _arg1 C.gboolean             // out

	_arg0 = (*C.GtkColumnViewColumn)(unsafe.Pointer(s.Native()))
	if visible {
		_arg1 = C.TRUE
	}

	C.gtk_column_view_column_set_visible(_arg0, _arg1)
}
