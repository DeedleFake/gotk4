// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/core/gerror"
	"github.com/diamondburned/gotk4/core/gextras"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_directory_list_get_type()), F: marshalDirectoryList},
	})
}

// DirectoryList: `GtkDirectoryList` is a list model that wraps
// g_file_enumerate_children_async().
//
// It presents a `GListModel` and fills it asynchronously with the `GFileInfo`s
// returned from that function.
//
// Enumeration will start automatically when a the
// [property@Gtk.DirectoryList:file] property is set.
//
// While the `GtkDirectoryList` is being filled, the
// [property@Gtk.DirectoryList:loading] property will be set to true. You can
// listen to that property if you want to show information like a `GtkSpinner`
// or a "Loading..." text.
//
// If loading fails at any point, the [property@Gtk.DirectoryList:error]
// property will be set to give more indication about the failure.
//
// The `GFileInfo`s returned from a `GtkDirectoryList` have the "standard::file"
// attribute set to the `GFile` they refer to. This way you can get at the file
// that is referred to in the same way you would via
// g_file_enumerator_get_child(). This means you do not need access to the
// `GtkDirectoryList`, but can access the `GFile` directly from the `GFileInfo`
// when operating with a `GtkListView` or similar.
type DirectoryList interface {
	gio.ListModel

	// Attributes:
	Attributes() string
	// Error:
	Error() error
	// File:
	File() gio.File
	// IOPriority:
	IOPriority() int
	// Monitored:
	Monitored() bool
	// IsLoadingDirectoryList:
	IsLoadingDirectoryList() bool
	// SetAttributesDirectoryList:
	SetAttributesDirectoryList(attributes string)
	// SetFileDirectoryList:
	SetFileDirectoryList(file gio.File)
	// SetIOPriorityDirectoryList:
	SetIOPriorityDirectoryList(ioPriority int)
	// SetMonitoredDirectoryList:
	SetMonitoredDirectoryList(monitored bool)
}

// directoryList implements the DirectoryList class.
type directoryList struct {
	gextras.Objector
}

// WrapDirectoryList wraps a GObject to the right type. It is
// primarily used internally.
func WrapDirectoryList(obj *externglib.Object) DirectoryList {
	return directoryList{
		Objector: obj,
	}
}

func marshalDirectoryList(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapDirectoryList(obj), nil
}

// NewDirectoryList:
func NewDirectoryList(attributes string, file gio.File) DirectoryList {
	var _arg1 *C.char             // out
	var _arg2 *C.GFile            // out
	var _cret *C.GtkDirectoryList // in

	_arg1 = (*C.char)(C.CString(attributes))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.GFile)(unsafe.Pointer(file.Native()))

	_cret = C.gtk_directory_list_new(_arg1, _arg2)

	var _directoryList DirectoryList // out

	_directoryList = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(DirectoryList)

	return _directoryList
}

func (s directoryList) Attributes() string {
	var _arg0 *C.GtkDirectoryList // out
	var _cret *C.char             // in

	_arg0 = (*C.GtkDirectoryList)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_directory_list_get_attributes(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

func (s directoryList) Error() error {
	var _arg0 *C.GtkDirectoryList // out
	var _cret *C.GError           // in

	_arg0 = (*C.GtkDirectoryList)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_directory_list_get_error(_arg0)

	var _err error // out

	_err = gerror.Take(unsafe.Pointer(_cret))

	return _err
}

func (s directoryList) File() gio.File {
	var _arg0 *C.GtkDirectoryList // out
	var _cret *C.GFile            // in

	_arg0 = (*C.GtkDirectoryList)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_directory_list_get_file(_arg0)

	var _file gio.File // out

	_file = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(gio.File)

	return _file
}

func (s directoryList) IOPriority() int {
	var _arg0 *C.GtkDirectoryList // out
	var _cret C.int               // in

	_arg0 = (*C.GtkDirectoryList)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_directory_list_get_io_priority(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (s directoryList) Monitored() bool {
	var _arg0 *C.GtkDirectoryList // out
	var _cret C.gboolean          // in

	_arg0 = (*C.GtkDirectoryList)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_directory_list_get_monitored(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (s directoryList) IsLoadingDirectoryList() bool {
	var _arg0 *C.GtkDirectoryList // out
	var _cret C.gboolean          // in

	_arg0 = (*C.GtkDirectoryList)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_directory_list_is_loading(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (s directoryList) SetAttributesDirectoryList(attributes string) {
	var _arg0 *C.GtkDirectoryList // out
	var _arg1 *C.char             // out

	_arg0 = (*C.GtkDirectoryList)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.char)(C.CString(attributes))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_directory_list_set_attributes(_arg0, _arg1)
}

func (s directoryList) SetFileDirectoryList(file gio.File) {
	var _arg0 *C.GtkDirectoryList // out
	var _arg1 *C.GFile            // out

	_arg0 = (*C.GtkDirectoryList)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GFile)(unsafe.Pointer(file.Native()))

	C.gtk_directory_list_set_file(_arg0, _arg1)
}

func (s directoryList) SetIOPriorityDirectoryList(ioPriority int) {
	var _arg0 *C.GtkDirectoryList // out
	var _arg1 C.int               // out

	_arg0 = (*C.GtkDirectoryList)(unsafe.Pointer(s.Native()))
	_arg1 = C.int(ioPriority)

	C.gtk_directory_list_set_io_priority(_arg0, _arg1)
}

func (s directoryList) SetMonitoredDirectoryList(monitored bool) {
	var _arg0 *C.GtkDirectoryList // out
	var _arg1 C.gboolean          // out

	_arg0 = (*C.GtkDirectoryList)(unsafe.Pointer(s.Native()))
	if monitored {
		_arg1 = C.TRUE
	}

	C.gtk_directory_list_set_monitored(_arg0, _arg1)
}

func (l directoryList) ItemType() externglib.Type {
	return gio.WrapListModel(gextras.InternObject(l)).ItemType()
}

func (l directoryList) NItems() uint {
	return gio.WrapListModel(gextras.InternObject(l)).NItems()
}

func (l directoryList) Object(position uint) gextras.Objector {
	return gio.WrapListModel(gextras.InternObject(l)).Object(position)
}

func (l directoryList) ItemsChanged(position uint, removed uint, added uint) {
	gio.WrapListModel(gextras.InternObject(l)).ItemsChanged(position, removed, added)
}
