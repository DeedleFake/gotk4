// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	"github.com/diamondburned/gotk4/pkg/gdk/v4"
	"github.com/diamondburned/gotk4/pkg/gdkpixbuf/v2"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: glib-2.0 gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_image_type_get_type()), F: marshalImageType},
		{T: externglib.Type(C.gtk_image_get_type()), F: marshalImage},
	})
}

// ImageType describes the image data representation used by a
// [class@Gtk.Image].
//
// If you want to get the image from the widget, you can only get the
// currently-stored representation; for instance, if the
// gtk_image_get_storage_type() returns GTK_IMAGE_PAINTABLE, then you can call
// gtk_image_get_paintable().
//
// For empty images, you can request any storage type (call any of the "get"
// functions), but they will all return nil values.
type ImageType int

const (
	// ImageTypeEmpty: there is no image displayed by the widget
	ImageTypeEmpty ImageType = 0
	// ImageTypeIconName: the widget contains a named icon
	ImageTypeIconName ImageType = 1
	// ImageTypeGIcon: the widget contains a #GIcon
	ImageTypeGIcon ImageType = 2
	// ImageTypePaintable: the widget contains a Paintable
	ImageTypePaintable ImageType = 3
)

func marshalImageType(p uintptr) (interface{}, error) {
	return ImageType(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// Image: the `GtkImage` widget displays an image.
//
// !An example GtkImage (image.png)
//
// Various kinds of object can be displayed as an image; most typically, you
// would load a `GdkTexture` from a file, using the convenience function
// [ctor@Gtk.Image.new_from_file], for instance:
//
// “`c GtkWidget *image = gtk_image_new_from_file ("myfile.png"); “`
//
// If the file isn’t loaded successfully, the image will contain a “broken
// image” icon similar to that used in many web browsers.
//
// If you want to handle errors in loading the file yourself, for example by
// displaying an error message, then load the image with
// [ctor@Gdk.Texture.new_from_file], then create the `GtkImage` with
// [ctor@Gtk.Image.new_from_paintable].
//
// Sometimes an application will want to avoid depending on external data files,
// such as image files. See the documentation of `GResource` inside GIO, for
// details. In this case, [property@Gtk.Image:resource],
// [ctor@Gtk.Image.new_from_resource], and [method@Gtk.Image.set_from_resource]
// should be used.
//
// `GtkImage` displays its image as an icon, with a size that is determined by
// the application. See [class@Gtk.Picture] if you want to show an image at is
// actual size.
//
//
// CSS nodes
//
// `GtkImage` has a single CSS node with the name `image`. The style classes
// `.normal-icons` or `.large-icons` may appear, depending on the
// [property@Gtk.Image:icon-size] property.
//
//
// Accessibility
//
// `GtkImage` uses the `GTK_ACCESSIBLE_ROLE_IMG` role.
type Image interface {
	Widget
	Accessible
	Buildable
	ConstraintTarget

	// Clear resets the image to be empty.
	Clear()
	// GIcon gets the `GIcon` being displayed by the `GtkImage`.
	//
	// The storage type of the image must be GTK_IMAGE_EMPTY or GTK_IMAGE_GICON
	// (see [method@Gtk.Image.get_storage_type]). The caller of this function
	// does not own a reference to the returned `GIcon`.
	GIcon() gio.Icon
	// IconName gets the icon name and size being displayed by the `GtkImage`.
	//
	// The storage type of the image must be GTK_IMAGE_EMPTY or
	// GTK_IMAGE_ICON_NAME (see [method@Gtk.Image.get_storage_type]). The
	// returned string is owned by the `GtkImage` and should not be freed.
	IconName() string
	// IconSize gets the icon size used by the @image when rendering icons.
	IconSize() IconSize
	// Paintable gets the image `GdkPaintable` being displayed by the
	// `GtkImage`.
	//
	// The storage type of the image must be GTK_IMAGE_EMPTY or
	// GTK_IMAGE_PAINTABLE (see [method@Gtk.Image.get_storage_type]). The caller
	// of this function does not own a reference to the returned paintable.
	Paintable() gdk.Paintable
	// PixelSize gets the pixel size used for named icons.
	PixelSize() int
	// StorageType gets the type of representation being used by the `GtkImage`
	// to store image data.
	//
	// If the `GtkImage` has no image data, the return value will be
	// GTK_IMAGE_EMPTY.
	StorageType() ImageType
	// SetFromFile sets a `GtkImage` to show a file.
	//
	// See [ctor@Gtk.Image.new_from_file] for details.
	SetFromFile(filename string)
	// SetFromGIcon sets a `GtkImage` to show a `GIcon`.
	//
	// See [ctor@Gtk.Image.new_from_gicon] for details.
	SetFromGIcon(icon gio.Icon)
	// SetFromIconName sets a `GtkImage` to show a named icon.
	//
	// See [ctor@Gtk.Image.new_from_icon_name] for details.
	SetFromIconName(iconName string)
	// SetFromPaintable sets a `GtkImage` to show a `GdkPaintable`.
	//
	// See [ctor@Gtk.Image.new_from_paintable] for details.
	SetFromPaintable(paintable gdk.Paintable)
	// SetFromPixbuf sets a `GtkImage` to show a `GdkPixbuf`.
	//
	// See [ctor@Gtk.Image.new_from_pixbuf] for details.
	//
	// Note: This is a helper for [method@Gtk.Image.set_from_paintable], and you
	// can't get back the exact pixbuf once this is called, only a paintable.
	SetFromPixbuf(pixbuf gdkpixbuf.Pixbuf)
	// SetFromResource sets a `GtkImage` to show a resource.
	//
	// See [ctor@Gtk.Image.new_from_resource] for details.
	SetFromResource(resourcePath string)
	// SetIconSize suggests an icon size to the theme for named icons.
	SetIconSize(iconSize IconSize)
	// SetPixelSize sets the pixel size to use for named icons.
	//
	// If the pixel size is set to a value != -1, it is used instead of the icon
	// size set by [method@Gtk.Image.set_from_icon_name].
	SetPixelSize(pixelSize int)
}

// image implements the Image class.
type image struct {
	Widget
	Accessible
	Buildable
	ConstraintTarget
}

var _ Image = (*image)(nil)

// WrapImage wraps a GObject to the right type. It is
// primarily used internally.
func WrapImage(obj *externglib.Object) Image {
	return image{
		Widget:           WrapWidget(obj),
		Accessible:       WrapAccessible(obj),
		Buildable:        WrapBuildable(obj),
		ConstraintTarget: WrapConstraintTarget(obj),
	}
}

func marshalImage(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapImage(obj), nil
}

// NewImage constructs a class Image.
func NewImage() Image {
	var _cret C.GtkImage // in

	_cret = C.gtk_image_new()

	var _image Image // out

	_image = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret.Native()))).(Image)

	return _image
}

// NewImageFromFile constructs a class Image.
func NewImageFromFile(filename string) Image {
	var _arg1 *C.char // out

	_arg1 = (*C.char)(C.CString(filename))
	defer C.free(unsafe.Pointer(_arg1))

	var _cret C.GtkImage // in

	_cret = C.gtk_image_new_from_file(_arg1)

	var _image Image // out

	_image = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret.Native()))).(Image)

	return _image
}

// NewImageFromGIcon constructs a class Image.
func NewImageFromGIcon(icon gio.Icon) Image {
	var _arg1 *C.GIcon // out

	_arg1 = (*C.GIcon)(unsafe.Pointer(icon.Native()))

	var _cret C.GtkImage // in

	_cret = C.gtk_image_new_from_gicon(_arg1)

	var _image Image // out

	_image = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret.Native()))).(Image)

	return _image
}

// NewImageFromIconName constructs a class Image.
func NewImageFromIconName(iconName string) Image {
	var _arg1 *C.char // out

	_arg1 = (*C.char)(C.CString(iconName))
	defer C.free(unsafe.Pointer(_arg1))

	var _cret C.GtkImage // in

	_cret = C.gtk_image_new_from_icon_name(_arg1)

	var _image Image // out

	_image = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret.Native()))).(Image)

	return _image
}

// NewImageFromPaintable constructs a class Image.
func NewImageFromPaintable(paintable gdk.Paintable) Image {
	var _arg1 *C.GdkPaintable // out

	_arg1 = (*C.GdkPaintable)(unsafe.Pointer(paintable.Native()))

	var _cret C.GtkImage // in

	_cret = C.gtk_image_new_from_paintable(_arg1)

	var _image Image // out

	_image = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret.Native()))).(Image)

	return _image
}

// NewImageFromPixbuf constructs a class Image.
func NewImageFromPixbuf(pixbuf gdkpixbuf.Pixbuf) Image {
	var _arg1 *C.GdkPixbuf // out

	_arg1 = (*C.GdkPixbuf)(unsafe.Pointer(pixbuf.Native()))

	var _cret C.GtkImage // in

	_cret = C.gtk_image_new_from_pixbuf(_arg1)

	var _image Image // out

	_image = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret.Native()))).(Image)

	return _image
}

// NewImageFromResource constructs a class Image.
func NewImageFromResource(resourcePath string) Image {
	var _arg1 *C.char // out

	_arg1 = (*C.char)(C.CString(resourcePath))
	defer C.free(unsafe.Pointer(_arg1))

	var _cret C.GtkImage // in

	_cret = C.gtk_image_new_from_resource(_arg1)

	var _image Image // out

	_image = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret.Native()))).(Image)

	return _image
}

// Clear resets the image to be empty.
func (i image) Clear() {
	var _arg0 *C.GtkImage // out

	_arg0 = (*C.GtkImage)(unsafe.Pointer(i.Native()))

	C.gtk_image_clear(_arg0)
}

// GIcon gets the `GIcon` being displayed by the `GtkImage`.
//
// The storage type of the image must be GTK_IMAGE_EMPTY or GTK_IMAGE_GICON
// (see [method@Gtk.Image.get_storage_type]). The caller of this function
// does not own a reference to the returned `GIcon`.
func (i image) GIcon() gio.Icon {
	var _arg0 *C.GtkImage // out

	_arg0 = (*C.GtkImage)(unsafe.Pointer(i.Native()))

	var _cret *C.GIcon // in

	_cret = C.gtk_image_get_gicon(_arg0)

	var _icon gio.Icon // out

	_icon = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret.Native()))).(gio.Icon)

	return _icon
}

// IconName gets the icon name and size being displayed by the `GtkImage`.
//
// The storage type of the image must be GTK_IMAGE_EMPTY or
// GTK_IMAGE_ICON_NAME (see [method@Gtk.Image.get_storage_type]). The
// returned string is owned by the `GtkImage` and should not be freed.
func (i image) IconName() string {
	var _arg0 *C.GtkImage // out

	_arg0 = (*C.GtkImage)(unsafe.Pointer(i.Native()))

	var _cret *C.char // in

	_cret = C.gtk_image_get_icon_name(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

// IconSize gets the icon size used by the @image when rendering icons.
func (i image) IconSize() IconSize {
	var _arg0 *C.GtkImage // out

	_arg0 = (*C.GtkImage)(unsafe.Pointer(i.Native()))

	var _cret C.GtkIconSize // in

	_cret = C.gtk_image_get_icon_size(_arg0)

	var _iconSize IconSize // out

	_iconSize = IconSize(_cret)

	return _iconSize
}

// Paintable gets the image `GdkPaintable` being displayed by the
// `GtkImage`.
//
// The storage type of the image must be GTK_IMAGE_EMPTY or
// GTK_IMAGE_PAINTABLE (see [method@Gtk.Image.get_storage_type]). The caller
// of this function does not own a reference to the returned paintable.
func (i image) Paintable() gdk.Paintable {
	var _arg0 *C.GtkImage // out

	_arg0 = (*C.GtkImage)(unsafe.Pointer(i.Native()))

	var _cret *C.GdkPaintable // in

	_cret = C.gtk_image_get_paintable(_arg0)

	var _paintable gdk.Paintable // out

	_paintable = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret.Native()))).(gdk.Paintable)

	return _paintable
}

// PixelSize gets the pixel size used for named icons.
func (i image) PixelSize() int {
	var _arg0 *C.GtkImage // out

	_arg0 = (*C.GtkImage)(unsafe.Pointer(i.Native()))

	var _cret C.int // in

	_cret = C.gtk_image_get_pixel_size(_arg0)

	var _gint int // out

	_gint = (int)(_cret)

	return _gint
}

// StorageType gets the type of representation being used by the `GtkImage`
// to store image data.
//
// If the `GtkImage` has no image data, the return value will be
// GTK_IMAGE_EMPTY.
func (i image) StorageType() ImageType {
	var _arg0 *C.GtkImage // out

	_arg0 = (*C.GtkImage)(unsafe.Pointer(i.Native()))

	var _cret C.GtkImageType // in

	_cret = C.gtk_image_get_storage_type(_arg0)

	var _imageType ImageType // out

	_imageType = ImageType(_cret)

	return _imageType
}

// SetFromFile sets a `GtkImage` to show a file.
//
// See [ctor@Gtk.Image.new_from_file] for details.
func (i image) SetFromFile(filename string) {
	var _arg0 *C.GtkImage // out
	var _arg1 *C.char     // out

	_arg0 = (*C.GtkImage)(unsafe.Pointer(i.Native()))
	_arg1 = (*C.char)(C.CString(filename))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_image_set_from_file(_arg0, _arg1)
}

// SetFromGIcon sets a `GtkImage` to show a `GIcon`.
//
// See [ctor@Gtk.Image.new_from_gicon] for details.
func (i image) SetFromGIcon(icon gio.Icon) {
	var _arg0 *C.GtkImage // out
	var _arg1 *C.GIcon    // out

	_arg0 = (*C.GtkImage)(unsafe.Pointer(i.Native()))
	_arg1 = (*C.GIcon)(unsafe.Pointer(icon.Native()))

	C.gtk_image_set_from_gicon(_arg0, _arg1)
}

// SetFromIconName sets a `GtkImage` to show a named icon.
//
// See [ctor@Gtk.Image.new_from_icon_name] for details.
func (i image) SetFromIconName(iconName string) {
	var _arg0 *C.GtkImage // out
	var _arg1 *C.char     // out

	_arg0 = (*C.GtkImage)(unsafe.Pointer(i.Native()))
	_arg1 = (*C.char)(C.CString(iconName))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_image_set_from_icon_name(_arg0, _arg1)
}

// SetFromPaintable sets a `GtkImage` to show a `GdkPaintable`.
//
// See [ctor@Gtk.Image.new_from_paintable] for details.
func (i image) SetFromPaintable(paintable gdk.Paintable) {
	var _arg0 *C.GtkImage     // out
	var _arg1 *C.GdkPaintable // out

	_arg0 = (*C.GtkImage)(unsafe.Pointer(i.Native()))
	_arg1 = (*C.GdkPaintable)(unsafe.Pointer(paintable.Native()))

	C.gtk_image_set_from_paintable(_arg0, _arg1)
}

// SetFromPixbuf sets a `GtkImage` to show a `GdkPixbuf`.
//
// See [ctor@Gtk.Image.new_from_pixbuf] for details.
//
// Note: This is a helper for [method@Gtk.Image.set_from_paintable], and you
// can't get back the exact pixbuf once this is called, only a paintable.
func (i image) SetFromPixbuf(pixbuf gdkpixbuf.Pixbuf) {
	var _arg0 *C.GtkImage  // out
	var _arg1 *C.GdkPixbuf // out

	_arg0 = (*C.GtkImage)(unsafe.Pointer(i.Native()))
	_arg1 = (*C.GdkPixbuf)(unsafe.Pointer(pixbuf.Native()))

	C.gtk_image_set_from_pixbuf(_arg0, _arg1)
}

// SetFromResource sets a `GtkImage` to show a resource.
//
// See [ctor@Gtk.Image.new_from_resource] for details.
func (i image) SetFromResource(resourcePath string) {
	var _arg0 *C.GtkImage // out
	var _arg1 *C.char     // out

	_arg0 = (*C.GtkImage)(unsafe.Pointer(i.Native()))
	_arg1 = (*C.char)(C.CString(resourcePath))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_image_set_from_resource(_arg0, _arg1)
}

// SetIconSize suggests an icon size to the theme for named icons.
func (i image) SetIconSize(iconSize IconSize) {
	var _arg0 *C.GtkImage   // out
	var _arg1 C.GtkIconSize // out

	_arg0 = (*C.GtkImage)(unsafe.Pointer(i.Native()))
	_arg1 = (C.GtkIconSize)(iconSize)

	C.gtk_image_set_icon_size(_arg0, _arg1)
}

// SetPixelSize sets the pixel size to use for named icons.
//
// If the pixel size is set to a value != -1, it is used instead of the icon
// size set by [method@Gtk.Image.set_from_icon_name].
func (i image) SetPixelSize(pixelSize int) {
	var _arg0 *C.GtkImage // out
	var _arg1 C.int       // out

	_arg0 = (*C.GtkImage)(unsafe.Pointer(i.Native()))
	_arg1 = C.int(pixelSize)

	C.gtk_image_set_pixel_size(_arg0, _arg1)
}
