// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_window_controls_get_type()), F: marshalWindowControls},
	})
}

// WindowControls gtkWindowControls shows window frame controls, such as
// minimize, maximize and close buttons, and the window icon.
//
// WindowControls only displays start or end side of the controls (see
// WindowControls:side), so it's intended to be always used in pair with another
// WindowControls using the opposite side, for example:
//
//    <object class="GtkBox">
//      <child>
//        <object class="GtkWindowControls">
//          <property name="side">start</property>
//        </object>
//      </child>
//
//      ...
//
//      <child>
//        <object class="GtkWindowControls">
//          <property name="side">end</property>
//        </object>
//      </child>
//    </object>
//
// CSS nodes
//
//    windowcontrols
//    ├── [image.icon]
//    ├── [button.minimize]
//    ├── [button.maximize]
//    ╰── [button.close]
//
// A WindowControls' CSS node is called windowcontrols. It contains subnodes
// corresponding to each title button. Which of the title buttons exist and
// where they are placed exactly depends on the desktop environment and
// WindowControls:decoration-layout value.
//
// When WindowControls:empty is true, it gets the .empty style class.
//
//
// Accessibility
//
// GtkWindowHandle uses the GTK_ACCESSIBLE_ROLE_GROUP role.
type WindowControls interface {
	Widget
	Accessible
	Buildable
	ConstraintTarget

	// DecorationLayout gets the decoration layout set with
	// gtk_window_controls_set_decoration_layout().
	DecorationLayout(s WindowControls)
	// Empty gets whether the widget has any window buttons.
	Empty(s WindowControls) bool
	// Side gets the side set with gtk_window_controls_set_side().
	Side(s WindowControls)
	// SetDecorationLayout sets the decoration layout for the title buttons,
	// overriding the Settings:gtk-decoration-layout setting.
	//
	// The format of the string is button names, separated by commas. A colon
	// separates the buttons that should appear on the left from those on the
	// right. Recognized button names are minimize, maximize, close and icon
	// (the window icon).
	//
	// For example, “icon:minimize,maximize,close” specifies a icon on the left,
	// and minimize, maximize and close buttons on the right.
	//
	// If WindowControls:side value is @GTK_PACK_START, @self will display the
	// part before the colon, otherwise after that.
	SetDecorationLayout(s WindowControls, layout string)
	// SetSide sets the side for @self, determining which part of decoration
	// layout it uses.
	//
	// See gtk_window_controls_set_decoration_layout()
	SetSide(s WindowControls, side PackType)
}

// windowControls implements the WindowControls interface.
type windowControls struct {
	Widget
	Accessible
	Buildable
	ConstraintTarget
}

var _ WindowControls = (*windowControls)(nil)

// WrapWindowControls wraps a GObject to the right type. It is
// primarily used internally.
func WrapWindowControls(obj *externglib.Object) WindowControls {
	return WindowControls{
		Widget:           WrapWidget(obj),
		Accessible:       WrapAccessible(obj),
		Buildable:        WrapBuildable(obj),
		ConstraintTarget: WrapConstraintTarget(obj),
	}
}

func marshalWindowControls(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapWindowControls(obj), nil
}

// NewWindowControls constructs a class WindowControls.
func NewWindowControls(side PackType) {
	var arg1 C.GtkPackType

	arg1 = (C.GtkPackType)(side)

	C.gtk_window_controls_new(arg1)
}

// DecorationLayout gets the decoration layout set with
// gtk_window_controls_set_decoration_layout().
func (s windowControls) DecorationLayout(s WindowControls) {
	var arg0 *C.GtkWindowControls

	arg0 = (*C.GtkWindowControls)(unsafe.Pointer(s.Native()))

	C.gtk_window_controls_get_decoration_layout(arg0)
}

// Empty gets whether the widget has any window buttons.
func (s windowControls) Empty(s WindowControls) bool {
	var arg0 *C.GtkWindowControls

	arg0 = (*C.GtkWindowControls)(unsafe.Pointer(s.Native()))

	var cret C.gboolean
	var ok bool

	cret = C.gtk_window_controls_get_empty(arg0)

	if cret {
		ok = true
	}

	return ok
}

// Side gets the side set with gtk_window_controls_set_side().
func (s windowControls) Side(s WindowControls) {
	var arg0 *C.GtkWindowControls

	arg0 = (*C.GtkWindowControls)(unsafe.Pointer(s.Native()))

	C.gtk_window_controls_get_side(arg0)
}

// SetDecorationLayout sets the decoration layout for the title buttons,
// overriding the Settings:gtk-decoration-layout setting.
//
// The format of the string is button names, separated by commas. A colon
// separates the buttons that should appear on the left from those on the
// right. Recognized button names are minimize, maximize, close and icon
// (the window icon).
//
// For example, “icon:minimize,maximize,close” specifies a icon on the left,
// and minimize, maximize and close buttons on the right.
//
// If WindowControls:side value is @GTK_PACK_START, @self will display the
// part before the colon, otherwise after that.
func (s windowControls) SetDecorationLayout(s WindowControls, layout string) {
	var arg0 *C.GtkWindowControls
	var arg1 *C.char

	arg0 = (*C.GtkWindowControls)(unsafe.Pointer(s.Native()))
	arg1 = (*C.char)(C.CString(layout))
	defer C.free(unsafe.Pointer(arg1))

	C.gtk_window_controls_set_decoration_layout(arg0, arg1)
}

// SetSide sets the side for @self, determining which part of decoration
// layout it uses.
//
// See gtk_window_controls_set_decoration_layout()
func (s windowControls) SetSide(s WindowControls, side PackType) {
	var arg0 *C.GtkWindowControls
	var arg1 C.GtkPackType

	arg0 = (*C.GtkWindowControls)(unsafe.Pointer(s.Native()))
	arg1 = (C.GtkPackType)(side)

	C.gtk_window_controls_set_side(arg0, arg1)
}
