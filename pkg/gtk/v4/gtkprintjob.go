// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/cairo"
	"github.com/diamondburned/gotk4/pkg/core/box"
	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_print_job_get_type()), F: marshalPrintJob},
	})
}

// PrintJobCompleteFunc: the type of callback that is passed to
// gtk_print_job_send().
//
// It is called when the print job has been completely sent.
type PrintJobCompleteFunc func(printJob *PrintJobClass, userData interface{}, err error)

//export gotk4_PrintJobCompleteFunc
func gotk4_PrintJobCompleteFunc(arg0 *C.GtkPrintJob, arg1 C.gpointer, arg2 *C.GError) {
	v := box.Get(uintptr(arg1))
	if v == nil {
		panic(`callback not found`)
	}

	var printJob *PrintJobClass // out
	var userData interface{}    // out
	var err error               // out

	printJob = gextras.CastObject(
		externglib.Take(unsafe.Pointer(arg0))).(*PrintJobClass)
	userData = box.Get(uintptr(arg1))
	err = gerror.Take(unsafe.Pointer(arg2))

	fn := v.(PrintJobCompleteFunc)
	fn(printJob, userData, err)
}

// PrintJob: `GtkPrintJob` object represents a job that is sent to a printer.
//
// You only need to deal directly with print jobs if you use the non-portable
// [class@Gtk.PrintUnixDialog] API.
//
// Use [method@Gtk.PrintJob.get_surface] to obtain the cairo surface onto which
// the pages must be drawn. Use [method@Gtk.PrintJob.send] to send the finished
// job to the printer. If you don’t use cairo `GtkPrintJob` also supports
// printing of manually generated PostScript, via
// [method@Gtk.PrintJob.set_source_file].
type PrintJob interface {
	gextras.Objector

	// Collate gets whether this job is printed collated.
	Collate() bool
	// NUp gets the n-up setting for this job.
	NUp() uint
	// NUpLayout gets the n-up layout setting for this job.
	NUpLayout() NumberUpLayout
	// NumCopies gets the number of copies of this job.
	NumCopies() int
	// PageSet gets the `GtkPageSet` setting for this job.
	PageSet() PageSet
	// Pages gets the `GtkPrintPages` setting for this job.
	Pages() PrintPages
	// Printer gets the `GtkPrinter` of the print job.
	Printer() *PrinterClass
	// Reverse gets whether this job is printed reversed.
	Reverse() bool
	// Rotate gets whether the job is printed rotated.
	Rotate() bool
	// Scale gets the scale for this job.
	Scale() float64
	// Settings gets the `GtkPrintSettings` of the print job.
	Settings() *PrintSettingsClass
	// Status gets the status of the print job.
	Status() PrintStatus
	// Surface gets a cairo surface onto which the pages of the print job should
	// be rendered.
	Surface() (*cairo.Surface, error)
	// Title gets the job title.
	Title() string
	// TrackPrintStatus returns whether jobs will be tracked after printing.
	//
	// For details, see [method@Gtk.PrintJob.set_track_print_status].
	TrackPrintStatus() bool
	// SetCollate sets whether this job is printed collated.
	SetCollate(collate bool)
	// SetNUp sets the n-up setting for this job.
	SetNUp(nUp uint)
	// SetNumCopies sets the number of copies for this job.
	SetNumCopies(numCopies int)
	// SetReverse sets whether this job is printed reversed.
	SetReverse(reverse bool)
	// SetRotate sets whether this job is printed rotated.
	SetRotate(rotate bool)
	// SetScale sets the scale for this job.
	//
	// 1.0 means unscaled.
	SetScale(scale float64)
	// SetSourceFd: make the `GtkPrintJob` send an existing document to the
	// printing system.
	//
	// The file can be in any format understood by the platforms printing system
	// (typically PostScript, but on many platforms PDF may work too). See
	// [method@Gtk.Printer.accepts_pdf] and [method@Gtk.Printer.accepts_ps].
	//
	// This is similar to [method@Gtk.PrintJob.set_source_file], but takes
	// expects an open file descriptor for the file, instead of a filename.
	SetSourceFd(fd int) error
	// SetSourceFile: make the `GtkPrintJob` send an existing document to the
	// printing system.
	//
	// The file can be in any format understood by the platforms printing system
	// (typically PostScript, but on many platforms PDF may work too). See
	// [method@Gtk.Printer.accepts_pdf] and [method@Gtk.Printer.accepts_ps].
	SetSourceFile(filename string) error
	// SetTrackPrintStatus: if track_status is true, the print job will try to
	// continue report on the status of the print job in the printer queues and
	// printer.
	//
	// This can allow your application to show things like “out of paper”
	// issues, and when the print job actually reaches the printer.
	//
	// This function is often implemented using some form of polling, so it
	// should not be enabled unless needed.
	SetTrackPrintStatus(trackStatus bool)
}

// PrintJobClass implements the PrintJob interface.
type PrintJobClass struct {
	*externglib.Object
}

var _ PrintJob = (*PrintJobClass)(nil)

func wrapPrintJob(obj *externglib.Object) PrintJob {
	return &PrintJobClass{
		Object: obj,
	}
}

func marshalPrintJob(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapPrintJob(obj), nil
}

// NewPrintJob creates a new `GtkPrintJob`.
func NewPrintJob(title string, printer Printer, settings PrintSettings, pageSetup PageSetup) *PrintJobClass {
	var _arg1 *C.char             // out
	var _arg2 *C.GtkPrinter       // out
	var _arg3 *C.GtkPrintSettings // out
	var _arg4 *C.GtkPageSetup     // out
	var _cret *C.GtkPrintJob      // in

	_arg1 = (*C.char)(C.CString(title))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.GtkPrinter)(unsafe.Pointer((&printer).Native()))
	_arg3 = (*C.GtkPrintSettings)(unsafe.Pointer((&settings).Native()))
	_arg4 = (*C.GtkPageSetup)(unsafe.Pointer((&pageSetup).Native()))

	_cret = C.gtk_print_job_new(_arg1, _arg2, _arg3, _arg4)

	var _printJob *PrintJobClass // out

	_printJob = gextras.CastObject(
		externglib.AssumeOwnership(unsafe.Pointer(_cret))).(*PrintJobClass)

	return _printJob
}

// Collate gets whether this job is printed collated.
func (j *PrintJobClass) Collate() bool {
	var _arg0 *C.GtkPrintJob // out
	var _cret C.gboolean     // in

	_arg0 = (*C.GtkPrintJob)(unsafe.Pointer((&j).Native()))

	_cret = C.gtk_print_job_get_collate(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// NUp gets the n-up setting for this job.
func (j *PrintJobClass) NUp() uint {
	var _arg0 *C.GtkPrintJob // out
	var _cret C.guint        // in

	_arg0 = (*C.GtkPrintJob)(unsafe.Pointer((&j).Native()))

	_cret = C.gtk_print_job_get_n_up(_arg0)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// NUpLayout gets the n-up layout setting for this job.
func (j *PrintJobClass) NUpLayout() NumberUpLayout {
	var _arg0 *C.GtkPrintJob      // out
	var _cret C.GtkNumberUpLayout // in

	_arg0 = (*C.GtkPrintJob)(unsafe.Pointer((&j).Native()))

	_cret = C.gtk_print_job_get_n_up_layout(_arg0)

	var _numberUpLayout NumberUpLayout // out

	_numberUpLayout = (NumberUpLayout)(_cret)

	return _numberUpLayout
}

// NumCopies gets the number of copies of this job.
func (j *PrintJobClass) NumCopies() int {
	var _arg0 *C.GtkPrintJob // out
	var _cret C.int          // in

	_arg0 = (*C.GtkPrintJob)(unsafe.Pointer((&j).Native()))

	_cret = C.gtk_print_job_get_num_copies(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// PageSet gets the `GtkPageSet` setting for this job.
func (j *PrintJobClass) PageSet() PageSet {
	var _arg0 *C.GtkPrintJob // out
	var _cret C.GtkPageSet   // in

	_arg0 = (*C.GtkPrintJob)(unsafe.Pointer((&j).Native()))

	_cret = C.gtk_print_job_get_page_set(_arg0)

	var _pageSet PageSet // out

	_pageSet = (PageSet)(_cret)

	return _pageSet
}

// Pages gets the `GtkPrintPages` setting for this job.
func (j *PrintJobClass) Pages() PrintPages {
	var _arg0 *C.GtkPrintJob  // out
	var _cret C.GtkPrintPages // in

	_arg0 = (*C.GtkPrintJob)(unsafe.Pointer((&j).Native()))

	_cret = C.gtk_print_job_get_pages(_arg0)

	var _printPages PrintPages // out

	_printPages = (PrintPages)(_cret)

	return _printPages
}

// Printer gets the `GtkPrinter` of the print job.
func (j *PrintJobClass) Printer() *PrinterClass {
	var _arg0 *C.GtkPrintJob // out
	var _cret *C.GtkPrinter  // in

	_arg0 = (*C.GtkPrintJob)(unsafe.Pointer((&j).Native()))

	_cret = C.gtk_print_job_get_printer(_arg0)

	var _printer *PrinterClass // out

	_printer = gextras.CastObject(
		externglib.Take(unsafe.Pointer(_cret))).(*PrinterClass)

	return _printer
}

// Reverse gets whether this job is printed reversed.
func (j *PrintJobClass) Reverse() bool {
	var _arg0 *C.GtkPrintJob // out
	var _cret C.gboolean     // in

	_arg0 = (*C.GtkPrintJob)(unsafe.Pointer((&j).Native()))

	_cret = C.gtk_print_job_get_reverse(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Rotate gets whether the job is printed rotated.
func (j *PrintJobClass) Rotate() bool {
	var _arg0 *C.GtkPrintJob // out
	var _cret C.gboolean     // in

	_arg0 = (*C.GtkPrintJob)(unsafe.Pointer((&j).Native()))

	_cret = C.gtk_print_job_get_rotate(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Scale gets the scale for this job.
func (j *PrintJobClass) Scale() float64 {
	var _arg0 *C.GtkPrintJob // out
	var _cret C.double       // in

	_arg0 = (*C.GtkPrintJob)(unsafe.Pointer((&j).Native()))

	_cret = C.gtk_print_job_get_scale(_arg0)

	var _gdouble float64 // out

	_gdouble = float64(_cret)

	return _gdouble
}

// Settings gets the `GtkPrintSettings` of the print job.
func (j *PrintJobClass) Settings() *PrintSettingsClass {
	var _arg0 *C.GtkPrintJob      // out
	var _cret *C.GtkPrintSettings // in

	_arg0 = (*C.GtkPrintJob)(unsafe.Pointer((&j).Native()))

	_cret = C.gtk_print_job_get_settings(_arg0)

	var _printSettings *PrintSettingsClass // out

	_printSettings = gextras.CastObject(
		externglib.Take(unsafe.Pointer(_cret))).(*PrintSettingsClass)

	return _printSettings
}

// Status gets the status of the print job.
func (j *PrintJobClass) Status() PrintStatus {
	var _arg0 *C.GtkPrintJob   // out
	var _cret C.GtkPrintStatus // in

	_arg0 = (*C.GtkPrintJob)(unsafe.Pointer((&j).Native()))

	_cret = C.gtk_print_job_get_status(_arg0)

	var _printStatus PrintStatus // out

	_printStatus = (PrintStatus)(_cret)

	return _printStatus
}

// Surface gets a cairo surface onto which the pages of the print job should be
// rendered.
func (j *PrintJobClass) Surface() (*cairo.Surface, error) {
	var _arg0 *C.GtkPrintJob     // out
	var _cret *C.cairo_surface_t // in
	var _cerr *C.GError          // in

	_arg0 = (*C.GtkPrintJob)(unsafe.Pointer((&j).Native()))

	_cret = C.gtk_print_job_get_surface(_arg0, &_cerr)

	var _surface *cairo.Surface // out
	var _goerr error            // out

	_surface = (*cairo.Surface)(unsafe.Pointer(_cret))
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _surface, _goerr
}

// Title gets the job title.
func (j *PrintJobClass) Title() string {
	var _arg0 *C.GtkPrintJob // out
	var _cret *C.char        // in

	_arg0 = (*C.GtkPrintJob)(unsafe.Pointer((&j).Native()))

	_cret = C.gtk_print_job_get_title(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

// TrackPrintStatus returns whether jobs will be tracked after printing.
//
// For details, see [method@Gtk.PrintJob.set_track_print_status].
func (j *PrintJobClass) TrackPrintStatus() bool {
	var _arg0 *C.GtkPrintJob // out
	var _cret C.gboolean     // in

	_arg0 = (*C.GtkPrintJob)(unsafe.Pointer((&j).Native()))

	_cret = C.gtk_print_job_get_track_print_status(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetCollate sets whether this job is printed collated.
func (j *PrintJobClass) SetCollate(collate bool) {
	var _arg0 *C.GtkPrintJob // out
	var _arg1 C.gboolean     // out

	_arg0 = (*C.GtkPrintJob)(unsafe.Pointer((&j).Native()))
	if collate {
		_arg1 = C.TRUE
	}

	C.gtk_print_job_set_collate(_arg0, _arg1)
}

// SetNUp sets the n-up setting for this job.
func (j *PrintJobClass) SetNUp(nUp uint) {
	var _arg0 *C.GtkPrintJob // out
	var _arg1 C.guint        // out

	_arg0 = (*C.GtkPrintJob)(unsafe.Pointer((&j).Native()))
	_arg1 = C.guint(nUp)

	C.gtk_print_job_set_n_up(_arg0, _arg1)
}

// SetNumCopies sets the number of copies for this job.
func (j *PrintJobClass) SetNumCopies(numCopies int) {
	var _arg0 *C.GtkPrintJob // out
	var _arg1 C.int          // out

	_arg0 = (*C.GtkPrintJob)(unsafe.Pointer((&j).Native()))
	_arg1 = C.int(numCopies)

	C.gtk_print_job_set_num_copies(_arg0, _arg1)
}

// SetReverse sets whether this job is printed reversed.
func (j *PrintJobClass) SetReverse(reverse bool) {
	var _arg0 *C.GtkPrintJob // out
	var _arg1 C.gboolean     // out

	_arg0 = (*C.GtkPrintJob)(unsafe.Pointer((&j).Native()))
	if reverse {
		_arg1 = C.TRUE
	}

	C.gtk_print_job_set_reverse(_arg0, _arg1)
}

// SetRotate sets whether this job is printed rotated.
func (j *PrintJobClass) SetRotate(rotate bool) {
	var _arg0 *C.GtkPrintJob // out
	var _arg1 C.gboolean     // out

	_arg0 = (*C.GtkPrintJob)(unsafe.Pointer((&j).Native()))
	if rotate {
		_arg1 = C.TRUE
	}

	C.gtk_print_job_set_rotate(_arg0, _arg1)
}

// SetScale sets the scale for this job.
//
// 1.0 means unscaled.
func (j *PrintJobClass) SetScale(scale float64) {
	var _arg0 *C.GtkPrintJob // out
	var _arg1 C.double       // out

	_arg0 = (*C.GtkPrintJob)(unsafe.Pointer((&j).Native()))
	_arg1 = C.double(scale)

	C.gtk_print_job_set_scale(_arg0, _arg1)
}

// SetSourceFd: make the `GtkPrintJob` send an existing document to the printing
// system.
//
// The file can be in any format understood by the platforms printing system
// (typically PostScript, but on many platforms PDF may work too). See
// [method@Gtk.Printer.accepts_pdf] and [method@Gtk.Printer.accepts_ps].
//
// This is similar to [method@Gtk.PrintJob.set_source_file], but takes expects
// an open file descriptor for the file, instead of a filename.
func (j *PrintJobClass) SetSourceFd(fd int) error {
	var _arg0 *C.GtkPrintJob // out
	var _arg1 C.int          // out
	var _cerr *C.GError      // in

	_arg0 = (*C.GtkPrintJob)(unsafe.Pointer((&j).Native()))
	_arg1 = C.int(fd)

	C.gtk_print_job_set_source_fd(_arg0, _arg1, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

// SetSourceFile: make the `GtkPrintJob` send an existing document to the
// printing system.
//
// The file can be in any format understood by the platforms printing system
// (typically PostScript, but on many platforms PDF may work too). See
// [method@Gtk.Printer.accepts_pdf] and [method@Gtk.Printer.accepts_ps].
func (j *PrintJobClass) SetSourceFile(filename string) error {
	var _arg0 *C.GtkPrintJob // out
	var _arg1 *C.char        // out
	var _cerr *C.GError      // in

	_arg0 = (*C.GtkPrintJob)(unsafe.Pointer((&j).Native()))
	_arg1 = (*C.char)(C.CString(filename))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_print_job_set_source_file(_arg0, _arg1, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

// SetTrackPrintStatus: if track_status is true, the print job will try to
// continue report on the status of the print job in the printer queues and
// printer.
//
// This can allow your application to show things like “out of paper” issues,
// and when the print job actually reaches the printer.
//
// This function is often implemented using some form of polling, so it should
// not be enabled unless needed.
func (j *PrintJobClass) SetTrackPrintStatus(trackStatus bool) {
	var _arg0 *C.GtkPrintJob // out
	var _arg1 C.gboolean     // out

	_arg0 = (*C.GtkPrintJob)(unsafe.Pointer((&j).Native()))
	if trackStatus {
		_arg1 = C.TRUE
	}

	C.gtk_print_job_set_track_print_status(_arg0, _arg1)
}
