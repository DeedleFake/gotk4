// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <stdbool.h>
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_text_child_anchor_get_type()), F: marshalTextChildAnchor},
	})
}

// TextChildAnchor: a `GtkTextChildAnchor` is a spot in a `GtkTextBuffer` where
// child widgets can be “anchored”.
//
// The anchor can have multiple widgets anchored, to allow for multiple views.
type TextChildAnchor interface {
	gextras.Objector

	// Deleted determines whether a child anchor has been deleted from the
	// buffer.
	//
	// Keep in mind that the child anchor will be unreferenced when removed from
	// the buffer, so you need to hold your own reference (with g_object_ref())
	// if you plan to use this function — otherwise all deleted child anchors
	// will also be finalized.
	Deleted() bool
	// Widgets gets a list of all widgets anchored at this child anchor.
	//
	// The order in which the widgets are returned is not defined.
	Widgets() (outLen uint, widgets []Widget)
}

// textChildAnchor implements the TextChildAnchor interface.
type textChildAnchor struct {
	gextras.Objector
}

var _ TextChildAnchor = (*textChildAnchor)(nil)

// WrapTextChildAnchor wraps a GObject to the right type. It is
// primarily used internally.
func WrapTextChildAnchor(obj *externglib.Object) TextChildAnchor {
	return TextChildAnchor{
		Objector: obj,
	}
}

func marshalTextChildAnchor(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapTextChildAnchor(obj), nil
}

// NewTextChildAnchor constructs a class TextChildAnchor.
func NewTextChildAnchor() TextChildAnchor {
	ret := C.gtk_text_child_anchor_new()

	var ret0 TextChildAnchor

	ret0 = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(ret.Native()))).(TextChildAnchor)

	return ret0
}

// Deleted determines whether a child anchor has been deleted from the
// buffer.
//
// Keep in mind that the child anchor will be unreferenced when removed from
// the buffer, so you need to hold your own reference (with g_object_ref())
// if you plan to use this function — otherwise all deleted child anchors
// will also be finalized.
func (a textChildAnchor) Deleted() bool {
	var arg0 *C.GtkTextChildAnchor

	arg0 = (*C.GtkTextChildAnchor)(a.Native())

	ret := C.gtk_text_child_anchor_get_deleted(arg0)

	var ret0 bool

	ret0 = C.bool(ret) != 0

	return ret0
}

// Widgets gets a list of all widgets anchored at this child anchor.
//
// The order in which the widgets are returned is not defined.
func (a textChildAnchor) Widgets() (outLen uint, widgets []Widget) {
	var arg0 *C.GtkTextChildAnchor
	var arg1 *C.guint // out

	arg0 = (*C.GtkTextChildAnchor)(a.Native())

	ret := C.gtk_text_child_anchor_get_widgets(arg0, &arg1)

	var ret0 uint
	var ret1 []Widget

	ret0 = uint(arg1)

	{
		ret1 = make([]Widget, arg1)
		for i := 0; i < uintptr(arg1); i++ {
			src := (*C.GtkWidget)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + i))
			ret1[i] = gextras.CastObject(externglib.Take(unsafe.Pointer(src.Native()))).(Widget)
		}
	}

	return ret0, ret1
}
