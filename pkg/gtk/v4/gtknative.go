// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/gdk/v4"
	"github.com/diamondburned/gotk4/pkg/gsk/v4"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_native_get_type()), F: marshalNativeSurfacer},
	})
}

// NativeSurfacer describes NativeSurface's methods.
type NativeSurfacer interface {
	// Renderer returns the renderer that is used for this GtkNative.
	Renderer() *gsk.Renderer
	// Surface returns the surface of this GtkNative.
	Surface() *gdk.Surface
	// SurfaceTransform retrieves the surface transform of self.
	SurfaceTransform() (x float64, y float64)
	// Realize realizes a GtkNative.
	Realize()
	// Unrealize unrealizes a GtkNative.
	Unrealize()
}

// NativeSurface: GtkNative is the interface implemented by all widgets that
// have their own GdkSurface.
//
// The obvious example of a GtkNative is GtkWindow.
//
// Every widget that is not itself a GtkNative is contained in one, and you can
// get it with gtk.Widget.GetNative().
//
// To get the surface of a GtkNative, use gtk.Native.GetSurface(). It is also
// possible to find the GtkNative to which a surface belongs, with
// gtk.Native().GetForSurface.
//
// In addition to a gdk.Surface, a GtkNative also provides a gsk.Renderer for
// rendering on that surface. To get the renderer, use gtk.Native.GetRenderer().
//
// This type has been renamed from Native.
type NativeSurface struct {
	Widget
}

var (
	_ NativeSurfacer  = (*NativeSurface)(nil)
	_ gextras.Nativer = (*NativeSurface)(nil)
)

func wrapNativeSurface(obj *externglib.Object) *NativeSurface {
	return &NativeSurface{
		Widget: Widget{
			InitiallyUnowned: externglib.InitiallyUnowned{
				Object: obj,
			},
			Accessible: Accessible{
				Object: obj,
			},
			Buildable: Buildable{
				Object: obj,
			},
			ConstraintTarget: ConstraintTarget{
				Object: obj,
			},
		},
	}
}

func marshalNativeSurfacer(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapNativeSurface(obj), nil
}

// Renderer returns the renderer that is used for this GtkNative.
func (self *NativeSurface) Renderer() *gsk.Renderer {
	var _arg0 *C.GtkNative   // out
	var _cret *C.GskRenderer // in

	_arg0 = (*C.GtkNative)(unsafe.Pointer(self.Native()))

	_cret = C.gtk_native_get_renderer(_arg0)

	var _renderer *gsk.Renderer // out

	{
		obj := externglib.Take(unsafe.Pointer(_cret))
		_renderer = &gsk.Renderer{
			Object: obj,
		}
	}

	return _renderer
}

// Surface returns the surface of this GtkNative.
func (self *NativeSurface) Surface() *gdk.Surface {
	var _arg0 *C.GtkNative  // out
	var _cret *C.GdkSurface // in

	_arg0 = (*C.GtkNative)(unsafe.Pointer(self.Native()))

	_cret = C.gtk_native_get_surface(_arg0)

	var _surface *gdk.Surface // out

	{
		obj := externglib.Take(unsafe.Pointer(_cret))
		_surface = &gdk.Surface{
			Object: obj,
		}
	}

	return _surface
}

// SurfaceTransform retrieves the surface transform of self.
//
// This is the translation from self's surface coordinates into self's widget
// coordinates.
func (self *NativeSurface) SurfaceTransform() (x float64, y float64) {
	var _arg0 *C.GtkNative // out
	var _arg1 C.double     // in
	var _arg2 C.double     // in

	_arg0 = (*C.GtkNative)(unsafe.Pointer(self.Native()))

	C.gtk_native_get_surface_transform(_arg0, &_arg1, &_arg2)

	var _x float64 // out
	var _y float64 // out

	_x = float64(_arg1)
	_y = float64(_arg2)

	return _x, _y
}

// Realize realizes a GtkNative.
//
// This should only be used by subclasses.
func (self *NativeSurface) Realize() {
	var _arg0 *C.GtkNative // out

	_arg0 = (*C.GtkNative)(unsafe.Pointer(self.Native()))

	C.gtk_native_realize(_arg0)
}

// Unrealize unrealizes a GtkNative.
//
// This should only be used by subclasses.
func (self *NativeSurface) Unrealize() {
	var _arg0 *C.GtkNative // out

	_arg0 = (*C.GtkNative)(unsafe.Pointer(self.Native()))

	C.gtk_native_unrealize(_arg0)
}

// NativeSurfaceGetForSurface finds the GtkNative associated with the surface.
func NativeSurfaceGetForSurface(surface gdk.Surfacer) *NativeSurface {
	var _arg1 *C.GdkSurface // out
	var _cret *C.GtkNative  // in

	_arg1 = (*C.GdkSurface)(unsafe.Pointer((surface).(gextras.Nativer).Native()))

	_cret = C.gtk_native_get_for_surface(_arg1)

	var _native *NativeSurface // out

	_native = wrapNativeSurface(externglib.Take(unsafe.Pointer(_cret)))

	return _native
}
