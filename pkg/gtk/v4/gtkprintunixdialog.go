// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/core/gextras"
	"github.com/diamondburned/gotk4/pkg/gdk/v4"
	"github.com/diamondburned/gotk4/pkg/gsk/v4"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_print_unix_dialog_get_type()), F: marshalPrintUnixDialog},
	})
}

// PrintUnixDialog: `GtkPrintUnixDialog` implements a print dialog for platforms
// which don’t provide a native print dialog, like Unix.
//
// !An example GtkPrintUnixDialog (printdialog.png)
//
// It can be used very much like any other GTK dialog, at the cost of the
// portability offered by the high-level printing API with
// [class@Gtk.PrintOperation].
//
// In order to print something with `GtkPrintUnixDialog`, you need to use
// [method@Gtk.PrintUnixDialog.get_selected_printer] to obtain a
// [class@Gtk.Printer] object and use it to construct a [class@Gtk.PrintJob]
// using [ctor@Gtk.PrintJob.new].
//
// `GtkPrintUnixDialog` uses the following response values:
//
// - GTK_RESPONSE_OK: for the “Print” button - GTK_RESPONSE_APPLY: for the
// “Preview” button - GTK_RESPONSE_CANCEL: for the “Cancel” button
//
//
// GtkPrintUnixDialog as GtkBuildable
//
// The `GtkPrintUnixDialog` implementation of the `GtkBuildable` interface
// exposes its @notebook internal children with the name “notebook”.
//
// An example of a `GtkPrintUnixDialog` UI definition fragment:
//
// “`xml <object class="GtkPrintUnixDialog" id="dialog1"> <child
// internal-child="notebook"> <object class="GtkNotebook" id="notebook"> <child>
// <object type="GtkNotebookPage"> <property name="tab_expand">False</property>
// <property name="tab_fill">False</property> <property name="tab"> <object
// class="GtkLabel" id="tablabel"> <property name="label">Tab label</property>
// </object> </property> <property name="child"> <object class="GtkLabel"
// id="tabcontent"> <property name="label">Content on notebook tab</property>
// </object> </property> </object> </child> </object> </child> </object> “`
//
//
// CSS nodes
//
// `GtkPrintUnixDialog` has a single CSS node with name window. The style
// classes dialog and print are added.
type PrintUnixDialog interface {
	Dialog

	// AddCustomTabPrintUnixDialog:
	AddCustomTabPrintUnixDialog(child Widget, tabLabel Widget)
	// CurrentPage:
	CurrentPage() int
	// EmbedPageSetup:
	EmbedPageSetup() bool
	// HasSelection:
	HasSelection() bool
	// ManualCapabilities:
	ManualCapabilities() PrintCapabilities
	// PageSetup:
	PageSetup() PageSetup
	// PageSetupSet:
	PageSetupSet() bool
	// SelectedPrinter:
	SelectedPrinter() Printer
	// Settings:
	Settings() PrintSettings
	// SupportSelection:
	SupportSelection() bool
	// SetCurrentPagePrintUnixDialog:
	SetCurrentPagePrintUnixDialog(currentPage int)
	// SetEmbedPageSetupPrintUnixDialog:
	SetEmbedPageSetupPrintUnixDialog(embed bool)
	// SetHasSelectionPrintUnixDialog:
	SetHasSelectionPrintUnixDialog(hasSelection bool)
	// SetManualCapabilitiesPrintUnixDialog:
	SetManualCapabilitiesPrintUnixDialog(capabilities PrintCapabilities)
	// SetPageSetupPrintUnixDialog:
	SetPageSetupPrintUnixDialog(pageSetup PageSetup)
	// SetSettingsPrintUnixDialog:
	SetSettingsPrintUnixDialog(settings PrintSettings)
	// SetSupportSelectionPrintUnixDialog:
	SetSupportSelectionPrintUnixDialog(supportSelection bool)
}

// printUnixDialog implements the PrintUnixDialog class.
type printUnixDialog struct {
	Dialog
}

// WrapPrintUnixDialog wraps a GObject to the right type. It is
// primarily used internally.
func WrapPrintUnixDialog(obj *externglib.Object) PrintUnixDialog {
	return printUnixDialog{
		Dialog: WrapDialog(obj),
	}
}

func marshalPrintUnixDialog(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapPrintUnixDialog(obj), nil
}

// NewPrintUnixDialog:
func NewPrintUnixDialog(title string, parent Window) PrintUnixDialog {
	var _arg1 *C.char      // out
	var _arg2 *C.GtkWindow // out
	var _cret *C.GtkWidget // in

	_arg1 = (*C.char)(C.CString(title))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.GtkWindow)(unsafe.Pointer(parent.Native()))

	_cret = C.gtk_print_unix_dialog_new(_arg1, _arg2)

	var _printUnixDialog PrintUnixDialog // out

	_printUnixDialog = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(PrintUnixDialog)

	return _printUnixDialog
}

func (d printUnixDialog) AddCustomTabPrintUnixDialog(child Widget, tabLabel Widget) {
	var _arg0 *C.GtkPrintUnixDialog // out
	var _arg1 *C.GtkWidget          // out
	var _arg2 *C.GtkWidget          // out

	_arg0 = (*C.GtkPrintUnixDialog)(unsafe.Pointer(d.Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(child.Native()))
	_arg2 = (*C.GtkWidget)(unsafe.Pointer(tabLabel.Native()))

	C.gtk_print_unix_dialog_add_custom_tab(_arg0, _arg1, _arg2)
}

func (d printUnixDialog) CurrentPage() int {
	var _arg0 *C.GtkPrintUnixDialog // out
	var _cret C.int                 // in

	_arg0 = (*C.GtkPrintUnixDialog)(unsafe.Pointer(d.Native()))

	_cret = C.gtk_print_unix_dialog_get_current_page(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (d printUnixDialog) EmbedPageSetup() bool {
	var _arg0 *C.GtkPrintUnixDialog // out
	var _cret C.gboolean            // in

	_arg0 = (*C.GtkPrintUnixDialog)(unsafe.Pointer(d.Native()))

	_cret = C.gtk_print_unix_dialog_get_embed_page_setup(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (d printUnixDialog) HasSelection() bool {
	var _arg0 *C.GtkPrintUnixDialog // out
	var _cret C.gboolean            // in

	_arg0 = (*C.GtkPrintUnixDialog)(unsafe.Pointer(d.Native()))

	_cret = C.gtk_print_unix_dialog_get_has_selection(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (d printUnixDialog) ManualCapabilities() PrintCapabilities {
	var _arg0 *C.GtkPrintUnixDialog  // out
	var _cret C.GtkPrintCapabilities // in

	_arg0 = (*C.GtkPrintUnixDialog)(unsafe.Pointer(d.Native()))

	_cret = C.gtk_print_unix_dialog_get_manual_capabilities(_arg0)

	var _printCapabilities PrintCapabilities // out

	_printCapabilities = PrintCapabilities(_cret)

	return _printCapabilities
}

func (d printUnixDialog) PageSetup() PageSetup {
	var _arg0 *C.GtkPrintUnixDialog // out
	var _cret *C.GtkPageSetup       // in

	_arg0 = (*C.GtkPrintUnixDialog)(unsafe.Pointer(d.Native()))

	_cret = C.gtk_print_unix_dialog_get_page_setup(_arg0)

	var _pageSetup PageSetup // out

	_pageSetup = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(PageSetup)

	return _pageSetup
}

func (d printUnixDialog) PageSetupSet() bool {
	var _arg0 *C.GtkPrintUnixDialog // out
	var _cret C.gboolean            // in

	_arg0 = (*C.GtkPrintUnixDialog)(unsafe.Pointer(d.Native()))

	_cret = C.gtk_print_unix_dialog_get_page_setup_set(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (d printUnixDialog) SelectedPrinter() Printer {
	var _arg0 *C.GtkPrintUnixDialog // out
	var _cret *C.GtkPrinter         // in

	_arg0 = (*C.GtkPrintUnixDialog)(unsafe.Pointer(d.Native()))

	_cret = C.gtk_print_unix_dialog_get_selected_printer(_arg0)

	var _printer Printer // out

	_printer = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Printer)

	return _printer
}

func (d printUnixDialog) Settings() PrintSettings {
	var _arg0 *C.GtkPrintUnixDialog // out
	var _cret *C.GtkPrintSettings   // in

	_arg0 = (*C.GtkPrintUnixDialog)(unsafe.Pointer(d.Native()))

	_cret = C.gtk_print_unix_dialog_get_settings(_arg0)

	var _printSettings PrintSettings // out

	_printSettings = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(PrintSettings)

	return _printSettings
}

func (d printUnixDialog) SupportSelection() bool {
	var _arg0 *C.GtkPrintUnixDialog // out
	var _cret C.gboolean            // in

	_arg0 = (*C.GtkPrintUnixDialog)(unsafe.Pointer(d.Native()))

	_cret = C.gtk_print_unix_dialog_get_support_selection(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (d printUnixDialog) SetCurrentPagePrintUnixDialog(currentPage int) {
	var _arg0 *C.GtkPrintUnixDialog // out
	var _arg1 C.int                 // out

	_arg0 = (*C.GtkPrintUnixDialog)(unsafe.Pointer(d.Native()))
	_arg1 = C.int(currentPage)

	C.gtk_print_unix_dialog_set_current_page(_arg0, _arg1)
}

func (d printUnixDialog) SetEmbedPageSetupPrintUnixDialog(embed bool) {
	var _arg0 *C.GtkPrintUnixDialog // out
	var _arg1 C.gboolean            // out

	_arg0 = (*C.GtkPrintUnixDialog)(unsafe.Pointer(d.Native()))
	if embed {
		_arg1 = C.TRUE
	}

	C.gtk_print_unix_dialog_set_embed_page_setup(_arg0, _arg1)
}

func (d printUnixDialog) SetHasSelectionPrintUnixDialog(hasSelection bool) {
	var _arg0 *C.GtkPrintUnixDialog // out
	var _arg1 C.gboolean            // out

	_arg0 = (*C.GtkPrintUnixDialog)(unsafe.Pointer(d.Native()))
	if hasSelection {
		_arg1 = C.TRUE
	}

	C.gtk_print_unix_dialog_set_has_selection(_arg0, _arg1)
}

func (d printUnixDialog) SetManualCapabilitiesPrintUnixDialog(capabilities PrintCapabilities) {
	var _arg0 *C.GtkPrintUnixDialog  // out
	var _arg1 C.GtkPrintCapabilities // out

	_arg0 = (*C.GtkPrintUnixDialog)(unsafe.Pointer(d.Native()))
	_arg1 = C.GtkPrintCapabilities(capabilities)

	C.gtk_print_unix_dialog_set_manual_capabilities(_arg0, _arg1)
}

func (d printUnixDialog) SetPageSetupPrintUnixDialog(pageSetup PageSetup) {
	var _arg0 *C.GtkPrintUnixDialog // out
	var _arg1 *C.GtkPageSetup       // out

	_arg0 = (*C.GtkPrintUnixDialog)(unsafe.Pointer(d.Native()))
	_arg1 = (*C.GtkPageSetup)(unsafe.Pointer(pageSetup.Native()))

	C.gtk_print_unix_dialog_set_page_setup(_arg0, _arg1)
}

func (d printUnixDialog) SetSettingsPrintUnixDialog(settings PrintSettings) {
	var _arg0 *C.GtkPrintUnixDialog // out
	var _arg1 *C.GtkPrintSettings   // out

	_arg0 = (*C.GtkPrintUnixDialog)(unsafe.Pointer(d.Native()))
	_arg1 = (*C.GtkPrintSettings)(unsafe.Pointer(settings.Native()))

	C.gtk_print_unix_dialog_set_settings(_arg0, _arg1)
}

func (d printUnixDialog) SetSupportSelectionPrintUnixDialog(supportSelection bool) {
	var _arg0 *C.GtkPrintUnixDialog // out
	var _arg1 C.gboolean            // out

	_arg0 = (*C.GtkPrintUnixDialog)(unsafe.Pointer(d.Native()))
	if supportSelection {
		_arg1 = C.TRUE
	}

	C.gtk_print_unix_dialog_set_support_selection(_arg0, _arg1)
}

func (s printUnixDialog) Display() gdk.Display {
	return WrapRoot(gextras.InternObject(s)).Display()
}

func (s printUnixDialog) Focus() Widget {
	return WrapRoot(gextras.InternObject(s)).Focus()
}

func (s printUnixDialog) SetFocus(focus Widget) {
	WrapRoot(gextras.InternObject(s)).SetFocus(focus)
}

func (s printUnixDialog) Renderer() gsk.Renderer {
	return WrapNative(gextras.InternObject(s)).Renderer()
}

func (s printUnixDialog) Surface() gdk.Surface {
	return WrapNative(gextras.InternObject(s)).Surface()
}

func (s printUnixDialog) SurfaceTransform() (x float64, y float64) {
	return WrapNative(gextras.InternObject(s)).SurfaceTransform()
}

func (s printUnixDialog) Realize() {
	WrapNative(gextras.InternObject(s)).Realize()
}

func (s printUnixDialog) Unrealize() {
	WrapNative(gextras.InternObject(s)).Unrealize()
}

func (s printUnixDialog) AccessibleRole() AccessibleRole {
	return WrapAccessible(gextras.InternObject(s)).AccessibleRole()
}

func (s printUnixDialog) ResetProperty(property AccessibleProperty) {
	WrapAccessible(gextras.InternObject(s)).ResetProperty(property)
}

func (s printUnixDialog) ResetRelation(relation AccessibleRelation) {
	WrapAccessible(gextras.InternObject(s)).ResetRelation(relation)
}

func (s printUnixDialog) ResetState(state AccessibleState) {
	WrapAccessible(gextras.InternObject(s)).ResetState(state)
}

func (s printUnixDialog) UpdatePropertyValue(properties []AccessibleProperty, values []externglib.Value) {
	WrapAccessible(gextras.InternObject(s)).UpdatePropertyValue(properties, values)
}

func (s printUnixDialog) UpdateRelationValue(relations []AccessibleRelation, values []externglib.Value) {
	WrapAccessible(gextras.InternObject(s)).UpdateRelationValue(relations, values)
}

func (s printUnixDialog) UpdateStateValue(states []AccessibleState, values []externglib.Value) {
	WrapAccessible(gextras.InternObject(s)).UpdateStateValue(states, values)
}

func (b printUnixDialog) BuildableID() string {
	return WrapBuildable(gextras.InternObject(b)).BuildableID()
}
