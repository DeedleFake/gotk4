// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/gio/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4 glib-2.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_video_get_type()), F: marshalVideo},
	})
}

// Video: `GtkVideo` is a widget to show a `GtkMediaStream` with media controls.
//
// !An example GtkVideo (video.png)
//
// The controls are available separately as [class@Gtk.MediaControls]. If you
// just want to display a video without controls, you can treat it like any
// other paintable and for example put it into a [class@Gtk.Picture].
//
// `GtkVideo` aims to cover use cases such as previews, embedded animations,
// etc. It supports autoplay, looping, and simple media controls. It does not
// have support for video overlays, multichannel audio, device selection, or
// input. If you are writing a full-fledged video player, you may want to use
// the [class@Gdk.Paintable] API and a media framework such as Gstreamer
// directly.
type Video interface {
	Widget
	Accessible
	Buildable
	ConstraintTarget

	// Autoplay returns true if videos have been set to loop.
	Autoplay() bool
	// Loop returns true if videos have been set to loop.
	Loop() bool
	// SetAutoplay sets whether @self automatically starts playback when it
	// becomes visible or when a new file gets loaded.
	SetAutoplay(autoplay bool)
	// SetFile makes @self play the given @file.
	SetFile(file gio.File)
	// SetFilename makes @self play the given @filename.
	//
	// This is a utility function that calls gtk_video_set_file(),
	SetFilename(filename string)
	// SetLoop sets whether new files loaded by @self should be set to loop.
	SetLoop(loop bool)
	// SetMediaStream sets the media stream to be played back.
	//
	// @self will take full control of managing the media stream. If you want to
	// manage a media stream yourself, consider using a [class@Gtk.Picture] for
	// display.
	//
	// If you want to display a file, consider using [method@Gtk.Video.set_file]
	// instead.
	SetMediaStream(stream MediaStream)
	// SetResource makes @self play the resource at the given @resource_path.
	//
	// This is a utility function that calls [method@Gtk.Video.set_file].
	SetResource(resourcePath string)
}

// video implements the Video interface.
type video struct {
	Widget
	Accessible
	Buildable
	ConstraintTarget
}

var _ Video = (*video)(nil)

// WrapVideo wraps a GObject to the right type. It is
// primarily used internally.
func WrapVideo(obj *externglib.Object) Video {
	return Video{
		Widget:           WrapWidget(obj),
		Accessible:       WrapAccessible(obj),
		Buildable:        WrapBuildable(obj),
		ConstraintTarget: WrapConstraintTarget(obj),
	}
}

func marshalVideo(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapVideo(obj), nil
}

// Autoplay returns true if videos have been set to loop.
func (s video) Autoplay() bool {
	var _arg0 *C.GtkVideo // out

	_arg0 = (*C.GtkVideo)(unsafe.Pointer(s.Native()))

	var _cret C.gboolean // in

	_cret = C.gtk_video_get_autoplay(_arg0)

	var _ok bool // out

	if _cret {
		_ok = true
	}

	return _ok
}

// Loop returns true if videos have been set to loop.
func (s video) Loop() bool {
	var _arg0 *C.GtkVideo // out

	_arg0 = (*C.GtkVideo)(unsafe.Pointer(s.Native()))

	var _cret C.gboolean // in

	_cret = C.gtk_video_get_loop(_arg0)

	var _ok bool // out

	if _cret {
		_ok = true
	}

	return _ok
}

// SetAutoplay sets whether @self automatically starts playback when it
// becomes visible or when a new file gets loaded.
func (s video) SetAutoplay(autoplay bool) {
	var _arg0 *C.GtkVideo // out
	var _arg1 C.gboolean  // out

	_arg0 = (*C.GtkVideo)(unsafe.Pointer(s.Native()))
	if autoplay {
		_arg1 = C.gboolean(1)
	}

	C.gtk_video_set_autoplay(_arg0, _arg1)
}

// SetFile makes @self play the given @file.
func (s video) SetFile(file gio.File) {
	var _arg0 *C.GtkVideo // out
	var _arg1 *C.GFile    // out

	_arg0 = (*C.GtkVideo)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GFile)(unsafe.Pointer(file.Native()))

	C.gtk_video_set_file(_arg0, _arg1)
}

// SetFilename makes @self play the given @filename.
//
// This is a utility function that calls gtk_video_set_file(),
func (s video) SetFilename(filename string) {
	var _arg0 *C.GtkVideo // out
	var _arg1 *C.char     // out

	_arg0 = (*C.GtkVideo)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.char)(C.CString(filename))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_video_set_filename(_arg0, _arg1)
}

// SetLoop sets whether new files loaded by @self should be set to loop.
func (s video) SetLoop(loop bool) {
	var _arg0 *C.GtkVideo // out
	var _arg1 C.gboolean  // out

	_arg0 = (*C.GtkVideo)(unsafe.Pointer(s.Native()))
	if loop {
		_arg1 = C.gboolean(1)
	}

	C.gtk_video_set_loop(_arg0, _arg1)
}

// SetMediaStream sets the media stream to be played back.
//
// @self will take full control of managing the media stream. If you want to
// manage a media stream yourself, consider using a [class@Gtk.Picture] for
// display.
//
// If you want to display a file, consider using [method@Gtk.Video.set_file]
// instead.
func (s video) SetMediaStream(stream MediaStream) {
	var _arg0 *C.GtkVideo       // out
	var _arg1 *C.GtkMediaStream // out

	_arg0 = (*C.GtkVideo)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GtkMediaStream)(unsafe.Pointer(stream.Native()))

	C.gtk_video_set_media_stream(_arg0, _arg1)
}

// SetResource makes @self play the resource at the given @resource_path.
//
// This is a utility function that calls [method@Gtk.Video.set_file].
func (s video) SetResource(resourcePath string) {
	var _arg0 *C.GtkVideo // out
	var _arg1 *C.char     // out

	_arg0 = (*C.GtkVideo)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.char)(C.CString(resourcePath))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_video_set_resource(_arg0, _arg1)
}
