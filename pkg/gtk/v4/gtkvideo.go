// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <stdbool.h>
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_video_get_type()), F: marshalVideo},
	})
}

// Video: gtkVideo is a widget to show a MediaStream with media controls as
// provided by MediaControls. If you just want to display a video without
// controls, you can treat it like any other paintable and for example put it
// into a Picture.
//
// GtkVideo aims to cover use cases such as previews, embedded animations, etc.
// It supports autoplay, looping, and simple media controls. It does not have
// support for video overlays, multichannel audio, device selection, or input.
// If you are writing a full-fledged video player, you may want to use the
// Paintable API and a media framework such as Gstreamer directly.
type Video interface {
	Widget
	Accessible
	Buildable
	ConstraintTarget

	// Autoplay returns true if videos have been set to loop via
	// gtk_video_set_loop().
	Autoplay() bool
	// File gets the file played by @self or nil if not playing back a file.
	File() gio.File
	// Loop returns true if videos have been set to loop via
	// gtk_video_set_loop().
	Loop() bool
	// MediaStream gets the media stream managed by @self or nil if none.
	MediaStream() MediaStream
	// SetAutoplay sets whether @self automatically starts playback when it
	// becomes visible or when a new file gets loaded.
	SetAutoplay(autoplay bool)
	// SetFile makes @self play the given @file.
	SetFile(file gio.File)
	// SetFilename makes @self play the given @filename.
	//
	// This is a utility function that calls gtk_video_set_file(),
	SetFilename(filename string)
	// SetLoop sets whether new files loaded by @self should be set to loop.
	SetLoop(loop bool)
	// SetMediaStream sets the media stream to be played back. @self will take
	// full control of managing the media stream. If you want to manage a media
	// stream yourself, consider using a Image for display.
	//
	// If you want to display a file, consider using gtk_video_set_file()
	// instead.
	SetMediaStream(stream MediaStream)
	// SetResource makes @self play the resource at the given @resource_path.
	//
	// This is a utility function that calls gtk_video_set_file(),
	SetResource(resourcePath string)
}

// video implements the Video interface.
type video struct {
	Widget
	Accessible
	Buildable
	ConstraintTarget
}

var _ Video = (*video)(nil)

// WrapVideo wraps a GObject to the right type. It is
// primarily used internally.
func WrapVideo(obj *externglib.Object) Video {
	return Video{
		Widget:           WrapWidget(obj),
		Accessible:       WrapAccessible(obj),
		Buildable:        WrapBuildable(obj),
		ConstraintTarget: WrapConstraintTarget(obj),
	}
}

func marshalVideo(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapVideo(obj), nil
}

// NewVideo constructs a class Video.
func NewVideo() Video {
	var cret C.GtkVideo
	var ret1 Video

	cret = C.gtk_video_new()

	ret1 = gextras.CastObject(externglib.Take(unsafe.Pointer(cret.Native()))).(Video)

	return ret1
}

// NewVideoForFile constructs a class Video.
func NewVideoForFile(file gio.File) Video {
	var arg1 *C.GFile

	arg1 = (*C.GFile)(unsafe.Pointer(file.Native()))

	var cret C.GtkVideo
	var ret1 Video

	cret = C.gtk_video_new_for_file(file)

	ret1 = gextras.CastObject(externglib.Take(unsafe.Pointer(cret.Native()))).(Video)

	return ret1
}

// NewVideoForFilename constructs a class Video.
func NewVideoForFilename(filename string) Video {
	var arg1 *C.char

	arg1 = (*C.char)(C.CString(filename))
	defer C.free(unsafe.Pointer(arg1))

	var cret C.GtkVideo
	var ret1 Video

	cret = C.gtk_video_new_for_filename(filename)

	ret1 = gextras.CastObject(externglib.Take(unsafe.Pointer(cret.Native()))).(Video)

	return ret1
}

// NewVideoForMediaStream constructs a class Video.
func NewVideoForMediaStream(stream MediaStream) Video {
	var arg1 *C.GtkMediaStream

	arg1 = (*C.GtkMediaStream)(unsafe.Pointer(stream.Native()))

	var cret C.GtkVideo
	var ret1 Video

	cret = C.gtk_video_new_for_media_stream(stream)

	ret1 = gextras.CastObject(externglib.Take(unsafe.Pointer(cret.Native()))).(Video)

	return ret1
}

// NewVideoForResource constructs a class Video.
func NewVideoForResource(resourcePath string) Video {
	var arg1 *C.char

	arg1 = (*C.char)(C.CString(resourcePath))
	defer C.free(unsafe.Pointer(arg1))

	var cret C.GtkVideo
	var ret1 Video

	cret = C.gtk_video_new_for_resource(resourcePath)

	ret1 = gextras.CastObject(externglib.Take(unsafe.Pointer(cret.Native()))).(Video)

	return ret1
}

// Autoplay returns true if videos have been set to loop via
// gtk_video_set_loop().
func (s video) Autoplay() bool {
	var arg0 *C.GtkVideo

	arg0 = (*C.GtkVideo)(unsafe.Pointer(s.Native()))

	var cret C.gboolean
	var ret1 bool

	cret = C.gtk_video_get_autoplay(arg0)

	ret1 = C.bool(cret) != C.false

	return ret1
}

// File gets the file played by @self or nil if not playing back a file.
func (s video) File() gio.File {
	var arg0 *C.GtkVideo

	arg0 = (*C.GtkVideo)(unsafe.Pointer(s.Native()))

	var cret *C.GFile
	var ret1 gio.File

	cret = C.gtk_video_get_file(arg0)

	ret1 = gextras.CastObject(externglib.Take(unsafe.Pointer(cret.Native()))).(gio.File)

	return ret1
}

// Loop returns true if videos have been set to loop via
// gtk_video_set_loop().
func (s video) Loop() bool {
	var arg0 *C.GtkVideo

	arg0 = (*C.GtkVideo)(unsafe.Pointer(s.Native()))

	var cret C.gboolean
	var ret1 bool

	cret = C.gtk_video_get_loop(arg0)

	ret1 = C.bool(cret) != C.false

	return ret1
}

// MediaStream gets the media stream managed by @self or nil if none.
func (s video) MediaStream() MediaStream {
	var arg0 *C.GtkVideo

	arg0 = (*C.GtkVideo)(unsafe.Pointer(s.Native()))

	var cret *C.GtkMediaStream
	var ret1 MediaStream

	cret = C.gtk_video_get_media_stream(arg0)

	ret1 = gextras.CastObject(externglib.Take(unsafe.Pointer(cret.Native()))).(MediaStream)

	return ret1
}

// SetAutoplay sets whether @self automatically starts playback when it
// becomes visible or when a new file gets loaded.
func (s video) SetAutoplay(autoplay bool) {
	var arg0 *C.GtkVideo
	var arg1 C.gboolean

	arg0 = (*C.GtkVideo)(unsafe.Pointer(s.Native()))
	if autoplay {
		arg1 = C.gboolean(1)
	}

	C.gtk_video_set_autoplay(arg0, autoplay)
}

// SetFile makes @self play the given @file.
func (s video) SetFile(file gio.File) {
	var arg0 *C.GtkVideo
	var arg1 *C.GFile

	arg0 = (*C.GtkVideo)(unsafe.Pointer(s.Native()))
	arg1 = (*C.GFile)(unsafe.Pointer(file.Native()))

	C.gtk_video_set_file(arg0, file)
}

// SetFilename makes @self play the given @filename.
//
// This is a utility function that calls gtk_video_set_file(),
func (s video) SetFilename(filename string) {
	var arg0 *C.GtkVideo
	var arg1 *C.char

	arg0 = (*C.GtkVideo)(unsafe.Pointer(s.Native()))
	arg1 = (*C.char)(C.CString(filename))
	defer C.free(unsafe.Pointer(arg1))

	C.gtk_video_set_filename(arg0, filename)
}

// SetLoop sets whether new files loaded by @self should be set to loop.
func (s video) SetLoop(loop bool) {
	var arg0 *C.GtkVideo
	var arg1 C.gboolean

	arg0 = (*C.GtkVideo)(unsafe.Pointer(s.Native()))
	if loop {
		arg1 = C.gboolean(1)
	}

	C.gtk_video_set_loop(arg0, loop)
}

// SetMediaStream sets the media stream to be played back. @self will take
// full control of managing the media stream. If you want to manage a media
// stream yourself, consider using a Image for display.
//
// If you want to display a file, consider using gtk_video_set_file()
// instead.
func (s video) SetMediaStream(stream MediaStream) {
	var arg0 *C.GtkVideo
	var arg1 *C.GtkMediaStream

	arg0 = (*C.GtkVideo)(unsafe.Pointer(s.Native()))
	arg1 = (*C.GtkMediaStream)(unsafe.Pointer(stream.Native()))

	C.gtk_video_set_media_stream(arg0, stream)
}

// SetResource makes @self play the resource at the given @resource_path.
//
// This is a utility function that calls gtk_video_set_file(),
func (s video) SetResource(resourcePath string) {
	var arg0 *C.GtkVideo
	var arg1 *C.char

	arg0 = (*C.GtkVideo)(unsafe.Pointer(s.Native()))
	arg1 = (*C.char)(C.CString(resourcePath))
	defer C.free(unsafe.Pointer(arg1))

	C.gtk_video_set_resource(arg0, resourcePath)
}
