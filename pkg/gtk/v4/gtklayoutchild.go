// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_layout_child_get_type()), F: marshalLayoutChild},
	})
}

// LayoutChild is the base class for objects that are meant to hold layout
// properties. If a LayoutManager has per-child properties, like their packing
// type, or the horizontal and vertical span, or the icon name, then the layout
// manager should use a LayoutChild implementation to store those properties.
//
// A LayoutChild instance is only ever valid while a widget is part of a layout.
type LayoutChild interface {
	gextras.Objector

	// ChildWidget retrieves the Widget associated to the given @layout_child.
	ChildWidget(l LayoutChild)
	// LayoutManager retrieves the LayoutManager instance that created the given
	// @layout_child.
	LayoutManager(l LayoutChild)
}

// layoutChild implements the LayoutChild interface.
type layoutChild struct {
	gextras.Objector
}

var _ LayoutChild = (*layoutChild)(nil)

// WrapLayoutChild wraps a GObject to the right type. It is
// primarily used internally.
func WrapLayoutChild(obj *externglib.Object) LayoutChild {
	return LayoutChild{
		Objector: obj,
	}
}

func marshalLayoutChild(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapLayoutChild(obj), nil
}

// ChildWidget retrieves the Widget associated to the given @layout_child.
func (l layoutChild) ChildWidget(l LayoutChild) {
	var arg0 *C.GtkLayoutChild

	arg0 = (*C.GtkLayoutChild)(unsafe.Pointer(l.Native()))

	C.gtk_layout_child_get_child_widget(arg0)
}

// LayoutManager retrieves the LayoutManager instance that created the given
// @layout_child.
func (l layoutChild) LayoutManager(l LayoutChild) {
	var arg0 *C.GtkLayoutChild

	arg0 = (*C.GtkLayoutChild)(unsafe.Pointer(l.Native()))

	C.gtk_layout_child_get_layout_manager(arg0)
}
