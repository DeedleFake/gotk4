// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_constraint_layout_get_type()), F: marshalConstraintLayout},
		{T: externglib.Type(C.gtk_constraint_layout_child_get_type()), F: marshalConstraintLayoutChild},
	})
}

// ConstraintLayout: layout manager using constraints to describe relations
// between widgets.
//
// `GtkConstraintLayout` is a layout manager that uses relations between widget
// attributes, expressed via [class@Gtk.Constraint] instances, to measure and
// allocate widgets.
//
//
// How do constraints work
//
// Constraints are objects defining the relationship between attributes of a
// widget; you can read the description of the [class@Gtk.Constraint] class to
// have a more in depth definition.
//
// By taking multiple constraints and applying them to the children of a widget
// using `GtkConstraintLayout`, it's possible to describe complex layout
// policies; each constraint applied to a child or to the parent widgets
// contributes to the full description of the layout, in terms of parameters for
// resolving the value of each attribute.
//
// It is important to note that a layout is defined by the totality of
// constraints; removing a child, or a constraint, from an existing layout
// without changing the remaining constraints may result in an unstable or
// unsolvable layout.
//
// Constraints have an implicit "reading order"; you should start describing
// each edge of each child, as well as their relationship with the parent
// container, from the top left (or top right, in RTL languages), horizontally
// first, and then vertically.
//
// A constraint-based layout with too few constraints can become "unstable",
// that is: have more than one solution. The behavior of an unstable layout is
// undefined.
//
// A constraint-based layout with conflicting constraints may be unsolvable, and
// lead to an unstable layout. You can use the
// [property@Gtk.Constraint:strength] property of [class@Gtk.Constraint] to
// "nudge" the layout towards a solution.
//
//
// GtkConstraintLayout as GtkBuildable
//
// `GtkConstraintLayout` implements the [iface@Gtk.Buildable] interface and has
// a custom "constraints" element which allows describing constraints in a
// [class@Gtk.Builder] UI file.
//
// An example of a UI definition fragment specifying a constraint:
//
// “`xml <object class="GtkConstraintLayout"> <constraints> <constraint
// target="button" target-attribute="start" relation="eq" source="super"
// source-attribute="start" constant="12" strength="required" /> <constraint
// target="button" target-attribute="width" relation="ge" constant="250"
// strength="strong" /> </constraints> </object> “`
//
// The definition above will add two constraints to the GtkConstraintLayout:
//
//    - a required constraint between the leading edge of "button" and
//      the leading edge of the widget using the constraint layout, plus
//      12 pixels
//    - a strong, constant constraint making the width of "button" greater
//      than, or equal to 250 pixels
//
// The "target" and "target-attribute" attributes are required.
//
// The "source" and "source-attribute" attributes of the "constraint" element
// are optional; if they are not specified, the constraint is assumed to be a
// constant.
//
// The "relation" attribute is optional; if not specified, the constraint is
// assumed to be an equality.
//
// The "strength" attribute is optional; if not specified, the constraint is
// assumed to be required.
//
// The "source" and "target" attributes can be set to "super" to indicate that
// the constraint target is the widget using the GtkConstraintLayout.
//
// There can be "constant" and "multiplier" attributes.
//
// Additionally, the "constraints" element can also contain a description of the
// ConstraintGuides used by the layout:
//
// “`xml <constraints> <guide min-width="100" max-width="500" name="hspace"/>
// <guide min-height="64" nat-height="128" name="vspace" strength="strong"/>
// </constraints> “`
//
// The "guide" element has the following optional attributes:
//
//    - "min-width", "nat-width", and "max-width", describe the minimum,
//      natural, and maximum width of the guide, respectively
//    - "min-height", "nat-height", and "max-height", describe the minimum,
//      natural, and maximum height of the guide, respectively
//    - "strength" describes the strength of the constraint on the natural
//      size of the guide; if not specified, the constraint is assumed to
//      have a medium strength
//    - "name" describes a name for the guide, useful when debugging
//
//
// Using the Visual Format Language
//
// Complex constraints can be described using a compact syntax called VFL, or
// *Visual Format Language*.
//
// The Visual Format Language describes all the constraints on a row or column,
// typically starting from the leading edge towards the trailing one. Each
// element of the layout is composed by "views", which identify a
// [iface@Gtk.ConstraintTarget].
//
// For instance:
//
// “` [button]-[textField] “`
//
// Describes a constraint that binds the trailing edge of "button" to the
// leading edge of "textField", leaving a default space between the two.
//
// Using VFL is also possible to specify predicates that describe constraints on
// attributes like width and height:
//
// “` // Width must be greater than, or equal to 50 [button(>=50)]
//
//    // Width of button1 must be equal to width of button2
//    [button1(==button2)]
//
// “`
//
// The default orientation for a VFL description is horizontal, unless otherwise
// specified:
//
// “` // horizontal orientation, default attribute: width H:[button(>=150)]
//
//    // vertical orientation, default attribute: height
//    V:[button1(==button2)]
//
// “`
//
// It's also possible to specify multiple predicates, as well as their strength:
//
// “` // minimum width of button must be 150 // natural width of button can be
// 250 [button(>=150@required, ==250@medium)] “`
//
// Finally, it's also possible to use simple arithmetic operators:
//
// “` // width of button1 must be equal to width of button2 // divided by 2 plus
// 12 [button1(button2 / 2 + 12)] “`
type ConstraintLayout interface {
	LayoutManager

	// AsLayoutManager casts the class to the LayoutManager interface.
	AsLayoutManager() LayoutManager
	// AsBuildable casts the class to the Buildable interface.
	AsBuildable() Buildable

	// Allocate assigns the given @width, @height, and @baseline to a @widget,
	// and computes the position and sizes of the children of the @widget using
	// the layout management policy of @manager.
	//
	// This method is inherited from LayoutManager
	Allocate(widget Widget, width int, height int, baseline int)
	// GetLayoutChild retrieves a `GtkLayoutChild` instance for the
	// `GtkLayoutManager`, creating one if necessary.
	//
	// The @child widget must be a child of the widget using @manager.
	//
	// The `GtkLayoutChild` instance is owned by the `GtkLayoutManager`, and is
	// guaranteed to exist as long as @child is a child of the `GtkWidget` using
	// the given `GtkLayoutManager`.
	//
	// This method is inherited from LayoutManager
	GetLayoutChild(child Widget) LayoutChild
	// GetRequestMode retrieves the request mode of @manager.
	//
	// This method is inherited from LayoutManager
	GetRequestMode() SizeRequestMode
	// GetWidget retrieves the `GtkWidget` using the given `GtkLayoutManager`.
	//
	// This method is inherited from LayoutManager
	GetWidget() Widget
	// LayoutChanged queues a resize on the `GtkWidget` using @manager, if any.
	//
	// This function should be called by subclasses of `GtkLayoutManager` in
	// response to changes to their layout management policies.
	//
	// This method is inherited from LayoutManager
	LayoutChanged()
	// Measure measures the size of the @widget using @manager, for the given
	// @orientation and size.
	//
	// See the [class@Gtk.Widget] documentation on layout management for more
	// details.
	//
	// This method is inherited from LayoutManager
	Measure(widget Widget, orientation Orientation, forSize int) (minimum int, natural int, minimumBaseline int, naturalBaseline int)
	// GetBuildableID gets the ID of the @buildable object.
	//
	// `GtkBuilder` sets the name based on the ID attribute of the <object> tag
	// used to construct the @buildable.
	//
	// This method is inherited from Buildable
	GetBuildableID() string

	// AddConstraint adds a constraint to the layout manager.
	//
	// The [property@Gtk.Constraint:source] and [property@Gtk.Constraint:target]
	// properties of `constraint` can be:
	//
	//    - set to `NULL` to indicate that the constraint refers to the
	//      widget using `layout`
	//    - set to the [class@Gtk.Widget] using `layout`
	//    - set to a child of the [class@Gtk.Widget] using `layout`
	//    - set to a [class@Gtk.ConstraintGuide] that is part of `layout`
	//
	// The @layout acquires the ownership of @constraint after calling this
	// function.
	AddConstraint(constraint Constraint)
	// AddGuide adds a guide to `layout`.
	//
	// A guide can be used as the source or target of constraints, like a
	// widget, but it is not visible.
	//
	// The `layout` acquires the ownership of `guide` after calling this
	// function.
	AddGuide(guide ConstraintGuide)
	// RemoveAllConstraints removes all constraints from the layout manager.
	RemoveAllConstraints()
	// RemoveConstraint removes `constraint` from the layout manager, so that it
	// no longer influences the layout.
	RemoveConstraint(constraint Constraint)
	// RemoveGuide removes `guide` from the layout manager, so that it no longer
	// influences the layout.
	RemoveGuide(guide ConstraintGuide)
}

// constraintLayout implements the ConstraintLayout interface.
type constraintLayout struct {
	*externglib.Object
}

var _ ConstraintLayout = (*constraintLayout)(nil)

// WrapConstraintLayout wraps a GObject to a type that implements
// interface ConstraintLayout. It is primarily used internally.
func WrapConstraintLayout(obj *externglib.Object) ConstraintLayout {
	return constraintLayout{obj}
}

func marshalConstraintLayout(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapConstraintLayout(obj), nil
}

// NewConstraintLayout creates a new `GtkConstraintLayout` layout manager.
func NewConstraintLayout() ConstraintLayout {
	var _cret *C.GtkLayoutManager // in

	_cret = C.gtk_constraint_layout_new()

	var _constraintLayout ConstraintLayout // out

	_constraintLayout = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(ConstraintLayout)

	return _constraintLayout
}

func (c constraintLayout) AsLayoutManager() LayoutManager {
	return WrapLayoutManager(gextras.InternObject(c))
}

func (c constraintLayout) AsBuildable() Buildable {
	return WrapBuildable(gextras.InternObject(c))
}

func (m constraintLayout) Allocate(widget Widget, width int, height int, baseline int) {
	WrapLayoutManager(gextras.InternObject(m)).Allocate(widget, width, height, baseline)
}

func (m constraintLayout) GetLayoutChild(child Widget) LayoutChild {
	return WrapLayoutManager(gextras.InternObject(m)).GetLayoutChild(child)
}

func (m constraintLayout) GetRequestMode() SizeRequestMode {
	return WrapLayoutManager(gextras.InternObject(m)).GetRequestMode()
}

func (m constraintLayout) GetWidget() Widget {
	return WrapLayoutManager(gextras.InternObject(m)).GetWidget()
}

func (m constraintLayout) LayoutChanged() {
	WrapLayoutManager(gextras.InternObject(m)).LayoutChanged()
}

func (m constraintLayout) Measure(widget Widget, orientation Orientation, forSize int) (minimum int, natural int, minimumBaseline int, naturalBaseline int) {
	return WrapLayoutManager(gextras.InternObject(m)).Measure(widget, orientation, forSize)
}

func (b constraintLayout) GetBuildableID() string {
	return WrapBuildable(gextras.InternObject(b)).GetBuildableID()
}

func (l constraintLayout) AddConstraint(constraint Constraint) {
	var _arg0 *C.GtkConstraintLayout // out
	var _arg1 *C.GtkConstraint       // out

	_arg0 = (*C.GtkConstraintLayout)(unsafe.Pointer(l.Native()))
	_arg1 = (*C.GtkConstraint)(unsafe.Pointer(constraint.Native()))

	C.gtk_constraint_layout_add_constraint(_arg0, _arg1)
}

func (l constraintLayout) AddGuide(guide ConstraintGuide) {
	var _arg0 *C.GtkConstraintLayout // out
	var _arg1 *C.GtkConstraintGuide  // out

	_arg0 = (*C.GtkConstraintLayout)(unsafe.Pointer(l.Native()))
	_arg1 = (*C.GtkConstraintGuide)(unsafe.Pointer(guide.Native()))

	C.gtk_constraint_layout_add_guide(_arg0, _arg1)
}

func (l constraintLayout) RemoveAllConstraints() {
	var _arg0 *C.GtkConstraintLayout // out

	_arg0 = (*C.GtkConstraintLayout)(unsafe.Pointer(l.Native()))

	C.gtk_constraint_layout_remove_all_constraints(_arg0)
}

func (l constraintLayout) RemoveConstraint(constraint Constraint) {
	var _arg0 *C.GtkConstraintLayout // out
	var _arg1 *C.GtkConstraint       // out

	_arg0 = (*C.GtkConstraintLayout)(unsafe.Pointer(l.Native()))
	_arg1 = (*C.GtkConstraint)(unsafe.Pointer(constraint.Native()))

	C.gtk_constraint_layout_remove_constraint(_arg0, _arg1)
}

func (l constraintLayout) RemoveGuide(guide ConstraintGuide) {
	var _arg0 *C.GtkConstraintLayout // out
	var _arg1 *C.GtkConstraintGuide  // out

	_arg0 = (*C.GtkConstraintLayout)(unsafe.Pointer(l.Native()))
	_arg1 = (*C.GtkConstraintGuide)(unsafe.Pointer(guide.Native()))

	C.gtk_constraint_layout_remove_guide(_arg0, _arg1)
}

// ConstraintLayoutChild: `GtkLayoutChild` subclass for children in a
// `GtkConstraintLayout`.
type ConstraintLayoutChild interface {
	LayoutChild

	// AsLayoutChild casts the class to the LayoutChild interface.
	AsLayoutChild() LayoutChild

	// GetChildWidget retrieves the `GtkWidget` associated to the given
	// @layout_child.
	//
	// This method is inherited from LayoutChild
	GetChildWidget() Widget
	// GetLayoutManager retrieves the `GtkLayoutManager` instance that created
	// the given @layout_child.
	//
	// This method is inherited from LayoutChild
	GetLayoutManager() LayoutManager
}

// constraintLayoutChild implements the ConstraintLayoutChild interface.
type constraintLayoutChild struct {
	*externglib.Object
}

var _ ConstraintLayoutChild = (*constraintLayoutChild)(nil)

// WrapConstraintLayoutChild wraps a GObject to a type that implements
// interface ConstraintLayoutChild. It is primarily used internally.
func WrapConstraintLayoutChild(obj *externglib.Object) ConstraintLayoutChild {
	return constraintLayoutChild{obj}
}

func marshalConstraintLayoutChild(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapConstraintLayoutChild(obj), nil
}

func (c constraintLayoutChild) AsLayoutChild() LayoutChild {
	return WrapLayoutChild(gextras.InternObject(c))
}

func (l constraintLayoutChild) GetChildWidget() Widget {
	return WrapLayoutChild(gextras.InternObject(l)).GetChildWidget()
}

func (l constraintLayoutChild) GetLayoutManager() LayoutManager {
	return WrapLayoutChild(gextras.InternObject(l)).GetLayoutManager()
}
