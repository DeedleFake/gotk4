// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/gdk/v4"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_media_stream_get_type()), F: marshalMediaStream},
	})
}

// MediaStream: `GtkMediaStream` is the integration point for media playback
// inside GTK.
//
// GTK provides an implementation of the `GtkMediaStream` interface that is
// called [class@Gtk.MediaFile].
//
// Apart from application-facing API for stream playback, `GtkMediaStream` has a
// number of APIs that are only useful for implementations and should not be
// used in applications: [method@Gtk.MediaStream.prepared],
// [method@Gtk.MediaStream.unprepared], [method@Gtk.MediaStream.update],
// [method@Gtk.MediaStream.ended], [method@Gtk.MediaStream.seek_success],
// [method@Gtk.MediaStream.seek_failed], [method@Gtk.MediaStream.gerror],
// [method@Gtk.MediaStream.error], [method@Gtk.MediaStream.error_valist].
type MediaStream interface {
	gextras.Objector

	EndedMediaStream()

	GerrorMediaStream(err error)

	Duration() int64

	Ended() bool

	Error() error

	Loop() bool

	Muted() bool

	Playing() bool

	Timestamp() int64

	Volume() float64

	HasAudioMediaStream() bool

	HasVideoMediaStream() bool

	IsPreparedMediaStream() bool

	IsSeekableMediaStream() bool

	IsSeekingMediaStream() bool

	PauseMediaStream()

	PlayMediaStream()

	PreparedMediaStream(hasAudio bool, hasVideo bool, seekable bool, duration int64)

	RealizeMediaStream(surface gdk.Surface)

	SeekMediaStream(timestamp int64)

	SeekFailedMediaStream()

	SeekSuccessMediaStream()

	SetLoopMediaStream(loop bool)

	SetMutedMediaStream(muted bool)

	SetPlayingMediaStream(playing bool)

	SetVolumeMediaStream(volume float64)

	UnpreparedMediaStream()

	UnrealizeMediaStream(surface gdk.Surface)

	UpdateMediaStream(timestamp int64)
}

// mediaStream implements the MediaStream class.
type mediaStream struct {
	gextras.Objector
}

// WrapMediaStream wraps a GObject to the right type. It is
// primarily used internally.
func WrapMediaStream(obj *externglib.Object) MediaStream {
	return mediaStream{
		Objector: obj,
	}
}

func marshalMediaStream(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapMediaStream(obj), nil
}

func (s mediaStream) EndedMediaStream() {
	var _arg0 *C.GtkMediaStream // out

	_arg0 = (*C.GtkMediaStream)(unsafe.Pointer(s.Native()))

	C.gtk_media_stream_ended(_arg0)
}

func (s mediaStream) GerrorMediaStream(err error) {
	var _arg0 *C.GtkMediaStream // out
	var _arg1 *C.GError         // out

	_arg0 = (*C.GtkMediaStream)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GError)(gerror.New(err))

	C.gtk_media_stream_gerror(_arg0, _arg1)
}

func (s mediaStream) Duration() int64 {
	var _arg0 *C.GtkMediaStream // out
	var _cret C.gint64          // in

	_arg0 = (*C.GtkMediaStream)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_media_stream_get_duration(_arg0)

	var _gint64 int64 // out

	_gint64 = int64(_cret)

	return _gint64
}

func (s mediaStream) Ended() bool {
	var _arg0 *C.GtkMediaStream // out
	var _cret C.gboolean        // in

	_arg0 = (*C.GtkMediaStream)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_media_stream_get_ended(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (s mediaStream) Error() error {
	var _arg0 *C.GtkMediaStream // out
	var _cret *C.GError         // in

	_arg0 = (*C.GtkMediaStream)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_media_stream_get_error(_arg0)

	var _err error // out

	_err = gerror.Take(unsafe.Pointer(_cret))

	return _err
}

func (s mediaStream) Loop() bool {
	var _arg0 *C.GtkMediaStream // out
	var _cret C.gboolean        // in

	_arg0 = (*C.GtkMediaStream)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_media_stream_get_loop(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (s mediaStream) Muted() bool {
	var _arg0 *C.GtkMediaStream // out
	var _cret C.gboolean        // in

	_arg0 = (*C.GtkMediaStream)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_media_stream_get_muted(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (s mediaStream) Playing() bool {
	var _arg0 *C.GtkMediaStream // out
	var _cret C.gboolean        // in

	_arg0 = (*C.GtkMediaStream)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_media_stream_get_playing(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (s mediaStream) Timestamp() int64 {
	var _arg0 *C.GtkMediaStream // out
	var _cret C.gint64          // in

	_arg0 = (*C.GtkMediaStream)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_media_stream_get_timestamp(_arg0)

	var _gint64 int64 // out

	_gint64 = int64(_cret)

	return _gint64
}

func (s mediaStream) Volume() float64 {
	var _arg0 *C.GtkMediaStream // out
	var _cret C.double          // in

	_arg0 = (*C.GtkMediaStream)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_media_stream_get_volume(_arg0)

	var _gdouble float64 // out

	_gdouble = float64(_cret)

	return _gdouble
}

func (s mediaStream) HasAudioMediaStream() bool {
	var _arg0 *C.GtkMediaStream // out
	var _cret C.gboolean        // in

	_arg0 = (*C.GtkMediaStream)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_media_stream_has_audio(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (s mediaStream) HasVideoMediaStream() bool {
	var _arg0 *C.GtkMediaStream // out
	var _cret C.gboolean        // in

	_arg0 = (*C.GtkMediaStream)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_media_stream_has_video(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (s mediaStream) IsPreparedMediaStream() bool {
	var _arg0 *C.GtkMediaStream // out
	var _cret C.gboolean        // in

	_arg0 = (*C.GtkMediaStream)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_media_stream_is_prepared(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (s mediaStream) IsSeekableMediaStream() bool {
	var _arg0 *C.GtkMediaStream // out
	var _cret C.gboolean        // in

	_arg0 = (*C.GtkMediaStream)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_media_stream_is_seekable(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (s mediaStream) IsSeekingMediaStream() bool {
	var _arg0 *C.GtkMediaStream // out
	var _cret C.gboolean        // in

	_arg0 = (*C.GtkMediaStream)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_media_stream_is_seeking(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (s mediaStream) PauseMediaStream() {
	var _arg0 *C.GtkMediaStream // out

	_arg0 = (*C.GtkMediaStream)(unsafe.Pointer(s.Native()))

	C.gtk_media_stream_pause(_arg0)
}

func (s mediaStream) PlayMediaStream() {
	var _arg0 *C.GtkMediaStream // out

	_arg0 = (*C.GtkMediaStream)(unsafe.Pointer(s.Native()))

	C.gtk_media_stream_play(_arg0)
}

func (s mediaStream) PreparedMediaStream(hasAudio bool, hasVideo bool, seekable bool, duration int64) {
	var _arg0 *C.GtkMediaStream // out
	var _arg1 C.gboolean        // out
	var _arg2 C.gboolean        // out
	var _arg3 C.gboolean        // out
	var _arg4 C.gint64          // out

	_arg0 = (*C.GtkMediaStream)(unsafe.Pointer(s.Native()))
	if hasAudio {
		_arg1 = C.TRUE
	}
	if hasVideo {
		_arg2 = C.TRUE
	}
	if seekable {
		_arg3 = C.TRUE
	}
	_arg4 = C.gint64(duration)

	C.gtk_media_stream_prepared(_arg0, _arg1, _arg2, _arg3, _arg4)
}

func (s mediaStream) RealizeMediaStream(surface gdk.Surface) {
	var _arg0 *C.GtkMediaStream // out
	var _arg1 *C.GdkSurface     // out

	_arg0 = (*C.GtkMediaStream)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GdkSurface)(unsafe.Pointer(surface.Native()))

	C.gtk_media_stream_realize(_arg0, _arg1)
}

func (s mediaStream) SeekMediaStream(timestamp int64) {
	var _arg0 *C.GtkMediaStream // out
	var _arg1 C.gint64          // out

	_arg0 = (*C.GtkMediaStream)(unsafe.Pointer(s.Native()))
	_arg1 = C.gint64(timestamp)

	C.gtk_media_stream_seek(_arg0, _arg1)
}

func (s mediaStream) SeekFailedMediaStream() {
	var _arg0 *C.GtkMediaStream // out

	_arg0 = (*C.GtkMediaStream)(unsafe.Pointer(s.Native()))

	C.gtk_media_stream_seek_failed(_arg0)
}

func (s mediaStream) SeekSuccessMediaStream() {
	var _arg0 *C.GtkMediaStream // out

	_arg0 = (*C.GtkMediaStream)(unsafe.Pointer(s.Native()))

	C.gtk_media_stream_seek_success(_arg0)
}

func (s mediaStream) SetLoopMediaStream(loop bool) {
	var _arg0 *C.GtkMediaStream // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.GtkMediaStream)(unsafe.Pointer(s.Native()))
	if loop {
		_arg1 = C.TRUE
	}

	C.gtk_media_stream_set_loop(_arg0, _arg1)
}

func (s mediaStream) SetMutedMediaStream(muted bool) {
	var _arg0 *C.GtkMediaStream // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.GtkMediaStream)(unsafe.Pointer(s.Native()))
	if muted {
		_arg1 = C.TRUE
	}

	C.gtk_media_stream_set_muted(_arg0, _arg1)
}

func (s mediaStream) SetPlayingMediaStream(playing bool) {
	var _arg0 *C.GtkMediaStream // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.GtkMediaStream)(unsafe.Pointer(s.Native()))
	if playing {
		_arg1 = C.TRUE
	}

	C.gtk_media_stream_set_playing(_arg0, _arg1)
}

func (s mediaStream) SetVolumeMediaStream(volume float64) {
	var _arg0 *C.GtkMediaStream // out
	var _arg1 C.double          // out

	_arg0 = (*C.GtkMediaStream)(unsafe.Pointer(s.Native()))
	_arg1 = C.double(volume)

	C.gtk_media_stream_set_volume(_arg0, _arg1)
}

func (s mediaStream) UnpreparedMediaStream() {
	var _arg0 *C.GtkMediaStream // out

	_arg0 = (*C.GtkMediaStream)(unsafe.Pointer(s.Native()))

	C.gtk_media_stream_unprepared(_arg0)
}

func (s mediaStream) UnrealizeMediaStream(surface gdk.Surface) {
	var _arg0 *C.GtkMediaStream // out
	var _arg1 *C.GdkSurface     // out

	_arg0 = (*C.GtkMediaStream)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GdkSurface)(unsafe.Pointer(surface.Native()))

	C.gtk_media_stream_unrealize(_arg0, _arg1)
}

func (s mediaStream) UpdateMediaStream(timestamp int64) {
	var _arg0 *C.GtkMediaStream // out
	var _arg1 C.gint64          // out

	_arg0 = (*C.GtkMediaStream)(unsafe.Pointer(s.Native()))
	_arg1 = C.gint64(timestamp)

	C.gtk_media_stream_update(_arg0, _arg1)
}
