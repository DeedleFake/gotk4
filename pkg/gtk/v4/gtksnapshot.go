// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: glib-2.0 gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_snapshot_get_type()), F: marshalSnapshot},
	})
}

// Snapshot: `GtkSnapshot` assists in creating `GskRenderNodes` for widgets.
//
// It functions in a similar way to a cairo context, and maintains a stack of
// render nodes and their associated transformations.
//
// The node at the top of the stack is the the one that gtk_snapshot_append_…
// functions operate on. Use the gtk_snapshot_push_… functions and
// gtk_snapshot_pop() to change the current node.
//
// The typical way to obtain a `GtkSnapshot` object is as an argument to the
// GtkWidgetClass.snapshot() vfunc. If you need to create your own
// `GtkSnapshot`, use [ctor@Gtk.Snapshot.new].
type Snapshot interface {
	Snapshot

	// GLShaderPopTexture removes the top element from the stack of render nodes
	// and adds it to the nearest `GskGLShaderNode` below it.
	//
	// This must be called the same number of times as the number of textures is
	// needed for the shader in [method@Gtk.Snapshot.push_gl_shader].
	GLShaderPopTexture()
	// Perspective applies a perspective projection transform.
	//
	// See [method@Gsk.Transform.perspective] for a discussion on the details.
	Perspective(depth float32)
	// Pop removes the top element from the stack of render nodes, and appends
	// it to the node underneath it.
	Pop()
	// PushBlur blurs an image.
	//
	// The image is recorded until the next call to [method@Gtk.Snapshot.pop].
	PushBlur(radius float64)
	// PushCrossFade snapshots a cross-fade operation between two images with
	// the given @progress.
	//
	// Until the first call to [method@Gtk.Snapshot.pop], the start image will
	// be snapshot. After that call, the end image will be recorded until the
	// second call to [method@Gtk.Snapshot.pop].
	//
	// Calling this function requires two subsequent calls to
	// [method@Gtk.Snapshot.pop].
	PushCrossFade(progress float64)
	// PushOpacity modifies the opacity of an image.
	//
	// The image is recorded until the next call to [method@Gtk.Snapshot.pop].
	PushOpacity(opacity float64)
	// RenderBackground creates a render node for the CSS background according
	// to @context, and appends it to the current node of @snapshot, without
	// changing the current node.
	RenderBackground(context StyleContext, x float64, y float64, width float64, height float64)
	// RenderFocus creates a render node for the focus outline according to
	// @context, and appends it to the current node of @snapshot, without
	// changing the current node.
	RenderFocus(context StyleContext, x float64, y float64, width float64, height float64)
	// RenderFrame creates a render node for the CSS border according to
	// @context, and appends it to the current node of @snapshot, without
	// changing the current node.
	RenderFrame(context StyleContext, x float64, y float64, width float64, height float64)
	// Restore restores @snapshot to the state saved by a preceding call to
	// gtk_snapshot_save() and removes that state from the stack of saved
	// states.
	Restore()
	// Rotate rotates @@snapshot's coordinate system by @angle degrees in 2D
	// space - or in 3D speak, rotates around the Z axis.
	//
	// To rotate around other axes, use [method@Gsk.Transform.rotate_3d].
	Rotate(angle float32)
	// Save makes a copy of the current state of @snapshot and saves it on an
	// internal stack.
	//
	// When [method@Gtk.Snapshot.restore] is called, @snapshot will be restored
	// to the saved state. Multiple calls to gtk_snapshot_save() and
	// gtk_snapshot_restore() can be nested; each call to gtk_snapshot_restore()
	// restores the state from the matching paired gtk_snapshot_save().
	//
	// It is necessary to clear all saved states with corresponding calls to
	// gtk_snapshot_restore().
	Save()
	// Scale scales @snapshot's coordinate system in 2-dimensional space by the
	// given factors.
	//
	// Use [method@Gtk.Snapshot.scale_3d] to scale in all 3 dimensions.
	Scale(factorX float32, factorY float32)
	// Scale3D scales @snapshot's coordinate system by the given factors.
	Scale3D(factorX float32, factorY float32, factorZ float32)
}

// snapshot implements the Snapshot class.
type snapshot struct {
	Snapshot
}

var _ Snapshot = (*snapshot)(nil)

// WrapSnapshot wraps a GObject to the right type. It is
// primarily used internally.
func WrapSnapshot(obj *externglib.Object) Snapshot {
	return snapshot{
		Snapshot: WrapSnapshot(obj),
	}
}

func marshalSnapshot(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapSnapshot(obj), nil
}

// NewSnapshot constructs a class Snapshot.
func NewSnapshot() Snapshot {
	var _cret C.GtkSnapshot // in

	_cret = C.gtk_snapshot_new()

	var _snapshot Snapshot // out

	_snapshot = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret.Native()))).(Snapshot)

	return _snapshot
}

// GLShaderPopTexture removes the top element from the stack of render nodes
// and adds it to the nearest `GskGLShaderNode` below it.
//
// This must be called the same number of times as the number of textures is
// needed for the shader in [method@Gtk.Snapshot.push_gl_shader].
func (s snapshot) GLShaderPopTexture() {
	var _arg0 *C.GtkSnapshot // out

	_arg0 = (*C.GtkSnapshot)(unsafe.Pointer(s.Native()))

	C.gtk_snapshot_gl_shader_pop_texture(_arg0)
}

// Perspective applies a perspective projection transform.
//
// See [method@Gsk.Transform.perspective] for a discussion on the details.
func (s snapshot) Perspective(depth float32) {
	var _arg0 *C.GtkSnapshot // out
	var _arg1 C.float        // out

	_arg0 = (*C.GtkSnapshot)(unsafe.Pointer(s.Native()))
	_arg1 = C.float(depth)

	C.gtk_snapshot_perspective(_arg0, _arg1)
}

// Pop removes the top element from the stack of render nodes, and appends
// it to the node underneath it.
func (s snapshot) Pop() {
	var _arg0 *C.GtkSnapshot // out

	_arg0 = (*C.GtkSnapshot)(unsafe.Pointer(s.Native()))

	C.gtk_snapshot_pop(_arg0)
}

// PushBlur blurs an image.
//
// The image is recorded until the next call to [method@Gtk.Snapshot.pop].
func (s snapshot) PushBlur(radius float64) {
	var _arg0 *C.GtkSnapshot // out
	var _arg1 C.double       // out

	_arg0 = (*C.GtkSnapshot)(unsafe.Pointer(s.Native()))
	_arg1 = C.double(radius)

	C.gtk_snapshot_push_blur(_arg0, _arg1)
}

// PushCrossFade snapshots a cross-fade operation between two images with
// the given @progress.
//
// Until the first call to [method@Gtk.Snapshot.pop], the start image will
// be snapshot. After that call, the end image will be recorded until the
// second call to [method@Gtk.Snapshot.pop].
//
// Calling this function requires two subsequent calls to
// [method@Gtk.Snapshot.pop].
func (s snapshot) PushCrossFade(progress float64) {
	var _arg0 *C.GtkSnapshot // out
	var _arg1 C.double       // out

	_arg0 = (*C.GtkSnapshot)(unsafe.Pointer(s.Native()))
	_arg1 = C.double(progress)

	C.gtk_snapshot_push_cross_fade(_arg0, _arg1)
}

// PushOpacity modifies the opacity of an image.
//
// The image is recorded until the next call to [method@Gtk.Snapshot.pop].
func (s snapshot) PushOpacity(opacity float64) {
	var _arg0 *C.GtkSnapshot // out
	var _arg1 C.double       // out

	_arg0 = (*C.GtkSnapshot)(unsafe.Pointer(s.Native()))
	_arg1 = C.double(opacity)

	C.gtk_snapshot_push_opacity(_arg0, _arg1)
}

// RenderBackground creates a render node for the CSS background according
// to @context, and appends it to the current node of @snapshot, without
// changing the current node.
func (s snapshot) RenderBackground(context StyleContext, x float64, y float64, width float64, height float64) {
	var _arg0 *C.GtkSnapshot     // out
	var _arg1 *C.GtkStyleContext // out
	var _arg2 C.double           // out
	var _arg3 C.double           // out
	var _arg4 C.double           // out
	var _arg5 C.double           // out

	_arg0 = (*C.GtkSnapshot)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GtkStyleContext)(unsafe.Pointer(context.Native()))
	_arg2 = C.double(x)
	_arg3 = C.double(y)
	_arg4 = C.double(width)
	_arg5 = C.double(height)

	C.gtk_snapshot_render_background(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
}

// RenderFocus creates a render node for the focus outline according to
// @context, and appends it to the current node of @snapshot, without
// changing the current node.
func (s snapshot) RenderFocus(context StyleContext, x float64, y float64, width float64, height float64) {
	var _arg0 *C.GtkSnapshot     // out
	var _arg1 *C.GtkStyleContext // out
	var _arg2 C.double           // out
	var _arg3 C.double           // out
	var _arg4 C.double           // out
	var _arg5 C.double           // out

	_arg0 = (*C.GtkSnapshot)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GtkStyleContext)(unsafe.Pointer(context.Native()))
	_arg2 = C.double(x)
	_arg3 = C.double(y)
	_arg4 = C.double(width)
	_arg5 = C.double(height)

	C.gtk_snapshot_render_focus(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
}

// RenderFrame creates a render node for the CSS border according to
// @context, and appends it to the current node of @snapshot, without
// changing the current node.
func (s snapshot) RenderFrame(context StyleContext, x float64, y float64, width float64, height float64) {
	var _arg0 *C.GtkSnapshot     // out
	var _arg1 *C.GtkStyleContext // out
	var _arg2 C.double           // out
	var _arg3 C.double           // out
	var _arg4 C.double           // out
	var _arg5 C.double           // out

	_arg0 = (*C.GtkSnapshot)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GtkStyleContext)(unsafe.Pointer(context.Native()))
	_arg2 = C.double(x)
	_arg3 = C.double(y)
	_arg4 = C.double(width)
	_arg5 = C.double(height)

	C.gtk_snapshot_render_frame(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
}

// Restore restores @snapshot to the state saved by a preceding call to
// gtk_snapshot_save() and removes that state from the stack of saved
// states.
func (s snapshot) Restore() {
	var _arg0 *C.GtkSnapshot // out

	_arg0 = (*C.GtkSnapshot)(unsafe.Pointer(s.Native()))

	C.gtk_snapshot_restore(_arg0)
}

// Rotate rotates @@snapshot's coordinate system by @angle degrees in 2D
// space - or in 3D speak, rotates around the Z axis.
//
// To rotate around other axes, use [method@Gsk.Transform.rotate_3d].
func (s snapshot) Rotate(angle float32) {
	var _arg0 *C.GtkSnapshot // out
	var _arg1 C.float        // out

	_arg0 = (*C.GtkSnapshot)(unsafe.Pointer(s.Native()))
	_arg1 = C.float(angle)

	C.gtk_snapshot_rotate(_arg0, _arg1)
}

// Save makes a copy of the current state of @snapshot and saves it on an
// internal stack.
//
// When [method@Gtk.Snapshot.restore] is called, @snapshot will be restored
// to the saved state. Multiple calls to gtk_snapshot_save() and
// gtk_snapshot_restore() can be nested; each call to gtk_snapshot_restore()
// restores the state from the matching paired gtk_snapshot_save().
//
// It is necessary to clear all saved states with corresponding calls to
// gtk_snapshot_restore().
func (s snapshot) Save() {
	var _arg0 *C.GtkSnapshot // out

	_arg0 = (*C.GtkSnapshot)(unsafe.Pointer(s.Native()))

	C.gtk_snapshot_save(_arg0)
}

// Scale scales @snapshot's coordinate system in 2-dimensional space by the
// given factors.
//
// Use [method@Gtk.Snapshot.scale_3d] to scale in all 3 dimensions.
func (s snapshot) Scale(factorX float32, factorY float32) {
	var _arg0 *C.GtkSnapshot // out
	var _arg1 C.float        // out
	var _arg2 C.float        // out

	_arg0 = (*C.GtkSnapshot)(unsafe.Pointer(s.Native()))
	_arg1 = C.float(factorX)
	_arg2 = C.float(factorY)

	C.gtk_snapshot_scale(_arg0, _arg1, _arg2)
}

// Scale3D scales @snapshot's coordinate system by the given factors.
func (s snapshot) Scale3D(factorX float32, factorY float32, factorZ float32) {
	var _arg0 *C.GtkSnapshot // out
	var _arg1 C.float        // out
	var _arg2 C.float        // out
	var _arg3 C.float        // out

	_arg0 = (*C.GtkSnapshot)(unsafe.Pointer(s.Native()))
	_arg1 = C.float(factorX)
	_arg2 = C.float(factorY)
	_arg3 = C.float(factorZ)

	C.gtk_snapshot_scale_3d(_arg0, _arg1, _arg2, _arg3)
}
