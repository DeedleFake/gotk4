// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/core/gextras"
	"github.com/diamondburned/gotk4/pkg/gdk/v4"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_shortcut_controller_get_type()), F: marshalShortcutController},
	})
}

// ShortcutController: `GtkShortcutController` is an event controller that
// manages shortcuts.
//
// Most common shortcuts are using this controller implicitly, e.g. by adding a
// mnemonic underline to a `GtkLabel`, or by installing a key binding using
// gtk_widget_class_add_binding(), or by adding accelerators to global actions
// using gtk_application_set_accels_for_action().
//
// But it is possible to create your own shortcut controller, and add shortcuts
// to it.
//
// `GtkShortcutController` implements `GListModel` for querying the shortcuts
// that have been added to it.
//
//
// GtkShortcutController as a GtkBuildable
//
// `GtkShortcutControllers` can be creates in ui files to set up shortcuts in
// the same place as the widgets.
//
// An example of a UI definition fragment with `GtkShortcutController`: “`xml
// <object class='GtkButton'> <child> <object class='GtkShortcutController'>
// <property name='scope'>managed</property> <child> <object
// class='GtkShortcut'> <property
// name='trigger'>&amp;lt;Control&amp;gt;k</property> <property
// name='action'>activate</property> </object> </child> </object> </child>
// </object> “`
//
// This example creates a [class@Gtk.ActivateAction] for triggering the
// `activate` signal of the `GtkButton`. See
// [ctor@Gtk.ShortcutAction.parse_string] for the syntax for other kinds of
// `GtkShortcutAction`. See [ctor@Gtk.ShortcutTrigger.parse_string] to learn
// more about the syntax for triggers.
type ShortcutController interface {
	EventController
	gio.ListModel
	Buildable

	// AddShortcutShortcutController:
	AddShortcutShortcutController(shortcut Shortcut)
	// MnemonicsModifiers:
	MnemonicsModifiers() gdk.ModifierType
	// Scope:
	Scope() ShortcutScope
	// RemoveShortcutShortcutController:
	RemoveShortcutShortcutController(shortcut Shortcut)
	// SetMnemonicsModifiersShortcutController:
	SetMnemonicsModifiersShortcutController(modifiers gdk.ModifierType)
	// SetScopeShortcutController:
	SetScopeShortcutController(scope ShortcutScope)
}

// shortcutController implements the ShortcutController class.
type shortcutController struct {
	EventController
}

// WrapShortcutController wraps a GObject to the right type. It is
// primarily used internally.
func WrapShortcutController(obj *externglib.Object) ShortcutController {
	return shortcutController{
		EventController: WrapEventController(obj),
	}
}

func marshalShortcutController(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapShortcutController(obj), nil
}

// NewShortcutController:
func NewShortcutController() ShortcutController {
	var _cret *C.GtkEventController // in

	_cret = C.gtk_shortcut_controller_new()

	var _shortcutController ShortcutController // out

	_shortcutController = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(ShortcutController)

	return _shortcutController
}

// NewShortcutControllerForModel:
func NewShortcutControllerForModel(model gio.ListModel) ShortcutController {
	var _arg1 *C.GListModel         // out
	var _cret *C.GtkEventController // in

	_arg1 = (*C.GListModel)(unsafe.Pointer(model.Native()))

	_cret = C.gtk_shortcut_controller_new_for_model(_arg1)

	var _shortcutController ShortcutController // out

	_shortcutController = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(ShortcutController)

	return _shortcutController
}

func (s shortcutController) AddShortcutShortcutController(shortcut Shortcut) {
	var _arg0 *C.GtkShortcutController // out
	var _arg1 *C.GtkShortcut           // out

	_arg0 = (*C.GtkShortcutController)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GtkShortcut)(unsafe.Pointer(shortcut.Native()))

	C.gtk_shortcut_controller_add_shortcut(_arg0, _arg1)
}

func (s shortcutController) MnemonicsModifiers() gdk.ModifierType {
	var _arg0 *C.GtkShortcutController // out
	var _cret C.GdkModifierType        // in

	_arg0 = (*C.GtkShortcutController)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_shortcut_controller_get_mnemonics_modifiers(_arg0)

	var _modifierType gdk.ModifierType // out

	_modifierType = gdk.ModifierType(_cret)

	return _modifierType
}

func (s shortcutController) Scope() ShortcutScope {
	var _arg0 *C.GtkShortcutController // out
	var _cret C.GtkShortcutScope       // in

	_arg0 = (*C.GtkShortcutController)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_shortcut_controller_get_scope(_arg0)

	var _shortcutScope ShortcutScope // out

	_shortcutScope = ShortcutScope(_cret)

	return _shortcutScope
}

func (s shortcutController) RemoveShortcutShortcutController(shortcut Shortcut) {
	var _arg0 *C.GtkShortcutController // out
	var _arg1 *C.GtkShortcut           // out

	_arg0 = (*C.GtkShortcutController)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GtkShortcut)(unsafe.Pointer(shortcut.Native()))

	C.gtk_shortcut_controller_remove_shortcut(_arg0, _arg1)
}

func (s shortcutController) SetMnemonicsModifiersShortcutController(modifiers gdk.ModifierType) {
	var _arg0 *C.GtkShortcutController // out
	var _arg1 C.GdkModifierType        // out

	_arg0 = (*C.GtkShortcutController)(unsafe.Pointer(s.Native()))
	_arg1 = C.GdkModifierType(modifiers)

	C.gtk_shortcut_controller_set_mnemonics_modifiers(_arg0, _arg1)
}

func (s shortcutController) SetScopeShortcutController(scope ShortcutScope) {
	var _arg0 *C.GtkShortcutController // out
	var _arg1 C.GtkShortcutScope       // out

	_arg0 = (*C.GtkShortcutController)(unsafe.Pointer(s.Native()))
	_arg1 = C.GtkShortcutScope(scope)

	C.gtk_shortcut_controller_set_scope(_arg0, _arg1)
}

func (l shortcutController) ItemType() externglib.Type {
	return gio.WrapListModel(gextras.InternObject(l)).ItemType()
}

func (l shortcutController) NItems() uint {
	return gio.WrapListModel(gextras.InternObject(l)).NItems()
}

func (l shortcutController) Object(position uint) gextras.Objector {
	return gio.WrapListModel(gextras.InternObject(l)).Object(position)
}

func (l shortcutController) ItemsChanged(position uint, removed uint, added uint) {
	gio.WrapListModel(gextras.InternObject(l)).ItemsChanged(position, removed, added)
}

func (b shortcutController) BuildableID() string {
	return WrapBuildable(gextras.InternObject(b)).BuildableID()
}
