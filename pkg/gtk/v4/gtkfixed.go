// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	"github.com/diamondburned/gotk4/pkg/gsk/v4"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_fixed_get_type()), F: marshalFixed},
	})
}

// Fixed: the Fixed widget is a container which can place child widgets at fixed
// positions and with fixed sizes, given in pixels. Fixed performs no automatic
// layout management.
//
// For most applications, you should not use this container! It keeps you from
// having to learn about the other GTK+ containers, but it results in broken
// applications. With Fixed, the following things will result in truncated text,
// overlapping widgets, and other display bugs:
//
// - Themes, which may change widget sizes.
//
// - Fonts other than the one you used to write the app will of course change
// the size of widgets containing text; keep in mind that users may use a larger
// font because of difficulty reading the default, or they may be using a
// different OS that provides different fonts.
//
// - Translation of text into other languages changes its size. Also, display of
// non-English text will use a different font in many cases.
//
// In addition, Fixed does not pay attention to text direction and thus may
// produce unwanted results if your app is run under right-to-left languages
// such as Hebrew or Arabic. That is: normally GTK will order containers
// appropriately for the text direction, e.g. to put labels to the right of the
// thing they label when using an RTL language, but it canâ€™t do that with Fixed.
// So if you need to reorder widgets depending on the text direction, you would
// need to manually detect it and adjust child positions accordingly.
//
// Finally, fixed positioning makes it kind of annoying to add/remove GUI
// elements, since you have to reposition all the other elements. This is a
// long-term maintenance problem for your application.
//
// If you know none of these things are an issue for your application, and
// prefer the simplicity of Fixed, by all means use the widget. But you should
// be aware of the tradeoffs.
type Fixed interface {
	Widget
	Accessible
	Buildable
	ConstraintTarget

	// ChildPosition retrieves the translation transformation of the given child
	// Widget in the given Fixed container.
	//
	// See also: gtk_fixed_get_child_transform().
	ChildPosition(widget Widget) (x float64, y float64)
	// ChildTransform retrieves the transformation for @widget set using
	// gtk_fixed_set_child_transform().
	ChildTransform(widget Widget) *gsk.Transform
	// Move sets a translation transformation to the given @x and @y coordinates
	// to the child @widget of the given Fixed container.
	Move(widget Widget, x float64, y float64)
	// Put adds a widget to a Fixed container and assigns a translation
	// transformation to the given @x and @y coordinates to it.
	Put(widget Widget, x float64, y float64)
	// Remove removes a child from @fixed, after it has been added with
	// gtk_fixed_put().
	Remove(widget Widget)
	// SetChildTransform sets the transformation for @widget.
	//
	// This is a convenience function that retrieves the FixedLayoutChild
	// instance associated to @widget and calls
	// gtk_fixed_layout_child_set_transform().
	SetChildTransform(widget Widget, transform *gsk.Transform)
}

// fixed implements the Fixed interface.
type fixed struct {
	Widget
	Accessible
	Buildable
	ConstraintTarget
}

var _ Fixed = (*fixed)(nil)

// WrapFixed wraps a GObject to the right type. It is
// primarily used internally.
func WrapFixed(obj *externglib.Object) Fixed {
	return Fixed{
		Widget:           WrapWidget(obj),
		Accessible:       WrapAccessible(obj),
		Buildable:        WrapBuildable(obj),
		ConstraintTarget: WrapConstraintTarget(obj),
	}
}

func marshalFixed(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapFixed(obj), nil
}

// NewFixed constructs a class Fixed.
func NewFixed() Fixed {
	var cret C.GtkFixed
	var goret1 Fixed

	cret = C.gtk_fixed_new()

	goret1 = gextras.CastObject(externglib.Take(unsafe.Pointer(cret.Native()))).(Fixed)

	return goret1
}

// ChildPosition retrieves the translation transformation of the given child
// Widget in the given Fixed container.
//
// See also: gtk_fixed_get_child_transform().
func (f fixed) ChildPosition(widget Widget) (x float64, y float64) {
	var arg0 *C.GtkFixed
	var arg1 *C.GtkWidget

	arg0 = (*C.GtkFixed)(unsafe.Pointer(f.Native()))
	arg1 = (*C.GtkWidget)(unsafe.Pointer(widget.Native()))

	var arg2 *C.double
	var ret2 float64
	var arg3 *C.double
	var ret3 float64

	C.gtk_fixed_get_child_position(arg0, widget, &arg2, &arg3)

	ret2 = *C.double(arg2)
	ret3 = *C.double(arg3)

	return ret2, ret3
}

// ChildTransform retrieves the transformation for @widget set using
// gtk_fixed_set_child_transform().
func (f fixed) ChildTransform(widget Widget) *gsk.Transform {
	var arg0 *C.GtkFixed
	var arg1 *C.GtkWidget

	arg0 = (*C.GtkFixed)(unsafe.Pointer(f.Native()))
	arg1 = (*C.GtkWidget)(unsafe.Pointer(widget.Native()))

	var cret *C.GskTransform
	var goret1 *gsk.Transform

	cret = C.gtk_fixed_get_child_transform(arg0, widget)

	goret1 = gsk.WrapTransform(unsafe.Pointer(cret))

	return goret1
}

// Move sets a translation transformation to the given @x and @y coordinates
// to the child @widget of the given Fixed container.
func (f fixed) Move(widget Widget, x float64, y float64) {
	var arg0 *C.GtkFixed
	var arg1 *C.GtkWidget
	var arg2 C.double
	var arg3 C.double

	arg0 = (*C.GtkFixed)(unsafe.Pointer(f.Native()))
	arg1 = (*C.GtkWidget)(unsafe.Pointer(widget.Native()))
	arg2 = C.double(x)
	arg3 = C.double(y)

	C.gtk_fixed_move(arg0, widget, x, y)
}

// Put adds a widget to a Fixed container and assigns a translation
// transformation to the given @x and @y coordinates to it.
func (f fixed) Put(widget Widget, x float64, y float64) {
	var arg0 *C.GtkFixed
	var arg1 *C.GtkWidget
	var arg2 C.double
	var arg3 C.double

	arg0 = (*C.GtkFixed)(unsafe.Pointer(f.Native()))
	arg1 = (*C.GtkWidget)(unsafe.Pointer(widget.Native()))
	arg2 = C.double(x)
	arg3 = C.double(y)

	C.gtk_fixed_put(arg0, widget, x, y)
}

// Remove removes a child from @fixed, after it has been added with
// gtk_fixed_put().
func (f fixed) Remove(widget Widget) {
	var arg0 *C.GtkFixed
	var arg1 *C.GtkWidget

	arg0 = (*C.GtkFixed)(unsafe.Pointer(f.Native()))
	arg1 = (*C.GtkWidget)(unsafe.Pointer(widget.Native()))

	C.gtk_fixed_remove(arg0, widget)
}

// SetChildTransform sets the transformation for @widget.
//
// This is a convenience function that retrieves the FixedLayoutChild
// instance associated to @widget and calls
// gtk_fixed_layout_child_set_transform().
func (f fixed) SetChildTransform(widget Widget, transform *gsk.Transform) {
	var arg0 *C.GtkFixed
	var arg1 *C.GtkWidget
	var arg2 *C.GskTransform

	arg0 = (*C.GtkFixed)(unsafe.Pointer(f.Native()))
	arg1 = (*C.GtkWidget)(unsafe.Pointer(widget.Native()))
	arg2 = (*C.GskTransform)(unsafe.Pointer(transform.Native()))

	C.gtk_fixed_set_child_transform(arg0, widget, transform)
}
