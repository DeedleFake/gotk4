// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_overlay_layout_get_type()), F: marshalOverlayLayout},
		{T: externglib.Type(C.gtk_overlay_layout_child_get_type()), F: marshalOverlayLayoutChild},
	})
}

// OverlayLayout: gtkOverlayLayout is the layout manager used by Overlay. It
// places widgets as overlays on top of the main child.
//
// This is not a reusable layout manager, since it expects its widget to be a
// Overlay. It only listed here so that its layout properties get documented.
type OverlayLayout interface {
	LayoutManager
}

// overlayLayout implements the OverlayLayout interface.
type overlayLayout struct {
	LayoutManager
}

var _ OverlayLayout = (*overlayLayout)(nil)

// WrapOverlayLayout wraps a GObject to the right type. It is
// primarily used internally.
func WrapOverlayLayout(obj *externglib.Object) OverlayLayout {
	return OverlayLayout{
		LayoutManager: WrapLayoutManager(obj),
	}
}

func marshalOverlayLayout(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapOverlayLayout(obj), nil
}

// NewOverlayLayout constructs a class OverlayLayout.
func NewOverlayLayout() {
	C.gtk_overlay_layout_new()
}

type OverlayLayoutChild interface {
	LayoutChild

	// ClipOverlay retrieves whether the child is clipped.
	ClipOverlay(c OverlayLayoutChild) bool
	// Measure retrieves whether the child is measured.
	Measure(c OverlayLayoutChild) bool
	// SetClipOverlay sets whether to clip this child.
	SetClipOverlay(c OverlayLayoutChild, clipOverlay bool)
	// SetMeasure sets whether to measure this child.
	SetMeasure(c OverlayLayoutChild, measure bool)
}

// overlayLayoutChild implements the OverlayLayoutChild interface.
type overlayLayoutChild struct {
	LayoutChild
}

var _ OverlayLayoutChild = (*overlayLayoutChild)(nil)

// WrapOverlayLayoutChild wraps a GObject to the right type. It is
// primarily used internally.
func WrapOverlayLayoutChild(obj *externglib.Object) OverlayLayoutChild {
	return OverlayLayoutChild{
		LayoutChild: WrapLayoutChild(obj),
	}
}

func marshalOverlayLayoutChild(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapOverlayLayoutChild(obj), nil
}

// ClipOverlay retrieves whether the child is clipped.
func (c overlayLayoutChild) ClipOverlay(c OverlayLayoutChild) bool {
	var arg0 *C.GtkOverlayLayoutChild

	arg0 = (*C.GtkOverlayLayoutChild)(unsafe.Pointer(c.Native()))

	var cret C.gboolean
	var ok bool

	cret = C.gtk_overlay_layout_child_get_clip_overlay(arg0)

	if cret {
		ok = true
	}

	return ok
}

// Measure retrieves whether the child is measured.
func (c overlayLayoutChild) Measure(c OverlayLayoutChild) bool {
	var arg0 *C.GtkOverlayLayoutChild

	arg0 = (*C.GtkOverlayLayoutChild)(unsafe.Pointer(c.Native()))

	var cret C.gboolean
	var ok bool

	cret = C.gtk_overlay_layout_child_get_measure(arg0)

	if cret {
		ok = true
	}

	return ok
}

// SetClipOverlay sets whether to clip this child.
func (c overlayLayoutChild) SetClipOverlay(c OverlayLayoutChild, clipOverlay bool) {
	var arg0 *C.GtkOverlayLayoutChild
	var arg1 C.gboolean

	arg0 = (*C.GtkOverlayLayoutChild)(unsafe.Pointer(c.Native()))
	if clipOverlay {
		arg1 = C.gboolean(1)
	}

	C.gtk_overlay_layout_child_set_clip_overlay(arg0, arg1)
}

// SetMeasure sets whether to measure this child.
func (c overlayLayoutChild) SetMeasure(c OverlayLayoutChild, measure bool) {
	var arg0 *C.GtkOverlayLayoutChild
	var arg1 C.gboolean

	arg0 = (*C.GtkOverlayLayoutChild)(unsafe.Pointer(c.Native()))
	if measure {
		arg1 = C.gboolean(1)
	}

	C.gtk_overlay_layout_child_set_measure(arg0, arg1)
}
