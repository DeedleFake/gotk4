// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_overlay_layout_get_type()), F: marshalOverlayLayout},
		{T: externglib.Type(C.gtk_overlay_layout_child_get_type()), F: marshalOverlayLayoutChild},
	})
}

// OverlayLayout: `GtkOverlayLayout` is the layout manager used by `GtkOverlay`.
//
// It places widgets as overlays on top of the main child.
//
// This is not a reusable layout manager, since it expects its widget to be a
// `GtkOverlay`. It only listed here so that its layout properties get
// documented.
type OverlayLayout interface {
	LayoutManager

	// AsLayoutManager casts the class to the LayoutManager interface.
	AsLayoutManager() LayoutManager

	// Allocate assigns the given @width, @height, and @baseline to a @widget,
	// and computes the position and sizes of the children of the @widget using
	// the layout management policy of @manager.
	//
	// This method is inherited from LayoutManager
	Allocate(widget Widget, width int, height int, baseline int)
	// GetLayoutChild retrieves a `GtkLayoutChild` instance for the
	// `GtkLayoutManager`, creating one if necessary.
	//
	// The @child widget must be a child of the widget using @manager.
	//
	// The `GtkLayoutChild` instance is owned by the `GtkLayoutManager`, and is
	// guaranteed to exist as long as @child is a child of the `GtkWidget` using
	// the given `GtkLayoutManager`.
	//
	// This method is inherited from LayoutManager
	GetLayoutChild(child Widget) LayoutChild
	// GetRequestMode retrieves the request mode of @manager.
	//
	// This method is inherited from LayoutManager
	GetRequestMode() SizeRequestMode
	// GetWidget retrieves the `GtkWidget` using the given `GtkLayoutManager`.
	//
	// This method is inherited from LayoutManager
	GetWidget() Widget
	// LayoutChanged queues a resize on the `GtkWidget` using @manager, if any.
	//
	// This function should be called by subclasses of `GtkLayoutManager` in
	// response to changes to their layout management policies.
	//
	// This method is inherited from LayoutManager
	LayoutChanged()
	// Measure measures the size of the @widget using @manager, for the given
	// @orientation and size.
	//
	// See the [class@Gtk.Widget] documentation on layout management for more
	// details.
	//
	// This method is inherited from LayoutManager
	Measure(widget Widget, orientation Orientation, forSize int) (minimum int, natural int, minimumBaseline int, naturalBaseline int)
}

// overlayLayout implements the OverlayLayout interface.
type overlayLayout struct {
	*externglib.Object
}

var _ OverlayLayout = (*overlayLayout)(nil)

// WrapOverlayLayout wraps a GObject to a type that implements
// interface OverlayLayout. It is primarily used internally.
func WrapOverlayLayout(obj *externglib.Object) OverlayLayout {
	return overlayLayout{obj}
}

func marshalOverlayLayout(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapOverlayLayout(obj), nil
}

// NewOverlayLayout creates a new `GtkOverlayLayout` instance.
func NewOverlayLayout() OverlayLayout {
	var _cret *C.GtkLayoutManager // in

	_cret = C.gtk_overlay_layout_new()

	var _overlayLayout OverlayLayout // out

	_overlayLayout = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(OverlayLayout)

	return _overlayLayout
}

func (o overlayLayout) AsLayoutManager() LayoutManager {
	return WrapLayoutManager(gextras.InternObject(o))
}

func (m overlayLayout) Allocate(widget Widget, width int, height int, baseline int) {
	WrapLayoutManager(gextras.InternObject(m)).Allocate(widget, width, height, baseline)
}

func (m overlayLayout) GetLayoutChild(child Widget) LayoutChild {
	return WrapLayoutManager(gextras.InternObject(m)).GetLayoutChild(child)
}

func (m overlayLayout) GetRequestMode() SizeRequestMode {
	return WrapLayoutManager(gextras.InternObject(m)).GetRequestMode()
}

func (m overlayLayout) GetWidget() Widget {
	return WrapLayoutManager(gextras.InternObject(m)).GetWidget()
}

func (m overlayLayout) LayoutChanged() {
	WrapLayoutManager(gextras.InternObject(m)).LayoutChanged()
}

func (m overlayLayout) Measure(widget Widget, orientation Orientation, forSize int) (minimum int, natural int, minimumBaseline int, naturalBaseline int) {
	return WrapLayoutManager(gextras.InternObject(m)).Measure(widget, orientation, forSize)
}

// OverlayLayoutChild: `GtkLayoutChild` subclass for children in a
// `GtkOverlayLayout`.
type OverlayLayoutChild interface {
	LayoutChild

	// AsLayoutChild casts the class to the LayoutChild interface.
	AsLayoutChild() LayoutChild

	// GetChildWidget retrieves the `GtkWidget` associated to the given
	// @layout_child.
	//
	// This method is inherited from LayoutChild
	GetChildWidget() Widget
	// GetLayoutManager retrieves the `GtkLayoutManager` instance that created
	// the given @layout_child.
	//
	// This method is inherited from LayoutChild
	GetLayoutManager() LayoutManager

	// ClipOverlay retrieves whether the child is clipped.
	ClipOverlay() bool
	// Measure retrieves whether the child is measured.
	Measure() bool
	// SetClipOverlay sets whether to clip this child.
	SetClipOverlay(clipOverlay bool)
	// SetMeasure sets whether to measure this child.
	SetMeasure(measure bool)
}

// overlayLayoutChild implements the OverlayLayoutChild interface.
type overlayLayoutChild struct {
	*externglib.Object
}

var _ OverlayLayoutChild = (*overlayLayoutChild)(nil)

// WrapOverlayLayoutChild wraps a GObject to a type that implements
// interface OverlayLayoutChild. It is primarily used internally.
func WrapOverlayLayoutChild(obj *externglib.Object) OverlayLayoutChild {
	return overlayLayoutChild{obj}
}

func marshalOverlayLayoutChild(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapOverlayLayoutChild(obj), nil
}

func (o overlayLayoutChild) AsLayoutChild() LayoutChild {
	return WrapLayoutChild(gextras.InternObject(o))
}

func (l overlayLayoutChild) GetChildWidget() Widget {
	return WrapLayoutChild(gextras.InternObject(l)).GetChildWidget()
}

func (l overlayLayoutChild) GetLayoutManager() LayoutManager {
	return WrapLayoutChild(gextras.InternObject(l)).GetLayoutManager()
}

func (c overlayLayoutChild) ClipOverlay() bool {
	var _arg0 *C.GtkOverlayLayoutChild // out
	var _cret C.gboolean               // in

	_arg0 = (*C.GtkOverlayLayoutChild)(unsafe.Pointer(c.Native()))

	_cret = C.gtk_overlay_layout_child_get_clip_overlay(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (c overlayLayoutChild) Measure() bool {
	var _arg0 *C.GtkOverlayLayoutChild // out
	var _cret C.gboolean               // in

	_arg0 = (*C.GtkOverlayLayoutChild)(unsafe.Pointer(c.Native()))

	_cret = C.gtk_overlay_layout_child_get_measure(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (c overlayLayoutChild) SetClipOverlay(clipOverlay bool) {
	var _arg0 *C.GtkOverlayLayoutChild // out
	var _arg1 C.gboolean               // out

	_arg0 = (*C.GtkOverlayLayoutChild)(unsafe.Pointer(c.Native()))
	if clipOverlay {
		_arg1 = C.TRUE
	}

	C.gtk_overlay_layout_child_set_clip_overlay(_arg0, _arg1)
}

func (c overlayLayoutChild) SetMeasure(measure bool) {
	var _arg0 *C.GtkOverlayLayoutChild // out
	var _arg1 C.gboolean               // out

	_arg0 = (*C.GtkOverlayLayoutChild)(unsafe.Pointer(c.Native()))
	if measure {
		_arg1 = C.TRUE
	}

	C.gtk_overlay_layout_child_set_measure(_arg0, _arg1)
}
