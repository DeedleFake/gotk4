// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	"github.com/diamondburned/gotk4/pkg/gdk/v4"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
	"github.com/diamondburned/gotk4/pkg/pango"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_text_view_get_type()), F: marshalTextView},
	})
}

// TextView: you may wish to begin by reading the [text widget conceptual
// overview][TextWidget] which gives an overview of all the objects and data
// types related to the text widget and how they work together.
//
// CSS nodes
//
//    textview.view
//    ├── border.top
//    ├── border.left
//    ├── text
//    │   ╰── [selection]
//    ├── border.right
//    ├── border.bottom
//    ╰── [window.popup]
//
// GtkTextView has a main css node with name textview and style class .view, and
// subnodes for each of the border windows, and the main text area, with names
// border and text, respectively. The border nodes each get one of the style
// classes .left, .right, .top or .bottom.
//
// A node representing the selection will appear below the text node.
//
// If a context menu is opened, the window node will appear as a subnode of the
// main node.
//
//
// Accessibility
//
// GtkTextView uses the K_ACCESSIBLE_ROLE_TEXT_BOX role.
type TextView interface {
	Widget
	Accessible
	Buildable
	ConstraintTarget
	Scrollable

	// AddChildAtAnchor adds a child widget in the text buffer, at the given
	// @anchor.
	AddChildAtAnchor(child Widget, anchor TextChildAnchor)
	// AddOverlay adds @child at a fixed coordinate in the TextView's text
	// window. The @xpos and @ypos must be in buffer coordinates (see
	// gtk_text_view_get_iter_location() to convert to buffer coordinates).
	//
	// @child will scroll with the text view.
	//
	// If instead you want a widget that will not move with the TextView
	// contents see Overlay.
	AddOverlay(child Widget, xpos int, ypos int)
	// BackwardDisplayLine moves the given @iter backward by one display
	// (wrapped) line. A display line is different from a paragraph. Paragraphs
	// are separated by newlines or other paragraph separator characters.
	// Display lines are created by line-wrapping a paragraph. If wrapping is
	// turned off, display lines and paragraphs will be the same. Display lines
	// are divided differently for each view, since they depend on the view’s
	// width; paragraphs are the same in all views, since they depend on the
	// contents of the TextBuffer.
	BackwardDisplayLine(iter *TextIter) bool
	// BackwardDisplayLineStart moves the given @iter backward to the next
	// display line start. A display line is different from a paragraph.
	// Paragraphs are separated by newlines or other paragraph separator
	// characters. Display lines are created by line-wrapping a paragraph. If
	// wrapping is turned off, display lines and paragraphs will be the same.
	// Display lines are divided differently for each view, since they depend on
	// the view’s width; paragraphs are the same in all views, since they depend
	// on the contents of the TextBuffer.
	BackwardDisplayLineStart(iter *TextIter) bool
	// BufferToWindowCoords converts coordinate (@buffer_x, @buffer_y) to
	// coordinates for the window @win, and stores the result in (@window_x,
	// @window_y).
	BufferToWindowCoords(win TextWindowType, bufferX int, bufferY int) (windowX int, windowY int)
	// ForwardDisplayLine moves the given @iter forward by one display (wrapped)
	// line. A display line is different from a paragraph. Paragraphs are
	// separated by newlines or other paragraph separator characters. Display
	// lines are created by line-wrapping a paragraph. If wrapping is turned
	// off, display lines and paragraphs will be the same. Display lines are
	// divided differently for each view, since they depend on the view’s width;
	// paragraphs are the same in all views, since they depend on the contents
	// of the TextBuffer.
	ForwardDisplayLine(iter *TextIter) bool
	// ForwardDisplayLineEnd moves the given @iter forward to the next display
	// line end. A display line is different from a paragraph. Paragraphs are
	// separated by newlines or other paragraph separator characters. Display
	// lines are created by line-wrapping a paragraph. If wrapping is turned
	// off, display lines and paragraphs will be the same. Display lines are
	// divided differently for each view, since they depend on the view’s width;
	// paragraphs are the same in all views, since they depend on the contents
	// of the TextBuffer.
	ForwardDisplayLineEnd(iter *TextIter) bool
	// AcceptsTab returns whether pressing the Tab key inserts a tab characters.
	// gtk_text_view_set_accepts_tab().
	AcceptsTab() bool
	// BottomMargin gets the bottom margin for text in the @text_view.
	BottomMargin() int
	// Buffer returns the TextBuffer being displayed by this text view. The
	// reference count on the buffer is not incremented; the caller of this
	// function won’t own a new reference.
	Buffer() TextBuffer
	// CursorLocations: given an @iter within a text layout, determine the
	// positions of the strong and weak cursors if the insertion point is at
	// that iterator. The position of each cursor is stored as a zero-width
	// rectangle. The strong cursor location is the location where characters of
	// the directionality equal to the base direction of the paragraph are
	// inserted. The weak cursor location is the location where characters of
	// the directionality opposite to the base direction of the paragraph are
	// inserted.
	//
	// If @iter is nil, the actual cursor position is used.
	//
	// Note that if @iter happens to be the actual cursor position, and there is
	// currently an IM preedit sequence being entered, the returned locations
	// will be adjusted to account for the preedit cursor’s offset within the
	// preedit sequence.
	//
	// The rectangle position is in buffer coordinates; use
	// gtk_text_view_buffer_to_window_coords() to convert these coordinates to
	// coordinates for one of the windows in the text view.
	CursorLocations(iter *TextIter) (strong gdk.Rectangle, weak gdk.Rectangle)
	// CursorVisible: find out whether the cursor should be displayed.
	CursorVisible() bool
	// Editable returns the default editability of the TextView. Tags in the
	// buffer may override this setting for some ranges of text.
	Editable() bool
	// ExtraMenu gets the menu model set with gtk_text_view_set_extra_menu() or
	// nil if none has been set.
	ExtraMenu() gio.MenuModel
	// Gutter gets a Widget that has previously been set with
	// gtk_text_view_set_gutter().
	//
	// @win must be one of GTK_TEXT_WINDOW_LEFT, GTK_TEXT_WINDOW_RIGHT,
	// GTK_TEXT_WINDOW_TOP, or GTK_TEXT_WINDOW_BOTTOM.
	Gutter(win TextWindowType) Widget
	// Indent gets the default indentation of paragraphs in @text_view. Tags in
	// the view’s buffer may override the default. The indentation may be
	// negative.
	Indent() int
	// InputHints gets the value of the TextView:input-hints property.
	InputHints() InputHints
	// InputPurpose gets the value of the TextView:input-purpose property.
	InputPurpose() InputPurpose
	// IterAtLocation retrieves the iterator at buffer coordinates @x and @y.
	// Buffer coordinates are coordinates for the entire buffer, not just the
	// currently-displayed portion. If you have coordinates from an event, you
	// have to convert those to buffer coordinates with
	// gtk_text_view_window_to_buffer_coords().
	IterAtLocation(x int, y int) (iter TextIter, ok bool)
	// IterAtPosition retrieves the iterator pointing to the character at buffer
	// coordinates @x and @y. Buffer coordinates are coordinates for the entire
	// buffer, not just the currently-displayed portion. If you have coordinates
	// from an event, you have to convert those to buffer coordinates with
	// gtk_text_view_window_to_buffer_coords().
	//
	// Note that this is different from gtk_text_view_get_iter_at_location(),
	// which returns cursor locations, i.e. positions between characters.
	IterAtPosition(x int, y int) (iter TextIter, trailing int, ok bool)
	// IterLocation gets a rectangle which roughly contains the character at
	// @iter. The rectangle position is in buffer coordinates; use
	// gtk_text_view_buffer_to_window_coords() to convert these coordinates to
	// coordinates for one of the windows in the text view.
	IterLocation(iter *TextIter) gdk.Rectangle
	// Justification gets the default justification of paragraphs in @text_view.
	// Tags in the buffer may override the default.
	Justification() Justification
	// LeftMargin gets the default left margin size of paragraphs in the
	// @text_view. Tags in the buffer may override the default.
	LeftMargin() int
	// LineAtY gets the TextIter at the start of the line containing the
	// coordinate @y. @y is in buffer coordinates, convert from window
	// coordinates with gtk_text_view_window_to_buffer_coords(). If non-nil,
	// @line_top will be filled with the coordinate of the top edge of the line.
	LineAtY(y int) (targetIter TextIter, lineTop int)
	// LineYrange gets the y coordinate of the top of the line containing @iter,
	// and the height of the line. The coordinate is a buffer coordinate;
	// convert to window coordinates with
	// gtk_text_view_buffer_to_window_coords().
	LineYrange(iter *TextIter) (y int, height int)
	// Monospace gets the value of the TextView:monospace property.
	Monospace() bool
	// Overwrite returns whether the TextView is in overwrite mode or not.
	Overwrite() bool
	// PixelsAboveLines gets the default number of pixels to put above
	// paragraphs. Adding this function with
	// gtk_text_view_get_pixels_below_lines() is equal to the line space between
	// each paragraph.
	PixelsAboveLines() int
	// PixelsBelowLines gets the value set by
	// gtk_text_view_set_pixels_below_lines().
	//
	// The line space is the sum of the value returned by this function and the
	// value returned by gtk_text_view_get_pixels_above_lines().
	PixelsBelowLines() int
	// PixelsInsideWrap gets the value set by
	// gtk_text_view_set_pixels_inside_wrap().
	PixelsInsideWrap() int
	// RightMargin gets the default right margin for text in @text_view. Tags in
	// the buffer may override the default.
	RightMargin() int
	// Tabs gets the default tabs for @text_view. Tags in the buffer may
	// override the defaults. The returned array will be nil if “standard”
	// (8-space) tabs are used. Free the return value with
	// pango_tab_array_free().
	Tabs() *pango.TabArray
	// TopMargin gets the top margin for text in the @text_view.
	TopMargin() int
	// VisibleRect fills @visible_rect with the currently-visible region of the
	// buffer, in buffer coordinates. Convert to window coordinates with
	// gtk_text_view_buffer_to_window_coords().
	VisibleRect() gdk.Rectangle
	// WrapMode gets the line wrapping for the view.
	WrapMode() WrapMode
	// ImContextFilterKeypress: allow the TextView input method to internally
	// handle key press and release events. If this function returns true, then
	// no further processing should be done for this key event. See
	// gtk_im_context_filter_keypress().
	//
	// Note that you are expected to call this function from your handler when
	// overriding key event handling. This is needed in the case when you need
	// to insert your own key handling between the input method and the default
	// key event handling of the TextView.
	//
	//    static gboolean
	//    gtk_foo_bar_key_press_event (GtkWidget *widget,
	//                                 GdkEvent  *event)
	//    {
	//      guint keyval;
	//
	//      gdk_event_get_keyval ((GdkEvent*)event, &keyval);
	//
	//      if (keyval == GDK_KEY_Return || keyval == GDK_KEY_KP_Enter)
	//        {
	//          if (gtk_text_view_im_context_filter_keypress (GTK_TEXT_VIEW (widget), event))
	//            return TRUE;
	//        }
	//
	//      // Do some stuff
	//
	//      return GTK_WIDGET_CLASS (gtk_foo_bar_parent_class)->key_press_event (widget, event);
	//    }
	ImContextFilterKeypress(event gdk.Event) bool
	// MoveMarkOnscreen moves a mark within the buffer so that it's located
	// within the currently-visible text area.
	MoveMarkOnscreen(mark TextMark) bool
	// MoveOverlay updates the position of a child, as for
	// gtk_text_view_add_overlay().
	MoveOverlay(child Widget, xpos int, ypos int)
	// MoveVisually: move the iterator a given number of characters visually,
	// treating it as the strong cursor position. If @count is positive, then
	// the new strong cursor position will be @count positions to the right of
	// the old cursor position. If @count is negative then the new strong cursor
	// position will be @count positions to the left of the old cursor position.
	//
	// In the presence of bi-directional text, the correspondence between
	// logical and visual order will depend on the direction of the current run,
	// and there may be jumps when the cursor is moved off of the end of a run.
	MoveVisually(iter *TextIter, count int) bool
	// PlaceCursorOnscreen moves the cursor to the currently visible region of
	// the buffer, if it isn’t there already.
	PlaceCursorOnscreen() bool
	// Remove removes a child widget from @text_view.
	Remove(child Widget)
	// ResetCursorBlink ensures that the cursor is shown (i.e. not in an 'off'
	// blink interval) and resets the time that it will stay blinking (or
	// visible, in case blinking is disabled).
	//
	// This function should be called in response to user input (e.g. from
	// derived classes that override the textview's event handlers).
	ResetCursorBlink()
	// ResetImContext: reset the input method context of the text view if
	// needed.
	//
	// This can be necessary in the case where modifying the buffer would
	// confuse on-going input method behavior.
	ResetImContext()
	// ScrollMarkOnscreen scrolls @text_view the minimum distance such that
	// @mark is contained within the visible area of the widget.
	ScrollMarkOnscreen(mark TextMark)
	// ScrollToIter scrolls @text_view so that @iter is on the screen in the
	// position indicated by @xalign and @yalign. An alignment of 0.0 indicates
	// left or top, 1.0 indicates right or bottom, 0.5 means center. If
	// @use_align is false, the text scrolls the minimal distance to get the
	// mark onscreen, possibly not scrolling at all. The effective screen for
	// purposes of this function is reduced by a margin of size @within_margin.
	//
	// Note that this function uses the currently-computed height of the lines
	// in the text buffer. Line heights are computed in an idle handler; so this
	// function may not have the desired effect if it’s called before the height
	// computations. To avoid oddness, consider using
	// gtk_text_view_scroll_to_mark() which saves a point to be scrolled to
	// after line validation.
	ScrollToIter(iter *TextIter, withinMargin float64, useAlign bool, xalign float64, yalign float64) bool
	// ScrollToMark scrolls @text_view so that @mark is on the screen in the
	// position indicated by @xalign and @yalign. An alignment of 0.0 indicates
	// left or top, 1.0 indicates right or bottom, 0.5 means center. If
	// @use_align is false, the text scrolls the minimal distance to get the
	// mark onscreen, possibly not scrolling at all. The effective screen for
	// purposes of this function is reduced by a margin of size @within_margin.
	ScrollToMark(mark TextMark, withinMargin float64, useAlign bool, xalign float64, yalign float64)
	// SetAcceptsTab sets the behavior of the text widget when the Tab key is
	// pressed. If @accepts_tab is true, a tab character is inserted. If
	// @accepts_tab is false the keyboard focus is moved to the next widget in
	// the focus chain.
	SetAcceptsTab(acceptsTab bool)
	// SetBottomMargin sets the bottom margin for text in @text_view.
	//
	// Note that this function is confusingly named. In CSS terms, the value set
	// here is padding.
	SetBottomMargin(bottomMargin int)
	// SetBuffer sets @buffer as the buffer being displayed by @text_view. The
	// previous buffer displayed by the text view is unreferenced, and a
	// reference is added to @buffer. If you owned a reference to @buffer before
	// passing it to this function, you must remove that reference yourself;
	// TextView will not “adopt” it.
	SetBuffer(buffer TextBuffer)
	// SetCursorVisible toggles whether the insertion point should be displayed.
	// A buffer with no editable text probably shouldn’t have a visible cursor,
	// so you may want to turn the cursor off.
	//
	// Note that this property may be overridden by the
	// Settings:gtk-keynav-use-caret settings.
	SetCursorVisible(setting bool)
	// SetEditable sets the default editability of the TextView. You can
	// override this default setting with tags in the buffer, using the
	// “editable” attribute of tags.
	SetEditable(setting bool)
	// SetExtraMenu sets a menu model to add when constructing the context menu
	// for @text_view. You can pass nil to remove a previously set extra menu.
	SetExtraMenu(model gio.MenuModel)
	// SetGutter places @widget into the gutter specified by @win.
	//
	// @win must be one of GTK_TEXT_WINDOW_LEFT, GTK_TEXT_WINDOW_RIGHT,
	// GTK_TEXT_WINDOW_TOP, or GTK_TEXT_WINDOW_BOTTOM.
	SetGutter(win TextWindowType, widget Widget)
	// SetIndent sets the default indentation for paragraphs in @text_view. Tags
	// in the buffer may override the default.
	SetIndent(indent int)
	// SetInputHints sets the TextView:input-hints property, which allows input
	// methods to fine-tune their behaviour.
	SetInputHints(hints InputHints)
	// SetInputPurpose sets the TextView:input-purpose property which can be
	// used by on-screen keyboards and other input methods to adjust their
	// behaviour.
	SetInputPurpose(purpose InputPurpose)
	// SetJustification sets the default justification of text in @text_view.
	// Tags in the view’s buffer may override the default.
	SetJustification(justification Justification)
	// SetLeftMargin sets the default left margin for text in @text_view. Tags
	// in the buffer may override the default.
	//
	// Note that this function is confusingly named. In CSS terms, the value set
	// here is padding.
	SetLeftMargin(leftMargin int)
	// SetMonospace sets the TextView:monospace property, which indicates that
	// the text view should use monospace fonts.
	SetMonospace(monospace bool)
	// SetOverwrite changes the TextView overwrite mode.
	SetOverwrite(overwrite bool)
	// SetPixelsAboveLines sets the default number of blank pixels above
	// paragraphs in @text_view. Tags in the buffer for @text_view may override
	// the defaults.
	SetPixelsAboveLines(pixelsAboveLines int)
	// SetPixelsBelowLines sets the default number of pixels of blank space to
	// put below paragraphs in @text_view. May be overridden by tags applied to
	// @text_view’s buffer.
	SetPixelsBelowLines(pixelsBelowLines int)
	// SetPixelsInsideWrap sets the default number of pixels of blank space to
	// leave between display/wrapped lines within a paragraph. May be overridden
	// by tags in @text_view’s buffer.
	SetPixelsInsideWrap(pixelsInsideWrap int)
	// SetRightMargin sets the default right margin for text in the text view.
	// Tags in the buffer may override the default.
	//
	// Note that this function is confusingly named. In CSS terms, the value set
	// here is padding.
	SetRightMargin(rightMargin int)
	// SetTabs sets the default tab stops for paragraphs in @text_view. Tags in
	// the buffer may override the default.
	SetTabs(tabs *pango.TabArray)
	// SetTopMargin sets the top margin for text in @text_view.
	//
	// Note that this function is confusingly named. In CSS terms, the value set
	// here is padding.
	SetTopMargin(topMargin int)
	// SetWrapMode sets the line wrapping for the view.
	SetWrapMode(wrapMode WrapMode)
	// StartsDisplayLine determines whether @iter is at the start of a display
	// line. See gtk_text_view_forward_display_line() for an explanation of
	// display lines vs. paragraphs.
	StartsDisplayLine(iter *TextIter) bool
	// WindowToBufferCoords converts coordinates on the window identified by
	// @win to buffer coordinates, storing the result in (@buffer_x,@buffer_y).
	WindowToBufferCoords(win TextWindowType, windowX int, windowY int) (bufferX int, bufferY int)
}

// textView implements the TextView interface.
type textView struct {
	Widget
	Accessible
	Buildable
	ConstraintTarget
	Scrollable
}

var _ TextView = (*textView)(nil)

// WrapTextView wraps a GObject to the right type. It is
// primarily used internally.
func WrapTextView(obj *externglib.Object) TextView {
	return TextView{
		Widget:           WrapWidget(obj),
		Accessible:       WrapAccessible(obj),
		Buildable:        WrapBuildable(obj),
		ConstraintTarget: WrapConstraintTarget(obj),
		Scrollable:       WrapScrollable(obj),
	}
}

func marshalTextView(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapTextView(obj), nil
}

// NewTextView constructs a class TextView.
func NewTextView() TextView {
	var cret C.GtkTextView

	cret = C.gtk_text_view_new()

	var textView TextView

	textView = gextras.CastObject(externglib.Take(unsafe.Pointer(cret.Native()))).(TextView)

	return textView
}

// NewTextViewWithBuffer constructs a class TextView.
func NewTextViewWithBuffer(buffer TextBuffer) TextView {
	var arg1 *C.GtkTextBuffer

	arg1 = (*C.GtkTextBuffer)(unsafe.Pointer(buffer.Native()))

	var cret C.GtkTextView

	cret = C.gtk_text_view_new_with_buffer(arg1)

	var textView TextView

	textView = gextras.CastObject(externglib.Take(unsafe.Pointer(cret.Native()))).(TextView)

	return textView
}

// AddChildAtAnchor adds a child widget in the text buffer, at the given
// @anchor.
func (t textView) AddChildAtAnchor(child Widget, anchor TextChildAnchor) {
	var arg0 *C.GtkTextView
	var arg1 *C.GtkWidget
	var arg2 *C.GtkTextChildAnchor

	arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	arg1 = (*C.GtkWidget)(unsafe.Pointer(child.Native()))
	arg2 = (*C.GtkTextChildAnchor)(unsafe.Pointer(anchor.Native()))

	C.gtk_text_view_add_child_at_anchor(arg0, arg1, arg2)
}

// AddOverlay adds @child at a fixed coordinate in the TextView's text
// window. The @xpos and @ypos must be in buffer coordinates (see
// gtk_text_view_get_iter_location() to convert to buffer coordinates).
//
// @child will scroll with the text view.
//
// If instead you want a widget that will not move with the TextView
// contents see Overlay.
func (t textView) AddOverlay(child Widget, xpos int, ypos int) {
	var arg0 *C.GtkTextView
	var arg1 *C.GtkWidget
	var arg2 C.int
	var arg3 C.int

	arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	arg1 = (*C.GtkWidget)(unsafe.Pointer(child.Native()))
	arg2 = C.int(xpos)
	arg3 = C.int(ypos)

	C.gtk_text_view_add_overlay(arg0, arg1, arg2, arg3)
}

// BackwardDisplayLine moves the given @iter backward by one display
// (wrapped) line. A display line is different from a paragraph. Paragraphs
// are separated by newlines or other paragraph separator characters.
// Display lines are created by line-wrapping a paragraph. If wrapping is
// turned off, display lines and paragraphs will be the same. Display lines
// are divided differently for each view, since they depend on the view’s
// width; paragraphs are the same in all views, since they depend on the
// contents of the TextBuffer.
func (t textView) BackwardDisplayLine(iter *TextIter) bool {
	var arg0 *C.GtkTextView
	var arg1 *C.GtkTextIter

	arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	arg1 = (*C.GtkTextIter)(unsafe.Pointer(iter.Native()))

	var cret C.gboolean

	cret = C.gtk_text_view_backward_display_line(arg0, arg1)

	var ok bool

	if cret {
		ok = true
	}

	return ok
}

// BackwardDisplayLineStart moves the given @iter backward to the next
// display line start. A display line is different from a paragraph.
// Paragraphs are separated by newlines or other paragraph separator
// characters. Display lines are created by line-wrapping a paragraph. If
// wrapping is turned off, display lines and paragraphs will be the same.
// Display lines are divided differently for each view, since they depend on
// the view’s width; paragraphs are the same in all views, since they depend
// on the contents of the TextBuffer.
func (t textView) BackwardDisplayLineStart(iter *TextIter) bool {
	var arg0 *C.GtkTextView
	var arg1 *C.GtkTextIter

	arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	arg1 = (*C.GtkTextIter)(unsafe.Pointer(iter.Native()))

	var cret C.gboolean

	cret = C.gtk_text_view_backward_display_line_start(arg0, arg1)

	var ok bool

	if cret {
		ok = true
	}

	return ok
}

// BufferToWindowCoords converts coordinate (@buffer_x, @buffer_y) to
// coordinates for the window @win, and stores the result in (@window_x,
// @window_y).
func (t textView) BufferToWindowCoords(win TextWindowType, bufferX int, bufferY int) (windowX int, windowY int) {
	var arg0 *C.GtkTextView
	var arg1 C.GtkTextWindowType
	var arg2 C.int
	var arg3 C.int

	arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	arg1 = (C.GtkTextWindowType)(win)
	arg2 = C.int(bufferX)
	arg3 = C.int(bufferY)

	var arg4 C.int
	var arg5 C.int

	C.gtk_text_view_buffer_to_window_coords(arg0, arg1, arg2, arg3, &arg4, &arg5)

	var windowX int
	var windowY int

	windowX = (int)(arg4)
	windowY = (int)(arg5)

	return windowX, windowY
}

// ForwardDisplayLine moves the given @iter forward by one display (wrapped)
// line. A display line is different from a paragraph. Paragraphs are
// separated by newlines or other paragraph separator characters. Display
// lines are created by line-wrapping a paragraph. If wrapping is turned
// off, display lines and paragraphs will be the same. Display lines are
// divided differently for each view, since they depend on the view’s width;
// paragraphs are the same in all views, since they depend on the contents
// of the TextBuffer.
func (t textView) ForwardDisplayLine(iter *TextIter) bool {
	var arg0 *C.GtkTextView
	var arg1 *C.GtkTextIter

	arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	arg1 = (*C.GtkTextIter)(unsafe.Pointer(iter.Native()))

	var cret C.gboolean

	cret = C.gtk_text_view_forward_display_line(arg0, arg1)

	var ok bool

	if cret {
		ok = true
	}

	return ok
}

// ForwardDisplayLineEnd moves the given @iter forward to the next display
// line end. A display line is different from a paragraph. Paragraphs are
// separated by newlines or other paragraph separator characters. Display
// lines are created by line-wrapping a paragraph. If wrapping is turned
// off, display lines and paragraphs will be the same. Display lines are
// divided differently for each view, since they depend on the view’s width;
// paragraphs are the same in all views, since they depend on the contents
// of the TextBuffer.
func (t textView) ForwardDisplayLineEnd(iter *TextIter) bool {
	var arg0 *C.GtkTextView
	var arg1 *C.GtkTextIter

	arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	arg1 = (*C.GtkTextIter)(unsafe.Pointer(iter.Native()))

	var cret C.gboolean

	cret = C.gtk_text_view_forward_display_line_end(arg0, arg1)

	var ok bool

	if cret {
		ok = true
	}

	return ok
}

// AcceptsTab returns whether pressing the Tab key inserts a tab characters.
// gtk_text_view_set_accepts_tab().
func (t textView) AcceptsTab() bool {
	var arg0 *C.GtkTextView

	arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))

	var cret C.gboolean

	cret = C.gtk_text_view_get_accepts_tab(arg0)

	var ok bool

	if cret {
		ok = true
	}

	return ok
}

// BottomMargin gets the bottom margin for text in the @text_view.
func (t textView) BottomMargin() int {
	var arg0 *C.GtkTextView

	arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))

	var cret C.int

	cret = C.gtk_text_view_get_bottom_margin(arg0)

	var gint int

	gint = (int)(cret)

	return gint
}

// Buffer returns the TextBuffer being displayed by this text view. The
// reference count on the buffer is not incremented; the caller of this
// function won’t own a new reference.
func (t textView) Buffer() TextBuffer {
	var arg0 *C.GtkTextView

	arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))

	var cret *C.GtkTextBuffer

	cret = C.gtk_text_view_get_buffer(arg0)

	var textBuffer TextBuffer

	textBuffer = gextras.CastObject(externglib.Take(unsafe.Pointer(cret.Native()))).(TextBuffer)

	return textBuffer
}

// CursorLocations: given an @iter within a text layout, determine the
// positions of the strong and weak cursors if the insertion point is at
// that iterator. The position of each cursor is stored as a zero-width
// rectangle. The strong cursor location is the location where characters of
// the directionality equal to the base direction of the paragraph are
// inserted. The weak cursor location is the location where characters of
// the directionality opposite to the base direction of the paragraph are
// inserted.
//
// If @iter is nil, the actual cursor position is used.
//
// Note that if @iter happens to be the actual cursor position, and there is
// currently an IM preedit sequence being entered, the returned locations
// will be adjusted to account for the preedit cursor’s offset within the
// preedit sequence.
//
// The rectangle position is in buffer coordinates; use
// gtk_text_view_buffer_to_window_coords() to convert these coordinates to
// coordinates for one of the windows in the text view.
func (t textView) CursorLocations(iter *TextIter) (strong gdk.Rectangle, weak gdk.Rectangle) {
	var arg0 *C.GtkTextView
	var arg1 *C.GtkTextIter

	arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	arg1 = (*C.GtkTextIter)(unsafe.Pointer(iter.Native()))

	var strong gdk.Rectangle
	var weak gdk.Rectangle

	C.gtk_text_view_get_cursor_locations(arg0, arg1, (*C.GdkRectangle)(unsafe.Pointer(&strong)), (*C.GdkRectangle)(unsafe.Pointer(&weak)))

	return strong, weak
}

// CursorVisible: find out whether the cursor should be displayed.
func (t textView) CursorVisible() bool {
	var arg0 *C.GtkTextView

	arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))

	var cret C.gboolean

	cret = C.gtk_text_view_get_cursor_visible(arg0)

	var ok bool

	if cret {
		ok = true
	}

	return ok
}

// Editable returns the default editability of the TextView. Tags in the
// buffer may override this setting for some ranges of text.
func (t textView) Editable() bool {
	var arg0 *C.GtkTextView

	arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))

	var cret C.gboolean

	cret = C.gtk_text_view_get_editable(arg0)

	var ok bool

	if cret {
		ok = true
	}

	return ok
}

// ExtraMenu gets the menu model set with gtk_text_view_set_extra_menu() or
// nil if none has been set.
func (t textView) ExtraMenu() gio.MenuModel {
	var arg0 *C.GtkTextView

	arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))

	var cret *C.GMenuModel

	cret = C.gtk_text_view_get_extra_menu(arg0)

	var menuModel gio.MenuModel

	menuModel = gextras.CastObject(externglib.Take(unsafe.Pointer(cret.Native()))).(gio.MenuModel)

	return menuModel
}

// Gutter gets a Widget that has previously been set with
// gtk_text_view_set_gutter().
//
// @win must be one of GTK_TEXT_WINDOW_LEFT, GTK_TEXT_WINDOW_RIGHT,
// GTK_TEXT_WINDOW_TOP, or GTK_TEXT_WINDOW_BOTTOM.
func (t textView) Gutter(win TextWindowType) Widget {
	var arg0 *C.GtkTextView
	var arg1 C.GtkTextWindowType

	arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	arg1 = (C.GtkTextWindowType)(win)

	var cret *C.GtkWidget

	cret = C.gtk_text_view_get_gutter(arg0, arg1)

	var widget Widget

	widget = gextras.CastObject(externglib.Take(unsafe.Pointer(cret.Native()))).(Widget)

	return widget
}

// Indent gets the default indentation of paragraphs in @text_view. Tags in
// the view’s buffer may override the default. The indentation may be
// negative.
func (t textView) Indent() int {
	var arg0 *C.GtkTextView

	arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))

	var cret C.int

	cret = C.gtk_text_view_get_indent(arg0)

	var gint int

	gint = (int)(cret)

	return gint
}

// InputHints gets the value of the TextView:input-hints property.
func (t textView) InputHints() InputHints {
	var arg0 *C.GtkTextView

	arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))

	var cret C.GtkInputHints

	cret = C.gtk_text_view_get_input_hints(arg0)

	var inputHints InputHints

	inputHints = InputHints(cret)

	return inputHints
}

// InputPurpose gets the value of the TextView:input-purpose property.
func (t textView) InputPurpose() InputPurpose {
	var arg0 *C.GtkTextView

	arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))

	var cret C.GtkInputPurpose

	cret = C.gtk_text_view_get_input_purpose(arg0)

	var inputPurpose InputPurpose

	inputPurpose = InputPurpose(cret)

	return inputPurpose
}

// IterAtLocation retrieves the iterator at buffer coordinates @x and @y.
// Buffer coordinates are coordinates for the entire buffer, not just the
// currently-displayed portion. If you have coordinates from an event, you
// have to convert those to buffer coordinates with
// gtk_text_view_window_to_buffer_coords().
func (t textView) IterAtLocation(x int, y int) (iter TextIter, ok bool) {
	var arg0 *C.GtkTextView
	var arg2 C.int
	var arg3 C.int

	arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	arg2 = C.int(x)
	arg3 = C.int(y)

	var iter TextIter
	var cret C.gboolean

	cret = C.gtk_text_view_get_iter_at_location(arg0, arg2, arg3, (*C.GtkTextIter)(unsafe.Pointer(&iter)))

	var ok bool

	if cret {
		ok = true
	}

	return iter, ok
}

// IterAtPosition retrieves the iterator pointing to the character at buffer
// coordinates @x and @y. Buffer coordinates are coordinates for the entire
// buffer, not just the currently-displayed portion. If you have coordinates
// from an event, you have to convert those to buffer coordinates with
// gtk_text_view_window_to_buffer_coords().
//
// Note that this is different from gtk_text_view_get_iter_at_location(),
// which returns cursor locations, i.e. positions between characters.
func (t textView) IterAtPosition(x int, y int) (iter TextIter, trailing int, ok bool) {
	var arg0 *C.GtkTextView
	var arg3 C.int
	var arg4 C.int

	arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	arg3 = C.int(x)
	arg4 = C.int(y)

	var iter TextIter
	var arg2 C.int
	var cret C.gboolean

	cret = C.gtk_text_view_get_iter_at_position(arg0, arg3, arg4, (*C.GtkTextIter)(unsafe.Pointer(&iter)), &arg2)

	var trailing int
	var ok bool

	trailing = (int)(arg2)
	if cret {
		ok = true
	}

	return iter, trailing, ok
}

// IterLocation gets a rectangle which roughly contains the character at
// @iter. The rectangle position is in buffer coordinates; use
// gtk_text_view_buffer_to_window_coords() to convert these coordinates to
// coordinates for one of the windows in the text view.
func (t textView) IterLocation(iter *TextIter) gdk.Rectangle {
	var arg0 *C.GtkTextView
	var arg1 *C.GtkTextIter

	arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	arg1 = (*C.GtkTextIter)(unsafe.Pointer(iter.Native()))

	var location gdk.Rectangle

	C.gtk_text_view_get_iter_location(arg0, arg1, (*C.GdkRectangle)(unsafe.Pointer(&location)))

	return location
}

// Justification gets the default justification of paragraphs in @text_view.
// Tags in the buffer may override the default.
func (t textView) Justification() Justification {
	var arg0 *C.GtkTextView

	arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))

	var cret C.GtkJustification

	cret = C.gtk_text_view_get_justification(arg0)

	var justification Justification

	justification = Justification(cret)

	return justification
}

// LeftMargin gets the default left margin size of paragraphs in the
// @text_view. Tags in the buffer may override the default.
func (t textView) LeftMargin() int {
	var arg0 *C.GtkTextView

	arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))

	var cret C.int

	cret = C.gtk_text_view_get_left_margin(arg0)

	var gint int

	gint = (int)(cret)

	return gint
}

// LineAtY gets the TextIter at the start of the line containing the
// coordinate @y. @y is in buffer coordinates, convert from window
// coordinates with gtk_text_view_window_to_buffer_coords(). If non-nil,
// @line_top will be filled with the coordinate of the top edge of the line.
func (t textView) LineAtY(y int) (targetIter TextIter, lineTop int) {
	var arg0 *C.GtkTextView
	var arg2 C.int

	arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	arg2 = C.int(y)

	var targetIter TextIter
	var arg3 C.int

	C.gtk_text_view_get_line_at_y(arg0, arg2, (*C.GtkTextIter)(unsafe.Pointer(&targetIter)), &arg3)

	var lineTop int

	lineTop = (int)(arg3)

	return targetIter, lineTop
}

// LineYrange gets the y coordinate of the top of the line containing @iter,
// and the height of the line. The coordinate is a buffer coordinate;
// convert to window coordinates with
// gtk_text_view_buffer_to_window_coords().
func (t textView) LineYrange(iter *TextIter) (y int, height int) {
	var arg0 *C.GtkTextView
	var arg1 *C.GtkTextIter

	arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	arg1 = (*C.GtkTextIter)(unsafe.Pointer(iter.Native()))

	var arg2 C.int
	var arg3 C.int

	C.gtk_text_view_get_line_yrange(arg0, arg1, &arg2, &arg3)

	var y int
	var height int

	y = (int)(arg2)
	height = (int)(arg3)

	return y, height
}

// Monospace gets the value of the TextView:monospace property.
func (t textView) Monospace() bool {
	var arg0 *C.GtkTextView

	arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))

	var cret C.gboolean

	cret = C.gtk_text_view_get_monospace(arg0)

	var ok bool

	if cret {
		ok = true
	}

	return ok
}

// Overwrite returns whether the TextView is in overwrite mode or not.
func (t textView) Overwrite() bool {
	var arg0 *C.GtkTextView

	arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))

	var cret C.gboolean

	cret = C.gtk_text_view_get_overwrite(arg0)

	var ok bool

	if cret {
		ok = true
	}

	return ok
}

// PixelsAboveLines gets the default number of pixels to put above
// paragraphs. Adding this function with
// gtk_text_view_get_pixels_below_lines() is equal to the line space between
// each paragraph.
func (t textView) PixelsAboveLines() int {
	var arg0 *C.GtkTextView

	arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))

	var cret C.int

	cret = C.gtk_text_view_get_pixels_above_lines(arg0)

	var gint int

	gint = (int)(cret)

	return gint
}

// PixelsBelowLines gets the value set by
// gtk_text_view_set_pixels_below_lines().
//
// The line space is the sum of the value returned by this function and the
// value returned by gtk_text_view_get_pixels_above_lines().
func (t textView) PixelsBelowLines() int {
	var arg0 *C.GtkTextView

	arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))

	var cret C.int

	cret = C.gtk_text_view_get_pixels_below_lines(arg0)

	var gint int

	gint = (int)(cret)

	return gint
}

// PixelsInsideWrap gets the value set by
// gtk_text_view_set_pixels_inside_wrap().
func (t textView) PixelsInsideWrap() int {
	var arg0 *C.GtkTextView

	arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))

	var cret C.int

	cret = C.gtk_text_view_get_pixels_inside_wrap(arg0)

	var gint int

	gint = (int)(cret)

	return gint
}

// RightMargin gets the default right margin for text in @text_view. Tags in
// the buffer may override the default.
func (t textView) RightMargin() int {
	var arg0 *C.GtkTextView

	arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))

	var cret C.int

	cret = C.gtk_text_view_get_right_margin(arg0)

	var gint int

	gint = (int)(cret)

	return gint
}

// Tabs gets the default tabs for @text_view. Tags in the buffer may
// override the defaults. The returned array will be nil if “standard”
// (8-space) tabs are used. Free the return value with
// pango_tab_array_free().
func (t textView) Tabs() *pango.TabArray {
	var arg0 *C.GtkTextView

	arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))

	var cret *C.PangoTabArray

	cret = C.gtk_text_view_get_tabs(arg0)

	var tabArray *pango.TabArray

	tabArray = pango.WrapTabArray(unsafe.Pointer(cret))
	runtime.SetFinalizer(tabArray, func(v *pango.TabArray) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return tabArray
}

// TopMargin gets the top margin for text in the @text_view.
func (t textView) TopMargin() int {
	var arg0 *C.GtkTextView

	arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))

	var cret C.int

	cret = C.gtk_text_view_get_top_margin(arg0)

	var gint int

	gint = (int)(cret)

	return gint
}

// VisibleRect fills @visible_rect with the currently-visible region of the
// buffer, in buffer coordinates. Convert to window coordinates with
// gtk_text_view_buffer_to_window_coords().
func (t textView) VisibleRect() gdk.Rectangle {
	var arg0 *C.GtkTextView

	arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))

	var visibleRect gdk.Rectangle

	C.gtk_text_view_get_visible_rect(arg0, (*C.GdkRectangle)(unsafe.Pointer(&visibleRect)))

	return visibleRect
}

// WrapMode gets the line wrapping for the view.
func (t textView) WrapMode() WrapMode {
	var arg0 *C.GtkTextView

	arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))

	var cret C.GtkWrapMode

	cret = C.gtk_text_view_get_wrap_mode(arg0)

	var wrapMode WrapMode

	wrapMode = WrapMode(cret)

	return wrapMode
}

// ImContextFilterKeypress: allow the TextView input method to internally
// handle key press and release events. If this function returns true, then
// no further processing should be done for this key event. See
// gtk_im_context_filter_keypress().
//
// Note that you are expected to call this function from your handler when
// overriding key event handling. This is needed in the case when you need
// to insert your own key handling between the input method and the default
// key event handling of the TextView.
//
//    static gboolean
//    gtk_foo_bar_key_press_event (GtkWidget *widget,
//                                 GdkEvent  *event)
//    {
//      guint keyval;
//
//      gdk_event_get_keyval ((GdkEvent*)event, &keyval);
//
//      if (keyval == GDK_KEY_Return || keyval == GDK_KEY_KP_Enter)
//        {
//          if (gtk_text_view_im_context_filter_keypress (GTK_TEXT_VIEW (widget), event))
//            return TRUE;
//        }
//
//      // Do some stuff
//
//      return GTK_WIDGET_CLASS (gtk_foo_bar_parent_class)->key_press_event (widget, event);
//    }
func (t textView) ImContextFilterKeypress(event gdk.Event) bool {
	var arg0 *C.GtkTextView
	var arg1 *C.GdkEvent

	arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	arg1 = (*C.GdkEvent)(unsafe.Pointer(event.Native()))

	var cret C.gboolean

	cret = C.gtk_text_view_im_context_filter_keypress(arg0, arg1)

	var ok bool

	if cret {
		ok = true
	}

	return ok
}

// MoveMarkOnscreen moves a mark within the buffer so that it's located
// within the currently-visible text area.
func (t textView) MoveMarkOnscreen(mark TextMark) bool {
	var arg0 *C.GtkTextView
	var arg1 *C.GtkTextMark

	arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	arg1 = (*C.GtkTextMark)(unsafe.Pointer(mark.Native()))

	var cret C.gboolean

	cret = C.gtk_text_view_move_mark_onscreen(arg0, arg1)

	var ok bool

	if cret {
		ok = true
	}

	return ok
}

// MoveOverlay updates the position of a child, as for
// gtk_text_view_add_overlay().
func (t textView) MoveOverlay(child Widget, xpos int, ypos int) {
	var arg0 *C.GtkTextView
	var arg1 *C.GtkWidget
	var arg2 C.int
	var arg3 C.int

	arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	arg1 = (*C.GtkWidget)(unsafe.Pointer(child.Native()))
	arg2 = C.int(xpos)
	arg3 = C.int(ypos)

	C.gtk_text_view_move_overlay(arg0, arg1, arg2, arg3)
}

// MoveVisually: move the iterator a given number of characters visually,
// treating it as the strong cursor position. If @count is positive, then
// the new strong cursor position will be @count positions to the right of
// the old cursor position. If @count is negative then the new strong cursor
// position will be @count positions to the left of the old cursor position.
//
// In the presence of bi-directional text, the correspondence between
// logical and visual order will depend on the direction of the current run,
// and there may be jumps when the cursor is moved off of the end of a run.
func (t textView) MoveVisually(iter *TextIter, count int) bool {
	var arg0 *C.GtkTextView
	var arg1 *C.GtkTextIter
	var arg2 C.int

	arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	arg1 = (*C.GtkTextIter)(unsafe.Pointer(iter.Native()))
	arg2 = C.int(count)

	var cret C.gboolean

	cret = C.gtk_text_view_move_visually(arg0, arg1, arg2)

	var ok bool

	if cret {
		ok = true
	}

	return ok
}

// PlaceCursorOnscreen moves the cursor to the currently visible region of
// the buffer, if it isn’t there already.
func (t textView) PlaceCursorOnscreen() bool {
	var arg0 *C.GtkTextView

	arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))

	var cret C.gboolean

	cret = C.gtk_text_view_place_cursor_onscreen(arg0)

	var ok bool

	if cret {
		ok = true
	}

	return ok
}

// Remove removes a child widget from @text_view.
func (t textView) Remove(child Widget) {
	var arg0 *C.GtkTextView
	var arg1 *C.GtkWidget

	arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	arg1 = (*C.GtkWidget)(unsafe.Pointer(child.Native()))

	C.gtk_text_view_remove(arg0, arg1)
}

// ResetCursorBlink ensures that the cursor is shown (i.e. not in an 'off'
// blink interval) and resets the time that it will stay blinking (or
// visible, in case blinking is disabled).
//
// This function should be called in response to user input (e.g. from
// derived classes that override the textview's event handlers).
func (t textView) ResetCursorBlink() {
	var arg0 *C.GtkTextView

	arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))

	C.gtk_text_view_reset_cursor_blink(arg0)
}

// ResetImContext: reset the input method context of the text view if
// needed.
//
// This can be necessary in the case where modifying the buffer would
// confuse on-going input method behavior.
func (t textView) ResetImContext() {
	var arg0 *C.GtkTextView

	arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))

	C.gtk_text_view_reset_im_context(arg0)
}

// ScrollMarkOnscreen scrolls @text_view the minimum distance such that
// @mark is contained within the visible area of the widget.
func (t textView) ScrollMarkOnscreen(mark TextMark) {
	var arg0 *C.GtkTextView
	var arg1 *C.GtkTextMark

	arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	arg1 = (*C.GtkTextMark)(unsafe.Pointer(mark.Native()))

	C.gtk_text_view_scroll_mark_onscreen(arg0, arg1)
}

// ScrollToIter scrolls @text_view so that @iter is on the screen in the
// position indicated by @xalign and @yalign. An alignment of 0.0 indicates
// left or top, 1.0 indicates right or bottom, 0.5 means center. If
// @use_align is false, the text scrolls the minimal distance to get the
// mark onscreen, possibly not scrolling at all. The effective screen for
// purposes of this function is reduced by a margin of size @within_margin.
//
// Note that this function uses the currently-computed height of the lines
// in the text buffer. Line heights are computed in an idle handler; so this
// function may not have the desired effect if it’s called before the height
// computations. To avoid oddness, consider using
// gtk_text_view_scroll_to_mark() which saves a point to be scrolled to
// after line validation.
func (t textView) ScrollToIter(iter *TextIter, withinMargin float64, useAlign bool, xalign float64, yalign float64) bool {
	var arg0 *C.GtkTextView
	var arg1 *C.GtkTextIter
	var arg2 C.double
	var arg3 C.gboolean
	var arg4 C.double
	var arg5 C.double

	arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	arg1 = (*C.GtkTextIter)(unsafe.Pointer(iter.Native()))
	arg2 = C.double(withinMargin)
	if useAlign {
		arg3 = C.gboolean(1)
	}
	arg4 = C.double(xalign)
	arg5 = C.double(yalign)

	var cret C.gboolean

	cret = C.gtk_text_view_scroll_to_iter(arg0, arg1, arg2, arg3, arg4, arg5)

	var ok bool

	if cret {
		ok = true
	}

	return ok
}

// ScrollToMark scrolls @text_view so that @mark is on the screen in the
// position indicated by @xalign and @yalign. An alignment of 0.0 indicates
// left or top, 1.0 indicates right or bottom, 0.5 means center. If
// @use_align is false, the text scrolls the minimal distance to get the
// mark onscreen, possibly not scrolling at all. The effective screen for
// purposes of this function is reduced by a margin of size @within_margin.
func (t textView) ScrollToMark(mark TextMark, withinMargin float64, useAlign bool, xalign float64, yalign float64) {
	var arg0 *C.GtkTextView
	var arg1 *C.GtkTextMark
	var arg2 C.double
	var arg3 C.gboolean
	var arg4 C.double
	var arg5 C.double

	arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	arg1 = (*C.GtkTextMark)(unsafe.Pointer(mark.Native()))
	arg2 = C.double(withinMargin)
	if useAlign {
		arg3 = C.gboolean(1)
	}
	arg4 = C.double(xalign)
	arg5 = C.double(yalign)

	C.gtk_text_view_scroll_to_mark(arg0, arg1, arg2, arg3, arg4, arg5)
}

// SetAcceptsTab sets the behavior of the text widget when the Tab key is
// pressed. If @accepts_tab is true, a tab character is inserted. If
// @accepts_tab is false the keyboard focus is moved to the next widget in
// the focus chain.
func (t textView) SetAcceptsTab(acceptsTab bool) {
	var arg0 *C.GtkTextView
	var arg1 C.gboolean

	arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	if acceptsTab {
		arg1 = C.gboolean(1)
	}

	C.gtk_text_view_set_accepts_tab(arg0, arg1)
}

// SetBottomMargin sets the bottom margin for text in @text_view.
//
// Note that this function is confusingly named. In CSS terms, the value set
// here is padding.
func (t textView) SetBottomMargin(bottomMargin int) {
	var arg0 *C.GtkTextView
	var arg1 C.int

	arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	arg1 = C.int(bottomMargin)

	C.gtk_text_view_set_bottom_margin(arg0, arg1)
}

// SetBuffer sets @buffer as the buffer being displayed by @text_view. The
// previous buffer displayed by the text view is unreferenced, and a
// reference is added to @buffer. If you owned a reference to @buffer before
// passing it to this function, you must remove that reference yourself;
// TextView will not “adopt” it.
func (t textView) SetBuffer(buffer TextBuffer) {
	var arg0 *C.GtkTextView
	var arg1 *C.GtkTextBuffer

	arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	arg1 = (*C.GtkTextBuffer)(unsafe.Pointer(buffer.Native()))

	C.gtk_text_view_set_buffer(arg0, arg1)
}

// SetCursorVisible toggles whether the insertion point should be displayed.
// A buffer with no editable text probably shouldn’t have a visible cursor,
// so you may want to turn the cursor off.
//
// Note that this property may be overridden by the
// Settings:gtk-keynav-use-caret settings.
func (t textView) SetCursorVisible(setting bool) {
	var arg0 *C.GtkTextView
	var arg1 C.gboolean

	arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	if setting {
		arg1 = C.gboolean(1)
	}

	C.gtk_text_view_set_cursor_visible(arg0, arg1)
}

// SetEditable sets the default editability of the TextView. You can
// override this default setting with tags in the buffer, using the
// “editable” attribute of tags.
func (t textView) SetEditable(setting bool) {
	var arg0 *C.GtkTextView
	var arg1 C.gboolean

	arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	if setting {
		arg1 = C.gboolean(1)
	}

	C.gtk_text_view_set_editable(arg0, arg1)
}

// SetExtraMenu sets a menu model to add when constructing the context menu
// for @text_view. You can pass nil to remove a previously set extra menu.
func (t textView) SetExtraMenu(model gio.MenuModel) {
	var arg0 *C.GtkTextView
	var arg1 *C.GMenuModel

	arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	arg1 = (*C.GMenuModel)(unsafe.Pointer(model.Native()))

	C.gtk_text_view_set_extra_menu(arg0, arg1)
}

// SetGutter places @widget into the gutter specified by @win.
//
// @win must be one of GTK_TEXT_WINDOW_LEFT, GTK_TEXT_WINDOW_RIGHT,
// GTK_TEXT_WINDOW_TOP, or GTK_TEXT_WINDOW_BOTTOM.
func (t textView) SetGutter(win TextWindowType, widget Widget) {
	var arg0 *C.GtkTextView
	var arg1 C.GtkTextWindowType
	var arg2 *C.GtkWidget

	arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	arg1 = (C.GtkTextWindowType)(win)
	arg2 = (*C.GtkWidget)(unsafe.Pointer(widget.Native()))

	C.gtk_text_view_set_gutter(arg0, arg1, arg2)
}

// SetIndent sets the default indentation for paragraphs in @text_view. Tags
// in the buffer may override the default.
func (t textView) SetIndent(indent int) {
	var arg0 *C.GtkTextView
	var arg1 C.int

	arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	arg1 = C.int(indent)

	C.gtk_text_view_set_indent(arg0, arg1)
}

// SetInputHints sets the TextView:input-hints property, which allows input
// methods to fine-tune their behaviour.
func (t textView) SetInputHints(hints InputHints) {
	var arg0 *C.GtkTextView
	var arg1 C.GtkInputHints

	arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	arg1 = (C.GtkInputHints)(hints)

	C.gtk_text_view_set_input_hints(arg0, arg1)
}

// SetInputPurpose sets the TextView:input-purpose property which can be
// used by on-screen keyboards and other input methods to adjust their
// behaviour.
func (t textView) SetInputPurpose(purpose InputPurpose) {
	var arg0 *C.GtkTextView
	var arg1 C.GtkInputPurpose

	arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	arg1 = (C.GtkInputPurpose)(purpose)

	C.gtk_text_view_set_input_purpose(arg0, arg1)
}

// SetJustification sets the default justification of text in @text_view.
// Tags in the view’s buffer may override the default.
func (t textView) SetJustification(justification Justification) {
	var arg0 *C.GtkTextView
	var arg1 C.GtkJustification

	arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	arg1 = (C.GtkJustification)(justification)

	C.gtk_text_view_set_justification(arg0, arg1)
}

// SetLeftMargin sets the default left margin for text in @text_view. Tags
// in the buffer may override the default.
//
// Note that this function is confusingly named. In CSS terms, the value set
// here is padding.
func (t textView) SetLeftMargin(leftMargin int) {
	var arg0 *C.GtkTextView
	var arg1 C.int

	arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	arg1 = C.int(leftMargin)

	C.gtk_text_view_set_left_margin(arg0, arg1)
}

// SetMonospace sets the TextView:monospace property, which indicates that
// the text view should use monospace fonts.
func (t textView) SetMonospace(monospace bool) {
	var arg0 *C.GtkTextView
	var arg1 C.gboolean

	arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	if monospace {
		arg1 = C.gboolean(1)
	}

	C.gtk_text_view_set_monospace(arg0, arg1)
}

// SetOverwrite changes the TextView overwrite mode.
func (t textView) SetOverwrite(overwrite bool) {
	var arg0 *C.GtkTextView
	var arg1 C.gboolean

	arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	if overwrite {
		arg1 = C.gboolean(1)
	}

	C.gtk_text_view_set_overwrite(arg0, arg1)
}

// SetPixelsAboveLines sets the default number of blank pixels above
// paragraphs in @text_view. Tags in the buffer for @text_view may override
// the defaults.
func (t textView) SetPixelsAboveLines(pixelsAboveLines int) {
	var arg0 *C.GtkTextView
	var arg1 C.int

	arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	arg1 = C.int(pixelsAboveLines)

	C.gtk_text_view_set_pixels_above_lines(arg0, arg1)
}

// SetPixelsBelowLines sets the default number of pixels of blank space to
// put below paragraphs in @text_view. May be overridden by tags applied to
// @text_view’s buffer.
func (t textView) SetPixelsBelowLines(pixelsBelowLines int) {
	var arg0 *C.GtkTextView
	var arg1 C.int

	arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	arg1 = C.int(pixelsBelowLines)

	C.gtk_text_view_set_pixels_below_lines(arg0, arg1)
}

// SetPixelsInsideWrap sets the default number of pixels of blank space to
// leave between display/wrapped lines within a paragraph. May be overridden
// by tags in @text_view’s buffer.
func (t textView) SetPixelsInsideWrap(pixelsInsideWrap int) {
	var arg0 *C.GtkTextView
	var arg1 C.int

	arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	arg1 = C.int(pixelsInsideWrap)

	C.gtk_text_view_set_pixels_inside_wrap(arg0, arg1)
}

// SetRightMargin sets the default right margin for text in the text view.
// Tags in the buffer may override the default.
//
// Note that this function is confusingly named. In CSS terms, the value set
// here is padding.
func (t textView) SetRightMargin(rightMargin int) {
	var arg0 *C.GtkTextView
	var arg1 C.int

	arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	arg1 = C.int(rightMargin)

	C.gtk_text_view_set_right_margin(arg0, arg1)
}

// SetTabs sets the default tab stops for paragraphs in @text_view. Tags in
// the buffer may override the default.
func (t textView) SetTabs(tabs *pango.TabArray) {
	var arg0 *C.GtkTextView
	var arg1 *C.PangoTabArray

	arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	arg1 = (*C.PangoTabArray)(unsafe.Pointer(tabs.Native()))

	C.gtk_text_view_set_tabs(arg0, arg1)
}

// SetTopMargin sets the top margin for text in @text_view.
//
// Note that this function is confusingly named. In CSS terms, the value set
// here is padding.
func (t textView) SetTopMargin(topMargin int) {
	var arg0 *C.GtkTextView
	var arg1 C.int

	arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	arg1 = C.int(topMargin)

	C.gtk_text_view_set_top_margin(arg0, arg1)
}

// SetWrapMode sets the line wrapping for the view.
func (t textView) SetWrapMode(wrapMode WrapMode) {
	var arg0 *C.GtkTextView
	var arg1 C.GtkWrapMode

	arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	arg1 = (C.GtkWrapMode)(wrapMode)

	C.gtk_text_view_set_wrap_mode(arg0, arg1)
}

// StartsDisplayLine determines whether @iter is at the start of a display
// line. See gtk_text_view_forward_display_line() for an explanation of
// display lines vs. paragraphs.
func (t textView) StartsDisplayLine(iter *TextIter) bool {
	var arg0 *C.GtkTextView
	var arg1 *C.GtkTextIter

	arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	arg1 = (*C.GtkTextIter)(unsafe.Pointer(iter.Native()))

	var cret C.gboolean

	cret = C.gtk_text_view_starts_display_line(arg0, arg1)

	var ok bool

	if cret {
		ok = true
	}

	return ok
}

// WindowToBufferCoords converts coordinates on the window identified by
// @win to buffer coordinates, storing the result in (@buffer_x,@buffer_y).
func (t textView) WindowToBufferCoords(win TextWindowType, windowX int, windowY int) (bufferX int, bufferY int) {
	var arg0 *C.GtkTextView
	var arg1 C.GtkTextWindowType
	var arg2 C.int
	var arg3 C.int

	arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	arg1 = (C.GtkTextWindowType)(win)
	arg2 = C.int(windowX)
	arg3 = C.int(windowY)

	var arg4 C.int
	var arg5 C.int

	C.gtk_text_view_window_to_buffer_coords(arg0, arg1, arg2, arg3, &arg4, &arg5)

	var bufferX int
	var bufferY int

	bufferX = (int)(arg4)
	bufferY = (int)(arg5)

	return bufferX, bufferY
}
