// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/box"
	"github.com/diamondburned/gotk4/internal/gextras"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <stdbool.h>
// #include <gtk/gtk.h>
//
// extern void gotk4_TreeCellDataFunc(GtkTreeViewColumn* _0, GtkCellRenderer* _1, GtkTreeModel* _2, GtkTreeIter* _3, gpointer _4);
// extern void callbackDelete(gpointer);
import "C"

//export callbackDelete
func callbackDelete(ptr C.gpointer) {
	box.Delete(box.Callback, uintptr(ptr))
}

// TreeCellDataFunc: a function to set the properties of a cell instead of just
// using the straight mapping between the cell and the model.
//
// This function is useful for customizing the cell renderer. For example, a
// function might get an* integer from the @tree_model, and render it to the
// “text” attribute of “cell” by converting it to its written equivalent.
//
// See also: gtk_tree_view_column_set_cell_data_func()
type TreeCellDataFunc func(treeColumn TreeViewColumn, cell CellRenderer, treeModel TreeModel, iter *TreeIter)

//export gotk4_TreeCellDataFunc
func gotk4_TreeCellDataFunc(arg0 *C.GtkTreeViewColumn, arg1 *C.GtkCellRenderer, arg2 *C.GtkTreeModel, arg3 *C.GtkTreeIter, arg4 C.gpointer) {
	v := box.Get(uintptr(arg4))
	if v == nil {
		panic(`callback not found`)
	}

	var treeColumn TreeViewColumn
	var cell CellRenderer
	var treeModel TreeModel
	var iter *TreeIter

	treeColumn = gextras.CastObject(externglib.Take(unsafe.Pointer(arg0.Native()))).(TreeViewColumn)

	cell = gextras.CastObject(externglib.Take(unsafe.Pointer(arg1.Native()))).(CellRenderer)

	treeModel = gextras.CastObject(externglib.Take(unsafe.Pointer(arg2.Native()))).(TreeModel)

	{
		iter = WrapTreeIter(unsafe.Pointer(arg3))
	}

	v.(TreeCellDataFunc)(treeColumn, cell, treeModel, iter)
}
