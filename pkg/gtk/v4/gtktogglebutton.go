// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_toggle_button_get_type()), F: marshalToggleButton},
	})
}

// ToggleButton: a ToggleButton is a Button which will remain “pressed-in” when
// clicked. Clicking again will cause the toggle button to return to its normal
// state.
//
// A toggle button is created by calling either gtk_toggle_button_new() or
// gtk_toggle_button_new_with_label(). If using the former, it is advisable to
// pack a widget, (such as a Label and/or a Image), into the toggle button’s
// container. (See Button for more information).
//
// The state of a ToggleButton can be set specifically using
// gtk_toggle_button_set_active(), and retrieved using
// gtk_toggle_button_get_active().
//
// To simply switch the state of a toggle button, use
// gtk_toggle_button_toggled().
//
//
// CSS nodes
//
// GtkToggleButton has a single CSS node with name button. To differentiate it
// from a plain Button, it gets the .toggle style class.
//
// Creating two ToggleButton widgets.
//
//    static void output_state (GtkToggleButton *source, gpointer user_data) {
//      printf ("Active: d\n", gtk_toggle_button_get_active (source));
//    }
//
//    void make_toggles (void) {
//      GtkWidget *window, *toggle1, *toggle2;
//      GtkWidget *box;
//      const char *text;
//
//      window = gtk_window_new ();
//      box = gtk_box_new (GTK_ORIENTATION_VERTICAL, 12);
//
//      text = "Hi, I’m a toggle button.";
//      toggle1 = gtk_toggle_button_new_with_label (text);
//
//      g_signal_connect (toggle1, "toggled",
//                        G_CALLBACK (output_state),
//                        NULL);
//      gtk_box_append (GTK_BOX (box), toggle1);
//
//      text = "Hi, I’m a toggle button.";
//      toggle2 = gtk_toggle_button_new_with_label (text);
//      g_signal_connect (toggle2, "toggled",
//                        G_CALLBACK (output_state),
//                        NULL);
//      gtk_box_append (GTK_BOX (box), toggle2);
//
//      gtk_window_set_child (GTK_WINDOW (window), box);
//      gtk_widget_show (window);
//    }
type ToggleButton interface {
	Button
	Accessible
	Actionable
	Buildable
	ConstraintTarget

	// Active queries a ToggleButton and returns its current state. Returns true
	// if the toggle button is pressed in and false if it is raised.
	Active(t ToggleButton) bool
	// SetActive sets the status of the toggle button. Set to true if you want
	// the GtkToggleButton to be “pressed in”, and false to raise it.
	//
	// If the status of the button changes, this action causes the
	// ToggleButton::toggled signal to be emitted.
	SetActive(t ToggleButton, isActive bool)
	// SetGroup adds @self to the group of @group. In a group of multiple toggle
	// buttons, only one button can be active at a time.
	//
	// Note that the same effect can be achieved via the Actionable api, by
	// using the same action with parameter type and state type 's' for all
	// buttons in the group, and giving each button its own target value.
	SetGroup(t ToggleButton, group ToggleButton)
	// Toggled emits the ToggleButton::toggled signal on the ToggleButton. There
	// is no good reason for an application ever to call this function.
	Toggled(t ToggleButton)
}

// toggleButton implements the ToggleButton interface.
type toggleButton struct {
	Button
	Accessible
	Actionable
	Buildable
	ConstraintTarget
}

var _ ToggleButton = (*toggleButton)(nil)

// WrapToggleButton wraps a GObject to the right type. It is
// primarily used internally.
func WrapToggleButton(obj *externglib.Object) ToggleButton {
	return ToggleButton{
		Button:           WrapButton(obj),
		Accessible:       WrapAccessible(obj),
		Actionable:       WrapActionable(obj),
		Buildable:        WrapBuildable(obj),
		ConstraintTarget: WrapConstraintTarget(obj),
	}
}

func marshalToggleButton(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapToggleButton(obj), nil
}

// NewToggleButton constructs a class ToggleButton.
func NewToggleButton() {
	C.gtk_toggle_button_new()
}

// NewToggleButtonWithLabel constructs a class ToggleButton.
func NewToggleButtonWithLabel(label string) {
	var arg1 *C.char

	arg1 = (*C.char)(C.CString(label))
	defer C.free(unsafe.Pointer(arg1))

	C.gtk_toggle_button_new_with_label(arg1)
}

// NewToggleButtonWithMnemonic constructs a class ToggleButton.
func NewToggleButtonWithMnemonic(label string) {
	var arg1 *C.char

	arg1 = (*C.char)(C.CString(label))
	defer C.free(unsafe.Pointer(arg1))

	C.gtk_toggle_button_new_with_mnemonic(arg1)
}

// Active queries a ToggleButton and returns its current state. Returns true
// if the toggle button is pressed in and false if it is raised.
func (t toggleButton) Active(t ToggleButton) bool {
	var arg0 *C.GtkToggleButton

	arg0 = (*C.GtkToggleButton)(unsafe.Pointer(t.Native()))

	var cret C.gboolean
	var ok bool

	cret = C.gtk_toggle_button_get_active(arg0)

	if cret {
		ok = true
	}

	return ok
}

// SetActive sets the status of the toggle button. Set to true if you want
// the GtkToggleButton to be “pressed in”, and false to raise it.
//
// If the status of the button changes, this action causes the
// ToggleButton::toggled signal to be emitted.
func (t toggleButton) SetActive(t ToggleButton, isActive bool) {
	var arg0 *C.GtkToggleButton
	var arg1 C.gboolean

	arg0 = (*C.GtkToggleButton)(unsafe.Pointer(t.Native()))
	if isActive {
		arg1 = C.gboolean(1)
	}

	C.gtk_toggle_button_set_active(arg0, arg1)
}

// SetGroup adds @self to the group of @group. In a group of multiple toggle
// buttons, only one button can be active at a time.
//
// Note that the same effect can be achieved via the Actionable api, by
// using the same action with parameter type and state type 's' for all
// buttons in the group, and giving each button its own target value.
func (t toggleButton) SetGroup(t ToggleButton, group ToggleButton) {
	var arg0 *C.GtkToggleButton
	var arg1 *C.GtkToggleButton

	arg0 = (*C.GtkToggleButton)(unsafe.Pointer(t.Native()))
	arg1 = (*C.GtkToggleButton)(unsafe.Pointer(group.Native()))

	C.gtk_toggle_button_set_group(arg0, arg1)
}

// Toggled emits the ToggleButton::toggled signal on the ToggleButton. There
// is no good reason for an application ever to call this function.
func (t toggleButton) Toggled(t ToggleButton) {
	var arg0 *C.GtkToggleButton

	arg0 = (*C.GtkToggleButton)(unsafe.Pointer(t.Native()))

	C.gtk_toggle_button_toggled(arg0)
}
