// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_shortcuts_section_get_type()), F: marshalShortcutsSection},
	})
}

// ShortcutsSection: `GtkShortcutsSection` collects all the keyboard shortcuts
// and gestures for a major application mode.
//
// If your application needs multiple sections, you should give each section a
// unique [property@Gtk.ShortcutsSection:section-name] and a
// [property@Gtk.ShortcutsSection:title] that can be shown in the section
// selector of the [class@Gtk.ShortcutsWindow].
//
// The [property@Gtk.ShortcutsSection:max-height] property can be used to
// influence how the groups in the section are distributed over pages and
// columns.
//
// This widget is only meant to be used with [class@Gtk.ShortcutsWindow].
type ShortcutsSection interface {
	gextras.Objector

	privateShortcutsSectionClass()
}

// ShortcutsSectionClass implements the ShortcutsSection interface.
type ShortcutsSectionClass struct {
	*externglib.Object
	BoxClass
	AccessibleInterface
	BuildableInterface
	ConstraintTargetInterface
	OrientableInterface
}

var _ ShortcutsSection = (*ShortcutsSectionClass)(nil)

func wrapShortcutsSection(obj *externglib.Object) ShortcutsSection {
	return &ShortcutsSectionClass{
		Object: obj,
		BoxClass: BoxClass{
			Object: obj,
			WidgetClass: WidgetClass{
				InitiallyUnowned: externglib.InitiallyUnowned{Object: obj},
				AccessibleInterface: AccessibleInterface{
					Object: obj,
				},
				BuildableInterface: BuildableInterface{
					Object: obj,
				},
				ConstraintTargetInterface: ConstraintTargetInterface{
					Object: obj,
				},
			},
			AccessibleInterface: AccessibleInterface{
				Object: obj,
			},
			BuildableInterface: BuildableInterface{
				Object: obj,
			},
			ConstraintTargetInterface: ConstraintTargetInterface{
				Object: obj,
			},
			OrientableInterface: OrientableInterface{
				Object: obj,
			},
		},
		AccessibleInterface: AccessibleInterface{
			Object: obj,
		},
		BuildableInterface: BuildableInterface{
			Object: obj,
		},
		ConstraintTargetInterface: ConstraintTargetInterface{
			Object: obj,
		},
		OrientableInterface: OrientableInterface{
			Object: obj,
		},
	}
}

func marshalShortcutsSection(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapShortcutsSection(obj), nil
}

func (*ShortcutsSectionClass) privateShortcutsSectionClass() {}
