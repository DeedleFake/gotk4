// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_builder_list_item_factory_get_type()), F: marshalBuilderListItemFactory},
	})
}

// BuilderListItemFactory is a ListItemFactory that creates widgets by
// instantiating Builder UI templates. The templates must be extending ListItem,
// and typically use Expressions to obtain data from the items in the model.
//
// Example:
//
//    <interface>
//      <template class="GtkListItem">
//        <property name="child">
//          <object class="GtkLabel">
//            <property name="xalign">0</property>
//            <binding name="label">
//              <lookup name="name" type="SettingsKey">
//                <lookup name="item">GtkListItem</lookup>
//              </lookup>
//            </binding>
//          </object>
//        </property>
//      </template>
//    </interface>
type BuilderListItemFactory interface {
	ListItemFactory

	// Resource: if the data references a resource, gets the path of that
	// resource.
	Resource() string
	// Scope gets the scope used when constructing listitems.
	Scope() BuilderScope
}

// builderListItemFactory implements the BuilderListItemFactory interface.
type builderListItemFactory struct {
	ListItemFactory
}

var _ BuilderListItemFactory = (*builderListItemFactory)(nil)

// WrapBuilderListItemFactory wraps a GObject to the right type. It is
// primarily used internally.
func WrapBuilderListItemFactory(obj *externglib.Object) BuilderListItemFactory {
	return BuilderListItemFactory{
		ListItemFactory: WrapListItemFactory(obj),
	}
}

func marshalBuilderListItemFactory(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapBuilderListItemFactory(obj), nil
}

// NewBuilderListItemFactoryFromResource constructs a class BuilderListItemFactory.
func NewBuilderListItemFactoryFromResource(scope BuilderScope, resourcePath string) BuilderListItemFactory {
	var arg1 *C.GtkBuilderScope
	var arg2 *C.char

	arg1 = (*C.GtkBuilderScope)(unsafe.Pointer(scope.Native()))
	arg2 = (*C.char)(C.CString(resourcePath))
	defer C.free(unsafe.Pointer(arg2))

	var cret C.GtkBuilderListItemFactory

	cret = C.gtk_builder_list_item_factory_new_from_resource(arg1, arg2)

	var builderListItemFactory BuilderListItemFactory

	builderListItemFactory = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(cret.Native()))).(BuilderListItemFactory)

	return builderListItemFactory
}

// Resource: if the data references a resource, gets the path of that
// resource.
func (s builderListItemFactory) Resource() string {
	var arg0 *C.GtkBuilderListItemFactory

	arg0 = (*C.GtkBuilderListItemFactory)(unsafe.Pointer(s.Native()))

	var cret *C.char

	cret = C.gtk_builder_list_item_factory_get_resource(arg0)

	var utf8 string

	utf8 = C.GoString(cret)

	return utf8
}

// Scope gets the scope used when constructing listitems.
func (s builderListItemFactory) Scope() BuilderScope {
	var arg0 *C.GtkBuilderListItemFactory

	arg0 = (*C.GtkBuilderListItemFactory)(unsafe.Pointer(s.Native()))

	var cret *C.GtkBuilderScope

	cret = C.gtk_builder_list_item_factory_get_scope(arg0)

	var builderScope BuilderScope

	builderScope = gextras.CastObject(externglib.Take(unsafe.Pointer(cret.Native()))).(BuilderScope)

	return builderScope
}
