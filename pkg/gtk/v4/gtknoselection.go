// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/core/gextras"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_no_selection_get_type()), F: marshalNoSelection},
	})
}

// NoSelection: `GtkNoSelection` is a `GtkSelectionModel` that does not allow
// selecting anything.
//
// This model is meant to be used as a simple wrapper around a `GListModel` when
// a `GtkSelectionModel` is required.
type NoSelection interface {
	SelectionModel

	// Model:
	Model() gio.ListModel
	// SetModelNoSelection:
	SetModelNoSelection(model gio.ListModel)
}

// noSelection implements the NoSelection class.
type noSelection struct {
	gextras.Objector
}

// WrapNoSelection wraps a GObject to the right type. It is
// primarily used internally.
func WrapNoSelection(obj *externglib.Object) NoSelection {
	return noSelection{
		Objector: obj,
	}
}

func marshalNoSelection(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapNoSelection(obj), nil
}

// NewNoSelection:
func NewNoSelection(model gio.ListModel) NoSelection {
	var _arg1 *C.GListModel     // out
	var _cret *C.GtkNoSelection // in

	_arg1 = (*C.GListModel)(unsafe.Pointer(model.Native()))

	_cret = C.gtk_no_selection_new(_arg1)

	var _noSelection NoSelection // out

	_noSelection = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(NoSelection)

	return _noSelection
}

func (s noSelection) Model() gio.ListModel {
	var _arg0 *C.GtkNoSelection // out
	var _cret *C.GListModel     // in

	_arg0 = (*C.GtkNoSelection)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_no_selection_get_model(_arg0)

	var _listModel gio.ListModel // out

	_listModel = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(gio.ListModel)

	return _listModel
}

func (s noSelection) SetModelNoSelection(model gio.ListModel) {
	var _arg0 *C.GtkNoSelection // out
	var _arg1 *C.GListModel     // out

	_arg0 = (*C.GtkNoSelection)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GListModel)(unsafe.Pointer(model.Native()))

	C.gtk_no_selection_set_model(_arg0, _arg1)
}

func (m noSelection) Selection() *Bitset {
	return WrapSelectionModel(gextras.InternObject(m)).Selection()
}

func (m noSelection) SelectionInRange(position uint, nItems uint) *Bitset {
	return WrapSelectionModel(gextras.InternObject(m)).SelectionInRange(position, nItems)
}

func (m noSelection) IsSelected(position uint) bool {
	return WrapSelectionModel(gextras.InternObject(m)).IsSelected(position)
}

func (m noSelection) SelectAll() bool {
	return WrapSelectionModel(gextras.InternObject(m)).SelectAll()
}

func (m noSelection) SelectItem(position uint, unselectRest bool) bool {
	return WrapSelectionModel(gextras.InternObject(m)).SelectItem(position, unselectRest)
}

func (m noSelection) SelectRange(position uint, nItems uint, unselectRest bool) bool {
	return WrapSelectionModel(gextras.InternObject(m)).SelectRange(position, nItems, unselectRest)
}

func (m noSelection) SelectionChanged(position uint, nItems uint) {
	WrapSelectionModel(gextras.InternObject(m)).SelectionChanged(position, nItems)
}

func (m noSelection) SetSelection(selected *Bitset, mask *Bitset) bool {
	return WrapSelectionModel(gextras.InternObject(m)).SetSelection(selected, mask)
}

func (m noSelection) UnselectAll() bool {
	return WrapSelectionModel(gextras.InternObject(m)).UnselectAll()
}

func (m noSelection) UnselectItem(position uint) bool {
	return WrapSelectionModel(gextras.InternObject(m)).UnselectItem(position)
}

func (m noSelection) UnselectRange(position uint, nItems uint) bool {
	return WrapSelectionModel(gextras.InternObject(m)).UnselectRange(position, nItems)
}

func (l noSelection) ItemType() externglib.Type {
	return gio.WrapListModel(gextras.InternObject(l)).ItemType()
}

func (l noSelection) NItems() uint {
	return gio.WrapListModel(gextras.InternObject(l)).NItems()
}

func (l noSelection) Object(position uint) gextras.Objector {
	return gio.WrapListModel(gextras.InternObject(l)).Object(position)
}

func (l noSelection) ItemsChanged(position uint, removed uint, added uint) {
	gio.WrapListModel(gextras.InternObject(l)).ItemsChanged(position, removed, added)
}
