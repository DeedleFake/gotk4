// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_no_selection_get_type()), F: marshalNoSelection},
	})
}

// NoSelection: `GtkNoSelection` is a `GtkSelectionModel` that does not allow
// selecting anything.
//
// This model is meant to be used as a simple wrapper around a `GListModel` when
// a `GtkSelectionModel` is required.
type NoSelection interface {
	gextras.Objector
	gio.ListModel
	SelectionModel

	// Model gets the model that @self is wrapping.
	Model() gio.ListModel
	// SetModel sets the model that @self should wrap.
	//
	// If @model is nil, this model will be empty.
	SetModel(model gio.ListModel)
}

// noSelection implements the NoSelection interface.
type noSelection struct {
	gextras.Objector
	gio.ListModel
	SelectionModel
}

var _ NoSelection = (*noSelection)(nil)

// WrapNoSelection wraps a GObject to the right type. It is
// primarily used internally.
func WrapNoSelection(obj *externglib.Object) NoSelection {
	return NoSelection{
		Objector:       obj,
		gio.ListModel:  gio.WrapListModel(obj),
		SelectionModel: WrapSelectionModel(obj),
	}
}

func marshalNoSelection(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapNoSelection(obj), nil
}

// NewNoSelection constructs a class NoSelection.
func NewNoSelection(model gio.ListModel) NoSelection {
	var arg1 *C.GListModel

	arg1 = (*C.GListModel)(model.Native())

	ret := C.gtk_no_selection_new(arg1)

	var ret0 NoSelection

	ret0 = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(ret.Native()))).(NoSelection)

	return ret0
}

// Model gets the model that @self is wrapping.
func (s noSelection) Model() gio.ListModel {
	var arg0 *C.GtkNoSelection

	arg0 = (*C.GtkNoSelection)(s.Native())

	ret := C.gtk_no_selection_get_model(arg0)

	var ret0 gio.ListModel

	ret0 = gextras.CastObject(externglib.Take(unsafe.Pointer(ret.Native()))).(gio.ListModel)

	return ret0
}

// SetModel sets the model that @self should wrap.
//
// If @model is nil, this model will be empty.
func (s noSelection) SetModel(model gio.ListModel) {
	var arg0 *C.GtkNoSelection
	var arg1 *C.GListModel

	arg0 = (*C.GtkNoSelection)(s.Native())
	arg1 = (*C.GListModel)(model.Native())

	C.gtk_no_selection_set_model(arg0, arg1)
}
