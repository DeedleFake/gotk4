// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	"github.com/diamondburned/gotk4/internal/ptr"
	"github.com/diamondburned/gotk4/pkg/cairo"
	"github.com/diamondburned/gotk4/pkg/gdk/v4"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
	"github.com/diamondburned/gotk4/pkg/graphene"
	"github.com/diamondburned/gotk4/pkg/gsk/v4"
	"github.com/diamondburned/gotk4/pkg/pango"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_widget_get_type()), F: marshalWidget},
		{T: externglib.Type(C.gtk_requisition_get_type()), F: marshalRequisition},
	})
}

// Allocation: the rectangle representing the area allocated for a widget by its
// parent.
type Allocation gdk.Rectangle

// Widget: the base class for all widgets.
//
// `GtkWidget` is the base class all widgets in GTK derive from. It manages the
// widget lifecycle, layout, states and style.
//
//
// Height-for-width Geometry Management
//
// GTK uses a height-for-width (and width-for-height) geometry management
// system. Height-for-width means that a widget can change how much vertical
// space it needs, depending on the amount of horizontal space that it is given
// (and similar for width-for-height). The most common example is a label that
// reflows to fill up the available width, wraps to fewer lines, and therefore
// needs less height.
//
// Height-for-width geometry management is implemented in GTK by way of two
// virtual methods:
//
// - [vfunc@Gtk.Widget.get_request_mode] - [vfunc@Gtk.Widget.measure]
//
// There are some important things to keep in mind when implementing
// height-for-width and when using it in widget implementations.
//
// If you implement a direct `GtkWidget` subclass that supports height-for-width
// or width-for-height geometry management for itself or its child widgets, the
// [vfunc@Gtk.Widget.get_request_mode] virtual function must be implemented as
// well and return the widget's preferred request mode. The default
// implementation of this virtual function returns
// GTK_SIZE_REQUEST_CONSTANT_SIZE, which means that the widget will only ever
// get -1 passed as the for_size value to its [vfunc@Gtk.Widget.measure]
// implementation.
//
// The geometry management system will query a widget hierarchy in only one
// orientation at a time. When widgets are initially queried for their minimum
// sizes it is generally done in two initial passes in the
// [enum@Gtk.SizeRequestMode] chosen by the toplevel.
//
// For example, when queried in the normal GTK_SIZE_REQUEST_HEIGHT_FOR_WIDTH
// mode:
//
// First, the default minimum and natural width for each widget in the interface
// will be computed using [id@gtk_widget_measure] with an orientation of
// GTK_ORIENTATION_HORIZONTAL and a for_size of -1. Because the preferred widths
// for each widget depend on the preferred widths of their children, this
// information propagates up the hierarchy, and finally a minimum and natural
// width is determined for the entire toplevel. Next, the toplevel will use the
// minimum width to query for the minimum height contextual to that width using
// [id@gtk_widget_measure] with an orientation of GTK_ORIENTATION_VERTICAL and a
// for_size of the just computed width. This will also be a highly recursive
// operation. The minimum height for the minimum width is normally used to set
// the minimum size constraint on the toplevel.
//
// After the toplevel window has initially requested its size in both dimensions
// it can go on to allocate itself a reasonable size (or a size previously
// specified with [method@Gtk.Window.set_default_size]). During the recursive
// allocation process it’s important to note that request cycles will be
// recursively executed while widgets allocate their children. Each widget, once
// allocated a size, will go on to first share the space in one orientation
// among its children and then request each child's height for its target
// allocated width or its width for allocated height, depending. In this way a
// `GtkWidget` will typically be requested its size a number of times before
// actually being allocated a size. The size a widget is finally allocated can
// of course differ from the size it has requested. For this reason, `GtkWidget`
// caches a small number of results to avoid re-querying for the same sizes in
// one allocation cycle.
//
// If a widget does move content around to intelligently use up the allocated
// size then it must support the request in both `GtkSizeRequestMode`s even if
// the widget in question only trades sizes in a single orientation.
//
// For instance, a [class@Gtk.Label] that does height-for-width word wrapping
// will not expect to have [vfunc@Gtk.Widget.measure] with an orientation of
// GTK_ORIENTATION_VERTICAL called because that call is specific to a
// width-for-height request. In this case the label must return the height
// required for its own minimum possible width. By following this rule any
// widget that handles height-for-width or width-for-height requests will always
// be allocated at least enough space to fit its own content.
//
// Here are some examples of how a GTK_SIZE_REQUEST_HEIGHT_FOR_WIDTH widget
// generally deals with width-for-height requests:
//
// “`c static void foo_widget_measure (GtkWidget *widget, GtkOrientation
// orientation, int for_size, int *minimum_size, int *natural_size, int
// *minimum_baseline, int *natural_baseline) { if (orientation ==
// GTK_ORIENTATION_HORIZONTAL) { // Calculate minimum and natural width } else
// // VERTICAL { if (i_am_in_height_for_width_mode) { int min_width, dummy;
//
//          // First, get the minimum width of our widget
//          GTK_WIDGET_GET_CLASS (widget)->measure (widget, GTK_ORIENTATION_HORIZONTAL, -1,
//                                                  &min_width, &dummy, &dummy, &dummy);
//
//          // Now use the minimum width to retrieve the minimum and natural height to display
//          // that width.
//          GTK_WIDGET_GET_CLASS (widget)->measure (widget, GTK_ORIENTATION_VERTICAL, min_width,
//                                                  minimum_size, natural_size, &dummy, &dummy);
//        }
//      else
//        {
//          // ... some widgets do both.
//        }
//    }
//
// } “`
//
// Often a widget needs to get its own request during size request or
// allocation. For example, when computing height it may need to also compute
// width. Or when deciding how to use an allocation, the widget may need to know
// its natural size. In these cases, the widget should be careful to call its
// virtual methods directly, like in the code example above.
//
// It will not work to use the wrapper function [method@Gtk.Widget.measure]
// inside your own [vfunc@Gtk.Widget.size_allocate] implementation. These return
// a request adjusted by [class@Gtk.SizeGroup], the widget's align and expand
// flags, as well as its CSS style.
//
// If a widget used the wrappers inside its virtual method implementations, then
// the adjustments (such as widget margins) would be applied twice. GTK
// therefore does not allow this and will warn if you try to do it.
//
// Of course if you are getting the size request for another widget, such as a
// child widget, you must use [id@gtk_widget_measure]; otherwise, you would not
// properly consider widget margins, [class@Gtk.SizeGroup], and so forth.
//
// GTK also supports baseline vertical alignment of widgets. This means that
// widgets are positioned such that the typographical baseline of widgets in the
// same row are aligned. This happens if a widget supports baselines, has a
// vertical alignment of GTK_ALIGN_BASELINE, and is inside a widget that
// supports baselines and has a natural “row” that it aligns to the baseline, or
// a baseline assigned to it by the grandparent.
//
// Baseline alignment support for a widget is also done by the
// [vfunc@Gtk.Widget.measure] virtual function. It allows you to report both a
// minimum and natural size.
//
// If a widget ends up baseline aligned it will be allocated all the space in
// the parent as if it was GTK_ALIGN_FILL, but the selected baseline can be
// found via [id@gtk_widget_get_allocated_baseline]. If the baseline has a value
// other than -1 you need to align the widget such that the baseline appears at
// the position.
//
//
// GtkWidget as GtkBuildable
//
// The `GtkWidget` implementation of the `GtkBuildable` interface supports
// various custom elements to specify additional aspects of widgets that are not
// directly expressed as properties.
//
// If the widget uses a [class@Gtk.LayoutManager], `GtkWidget` supports a custom
// `<layout>` element, used to define layout properties:
//
// “`xml <object class="GtkGrid" id="my_grid"> <child> <object class="GtkLabel"
// id="label1"> <property name="label">Description</property> <layout> <property
// name="column">0</property> <property name="row">0</property> <property
// name="row-span">1</property> <property name="column-span">1</property>
// </layout> </object> </child> <child> <object class="GtkEntry"
// id="description_entry"> <layout> <property name="column">1</property>
// <property name="row">0</property> <property name="row-span">1</property>
// <property name="column-span">1</property> </layout> </object> </child>
// </object> “`
//
// `GtkWidget` allows style information such as style classes to be associated
// with widgets, using the custom `<style>` element:
//
// “`xml <object class="GtkButton" id="button1"> <style> <class
// name="my-special-button-class"/> <class name="dark-button"/> </style>
// </object> “`
//
// `GtkWidget` allows defining accessibility information, such as properties,
// relations, and states, using the custom `<accessibility>` element:
//
// “`xml <object class="GtkButton" id="button1"> <accessibility> <property
// name="label">Download</property> <relation
// name="labelled-by">label1</relation> </accessibility> </object> “`
//
//
// Building composite widgets from template XML
//
// `GtkWidget `exposes some facilities to automate the procedure of creating
// composite widgets using "templates".
//
// To create composite widgets with `GtkBuilder` XML, one must associate the
// interface description with the widget class at class initialization time
// using [method@Gtk.WidgetClass.set_template].
//
// The interface description semantics expected in composite template
// descriptions is slightly different from regular [class@Gtk.Builder] XML.
//
// Unlike regular interface descriptions, [method@Gtk.WidgetClass.set_template]
// will expect a `<template>` tag as a direct child of the toplevel
// `<interface>` tag. The `<template>` tag must specify the “class” attribute
// which must be the type name of the widget. Optionally, the “parent” attribute
// may be specified to specify the direct parent type of the widget type, this
// is ignored by `GtkBuilder` but required for UI design tools like Glade
// (https://glade.gnome.org/) to introspect what kind of properties and internal
// children exist for a given type when the actual type does not exist.
//
// The XML which is contained inside the `<template>` tag behaves as if it were
// added to the `<object>` tag defining the widget itself. You may set
// properties on a widget by inserting `<property>` tags into the `<template>`
// tag, and also add `<child>` tags to add children and extend a widget in the
// normal way you would with `<object>` tags.
//
// Additionally, `<object>` tags can also be added before and after the initial
// `<template>` tag in the normal way, allowing one to define auxiliary objects
// which might be referenced by other widgets declared as children of the
// `<template>` tag.
//
// An example of a template definition:
//
// “`xml <interface> <template class="FooWidget" parent="GtkBox"> <property
// name="orientation">horizontal</property> <property
// name="spacing">4</property> <child> <object class="GtkButton"
// id="hello_button"> <property name="label">Hello World</property> <signal
// name="clicked" handler="hello_button_clicked" object="FooWidget"
// swapped="yes"/> </object> </child> <child> <object class="GtkButton"
// id="goodbye_button"> <property name="label">Goodbye World</property>
// </object> </child> </template> </interface> “`
//
// Typically, you'll place the template fragment into a file that is bundled
// with your project, using `GResource`. In order to load the template, you need
// to call [method@Gtk.WidgetClass.set_template_from_resource] from the class
// initialization of your `GtkWidget` type:
//
// “`c static void foo_widget_class_init (FooWidgetClass *klass) { // ...
//
//    gtk_widget_class_set_template_from_resource (GTK_WIDGET_CLASS (klass),
//                                                 "/com/example/ui/foowidget.ui");
//
// } “`
//
// You will also need to call [method@Gtk.Widget.init_template] from the
// instance initialization function:
//
// “`c static void foo_widget_init (FooWidget *self) { // ...
// gtk_widget_init_template (GTK_WIDGET (self)); } “`
//
// You can access widgets defined in the template using the
// [id@gtk_widget_get_template_child] function, but you will typically declare a
// pointer in the instance private data structure of your type using the same
// name as the widget in the template definition, and call
// [method@Gtk.WidgetClass.bind_template_child_full] (or one of its wrapper
// macros [func@Gtk.widget_class_bind_template_child] and
// [func@Gtk.widget_class_bind_template_child_private]) with that name, e.g.
//
// “`c typedef struct { GtkWidget *hello_button; GtkWidget *goodbye_button; }
// FooWidgetPrivate;
//
// G_DEFINE_TYPE_WITH_PRIVATE (FooWidget, foo_widget, GTK_TYPE_BOX)
//
// static void foo_widget_class_init (FooWidgetClass *klass) { // ...
// gtk_widget_class_set_template_from_resource (GTK_WIDGET_CLASS (klass),
// "/com/example/ui/foowidget.ui"); gtk_widget_class_bind_template_child_private
// (GTK_WIDGET_CLASS (klass), FooWidget, hello_button);
// gtk_widget_class_bind_template_child_private (GTK_WIDGET_CLASS (klass),
// FooWidget, goodbye_button); }
//
// static void foo_widget_init (FooWidget *widget) {
//
// } “`
//
// You can also use [method@Gtk.WidgetClass.bind_template_callback_full] (or is
// wrapper macro [func@Gtk.widget_class_bind_template_callback]) to connect a
// signal callback defined in the template with a function visible in the scope
// of the class, e.g.
//
// “`c // the signal handler has the instance and user data swapped // because
// of the swapped="yes" attribute in the template XML static void
// hello_button_clicked (FooWidget *self, GtkButton *button) { g_print ("Hello,
// world!\n"); }
//
// static void foo_widget_class_init (FooWidgetClass *klass) { // ...
// gtk_widget_class_set_template_from_resource (GTK_WIDGET_CLASS (klass),
// "/com/example/ui/foowidget.ui"); gtk_widget_class_bind_template_callback
// (GTK_WIDGET_CLASS (klass), hello_button_clicked); } “`
type Widget interface {
	gextras.Objector
	Accessible
	Buildable
	ConstraintTarget

	// ActionSetEnabled: enable or disable an action installed with
	// gtk_widget_class_install_action().
	ActionSetEnabled(actionName string, enabled bool)
	// Activate: for widgets that can be “activated” (buttons, menu items, etc.)
	// this function activates them.
	//
	// The activation will emit the signal set using
	// gtk_widget_class_set_activate_signal() during class initialization.
	//
	// Activation is what happens when you press Enter on a widget during key
	// navigation.
	//
	// If you wish to handle the activation keybinding yourself, it is
	// recommended to use gtk_widget_class_add_shortcut() with an action created
	// with gtk_signal_action_new().
	//
	// If @widget isn't activatable, the function returns false.
	Activate() bool
	// ActivateActionVariant looks up the action in the action groups associated
	// with @widget and its ancestors, and activates it.
	//
	// If the action is in an action group added with
	// [method@Gtk.Widget.insert_action_group], the @name is expected to be
	// prefixed with the prefix that was used when the group was inserted.
	//
	// The arguments must match the actions expected parameter type, as returned
	// by `g_action_get_parameter_type()`.
	ActivateActionVariant(name string, args *glib.Variant) bool
	// ActivateDefault activates the `default.activate` action from @widget.
	ActivateDefault()
	// AddController adds @controller to @widget so that it will receive events.
	//
	// You will usually want to call this function right after creating any kind
	// of [class@Gtk.EventController].
	AddController(controller EventController)
	// AddCSSClass adds a style class to @widget.
	//
	// After calling this function, the widgets style will match for @css_class,
	// according to CSS matching rules.
	//
	// Use [method@Gtk.Widget.remove_css_class] to remove the style again.
	AddCSSClass(cssClass string)
	// AddMnemonicLabel adds a widget to the list of mnemonic labels for this
	// widget.
	//
	// See [method@Gtk.Widget.list_mnemonic_labels]. Note the list of mnemonic
	// labels for the widget is cleared when the widget is destroyed, so the
	// caller must make sure to update its internal state at this point as well,
	// by using a connection to the [signal@Gtk.Widget::destroy] signal or a
	// weak notifier.
	AddMnemonicLabel(label Widget)
	// Allocate: this function is only used by `GtkWidget` subclasses, to assign
	// a size, position and (optionally) baseline to their child widgets.
	//
	// In this function, the allocation and baseline may be adjusted. The given
	// allocation will be forced to be bigger than the widget's minimum size, as
	// well as at least 0×0 in size.
	//
	// For a version that does not take a transform, see
	// [method@Gtk.Widget.size_allocate].
	Allocate(width int, height int, baseline int, transform *gsk.Transform)
	// ChildFocus: called by widgets as the user moves around the window using
	// keyboard shortcuts.
	//
	// The @direction argument indicates what kind of motion is taking place
	// (up, down, left, right, tab forward, tab backward).
	//
	// This function calls the [vfunc@Gtk.Widget.focus] virtual function;
	// widgets can override the virtual function in order to implement
	// appropriate focus behavior.
	//
	// The default `focus()` virtual function for a widget should return `TRUE`
	// if moving in @direction left the focus on a focusable location inside
	// that widget, and `FALSE` if moving in @direction moved the focus outside
	// the widget. When returning `TRUE`, widgets normallycall
	// [method@Gtk.Widget.grab_focus] to place the focus accordingly; when
	// returning `FALSE`, they don’t modify the current focus location.
	//
	// This function is used by custom widget implementations; if you're writing
	// an app, you’d use [method@Gtk.Widget.grab_focus] to move the focus to a
	// particular widget.
	ChildFocus(direction DirectionType) bool
	// ComputeBounds computes the bounds for @widget in the coordinate space of
	// @target.
	//
	// FIXME: Explain what "bounds" are.
	//
	// If the operation is successful, true is returned. If @widget has no
	// bounds or the bounds cannot be expressed in @target's coordinate space
	// (for example if both widgets are in different windows), false is returned
	// and @bounds is set to the zero rectangle.
	//
	// It is valid for @widget and @target to be the same widget.
	ComputeBounds(target Widget) (graphene.Rect, bool)
	// ComputeExpand computes whether a container should give this widget extra
	// space when possible.
	//
	// Containers should check this, rather than looking at
	// [method@Gtk.Widget.get_hexpand] or [method@Gtk.Widget.get_vexpand].
	//
	// This function already checks whether the widget is visible, so visibility
	// does not need to be checked separately. Non-visible widgets are not
	// expanded.
	//
	// The computed expand value uses either the expand setting explicitly set
	// on the widget itself, or, if none has been explicitly set, the widget may
	// expand if some of its children do.
	ComputeExpand(orientation Orientation) bool
	// ComputePoint translates the given @point in @widget's coordinates to
	// coordinates relative to @target’s coordinate system.
	//
	// In order to perform this operation, both widgets must share a common
	// ancestor.
	ComputePoint(target Widget, point *graphene.Point) (graphene.Point, bool)
	// ComputeTransform computes a matrix suitable to describe a transformation
	// from @widget's coordinate system into @target's coordinate system.
	ComputeTransform(target Widget) (graphene.Matrix, bool)
	// Contains tests if the point at (@x, @y) is contained in @widget.
	//
	// The coordinates for (@x, @y) must be in widget coordinates, so (0, 0) is
	// assumed to be the top left of @widget's content area.
	Contains(x float64, y float64) bool
	// DragCheckThreshold checks to see if a drag movement has passed the GTK
	// drag threshold.
	DragCheckThreshold(startX int, startY int, currentX int, currentY int) bool
	// ErrorBell notifies the user about an input-related error on this widget.
	//
	// If the [property@Gtk.Settings:gtk-error-bell] setting is true, it calls
	// [method@Gdk.Surface.beep], otherwise it does nothing.
	//
	// Note that the effect of [method@Gdk.Surface.beep] can be configured in
	// many ways, depending on the windowing backend and the desktop environment
	// or window manager that is used.
	ErrorBell()
	// AllocatedBaseline returns the baseline that has currently been allocated
	// to @widget.
	//
	// This function is intended to be used when implementing handlers for the
	// `GtkWidget`Class.snapshot() function, and when allocating child widgets
	// in `GtkWidget`Class.size_allocate().
	AllocatedBaseline() int
	// AllocatedHeight returns the height that has currently been allocated to
	// @widget.
	AllocatedHeight() int
	// AllocatedWidth returns the width that has currently been allocated to
	// @widget.
	AllocatedWidth() int
	// CanFocus determines whether the input focus can enter @widget or any of
	// its children.
	//
	// See [method@Gtk.Widget.set_focusable].
	CanFocus() bool
	// CanTarget queries whether @widget can be the target of pointer events.
	CanTarget() bool
	// ChildVisible gets the value set with gtk_widget_set_child_visible().
	//
	// If you feel a need to use this function, your code probably needs
	// reorganization.
	//
	// This function is only useful for container implementations and should
	// never be called by an application.
	ChildVisible() bool
	// CSSClasses returns the list of style classes applied to @widget.
	CSSClasses() []string
	// CSSName returns the CSS name that is used for @self.
	CSSName() string
	// FocusOnClick returns whether the widget should grab focus when it is
	// clicked with the mouse.
	//
	// See [method@Gtk.Widget.set_focus_on_click].
	FocusOnClick() bool
	// Focusable determines whether @widget can own the input focus.
	//
	// See [method@Gtk.Widget.set_focusable].
	Focusable() bool
	// HasTooltip returns the current value of the `has-tooltip` property.
	HasTooltip() bool
	// Height returns the content height of the widget.
	//
	// This function returns the size passed to its size-allocate
	// implementation, which is the size you should be using in
	// GtkWidgetClass.snapshot().
	//
	// For pointer events, see [method@Gtk.Widget.contains].
	Height() int
	// Hexpand gets whether the widget would like any available extra horizontal
	// space.
	//
	// When a user resizes a `GtkWindow`, widgets with expand=TRUE generally
	// receive the extra space. For example, a list or scrollable area or
	// document in your window would often be set to expand.
	//
	// Containers should use [method@Gtk.Widget.compute_expand] rather than this
	// function, to see whether a widget, or any of its children, has the expand
	// flag set. If any child of a widget wants to expand, the parent may ask to
	// expand also.
	//
	// This function only looks at the widget’s own hexpand flag, rather than
	// computing whether the entire widget tree rooted at this widget wants to
	// expand.
	Hexpand() bool
	// HexpandSet gets whether gtk_widget_set_hexpand() has been used to
	// explicitly set the expand flag on this widget.
	//
	// If [property@Gtk.Widget:hexpand] property is set, then it overrides any
	// computed expand value based on child widgets. If `hexpand` is not set,
	// then the expand value depends on whether any children of the widget would
	// like to expand.
	//
	// There are few reasons to use this function, but it’s here for
	// completeness and consistency.
	HexpandSet() bool
	// Mapped: whether the widget is mapped.
	Mapped() bool
	// MarginBottom gets the bottom margin of @widget.
	MarginBottom() int
	// MarginEnd gets the end margin of @widget.
	MarginEnd() int
	// MarginStart gets the start margin of @widget.
	MarginStart() int
	// MarginTop gets the top margin of @widget.
	MarginTop() int
	// Name retrieves the name of a widget.
	//
	// See [method@Gtk.Widget.set_name] for the significance of widget names.
	Name() string
	// Opacity #Fetches the requested opacity for this widget.
	//
	// See [method@Gtk.Widget.set_opacity].
	Opacity() float64
	// PreferredSize retrieves the minimum and natural size of a widget, taking
	// into account the widget’s preference for height-for-width management.
	//
	// This is used to retrieve a suitable size by container widgets which do
	// not impose any restrictions on the child placement. It can be used to
	// deduce toplevel window and menu sizes as well as child widgets in
	// free-form containers such as `GtkFixed`.
	//
	// Handle with care. Note that the natural height of a height-for-width
	// widget will generally be a smaller size than the minimum height, since
	// the required height for the natural width is generally smaller than the
	// required height for the minimum width.
	//
	// Use [id@gtk_widget_measure] if you want to support baseline alignment.
	PreferredSize() (minimumSize Requisition, naturalSize Requisition)
	// Realized determines whether @widget is realized.
	Realized() bool
	// ReceivesDefault determines whether @widget is always treated as the
	// default widget within its toplevel when it has the focus, even if another
	// widget is the default.
	//
	// See [method@Gtk.Widget.set_receives_default].
	ReceivesDefault() bool
	// ScaleFactor retrieves the internal scale factor that maps from window
	// coordinates to the actual device pixels.
	//
	// On traditional systems this is 1, on high density outputs, it can be a
	// higher value (typically 2).
	//
	// See [method@Gdk.Surface.get_scale_factor].
	ScaleFactor() int
	// Sensitive returns the widget’s sensitivity.
	//
	// This function returns the value that has been set using
	// [method@Gtk.Widget.set_sensitive]).
	//
	// The effective sensitivity of a widget is however determined by both its
	// own and its parent widget’s sensitivity. See
	// [method@Gtk.Widget.is_sensitive].
	Sensitive() bool
	// Size returns the content width or height of the widget.
	//
	// Which dimension is returned depends on @orientation.
	//
	// This is equivalent to calling [method@Gtk.Widget.get_width] for
	// GTK_ORIENTATION_HORIZONTAL or [method@Gtk.Widget.get_height] for
	// GTK_ORIENTATION_VERTICAL, but can be used when writing
	// orientation-independent code, such as when implementing
	// [iface@Gtk.Orientable] widgets.
	Size(orientation Orientation) int
	// SizeRequest gets the size request that was explicitly set for the widget
	// using gtk_widget_set_size_request().
	//
	// A value of -1 stored in @width or @height indicates that that dimension
	// has not been set explicitly and the natural requisition of the widget
	// will be used instead. See [method@Gtk.Widget.set_size_request]. To get
	// the size a widget will actually request, call [method@Gtk.Widget.measure]
	// instead of this function.
	SizeRequest() (width int, height int)
	// TemplateChild: fetch an object build from the template XML for
	// @widget_type in this @widget instance.
	//
	// This will only report children which were previously declared with
	// [method@Gtk.WidgetClass.bind_template_child_full] or one of its variants.
	//
	// This function is only meant to be called for code which is private to the
	// @widget_type which declared the child and is meant for language bindings
	// which cannot easily make use of the GObject structure offsets.
	TemplateChild(widgetType externglib.Type, name string) gextras.Objector
	// TooltipMarkup gets the contents of the tooltip for @widget.
	//
	// If the tooltip has not been set using
	// [method@Gtk.Widget.set_tooltip_markup], this function returns nil.
	TooltipMarkup() string
	// TooltipText gets the contents of the tooltip for @widget.
	//
	// If the @widget's tooltip was set using
	// [method@Gtk.Widget.set_tooltip_markup], this function will return the
	// escaped text.
	TooltipText() string
	// Vexpand gets whether the widget would like any available extra vertical
	// space.
	//
	// See [method@Gtk.Widget.get_hexpand] for more detail.
	Vexpand() bool
	// VexpandSet gets whether gtk_widget_set_vexpand() has been used to
	// explicitly set the expand flag on this widget.
	//
	// See [method@Gtk.Widget.get_hexpand_set] for more detail.
	VexpandSet() bool
	// Visible determines whether the widget is visible.
	//
	// If you want to take into account whether the widget’s parent is also
	// marked as visible, use [method@Gtk.Widget.is_visible] instead.
	//
	// This function does not check if the widget is obscured in any way.
	//
	// See [method@Gtk.Widget.set_visible].
	Visible() bool
	// Width returns the content width of the widget.
	//
	// This function returns the size passed to its size-allocate
	// implementation, which is the size you should be using in
	// GtkWidgetClass.snapshot().
	//
	// For pointer events, see [method@Gtk.Widget.contains].
	Width() int
	// GrabFocus causes @widget to have the keyboard focus for the `GtkWindow`
	// it's inside.
	//
	// If @widget is not focusable, or its ::grab_focus implementation cannot
	// transfer the focus to a descendant of @widget that is focusable, it will
	// not take focus and false will be returned.
	//
	// Calling [method@Gtk.Widget.grab_focus] on an already focused widget is
	// allowed, should not have an effect, and return true.
	GrabFocus() bool
	// HasCSSClass returns whether @css_class is currently applied to @widget.
	HasCSSClass(cssClass string) bool
	// HasDefault determines whether @widget is the current default widget
	// within its toplevel.
	HasDefault() bool
	// HasFocus determines if the widget has the global input focus.
	//
	// See [method@Gtk.Widget.is_focus] for the difference between having the
	// global input focus, and only having the focus within a toplevel.
	HasFocus() bool
	// HasVisibleFocus determines if the widget should show a visible indication
	// that it has the global input focus.
	//
	// This is a convenience function that takes into account whether focus
	// indication should currently be shown in the toplevel window of @widget.
	// See [method@Gtk.Window.get_focus_visible] for more information about
	// focus indication.
	//
	// To find out if the widget has the global input focus, use
	// [method@Gtk.Widget.has_focus].
	HasVisibleFocus() bool
	// Hide reverses the effects of gtk_widget_show().
	//
	// This is causing the widget to be hidden (invisible to the user).
	Hide()
	// InDestruction returns whether the widget is currently being destroyed.
	//
	// This information can sometimes be used to avoid doing unnecessary work.
	InDestruction() bool
	// InitTemplate creates and initializes child widgets defined in templates.
	//
	// This function must be called in the instance initializer for any class
	// which assigned itself a template using
	// [method@Gtk.WidgetClass.set_template].
	//
	// It is important to call this function in the instance initializer of a
	// `GtkWidget` subclass and not in `GObject.constructed()` or
	// `GObject.constructor()` for two reasons:
	//
	//    - derived widgets will assume that the composite widgets
	//      defined by its parent classes have been created in their
	//      relative instance initializers
	//    - when calling `g_object_new()` on a widget with composite templates,
	//      it’s important to build the composite widgets before the construct
	//      properties are set. Properties passed to `g_object_new()` should
	//      take precedence over properties set in the private template XML
	//
	// A good rule of thumb is to call this function as the first thing in an
	// instance initialization function.
	InitTemplate()
	// InsertActionGroup inserts @group into @widget.
	//
	// Children of @widget that implement [iface@Gtk.Actionable] can then be
	// associated with actions in @group by setting their “action-name” to
	// @prefix.`action-name`.
	//
	// Note that inheritance is defined for individual actions. I.e. even if you
	// insert a group with prefix @prefix, actions with the same prefix will
	// still be inherited from the parent, unless the group contains an action
	// with the same name.
	//
	// If @group is nil, a previously inserted group for @name is removed from
	// @widget.
	InsertActionGroup(name string, group gio.ActionGroup)
	// InsertAfter inserts @widget into the child widget list of @parent.
	//
	// It will be placed after @previous_sibling, or at the beginning if
	// @previous_sibling is nil.
	//
	// After calling this function, `gtk_widget_get_prev_sibling(widget)` will
	// return @previous_sibling.
	//
	// If @parent is already set as the parent widget of @widget, this function
	// can also be used to reorder @widget in the child widget list of @parent.
	//
	// This API is primarily meant for widget implementations; if you are just
	// using a widget, you *must* use its own API for adding children.
	InsertAfter(parent Widget, previousSibling Widget)
	// InsertBefore inserts @widget into the child widget list of @parent.
	//
	// It will be placed before @next_sibling, or at the end if @next_sibling is
	// nil.
	//
	// After calling this function, `gtk_widget_get_next_sibling(widget)` will
	// return @next_sibling.
	//
	// If @parent is already set as the parent widget of @widget, this function
	// can also be used to reorder @widget in the child widget list of @parent.
	//
	// This API is primarily meant for widget implementations; if you are just
	// using a widget, you *must* use its own API for adding children.
	InsertBefore(parent Widget, nextSibling Widget)
	// IsAncestor determines whether @widget is somewhere inside @ancestor,
	// possibly with intermediate containers.
	IsAncestor(ancestor Widget) bool
	// IsDrawable determines whether @widget can be drawn to.
	//
	// A widget can be drawn if it is mapped and visible.
	IsDrawable() bool
	// IsFocus determines if the widget is the focus widget within its toplevel.
	//
	// This does not mean that the [property@Gtk.Widget:has-focus] property is
	// necessarily set; [property@Gtk,Widget:has-focus] will only be set if the
	// toplevel widget additionally has the global input focus.)
	IsFocus() bool
	// IsSensitive returns the widget’s effective sensitivity.
	//
	// This means it is sensitive itself and also its parent widget is
	// sensitive.
	IsSensitive() bool
	// IsVisible determines whether the widget and all its parents are marked as
	// visible.
	//
	// This function does not check if the widget is obscured in any way.
	//
	// See also [method@Gtk.Widget.get_visible] and
	// [method@Gtk.Widget.set_visible].
	IsVisible() bool
	// KeynavFailed emits the `::keynav-failed` signal on the widget.
	//
	// This function should be called whenever keyboard navigation within a
	// single widget hits a boundary.
	//
	// The return value of this function should be interpreted in a way similar
	// to the return value of [method@Gtk.Widget.child_focus]. When true is
	// returned, stay in the widget, the failed keyboard navigation is OK and/or
	// there is nowhere we can/should move the focus to. When false is returned,
	// the caller should continue with keyboard navigation outside the widget,
	// e.g. by calling [method@Gtk.Widget.child_focus] on the widget’s toplevel.
	//
	// The default [signal@Gtk.Widget::keynav-failed] handler returns false for
	// GTK_DIR_TAB_FORWARD and GTK_DIR_TAB_BACKWARD. For the other values of
	// DirectionType it returns true.
	//
	// Whenever the default handler returns true, it also calls
	// [method@Gtk.Widget.error_bell] to notify the user of the failed keyboard
	// navigation.
	//
	// A use case for providing an own implementation of ::keynav-failed (either
	// by connecting to it or by overriding it) would be a row of
	// [class@Gtk.Entry] widgets where the user should be able to navigate the
	// entire row with the cursor keys, as e.g. known from user interfaces that
	// require entering license keys.
	KeynavFailed(direction DirectionType) bool
	// Map causes a widget to be mapped if it isn’t already.
	//
	// This function is only for use in widget implementations.
	Map()
	// Measure measures @widget in the orientation @orientation and for the
	// given @for_size.
	//
	// As an example, if @orientation is GTK_ORIENTATION_HORIZONTAL and
	// @for_size is 300, this functions will compute the minimum and natural
	// width of @widget if it is allocated at a height of 300 pixels.
	//
	// See GtkWidget’s geometry management section
	// (class.Widget.html#height-for-width-geometry-management) for a more
	// details on implementing WidgetClass.measure().
	Measure(orientation Orientation, forSize int) (minimum int, natural int, minimumBaseline int, naturalBaseline int)
	// MnemonicActivate emits the `GtkWidget`::mnemonic-activate signal.
	MnemonicActivate(groupCycling bool) bool
	// QueueAllocate flags the widget for a rerun of the
	// GtkWidgetClass::size_allocate function.
	//
	// Use this function instead of [method@Gtk.Widget.queue_resize] when the
	// @widget's size request didn't change but it wants to reposition its
	// contents.
	//
	// An example user of this function is [method@Gtk.Widget.set_halign].
	//
	// This function is only for use in widget implementations.
	QueueAllocate()
	// QueueDraw schedules this widget to be redrawn in paint phase of the
	// current or the next frame.
	//
	// This means @widget's GtkWidgetClass.snapshot() implementation will be
	// called.
	QueueDraw()
	// QueueResize flags a widget to have its size renegotiated.
	//
	// This should be called when a widget for some reason has a new size
	// request. For example, when you change the text in a [class@Gtk.Label],
	// the label queues a resize to ensure there’s enough space for the new
	// text.
	//
	// Note that you cannot call gtk_widget_queue_resize() on a widget from
	// inside its implementation of the GtkWidgetClass::size_allocate virtual
	// method. Calls to gtk_widget_queue_resize() from inside
	// GtkWidgetClass::size_allocate will be silently ignored.
	//
	// This function is only for use in widget implementations.
	QueueResize()
	// Realize creates the GDK resources associated with a widget.
	//
	// Normally realization happens implicitly; if you show a widget and all its
	// parent containers, then the widget will be realized and mapped
	// automatically.
	//
	// Realizing a widget requires all the widget’s parent widgets to be
	// realized; calling this function realizes the widget’s parents in addition
	// to @widget itself. If a widget is not yet inside a toplevel window when
	// you realize it, bad things will happen.
	//
	// This function is primarily used in widget implementations, and isn’t very
	// useful otherwise. Many times when you think you might need it, a better
	// approach is to connect to a signal that will be called after the widget
	// is realized automatically, such as [signal@Gtk.Widget::realize].
	Realize()
	// RemoveController removes @controller from @widget, so that it doesn't
	// process events anymore.
	//
	// It should not be used again.
	//
	// Widgets will remove all event controllers automatically when they are
	// destroyed, there is normally no need to call this function.
	RemoveController(controller EventController)
	// RemoveCSSClass removes a style from @widget.
	//
	// After this, the style of @widget will stop matching for @css_class.
	RemoveCSSClass(cssClass string)
	// RemoveMnemonicLabel removes a widget from the list of mnemonic labels for
	// this widget.
	//
	// See [method@Gtk.Widget.list_mnemonic_labels]. The widget must have
	// previously been added to the list with
	// [method@Gtk.Widget.add_mnemonic_label].
	RemoveMnemonicLabel(label Widget)
	// RemoveTickCallback removes a tick callback previously registered with
	// gtk_widget_add_tick_callback().
	RemoveTickCallback(id uint)
	// SetCanFocus specifies whether the input focus can enter the widget or any
	// of its children.
	//
	// Applications should set @can_focus to false to mark a widget as for
	// pointer/touch use only.
	//
	// Note that having @can_focus be true is only one of the necessary
	// conditions for being focusable. A widget must also be sensitive and
	// focusable and not have an ancestor that is marked as not can-focus in
	// order to receive input focus.
	//
	// See [method@Gtk.Widget.grab_focus] for actually setting the input focus
	// on a widget.
	SetCanFocus(canFocus bool)
	// SetCanTarget sets whether @widget can be the target of pointer events.
	SetCanTarget(canTarget bool)
	// SetChildVisible sets whether @widget should be mapped along with its
	// parent.
	//
	// The child visibility can be set for widget before it is added to a
	// container with [method@Gtk.Widget.set_parent], to avoid mapping children
	// unnecessary before immediately unmapping them. However it will be reset
	// to its default state of true when the widget is removed from a container.
	//
	// Note that changing the child visibility of a widget does not queue a
	// resize on the widget. Most of the time, the size of a widget is computed
	// from all visible children, whether or not they are mapped. If this is not
	// the case, the container can queue a resize itself.
	//
	// This function is only useful for container implementations and should
	// never be called by an application.
	SetChildVisible(childVisible bool)
	// SetCSSClasses: will clear all style classes applied to @widget and
	// replace them with @classes.
	SetCSSClasses(classes []string)
	// SetCursor sets the cursor to be shown when pointer devices point towards
	// @widget.
	//
	// If the @cursor is NULL, @widget will use the cursor inherited from the
	// parent widget.
	SetCursor(cursor gdk.Cursor)
	// SetCursorFromName sets a named cursor to be shown when pointer devices
	// point towards @widget.
	//
	// This is a utility function that creates a cursor via
	// [ctor@Gdk.Cursor.new_from_name] and then sets it on @widget with
	// [method@Gtk.Widget.set_cursor]. See those functions for details.
	//
	// On top of that, this function allows @name to be nil, which will do the
	// same as calling [method@Gtk.Widget.set_cursor] with a nil cursor.
	SetCursorFromName(name string)
	// SetDirection sets the reading direction on a particular widget.
	//
	// This direction controls the primary direction for widgets containing
	// text, and also the direction in which the children of a container are
	// packed. The ability to set the direction is present in order so that
	// correct localization into languages with right-to-left reading directions
	// can be done. Generally, applications will let the default reading
	// direction present, except for containers where the containers are
	// arranged in an order that is explicitly visual rather than logical (such
	// as buttons for text justification).
	//
	// If the direction is set to GTK_TEXT_DIR_NONE, then the value set by
	// [func@Gtk.Widget.set_default_direction] will be used.
	SetDirection(dir TextDirection)
	// SetFocusChild: set @child as the current focus child of @widget.
	//
	// The previous focus child will be unset.
	//
	// This function is only suitable for widget implementations. If you want a
	// certain widget to get the input focus, call
	// [method@Gtk.Widget.grab_focus] on it.
	SetFocusChild(child Widget)
	// SetFocusOnClick sets whether the widget should grab focus when it is
	// clicked with the mouse.
	//
	// Making mouse clicks not grab focus is useful in places like toolbars
	// where you don’t want the keyboard focus removed from the main area of the
	// application.
	SetFocusOnClick(focusOnClick bool)
	// SetFocusable specifies whether @widget can own the input focus.
	//
	// Widget implementations should set @focusable to true in their init()
	// function if they want to receive keyboard input.
	//
	// Note that having @focusable be true is only one of the necessary
	// conditions for being focusable. A widget must also be sensitive and
	// can-focus and not have an ancestor that is marked as not can-focus in
	// order to receive input focus.
	//
	// See [method@Gtk.Widget.grab_focus] for actually setting the input focus
	// on a widget.
	SetFocusable(focusable bool)
	// SetFontMap sets the font map to use for Pango rendering.
	//
	// The font map is the object that is used to look up fonts. Setting a
	// custom font map can be useful in special situations, e.g. when you need
	// to add application-specific fonts to the set of available fonts.
	//
	// When not set, the widget will inherit the font map from its parent.
	SetFontMap(fontMap pango.FontMap)
	// SetFontOptions sets the `cairo_font_options_t` used for Pango rendering
	// in this widget.
	//
	// When not set, the default font options for the `GdkDisplay` will be used.
	SetFontOptions(options *cairo.FontOptions)
	// SetHalign sets the horizontal alignment of @widget.
	SetHalign(align Align)
	// SetHasTooltip sets the `has-tooltip` property on @widget to @has_tooltip.
	SetHasTooltip(hasTooltip bool)
	// SetHexpand sets whether the widget would like any available extra
	// horizontal space.
	//
	// When a user resizes a `GtkWindow`, widgets with expand=TRUE generally
	// receive the extra space. For example, a list or scrollable area or
	// document in your window would often be set to expand.
	//
	// Call this function to set the expand flag if you would like your widget
	// to become larger horizontally when the window has extra room.
	//
	// By default, widgets automatically expand if any of their children want to
	// expand. (To see if a widget will automatically expand given its current
	// children and state, call [method@Gtk.Widget.compute_expand]. A container
	// can decide how the expandability of children affects the expansion of the
	// container by overriding the compute_expand virtual method on
	// `GtkWidget`.).
	//
	// Setting hexpand explicitly with this function will override the automatic
	// expand behavior.
	//
	// This function forces the widget to expand or not to expand, regardless of
	// children. The override occurs because [method@Gtk.Widget.set_hexpand]
	// sets the hexpand-set property (see [method@Gtk.Widget.set_hexpand_set])
	// which causes the widget’s hexpand value to be used, rather than looking
	// at children and widget state.
	SetHexpand(expand bool)
	// SetHexpandSet sets whether the hexpand flag will be used.
	//
	// The [property@Gtk.Widget:hexpand-set] property will be set automatically
	// when you call [method@Gtk.Widget.set_hexpand] to set hexpand, so the most
	// likely reason to use this function would be to unset an explicit expand
	// flag.
	//
	// If hexpand is set, then it overrides any computed expand value based on
	// child widgets. If hexpand is not set, then the expand value depends on
	// whether any children of the widget would like to expand.
	//
	// There are few reasons to use this function, but it’s here for
	// completeness and consistency.
	SetHexpandSet(set bool)
	// SetLayoutManager sets the layout manager delegate instance that provides
	// an implementation for measuring and allocating the children of @widget.
	SetLayoutManager(layoutManager LayoutManager)
	// SetMarginBottom sets the bottom margin of @widget.
	SetMarginBottom(margin int)
	// SetMarginEnd sets the end margin of @widget.
	SetMarginEnd(margin int)
	// SetMarginStart sets the start margin of @widget.
	SetMarginStart(margin int)
	// SetMarginTop sets the top margin of @widget.
	SetMarginTop(margin int)
	// SetName sets a widgets name.
	//
	// Setting a name allows you to refer to the widget from a CSS file. You can
	// apply a style to widgets with a particular name in the CSS file. See the
	// documentation for the CSS syntax (on the same page as the docs for
	// [class@Gtk.StyleContext].
	//
	// Note that the CSS syntax has certain special characters to delimit and
	// represent elements in a selector (period, #, >, *...), so using these
	// will make your widget impossible to match by name. Any combination of
	// alphanumeric symbols, dashes and underscores will suffice.
	SetName(name string)
	// SetOpacity: request the @widget to be rendered partially transparent.
	//
	// An opacity of 0 is fully transparent and an opacity of 1 is fully opaque.
	//
	// Opacity works on both toplevel widgets and child widgets, although there
	// are some limitations: For toplevel widgets, applying opacity depends on
	// the capabilities of the windowing system. On X11, this has any effect
	// only on X displays with a compositing manager, see
	// gdk_display_is_composited(). On Windows and Wayland it should always
	// work, although setting a window’s opacity after the window has been shown
	// may cause some flicker.
	//
	// Note that the opacity is inherited through inclusion — if you set a
	// toplevel to be partially translucent, all of its content will appear
	// translucent, since it is ultimatively rendered on that toplevel. The
	// opacity value itself is not inherited by child widgets (since that would
	// make widgets deeper in the hierarchy progressively more translucent). As
	// a consequence, [class@Gtk.Popover]s and other [class@Gtk.Native] widgets
	// with their own surface will use their own opacity value, and thus by
	// default appear non-translucent, even if they are attached to a toplevel
	// that is translucent.
	SetOpacity(opacity float64)
	// SetOverflow sets how @widget treats content that is drawn outside the
	// widget's content area.
	//
	// See the definition of [enum@Gtk.Overflow] for details.
	//
	// This setting is provided for widget implementations and should not be
	// used by application code.
	//
	// The default value is GTK_OVERFLOW_VISIBLE.
	SetOverflow(overflow Overflow)
	// SetParent sets @parent as the parent widget of @widget.
	//
	// This takes care of details such as updating the state and style of the
	// child to reflect its new location and resizing the parent. The opposite
	// function is [method@Gtk.Widget.unparent].
	//
	// This function is useful only when implementing subclasses of `GtkWidget`.
	SetParent(parent Widget)
	// SetReceivesDefault specifies whether @widget will be treated as the
	// default widget within its toplevel when it has the focus, even if another
	// widget is the default.
	SetReceivesDefault(receivesDefault bool)
	// SetSensitive sets the sensitivity of a widget.
	//
	// A widget is sensitive if the user can interact with it. Insensitive
	// widgets are “grayed out” and the user can’t interact with them.
	// Insensitive widgets are known as “inactive”, “disabled”, or “ghosted” in
	// some other toolkits.
	SetSensitive(sensitive bool)
	// SetSizeRequest sets the minimum size of a widget.
	//
	// That is, the widget’s size request will be at least @width by @height.
	// You can use this function to force a widget to be larger than it normally
	// would be.
	//
	// In most cases, [method@Gtk.Window.set_default_size] is a better choice
	// for toplevel windows than this function; setting the default size will
	// still allow users to shrink the window. Setting the size request will
	// force them to leave the window at least as large as the size request.
	//
	// Note the inherent danger of setting any fixed size - themes, translations
	// into other languages, different fonts, and user action can all change the
	// appropriate size for a given widget. So, it's basically impossible to
	// hardcode a size that will always be correct.
	//
	// The size request of a widget is the smallest size a widget can accept
	// while still functioning well and drawing itself correctly. However in
	// some strange cases a widget may be allocated less than its requested
	// size, and in many cases a widget may be allocated more space than it
	// requested.
	//
	// If the size request in a given direction is -1 (unset), then the
	// “natural” size request of the widget will be used instead.
	//
	// The size request set here does not include any margin from the properties
	// [property@Gtk.Widget:margin-start], [property@Gtk.Widget:margin-end],
	// [property@Gtk.Widget:margin-top], and
	// [property@Gtk.Widget:margin-bottom], but it does include pretty much all
	// other padding or border properties set by any subclass of `GtkWidget`.
	SetSizeRequest(width int, height int)
	// SetStateFlags turns on flag values in the current widget state.
	//
	// Typical widget states are insensitive, prelighted, etc.
	//
	// This function accepts the values GTK_STATE_FLAG_DIR_LTR and
	// GTK_STATE_FLAG_DIR_RTL but ignores them. If you want to set the widget's
	// direction, use [method@Gtk.Widget.set_direction].
	//
	// This function is for use in widget implementations.
	SetStateFlags(flags StateFlags, clear bool)
	// SetTooltipMarkup sets @markup as the contents of the tooltip, which is
	// marked up with Pango markup.
	//
	// This function will take care of setting the
	// [property@Gtk.Widget:has-tooltip] as a side effect, and of the default
	// handler for the [signal@Gtk.Widget::query-tooltip] signal.
	//
	// See also [method@Gtk.Tooltip.set_markup].
	SetTooltipMarkup(markup string)
	// SetTooltipText sets @text as the contents of the tooltip.
	//
	// If @text contains any markup, it will be escaped.
	//
	// This function will take care of setting [property@Gtk.Widget:has-tooltip]
	// as a side effect, and of the default handler for the
	// [signal@Gtk.Widget::query-tooltip] signal.
	//
	// See also [method@Gtk.Tooltip.set_text].
	SetTooltipText(text string)
	// SetValign sets the vertical alignment of @widget.
	SetValign(align Align)
	// SetVexpand sets whether the widget would like any available extra
	// vertical space.
	//
	// See [method@Gtk.Widget.set_hexpand] for more detail.
	SetVexpand(expand bool)
	// SetVexpandSet sets whether the vexpand flag will be used.
	//
	// See [method@Gtk.Widget.set_hexpand_set] for more detail.
	SetVexpandSet(set bool)
	// SetVisible sets the visibility state of @widget.
	//
	// Note that setting this to true doesn’t mean the widget is actually
	// viewable, see [method@Gtk.Widget.get_visible].
	//
	// This function simply calls [method@Gtk.Widget.show] or
	// [method@Gtk.Widget.hide] but is nicer to use when the visibility of the
	// widget depends on some condition.
	SetVisible(visible bool)
	// ShouldLayout returns whether @widget should contribute to the measuring
	// and allocation of its parent.
	//
	// This is false for invisible children, but also for children that have
	// their own surface.
	ShouldLayout() bool
	// Show flags a widget to be displayed.
	//
	// Any widget that isn’t shown will not appear on the screen.
	//
	// Remember that you have to show the containers containing a widget, in
	// addition to the widget itself, before it will appear onscreen.
	//
	// When a toplevel container is shown, it is immediately realized and
	// mapped; other shown widgets are realized and mapped when their toplevel
	// container is realized and mapped.
	Show()
	// SnapshotChild: snapshot the a child of @widget.
	//
	// When a widget receives a call to the snapshot function, it must send
	// synthetic `GtkWidget`Class.snapshot() calls to all children. This
	// function provides a convenient way of doing this. A widget, when it
	// receives a call to its `GtkWidget`Class.snapshot() function, calls
	// gtk_widget_snapshot_child() once for each child, passing in the @snapshot
	// the widget received.
	//
	// gtk_widget_snapshot_child() takes care of translating the origin of
	// @snapshot, and deciding whether the child needs to be snapshot.
	//
	// This function does nothing for children that implement `GtkNative`.
	SnapshotChild(child Widget, snapshot Snapshot)
	// TranslateCoordinates: translate coordinates relative to @src_widget’s
	// allocation to coordinates relative to @dest_widget’s allocations.
	//
	// In order to perform this operation, both widget must share a common
	// ancestor.
	TranslateCoordinates(destWidget Widget, srcX float64, srcY float64) (destX float64, destY float64, ok bool)
	// TriggerTooltipQuery triggers a tooltip query on the display where the
	// toplevel of @widget is located.
	TriggerTooltipQuery()
	// Unmap causes a widget to be unmapped if it’s currently mapped.
	//
	// This function is only for use in widget implementations.
	Unmap()
	// Unparent: dissociate @widget from its parent.
	//
	// This function is only for use in widget implementations, typically in
	// dispose.
	Unparent()
	// Unrealize causes a widget to be unrealized (frees all GDK resources
	// associated with the widget).
	//
	// This function is only useful in widget implementations.
	Unrealize()
	// UnsetStateFlags turns off flag values for the current widget state.
	//
	// See [method@Gtk.Widget.set_state_flags].
	//
	// This function is for use in widget implementations.
	UnsetStateFlags(flags StateFlags)
}

// widget implements the Widget interface.
type widget struct {
	gextras.Objector
	Accessible
	Buildable
	ConstraintTarget
}

var _ Widget = (*widget)(nil)

// WrapWidget wraps a GObject to the right type. It is
// primarily used internally.
func WrapWidget(obj *externglib.Object) Widget {
	return Widget{
		Objector:         obj,
		Accessible:       WrapAccessible(obj),
		Buildable:        WrapBuildable(obj),
		ConstraintTarget: WrapConstraintTarget(obj),
	}
}

func marshalWidget(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapWidget(obj), nil
}

// ActionSetEnabled: enable or disable an action installed with
// gtk_widget_class_install_action().
func (w widget) ActionSetEnabled(actionName string, enabled bool) {
	var _arg0 *C.GtkWidget
	var _arg1 *C.char
	var _arg2 C.gboolean

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.char)(C.CString(actionName))
	defer C.free(unsafe.Pointer(_arg1))
	if enabled {
		_arg2 = C.gboolean(1)
	}

	C.gtk_widget_action_set_enabled(_arg0, _arg1, _arg2)
}

// Activate: for widgets that can be “activated” (buttons, menu items, etc.)
// this function activates them.
//
// The activation will emit the signal set using
// gtk_widget_class_set_activate_signal() during class initialization.
//
// Activation is what happens when you press Enter on a widget during key
// navigation.
//
// If you wish to handle the activation keybinding yourself, it is
// recommended to use gtk_widget_class_add_shortcut() with an action created
// with gtk_signal_action_new().
//
// If @widget isn't activatable, the function returns false.
func (w widget) Activate() bool {
	var _arg0 *C.GtkWidget

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	var _cret C.gboolean

	_cret = C.gtk_widget_activate(_arg0)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// ActivateActionVariant looks up the action in the action groups associated
// with @widget and its ancestors, and activates it.
//
// If the action is in an action group added with
// [method@Gtk.Widget.insert_action_group], the @name is expected to be
// prefixed with the prefix that was used when the group was inserted.
//
// The arguments must match the actions expected parameter type, as returned
// by `g_action_get_parameter_type()`.
func (w widget) ActivateActionVariant(name string, args *glib.Variant) bool {
	var _arg0 *C.GtkWidget
	var _arg1 *C.char
	var _arg2 *C.GVariant

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.char)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.GVariant)(unsafe.Pointer(args.Native()))

	var _cret C.gboolean

	_cret = C.gtk_widget_activate_action_variant(_arg0, _arg1, _arg2)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// ActivateDefault activates the `default.activate` action from @widget.
func (w widget) ActivateDefault() {
	var _arg0 *C.GtkWidget

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_activate_default(_arg0)
}

// AddController adds @controller to @widget so that it will receive events.
//
// You will usually want to call this function right after creating any kind
// of [class@Gtk.EventController].
func (w widget) AddController(controller EventController) {
	var _arg0 *C.GtkWidget
	var _arg1 *C.GtkEventController

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GtkEventController)(unsafe.Pointer(controller.Native()))

	C.gtk_widget_add_controller(_arg0, _arg1)
}

// AddCSSClass adds a style class to @widget.
//
// After calling this function, the widgets style will match for @css_class,
// according to CSS matching rules.
//
// Use [method@Gtk.Widget.remove_css_class] to remove the style again.
func (w widget) AddCSSClass(cssClass string) {
	var _arg0 *C.GtkWidget
	var _arg1 *C.char

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.char)(C.CString(cssClass))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_widget_add_css_class(_arg0, _arg1)
}

// AddMnemonicLabel adds a widget to the list of mnemonic labels for this
// widget.
//
// See [method@Gtk.Widget.list_mnemonic_labels]. Note the list of mnemonic
// labels for the widget is cleared when the widget is destroyed, so the
// caller must make sure to update its internal state at this point as well,
// by using a connection to the [signal@Gtk.Widget::destroy] signal or a
// weak notifier.
func (w widget) AddMnemonicLabel(label Widget) {
	var _arg0 *C.GtkWidget
	var _arg1 *C.GtkWidget

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(label.Native()))

	C.gtk_widget_add_mnemonic_label(_arg0, _arg1)
}

// Allocate: this function is only used by `GtkWidget` subclasses, to assign
// a size, position and (optionally) baseline to their child widgets.
//
// In this function, the allocation and baseline may be adjusted. The given
// allocation will be forced to be bigger than the widget's minimum size, as
// well as at least 0×0 in size.
//
// For a version that does not take a transform, see
// [method@Gtk.Widget.size_allocate].
func (w widget) Allocate(width int, height int, baseline int, transform *gsk.Transform) {
	var _arg0 *C.GtkWidget
	var _arg1 C.int
	var _arg2 C.int
	var _arg3 C.int
	var _arg4 *C.GskTransform

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.int(width)
	_arg2 = C.int(height)
	_arg3 = C.int(baseline)
	_arg4 = (*C.GskTransform)(unsafe.Pointer(transform.Native()))

	C.gtk_widget_allocate(_arg0, _arg1, _arg2, _arg3, _arg4)
}

// ChildFocus: called by widgets as the user moves around the window using
// keyboard shortcuts.
//
// The @direction argument indicates what kind of motion is taking place
// (up, down, left, right, tab forward, tab backward).
//
// This function calls the [vfunc@Gtk.Widget.focus] virtual function;
// widgets can override the virtual function in order to implement
// appropriate focus behavior.
//
// The default `focus()` virtual function for a widget should return `TRUE`
// if moving in @direction left the focus on a focusable location inside
// that widget, and `FALSE` if moving in @direction moved the focus outside
// the widget. When returning `TRUE`, widgets normallycall
// [method@Gtk.Widget.grab_focus] to place the focus accordingly; when
// returning `FALSE`, they don’t modify the current focus location.
//
// This function is used by custom widget implementations; if you're writing
// an app, you’d use [method@Gtk.Widget.grab_focus] to move the focus to a
// particular widget.
func (w widget) ChildFocus(direction DirectionType) bool {
	var _arg0 *C.GtkWidget
	var _arg1 C.GtkDirectionType

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (C.GtkDirectionType)(direction)

	var _cret C.gboolean

	_cret = C.gtk_widget_child_focus(_arg0, _arg1)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// ComputeBounds computes the bounds for @widget in the coordinate space of
// @target.
//
// FIXME: Explain what "bounds" are.
//
// If the operation is successful, true is returned. If @widget has no
// bounds or the bounds cannot be expressed in @target's coordinate space
// (for example if both widgets are in different windows), false is returned
// and @bounds is set to the zero rectangle.
//
// It is valid for @widget and @target to be the same widget.
func (w widget) ComputeBounds(target Widget) (graphene.Rect, bool) {
	var _arg0 *C.GtkWidget
	var _arg1 *C.GtkWidget

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(target.Native()))

	var _outBounds graphene.Rect
	var _cret C.gboolean

	_cret = C.gtk_widget_compute_bounds(_arg0, _arg1, (*C.graphene_rect_t)(unsafe.Pointer(&_outBounds)))

	var _ok bool

	if _cret {
		_ok = true
	}

	return _outBounds, _ok
}

// ComputeExpand computes whether a container should give this widget extra
// space when possible.
//
// Containers should check this, rather than looking at
// [method@Gtk.Widget.get_hexpand] or [method@Gtk.Widget.get_vexpand].
//
// This function already checks whether the widget is visible, so visibility
// does not need to be checked separately. Non-visible widgets are not
// expanded.
//
// The computed expand value uses either the expand setting explicitly set
// on the widget itself, or, if none has been explicitly set, the widget may
// expand if some of its children do.
func (w widget) ComputeExpand(orientation Orientation) bool {
	var _arg0 *C.GtkWidget
	var _arg1 C.GtkOrientation

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (C.GtkOrientation)(orientation)

	var _cret C.gboolean

	_cret = C.gtk_widget_compute_expand(_arg0, _arg1)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// ComputePoint translates the given @point in @widget's coordinates to
// coordinates relative to @target’s coordinate system.
//
// In order to perform this operation, both widgets must share a common
// ancestor.
func (w widget) ComputePoint(target Widget, point *graphene.Point) (graphene.Point, bool) {
	var _arg0 *C.GtkWidget
	var _arg1 *C.GtkWidget
	var _arg2 *C.graphene_point_t

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(target.Native()))
	_arg2 = (*C.graphene_point_t)(unsafe.Pointer(point.Native()))

	var _outPoint graphene.Point
	var _cret C.gboolean

	_cret = C.gtk_widget_compute_point(_arg0, _arg1, _arg2, (*C.graphene_point_t)(unsafe.Pointer(&_outPoint)))

	var _ok bool

	if _cret {
		_ok = true
	}

	return _outPoint, _ok
}

// ComputeTransform computes a matrix suitable to describe a transformation
// from @widget's coordinate system into @target's coordinate system.
func (w widget) ComputeTransform(target Widget) (graphene.Matrix, bool) {
	var _arg0 *C.GtkWidget
	var _arg1 *C.GtkWidget

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(target.Native()))

	var _outTransform graphene.Matrix
	var _cret C.gboolean

	_cret = C.gtk_widget_compute_transform(_arg0, _arg1, (*C.graphene_matrix_t)(unsafe.Pointer(&_outTransform)))

	var _ok bool

	if _cret {
		_ok = true
	}

	return _outTransform, _ok
}

// Contains tests if the point at (@x, @y) is contained in @widget.
//
// The coordinates for (@x, @y) must be in widget coordinates, so (0, 0) is
// assumed to be the top left of @widget's content area.
func (w widget) Contains(x float64, y float64) bool {
	var _arg0 *C.GtkWidget
	var _arg1 C.double
	var _arg2 C.double

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.double(x)
	_arg2 = C.double(y)

	var _cret C.gboolean

	_cret = C.gtk_widget_contains(_arg0, _arg1, _arg2)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// DragCheckThreshold checks to see if a drag movement has passed the GTK
// drag threshold.
func (w widget) DragCheckThreshold(startX int, startY int, currentX int, currentY int) bool {
	var _arg0 *C.GtkWidget
	var _arg1 C.int
	var _arg2 C.int
	var _arg3 C.int
	var _arg4 C.int

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.int(startX)
	_arg2 = C.int(startY)
	_arg3 = C.int(currentX)
	_arg4 = C.int(currentY)

	var _cret C.gboolean

	_cret = C.gtk_drag_check_threshold(_arg0, _arg1, _arg2, _arg3, _arg4)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// ErrorBell notifies the user about an input-related error on this widget.
//
// If the [property@Gtk.Settings:gtk-error-bell] setting is true, it calls
// [method@Gdk.Surface.beep], otherwise it does nothing.
//
// Note that the effect of [method@Gdk.Surface.beep] can be configured in
// many ways, depending on the windowing backend and the desktop environment
// or window manager that is used.
func (w widget) ErrorBell() {
	var _arg0 *C.GtkWidget

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_error_bell(_arg0)
}

// AllocatedBaseline returns the baseline that has currently been allocated
// to @widget.
//
// This function is intended to be used when implementing handlers for the
// `GtkWidget`Class.snapshot() function, and when allocating child widgets
// in `GtkWidget`Class.size_allocate().
func (w widget) AllocatedBaseline() int {
	var _arg0 *C.GtkWidget

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	var _cret C.int

	_cret = C.gtk_widget_get_allocated_baseline(_arg0)

	var _gint int

	_gint = (int)(_cret)

	return _gint
}

// AllocatedHeight returns the height that has currently been allocated to
// @widget.
func (w widget) AllocatedHeight() int {
	var _arg0 *C.GtkWidget

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	var _cret C.int

	_cret = C.gtk_widget_get_allocated_height(_arg0)

	var _gint int

	_gint = (int)(_cret)

	return _gint
}

// AllocatedWidth returns the width that has currently been allocated to
// @widget.
func (w widget) AllocatedWidth() int {
	var _arg0 *C.GtkWidget

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	var _cret C.int

	_cret = C.gtk_widget_get_allocated_width(_arg0)

	var _gint int

	_gint = (int)(_cret)

	return _gint
}

// CanFocus determines whether the input focus can enter @widget or any of
// its children.
//
// See [method@Gtk.Widget.set_focusable].
func (w widget) CanFocus() bool {
	var _arg0 *C.GtkWidget

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	var _cret C.gboolean

	_cret = C.gtk_widget_get_can_focus(_arg0)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// CanTarget queries whether @widget can be the target of pointer events.
func (w widget) CanTarget() bool {
	var _arg0 *C.GtkWidget

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	var _cret C.gboolean

	_cret = C.gtk_widget_get_can_target(_arg0)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// ChildVisible gets the value set with gtk_widget_set_child_visible().
//
// If you feel a need to use this function, your code probably needs
// reorganization.
//
// This function is only useful for container implementations and should
// never be called by an application.
func (w widget) ChildVisible() bool {
	var _arg0 *C.GtkWidget

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	var _cret C.gboolean

	_cret = C.gtk_widget_get_child_visible(_arg0)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// CSSClasses returns the list of style classes applied to @widget.
func (w widget) CSSClasses() []string {
	var _arg0 *C.GtkWidget

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	var _cret **C.char

	_cret = C.gtk_widget_get_css_classes(_arg0)

	var _utf8s []string

	{
		var length int
		for p := _cret; *p != 0; p = (**C.char)(ptr.Add(unsafe.Pointer(p), unsafe.Sizeof(int(0)))) {
			length++
			if length < 0 {
				panic(`length overflow`)
			}
		}

		var src []*C.gchar
		ptr.SetSlice(unsafe.Pointer(&src), unsafe.Pointer(_cret), int(length))

		_utf8s = make([]string, length)
		for i := range src {
			_utf8s = C.GoString(_cret)
			defer C.free(unsafe.Pointer(_cret))
		}
	}

	return _utf8s
}

// CSSName returns the CSS name that is used for @self.
func (s widget) CSSName() string {
	var _arg0 *C.GtkWidget

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(s.Native()))

	var _cret *C.char

	_cret = C.gtk_widget_get_css_name(_arg0)

	var _utf8 string

	_utf8 = C.GoString(_cret)

	return _utf8
}

// FocusOnClick returns whether the widget should grab focus when it is
// clicked with the mouse.
//
// See [method@Gtk.Widget.set_focus_on_click].
func (w widget) FocusOnClick() bool {
	var _arg0 *C.GtkWidget

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	var _cret C.gboolean

	_cret = C.gtk_widget_get_focus_on_click(_arg0)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// Focusable determines whether @widget can own the input focus.
//
// See [method@Gtk.Widget.set_focusable].
func (w widget) Focusable() bool {
	var _arg0 *C.GtkWidget

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	var _cret C.gboolean

	_cret = C.gtk_widget_get_focusable(_arg0)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// HasTooltip returns the current value of the `has-tooltip` property.
func (w widget) HasTooltip() bool {
	var _arg0 *C.GtkWidget

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	var _cret C.gboolean

	_cret = C.gtk_widget_get_has_tooltip(_arg0)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// Height returns the content height of the widget.
//
// This function returns the size passed to its size-allocate
// implementation, which is the size you should be using in
// GtkWidgetClass.snapshot().
//
// For pointer events, see [method@Gtk.Widget.contains].
func (w widget) Height() int {
	var _arg0 *C.GtkWidget

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	var _cret C.int

	_cret = C.gtk_widget_get_height(_arg0)

	var _gint int

	_gint = (int)(_cret)

	return _gint
}

// Hexpand gets whether the widget would like any available extra horizontal
// space.
//
// When a user resizes a `GtkWindow`, widgets with expand=TRUE generally
// receive the extra space. For example, a list or scrollable area or
// document in your window would often be set to expand.
//
// Containers should use [method@Gtk.Widget.compute_expand] rather than this
// function, to see whether a widget, or any of its children, has the expand
// flag set. If any child of a widget wants to expand, the parent may ask to
// expand also.
//
// This function only looks at the widget’s own hexpand flag, rather than
// computing whether the entire widget tree rooted at this widget wants to
// expand.
func (w widget) Hexpand() bool {
	var _arg0 *C.GtkWidget

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	var _cret C.gboolean

	_cret = C.gtk_widget_get_hexpand(_arg0)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// HexpandSet gets whether gtk_widget_set_hexpand() has been used to
// explicitly set the expand flag on this widget.
//
// If [property@Gtk.Widget:hexpand] property is set, then it overrides any
// computed expand value based on child widgets. If `hexpand` is not set,
// then the expand value depends on whether any children of the widget would
// like to expand.
//
// There are few reasons to use this function, but it’s here for
// completeness and consistency.
func (w widget) HexpandSet() bool {
	var _arg0 *C.GtkWidget

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	var _cret C.gboolean

	_cret = C.gtk_widget_get_hexpand_set(_arg0)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// Mapped: whether the widget is mapped.
func (w widget) Mapped() bool {
	var _arg0 *C.GtkWidget

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	var _cret C.gboolean

	_cret = C.gtk_widget_get_mapped(_arg0)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// MarginBottom gets the bottom margin of @widget.
func (w widget) MarginBottom() int {
	var _arg0 *C.GtkWidget

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	var _cret C.int

	_cret = C.gtk_widget_get_margin_bottom(_arg0)

	var _gint int

	_gint = (int)(_cret)

	return _gint
}

// MarginEnd gets the end margin of @widget.
func (w widget) MarginEnd() int {
	var _arg0 *C.GtkWidget

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	var _cret C.int

	_cret = C.gtk_widget_get_margin_end(_arg0)

	var _gint int

	_gint = (int)(_cret)

	return _gint
}

// MarginStart gets the start margin of @widget.
func (w widget) MarginStart() int {
	var _arg0 *C.GtkWidget

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	var _cret C.int

	_cret = C.gtk_widget_get_margin_start(_arg0)

	var _gint int

	_gint = (int)(_cret)

	return _gint
}

// MarginTop gets the top margin of @widget.
func (w widget) MarginTop() int {
	var _arg0 *C.GtkWidget

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	var _cret C.int

	_cret = C.gtk_widget_get_margin_top(_arg0)

	var _gint int

	_gint = (int)(_cret)

	return _gint
}

// Name retrieves the name of a widget.
//
// See [method@Gtk.Widget.set_name] for the significance of widget names.
func (w widget) Name() string {
	var _arg0 *C.GtkWidget

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	var _cret *C.char

	_cret = C.gtk_widget_get_name(_arg0)

	var _utf8 string

	_utf8 = C.GoString(_cret)

	return _utf8
}

// Opacity #Fetches the requested opacity for this widget.
//
// See [method@Gtk.Widget.set_opacity].
func (w widget) Opacity() float64 {
	var _arg0 *C.GtkWidget

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	var _cret C.double

	_cret = C.gtk_widget_get_opacity(_arg0)

	var _gdouble float64

	_gdouble = (float64)(_cret)

	return _gdouble
}

// PreferredSize retrieves the minimum and natural size of a widget, taking
// into account the widget’s preference for height-for-width management.
//
// This is used to retrieve a suitable size by container widgets which do
// not impose any restrictions on the child placement. It can be used to
// deduce toplevel window and menu sizes as well as child widgets in
// free-form containers such as `GtkFixed`.
//
// Handle with care. Note that the natural height of a height-for-width
// widget will generally be a smaller size than the minimum height, since
// the required height for the natural width is generally smaller than the
// required height for the minimum width.
//
// Use [id@gtk_widget_measure] if you want to support baseline alignment.
func (w widget) PreferredSize() (minimumSize Requisition, naturalSize Requisition) {
	var _arg0 *C.GtkWidget

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	var _minimumSize Requisition
	var _naturalSize Requisition

	C.gtk_widget_get_preferred_size(_arg0, (*C.GtkRequisition)(unsafe.Pointer(&_minimumSize)), (*C.GtkRequisition)(unsafe.Pointer(&_naturalSize)))

	return _minimumSize, _naturalSize
}

// Realized determines whether @widget is realized.
func (w widget) Realized() bool {
	var _arg0 *C.GtkWidget

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	var _cret C.gboolean

	_cret = C.gtk_widget_get_realized(_arg0)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// ReceivesDefault determines whether @widget is always treated as the
// default widget within its toplevel when it has the focus, even if another
// widget is the default.
//
// See [method@Gtk.Widget.set_receives_default].
func (w widget) ReceivesDefault() bool {
	var _arg0 *C.GtkWidget

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	var _cret C.gboolean

	_cret = C.gtk_widget_get_receives_default(_arg0)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// ScaleFactor retrieves the internal scale factor that maps from window
// coordinates to the actual device pixels.
//
// On traditional systems this is 1, on high density outputs, it can be a
// higher value (typically 2).
//
// See [method@Gdk.Surface.get_scale_factor].
func (w widget) ScaleFactor() int {
	var _arg0 *C.GtkWidget

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	var _cret C.int

	_cret = C.gtk_widget_get_scale_factor(_arg0)

	var _gint int

	_gint = (int)(_cret)

	return _gint
}

// Sensitive returns the widget’s sensitivity.
//
// This function returns the value that has been set using
// [method@Gtk.Widget.set_sensitive]).
//
// The effective sensitivity of a widget is however determined by both its
// own and its parent widget’s sensitivity. See
// [method@Gtk.Widget.is_sensitive].
func (w widget) Sensitive() bool {
	var _arg0 *C.GtkWidget

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	var _cret C.gboolean

	_cret = C.gtk_widget_get_sensitive(_arg0)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// Size returns the content width or height of the widget.
//
// Which dimension is returned depends on @orientation.
//
// This is equivalent to calling [method@Gtk.Widget.get_width] for
// GTK_ORIENTATION_HORIZONTAL or [method@Gtk.Widget.get_height] for
// GTK_ORIENTATION_VERTICAL, but can be used when writing
// orientation-independent code, such as when implementing
// [iface@Gtk.Orientable] widgets.
func (w widget) Size(orientation Orientation) int {
	var _arg0 *C.GtkWidget
	var _arg1 C.GtkOrientation

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (C.GtkOrientation)(orientation)

	var _cret C.int

	_cret = C.gtk_widget_get_size(_arg0, _arg1)

	var _gint int

	_gint = (int)(_cret)

	return _gint
}

// SizeRequest gets the size request that was explicitly set for the widget
// using gtk_widget_set_size_request().
//
// A value of -1 stored in @width or @height indicates that that dimension
// has not been set explicitly and the natural requisition of the widget
// will be used instead. See [method@Gtk.Widget.set_size_request]. To get
// the size a widget will actually request, call [method@Gtk.Widget.measure]
// instead of this function.
func (w widget) SizeRequest() (width int, height int) {
	var _arg0 *C.GtkWidget

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	var _arg1 C.int
	var _arg2 C.int

	C.gtk_widget_get_size_request(_arg0, &_arg1, &_arg2)

	var _width int
	var _height int

	_width = (int)(_arg1)
	_height = (int)(_arg2)

	return _width, _height
}

// TemplateChild: fetch an object build from the template XML for
// @widget_type in this @widget instance.
//
// This will only report children which were previously declared with
// [method@Gtk.WidgetClass.bind_template_child_full] or one of its variants.
//
// This function is only meant to be called for code which is private to the
// @widget_type which declared the child and is meant for language bindings
// which cannot easily make use of the GObject structure offsets.
func (w widget) TemplateChild(widgetType externglib.Type, name string) gextras.Objector {
	var _arg0 *C.GtkWidget
	var _arg1 C.GType
	var _arg2 *C.char

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.GType(widgetType)
	_arg2 = (*C.char)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg2))

	var _cret *C.GObject

	_cret = C.gtk_widget_get_template_child(_arg0, _arg1, _arg2)

	var _object gextras.Objector

	_object = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret.Native()))).(gextras.Objector)

	return _object
}

// TooltipMarkup gets the contents of the tooltip for @widget.
//
// If the tooltip has not been set using
// [method@Gtk.Widget.set_tooltip_markup], this function returns nil.
func (w widget) TooltipMarkup() string {
	var _arg0 *C.GtkWidget

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	var _cret *C.char

	_cret = C.gtk_widget_get_tooltip_markup(_arg0)

	var _utf8 string

	_utf8 = C.GoString(_cret)

	return _utf8
}

// TooltipText gets the contents of the tooltip for @widget.
//
// If the @widget's tooltip was set using
// [method@Gtk.Widget.set_tooltip_markup], this function will return the
// escaped text.
func (w widget) TooltipText() string {
	var _arg0 *C.GtkWidget

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	var _cret *C.char

	_cret = C.gtk_widget_get_tooltip_text(_arg0)

	var _utf8 string

	_utf8 = C.GoString(_cret)

	return _utf8
}

// Vexpand gets whether the widget would like any available extra vertical
// space.
//
// See [method@Gtk.Widget.get_hexpand] for more detail.
func (w widget) Vexpand() bool {
	var _arg0 *C.GtkWidget

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	var _cret C.gboolean

	_cret = C.gtk_widget_get_vexpand(_arg0)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// VexpandSet gets whether gtk_widget_set_vexpand() has been used to
// explicitly set the expand flag on this widget.
//
// See [method@Gtk.Widget.get_hexpand_set] for more detail.
func (w widget) VexpandSet() bool {
	var _arg0 *C.GtkWidget

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	var _cret C.gboolean

	_cret = C.gtk_widget_get_vexpand_set(_arg0)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// Visible determines whether the widget is visible.
//
// If you want to take into account whether the widget’s parent is also
// marked as visible, use [method@Gtk.Widget.is_visible] instead.
//
// This function does not check if the widget is obscured in any way.
//
// See [method@Gtk.Widget.set_visible].
func (w widget) Visible() bool {
	var _arg0 *C.GtkWidget

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	var _cret C.gboolean

	_cret = C.gtk_widget_get_visible(_arg0)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// Width returns the content width of the widget.
//
// This function returns the size passed to its size-allocate
// implementation, which is the size you should be using in
// GtkWidgetClass.snapshot().
//
// For pointer events, see [method@Gtk.Widget.contains].
func (w widget) Width() int {
	var _arg0 *C.GtkWidget

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	var _cret C.int

	_cret = C.gtk_widget_get_width(_arg0)

	var _gint int

	_gint = (int)(_cret)

	return _gint
}

// GrabFocus causes @widget to have the keyboard focus for the `GtkWindow`
// it's inside.
//
// If @widget is not focusable, or its ::grab_focus implementation cannot
// transfer the focus to a descendant of @widget that is focusable, it will
// not take focus and false will be returned.
//
// Calling [method@Gtk.Widget.grab_focus] on an already focused widget is
// allowed, should not have an effect, and return true.
func (w widget) GrabFocus() bool {
	var _arg0 *C.GtkWidget

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	var _cret C.gboolean

	_cret = C.gtk_widget_grab_focus(_arg0)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// HasCSSClass returns whether @css_class is currently applied to @widget.
func (w widget) HasCSSClass(cssClass string) bool {
	var _arg0 *C.GtkWidget
	var _arg1 *C.char

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.char)(C.CString(cssClass))
	defer C.free(unsafe.Pointer(_arg1))

	var _cret C.gboolean

	_cret = C.gtk_widget_has_css_class(_arg0, _arg1)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// HasDefault determines whether @widget is the current default widget
// within its toplevel.
func (w widget) HasDefault() bool {
	var _arg0 *C.GtkWidget

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	var _cret C.gboolean

	_cret = C.gtk_widget_has_default(_arg0)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// HasFocus determines if the widget has the global input focus.
//
// See [method@Gtk.Widget.is_focus] for the difference between having the
// global input focus, and only having the focus within a toplevel.
func (w widget) HasFocus() bool {
	var _arg0 *C.GtkWidget

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	var _cret C.gboolean

	_cret = C.gtk_widget_has_focus(_arg0)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// HasVisibleFocus determines if the widget should show a visible indication
// that it has the global input focus.
//
// This is a convenience function that takes into account whether focus
// indication should currently be shown in the toplevel window of @widget.
// See [method@Gtk.Window.get_focus_visible] for more information about
// focus indication.
//
// To find out if the widget has the global input focus, use
// [method@Gtk.Widget.has_focus].
func (w widget) HasVisibleFocus() bool {
	var _arg0 *C.GtkWidget

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	var _cret C.gboolean

	_cret = C.gtk_widget_has_visible_focus(_arg0)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// Hide reverses the effects of gtk_widget_show().
//
// This is causing the widget to be hidden (invisible to the user).
func (w widget) Hide() {
	var _arg0 *C.GtkWidget

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_hide(_arg0)
}

// InDestruction returns whether the widget is currently being destroyed.
//
// This information can sometimes be used to avoid doing unnecessary work.
func (w widget) InDestruction() bool {
	var _arg0 *C.GtkWidget

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	var _cret C.gboolean

	_cret = C.gtk_widget_in_destruction(_arg0)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// InitTemplate creates and initializes child widgets defined in templates.
//
// This function must be called in the instance initializer for any class
// which assigned itself a template using
// [method@Gtk.WidgetClass.set_template].
//
// It is important to call this function in the instance initializer of a
// `GtkWidget` subclass and not in `GObject.constructed()` or
// `GObject.constructor()` for two reasons:
//
//    - derived widgets will assume that the composite widgets
//      defined by its parent classes have been created in their
//      relative instance initializers
//    - when calling `g_object_new()` on a widget with composite templates,
//      it’s important to build the composite widgets before the construct
//      properties are set. Properties passed to `g_object_new()` should
//      take precedence over properties set in the private template XML
//
// A good rule of thumb is to call this function as the first thing in an
// instance initialization function.
func (w widget) InitTemplate() {
	var _arg0 *C.GtkWidget

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_init_template(_arg0)
}

// InsertActionGroup inserts @group into @widget.
//
// Children of @widget that implement [iface@Gtk.Actionable] can then be
// associated with actions in @group by setting their “action-name” to
// @prefix.`action-name`.
//
// Note that inheritance is defined for individual actions. I.e. even if you
// insert a group with prefix @prefix, actions with the same prefix will
// still be inherited from the parent, unless the group contains an action
// with the same name.
//
// If @group is nil, a previously inserted group for @name is removed from
// @widget.
func (w widget) InsertActionGroup(name string, group gio.ActionGroup) {
	var _arg0 *C.GtkWidget
	var _arg1 *C.char
	var _arg2 *C.GActionGroup

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.char)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.GActionGroup)(unsafe.Pointer(group.Native()))

	C.gtk_widget_insert_action_group(_arg0, _arg1, _arg2)
}

// InsertAfter inserts @widget into the child widget list of @parent.
//
// It will be placed after @previous_sibling, or at the beginning if
// @previous_sibling is nil.
//
// After calling this function, `gtk_widget_get_prev_sibling(widget)` will
// return @previous_sibling.
//
// If @parent is already set as the parent widget of @widget, this function
// can also be used to reorder @widget in the child widget list of @parent.
//
// This API is primarily meant for widget implementations; if you are just
// using a widget, you *must* use its own API for adding children.
func (w widget) InsertAfter(parent Widget, previousSibling Widget) {
	var _arg0 *C.GtkWidget
	var _arg1 *C.GtkWidget
	var _arg2 *C.GtkWidget

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(parent.Native()))
	_arg2 = (*C.GtkWidget)(unsafe.Pointer(previousSibling.Native()))

	C.gtk_widget_insert_after(_arg0, _arg1, _arg2)
}

// InsertBefore inserts @widget into the child widget list of @parent.
//
// It will be placed before @next_sibling, or at the end if @next_sibling is
// nil.
//
// After calling this function, `gtk_widget_get_next_sibling(widget)` will
// return @next_sibling.
//
// If @parent is already set as the parent widget of @widget, this function
// can also be used to reorder @widget in the child widget list of @parent.
//
// This API is primarily meant for widget implementations; if you are just
// using a widget, you *must* use its own API for adding children.
func (w widget) InsertBefore(parent Widget, nextSibling Widget) {
	var _arg0 *C.GtkWidget
	var _arg1 *C.GtkWidget
	var _arg2 *C.GtkWidget

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(parent.Native()))
	_arg2 = (*C.GtkWidget)(unsafe.Pointer(nextSibling.Native()))

	C.gtk_widget_insert_before(_arg0, _arg1, _arg2)
}

// IsAncestor determines whether @widget is somewhere inside @ancestor,
// possibly with intermediate containers.
func (w widget) IsAncestor(ancestor Widget) bool {
	var _arg0 *C.GtkWidget
	var _arg1 *C.GtkWidget

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(ancestor.Native()))

	var _cret C.gboolean

	_cret = C.gtk_widget_is_ancestor(_arg0, _arg1)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// IsDrawable determines whether @widget can be drawn to.
//
// A widget can be drawn if it is mapped and visible.
func (w widget) IsDrawable() bool {
	var _arg0 *C.GtkWidget

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	var _cret C.gboolean

	_cret = C.gtk_widget_is_drawable(_arg0)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// IsFocus determines if the widget is the focus widget within its toplevel.
//
// This does not mean that the [property@Gtk.Widget:has-focus] property is
// necessarily set; [property@Gtk,Widget:has-focus] will only be set if the
// toplevel widget additionally has the global input focus.)
func (w widget) IsFocus() bool {
	var _arg0 *C.GtkWidget

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	var _cret C.gboolean

	_cret = C.gtk_widget_is_focus(_arg0)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// IsSensitive returns the widget’s effective sensitivity.
//
// This means it is sensitive itself and also its parent widget is
// sensitive.
func (w widget) IsSensitive() bool {
	var _arg0 *C.GtkWidget

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	var _cret C.gboolean

	_cret = C.gtk_widget_is_sensitive(_arg0)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// IsVisible determines whether the widget and all its parents are marked as
// visible.
//
// This function does not check if the widget is obscured in any way.
//
// See also [method@Gtk.Widget.get_visible] and
// [method@Gtk.Widget.set_visible].
func (w widget) IsVisible() bool {
	var _arg0 *C.GtkWidget

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	var _cret C.gboolean

	_cret = C.gtk_widget_is_visible(_arg0)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// KeynavFailed emits the `::keynav-failed` signal on the widget.
//
// This function should be called whenever keyboard navigation within a
// single widget hits a boundary.
//
// The return value of this function should be interpreted in a way similar
// to the return value of [method@Gtk.Widget.child_focus]. When true is
// returned, stay in the widget, the failed keyboard navigation is OK and/or
// there is nowhere we can/should move the focus to. When false is returned,
// the caller should continue with keyboard navigation outside the widget,
// e.g. by calling [method@Gtk.Widget.child_focus] on the widget’s toplevel.
//
// The default [signal@Gtk.Widget::keynav-failed] handler returns false for
// GTK_DIR_TAB_FORWARD and GTK_DIR_TAB_BACKWARD. For the other values of
// DirectionType it returns true.
//
// Whenever the default handler returns true, it also calls
// [method@Gtk.Widget.error_bell] to notify the user of the failed keyboard
// navigation.
//
// A use case for providing an own implementation of ::keynav-failed (either
// by connecting to it or by overriding it) would be a row of
// [class@Gtk.Entry] widgets where the user should be able to navigate the
// entire row with the cursor keys, as e.g. known from user interfaces that
// require entering license keys.
func (w widget) KeynavFailed(direction DirectionType) bool {
	var _arg0 *C.GtkWidget
	var _arg1 C.GtkDirectionType

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (C.GtkDirectionType)(direction)

	var _cret C.gboolean

	_cret = C.gtk_widget_keynav_failed(_arg0, _arg1)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// Map causes a widget to be mapped if it isn’t already.
//
// This function is only for use in widget implementations.
func (w widget) Map() {
	var _arg0 *C.GtkWidget

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_map(_arg0)
}

// Measure measures @widget in the orientation @orientation and for the
// given @for_size.
//
// As an example, if @orientation is GTK_ORIENTATION_HORIZONTAL and
// @for_size is 300, this functions will compute the minimum and natural
// width of @widget if it is allocated at a height of 300 pixels.
//
// See GtkWidget’s geometry management section
// (class.Widget.html#height-for-width-geometry-management) for a more
// details on implementing WidgetClass.measure().
func (w widget) Measure(orientation Orientation, forSize int) (minimum int, natural int, minimumBaseline int, naturalBaseline int) {
	var _arg0 *C.GtkWidget
	var _arg1 C.GtkOrientation
	var _arg2 C.int

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (C.GtkOrientation)(orientation)
	_arg2 = C.int(forSize)

	var _arg3 C.int
	var _arg4 C.int
	var _arg5 C.int
	var _arg6 C.int

	C.gtk_widget_measure(_arg0, _arg1, _arg2, &_arg3, &_arg4, &_arg5, &_arg6)

	var _minimum int
	var _natural int
	var _minimumBaseline int
	var _naturalBaseline int

	_minimum = (int)(_arg3)
	_natural = (int)(_arg4)
	_minimumBaseline = (int)(_arg5)
	_naturalBaseline = (int)(_arg6)

	return _minimum, _natural, _minimumBaseline, _naturalBaseline
}

// MnemonicActivate emits the `GtkWidget`::mnemonic-activate signal.
func (w widget) MnemonicActivate(groupCycling bool) bool {
	var _arg0 *C.GtkWidget
	var _arg1 C.gboolean

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	if groupCycling {
		_arg1 = C.gboolean(1)
	}

	var _cret C.gboolean

	_cret = C.gtk_widget_mnemonic_activate(_arg0, _arg1)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// QueueAllocate flags the widget for a rerun of the
// GtkWidgetClass::size_allocate function.
//
// Use this function instead of [method@Gtk.Widget.queue_resize] when the
// @widget's size request didn't change but it wants to reposition its
// contents.
//
// An example user of this function is [method@Gtk.Widget.set_halign].
//
// This function is only for use in widget implementations.
func (w widget) QueueAllocate() {
	var _arg0 *C.GtkWidget

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_queue_allocate(_arg0)
}

// QueueDraw schedules this widget to be redrawn in paint phase of the
// current or the next frame.
//
// This means @widget's GtkWidgetClass.snapshot() implementation will be
// called.
func (w widget) QueueDraw() {
	var _arg0 *C.GtkWidget

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_queue_draw(_arg0)
}

// QueueResize flags a widget to have its size renegotiated.
//
// This should be called when a widget for some reason has a new size
// request. For example, when you change the text in a [class@Gtk.Label],
// the label queues a resize to ensure there’s enough space for the new
// text.
//
// Note that you cannot call gtk_widget_queue_resize() on a widget from
// inside its implementation of the GtkWidgetClass::size_allocate virtual
// method. Calls to gtk_widget_queue_resize() from inside
// GtkWidgetClass::size_allocate will be silently ignored.
//
// This function is only for use in widget implementations.
func (w widget) QueueResize() {
	var _arg0 *C.GtkWidget

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_queue_resize(_arg0)
}

// Realize creates the GDK resources associated with a widget.
//
// Normally realization happens implicitly; if you show a widget and all its
// parent containers, then the widget will be realized and mapped
// automatically.
//
// Realizing a widget requires all the widget’s parent widgets to be
// realized; calling this function realizes the widget’s parents in addition
// to @widget itself. If a widget is not yet inside a toplevel window when
// you realize it, bad things will happen.
//
// This function is primarily used in widget implementations, and isn’t very
// useful otherwise. Many times when you think you might need it, a better
// approach is to connect to a signal that will be called after the widget
// is realized automatically, such as [signal@Gtk.Widget::realize].
func (w widget) Realize() {
	var _arg0 *C.GtkWidget

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_realize(_arg0)
}

// RemoveController removes @controller from @widget, so that it doesn't
// process events anymore.
//
// It should not be used again.
//
// Widgets will remove all event controllers automatically when they are
// destroyed, there is normally no need to call this function.
func (w widget) RemoveController(controller EventController) {
	var _arg0 *C.GtkWidget
	var _arg1 *C.GtkEventController

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GtkEventController)(unsafe.Pointer(controller.Native()))

	C.gtk_widget_remove_controller(_arg0, _arg1)
}

// RemoveCSSClass removes a style from @widget.
//
// After this, the style of @widget will stop matching for @css_class.
func (w widget) RemoveCSSClass(cssClass string) {
	var _arg0 *C.GtkWidget
	var _arg1 *C.char

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.char)(C.CString(cssClass))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_widget_remove_css_class(_arg0, _arg1)
}

// RemoveMnemonicLabel removes a widget from the list of mnemonic labels for
// this widget.
//
// See [method@Gtk.Widget.list_mnemonic_labels]. The widget must have
// previously been added to the list with
// [method@Gtk.Widget.add_mnemonic_label].
func (w widget) RemoveMnemonicLabel(label Widget) {
	var _arg0 *C.GtkWidget
	var _arg1 *C.GtkWidget

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(label.Native()))

	C.gtk_widget_remove_mnemonic_label(_arg0, _arg1)
}

// RemoveTickCallback removes a tick callback previously registered with
// gtk_widget_add_tick_callback().
func (w widget) RemoveTickCallback(id uint) {
	var _arg0 *C.GtkWidget
	var _arg1 C.guint

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.guint(id)

	C.gtk_widget_remove_tick_callback(_arg0, _arg1)
}

// SetCanFocus specifies whether the input focus can enter the widget or any
// of its children.
//
// Applications should set @can_focus to false to mark a widget as for
// pointer/touch use only.
//
// Note that having @can_focus be true is only one of the necessary
// conditions for being focusable. A widget must also be sensitive and
// focusable and not have an ancestor that is marked as not can-focus in
// order to receive input focus.
//
// See [method@Gtk.Widget.grab_focus] for actually setting the input focus
// on a widget.
func (w widget) SetCanFocus(canFocus bool) {
	var _arg0 *C.GtkWidget
	var _arg1 C.gboolean

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	if canFocus {
		_arg1 = C.gboolean(1)
	}

	C.gtk_widget_set_can_focus(_arg0, _arg1)
}

// SetCanTarget sets whether @widget can be the target of pointer events.
func (w widget) SetCanTarget(canTarget bool) {
	var _arg0 *C.GtkWidget
	var _arg1 C.gboolean

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	if canTarget {
		_arg1 = C.gboolean(1)
	}

	C.gtk_widget_set_can_target(_arg0, _arg1)
}

// SetChildVisible sets whether @widget should be mapped along with its
// parent.
//
// The child visibility can be set for widget before it is added to a
// container with [method@Gtk.Widget.set_parent], to avoid mapping children
// unnecessary before immediately unmapping them. However it will be reset
// to its default state of true when the widget is removed from a container.
//
// Note that changing the child visibility of a widget does not queue a
// resize on the widget. Most of the time, the size of a widget is computed
// from all visible children, whether or not they are mapped. If this is not
// the case, the container can queue a resize itself.
//
// This function is only useful for container implementations and should
// never be called by an application.
func (w widget) SetChildVisible(childVisible bool) {
	var _arg0 *C.GtkWidget
	var _arg1 C.gboolean

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	if childVisible {
		_arg1 = C.gboolean(1)
	}

	C.gtk_widget_set_child_visible(_arg0, _arg1)
}

// SetCSSClasses: will clear all style classes applied to @widget and
// replace them with @classes.
func (w widget) SetCSSClasses(classes []string) {
	var _arg0 *C.GtkWidget
	var _arg1 **C.char

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (**C.char)(C.malloc((len(classes) + 1) * unsafe.Sizeof(int(0))))
	defer C.free(unsafe.Pointer(_arg1))

	{
		var out []*C.char
		ptr.SetSlice(unsafe.Pointer(&dst), unsafe.Pointer(_arg1), int(len(classes)))

		for i := range classes {
			_arg1 = (*C.char)(C.CString(classes))
			defer C.free(unsafe.Pointer(_arg1))
		}
	}

	C.gtk_widget_set_css_classes(_arg0, _arg1)
}

// SetCursor sets the cursor to be shown when pointer devices point towards
// @widget.
//
// If the @cursor is NULL, @widget will use the cursor inherited from the
// parent widget.
func (w widget) SetCursor(cursor gdk.Cursor) {
	var _arg0 *C.GtkWidget
	var _arg1 *C.GdkCursor

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GdkCursor)(unsafe.Pointer(cursor.Native()))

	C.gtk_widget_set_cursor(_arg0, _arg1)
}

// SetCursorFromName sets a named cursor to be shown when pointer devices
// point towards @widget.
//
// This is a utility function that creates a cursor via
// [ctor@Gdk.Cursor.new_from_name] and then sets it on @widget with
// [method@Gtk.Widget.set_cursor]. See those functions for details.
//
// On top of that, this function allows @name to be nil, which will do the
// same as calling [method@Gtk.Widget.set_cursor] with a nil cursor.
func (w widget) SetCursorFromName(name string) {
	var _arg0 *C.GtkWidget
	var _arg1 *C.char

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.char)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_widget_set_cursor_from_name(_arg0, _arg1)
}

// SetDirection sets the reading direction on a particular widget.
//
// This direction controls the primary direction for widgets containing
// text, and also the direction in which the children of a container are
// packed. The ability to set the direction is present in order so that
// correct localization into languages with right-to-left reading directions
// can be done. Generally, applications will let the default reading
// direction present, except for containers where the containers are
// arranged in an order that is explicitly visual rather than logical (such
// as buttons for text justification).
//
// If the direction is set to GTK_TEXT_DIR_NONE, then the value set by
// [func@Gtk.Widget.set_default_direction] will be used.
func (w widget) SetDirection(dir TextDirection) {
	var _arg0 *C.GtkWidget
	var _arg1 C.GtkTextDirection

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (C.GtkTextDirection)(dir)

	C.gtk_widget_set_direction(_arg0, _arg1)
}

// SetFocusChild: set @child as the current focus child of @widget.
//
// The previous focus child will be unset.
//
// This function is only suitable for widget implementations. If you want a
// certain widget to get the input focus, call
// [method@Gtk.Widget.grab_focus] on it.
func (w widget) SetFocusChild(child Widget) {
	var _arg0 *C.GtkWidget
	var _arg1 *C.GtkWidget

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(child.Native()))

	C.gtk_widget_set_focus_child(_arg0, _arg1)
}

// SetFocusOnClick sets whether the widget should grab focus when it is
// clicked with the mouse.
//
// Making mouse clicks not grab focus is useful in places like toolbars
// where you don’t want the keyboard focus removed from the main area of the
// application.
func (w widget) SetFocusOnClick(focusOnClick bool) {
	var _arg0 *C.GtkWidget
	var _arg1 C.gboolean

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	if focusOnClick {
		_arg1 = C.gboolean(1)
	}

	C.gtk_widget_set_focus_on_click(_arg0, _arg1)
}

// SetFocusable specifies whether @widget can own the input focus.
//
// Widget implementations should set @focusable to true in their init()
// function if they want to receive keyboard input.
//
// Note that having @focusable be true is only one of the necessary
// conditions for being focusable. A widget must also be sensitive and
// can-focus and not have an ancestor that is marked as not can-focus in
// order to receive input focus.
//
// See [method@Gtk.Widget.grab_focus] for actually setting the input focus
// on a widget.
func (w widget) SetFocusable(focusable bool) {
	var _arg0 *C.GtkWidget
	var _arg1 C.gboolean

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	if focusable {
		_arg1 = C.gboolean(1)
	}

	C.gtk_widget_set_focusable(_arg0, _arg1)
}

// SetFontMap sets the font map to use for Pango rendering.
//
// The font map is the object that is used to look up fonts. Setting a
// custom font map can be useful in special situations, e.g. when you need
// to add application-specific fonts to the set of available fonts.
//
// When not set, the widget will inherit the font map from its parent.
func (w widget) SetFontMap(fontMap pango.FontMap) {
	var _arg0 *C.GtkWidget
	var _arg1 *C.PangoFontMap

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.PangoFontMap)(unsafe.Pointer(fontMap.Native()))

	C.gtk_widget_set_font_map(_arg0, _arg1)
}

// SetFontOptions sets the `cairo_font_options_t` used for Pango rendering
// in this widget.
//
// When not set, the default font options for the `GdkDisplay` will be used.
func (w widget) SetFontOptions(options *cairo.FontOptions) {
	var _arg0 *C.GtkWidget
	var _arg1 *C.cairo_font_options_t

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.cairo_font_options_t)(unsafe.Pointer(options.Native()))

	C.gtk_widget_set_font_options(_arg0, _arg1)
}

// SetHalign sets the horizontal alignment of @widget.
func (w widget) SetHalign(align Align) {
	var _arg0 *C.GtkWidget
	var _arg1 C.GtkAlign

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (C.GtkAlign)(align)

	C.gtk_widget_set_halign(_arg0, _arg1)
}

// SetHasTooltip sets the `has-tooltip` property on @widget to @has_tooltip.
func (w widget) SetHasTooltip(hasTooltip bool) {
	var _arg0 *C.GtkWidget
	var _arg1 C.gboolean

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	if hasTooltip {
		_arg1 = C.gboolean(1)
	}

	C.gtk_widget_set_has_tooltip(_arg0, _arg1)
}

// SetHexpand sets whether the widget would like any available extra
// horizontal space.
//
// When a user resizes a `GtkWindow`, widgets with expand=TRUE generally
// receive the extra space. For example, a list or scrollable area or
// document in your window would often be set to expand.
//
// Call this function to set the expand flag if you would like your widget
// to become larger horizontally when the window has extra room.
//
// By default, widgets automatically expand if any of their children want to
// expand. (To see if a widget will automatically expand given its current
// children and state, call [method@Gtk.Widget.compute_expand]. A container
// can decide how the expandability of children affects the expansion of the
// container by overriding the compute_expand virtual method on
// `GtkWidget`.).
//
// Setting hexpand explicitly with this function will override the automatic
// expand behavior.
//
// This function forces the widget to expand or not to expand, regardless of
// children. The override occurs because [method@Gtk.Widget.set_hexpand]
// sets the hexpand-set property (see [method@Gtk.Widget.set_hexpand_set])
// which causes the widget’s hexpand value to be used, rather than looking
// at children and widget state.
func (w widget) SetHexpand(expand bool) {
	var _arg0 *C.GtkWidget
	var _arg1 C.gboolean

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	if expand {
		_arg1 = C.gboolean(1)
	}

	C.gtk_widget_set_hexpand(_arg0, _arg1)
}

// SetHexpandSet sets whether the hexpand flag will be used.
//
// The [property@Gtk.Widget:hexpand-set] property will be set automatically
// when you call [method@Gtk.Widget.set_hexpand] to set hexpand, so the most
// likely reason to use this function would be to unset an explicit expand
// flag.
//
// If hexpand is set, then it overrides any computed expand value based on
// child widgets. If hexpand is not set, then the expand value depends on
// whether any children of the widget would like to expand.
//
// There are few reasons to use this function, but it’s here for
// completeness and consistency.
func (w widget) SetHexpandSet(set bool) {
	var _arg0 *C.GtkWidget
	var _arg1 C.gboolean

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	if set {
		_arg1 = C.gboolean(1)
	}

	C.gtk_widget_set_hexpand_set(_arg0, _arg1)
}

// SetLayoutManager sets the layout manager delegate instance that provides
// an implementation for measuring and allocating the children of @widget.
func (w widget) SetLayoutManager(layoutManager LayoutManager) {
	var _arg0 *C.GtkWidget
	var _arg1 *C.GtkLayoutManager

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GtkLayoutManager)(unsafe.Pointer(layoutManager.Native()))

	C.gtk_widget_set_layout_manager(_arg0, _arg1)
}

// SetMarginBottom sets the bottom margin of @widget.
func (w widget) SetMarginBottom(margin int) {
	var _arg0 *C.GtkWidget
	var _arg1 C.int

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.int(margin)

	C.gtk_widget_set_margin_bottom(_arg0, _arg1)
}

// SetMarginEnd sets the end margin of @widget.
func (w widget) SetMarginEnd(margin int) {
	var _arg0 *C.GtkWidget
	var _arg1 C.int

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.int(margin)

	C.gtk_widget_set_margin_end(_arg0, _arg1)
}

// SetMarginStart sets the start margin of @widget.
func (w widget) SetMarginStart(margin int) {
	var _arg0 *C.GtkWidget
	var _arg1 C.int

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.int(margin)

	C.gtk_widget_set_margin_start(_arg0, _arg1)
}

// SetMarginTop sets the top margin of @widget.
func (w widget) SetMarginTop(margin int) {
	var _arg0 *C.GtkWidget
	var _arg1 C.int

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.int(margin)

	C.gtk_widget_set_margin_top(_arg0, _arg1)
}

// SetName sets a widgets name.
//
// Setting a name allows you to refer to the widget from a CSS file. You can
// apply a style to widgets with a particular name in the CSS file. See the
// documentation for the CSS syntax (on the same page as the docs for
// [class@Gtk.StyleContext].
//
// Note that the CSS syntax has certain special characters to delimit and
// represent elements in a selector (period, #, >, *...), so using these
// will make your widget impossible to match by name. Any combination of
// alphanumeric symbols, dashes and underscores will suffice.
func (w widget) SetName(name string) {
	var _arg0 *C.GtkWidget
	var _arg1 *C.char

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.char)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_widget_set_name(_arg0, _arg1)
}

// SetOpacity: request the @widget to be rendered partially transparent.
//
// An opacity of 0 is fully transparent and an opacity of 1 is fully opaque.
//
// Opacity works on both toplevel widgets and child widgets, although there
// are some limitations: For toplevel widgets, applying opacity depends on
// the capabilities of the windowing system. On X11, this has any effect
// only on X displays with a compositing manager, see
// gdk_display_is_composited(). On Windows and Wayland it should always
// work, although setting a window’s opacity after the window has been shown
// may cause some flicker.
//
// Note that the opacity is inherited through inclusion — if you set a
// toplevel to be partially translucent, all of its content will appear
// translucent, since it is ultimatively rendered on that toplevel. The
// opacity value itself is not inherited by child widgets (since that would
// make widgets deeper in the hierarchy progressively more translucent). As
// a consequence, [class@Gtk.Popover]s and other [class@Gtk.Native] widgets
// with their own surface will use their own opacity value, and thus by
// default appear non-translucent, even if they are attached to a toplevel
// that is translucent.
func (w widget) SetOpacity(opacity float64) {
	var _arg0 *C.GtkWidget
	var _arg1 C.double

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.double(opacity)

	C.gtk_widget_set_opacity(_arg0, _arg1)
}

// SetOverflow sets how @widget treats content that is drawn outside the
// widget's content area.
//
// See the definition of [enum@Gtk.Overflow] for details.
//
// This setting is provided for widget implementations and should not be
// used by application code.
//
// The default value is GTK_OVERFLOW_VISIBLE.
func (w widget) SetOverflow(overflow Overflow) {
	var _arg0 *C.GtkWidget
	var _arg1 C.GtkOverflow

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (C.GtkOverflow)(overflow)

	C.gtk_widget_set_overflow(_arg0, _arg1)
}

// SetParent sets @parent as the parent widget of @widget.
//
// This takes care of details such as updating the state and style of the
// child to reflect its new location and resizing the parent. The opposite
// function is [method@Gtk.Widget.unparent].
//
// This function is useful only when implementing subclasses of `GtkWidget`.
func (w widget) SetParent(parent Widget) {
	var _arg0 *C.GtkWidget
	var _arg1 *C.GtkWidget

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(parent.Native()))

	C.gtk_widget_set_parent(_arg0, _arg1)
}

// SetReceivesDefault specifies whether @widget will be treated as the
// default widget within its toplevel when it has the focus, even if another
// widget is the default.
func (w widget) SetReceivesDefault(receivesDefault bool) {
	var _arg0 *C.GtkWidget
	var _arg1 C.gboolean

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	if receivesDefault {
		_arg1 = C.gboolean(1)
	}

	C.gtk_widget_set_receives_default(_arg0, _arg1)
}

// SetSensitive sets the sensitivity of a widget.
//
// A widget is sensitive if the user can interact with it. Insensitive
// widgets are “grayed out” and the user can’t interact with them.
// Insensitive widgets are known as “inactive”, “disabled”, or “ghosted” in
// some other toolkits.
func (w widget) SetSensitive(sensitive bool) {
	var _arg0 *C.GtkWidget
	var _arg1 C.gboolean

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	if sensitive {
		_arg1 = C.gboolean(1)
	}

	C.gtk_widget_set_sensitive(_arg0, _arg1)
}

// SetSizeRequest sets the minimum size of a widget.
//
// That is, the widget’s size request will be at least @width by @height.
// You can use this function to force a widget to be larger than it normally
// would be.
//
// In most cases, [method@Gtk.Window.set_default_size] is a better choice
// for toplevel windows than this function; setting the default size will
// still allow users to shrink the window. Setting the size request will
// force them to leave the window at least as large as the size request.
//
// Note the inherent danger of setting any fixed size - themes, translations
// into other languages, different fonts, and user action can all change the
// appropriate size for a given widget. So, it's basically impossible to
// hardcode a size that will always be correct.
//
// The size request of a widget is the smallest size a widget can accept
// while still functioning well and drawing itself correctly. However in
// some strange cases a widget may be allocated less than its requested
// size, and in many cases a widget may be allocated more space than it
// requested.
//
// If the size request in a given direction is -1 (unset), then the
// “natural” size request of the widget will be used instead.
//
// The size request set here does not include any margin from the properties
// [property@Gtk.Widget:margin-start], [property@Gtk.Widget:margin-end],
// [property@Gtk.Widget:margin-top], and
// [property@Gtk.Widget:margin-bottom], but it does include pretty much all
// other padding or border properties set by any subclass of `GtkWidget`.
func (w widget) SetSizeRequest(width int, height int) {
	var _arg0 *C.GtkWidget
	var _arg1 C.int
	var _arg2 C.int

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.int(width)
	_arg2 = C.int(height)

	C.gtk_widget_set_size_request(_arg0, _arg1, _arg2)
}

// SetStateFlags turns on flag values in the current widget state.
//
// Typical widget states are insensitive, prelighted, etc.
//
// This function accepts the values GTK_STATE_FLAG_DIR_LTR and
// GTK_STATE_FLAG_DIR_RTL but ignores them. If you want to set the widget's
// direction, use [method@Gtk.Widget.set_direction].
//
// This function is for use in widget implementations.
func (w widget) SetStateFlags(flags StateFlags, clear bool) {
	var _arg0 *C.GtkWidget
	var _arg1 C.GtkStateFlags
	var _arg2 C.gboolean

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (C.GtkStateFlags)(flags)
	if clear {
		_arg2 = C.gboolean(1)
	}

	C.gtk_widget_set_state_flags(_arg0, _arg1, _arg2)
}

// SetTooltipMarkup sets @markup as the contents of the tooltip, which is
// marked up with Pango markup.
//
// This function will take care of setting the
// [property@Gtk.Widget:has-tooltip] as a side effect, and of the default
// handler for the [signal@Gtk.Widget::query-tooltip] signal.
//
// See also [method@Gtk.Tooltip.set_markup].
func (w widget) SetTooltipMarkup(markup string) {
	var _arg0 *C.GtkWidget
	var _arg1 *C.char

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.char)(C.CString(markup))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_widget_set_tooltip_markup(_arg0, _arg1)
}

// SetTooltipText sets @text as the contents of the tooltip.
//
// If @text contains any markup, it will be escaped.
//
// This function will take care of setting [property@Gtk.Widget:has-tooltip]
// as a side effect, and of the default handler for the
// [signal@Gtk.Widget::query-tooltip] signal.
//
// See also [method@Gtk.Tooltip.set_text].
func (w widget) SetTooltipText(text string) {
	var _arg0 *C.GtkWidget
	var _arg1 *C.char

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.char)(C.CString(text))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_widget_set_tooltip_text(_arg0, _arg1)
}

// SetValign sets the vertical alignment of @widget.
func (w widget) SetValign(align Align) {
	var _arg0 *C.GtkWidget
	var _arg1 C.GtkAlign

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (C.GtkAlign)(align)

	C.gtk_widget_set_valign(_arg0, _arg1)
}

// SetVexpand sets whether the widget would like any available extra
// vertical space.
//
// See [method@Gtk.Widget.set_hexpand] for more detail.
func (w widget) SetVexpand(expand bool) {
	var _arg0 *C.GtkWidget
	var _arg1 C.gboolean

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	if expand {
		_arg1 = C.gboolean(1)
	}

	C.gtk_widget_set_vexpand(_arg0, _arg1)
}

// SetVexpandSet sets whether the vexpand flag will be used.
//
// See [method@Gtk.Widget.set_hexpand_set] for more detail.
func (w widget) SetVexpandSet(set bool) {
	var _arg0 *C.GtkWidget
	var _arg1 C.gboolean

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	if set {
		_arg1 = C.gboolean(1)
	}

	C.gtk_widget_set_vexpand_set(_arg0, _arg1)
}

// SetVisible sets the visibility state of @widget.
//
// Note that setting this to true doesn’t mean the widget is actually
// viewable, see [method@Gtk.Widget.get_visible].
//
// This function simply calls [method@Gtk.Widget.show] or
// [method@Gtk.Widget.hide] but is nicer to use when the visibility of the
// widget depends on some condition.
func (w widget) SetVisible(visible bool) {
	var _arg0 *C.GtkWidget
	var _arg1 C.gboolean

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	if visible {
		_arg1 = C.gboolean(1)
	}

	C.gtk_widget_set_visible(_arg0, _arg1)
}

// ShouldLayout returns whether @widget should contribute to the measuring
// and allocation of its parent.
//
// This is false for invisible children, but also for children that have
// their own surface.
func (w widget) ShouldLayout() bool {
	var _arg0 *C.GtkWidget

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	var _cret C.gboolean

	_cret = C.gtk_widget_should_layout(_arg0)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// Show flags a widget to be displayed.
//
// Any widget that isn’t shown will not appear on the screen.
//
// Remember that you have to show the containers containing a widget, in
// addition to the widget itself, before it will appear onscreen.
//
// When a toplevel container is shown, it is immediately realized and
// mapped; other shown widgets are realized and mapped when their toplevel
// container is realized and mapped.
func (w widget) Show() {
	var _arg0 *C.GtkWidget

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_show(_arg0)
}

// SnapshotChild: snapshot the a child of @widget.
//
// When a widget receives a call to the snapshot function, it must send
// synthetic `GtkWidget`Class.snapshot() calls to all children. This
// function provides a convenient way of doing this. A widget, when it
// receives a call to its `GtkWidget`Class.snapshot() function, calls
// gtk_widget_snapshot_child() once for each child, passing in the @snapshot
// the widget received.
//
// gtk_widget_snapshot_child() takes care of translating the origin of
// @snapshot, and deciding whether the child needs to be snapshot.
//
// This function does nothing for children that implement `GtkNative`.
func (w widget) SnapshotChild(child Widget, snapshot Snapshot) {
	var _arg0 *C.GtkWidget
	var _arg1 *C.GtkWidget
	var _arg2 *C.GtkSnapshot

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(child.Native()))
	_arg2 = (*C.GtkSnapshot)(unsafe.Pointer(snapshot.Native()))

	C.gtk_widget_snapshot_child(_arg0, _arg1, _arg2)
}

// TranslateCoordinates: translate coordinates relative to @src_widget’s
// allocation to coordinates relative to @dest_widget’s allocations.
//
// In order to perform this operation, both widget must share a common
// ancestor.
func (s widget) TranslateCoordinates(destWidget Widget, srcX float64, srcY float64) (destX float64, destY float64, ok bool) {
	var _arg0 *C.GtkWidget
	var _arg1 *C.GtkWidget
	var _arg2 C.double
	var _arg3 C.double

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(destWidget.Native()))
	_arg2 = C.double(srcX)
	_arg3 = C.double(srcY)

	var _arg4 C.double
	var _arg5 C.double
	var _cret C.gboolean

	_cret = C.gtk_widget_translate_coordinates(_arg0, _arg1, _arg2, _arg3, &_arg4, &_arg5)

	var _destX float64
	var _destY float64
	var _ok bool

	_destX = (float64)(_arg4)
	_destY = (float64)(_arg5)
	if _cret {
		_ok = true
	}

	return _destX, _destY, _ok
}

// TriggerTooltipQuery triggers a tooltip query on the display where the
// toplevel of @widget is located.
func (w widget) TriggerTooltipQuery() {
	var _arg0 *C.GtkWidget

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_trigger_tooltip_query(_arg0)
}

// Unmap causes a widget to be unmapped if it’s currently mapped.
//
// This function is only for use in widget implementations.
func (w widget) Unmap() {
	var _arg0 *C.GtkWidget

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_unmap(_arg0)
}

// Unparent: dissociate @widget from its parent.
//
// This function is only for use in widget implementations, typically in
// dispose.
func (w widget) Unparent() {
	var _arg0 *C.GtkWidget

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_unparent(_arg0)
}

// Unrealize causes a widget to be unrealized (frees all GDK resources
// associated with the widget).
//
// This function is only useful in widget implementations.
func (w widget) Unrealize() {
	var _arg0 *C.GtkWidget

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_unrealize(_arg0)
}

// UnsetStateFlags turns off flag values for the current widget state.
//
// See [method@Gtk.Widget.set_state_flags].
//
// This function is for use in widget implementations.
func (w widget) UnsetStateFlags(flags StateFlags) {
	var _arg0 *C.GtkWidget
	var _arg1 C.GtkStateFlags

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (C.GtkStateFlags)(flags)

	C.gtk_widget_unset_state_flags(_arg0, _arg1)
}

// Requisition: a Requisition-struct represents the desired size of a widget.
// See [GtkWidget’s geometry management section][geometry-management] for more
// information.
type Requisition struct {
	native C.GtkRequisition
}

// WrapRequisition wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapRequisition(ptr unsafe.Pointer) *Requisition {
	if ptr == nil {
		return nil
	}

	return (*Requisition)(ptr)
}

func marshalRequisition(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapRequisition(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (r *Requisition) Native() unsafe.Pointer {
	return unsafe.Pointer(&r.native)
}

// Width gets the field inside the struct.
func (r *Requisition) Width() int {
	var v int
	v = (int)(r.native.width)
	return v
}

// Height gets the field inside the struct.
func (r *Requisition) Height() int {
	var v int
	v = (int)(r.native.height)
	return v
}

// Free frees a `GtkRequisition`.
func (r *Requisition) Free() {
	var _arg0 *C.GtkRequisition

	_arg0 = (*C.GtkRequisition)(unsafe.Pointer(r.Native()))

	C.gtk_requisition_free(_arg0)
}
