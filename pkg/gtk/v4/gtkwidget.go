// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/core/box"
	"github.com/diamondburned/gotk4/core/gextras"
	"github.com/diamondburned/gotk4/pkg/cairo"
	"github.com/diamondburned/gotk4/pkg/gdk/v4"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
	"github.com/diamondburned/gotk4/pkg/graphene"
	"github.com/diamondburned/gotk4/pkg/gsk/v4"
	"github.com/diamondburned/gotk4/pkg/pango"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_widget_get_type()), F: marshalWidget},
		{T: externglib.Type(C.gtk_requisition_get_type()), F: marshalRequisition},
	})
}

// Allocation: the rectangle representing the area allocated for a widget by its
// parent.
type Allocation = gdk.Rectangle

// TickCallback: callback type for adding a function to update animations. See
// gtk_widget_add_tick_callback().
type TickCallback func(widget Widget, frameClock gdk.FrameClock, ok bool)

//export gotk4_TickCallback
func _TickCallback(arg0 *C.GtkWidget, arg1 *C.GdkFrameClock, arg2 C.gpointer) C.gboolean {
	v := box.Get(uintptr(arg2))
	if v == nil {
		panic(`callback not found`)
	}

	var widget Widget             // out
	var frameClock gdk.FrameClock // out

	widget = gextras.CastObject(externglib.Take(unsafe.Pointer(arg0))).(Widget)
	frameClock = gextras.CastObject(externglib.Take(unsafe.Pointer(arg1))).(gdk.FrameClock)

	fn := v.(TickCallback)
	ok := fn(widget, frameClock)

	var cret C.gboolean // out

	if ok {
		cret = C.TRUE
	}

	return cret
}

// Widget: the base class for all widgets.
//
// `GtkWidget` is the base class all widgets in GTK derive from. It manages the
// widget lifecycle, layout, states and style.
//
//
// Height-for-width Geometry Management
//
// GTK uses a height-for-width (and width-for-height) geometry management
// system. Height-for-width means that a widget can change how much vertical
// space it needs, depending on the amount of horizontal space that it is given
// (and similar for width-for-height). The most common example is a label that
// reflows to fill up the available width, wraps to fewer lines, and therefore
// needs less height.
//
// Height-for-width geometry management is implemented in GTK by way of two
// virtual methods:
//
// - [vfunc@Gtk.Widget.get_request_mode] - [vfunc@Gtk.Widget.measure]
//
// There are some important things to keep in mind when implementing
// height-for-width and when using it in widget implementations.
//
// If you implement a direct `GtkWidget` subclass that supports height-for-width
// or width-for-height geometry management for itself or its child widgets, the
// [vfunc@Gtk.Widget.get_request_mode] virtual function must be implemented as
// well and return the widget's preferred request mode. The default
// implementation of this virtual function returns
// GTK_SIZE_REQUEST_CONSTANT_SIZE, which means that the widget will only ever
// get -1 passed as the for_size value to its [vfunc@Gtk.Widget.measure]
// implementation.
//
// The geometry management system will query a widget hierarchy in only one
// orientation at a time. When widgets are initially queried for their minimum
// sizes it is generally done in two initial passes in the
// [enum@Gtk.SizeRequestMode] chosen by the toplevel.
//
// For example, when queried in the normal GTK_SIZE_REQUEST_HEIGHT_FOR_WIDTH
// mode:
//
// First, the default minimum and natural width for each widget in the interface
// will be computed using [id@gtk_widget_measure] with an orientation of
// GTK_ORIENTATION_HORIZONTAL and a for_size of -1. Because the preferred widths
// for each widget depend on the preferred widths of their children, this
// information propagates up the hierarchy, and finally a minimum and natural
// width is determined for the entire toplevel. Next, the toplevel will use the
// minimum width to query for the minimum height contextual to that width using
// [id@gtk_widget_measure] with an orientation of GTK_ORIENTATION_VERTICAL and a
// for_size of the just computed width. This will also be a highly recursive
// operation. The minimum height for the minimum width is normally used to set
// the minimum size constraint on the toplevel.
//
// After the toplevel window has initially requested its size in both dimensions
// it can go on to allocate itself a reasonable size (or a size previously
// specified with [method@Gtk.Window.set_default_size]). During the recursive
// allocation process it’s important to note that request cycles will be
// recursively executed while widgets allocate their children. Each widget, once
// allocated a size, will go on to first share the space in one orientation
// among its children and then request each child's height for its target
// allocated width or its width for allocated height, depending. In this way a
// `GtkWidget` will typically be requested its size a number of times before
// actually being allocated a size. The size a widget is finally allocated can
// of course differ from the size it has requested. For this reason, `GtkWidget`
// caches a small number of results to avoid re-querying for the same sizes in
// one allocation cycle.
//
// If a widget does move content around to intelligently use up the allocated
// size then it must support the request in both `GtkSizeRequestMode`s even if
// the widget in question only trades sizes in a single orientation.
//
// For instance, a [class@Gtk.Label] that does height-for-width word wrapping
// will not expect to have [vfunc@Gtk.Widget.measure] with an orientation of
// GTK_ORIENTATION_VERTICAL called because that call is specific to a
// width-for-height request. In this case the label must return the height
// required for its own minimum possible width. By following this rule any
// widget that handles height-for-width or width-for-height requests will always
// be allocated at least enough space to fit its own content.
//
// Here are some examples of how a GTK_SIZE_REQUEST_HEIGHT_FOR_WIDTH widget
// generally deals with width-for-height requests:
//
// “`c static void foo_widget_measure (GtkWidget *widget, GtkOrientation
// orientation, int for_size, int *minimum_size, int *natural_size, int
// *minimum_baseline, int *natural_baseline) { if (orientation ==
// GTK_ORIENTATION_HORIZONTAL) { // Calculate minimum and natural width } else
// // VERTICAL { if (i_am_in_height_for_width_mode) { int min_width, dummy;
//
//          // First, get the minimum width of our widget
//          GTK_WIDGET_GET_CLASS (widget)->measure (widget, GTK_ORIENTATION_HORIZONTAL, -1,
//                                                  &min_width, &dummy, &dummy, &dummy);
//
//          // Now use the minimum width to retrieve the minimum and natural height to display
//          // that width.
//          GTK_WIDGET_GET_CLASS (widget)->measure (widget, GTK_ORIENTATION_VERTICAL, min_width,
//                                                  minimum_size, natural_size, &dummy, &dummy);
//        }
//      else
//        {
//          // ... some widgets do both.
//        }
//    }
//
// } “`
//
// Often a widget needs to get its own request during size request or
// allocation. For example, when computing height it may need to also compute
// width. Or when deciding how to use an allocation, the widget may need to know
// its natural size. In these cases, the widget should be careful to call its
// virtual methods directly, like in the code example above.
//
// It will not work to use the wrapper function [method@Gtk.Widget.measure]
// inside your own [vfunc@Gtk.Widget.size_allocate] implementation. These return
// a request adjusted by [class@Gtk.SizeGroup], the widget's align and expand
// flags, as well as its CSS style.
//
// If a widget used the wrappers inside its virtual method implementations, then
// the adjustments (such as widget margins) would be applied twice. GTK
// therefore does not allow this and will warn if you try to do it.
//
// Of course if you are getting the size request for another widget, such as a
// child widget, you must use [id@gtk_widget_measure]; otherwise, you would not
// properly consider widget margins, [class@Gtk.SizeGroup], and so forth.
//
// GTK also supports baseline vertical alignment of widgets. This means that
// widgets are positioned such that the typographical baseline of widgets in the
// same row are aligned. This happens if a widget supports baselines, has a
// vertical alignment of GTK_ALIGN_BASELINE, and is inside a widget that
// supports baselines and has a natural “row” that it aligns to the baseline, or
// a baseline assigned to it by the grandparent.
//
// Baseline alignment support for a widget is also done by the
// [vfunc@Gtk.Widget.measure] virtual function. It allows you to report both a
// minimum and natural size.
//
// If a widget ends up baseline aligned it will be allocated all the space in
// the parent as if it was GTK_ALIGN_FILL, but the selected baseline can be
// found via [id@gtk_widget_get_allocated_baseline]. If the baseline has a value
// other than -1 you need to align the widget such that the baseline appears at
// the position.
//
//
// GtkWidget as GtkBuildable
//
// The `GtkWidget` implementation of the `GtkBuildable` interface supports
// various custom elements to specify additional aspects of widgets that are not
// directly expressed as properties.
//
// If the widget uses a [class@Gtk.LayoutManager], `GtkWidget` supports a custom
// `<layout>` element, used to define layout properties:
//
// “`xml <object class="GtkGrid" id="my_grid"> <child> <object class="GtkLabel"
// id="label1"> <property name="label">Description</property> <layout> <property
// name="column">0</property> <property name="row">0</property> <property
// name="row-span">1</property> <property name="column-span">1</property>
// </layout> </object> </child> <child> <object class="GtkEntry"
// id="description_entry"> <layout> <property name="column">1</property>
// <property name="row">0</property> <property name="row-span">1</property>
// <property name="column-span">1</property> </layout> </object> </child>
// </object> “`
//
// `GtkWidget` allows style information such as style classes to be associated
// with widgets, using the custom `<style>` element:
//
// “`xml <object class="GtkButton" id="button1"> <style> <class
// name="my-special-button-class"/> <class name="dark-button"/> </style>
// </object> “`
//
// `GtkWidget` allows defining accessibility information, such as properties,
// relations, and states, using the custom `<accessibility>` element:
//
// “`xml <object class="GtkButton" id="button1"> <accessibility> <property
// name="label">Download</property> <relation
// name="labelled-by">label1</relation> </accessibility> </object> “`
//
//
// Building composite widgets from template XML
//
// `GtkWidget `exposes some facilities to automate the procedure of creating
// composite widgets using "templates".
//
// To create composite widgets with `GtkBuilder` XML, one must associate the
// interface description with the widget class at class initialization time
// using [method@Gtk.WidgetClass.set_template].
//
// The interface description semantics expected in composite template
// descriptions is slightly different from regular [class@Gtk.Builder] XML.
//
// Unlike regular interface descriptions, [method@Gtk.WidgetClass.set_template]
// will expect a `<template>` tag as a direct child of the toplevel
// `<interface>` tag. The `<template>` tag must specify the “class” attribute
// which must be the type name of the widget. Optionally, the “parent” attribute
// may be specified to specify the direct parent type of the widget type, this
// is ignored by `GtkBuilder` but required for UI design tools like Glade
// (https://glade.gnome.org/) to introspect what kind of properties and internal
// children exist for a given type when the actual type does not exist.
//
// The XML which is contained inside the `<template>` tag behaves as if it were
// added to the `<object>` tag defining the widget itself. You may set
// properties on a widget by inserting `<property>` tags into the `<template>`
// tag, and also add `<child>` tags to add children and extend a widget in the
// normal way you would with `<object>` tags.
//
// Additionally, `<object>` tags can also be added before and after the initial
// `<template>` tag in the normal way, allowing one to define auxiliary objects
// which might be referenced by other widgets declared as children of the
// `<template>` tag.
//
// An example of a template definition:
//
// “`xml <interface> <template class="FooWidget" parent="GtkBox"> <property
// name="orientation">horizontal</property> <property
// name="spacing">4</property> <child> <object class="GtkButton"
// id="hello_button"> <property name="label">Hello World</property> <signal
// name="clicked" handler="hello_button_clicked" object="FooWidget"
// swapped="yes"/> </object> </child> <child> <object class="GtkButton"
// id="goodbye_button"> <property name="label">Goodbye World</property>
// </object> </child> </template> </interface> “`
//
// Typically, you'll place the template fragment into a file that is bundled
// with your project, using `GResource`. In order to load the template, you need
// to call [method@Gtk.WidgetClass.set_template_from_resource] from the class
// initialization of your `GtkWidget` type:
//
// “`c static void foo_widget_class_init (FooWidgetClass *klass) { // ...
//
//    gtk_widget_class_set_template_from_resource (GTK_WIDGET_CLASS (klass),
//                                                 "/com/example/ui/foowidget.ui");
//
// } “`
//
// You will also need to call [method@Gtk.Widget.init_template] from the
// instance initialization function:
//
// “`c static void foo_widget_init (FooWidget *self) { // ...
// gtk_widget_init_template (GTK_WIDGET (self)); } “`
//
// You can access widgets defined in the template using the
// [id@gtk_widget_get_template_child] function, but you will typically declare a
// pointer in the instance private data structure of your type using the same
// name as the widget in the template definition, and call
// [method@Gtk.WidgetClass.bind_template_child_full] (or one of its wrapper
// macros [func@Gtk.widget_class_bind_template_child] and
// [func@Gtk.widget_class_bind_template_child_private]) with that name, e.g.
//
// “`c typedef struct { GtkWidget *hello_button; GtkWidget *goodbye_button; }
// FooWidgetPrivate;
//
// G_DEFINE_TYPE_WITH_PRIVATE (FooWidget, foo_widget, GTK_TYPE_BOX)
//
// static void foo_widget_class_init (FooWidgetClass *klass) { // ...
// gtk_widget_class_set_template_from_resource (GTK_WIDGET_CLASS (klass),
// "/com/example/ui/foowidget.ui"); gtk_widget_class_bind_template_child_private
// (GTK_WIDGET_CLASS (klass), FooWidget, hello_button);
// gtk_widget_class_bind_template_child_private (GTK_WIDGET_CLASS (klass),
// FooWidget, goodbye_button); }
//
// static void foo_widget_init (FooWidget *widget) {
//
// } “`
//
// You can also use [method@Gtk.WidgetClass.bind_template_callback_full] (or is
// wrapper macro [func@Gtk.widget_class_bind_template_callback]) to connect a
// signal callback defined in the template with a function visible in the scope
// of the class, e.g.
//
// “`c // the signal handler has the instance and user data swapped // because
// of the swapped="yes" attribute in the template XML static void
// hello_button_clicked (FooWidget *self, GtkButton *button) { g_print ("Hello,
// world!\n"); }
//
// static void foo_widget_class_init (FooWidgetClass *klass) { // ...
// gtk_widget_class_set_template_from_resource (GTK_WIDGET_CLASS (klass),
// "/com/example/ui/foowidget.ui"); gtk_widget_class_bind_template_callback
// (GTK_WIDGET_CLASS (klass), hello_button_clicked); } “`
type Widget interface {
	Accessible
	Buildable
	ConstraintTarget

	ActionSetEnabledWidget(actionName string, enabled bool)

	ActivateWidget() bool

	ActivateActionVariantWidget(name string, args *glib.Variant) bool

	ActivateDefaultWidget()

	AddControllerWidget(controller EventController)

	AddCSSClassWidget(cssClass string)

	AddMnemonicLabelWidget(label Widget)

	AllocateWidget(width int, height int, baseline int, transform *gsk.Transform)

	ChildFocusWidget(direction DirectionType) bool

	ComputeBoundsWidget(target Widget) (graphene.Rect, bool)

	ComputeExpandWidget(orientation Orientation) bool

	ComputePointWidget(target Widget, point *graphene.Point) (graphene.Point, bool)

	ComputeTransformWidget(target Widget) (graphene.Matrix, bool)

	ContainsWidget(x float64, y float64) bool

	CreatePangoContextWidget() pango.Context

	CreatePangoLayoutWidget(text string) pango.Layout

	DragCheckThresholdWidget(startX int, startY int, currentX int, currentY int) bool

	ErrorBellWidget()

	AllocatedBaseline() int

	AllocatedHeight() int

	AllocatedWidth() int

	Ancestor(widgetType externglib.Type) Widget

	CanFocus() bool

	CanTarget() bool

	ChildVisible() bool

	Clipboard() gdk.Clipboard

	CSSClasses() []string

	CSSName() string

	Cursor() gdk.Cursor

	Direction() TextDirection

	Display() gdk.Display

	FirstChild() Widget

	FocusChild() Widget

	FocusOnClick() bool

	Focusable() bool

	FontMap() pango.FontMap

	FontOptions() *cairo.FontOptions

	FrameClock() gdk.FrameClock

	Halign() Align

	HasTooltip() bool

	Height() int

	Hexpand() bool

	HexpandSet() bool

	LastChild() Widget

	LayoutManager() LayoutManager

	Mapped() bool

	MarginBottom() int

	MarginEnd() int

	MarginStart() int

	MarginTop() int

	Name() string

	GetNative() Native

	NextSibling() Widget

	Opacity() float64

	Overflow() Overflow

	PangoContext() pango.Context

	Parent() Widget

	PreferredSize() (minimumSize Requisition, naturalSize Requisition)

	PrevSibling() Widget

	PrimaryClipboard() gdk.Clipboard

	Realized() bool

	ReceivesDefault() bool

	RequestMode() SizeRequestMode

	Root() Root

	ScaleFactor() int

	Sensitive() bool

	Settings() Settings

	Size(orientation Orientation) int

	SizeRequest() (width int, height int)

	StateFlags() StateFlags

	StyleContext() StyleContext

	TemplateChild(widgetType externglib.Type, name string) gextras.Objector

	TooltipMarkup() string

	TooltipText() string

	Valign() Align

	Vexpand() bool

	VexpandSet() bool

	Visible() bool

	Width() int

	GrabFocusWidget() bool

	HasCSSClassWidget(cssClass string) bool

	HasDefaultWidget() bool

	HasFocusWidget() bool

	HasVisibleFocusWidget() bool

	HideWidget()

	InDestructionWidget() bool

	InitTemplateWidget()

	InsertAfterWidget(parent Widget, previousSibling Widget)

	InsertBeforeWidget(parent Widget, nextSibling Widget)

	IsAncestorWidget(ancestor Widget) bool

	IsDrawableWidget() bool

	IsFocusWidget() bool

	IsSensitiveWidget() bool

	IsVisibleWidget() bool

	KeynavFailedWidget(direction DirectionType) bool

	MapWidget()

	MeasureWidget(orientation Orientation, forSize int) (minimum int, natural int, minimumBaseline int, naturalBaseline int)

	MnemonicActivateWidget(groupCycling bool) bool

	PickWidget(x float64, y float64, flags PickFlags) Widget

	QueueAllocateWidget()

	QueueDrawWidget()

	QueueResizeWidget()

	RealizeWidget()

	RemoveControllerWidget(controller EventController)

	RemoveCSSClassWidget(cssClass string)

	RemoveMnemonicLabelWidget(label Widget)

	RemoveTickCallbackWidget(id uint)

	SetCanFocusWidget(canFocus bool)

	SetCanTargetWidget(canTarget bool)

	SetChildVisibleWidget(childVisible bool)

	SetCSSClassesWidget(classes []string)

	SetCursorWidget(cursor gdk.Cursor)

	SetCursorFromNameWidget(name string)

	SetDirectionWidget(dir TextDirection)

	SetFocusChildWidget(child Widget)

	SetFocusOnClickWidget(focusOnClick bool)

	SetFocusableWidget(focusable bool)

	SetFontMapWidget(fontMap pango.FontMap)

	SetFontOptionsWidget(options *cairo.FontOptions)

	SetHalignWidget(align Align)

	SetHasTooltipWidget(hasTooltip bool)

	SetHexpandWidget(expand bool)

	SetHexpandSetWidget(set bool)

	SetLayoutManagerWidget(layoutManager LayoutManager)

	SetMarginBottomWidget(margin int)

	SetMarginEndWidget(margin int)

	SetMarginStartWidget(margin int)

	SetMarginTopWidget(margin int)

	SetNameWidget(name string)

	SetOpacityWidget(opacity float64)

	SetOverflowWidget(overflow Overflow)

	SetParentWidget(parent Widget)

	SetReceivesDefaultWidget(receivesDefault bool)

	SetSensitiveWidget(sensitive bool)

	SetSizeRequestWidget(width int, height int)

	SetStateFlagsWidget(flags StateFlags, clear bool)

	SetTooltipMarkupWidget(markup string)

	SetTooltipTextWidget(text string)

	SetValignWidget(align Align)

	SetVexpandWidget(expand bool)

	SetVexpandSetWidget(set bool)

	SetVisibleWidget(visible bool)

	ShouldLayoutWidget() bool

	ShowWidget()

	SnapshotChildWidget(child Widget, snapshot Snapshot)

	TranslateCoordinatesWidget(destWidget Widget, srcX float64, srcY float64) (destX float64, destY float64, ok bool)

	TriggerTooltipQueryWidget()

	UnmapWidget()

	UnparentWidget()

	UnrealizeWidget()

	UnsetStateFlagsWidget(flags StateFlags)
}

// widget implements the Widget class.
type widget struct {
	gextras.Objector
}

// WrapWidget wraps a GObject to the right type. It is
// primarily used internally.
func WrapWidget(obj *externglib.Object) Widget {
	return widget{
		Objector: obj,
	}
}

func marshalWidget(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapWidget(obj), nil
}

func (w widget) ActionSetEnabledWidget(actionName string, enabled bool) {
	var _arg0 *C.GtkWidget // out
	var _arg1 *C.char      // out
	var _arg2 C.gboolean   // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.char)(C.CString(actionName))
	defer C.free(unsafe.Pointer(_arg1))
	if enabled {
		_arg2 = C.TRUE
	}

	C.gtk_widget_action_set_enabled(_arg0, _arg1, _arg2)
}

func (w widget) ActivateWidget() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_activate(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) ActivateActionVariantWidget(name string, args *glib.Variant) bool {
	var _arg0 *C.GtkWidget // out
	var _arg1 *C.char      // out
	var _arg2 *C.GVariant  // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.char)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.GVariant)(unsafe.Pointer(args.Native()))

	_cret = C.gtk_widget_activate_action_variant(_arg0, _arg1, _arg2)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) ActivateDefaultWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_activate_default(_arg0)
}

func (w widget) AddControllerWidget(controller EventController) {
	var _arg0 *C.GtkWidget          // out
	var _arg1 *C.GtkEventController // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GtkEventController)(unsafe.Pointer(controller.Native()))

	C.gtk_widget_add_controller(_arg0, _arg1)
}

func (w widget) AddCSSClassWidget(cssClass string) {
	var _arg0 *C.GtkWidget // out
	var _arg1 *C.char      // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.char)(C.CString(cssClass))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_widget_add_css_class(_arg0, _arg1)
}

func (w widget) AddMnemonicLabelWidget(label Widget) {
	var _arg0 *C.GtkWidget // out
	var _arg1 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(label.Native()))

	C.gtk_widget_add_mnemonic_label(_arg0, _arg1)
}

func (w widget) AllocateWidget(width int, height int, baseline int, transform *gsk.Transform) {
	var _arg0 *C.GtkWidget    // out
	var _arg1 C.int           // out
	var _arg2 C.int           // out
	var _arg3 C.int           // out
	var _arg4 *C.GskTransform // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.int(width)
	_arg2 = C.int(height)
	_arg3 = C.int(baseline)
	_arg4 = (*C.GskTransform)(unsafe.Pointer(transform.Native()))

	C.gtk_widget_allocate(_arg0, _arg1, _arg2, _arg3, _arg4)
}

func (w widget) ChildFocusWidget(direction DirectionType) bool {
	var _arg0 *C.GtkWidget       // out
	var _arg1 C.GtkDirectionType // out
	var _cret C.gboolean         // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.GtkDirectionType(direction)

	_cret = C.gtk_widget_child_focus(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) ComputeBoundsWidget(target Widget) (graphene.Rect, bool) {
	var _arg0 *C.GtkWidget      // out
	var _arg1 *C.GtkWidget      // out
	var _arg2 C.graphene_rect_t // in
	var _cret C.gboolean        // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(target.Native()))

	_cret = C.gtk_widget_compute_bounds(_arg0, _arg1, &_arg2)

	var _outBounds graphene.Rect // out
	var _ok bool                 // out

	{
		var refTmpIn *C.graphene_rect_t
		var refTmpOut *graphene.Rect

		in0 := &_arg2
		refTmpIn = in0

		refTmpOut = (*graphene.Rect)(unsafe.Pointer(refTmpIn))

		_outBounds = *refTmpOut
	}
	if _cret != 0 {
		_ok = true
	}

	return _outBounds, _ok
}

func (w widget) ComputeExpandWidget(orientation Orientation) bool {
	var _arg0 *C.GtkWidget     // out
	var _arg1 C.GtkOrientation // out
	var _cret C.gboolean       // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.GtkOrientation(orientation)

	_cret = C.gtk_widget_compute_expand(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) ComputePointWidget(target Widget, point *graphene.Point) (graphene.Point, bool) {
	var _arg0 *C.GtkWidget        // out
	var _arg1 *C.GtkWidget        // out
	var _arg2 *C.graphene_point_t // out
	var _arg3 C.graphene_point_t  // in
	var _cret C.gboolean          // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(target.Native()))
	_arg2 = (*C.graphene_point_t)(unsafe.Pointer(point.Native()))

	_cret = C.gtk_widget_compute_point(_arg0, _arg1, _arg2, &_arg3)

	var _outPoint graphene.Point // out
	var _ok bool                 // out

	{
		var refTmpIn *C.graphene_point_t
		var refTmpOut *graphene.Point

		in0 := &_arg3
		refTmpIn = in0

		refTmpOut = (*graphene.Point)(unsafe.Pointer(refTmpIn))

		_outPoint = *refTmpOut
	}
	if _cret != 0 {
		_ok = true
	}

	return _outPoint, _ok
}

func (w widget) ComputeTransformWidget(target Widget) (graphene.Matrix, bool) {
	var _arg0 *C.GtkWidget        // out
	var _arg1 *C.GtkWidget        // out
	var _arg2 C.graphene_matrix_t // in
	var _cret C.gboolean          // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(target.Native()))

	_cret = C.gtk_widget_compute_transform(_arg0, _arg1, &_arg2)

	var _outTransform graphene.Matrix // out
	var _ok bool                      // out

	{
		var refTmpIn *C.graphene_matrix_t
		var refTmpOut *graphene.Matrix

		in0 := &_arg2
		refTmpIn = in0

		refTmpOut = (*graphene.Matrix)(unsafe.Pointer(refTmpIn))

		_outTransform = *refTmpOut
	}
	if _cret != 0 {
		_ok = true
	}

	return _outTransform, _ok
}

func (w widget) ContainsWidget(x float64, y float64) bool {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.double     // out
	var _arg2 C.double     // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.double(x)
	_arg2 = C.double(y)

	_cret = C.gtk_widget_contains(_arg0, _arg1, _arg2)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) CreatePangoContextWidget() pango.Context {
	var _arg0 *C.GtkWidget    // out
	var _cret *C.PangoContext // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_create_pango_context(_arg0)

	var _context pango.Context // out

	_context = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(pango.Context)

	return _context
}

func (w widget) CreatePangoLayoutWidget(text string) pango.Layout {
	var _arg0 *C.GtkWidget   // out
	var _arg1 *C.char        // out
	var _cret *C.PangoLayout // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.char)(C.CString(text))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_widget_create_pango_layout(_arg0, _arg1)

	var _layout pango.Layout // out

	_layout = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(pango.Layout)

	return _layout
}

func (w widget) DragCheckThresholdWidget(startX int, startY int, currentX int, currentY int) bool {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.int        // out
	var _arg2 C.int        // out
	var _arg3 C.int        // out
	var _arg4 C.int        // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.int(startX)
	_arg2 = C.int(startY)
	_arg3 = C.int(currentX)
	_arg4 = C.int(currentY)

	_cret = C.gtk_drag_check_threshold(_arg0, _arg1, _arg2, _arg3, _arg4)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) ErrorBellWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_error_bell(_arg0)
}

func (w widget) AllocatedBaseline() int {
	var _arg0 *C.GtkWidget // out
	var _cret C.int        // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_allocated_baseline(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (w widget) AllocatedHeight() int {
	var _arg0 *C.GtkWidget // out
	var _cret C.int        // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_allocated_height(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (w widget) AllocatedWidth() int {
	var _arg0 *C.GtkWidget // out
	var _cret C.int        // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_allocated_width(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (w widget) Ancestor(widgetType externglib.Type) Widget {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.GType      // out
	var _cret *C.GtkWidget // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (C.GType)(widgetType)

	_cret = C.gtk_widget_get_ancestor(_arg0, _arg1)

	var _ret Widget // out

	_ret = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Widget)

	return _ret
}

func (w widget) CanFocus() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_can_focus(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) CanTarget() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_can_target(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) ChildVisible() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_child_visible(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) Clipboard() gdk.Clipboard {
	var _arg0 *C.GtkWidget    // out
	var _cret *C.GdkClipboard // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_clipboard(_arg0)

	var _clipboard gdk.Clipboard // out

	_clipboard = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(gdk.Clipboard)

	return _clipboard
}

func (w widget) CSSClasses() []string {
	var _arg0 *C.GtkWidget // out
	var _cret **C.char

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_css_classes(_arg0)

	var _utf8s []string

	{
		var i int
		var z *C.char
		for p := _cret; *p != z; p = &unsafe.Slice(p, i+1)[i] {
			i++
		}

		src := unsafe.Slice(_cret, i)
		_utf8s = make([]string, i)
		for i := range src {
			_utf8s[i] = C.GoString(src[i])
			defer C.free(unsafe.Pointer(src[i]))
		}
	}

	return _utf8s
}

func (s widget) CSSName() string {
	var _arg0 *C.GtkWidget // out
	var _cret *C.char      // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_widget_get_css_name(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

func (w widget) Cursor() gdk.Cursor {
	var _arg0 *C.GtkWidget // out
	var _cret *C.GdkCursor // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_cursor(_arg0)

	var _cursor gdk.Cursor // out

	_cursor = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(gdk.Cursor)

	return _cursor
}

func (w widget) Direction() TextDirection {
	var _arg0 *C.GtkWidget       // out
	var _cret C.GtkTextDirection // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_direction(_arg0)

	var _textDirection TextDirection // out

	_textDirection = TextDirection(_cret)

	return _textDirection
}

func (w widget) Display() gdk.Display {
	var _arg0 *C.GtkWidget  // out
	var _cret *C.GdkDisplay // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_display(_arg0)

	var _display gdk.Display // out

	_display = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(gdk.Display)

	return _display
}

func (w widget) FirstChild() Widget {
	var _arg0 *C.GtkWidget // out
	var _cret *C.GtkWidget // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_first_child(_arg0)

	var _ret Widget // out

	_ret = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Widget)

	return _ret
}

func (w widget) FocusChild() Widget {
	var _arg0 *C.GtkWidget // out
	var _cret *C.GtkWidget // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_focus_child(_arg0)

	var _ret Widget // out

	_ret = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Widget)

	return _ret
}

func (w widget) FocusOnClick() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_focus_on_click(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) Focusable() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_focusable(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) FontMap() pango.FontMap {
	var _arg0 *C.GtkWidget    // out
	var _cret *C.PangoFontMap // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_font_map(_arg0)

	var _fontMap pango.FontMap // out

	_fontMap = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(pango.FontMap)

	return _fontMap
}

func (w widget) FontOptions() *cairo.FontOptions {
	var _arg0 *C.GtkWidget            // out
	var _cret *C.cairo_font_options_t // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_font_options(_arg0)

	var _fontOptions *cairo.FontOptions // out

	_fontOptions = (*cairo.FontOptions)(unsafe.Pointer(_cret))

	return _fontOptions
}

func (w widget) FrameClock() gdk.FrameClock {
	var _arg0 *C.GtkWidget     // out
	var _cret *C.GdkFrameClock // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_frame_clock(_arg0)

	var _frameClock gdk.FrameClock // out

	_frameClock = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(gdk.FrameClock)

	return _frameClock
}

func (w widget) Halign() Align {
	var _arg0 *C.GtkWidget // out
	var _cret C.GtkAlign   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_halign(_arg0)

	var _align Align // out

	_align = Align(_cret)

	return _align
}

func (w widget) HasTooltip() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_has_tooltip(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) Height() int {
	var _arg0 *C.GtkWidget // out
	var _cret C.int        // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_height(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (w widget) Hexpand() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_hexpand(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) HexpandSet() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_hexpand_set(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) LastChild() Widget {
	var _arg0 *C.GtkWidget // out
	var _cret *C.GtkWidget // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_last_child(_arg0)

	var _ret Widget // out

	_ret = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Widget)

	return _ret
}

func (w widget) LayoutManager() LayoutManager {
	var _arg0 *C.GtkWidget        // out
	var _cret *C.GtkLayoutManager // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_layout_manager(_arg0)

	var _layoutManager LayoutManager // out

	_layoutManager = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(LayoutManager)

	return _layoutManager
}

func (w widget) Mapped() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_mapped(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) MarginBottom() int {
	var _arg0 *C.GtkWidget // out
	var _cret C.int        // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_margin_bottom(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (w widget) MarginEnd() int {
	var _arg0 *C.GtkWidget // out
	var _cret C.int        // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_margin_end(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (w widget) MarginStart() int {
	var _arg0 *C.GtkWidget // out
	var _cret C.int        // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_margin_start(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (w widget) MarginTop() int {
	var _arg0 *C.GtkWidget // out
	var _cret C.int        // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_margin_top(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (w widget) Name() string {
	var _arg0 *C.GtkWidget // out
	var _cret *C.char      // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_name(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

func (w widget) GetNative() Native {
	var _arg0 *C.GtkWidget // out
	var _cret *C.GtkNative // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_native(_arg0)

	var _native Native // out

	_native = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Native)

	return _native
}

func (w widget) NextSibling() Widget {
	var _arg0 *C.GtkWidget // out
	var _cret *C.GtkWidget // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_next_sibling(_arg0)

	var _ret Widget // out

	_ret = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Widget)

	return _ret
}

func (w widget) Opacity() float64 {
	var _arg0 *C.GtkWidget // out
	var _cret C.double     // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_opacity(_arg0)

	var _gdouble float64 // out

	_gdouble = float64(_cret)

	return _gdouble
}

func (w widget) Overflow() Overflow {
	var _arg0 *C.GtkWidget  // out
	var _cret C.GtkOverflow // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_overflow(_arg0)

	var _overflow Overflow // out

	_overflow = Overflow(_cret)

	return _overflow
}

func (w widget) PangoContext() pango.Context {
	var _arg0 *C.GtkWidget    // out
	var _cret *C.PangoContext // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_pango_context(_arg0)

	var _context pango.Context // out

	_context = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(pango.Context)

	return _context
}

func (w widget) Parent() Widget {
	var _arg0 *C.GtkWidget // out
	var _cret *C.GtkWidget // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_parent(_arg0)

	var _ret Widget // out

	_ret = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Widget)

	return _ret
}

func (w widget) PreferredSize() (minimumSize Requisition, naturalSize Requisition) {
	var _arg0 *C.GtkWidget     // out
	var _arg1 C.GtkRequisition // in
	var _arg2 C.GtkRequisition // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_get_preferred_size(_arg0, &_arg1, &_arg2)

	var _minimumSize Requisition // out
	var _naturalSize Requisition // out

	{
		var refTmpIn *C.GtkRequisition
		var refTmpOut *Requisition

		in0 := &_arg1
		refTmpIn = in0

		refTmpOut = (*Requisition)(unsafe.Pointer(refTmpIn))

		_minimumSize = *refTmpOut
	}
	{
		var refTmpIn *C.GtkRequisition
		var refTmpOut *Requisition

		in0 := &_arg2
		refTmpIn = in0

		refTmpOut = (*Requisition)(unsafe.Pointer(refTmpIn))

		_naturalSize = *refTmpOut
	}

	return _minimumSize, _naturalSize
}

func (w widget) PrevSibling() Widget {
	var _arg0 *C.GtkWidget // out
	var _cret *C.GtkWidget // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_prev_sibling(_arg0)

	var _ret Widget // out

	_ret = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Widget)

	return _ret
}

func (w widget) PrimaryClipboard() gdk.Clipboard {
	var _arg0 *C.GtkWidget    // out
	var _cret *C.GdkClipboard // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_primary_clipboard(_arg0)

	var _clipboard gdk.Clipboard // out

	_clipboard = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(gdk.Clipboard)

	return _clipboard
}

func (w widget) Realized() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_realized(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) ReceivesDefault() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_receives_default(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) RequestMode() SizeRequestMode {
	var _arg0 *C.GtkWidget         // out
	var _cret C.GtkSizeRequestMode // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_request_mode(_arg0)

	var _sizeRequestMode SizeRequestMode // out

	_sizeRequestMode = SizeRequestMode(_cret)

	return _sizeRequestMode
}

func (w widget) Root() Root {
	var _arg0 *C.GtkWidget // out
	var _cret *C.GtkRoot   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_root(_arg0)

	var _root Root // out

	_root = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Root)

	return _root
}

func (w widget) ScaleFactor() int {
	var _arg0 *C.GtkWidget // out
	var _cret C.int        // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_scale_factor(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (w widget) Sensitive() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_sensitive(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) Settings() Settings {
	var _arg0 *C.GtkWidget   // out
	var _cret *C.GtkSettings // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_settings(_arg0)

	var _settings Settings // out

	_settings = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Settings)

	return _settings
}

func (w widget) Size(orientation Orientation) int {
	var _arg0 *C.GtkWidget     // out
	var _arg1 C.GtkOrientation // out
	var _cret C.int            // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.GtkOrientation(orientation)

	_cret = C.gtk_widget_get_size(_arg0, _arg1)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (w widget) SizeRequest() (width int, height int) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.int        // in
	var _arg2 C.int        // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_get_size_request(_arg0, &_arg1, &_arg2)

	var _width int  // out
	var _height int // out

	_width = int(_arg1)
	_height = int(_arg2)

	return _width, _height
}

func (w widget) StateFlags() StateFlags {
	var _arg0 *C.GtkWidget    // out
	var _cret C.GtkStateFlags // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_state_flags(_arg0)

	var _stateFlags StateFlags // out

	_stateFlags = StateFlags(_cret)

	return _stateFlags
}

func (w widget) StyleContext() StyleContext {
	var _arg0 *C.GtkWidget       // out
	var _cret *C.GtkStyleContext // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_style_context(_arg0)

	var _styleContext StyleContext // out

	_styleContext = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(StyleContext)

	return _styleContext
}

func (w widget) TemplateChild(widgetType externglib.Type, name string) gextras.Objector {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.GType      // out
	var _arg2 *C.char      // out
	var _cret *C.GObject   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (C.GType)(widgetType)
	_arg2 = (*C.char)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.gtk_widget_get_template_child(_arg0, _arg1, _arg2)

	var _object gextras.Objector // out

	_object = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(gextras.Objector)

	return _object
}

func (w widget) TooltipMarkup() string {
	var _arg0 *C.GtkWidget // out
	var _cret *C.char      // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_tooltip_markup(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

func (w widget) TooltipText() string {
	var _arg0 *C.GtkWidget // out
	var _cret *C.char      // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_tooltip_text(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

func (w widget) Valign() Align {
	var _arg0 *C.GtkWidget // out
	var _cret C.GtkAlign   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_valign(_arg0)

	var _align Align // out

	_align = Align(_cret)

	return _align
}

func (w widget) Vexpand() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_vexpand(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) VexpandSet() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_vexpand_set(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) Visible() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_visible(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) Width() int {
	var _arg0 *C.GtkWidget // out
	var _cret C.int        // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_width(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (w widget) GrabFocusWidget() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_grab_focus(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) HasCSSClassWidget(cssClass string) bool {
	var _arg0 *C.GtkWidget // out
	var _arg1 *C.char      // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.char)(C.CString(cssClass))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_widget_has_css_class(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) HasDefaultWidget() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_has_default(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) HasFocusWidget() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_has_focus(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) HasVisibleFocusWidget() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_has_visible_focus(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) HideWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_hide(_arg0)
}

func (w widget) InDestructionWidget() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_in_destruction(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) InitTemplateWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_init_template(_arg0)
}

func (w widget) InsertAfterWidget(parent Widget, previousSibling Widget) {
	var _arg0 *C.GtkWidget // out
	var _arg1 *C.GtkWidget // out
	var _arg2 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(parent.Native()))
	_arg2 = (*C.GtkWidget)(unsafe.Pointer(previousSibling.Native()))

	C.gtk_widget_insert_after(_arg0, _arg1, _arg2)
}

func (w widget) InsertBeforeWidget(parent Widget, nextSibling Widget) {
	var _arg0 *C.GtkWidget // out
	var _arg1 *C.GtkWidget // out
	var _arg2 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(parent.Native()))
	_arg2 = (*C.GtkWidget)(unsafe.Pointer(nextSibling.Native()))

	C.gtk_widget_insert_before(_arg0, _arg1, _arg2)
}

func (w widget) IsAncestorWidget(ancestor Widget) bool {
	var _arg0 *C.GtkWidget // out
	var _arg1 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(ancestor.Native()))

	_cret = C.gtk_widget_is_ancestor(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) IsDrawableWidget() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_is_drawable(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) IsFocusWidget() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_is_focus(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) IsSensitiveWidget() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_is_sensitive(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) IsVisibleWidget() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_is_visible(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) KeynavFailedWidget(direction DirectionType) bool {
	var _arg0 *C.GtkWidget       // out
	var _arg1 C.GtkDirectionType // out
	var _cret C.gboolean         // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.GtkDirectionType(direction)

	_cret = C.gtk_widget_keynav_failed(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) MapWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_map(_arg0)
}

func (w widget) MeasureWidget(orientation Orientation, forSize int) (minimum int, natural int, minimumBaseline int, naturalBaseline int) {
	var _arg0 *C.GtkWidget     // out
	var _arg1 C.GtkOrientation // out
	var _arg2 C.int            // out
	var _arg3 C.int            // in
	var _arg4 C.int            // in
	var _arg5 C.int            // in
	var _arg6 C.int            // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.GtkOrientation(orientation)
	_arg2 = C.int(forSize)

	C.gtk_widget_measure(_arg0, _arg1, _arg2, &_arg3, &_arg4, &_arg5, &_arg6)

	var _minimum int         // out
	var _natural int         // out
	var _minimumBaseline int // out
	var _naturalBaseline int // out

	_minimum = int(_arg3)
	_natural = int(_arg4)
	_minimumBaseline = int(_arg5)
	_naturalBaseline = int(_arg6)

	return _minimum, _natural, _minimumBaseline, _naturalBaseline
}

func (w widget) MnemonicActivateWidget(groupCycling bool) bool {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gboolean   // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	if groupCycling {
		_arg1 = C.TRUE
	}

	_cret = C.gtk_widget_mnemonic_activate(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) PickWidget(x float64, y float64, flags PickFlags) Widget {
	var _arg0 *C.GtkWidget   // out
	var _arg1 C.double       // out
	var _arg2 C.double       // out
	var _arg3 C.GtkPickFlags // out
	var _cret *C.GtkWidget   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.double(x)
	_arg2 = C.double(y)
	_arg3 = C.GtkPickFlags(flags)

	_cret = C.gtk_widget_pick(_arg0, _arg1, _arg2, _arg3)

	var _ret Widget // out

	_ret = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Widget)

	return _ret
}

func (w widget) QueueAllocateWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_queue_allocate(_arg0)
}

func (w widget) QueueDrawWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_queue_draw(_arg0)
}

func (w widget) QueueResizeWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_queue_resize(_arg0)
}

func (w widget) RealizeWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_realize(_arg0)
}

func (w widget) RemoveControllerWidget(controller EventController) {
	var _arg0 *C.GtkWidget          // out
	var _arg1 *C.GtkEventController // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GtkEventController)(unsafe.Pointer(controller.Native()))

	C.gtk_widget_remove_controller(_arg0, _arg1)
}

func (w widget) RemoveCSSClassWidget(cssClass string) {
	var _arg0 *C.GtkWidget // out
	var _arg1 *C.char      // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.char)(C.CString(cssClass))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_widget_remove_css_class(_arg0, _arg1)
}

func (w widget) RemoveMnemonicLabelWidget(label Widget) {
	var _arg0 *C.GtkWidget // out
	var _arg1 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(label.Native()))

	C.gtk_widget_remove_mnemonic_label(_arg0, _arg1)
}

func (w widget) RemoveTickCallbackWidget(id uint) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.guint      // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.guint(id)

	C.gtk_widget_remove_tick_callback(_arg0, _arg1)
}

func (w widget) SetCanFocusWidget(canFocus bool) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	if canFocus {
		_arg1 = C.TRUE
	}

	C.gtk_widget_set_can_focus(_arg0, _arg1)
}

func (w widget) SetCanTargetWidget(canTarget bool) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	if canTarget {
		_arg1 = C.TRUE
	}

	C.gtk_widget_set_can_target(_arg0, _arg1)
}

func (w widget) SetChildVisibleWidget(childVisible bool) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	if childVisible {
		_arg1 = C.TRUE
	}

	C.gtk_widget_set_child_visible(_arg0, _arg1)
}

func (w widget) SetCSSClassesWidget(classes []string) {
	var _arg0 *C.GtkWidget // out
	var _arg1 **C.char

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (**C.char)(C.malloc(C.ulong(len(classes)+1) * C.ulong(unsafe.Sizeof(uint(0)))))
	defer C.free(unsafe.Pointer(_arg1))
	{
		out := unsafe.Slice(_arg1, len(classes))
		for i := range classes {
			out[i] = (*C.char)(C.CString(classes[i]))
			defer C.free(unsafe.Pointer(out[i]))
		}
	}

	C.gtk_widget_set_css_classes(_arg0, _arg1)
}

func (w widget) SetCursorWidget(cursor gdk.Cursor) {
	var _arg0 *C.GtkWidget // out
	var _arg1 *C.GdkCursor // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GdkCursor)(unsafe.Pointer(cursor.Native()))

	C.gtk_widget_set_cursor(_arg0, _arg1)
}

func (w widget) SetCursorFromNameWidget(name string) {
	var _arg0 *C.GtkWidget // out
	var _arg1 *C.char      // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.char)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_widget_set_cursor_from_name(_arg0, _arg1)
}

func (w widget) SetDirectionWidget(dir TextDirection) {
	var _arg0 *C.GtkWidget       // out
	var _arg1 C.GtkTextDirection // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.GtkTextDirection(dir)

	C.gtk_widget_set_direction(_arg0, _arg1)
}

func (w widget) SetFocusChildWidget(child Widget) {
	var _arg0 *C.GtkWidget // out
	var _arg1 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(child.Native()))

	C.gtk_widget_set_focus_child(_arg0, _arg1)
}

func (w widget) SetFocusOnClickWidget(focusOnClick bool) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	if focusOnClick {
		_arg1 = C.TRUE
	}

	C.gtk_widget_set_focus_on_click(_arg0, _arg1)
}

func (w widget) SetFocusableWidget(focusable bool) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	if focusable {
		_arg1 = C.TRUE
	}

	C.gtk_widget_set_focusable(_arg0, _arg1)
}

func (w widget) SetFontMapWidget(fontMap pango.FontMap) {
	var _arg0 *C.GtkWidget    // out
	var _arg1 *C.PangoFontMap // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.PangoFontMap)(unsafe.Pointer(fontMap.Native()))

	C.gtk_widget_set_font_map(_arg0, _arg1)
}

func (w widget) SetFontOptionsWidget(options *cairo.FontOptions) {
	var _arg0 *C.GtkWidget            // out
	var _arg1 *C.cairo_font_options_t // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.cairo_font_options_t)(unsafe.Pointer(options.Native()))

	C.gtk_widget_set_font_options(_arg0, _arg1)
}

func (w widget) SetHalignWidget(align Align) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.GtkAlign   // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.GtkAlign(align)

	C.gtk_widget_set_halign(_arg0, _arg1)
}

func (w widget) SetHasTooltipWidget(hasTooltip bool) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	if hasTooltip {
		_arg1 = C.TRUE
	}

	C.gtk_widget_set_has_tooltip(_arg0, _arg1)
}

func (w widget) SetHexpandWidget(expand bool) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	if expand {
		_arg1 = C.TRUE
	}

	C.gtk_widget_set_hexpand(_arg0, _arg1)
}

func (w widget) SetHexpandSetWidget(set bool) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	if set {
		_arg1 = C.TRUE
	}

	C.gtk_widget_set_hexpand_set(_arg0, _arg1)
}

func (w widget) SetLayoutManagerWidget(layoutManager LayoutManager) {
	var _arg0 *C.GtkWidget        // out
	var _arg1 *C.GtkLayoutManager // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GtkLayoutManager)(unsafe.Pointer(layoutManager.Native()))

	C.gtk_widget_set_layout_manager(_arg0, _arg1)
}

func (w widget) SetMarginBottomWidget(margin int) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.int        // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.int(margin)

	C.gtk_widget_set_margin_bottom(_arg0, _arg1)
}

func (w widget) SetMarginEndWidget(margin int) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.int        // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.int(margin)

	C.gtk_widget_set_margin_end(_arg0, _arg1)
}

func (w widget) SetMarginStartWidget(margin int) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.int        // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.int(margin)

	C.gtk_widget_set_margin_start(_arg0, _arg1)
}

func (w widget) SetMarginTopWidget(margin int) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.int        // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.int(margin)

	C.gtk_widget_set_margin_top(_arg0, _arg1)
}

func (w widget) SetNameWidget(name string) {
	var _arg0 *C.GtkWidget // out
	var _arg1 *C.char      // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.char)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_widget_set_name(_arg0, _arg1)
}

func (w widget) SetOpacityWidget(opacity float64) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.double     // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.double(opacity)

	C.gtk_widget_set_opacity(_arg0, _arg1)
}

func (w widget) SetOverflowWidget(overflow Overflow) {
	var _arg0 *C.GtkWidget  // out
	var _arg1 C.GtkOverflow // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.GtkOverflow(overflow)

	C.gtk_widget_set_overflow(_arg0, _arg1)
}

func (w widget) SetParentWidget(parent Widget) {
	var _arg0 *C.GtkWidget // out
	var _arg1 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(parent.Native()))

	C.gtk_widget_set_parent(_arg0, _arg1)
}

func (w widget) SetReceivesDefaultWidget(receivesDefault bool) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	if receivesDefault {
		_arg1 = C.TRUE
	}

	C.gtk_widget_set_receives_default(_arg0, _arg1)
}

func (w widget) SetSensitiveWidget(sensitive bool) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	if sensitive {
		_arg1 = C.TRUE
	}

	C.gtk_widget_set_sensitive(_arg0, _arg1)
}

func (w widget) SetSizeRequestWidget(width int, height int) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.int        // out
	var _arg2 C.int        // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.int(width)
	_arg2 = C.int(height)

	C.gtk_widget_set_size_request(_arg0, _arg1, _arg2)
}

func (w widget) SetStateFlagsWidget(flags StateFlags, clear bool) {
	var _arg0 *C.GtkWidget    // out
	var _arg1 C.GtkStateFlags // out
	var _arg2 C.gboolean      // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.GtkStateFlags(flags)
	if clear {
		_arg2 = C.TRUE
	}

	C.gtk_widget_set_state_flags(_arg0, _arg1, _arg2)
}

func (w widget) SetTooltipMarkupWidget(markup string) {
	var _arg0 *C.GtkWidget // out
	var _arg1 *C.char      // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.char)(C.CString(markup))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_widget_set_tooltip_markup(_arg0, _arg1)
}

func (w widget) SetTooltipTextWidget(text string) {
	var _arg0 *C.GtkWidget // out
	var _arg1 *C.char      // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.char)(C.CString(text))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_widget_set_tooltip_text(_arg0, _arg1)
}

func (w widget) SetValignWidget(align Align) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.GtkAlign   // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.GtkAlign(align)

	C.gtk_widget_set_valign(_arg0, _arg1)
}

func (w widget) SetVexpandWidget(expand bool) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	if expand {
		_arg1 = C.TRUE
	}

	C.gtk_widget_set_vexpand(_arg0, _arg1)
}

func (w widget) SetVexpandSetWidget(set bool) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	if set {
		_arg1 = C.TRUE
	}

	C.gtk_widget_set_vexpand_set(_arg0, _arg1)
}

func (w widget) SetVisibleWidget(visible bool) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	if visible {
		_arg1 = C.TRUE
	}

	C.gtk_widget_set_visible(_arg0, _arg1)
}

func (w widget) ShouldLayoutWidget() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_should_layout(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) ShowWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_show(_arg0)
}

func (w widget) SnapshotChildWidget(child Widget, snapshot Snapshot) {
	var _arg0 *C.GtkWidget   // out
	var _arg1 *C.GtkWidget   // out
	var _arg2 *C.GtkSnapshot // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(child.Native()))
	_arg2 = (*C.GtkSnapshot)(unsafe.Pointer(snapshot.Native()))

	C.gtk_widget_snapshot_child(_arg0, _arg1, _arg2)
}

func (s widget) TranslateCoordinatesWidget(destWidget Widget, srcX float64, srcY float64) (destX float64, destY float64, ok bool) {
	var _arg0 *C.GtkWidget // out
	var _arg1 *C.GtkWidget // out
	var _arg2 C.double     // out
	var _arg3 C.double     // out
	var _arg4 C.double     // in
	var _arg5 C.double     // in
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(destWidget.Native()))
	_arg2 = C.double(srcX)
	_arg3 = C.double(srcY)

	_cret = C.gtk_widget_translate_coordinates(_arg0, _arg1, _arg2, _arg3, &_arg4, &_arg5)

	var _destX float64 // out
	var _destY float64 // out
	var _ok bool       // out

	_destX = float64(_arg4)
	_destY = float64(_arg5)
	if _cret != 0 {
		_ok = true
	}

	return _destX, _destY, _ok
}

func (w widget) TriggerTooltipQueryWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_trigger_tooltip_query(_arg0)
}

func (w widget) UnmapWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_unmap(_arg0)
}

func (w widget) UnparentWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_unparent(_arg0)
}

func (w widget) UnrealizeWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_unrealize(_arg0)
}

func (w widget) UnsetStateFlagsWidget(flags StateFlags) {
	var _arg0 *C.GtkWidget    // out
	var _arg1 C.GtkStateFlags // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.GtkStateFlags(flags)

	C.gtk_widget_unset_state_flags(_arg0, _arg1)
}

func (s widget) AccessibleRole() AccessibleRole {
	return WrapAccessible(gextras.InternObject(s)).AccessibleRole()
}

func (s widget) ResetProperty(property AccessibleProperty) {
	WrapAccessible(gextras.InternObject(s)).ResetProperty(property)
}

func (s widget) ResetRelation(relation AccessibleRelation) {
	WrapAccessible(gextras.InternObject(s)).ResetRelation(relation)
}

func (s widget) ResetState(state AccessibleState) {
	WrapAccessible(gextras.InternObject(s)).ResetState(state)
}

func (s widget) UpdatePropertyValue(properties []AccessibleProperty, values []externglib.Value) {
	WrapAccessible(gextras.InternObject(s)).UpdatePropertyValue(properties, values)
}

func (s widget) UpdateRelationValue(relations []AccessibleRelation, values []externglib.Value) {
	WrapAccessible(gextras.InternObject(s)).UpdateRelationValue(relations, values)
}

func (s widget) UpdateStateValue(states []AccessibleState, values []externglib.Value) {
	WrapAccessible(gextras.InternObject(s)).UpdateStateValue(states, values)
}

func (b widget) BuildableID() string {
	return WrapBuildable(gextras.InternObject(b)).BuildableID()
}

// Requisition: a Requisition-struct represents the desired size of a widget.
// See [GtkWidget’s geometry management section][geometry-management] for more
// information.
type Requisition C.GtkRequisition

// WrapRequisition wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapRequisition(ptr unsafe.Pointer) *Requisition {
	return (*Requisition)(ptr)
}

func marshalRequisition(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return (*Requisition)(unsafe.Pointer(b)), nil
}

// NewRequisition constructs a struct Requisition.
func NewRequisition() *Requisition {
	var _cret *C.GtkRequisition // in

	_cret = C.gtk_requisition_new()

	var _requisition *Requisition // out

	_requisition = (*Requisition)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(&_requisition, func(v **Requisition) {
		C.free(unsafe.Pointer(v))
	})

	return _requisition
}

// Native returns the underlying C source pointer.
func (r *Requisition) Native() unsafe.Pointer {
	return unsafe.Pointer(r)
}

// Copy frees a `GtkRequisition`.
func (r *Requisition) Copy() *Requisition {
	var _arg0 *C.GtkRequisition // out
	var _cret *C.GtkRequisition // in

	_arg0 = (*C.GtkRequisition)(unsafe.Pointer(r.Native()))

	_cret = C.gtk_requisition_copy(_arg0)

	var _ret *Requisition // out

	_ret = (*Requisition)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(&_ret, func(v **Requisition) {
		C.free(unsafe.Pointer(v))
	})

	return _ret
}

// Free frees a `GtkRequisition`.
func (r *Requisition) Free() {
	var _arg0 *C.GtkRequisition // out

	_arg0 = (*C.GtkRequisition)(unsafe.Pointer(r.Native()))

	C.gtk_requisition_free(_arg0)
}
