// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/internal/box"
	"github.com/diamondburned/gotk4/internal/gextras"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_flow_box_child_get_type()), F: marshalFlowBoxChild},
	})
}

// FlowBoxCreateWidgetFunc: called for flow boxes that are bound to a
// `GListModel`.
//
// This function is called for each item that gets added to the model.
type FlowBoxCreateWidgetFunc func() (widget Widget)

//export gotk4_FlowBoxCreateWidgetFunc
func gotk4_FlowBoxCreateWidgetFunc(arg0 C.gpointer, arg1 C.gpointer) *C.GtkWidget {
	v := box.Get(uintptr(arg1))
	if v == nil {
		panic(`callback not found`)
	}

	fn := v.(FlowBoxCreateWidgetFunc)
	fn(widget)

	cret = (*C.GtkWidget)(unsafe.Pointer(widget.Native()))
}

// FlowBoxFilterFunc: a function that will be called whenever a child changes or
// is added.
//
// It lets you control if the child should be visible or not.
type FlowBoxFilterFunc func() (ok bool)

//export gotk4_FlowBoxFilterFunc
func gotk4_FlowBoxFilterFunc(arg0 *C.GtkFlowBoxChild, arg1 C.gpointer) C.gboolean {
	v := box.Get(uintptr(arg1))
	if v == nil {
		panic(`callback not found`)
	}

	fn := v.(FlowBoxFilterFunc)
	fn(ok)

	if ok {
		cret = C.gboolean(1)
	}
}

// FlowBoxForeachFunc: a function used by gtk_flow_box_selected_foreach().
//
// It will be called on every selected child of the @box.
type FlowBoxForeachFunc func()

//export gotk4_FlowBoxForeachFunc
func gotk4_FlowBoxForeachFunc(arg0 *C.GtkFlowBox, arg1 *C.GtkFlowBoxChild, arg2 C.gpointer) {
	v := box.Get(uintptr(arg2))
	if v == nil {
		panic(`callback not found`)
	}

	fn := v.(FlowBoxForeachFunc)
	fn()
}

// FlowBoxSortFunc: a function to compare two children to determine which should
// come first.
type FlowBoxSortFunc func() (gint int)

//export gotk4_FlowBoxSortFunc
func gotk4_FlowBoxSortFunc(arg0 *C.GtkFlowBoxChild, arg1 *C.GtkFlowBoxChild, arg2 C.gpointer) C.int {
	v := box.Get(uintptr(arg2))
	if v == nil {
		panic(`callback not found`)
	}

	fn := v.(FlowBoxSortFunc)
	fn(gint)

	cret = C.int(gint)
}

// FlowBoxChild: `GtkFlowBoxChild` is the kind of widget that can be added to a
// `GtkFlowBox`.
type FlowBoxChild interface {
	Widget
	Accessible
	Buildable
	ConstraintTarget

	// Changed marks @child as changed, causing any state that depends on this
	// to be updated.
	//
	// This affects sorting and filtering.
	//
	// Note that calls to this method must be in sync with the data used for the
	// sorting and filtering functions. For instance, if the list is mirroring
	// some external data set, and *two* children changed in the external data
	// set when you call gtk_flow_box_child_changed() on the first child, the
	// sort function must only read the new data for the first of the two
	// changed children, otherwise the resorting of the children will be wrong.
	//
	// This generally means that if you don’t fully control the data model, you
	// have to duplicate the data that affects the sorting and filtering
	// functions into the widgets themselves.
	//
	// Another alternative is to call [method@Gtk.FlowBox.invalidate_sort] on
	// any model change, but that is more expensive.
	Changed()
	// Child gets the child widget of @self.
	Child() Widget
	// Index gets the current index of the @child in its `GtkFlowBox` container.
	Index() int
	// IsSelected returns whether the @child is currently selected in its
	// `GtkFlowBox` container.
	IsSelected() bool
	// SetChild sets the child widget of @self.
	SetChild(child Widget)
}

// flowBoxChild implements the FlowBoxChild interface.
type flowBoxChild struct {
	Widget
	Accessible
	Buildable
	ConstraintTarget
}

var _ FlowBoxChild = (*flowBoxChild)(nil)

// WrapFlowBoxChild wraps a GObject to the right type. It is
// primarily used internally.
func WrapFlowBoxChild(obj *externglib.Object) FlowBoxChild {
	return FlowBoxChild{
		Widget:           WrapWidget(obj),
		Accessible:       WrapAccessible(obj),
		Buildable:        WrapBuildable(obj),
		ConstraintTarget: WrapConstraintTarget(obj),
	}
}

func marshalFlowBoxChild(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapFlowBoxChild(obj), nil
}

// NewFlowBoxChild constructs a class FlowBoxChild.
func NewFlowBoxChild() FlowBoxChild {
	var cret C.GtkFlowBoxChild
	var goret FlowBoxChild

	cret = C.gtk_flow_box_child_new()

	goret = gextras.CastObject(externglib.Take(unsafe.Pointer(cret.Native()))).(FlowBoxChild)

	return goret
}

// Changed marks @child as changed, causing any state that depends on this
// to be updated.
//
// This affects sorting and filtering.
//
// Note that calls to this method must be in sync with the data used for the
// sorting and filtering functions. For instance, if the list is mirroring
// some external data set, and *two* children changed in the external data
// set when you call gtk_flow_box_child_changed() on the first child, the
// sort function must only read the new data for the first of the two
// changed children, otherwise the resorting of the children will be wrong.
//
// This generally means that if you don’t fully control the data model, you
// have to duplicate the data that affects the sorting and filtering
// functions into the widgets themselves.
//
// Another alternative is to call [method@Gtk.FlowBox.invalidate_sort] on
// any model change, but that is more expensive.
func (c flowBoxChild) Changed() {
	var arg0 *C.GtkFlowBoxChild

	arg0 = (*C.GtkFlowBoxChild)(unsafe.Pointer(c.Native()))

	C.gtk_flow_box_child_changed(arg0)
}

// Child gets the child widget of @self.
func (s flowBoxChild) Child() Widget {
	var arg0 *C.GtkFlowBoxChild

	arg0 = (*C.GtkFlowBoxChild)(unsafe.Pointer(s.Native()))

	var cret *C.GtkWidget
	var goret Widget

	cret = C.gtk_flow_box_child_get_child(arg0)

	goret = gextras.CastObject(externglib.Take(unsafe.Pointer(cret.Native()))).(Widget)

	return goret
}

// Index gets the current index of the @child in its `GtkFlowBox` container.
func (c flowBoxChild) Index() int {
	var arg0 *C.GtkFlowBoxChild

	arg0 = (*C.GtkFlowBoxChild)(unsafe.Pointer(c.Native()))

	var cret C.int
	var goret int

	cret = C.gtk_flow_box_child_get_index(arg0)

	goret = int(cret)

	return goret
}

// IsSelected returns whether the @child is currently selected in its
// `GtkFlowBox` container.
func (c flowBoxChild) IsSelected() bool {
	var arg0 *C.GtkFlowBoxChild

	arg0 = (*C.GtkFlowBoxChild)(unsafe.Pointer(c.Native()))

	var cret C.gboolean
	var goret bool

	cret = C.gtk_flow_box_child_is_selected(arg0)

	if cret {
		goret = true
	}

	return goret
}

// SetChild sets the child widget of @self.
func (s flowBoxChild) SetChild(child Widget) {
	var arg0 *C.GtkFlowBoxChild
	var arg1 *C.GtkWidget

	arg0 = (*C.GtkFlowBoxChild)(unsafe.Pointer(s.Native()))
	arg1 = (*C.GtkWidget)(unsafe.Pointer(child.Native()))

	C.gtk_flow_box_child_set_child(arg0, arg1)
}
