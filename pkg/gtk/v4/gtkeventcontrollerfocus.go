// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_event_controller_focus_get_type()), F: marshalEventControllerFocus},
	})
}

// EventControllerFocus: `GtkEventControllerFocus` is an event controller to
// keep track of keyboard focus.
//
// The event controller offers [signal@Gtk.EventControllerFocus::enter] and
// [signal@Gtk.EventControllerFocus::leave] signals, as well as
// [property@Gtk.EventControllerFocus:is-focus] and
// [property@Gtk.EventControllerFocus:contains-focus] properties which are
// updated to reflect focus changes inside the widget hierarchy that is rooted
// at the controllers widget.
type EventControllerFocus interface {
	EventController

	// ContainsFocus returns true if focus is within @self or one of its
	// children.
	ContainsFocus() bool
	// IsFocus returns true if focus is within @self, but not one of its
	// children.
	IsFocus() bool
}

// eventControllerFocus implements the EventControllerFocus interface.
type eventControllerFocus struct {
	EventController
}

var _ EventControllerFocus = (*eventControllerFocus)(nil)

// WrapEventControllerFocus wraps a GObject to the right type. It is
// primarily used internally.
func WrapEventControllerFocus(obj *externglib.Object) EventControllerFocus {
	return EventControllerFocus{
		EventController: WrapEventController(obj),
	}
}

func marshalEventControllerFocus(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapEventControllerFocus(obj), nil
}

// NewEventControllerFocus constructs a class EventControllerFocus.
func NewEventControllerFocus() EventControllerFocus {
	cret := new(C.GtkEventControllerFocus)
	var goret EventControllerFocus

	cret = C.gtk_event_controller_focus_new()

	goret = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(cret.Native()))).(EventControllerFocus)

	return goret
}

// ContainsFocus returns true if focus is within @self or one of its
// children.
func (s eventControllerFocus) ContainsFocus() bool {
	var arg0 *C.GtkEventControllerFocus

	arg0 = (*C.GtkEventControllerFocus)(unsafe.Pointer(s.Native()))

	var cret C.gboolean
	var goret bool

	cret = C.gtk_event_controller_focus_contains_focus(arg0)

	if cret {
		goret = true
	}

	return goret
}

// IsFocus returns true if focus is within @self, but not one of its
// children.
func (s eventControllerFocus) IsFocus() bool {
	var arg0 *C.GtkEventControllerFocus

	arg0 = (*C.GtkEventControllerFocus)(unsafe.Pointer(s.Native()))

	var cret C.gboolean
	var goret bool

	cret = C.gtk_event_controller_focus_is_focus(arg0)

	if cret {
		goret = true
	}

	return goret
}
