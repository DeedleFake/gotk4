// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/internal/box"
	"github.com/diamondburned/gotk4/internal/gextras"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

// PrinterFunc: the type of function passed to gtk_enumerate_printers().
//
// Note that you need to ref @printer, if you want to keep a reference to it
// after the function has returned.
type PrinterFunc func() (ok bool)

//export gotk4_PrinterFunc
func gotk4_PrinterFunc(arg0 *C.GtkPrinter, arg1 C.gpointer) C.gboolean {
	v := box.Get(uintptr(arg1))
	if v == nil {
		panic(`callback not found`)
	}

	fn := v.(PrinterFunc)
	ok := fn()

	if ok {
		cret = C.gboolean(1)
	}
}

type PrintBackend struct {
	native C.GtkPrintBackend
}

// WrapPrintBackend wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPrintBackend(ptr unsafe.Pointer) *PrintBackend {
	if ptr == nil {
		return nil
	}

	return (*PrintBackend)(ptr)
}

func marshalPrintBackend(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPrintBackend(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (p *PrintBackend) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}
