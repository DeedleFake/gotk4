// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/box"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_print_capabilities_get_type()), F: marshalPrintCapabilities},
		{T: externglib.Type(C.gtk_printer_get_type()), F: marshalPrinter},
	})
}

// PrintCapabilities specifies which features the print dialog should offer.
//
// If neither GTK_PRINT_CAPABILITY_GENERATE_PDF nor
// GTK_PRINT_CAPABILITY_GENERATE_PS is specified, GTK assumes that all formats
// are supported.
type PrintCapabilities int

const (
	// PrintCapabilitiesPageSet: print dialog will offer printing even/odd
	// pages.
	PrintCapabilitiesPageSet PrintCapabilities = 0b1
	// PrintCapabilitiesCopies: print dialog will allow to print multiple
	// copies.
	PrintCapabilitiesCopies PrintCapabilities = 0b10
	// PrintCapabilitiesCollate: print dialog will allow to collate multiple
	// copies.
	PrintCapabilitiesCollate PrintCapabilities = 0b100
	// PrintCapabilitiesReverse: print dialog will allow to print pages in
	// reverse order.
	PrintCapabilitiesReverse PrintCapabilities = 0b1000
	// PrintCapabilitiesScale: print dialog will allow to scale the output.
	PrintCapabilitiesScale PrintCapabilities = 0b10000
	// PrintCapabilitiesGeneratePDF: the program will send the document to the
	// printer in PDF format
	PrintCapabilitiesGeneratePDF PrintCapabilities = 0b100000
	// PrintCapabilitiesGeneratePS: the program will send the document to the
	// printer in Postscript format
	PrintCapabilitiesGeneratePS PrintCapabilities = 0b1000000
	// PrintCapabilitiesPreview: print dialog will offer a preview
	PrintCapabilitiesPreview PrintCapabilities = 0b10000000
	// PrintCapabilitiesNumberUp: print dialog will offer printing multiple
	// pages per sheet
	PrintCapabilitiesNumberUp PrintCapabilities = 0b100000000
	// PrintCapabilitiesNumberUpLayout: print dialog will allow to rearrange
	// pages when printing multiple pages per sheet
	PrintCapabilitiesNumberUpLayout PrintCapabilities = 0b1000000000
)

func marshalPrintCapabilities(p uintptr) (interface{}, error) {
	return PrintCapabilities(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// PrinterFunc: the type of function passed to gtk_enumerate_printers().
//
// Note that you need to ref @printer, if you want to keep a reference to it
// after the function has returned.
type PrinterFunc func(printer Printer, ok bool)

//export gotk4_PrinterFunc
func gotk4_PrinterFunc(arg0 *C.GtkPrinter, arg1 C.gpointer) C.gboolean {
	v := box.Get(uintptr(arg1))
	if v == nil {
		panic(`callback not found`)
	}

	var printer Printer // out

	printer = gextras.CastObject(externglib.Take(unsafe.Pointer(arg0))).(Printer)

	fn := v.(PrinterFunc)
	ok := fn(printer)

	var cret C.gboolean // out

	if ok {
		cret = C.TRUE
	}

	return cret
}

// Printer: a `GtkPrinter` object represents a printer.
//
// You only need to deal directly with printers if you use the non-portable
// [class@Gtk.PrintUnixDialog] API.
//
// A `GtkPrinter` allows to get status information about the printer, such as
// its description, its location, the number of queued jobs, etc. Most
// importantly, a `GtkPrinter` object can be used to create a
// [class@Gtk.PrintJob] object, which lets you print to the printer.
type Printer interface {
	gextras.Objector

	AcceptsPDFPrinter() bool

	AcceptsPSPrinter() bool

	ComparePrinter(b Printer) int

	Backend() *PrintBackend

	Capabilities() PrintCapabilities

	DefaultPageSize() PageSetup

	Description() string

	HardMargins() (top float64, bottom float64, left float64, right float64, ok bool)

	HardMarginsForPaperSize(paperSize *PaperSize) (top float64, bottom float64, left float64, right float64, ok bool)

	IconName() string

	JobCount() int

	Location() string

	Name() string

	StateMessage() string

	HasDetailsPrinter() bool

	IsAcceptingJobsPrinter() bool

	IsActivePrinter() bool

	IsDefaultPrinter() bool

	IsPausedPrinter() bool

	IsVirtualPrinter() bool

	RequestDetailsPrinter()
}

// printer implements the Printer class.
type printer struct {
	gextras.Objector
}

// WrapPrinter wraps a GObject to the right type. It is
// primarily used internally.
func WrapPrinter(obj *externglib.Object) Printer {
	return printer{
		Objector: obj,
	}
}

func marshalPrinter(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapPrinter(obj), nil
}

func NewPrinter(name string, backend *PrintBackend, virtual_ bool) Printer {
	var _arg1 *C.char            // out
	var _arg2 *C.GtkPrintBackend // out
	var _arg3 C.gboolean         // out
	var _cret *C.GtkPrinter      // in

	_arg1 = (*C.char)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.GtkPrintBackend)(unsafe.Pointer(backend.Native()))
	if virtual_ {
		_arg3 = C.TRUE
	}

	_cret = C.gtk_printer_new(_arg1, _arg2, _arg3)

	var _printer Printer // out

	_printer = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(Printer)

	return _printer
}

func (p printer) AcceptsPDFPrinter() bool {
	var _arg0 *C.GtkPrinter // out
	var _cret C.gboolean    // in

	_arg0 = (*C.GtkPrinter)(unsafe.Pointer(p.Native()))

	_cret = C.gtk_printer_accepts_pdf(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (p printer) AcceptsPSPrinter() bool {
	var _arg0 *C.GtkPrinter // out
	var _cret C.gboolean    // in

	_arg0 = (*C.GtkPrinter)(unsafe.Pointer(p.Native()))

	_cret = C.gtk_printer_accepts_ps(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (a printer) ComparePrinter(b Printer) int {
	var _arg0 *C.GtkPrinter // out
	var _arg1 *C.GtkPrinter // out
	var _cret C.int         // in

	_arg0 = (*C.GtkPrinter)(unsafe.Pointer(a.Native()))
	_arg1 = (*C.GtkPrinter)(unsafe.Pointer(b.Native()))

	_cret = C.gtk_printer_compare(_arg0, _arg1)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (p printer) Backend() *PrintBackend {
	var _arg0 *C.GtkPrinter      // out
	var _cret *C.GtkPrintBackend // in

	_arg0 = (*C.GtkPrinter)(unsafe.Pointer(p.Native()))

	_cret = C.gtk_printer_get_backend(_arg0)

	var _printBackend *PrintBackend // out

	_printBackend = (*PrintBackend)(unsafe.Pointer(_cret))

	return _printBackend
}

func (p printer) Capabilities() PrintCapabilities {
	var _arg0 *C.GtkPrinter          // out
	var _cret C.GtkPrintCapabilities // in

	_arg0 = (*C.GtkPrinter)(unsafe.Pointer(p.Native()))

	_cret = C.gtk_printer_get_capabilities(_arg0)

	var _printCapabilities PrintCapabilities // out

	_printCapabilities = PrintCapabilities(_cret)

	return _printCapabilities
}

func (p printer) DefaultPageSize() PageSetup {
	var _arg0 *C.GtkPrinter   // out
	var _cret *C.GtkPageSetup // in

	_arg0 = (*C.GtkPrinter)(unsafe.Pointer(p.Native()))

	_cret = C.gtk_printer_get_default_page_size(_arg0)

	var _pageSetup PageSetup // out

	_pageSetup = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(PageSetup)

	return _pageSetup
}

func (p printer) Description() string {
	var _arg0 *C.GtkPrinter // out
	var _cret *C.char       // in

	_arg0 = (*C.GtkPrinter)(unsafe.Pointer(p.Native()))

	_cret = C.gtk_printer_get_description(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

func (p printer) HardMargins() (top float64, bottom float64, left float64, right float64, ok bool) {
	var _arg0 *C.GtkPrinter // out
	var _arg1 C.double      // in
	var _arg2 C.double      // in
	var _arg3 C.double      // in
	var _arg4 C.double      // in
	var _cret C.gboolean    // in

	_arg0 = (*C.GtkPrinter)(unsafe.Pointer(p.Native()))

	_cret = C.gtk_printer_get_hard_margins(_arg0, &_arg1, &_arg2, &_arg3, &_arg4)

	var _top float64    // out
	var _bottom float64 // out
	var _left float64   // out
	var _right float64  // out
	var _ok bool        // out

	_top = float64(_arg1)
	_bottom = float64(_arg2)
	_left = float64(_arg3)
	_right = float64(_arg4)
	if _cret != 0 {
		_ok = true
	}

	return _top, _bottom, _left, _right, _ok
}

func (p printer) HardMarginsForPaperSize(paperSize *PaperSize) (top float64, bottom float64, left float64, right float64, ok bool) {
	var _arg0 *C.GtkPrinter   // out
	var _arg1 *C.GtkPaperSize // out
	var _arg2 C.double        // in
	var _arg3 C.double        // in
	var _arg4 C.double        // in
	var _arg5 C.double        // in
	var _cret C.gboolean      // in

	_arg0 = (*C.GtkPrinter)(unsafe.Pointer(p.Native()))
	_arg1 = (*C.GtkPaperSize)(unsafe.Pointer(paperSize.Native()))

	_cret = C.gtk_printer_get_hard_margins_for_paper_size(_arg0, _arg1, &_arg2, &_arg3, &_arg4, &_arg5)

	var _top float64    // out
	var _bottom float64 // out
	var _left float64   // out
	var _right float64  // out
	var _ok bool        // out

	_top = float64(_arg2)
	_bottom = float64(_arg3)
	_left = float64(_arg4)
	_right = float64(_arg5)
	if _cret != 0 {
		_ok = true
	}

	return _top, _bottom, _left, _right, _ok
}

func (p printer) IconName() string {
	var _arg0 *C.GtkPrinter // out
	var _cret *C.char       // in

	_arg0 = (*C.GtkPrinter)(unsafe.Pointer(p.Native()))

	_cret = C.gtk_printer_get_icon_name(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

func (p printer) JobCount() int {
	var _arg0 *C.GtkPrinter // out
	var _cret C.int         // in

	_arg0 = (*C.GtkPrinter)(unsafe.Pointer(p.Native()))

	_cret = C.gtk_printer_get_job_count(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (p printer) Location() string {
	var _arg0 *C.GtkPrinter // out
	var _cret *C.char       // in

	_arg0 = (*C.GtkPrinter)(unsafe.Pointer(p.Native()))

	_cret = C.gtk_printer_get_location(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

func (p printer) Name() string {
	var _arg0 *C.GtkPrinter // out
	var _cret *C.char       // in

	_arg0 = (*C.GtkPrinter)(unsafe.Pointer(p.Native()))

	_cret = C.gtk_printer_get_name(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

func (p printer) StateMessage() string {
	var _arg0 *C.GtkPrinter // out
	var _cret *C.char       // in

	_arg0 = (*C.GtkPrinter)(unsafe.Pointer(p.Native()))

	_cret = C.gtk_printer_get_state_message(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

func (p printer) HasDetailsPrinter() bool {
	var _arg0 *C.GtkPrinter // out
	var _cret C.gboolean    // in

	_arg0 = (*C.GtkPrinter)(unsafe.Pointer(p.Native()))

	_cret = C.gtk_printer_has_details(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (p printer) IsAcceptingJobsPrinter() bool {
	var _arg0 *C.GtkPrinter // out
	var _cret C.gboolean    // in

	_arg0 = (*C.GtkPrinter)(unsafe.Pointer(p.Native()))

	_cret = C.gtk_printer_is_accepting_jobs(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (p printer) IsActivePrinter() bool {
	var _arg0 *C.GtkPrinter // out
	var _cret C.gboolean    // in

	_arg0 = (*C.GtkPrinter)(unsafe.Pointer(p.Native()))

	_cret = C.gtk_printer_is_active(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (p printer) IsDefaultPrinter() bool {
	var _arg0 *C.GtkPrinter // out
	var _cret C.gboolean    // in

	_arg0 = (*C.GtkPrinter)(unsafe.Pointer(p.Native()))

	_cret = C.gtk_printer_is_default(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (p printer) IsPausedPrinter() bool {
	var _arg0 *C.GtkPrinter // out
	var _cret C.gboolean    // in

	_arg0 = (*C.GtkPrinter)(unsafe.Pointer(p.Native()))

	_cret = C.gtk_printer_is_paused(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (p printer) IsVirtualPrinter() bool {
	var _arg0 *C.GtkPrinter // out
	var _cret C.gboolean    // in

	_arg0 = (*C.GtkPrinter)(unsafe.Pointer(p.Native()))

	_cret = C.gtk_printer_is_virtual(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (p printer) RequestDetailsPrinter() {
	var _arg0 *C.GtkPrinter // out

	_arg0 = (*C.GtkPrinter)(unsafe.Pointer(p.Native()))

	C.gtk_printer_request_details(_arg0)
}

type PrintBackend C.GtkPrintBackend

// WrapPrintBackend wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPrintBackend(ptr unsafe.Pointer) *PrintBackend {
	return (*PrintBackend)(ptr)
}

// Native returns the underlying C source pointer.
func (p *PrintBackend) Native() unsafe.Pointer {
	return unsafe.Pointer(p)
}
