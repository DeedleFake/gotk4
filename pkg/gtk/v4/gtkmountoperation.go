// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/gdk/v4"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_mount_operation_get_type()), F: marshalMountOperation},
	})
}

// MountOperation: `GtkMountOperation` is an implementation of
// `GMountOperation`.
//
// The functions and objects described here make working with GTK and GIO more
// convenient.
//
// `GtkMountOperation` is needed when mounting volumes: It is an implementation
// of `GMountOperation` that can be used with GIO functions for mounting volumes
// such as g_file_mount_enclosing_volume(), g_file_mount_mountable(),
// g_volume_mount(), g_mount_unmount_with_operation() and others.
//
// When necessary, `GtkMountOperation` shows dialogs to let the user enter
// passwords, ask questions or show processes blocking unmount.
type MountOperation interface {
	gio.MountOperation

	// AsMountOperation casts the class to the gio.MountOperation interface.
	AsMountOperation() gio.MountOperation

	// GetAnonymous: check to see whether the mount operation is being used for
	// an anonymous user.
	//
	// This method is inherited from gio.MountOperation
	GetAnonymous() bool
	// GetChoice gets a choice from the mount operation.
	//
	// This method is inherited from gio.MountOperation
	GetChoice() int
	// GetDomain gets the domain of the mount operation.
	//
	// This method is inherited from gio.MountOperation
	GetDomain() string
	// GetIsTcryptHiddenVolume: check to see whether the mount operation is
	// being used for a TCRYPT hidden volume.
	//
	// This method is inherited from gio.MountOperation
	GetIsTcryptHiddenVolume() bool
	// GetIsTcryptSystemVolume: check to see whether the mount operation is
	// being used for a TCRYPT system volume.
	//
	// This method is inherited from gio.MountOperation
	GetIsTcryptSystemVolume() bool
	// GetPassword gets a password from the mount operation.
	//
	// This method is inherited from gio.MountOperation
	GetPassword() string
	// GetPasswordSave gets the state of saving passwords for the mount
	// operation.
	//
	// This method is inherited from gio.MountOperation
	GetPasswordSave() gio.PasswordSave
	// GetPim gets a PIM from the mount operation.
	//
	// This method is inherited from gio.MountOperation
	GetPim() uint
	// GetUsername: get the user name from the mount operation.
	//
	// This method is inherited from gio.MountOperation
	GetUsername() string
	// Reply emits the Operation::reply signal.
	//
	// This method is inherited from gio.MountOperation
	Reply(result gio.MountOperationResult)
	// SetAnonymous sets the mount operation to use an anonymous user if
	// @anonymous is true.
	//
	// This method is inherited from gio.MountOperation
	SetAnonymous(anonymous bool)
	// SetChoice sets a default choice for the mount operation.
	//
	// This method is inherited from gio.MountOperation
	SetChoice(choice int)
	// SetDomain sets the mount operation's domain.
	//
	// This method is inherited from gio.MountOperation
	SetDomain(domain string)
	// SetIsTcryptHiddenVolume sets the mount operation to use a hidden volume
	// if @hidden_volume is true.
	//
	// This method is inherited from gio.MountOperation
	SetIsTcryptHiddenVolume(hiddenVolume bool)
	// SetIsTcryptSystemVolume sets the mount operation to use a system volume
	// if @system_volume is true.
	//
	// This method is inherited from gio.MountOperation
	SetIsTcryptSystemVolume(systemVolume bool)
	// SetPassword sets the mount operation's password to @password.
	//
	// This method is inherited from gio.MountOperation
	SetPassword(password string)
	// SetPasswordSave sets the state of saving passwords for the mount
	// operation.
	//
	// This method is inherited from gio.MountOperation
	SetPasswordSave(save gio.PasswordSave)
	// SetPim sets the mount operation's PIM to @pim.
	//
	// This method is inherited from gio.MountOperation
	SetPim(pim uint)
	// SetUsername sets the user name within @op to @username.
	//
	// This method is inherited from gio.MountOperation
	SetUsername(username string)

	// Display gets the display on which windows of the `GtkMountOperation` will
	// be shown.
	Display() gdk.Display
	// Parent gets the transient parent used by the `GtkMountOperation`.
	Parent() Window
	// IsShowing returns whether the `GtkMountOperation` is currently displaying
	// a window.
	IsShowing() bool
	// SetDisplay sets the display to show windows of the `GtkMountOperation`
	// on.
	SetDisplay(display gdk.Display)
	// SetParent sets the transient parent for windows shown by the
	// `GtkMountOperation`.
	SetParent(parent Window)
}

// mountOperation implements the MountOperation interface.
type mountOperation struct {
	*externglib.Object
}

var _ MountOperation = (*mountOperation)(nil)

// WrapMountOperation wraps a GObject to a type that implements
// interface MountOperation. It is primarily used internally.
func WrapMountOperation(obj *externglib.Object) MountOperation {
	return mountOperation{obj}
}

func marshalMountOperation(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapMountOperation(obj), nil
}

// NewMountOperation creates a new `GtkMountOperation`.
func NewMountOperation(parent Window) MountOperation {
	var _arg1 *C.GtkWindow       // out
	var _cret *C.GMountOperation // in

	_arg1 = (*C.GtkWindow)(unsafe.Pointer(parent.Native()))

	_cret = C.gtk_mount_operation_new(_arg1)

	var _mountOperation MountOperation // out

	_mountOperation = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(MountOperation)

	return _mountOperation
}

func (m mountOperation) AsMountOperation() gio.MountOperation {
	return gio.WrapMountOperation(gextras.InternObject(m))
}

func (o mountOperation) GetAnonymous() bool {
	return gio.WrapMountOperation(gextras.InternObject(o)).GetAnonymous()
}

func (o mountOperation) GetChoice() int {
	return gio.WrapMountOperation(gextras.InternObject(o)).GetChoice()
}

func (o mountOperation) GetDomain() string {
	return gio.WrapMountOperation(gextras.InternObject(o)).GetDomain()
}

func (o mountOperation) GetIsTcryptHiddenVolume() bool {
	return gio.WrapMountOperation(gextras.InternObject(o)).GetIsTcryptHiddenVolume()
}

func (o mountOperation) GetIsTcryptSystemVolume() bool {
	return gio.WrapMountOperation(gextras.InternObject(o)).GetIsTcryptSystemVolume()
}

func (o mountOperation) GetPassword() string {
	return gio.WrapMountOperation(gextras.InternObject(o)).GetPassword()
}

func (o mountOperation) GetPasswordSave() gio.PasswordSave {
	return gio.WrapMountOperation(gextras.InternObject(o)).GetPasswordSave()
}

func (o mountOperation) GetPim() uint {
	return gio.WrapMountOperation(gextras.InternObject(o)).GetPim()
}

func (o mountOperation) GetUsername() string {
	return gio.WrapMountOperation(gextras.InternObject(o)).GetUsername()
}

func (o mountOperation) Reply(result gio.MountOperationResult) {
	gio.WrapMountOperation(gextras.InternObject(o)).Reply(result)
}

func (o mountOperation) SetAnonymous(anonymous bool) {
	gio.WrapMountOperation(gextras.InternObject(o)).SetAnonymous(anonymous)
}

func (o mountOperation) SetChoice(choice int) {
	gio.WrapMountOperation(gextras.InternObject(o)).SetChoice(choice)
}

func (o mountOperation) SetDomain(domain string) {
	gio.WrapMountOperation(gextras.InternObject(o)).SetDomain(domain)
}

func (o mountOperation) SetIsTcryptHiddenVolume(hiddenVolume bool) {
	gio.WrapMountOperation(gextras.InternObject(o)).SetIsTcryptHiddenVolume(hiddenVolume)
}

func (o mountOperation) SetIsTcryptSystemVolume(systemVolume bool) {
	gio.WrapMountOperation(gextras.InternObject(o)).SetIsTcryptSystemVolume(systemVolume)
}

func (o mountOperation) SetPassword(password string) {
	gio.WrapMountOperation(gextras.InternObject(o)).SetPassword(password)
}

func (o mountOperation) SetPasswordSave(save gio.PasswordSave) {
	gio.WrapMountOperation(gextras.InternObject(o)).SetPasswordSave(save)
}

func (o mountOperation) SetPim(pim uint) {
	gio.WrapMountOperation(gextras.InternObject(o)).SetPim(pim)
}

func (o mountOperation) SetUsername(username string) {
	gio.WrapMountOperation(gextras.InternObject(o)).SetUsername(username)
}

func (o mountOperation) Display() gdk.Display {
	var _arg0 *C.GtkMountOperation // out
	var _cret *C.GdkDisplay        // in

	_arg0 = (*C.GtkMountOperation)(unsafe.Pointer(o.Native()))

	_cret = C.gtk_mount_operation_get_display(_arg0)

	var _display gdk.Display // out

	_display = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(gdk.Display)

	return _display
}

func (o mountOperation) Parent() Window {
	var _arg0 *C.GtkMountOperation // out
	var _cret *C.GtkWindow         // in

	_arg0 = (*C.GtkMountOperation)(unsafe.Pointer(o.Native()))

	_cret = C.gtk_mount_operation_get_parent(_arg0)

	var _window Window // out

	_window = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Window)

	return _window
}

func (o mountOperation) IsShowing() bool {
	var _arg0 *C.GtkMountOperation // out
	var _cret C.gboolean           // in

	_arg0 = (*C.GtkMountOperation)(unsafe.Pointer(o.Native()))

	_cret = C.gtk_mount_operation_is_showing(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (o mountOperation) SetDisplay(display gdk.Display) {
	var _arg0 *C.GtkMountOperation // out
	var _arg1 *C.GdkDisplay        // out

	_arg0 = (*C.GtkMountOperation)(unsafe.Pointer(o.Native()))
	_arg1 = (*C.GdkDisplay)(unsafe.Pointer(display.Native()))

	C.gtk_mount_operation_set_display(_arg0, _arg1)
}

func (o mountOperation) SetParent(parent Window) {
	var _arg0 *C.GtkMountOperation // out
	var _arg1 *C.GtkWindow         // out

	_arg0 = (*C.GtkMountOperation)(unsafe.Pointer(o.Native()))
	_arg1 = (*C.GtkWindow)(unsafe.Pointer(parent.Native()))

	C.gtk_mount_operation_set_parent(_arg0, _arg1)
}
