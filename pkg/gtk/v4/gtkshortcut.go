// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_shortcut_get_type()), F: marshalShortcut},
	})
}

// Shortcut: gtkShortcut is the low level object used for managing keyboard
// shortcuts.
//
// It contains a description of how to trigger the shortcut via a
// ShortcutTrigger and a way to activate the shortcut on a widget via
// ShortcutAction.
//
// The actual work is usually done via ShortcutController, which decides if and
// when to activate a shortcut. Using that controller directly however is rarely
// necessary as various higher level convenience APIs exist on Widgets that make
// it easier to use shortcuts in GTK.
//
// Shortcut does provide functionality to make it easy for users to work with
// shortcuts, either by providing informational strings for display purposes or
// by allowing shortcuts to be configured.
type Shortcut interface {
	gextras.Objector

	// Action gets the action that is activated by this shortcut.
	Action(s Shortcut)
	// Arguments gets the arguments that are passed when activating the
	// shortcut.
	Arguments(s Shortcut)
	// Trigger gets the trigger used to trigger @self.
	Trigger(s Shortcut)
	// SetAction sets the new action for @self to be @action.
	SetAction(s Shortcut, action ShortcutAction)
	// SetArguments sets the arguments to pass when activating the shortcut.
	SetArguments(s Shortcut, args *glib.Variant)
	// SetTrigger sets the new trigger for @self to be @trigger.
	SetTrigger(s Shortcut, trigger ShortcutTrigger)
}

// shortcut implements the Shortcut interface.
type shortcut struct {
	gextras.Objector
}

var _ Shortcut = (*shortcut)(nil)

// WrapShortcut wraps a GObject to the right type. It is
// primarily used internally.
func WrapShortcut(obj *externglib.Object) Shortcut {
	return Shortcut{
		Objector: obj,
	}
}

func marshalShortcut(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapShortcut(obj), nil
}

// NewShortcut constructs a class Shortcut.
func NewShortcut(trigger ShortcutTrigger, action ShortcutAction) {
	var arg1 *C.GtkShortcutTrigger
	var arg2 *C.GtkShortcutAction

	arg1 = (*C.GtkShortcutTrigger)(unsafe.Pointer(trigger.Native()))
	arg2 = (*C.GtkShortcutAction)(unsafe.Pointer(action.Native()))

	C.gtk_shortcut_new(arg1, arg2)
}

// Action gets the action that is activated by this shortcut.
func (s shortcut) Action(s Shortcut) {
	var arg0 *C.GtkShortcut

	arg0 = (*C.GtkShortcut)(unsafe.Pointer(s.Native()))

	C.gtk_shortcut_get_action(arg0)
}

// Arguments gets the arguments that are passed when activating the
// shortcut.
func (s shortcut) Arguments(s Shortcut) {
	var arg0 *C.GtkShortcut

	arg0 = (*C.GtkShortcut)(unsafe.Pointer(s.Native()))

	C.gtk_shortcut_get_arguments(arg0)
}

// Trigger gets the trigger used to trigger @self.
func (s shortcut) Trigger(s Shortcut) {
	var arg0 *C.GtkShortcut

	arg0 = (*C.GtkShortcut)(unsafe.Pointer(s.Native()))

	C.gtk_shortcut_get_trigger(arg0)
}

// SetAction sets the new action for @self to be @action.
func (s shortcut) SetAction(s Shortcut, action ShortcutAction) {
	var arg0 *C.GtkShortcut
	var arg1 *C.GtkShortcutAction

	arg0 = (*C.GtkShortcut)(unsafe.Pointer(s.Native()))
	arg1 = (*C.GtkShortcutAction)(unsafe.Pointer(action.Native()))

	C.gtk_shortcut_set_action(arg0, arg1)
}

// SetArguments sets the arguments to pass when activating the shortcut.
func (s shortcut) SetArguments(s Shortcut, args *glib.Variant) {
	var arg0 *C.GtkShortcut
	var arg1 *C.GVariant

	arg0 = (*C.GtkShortcut)(unsafe.Pointer(s.Native()))
	arg1 = (*C.GVariant)(unsafe.Pointer(args.Native()))

	C.gtk_shortcut_set_arguments(arg0, arg1)
}

// SetTrigger sets the new trigger for @self to be @trigger.
func (s shortcut) SetTrigger(s Shortcut, trigger ShortcutTrigger) {
	var arg0 *C.GtkShortcut
	var arg1 *C.GtkShortcutTrigger

	arg0 = (*C.GtkShortcut)(unsafe.Pointer(s.Native()))
	arg1 = (*C.GtkShortcutTrigger)(unsafe.Pointer(trigger.Native()))

	C.gtk_shortcut_set_trigger(arg0, arg1)
}
