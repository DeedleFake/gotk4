// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"github.com/diamondburned/gotk4/pkg/gio/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_slice_list_model_get_type()), F: marshalSliceListModel},
	})
}

// SliceListModel is a list model that takes a list model and presents a slice
// of that model.
//
// This is useful when implementing paging by setting the size to the number of
// elements per page and updating the offset whenever a different page is
// opened.
type SliceListModel interface {
	gextras.Objector
	gio.ListModel

	// Model gets the model that is currently being used or nil if none.
	Model(s SliceListModel)
	// Offset gets the offset set via gtk_slice_list_model_set_offset()
	Offset(s SliceListModel)
	// Size gets the size set via gtk_slice_list_model_set_size().
	Size(s SliceListModel)
	// SetModel sets the model to show a slice of. The model's item type must
	// conform to @self's item type.
	SetModel(s SliceListModel, model gio.ListModel)
	// SetOffset sets the offset into the original model for this slice.
	//
	// If the offset is too large for the sliced model, @self will end up empty.
	SetOffset(s SliceListModel, offset uint)
	// SetSize sets the maximum size. @self will never have more items than
	// @size.
	//
	// It can however have fewer items if the offset is too large or the model
	// sliced from doesn't have enough items.
	SetSize(s SliceListModel, size uint)
}

// sliceListModel implements the SliceListModel interface.
type sliceListModel struct {
	gextras.Objector
	gio.ListModel
}

var _ SliceListModel = (*sliceListModel)(nil)

// WrapSliceListModel wraps a GObject to the right type. It is
// primarily used internally.
func WrapSliceListModel(obj *externglib.Object) SliceListModel {
	return SliceListModel{
		Objector:      obj,
		gio.ListModel: gio.WrapListModel(obj),
	}
}

func marshalSliceListModel(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapSliceListModel(obj), nil
}

// NewSliceListModel constructs a class SliceListModel.
func NewSliceListModel(model gio.ListModel, offset uint, size uint) {
	var arg1 *C.GListModel
	var arg2 C.guint
	var arg3 C.guint

	arg1 = (*C.GListModel)(unsafe.Pointer(model.Native()))
	arg2 = C.guint(offset)
	arg3 = C.guint(size)

	C.gtk_slice_list_model_new(arg1, arg2, arg3)
}

// Model gets the model that is currently being used or nil if none.
func (s sliceListModel) Model(s SliceListModel) {
	var arg0 *C.GtkSliceListModel

	arg0 = (*C.GtkSliceListModel)(unsafe.Pointer(s.Native()))

	C.gtk_slice_list_model_get_model(arg0)
}

// Offset gets the offset set via gtk_slice_list_model_set_offset()
func (s sliceListModel) Offset(s SliceListModel) {
	var arg0 *C.GtkSliceListModel

	arg0 = (*C.GtkSliceListModel)(unsafe.Pointer(s.Native()))

	C.gtk_slice_list_model_get_offset(arg0)
}

// Size gets the size set via gtk_slice_list_model_set_size().
func (s sliceListModel) Size(s SliceListModel) {
	var arg0 *C.GtkSliceListModel

	arg0 = (*C.GtkSliceListModel)(unsafe.Pointer(s.Native()))

	C.gtk_slice_list_model_get_size(arg0)
}

// SetModel sets the model to show a slice of. The model's item type must
// conform to @self's item type.
func (s sliceListModel) SetModel(s SliceListModel, model gio.ListModel) {
	var arg0 *C.GtkSliceListModel
	var arg1 *C.GListModel

	arg0 = (*C.GtkSliceListModel)(unsafe.Pointer(s.Native()))
	arg1 = (*C.GListModel)(unsafe.Pointer(model.Native()))

	C.gtk_slice_list_model_set_model(arg0, arg1)
}

// SetOffset sets the offset into the original model for this slice.
//
// If the offset is too large for the sliced model, @self will end up empty.
func (s sliceListModel) SetOffset(s SliceListModel, offset uint) {
	var arg0 *C.GtkSliceListModel
	var arg1 C.guint

	arg0 = (*C.GtkSliceListModel)(unsafe.Pointer(s.Native()))
	arg1 = C.guint(offset)

	C.gtk_slice_list_model_set_offset(arg0, arg1)
}

// SetSize sets the maximum size. @self will never have more items than
// @size.
//
// It can however have fewer items if the offset is too large or the model
// sliced from doesn't have enough items.
func (s sliceListModel) SetSize(s SliceListModel, size uint) {
	var arg0 *C.GtkSliceListModel
	var arg1 C.guint

	arg0 = (*C.GtkSliceListModel)(unsafe.Pointer(s.Native()))
	arg1 = C.guint(size)

	C.gtk_slice_list_model_set_size(arg0, arg1)
}
