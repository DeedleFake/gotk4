// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/ptr"
	"github.com/diamondburned/gotk4/pkg/gdk/v4"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <stdbool.h>
// #include <gtk/gtk.h>
import "C"

// AcceleratorGetDefaultModMask gets the modifier mask.
//
// The modifier mask determines which modifiers are considered significant for
// keyboard accelerators. This includes all keyboard modifiers except for
// GDK_LOCK_MASK.
func AcceleratorGetDefaultModMask() gdk.ModifierType {
	var cret C.GdkModifierType
	var ret1 gdk.ModifierType

	cret = C.gtk_accelerator_get_default_mod_mask()

	ret1 = gdk.ModifierType(cret)

	return ret1
}

// AcceleratorGetLabel converts an accelerator keyval and modifier mask into a
// string which can be used to represent the accelerator to the user.
func AcceleratorGetLabel(acceleratorKey uint, acceleratorMods gdk.ModifierType) string {
	var arg1 C.guint
	var arg2 C.GdkModifierType

	arg1 = C.guint(acceleratorKey)
	arg2 = (C.GdkModifierType)(acceleratorMods)

	var cret *C.char
	var ret1 string

	cret = C.gtk_accelerator_get_label(acceleratorKey, acceleratorMods)

	ret1 = C.GoString(cret)
	defer C.free(unsafe.Pointer(cret))

	return ret1
}

// AcceleratorGetLabelWithKeycode converts an accelerator keyval and modifier
// mask into a (possibly translated) string that can be displayed to a user,
// similarly to gtk_accelerator_get_label(), but handling keycodes.
//
// This is only useful for system-level components, applications should use
// gtk_accelerator_parse() instead.
func AcceleratorGetLabelWithKeycode(display gdk.Display, acceleratorKey uint, keycode uint, acceleratorMods gdk.ModifierType) string {
	var arg1 *C.GdkDisplay
	var arg2 C.guint
	var arg3 C.guint
	var arg4 C.GdkModifierType

	arg1 = (*C.GdkDisplay)(unsafe.Pointer(display.Native()))
	arg2 = C.guint(acceleratorKey)
	arg3 = C.guint(keycode)
	arg4 = (C.GdkModifierType)(acceleratorMods)

	var cret *C.char
	var ret1 string

	cret = C.gtk_accelerator_get_label_with_keycode(display, acceleratorKey, keycode, acceleratorMods)

	ret1 = C.GoString(cret)
	defer C.free(unsafe.Pointer(cret))

	return ret1
}

// AcceleratorName converts an accelerator keyval and modifier mask into a
// string parseable by gtk_accelerator_parse(). For example, if you pass in
// K_KEY_q and K_CONTROL_MASK, this function returns “<Control>q”.
//
// If you need to display accelerators in the user interface, see
// gtk_accelerator_get_label().
func AcceleratorName(acceleratorKey uint, acceleratorMods gdk.ModifierType) string {
	var arg1 C.guint
	var arg2 C.GdkModifierType

	arg1 = C.guint(acceleratorKey)
	arg2 = (C.GdkModifierType)(acceleratorMods)

	var cret *C.char
	var ret1 string

	cret = C.gtk_accelerator_name(acceleratorKey, acceleratorMods)

	ret1 = C.GoString(cret)
	defer C.free(unsafe.Pointer(cret))

	return ret1
}

// AcceleratorNameWithKeycode converts an accelerator keyval and modifier mask
// into a string parseable by gtk_accelerator_parse_with_keycode(), similarly to
// gtk_accelerator_name() but handling keycodes. This is only useful for
// system-level components, applications should use gtk_accelerator_parse()
// instead.
func AcceleratorNameWithKeycode(display gdk.Display, acceleratorKey uint, keycode uint, acceleratorMods gdk.ModifierType) string {
	var arg1 *C.GdkDisplay
	var arg2 C.guint
	var arg3 C.guint
	var arg4 C.GdkModifierType

	arg1 = (*C.GdkDisplay)(unsafe.Pointer(display.Native()))
	arg2 = C.guint(acceleratorKey)
	arg3 = C.guint(keycode)
	arg4 = (C.GdkModifierType)(acceleratorMods)

	var cret *C.char
	var ret1 string

	cret = C.gtk_accelerator_name_with_keycode(display, acceleratorKey, keycode, acceleratorMods)

	ret1 = C.GoString(cret)
	defer C.free(unsafe.Pointer(cret))

	return ret1
}

// AcceleratorParse parses a string representing an accelerator. The format
// looks like “<Control>a” or “<Shift><Alt>F1”.
//
// The parser is fairly liberal and allows lower or upper case, and also
// abbreviations such as “<Ctl>” and “<Ctrl>”. Key names are parsed using
// gdk_keyval_from_name(). For character keys the name is not the symbol, but
// the lowercase name, e.g. one would use “<Ctrl>minus” instead of “<Ctrl>-”.
//
// If the parse fails, @accelerator_key and @accelerator_mods will be set to 0
// (zero).
func AcceleratorParse(accelerator string) (acceleratorKey uint, acceleratorMods gdk.ModifierType, ok bool) {
	var arg1 *C.char

	arg1 = (*C.char)(C.CString(accelerator))
	defer C.free(unsafe.Pointer(arg1))

	var arg2 C.guint
	var ret2 uint
	var arg3 C.GdkModifierType
	var ret3 *gdk.ModifierType
	var cret C.gboolean
	var ret3 bool

	cret = C.gtk_accelerator_parse(accelerator, &arg2, &arg3)

	*ret2 = C.guint(arg2)
	*ret3 = *gdk.ModifierType(arg3)
	ret3 = C.bool(cret) != C.false

	return ret2, ret3, ret3
}

// AcceleratorParseWithKeycode parses a string representing an accelerator,
// similarly to gtk_accelerator_parse() but handles keycodes as well. This is
// only useful for system-level components, applications should use
// gtk_accelerator_parse() instead.
//
// If @accelerator_codes is given and the result stored in it is non-nil, the
// result must be freed with g_free().
//
// If a keycode is present in the accelerator and no @accelerator_codes is
// given, the parse will fail.
//
// If the parse fails, @accelerator_key, @accelerator_mods and
// @accelerator_codes will be set to 0 (zero).
func AcceleratorParseWithKeycode(accelerator string, display gdk.Display) (acceleratorKey uint, acceleratorCodes []uint, acceleratorMods gdk.ModifierType, ok bool) {
	var arg1 *C.char
	var arg2 *C.GdkDisplay

	arg1 = (*C.char)(C.CString(accelerator))
	defer C.free(unsafe.Pointer(arg1))
	arg2 = (*C.GdkDisplay)(unsafe.Pointer(display.Native()))

	var arg3 C.guint
	var ret3 uint
	var arg4 **C.guint
	var ret4 []uint
	var arg5 C.GdkModifierType
	var ret5 *gdk.ModifierType
	var cret C.gboolean
	var ret4 bool

	cret = C.gtk_accelerator_parse_with_keycode(accelerator, display, &arg3, &arg4, &arg5)

	*ret3 = C.guint(arg3)
	{
		var length int
		for p := arg4; *p != 0; p = (**C.guint)(ptr.Add(unsafe.Pointer(p), unsafe.Sizeof(int(0)))) {
			length++
			if length < 0 {
				panic(`length overflow`)
			}
		}

		ret4 = make([]uint, length)
		for i := uintptr(0); i < uintptr(length); i += unsafe.Sizeof(int(0)) {
			src := (*C.guint)(ptr.Add(unsafe.Pointer(arg4), i))
			ret4[i] = *C.guint(src)
		}
	}
	*ret5 = *gdk.ModifierType(arg5)
	ret4 = C.bool(cret) != C.false

	return ret3, ret4, ret5, ret4
}

// AcceleratorValid determines whether a given keyval and modifier mask
// constitute a valid keyboard accelerator. For example, the K_KEY_a keyval plus
// K_CONTROL_MASK is valid - this is a “Ctrl+a” accelerator. But, you can't, for
// instance, use the K_KEY_Control_L keyval as an accelerator.
func AcceleratorValid(keyval uint, modifiers gdk.ModifierType) bool {
	var arg1 C.guint
	var arg2 C.GdkModifierType

	arg1 = C.guint(keyval)
	arg2 = (C.GdkModifierType)(modifiers)

	var cret C.gboolean
	var ret1 bool

	cret = C.gtk_accelerator_valid(keyval, modifiers)

	ret1 = C.bool(cret) != C.false

	return ret1
}
