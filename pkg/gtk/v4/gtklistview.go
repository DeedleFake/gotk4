// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_list_view_get_type()), F: marshalListView},
	})
}

// ListView: `GtkListView` presents a large dynamic list of items.
//
// `GtkListView` uses its factory to generate one row widget for each visible
// item and shows them in a linear display, either vertically or horizontally.
//
// The [property@Gtk.ListView:show-separators] property offers a simple way to
// display separators between the rows.
//
// `GtkListView` allows the user to select items according to the selection
// characteristics of the model. For models that allow multiple selected items,
// it is possible to turn on _rubberband selection_, using
// [property@Gtk.ListView:enable-rubberband].
//
// If you need multiple columns with headers, see [class@Gtk.ColumnView].
//
// To learn more about the list widget framework, see the overview
// (section-list-widget.html).
//
// An example of using `GtkListView`: “`c static void setup_listitem_cb
// (GtkListItemFactory *factory, GtkListItem *list_item) { GtkWidget *image;
//
//    image = gtk_image_new ();
//    gtk_image_set_icon_size (GTK_IMAGE (image), GTK_ICON_SIZE_LARGE);
//    gtk_list_item_set_child (list_item, image);
//
// }
//
// static void bind_listitem_cb (GtkListItemFactory *factory, GtkListItem
// *list_item) { GtkWidget *image; GAppInfo *app_info;
//
//    image = gtk_list_item_get_child (list_item);
//    app_info = gtk_list_item_get_item (list_item);
//    gtk_image_set_from_gicon (GTK_IMAGE (image), g_app_info_get_icon (app_info));
//
// }
//
// static void activate_cb (GtkListView *list, guint position, gpointer unused)
// { GAppInfo *app_info;
//
//    app_info = g_list_model_get_item (G_LIST_MODEL (gtk_list_view_get_model (list)), position);
//    g_app_info_launch (app_info, NULL, NULL, NULL);
//    g_object_unref (app_info);
//
// }
//
// ...
//
//    model = create_application_list ();
//
//    factory = gtk_signal_list_item_factory_new ();
//    g_signal_connect (factory, "setup", G_CALLBACK (setup_listitem_cb), NULL);
//    g_signal_connect (factory, "bind", G_CALLBACK (bind_listitem_cb), NULL);
//
//    list = gtk_list_view_new (GTK_SELECTION_MODEL (gtk_single_selection_new (model)), factory);
//
//    g_signal_connect (list, "activate", G_CALLBACK (activate_cb), NULL);
//
//    gtk_scrolled_window_set_child (GTK_SCROLLED_WINDOW (sw), list);
//
// “`
//
//
// CSS nodes
//
// “` listview[.separators][.rich-list][.navigation-sidebar][.data-table] ├──
// row │ ├── row │ ┊ ╰── [rubberband] “`
//
// `GtkListView` uses a single CSS node named listview. It may carry the
// .separators style class, when `GtkListView`:show-separators property is set.
// Each child widget uses a single CSS node named row. For rubberband selection,
// a node with name rubberband is used.
//
// The main listview node may also carry style classes to select the style of
// list presentation (ListContainers.html#list-styles): .rich-list,
// .navigation-sidebar or .data-table.
//
//
// Accessibility
//
// `GtkListView` uses the GTK_ACCESSIBLE_ROLE_LIST role, and the list items use
// the GTK_ACCESSIBLE_ROLE_LIST_ITEM role.
type ListView interface {
	ListBase

	EnableRubberband() bool

	Factory() ListItemFactory

	ShowSeparators() bool

	SingleClickActivate() bool

	SetEnableRubberbandListView(enableRubberband bool)

	SetFactoryListView(factory ListItemFactory)

	SetShowSeparatorsListView(showSeparators bool)

	SetSingleClickActivateListView(singleClickActivate bool)
}

// listView implements the ListView class.
type listView struct {
	ListBase
}

// WrapListView wraps a GObject to the right type. It is
// primarily used internally.
func WrapListView(obj *externglib.Object) ListView {
	return listView{
		ListBase: WrapListBase(obj),
	}
}

func marshalListView(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapListView(obj), nil
}

func (s listView) EnableRubberband() bool {
	var _arg0 *C.GtkListView // out
	var _cret C.gboolean     // in

	_arg0 = (*C.GtkListView)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_list_view_get_enable_rubberband(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (s listView) Factory() ListItemFactory {
	var _arg0 *C.GtkListView        // out
	var _cret *C.GtkListItemFactory // in

	_arg0 = (*C.GtkListView)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_list_view_get_factory(_arg0)

	var _listItemFactory ListItemFactory // out

	_listItemFactory = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(ListItemFactory)

	return _listItemFactory
}

func (s listView) ShowSeparators() bool {
	var _arg0 *C.GtkListView // out
	var _cret C.gboolean     // in

	_arg0 = (*C.GtkListView)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_list_view_get_show_separators(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (s listView) SingleClickActivate() bool {
	var _arg0 *C.GtkListView // out
	var _cret C.gboolean     // in

	_arg0 = (*C.GtkListView)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_list_view_get_single_click_activate(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (s listView) SetEnableRubberbandListView(enableRubberband bool) {
	var _arg0 *C.GtkListView // out
	var _arg1 C.gboolean     // out

	_arg0 = (*C.GtkListView)(unsafe.Pointer(s.Native()))
	if enableRubberband {
		_arg1 = C.TRUE
	}

	C.gtk_list_view_set_enable_rubberband(_arg0, _arg1)
}

func (s listView) SetFactoryListView(factory ListItemFactory) {
	var _arg0 *C.GtkListView        // out
	var _arg1 *C.GtkListItemFactory // out

	_arg0 = (*C.GtkListView)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GtkListItemFactory)(unsafe.Pointer(factory.Native()))

	C.gtk_list_view_set_factory(_arg0, _arg1)
}

func (s listView) SetShowSeparatorsListView(showSeparators bool) {
	var _arg0 *C.GtkListView // out
	var _arg1 C.gboolean     // out

	_arg0 = (*C.GtkListView)(unsafe.Pointer(s.Native()))
	if showSeparators {
		_arg1 = C.TRUE
	}

	C.gtk_list_view_set_show_separators(_arg0, _arg1)
}

func (s listView) SetSingleClickActivateListView(singleClickActivate bool) {
	var _arg0 *C.GtkListView // out
	var _arg1 C.gboolean     // out

	_arg0 = (*C.GtkListView)(unsafe.Pointer(s.Native()))
	if singleClickActivate {
		_arg1 = C.TRUE
	}

	C.gtk_list_view_set_single_click_activate(_arg0, _arg1)
}

func (s listView) AccessibleRole() AccessibleRole {
	return WrapAccessible(gextras.InternObject(s)).AccessibleRole()
}

func (s listView) ResetProperty(property AccessibleProperty) {
	WrapAccessible(gextras.InternObject(s)).ResetProperty(property)
}

func (s listView) ResetRelation(relation AccessibleRelation) {
	WrapAccessible(gextras.InternObject(s)).ResetRelation(relation)
}

func (s listView) ResetState(state AccessibleState) {
	WrapAccessible(gextras.InternObject(s)).ResetState(state)
}

func (s listView) UpdatePropertyValue(properties []AccessibleProperty, values []externglib.Value) {
	WrapAccessible(gextras.InternObject(s)).UpdatePropertyValue(properties, values)
}

func (s listView) UpdateRelationValue(relations []AccessibleRelation, values []externglib.Value) {
	WrapAccessible(gextras.InternObject(s)).UpdateRelationValue(relations, values)
}

func (s listView) UpdateStateValue(states []AccessibleState, values []externglib.Value) {
	WrapAccessible(gextras.InternObject(s)).UpdateStateValue(states, values)
}

func (b listView) BuildableID() string {
	return WrapBuildable(gextras.InternObject(b)).BuildableID()
}

func (o listView) Orientation() Orientation {
	return WrapOrientable(gextras.InternObject(o)).Orientation()
}

func (o listView) SetOrientation(orientation Orientation) {
	WrapOrientable(gextras.InternObject(o)).SetOrientation(orientation)
}

func (s listView) Border() (Border, bool) {
	return WrapScrollable(gextras.InternObject(s)).Border()
}

func (s listView) HAdjustment() Adjustment {
	return WrapScrollable(gextras.InternObject(s)).HAdjustment()
}

func (s listView) HScrollPolicy() ScrollablePolicy {
	return WrapScrollable(gextras.InternObject(s)).HScrollPolicy()
}

func (s listView) VAdjustment() Adjustment {
	return WrapScrollable(gextras.InternObject(s)).VAdjustment()
}

func (s listView) VScrollPolicy() ScrollablePolicy {
	return WrapScrollable(gextras.InternObject(s)).VScrollPolicy()
}

func (s listView) SetHAdjustment(hadjustment Adjustment) {
	WrapScrollable(gextras.InternObject(s)).SetHAdjustment(hadjustment)
}

func (s listView) SetHScrollPolicy(policy ScrollablePolicy) {
	WrapScrollable(gextras.InternObject(s)).SetHScrollPolicy(policy)
}

func (s listView) SetVAdjustment(vadjustment Adjustment) {
	WrapScrollable(gextras.InternObject(s)).SetVAdjustment(vadjustment)
}

func (s listView) SetVScrollPolicy(policy ScrollablePolicy) {
	WrapScrollable(gextras.InternObject(s)).SetVScrollPolicy(policy)
}
