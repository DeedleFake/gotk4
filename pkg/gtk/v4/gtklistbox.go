// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/internal/box"
	"github.com/diamondburned/gotk4/internal/gextras"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <stdbool.h>
// #include <glib-object.h>
// #include <gtk/gtk.h>
//
// extern GtkWidget* gotk4_ListBoxCreateWidgetFunc(gpointer _0, gpointer _1);
// extern gboolean gotk4_ListBoxFilterFunc(GtkListBoxRow* _0, gpointer _1);
// extern void gotk4_ListBoxForeachFunc(GtkListBox* _0, GtkListBoxRow* _1, gpointer _2);
// extern int gotk4_ListBoxSortFunc(GtkListBoxRow* _0, GtkListBoxRow* _1, gpointer _2);
// extern void gotk4_ListBoxUpdateHeaderFunc(GtkListBoxRow* _0, GtkListBoxRow* _1, gpointer _2);
// extern void callbackDelete(gpointer);
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_list_box_row_get_type()), F: marshalListBoxRow},
	})
}

//export callbackDelete
func callbackDelete(ptr C.gpointer) {
	box.Delete(box.Callback, uintptr(ptr))
}

// ListBoxCreateWidgetFunc: called for list boxes that are bound to a
// `GListModel` with gtk_list_box_bind_model() for each item that gets added to
// the model.
type ListBoxCreateWidgetFunc func(item gextras.Objector) Widget

//export gotk4_ListBoxCreateWidgetFunc
func gotk4_ListBoxCreateWidgetFunc(arg0 C.gpointer, arg1 C.gpointer) *C.GtkWidget {
	v := box.Get(uintptr(arg1))
	if v == nil {
		panic(`callback not found`)
	}

	var item gextras.Objector

	item = gextras.CastObject(externglib.Take(unsafe.Pointer(arg0.Native()))).(gextras.Objector)

	widget := v.(ListBoxCreateWidgetFunc)(item)
}

// ListBoxFilterFunc: will be called whenever the row changes or is added and
// lets you control if the row should be visible or not.
type ListBoxFilterFunc func(row ListBoxRow) bool

//export gotk4_ListBoxFilterFunc
func gotk4_ListBoxFilterFunc(arg0 *C.GtkListBoxRow, arg1 C.gpointer) C.gboolean {
	v := box.Get(uintptr(arg1))
	if v == nil {
		panic(`callback not found`)
	}

	var row ListBoxRow

	row = gextras.CastObject(externglib.Take(unsafe.Pointer(arg0.Native()))).(ListBoxRow)

	ok := v.(ListBoxFilterFunc)(row)
}

// ListBoxForeachFunc: a function used by gtk_list_box_selected_foreach().
//
// It will be called on every selected child of the @box.
type ListBoxForeachFunc func(box ListBox, row ListBoxRow)

//export gotk4_ListBoxForeachFunc
func gotk4_ListBoxForeachFunc(arg0 *C.GtkListBox, arg1 *C.GtkListBoxRow, arg2 C.gpointer) {
	v := box.Get(uintptr(arg2))
	if v == nil {
		panic(`callback not found`)
	}

	var box ListBox
	var row ListBoxRow

	box = gextras.CastObject(externglib.Take(unsafe.Pointer(arg0.Native()))).(ListBox)

	row = gextras.CastObject(externglib.Take(unsafe.Pointer(arg1.Native()))).(ListBoxRow)

	v.(ListBoxForeachFunc)(box, row)
}

// ListBoxSortFunc: compare two rows to determine which should be first.
type ListBoxSortFunc func(row1 ListBoxRow, row2 ListBoxRow) int

//export gotk4_ListBoxSortFunc
func gotk4_ListBoxSortFunc(arg0 *C.GtkListBoxRow, arg1 *C.GtkListBoxRow, arg2 C.gpointer) C.int {
	v := box.Get(uintptr(arg2))
	if v == nil {
		panic(`callback not found`)
	}

	var row1 ListBoxRow
	var row2 ListBoxRow

	row1 = gextras.CastObject(externglib.Take(unsafe.Pointer(arg0.Native()))).(ListBoxRow)

	row2 = gextras.CastObject(externglib.Take(unsafe.Pointer(arg1.Native()))).(ListBoxRow)

	gint := v.(ListBoxSortFunc)(row1, row2)
}

// ListBoxUpdateHeaderFunc: whenever @row changes or which row is before @row
// changes this is called, which lets you update the header on @row.
//
// You may remove or set a new one via [method@Gtk.ListBoxRow.set_header] or
// just change the state of the current header widget.
type ListBoxUpdateHeaderFunc func(row ListBoxRow, before ListBoxRow)

//export gotk4_ListBoxUpdateHeaderFunc
func gotk4_ListBoxUpdateHeaderFunc(arg0 *C.GtkListBoxRow, arg1 *C.GtkListBoxRow, arg2 C.gpointer) {
	v := box.Get(uintptr(arg2))
	if v == nil {
		panic(`callback not found`)
	}

	var row ListBoxRow
	var before ListBoxRow

	row = gextras.CastObject(externglib.Take(unsafe.Pointer(arg0.Native()))).(ListBoxRow)

	before = gextras.CastObject(externglib.Take(unsafe.Pointer(arg1.Native()))).(ListBoxRow)

	v.(ListBoxUpdateHeaderFunc)(row, before)
}

// ListBoxRow: `GtkListBoxRow` is the kind of widget that can be added to a
// `GtkListBox`.
type ListBoxRow interface {
	Widget
	Accessible
	Actionable
	Buildable
	ConstraintTarget

	// Changed marks @row as changed, causing any state that depends on this to
	// be updated.
	//
	// This affects sorting, filtering and headers.
	//
	// Note that calls to this method must be in sync with the data used for the
	// row functions. For instance, if the list is mirroring some external data
	// set, and *two* rows changed in the external data set then when you call
	// gtk_list_box_row_changed() on the first row the sort function must only
	// read the new data for the first of the two changed rows, otherwise the
	// resorting of the rows will be wrong.
	//
	// This generally means that if you don’t fully control the data model you
	// have to duplicate the data that affects the listbox row functions into
	// the row widgets themselves. Another alternative is to call
	// [method@Gtk.ListBox.invalidate_sort] on any model change, but that is
	// more expensive.
	Changed()
	// Activatable gets whether the row is activatable.
	Activatable() bool
	// Child gets the child widget of @row.
	Child() Widget
	// Header returns the current header of the @row.
	//
	// This can be used in a [callback@Gtk.ListBoxUpdateHeaderFunc] to see if
	// there is a header set already, and if so to update the state of it.
	Header() Widget
	// Index gets the current index of the @row in its `GtkListBox` container.
	Index() int
	// Selectable gets whether the row can be selected.
	Selectable() bool
	// IsSelected returns whether the child is currently selected in its
	// `GtkListBox` container.
	IsSelected() bool
	// SetActivatable: set whether the row is activatable.
	SetActivatable(activatable bool)
	// SetChild sets the child widget of @self.
	SetChild(child Widget)
	// SetHeader sets the current header of the @row.
	//
	// This is only allowed to be called from a
	// [callback@Gtk.ListBoxUpdateHeaderFunc]. It will replace any existing
	// header in the row, and be shown in front of the row in the listbox.
	SetHeader(header Widget)
	// SetSelectable: set whether the row can be selected.
	SetSelectable(selectable bool)
}

// listBoxRow implements the ListBoxRow interface.
type listBoxRow struct {
	Widget
	Accessible
	Actionable
	Buildable
	ConstraintTarget
}

var _ ListBoxRow = (*listBoxRow)(nil)

// WrapListBoxRow wraps a GObject to the right type. It is
// primarily used internally.
func WrapListBoxRow(obj *externglib.Object) ListBoxRow {
	return ListBoxRow{
		Widget:           WrapWidget(obj),
		Accessible:       WrapAccessible(obj),
		Actionable:       WrapActionable(obj),
		Buildable:        WrapBuildable(obj),
		ConstraintTarget: WrapConstraintTarget(obj),
	}
}

func marshalListBoxRow(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapListBoxRow(obj), nil
}

// NewListBoxRow constructs a class ListBoxRow.
func NewListBoxRow() ListBoxRow {
	ret := C.gtk_list_box_row_new()

	var ret0 ListBoxRow

	ret0 = gextras.CastObject(externglib.Take(unsafe.Pointer(ret.Native()))).(ListBoxRow)

	return ret0
}

// Changed marks @row as changed, causing any state that depends on this to
// be updated.
//
// This affects sorting, filtering and headers.
//
// Note that calls to this method must be in sync with the data used for the
// row functions. For instance, if the list is mirroring some external data
// set, and *two* rows changed in the external data set then when you call
// gtk_list_box_row_changed() on the first row the sort function must only
// read the new data for the first of the two changed rows, otherwise the
// resorting of the rows will be wrong.
//
// This generally means that if you don’t fully control the data model you
// have to duplicate the data that affects the listbox row functions into
// the row widgets themselves. Another alternative is to call
// [method@Gtk.ListBox.invalidate_sort] on any model change, but that is
// more expensive.
func (r listBoxRow) Changed() {
	var arg0 *C.GtkListBoxRow

	arg0 = (*C.GtkListBoxRow)(r.Native())

	C.gtk_list_box_row_changed(arg0)
}

// Activatable gets whether the row is activatable.
func (r listBoxRow) Activatable() bool {
	var arg0 *C.GtkListBoxRow

	arg0 = (*C.GtkListBoxRow)(r.Native())

	ret := C.gtk_list_box_row_get_activatable(arg0)

	var ret0 bool

	ret0 = C.bool(ret) != 0

	return ret0
}

// Child gets the child widget of @row.
func (r listBoxRow) Child() Widget {
	var arg0 *C.GtkListBoxRow

	arg0 = (*C.GtkListBoxRow)(r.Native())

	ret := C.gtk_list_box_row_get_child(arg0)

	var ret0 Widget

	ret0 = gextras.CastObject(externglib.Take(unsafe.Pointer(ret.Native()))).(Widget)

	return ret0
}

// Header returns the current header of the @row.
//
// This can be used in a [callback@Gtk.ListBoxUpdateHeaderFunc] to see if
// there is a header set already, and if so to update the state of it.
func (r listBoxRow) Header() Widget {
	var arg0 *C.GtkListBoxRow

	arg0 = (*C.GtkListBoxRow)(r.Native())

	ret := C.gtk_list_box_row_get_header(arg0)

	var ret0 Widget

	ret0 = gextras.CastObject(externglib.Take(unsafe.Pointer(ret.Native()))).(Widget)

	return ret0
}

// Index gets the current index of the @row in its `GtkListBox` container.
func (r listBoxRow) Index() int {
	var arg0 *C.GtkListBoxRow

	arg0 = (*C.GtkListBoxRow)(r.Native())

	ret := C.gtk_list_box_row_get_index(arg0)

	var ret0 int

	ret0 = int(ret)

	return ret0
}

// Selectable gets whether the row can be selected.
func (r listBoxRow) Selectable() bool {
	var arg0 *C.GtkListBoxRow

	arg0 = (*C.GtkListBoxRow)(r.Native())

	ret := C.gtk_list_box_row_get_selectable(arg0)

	var ret0 bool

	ret0 = C.bool(ret) != 0

	return ret0
}

// IsSelected returns whether the child is currently selected in its
// `GtkListBox` container.
func (r listBoxRow) IsSelected() bool {
	var arg0 *C.GtkListBoxRow

	arg0 = (*C.GtkListBoxRow)(r.Native())

	ret := C.gtk_list_box_row_is_selected(arg0)

	var ret0 bool

	ret0 = C.bool(ret) != 0

	return ret0
}

// SetActivatable: set whether the row is activatable.
func (r listBoxRow) SetActivatable(activatable bool) {
	var arg0 *C.GtkListBoxRow
	var arg1 C.gboolean

	arg0 = (*C.GtkListBoxRow)(r.Native())
	if activatable {
		arg1 = C.TRUE
	}

	C.gtk_list_box_row_set_activatable(arg0, arg1)
}

// SetChild sets the child widget of @self.
func (r listBoxRow) SetChild(child Widget) {
	var arg0 *C.GtkListBoxRow
	var arg1 *C.GtkWidget

	arg0 = (*C.GtkListBoxRow)(r.Native())
	arg1 = (*C.GtkWidget)(child.Native())

	C.gtk_list_box_row_set_child(arg0, arg1)
}

// SetHeader sets the current header of the @row.
//
// This is only allowed to be called from a
// [callback@Gtk.ListBoxUpdateHeaderFunc]. It will replace any existing
// header in the row, and be shown in front of the row in the listbox.
func (r listBoxRow) SetHeader(header Widget) {
	var arg0 *C.GtkListBoxRow
	var arg1 *C.GtkWidget

	arg0 = (*C.GtkListBoxRow)(r.Native())
	arg1 = (*C.GtkWidget)(header.Native())

	C.gtk_list_box_row_set_header(arg0, arg1)
}

// SetSelectable: set whether the row can be selected.
func (r listBoxRow) SetSelectable(selectable bool) {
	var arg0 *C.GtkListBoxRow
	var arg1 C.gboolean

	arg0 = (*C.GtkListBoxRow)(r.Native())
	if selectable {
		arg1 = C.TRUE
	}

	C.gtk_list_box_row_set_selectable(arg0, arg1)
}
