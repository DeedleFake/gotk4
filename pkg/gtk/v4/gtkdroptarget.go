// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"reflect"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	"github.com/diamondburned/gotk4/pkg/gdk/v4"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <stdbool.h>
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_drop_target_get_type()), F: marshalDropTarget},
	})
}

// DropTarget: `GtkDropTarget` is an event controller to receive Drag-and-Drop
// operations.
//
// The most basic way to use a `GtkDropTarget` to receive drops on a widget is
// to create it via [ctor@Gtk.DropTarget.new], passing in the `GType` of the
// data you want to receive and connect to the [signal@Gtk.DropTarget::drop]
// signal to receive the data:
//
// “`c static gboolean on_drop (GtkDropTarget *target, const GValue *value,
// double x, double y, gpointer data) { MyWidget *self = data;
//
//    // Call the appropriate setter depending on the type of data
//    // that we received
//    if (G_VALUE_HOLDS (value, G_TYPE_FILE))
//      my_widget_set_file (self, g_value_get_object (value));
//    else if (G_VALUE_HOLDS (value, GDK_TYPE_PIXBUF))
//      my_widget_set_pixbuf (self, g_value_get_object (value));
//    else
//      return FALSE;
//
//    return TRUE;
//
// }
//
// static void my_widget_init (MyWidget *self) { GtkDropTarget *target =
// gtk_drop_target_new (G_TYPE_INVALID, GDK_ACTION_COPY);
//
//    // This widget accepts two types of drop types: GFile objects
//    // and GdkPixbuf objects
//    gtk_drop_target_set_gtypes (target, (GTypes [2]) {
//      G_TYPE_FILE,
//      GDK_TYPE_PIXBUF,
//    }, 2);
//
//    gtk_widget_add_controller (GTK_WIDGET (self), GTK_EVENT_CONTROLLER (target));
//
// } “`
//
// `GtkDropTarget` supports more options, such as:
//
//    * rejecting potential drops via the [signal@Gtk.DropTarget::accept] signal
//      and the [method@Gtk.DropTarget.reject] function to let other drop
//      targets handle the drop
//    * tracking an ongoing drag operation before the drop via the
//      [signal@Gtk.DropTarget::enter], [signal@Gtk.DropTarget::motion] and
//      [signal@Gtk.DropTarget::leave] signals
//    * configuring how to receive data by setting the
//      [property@Gtk.DropTarget:preload] property and listening for its
//      availability via the [property@Gtk.DropTarget:value] property
//
// However, `GtkDropTarget` is ultimately modeled in a synchronous way and only
// supports data transferred via `GType`. If you want full control over an
// ongoing drop, the [class@Gtk.DropTargetAsync] object gives you this ability.
//
// While a pointer is dragged over the drop target's widget and the drop has not
// been rejected, that widget will receive the GTK_STATE_FLAG_DROP_ACTIVE state,
// which can be used to style the widget.
//
// If you are not interested in receiving the drop, but just want to update UI
// state during a Drag-and-Drop operation (e.g. switching tabs), you can use
// [class@Gtk.DropControllerMotion].
type DropTarget interface {
	EventController

	// Actions gets the actions that this drop target supports.
	Actions() gdk.DragAction
	// Drop gets the currently handled drop operation.
	//
	// If no drop operation is going on, nil is returned.
	Drop() gdk.Drop
	// Formats gets the data formats that this drop target accepts.
	//
	// If the result is nil, all formats are expected to be supported.
	Formats() *gdk.ContentFormats
	// GTypes gets the list of supported `GTypes` for @self.
	//
	// If no type have been set, nil will be returned.
	GTypes() (nTypes uint, gTypes []externglib.Type)
	// Preload gets whether data should be preloaded on hover.
	Preload() bool
	// Value gets the current drop data, as a `GValue`.
	Value() *externglib.Value
	// Reject rejects the ongoing drop operation.
	//
	// If no drop operation is ongoing, i.e when [property@Gtk.DropTarget:drop]
	// is nil, this function does nothing.
	//
	// This function should be used when delaying the decision on whether to
	// accept a drag or not until after reading the data.
	Reject()
	// SetActions sets the actions that this drop target supports.
	SetActions(actions gdk.DragAction)
	// SetGTypes sets the supported `GTypes` for this drop target.
	SetGTypes(types []externglib.Type)
	// SetPreload sets whether data should be preloaded on hover.
	SetPreload(preload bool)
}

// dropTarget implements the DropTarget interface.
type dropTarget struct {
	EventController
}

var _ DropTarget = (*dropTarget)(nil)

// WrapDropTarget wraps a GObject to the right type. It is
// primarily used internally.
func WrapDropTarget(obj *externglib.Object) DropTarget {
	return DropTarget{
		EventController: WrapEventController(obj),
	}
}

func marshalDropTarget(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapDropTarget(obj), nil
}

// NewDropTarget constructs a class DropTarget.
func NewDropTarget(typ externglib.Type, actions gdk.DragAction) DropTarget {
	var arg1 C.GType
	var arg2 C.GdkDragAction

	arg1 = C.GType(typ)
	arg2 = (C.GdkDragAction)(actions)

	ret := C.gtk_drop_target_new(arg1, arg2)

	var ret0 DropTarget

	ret0 = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(ret.Native()))).(DropTarget)

	return ret0
}

// Actions gets the actions that this drop target supports.
func (s dropTarget) Actions() gdk.DragAction {
	var arg0 *C.GtkDropTarget

	arg0 = (*C.GtkDropTarget)(s.Native())

	ret := C.gtk_drop_target_get_actions(arg0)

	var ret0 gdk.DragAction

	ret0 = gdk.DragAction(ret)

	return ret0
}

// Drop gets the currently handled drop operation.
//
// If no drop operation is going on, nil is returned.
func (s dropTarget) Drop() gdk.Drop {
	var arg0 *C.GtkDropTarget

	arg0 = (*C.GtkDropTarget)(s.Native())

	ret := C.gtk_drop_target_get_drop(arg0)

	var ret0 gdk.Drop

	ret0 = gextras.CastObject(externglib.Take(unsafe.Pointer(ret.Native()))).(gdk.Drop)

	return ret0
}

// Formats gets the data formats that this drop target accepts.
//
// If the result is nil, all formats are expected to be supported.
func (s dropTarget) Formats() *gdk.ContentFormats {
	var arg0 *C.GtkDropTarget

	arg0 = (*C.GtkDropTarget)(s.Native())

	ret := C.gtk_drop_target_get_formats(arg0)

	var ret0 *gdk.ContentFormats

	{
		ret0 = gdk.WrapContentFormats(unsafe.Pointer(ret))
		runtime.SetFinalizer(ret0, func(v *gdk.ContentFormats) {
			C.free(unsafe.Pointer(v.Native()))
		})
	}

	return ret0
}

// GTypes gets the list of supported `GTypes` for @self.
//
// If no type have been set, nil will be returned.
func (s dropTarget) GTypes() (nTypes uint, gTypes []externglib.Type) {
	var arg0 *C.GtkDropTarget
	var arg1 *C.gsize // out

	arg0 = (*C.GtkDropTarget)(s.Native())

	ret := C.gtk_drop_target_get_gtypes(arg0, &arg1)

	var ret0 uint
	var ret1 []externglib.Type

	ret0 = uint(arg1)

	{
		ret1 = make([]externglib.Type, arg1)
		for i := 0; i < uintptr(arg1); i++ {
			src := (C.GType)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + i))
			ret1[i] = externglib.Type(src)
		}
	}

	return ret0, ret1
}

// Preload gets whether data should be preloaded on hover.
func (s dropTarget) Preload() bool {
	var arg0 *C.GtkDropTarget

	arg0 = (*C.GtkDropTarget)(s.Native())

	ret := C.gtk_drop_target_get_preload(arg0)

	var ret0 bool

	ret0 = C.bool(ret) != C.false

	return ret0
}

// Value gets the current drop data, as a `GValue`.
func (s dropTarget) Value() *externglib.Value {
	var arg0 *C.GtkDropTarget

	arg0 = (*C.GtkDropTarget)(s.Native())

	ret := C.gtk_drop_target_get_value(arg0)

	var ret0 *externglib.Value

	ret0 = externglib.ValueFromNative(unsafe.Pointer(ret))

	return ret0
}

// Reject rejects the ongoing drop operation.
//
// If no drop operation is ongoing, i.e when [property@Gtk.DropTarget:drop]
// is nil, this function does nothing.
//
// This function should be used when delaying the decision on whether to
// accept a drag or not until after reading the data.
func (s dropTarget) Reject() {
	var arg0 *C.GtkDropTarget

	arg0 = (*C.GtkDropTarget)(s.Native())

	C.gtk_drop_target_reject(arg0)
}

// SetActions sets the actions that this drop target supports.
func (s dropTarget) SetActions(actions gdk.DragAction) {
	var arg0 *C.GtkDropTarget
	var arg1 C.GdkDragAction

	arg0 = (*C.GtkDropTarget)(s.Native())
	arg1 = (C.GdkDragAction)(actions)

	C.gtk_drop_target_set_actions(arg0, arg1)
}

// SetGTypes sets the supported `GTypes` for this drop target.
func (s dropTarget) SetGTypes(types []externglib.Type) {
	var arg0 *C.GtkDropTarget
	var arg1 *C.GType
	var arg2 C.gsize

	arg0 = (*C.GtkDropTarget)(s.Native())
	{
		var dst []C.GType
		ptr := C.malloc(C.sizeof_GType * len(types))
		sliceHeader := (*reflect.SliceHeader)(unsafe.Pointer(&dst))
		sliceHeader.Data = uintptr(unsafe.Pointer(ptr))
		sliceHeader.Len = len(types)
		sliceHeader.Cap = len(types)
		defer C.free(unsafe.Pointer(ptr))

		for i := 0; i < len(types); i++ {
			src := types[i]
			dst[i] = C.GType(src)
		}

		arg1 = (*C.GType)(unsafe.Pointer(ptr))
		arg2 = len(types)
	}

	C.gtk_drop_target_set_gtypes(arg0, arg1, arg2)
}

// SetPreload sets whether data should be preloaded on hover.
func (s dropTarget) SetPreload(preload bool) {
	var arg0 *C.GtkDropTarget
	var arg1 C.gboolean

	arg0 = (*C.GtkDropTarget)(s.Native())
	if preload {
		arg1 = C.TRUE
	}

	C.gtk_drop_target_set_preload(arg0, arg1)
}
