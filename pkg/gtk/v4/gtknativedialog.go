// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_native_dialog_get_type()), F: marshalNativeDialog},
	})
}

// NativeDialog: native dialogs are platform dialogs that don't use `GtkDialog`.
//
// They are used in order to integrate better with a platform, by looking the
// same as other native applications and supporting platform specific features.
//
// The [class@Gtk.Dialog] functions cannot be used on such objects, but we need
// a similar API in order to drive them. The `GtkNativeDialog` object is an API
// that allows you to do this. It allows you to set various common properties on
// the dialog, as well as show and hide it and get a
// [signal@Gtk.NativeDialog::response] signal when the user finished with the
// dialog.
//
// Note that unlike `GtkDialog`, `GtkNativeDialog` objects are not toplevel
// widgets, and GTK does not keep them alive. It is your responsibility to keep
// a reference until you are done with the object.
type NativeDialog interface {
	gextras.Objector

	DestroyNativeDialog()

	Modal() bool

	Title() string

	TransientFor() Window

	Visible() bool

	HideNativeDialog()

	SetModalNativeDialog(modal bool)

	SetTitleNativeDialog(title string)

	SetTransientForNativeDialog(parent Window)

	ShowNativeDialog()
}

// nativeDialog implements the NativeDialog class.
type nativeDialog struct {
	gextras.Objector
}

// WrapNativeDialog wraps a GObject to the right type. It is
// primarily used internally.
func WrapNativeDialog(obj *externglib.Object) NativeDialog {
	return nativeDialog{
		Objector: obj,
	}
}

func marshalNativeDialog(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapNativeDialog(obj), nil
}

func (s nativeDialog) DestroyNativeDialog() {
	var _arg0 *C.GtkNativeDialog // out

	_arg0 = (*C.GtkNativeDialog)(unsafe.Pointer(s.Native()))

	C.gtk_native_dialog_destroy(_arg0)
}

func (s nativeDialog) Modal() bool {
	var _arg0 *C.GtkNativeDialog // out
	var _cret C.gboolean         // in

	_arg0 = (*C.GtkNativeDialog)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_native_dialog_get_modal(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (s nativeDialog) Title() string {
	var _arg0 *C.GtkNativeDialog // out
	var _cret *C.char            // in

	_arg0 = (*C.GtkNativeDialog)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_native_dialog_get_title(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

func (s nativeDialog) TransientFor() Window {
	var _arg0 *C.GtkNativeDialog // out
	var _cret *C.GtkWindow       // in

	_arg0 = (*C.GtkNativeDialog)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_native_dialog_get_transient_for(_arg0)

	var _window Window // out

	_window = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Window)

	return _window
}

func (s nativeDialog) Visible() bool {
	var _arg0 *C.GtkNativeDialog // out
	var _cret C.gboolean         // in

	_arg0 = (*C.GtkNativeDialog)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_native_dialog_get_visible(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (s nativeDialog) HideNativeDialog() {
	var _arg0 *C.GtkNativeDialog // out

	_arg0 = (*C.GtkNativeDialog)(unsafe.Pointer(s.Native()))

	C.gtk_native_dialog_hide(_arg0)
}

func (s nativeDialog) SetModalNativeDialog(modal bool) {
	var _arg0 *C.GtkNativeDialog // out
	var _arg1 C.gboolean         // out

	_arg0 = (*C.GtkNativeDialog)(unsafe.Pointer(s.Native()))
	if modal {
		_arg1 = C.TRUE
	}

	C.gtk_native_dialog_set_modal(_arg0, _arg1)
}

func (s nativeDialog) SetTitleNativeDialog(title string) {
	var _arg0 *C.GtkNativeDialog // out
	var _arg1 *C.char            // out

	_arg0 = (*C.GtkNativeDialog)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.char)(C.CString(title))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_native_dialog_set_title(_arg0, _arg1)
}

func (s nativeDialog) SetTransientForNativeDialog(parent Window) {
	var _arg0 *C.GtkNativeDialog // out
	var _arg1 *C.GtkWindow       // out

	_arg0 = (*C.GtkNativeDialog)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GtkWindow)(unsafe.Pointer(parent.Native()))

	C.gtk_native_dialog_set_transient_for(_arg0, _arg1)
}

func (s nativeDialog) ShowNativeDialog() {
	var _arg0 *C.GtkNativeDialog // out

	_arg0 = (*C.GtkNativeDialog)(unsafe.Pointer(s.Native()))

	C.gtk_native_dialog_show(_arg0)
}
