// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: glib-2.0 gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_native_dialog_get_type()), F: marshalNativeDialog},
	})
}

// NativeDialog: native dialogs are platform dialogs that don't use `GtkDialog`.
//
// They are used in order to integrate better with a platform, by looking the
// same as other native applications and supporting platform specific features.
//
// The [class@Gtk.Dialog] functions cannot be used on such objects, but we need
// a similar API in order to drive them. The `GtkNativeDialog` object is an API
// that allows you to do this. It allows you to set various common properties on
// the dialog, as well as show and hide it and get a
// [signal@Gtk.NativeDialog::response] signal when the user finished with the
// dialog.
//
// Note that unlike `GtkDialog`, `GtkNativeDialog` objects are not toplevel
// widgets, and GTK does not keep them alive. It is your responsibility to keep
// a reference until you are done with the object.
type NativeDialog interface {
	gextras.Objector

	// Destroy destroys a dialog.
	//
	// When a dialog is destroyed, it will break any references it holds to
	// other objects.
	//
	// If it is visible it will be hidden and any underlying window system
	// resources will be destroyed.
	//
	// Note that this does not release any reference to the object (as opposed
	// to destroying a `GtkWindow`) because there is no reference from the
	// windowing system to the `GtkNativeDialog`.
	Destroy()
	// Modal returns whether the dialog is modal.
	Modal() bool
	// Title gets the title of the `GtkNativeDialog`.
	Title() string
	// Visible determines whether the dialog is visible.
	Visible() bool
	// Hide hides the dialog if it is visible, aborting any interaction.
	//
	// Once this is called the [signal@Gtk.NativeDialog::response] signal will
	// *not* be emitted until after the next call to
	// [method@Gtk.NativeDialog.show].
	//
	// If the dialog is not visible this does nothing.
	Hide()
	// SetModal sets a dialog modal or non-modal.
	//
	// Modal dialogs prevent interaction with other windows in the same
	// application. To keep modal dialogs on top of main application windows,
	// use [method@Gtk.NativeDialog.set_transient_for] to make the dialog
	// transient for the parent; most window managers will then disallow
	// lowering the dialog below the parent.
	SetModal(modal bool)
	// SetTitle sets the title of the `GtkNativeDialog.`
	SetTitle(title string)
	// SetTransientFor: dialog windows should be set transient for the main
	// application window they were spawned from.
	//
	// This allows window managers to e.g. keep the dialog on top of the main
	// window, or center the dialog over the main window.
	//
	// Passing nil for @parent unsets the current transient window.
	SetTransientFor(parent Window)
	// Show shows the dialog on the display.
	//
	// When the user accepts the state of the dialog the dialog will be
	// automatically hidden and the [signal@Gtk.NativeDialog::response] signal
	// will be emitted.
	//
	// Multiple calls while the dialog is visible will be ignored.
	Show()
}

// nativeDialog implements the NativeDialog class.
type nativeDialog struct {
	gextras.Objector
}

var _ NativeDialog = (*nativeDialog)(nil)

// WrapNativeDialog wraps a GObject to the right type. It is
// primarily used internally.
func WrapNativeDialog(obj *externglib.Object) NativeDialog {
	return nativeDialog{
		Objector: obj,
	}
}

func marshalNativeDialog(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapNativeDialog(obj), nil
}

// Destroy destroys a dialog.
//
// When a dialog is destroyed, it will break any references it holds to
// other objects.
//
// If it is visible it will be hidden and any underlying window system
// resources will be destroyed.
//
// Note that this does not release any reference to the object (as opposed
// to destroying a `GtkWindow`) because there is no reference from the
// windowing system to the `GtkNativeDialog`.
func (s nativeDialog) Destroy() {
	var _arg0 *C.GtkNativeDialog // out

	_arg0 = (*C.GtkNativeDialog)(unsafe.Pointer(s.Native()))

	C.gtk_native_dialog_destroy(_arg0)
}

// Modal returns whether the dialog is modal.
func (s nativeDialog) Modal() bool {
	var _arg0 *C.GtkNativeDialog // out

	_arg0 = (*C.GtkNativeDialog)(unsafe.Pointer(s.Native()))

	var _cret C.gboolean // in

	_cret = C.gtk_native_dialog_get_modal(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Title gets the title of the `GtkNativeDialog`.
func (s nativeDialog) Title() string {
	var _arg0 *C.GtkNativeDialog // out

	_arg0 = (*C.GtkNativeDialog)(unsafe.Pointer(s.Native()))

	var _cret *C.char // in

	_cret = C.gtk_native_dialog_get_title(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

// Visible determines whether the dialog is visible.
func (s nativeDialog) Visible() bool {
	var _arg0 *C.GtkNativeDialog // out

	_arg0 = (*C.GtkNativeDialog)(unsafe.Pointer(s.Native()))

	var _cret C.gboolean // in

	_cret = C.gtk_native_dialog_get_visible(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Hide hides the dialog if it is visible, aborting any interaction.
//
// Once this is called the [signal@Gtk.NativeDialog::response] signal will
// *not* be emitted until after the next call to
// [method@Gtk.NativeDialog.show].
//
// If the dialog is not visible this does nothing.
func (s nativeDialog) Hide() {
	var _arg0 *C.GtkNativeDialog // out

	_arg0 = (*C.GtkNativeDialog)(unsafe.Pointer(s.Native()))

	C.gtk_native_dialog_hide(_arg0)
}

// SetModal sets a dialog modal or non-modal.
//
// Modal dialogs prevent interaction with other windows in the same
// application. To keep modal dialogs on top of main application windows,
// use [method@Gtk.NativeDialog.set_transient_for] to make the dialog
// transient for the parent; most window managers will then disallow
// lowering the dialog below the parent.
func (s nativeDialog) SetModal(modal bool) {
	var _arg0 *C.GtkNativeDialog // out
	var _arg1 C.gboolean         // out

	_arg0 = (*C.GtkNativeDialog)(unsafe.Pointer(s.Native()))
	if modal {
		_arg1 = C.TRUE
	}

	C.gtk_native_dialog_set_modal(_arg0, _arg1)
}

// SetTitle sets the title of the `GtkNativeDialog.`
func (s nativeDialog) SetTitle(title string) {
	var _arg0 *C.GtkNativeDialog // out
	var _arg1 *C.char            // out

	_arg0 = (*C.GtkNativeDialog)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.char)(C.CString(title))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_native_dialog_set_title(_arg0, _arg1)
}

// SetTransientFor: dialog windows should be set transient for the main
// application window they were spawned from.
//
// This allows window managers to e.g. keep the dialog on top of the main
// window, or center the dialog over the main window.
//
// Passing nil for @parent unsets the current transient window.
func (s nativeDialog) SetTransientFor(parent Window) {
	var _arg0 *C.GtkNativeDialog // out
	var _arg1 *C.GtkWindow       // out

	_arg0 = (*C.GtkNativeDialog)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GtkWindow)(unsafe.Pointer(parent.Native()))

	C.gtk_native_dialog_set_transient_for(_arg0, _arg1)
}

// Show shows the dialog on the display.
//
// When the user accepts the state of the dialog the dialog will be
// automatically hidden and the [signal@Gtk.NativeDialog::response] signal
// will be emitted.
//
// Multiple calls while the dialog is visible will be ignored.
func (s nativeDialog) Show() {
	var _arg0 *C.GtkNativeDialog // out

	_arg0 = (*C.GtkNativeDialog)(unsafe.Pointer(s.Native()))

	C.gtk_native_dialog_show(_arg0)
}
