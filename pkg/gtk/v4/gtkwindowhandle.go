// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_window_handle_get_type()), F: marshalWindowHandle},
	})
}

// WindowHandle: `GtkWindowHandle` is a titlebar area widget.
//
// When added into a window, it can be dragged to move the window, and handles
// right click, double click and middle click as expected of a titlebar.
//
//
// CSS nodes
//
// `GtkWindowHandle` has a single CSS node with the name `windowhandle`.
//
//
// Accessibility
//
// `GtkWindowHandle` uses the GTK_ACCESSIBLE_ROLE_GROUP role.
type WindowHandle interface {
	Widget

	// Child:
	Child() Widget
	// SetChildWindowHandle:
	SetChildWindowHandle(child Widget)
}

// windowHandle implements the WindowHandle class.
type windowHandle struct {
	Widget
}

// WrapWindowHandle wraps a GObject to the right type. It is
// primarily used internally.
func WrapWindowHandle(obj *externglib.Object) WindowHandle {
	return windowHandle{
		Widget: WrapWidget(obj),
	}
}

func marshalWindowHandle(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapWindowHandle(obj), nil
}

// NewWindowHandle:
func NewWindowHandle() WindowHandle {
	var _cret *C.GtkWidget // in

	_cret = C.gtk_window_handle_new()

	var _windowHandle WindowHandle // out

	_windowHandle = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(WindowHandle)

	return _windowHandle
}

func (s windowHandle) Child() Widget {
	var _arg0 *C.GtkWindowHandle // out
	var _cret *C.GtkWidget       // in

	_arg0 = (*C.GtkWindowHandle)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_window_handle_get_child(_arg0)

	var _widget Widget // out

	_widget = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Widget)

	return _widget
}

func (s windowHandle) SetChildWindowHandle(child Widget) {
	var _arg0 *C.GtkWindowHandle // out
	var _arg1 *C.GtkWidget       // out

	_arg0 = (*C.GtkWindowHandle)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(child.Native()))

	C.gtk_window_handle_set_child(_arg0, _arg1)
}

func (s windowHandle) AccessibleRole() AccessibleRole {
	return WrapAccessible(gextras.InternObject(s)).AccessibleRole()
}

func (s windowHandle) ResetProperty(property AccessibleProperty) {
	WrapAccessible(gextras.InternObject(s)).ResetProperty(property)
}

func (s windowHandle) ResetRelation(relation AccessibleRelation) {
	WrapAccessible(gextras.InternObject(s)).ResetRelation(relation)
}

func (s windowHandle) ResetState(state AccessibleState) {
	WrapAccessible(gextras.InternObject(s)).ResetState(state)
}

func (s windowHandle) UpdatePropertyValue(properties []AccessibleProperty, values []externglib.Value) {
	WrapAccessible(gextras.InternObject(s)).UpdatePropertyValue(properties, values)
}

func (s windowHandle) UpdateRelationValue(relations []AccessibleRelation, values []externglib.Value) {
	WrapAccessible(gextras.InternObject(s)).UpdateRelationValue(relations, values)
}

func (s windowHandle) UpdateStateValue(states []AccessibleState, values []externglib.Value) {
	WrapAccessible(gextras.InternObject(s)).UpdateStateValue(states, values)
}

func (b windowHandle) BuildableID() string {
	return WrapBuildable(gextras.InternObject(b)).BuildableID()
}
