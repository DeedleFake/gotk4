// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_window_handle_get_type()), F: marshalWindowHandler},
	})
}

// WindowHandler describes WindowHandle's methods.
type WindowHandler interface {
	// Child gets the child widget of @self.
	Child() *Widget
	// SetChild sets the child widget of @self.
	SetChild(child Widgeter)
}

// WindowHandle: `GtkWindowHandle` is a titlebar area widget.
//
// When added into a window, it can be dragged to move the window, and handles
// right click, double click and middle click as expected of a titlebar.
//
//
// CSS nodes
//
// `GtkWindowHandle` has a single CSS node with the name `windowhandle`.
//
//
// Accessibility
//
// `GtkWindowHandle` uses the GTK_ACCESSIBLE_ROLE_GROUP role.
type WindowHandle struct {
	Widget
}

var (
	_ WindowHandler   = (*WindowHandle)(nil)
	_ gextras.Nativer = (*WindowHandle)(nil)
)

func wrapWindowHandle(obj *externglib.Object) *WindowHandle {
	return &WindowHandle{
		Widget: Widget{
			InitiallyUnowned: externglib.InitiallyUnowned{
				Object: obj,
			},
			Accessible: Accessible{
				Object: obj,
			},
			Buildable: Buildable{
				Object: obj,
			},
			ConstraintTarget: ConstraintTarget{
				Object: obj,
			},
		},
	}
}

func marshalWindowHandler(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapWindowHandle(obj), nil
}

// NewWindowHandle creates a new `GtkWindowHandle`.
func NewWindowHandle() *WindowHandle {
	var _cret *C.GtkWidget // in

	_cret = C.gtk_window_handle_new()

	var _windowHandle *WindowHandle // out

	_windowHandle = wrapWindowHandle(externglib.Take(unsafe.Pointer(_cret)))

	return _windowHandle
}

// Child gets the child widget of @self.
func (self *WindowHandle) Child() *Widget {
	var _arg0 *C.GtkWindowHandle // out
	var _cret *C.GtkWidget       // in

	_arg0 = (*C.GtkWindowHandle)(unsafe.Pointer(self.Native()))

	_cret = C.gtk_window_handle_get_child(_arg0)

	var _widget *Widget // out

	_widget = wrapWidget(externglib.Take(unsafe.Pointer(_cret)))

	return _widget
}

// SetChild sets the child widget of @self.
func (self *WindowHandle) SetChild(child Widgeter) {
	var _arg0 *C.GtkWindowHandle // out
	var _arg1 *C.GtkWidget       // out

	_arg0 = (*C.GtkWindowHandle)(unsafe.Pointer(self.Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer((child).(gextras.Nativer).Native()))

	C.gtk_window_handle_set_child(_arg0, _arg1)
}
