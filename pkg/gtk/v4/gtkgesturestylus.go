// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/gdk/v4"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_gesture_stylus_get_type()), F: marshalGestureStylus},
	})
}

// GestureStylus: `GtkGestureStylus` is a `GtkGesture` specific to stylus input.
//
// The provided signals just relay the basic information of the stylus events.
type GestureStylus interface {
	gextras.Objector

	// Axis returns the current value for the requested @axis.
	//
	// This function must be called from the handler of one of the
	// [signal@Gtk.GestureStylus::down], [signal@Gtk.GestureStylus::motion],
	// [signal@Gtk.GestureStylus::up] or [signal@Gtk.GestureStylus::proximity]
	// signals.
	Axis(axis gdk.AxisUse) (float64, bool)
	// DeviceTool returns the `GdkDeviceTool` currently driving input through
	// this gesture.
	//
	// This function must be called from the handler of one of the
	// [signal@Gtk.GestureStylus::down], [signal@Gtk.GestureStylus::motion],
	// [signal@Gtk.GestureStylus::up] or [signal@Gtk.GestureStylus::proximity]
	// signals.
	DeviceTool() gdk.DeviceTool
}

// GestureStylusClass implements the GestureStylus interface.
type GestureStylusClass struct {
	GestureSingleClass
}

var _ GestureStylus = (*GestureStylusClass)(nil)

func wrapGestureStylus(obj *externglib.Object) GestureStylus {
	return &GestureStylusClass{
		GestureSingleClass: GestureSingleClass{
			GestureClass: GestureClass{
				EventControllerClass: EventControllerClass{
					Object: obj,
				},
			},
		},
	}
}

func marshalGestureStylus(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapGestureStylus(obj), nil
}

// NewGestureStylus creates a new `GtkGestureStylus`.
func NewGestureStylus() GestureStylus {
	var _cret *C.GtkGesture // in

	_cret = C.gtk_gesture_stylus_new()

	var _gestureStylus GestureStylus // out

	_gestureStylus = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(GestureStylus)

	return _gestureStylus
}

// Axis returns the current value for the requested @axis.
//
// This function must be called from the handler of one of the
// [signal@Gtk.GestureStylus::down], [signal@Gtk.GestureStylus::motion],
// [signal@Gtk.GestureStylus::up] or [signal@Gtk.GestureStylus::proximity]
// signals.
func (g *GestureStylusClass) Axis(axis gdk.AxisUse) (float64, bool) {
	var _arg0 *C.GtkGestureStylus // out
	var _arg1 C.GdkAxisUse        // out
	var _arg2 C.double            // in
	var _cret C.gboolean          // in

	_arg0 = (*C.GtkGestureStylus)(unsafe.Pointer(g.Native()))
	_arg1 = C.GdkAxisUse(axis)

	_cret = C.gtk_gesture_stylus_get_axis(_arg0, _arg1, &_arg2)

	var _value float64 // out
	var _ok bool       // out

	_value = float64(_arg2)
	if _cret != 0 {
		_ok = true
	}

	return _value, _ok
}

// DeviceTool returns the `GdkDeviceTool` currently driving input through this
// gesture.
//
// This function must be called from the handler of one of the
// [signal@Gtk.GestureStylus::down], [signal@Gtk.GestureStylus::motion],
// [signal@Gtk.GestureStylus::up] or [signal@Gtk.GestureStylus::proximity]
// signals.
func (g *GestureStylusClass) DeviceTool() gdk.DeviceTool {
	var _arg0 *C.GtkGestureStylus // out
	var _cret *C.GdkDeviceTool    // in

	_arg0 = (*C.GtkGestureStylus)(unsafe.Pointer(g.Native()))

	_cret = C.gtk_gesture_stylus_get_device_tool(_arg0)

	var _deviceTool gdk.DeviceTool // out

	_deviceTool = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(gdk.DeviceTool)

	return _deviceTool
}
