// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	"github.com/diamondburned/gotk4/pkg/gdk/v4"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <stdbool.h>
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_gesture_stylus_get_type()), F: marshalGestureStylus},
	})
}

// GestureStylus: `GtkGestureStylus` is a `GtkGesture` specific to stylus input.
//
// The provided signals just relay the basic information of the stylus events.
type GestureStylus interface {
	GestureSingle

	// Axis returns the current value for the requested @axis.
	//
	// This function must be called from the handler of one of the
	// [signal@Gtk.GestureStylus::down], [signal@Gtk.GestureStylus::motion],
	// [signal@Gtk.GestureStylus::up] or [signal@Gtk.GestureStylus::proximity]
	// signals.
	Axis(axis gdk.AxisUse) (value float64, ok bool)
	// Backlog returns the accumulated backlog of tracking information.
	//
	// By default, GTK will limit rate of input events. On stylus input where
	// accuracy of strokes is paramount, this function returns the accumulated
	// coordinate/timing state before the emission of the current
	// [Gtk.GestureStylus::motion] signal.
	//
	// This function may only be called within a
	// [signal@Gtk.GestureStylus::motion] signal handler, the state given in
	// this signal and obtainable through [method@Gtk.GestureStylus.get_axis]
	// express the latest (most up-to-date) state in motion history.
	//
	// The @backlog is provided in chronological order.
	Backlog() (backlog []*gdk.TimeCoord, nElems uint, ok bool)
	// DeviceTool returns the `GdkDeviceTool` currently driving input through
	// this gesture.
	//
	// This function must be called from the handler of one of the
	// [signal@Gtk.GestureStylus::down], [signal@Gtk.GestureStylus::motion],
	// [signal@Gtk.GestureStylus::up] or [signal@Gtk.GestureStylus::proximity]
	// signals.
	DeviceTool() gdk.DeviceTool
}

// gestureStylus implements the GestureStylus interface.
type gestureStylus struct {
	GestureSingle
}

var _ GestureStylus = (*gestureStylus)(nil)

// WrapGestureStylus wraps a GObject to the right type. It is
// primarily used internally.
func WrapGestureStylus(obj *externglib.Object) GestureStylus {
	return GestureStylus{
		GestureSingle: WrapGestureSingle(obj),
	}
}

func marshalGestureStylus(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapGestureStylus(obj), nil
}

// NewGestureStylus constructs a class GestureStylus.
func NewGestureStylus() GestureStylus {
	ret := C.gtk_gesture_stylus_new()

	var ret0 GestureStylus

	ret0 = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(ret.Native()))).(GestureStylus)

	return ret0
}

// Axis returns the current value for the requested @axis.
//
// This function must be called from the handler of one of the
// [signal@Gtk.GestureStylus::down], [signal@Gtk.GestureStylus::motion],
// [signal@Gtk.GestureStylus::up] or [signal@Gtk.GestureStylus::proximity]
// signals.
func (g gestureStylus) Axis(axis gdk.AxisUse) (value float64, ok bool) {
	var arg0 *C.GtkGestureStylus
	var arg1 C.GdkAxisUse
	var arg2 *C.double // out

	arg0 = (*C.GtkGestureStylus)(g.Native())
	arg1 = (C.GdkAxisUse)(axis)

	ret := C.gtk_gesture_stylus_get_axis(arg0, arg1, &arg2)

	var ret0 float64
	var ret1 bool

	ret0 = float64(arg2)

	ret1 = C.bool(ret) != C.false

	return ret0, ret1
}

// Backlog returns the accumulated backlog of tracking information.
//
// By default, GTK will limit rate of input events. On stylus input where
// accuracy of strokes is paramount, this function returns the accumulated
// coordinate/timing state before the emission of the current
// [Gtk.GestureStylus::motion] signal.
//
// This function may only be called within a
// [signal@Gtk.GestureStylus::motion] signal handler, the state given in
// this signal and obtainable through [method@Gtk.GestureStylus.get_axis]
// express the latest (most up-to-date) state in motion history.
//
// The @backlog is provided in chronological order.
func (g gestureStylus) Backlog() (backlog []*gdk.TimeCoord, nElems uint, ok bool) {
	var arg0 *C.GtkGestureStylus
	var arg1 **C.GdkTimeCoord // out
	var arg2 *C.guint         // out

	arg0 = (*C.GtkGestureStylus)(g.Native())

	ret := C.gtk_gesture_stylus_get_backlog(arg0, &arg1, &arg2)

	var ret0 []*gdk.TimeCoord
	var ret1 uint
	var ret2 bool

	{
		ret0 = make([]*gdk.TimeCoord, arg2)
		for i := 0; i < uintptr(arg2); i++ {
			src := (*C.GdkTimeCoord)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + i))
			{
				ret0[i] = gdk.WrapTimeCoord(unsafe.Pointer(src))
				runtime.SetFinalizer(ret0[i], func(v *gdk.TimeCoord) {
					C.free(unsafe.Pointer(v.Native()))
				})
			}
		}
	}

	ret1 = uint(arg2)

	ret2 = C.bool(ret) != C.false

	return ret0, ret1, ret2
}

// DeviceTool returns the `GdkDeviceTool` currently driving input through
// this gesture.
//
// This function must be called from the handler of one of the
// [signal@Gtk.GestureStylus::down], [signal@Gtk.GestureStylus::motion],
// [signal@Gtk.GestureStylus::up] or [signal@Gtk.GestureStylus::proximity]
// signals.
func (g gestureStylus) DeviceTool() gdk.DeviceTool {
	var arg0 *C.GtkGestureStylus

	arg0 = (*C.GtkGestureStylus)(g.Native())

	ret := C.gtk_gesture_stylus_get_device_tool(arg0)

	var ret0 gdk.DeviceTool

	ret0 = gextras.CastObject(externglib.Take(unsafe.Pointer(ret.Native()))).(gdk.DeviceTool)

	return ret0
}
