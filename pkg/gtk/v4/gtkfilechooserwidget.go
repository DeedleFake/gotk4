// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_file_chooser_widget_get_type()), F: marshalFileChooserWidget},
	})
}

// FileChooserWidget: `GtkFileChooserWidget` is a widget for choosing files.
//
// It exposes the [iface@Gtk.FileChooser] interface, and you should use the
// methods of this interface to interact with the widget.
//
//
// CSS nodes
//
// `GtkFileChooserWidget` has a single CSS node with name filechooser.
type FileChooserWidget interface {
	Widget

	// AsAccessible casts the class to the Accessible interface.
	AsAccessible() Accessible
	// AsBuildable casts the class to the Buildable interface.
	AsBuildable() Buildable
	// AsConstraintTarget casts the class to the ConstraintTarget interface.
	AsConstraintTarget() ConstraintTarget
	// AsFileChooser casts the class to the FileChooser interface.
	AsFileChooser() FileChooser
}

// fileChooserWidget implements the FileChooserWidget class.
type fileChooserWidget struct {
	Widget
}

// WrapFileChooserWidget wraps a GObject to the right type. It is
// primarily used internally.
func WrapFileChooserWidget(obj *externglib.Object) FileChooserWidget {
	return fileChooserWidget{
		Widget: WrapWidget(obj),
	}
}

func marshalFileChooserWidget(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapFileChooserWidget(obj), nil
}

// NewFileChooserWidget creates a new `GtkFileChooserWidget`.
//
// This is a file chooser widget that can be embedded in custom windows, and it
// is the same widget that is used by `GtkFileChooserDialog`.
func NewFileChooserWidget(action FileChooserAction) FileChooserWidget {
	var _arg1 C.GtkFileChooserAction // out
	var _cret *C.GtkWidget           // in

	_arg1 = C.GtkFileChooserAction(action)

	_cret = C.gtk_file_chooser_widget_new(_arg1)

	var _fileChooserWidget FileChooserWidget // out

	_fileChooserWidget = WrapFileChooserWidget(externglib.Take(unsafe.Pointer(_cret)))

	return _fileChooserWidget
}

func (f fileChooserWidget) AsAccessible() Accessible {
	return WrapAccessible(gextras.InternObject(f))
}

func (f fileChooserWidget) AsBuildable() Buildable {
	return WrapBuildable(gextras.InternObject(f))
}

func (f fileChooserWidget) AsConstraintTarget() ConstraintTarget {
	return WrapConstraintTarget(gextras.InternObject(f))
}

func (f fileChooserWidget) AsFileChooser() FileChooser {
	return WrapFileChooser(gextras.InternObject(f))
}
