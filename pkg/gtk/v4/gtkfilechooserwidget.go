// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_file_chooser_widget_get_type()), F: marshalFileChooserWidget},
	})
}

// FileChooserWidget: `GtkFileChooserWidget` is a widget for choosing files.
//
// It exposes the [iface@Gtk.FileChooser] interface, and you should use the
// methods of this interface to interact with the widget.
//
//
// CSS nodes
//
// `GtkFileChooserWidget` has a single CSS node with name filechooser.
type FileChooserWidget interface {
	Widget
	FileChooser
}

// fileChooserWidget implements the FileChooserWidget class.
type fileChooserWidget struct {
	Widget
}

// WrapFileChooserWidget wraps a GObject to the right type. It is
// primarily used internally.
func WrapFileChooserWidget(obj *externglib.Object) FileChooserWidget {
	return fileChooserWidget{
		Widget: WrapWidget(obj),
	}
}

func marshalFileChooserWidget(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapFileChooserWidget(obj), nil
}

func NewFileChooserWidget(action FileChooserAction) FileChooserWidget {
	var _arg1 C.GtkFileChooserAction // out
	var _cret *C.GtkWidget           // in

	_arg1 = C.GtkFileChooserAction(action)

	_cret = C.gtk_file_chooser_widget_new(_arg1)

	var _fileChooserWidget FileChooserWidget // out

	_fileChooserWidget = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(FileChooserWidget)

	return _fileChooserWidget
}

func (s fileChooserWidget) AccessibleRole() AccessibleRole {
	return WrapAccessible(gextras.InternObject(s)).AccessibleRole()
}

func (s fileChooserWidget) ResetProperty(property AccessibleProperty) {
	WrapAccessible(gextras.InternObject(s)).ResetProperty(property)
}

func (s fileChooserWidget) ResetRelation(relation AccessibleRelation) {
	WrapAccessible(gextras.InternObject(s)).ResetRelation(relation)
}

func (s fileChooserWidget) ResetState(state AccessibleState) {
	WrapAccessible(gextras.InternObject(s)).ResetState(state)
}

func (s fileChooserWidget) UpdatePropertyValue(properties []AccessibleProperty, values []externglib.Value) {
	WrapAccessible(gextras.InternObject(s)).UpdatePropertyValue(properties, values)
}

func (s fileChooserWidget) UpdateRelationValue(relations []AccessibleRelation, values []externglib.Value) {
	WrapAccessible(gextras.InternObject(s)).UpdateRelationValue(relations, values)
}

func (s fileChooserWidget) UpdateStateValue(states []AccessibleState, values []externglib.Value) {
	WrapAccessible(gextras.InternObject(s)).UpdateStateValue(states, values)
}

func (b fileChooserWidget) BuildableID() string {
	return WrapBuildable(gextras.InternObject(b)).BuildableID()
}

func (c fileChooserWidget) AddChoice(id string, label string, options []string, optionLabels []string) {
	WrapFileChooser(gextras.InternObject(c)).AddChoice(id, label, options, optionLabels)
}

func (c fileChooserWidget) AddFilter(filter FileFilter) {
	WrapFileChooser(gextras.InternObject(c)).AddFilter(filter)
}

func (c fileChooserWidget) Action() FileChooserAction {
	return WrapFileChooser(gextras.InternObject(c)).Action()
}

func (c fileChooserWidget) Choice(id string) string {
	return WrapFileChooser(gextras.InternObject(c)).Choice(id)
}

func (c fileChooserWidget) CreateFolders() bool {
	return WrapFileChooser(gextras.InternObject(c)).CreateFolders()
}

func (c fileChooserWidget) CurrentName() string {
	return WrapFileChooser(gextras.InternObject(c)).CurrentName()
}

func (c fileChooserWidget) Filter() FileFilter {
	return WrapFileChooser(gextras.InternObject(c)).Filter()
}

func (c fileChooserWidget) SelectMultiple() bool {
	return WrapFileChooser(gextras.InternObject(c)).SelectMultiple()
}

func (c fileChooserWidget) RemoveChoice(id string) {
	WrapFileChooser(gextras.InternObject(c)).RemoveChoice(id)
}

func (c fileChooserWidget) RemoveFilter(filter FileFilter) {
	WrapFileChooser(gextras.InternObject(c)).RemoveFilter(filter)
}

func (c fileChooserWidget) SetAction(action FileChooserAction) {
	WrapFileChooser(gextras.InternObject(c)).SetAction(action)
}

func (c fileChooserWidget) SetChoice(id string, option string) {
	WrapFileChooser(gextras.InternObject(c)).SetChoice(id, option)
}

func (c fileChooserWidget) SetCreateFolders(createFolders bool) {
	WrapFileChooser(gextras.InternObject(c)).SetCreateFolders(createFolders)
}

func (c fileChooserWidget) SetCurrentName(name string) {
	WrapFileChooser(gextras.InternObject(c)).SetCurrentName(name)
}

func (c fileChooserWidget) SetFilter(filter FileFilter) {
	WrapFileChooser(gextras.InternObject(c)).SetFilter(filter)
}

func (c fileChooserWidget) SetSelectMultiple(selectMultiple bool) {
	WrapFileChooser(gextras.InternObject(c)).SetSelectMultiple(selectMultiple)
}
