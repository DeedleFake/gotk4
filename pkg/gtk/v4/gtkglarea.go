// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_gl_area_get_type()), F: marshalGLArea},
	})
}

// GLArea is a widget that allows drawing with OpenGL.
//
// GLArea sets up its own GLContext for the window it creates, and creates a
// custom GL framebuffer that the widget will do GL rendering onto. It also
// ensures that this framebuffer is the default GL rendering target when
// rendering.
//
// In order to draw, you have to connect to the GLArea::render signal, or
// subclass GLArea and override the @GtkGLAreaClass.render() virtual function.
//
// The GLArea widget ensures that the GLContext is associated with the widget's
// drawing area, and it is kept updated when the size and position of the
// drawing area changes.
//
// Drawing with GtkGLArea ##
//
// The simplest way to draw using OpenGL commands in a GLArea is to create a
// widget instance and connect to the GLArea::render signal:
//
//      static void
//      on_realize (GtkGLarea *area)
//      {
//        // We need to make the context current if we want to
//        // call GL API
//        gtk_gl_area_make_current (area);
//
//        // If there were errors during the initialization or
//        // when trying to make the context current, this
//        // function will return a #GError for you to catch
//        if (gtk_gl_area_get_error (area) != NULL)
//          return;
//
//        // You can also use gtk_gl_area_set_error() in order
//        // to show eventual initialization errors on the
//        // GtkGLArea widget itself
//        GError *internal_error = NULL;
//        init_buffer_objects (&error);
//        if (error != NULL)
//          {
//            gtk_gl_area_set_error (area, error);
//            g_error_free (error);
//            return;
//          }
//
//        init_shaders (&error);
//        if (error != NULL)
//          {
//            gtk_gl_area_set_error (area, error);
//            g_error_free (error);
//            return;
//          }
//      }
//
// If you need to change the options for creating the GLContext you should use
// the GLArea::create-context signal.
type GLArea interface {
	Widget
	Accessible
	Buildable
	ConstraintTarget

	// AttachBuffers ensures that the @area framebuffer object is made the
	// current draw and read target, and that all the required buffers for the
	// @area are created and bound to the framebuffer.
	//
	// This function is automatically called before emitting the GLArea::render
	// signal, and doesn't normally need to be called by application code.
	AttachBuffers(a GLArea)
	// AutoRender returns whether the area is in auto render mode or not.
	AutoRender(a GLArea) bool
	// Context retrieves the GLContext used by @area.
	Context(a GLArea)
	// Error gets the current error set on the @area.
	Error(a GLArea)
	// HasDepthBuffer returns whether the area has a depth buffer.
	HasDepthBuffer(a GLArea) bool
	// HasStencilBuffer returns whether the area has a stencil buffer.
	HasStencilBuffer(a GLArea) bool
	// RequiredVersion retrieves the required version of OpenGL set using
	// gtk_gl_area_set_required_version().
	RequiredVersion(a GLArea) (major int, minor int)
	// UseES retrieves the value set by gtk_gl_area_set_use_es().
	UseES(a GLArea) bool
	// MakeCurrent ensures that the GLContext used by @area is associated with
	// the GLArea.
	//
	// This function is automatically called before emitting the GLArea::render
	// signal, and doesn't normally need to be called by application code.
	MakeCurrent(a GLArea)
	// QueueRender marks the currently rendered data (if any) as invalid, and
	// queues a redraw of the widget, ensuring that the GLArea::render signal is
	// emitted during the draw.
	//
	// This is only needed when the gtk_gl_area_set_auto_render() has been
	// called with a false value. The default behaviour is to emit
	// GLArea::render on each draw.
	QueueRender(a GLArea)
	// SetAutoRender: if @auto_render is true the GLArea::render signal will be
	// emitted every time the widget draws. This is the default and is useful if
	// drawing the widget is faster.
	//
	// If @auto_render is false the data from previous rendering is kept around
	// and will be used for drawing the widget the next time, unless the window
	// is resized. In order to force a rendering gtk_gl_area_queue_render() must
	// be called. This mode is useful when the scene changes seldom, but takes a
	// long time to redraw.
	SetAutoRender(a GLArea, autoRender bool)
	// SetError sets an error on the area which will be shown instead of the GL
	// rendering. This is useful in the GLArea::create-context signal if GL
	// context creation fails.
	SetError(a GLArea, error error)
	// SetHasDepthBuffer: if @has_depth_buffer is true the widget will allocate
	// and enable a depth buffer for the target framebuffer. Otherwise there
	// will be none.
	SetHasDepthBuffer(a GLArea, hasDepthBuffer bool)
	// SetHasStencilBuffer: if @has_stencil_buffer is true the widget will
	// allocate and enable a stencil buffer for the target framebuffer.
	// Otherwise there will be none.
	SetHasStencilBuffer(a GLArea, hasStencilBuffer bool)
	// SetRequiredVersion sets the required version of OpenGL to be used when
	// creating the context for the widget.
	//
	// This function must be called before the area has been realized.
	SetRequiredVersion(a GLArea, major int, minor int)
	// SetUseES sets whether the @area should create an OpenGL or an OpenGL ES
	// context.
	//
	// You should check the capabilities of the GLContext before drawing with
	// either API.
	SetUseES(a GLArea, useES bool)
}

// glArea implements the GLArea interface.
type glArea struct {
	Widget
	Accessible
	Buildable
	ConstraintTarget
}

var _ GLArea = (*glArea)(nil)

// WrapGLArea wraps a GObject to the right type. It is
// primarily used internally.
func WrapGLArea(obj *externglib.Object) GLArea {
	return GLArea{
		Widget:           WrapWidget(obj),
		Accessible:       WrapAccessible(obj),
		Buildable:        WrapBuildable(obj),
		ConstraintTarget: WrapConstraintTarget(obj),
	}
}

func marshalGLArea(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapGLArea(obj), nil
}

// NewGLArea constructs a class GLArea.
func NewGLArea() {
	C.gtk_gl_area_new()
}

// AttachBuffers ensures that the @area framebuffer object is made the
// current draw and read target, and that all the required buffers for the
// @area are created and bound to the framebuffer.
//
// This function is automatically called before emitting the GLArea::render
// signal, and doesn't normally need to be called by application code.
func (a glArea) AttachBuffers(a GLArea) {
	var arg0 *C.GtkGLArea

	arg0 = (*C.GtkGLArea)(unsafe.Pointer(a.Native()))

	C.gtk_gl_area_attach_buffers(arg0)
}

// AutoRender returns whether the area is in auto render mode or not.
func (a glArea) AutoRender(a GLArea) bool {
	var arg0 *C.GtkGLArea

	arg0 = (*C.GtkGLArea)(unsafe.Pointer(a.Native()))

	var cret C.gboolean
	var ok bool

	cret = C.gtk_gl_area_get_auto_render(arg0)

	if cret {
		ok = true
	}

	return ok
}

// Context retrieves the GLContext used by @area.
func (a glArea) Context(a GLArea) {
	var arg0 *C.GtkGLArea

	arg0 = (*C.GtkGLArea)(unsafe.Pointer(a.Native()))

	C.gtk_gl_area_get_context(arg0)
}

// Error gets the current error set on the @area.
func (a glArea) Error(a GLArea) {
	var arg0 *C.GtkGLArea

	arg0 = (*C.GtkGLArea)(unsafe.Pointer(a.Native()))

	C.gtk_gl_area_get_error(arg0)
}

// HasDepthBuffer returns whether the area has a depth buffer.
func (a glArea) HasDepthBuffer(a GLArea) bool {
	var arg0 *C.GtkGLArea

	arg0 = (*C.GtkGLArea)(unsafe.Pointer(a.Native()))

	var cret C.gboolean
	var ok bool

	cret = C.gtk_gl_area_get_has_depth_buffer(arg0)

	if cret {
		ok = true
	}

	return ok
}

// HasStencilBuffer returns whether the area has a stencil buffer.
func (a glArea) HasStencilBuffer(a GLArea) bool {
	var arg0 *C.GtkGLArea

	arg0 = (*C.GtkGLArea)(unsafe.Pointer(a.Native()))

	var cret C.gboolean
	var ok bool

	cret = C.gtk_gl_area_get_has_stencil_buffer(arg0)

	if cret {
		ok = true
	}

	return ok
}

// RequiredVersion retrieves the required version of OpenGL set using
// gtk_gl_area_set_required_version().
func (a glArea) RequiredVersion(a GLArea) (major int, minor int) {
	var arg0 *C.GtkGLArea

	arg0 = (*C.GtkGLArea)(unsafe.Pointer(a.Native()))

	var arg1 C.int
	var major int
	var arg2 C.int
	var minor int

	C.gtk_gl_area_get_required_version(arg0, &arg1, &arg2)

	major = int(&arg1)
	minor = int(&arg2)

	return major, minor
}

// UseES retrieves the value set by gtk_gl_area_set_use_es().
func (a glArea) UseES(a GLArea) bool {
	var arg0 *C.GtkGLArea

	arg0 = (*C.GtkGLArea)(unsafe.Pointer(a.Native()))

	var cret C.gboolean
	var ok bool

	cret = C.gtk_gl_area_get_use_es(arg0)

	if cret {
		ok = true
	}

	return ok
}

// MakeCurrent ensures that the GLContext used by @area is associated with
// the GLArea.
//
// This function is automatically called before emitting the GLArea::render
// signal, and doesn't normally need to be called by application code.
func (a glArea) MakeCurrent(a GLArea) {
	var arg0 *C.GtkGLArea

	arg0 = (*C.GtkGLArea)(unsafe.Pointer(a.Native()))

	C.gtk_gl_area_make_current(arg0)
}

// QueueRender marks the currently rendered data (if any) as invalid, and
// queues a redraw of the widget, ensuring that the GLArea::render signal is
// emitted during the draw.
//
// This is only needed when the gtk_gl_area_set_auto_render() has been
// called with a false value. The default behaviour is to emit
// GLArea::render on each draw.
func (a glArea) QueueRender(a GLArea) {
	var arg0 *C.GtkGLArea

	arg0 = (*C.GtkGLArea)(unsafe.Pointer(a.Native()))

	C.gtk_gl_area_queue_render(arg0)
}

// SetAutoRender: if @auto_render is true the GLArea::render signal will be
// emitted every time the widget draws. This is the default and is useful if
// drawing the widget is faster.
//
// If @auto_render is false the data from previous rendering is kept around
// and will be used for drawing the widget the next time, unless the window
// is resized. In order to force a rendering gtk_gl_area_queue_render() must
// be called. This mode is useful when the scene changes seldom, but takes a
// long time to redraw.
func (a glArea) SetAutoRender(a GLArea, autoRender bool) {
	var arg0 *C.GtkGLArea
	var arg1 C.gboolean

	arg0 = (*C.GtkGLArea)(unsafe.Pointer(a.Native()))
	if autoRender {
		arg1 = C.gboolean(1)
	}

	C.gtk_gl_area_set_auto_render(arg0, arg1)
}

// SetError sets an error on the area which will be shown instead of the GL
// rendering. This is useful in the GLArea::create-context signal if GL
// context creation fails.
func (a glArea) SetError(a GLArea, error error) {
	var arg0 *C.GtkGLArea
	var arg1 *C.GError

	arg0 = (*C.GtkGLArea)(unsafe.Pointer(a.Native()))
	arg1 = (*C.GError)(gerror.New(unsafe.Pointer(error)))
	defer C.g_error_free(arg1)

	C.gtk_gl_area_set_error(arg0, arg1)
}

// SetHasDepthBuffer: if @has_depth_buffer is true the widget will allocate
// and enable a depth buffer for the target framebuffer. Otherwise there
// will be none.
func (a glArea) SetHasDepthBuffer(a GLArea, hasDepthBuffer bool) {
	var arg0 *C.GtkGLArea
	var arg1 C.gboolean

	arg0 = (*C.GtkGLArea)(unsafe.Pointer(a.Native()))
	if hasDepthBuffer {
		arg1 = C.gboolean(1)
	}

	C.gtk_gl_area_set_has_depth_buffer(arg0, arg1)
}

// SetHasStencilBuffer: if @has_stencil_buffer is true the widget will
// allocate and enable a stencil buffer for the target framebuffer.
// Otherwise there will be none.
func (a glArea) SetHasStencilBuffer(a GLArea, hasStencilBuffer bool) {
	var arg0 *C.GtkGLArea
	var arg1 C.gboolean

	arg0 = (*C.GtkGLArea)(unsafe.Pointer(a.Native()))
	if hasStencilBuffer {
		arg1 = C.gboolean(1)
	}

	C.gtk_gl_area_set_has_stencil_buffer(arg0, arg1)
}

// SetRequiredVersion sets the required version of OpenGL to be used when
// creating the context for the widget.
//
// This function must be called before the area has been realized.
func (a glArea) SetRequiredVersion(a GLArea, major int, minor int) {
	var arg0 *C.GtkGLArea
	var arg1 C.int
	var arg2 C.int

	arg0 = (*C.GtkGLArea)(unsafe.Pointer(a.Native()))
	arg1 = C.int(major)
	arg2 = C.int(minor)

	C.gtk_gl_area_set_required_version(arg0, arg1, arg2)
}

// SetUseES sets whether the @area should create an OpenGL or an OpenGL ES
// context.
//
// You should check the capabilities of the GLContext before drawing with
// either API.
func (a glArea) SetUseES(a GLArea, useES bool) {
	var arg0 *C.GtkGLArea
	var arg1 C.gboolean

	arg0 = (*C.GtkGLArea)(unsafe.Pointer(a.Native()))
	if useES {
		arg1 = C.gboolean(1)
	}

	C.gtk_gl_area_set_use_es(arg0, arg1)
}
