// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/gdk/v4"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_style_context_print_flags_get_type()), F: marshalStyleContextPrintFlags},
		{T: externglib.Type(C.gtk_style_context_get_type()), F: marshalStyleContext},
	})
}

// StyleContextPrintFlags flags that modify the behavior of
// gtk_style_context_to_string().
//
// New values may be added to this enumeration.
type StyleContextPrintFlags int

const (
	// StyleContextPrintFlagsNone: default value.
	StyleContextPrintFlagsNone StyleContextPrintFlags = 0b0
	// StyleContextPrintFlagsRecurse: print the entire tree of CSS nodes
	// starting at the style context's node
	StyleContextPrintFlagsRecurse StyleContextPrintFlags = 0b1
	// StyleContextPrintFlagsShowStyle: show the values of the CSS properties
	// for each node
	StyleContextPrintFlagsShowStyle StyleContextPrintFlags = 0b10
	// StyleContextPrintFlagsShowChange: show information about what changes
	// affect the styles
	StyleContextPrintFlagsShowChange StyleContextPrintFlags = 0b100
)

func marshalStyleContextPrintFlags(p uintptr) (interface{}, error) {
	return StyleContextPrintFlags(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// StyleContext: `GtkStyleContext` stores styling information affecting a
// widget.
//
// In order to construct the final style information, `GtkStyleContext` queries
// information from all attached `GtkStyleProviders`. Style providers can be
// either attached explicitly to the context through
// [method@Gtk.StyleContext.add_provider], or to the display through
// [func@Gtk.StyleContext.add_provider_for_display]. The resulting style is a
// combination of all providers’ information in priority order.
//
// For GTK widgets, any `GtkStyleContext` returned by
// [method@Gtk.Widget.get_style_context] will already have a `GdkDisplay` and
// RTL/LTR information set. The style context will also be updated automatically
// if any of these settings change on the widget.
//
//
// Style Classes
//
// Widgets can add style classes to their context, which can be used to
// associate different styles by class. The documentation for individual widgets
// lists which style classes it uses itself, and which style classes may be
// added by applications to affect their appearance.
//
//
// Custom styling in UI libraries and applications
//
// If you are developing a library with custom widgets that render differently
// than standard components, you may need to add a `GtkStyleProvider` yourself
// with the GTK_STYLE_PROVIDER_PRIORITY_FALLBACK priority, either a
// `GtkCssProvider` or a custom object implementing the `GtkStyleProvider`
// interface. This way themes may still attempt to style your UI elements in a
// different way if needed so.
//
// If you are using custom styling on an applications, you probably want then to
// make your style information prevail to the theme’s, so you must use a
// `GtkStyleProvider` with the GTK_STYLE_PROVIDER_PRIORITY_APPLICATION priority,
// keep in mind that the user settings in `XDG_CONFIG_HOME/gtk-4.0/gtk.css` will
// still take precedence over your changes, as it uses the
// GTK_STYLE_PROVIDER_PRIORITY_USER priority.
type StyleContext interface {
	gextras.Objector

	// AddClassStyleContext adds a style class to @context, so later uses of the
	// style context will make use of this new class for styling.
	//
	// In the CSS file format, a `GtkEntry` defining a “search” class, would be
	// matched by:
	//
	// “`css entry.search { ... } “`
	//
	// While any widget defining a “search” class would be matched by: “`css
	// .search { ... } “`
	AddClassStyleContext(className string)
	// AddProviderStyleContext adds a style provider to @context, to be used in
	// style construction.
	//
	// Note that a style provider added by this function only affects the style
	// of the widget to which @context belongs. If you want to affect the style
	// of all widgets, use [func@Gtk.StyleContext.add_provider_for_display].
	//
	// Note: If both priorities are the same, a `GtkStyleProvider` added through
	// this function takes precedence over another added through
	// [func@Gtk.StyleContext.add_provider_for_display].
	AddProviderStyleContext(provider StyleProvider, priority uint)
	// Border gets the border for a given state as a `GtkBorder`.
	Border() Border
	// Color gets the foreground color for a given state.
	Color() gdk.RGBA
	// Display returns the `GdkDisplay` to which @context is attached.
	Display() gdk.Display
	// Margin gets the margin for a given state as a `GtkBorder`.
	Margin() Border
	// Padding gets the padding for a given state as a `GtkBorder`.
	Padding() Border
	// Scale returns the scale used for assets.
	Scale() int
	// State returns the state used for style matching.
	//
	// This method should only be used to retrieve the `GtkStateFlags` to pass
	// to `GtkStyleContext` methods, like [method@Gtk.StyleContext.get_padding].
	// If you need to retrieve the current state of a `GtkWidget`, use
	// [method@Gtk.Widget.get_state_flags].
	State() StateFlags
	// HasClassStyleContext returns true if @context currently has defined the
	// given class name.
	HasClassStyleContext(className string) bool
	// LookupColorStyleContext looks up and resolves a color name in the
	// @context color map.
	LookupColorStyleContext(colorName string) (gdk.RGBA, bool)
	// RemoveClassStyleContext removes @class_name from @context.
	RemoveClassStyleContext(className string)
	// RemoveProviderStyleContext removes @provider from the style providers
	// list in @context.
	RemoveProviderStyleContext(provider StyleProvider)
	// RestoreStyleContext restores @context state to a previous stage.
	//
	// See [method@Gtk.StyleContext.save].
	RestoreStyleContext()
	// SaveStyleContext saves the @context state.
	//
	// This allows temporary modifications done through
	// [method@Gtk.StyleContext.add_class],
	// [method@Gtk.StyleContext.remove_class],
	// [method@Gtk.StyleContext.set_state] to be quickly reverted in one go
	// through [method@Gtk.StyleContext.restore].
	//
	// The matching call to [method@Gtk.StyleContext.restore] must be done
	// before GTK returns to the main loop.
	SaveStyleContext()
	// SetDisplayStyleContext attaches @context to the given display.
	//
	// The display is used to add style information from “global” style
	// providers, such as the display's `GtkSettings` instance.
	//
	// If you are using a `GtkStyleContext` returned from
	// [method@Gtk.Widget.get_style_context], you do not need to call this
	// yourself.
	SetDisplayStyleContext(display gdk.Display)
	// SetScaleStyleContext sets the scale to use when getting image assets for
	// the style.
	SetScaleStyleContext(scale int)
	// SetStateStyleContext sets the state to be used for style matching.
	SetStateStyleContext(flags StateFlags)
	// String converts the style context into a string representation.
	//
	// The string representation always includes information about the name,
	// state, id, visibility and style classes of the CSS node that is backing
	// @context. Depending on the flags, more information may be included.
	//
	// This function is intended for testing and debugging of the CSS
	// implementation in GTK. There are no guarantees about the format of the
	// returned string, it may change.
	String(flags StyleContextPrintFlags) string
}

// styleContext implements the StyleContext class.
type styleContext struct {
	gextras.Objector
}

// WrapStyleContext wraps a GObject to the right type. It is
// primarily used internally.
func WrapStyleContext(obj *externglib.Object) StyleContext {
	return styleContext{
		Objector: obj,
	}
}

func marshalStyleContext(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapStyleContext(obj), nil
}

func (c styleContext) AddClassStyleContext(className string) {
	var _arg0 *C.GtkStyleContext // out
	var _arg1 *C.char            // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.char)(C.CString(className))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_style_context_add_class(_arg0, _arg1)
}

func (c styleContext) AddProviderStyleContext(provider StyleProvider, priority uint) {
	var _arg0 *C.GtkStyleContext  // out
	var _arg1 *C.GtkStyleProvider // out
	var _arg2 C.guint             // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.GtkStyleProvider)(unsafe.Pointer(provider.Native()))
	_arg2 = C.guint(priority)

	C.gtk_style_context_add_provider(_arg0, _arg1, _arg2)
}

func (c styleContext) Border() Border {
	var _arg0 *C.GtkStyleContext // out
	var _arg1 C.GtkBorder        // in

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))

	C.gtk_style_context_get_border(_arg0, &_arg1)

	var _border Border // out

	{
		var refTmpIn *C.GtkBorder
		var refTmpOut *Border

		in0 := &_arg1
		refTmpIn = in0

		refTmpOut = (*Border)(unsafe.Pointer(refTmpIn))

		_border = *refTmpOut
	}

	return _border
}

func (c styleContext) Color() gdk.RGBA {
	var _arg0 *C.GtkStyleContext // out
	var _arg1 C.GdkRGBA          // in

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))

	C.gtk_style_context_get_color(_arg0, &_arg1)

	var _color gdk.RGBA // out

	{
		var refTmpIn *C.GdkRGBA
		var refTmpOut *gdk.RGBA

		in0 := &_arg1
		refTmpIn = in0

		refTmpOut = (*gdk.RGBA)(unsafe.Pointer(refTmpIn))

		_color = *refTmpOut
	}

	return _color
}

func (c styleContext) Display() gdk.Display {
	var _arg0 *C.GtkStyleContext // out
	var _cret *C.GdkDisplay      // in

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))

	_cret = C.gtk_style_context_get_display(_arg0)

	var _display gdk.Display // out

	_display = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(gdk.Display)

	return _display
}

func (c styleContext) Margin() Border {
	var _arg0 *C.GtkStyleContext // out
	var _arg1 C.GtkBorder        // in

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))

	C.gtk_style_context_get_margin(_arg0, &_arg1)

	var _margin Border // out

	{
		var refTmpIn *C.GtkBorder
		var refTmpOut *Border

		in0 := &_arg1
		refTmpIn = in0

		refTmpOut = (*Border)(unsafe.Pointer(refTmpIn))

		_margin = *refTmpOut
	}

	return _margin
}

func (c styleContext) Padding() Border {
	var _arg0 *C.GtkStyleContext // out
	var _arg1 C.GtkBorder        // in

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))

	C.gtk_style_context_get_padding(_arg0, &_arg1)

	var _padding Border // out

	{
		var refTmpIn *C.GtkBorder
		var refTmpOut *Border

		in0 := &_arg1
		refTmpIn = in0

		refTmpOut = (*Border)(unsafe.Pointer(refTmpIn))

		_padding = *refTmpOut
	}

	return _padding
}

func (c styleContext) Scale() int {
	var _arg0 *C.GtkStyleContext // out
	var _cret C.int              // in

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))

	_cret = C.gtk_style_context_get_scale(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (c styleContext) State() StateFlags {
	var _arg0 *C.GtkStyleContext // out
	var _cret C.GtkStateFlags    // in

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))

	_cret = C.gtk_style_context_get_state(_arg0)

	var _stateFlags StateFlags // out

	_stateFlags = StateFlags(_cret)

	return _stateFlags
}

func (c styleContext) HasClassStyleContext(className string) bool {
	var _arg0 *C.GtkStyleContext // out
	var _arg1 *C.char            // out
	var _cret C.gboolean         // in

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.char)(C.CString(className))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_style_context_has_class(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (c styleContext) LookupColorStyleContext(colorName string) (gdk.RGBA, bool) {
	var _arg0 *C.GtkStyleContext // out
	var _arg1 *C.char            // out
	var _arg2 C.GdkRGBA          // in
	var _cret C.gboolean         // in

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.char)(C.CString(colorName))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_style_context_lookup_color(_arg0, _arg1, &_arg2)

	var _color gdk.RGBA // out
	var _ok bool        // out

	{
		var refTmpIn *C.GdkRGBA
		var refTmpOut *gdk.RGBA

		in0 := &_arg2
		refTmpIn = in0

		refTmpOut = (*gdk.RGBA)(unsafe.Pointer(refTmpIn))

		_color = *refTmpOut
	}
	if _cret != 0 {
		_ok = true
	}

	return _color, _ok
}

func (c styleContext) RemoveClassStyleContext(className string) {
	var _arg0 *C.GtkStyleContext // out
	var _arg1 *C.char            // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.char)(C.CString(className))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_style_context_remove_class(_arg0, _arg1)
}

func (c styleContext) RemoveProviderStyleContext(provider StyleProvider) {
	var _arg0 *C.GtkStyleContext  // out
	var _arg1 *C.GtkStyleProvider // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.GtkStyleProvider)(unsafe.Pointer(provider.Native()))

	C.gtk_style_context_remove_provider(_arg0, _arg1)
}

func (c styleContext) RestoreStyleContext() {
	var _arg0 *C.GtkStyleContext // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))

	C.gtk_style_context_restore(_arg0)
}

func (c styleContext) SaveStyleContext() {
	var _arg0 *C.GtkStyleContext // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))

	C.gtk_style_context_save(_arg0)
}

func (c styleContext) SetDisplayStyleContext(display gdk.Display) {
	var _arg0 *C.GtkStyleContext // out
	var _arg1 *C.GdkDisplay      // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.GdkDisplay)(unsafe.Pointer(display.Native()))

	C.gtk_style_context_set_display(_arg0, _arg1)
}

func (c styleContext) SetScaleStyleContext(scale int) {
	var _arg0 *C.GtkStyleContext // out
	var _arg1 C.int              // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	_arg1 = C.int(scale)

	C.gtk_style_context_set_scale(_arg0, _arg1)
}

func (c styleContext) SetStateStyleContext(flags StateFlags) {
	var _arg0 *C.GtkStyleContext // out
	var _arg1 C.GtkStateFlags    // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	_arg1 = C.GtkStateFlags(flags)

	C.gtk_style_context_set_state(_arg0, _arg1)
}

func (c styleContext) String(flags StyleContextPrintFlags) string {
	var _arg0 *C.GtkStyleContext          // out
	var _arg1 C.GtkStyleContextPrintFlags // out
	var _cret *C.char                     // in

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	_arg1 = C.GtkStyleContextPrintFlags(flags)

	_cret = C.gtk_style_context_to_string(_arg0, _arg1)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}
