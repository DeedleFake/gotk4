// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/gdk/v4"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4 glib-2.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_style_context_get_type()), F: marshalStyleContext},
	})
}

// StyleContext: `GtkStyleContext` stores styling information affecting a
// widget.
//
// In order to construct the final style information, `GtkStyleContext` queries
// information from all attached `GtkStyleProviders`. Style providers can be
// either attached explicitly to the context through
// [method@Gtk.StyleContext.add_provider], or to the display through
// [func@Gtk.StyleContext.add_provider_for_display]. The resulting style is a
// combination of all providers’ information in priority order.
//
// For GTK widgets, any `GtkStyleContext` returned by
// [method@Gtk.Widget.get_style_context] will already have a `GdkDisplay` and
// RTL/LTR information set. The style context will also be updated automatically
// if any of these settings change on the widget.
//
//
// Style Classes
//
// Widgets can add style classes to their context, which can be used to
// associate different styles by class. The documentation for individual widgets
// lists which style classes it uses itself, and which style classes may be
// added by applications to affect their appearance.
//
//
// Custom styling in UI libraries and applications
//
// If you are developing a library with custom widgets that render differently
// than standard components, you may need to add a `GtkStyleProvider` yourself
// with the GTK_STYLE_PROVIDER_PRIORITY_FALLBACK priority, either a
// `GtkCssProvider` or a custom object implementing the `GtkStyleProvider`
// interface. This way themes may still attempt to style your UI elements in a
// different way if needed so.
//
// If you are using custom styling on an applications, you probably want then to
// make your style information prevail to the theme’s, so you must use a
// `GtkStyleProvider` with the GTK_STYLE_PROVIDER_PRIORITY_APPLICATION priority,
// keep in mind that the user settings in `XDG_CONFIG_HOME/gtk-4.0/gtk.css` will
// still take precedence over your changes, as it uses the
// GTK_STYLE_PROVIDER_PRIORITY_USER priority.
type StyleContext interface {
	gextras.Objector

	// AddClass adds a style class to @context, so later uses of the style
	// context will make use of this new class for styling.
	//
	// In the CSS file format, a `GtkEntry` defining a “search” class, would be
	// matched by:
	//
	// “`css entry.search { ... } “`
	//
	// While any widget defining a “search” class would be matched by: “`css
	// .search { ... } “`
	AddClass(className string)
	// AddProvider adds a style provider to @context, to be used in style
	// construction.
	//
	// Note that a style provider added by this function only affects the style
	// of the widget to which @context belongs. If you want to affect the style
	// of all widgets, use [func@Gtk.StyleContext.add_provider_for_display].
	//
	// Note: If both priorities are the same, a `GtkStyleProvider` added through
	// this function takes precedence over another added through
	// [func@Gtk.StyleContext.add_provider_for_display].
	AddProvider(provider StyleProvider, priority uint)
	// Border gets the border for a given state as a `GtkBorder`.
	Border() Border
	// Color gets the foreground color for a given state.
	Color() gdk.RGBA
	// Margin gets the margin for a given state as a `GtkBorder`.
	Margin() Border
	// Padding gets the padding for a given state as a `GtkBorder`.
	Padding() Border
	// Scale returns the scale used for assets.
	Scale() int
	// HasClass returns true if @context currently has defined the given class
	// name.
	HasClass(className string) bool
	// LookupColor looks up and resolves a color name in the @context color map.
	LookupColor(colorName string) (gdk.RGBA, bool)
	// RemoveClass removes @class_name from @context.
	RemoveClass(className string)
	// RemoveProvider removes @provider from the style providers list in
	// @context.
	RemoveProvider(provider StyleProvider)
	// Restore restores @context state to a previous stage.
	//
	// See [method@Gtk.StyleContext.save].
	Restore()
	// Save saves the @context state.
	//
	// This allows temporary modifications done through
	// [method@Gtk.StyleContext.add_class],
	// [method@Gtk.StyleContext.remove_class],
	// [method@Gtk.StyleContext.set_state] to be quickly reverted in one go
	// through [method@Gtk.StyleContext.restore].
	//
	// The matching call to [method@Gtk.StyleContext.restore] must be done
	// before GTK returns to the main loop.
	Save()
	// SetDisplay attaches @context to the given display.
	//
	// The display is used to add style information from “global” style
	// providers, such as the display's `GtkSettings` instance.
	//
	// If you are using a `GtkStyleContext` returned from
	// [method@Gtk.Widget.get_style_context], you do not need to call this
	// yourself.
	SetDisplay(display gdk.Display)
	// SetScale sets the scale to use when getting image assets for the style.
	SetScale(scale int)
	// SetState sets the state to be used for style matching.
	SetState(flags StateFlags)
	// String converts the style context into a string representation.
	//
	// The string representation always includes information about the name,
	// state, id, visibility and style classes of the CSS node that is backing
	// @context. Depending on the flags, more information may be included.
	//
	// This function is intended for testing and debugging of the CSS
	// implementation in GTK. There are no guarantees about the format of the
	// returned string, it may change.
	String(flags StyleContextPrintFlags) string
}

// styleContext implements the StyleContext interface.
type styleContext struct {
	gextras.Objector
}

var _ StyleContext = (*styleContext)(nil)

// WrapStyleContext wraps a GObject to the right type. It is
// primarily used internally.
func WrapStyleContext(obj *externglib.Object) StyleContext {
	return StyleContext{
		Objector: obj,
	}
}

func marshalStyleContext(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapStyleContext(obj), nil
}

// AddClass adds a style class to @context, so later uses of the style
// context will make use of this new class for styling.
//
// In the CSS file format, a `GtkEntry` defining a “search” class, would be
// matched by:
//
// “`css entry.search { ... } “`
//
// While any widget defining a “search” class would be matched by: “`css
// .search { ... } “`
func (c styleContext) AddClass(className string) {
	var _arg0 *C.GtkStyleContext // out
	var _arg1 *C.char            // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.char)(C.CString(className))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_style_context_add_class(_arg0, _arg1)
}

// AddProvider adds a style provider to @context, to be used in style
// construction.
//
// Note that a style provider added by this function only affects the style
// of the widget to which @context belongs. If you want to affect the style
// of all widgets, use [func@Gtk.StyleContext.add_provider_for_display].
//
// Note: If both priorities are the same, a `GtkStyleProvider` added through
// this function takes precedence over another added through
// [func@Gtk.StyleContext.add_provider_for_display].
func (c styleContext) AddProvider(provider StyleProvider, priority uint) {
	var _arg0 *C.GtkStyleContext  // out
	var _arg1 *C.GtkStyleProvider // out
	var _arg2 C.guint             // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.GtkStyleProvider)(unsafe.Pointer(provider.Native()))
	_arg2 = C.guint(priority)

	C.gtk_style_context_add_provider(_arg0, _arg1, _arg2)
}

// Border gets the border for a given state as a `GtkBorder`.
func (c styleContext) Border() Border {
	var _arg0 *C.GtkStyleContext // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))

	var _border Border

	C.gtk_style_context_get_border(_arg0, (*C.GtkBorder)(unsafe.Pointer(&_border)))

	return _border
}

// Color gets the foreground color for a given state.
func (c styleContext) Color() gdk.RGBA {
	var _arg0 *C.GtkStyleContext // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))

	var _color gdk.RGBA

	C.gtk_style_context_get_color(_arg0, (*C.GdkRGBA)(unsafe.Pointer(&_color)))

	return _color
}

// Margin gets the margin for a given state as a `GtkBorder`.
func (c styleContext) Margin() Border {
	var _arg0 *C.GtkStyleContext // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))

	var _margin Border

	C.gtk_style_context_get_margin(_arg0, (*C.GtkBorder)(unsafe.Pointer(&_margin)))

	return _margin
}

// Padding gets the padding for a given state as a `GtkBorder`.
func (c styleContext) Padding() Border {
	var _arg0 *C.GtkStyleContext // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))

	var _padding Border

	C.gtk_style_context_get_padding(_arg0, (*C.GtkBorder)(unsafe.Pointer(&_padding)))

	return _padding
}

// Scale returns the scale used for assets.
func (c styleContext) Scale() int {
	var _arg0 *C.GtkStyleContext // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))

	var _cret C.int // in

	_cret = C.gtk_style_context_get_scale(_arg0)

	var _gint int // out

	_gint = (int)(_cret)

	return _gint
}

// HasClass returns true if @context currently has defined the given class
// name.
func (c styleContext) HasClass(className string) bool {
	var _arg0 *C.GtkStyleContext // out
	var _arg1 *C.char            // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.char)(C.CString(className))
	defer C.free(unsafe.Pointer(_arg1))

	var _cret C.gboolean // in

	_cret = C.gtk_style_context_has_class(_arg0, _arg1)

	var _ok bool // out

	if _cret {
		_ok = true
	}

	return _ok
}

// LookupColor looks up and resolves a color name in the @context color map.
func (c styleContext) LookupColor(colorName string) (gdk.RGBA, bool) {
	var _arg0 *C.GtkStyleContext // out
	var _arg1 *C.char            // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.char)(C.CString(colorName))
	defer C.free(unsafe.Pointer(_arg1))

	var _color gdk.RGBA
	var _cret C.gboolean // in

	_cret = C.gtk_style_context_lookup_color(_arg0, _arg1, (*C.GdkRGBA)(unsafe.Pointer(&_color)))

	var _ok bool // out

	if _cret {
		_ok = true
	}

	return _color, _ok
}

// RemoveClass removes @class_name from @context.
func (c styleContext) RemoveClass(className string) {
	var _arg0 *C.GtkStyleContext // out
	var _arg1 *C.char            // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.char)(C.CString(className))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_style_context_remove_class(_arg0, _arg1)
}

// RemoveProvider removes @provider from the style providers list in
// @context.
func (c styleContext) RemoveProvider(provider StyleProvider) {
	var _arg0 *C.GtkStyleContext  // out
	var _arg1 *C.GtkStyleProvider // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.GtkStyleProvider)(unsafe.Pointer(provider.Native()))

	C.gtk_style_context_remove_provider(_arg0, _arg1)
}

// Restore restores @context state to a previous stage.
//
// See [method@Gtk.StyleContext.save].
func (c styleContext) Restore() {
	var _arg0 *C.GtkStyleContext // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))

	C.gtk_style_context_restore(_arg0)
}

// Save saves the @context state.
//
// This allows temporary modifications done through
// [method@Gtk.StyleContext.add_class],
// [method@Gtk.StyleContext.remove_class],
// [method@Gtk.StyleContext.set_state] to be quickly reverted in one go
// through [method@Gtk.StyleContext.restore].
//
// The matching call to [method@Gtk.StyleContext.restore] must be done
// before GTK returns to the main loop.
func (c styleContext) Save() {
	var _arg0 *C.GtkStyleContext // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))

	C.gtk_style_context_save(_arg0)
}

// SetDisplay attaches @context to the given display.
//
// The display is used to add style information from “global” style
// providers, such as the display's `GtkSettings` instance.
//
// If you are using a `GtkStyleContext` returned from
// [method@Gtk.Widget.get_style_context], you do not need to call this
// yourself.
func (c styleContext) SetDisplay(display gdk.Display) {
	var _arg0 *C.GtkStyleContext // out
	var _arg1 *C.GdkDisplay      // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.GdkDisplay)(unsafe.Pointer(display.Native()))

	C.gtk_style_context_set_display(_arg0, _arg1)
}

// SetScale sets the scale to use when getting image assets for the style.
func (c styleContext) SetScale(scale int) {
	var _arg0 *C.GtkStyleContext // out
	var _arg1 C.int              // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	_arg1 = C.int(scale)

	C.gtk_style_context_set_scale(_arg0, _arg1)
}

// SetState sets the state to be used for style matching.
func (c styleContext) SetState(flags StateFlags) {
	var _arg0 *C.GtkStyleContext // out
	var _arg1 C.GtkStateFlags    // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	_arg1 = (C.GtkStateFlags)(flags)

	C.gtk_style_context_set_state(_arg0, _arg1)
}

// String converts the style context into a string representation.
//
// The string representation always includes information about the name,
// state, id, visibility and style classes of the CSS node that is backing
// @context. Depending on the flags, more information may be included.
//
// This function is intended for testing and debugging of the CSS
// implementation in GTK. There are no guarantees about the format of the
// returned string, it may change.
func (c styleContext) String(flags StyleContextPrintFlags) string {
	var _arg0 *C.GtkStyleContext          // out
	var _arg1 C.GtkStyleContextPrintFlags // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	_arg1 = (C.GtkStyleContextPrintFlags)(flags)

	var _cret *C.char // in

	_cret = C.gtk_style_context_to_string(_arg0, _arg1)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}
