// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: glib-2.0 gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_gesture_drag_get_type()), F: marshalGestureDrag},
	})
}

// GestureDrag: `GtkGestureDrag` is a `GtkGesture` implementation for drags.
//
// The drag operation itself can be tracked throughout the
// [signal@Gtk.GestureDrag::drag-begin], [signal@Gtk.GestureDrag::drag-update]
// and [signal@Gtk.GestureDrag::drag-end] signals, and the relevant coordinates
// can be extracted through [method@Gtk.GestureDrag.get_offset] and
// [method@Gtk.GestureDrag.get_start_point].
type GestureDrag interface {
	GestureSingle

	// Offset gets the offset from the start point.
	//
	// If the @gesture is active, this function returns true and fills in @x and
	// @y with the coordinates of the current point, as an offset to the
	// starting drag point.
	Offset() (x float64, y float64, ok bool)
	// StartPoint gets the point where the drag started.
	//
	// If the @gesture is active, this function returns true and fills in @x and
	// @y with the drag start coordinates, in surface-relative coordinates.
	StartPoint() (x float64, y float64, ok bool)
}

// gestureDrag implements the GestureDrag class.
type gestureDrag struct {
	GestureSingle
}

var _ GestureDrag = (*gestureDrag)(nil)

// WrapGestureDrag wraps a GObject to the right type. It is
// primarily used internally.
func WrapGestureDrag(obj *externglib.Object) GestureDrag {
	return gestureDrag{
		GestureSingle: WrapGestureSingle(obj),
	}
}

func marshalGestureDrag(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapGestureDrag(obj), nil
}

// NewGestureDrag constructs a class GestureDrag.
func NewGestureDrag() GestureDrag {
	var _cret C.GtkGestureDrag // in

	_cret = C.gtk_gesture_drag_new()

	var _gestureDrag GestureDrag // out

	_gestureDrag = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret.Native()))).(GestureDrag)

	return _gestureDrag
}

// Offset gets the offset from the start point.
//
// If the @gesture is active, this function returns true and fills in @x and
// @y with the coordinates of the current point, as an offset to the
// starting drag point.
func (g gestureDrag) Offset() (x float64, y float64, ok bool) {
	var _arg0 *C.GtkGestureDrag // out

	_arg0 = (*C.GtkGestureDrag)(unsafe.Pointer(g.Native()))

	var _arg1 C.double   // in
	var _arg2 C.double   // in
	var _cret C.gboolean // in

	_cret = C.gtk_gesture_drag_get_offset(_arg0, &_arg1, &_arg2)

	var _x float64 // out
	var _y float64 // out
	var _ok bool   // out

	_x = (float64)(_arg1)
	_y = (float64)(_arg2)
	if _cret != 0 {
		_ok = true
	}

	return _x, _y, _ok
}

// StartPoint gets the point where the drag started.
//
// If the @gesture is active, this function returns true and fills in @x and
// @y with the drag start coordinates, in surface-relative coordinates.
func (g gestureDrag) StartPoint() (x float64, y float64, ok bool) {
	var _arg0 *C.GtkGestureDrag // out

	_arg0 = (*C.GtkGestureDrag)(unsafe.Pointer(g.Native()))

	var _arg1 C.double   // in
	var _arg2 C.double   // in
	var _cret C.gboolean // in

	_cret = C.gtk_gesture_drag_get_start_point(_arg0, &_arg1, &_arg2)

	var _x float64 // out
	var _y float64 // out
	var _ok bool   // out

	_x = (float64)(_arg1)
	_y = (float64)(_arg2)
	if _cret != 0 {
		_ok = true
	}

	return _x, _y, _ok
}
