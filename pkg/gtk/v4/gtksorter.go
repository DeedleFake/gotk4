// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_sorter_get_type()), F: marshalSorter},
	})
}

// Sorter: `GtkSorter` is an object to describe sorting criteria.
//
// Its primary user is [class@Gtk.SortListModel]
//
// The model will use a sorter to determine the order in which its items should
// appear by calling [method@Gtk.Sorter.compare] for pairs of items.
//
// Sorters may change their sorting behavior through their lifetime. In that
// case, they will emit the [signal@Gtk.Sorter::changed] signal to notify that
// the sort order is no longer valid and should be updated by calling
// gtk_sorter_compare() again.
//
// GTK provides various pre-made sorter implementations for common sorting
// operations. [class@Gtk.ColumnView] has built-in support for sorting lists via
// the [property@Gtk.ColumnViewColumn:sorter] property, where the user can
// change the sorting by clicking on list headers.
//
// Of course, in particular for large lists, it is also possible to subclass
// `GtkSorter` and provide one's own sorter.
type Sorter interface {
	gextras.Objector

	// Changed emits the [signal@Gtk.Sorter::changed] signal to notify all users
	// of the sorter that it has changed.
	//
	// Users of the sorter should then update the sort order via
	// gtk_sorter_compare().
	//
	// Depending on the @change parameter, it may be possible to update the sort
	// order without a full resorting. Refer to the [enum@Gtk.SorterChange]
	// documentation for details.
	//
	// This function is intended for implementors of `GtkSorter` subclasses and
	// should not be called from other functions.
	Changed(change SorterChange)
}

// sorter implements the Sorter interface.
type sorter struct {
	gextras.Objector
}

var _ Sorter = (*sorter)(nil)

// WrapSorter wraps a GObject to the right type. It is
// primarily used internally.
func WrapSorter(obj *externglib.Object) Sorter {
	return Sorter{
		Objector: obj,
	}
}

func marshalSorter(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapSorter(obj), nil
}

// Changed emits the [signal@Gtk.Sorter::changed] signal to notify all users
// of the sorter that it has changed.
//
// Users of the sorter should then update the sort order via
// gtk_sorter_compare().
//
// Depending on the @change parameter, it may be possible to update the sort
// order without a full resorting. Refer to the [enum@Gtk.SorterChange]
// documentation for details.
//
// This function is intended for implementors of `GtkSorter` subclasses and
// should not be called from other functions.
func (s sorter) Changed(change SorterChange) {
	var _arg0 *C.GtkSorter
	var _arg1 C.GtkSorterChange

	_arg0 = (*C.GtkSorter)(unsafe.Pointer(s.Native()))
	_arg1 = (C.GtkSorterChange)(change)

	C.gtk_sorter_changed(_arg0, _arg1)
}
