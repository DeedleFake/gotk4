// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_root_get_type()), F: marshalRoot},
	})
}

// Root is the interface implemented by all widgets that can act as a toplevel
// widget to a hierarchy of widgets. The root widget takes care of providing the
// connection to the windowing system and manages layout, drawing and event
// delivery for its widget hierarchy.
//
// The obvious example of a Root is Window.
type Root interface {
	NativeWidget

	// Display returns the display that this GtkRoot is on.
	Display(s Root)
	// Focus retrieves the current focused widget within the root.
	//
	// Note that this is the widget that would have the focus if the root is
	// active; if the root is not focused then `gtk_widget_has_focus (widget)`
	// will be false for the widget.
	Focus(s Root)
	// SetFocus: if @focus is not the current focus widget, and is focusable,
	// sets it as the focus widget for the root. If @focus is nil, unsets the
	// focus widget for the root.
	//
	// To set the focus to a particular widget in the root, it is usually more
	// convenient to use gtk_widget_grab_focus() instead of this function.
	SetFocus(s Root, focus Widget)
}

// root implements the Root interface.
type root struct {
	Native
	Widget
}

var _ Root = (*root)(nil)

// WrapRoot wraps a GObject to a type that implements interface
// Root. It is primarily used internally.
func WrapRoot(obj *externglib.Object) Root {
	return Root{
		Native: WrapNative(obj),
		Widget: WrapWidget(obj),
	}
}

func marshalRoot(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapRoot(obj), nil
}

// Display returns the display that this GtkRoot is on.
func (s root) Display(s Root) {
	var arg0 *C.GtkRoot

	arg0 = (*C.GtkRoot)(unsafe.Pointer(s.Native()))

	C.gtk_root_get_display(arg0)
}

// Focus retrieves the current focused widget within the root.
//
// Note that this is the widget that would have the focus if the root is
// active; if the root is not focused then `gtk_widget_has_focus (widget)`
// will be false for the widget.
func (s root) Focus(s Root) {
	var arg0 *C.GtkRoot

	arg0 = (*C.GtkRoot)(unsafe.Pointer(s.Native()))

	C.gtk_root_get_focus(arg0)
}

// SetFocus: if @focus is not the current focus widget, and is focusable,
// sets it as the focus widget for the root. If @focus is nil, unsets the
// focus widget for the root.
//
// To set the focus to a particular widget in the root, it is usually more
// convenient to use gtk_widget_grab_focus() instead of this function.
func (s root) SetFocus(s Root, focus Widget) {
	var arg0 *C.GtkRoot
	var arg1 *C.GtkWidget

	arg0 = (*C.GtkRoot)(unsafe.Pointer(s.Native()))
	arg1 = (*C.GtkWidget)(unsafe.Pointer(focus.Native()))

	C.gtk_root_set_focus(arg0, arg1)
}
