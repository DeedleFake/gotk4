// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_list_item_get_type()), F: marshalListItem},
	})
}

// ListItem: `GtkListItem` is used by list widgets to represent items in a
// `GListModel`.
//
// The `GtkListItem`s are managed by the list widget (with its factory) and
// cannot be created by applications, but they need to be populated by
// application code. This is done by calling [method@Gtk.ListItem.set_child].
//
// `GtkListItem`s exist in 2 stages:
//
// 1. The unbound stage where the listitem is not currently connected to an item
// in the list. In that case, the [property@Gtk.ListItem:item] property is set
// to nil.
//
// 2. The bound stage where the listitem references an item from the list. The
// [property@Gtk.ListItem:item] property is not nil.
type ListItem interface {
	gextras.Objector

	Activatable() bool

	Child() Widget

	Item() gextras.Objector

	Position() uint

	Selectable() bool

	Selected() bool

	SetActivatableListItem(activatable bool)

	SetChildListItem(child Widget)

	SetSelectableListItem(selectable bool)
}

// listItem implements the ListItem class.
type listItem struct {
	gextras.Objector
}

// WrapListItem wraps a GObject to the right type. It is
// primarily used internally.
func WrapListItem(obj *externglib.Object) ListItem {
	return listItem{
		Objector: obj,
	}
}

func marshalListItem(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapListItem(obj), nil
}

func (s listItem) Activatable() bool {
	var _arg0 *C.GtkListItem // out
	var _cret C.gboolean     // in

	_arg0 = (*C.GtkListItem)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_list_item_get_activatable(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (s listItem) Child() Widget {
	var _arg0 *C.GtkListItem // out
	var _cret *C.GtkWidget   // in

	_arg0 = (*C.GtkListItem)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_list_item_get_child(_arg0)

	var _widget Widget // out

	_widget = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Widget)

	return _widget
}

func (s listItem) Item() gextras.Objector {
	var _arg0 *C.GtkListItem // out
	var _cret C.gpointer     // in

	_arg0 = (*C.GtkListItem)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_list_item_get_item(_arg0)

	var _object gextras.Objector // out

	_object = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(gextras.Objector)

	return _object
}

func (s listItem) Position() uint {
	var _arg0 *C.GtkListItem // out
	var _cret C.guint        // in

	_arg0 = (*C.GtkListItem)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_list_item_get_position(_arg0)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

func (s listItem) Selectable() bool {
	var _arg0 *C.GtkListItem // out
	var _cret C.gboolean     // in

	_arg0 = (*C.GtkListItem)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_list_item_get_selectable(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (s listItem) Selected() bool {
	var _arg0 *C.GtkListItem // out
	var _cret C.gboolean     // in

	_arg0 = (*C.GtkListItem)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_list_item_get_selected(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (s listItem) SetActivatableListItem(activatable bool) {
	var _arg0 *C.GtkListItem // out
	var _arg1 C.gboolean     // out

	_arg0 = (*C.GtkListItem)(unsafe.Pointer(s.Native()))
	if activatable {
		_arg1 = C.TRUE
	}

	C.gtk_list_item_set_activatable(_arg0, _arg1)
}

func (s listItem) SetChildListItem(child Widget) {
	var _arg0 *C.GtkListItem // out
	var _arg1 *C.GtkWidget   // out

	_arg0 = (*C.GtkListItem)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(child.Native()))

	C.gtk_list_item_set_child(_arg0, _arg1)
}

func (s listItem) SetSelectableListItem(selectable bool) {
	var _arg0 *C.GtkListItem // out
	var _arg1 C.gboolean     // out

	_arg0 = (*C.GtkListItem)(unsafe.Pointer(s.Native()))
	if selectable {
		_arg1 = C.TRUE
	}

	C.gtk_list_item_set_selectable(_arg0, _arg1)
}
