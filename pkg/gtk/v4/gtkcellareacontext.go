// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_cell_area_context_get_type()), F: marshalCellAreaContext},
	})
}

// CellAreaContext stores geometrical information for a series of rows in a
// GtkCellArea
//
// The CellAreaContext object is created by a given CellArea implementation via
// its CellAreaClass.create_context() virtual method and is used to store cell
// sizes and alignments for a series of TreeModel rows that are requested and
// rendered in the same context.
//
// CellLayout widgets can create any number of contexts in which to request and
// render groups of data rows. However, itâ€™s important that the same context
// which was used to request sizes for a given TreeModel row also be used for
// the same row when calling other CellArea APIs such as gtk_cell_area_render()
// and gtk_cell_area_event().
type CellAreaContext interface {
	gextras.Objector

	// AllocateCellAreaContext:
	AllocateCellAreaContext(width int, height int)
	// Allocation:
	Allocation() (width int, height int)
	// Area:
	Area() CellArea
	// PreferredHeight:
	PreferredHeight() (minimumHeight int, naturalHeight int)
	// PreferredHeightForWidth:
	PreferredHeightForWidth(width int) (minimumHeight int, naturalHeight int)
	// PreferredWidth:
	PreferredWidth() (minimumWidth int, naturalWidth int)
	// PreferredWidthForHeight:
	PreferredWidthForHeight(height int) (minimumWidth int, naturalWidth int)
	// PushPreferredHeightCellAreaContext:
	PushPreferredHeightCellAreaContext(minimumHeight int, naturalHeight int)
	// PushPreferredWidthCellAreaContext:
	PushPreferredWidthCellAreaContext(minimumWidth int, naturalWidth int)
	// ResetCellAreaContext:
	ResetCellAreaContext()
}

// cellAreaContext implements the CellAreaContext class.
type cellAreaContext struct {
	gextras.Objector
}

// WrapCellAreaContext wraps a GObject to the right type. It is
// primarily used internally.
func WrapCellAreaContext(obj *externglib.Object) CellAreaContext {
	return cellAreaContext{
		Objector: obj,
	}
}

func marshalCellAreaContext(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapCellAreaContext(obj), nil
}

func (c cellAreaContext) AllocateCellAreaContext(width int, height int) {
	var _arg0 *C.GtkCellAreaContext // out
	var _arg1 C.int                 // out
	var _arg2 C.int                 // out

	_arg0 = (*C.GtkCellAreaContext)(unsafe.Pointer(c.Native()))
	_arg1 = C.int(width)
	_arg2 = C.int(height)

	C.gtk_cell_area_context_allocate(_arg0, _arg1, _arg2)
}

func (c cellAreaContext) Allocation() (width int, height int) {
	var _arg0 *C.GtkCellAreaContext // out
	var _arg1 C.int                 // in
	var _arg2 C.int                 // in

	_arg0 = (*C.GtkCellAreaContext)(unsafe.Pointer(c.Native()))

	C.gtk_cell_area_context_get_allocation(_arg0, &_arg1, &_arg2)

	var _width int  // out
	var _height int // out

	_width = int(_arg1)
	_height = int(_arg2)

	return _width, _height
}

func (c cellAreaContext) Area() CellArea {
	var _arg0 *C.GtkCellAreaContext // out
	var _cret *C.GtkCellArea        // in

	_arg0 = (*C.GtkCellAreaContext)(unsafe.Pointer(c.Native()))

	_cret = C.gtk_cell_area_context_get_area(_arg0)

	var _cellArea CellArea // out

	_cellArea = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(CellArea)

	return _cellArea
}

func (c cellAreaContext) PreferredHeight() (minimumHeight int, naturalHeight int) {
	var _arg0 *C.GtkCellAreaContext // out
	var _arg1 C.int                 // in
	var _arg2 C.int                 // in

	_arg0 = (*C.GtkCellAreaContext)(unsafe.Pointer(c.Native()))

	C.gtk_cell_area_context_get_preferred_height(_arg0, &_arg1, &_arg2)

	var _minimumHeight int // out
	var _naturalHeight int // out

	_minimumHeight = int(_arg1)
	_naturalHeight = int(_arg2)

	return _minimumHeight, _naturalHeight
}

func (c cellAreaContext) PreferredHeightForWidth(width int) (minimumHeight int, naturalHeight int) {
	var _arg0 *C.GtkCellAreaContext // out
	var _arg1 C.int                 // out
	var _arg2 C.int                 // in
	var _arg3 C.int                 // in

	_arg0 = (*C.GtkCellAreaContext)(unsafe.Pointer(c.Native()))
	_arg1 = C.int(width)

	C.gtk_cell_area_context_get_preferred_height_for_width(_arg0, _arg1, &_arg2, &_arg3)

	var _minimumHeight int // out
	var _naturalHeight int // out

	_minimumHeight = int(_arg2)
	_naturalHeight = int(_arg3)

	return _minimumHeight, _naturalHeight
}

func (c cellAreaContext) PreferredWidth() (minimumWidth int, naturalWidth int) {
	var _arg0 *C.GtkCellAreaContext // out
	var _arg1 C.int                 // in
	var _arg2 C.int                 // in

	_arg0 = (*C.GtkCellAreaContext)(unsafe.Pointer(c.Native()))

	C.gtk_cell_area_context_get_preferred_width(_arg0, &_arg1, &_arg2)

	var _minimumWidth int // out
	var _naturalWidth int // out

	_minimumWidth = int(_arg1)
	_naturalWidth = int(_arg2)

	return _minimumWidth, _naturalWidth
}

func (c cellAreaContext) PreferredWidthForHeight(height int) (minimumWidth int, naturalWidth int) {
	var _arg0 *C.GtkCellAreaContext // out
	var _arg1 C.int                 // out
	var _arg2 C.int                 // in
	var _arg3 C.int                 // in

	_arg0 = (*C.GtkCellAreaContext)(unsafe.Pointer(c.Native()))
	_arg1 = C.int(height)

	C.gtk_cell_area_context_get_preferred_width_for_height(_arg0, _arg1, &_arg2, &_arg3)

	var _minimumWidth int // out
	var _naturalWidth int // out

	_minimumWidth = int(_arg2)
	_naturalWidth = int(_arg3)

	return _minimumWidth, _naturalWidth
}

func (c cellAreaContext) PushPreferredHeightCellAreaContext(minimumHeight int, naturalHeight int) {
	var _arg0 *C.GtkCellAreaContext // out
	var _arg1 C.int                 // out
	var _arg2 C.int                 // out

	_arg0 = (*C.GtkCellAreaContext)(unsafe.Pointer(c.Native()))
	_arg1 = C.int(minimumHeight)
	_arg2 = C.int(naturalHeight)

	C.gtk_cell_area_context_push_preferred_height(_arg0, _arg1, _arg2)
}

func (c cellAreaContext) PushPreferredWidthCellAreaContext(minimumWidth int, naturalWidth int) {
	var _arg0 *C.GtkCellAreaContext // out
	var _arg1 C.int                 // out
	var _arg2 C.int                 // out

	_arg0 = (*C.GtkCellAreaContext)(unsafe.Pointer(c.Native()))
	_arg1 = C.int(minimumWidth)
	_arg2 = C.int(naturalWidth)

	C.gtk_cell_area_context_push_preferred_width(_arg0, _arg1, _arg2)
}

func (c cellAreaContext) ResetCellAreaContext() {
	var _arg0 *C.GtkCellAreaContext // out

	_arg0 = (*C.GtkCellAreaContext)(unsafe.Pointer(c.Native()))

	C.gtk_cell_area_context_reset(_arg0)
}
