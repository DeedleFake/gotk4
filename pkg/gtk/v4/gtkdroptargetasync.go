// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	"github.com/diamondburned/gotk4/pkg/gdk/v4"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_drop_target_async_get_type()), F: marshalDropTargetAsync},
	})
}

// DropTargetAsync: gtkDropTargetAsync is an auxiliary object that can be used
// to receive Drag-and-Drop operations. It is the more complete but also more
// complex method of handling drop operations compared to DropTarget and you
// should only use it if DropTarget doesn't provide all the features you need.
//
// To use a DropTargetAsync to receive drops on a widget, you create a
// DropTargetAsync object, configure which data formats and actions you support,
// connect to its signals, and then attach it to the widget with
// gtk_widget_add_controller().
//
// During a drag operation, the first signal that a GtkDropTargetAsync emits is
// DropTargetAsync::accept, which is meant to determine whether the target is a
// possible drop site for the ongoing drop. The default handler for the ::accept
// signal accepts the drop if it finds a compatible data format and an action
// that is supported on both sides.
//
// If it is, and the widget becomes a target, you will receive a
// DropTargetAsync::drag-enter signal, followed by DropTargetAsync::drag-motion
// signals as the pointer moves, optionally a DropTargetAsync::drop signal when
// a drop happens, and finally a DropTargetAsync::drag-leave signal when the
// pointer moves off the widget.
//
// The ::drag-enter and ::drag-motion handler return a DragAction to update the
// status of the ongoing operation. The ::drop handler should decide if it
// ultimately accepts the drop and if it does, it should initiate the data
// transfer and finish the operation by calling gdk_drop_finish().
//
// Between the ::drag-enter and ::drag-leave signals the widget is a current
// drop target, and will receive the GTK_STATE_FLAG_DROP_ACTIVE state, which can
// be used by themes to style the widget as a drop target.
type DropTargetAsync interface {
	EventController

	// Actions gets the actions that this drop target supports.
	Actions() gdk.DragAction
	// Formats gets the data formats that this drop target accepts.
	//
	// If the result is nil, all formats are expected to be supported.
	Formats() *gdk.ContentFormats
	// RejectDrop sets the @drop as not accepted on this drag site.
	//
	// This function should be used when delaying the decision on whether to
	// accept a drag or not until after reading the data.
	RejectDrop(drop gdk.Drop)
	// SetActions sets the actions that this drop target supports.
	SetActions(actions gdk.DragAction)
	// SetFormats sets the data formats that this drop target will accept.
	SetFormats(formats *gdk.ContentFormats)
}

// dropTargetAsync implements the DropTargetAsync interface.
type dropTargetAsync struct {
	EventController
}

var _ DropTargetAsync = (*dropTargetAsync)(nil)

// WrapDropTargetAsync wraps a GObject to the right type. It is
// primarily used internally.
func WrapDropTargetAsync(obj *externglib.Object) DropTargetAsync {
	return DropTargetAsync{
		EventController: WrapEventController(obj),
	}
}

func marshalDropTargetAsync(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapDropTargetAsync(obj), nil
}

// NewDropTargetAsync constructs a class DropTargetAsync.
func NewDropTargetAsync(formats *gdk.ContentFormats, actions gdk.DragAction) DropTargetAsync {
	var arg1 *C.GdkContentFormats
	var arg2 C.GdkDragAction

	arg1 = (*C.GdkContentFormats)(unsafe.Pointer(formats.Native()))
	arg2 = (C.GdkDragAction)(actions)

	var cret C.GtkDropTargetAsync
	var goret1 DropTargetAsync

	cret = C.gtk_drop_target_async_new(formats, actions)

	goret1 = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(cret.Native()))).(DropTargetAsync)

	return goret1
}

// Actions gets the actions that this drop target supports.
func (s dropTargetAsync) Actions() gdk.DragAction {
	var arg0 *C.GtkDropTargetAsync

	arg0 = (*C.GtkDropTargetAsync)(unsafe.Pointer(s.Native()))

	var cret C.GdkDragAction
	var goret1 gdk.DragAction

	cret = C.gtk_drop_target_async_get_actions(arg0)

	goret1 = gdk.DragAction(cret)

	return goret1
}

// Formats gets the data formats that this drop target accepts.
//
// If the result is nil, all formats are expected to be supported.
func (s dropTargetAsync) Formats() *gdk.ContentFormats {
	var arg0 *C.GtkDropTargetAsync

	arg0 = (*C.GtkDropTargetAsync)(unsafe.Pointer(s.Native()))

	var cret *C.GdkContentFormats
	var goret1 *gdk.ContentFormats

	cret = C.gtk_drop_target_async_get_formats(arg0)

	goret1 = gdk.WrapContentFormats(unsafe.Pointer(cret))
	runtime.SetFinalizer(goret1, func(v *gdk.ContentFormats) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return goret1
}

// RejectDrop sets the @drop as not accepted on this drag site.
//
// This function should be used when delaying the decision on whether to
// accept a drag or not until after reading the data.
func (s dropTargetAsync) RejectDrop(drop gdk.Drop) {
	var arg0 *C.GtkDropTargetAsync
	var arg1 *C.GdkDrop

	arg0 = (*C.GtkDropTargetAsync)(unsafe.Pointer(s.Native()))
	arg1 = (*C.GdkDrop)(unsafe.Pointer(drop.Native()))

	C.gtk_drop_target_async_reject_drop(arg0, drop)
}

// SetActions sets the actions that this drop target supports.
func (s dropTargetAsync) SetActions(actions gdk.DragAction) {
	var arg0 *C.GtkDropTargetAsync
	var arg1 C.GdkDragAction

	arg0 = (*C.GtkDropTargetAsync)(unsafe.Pointer(s.Native()))
	arg1 = (C.GdkDragAction)(actions)

	C.gtk_drop_target_async_set_actions(arg0, actions)
}

// SetFormats sets the data formats that this drop target will accept.
func (s dropTargetAsync) SetFormats(formats *gdk.ContentFormats) {
	var arg0 *C.GtkDropTargetAsync
	var arg1 *C.GdkContentFormats

	arg0 = (*C.GtkDropTargetAsync)(unsafe.Pointer(s.Native()))
	arg1 = (*C.GdkContentFormats)(unsafe.Pointer(formats.Native()))

	C.gtk_drop_target_async_set_formats(arg0, formats)
}
