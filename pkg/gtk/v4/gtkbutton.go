// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_button_get_type()), F: marshalButton},
	})
}

// Button: the `GtkButton` widget is generally used to trigger a callback
// function that is called when the button is pressed.
//
// !An example GtkButton (button.png)
//
// The `GtkButton` widget can hold any valid child widget. That is, it can hold
// almost any other standard `GtkWidget`. The most commonly used child is the
// `GtkLabel`.
//
//
// CSS nodes
//
// `GtkButton` has a single CSS node with name button. The node will get the
// style classes .image-button or .text-button, if the content is just an image
// or label, respectively. It may also receive the .flat style class. When
// activating a button via the keyboard, the button will temporarily gain the
// .keyboard-activating style class.
//
// Other style classes that are commonly used with `GtkButton` include
// .suggested-action and .destructive-action. In special cases, buttons can be
// made round by adding the .circular style class.
//
// Button-like widgets like [class@Gtk.ToggleButton], [class@Gtk.MenuButton],
// [class@Gtk.VolumeButton], [class@Gtk.LockButton], [class@Gtk.ColorButton] or
// [class@Gtk.FontButton] use style classes such as .toggle, .popup, .scale,
// .lock, .color on the button node to differentiate themselves from a plain
// `GtkButton`.
//
//
// Accessibility
//
// `GtkButton` uses the GTK_ACCESSIBLE_ROLE_BUTTON role.
type Button interface {
	Widget
	Accessible
	Actionable
	Buildable
	ConstraintTarget

	// Child gets the child widget of @button.
	Child() Widget
	// HasFrame returns whether the button has a frame.
	HasFrame() bool
	// IconName returns the icon name of the button.
	//
	// If the icon name has not been set with [method@Gtk.Button.set_icon_name]
	// the return value will be nil. This will be the case if you create an
	// empty button with [ctor@Gtk.Button.new] to use as a container.
	IconName() string
	// Label fetches the text from the label of the button.
	//
	// If the label text has not been set with [method@Gtk.Button.set_label] the
	// return value will be nil. This will be the case if you create an empty
	// button with [ctor@Gtk.Button.new] to use as a container.
	Label() string
	// UseUnderline gets whether underlines are interpreted as mnemonics.
	//
	// See [method@Gtk.Button.set_use_underline].
	UseUnderline() bool
	// SetChild sets the child widget of @button.
	SetChild(child Widget)
	// SetHasFrame sets the style of the button.
	//
	// Buttons can has a flat appearance or have a frame drawn around them.
	SetHasFrame(hasFrame bool)
	// SetIconName adds a `GtkImage` with the given icon name as a child.
	//
	// If @button already contains a child widget, that child widget will be
	// removed and replaced with the image.
	SetIconName(iconName string)
	// SetLabel sets the text of the label of the button to @label.
	//
	// This will also clear any previously set labels.
	SetLabel(label string)
	// SetUseUnderline sets whether to use underlines as mnemonics.
	//
	// If true, an underline in the text of the button label indicates the next
	// character should be used for the mnemonic accelerator key.
	SetUseUnderline(useUnderline bool)
}

// button implements the Button interface.
type button struct {
	Widget
	Accessible
	Actionable
	Buildable
	ConstraintTarget
}

var _ Button = (*button)(nil)

// WrapButton wraps a GObject to the right type. It is
// primarily used internally.
func WrapButton(obj *externglib.Object) Button {
	return Button{
		Widget:           WrapWidget(obj),
		Accessible:       WrapAccessible(obj),
		Actionable:       WrapActionable(obj),
		Buildable:        WrapBuildable(obj),
		ConstraintTarget: WrapConstraintTarget(obj),
	}
}

func marshalButton(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapButton(obj), nil
}

// NewButton constructs a class Button.
func NewButton() Button {
	var cret C.GtkButton
	var goret Button

	cret = C.gtk_button_new()

	goret = gextras.CastObject(externglib.Take(unsafe.Pointer(cret.Native()))).(Button)

	return goret
}

// NewButtonFromIconName constructs a class Button.
func NewButtonFromIconName(iconName string) Button {
	var arg1 *C.char

	arg1 = (*C.char)(C.CString(iconName))
	defer C.free(unsafe.Pointer(arg1))

	var cret C.GtkButton
	var goret Button

	cret = C.gtk_button_new_from_icon_name(arg1)

	goret = gextras.CastObject(externglib.Take(unsafe.Pointer(cret.Native()))).(Button)

	return goret
}

// NewButtonWithLabel constructs a class Button.
func NewButtonWithLabel(label string) Button {
	var arg1 *C.char

	arg1 = (*C.char)(C.CString(label))
	defer C.free(unsafe.Pointer(arg1))

	var cret C.GtkButton
	var goret Button

	cret = C.gtk_button_new_with_label(arg1)

	goret = gextras.CastObject(externglib.Take(unsafe.Pointer(cret.Native()))).(Button)

	return goret
}

// NewButtonWithMnemonic constructs a class Button.
func NewButtonWithMnemonic(label string) Button {
	var arg1 *C.char

	arg1 = (*C.char)(C.CString(label))
	defer C.free(unsafe.Pointer(arg1))

	var cret C.GtkButton
	var goret Button

	cret = C.gtk_button_new_with_mnemonic(arg1)

	goret = gextras.CastObject(externglib.Take(unsafe.Pointer(cret.Native()))).(Button)

	return goret
}

// Child gets the child widget of @button.
func (b button) Child() Widget {
	var arg0 *C.GtkButton

	arg0 = (*C.GtkButton)(unsafe.Pointer(b.Native()))

	var cret *C.GtkWidget
	var goret Widget

	cret = C.gtk_button_get_child(arg0)

	goret = gextras.CastObject(externglib.Take(unsafe.Pointer(cret.Native()))).(Widget)

	return goret
}

// HasFrame returns whether the button has a frame.
func (b button) HasFrame() bool {
	var arg0 *C.GtkButton

	arg0 = (*C.GtkButton)(unsafe.Pointer(b.Native()))

	var cret C.gboolean
	var goret bool

	cret = C.gtk_button_get_has_frame(arg0)

	if cret {
		goret = true
	}

	return goret
}

// IconName returns the icon name of the button.
//
// If the icon name has not been set with [method@Gtk.Button.set_icon_name]
// the return value will be nil. This will be the case if you create an
// empty button with [ctor@Gtk.Button.new] to use as a container.
func (b button) IconName() string {
	var arg0 *C.GtkButton

	arg0 = (*C.GtkButton)(unsafe.Pointer(b.Native()))

	var cret *C.char
	var goret string

	cret = C.gtk_button_get_icon_name(arg0)

	goret = C.GoString(cret)

	return goret
}

// Label fetches the text from the label of the button.
//
// If the label text has not been set with [method@Gtk.Button.set_label] the
// return value will be nil. This will be the case if you create an empty
// button with [ctor@Gtk.Button.new] to use as a container.
func (b button) Label() string {
	var arg0 *C.GtkButton

	arg0 = (*C.GtkButton)(unsafe.Pointer(b.Native()))

	var cret *C.char
	var goret string

	cret = C.gtk_button_get_label(arg0)

	goret = C.GoString(cret)

	return goret
}

// UseUnderline gets whether underlines are interpreted as mnemonics.
//
// See [method@Gtk.Button.set_use_underline].
func (b button) UseUnderline() bool {
	var arg0 *C.GtkButton

	arg0 = (*C.GtkButton)(unsafe.Pointer(b.Native()))

	var cret C.gboolean
	var goret bool

	cret = C.gtk_button_get_use_underline(arg0)

	if cret {
		goret = true
	}

	return goret
}

// SetChild sets the child widget of @button.
func (b button) SetChild(child Widget) {
	var arg0 *C.GtkButton
	var arg1 *C.GtkWidget

	arg0 = (*C.GtkButton)(unsafe.Pointer(b.Native()))
	arg1 = (*C.GtkWidget)(unsafe.Pointer(child.Native()))

	C.gtk_button_set_child(arg0, arg1)
}

// SetHasFrame sets the style of the button.
//
// Buttons can has a flat appearance or have a frame drawn around them.
func (b button) SetHasFrame(hasFrame bool) {
	var arg0 *C.GtkButton
	var arg1 C.gboolean

	arg0 = (*C.GtkButton)(unsafe.Pointer(b.Native()))
	if hasFrame {
		arg1 = C.gboolean(1)
	}

	C.gtk_button_set_has_frame(arg0, arg1)
}

// SetIconName adds a `GtkImage` with the given icon name as a child.
//
// If @button already contains a child widget, that child widget will be
// removed and replaced with the image.
func (b button) SetIconName(iconName string) {
	var arg0 *C.GtkButton
	var arg1 *C.char

	arg0 = (*C.GtkButton)(unsafe.Pointer(b.Native()))
	arg1 = (*C.char)(C.CString(iconName))
	defer C.free(unsafe.Pointer(arg1))

	C.gtk_button_set_icon_name(arg0, arg1)
}

// SetLabel sets the text of the label of the button to @label.
//
// This will also clear any previously set labels.
func (b button) SetLabel(label string) {
	var arg0 *C.GtkButton
	var arg1 *C.char

	arg0 = (*C.GtkButton)(unsafe.Pointer(b.Native()))
	arg1 = (*C.char)(C.CString(label))
	defer C.free(unsafe.Pointer(arg1))

	C.gtk_button_set_label(arg0, arg1)
}

// SetUseUnderline sets whether to use underlines as mnemonics.
//
// If true, an underline in the text of the button label indicates the next
// character should be used for the mnemonic accelerator key.
func (b button) SetUseUnderline(useUnderline bool) {
	var arg0 *C.GtkButton
	var arg1 C.gboolean

	arg0 = (*C.GtkButton)(unsafe.Pointer(b.Native()))
	if useUnderline {
		arg1 = C.gboolean(1)
	}

	C.gtk_button_set_use_underline(arg0, arg1)
}
