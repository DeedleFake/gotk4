// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_button_get_type()), F: marshalButton},
	})
}

// Button: the `GtkButton` widget is generally used to trigger a callback
// function that is called when the button is pressed.
//
// !An example GtkButton (button.png)
//
// The `GtkButton` widget can hold any valid child widget. That is, it can hold
// almost any other standard `GtkWidget`. The most commonly used child is the
// `GtkLabel`.
//
//
// CSS nodes
//
// `GtkButton` has a single CSS node with name button. The node will get the
// style classes .image-button or .text-button, if the content is just an image
// or label, respectively. It may also receive the .flat style class. When
// activating a button via the keyboard, the button will temporarily gain the
// .keyboard-activating style class.
//
// Other style classes that are commonly used with `GtkButton` include
// .suggested-action and .destructive-action. In special cases, buttons can be
// made round by adding the .circular style class.
//
// Button-like widgets like [class@Gtk.ToggleButton], [class@Gtk.MenuButton],
// [class@Gtk.VolumeButton], [class@Gtk.LockButton], [class@Gtk.ColorButton] or
// [class@Gtk.FontButton] use style classes such as .toggle, .popup, .scale,
// .lock, .color on the button node to differentiate themselves from a plain
// `GtkButton`.
//
//
// Accessibility
//
// `GtkButton` uses the GTK_ACCESSIBLE_ROLE_BUTTON role.
type Button interface {
	Widget

	// AsAccessible casts the class to the Accessible interface.
	AsAccessible() Accessible
	// AsActionable casts the class to the Actionable interface.
	AsActionable() Actionable
	// AsBuildable casts the class to the Buildable interface.
	AsBuildable() Buildable
	// AsConstraintTarget casts the class to the ConstraintTarget interface.
	AsConstraintTarget() ConstraintTarget

	// Child gets the child widget of @button.
	Child() Widget
	// HasFrame returns whether the button has a frame.
	HasFrame() bool
	// IconName returns the icon name of the button.
	//
	// If the icon name has not been set with [method@Gtk.Button.set_icon_name]
	// the return value will be nil. This will be the case if you create an
	// empty button with [ctor@Gtk.Button.new] to use as a container.
	IconName() string
	// Label fetches the text from the label of the button.
	//
	// If the label text has not been set with [method@Gtk.Button.set_label] the
	// return value will be nil. This will be the case if you create an empty
	// button with [ctor@Gtk.Button.new] to use as a container.
	Label() string
	// UseUnderline gets whether underlines are interpreted as mnemonics.
	//
	// See [method@Gtk.Button.set_use_underline].
	UseUnderline() bool
	// SetChildButton sets the child widget of @button.
	SetChildButton(child Widget)
	// SetHasFrameButton sets the style of the button.
	//
	// Buttons can has a flat appearance or have a frame drawn around them.
	SetHasFrameButton(hasFrame bool)
	// SetIconNameButton adds a `GtkImage` with the given icon name as a child.
	//
	// If @button already contains a child widget, that child widget will be
	// removed and replaced with the image.
	SetIconNameButton(iconName string)
	// SetLabelButton sets the text of the label of the button to @label.
	//
	// This will also clear any previously set labels.
	SetLabelButton(label string)
	// SetUseUnderlineButton sets whether to use underlines as mnemonics.
	//
	// If true, an underline in the text of the button label indicates the next
	// character should be used for the mnemonic accelerator key.
	SetUseUnderlineButton(useUnderline bool)
}

// button implements the Button class.
type button struct {
	Widget
}

// WrapButton wraps a GObject to the right type. It is
// primarily used internally.
func WrapButton(obj *externglib.Object) Button {
	return button{
		Widget: WrapWidget(obj),
	}
}

func marshalButton(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapButton(obj), nil
}

// NewButton creates a new `GtkButton` widget.
//
// To add a child widget to the button, use [method@Gtk.Button.set_child].
func NewButton() Button {
	var _cret *C.GtkWidget // in

	_cret = C.gtk_button_new()

	var _button Button // out

	_button = WrapButton(externglib.Take(unsafe.Pointer(_cret)))

	return _button
}

// NewButtonFromIconName creates a new button containing an icon from the
// current icon theme.
//
// If the icon name isn’t known, a “broken image” icon will be displayed
// instead. If the current icon theme is changed, the icon will be updated
// appropriately.
func NewButtonFromIconName(iconName string) Button {
	var _arg1 *C.char      // out
	var _cret *C.GtkWidget // in

	_arg1 = (*C.char)(C.CString(iconName))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_button_new_from_icon_name(_arg1)

	var _button Button // out

	_button = WrapButton(externglib.Take(unsafe.Pointer(_cret)))

	return _button
}

// NewButtonWithLabel creates a `GtkButton` widget with a `GtkLabel` child.
func NewButtonWithLabel(label string) Button {
	var _arg1 *C.char      // out
	var _cret *C.GtkWidget // in

	_arg1 = (*C.char)(C.CString(label))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_button_new_with_label(_arg1)

	var _button Button // out

	_button = WrapButton(externglib.Take(unsafe.Pointer(_cret)))

	return _button
}

// NewButtonWithMnemonic creates a new `GtkButton` containing a label.
//
// If characters in @label are preceded by an underscore, they are underlined.
// If you need a literal underscore character in a label, use “__” (two
// underscores). The first underlined character represents a keyboard
// accelerator called a mnemonic. Pressing Alt and that key activates the
// button.
func NewButtonWithMnemonic(label string) Button {
	var _arg1 *C.char      // out
	var _cret *C.GtkWidget // in

	_arg1 = (*C.char)(C.CString(label))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_button_new_with_mnemonic(_arg1)

	var _button Button // out

	_button = WrapButton(externglib.Take(unsafe.Pointer(_cret)))

	return _button
}

func (b button) Child() Widget {
	var _arg0 *C.GtkButton // out
	var _cret *C.GtkWidget // in

	_arg0 = (*C.GtkButton)(unsafe.Pointer(b.Native()))

	_cret = C.gtk_button_get_child(_arg0)

	var _widget Widget // out

	_widget = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Widget)

	return _widget
}

func (b button) HasFrame() bool {
	var _arg0 *C.GtkButton // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkButton)(unsafe.Pointer(b.Native()))

	_cret = C.gtk_button_get_has_frame(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (b button) IconName() string {
	var _arg0 *C.GtkButton // out
	var _cret *C.char      // in

	_arg0 = (*C.GtkButton)(unsafe.Pointer(b.Native()))

	_cret = C.gtk_button_get_icon_name(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

func (b button) Label() string {
	var _arg0 *C.GtkButton // out
	var _cret *C.char      // in

	_arg0 = (*C.GtkButton)(unsafe.Pointer(b.Native()))

	_cret = C.gtk_button_get_label(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

func (b button) UseUnderline() bool {
	var _arg0 *C.GtkButton // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkButton)(unsafe.Pointer(b.Native()))

	_cret = C.gtk_button_get_use_underline(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (b button) SetChildButton(child Widget) {
	var _arg0 *C.GtkButton // out
	var _arg1 *C.GtkWidget // out

	_arg0 = (*C.GtkButton)(unsafe.Pointer(b.Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(child.Native()))

	C.gtk_button_set_child(_arg0, _arg1)
}

func (b button) SetHasFrameButton(hasFrame bool) {
	var _arg0 *C.GtkButton // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GtkButton)(unsafe.Pointer(b.Native()))
	if hasFrame {
		_arg1 = C.TRUE
	}

	C.gtk_button_set_has_frame(_arg0, _arg1)
}

func (b button) SetIconNameButton(iconName string) {
	var _arg0 *C.GtkButton // out
	var _arg1 *C.char      // out

	_arg0 = (*C.GtkButton)(unsafe.Pointer(b.Native()))
	_arg1 = (*C.char)(C.CString(iconName))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_button_set_icon_name(_arg0, _arg1)
}

func (b button) SetLabelButton(label string) {
	var _arg0 *C.GtkButton // out
	var _arg1 *C.char      // out

	_arg0 = (*C.GtkButton)(unsafe.Pointer(b.Native()))
	_arg1 = (*C.char)(C.CString(label))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_button_set_label(_arg0, _arg1)
}

func (b button) SetUseUnderlineButton(useUnderline bool) {
	var _arg0 *C.GtkButton // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GtkButton)(unsafe.Pointer(b.Native()))
	if useUnderline {
		_arg1 = C.TRUE
	}

	C.gtk_button_set_use_underline(_arg0, _arg1)
}

func (b button) AsAccessible() Accessible {
	return WrapAccessible(gextras.InternObject(b))
}

func (b button) AsActionable() Actionable {
	return WrapActionable(gextras.InternObject(b))
}

func (b button) AsBuildable() Buildable {
	return WrapBuildable(gextras.InternObject(b))
}

func (b button) AsConstraintTarget() ConstraintTarget {
	return WrapConstraintTarget(gextras.InternObject(b))
}
