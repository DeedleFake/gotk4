// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/gdk/v4"
	"github.com/diamondburned/gotk4/pkg/pango"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_im_context_get_type()), F: marshalIMContext},
	})
}

// IMContext: `GtkIMContext` defines the interface for GTK input methods.
//
// `GtkIMContext` is used by GTK text input widgets like `GtkText` to map from
// key events to Unicode character strings.
//
// By default, GTK uses a platform-dependent default input method. On Windows,
// the default implementation is IME-based and on Wayland, it is using the
// Wayland text protocol. The choice can be overridden programmatically via the
// [property@Gtk.Settings:gtk-im-module] setting. Users may set the
// `GTK_IM_MODULE` environment variable to override the default.
//
// Text widgets have a :im-module property (e.g.
// [property@Gtk.TextView:im-module]) that may also be used to set input methods
// for specific widget instances. For instance, a certain entry widget might be
// expected to contain certain characters which would be easier to input with a
// specific input method.
//
// An input method may consume multiple key events in sequence before finally
// outputting the composed result. This is called *preediting*, and an input
// method may provide feedback about this process by displaying the intermediate
// composition states as preedit text.
//
// For instance, the built-in GTK input method `GtkIMContextSimple` implements
// the input of arbitrary Unicode code points by holding down the
// <kbd>Control</kbd> and <kbd>Shift</kbd> keys and then typing <kbd>U</kbd>
// followed by the hexadecimal digits of the code point. When releasing the
// <kbd>Control</kbd> and <kbd>Shift</kbd> keys, preediting ends and the
// character is inserted as text. For example,
//
//    Ctrl+Shift+u 2 0 A C
//
// results in the â‚¬ sign.
//
// Additional input methods can be made available for use by GTK widgets as
// loadable modules. An input method module is a small shared library which
// provides a `GIOExtension` for the extension point named "gtk-im-module".
type IMContext interface {
	gextras.Objector

	// DeleteSurrounding asks the widget that the input context is attached to
	// delete characters around the cursor position by emitting the
	// GtkIMContext::delete_surrounding signal.
	//
	// Note that @offset and @n_chars are in characters not in bytes which
	// differs from the usage other places in IMContext.
	//
	// In order to use this function, you should first call
	// gtk_im_context_get_surrounding() to get the current context, and call
	// this function immediately afterwards to make sure that you know what you
	// are deleting. You should also account for the fact that even if the
	// signal was handled, the input context might not have deleted all the
	// characters that were requested to be deleted.
	//
	// This function is used by an input method that wants to make subsitutions
	// in the existing text in response to new input. It is not useful for
	// applications.
	DeleteSurrounding(offset int, nChars int) bool
	// FilterKey: allow an input method to forward key press and release events
	// to another input methodm without necessarily having a `GdkEvent`
	// available.
	FilterKey(press bool, surface gdk.Surface, device gdk.Device, time uint32, keycode uint, state gdk.ModifierType, group int) bool
	// FilterKeypress: allow an input method to internally handle key press and
	// release events.
	//
	// If this function returns true, then no further processing should be done
	// for this key event.
	FilterKeypress(event gdk.Event) bool
	// FocusIn: notify the input method that the widget to which this input
	// context corresponds has gained focus.
	//
	// The input method may, for example, change the displayed feedback to
	// reflect this change.
	FocusIn()
	// FocusOut: notify the input method that the widget to which this input
	// context corresponds has lost focus.
	//
	// The input method may, for example, change the displayed feedback or reset
	// the contexts state to reflect this change.
	FocusOut()
	// PreeditString: retrieve the current preedit string for the input context,
	// and a list of attributes to apply to the string.
	//
	// This string should be displayed inserted at the insertion point.
	PreeditString() (str string, attrs **pango.AttrList, cursorPos int)
	// Surrounding retrieves context around the insertion point.
	//
	// Input methods typically want context in order to constrain input text
	// based on existing text; this is important for languages such as Thai
	// where only some sequences of characters are allowed.
	//
	// This function is implemented by emitting the
	// [signal@Gtk.IMContext::retrieve-surrounding] signal on the input method;
	// in response to this signal, a widget should provide as much context as is
	// available, up to an entire paragraph, by calling
	// [method@Gtk.IMContext.set_surrounding].
	//
	// Note that there is no obligation for a widget to respond to the
	// `::retrieve-surrounding` signal, so input methods must be prepared to
	// function without context.
	Surrounding() (text string, cursorIndex int, ok bool)
	// SurroundingWithSelection retrieves context around the insertion point.
	//
	// Input methods typically want context in order to constrain input text
	// based on existing text; this is important for languages such as Thai
	// where only some sequences of characters are allowed.
	//
	// This function is implemented by emitting the
	// [signal@Gtk.IMContext::retrieve-surrounding] signal on the input method;
	// in response to this signal, a widget should provide as much context as is
	// available, up to an entire paragraph, by calling
	// [method@Gtk.IMContext.set_surrounding_with_selection].
	//
	// Note that there is no obligation for a widget to respond to the
	// `::retrieve-surrounding` signal, so input methods must be prepared to
	// function without context.
	SurroundingWithSelection() (text string, cursorIndex int, anchorIndex int, ok bool)
	// Reset: notify the input method that a change such as a change in cursor
	// position has been made.
	//
	// This will typically cause the input method to clear the preedit state.
	Reset()
	// SetClientWidget: set the client widget for the input context.
	//
	// This is the `GtkWidget` holding the input focus. This widget is used in
	// order to correctly position status windows, and may also be used for
	// purposes internal to the input method.
	SetClientWidget(widget Widget)
	// SetCursorLocation: notify the input method that a change in cursor
	// position has been made.
	//
	// The location is relative to the client window.
	SetCursorLocation(area *gdk.Rectangle)
	// SetSurrounding sets surrounding context around the insertion point and
	// preedit string.
	//
	// This function is expected to be called in response to the
	// [signal@Gtk.IMContext::retrieve-surrounding] signal, and will likely have
	// no effect if called at other times.
	SetSurrounding(text string, len int, cursorIndex int)
	// SetSurroundingWithSelection sets surrounding context around the insertion
	// point and preedit string. This function is expected to be called in
	// response to the GtkIMContext::retrieve_surrounding signal, and will
	// likely have no effect if called at other times.
	SetSurroundingWithSelection(text string, len int, cursorIndex int, anchorIndex int)
	// SetUsePreedit sets whether the IM context should use the preedit string
	// to display feedback.
	//
	// If @use_preedit is false (default is true), then the IM context may use
	// some other method to display feedback, such as displaying it in a child
	// of the root window.
	SetUsePreedit(usePreedit bool)
}

// imContext implements the IMContext interface.
type imContext struct {
	gextras.Objector
}

var _ IMContext = (*imContext)(nil)

// WrapIMContext wraps a GObject to the right type. It is
// primarily used internally.
func WrapIMContext(obj *externglib.Object) IMContext {
	return IMContext{
		Objector: obj,
	}
}

func marshalIMContext(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapIMContext(obj), nil
}

// DeleteSurrounding asks the widget that the input context is attached to
// delete characters around the cursor position by emitting the
// GtkIMContext::delete_surrounding signal.
//
// Note that @offset and @n_chars are in characters not in bytes which
// differs from the usage other places in IMContext.
//
// In order to use this function, you should first call
// gtk_im_context_get_surrounding() to get the current context, and call
// this function immediately afterwards to make sure that you know what you
// are deleting. You should also account for the fact that even if the
// signal was handled, the input context might not have deleted all the
// characters that were requested to be deleted.
//
// This function is used by an input method that wants to make subsitutions
// in the existing text in response to new input. It is not useful for
// applications.
func (c imContext) DeleteSurrounding(offset int, nChars int) bool {
	var arg0 *C.GtkIMContext
	var arg1 C.int
	var arg2 C.int

	arg0 = (*C.GtkIMContext)(unsafe.Pointer(c.Native()))
	arg1 = C.int(offset)
	arg2 = C.int(nChars)

	var cret C.gboolean
	var goret bool

	cret = C.gtk_im_context_delete_surrounding(arg0, arg1, arg2)

	if cret {
		goret = true
	}

	return goret
}

// FilterKey: allow an input method to forward key press and release events
// to another input methodm without necessarily having a `GdkEvent`
// available.
func (c imContext) FilterKey(press bool, surface gdk.Surface, device gdk.Device, time uint32, keycode uint, state gdk.ModifierType, group int) bool {
	var arg0 *C.GtkIMContext
	var arg1 C.gboolean
	var arg2 *C.GdkSurface
	var arg3 *C.GdkDevice
	var arg4 C.guint32
	var arg5 C.guint
	var arg6 C.GdkModifierType
	var arg7 C.int

	arg0 = (*C.GtkIMContext)(unsafe.Pointer(c.Native()))
	if press {
		arg1 = C.gboolean(1)
	}
	arg2 = (*C.GdkSurface)(unsafe.Pointer(surface.Native()))
	arg3 = (*C.GdkDevice)(unsafe.Pointer(device.Native()))
	arg4 = C.guint32(time)
	arg5 = C.guint(keycode)
	arg6 = (C.GdkModifierType)(state)
	arg7 = C.int(group)

	var cret C.gboolean
	var goret bool

	cret = C.gtk_im_context_filter_key(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)

	if cret {
		goret = true
	}

	return goret
}

// FilterKeypress: allow an input method to internally handle key press and
// release events.
//
// If this function returns true, then no further processing should be done
// for this key event.
func (c imContext) FilterKeypress(event gdk.Event) bool {
	var arg0 *C.GtkIMContext
	var arg1 *C.GdkEvent

	arg0 = (*C.GtkIMContext)(unsafe.Pointer(c.Native()))
	arg1 = (*C.GdkEvent)(unsafe.Pointer(event.Native()))

	var cret C.gboolean
	var goret bool

	cret = C.gtk_im_context_filter_keypress(arg0, arg1)

	if cret {
		goret = true
	}

	return goret
}

// FocusIn: notify the input method that the widget to which this input
// context corresponds has gained focus.
//
// The input method may, for example, change the displayed feedback to
// reflect this change.
func (c imContext) FocusIn() {
	var arg0 *C.GtkIMContext

	arg0 = (*C.GtkIMContext)(unsafe.Pointer(c.Native()))

	C.gtk_im_context_focus_in(arg0)
}

// FocusOut: notify the input method that the widget to which this input
// context corresponds has lost focus.
//
// The input method may, for example, change the displayed feedback or reset
// the contexts state to reflect this change.
func (c imContext) FocusOut() {
	var arg0 *C.GtkIMContext

	arg0 = (*C.GtkIMContext)(unsafe.Pointer(c.Native()))

	C.gtk_im_context_focus_out(arg0)
}

// PreeditString: retrieve the current preedit string for the input context,
// and a list of attributes to apply to the string.
//
// This string should be displayed inserted at the insertion point.
func (c imContext) PreeditString() (str string, attrs **pango.AttrList, cursorPos int) {
	var arg0 *C.GtkIMContext

	arg0 = (*C.GtkIMContext)(unsafe.Pointer(c.Native()))

	arg1 := new(*C.char)
	var ret1 string
	arg2 := new(*C.PangoAttrList)
	var ret2 **pango.AttrList
	arg3 := new(C.int)
	var ret3 int

	C.gtk_im_context_get_preedit_string(arg0, arg1, arg2, arg3)

	ret1 = C.GoString(*arg1)
	defer C.free(unsafe.Pointer(*arg1))
	ret2 = pango.WrapAttrList(unsafe.Pointer(arg2))
	runtime.SetFinalizer(ret2, func(v **pango.AttrList) {
		C.free(unsafe.Pointer(v.Native()))
	})
	ret3 = int(*arg3)

	return ret1, ret2, ret3
}

// Surrounding retrieves context around the insertion point.
//
// Input methods typically want context in order to constrain input text
// based on existing text; this is important for languages such as Thai
// where only some sequences of characters are allowed.
//
// This function is implemented by emitting the
// [signal@Gtk.IMContext::retrieve-surrounding] signal on the input method;
// in response to this signal, a widget should provide as much context as is
// available, up to an entire paragraph, by calling
// [method@Gtk.IMContext.set_surrounding].
//
// Note that there is no obligation for a widget to respond to the
// `::retrieve-surrounding` signal, so input methods must be prepared to
// function without context.
func (c imContext) Surrounding() (text string, cursorIndex int, ok bool) {
	var arg0 *C.GtkIMContext

	arg0 = (*C.GtkIMContext)(unsafe.Pointer(c.Native()))

	arg1 := new(*C.char)
	var ret1 string
	arg2 := new(C.int)
	var ret2 int
	var cret C.gboolean
	var goret bool

	cret = C.gtk_im_context_get_surrounding(arg0, arg1, arg2)

	ret1 = C.GoString(*arg1)
	defer C.free(unsafe.Pointer(*arg1))
	ret2 = int(*arg2)
	if cret {
		goret = true
	}

	return ret1, ret2, goret
}

// SurroundingWithSelection retrieves context around the insertion point.
//
// Input methods typically want context in order to constrain input text
// based on existing text; this is important for languages such as Thai
// where only some sequences of characters are allowed.
//
// This function is implemented by emitting the
// [signal@Gtk.IMContext::retrieve-surrounding] signal on the input method;
// in response to this signal, a widget should provide as much context as is
// available, up to an entire paragraph, by calling
// [method@Gtk.IMContext.set_surrounding_with_selection].
//
// Note that there is no obligation for a widget to respond to the
// `::retrieve-surrounding` signal, so input methods must be prepared to
// function without context.
func (c imContext) SurroundingWithSelection() (text string, cursorIndex int, anchorIndex int, ok bool) {
	var arg0 *C.GtkIMContext

	arg0 = (*C.GtkIMContext)(unsafe.Pointer(c.Native()))

	arg1 := new(*C.char)
	var ret1 string
	arg2 := new(C.int)
	var ret2 int
	arg3 := new(C.int)
	var ret3 int
	var cret C.gboolean
	var goret bool

	cret = C.gtk_im_context_get_surrounding_with_selection(arg0, arg1, arg2, arg3)

	ret1 = C.GoString(*arg1)
	defer C.free(unsafe.Pointer(*arg1))
	ret2 = int(*arg2)
	ret3 = int(*arg3)
	if cret {
		goret = true
	}

	return ret1, ret2, ret3, goret
}

// Reset: notify the input method that a change such as a change in cursor
// position has been made.
//
// This will typically cause the input method to clear the preedit state.
func (c imContext) Reset() {
	var arg0 *C.GtkIMContext

	arg0 = (*C.GtkIMContext)(unsafe.Pointer(c.Native()))

	C.gtk_im_context_reset(arg0)
}

// SetClientWidget: set the client widget for the input context.
//
// This is the `GtkWidget` holding the input focus. This widget is used in
// order to correctly position status windows, and may also be used for
// purposes internal to the input method.
func (c imContext) SetClientWidget(widget Widget) {
	var arg0 *C.GtkIMContext
	var arg1 *C.GtkWidget

	arg0 = (*C.GtkIMContext)(unsafe.Pointer(c.Native()))
	arg1 = (*C.GtkWidget)(unsafe.Pointer(widget.Native()))

	C.gtk_im_context_set_client_widget(arg0, arg1)
}

// SetCursorLocation: notify the input method that a change in cursor
// position has been made.
//
// The location is relative to the client window.
func (c imContext) SetCursorLocation(area *gdk.Rectangle) {
	var arg0 *C.GtkIMContext
	var arg1 *C.GdkRectangle

	arg0 = (*C.GtkIMContext)(unsafe.Pointer(c.Native()))
	arg1 = (*C.GdkRectangle)(unsafe.Pointer(area.Native()))

	C.gtk_im_context_set_cursor_location(arg0, arg1)
}

// SetSurrounding sets surrounding context around the insertion point and
// preedit string.
//
// This function is expected to be called in response to the
// [signal@Gtk.IMContext::retrieve-surrounding] signal, and will likely have
// no effect if called at other times.
func (c imContext) SetSurrounding(text string, len int, cursorIndex int) {
	var arg0 *C.GtkIMContext
	var arg1 *C.char
	var arg2 C.int
	var arg3 C.int

	arg0 = (*C.GtkIMContext)(unsafe.Pointer(c.Native()))
	arg1 = (*C.char)(C.CString(text))
	defer C.free(unsafe.Pointer(arg1))
	arg2 = C.int(len)
	arg3 = C.int(cursorIndex)

	C.gtk_im_context_set_surrounding(arg0, arg1, arg2, arg3)
}

// SetSurroundingWithSelection sets surrounding context around the insertion
// point and preedit string. This function is expected to be called in
// response to the GtkIMContext::retrieve_surrounding signal, and will
// likely have no effect if called at other times.
func (c imContext) SetSurroundingWithSelection(text string, len int, cursorIndex int, anchorIndex int) {
	var arg0 *C.GtkIMContext
	var arg1 *C.char
	var arg2 C.int
	var arg3 C.int
	var arg4 C.int

	arg0 = (*C.GtkIMContext)(unsafe.Pointer(c.Native()))
	arg1 = (*C.char)(C.CString(text))
	defer C.free(unsafe.Pointer(arg1))
	arg2 = C.int(len)
	arg3 = C.int(cursorIndex)
	arg4 = C.int(anchorIndex)

	C.gtk_im_context_set_surrounding_with_selection(arg0, arg1, arg2, arg3, arg4)
}

// SetUsePreedit sets whether the IM context should use the preedit string
// to display feedback.
//
// If @use_preedit is false (default is true), then the IM context may use
// some other method to display feedback, such as displaying it in a child
// of the root window.
func (c imContext) SetUsePreedit(usePreedit bool) {
	var arg0 *C.GtkIMContext
	var arg1 C.gboolean

	arg0 = (*C.GtkIMContext)(unsafe.Pointer(c.Native()))
	if usePreedit {
		arg1 = C.gboolean(1)
	}

	C.gtk_im_context_set_use_preedit(arg0, arg1)
}
