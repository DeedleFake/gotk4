// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/gsk/v4"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_fixed_layout_get_type()), F: marshalFixedLayout},
		{T: externglib.Type(C.gtk_fixed_layout_child_get_type()), F: marshalFixedLayoutChild},
	})
}

// FixedLayout: `GtkFixedLayout` is a layout manager which can place child
// widgets at fixed positions.
//
// Most applications should never use this layout manager; fixed positioning and
// sizing requires constant recalculations on where children need to be
// positioned and sized. Other layout managers perform this kind of work
// internally so that application developers don't need to do it. Specifically,
// widgets positioned in a fixed layout manager will need to take into account:
//
// - Themes, which may change widget sizes.
//
// - Fonts other than the one you used to write the app will of course change
// the size of widgets containing text; keep in mind that users may use a larger
// font because of difficulty reading the default, or they may be using a
// different OS that provides different fonts.
//
// - Translation of text into other languages changes its size. Also, display of
// non-English text will use a different font in many cases.
//
// In addition, `GtkFixedLayout` does not pay attention to text direction and
// thus may produce unwanted results if your app is run under right-to-left
// languages such as Hebrew or Arabic. That is: normally GTK will order
// containers appropriately depending on the text direction, e.g. to put labels
// to the right of the thing they label when using an RTL language;
// `GtkFixedLayout` won't be able to do that for you.
//
// Finally, fixed positioning makes it kind of annoying to add/remove UI
// elements, since you have to reposition all the other elements. This is a
// long-term maintenance problem for your application.
type FixedLayout interface {
	LayoutManager
}

// fixedLayout implements the FixedLayout class.
type fixedLayout struct {
	LayoutManager
}

// WrapFixedLayout wraps a GObject to the right type. It is
// primarily used internally.
func WrapFixedLayout(obj *externglib.Object) FixedLayout {
	return fixedLayout{
		LayoutManager: WrapLayoutManager(obj),
	}
}

func marshalFixedLayout(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapFixedLayout(obj), nil
}

// NewFixedLayout:
func NewFixedLayout() FixedLayout {
	var _cret *C.GtkLayoutManager // in

	_cret = C.gtk_fixed_layout_new()

	var _fixedLayout FixedLayout // out

	_fixedLayout = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(FixedLayout)

	return _fixedLayout
}

// FixedLayoutChild: `GtkLayoutChild` subclass for children in a
// `GtkFixedLayout`.
type FixedLayoutChild interface {
	LayoutChild

	// Transform:
	Transform() *gsk.Transform
	// SetTransformFixedLayoutChild:
	SetTransformFixedLayoutChild(transform *gsk.Transform)
}

// fixedLayoutChild implements the FixedLayoutChild class.
type fixedLayoutChild struct {
	LayoutChild
}

// WrapFixedLayoutChild wraps a GObject to the right type. It is
// primarily used internally.
func WrapFixedLayoutChild(obj *externglib.Object) FixedLayoutChild {
	return fixedLayoutChild{
		LayoutChild: WrapLayoutChild(obj),
	}
}

func marshalFixedLayoutChild(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapFixedLayoutChild(obj), nil
}

func (c fixedLayoutChild) Transform() *gsk.Transform {
	var _arg0 *C.GtkFixedLayoutChild // out
	var _cret *C.GskTransform        // in

	_arg0 = (*C.GtkFixedLayoutChild)(unsafe.Pointer(c.Native()))

	_cret = C.gtk_fixed_layout_child_get_transform(_arg0)

	var _transform *gsk.Transform // out

	_transform = (*gsk.Transform)(unsafe.Pointer(_cret))

	return _transform
}

func (c fixedLayoutChild) SetTransformFixedLayoutChild(transform *gsk.Transform) {
	var _arg0 *C.GtkFixedLayoutChild // out
	var _arg1 *C.GskTransform        // out

	_arg0 = (*C.GtkFixedLayoutChild)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.GskTransform)(unsafe.Pointer(transform.Native()))

	C.gtk_fixed_layout_child_set_transform(_arg0, _arg1)
}
