// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <stdbool.h>
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_check_button_get_type()), F: marshalCheckButton},
	})
}

// CheckButton: a `GtkCheckButton` places a label next to an indicator.
//
// !Example GtkCheckButtons (check-button.png)
//
// A `GtkCheckButton` is created by calling either [ctor@Gtk.CheckButton.new] or
// [ctor@Gtk.CheckButton.new_with_label].
//
// The state of a `GtkCheckButton` can be set specifically using
// [method@Gtk.CheckButton.set_active], and retrieved using
// [method@Gtk.CheckButton.get_active].
//
//
// Inconsistent state
//
// In addition to "on" and "off", check buttons can be an "in between" state
// that is neither on nor off. This can be used e.g. when the user has selected
// a range of elements (such as some text or spreadsheet cells) that are
// affected by a check button, and the current values in that range are
// inconsistent.
//
// To set a `GtkCheckButton` to inconsistent state, use
// [method@Gtk.CheckButton.set_inconsistent].
//
//
// Grouping
//
// Check buttons can be grouped together, to form mutually exclusive groups -
// only one of the buttons can be toggled at a time, and toggling another one
// will switch the currently toggled one off.
//
// Grouped check buttons use a different indicator, and are commonly referred to
// as *radio buttons*.
//
// !Example GtkCheckButtons (radio-button.png)
//
// To add a `GtkCheckButton` to a group, use [method@Gtk.CheckButton.set_group].
//
//
// CSS nodes
//
// “` checkbutton[.text-button] ├── check ╰── [label] “`
//
// A `GtkCheckButton` has a main node with name checkbutton. If the
// [property@Gtk.CheckButton:label] property is set, it contains a label child.
// The indicator node is named check when no group is set, and radio if the
// checkbutton is grouped together with other checkbuttons.
//
//
// Accessibility
//
// `GtkCheckButton` uses the GTK_ACCESSIBLE_ROLE_CHECKBOX role.
type CheckButton interface {
	Widget
	Accessible
	Actionable
	Buildable
	ConstraintTarget

	// Active returns whether the check button is active.
	Active() bool
	// Inconsistent returns whether the check button is in an inconsistent
	// state.
	Inconsistent() bool
	// Label returns the label of the check button.
	Label() string
	// UseUnderline returns whether underlines in the label indicate mnemonics.
	UseUnderline() bool
	// SetActive changes the check buttons active state.
	SetActive(setting bool)
	// SetGroup adds @self to the group of @group.
	//
	// In a group of multiple check buttons, only one button can be active at a
	// time. The behavior of a checkbutton in a group is also commonly known as
	// a *radio button*.
	//
	// Setting the group of a check button also changes the css name of the
	// indicator widget's CSS node to 'radio'.
	//
	// Setting up groups in a cycle leads to undefined behavior.
	//
	// Note that the same effect can be achieved via the
	// [interface@Gtk.Actionable] API, by using the same action with parameter
	// type and state type 's' for all buttons in the group, and giving each
	// button its own target value.
	SetGroup(group CheckButton)
	// SetInconsistent sets the `GtkCheckButton` to inconsistent state.
	//
	// You shoud turn off the inconsistent state again if the user checks the
	// check button. This has to be done manually.
	SetInconsistent(inconsistent bool)
	// SetLabel sets the text of @self.
	//
	// If [property@Gtk.CheckButton:use-underline] is true, an underscore in
	// @label is interpreted as mnemonic indicator, see
	// [method@Gtk.CheckButton.set_use_underline] for details on this behavior.
	SetLabel(label string)
	// SetUseUnderline sets whether underlines in the label indicate mnemonics.
	//
	// If @setting is true, an underscore character in @self's label indicates a
	// mnemonic accelerator key. This behavior is similar to
	// [property@Gtk.Label:use-underline].
	SetUseUnderline(setting bool)
}

// checkButton implements the CheckButton interface.
type checkButton struct {
	Widget
	Accessible
	Actionable
	Buildable
	ConstraintTarget
}

var _ CheckButton = (*checkButton)(nil)

// WrapCheckButton wraps a GObject to the right type. It is
// primarily used internally.
func WrapCheckButton(obj *externglib.Object) CheckButton {
	return CheckButton{
		Widget:           WrapWidget(obj),
		Accessible:       WrapAccessible(obj),
		Actionable:       WrapActionable(obj),
		Buildable:        WrapBuildable(obj),
		ConstraintTarget: WrapConstraintTarget(obj),
	}
}

func marshalCheckButton(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapCheckButton(obj), nil
}

// NewCheckButton constructs a class CheckButton.
func NewCheckButton() CheckButton {
	ret := C.gtk_check_button_new()

	var ret0 CheckButton

	ret0 = gextras.CastObject(externglib.Take(unsafe.Pointer(ret.Native()))).(CheckButton)

	return ret0
}

// NewCheckButtonWithLabel constructs a class CheckButton.
func NewCheckButtonWithLabel(label string) CheckButton {
	var arg1 *C.char

	arg1 = (*C.gchar)(C.CString(label))
	defer C.free(unsafe.Pointer(arg1))

	ret := C.gtk_check_button_new_with_label(arg1)

	var ret0 CheckButton

	ret0 = gextras.CastObject(externglib.Take(unsafe.Pointer(ret.Native()))).(CheckButton)

	return ret0
}

// NewCheckButtonWithMnemonic constructs a class CheckButton.
func NewCheckButtonWithMnemonic(label string) CheckButton {
	var arg1 *C.char

	arg1 = (*C.gchar)(C.CString(label))
	defer C.free(unsafe.Pointer(arg1))

	ret := C.gtk_check_button_new_with_mnemonic(arg1)

	var ret0 CheckButton

	ret0 = gextras.CastObject(externglib.Take(unsafe.Pointer(ret.Native()))).(CheckButton)

	return ret0
}

// Active returns whether the check button is active.
func (s checkButton) Active() bool {
	var arg0 *C.GtkCheckButton

	arg0 = (*C.GtkCheckButton)(s.Native())

	ret := C.gtk_check_button_get_active(arg0)

	var ret0 bool

	ret0 = C.bool(ret) != C.false

	return ret0
}

// Inconsistent returns whether the check button is in an inconsistent
// state.
func (c checkButton) Inconsistent() bool {
	var arg0 *C.GtkCheckButton

	arg0 = (*C.GtkCheckButton)(c.Native())

	ret := C.gtk_check_button_get_inconsistent(arg0)

	var ret0 bool

	ret0 = C.bool(ret) != C.false

	return ret0
}

// Label returns the label of the check button.
func (s checkButton) Label() string {
	var arg0 *C.GtkCheckButton

	arg0 = (*C.GtkCheckButton)(s.Native())

	ret := C.gtk_check_button_get_label(arg0)

	var ret0 string

	ret0 = C.GoString(ret)

	return ret0
}

// UseUnderline returns whether underlines in the label indicate mnemonics.
func (s checkButton) UseUnderline() bool {
	var arg0 *C.GtkCheckButton

	arg0 = (*C.GtkCheckButton)(s.Native())

	ret := C.gtk_check_button_get_use_underline(arg0)

	var ret0 bool

	ret0 = C.bool(ret) != C.false

	return ret0
}

// SetActive changes the check buttons active state.
func (s checkButton) SetActive(setting bool) {
	var arg0 *C.GtkCheckButton
	var arg1 C.gboolean

	arg0 = (*C.GtkCheckButton)(s.Native())
	if setting {
		arg1 = C.TRUE
	}

	C.gtk_check_button_set_active(arg0, arg1)
}

// SetGroup adds @self to the group of @group.
//
// In a group of multiple check buttons, only one button can be active at a
// time. The behavior of a checkbutton in a group is also commonly known as
// a *radio button*.
//
// Setting the group of a check button also changes the css name of the
// indicator widget's CSS node to 'radio'.
//
// Setting up groups in a cycle leads to undefined behavior.
//
// Note that the same effect can be achieved via the
// [interface@Gtk.Actionable] API, by using the same action with parameter
// type and state type 's' for all buttons in the group, and giving each
// button its own target value.
func (s checkButton) SetGroup(group CheckButton) {
	var arg0 *C.GtkCheckButton
	var arg1 *C.GtkCheckButton

	arg0 = (*C.GtkCheckButton)(s.Native())
	arg1 = (*C.GtkCheckButton)(group.Native())

	C.gtk_check_button_set_group(arg0, arg1)
}

// SetInconsistent sets the `GtkCheckButton` to inconsistent state.
//
// You shoud turn off the inconsistent state again if the user checks the
// check button. This has to be done manually.
func (c checkButton) SetInconsistent(inconsistent bool) {
	var arg0 *C.GtkCheckButton
	var arg1 C.gboolean

	arg0 = (*C.GtkCheckButton)(c.Native())
	if inconsistent {
		arg1 = C.TRUE
	}

	C.gtk_check_button_set_inconsistent(arg0, arg1)
}

// SetLabel sets the text of @self.
//
// If [property@Gtk.CheckButton:use-underline] is true, an underscore in
// @label is interpreted as mnemonic indicator, see
// [method@Gtk.CheckButton.set_use_underline] for details on this behavior.
func (s checkButton) SetLabel(label string) {
	var arg0 *C.GtkCheckButton
	var arg1 *C.char

	arg0 = (*C.GtkCheckButton)(s.Native())
	arg1 = (*C.gchar)(C.CString(label))
	defer C.free(unsafe.Pointer(arg1))

	C.gtk_check_button_set_label(arg0, arg1)
}

// SetUseUnderline sets whether underlines in the label indicate mnemonics.
//
// If @setting is true, an underscore character in @self's label indicates a
// mnemonic accelerator key. This behavior is similar to
// [property@Gtk.Label:use-underline].
func (s checkButton) SetUseUnderline(setting bool) {
	var arg0 *C.GtkCheckButton
	var arg1 C.gboolean

	arg0 = (*C.GtkCheckButton)(s.Native())
	if setting {
		arg1 = C.TRUE
	}

	C.gtk_check_button_set_use_underline(arg0, arg1)
}
