// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_frame_get_type()), F: marshalFrame},
	})
}

// Frame: `GtkFrame` is a widget that surrounds its child with a decorative
// frame and an optional label.
//
// !An example GtkFrame (frame.png)
//
// If present, the label is drawn inside the top edge of the frame. The
// horizontal position of the label can be controlled with
// [method@Gtk.Frame.set_label_align].
//
// `GtkFrame` clips its child. You can use this to add rounded corners to
// widgets, but be aware that it also cuts off shadows.
//
//
// GtkFrame as GtkBuildable
//
// The `GtkFrame` implementation of the `GtkBuildable` interface supports
// placing a child in the label position by specifying “label” as the “type”
// attribute of a <child> element. A normal content child can be specified
// without specifying a <child> type attribute.
//
// An example of a UI definition fragment with GtkFrame: “`xml <object
// class="GtkFrame"> <child type="label"> <object class="GtkLabel"
// id="frame_label"/> </child> <child> <object class="GtkEntry"
// id="frame_content"/> </child> </object> “`
//
//
// CSS nodes
//
// “` frame ├── <label widget> ╰── <child> “`
//
// `GtkFrame` has a main CSS node with name “frame”, which is used to draw the
// visible border. You can set the appearance of the border using CSS properties
// like “border-style” on this node.
type Frame interface {
	Widget
	Accessible
	Buildable
	ConstraintTarget

	// Child gets the child widget of @frame.
	Child() Widget
	// Label returns the frame labels text.
	//
	// If the frame's label widget is not a `GtkLabel`, nil is returned.
	Label() string
	// LabelAlign retrieves the X alignment of the frame’s label.
	LabelAlign() float32
	// LabelWidget retrieves the label widget for the frame.
	LabelWidget() Widget
	// SetChild sets the child widget of @frame.
	SetChild(child Widget)
	// SetLabel creates a new `GtkLabel` with the @label and sets it as the
	// frame's label widget.
	SetLabel(label string)
	// SetLabelAlign sets the X alignment of the frame widget’s label.
	//
	// The default value for a newly created frame is 0.0.
	SetLabelAlign(xalign float32)
	// SetLabelWidget sets the label widget for the frame.
	//
	// This is the widget that will appear embedded in the top edge of the frame
	// as a title.
	SetLabelWidget(labelWidget Widget)
}

// frame implements the Frame interface.
type frame struct {
	Widget
	Accessible
	Buildable
	ConstraintTarget
}

var _ Frame = (*frame)(nil)

// WrapFrame wraps a GObject to the right type. It is
// primarily used internally.
func WrapFrame(obj *externglib.Object) Frame {
	return Frame{
		Widget:           WrapWidget(obj),
		Accessible:       WrapAccessible(obj),
		Buildable:        WrapBuildable(obj),
		ConstraintTarget: WrapConstraintTarget(obj),
	}
}

func marshalFrame(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapFrame(obj), nil
}

// NewFrame constructs a class Frame.
func NewFrame(label string) Frame {
	var arg1 *C.char

	arg1 = (*C.gchar)(C.CString(label))
	defer C.free(unsafe.Pointer(arg1))

	ret := C.gtk_frame_new(arg1)

	var ret0 Frame

	ret0 = gextras.CastObject(externglib.Take(unsafe.Pointer(ret.Native()))).(Frame)

	return ret0
}

// Child gets the child widget of @frame.
func (f frame) Child() Widget {
	var arg0 *C.GtkFrame

	arg0 = (*C.GtkFrame)(f.Native())

	ret := C.gtk_frame_get_child(arg0)

	var ret0 Widget

	ret0 = gextras.CastObject(externglib.Take(unsafe.Pointer(ret.Native()))).(Widget)

	return ret0
}

// Label returns the frame labels text.
//
// If the frame's label widget is not a `GtkLabel`, nil is returned.
func (f frame) Label() string {
	var arg0 *C.GtkFrame

	arg0 = (*C.GtkFrame)(f.Native())

	ret := C.gtk_frame_get_label(arg0)

	var ret0 string

	ret0 = C.GoString(ret)

	return ret0
}

// LabelAlign retrieves the X alignment of the frame’s label.
func (f frame) LabelAlign() float32 {
	var arg0 *C.GtkFrame

	arg0 = (*C.GtkFrame)(f.Native())

	ret := C.gtk_frame_get_label_align(arg0)

	var ret0 float32

	ret0 = float32(ret)

	return ret0
}

// LabelWidget retrieves the label widget for the frame.
func (f frame) LabelWidget() Widget {
	var arg0 *C.GtkFrame

	arg0 = (*C.GtkFrame)(f.Native())

	ret := C.gtk_frame_get_label_widget(arg0)

	var ret0 Widget

	ret0 = gextras.CastObject(externglib.Take(unsafe.Pointer(ret.Native()))).(Widget)

	return ret0
}

// SetChild sets the child widget of @frame.
func (f frame) SetChild(child Widget) {
	var arg0 *C.GtkFrame
	var arg1 *C.GtkWidget

	arg0 = (*C.GtkFrame)(f.Native())
	arg1 = (*C.GtkWidget)(child.Native())

	C.gtk_frame_set_child(arg0, arg1)
}

// SetLabel creates a new `GtkLabel` with the @label and sets it as the
// frame's label widget.
func (f frame) SetLabel(label string) {
	var arg0 *C.GtkFrame
	var arg1 *C.char

	arg0 = (*C.GtkFrame)(f.Native())
	arg1 = (*C.gchar)(C.CString(label))
	defer C.free(unsafe.Pointer(arg1))

	C.gtk_frame_set_label(arg0, arg1)
}

// SetLabelAlign sets the X alignment of the frame widget’s label.
//
// The default value for a newly created frame is 0.0.
func (f frame) SetLabelAlign(xalign float32) {
	var arg0 *C.GtkFrame
	var arg1 C.float

	arg0 = (*C.GtkFrame)(f.Native())
	arg1 = C.float(xalign)

	C.gtk_frame_set_label_align(arg0, arg1)
}

// SetLabelWidget sets the label widget for the frame.
//
// This is the widget that will appear embedded in the top edge of the frame
// as a title.
func (f frame) SetLabelWidget(labelWidget Widget) {
	var arg0 *C.GtkFrame
	var arg1 *C.GtkWidget

	arg0 = (*C.GtkFrame)(f.Native())
	arg1 = (*C.GtkWidget)(labelWidget.Native())

	C.gtk_frame_set_label_widget(arg0, arg1)
}
