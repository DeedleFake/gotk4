// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/internal/box"
	"github.com/diamondburned/gotk4/internal/gextras"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <stdbool.h>
// #include <gtk/gtk.h>
//
// void gotk4_TreeSelectionForeachFunc(GtkTreeModel*, GtkTreePath*, GtkTreeIter*, gpointer);
// gboolean gotk4_TreeSelectionFunc(GtkTreeSelection*, GtkTreeModel*, GtkTreePath*, gboolean, gpointer);
// extern void callbackDelete(gpointer);
import "C"

//export callbackDelete
func callbackDelete(ptr C.gpointer) {
	box.Delete(box.Callback, uintptr(ptr))
}

// TreeSelectionForeachFunc: a function used by
// gtk_tree_selection_selected_foreach() to map all selected rows. It will be
// called on every selected row in the view.
type TreeSelectionForeachFunc func(model TreeModel, path *TreePath, iter *TreeIter)

//export gotk4_TreeSelectionForeachFunc
func gotk4_TreeSelectionForeachFunc(arg0 *C.GtkTreeModel, arg1 *C.GtkTreePath, arg2 *C.GtkTreeIter, arg3 C.gpointer) {
	v := box.Get(uintptr(arg3))
	if v == nil {
		panic(`callback not found`)
	}

	var model TreeModel
	var path *TreePath
	var iter *TreeIter

	model = gextras.CastObject(externglib.Take(unsafe.Pointer(arg0.Native()))).(TreeModel)

	{
		path = WrapTreePath(unsafe.Pointer(arg1))
	}

	{
		iter = WrapTreeIter(unsafe.Pointer(arg2))
	}

	v.(TreeSelectionForeachFunc)(model, path, iter)
}

// TreeSelectionFunc: a function used by
// gtk_tree_selection_set_select_function() to filter whether or not a row may
// be selected. It is called whenever a row's state might change.
//
// A return value of true indicates to @selection that it is okay to change the
// selection.
type TreeSelectionFunc func(selection TreeSelection, model TreeModel, path *TreePath, pathCurrentlySelected bool) bool

//export gotk4_TreeSelectionFunc
func gotk4_TreeSelectionFunc(arg0 *C.GtkTreeSelection, arg1 *C.GtkTreeModel, arg2 *C.GtkTreePath, arg3 C.gboolean, arg4 C.gpointer) C.gboolean {
	v := box.Get(uintptr(arg4))
	if v == nil {
		panic(`callback not found`)
	}

	var selection TreeSelection
	var model TreeModel
	var path *TreePath
	var pathCurrentlySelected bool

	selection = gextras.CastObject(externglib.Take(unsafe.Pointer(arg0.Native()))).(TreeSelection)

	model = gextras.CastObject(externglib.Take(unsafe.Pointer(arg1.Native()))).(TreeModel)

	{
		path = WrapTreePath(unsafe.Pointer(arg2))
	}

	pathCurrentlySelected = C.bool(arg3) != C.false

	ok := v.(TreeSelectionFunc)(selection, model, path, pathCurrentlySelected)
}
