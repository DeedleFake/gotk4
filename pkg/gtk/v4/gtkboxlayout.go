// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_box_layout_get_type()), F: marshalBoxLayout},
	})
}

// BoxLayout: a GtkBoxLayout is a layout manager that arranges the children of
// any widget using it into a single row or column, depending on the value of
// its Orientable:orientation property. Within the other dimension all children
// all allocated the same size. The GtkBoxLayout will respect the Widget:halign
// and Widget:valign properties of each child widget.
//
// If you want all children to be assigned the same size, you can use the
// BoxLayout:homogeneous property.
//
// If you want to specify the amount of space placed between each child, you can
// use the BoxLayout:spacing property.
type BoxLayout interface {
	LayoutManager
	Orientable

	// BaselinePosition gets the value set by
	// gtk_box_layout_set_baseline_position().
	BaselinePosition(b BoxLayout)
	// Homogeneous returns whether the layout is set to be homogeneous.
	Homogeneous(b BoxLayout) bool
	// Spacing returns the space that @box_layout puts between children.
	Spacing(b BoxLayout)
	// SetBaselinePosition sets the baseline position of a box layout.
	//
	// The baseline position affects only horizontal boxes with at least one
	// baseline aligned child. If there is more vertical space available than
	// requested, and the baseline is not allocated by the parent then the given
	// @position is used to allocate the baseline within the extra space
	// available.
	SetBaselinePosition(b BoxLayout, position BaselinePosition)
	// SetHomogeneous sets whether the box layout will allocate the same size to
	// all children.
	SetHomogeneous(b BoxLayout, homogeneous bool)
	// SetSpacing sets how much spacing to put between children.
	SetSpacing(b BoxLayout, spacing uint)
}

// boxLayout implements the BoxLayout interface.
type boxLayout struct {
	LayoutManager
	Orientable
}

var _ BoxLayout = (*boxLayout)(nil)

// WrapBoxLayout wraps a GObject to the right type. It is
// primarily used internally.
func WrapBoxLayout(obj *externglib.Object) BoxLayout {
	return BoxLayout{
		LayoutManager: WrapLayoutManager(obj),
		Orientable:    WrapOrientable(obj),
	}
}

func marshalBoxLayout(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapBoxLayout(obj), nil
}

// NewBoxLayout constructs a class BoxLayout.
func NewBoxLayout(orientation Orientation) {
	var arg1 C.GtkOrientation

	arg1 = (C.GtkOrientation)(orientation)

	C.gtk_box_layout_new(arg1)
}

// BaselinePosition gets the value set by
// gtk_box_layout_set_baseline_position().
func (b boxLayout) BaselinePosition(b BoxLayout) {
	var arg0 *C.GtkBoxLayout

	arg0 = (*C.GtkBoxLayout)(unsafe.Pointer(b.Native()))

	C.gtk_box_layout_get_baseline_position(arg0)
}

// Homogeneous returns whether the layout is set to be homogeneous.
func (b boxLayout) Homogeneous(b BoxLayout) bool {
	var arg0 *C.GtkBoxLayout

	arg0 = (*C.GtkBoxLayout)(unsafe.Pointer(b.Native()))

	var cret C.gboolean
	var ok bool

	cret = C.gtk_box_layout_get_homogeneous(arg0)

	if cret {
		ok = true
	}

	return ok
}

// Spacing returns the space that @box_layout puts between children.
func (b boxLayout) Spacing(b BoxLayout) {
	var arg0 *C.GtkBoxLayout

	arg0 = (*C.GtkBoxLayout)(unsafe.Pointer(b.Native()))

	C.gtk_box_layout_get_spacing(arg0)
}

// SetBaselinePosition sets the baseline position of a box layout.
//
// The baseline position affects only horizontal boxes with at least one
// baseline aligned child. If there is more vertical space available than
// requested, and the baseline is not allocated by the parent then the given
// @position is used to allocate the baseline within the extra space
// available.
func (b boxLayout) SetBaselinePosition(b BoxLayout, position BaselinePosition) {
	var arg0 *C.GtkBoxLayout
	var arg1 C.GtkBaselinePosition

	arg0 = (*C.GtkBoxLayout)(unsafe.Pointer(b.Native()))
	arg1 = (C.GtkBaselinePosition)(position)

	C.gtk_box_layout_set_baseline_position(arg0, arg1)
}

// SetHomogeneous sets whether the box layout will allocate the same size to
// all children.
func (b boxLayout) SetHomogeneous(b BoxLayout, homogeneous bool) {
	var arg0 *C.GtkBoxLayout
	var arg1 C.gboolean

	arg0 = (*C.GtkBoxLayout)(unsafe.Pointer(b.Native()))
	if homogeneous {
		arg1 = C.gboolean(1)
	}

	C.gtk_box_layout_set_homogeneous(arg0, arg1)
}

// SetSpacing sets how much spacing to put between children.
func (b boxLayout) SetSpacing(b BoxLayout, spacing uint) {
	var arg0 *C.GtkBoxLayout
	var arg1 C.guint

	arg0 = (*C.GtkBoxLayout)(unsafe.Pointer(b.Native()))
	arg1 = C.guint(spacing)

	C.gtk_box_layout_set_spacing(arg0, arg1)
}
