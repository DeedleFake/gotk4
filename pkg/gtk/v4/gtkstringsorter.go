// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4 glib-2.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_string_sorter_get_type()), F: marshalStringSorter},
	})
}

// StringSorter: `GtkStringSorter` is a `GtkSorter` that compares strings.
//
// It does the comparison in a linguistically correct way using the current
// locale by normalizing Unicode strings and possibly case-folding them before
// performing the comparison.
//
// To obtain the strings to compare, this sorter evaluates a
// [class@Gtk.Expression].
type StringSorter interface {
	Sorter

	// IgnoreCase gets whether the sorter ignores case differences.
	IgnoreCase() bool
	// SetExpression sets the expression that is evaluated to obtain strings
	// from items.
	//
	// The expression must have the type G_TYPE_STRING.
	SetExpression(expression Expression)
	// SetIgnoreCase sets whether the sorter will ignore case differences.
	SetIgnoreCase(ignoreCase bool)
}

// stringSorter implements the StringSorter interface.
type stringSorter struct {
	Sorter
}

var _ StringSorter = (*stringSorter)(nil)

// WrapStringSorter wraps a GObject to the right type. It is
// primarily used internally.
func WrapStringSorter(obj *externglib.Object) StringSorter {
	return StringSorter{
		Sorter: WrapSorter(obj),
	}
}

func marshalStringSorter(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapStringSorter(obj), nil
}

// IgnoreCase gets whether the sorter ignores case differences.
func (s stringSorter) IgnoreCase() bool {
	var _arg0 *C.GtkStringSorter // out

	_arg0 = (*C.GtkStringSorter)(unsafe.Pointer(s.Native()))

	var _cret C.gboolean // in

	_cret = C.gtk_string_sorter_get_ignore_case(_arg0)

	var _ok bool // out

	if _cret {
		_ok = true
	}

	return _ok
}

// SetExpression sets the expression that is evaluated to obtain strings
// from items.
//
// The expression must have the type G_TYPE_STRING.
func (s stringSorter) SetExpression(expression Expression) {
	var _arg0 *C.GtkStringSorter // out
	var _arg1 *C.GtkExpression   // out

	_arg0 = (*C.GtkStringSorter)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GtkExpression)(unsafe.Pointer(expression.Native()))

	C.gtk_string_sorter_set_expression(_arg0, _arg1)
}

// SetIgnoreCase sets whether the sorter will ignore case differences.
func (s stringSorter) SetIgnoreCase(ignoreCase bool) {
	var _arg0 *C.GtkStringSorter // out
	var _arg1 C.gboolean         // out

	_arg0 = (*C.GtkStringSorter)(unsafe.Pointer(s.Native()))
	if ignoreCase {
		_arg1 = C.gboolean(1)
	}

	C.gtk_string_sorter_set_ignore_case(_arg0, _arg1)
}
