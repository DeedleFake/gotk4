// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <stdbool.h>
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_string_sorter_get_type()), F: marshalStringSorter},
	})
}

// StringSorter: gtkStringSorter is a Sorter that compares strings. It does the
// comparison in a linguistically correct way using the current locale by
// normalizing Unicode strings and possibly case-folding them before performing
// the comparison.
//
// To obtain the strings to compare, this sorter evaluates a Expression.
type StringSorter interface {
	Sorter

	// Expression gets the expression that is evaluated to obtain strings from
	// items.
	Expression() Expression
	// IgnoreCase gets whether the sorter ignores case differences.
	IgnoreCase() bool
	// SetExpression sets the expression that is evaluated to obtain strings
	// from items.
	//
	// The expression must have the type G_TYPE_STRING.
	SetExpression(expression Expression)
	// SetIgnoreCase sets whether the sorter will ignore case differences.
	SetIgnoreCase(ignoreCase bool)
}

// stringSorter implements the StringSorter interface.
type stringSorter struct {
	Sorter
}

var _ StringSorter = (*stringSorter)(nil)

// WrapStringSorter wraps a GObject to the right type. It is
// primarily used internally.
func WrapStringSorter(obj *externglib.Object) StringSorter {
	return StringSorter{
		Sorter: WrapSorter(obj),
	}
}

func marshalStringSorter(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapStringSorter(obj), nil
}

// NewStringSorter constructs a class StringSorter.
func NewStringSorter(expression Expression) StringSorter {
	var arg1 *C.GtkExpression

	arg1 = (*C.GtkExpression)(unsafe.Pointer(expression.Native()))

	var cret C.GtkStringSorter
	var ret1 StringSorter

	cret = C.gtk_string_sorter_new(expression)

	ret1 = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(cret.Native()))).(StringSorter)

	return ret1
}

// Expression gets the expression that is evaluated to obtain strings from
// items.
func (s stringSorter) Expression() Expression {
	var arg0 *C.GtkStringSorter

	arg0 = (*C.GtkStringSorter)(unsafe.Pointer(s.Native()))

	var cret *C.GtkExpression
	var ret1 Expression

	cret = C.gtk_string_sorter_get_expression(arg0)

	ret1 = gextras.CastObject(externglib.Take(unsafe.Pointer(cret.Native()))).(Expression)

	return ret1
}

// IgnoreCase gets whether the sorter ignores case differences.
func (s stringSorter) IgnoreCase() bool {
	var arg0 *C.GtkStringSorter

	arg0 = (*C.GtkStringSorter)(unsafe.Pointer(s.Native()))

	var cret C.gboolean
	var ret1 bool

	cret = C.gtk_string_sorter_get_ignore_case(arg0)

	ret1 = C.bool(cret) != C.false

	return ret1
}

// SetExpression sets the expression that is evaluated to obtain strings
// from items.
//
// The expression must have the type G_TYPE_STRING.
func (s stringSorter) SetExpression(expression Expression) {
	var arg0 *C.GtkStringSorter
	var arg1 *C.GtkExpression

	arg0 = (*C.GtkStringSorter)(unsafe.Pointer(s.Native()))
	arg1 = (*C.GtkExpression)(unsafe.Pointer(expression.Native()))

	C.gtk_string_sorter_set_expression(arg0, expression)
}

// SetIgnoreCase sets whether the sorter will ignore case differences.
func (s stringSorter) SetIgnoreCase(ignoreCase bool) {
	var arg0 *C.GtkStringSorter
	var arg1 C.gboolean

	arg0 = (*C.GtkStringSorter)(unsafe.Pointer(s.Native()))
	if ignoreCase {
		arg1 = C.gboolean(1)
	}

	C.gtk_string_sorter_set_ignore_case(arg0, ignoreCase)
}
