// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_string_sorter_get_type()), F: marshalStringSorter},
	})
}

// StringSorter: `GtkStringSorter` is a `GtkSorter` that compares strings.
//
// It does the comparison in a linguistically correct way using the current
// locale by normalizing Unicode strings and possibly case-folding them before
// performing the comparison.
//
// To obtain the strings to compare, this sorter evaluates a
// [class@Gtk.Expression].
type StringSorter interface {
	Sorter

	// AsSorter casts the class to the Sorter interface.
	AsSorter() Sorter

	// Changed emits the [signal@Gtk.Sorter::changed] signal to notify all users
	// of the sorter that it has changed.
	//
	// Users of the sorter should then update the sort order via
	// gtk_sorter_compare().
	//
	// Depending on the @change parameter, it may be possible to update the sort
	// order without a full resorting. Refer to the [enum@Gtk.SorterChange]
	// documentation for details.
	//
	// This function is intended for implementors of `GtkSorter` subclasses and
	// should not be called from other functions.
	//
	// This method is inherited from Sorter
	Changed(change SorterChange)
	// Compare compares two given items according to the sort order implemented
	// by the sorter.
	//
	// Sorters implement a partial order:
	//
	// * It is reflexive, ie a = a * It is antisymmetric, ie if a < b and b < a,
	// then a = b * It is transitive, ie given any 3 items with a ≤ b and b ≤ c,
	// then a ≤ c
	//
	// The sorter may signal it conforms to additional constraints via the
	// return value of [method@Gtk.Sorter.get_order].
	//
	// This method is inherited from Sorter
	Compare(item1 gextras.Objector, item2 gextras.Objector) Ordering
	// GetOrder gets the order that @self conforms to.
	//
	// See [enum@Gtk.SorterOrder] for details of the possible return values.
	//
	// This function is intended to allow optimizations.
	//
	// This method is inherited from Sorter
	GetOrder() SorterOrder

	// Expression gets the expression that is evaluated to obtain strings from
	// items.
	Expression() Expression
	// IgnoreCase gets whether the sorter ignores case differences.
	IgnoreCase() bool
	// SetExpression sets the expression that is evaluated to obtain strings
	// from items.
	//
	// The expression must have the type G_TYPE_STRING.
	SetExpression(expression Expression)
	// SetIgnoreCase sets whether the sorter will ignore case differences.
	SetIgnoreCase(ignoreCase bool)
}

// stringSorter implements the StringSorter interface.
type stringSorter struct {
	*externglib.Object
}

var _ StringSorter = (*stringSorter)(nil)

// WrapStringSorter wraps a GObject to a type that implements
// interface StringSorter. It is primarily used internally.
func WrapStringSorter(obj *externglib.Object) StringSorter {
	return stringSorter{obj}
}

func marshalStringSorter(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapStringSorter(obj), nil
}

// NewStringSorter creates a new string sorter that compares items using the
// given @expression.
//
// Unless an expression is set on it, this sorter will always compare items as
// invalid.
func NewStringSorter(expression Expression) StringSorter {
	var _arg1 *C.GtkExpression   // out
	var _cret *C.GtkStringSorter // in

	_arg1 = (*C.GtkExpression)(unsafe.Pointer(expression.Native()))

	_cret = C.gtk_string_sorter_new(_arg1)

	var _stringSorter StringSorter // out

	_stringSorter = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(StringSorter)

	return _stringSorter
}

func (s stringSorter) AsSorter() Sorter {
	return WrapSorter(gextras.InternObject(s))
}

func (s stringSorter) Changed(change SorterChange) {
	WrapSorter(gextras.InternObject(s)).Changed(change)
}

func (s stringSorter) Compare(item1 gextras.Objector, item2 gextras.Objector) Ordering {
	return WrapSorter(gextras.InternObject(s)).Compare(item1, item2)
}

func (s stringSorter) GetOrder() SorterOrder {
	return WrapSorter(gextras.InternObject(s)).GetOrder()
}

func (s stringSorter) Expression() Expression {
	var _arg0 *C.GtkStringSorter // out
	var _cret *C.GtkExpression   // in

	_arg0 = (*C.GtkStringSorter)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_string_sorter_get_expression(_arg0)

	var _expression Expression // out

	_expression = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Expression)

	return _expression
}

func (s stringSorter) IgnoreCase() bool {
	var _arg0 *C.GtkStringSorter // out
	var _cret C.gboolean         // in

	_arg0 = (*C.GtkStringSorter)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_string_sorter_get_ignore_case(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (s stringSorter) SetExpression(expression Expression) {
	var _arg0 *C.GtkStringSorter // out
	var _arg1 *C.GtkExpression   // out

	_arg0 = (*C.GtkStringSorter)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GtkExpression)(unsafe.Pointer(expression.Native()))

	C.gtk_string_sorter_set_expression(_arg0, _arg1)
}

func (s stringSorter) SetIgnoreCase(ignoreCase bool) {
	var _arg0 *C.GtkStringSorter // out
	var _arg1 C.gboolean         // out

	_arg0 = (*C.GtkStringSorter)(unsafe.Pointer(s.Native()))
	if ignoreCase {
		_arg1 = C.TRUE
	}

	C.gtk_string_sorter_set_ignore_case(_arg0, _arg1)
}
