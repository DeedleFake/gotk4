// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_font_chooser_widget_get_type()), F: marshalFontChooserWidget},
	})
}

// FontChooserWidget: the `GtkFontChooserWidget` widget lets the user select a
// font.
//
// It is used in the `GtkFontChooserDialog` widget to provide a dialog for
// selecting fonts.
//
// To set the font which is initially selected, use
// [method@Gtk.FontChooser.set_font] or [method@Gtk.FontChooser.set_font_desc].
//
// To get the selected font use [method@Gtk.FontChooser.get_font] or
// [method@Gtk.FontChooser.get_font_desc].
//
// To change the text which is shown in the preview area, use
// [method@Gtk.FontChooser.set_preview_text].
//
//
// CSS nodes
//
// `GtkFontChooserWidget` has a single CSS node with name fontchooser.
type FontChooserWidget interface {
	gextras.Objector

	privateFontChooserWidgetClass()
}

// FontChooserWidgetClass implements the FontChooserWidget interface.
type FontChooserWidgetClass struct {
	*externglib.Object
	WidgetClass
	AccessibleIface
	BuildableIface
	ConstraintTargetIface
	FontChooserIface
}

var _ FontChooserWidget = (*FontChooserWidgetClass)(nil)

func wrapFontChooserWidget(obj *externglib.Object) FontChooserWidget {
	return &FontChooserWidgetClass{
		Object: obj,
		WidgetClass: WidgetClass{
			Object: obj,
			InitiallyUnowned: externglib.InitiallyUnowned{
				Object: obj,
			},
			AccessibleIface: AccessibleIface{
				Object: obj,
			},
			BuildableIface: BuildableIface{
				Object: obj,
			},
			ConstraintTargetIface: ConstraintTargetIface{
				Object: obj,
			},
		},
		AccessibleIface: AccessibleIface{
			Object: obj,
		},
		BuildableIface: BuildableIface{
			Object: obj,
		},
		ConstraintTargetIface: ConstraintTargetIface{
			Object: obj,
		},
		FontChooserIface: FontChooserIface{
			Object: obj,
		},
	}
}

func marshalFontChooserWidget(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapFontChooserWidget(obj), nil
}

// NewFontChooserWidget creates a new `GtkFontChooserWidget`.
func NewFontChooserWidget() *FontChooserWidgetClass {
	var _cret *C.GtkWidget // in

	_cret = C.gtk_font_chooser_widget_new()

	var _fontChooserWidget *FontChooserWidgetClass // out

	_fontChooserWidget = (gextras.CastObject(externglib.Take(unsafe.Pointer(_cret)))).(*FontChooserWidgetClass)

	return _fontChooserWidget
}

func (*FontChooserWidgetClass) privateFontChooserWidgetClass() {}
