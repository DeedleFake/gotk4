// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_icon_set_get_type()), F: marshalIconSet},
		{T: externglib.Type(C.gtk_icon_source_get_type()), F: marshalIconSource},
		{T: externglib.Type(C.gtk_selection_data_get_type()), F: marshalSelectionData},
		{T: externglib.Type(C.gtk_widget_path_get_type()), F: marshalWidgetPath},
	})
}

// IconSet:
type IconSet C.GtkIconSet

// WrapIconSet wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapIconSet(ptr unsafe.Pointer) *IconSet {
	return (*IconSet)(ptr)
}

func marshalIconSet(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return (*IconSet)(unsafe.Pointer(b)), nil
}

// NewIconSet constructs a struct IconSet.
func NewIconSet() *IconSet {
	var _cret *C.GtkIconSet // in

	_cret = C.gtk_icon_set_new()

	var _iconSet *IconSet // out

	_iconSet = (*IconSet)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(&_iconSet, func(v **IconSet) {
		C.free(unsafe.Pointer(v))
	})

	return _iconSet
}

// NewIconSetFromPixbuf constructs a struct IconSet.
func NewIconSetFromPixbuf(pixbuf gdkpixbuf.Pixbuf) *IconSet {
	var _arg1 *C.GdkPixbuf  // out
	var _cret *C.GtkIconSet // in

	_arg1 = (*C.GdkPixbuf)(unsafe.Pointer(pixbuf.Native()))

	_cret = C.gtk_icon_set_new_from_pixbuf(_arg1)

	var _iconSet *IconSet // out

	_iconSet = (*IconSet)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(&_iconSet, func(v **IconSet) {
		C.free(unsafe.Pointer(v))
	})

	return _iconSet
}

// Native returns the underlying C source pointer.
func (i *IconSet) Native() unsafe.Pointer {
	return unsafe.Pointer(i)
}

// AddSource decrements the reference count on @icon_set, and frees memory if
// the reference count reaches 0.
//
// Deprecated: since version 3.10.
func (i *IconSet) AddSource(source *IconSource) {
	var _arg0 *C.GtkIconSet    // out
	var _arg1 *C.GtkIconSource // out

	_arg0 = (*C.GtkIconSet)(unsafe.Pointer(i.Native()))
	_arg1 = (*C.GtkIconSource)(unsafe.Pointer(source.Native()))

	C.gtk_icon_set_add_source(_arg0, _arg1)
}

// Copy decrements the reference count on @icon_set, and frees memory if the
// reference count reaches 0.
//
// Deprecated: since version 3.10.
func (i *IconSet) Copy() *IconSet {
	var _arg0 *C.GtkIconSet // out
	var _cret *C.GtkIconSet // in

	_arg0 = (*C.GtkIconSet)(unsafe.Pointer(i.Native()))

	_cret = C.gtk_icon_set_copy(_arg0)

	var _iconSet *IconSet // out

	_iconSet = (*IconSet)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(&_iconSet, func(v **IconSet) {
		C.free(unsafe.Pointer(v))
	})

	return _iconSet
}

// Sizes decrements the reference count on @icon_set, and frees memory if the
// reference count reaches 0.
//
// Deprecated: since version 3.10.
func (i *IconSet) Sizes() []int {
	var _arg0 *C.GtkIconSet // out
	var _arg1 *C.GtkIconSize
	var _arg2 C.gint // in

	_arg0 = (*C.GtkIconSet)(unsafe.Pointer(i.Native()))

	C.gtk_icon_set_get_sizes(_arg0, &_arg1, &_arg2)

	var _sizes []int

	_sizes = unsafe.Slice((*int)(unsafe.Pointer(_arg1)), _arg2)
	runtime.SetFinalizer(&_sizes, func(v *[]int) {
		C.free(unsafe.Pointer(&(*v)[0]))
	})

	return _sizes
}

// Ref decrements the reference count on @icon_set, and frees memory if the
// reference count reaches 0.
//
// Deprecated: since version 3.10.
func (i *IconSet) Ref() *IconSet {
	var _arg0 *C.GtkIconSet // out
	var _cret *C.GtkIconSet // in

	_arg0 = (*C.GtkIconSet)(unsafe.Pointer(i.Native()))

	_cret = C.gtk_icon_set_ref(_arg0)

	var _iconSet *IconSet // out

	_iconSet = (*IconSet)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(&_iconSet, func(v **IconSet) {
		C.free(unsafe.Pointer(v))
	})

	return _iconSet
}

// RenderIcon decrements the reference count on @icon_set, and frees memory if
// the reference count reaches 0.
//
// Deprecated: since version 3.10.
func (i *IconSet) RenderIcon(style Style, direction TextDirection, state StateType, size int, widget Widget, detail string) gdkpixbuf.Pixbuf {
	var _arg0 *C.GtkIconSet      // out
	var _arg1 *C.GtkStyle        // out
	var _arg2 C.GtkTextDirection // out
	var _arg3 C.GtkStateType     // out
	var _arg4 C.GtkIconSize      // out
	var _arg5 *C.GtkWidget       // out
	var _arg6 *C.gchar           // out
	var _cret *C.GdkPixbuf       // in

	_arg0 = (*C.GtkIconSet)(unsafe.Pointer(i.Native()))
	_arg1 = (*C.GtkStyle)(unsafe.Pointer(style.Native()))
	_arg2 = C.GtkTextDirection(direction)
	_arg3 = C.GtkStateType(state)
	_arg4 = C.GtkIconSize(size)
	_arg5 = (*C.GtkWidget)(unsafe.Pointer(widget.Native()))
	_arg6 = (*C.gchar)(C.CString(detail))
	defer C.free(unsafe.Pointer(_arg6))

	_cret = C.gtk_icon_set_render_icon(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6)

	var _pixbuf gdkpixbuf.Pixbuf // out

	_pixbuf = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(gdkpixbuf.Pixbuf)

	return _pixbuf
}

// RenderIconPixbuf decrements the reference count on @icon_set, and frees
// memory if the reference count reaches 0.
//
// Deprecated: since version 3.10.
func (i *IconSet) RenderIconPixbuf(context StyleContext, size int) gdkpixbuf.Pixbuf {
	var _arg0 *C.GtkIconSet      // out
	var _arg1 *C.GtkStyleContext // out
	var _arg2 C.GtkIconSize      // out
	var _cret *C.GdkPixbuf       // in

	_arg0 = (*C.GtkIconSet)(unsafe.Pointer(i.Native()))
	_arg1 = (*C.GtkStyleContext)(unsafe.Pointer(context.Native()))
	_arg2 = C.GtkIconSize(size)

	_cret = C.gtk_icon_set_render_icon_pixbuf(_arg0, _arg1, _arg2)

	var _pixbuf gdkpixbuf.Pixbuf // out

	_pixbuf = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(gdkpixbuf.Pixbuf)

	return _pixbuf
}

// RenderIconSurface decrements the reference count on @icon_set, and frees
// memory if the reference count reaches 0.
//
// Deprecated: since version 3.10.
func (i *IconSet) RenderIconSurface(context StyleContext, size int, scale int, forWindow gdk.Window) *cairo.Surface {
	var _arg0 *C.GtkIconSet      // out
	var _arg1 *C.GtkStyleContext // out
	var _arg2 C.GtkIconSize      // out
	var _arg3 C.int              // out
	var _arg4 *C.GdkWindow       // out
	var _cret *C.cairo_surface_t // in

	_arg0 = (*C.GtkIconSet)(unsafe.Pointer(i.Native()))
	_arg1 = (*C.GtkStyleContext)(unsafe.Pointer(context.Native()))
	_arg2 = C.GtkIconSize(size)
	_arg3 = C.int(scale)
	_arg4 = (*C.GdkWindow)(unsafe.Pointer(forWindow.Native()))

	_cret = C.gtk_icon_set_render_icon_surface(_arg0, _arg1, _arg2, _arg3, _arg4)

	var _surface *cairo.Surface // out

	_surface = (*cairo.Surface)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(&_surface, func(v **cairo.Surface) {
		C.free(unsafe.Pointer(v))
	})

	return _surface
}

// Unref decrements the reference count on @icon_set, and frees memory if the
// reference count reaches 0.
//
// Deprecated: since version 3.10.
func (i *IconSet) Unref() {
	var _arg0 *C.GtkIconSet // out

	_arg0 = (*C.GtkIconSet)(unsafe.Pointer(i.Native()))

	C.gtk_icon_set_unref(_arg0)
}

// IconSource:
type IconSource C.GtkIconSource

// WrapIconSource wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapIconSource(ptr unsafe.Pointer) *IconSource {
	return (*IconSource)(ptr)
}

func marshalIconSource(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return (*IconSource)(unsafe.Pointer(b)), nil
}

// NewIconSource constructs a struct IconSource.
func NewIconSource() *IconSource {
	var _cret *C.GtkIconSource // in

	_cret = C.gtk_icon_source_new()

	var _iconSource *IconSource // out

	_iconSource = (*IconSource)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(&_iconSource, func(v **IconSource) {
		C.free(unsafe.Pointer(v))
	})

	return _iconSource
}

// Native returns the underlying C source pointer.
func (i *IconSource) Native() unsafe.Pointer {
	return unsafe.Pointer(i)
}

// Copy: if the widget state is wildcarded, this source can be used as the base
// image for an icon in any StateType. If the widget state is not wildcarded,
// then the state the source applies to should be set with
// gtk_icon_source_set_state() and the icon source will only be used with that
// specific state.
//
// IconSet prefers non-wildcarded sources (exact matches) over wildcarded
// sources, and will use an exact match when possible.
//
// IconSet will normally transform wildcarded source images to produce an
// appropriate icon for a given state, for example lightening an image on
// prelight, but will not modify source images that match exactly.
//
// Deprecated: since version 3.10.
func (s *IconSource) Copy() *IconSource {
	var _arg0 *C.GtkIconSource // out
	var _cret *C.GtkIconSource // in

	_arg0 = (*C.GtkIconSource)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_icon_source_copy(_arg0)

	var _iconSource *IconSource // out

	_iconSource = (*IconSource)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(&_iconSource, func(v **IconSource) {
		C.free(unsafe.Pointer(v))
	})

	return _iconSource
}

// Free: if the widget state is wildcarded, this source can be used as the base
// image for an icon in any StateType. If the widget state is not wildcarded,
// then the state the source applies to should be set with
// gtk_icon_source_set_state() and the icon source will only be used with that
// specific state.
//
// IconSet prefers non-wildcarded sources (exact matches) over wildcarded
// sources, and will use an exact match when possible.
//
// IconSet will normally transform wildcarded source images to produce an
// appropriate icon for a given state, for example lightening an image on
// prelight, but will not modify source images that match exactly.
//
// Deprecated: since version 3.10.
func (s *IconSource) Free() {
	var _arg0 *C.GtkIconSource // out

	_arg0 = (*C.GtkIconSource)(unsafe.Pointer(s.Native()))

	C.gtk_icon_source_free(_arg0)
}

// Direction: if the widget state is wildcarded, this source can be used as the
// base image for an icon in any StateType. If the widget state is not
// wildcarded, then the state the source applies to should be set with
// gtk_icon_source_set_state() and the icon source will only be used with that
// specific state.
//
// IconSet prefers non-wildcarded sources (exact matches) over wildcarded
// sources, and will use an exact match when possible.
//
// IconSet will normally transform wildcarded source images to produce an
// appropriate icon for a given state, for example lightening an image on
// prelight, but will not modify source images that match exactly.
//
// Deprecated: since version 3.10.
func (s *IconSource) Direction() TextDirection {
	var _arg0 *C.GtkIconSource   // out
	var _cret C.GtkTextDirection // in

	_arg0 = (*C.GtkIconSource)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_icon_source_get_direction(_arg0)

	var _textDirection TextDirection // out

	_textDirection = TextDirection(_cret)

	return _textDirection
}

// DirectionWildcarded: if the widget state is wildcarded, this source can be
// used as the base image for an icon in any StateType. If the widget state is
// not wildcarded, then the state the source applies to should be set with
// gtk_icon_source_set_state() and the icon source will only be used with that
// specific state.
//
// IconSet prefers non-wildcarded sources (exact matches) over wildcarded
// sources, and will use an exact match when possible.
//
// IconSet will normally transform wildcarded source images to produce an
// appropriate icon for a given state, for example lightening an image on
// prelight, but will not modify source images that match exactly.
//
// Deprecated: since version 3.10.
func (s *IconSource) DirectionWildcarded() bool {
	var _arg0 *C.GtkIconSource // out
	var _cret C.gboolean       // in

	_arg0 = (*C.GtkIconSource)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_icon_source_get_direction_wildcarded(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Filename: if the widget state is wildcarded, this source can be used as the
// base image for an icon in any StateType. If the widget state is not
// wildcarded, then the state the source applies to should be set with
// gtk_icon_source_set_state() and the icon source will only be used with that
// specific state.
//
// IconSet prefers non-wildcarded sources (exact matches) over wildcarded
// sources, and will use an exact match when possible.
//
// IconSet will normally transform wildcarded source images to produce an
// appropriate icon for a given state, for example lightening an image on
// prelight, but will not modify source images that match exactly.
//
// Deprecated: since version 3.10.
func (s *IconSource) Filename() string {
	var _arg0 *C.GtkIconSource // out
	var _cret *C.gchar         // in

	_arg0 = (*C.GtkIconSource)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_icon_source_get_filename(_arg0)

	var _filename string // out

	_filename = C.GoString(_cret)

	return _filename
}

// IconName: if the widget state is wildcarded, this source can be used as the
// base image for an icon in any StateType. If the widget state is not
// wildcarded, then the state the source applies to should be set with
// gtk_icon_source_set_state() and the icon source will only be used with that
// specific state.
//
// IconSet prefers non-wildcarded sources (exact matches) over wildcarded
// sources, and will use an exact match when possible.
//
// IconSet will normally transform wildcarded source images to produce an
// appropriate icon for a given state, for example lightening an image on
// prelight, but will not modify source images that match exactly.
//
// Deprecated: since version 3.10.
func (s *IconSource) IconName() string {
	var _arg0 *C.GtkIconSource // out
	var _cret *C.gchar         // in

	_arg0 = (*C.GtkIconSource)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_icon_source_get_icon_name(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

// Pixbuf: if the widget state is wildcarded, this source can be used as the
// base image for an icon in any StateType. If the widget state is not
// wildcarded, then the state the source applies to should be set with
// gtk_icon_source_set_state() and the icon source will only be used with that
// specific state.
//
// IconSet prefers non-wildcarded sources (exact matches) over wildcarded
// sources, and will use an exact match when possible.
//
// IconSet will normally transform wildcarded source images to produce an
// appropriate icon for a given state, for example lightening an image on
// prelight, but will not modify source images that match exactly.
//
// Deprecated: since version 3.10.
func (s *IconSource) Pixbuf() gdkpixbuf.Pixbuf {
	var _arg0 *C.GtkIconSource // out
	var _cret *C.GdkPixbuf     // in

	_arg0 = (*C.GtkIconSource)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_icon_source_get_pixbuf(_arg0)

	var _pixbuf gdkpixbuf.Pixbuf // out

	_pixbuf = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(gdkpixbuf.Pixbuf)

	return _pixbuf
}

// Size: if the widget state is wildcarded, this source can be used as the base
// image for an icon in any StateType. If the widget state is not wildcarded,
// then the state the source applies to should be set with
// gtk_icon_source_set_state() and the icon source will only be used with that
// specific state.
//
// IconSet prefers non-wildcarded sources (exact matches) over wildcarded
// sources, and will use an exact match when possible.
//
// IconSet will normally transform wildcarded source images to produce an
// appropriate icon for a given state, for example lightening an image on
// prelight, but will not modify source images that match exactly.
//
// Deprecated: since version 3.10.
func (s *IconSource) Size() int {
	var _arg0 *C.GtkIconSource // out
	var _cret C.GtkIconSize    // in

	_arg0 = (*C.GtkIconSource)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_icon_source_get_size(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// SizeWildcarded: if the widget state is wildcarded, this source can be used as
// the base image for an icon in any StateType. If the widget state is not
// wildcarded, then the state the source applies to should be set with
// gtk_icon_source_set_state() and the icon source will only be used with that
// specific state.
//
// IconSet prefers non-wildcarded sources (exact matches) over wildcarded
// sources, and will use an exact match when possible.
//
// IconSet will normally transform wildcarded source images to produce an
// appropriate icon for a given state, for example lightening an image on
// prelight, but will not modify source images that match exactly.
//
// Deprecated: since version 3.10.
func (s *IconSource) SizeWildcarded() bool {
	var _arg0 *C.GtkIconSource // out
	var _cret C.gboolean       // in

	_arg0 = (*C.GtkIconSource)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_icon_source_get_size_wildcarded(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// State: if the widget state is wildcarded, this source can be used as the base
// image for an icon in any StateType. If the widget state is not wildcarded,
// then the state the source applies to should be set with
// gtk_icon_source_set_state() and the icon source will only be used with that
// specific state.
//
// IconSet prefers non-wildcarded sources (exact matches) over wildcarded
// sources, and will use an exact match when possible.
//
// IconSet will normally transform wildcarded source images to produce an
// appropriate icon for a given state, for example lightening an image on
// prelight, but will not modify source images that match exactly.
//
// Deprecated: since version 3.10.
func (s *IconSource) State() StateType {
	var _arg0 *C.GtkIconSource // out
	var _cret C.GtkStateType   // in

	_arg0 = (*C.GtkIconSource)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_icon_source_get_state(_arg0)

	var _stateType StateType // out

	_stateType = StateType(_cret)

	return _stateType
}

// StateWildcarded: if the widget state is wildcarded, this source can be used
// as the base image for an icon in any StateType. If the widget state is not
// wildcarded, then the state the source applies to should be set with
// gtk_icon_source_set_state() and the icon source will only be used with that
// specific state.
//
// IconSet prefers non-wildcarded sources (exact matches) over wildcarded
// sources, and will use an exact match when possible.
//
// IconSet will normally transform wildcarded source images to produce an
// appropriate icon for a given state, for example lightening an image on
// prelight, but will not modify source images that match exactly.
//
// Deprecated: since version 3.10.
func (s *IconSource) StateWildcarded() bool {
	var _arg0 *C.GtkIconSource // out
	var _cret C.gboolean       // in

	_arg0 = (*C.GtkIconSource)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_icon_source_get_state_wildcarded(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetDirection: if the widget state is wildcarded, this source can be used as
// the base image for an icon in any StateType. If the widget state is not
// wildcarded, then the state the source applies to should be set with
// gtk_icon_source_set_state() and the icon source will only be used with that
// specific state.
//
// IconSet prefers non-wildcarded sources (exact matches) over wildcarded
// sources, and will use an exact match when possible.
//
// IconSet will normally transform wildcarded source images to produce an
// appropriate icon for a given state, for example lightening an image on
// prelight, but will not modify source images that match exactly.
//
// Deprecated: since version 3.10.
func (s *IconSource) SetDirection(direction TextDirection) {
	var _arg0 *C.GtkIconSource   // out
	var _arg1 C.GtkTextDirection // out

	_arg0 = (*C.GtkIconSource)(unsafe.Pointer(s.Native()))
	_arg1 = C.GtkTextDirection(direction)

	C.gtk_icon_source_set_direction(_arg0, _arg1)
}

// SetDirectionWildcarded: if the widget state is wildcarded, this source can be
// used as the base image for an icon in any StateType. If the widget state is
// not wildcarded, then the state the source applies to should be set with
// gtk_icon_source_set_state() and the icon source will only be used with that
// specific state.
//
// IconSet prefers non-wildcarded sources (exact matches) over wildcarded
// sources, and will use an exact match when possible.
//
// IconSet will normally transform wildcarded source images to produce an
// appropriate icon for a given state, for example lightening an image on
// prelight, but will not modify source images that match exactly.
//
// Deprecated: since version 3.10.
func (s *IconSource) SetDirectionWildcarded(setting bool) {
	var _arg0 *C.GtkIconSource // out
	var _arg1 C.gboolean       // out

	_arg0 = (*C.GtkIconSource)(unsafe.Pointer(s.Native()))
	if setting {
		_arg1 = C.TRUE
	}

	C.gtk_icon_source_set_direction_wildcarded(_arg0, _arg1)
}

// SetFilename: if the widget state is wildcarded, this source can be used as
// the base image for an icon in any StateType. If the widget state is not
// wildcarded, then the state the source applies to should be set with
// gtk_icon_source_set_state() and the icon source will only be used with that
// specific state.
//
// IconSet prefers non-wildcarded sources (exact matches) over wildcarded
// sources, and will use an exact match when possible.
//
// IconSet will normally transform wildcarded source images to produce an
// appropriate icon for a given state, for example lightening an image on
// prelight, but will not modify source images that match exactly.
//
// Deprecated: since version 3.10.
func (s *IconSource) SetFilename(filename string) {
	var _arg0 *C.GtkIconSource // out
	var _arg1 *C.gchar         // out

	_arg0 = (*C.GtkIconSource)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.gchar)(C.CString(filename))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_icon_source_set_filename(_arg0, _arg1)
}

// SetIconName: if the widget state is wildcarded, this source can be used as
// the base image for an icon in any StateType. If the widget state is not
// wildcarded, then the state the source applies to should be set with
// gtk_icon_source_set_state() and the icon source will only be used with that
// specific state.
//
// IconSet prefers non-wildcarded sources (exact matches) over wildcarded
// sources, and will use an exact match when possible.
//
// IconSet will normally transform wildcarded source images to produce an
// appropriate icon for a given state, for example lightening an image on
// prelight, but will not modify source images that match exactly.
//
// Deprecated: since version 3.10.
func (s *IconSource) SetIconName(iconName string) {
	var _arg0 *C.GtkIconSource // out
	var _arg1 *C.gchar         // out

	_arg0 = (*C.GtkIconSource)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.gchar)(C.CString(iconName))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_icon_source_set_icon_name(_arg0, _arg1)
}

// SetPixbuf: if the widget state is wildcarded, this source can be used as the
// base image for an icon in any StateType. If the widget state is not
// wildcarded, then the state the source applies to should be set with
// gtk_icon_source_set_state() and the icon source will only be used with that
// specific state.
//
// IconSet prefers non-wildcarded sources (exact matches) over wildcarded
// sources, and will use an exact match when possible.
//
// IconSet will normally transform wildcarded source images to produce an
// appropriate icon for a given state, for example lightening an image on
// prelight, but will not modify source images that match exactly.
//
// Deprecated: since version 3.10.
func (s *IconSource) SetPixbuf(pixbuf gdkpixbuf.Pixbuf) {
	var _arg0 *C.GtkIconSource // out
	var _arg1 *C.GdkPixbuf     // out

	_arg0 = (*C.GtkIconSource)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GdkPixbuf)(unsafe.Pointer(pixbuf.Native()))

	C.gtk_icon_source_set_pixbuf(_arg0, _arg1)
}

// SetSize: if the widget state is wildcarded, this source can be used as the
// base image for an icon in any StateType. If the widget state is not
// wildcarded, then the state the source applies to should be set with
// gtk_icon_source_set_state() and the icon source will only be used with that
// specific state.
//
// IconSet prefers non-wildcarded sources (exact matches) over wildcarded
// sources, and will use an exact match when possible.
//
// IconSet will normally transform wildcarded source images to produce an
// appropriate icon for a given state, for example lightening an image on
// prelight, but will not modify source images that match exactly.
//
// Deprecated: since version 3.10.
func (s *IconSource) SetSize(size int) {
	var _arg0 *C.GtkIconSource // out
	var _arg1 C.GtkIconSize    // out

	_arg0 = (*C.GtkIconSource)(unsafe.Pointer(s.Native()))
	_arg1 = C.GtkIconSize(size)

	C.gtk_icon_source_set_size(_arg0, _arg1)
}

// SetSizeWildcarded: if the widget state is wildcarded, this source can be used
// as the base image for an icon in any StateType. If the widget state is not
// wildcarded, then the state the source applies to should be set with
// gtk_icon_source_set_state() and the icon source will only be used with that
// specific state.
//
// IconSet prefers non-wildcarded sources (exact matches) over wildcarded
// sources, and will use an exact match when possible.
//
// IconSet will normally transform wildcarded source images to produce an
// appropriate icon for a given state, for example lightening an image on
// prelight, but will not modify source images that match exactly.
//
// Deprecated: since version 3.10.
func (s *IconSource) SetSizeWildcarded(setting bool) {
	var _arg0 *C.GtkIconSource // out
	var _arg1 C.gboolean       // out

	_arg0 = (*C.GtkIconSource)(unsafe.Pointer(s.Native()))
	if setting {
		_arg1 = C.TRUE
	}

	C.gtk_icon_source_set_size_wildcarded(_arg0, _arg1)
}

// SetState: if the widget state is wildcarded, this source can be used as the
// base image for an icon in any StateType. If the widget state is not
// wildcarded, then the state the source applies to should be set with
// gtk_icon_source_set_state() and the icon source will only be used with that
// specific state.
//
// IconSet prefers non-wildcarded sources (exact matches) over wildcarded
// sources, and will use an exact match when possible.
//
// IconSet will normally transform wildcarded source images to produce an
// appropriate icon for a given state, for example lightening an image on
// prelight, but will not modify source images that match exactly.
//
// Deprecated: since version 3.10.
func (s *IconSource) SetState(state StateType) {
	var _arg0 *C.GtkIconSource // out
	var _arg1 C.GtkStateType   // out

	_arg0 = (*C.GtkIconSource)(unsafe.Pointer(s.Native()))
	_arg1 = C.GtkStateType(state)

	C.gtk_icon_source_set_state(_arg0, _arg1)
}

// SetStateWildcarded: if the widget state is wildcarded, this source can be
// used as the base image for an icon in any StateType. If the widget state is
// not wildcarded, then the state the source applies to should be set with
// gtk_icon_source_set_state() and the icon source will only be used with that
// specific state.
//
// IconSet prefers non-wildcarded sources (exact matches) over wildcarded
// sources, and will use an exact match when possible.
//
// IconSet will normally transform wildcarded source images to produce an
// appropriate icon for a given state, for example lightening an image on
// prelight, but will not modify source images that match exactly.
//
// Deprecated: since version 3.10.
func (s *IconSource) SetStateWildcarded(setting bool) {
	var _arg0 *C.GtkIconSource // out
	var _arg1 C.gboolean       // out

	_arg0 = (*C.GtkIconSource)(unsafe.Pointer(s.Native()))
	if setting {
		_arg1 = C.TRUE
	}

	C.gtk_icon_source_set_state_wildcarded(_arg0, _arg1)
}

// SelectionData:
type SelectionData C.GtkSelectionData

// WrapSelectionData wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSelectionData(ptr unsafe.Pointer) *SelectionData {
	return (*SelectionData)(ptr)
}

func marshalSelectionData(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return (*SelectionData)(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (s *SelectionData) Native() unsafe.Pointer {
	return unsafe.Pointer(s)
}

// Copy: given a SelectionData object holding a list of targets, determines if
// any of the targets in @targets can be used to provide a list or URIs.
func (s *SelectionData) Copy() *SelectionData {
	var _arg0 *C.GtkSelectionData // out
	var _cret *C.GtkSelectionData // in

	_arg0 = (*C.GtkSelectionData)(unsafe.Pointer(d.Native()))

	_cret = C.gtk_selection_data_copy(_arg0)

	var _selectionData *SelectionData // out

	_selectionData = (*SelectionData)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(&_selectionData, func(v **SelectionData) {
		C.free(unsafe.Pointer(v))
	})

	return _selectionData
}

// Free: given a SelectionData object holding a list of targets, determines if
// any of the targets in @targets can be used to provide a list or URIs.
func (s *SelectionData) Free() {
	var _arg0 *C.GtkSelectionData // out

	_arg0 = (*C.GtkSelectionData)(unsafe.Pointer(d.Native()))

	C.gtk_selection_data_free(_arg0)
}

// DataType: given a SelectionData object holding a list of targets, determines
// if any of the targets in @targets can be used to provide a list or URIs.
func (s *SelectionData) DataType() *gdk.Atom {
	var _arg0 *C.GtkSelectionData // out
	var _cret C.GdkAtom           // in

	_arg0 = (*C.GtkSelectionData)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_selection_data_get_data_type(_arg0)

	var _atom *gdk.Atom // out

	{
		var refTmpIn *C.GdkAtom
		var refTmpOut *gdk.Atom

		in0 := &_cret
		refTmpIn = in0

		refTmpOut = (*gdk.Atom)(unsafe.Pointer(refTmpIn))

		_atom = refTmpOut
	}

	return _atom
}

// Display: given a SelectionData object holding a list of targets, determines
// if any of the targets in @targets can be used to provide a list or URIs.
func (s *SelectionData) Display() gdk.Display {
	var _arg0 *C.GtkSelectionData // out
	var _cret *C.GdkDisplay       // in

	_arg0 = (*C.GtkSelectionData)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_selection_data_get_display(_arg0)

	var _display gdk.Display // out

	_display = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(gdk.Display)

	return _display
}

// Format: given a SelectionData object holding a list of targets, determines if
// any of the targets in @targets can be used to provide a list or URIs.
func (s *SelectionData) Format() int {
	var _arg0 *C.GtkSelectionData // out
	var _cret C.gint              // in

	_arg0 = (*C.GtkSelectionData)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_selection_data_get_format(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// Length: given a SelectionData object holding a list of targets, determines if
// any of the targets in @targets can be used to provide a list or URIs.
func (s *SelectionData) Length() int {
	var _arg0 *C.GtkSelectionData // out
	var _cret C.gint              // in

	_arg0 = (*C.GtkSelectionData)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_selection_data_get_length(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// Pixbuf: given a SelectionData object holding a list of targets, determines if
// any of the targets in @targets can be used to provide a list or URIs.
func (s *SelectionData) Pixbuf() gdkpixbuf.Pixbuf {
	var _arg0 *C.GtkSelectionData // out
	var _cret *C.GdkPixbuf        // in

	_arg0 = (*C.GtkSelectionData)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_selection_data_get_pixbuf(_arg0)

	var _pixbuf gdkpixbuf.Pixbuf // out

	_pixbuf = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(gdkpixbuf.Pixbuf)

	return _pixbuf
}

// Selection: given a SelectionData object holding a list of targets, determines
// if any of the targets in @targets can be used to provide a list or URIs.
func (s *SelectionData) Selection() *gdk.Atom {
	var _arg0 *C.GtkSelectionData // out
	var _cret C.GdkAtom           // in

	_arg0 = (*C.GtkSelectionData)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_selection_data_get_selection(_arg0)

	var _atom *gdk.Atom // out

	{
		var refTmpIn *C.GdkAtom
		var refTmpOut *gdk.Atom

		in0 := &_cret
		refTmpIn = in0

		refTmpOut = (*gdk.Atom)(unsafe.Pointer(refTmpIn))

		_atom = refTmpOut
	}

	return _atom
}

// Target: given a SelectionData object holding a list of targets, determines if
// any of the targets in @targets can be used to provide a list or URIs.
func (s *SelectionData) Target() *gdk.Atom {
	var _arg0 *C.GtkSelectionData // out
	var _cret C.GdkAtom           // in

	_arg0 = (*C.GtkSelectionData)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_selection_data_get_target(_arg0)

	var _atom *gdk.Atom // out

	{
		var refTmpIn *C.GdkAtom
		var refTmpOut *gdk.Atom

		in0 := &_cret
		refTmpIn = in0

		refTmpOut = (*gdk.Atom)(unsafe.Pointer(refTmpIn))

		_atom = refTmpOut
	}

	return _atom
}

// Targets: given a SelectionData object holding a list of targets, determines
// if any of the targets in @targets can be used to provide a list or URIs.
func (s *SelectionData) Targets() ([]gdk.Atom, bool) {
	var _arg0 *C.GtkSelectionData // out
	var _arg1 *C.GdkAtom
	var _arg2 C.gint     // in
	var _cret C.gboolean // in

	_arg0 = (*C.GtkSelectionData)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_selection_data_get_targets(_arg0, &_arg1, &_arg2)

	var _targets []gdk.Atom
	var _ok bool // out

	_targets = unsafe.Slice((*gdk.Atom)(unsafe.Pointer(_arg1)), _arg2)
	runtime.SetFinalizer(&_targets, func(v *[]gdk.Atom) {
		C.free(unsafe.Pointer(&(*v)[0]))
	})
	if _cret != 0 {
		_ok = true
	}

	return _targets, _ok
}

// Text: given a SelectionData object holding a list of targets, determines if
// any of the targets in @targets can be used to provide a list or URIs.
func (s *SelectionData) Text() string {
	var _arg0 *C.GtkSelectionData // out
	var _cret *C.guchar           // in

	_arg0 = (*C.GtkSelectionData)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_selection_data_get_text(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Uris: given a SelectionData object holding a list of targets, determines if
// any of the targets in @targets can be used to provide a list or URIs.
func (s *SelectionData) Uris() []string {
	var _arg0 *C.GtkSelectionData // out
	var _cret **C.gchar

	_arg0 = (*C.GtkSelectionData)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_selection_data_get_uris(_arg0)

	var _utf8s []string

	{
		var i int
		var z *C.gchar
		for p := _cret; *p != z; p = &unsafe.Slice(p, i+1)[i] {
			i++
		}

		src := unsafe.Slice(_cret, i)
		_utf8s = make([]string, i)
		for i := range src {
			_utf8s[i] = C.GoString(src[i])
			defer C.free(unsafe.Pointer(src[i]))
		}
	}

	return _utf8s
}

// Set: given a SelectionData object holding a list of targets, determines if
// any of the targets in @targets can be used to provide a list or URIs.
func (s *SelectionData) Set(typ *gdk.Atom, format int, data []byte) {
	var _arg0 *C.GtkSelectionData // out
	var _arg1 C.GdkAtom           // out
	var _arg2 C.gint              // out
	var _arg3 *C.guchar
	var _arg4 C.gint

	_arg0 = (*C.GtkSelectionData)(unsafe.Pointer(s.Native()))
	{
		var refTmpIn *gdk.Atom
		var refTmpOut *C.GdkAtom

		refTmpIn = typ

		refTmpOut = (*C.GdkAtom)(unsafe.Pointer(refTmpIn.Native()))

		_arg1 = *refTmpOut
	}
	_arg2 = C.gint(format)
	_arg4 = C.gint(len(data))
	_arg3 = (*C.guchar)(unsafe.Pointer(&data[0]))

	C.gtk_selection_data_set(_arg0, _arg1, _arg2, _arg3, _arg4)
}

// SetPixbuf: given a SelectionData object holding a list of targets, determines
// if any of the targets in @targets can be used to provide a list or URIs.
func (s *SelectionData) SetPixbuf(pixbuf gdkpixbuf.Pixbuf) bool {
	var _arg0 *C.GtkSelectionData // out
	var _arg1 *C.GdkPixbuf        // out
	var _cret C.gboolean          // in

	_arg0 = (*C.GtkSelectionData)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GdkPixbuf)(unsafe.Pointer(pixbuf.Native()))

	_cret = C.gtk_selection_data_set_pixbuf(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetText: given a SelectionData object holding a list of targets, determines
// if any of the targets in @targets can be used to provide a list or URIs.
func (s *SelectionData) SetText(str string, len int) bool {
	var _arg0 *C.GtkSelectionData // out
	var _arg1 *C.gchar            // out
	var _arg2 C.gint              // out
	var _cret C.gboolean          // in

	_arg0 = (*C.GtkSelectionData)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.gchar)(C.CString(str))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.gint(len)

	_cret = C.gtk_selection_data_set_text(_arg0, _arg1, _arg2)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetUris: given a SelectionData object holding a list of targets, determines
// if any of the targets in @targets can be used to provide a list or URIs.
func (s *SelectionData) SetUris(uris []string) bool {
	var _arg0 *C.GtkSelectionData // out
	var _arg1 **C.gchar
	var _cret C.gboolean // in

	_arg0 = (*C.GtkSelectionData)(unsafe.Pointer(s.Native()))
	_arg1 = (**C.gchar)(C.malloc(C.ulong(len(uris)+1) * C.ulong(unsafe.Sizeof(uint(0)))))
	defer C.free(unsafe.Pointer(_arg1))
	{
		out := unsafe.Slice(_arg1, len(uris))
		for i := range uris {
			out[i] = (*C.gchar)(C.CString(uris[i]))
			defer C.free(unsafe.Pointer(out[i]))
		}
	}

	_cret = C.gtk_selection_data_set_uris(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// TargetsIncludeImage: given a SelectionData object holding a list of targets,
// determines if any of the targets in @targets can be used to provide a list or
// URIs.
func (s *SelectionData) TargetsIncludeImage(writable bool) bool {
	var _arg0 *C.GtkSelectionData // out
	var _arg1 C.gboolean          // out
	var _cret C.gboolean          // in

	_arg0 = (*C.GtkSelectionData)(unsafe.Pointer(s.Native()))
	if writable {
		_arg1 = C.TRUE
	}

	_cret = C.gtk_selection_data_targets_include_image(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// TargetsIncludeRichText: given a SelectionData object holding a list of
// targets, determines if any of the targets in @targets can be used to provide
// a list or URIs.
func (s *SelectionData) TargetsIncludeRichText(buffer TextBuffer) bool {
	var _arg0 *C.GtkSelectionData // out
	var _arg1 *C.GtkTextBuffer    // out
	var _cret C.gboolean          // in

	_arg0 = (*C.GtkSelectionData)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GtkTextBuffer)(unsafe.Pointer(buffer.Native()))

	_cret = C.gtk_selection_data_targets_include_rich_text(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// TargetsIncludeText: given a SelectionData object holding a list of targets,
// determines if any of the targets in @targets can be used to provide a list or
// URIs.
func (s *SelectionData) TargetsIncludeText() bool {
	var _arg0 *C.GtkSelectionData // out
	var _cret C.gboolean          // in

	_arg0 = (*C.GtkSelectionData)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_selection_data_targets_include_text(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// TargetsIncludeURI: given a SelectionData object holding a list of targets,
// determines if any of the targets in @targets can be used to provide a list or
// URIs.
func (s *SelectionData) TargetsIncludeURI() bool {
	var _arg0 *C.GtkSelectionData // out
	var _cret C.gboolean          // in

	_arg0 = (*C.GtkSelectionData)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_selection_data_targets_include_uri(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// WidgetPath: gtkWidgetPath is a boxed type that represents a widget hierarchy
// from the topmost widget, typically a toplevel, to any child. This widget path
// abstraction is used in StyleContext on behalf of the real widget in order to
// query style information.
//
// If you are using GTK+ widgets, you probably will not need to use this API
// directly, as there is gtk_widget_get_path(), and the style context returned
// by gtk_widget_get_style_context() will be automatically updated on widget
// hierarchy changes.
//
// The widget path generation is generally simple:
//
// Defining a button within a window
//
//    {
//      GtkWidgetPath *path;
//      guint pos;
//
//      path = gtk_widget_path_new ();
//
//      pos = gtk_widget_path_append_type (path, GTK_TYPE_NOTEBOOK);
//      gtk_widget_path_iter_add_region (path, pos, "tab", GTK_REGION_EVEN | GTK_REGION_FIRST);
//
//      pos = gtk_widget_path_append_type (path, GTK_TYPE_LABEL);
//      gtk_widget_path_iter_set_name (path, pos, "first tab label");
//    }
//
// All this information will be used to match the style information that applies
// to the described widget.
type WidgetPath C.GtkWidgetPath

// WrapWidgetPath wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapWidgetPath(ptr unsafe.Pointer) *WidgetPath {
	return (*WidgetPath)(ptr)
}

func marshalWidgetPath(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return (*WidgetPath)(unsafe.Pointer(b)), nil
}

// NewWidgetPath constructs a struct WidgetPath.
func NewWidgetPath() *WidgetPath {
	var _cret *C.GtkWidgetPath // in

	_cret = C.gtk_widget_path_new()

	var _widgetPath *WidgetPath // out

	_widgetPath = (*WidgetPath)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(&_widgetPath, func(v **WidgetPath) {
		C.free(unsafe.Pointer(v))
	})

	return _widgetPath
}

// Native returns the underlying C source pointer.
func (w *WidgetPath) Native() unsafe.Pointer {
	return unsafe.Pointer(w)
}

// AppendForWidget decrements the reference count on @path, freeing the
// structure if the reference count reaches 0.
func (p *WidgetPath) AppendForWidget(widget Widget) int {
	var _arg0 *C.GtkWidgetPath // out
	var _arg1 *C.GtkWidget     // out
	var _cret C.gint           // in

	_arg0 = (*C.GtkWidgetPath)(unsafe.Pointer(p.Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(widget.Native()))

	_cret = C.gtk_widget_path_append_for_widget(_arg0, _arg1)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// AppendType decrements the reference count on @path, freeing the structure if
// the reference count reaches 0.
func (p *WidgetPath) AppendType(typ externglib.Type) int {
	var _arg0 *C.GtkWidgetPath // out
	var _arg1 C.GType          // out
	var _cret C.gint           // in

	_arg0 = (*C.GtkWidgetPath)(unsafe.Pointer(p.Native()))
	_arg1 = (C.GType)(typ)

	_cret = C.gtk_widget_path_append_type(_arg0, _arg1)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// AppendWithSiblings decrements the reference count on @path, freeing the
// structure if the reference count reaches 0.
func (p *WidgetPath) AppendWithSiblings(siblings *WidgetPath, siblingIndex uint) int {
	var _arg0 *C.GtkWidgetPath // out
	var _arg1 *C.GtkWidgetPath // out
	var _arg2 C.guint          // out
	var _cret C.gint           // in

	_arg0 = (*C.GtkWidgetPath)(unsafe.Pointer(p.Native()))
	_arg1 = (*C.GtkWidgetPath)(unsafe.Pointer(siblings.Native()))
	_arg2 = C.guint(siblingIndex)

	_cret = C.gtk_widget_path_append_with_siblings(_arg0, _arg1, _arg2)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// Copy decrements the reference count on @path, freeing the structure if the
// reference count reaches 0.
func (p *WidgetPath) Copy() *WidgetPath {
	var _arg0 *C.GtkWidgetPath // out
	var _cret *C.GtkWidgetPath // in

	_arg0 = (*C.GtkWidgetPath)(unsafe.Pointer(p.Native()))

	_cret = C.gtk_widget_path_copy(_arg0)

	var _widgetPath *WidgetPath // out

	_widgetPath = (*WidgetPath)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(&_widgetPath, func(v **WidgetPath) {
		C.free(unsafe.Pointer(v))
	})

	return _widgetPath
}

// Free decrements the reference count on @path, freeing the structure if the
// reference count reaches 0.
func (p *WidgetPath) Free() {
	var _arg0 *C.GtkWidgetPath // out

	_arg0 = (*C.GtkWidgetPath)(unsafe.Pointer(p.Native()))

	C.gtk_widget_path_free(_arg0)
}

// ObjectType decrements the reference count on @path, freeing the structure if
// the reference count reaches 0.
func (p *WidgetPath) ObjectType() externglib.Type {
	var _arg0 *C.GtkWidgetPath // out
	var _cret C.GType          // in

	_arg0 = (*C.GtkWidgetPath)(unsafe.Pointer(p.Native()))

	_cret = C.gtk_widget_path_get_object_type(_arg0)

	var _gType externglib.Type // out

	_gType = externglib.Type(_cret)

	return _gType
}

// HasParent decrements the reference count on @path, freeing the structure if
// the reference count reaches 0.
func (p *WidgetPath) HasParent(typ externglib.Type) bool {
	var _arg0 *C.GtkWidgetPath // out
	var _arg1 C.GType          // out
	var _cret C.gboolean       // in

	_arg0 = (*C.GtkWidgetPath)(unsafe.Pointer(p.Native()))
	_arg1 = (C.GType)(typ)

	_cret = C.gtk_widget_path_has_parent(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// IsType decrements the reference count on @path, freeing the structure if the
// reference count reaches 0.
func (p *WidgetPath) IsType(typ externglib.Type) bool {
	var _arg0 *C.GtkWidgetPath // out
	var _arg1 C.GType          // out
	var _cret C.gboolean       // in

	_arg0 = (*C.GtkWidgetPath)(unsafe.Pointer(p.Native()))
	_arg1 = (C.GType)(typ)

	_cret = C.gtk_widget_path_is_type(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// IterAddClass decrements the reference count on @path, freeing the structure
// if the reference count reaches 0.
func (p *WidgetPath) IterAddClass(pos int, name string) {
	var _arg0 *C.GtkWidgetPath // out
	var _arg1 C.gint           // out
	var _arg2 *C.gchar         // out

	_arg0 = (*C.GtkWidgetPath)(unsafe.Pointer(p.Native()))
	_arg1 = C.gint(pos)
	_arg2 = (*C.gchar)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg2))

	C.gtk_widget_path_iter_add_class(_arg0, _arg1, _arg2)
}

// IterAddRegion decrements the reference count on @path, freeing the structure
// if the reference count reaches 0.
func (p *WidgetPath) IterAddRegion(pos int, name string, flags RegionFlags) {
	var _arg0 *C.GtkWidgetPath // out
	var _arg1 C.gint           // out
	var _arg2 *C.gchar         // out
	var _arg3 C.GtkRegionFlags // out

	_arg0 = (*C.GtkWidgetPath)(unsafe.Pointer(p.Native()))
	_arg1 = C.gint(pos)
	_arg2 = (*C.gchar)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = C.GtkRegionFlags(flags)

	C.gtk_widget_path_iter_add_region(_arg0, _arg1, _arg2, _arg3)
}

// IterClearClasses decrements the reference count on @path, freeing the
// structure if the reference count reaches 0.
func (p *WidgetPath) IterClearClasses(pos int) {
	var _arg0 *C.GtkWidgetPath // out
	var _arg1 C.gint           // out

	_arg0 = (*C.GtkWidgetPath)(unsafe.Pointer(p.Native()))
	_arg1 = C.gint(pos)

	C.gtk_widget_path_iter_clear_classes(_arg0, _arg1)
}

// IterClearRegions decrements the reference count on @path, freeing the
// structure if the reference count reaches 0.
func (p *WidgetPath) IterClearRegions(pos int) {
	var _arg0 *C.GtkWidgetPath // out
	var _arg1 C.gint           // out

	_arg0 = (*C.GtkWidgetPath)(unsafe.Pointer(p.Native()))
	_arg1 = C.gint(pos)

	C.gtk_widget_path_iter_clear_regions(_arg0, _arg1)
}

// IterGetName decrements the reference count on @path, freeing the structure if
// the reference count reaches 0.
func (p *WidgetPath) IterGetName(pos int) string {
	var _arg0 *C.GtkWidgetPath // out
	var _arg1 C.gint           // out
	var _cret *C.gchar         // in

	_arg0 = (*C.GtkWidgetPath)(unsafe.Pointer(p.Native()))
	_arg1 = C.gint(pos)

	_cret = C.gtk_widget_path_iter_get_name(_arg0, _arg1)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

// IterGetObjectName decrements the reference count on @path, freeing the
// structure if the reference count reaches 0.
func (p *WidgetPath) IterGetObjectName(pos int) string {
	var _arg0 *C.GtkWidgetPath // out
	var _arg1 C.gint           // out
	var _cret *C.char          // in

	_arg0 = (*C.GtkWidgetPath)(unsafe.Pointer(p.Native()))
	_arg1 = C.gint(pos)

	_cret = C.gtk_widget_path_iter_get_object_name(_arg0, _arg1)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

// IterGetObjectType decrements the reference count on @path, freeing the
// structure if the reference count reaches 0.
func (p *WidgetPath) IterGetObjectType(pos int) externglib.Type {
	var _arg0 *C.GtkWidgetPath // out
	var _arg1 C.gint           // out
	var _cret C.GType          // in

	_arg0 = (*C.GtkWidgetPath)(unsafe.Pointer(p.Native()))
	_arg1 = C.gint(pos)

	_cret = C.gtk_widget_path_iter_get_object_type(_arg0, _arg1)

	var _gType externglib.Type // out

	_gType = externglib.Type(_cret)

	return _gType
}

// IterGetSiblingIndex decrements the reference count on @path, freeing the
// structure if the reference count reaches 0.
func (p *WidgetPath) IterGetSiblingIndex(pos int) uint {
	var _arg0 *C.GtkWidgetPath // out
	var _arg1 C.gint           // out
	var _cret C.guint          // in

	_arg0 = (*C.GtkWidgetPath)(unsafe.Pointer(p.Native()))
	_arg1 = C.gint(pos)

	_cret = C.gtk_widget_path_iter_get_sibling_index(_arg0, _arg1)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// IterGetSiblings decrements the reference count on @path, freeing the
// structure if the reference count reaches 0.
func (p *WidgetPath) IterGetSiblings(pos int) *WidgetPath {
	var _arg0 *C.GtkWidgetPath // out
	var _arg1 C.gint           // out
	var _cret *C.GtkWidgetPath // in

	_arg0 = (*C.GtkWidgetPath)(unsafe.Pointer(p.Native()))
	_arg1 = C.gint(pos)

	_cret = C.gtk_widget_path_iter_get_siblings(_arg0, _arg1)

	var _widgetPath *WidgetPath // out

	_widgetPath = (*WidgetPath)(unsafe.Pointer(_cret))

	return _widgetPath
}

// IterGetState decrements the reference count on @path, freeing the structure
// if the reference count reaches 0.
func (p *WidgetPath) IterGetState(pos int) StateFlags {
	var _arg0 *C.GtkWidgetPath // out
	var _arg1 C.gint           // out
	var _cret C.GtkStateFlags  // in

	_arg0 = (*C.GtkWidgetPath)(unsafe.Pointer(p.Native()))
	_arg1 = C.gint(pos)

	_cret = C.gtk_widget_path_iter_get_state(_arg0, _arg1)

	var _stateFlags StateFlags // out

	_stateFlags = StateFlags(_cret)

	return _stateFlags
}

// IterHasClass decrements the reference count on @path, freeing the structure
// if the reference count reaches 0.
func (p *WidgetPath) IterHasClass(pos int, name string) bool {
	var _arg0 *C.GtkWidgetPath // out
	var _arg1 C.gint           // out
	var _arg2 *C.gchar         // out
	var _cret C.gboolean       // in

	_arg0 = (*C.GtkWidgetPath)(unsafe.Pointer(p.Native()))
	_arg1 = C.gint(pos)
	_arg2 = (*C.gchar)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.gtk_widget_path_iter_has_class(_arg0, _arg1, _arg2)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// IterHasName decrements the reference count on @path, freeing the structure if
// the reference count reaches 0.
func (p *WidgetPath) IterHasName(pos int, name string) bool {
	var _arg0 *C.GtkWidgetPath // out
	var _arg1 C.gint           // out
	var _arg2 *C.gchar         // out
	var _cret C.gboolean       // in

	_arg0 = (*C.GtkWidgetPath)(unsafe.Pointer(p.Native()))
	_arg1 = C.gint(pos)
	_arg2 = (*C.gchar)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.gtk_widget_path_iter_has_name(_arg0, _arg1, _arg2)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// IterHasRegion decrements the reference count on @path, freeing the structure
// if the reference count reaches 0.
func (p *WidgetPath) IterHasRegion(pos int, name string) (RegionFlags, bool) {
	var _arg0 *C.GtkWidgetPath // out
	var _arg1 C.gint           // out
	var _arg2 *C.gchar         // out
	var _arg3 C.GtkRegionFlags // in
	var _cret C.gboolean       // in

	_arg0 = (*C.GtkWidgetPath)(unsafe.Pointer(p.Native()))
	_arg1 = C.gint(pos)
	_arg2 = (*C.gchar)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.gtk_widget_path_iter_has_region(_arg0, _arg1, _arg2, &_arg3)

	var _flags RegionFlags // out
	var _ok bool           // out

	_flags = RegionFlags(_arg3)
	if _cret != 0 {
		_ok = true
	}

	return _flags, _ok
}

// IterRemoveClass decrements the reference count on @path, freeing the
// structure if the reference count reaches 0.
func (p *WidgetPath) IterRemoveClass(pos int, name string) {
	var _arg0 *C.GtkWidgetPath // out
	var _arg1 C.gint           // out
	var _arg2 *C.gchar         // out

	_arg0 = (*C.GtkWidgetPath)(unsafe.Pointer(p.Native()))
	_arg1 = C.gint(pos)
	_arg2 = (*C.gchar)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg2))

	C.gtk_widget_path_iter_remove_class(_arg0, _arg1, _arg2)
}

// IterRemoveRegion decrements the reference count on @path, freeing the
// structure if the reference count reaches 0.
func (p *WidgetPath) IterRemoveRegion(pos int, name string) {
	var _arg0 *C.GtkWidgetPath // out
	var _arg1 C.gint           // out
	var _arg2 *C.gchar         // out

	_arg0 = (*C.GtkWidgetPath)(unsafe.Pointer(p.Native()))
	_arg1 = C.gint(pos)
	_arg2 = (*C.gchar)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg2))

	C.gtk_widget_path_iter_remove_region(_arg0, _arg1, _arg2)
}

// IterSetName decrements the reference count on @path, freeing the structure if
// the reference count reaches 0.
func (p *WidgetPath) IterSetName(pos int, name string) {
	var _arg0 *C.GtkWidgetPath // out
	var _arg1 C.gint           // out
	var _arg2 *C.gchar         // out

	_arg0 = (*C.GtkWidgetPath)(unsafe.Pointer(p.Native()))
	_arg1 = C.gint(pos)
	_arg2 = (*C.gchar)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg2))

	C.gtk_widget_path_iter_set_name(_arg0, _arg1, _arg2)
}

// IterSetObjectName decrements the reference count on @path, freeing the
// structure if the reference count reaches 0.
func (p *WidgetPath) IterSetObjectName(pos int, name string) {
	var _arg0 *C.GtkWidgetPath // out
	var _arg1 C.gint           // out
	var _arg2 *C.char          // out

	_arg0 = (*C.GtkWidgetPath)(unsafe.Pointer(p.Native()))
	_arg1 = C.gint(pos)
	_arg2 = (*C.char)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg2))

	C.gtk_widget_path_iter_set_object_name(_arg0, _arg1, _arg2)
}

// IterSetObjectType decrements the reference count on @path, freeing the
// structure if the reference count reaches 0.
func (p *WidgetPath) IterSetObjectType(pos int, typ externglib.Type) {
	var _arg0 *C.GtkWidgetPath // out
	var _arg1 C.gint           // out
	var _arg2 C.GType          // out

	_arg0 = (*C.GtkWidgetPath)(unsafe.Pointer(p.Native()))
	_arg1 = C.gint(pos)
	_arg2 = (C.GType)(typ)

	C.gtk_widget_path_iter_set_object_type(_arg0, _arg1, _arg2)
}

// IterSetState decrements the reference count on @path, freeing the structure
// if the reference count reaches 0.
func (p *WidgetPath) IterSetState(pos int, state StateFlags) {
	var _arg0 *C.GtkWidgetPath // out
	var _arg1 C.gint           // out
	var _arg2 C.GtkStateFlags  // out

	_arg0 = (*C.GtkWidgetPath)(unsafe.Pointer(p.Native()))
	_arg1 = C.gint(pos)
	_arg2 = C.GtkStateFlags(state)

	C.gtk_widget_path_iter_set_state(_arg0, _arg1, _arg2)
}

// Length decrements the reference count on @path, freeing the structure if the
// reference count reaches 0.
func (p *WidgetPath) Length() int {
	var _arg0 *C.GtkWidgetPath // out
	var _cret C.gint           // in

	_arg0 = (*C.GtkWidgetPath)(unsafe.Pointer(p.Native()))

	_cret = C.gtk_widget_path_length(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// PrependType decrements the reference count on @path, freeing the structure if
// the reference count reaches 0.
func (p *WidgetPath) PrependType(typ externglib.Type) {
	var _arg0 *C.GtkWidgetPath // out
	var _arg1 C.GType          // out

	_arg0 = (*C.GtkWidgetPath)(unsafe.Pointer(p.Native()))
	_arg1 = (C.GType)(typ)

	C.gtk_widget_path_prepend_type(_arg0, _arg1)
}

// Ref decrements the reference count on @path, freeing the structure if the
// reference count reaches 0.
func (p *WidgetPath) Ref() *WidgetPath {
	var _arg0 *C.GtkWidgetPath // out
	var _cret *C.GtkWidgetPath // in

	_arg0 = (*C.GtkWidgetPath)(unsafe.Pointer(p.Native()))

	_cret = C.gtk_widget_path_ref(_arg0)

	var _widgetPath *WidgetPath // out

	_widgetPath = (*WidgetPath)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(&_widgetPath, func(v **WidgetPath) {
		C.free(unsafe.Pointer(v))
	})

	return _widgetPath
}

// String decrements the reference count on @path, freeing the structure if the
// reference count reaches 0.
func (p *WidgetPath) String() string {
	var _arg0 *C.GtkWidgetPath // out
	var _cret *C.char          // in

	_arg0 = (*C.GtkWidgetPath)(unsafe.Pointer(p.Native()))

	_cret = C.gtk_widget_path_to_string(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Unref decrements the reference count on @path, freeing the structure if the
// reference count reaches 0.
func (p *WidgetPath) Unref() {
	var _arg0 *C.GtkWidgetPath // out

	_arg0 = (*C.GtkWidgetPath)(unsafe.Pointer(p.Native()))

	C.gtk_widget_path_unref(_arg0)
}
