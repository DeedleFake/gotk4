// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/cairo"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
	"github.com/diamondburned/gotk4/pkg/gdkpixbuf/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_icon_set_get_type()), F: marshalIconSet},
		{T: externglib.Type(C.gtk_icon_source_get_type()), F: marshalIconSource},
		{T: externglib.Type(C.gtk_selection_data_get_type()), F: marshalSelectionData},
		{T: externglib.Type(C.gtk_widget_path_get_type()), F: marshalWidgetPath},
	})
}

//
type IconSet struct {
	native C.GtkIconSet
}

func marshalIconSet(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return (*IconSet)(unsafe.Pointer(b)), nil
}

// NewIconSet constructs a struct IconSet.
func NewIconSet() *IconSet {
	var _cret *C.GtkIconSet // in

	_cret = C.gtk_icon_set_new()

	var _iconSet *IconSet // out

	_iconSet = (*IconSet)(unsafe.Pointer(_cret))
	C.gtk_icon_set_ref(_cret)
	runtime.SetFinalizer(_iconSet, func(v *IconSet) {
		C.gtk_icon_set_unref((*C.GtkIconSet)(unsafe.Pointer(v)))
	})

	return _iconSet
}

// NewIconSetFromPixbuf constructs a struct IconSet.
func NewIconSetFromPixbuf(pixbuf gdkpixbuf.Pixbuffer) *IconSet {
	var _arg1 *C.GdkPixbuf  // out
	var _cret *C.GtkIconSet // in

	_arg1 = (*C.GdkPixbuf)(unsafe.Pointer((pixbuf).(gextras.Nativer).Native()))

	_cret = C.gtk_icon_set_new_from_pixbuf(_arg1)

	var _iconSet *IconSet // out

	_iconSet = (*IconSet)(unsafe.Pointer(_cret))
	C.gtk_icon_set_ref(_cret)
	runtime.SetFinalizer(_iconSet, func(v *IconSet) {
		C.gtk_icon_set_unref((*C.GtkIconSet)(unsafe.Pointer(v)))
	})

	return _iconSet
}

// Native returns the underlying C source pointer.
func (i *IconSet) Native() unsafe.Pointer {
	return unsafe.Pointer(&i.native)
}

// AddSource: icon sets have a list of IconSource, which they use as base icons
// for rendering icons in different states and sizes. Icons are scaled, made to
// look insensitive, etc. in gtk_icon_set_render_icon(), but IconSet needs base
// images to work with. The base images and when to use them are described by a
// IconSource.
//
// This function copies @source, so you can reuse the same source immediately
// without affecting the icon set.
//
// An example of when you’d use this function: a web browser’s "Back to Previous
// Page" icon might point in a different direction in Hebrew and in English; it
// might look different when insensitive; and it might change size depending on
// toolbar mode (small/large icons). So a single icon set would contain all
// those variants of the icon, and you might add a separate source for each one.
//
// You should nearly always add a “default” icon source with all fields
// wildcarded, which will be used as a fallback if no more specific source
// matches. IconSet always prefers more specific icon sources to more generic
// icon sources. The order in which you add the sources to the icon set does not
// matter.
//
// gtk_icon_set_new_from_pixbuf() creates a new icon set with a default icon
// source based on the given pixbuf.
//
// Deprecated: Use IconTheme instead.
func (iconSet *IconSet) AddSource(source *IconSource) {
	var _arg0 *C.GtkIconSet    // out
	var _arg1 *C.GtkIconSource // out

	_arg0 = (*C.GtkIconSet)(unsafe.Pointer(iconSet))
	_arg1 = (*C.GtkIconSource)(unsafe.Pointer(source))

	C.gtk_icon_set_add_source(_arg0, _arg1)
}

// Copy copies @icon_set by value.
//
// Deprecated: Use IconTheme instead.
func (iconSet *IconSet) Copy() *IconSet {
	var _arg0 *C.GtkIconSet // out
	var _cret *C.GtkIconSet // in

	_arg0 = (*C.GtkIconSet)(unsafe.Pointer(iconSet))

	_cret = C.gtk_icon_set_copy(_arg0)

	var _iconSet *IconSet // out

	_iconSet = (*IconSet)(unsafe.Pointer(_cret))
	C.gtk_icon_set_ref(_cret)
	runtime.SetFinalizer(_iconSet, func(v *IconSet) {
		C.gtk_icon_set_unref((*C.GtkIconSet)(unsafe.Pointer(v)))
	})

	return _iconSet
}

// Sizes obtains a list of icon sizes this icon set can render. The returned
// array must be freed with g_free().
//
// Deprecated: Use IconTheme instead.
func (iconSet *IconSet) Sizes() []int {
	var _arg0 *C.GtkIconSet // out
	var _arg1 *C.GtkIconSize
	var _arg2 C.gint // in

	_arg0 = (*C.GtkIconSet)(unsafe.Pointer(iconSet))

	C.gtk_icon_set_get_sizes(_arg0, &_arg1, &_arg2)

	var _sizes []int

	_sizes = unsafe.Slice((*int)(unsafe.Pointer(_arg1)), _arg2)
	runtime.SetFinalizer(&_sizes, func(v *[]int) {
		C.free(unsafe.Pointer(&(*v)[0]))
	})

	return _sizes
}

// Ref increments the reference count on @icon_set.
//
// Deprecated: Use IconTheme instead.
func (iconSet *IconSet) ref() *IconSet {
	var _arg0 *C.GtkIconSet // out
	var _cret *C.GtkIconSet // in

	_arg0 = (*C.GtkIconSet)(unsafe.Pointer(iconSet))

	_cret = C.gtk_icon_set_ref(_arg0)

	var _iconSet *IconSet // out

	_iconSet = (*IconSet)(unsafe.Pointer(_cret))
	C.gtk_icon_set_ref(_cret)
	runtime.SetFinalizer(_iconSet, func(v *IconSet) {
		C.gtk_icon_set_unref((*C.GtkIconSet)(unsafe.Pointer(v)))
	})

	return _iconSet
}

// RenderIconPixbuf renders an icon using gtk_render_icon_pixbuf(). In most
// cases, gtk_widget_render_icon_pixbuf() is better, since it automatically
// provides most of the arguments from the current widget settings. This
// function never returns nil; if the icon can’t be rendered (perhaps because an
// image file fails to load), a default "missing image" icon will be returned
// instead.
//
// Deprecated: Use IconTheme instead.
func (iconSet *IconSet) RenderIconPixbuf(context StyleContexter, size int) *gdkpixbuf.Pixbuf {
	var _arg0 *C.GtkIconSet      // out
	var _arg1 *C.GtkStyleContext // out
	var _arg2 C.GtkIconSize      // out
	var _cret *C.GdkPixbuf       // in

	_arg0 = (*C.GtkIconSet)(unsafe.Pointer(iconSet))
	_arg1 = (*C.GtkStyleContext)(unsafe.Pointer((context).(gextras.Nativer).Native()))
	_arg2 = C.GtkIconSize(size)

	_cret = C.gtk_icon_set_render_icon_pixbuf(_arg0, _arg1, _arg2)

	var _pixbuf *gdkpixbuf.Pixbuf // out

	_pixbuf = (gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret)))).(*gdkpixbuf.Pixbuf)

	return _pixbuf
}

// RenderIconSurface renders an icon using gtk_render_icon_pixbuf() and converts
// it to a cairo surface.
//
// This function never returns nil; if the icon can’t be rendered (perhaps
// because an image file fails to load), a default "missing image" icon will be
// returned instead.
//
// Deprecated: Use IconTheme instead.
func (iconSet *IconSet) RenderIconSurface(context StyleContexter, size int, scale int, forWindow gdk.Windowwer) *cairo.Surface {
	var _arg0 *C.GtkIconSet      // out
	var _arg1 *C.GtkStyleContext // out
	var _arg2 C.GtkIconSize      // out
	var _arg3 C.int              // out
	var _arg4 *C.GdkWindow       // out
	var _cret *C.cairo_surface_t // in

	_arg0 = (*C.GtkIconSet)(unsafe.Pointer(iconSet))
	_arg1 = (*C.GtkStyleContext)(unsafe.Pointer((context).(gextras.Nativer).Native()))
	_arg2 = C.GtkIconSize(size)
	_arg3 = C.int(scale)
	_arg4 = (*C.GdkWindow)(unsafe.Pointer((forWindow).(gextras.Nativer).Native()))

	_cret = C.gtk_icon_set_render_icon_surface(_arg0, _arg1, _arg2, _arg3, _arg4)

	var _surface *cairo.Surface // out

	_surface = (*cairo.Surface)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(_surface, func(v *cairo.Surface) {
		C.free(unsafe.Pointer(v))
	})

	return _surface
}

// Unref decrements the reference count on @icon_set, and frees memory if the
// reference count reaches 0.
//
// Deprecated: Use IconTheme instead.
func (iconSet *IconSet) unref() {
	var _arg0 *C.GtkIconSet // out

	_arg0 = (*C.GtkIconSet)(unsafe.Pointer(iconSet))

	C.gtk_icon_set_unref(_arg0)
}

//
type IconSource struct {
	native C.GtkIconSource
}

func marshalIconSource(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return (*IconSource)(unsafe.Pointer(b)), nil
}

// NewIconSource constructs a struct IconSource.
func NewIconSource() *IconSource {
	var _cret *C.GtkIconSource // in

	_cret = C.gtk_icon_source_new()

	var _iconSource *IconSource // out

	_iconSource = (*IconSource)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(_iconSource, func(v *IconSource) {
		C.gtk_icon_source_free((*C.GtkIconSource)(unsafe.Pointer(v)))
	})

	return _iconSource
}

// Native returns the underlying C source pointer.
func (i *IconSource) Native() unsafe.Pointer {
	return unsafe.Pointer(&i.native)
}

// Copy creates a copy of @source; mostly useful for language bindings.
//
// Deprecated: Use IconTheme instead.
func (source *IconSource) Copy() *IconSource {
	var _arg0 *C.GtkIconSource // out
	var _cret *C.GtkIconSource // in

	_arg0 = (*C.GtkIconSource)(unsafe.Pointer(source))

	_cret = C.gtk_icon_source_copy(_arg0)

	var _iconSource *IconSource // out

	_iconSource = (*IconSource)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(_iconSource, func(v *IconSource) {
		C.gtk_icon_source_free((*C.GtkIconSource)(unsafe.Pointer(v)))
	})

	return _iconSource
}

// Free frees a dynamically-allocated icon source, along with its filename,
// size, and pixbuf fields if those are not nil.
//
// Deprecated: Use IconTheme instead.
func (source *IconSource) free() {
	var _arg0 *C.GtkIconSource // out

	_arg0 = (*C.GtkIconSource)(unsafe.Pointer(source))

	C.gtk_icon_source_free(_arg0)
}

// Direction obtains the text direction this icon source applies to. The return
// value is only useful/meaningful if the text direction is not wildcarded.
//
// Deprecated: Use IconTheme instead.
func (source *IconSource) Direction() TextDirection {
	var _arg0 *C.GtkIconSource   // out
	var _cret C.GtkTextDirection // in

	_arg0 = (*C.GtkIconSource)(unsafe.Pointer(source))

	_cret = C.gtk_icon_source_get_direction(_arg0)

	var _textDirection TextDirection // out

	_textDirection = TextDirection(_cret)

	return _textDirection
}

// DirectionWildcarded gets the value set by
// gtk_icon_source_set_direction_wildcarded().
//
// Deprecated: Use IconTheme instead.
func (source *IconSource) DirectionWildcarded() bool {
	var _arg0 *C.GtkIconSource // out
	var _cret C.gboolean       // in

	_arg0 = (*C.GtkIconSource)(unsafe.Pointer(source))

	_cret = C.gtk_icon_source_get_direction_wildcarded(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Filename retrieves the source filename, or nil if none is set. The filename
// is not a copy, and should not be modified or expected to persist beyond the
// lifetime of the icon source.
//
// Deprecated: Use IconTheme instead.
func (source *IconSource) Filename() string {
	var _arg0 *C.GtkIconSource // out
	var _cret *C.gchar         // in

	_arg0 = (*C.GtkIconSource)(unsafe.Pointer(source))

	_cret = C.gtk_icon_source_get_filename(_arg0)

	var _filename string // out

	_filename = C.GoString((*C.gchar)(_cret))

	return _filename
}

// IconName retrieves the source icon name, or nil if none is set. The icon_name
// is not a copy, and should not be modified or expected to persist beyond the
// lifetime of the icon source.
//
// Deprecated: Use IconTheme instead.
func (source *IconSource) IconName() string {
	var _arg0 *C.GtkIconSource // out
	var _cret *C.gchar         // in

	_arg0 = (*C.GtkIconSource)(unsafe.Pointer(source))

	_cret = C.gtk_icon_source_get_icon_name(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(_cret))

	return _utf8
}

// Pixbuf retrieves the source pixbuf, or nil if none is set. In addition, if a
// filename source is in use, this function in some cases will return the pixbuf
// from loaded from the filename. This is, for example, true for the
// GtkIconSource passed to the Style render_icon() virtual function. The
// reference count on the pixbuf is not incremented.
//
// Deprecated: Use IconTheme instead.
func (source *IconSource) Pixbuf() *gdkpixbuf.Pixbuf {
	var _arg0 *C.GtkIconSource // out
	var _cret *C.GdkPixbuf     // in

	_arg0 = (*C.GtkIconSource)(unsafe.Pointer(source))

	_cret = C.gtk_icon_source_get_pixbuf(_arg0)

	var _pixbuf *gdkpixbuf.Pixbuf // out

	_pixbuf = (gextras.CastObject(externglib.Take(unsafe.Pointer(_cret)))).(*gdkpixbuf.Pixbuf)

	return _pixbuf
}

// Size obtains the icon size this source applies to. The return value is only
// useful/meaningful if the icon size is not wildcarded.
//
// Deprecated: Use IconTheme instead.
func (source *IconSource) Size() int {
	var _arg0 *C.GtkIconSource // out
	var _cret C.GtkIconSize    // in

	_arg0 = (*C.GtkIconSource)(unsafe.Pointer(source))

	_cret = C.gtk_icon_source_get_size(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// SizeWildcarded gets the value set by gtk_icon_source_set_size_wildcarded().
//
// Deprecated: Use IconTheme instead.
func (source *IconSource) SizeWildcarded() bool {
	var _arg0 *C.GtkIconSource // out
	var _cret C.gboolean       // in

	_arg0 = (*C.GtkIconSource)(unsafe.Pointer(source))

	_cret = C.gtk_icon_source_get_size_wildcarded(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// State obtains the widget state this icon source applies to. The return value
// is only useful/meaningful if the widget state is not wildcarded.
//
// Deprecated: Use IconTheme instead.
func (source *IconSource) State() StateType {
	var _arg0 *C.GtkIconSource // out
	var _cret C.GtkStateType   // in

	_arg0 = (*C.GtkIconSource)(unsafe.Pointer(source))

	_cret = C.gtk_icon_source_get_state(_arg0)

	var _stateType StateType // out

	_stateType = StateType(_cret)

	return _stateType
}

// StateWildcarded gets the value set by gtk_icon_source_set_state_wildcarded().
//
// Deprecated: Use IconTheme instead.
func (source *IconSource) StateWildcarded() bool {
	var _arg0 *C.GtkIconSource // out
	var _cret C.gboolean       // in

	_arg0 = (*C.GtkIconSource)(unsafe.Pointer(source))

	_cret = C.gtk_icon_source_get_state_wildcarded(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetDirectionWildcarded: if the text direction is wildcarded, this source can
// be used as the base image for an icon in any TextDirection. If the text
// direction is not wildcarded, then the text direction the icon source applies
// to should be set with gtk_icon_source_set_direction(), and the icon source
// will only be used with that text direction.
//
// IconSet prefers non-wildcarded sources (exact matches) over wildcarded
// sources, and will use an exact match when possible.
//
// Deprecated: Use IconTheme instead.
func (source *IconSource) SetDirectionWildcarded(setting bool) {
	var _arg0 *C.GtkIconSource // out
	var _arg1 C.gboolean       // out

	_arg0 = (*C.GtkIconSource)(unsafe.Pointer(source))
	if setting {
		_arg1 = C.TRUE
	}

	C.gtk_icon_source_set_direction_wildcarded(_arg0, _arg1)
}

// SetFilename sets the name of an image file to use as a base image when
// creating icon variants for IconSet. The filename must be absolute.
//
// Deprecated: Use IconTheme instead.
func (source *IconSource) SetFilename(filename string) {
	var _arg0 *C.GtkIconSource // out
	var _arg1 *C.gchar         // out

	_arg0 = (*C.GtkIconSource)(unsafe.Pointer(source))
	_arg1 = (*C.gchar)(C.CString(filename))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_icon_source_set_filename(_arg0, _arg1)
}

// SetIconName sets the name of an icon to look up in the current icon theme to
// use as a base image when creating icon variants for IconSet.
//
// Deprecated: Use IconTheme instead.
func (source *IconSource) SetIconName(iconName string) {
	var _arg0 *C.GtkIconSource // out
	var _arg1 *C.gchar         // out

	_arg0 = (*C.GtkIconSource)(unsafe.Pointer(source))
	_arg1 = (*C.gchar)(C.CString(iconName))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_icon_source_set_icon_name(_arg0, _arg1)
}

// SetPixbuf sets a pixbuf to use as a base image when creating icon variants
// for IconSet.
//
// Deprecated: Use IconTheme instead.
func (source *IconSource) SetPixbuf(pixbuf gdkpixbuf.Pixbuffer) {
	var _arg0 *C.GtkIconSource // out
	var _arg1 *C.GdkPixbuf     // out

	_arg0 = (*C.GtkIconSource)(unsafe.Pointer(source))
	_arg1 = (*C.GdkPixbuf)(unsafe.Pointer((pixbuf).(gextras.Nativer).Native()))

	C.gtk_icon_source_set_pixbuf(_arg0, _arg1)
}

// SetSize sets the icon size this icon source is intended to be used with.
//
// Setting the icon size on an icon source makes no difference if the size is
// wildcarded. Therefore, you should usually call
// gtk_icon_source_set_size_wildcarded() to un-wildcard it in addition to
// calling this function.
//
// Deprecated: Use IconTheme instead.
func (source *IconSource) SetSize(size int) {
	var _arg0 *C.GtkIconSource // out
	var _arg1 C.GtkIconSize    // out

	_arg0 = (*C.GtkIconSource)(unsafe.Pointer(source))
	_arg1 = C.GtkIconSize(size)

	C.gtk_icon_source_set_size(_arg0, _arg1)
}

// SetSizeWildcarded: if the icon size is wildcarded, this source can be used as
// the base image for an icon of any size. If the size is not wildcarded, then
// the size the source applies to should be set with gtk_icon_source_set_size()
// and the icon source will only be used with that specific size.
//
// IconSet prefers non-wildcarded sources (exact matches) over wildcarded
// sources, and will use an exact match when possible.
//
// IconSet will normally scale wildcarded source images to produce an
// appropriate icon at a given size, but will not change the size of source
// images that match exactly.
//
// Deprecated: Use IconTheme instead.
func (source *IconSource) SetSizeWildcarded(setting bool) {
	var _arg0 *C.GtkIconSource // out
	var _arg1 C.gboolean       // out

	_arg0 = (*C.GtkIconSource)(unsafe.Pointer(source))
	if setting {
		_arg1 = C.TRUE
	}

	C.gtk_icon_source_set_size_wildcarded(_arg0, _arg1)
}

// SetStateWildcarded: if the widget state is wildcarded, this source can be
// used as the base image for an icon in any StateType. If the widget state is
// not wildcarded, then the state the source applies to should be set with
// gtk_icon_source_set_state() and the icon source will only be used with that
// specific state.
//
// IconSet prefers non-wildcarded sources (exact matches) over wildcarded
// sources, and will use an exact match when possible.
//
// IconSet will normally transform wildcarded source images to produce an
// appropriate icon for a given state, for example lightening an image on
// prelight, but will not modify source images that match exactly.
//
// Deprecated: Use IconTheme instead.
func (source *IconSource) SetStateWildcarded(setting bool) {
	var _arg0 *C.GtkIconSource // out
	var _arg1 C.gboolean       // out

	_arg0 = (*C.GtkIconSource)(unsafe.Pointer(source))
	if setting {
		_arg1 = C.TRUE
	}

	C.gtk_icon_source_set_state_wildcarded(_arg0, _arg1)
}

//
type SelectionData struct {
	native C.GtkSelectionData
}

func marshalSelectionData(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return (*SelectionData)(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (s *SelectionData) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

// Copy makes a copy of a SelectionData-struct and its data.
func (data *SelectionData) Copy() *SelectionData {
	var _arg0 *C.GtkSelectionData // out
	var _cret *C.GtkSelectionData // in

	_arg0 = (*C.GtkSelectionData)(unsafe.Pointer(data))

	_cret = C.gtk_selection_data_copy(_arg0)

	var _selectionData *SelectionData // out

	_selectionData = (*SelectionData)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(_selectionData, func(v *SelectionData) {
		C.gtk_selection_data_free((*C.GtkSelectionData)(unsafe.Pointer(v)))
	})

	return _selectionData
}

// Free frees a SelectionData-struct returned from gtk_selection_data_copy().
func (data *SelectionData) free() {
	var _arg0 *C.GtkSelectionData // out

	_arg0 = (*C.GtkSelectionData)(unsafe.Pointer(data))

	C.gtk_selection_data_free(_arg0)
}

// Display retrieves the display of the selection.
func (selectionData *SelectionData) Display() *gdk.Display {
	var _arg0 *C.GtkSelectionData // out
	var _cret *C.GdkDisplay       // in

	_arg0 = (*C.GtkSelectionData)(unsafe.Pointer(selectionData))

	_cret = C.gtk_selection_data_get_display(_arg0)

	var _display *gdk.Display // out

	_display = (gextras.CastObject(externglib.Take(unsafe.Pointer(_cret)))).(*gdk.Display)

	return _display
}

// Format retrieves the format of the selection.
func (selectionData *SelectionData) Format() int {
	var _arg0 *C.GtkSelectionData // out
	var _cret C.gint              // in

	_arg0 = (*C.GtkSelectionData)(unsafe.Pointer(selectionData))

	_cret = C.gtk_selection_data_get_format(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// Length retrieves the length of the raw data of the selection.
func (selectionData *SelectionData) Length() int {
	var _arg0 *C.GtkSelectionData // out
	var _cret C.gint              // in

	_arg0 = (*C.GtkSelectionData)(unsafe.Pointer(selectionData))

	_cret = C.gtk_selection_data_get_length(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// Pixbuf gets the contents of the selection data as a Pixbuf.
func (selectionData *SelectionData) Pixbuf() *gdkpixbuf.Pixbuf {
	var _arg0 *C.GtkSelectionData // out
	var _cret *C.GdkPixbuf        // in

	_arg0 = (*C.GtkSelectionData)(unsafe.Pointer(selectionData))

	_cret = C.gtk_selection_data_get_pixbuf(_arg0)

	var _pixbuf *gdkpixbuf.Pixbuf // out

	_pixbuf = (gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret)))).(*gdkpixbuf.Pixbuf)

	return _pixbuf
}

// Text gets the contents of the selection data as a UTF-8 string.
func (selectionData *SelectionData) Text() string {
	var _arg0 *C.GtkSelectionData // out
	var _cret *C.guchar           // in

	_arg0 = (*C.GtkSelectionData)(unsafe.Pointer(selectionData))

	_cret = C.gtk_selection_data_get_text(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(_cret))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Uris gets the contents of the selection data as array of URIs.
func (selectionData *SelectionData) Uris() []string {
	var _arg0 *C.GtkSelectionData // out
	var _cret **C.gchar

	_arg0 = (*C.GtkSelectionData)(unsafe.Pointer(selectionData))

	_cret = C.gtk_selection_data_get_uris(_arg0)

	var _utf8s []string

	{
		var i int
		var z *C.gchar
		for p := _cret; *p != z; p = &unsafe.Slice(p, i+1)[i] {
			i++
		}

		src := unsafe.Slice(_cret, i)
		_utf8s = make([]string, i)
		for i := range src {
			_utf8s[i] = C.GoString((*C.gchar)(src[i]))
			defer C.free(unsafe.Pointer(src[i]))
		}
	}

	return _utf8s
}

// SetPixbuf sets the contents of the selection from a Pixbuf The pixbuf is
// converted to the form determined by @selection_data->target.
func (selectionData *SelectionData) SetPixbuf(pixbuf gdkpixbuf.Pixbuffer) bool {
	var _arg0 *C.GtkSelectionData // out
	var _arg1 *C.GdkPixbuf        // out
	var _cret C.gboolean          // in

	_arg0 = (*C.GtkSelectionData)(unsafe.Pointer(selectionData))
	_arg1 = (*C.GdkPixbuf)(unsafe.Pointer((pixbuf).(gextras.Nativer).Native()))

	_cret = C.gtk_selection_data_set_pixbuf(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetText sets the contents of the selection from a UTF-8 encoded string. The
// string is converted to the form determined by @selection_data->target.
func (selectionData *SelectionData) SetText(str string, len int) bool {
	var _arg0 *C.GtkSelectionData // out
	var _arg1 *C.gchar            // out
	var _arg2 C.gint              // out
	var _cret C.gboolean          // in

	_arg0 = (*C.GtkSelectionData)(unsafe.Pointer(selectionData))
	_arg1 = (*C.gchar)(C.CString(str))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.gint(len)

	_cret = C.gtk_selection_data_set_text(_arg0, _arg1, _arg2)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetUris sets the contents of the selection from a list of URIs. The string is
// converted to the form determined by @selection_data->target.
func (selectionData *SelectionData) SetUris(uris []string) bool {
	var _arg0 *C.GtkSelectionData // out
	var _arg1 **C.gchar
	var _cret C.gboolean // in

	_arg0 = (*C.GtkSelectionData)(unsafe.Pointer(selectionData))
	_arg1 = (**C.gchar)(C.malloc(C.ulong(len(uris)+1) * C.ulong(unsafe.Sizeof(uint(0)))))
	defer C.free(unsafe.Pointer(_arg1))
	{
		out := unsafe.Slice(_arg1, len(uris))
		for i := range uris {
			out[i] = (*C.gchar)(C.CString(uris[i]))
			defer C.free(unsafe.Pointer(out[i]))
		}
	}

	_cret = C.gtk_selection_data_set_uris(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// TargetsIncludeImage: given a SelectionData object holding a list of targets,
// determines if any of the targets in @targets can be used to provide a Pixbuf.
func (selectionData *SelectionData) TargetsIncludeImage(writable bool) bool {
	var _arg0 *C.GtkSelectionData // out
	var _arg1 C.gboolean          // out
	var _cret C.gboolean          // in

	_arg0 = (*C.GtkSelectionData)(unsafe.Pointer(selectionData))
	if writable {
		_arg1 = C.TRUE
	}

	_cret = C.gtk_selection_data_targets_include_image(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// TargetsIncludeRichText: given a SelectionData object holding a list of
// targets, determines if any of the targets in @targets can be used to provide
// rich text.
func (selectionData *SelectionData) TargetsIncludeRichText(buffer TextBufferer) bool {
	var _arg0 *C.GtkSelectionData // out
	var _arg1 *C.GtkTextBuffer    // out
	var _cret C.gboolean          // in

	_arg0 = (*C.GtkSelectionData)(unsafe.Pointer(selectionData))
	_arg1 = (*C.GtkTextBuffer)(unsafe.Pointer((buffer).(gextras.Nativer).Native()))

	_cret = C.gtk_selection_data_targets_include_rich_text(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// TargetsIncludeText: given a SelectionData object holding a list of targets,
// determines if any of the targets in @targets can be used to provide text.
func (selectionData *SelectionData) TargetsIncludeText() bool {
	var _arg0 *C.GtkSelectionData // out
	var _cret C.gboolean          // in

	_arg0 = (*C.GtkSelectionData)(unsafe.Pointer(selectionData))

	_cret = C.gtk_selection_data_targets_include_text(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// TargetsIncludeURI: given a SelectionData object holding a list of targets,
// determines if any of the targets in @targets can be used to provide a list or
// URIs.
func (selectionData *SelectionData) TargetsIncludeURI() bool {
	var _arg0 *C.GtkSelectionData // out
	var _cret C.gboolean          // in

	_arg0 = (*C.GtkSelectionData)(unsafe.Pointer(selectionData))

	_cret = C.gtk_selection_data_targets_include_uri(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// WidgetPath is a boxed type that represents a widget hierarchy from the
// topmost widget, typically a toplevel, to any child. This widget path
// abstraction is used in StyleContext on behalf of the real widget in order to
// query style information.
//
// If you are using GTK+ widgets, you probably will not need to use this API
// directly, as there is gtk_widget_get_path(), and the style context returned
// by gtk_widget_get_style_context() will be automatically updated on widget
// hierarchy changes.
//
// The widget path generation is generally simple:
//
// Defining a button within a window
//
//    {
//      GtkWidgetPath *path;
//      guint pos;
//
//      path = gtk_widget_path_new ();
//
//      pos = gtk_widget_path_append_type (path, GTK_TYPE_NOTEBOOK);
//      gtk_widget_path_iter_add_region (path, pos, "tab", GTK_REGION_EVEN | GTK_REGION_FIRST);
//
//      pos = gtk_widget_path_append_type (path, GTK_TYPE_LABEL);
//      gtk_widget_path_iter_set_name (path, pos, "first tab label");
//    }
//
// All this information will be used to match the style information that applies
// to the described widget.
type WidgetPath struct {
	native C.GtkWidgetPath
}

func marshalWidgetPath(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return (*WidgetPath)(unsafe.Pointer(b)), nil
}

// NewWidgetPath constructs a struct WidgetPath.
func NewWidgetPath() *WidgetPath {
	var _cret *C.GtkWidgetPath // in

	_cret = C.gtk_widget_path_new()

	var _widgetPath *WidgetPath // out

	_widgetPath = (*WidgetPath)(unsafe.Pointer(_cret))
	C.gtk_widget_path_ref(_cret)
	runtime.SetFinalizer(_widgetPath, func(v *WidgetPath) {
		C.gtk_widget_path_unref((*C.GtkWidgetPath)(unsafe.Pointer(v)))
	})

	return _widgetPath
}

// Native returns the underlying C source pointer.
func (w *WidgetPath) Native() unsafe.Pointer {
	return unsafe.Pointer(&w.native)
}

// AppendForWidget appends the data from @widget to the widget hierarchy
// represented by @path. This function is a shortcut for adding information from
// @widget to the given @path. This includes setting the name or adding the
// style classes from @widget.
func (path *WidgetPath) AppendForWidget(widget Widgetter) int {
	var _arg0 *C.GtkWidgetPath // out
	var _arg1 *C.GtkWidget     // out
	var _cret C.gint           // in

	_arg0 = (*C.GtkWidgetPath)(unsafe.Pointer(path))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer((widget).(gextras.Nativer).Native()))

	_cret = C.gtk_widget_path_append_for_widget(_arg0, _arg1)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// AppendType appends a widget type to the widget hierarchy represented by
// @path.
func (path *WidgetPath) AppendType(typ externglib.Type) int {
	var _arg0 *C.GtkWidgetPath // out
	var _arg1 C.GType          // out
	var _cret C.gint           // in

	_arg0 = (*C.GtkWidgetPath)(unsafe.Pointer(path))
	_arg1 = C.GType(typ)

	_cret = C.gtk_widget_path_append_type(_arg0, _arg1)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// AppendWithSiblings appends a widget type with all its siblings to the widget
// hierarchy represented by @path. Using this function instead of
// gtk_widget_path_append_type() will allow the CSS theming to use sibling
// matches in selectors and apply :nth-child() pseudo classes. In turn, it
// requires a lot more care in widget implementations as widgets need to make
// sure to call gtk_widget_reset_style() on all involved widgets when the
// @siblings path changes.
func (path *WidgetPath) AppendWithSiblings(siblings *WidgetPath, siblingIndex uint) int {
	var _arg0 *C.GtkWidgetPath // out
	var _arg1 *C.GtkWidgetPath // out
	var _arg2 C.guint          // out
	var _cret C.gint           // in

	_arg0 = (*C.GtkWidgetPath)(unsafe.Pointer(path))
	_arg1 = (*C.GtkWidgetPath)(unsafe.Pointer(siblings))
	_arg2 = C.guint(siblingIndex)

	_cret = C.gtk_widget_path_append_with_siblings(_arg0, _arg1, _arg2)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// Copy returns a copy of @path
func (path *WidgetPath) Copy() *WidgetPath {
	var _arg0 *C.GtkWidgetPath // out
	var _cret *C.GtkWidgetPath // in

	_arg0 = (*C.GtkWidgetPath)(unsafe.Pointer(path))

	_cret = C.gtk_widget_path_copy(_arg0)

	var _widgetPath *WidgetPath // out

	_widgetPath = (*WidgetPath)(unsafe.Pointer(_cret))
	C.gtk_widget_path_ref(_cret)
	runtime.SetFinalizer(_widgetPath, func(v *WidgetPath) {
		C.gtk_widget_path_unref((*C.GtkWidgetPath)(unsafe.Pointer(v)))
	})

	return _widgetPath
}

// Free decrements the reference count on @path, freeing the structure if the
// reference count reaches 0.
func (path *WidgetPath) free() {
	var _arg0 *C.GtkWidgetPath // out

	_arg0 = (*C.GtkWidgetPath)(unsafe.Pointer(path))

	C.gtk_widget_path_free(_arg0)
}

// ObjectType returns the topmost object type, that is, the object type this
// path is representing.
func (path *WidgetPath) ObjectType() externglib.Type {
	var _arg0 *C.GtkWidgetPath // out
	var _cret C.GType          // in

	_arg0 = (*C.GtkWidgetPath)(unsafe.Pointer(path))

	_cret = C.gtk_widget_path_get_object_type(_arg0)

	var _gType externglib.Type // out

	_gType = externglib.Type(_cret)

	return _gType
}

// HasParent returns true if any of the parents of the widget represented in
// @path is of type @type, or any subtype of it.
func (path *WidgetPath) HasParent(typ externglib.Type) bool {
	var _arg0 *C.GtkWidgetPath // out
	var _arg1 C.GType          // out
	var _cret C.gboolean       // in

	_arg0 = (*C.GtkWidgetPath)(unsafe.Pointer(path))
	_arg1 = C.GType(typ)

	_cret = C.gtk_widget_path_has_parent(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// IsType returns true if the widget type represented by this path is @type, or
// a subtype of it.
func (path *WidgetPath) IsType(typ externglib.Type) bool {
	var _arg0 *C.GtkWidgetPath // out
	var _arg1 C.GType          // out
	var _cret C.gboolean       // in

	_arg0 = (*C.GtkWidgetPath)(unsafe.Pointer(path))
	_arg1 = C.GType(typ)

	_cret = C.gtk_widget_path_is_type(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// IterAddClass adds the class @name to the widget at position @pos in the
// hierarchy defined in @path. See gtk_style_context_add_class().
func (path *WidgetPath) IterAddClass(pos int, name string) {
	var _arg0 *C.GtkWidgetPath // out
	var _arg1 C.gint           // out
	var _arg2 *C.gchar         // out

	_arg0 = (*C.GtkWidgetPath)(unsafe.Pointer(path))
	_arg1 = C.gint(pos)
	_arg2 = (*C.gchar)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg2))

	C.gtk_widget_path_iter_add_class(_arg0, _arg1, _arg2)
}

// IterClearClasses removes all classes from the widget at position @pos in the
// hierarchy defined in @path.
func (path *WidgetPath) IterClearClasses(pos int) {
	var _arg0 *C.GtkWidgetPath // out
	var _arg1 C.gint           // out

	_arg0 = (*C.GtkWidgetPath)(unsafe.Pointer(path))
	_arg1 = C.gint(pos)

	C.gtk_widget_path_iter_clear_classes(_arg0, _arg1)
}

// IterClearRegions removes all regions from the widget at position @pos in the
// hierarchy defined in @path.
//
// Deprecated: The use of regions is deprecated.
func (path *WidgetPath) IterClearRegions(pos int) {
	var _arg0 *C.GtkWidgetPath // out
	var _arg1 C.gint           // out

	_arg0 = (*C.GtkWidgetPath)(unsafe.Pointer(path))
	_arg1 = C.gint(pos)

	C.gtk_widget_path_iter_clear_regions(_arg0, _arg1)
}

// IterGetName returns the name corresponding to the widget found at the
// position @pos in the widget hierarchy defined by @path
func (path *WidgetPath) IterGetName(pos int) string {
	var _arg0 *C.GtkWidgetPath // out
	var _arg1 C.gint           // out
	var _cret *C.gchar         // in

	_arg0 = (*C.GtkWidgetPath)(unsafe.Pointer(path))
	_arg1 = C.gint(pos)

	_cret = C.gtk_widget_path_iter_get_name(_arg0, _arg1)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(_cret))

	return _utf8
}

// IterGetObjectName returns the object name that is at position @pos in the
// widget hierarchy defined in @path.
func (path *WidgetPath) IterGetObjectName(pos int) string {
	var _arg0 *C.GtkWidgetPath // out
	var _arg1 C.gint           // out
	var _cret *C.char          // in

	_arg0 = (*C.GtkWidgetPath)(unsafe.Pointer(path))
	_arg1 = C.gint(pos)

	_cret = C.gtk_widget_path_iter_get_object_name(_arg0, _arg1)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(_cret))

	return _utf8
}

// IterGetObjectType returns the object #GType that is at position @pos in the
// widget hierarchy defined in @path.
func (path *WidgetPath) IterGetObjectType(pos int) externglib.Type {
	var _arg0 *C.GtkWidgetPath // out
	var _arg1 C.gint           // out
	var _cret C.GType          // in

	_arg0 = (*C.GtkWidgetPath)(unsafe.Pointer(path))
	_arg1 = C.gint(pos)

	_cret = C.gtk_widget_path_iter_get_object_type(_arg0, _arg1)

	var _gType externglib.Type // out

	_gType = externglib.Type(_cret)

	return _gType
}

// IterGetSiblingIndex returns the index into the list of siblings for the
// element at @pos as returned by gtk_widget_path_iter_get_siblings(). If that
// function would return nil because the element at @pos has no siblings, this
// function will return 0.
func (path *WidgetPath) IterGetSiblingIndex(pos int) uint {
	var _arg0 *C.GtkWidgetPath // out
	var _arg1 C.gint           // out
	var _cret C.guint          // in

	_arg0 = (*C.GtkWidgetPath)(unsafe.Pointer(path))
	_arg1 = C.gint(pos)

	_cret = C.gtk_widget_path_iter_get_sibling_index(_arg0, _arg1)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// IterGetSiblings returns the list of siblings for the element at @pos. If the
// element was not added with siblings, nil is returned.
func (path *WidgetPath) IterGetSiblings(pos int) *WidgetPath {
	var _arg0 *C.GtkWidgetPath // out
	var _arg1 C.gint           // out
	var _cret *C.GtkWidgetPath // in

	_arg0 = (*C.GtkWidgetPath)(unsafe.Pointer(path))
	_arg1 = C.gint(pos)

	_cret = C.gtk_widget_path_iter_get_siblings(_arg0, _arg1)

	var _widgetPath *WidgetPath // out

	_widgetPath = (*WidgetPath)(unsafe.Pointer(_cret))
	C.gtk_widget_path_ref(_cret)
	runtime.SetFinalizer(_widgetPath, func(v *WidgetPath) {
		C.gtk_widget_path_unref((*C.GtkWidgetPath)(unsafe.Pointer(v)))
	})

	return _widgetPath
}

// IterGetState returns the state flags corresponding to the widget found at the
// position @pos in the widget hierarchy defined by @path
func (path *WidgetPath) IterGetState(pos int) StateFlags {
	var _arg0 *C.GtkWidgetPath // out
	var _arg1 C.gint           // out
	var _cret C.GtkStateFlags  // in

	_arg0 = (*C.GtkWidgetPath)(unsafe.Pointer(path))
	_arg1 = C.gint(pos)

	_cret = C.gtk_widget_path_iter_get_state(_arg0, _arg1)

	var _stateFlags StateFlags // out

	_stateFlags = StateFlags(_cret)

	return _stateFlags
}

// IterHasClass returns true if the widget at position @pos has the class @name
// defined, false otherwise.
func (path *WidgetPath) IterHasClass(pos int, name string) bool {
	var _arg0 *C.GtkWidgetPath // out
	var _arg1 C.gint           // out
	var _arg2 *C.gchar         // out
	var _cret C.gboolean       // in

	_arg0 = (*C.GtkWidgetPath)(unsafe.Pointer(path))
	_arg1 = C.gint(pos)
	_arg2 = (*C.gchar)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.gtk_widget_path_iter_has_class(_arg0, _arg1, _arg2)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// IterHasName returns true if the widget at position @pos has the name @name,
// false otherwise.
func (path *WidgetPath) IterHasName(pos int, name string) bool {
	var _arg0 *C.GtkWidgetPath // out
	var _arg1 C.gint           // out
	var _arg2 *C.gchar         // out
	var _cret C.gboolean       // in

	_arg0 = (*C.GtkWidgetPath)(unsafe.Pointer(path))
	_arg1 = C.gint(pos)
	_arg2 = (*C.gchar)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.gtk_widget_path_iter_has_name(_arg0, _arg1, _arg2)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// IterHasRegion returns true if the widget at position @pos has the class @name
// defined, false otherwise.
//
// Deprecated: The use of regions is deprecated.
func (path *WidgetPath) IterHasRegion(pos int, name string) (RegionFlags, bool) {
	var _arg0 *C.GtkWidgetPath // out
	var _arg1 C.gint           // out
	var _arg2 *C.gchar         // out
	var _arg3 C.GtkRegionFlags // in
	var _cret C.gboolean       // in

	_arg0 = (*C.GtkWidgetPath)(unsafe.Pointer(path))
	_arg1 = C.gint(pos)
	_arg2 = (*C.gchar)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.gtk_widget_path_iter_has_region(_arg0, _arg1, _arg2, &_arg3)

	var _flags RegionFlags // out
	var _ok bool           // out

	_flags = RegionFlags(_arg3)
	if _cret != 0 {
		_ok = true
	}

	return _flags, _ok
}

// IterRemoveClass removes the class @name from the widget at position @pos in
// the hierarchy defined in @path.
func (path *WidgetPath) IterRemoveClass(pos int, name string) {
	var _arg0 *C.GtkWidgetPath // out
	var _arg1 C.gint           // out
	var _arg2 *C.gchar         // out

	_arg0 = (*C.GtkWidgetPath)(unsafe.Pointer(path))
	_arg1 = C.gint(pos)
	_arg2 = (*C.gchar)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg2))

	C.gtk_widget_path_iter_remove_class(_arg0, _arg1, _arg2)
}

// IterRemoveRegion removes the region @name from the widget at position @pos in
// the hierarchy defined in @path.
//
// Deprecated: The use of regions is deprecated.
func (path *WidgetPath) IterRemoveRegion(pos int, name string) {
	var _arg0 *C.GtkWidgetPath // out
	var _arg1 C.gint           // out
	var _arg2 *C.gchar         // out

	_arg0 = (*C.GtkWidgetPath)(unsafe.Pointer(path))
	_arg1 = C.gint(pos)
	_arg2 = (*C.gchar)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg2))

	C.gtk_widget_path_iter_remove_region(_arg0, _arg1, _arg2)
}

// IterSetName sets the widget name for the widget found at position @pos in the
// widget hierarchy defined by @path.
func (path *WidgetPath) IterSetName(pos int, name string) {
	var _arg0 *C.GtkWidgetPath // out
	var _arg1 C.gint           // out
	var _arg2 *C.gchar         // out

	_arg0 = (*C.GtkWidgetPath)(unsafe.Pointer(path))
	_arg1 = C.gint(pos)
	_arg2 = (*C.gchar)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg2))

	C.gtk_widget_path_iter_set_name(_arg0, _arg1, _arg2)
}

// IterSetObjectName sets the object name for a given position in the widget
// hierarchy defined by @path.
//
// When set, the object name overrides the object type when matching CSS.
func (path *WidgetPath) IterSetObjectName(pos int, name string) {
	var _arg0 *C.GtkWidgetPath // out
	var _arg1 C.gint           // out
	var _arg2 *C.char          // out

	_arg0 = (*C.GtkWidgetPath)(unsafe.Pointer(path))
	_arg1 = C.gint(pos)
	_arg2 = (*C.char)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg2))

	C.gtk_widget_path_iter_set_object_name(_arg0, _arg1, _arg2)
}

// IterSetObjectType sets the object type for a given position in the widget
// hierarchy defined by @path.
func (path *WidgetPath) IterSetObjectType(pos int, typ externglib.Type) {
	var _arg0 *C.GtkWidgetPath // out
	var _arg1 C.gint           // out
	var _arg2 C.GType          // out

	_arg0 = (*C.GtkWidgetPath)(unsafe.Pointer(path))
	_arg1 = C.gint(pos)
	_arg2 = C.GType(typ)

	C.gtk_widget_path_iter_set_object_type(_arg0, _arg1, _arg2)
}

// Length returns the number of Widget #GTypes between the represented widget
// and its topmost container.
func (path *WidgetPath) Length() int {
	var _arg0 *C.GtkWidgetPath // out
	var _cret C.gint           // in

	_arg0 = (*C.GtkWidgetPath)(unsafe.Pointer(path))

	_cret = C.gtk_widget_path_length(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// PrependType prepends a widget type to the widget hierachy represented by
// @path.
func (path *WidgetPath) PrependType(typ externglib.Type) {
	var _arg0 *C.GtkWidgetPath // out
	var _arg1 C.GType          // out

	_arg0 = (*C.GtkWidgetPath)(unsafe.Pointer(path))
	_arg1 = C.GType(typ)

	C.gtk_widget_path_prepend_type(_arg0, _arg1)
}

// Ref increments the reference count on @path.
func (path *WidgetPath) ref() *WidgetPath {
	var _arg0 *C.GtkWidgetPath // out
	var _cret *C.GtkWidgetPath // in

	_arg0 = (*C.GtkWidgetPath)(unsafe.Pointer(path))

	_cret = C.gtk_widget_path_ref(_arg0)

	var _widgetPath *WidgetPath // out

	_widgetPath = (*WidgetPath)(unsafe.Pointer(_cret))
	C.gtk_widget_path_ref(_cret)
	runtime.SetFinalizer(_widgetPath, func(v *WidgetPath) {
		C.gtk_widget_path_unref((*C.GtkWidgetPath)(unsafe.Pointer(v)))
	})

	return _widgetPath
}

// String dumps the widget path into a string representation. It tries to match
// the CSS style as closely as possible (Note that there might be paths that
// cannot be represented in CSS).
//
// The main use of this code is for debugging purposes, so that you can
// g_print() the path or dump it in a gdb session.
func (path *WidgetPath) String() string {
	var _arg0 *C.GtkWidgetPath // out
	var _cret *C.char          // in

	_arg0 = (*C.GtkWidgetPath)(unsafe.Pointer(path))

	_cret = C.gtk_widget_path_to_string(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(_cret))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Unref decrements the reference count on @path, freeing the structure if the
// reference count reaches 0.
func (path *WidgetPath) unref() {
	var _arg0 *C.GtkWidgetPath // out

	_arg0 = (*C.GtkWidgetPath)(unsafe.Pointer(path))

	C.gtk_widget_path_unref(_arg0)
}
