// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/box"
	"github.com/diamondburned/gotk4/internal/gextras"
)

// #cgo pkg-config: gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
//
// extern gchar* gotk4_CalendarDetailFunc(GtkCalendar* _0, guint _1, guint _2, guint _3, gpointer _4);
import "C"

// CalendarDetailFunc: this kind of functions provide Pango markup with detail
// information for the specified day. Examples for such details are holidays or
// appointments. The function returns nil when no information is available.
type CalendarDetailFunc func(calendar Calendar, year uint, month uint, day uint) string

//export gotk4_CalendarDetailFunc
func gotk4_CalendarDetailFunc(arg0 *C.GtkCalendar, arg1 C.guint, arg2 C.guint, arg3 C.guint, arg4 C.gpointer) *C.gchar {
	v := box.Get(uintptr(arg4))
	if v == nil {
		panic(`callback not found`)
	}

	var calendar Calendar
	var year uint
	var month uint
	var day uint

	calendar = gextras.CastObject(externglib.Take(unsafe.Pointer(arg0.Native()))).(Calendar)

	year = uint(arg1)

	month = uint(arg2)

	day = uint(arg3)

	utf8 := v.(CalendarDetailFunc)(calendar, year, month, day)
}

type CalendarPrivate struct {
	native C.GtkCalendarPrivate
}

// WrapCalendarPrivate wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapCalendarPrivate(ptr unsafe.Pointer) *CalendarPrivate {
	if ptr == nil {
		return nil
	}

	return (*CalendarPrivate)(ptr)
}

func marshalCalendarPrivate(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapCalendarPrivate(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (c *CalendarPrivate) Native() unsafe.Pointer {
	return unsafe.Pointer(&c.native)
}
