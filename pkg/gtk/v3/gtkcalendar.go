// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"github.com/diamondburned/gotk4/internal/box"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_calendar_get_type()), F: marshalCalendar},
	})
}

// CalendarDetailFunc: this kind of functions provide Pango markup with detail
// information for the specified day. Examples for such details are holidays or
// appointments. The function returns nil when no information is available.
type CalendarDetailFunc func(calendar Calendar, year uint, month uint, day uint) string

//export gotk4_CalendarDetailFunc
func gotk4_CalendarDetailFunc(arg0 *C.GtkCalendar, arg1 C.guint, arg2 C.guint, arg3 C.guint, arg4 C.gpointer) *C.gchar {
	v := box.Get(uintptr(arg4))
	if v == nil {
		panic(`callback not found`)
	}

	fn := v.(CalendarDetailFunc)
	ret := fn(calendar, year, month, day, userData)

	cret = (*C.gchar)(C.CString(ret))

	return cret
}

// Calendar is a widget that displays a Gregorian calendar, one month at a time.
// It can be created with gtk_calendar_new().
//
// The month and year currently displayed can be altered with
// gtk_calendar_select_month(). The exact day can be selected from the displayed
// month using gtk_calendar_select_day().
//
// To place a visual marker on a particular day, use gtk_calendar_mark_day() and
// to remove the marker, gtk_calendar_unmark_day(). Alternative, all marks can
// be cleared with gtk_calendar_clear_marks().
//
// The way in which the calendar itself is displayed can be altered using
// gtk_calendar_set_display_options().
//
// The selected date can be retrieved from a Calendar using
// gtk_calendar_get_date().
//
// Users should be aware that, although the Gregorian calendar is the legal
// calendar in most countries, it was adopted progressively between 1582 and
// 1929. Display before these dates is likely to be historically incorrect.
type Calendar interface {
	Widget
	Buildable

	// ClearMarks: remove all visual markers.
	ClearMarks(c Calendar)
	// Date obtains the selected date from a Calendar.
	Date(c Calendar) (year uint, month uint, day uint)
	// DayIsMarked returns if the @day of the @calendar is already marked.
	DayIsMarked(c Calendar, day uint) bool
	// DetailHeightRows queries the height of detail cells, in rows. See
	// Calendar:detail-width-chars.
	DetailHeightRows(c Calendar)
	// DetailWidthChars queries the width of detail cells, in characters. See
	// Calendar:detail-width-chars.
	DetailWidthChars(c Calendar)
	// DisplayOptions returns the current display options of @calendar.
	DisplayOptions(c Calendar)
	// MarkDay places a visual marker on a particular day.
	MarkDay(c Calendar, day uint)
	// SelectDay selects a day from the current month.
	SelectDay(c Calendar, day uint)
	// SelectMonth shifts the calendar to a different month.
	SelectMonth(c Calendar, month uint, year uint)
	// SetDetailFunc installs a function which provides Pango markup with detail
	// information for each day. Examples for such details are holidays or
	// appointments. That information is shown below each day when
	// Calendar:show-details is set. A tooltip containing with full detail
	// information is provided, if the entire text should not fit into the
	// details area, or if Calendar:show-details is not set.
	//
	// The size of the details area can be restricted by setting the
	// Calendar:detail-width-chars and Calendar:detail-height-rows properties.
	SetDetailFunc(c Calendar)
	// SetDetailHeightRows updates the height of detail cells. See
	// Calendar:detail-height-rows.
	SetDetailHeightRows(c Calendar, rows int)
	// SetDetailWidthChars updates the width of detail cells. See
	// Calendar:detail-width-chars.
	SetDetailWidthChars(c Calendar, chars int)
	// SetDisplayOptions sets display options (whether to display the heading
	// and the month headings).
	SetDisplayOptions(c Calendar, flags CalendarDisplayOptions)
	// UnmarkDay removes the visual marker from a particular day.
	UnmarkDay(c Calendar, day uint)
}

// calendar implements the Calendar interface.
type calendar struct {
	Widget
	Buildable
}

var _ Calendar = (*calendar)(nil)

// WrapCalendar wraps a GObject to the right type. It is
// primarily used internally.
func WrapCalendar(obj *externglib.Object) Calendar {
	return Calendar{
		Widget:    WrapWidget(obj),
		Buildable: WrapBuildable(obj),
	}
}

func marshalCalendar(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapCalendar(obj), nil
}

// NewCalendar constructs a class Calendar.
func NewCalendar() {
	C.gtk_calendar_new()
}

// ClearMarks: remove all visual markers.
func (c calendar) ClearMarks(c Calendar) {
	var arg0 *C.GtkCalendar

	arg0 = (*C.GtkCalendar)(unsafe.Pointer(c.Native()))

	C.gtk_calendar_clear_marks(arg0)
}

// Date obtains the selected date from a Calendar.
func (c calendar) Date(c Calendar) (year uint, month uint, day uint) {
	var arg0 *C.GtkCalendar

	arg0 = (*C.GtkCalendar)(unsafe.Pointer(c.Native()))

	var arg1 C.guint
	var year uint
	var arg2 C.guint
	var month uint
	var arg3 C.guint
	var day uint

	C.gtk_calendar_get_date(arg0, &arg1, &arg2, &arg3)

	year = uint(&arg1)
	month = uint(&arg2)
	day = uint(&arg3)

	return year, month, day
}

// DayIsMarked returns if the @day of the @calendar is already marked.
func (c calendar) DayIsMarked(c Calendar, day uint) bool {
	var arg0 *C.GtkCalendar
	var arg1 C.guint

	arg0 = (*C.GtkCalendar)(unsafe.Pointer(c.Native()))
	arg1 = C.guint(day)

	var cret C.gboolean
	var ok bool

	cret = C.gtk_calendar_get_day_is_marked(arg0, arg1)

	if cret {
		ok = true
	}

	return ok
}

// DetailHeightRows queries the height of detail cells, in rows. See
// Calendar:detail-width-chars.
func (c calendar) DetailHeightRows(c Calendar) {
	var arg0 *C.GtkCalendar

	arg0 = (*C.GtkCalendar)(unsafe.Pointer(c.Native()))

	C.gtk_calendar_get_detail_height_rows(arg0)
}

// DetailWidthChars queries the width of detail cells, in characters. See
// Calendar:detail-width-chars.
func (c calendar) DetailWidthChars(c Calendar) {
	var arg0 *C.GtkCalendar

	arg0 = (*C.GtkCalendar)(unsafe.Pointer(c.Native()))

	C.gtk_calendar_get_detail_width_chars(arg0)
}

// DisplayOptions returns the current display options of @calendar.
func (c calendar) DisplayOptions(c Calendar) {
	var arg0 *C.GtkCalendar

	arg0 = (*C.GtkCalendar)(unsafe.Pointer(c.Native()))

	C.gtk_calendar_get_display_options(arg0)
}

// MarkDay places a visual marker on a particular day.
func (c calendar) MarkDay(c Calendar, day uint) {
	var arg0 *C.GtkCalendar
	var arg1 C.guint

	arg0 = (*C.GtkCalendar)(unsafe.Pointer(c.Native()))
	arg1 = C.guint(day)

	C.gtk_calendar_mark_day(arg0, arg1)
}

// SelectDay selects a day from the current month.
func (c calendar) SelectDay(c Calendar, day uint) {
	var arg0 *C.GtkCalendar
	var arg1 C.guint

	arg0 = (*C.GtkCalendar)(unsafe.Pointer(c.Native()))
	arg1 = C.guint(day)

	C.gtk_calendar_select_day(arg0, arg1)
}

// SelectMonth shifts the calendar to a different month.
func (c calendar) SelectMonth(c Calendar, month uint, year uint) {
	var arg0 *C.GtkCalendar
	var arg1 C.guint
	var arg2 C.guint

	arg0 = (*C.GtkCalendar)(unsafe.Pointer(c.Native()))
	arg1 = C.guint(month)
	arg2 = C.guint(year)

	C.gtk_calendar_select_month(arg0, arg1, arg2)
}

// SetDetailFunc installs a function which provides Pango markup with detail
// information for each day. Examples for such details are holidays or
// appointments. That information is shown below each day when
// Calendar:show-details is set. A tooltip containing with full detail
// information is provided, if the entire text should not fit into the
// details area, or if Calendar:show-details is not set.
//
// The size of the details area can be restricted by setting the
// Calendar:detail-width-chars and Calendar:detail-height-rows properties.
func (c calendar) SetDetailFunc(c Calendar) {
	var arg0 *C.GtkCalendar

	arg0 = (*C.GtkCalendar)(unsafe.Pointer(c.Native()))

	C.gtk_calendar_set_detail_func(arg0, arg1, arg2, arg3)
}

// SetDetailHeightRows updates the height of detail cells. See
// Calendar:detail-height-rows.
func (c calendar) SetDetailHeightRows(c Calendar, rows int) {
	var arg0 *C.GtkCalendar
	var arg1 C.gint

	arg0 = (*C.GtkCalendar)(unsafe.Pointer(c.Native()))
	arg1 = C.gint(rows)

	C.gtk_calendar_set_detail_height_rows(arg0, arg1)
}

// SetDetailWidthChars updates the width of detail cells. See
// Calendar:detail-width-chars.
func (c calendar) SetDetailWidthChars(c Calendar, chars int) {
	var arg0 *C.GtkCalendar
	var arg1 C.gint

	arg0 = (*C.GtkCalendar)(unsafe.Pointer(c.Native()))
	arg1 = C.gint(chars)

	C.gtk_calendar_set_detail_width_chars(arg0, arg1)
}

// SetDisplayOptions sets display options (whether to display the heading
// and the month headings).
func (c calendar) SetDisplayOptions(c Calendar, flags CalendarDisplayOptions) {
	var arg0 *C.GtkCalendar
	var arg1 C.GtkCalendarDisplayOptions

	arg0 = (*C.GtkCalendar)(unsafe.Pointer(c.Native()))
	arg1 = (C.GtkCalendarDisplayOptions)(flags)

	C.gtk_calendar_set_display_options(arg0, arg1)
}

// UnmarkDay removes the visual marker from a particular day.
func (c calendar) UnmarkDay(c Calendar, day uint) {
	var arg0 *C.GtkCalendar
	var arg1 C.guint

	arg0 = (*C.GtkCalendar)(unsafe.Pointer(c.Native()))
	arg1 = C.guint(day)

	C.gtk_calendar_unmark_day(arg0, arg1)
}
