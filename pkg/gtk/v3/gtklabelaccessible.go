// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_label_accessible_get_type()), F: marshalLabelAccessible},
	})
}

type LabelAccessible interface {
	WidgetAccessible
}

// labelAccessible implements the LabelAccessible interface.
type labelAccessible struct {
	WidgetAccessible
}

var _ LabelAccessible = (*labelAccessible)(nil)

// WrapLabelAccessible wraps a GObject to the right type. It is
// primarily used internally.
func WrapLabelAccessible(obj *externglib.Object) LabelAccessible {
	return LabelAccessible{
		WidgetAccessible: WrapWidgetAccessible(obj),
	}
}

func marshalLabelAccessible(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapLabelAccessible(obj), nil
}

type LabelAccessiblePrivate struct {
	native C.GtkLabelAccessiblePrivate
}

// WrapLabelAccessiblePrivate wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapLabelAccessiblePrivate(ptr unsafe.Pointer) *LabelAccessiblePrivate {
	if ptr == nil {
		return nil
	}

	return (*LabelAccessiblePrivate)(ptr)
}

func marshalLabelAccessiblePrivate(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapLabelAccessiblePrivate(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (l *LabelAccessiblePrivate) Native() unsafe.Pointer {
	return unsafe.Pointer(&l.native)
}
