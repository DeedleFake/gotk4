// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_window_group_get_type()), F: marshalWindowGroup},
	})
}

// WindowGroup: a WindowGroup restricts the effect of grabs to windows in the
// same group, thereby making window groups almost behave like separate
// applications.
//
// A window can be a member in at most one window group at a time. Windows that
// have not been explicitly assigned to a group are implicitly treated like
// windows of the default window group.
//
// GtkWindowGroup objects are referenced by each window in the group, so once
// you have added all windows to a GtkWindowGroup, you can drop the initial
// reference to the window group with g_object_unref(). If the windows in the
// window group are subsequently destroyed, then they will be removed from the
// window group and drop their references on the window group; when all window
// have been removed, the window group will be freed.
type WindowGroup interface {
	gextras.Objector

	// AddWindow adds a window to a WindowGroup.
	AddWindow(window Window)
	// CurrentDeviceGrab returns the current grab widget for @device, or nil if
	// none.
	CurrentDeviceGrab(device gdk.Device) Widget
	// CurrentGrab gets the current grab widget of the given group, see
	// gtk_grab_add().
	CurrentGrab() Widget
	// ListWindows returns a list of the Windows that belong to @window_group.
	ListWindows() *glib.List
	// RemoveWindow removes a window from a WindowGroup.
	RemoveWindow(window Window)
}

// windowGroup implements the WindowGroup interface.
type windowGroup struct {
	gextras.Objector
}

var _ WindowGroup = (*windowGroup)(nil)

// WrapWindowGroup wraps a GObject to the right type. It is
// primarily used internally.
func WrapWindowGroup(obj *externglib.Object) WindowGroup {
	return WindowGroup{
		Objector: obj,
	}
}

func marshalWindowGroup(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapWindowGroup(obj), nil
}

// NewWindowGroup constructs a class WindowGroup.
func NewWindowGroup() WindowGroup {
	ret := C.gtk_window_group_new()

	var ret0 WindowGroup

	ret0 = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(ret.Native()))).(WindowGroup)

	return ret0
}

// AddWindow adds a window to a WindowGroup.
func (w windowGroup) AddWindow(window Window) {
	var arg0 *C.GtkWindowGroup
	var arg1 *C.GtkWindow

	arg0 = (*C.GtkWindowGroup)(w.Native())
	arg1 = (*C.GtkWindow)(window.Native())

	C.gtk_window_group_add_window(arg0, arg1)
}

// CurrentDeviceGrab returns the current grab widget for @device, or nil if
// none.
func (w windowGroup) CurrentDeviceGrab(device gdk.Device) Widget {
	var arg0 *C.GtkWindowGroup
	var arg1 *C.GdkDevice

	arg0 = (*C.GtkWindowGroup)(w.Native())
	arg1 = (*C.GdkDevice)(device.Native())

	ret := C.gtk_window_group_get_current_device_grab(arg0, arg1)

	var ret0 Widget

	ret0 = gextras.CastObject(externglib.Take(unsafe.Pointer(ret.Native()))).(Widget)

	return ret0
}

// CurrentGrab gets the current grab widget of the given group, see
// gtk_grab_add().
func (w windowGroup) CurrentGrab() Widget {
	var arg0 *C.GtkWindowGroup

	arg0 = (*C.GtkWindowGroup)(w.Native())

	ret := C.gtk_window_group_get_current_grab(arg0)

	var ret0 Widget

	ret0 = gextras.CastObject(externglib.Take(unsafe.Pointer(ret.Native()))).(Widget)

	return ret0
}

// ListWindows returns a list of the Windows that belong to @window_group.
func (w windowGroup) ListWindows() *glib.List {
	var arg0 *C.GtkWindowGroup

	arg0 = (*C.GtkWindowGroup)(w.Native())

	ret := C.gtk_window_group_list_windows(arg0)

	var ret0 *glib.List

	{
		ret0 = glib.WrapList(unsafe.Pointer(ret))
		runtime.SetFinalizer(ret0, func(v *glib.List) {
			C.free(unsafe.Pointer(v.Native()))
		})
	}

	return ret0
}

// RemoveWindow removes a window from a WindowGroup.
func (w windowGroup) RemoveWindow(window Window) {
	var arg0 *C.GtkWindowGroup
	var arg1 *C.GtkWindow

	arg0 = (*C.GtkWindowGroup)(w.Native())
	arg1 = (*C.GtkWindow)(window.Native())

	C.gtk_window_group_remove_window(arg0, arg1)
}
