// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/core/gextras"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
	"github.com/diamondburned/gotk4/pkg/pango"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_text_extend_selection_get_type()), F: marshalTextExtendSelection},
		{T: externglib.Type(C.gtk_text_view_layer_get_type()), F: marshalTextViewLayer},
		{T: externglib.Type(C.gtk_text_window_type_get_type()), F: marshalTextWindowType},
		{T: externglib.Type(C.gtk_text_view_get_type()), F: marshalTextView},
	})
}

// TextExtendSelection: granularity types that extend the text selection. Use
// the TextView::extend-selection signal to customize the selection.
type TextExtendSelection int

const (
	// word selects the current word. It is triggered by a double-click for
	// example.
	TextExtendSelectionWord TextExtendSelection = 0
	// line selects the current line. It is triggered by a triple-click for
	// example.
	TextExtendSelectionLine TextExtendSelection = 1
)

func marshalTextExtendSelection(p uintptr) (interface{}, error) {
	return TextExtendSelection(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// TextViewLayer: used to reference the layers of TextView for the purpose of
// customized drawing with the ::draw_layer vfunc.
type TextViewLayer int

const (
	// below: old deprecated layer, use GTK_TEXT_VIEW_LAYER_BELOW_TEXT instead
	TextViewLayerBelow TextViewLayer = 0
	// above: old deprecated layer, use GTK_TEXT_VIEW_LAYER_ABOVE_TEXT instead
	TextViewLayerAbove TextViewLayer = 1
	// BelowText: the layer rendered below the text (but above the background).
	// Since: 3.20
	TextViewLayerBelowText TextViewLayer = 2
	// AboveText: the layer rendered above the text. Since: 3.20
	TextViewLayerAboveText TextViewLayer = 3
)

func marshalTextViewLayer(p uintptr) (interface{}, error) {
	return TextViewLayer(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// TextWindowType: used to reference the parts of TextView.
type TextWindowType int

const (
	// private: invalid value, used as a marker
	TextWindowTypePrivate TextWindowType = 0
	// widget: window that floats over scrolling areas.
	TextWindowTypeWidget TextWindowType = 1
	// text: scrollable text window.
	TextWindowTypeText TextWindowType = 2
	// left: left side border window.
	TextWindowTypeLeft TextWindowType = 3
	// right: right side border window.
	TextWindowTypeRight TextWindowType = 4
	// top: top border window.
	TextWindowTypeTop TextWindowType = 5
	// bottom: bottom border window.
	TextWindowTypeBottom TextWindowType = 6
)

func marshalTextWindowType(p uintptr) (interface{}, error) {
	return TextWindowType(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// TextView: you may wish to begin by reading the [text widget conceptual
// overview][TextWidget] which gives an overview of all the objects and data
// types related to the text widget and how they work together.
//
// CSS nodes
//
//    textview.view
//    ├── border.top
//    ├── border.left
//    ├── text
//    │   ╰── [selection]
//    ├── border.right
//    ├── border.bottom
//    ╰── [window.popup]
//
// GtkTextView has a main css node with name textview and style class .view, and
// subnodes for each of the border windows, and the main text area, with names
// border and text, respectively. The border nodes each get one of the style
// classes .left, .right, .top or .bottom.
//
// A node representing the selection will appear below the text node.
//
// If a context menu is opened, the window node will appear as a subnode of the
// main node.
type TextView interface {
	Container
	Scrollable

	// AddChildAtAnchorTextView:
	AddChildAtAnchorTextView(child Widget, anchor TextChildAnchor)
	// AddChildInWindowTextView:
	AddChildInWindowTextView(child Widget, whichWindow TextWindowType, xpos int, ypos int)
	// BackwardDisplayLineTextView:
	BackwardDisplayLineTextView(iter *TextIter) bool
	// BackwardDisplayLineStartTextView:
	BackwardDisplayLineStartTextView(iter *TextIter) bool
	// BufferToWindowCoordsTextView:
	BufferToWindowCoordsTextView(win TextWindowType, bufferX int, bufferY int) (windowX int, windowY int)
	// ForwardDisplayLineTextView:
	ForwardDisplayLineTextView(iter *TextIter) bool
	// ForwardDisplayLineEndTextView:
	ForwardDisplayLineEndTextView(iter *TextIter) bool
	// AcceptsTab:
	AcceptsTab() bool
	// BorderWindowSize:
	BorderWindowSize(typ TextWindowType) int
	// BottomMargin:
	BottomMargin() int
	// Buffer:
	Buffer() TextBuffer
	// CursorLocations:
	CursorLocations(iter *TextIter) (strong gdk.Rectangle, weak gdk.Rectangle)
	// CursorVisible:
	CursorVisible() bool
	// DefaultAttributes:
	DefaultAttributes() *TextAttributes
	// Editable:
	Editable() bool
	// GetHAdjustment:
	GetHAdjustment() Adjustment
	// Indent:
	Indent() int
	// InputHints:
	InputHints() InputHints
	// InputPurpose:
	InputPurpose() InputPurpose
	// IterAtLocation:
	IterAtLocation(x int, y int) (TextIter, bool)
	// IterAtPosition:
	IterAtPosition(x int, y int) (TextIter, int, bool)
	// IterLocation:
	IterLocation(iter *TextIter) gdk.Rectangle
	// Justification:
	Justification() Justification
	// LeftMargin:
	LeftMargin() int
	// LineAtY:
	LineAtY(y int) (TextIter, int)
	// LineYrange:
	LineYrange(iter *TextIter) (y int, height int)
	// Monospace:
	Monospace() bool
	// Overwrite:
	Overwrite() bool
	// PixelsAboveLines:
	PixelsAboveLines() int
	// PixelsBelowLines:
	PixelsBelowLines() int
	// PixelsInsideWrap:
	PixelsInsideWrap() int
	// RightMargin:
	RightMargin() int
	// Tabs:
	Tabs() *pango.TabArray
	// TopMargin:
	TopMargin() int
	// GetVAdjustment:
	GetVAdjustment() Adjustment
	// VisibleRect:
	VisibleRect() gdk.Rectangle
	// Window:
	Window(win TextWindowType) gdk.Window
	// WindowType:
	WindowType(window gdk.Window) TextWindowType
	// WrapMode:
	WrapMode() WrapMode
	// ImContextFilterKeypressTextView:
	ImContextFilterKeypressTextView(event *gdk.EventKey) bool
	// MoveChildTextView:
	MoveChildTextView(child Widget, xpos int, ypos int)
	// MoveMarkOnscreenTextView:
	MoveMarkOnscreenTextView(mark TextMark) bool
	// MoveVisuallyTextView:
	MoveVisuallyTextView(iter *TextIter, count int) bool
	// PlaceCursorOnscreenTextView:
	PlaceCursorOnscreenTextView() bool
	// ResetCursorBlinkTextView:
	ResetCursorBlinkTextView()
	// ResetImContextTextView:
	ResetImContextTextView()
	// ScrollMarkOnscreenTextView:
	ScrollMarkOnscreenTextView(mark TextMark)
	// ScrollToIterTextView:
	ScrollToIterTextView(iter *TextIter, withinMargin float64, useAlign bool, xalign float64, yalign float64) bool
	// ScrollToMarkTextView:
	ScrollToMarkTextView(mark TextMark, withinMargin float64, useAlign bool, xalign float64, yalign float64)
	// SetAcceptsTabTextView:
	SetAcceptsTabTextView(acceptsTab bool)
	// SetBorderWindowSizeTextView:
	SetBorderWindowSizeTextView(typ TextWindowType, size int)
	// SetBottomMarginTextView:
	SetBottomMarginTextView(bottomMargin int)
	// SetBufferTextView:
	SetBufferTextView(buffer TextBuffer)
	// SetCursorVisibleTextView:
	SetCursorVisibleTextView(setting bool)
	// SetEditableTextView:
	SetEditableTextView(setting bool)
	// SetIndentTextView:
	SetIndentTextView(indent int)
	// SetInputHintsTextView:
	SetInputHintsTextView(hints InputHints)
	// SetInputPurposeTextView:
	SetInputPurposeTextView(purpose InputPurpose)
	// SetJustificationTextView:
	SetJustificationTextView(justification Justification)
	// SetLeftMarginTextView:
	SetLeftMarginTextView(leftMargin int)
	// SetMonospaceTextView:
	SetMonospaceTextView(monospace bool)
	// SetOverwriteTextView:
	SetOverwriteTextView(overwrite bool)
	// SetPixelsAboveLinesTextView:
	SetPixelsAboveLinesTextView(pixelsAboveLines int)
	// SetPixelsBelowLinesTextView:
	SetPixelsBelowLinesTextView(pixelsBelowLines int)
	// SetPixelsInsideWrapTextView:
	SetPixelsInsideWrapTextView(pixelsInsideWrap int)
	// SetRightMarginTextView:
	SetRightMarginTextView(rightMargin int)
	// SetTabsTextView:
	SetTabsTextView(tabs *pango.TabArray)
	// SetTopMarginTextView:
	SetTopMarginTextView(topMargin int)
	// SetWrapModeTextView:
	SetWrapModeTextView(wrapMode WrapMode)
	// StartsDisplayLineTextView:
	StartsDisplayLineTextView(iter *TextIter) bool
	// WindowToBufferCoordsTextView:
	WindowToBufferCoordsTextView(win TextWindowType, windowX int, windowY int) (bufferX int, bufferY int)
}

// textView implements the TextView class.
type textView struct {
	Container
}

// WrapTextView wraps a GObject to the right type. It is
// primarily used internally.
func WrapTextView(obj *externglib.Object) TextView {
	return textView{
		Container: WrapContainer(obj),
	}
}

func marshalTextView(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapTextView(obj), nil
}

// NewTextView:
func NewTextView() TextView {
	var _cret *C.GtkWidget // in

	_cret = C.gtk_text_view_new()

	var _textView TextView // out

	_textView = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(TextView)

	return _textView
}

// NewTextViewWithBuffer:
func NewTextViewWithBuffer(buffer TextBuffer) TextView {
	var _arg1 *C.GtkTextBuffer // out
	var _cret *C.GtkWidget     // in

	_arg1 = (*C.GtkTextBuffer)(unsafe.Pointer(buffer.Native()))

	_cret = C.gtk_text_view_new_with_buffer(_arg1)

	var _textView TextView // out

	_textView = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(TextView)

	return _textView
}

func (t textView) AddChildAtAnchorTextView(child Widget, anchor TextChildAnchor) {
	var _arg0 *C.GtkTextView        // out
	var _arg1 *C.GtkWidget          // out
	var _arg2 *C.GtkTextChildAnchor // out

	_arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(child.Native()))
	_arg2 = (*C.GtkTextChildAnchor)(unsafe.Pointer(anchor.Native()))

	C.gtk_text_view_add_child_at_anchor(_arg0, _arg1, _arg2)
}

func (t textView) AddChildInWindowTextView(child Widget, whichWindow TextWindowType, xpos int, ypos int) {
	var _arg0 *C.GtkTextView      // out
	var _arg1 *C.GtkWidget        // out
	var _arg2 C.GtkTextWindowType // out
	var _arg3 C.gint              // out
	var _arg4 C.gint              // out

	_arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(child.Native()))
	_arg2 = C.GtkTextWindowType(whichWindow)
	_arg3 = C.gint(xpos)
	_arg4 = C.gint(ypos)

	C.gtk_text_view_add_child_in_window(_arg0, _arg1, _arg2, _arg3, _arg4)
}

func (t textView) BackwardDisplayLineTextView(iter *TextIter) bool {
	var _arg0 *C.GtkTextView // out
	var _arg1 *C.GtkTextIter // out
	var _cret C.gboolean     // in

	_arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	_arg1 = (*C.GtkTextIter)(unsafe.Pointer(iter.Native()))

	_cret = C.gtk_text_view_backward_display_line(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (t textView) BackwardDisplayLineStartTextView(iter *TextIter) bool {
	var _arg0 *C.GtkTextView // out
	var _arg1 *C.GtkTextIter // out
	var _cret C.gboolean     // in

	_arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	_arg1 = (*C.GtkTextIter)(unsafe.Pointer(iter.Native()))

	_cret = C.gtk_text_view_backward_display_line_start(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (t textView) BufferToWindowCoordsTextView(win TextWindowType, bufferX int, bufferY int) (windowX int, windowY int) {
	var _arg0 *C.GtkTextView      // out
	var _arg1 C.GtkTextWindowType // out
	var _arg2 C.gint              // out
	var _arg3 C.gint              // out
	var _arg4 C.gint              // in
	var _arg5 C.gint              // in

	_arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	_arg1 = C.GtkTextWindowType(win)
	_arg2 = C.gint(bufferX)
	_arg3 = C.gint(bufferY)

	C.gtk_text_view_buffer_to_window_coords(_arg0, _arg1, _arg2, _arg3, &_arg4, &_arg5)

	var _windowX int // out
	var _windowY int // out

	_windowX = int(_arg4)
	_windowY = int(_arg5)

	return _windowX, _windowY
}

func (t textView) ForwardDisplayLineTextView(iter *TextIter) bool {
	var _arg0 *C.GtkTextView // out
	var _arg1 *C.GtkTextIter // out
	var _cret C.gboolean     // in

	_arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	_arg1 = (*C.GtkTextIter)(unsafe.Pointer(iter.Native()))

	_cret = C.gtk_text_view_forward_display_line(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (t textView) ForwardDisplayLineEndTextView(iter *TextIter) bool {
	var _arg0 *C.GtkTextView // out
	var _arg1 *C.GtkTextIter // out
	var _cret C.gboolean     // in

	_arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	_arg1 = (*C.GtkTextIter)(unsafe.Pointer(iter.Native()))

	_cret = C.gtk_text_view_forward_display_line_end(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (t textView) AcceptsTab() bool {
	var _arg0 *C.GtkTextView // out
	var _cret C.gboolean     // in

	_arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))

	_cret = C.gtk_text_view_get_accepts_tab(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (t textView) BorderWindowSize(typ TextWindowType) int {
	var _arg0 *C.GtkTextView      // out
	var _arg1 C.GtkTextWindowType // out
	var _cret C.gint              // in

	_arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	_arg1 = C.GtkTextWindowType(typ)

	_cret = C.gtk_text_view_get_border_window_size(_arg0, _arg1)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (t textView) BottomMargin() int {
	var _arg0 *C.GtkTextView // out
	var _cret C.gint         // in

	_arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))

	_cret = C.gtk_text_view_get_bottom_margin(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (t textView) Buffer() TextBuffer {
	var _arg0 *C.GtkTextView   // out
	var _cret *C.GtkTextBuffer // in

	_arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))

	_cret = C.gtk_text_view_get_buffer(_arg0)

	var _textBuffer TextBuffer // out

	_textBuffer = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(TextBuffer)

	return _textBuffer
}

func (t textView) CursorLocations(iter *TextIter) (strong gdk.Rectangle, weak gdk.Rectangle) {
	var _arg0 *C.GtkTextView // out
	var _arg1 *C.GtkTextIter // out
	var _arg2 C.GdkRectangle // in
	var _arg3 C.GdkRectangle // in

	_arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	_arg1 = (*C.GtkTextIter)(unsafe.Pointer(iter.Native()))

	C.gtk_text_view_get_cursor_locations(_arg0, _arg1, &_arg2, &_arg3)

	var _strong gdk.Rectangle // out
	var _weak gdk.Rectangle   // out

	{
		var refTmpIn *C.GdkRectangle
		var refTmpOut *gdk.Rectangle

		in0 := &_arg2
		refTmpIn = in0

		refTmpOut = (*gdk.Rectangle)(unsafe.Pointer(refTmpIn))

		_strong = *refTmpOut
	}
	{
		var refTmpIn *C.GdkRectangle
		var refTmpOut *gdk.Rectangle

		in0 := &_arg3
		refTmpIn = in0

		refTmpOut = (*gdk.Rectangle)(unsafe.Pointer(refTmpIn))

		_weak = *refTmpOut
	}

	return _strong, _weak
}

func (t textView) CursorVisible() bool {
	var _arg0 *C.GtkTextView // out
	var _cret C.gboolean     // in

	_arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))

	_cret = C.gtk_text_view_get_cursor_visible(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (t textView) DefaultAttributes() *TextAttributes {
	var _arg0 *C.GtkTextView       // out
	var _cret *C.GtkTextAttributes // in

	_arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))

	_cret = C.gtk_text_view_get_default_attributes(_arg0)

	var _textAttributes *TextAttributes // out

	_textAttributes = (*TextAttributes)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(&_textAttributes, func(v **TextAttributes) {
		C.free(unsafe.Pointer(v))
	})

	return _textAttributes
}

func (t textView) Editable() bool {
	var _arg0 *C.GtkTextView // out
	var _cret C.gboolean     // in

	_arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))

	_cret = C.gtk_text_view_get_editable(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (t textView) GetHAdjustment() Adjustment {
	var _arg0 *C.GtkTextView   // out
	var _cret *C.GtkAdjustment // in

	_arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))

	_cret = C.gtk_text_view_get_hadjustment(_arg0)

	var _adjustment Adjustment // out

	_adjustment = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Adjustment)

	return _adjustment
}

func (t textView) Indent() int {
	var _arg0 *C.GtkTextView // out
	var _cret C.gint         // in

	_arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))

	_cret = C.gtk_text_view_get_indent(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (t textView) InputHints() InputHints {
	var _arg0 *C.GtkTextView  // out
	var _cret C.GtkInputHints // in

	_arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))

	_cret = C.gtk_text_view_get_input_hints(_arg0)

	var _inputHints InputHints // out

	_inputHints = InputHints(_cret)

	return _inputHints
}

func (t textView) InputPurpose() InputPurpose {
	var _arg0 *C.GtkTextView    // out
	var _cret C.GtkInputPurpose // in

	_arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))

	_cret = C.gtk_text_view_get_input_purpose(_arg0)

	var _inputPurpose InputPurpose // out

	_inputPurpose = InputPurpose(_cret)

	return _inputPurpose
}

func (t textView) IterAtLocation(x int, y int) (TextIter, bool) {
	var _arg0 *C.GtkTextView // out
	var _arg1 C.GtkTextIter  // in
	var _arg2 C.gint         // out
	var _arg3 C.gint         // out
	var _cret C.gboolean     // in

	_arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	_arg2 = C.gint(x)
	_arg3 = C.gint(y)

	_cret = C.gtk_text_view_get_iter_at_location(_arg0, &_arg1, _arg2, _arg3)

	var _iter TextIter // out
	var _ok bool       // out

	{
		var refTmpIn *C.GtkTextIter
		var refTmpOut *TextIter

		in0 := &_arg1
		refTmpIn = in0

		refTmpOut = (*TextIter)(unsafe.Pointer(refTmpIn))

		_iter = *refTmpOut
	}
	if _cret != 0 {
		_ok = true
	}

	return _iter, _ok
}

func (t textView) IterAtPosition(x int, y int) (TextIter, int, bool) {
	var _arg0 *C.GtkTextView // out
	var _arg1 C.GtkTextIter  // in
	var _arg2 C.gint         // in
	var _arg3 C.gint         // out
	var _arg4 C.gint         // out
	var _cret C.gboolean     // in

	_arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	_arg3 = C.gint(x)
	_arg4 = C.gint(y)

	_cret = C.gtk_text_view_get_iter_at_position(_arg0, &_arg1, &_arg2, _arg3, _arg4)

	var _iter TextIter // out
	var _trailing int  // out
	var _ok bool       // out

	{
		var refTmpIn *C.GtkTextIter
		var refTmpOut *TextIter

		in0 := &_arg1
		refTmpIn = in0

		refTmpOut = (*TextIter)(unsafe.Pointer(refTmpIn))

		_iter = *refTmpOut
	}
	_trailing = int(_arg2)
	if _cret != 0 {
		_ok = true
	}

	return _iter, _trailing, _ok
}

func (t textView) IterLocation(iter *TextIter) gdk.Rectangle {
	var _arg0 *C.GtkTextView // out
	var _arg1 *C.GtkTextIter // out
	var _arg2 C.GdkRectangle // in

	_arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	_arg1 = (*C.GtkTextIter)(unsafe.Pointer(iter.Native()))

	C.gtk_text_view_get_iter_location(_arg0, _arg1, &_arg2)

	var _location gdk.Rectangle // out

	{
		var refTmpIn *C.GdkRectangle
		var refTmpOut *gdk.Rectangle

		in0 := &_arg2
		refTmpIn = in0

		refTmpOut = (*gdk.Rectangle)(unsafe.Pointer(refTmpIn))

		_location = *refTmpOut
	}

	return _location
}

func (t textView) Justification() Justification {
	var _arg0 *C.GtkTextView     // out
	var _cret C.GtkJustification // in

	_arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))

	_cret = C.gtk_text_view_get_justification(_arg0)

	var _justification Justification // out

	_justification = Justification(_cret)

	return _justification
}

func (t textView) LeftMargin() int {
	var _arg0 *C.GtkTextView // out
	var _cret C.gint         // in

	_arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))

	_cret = C.gtk_text_view_get_left_margin(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (t textView) LineAtY(y int) (TextIter, int) {
	var _arg0 *C.GtkTextView // out
	var _arg1 C.GtkTextIter  // in
	var _arg2 C.gint         // out
	var _arg3 C.gint         // in

	_arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	_arg2 = C.gint(y)

	C.gtk_text_view_get_line_at_y(_arg0, &_arg1, _arg2, &_arg3)

	var _targetIter TextIter // out
	var _lineTop int         // out

	{
		var refTmpIn *C.GtkTextIter
		var refTmpOut *TextIter

		in0 := &_arg1
		refTmpIn = in0

		refTmpOut = (*TextIter)(unsafe.Pointer(refTmpIn))

		_targetIter = *refTmpOut
	}
	_lineTop = int(_arg3)

	return _targetIter, _lineTop
}

func (t textView) LineYrange(iter *TextIter) (y int, height int) {
	var _arg0 *C.GtkTextView // out
	var _arg1 *C.GtkTextIter // out
	var _arg2 C.gint         // in
	var _arg3 C.gint         // in

	_arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	_arg1 = (*C.GtkTextIter)(unsafe.Pointer(iter.Native()))

	C.gtk_text_view_get_line_yrange(_arg0, _arg1, &_arg2, &_arg3)

	var _y int      // out
	var _height int // out

	_y = int(_arg2)
	_height = int(_arg3)

	return _y, _height
}

func (t textView) Monospace() bool {
	var _arg0 *C.GtkTextView // out
	var _cret C.gboolean     // in

	_arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))

	_cret = C.gtk_text_view_get_monospace(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (t textView) Overwrite() bool {
	var _arg0 *C.GtkTextView // out
	var _cret C.gboolean     // in

	_arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))

	_cret = C.gtk_text_view_get_overwrite(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (t textView) PixelsAboveLines() int {
	var _arg0 *C.GtkTextView // out
	var _cret C.gint         // in

	_arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))

	_cret = C.gtk_text_view_get_pixels_above_lines(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (t textView) PixelsBelowLines() int {
	var _arg0 *C.GtkTextView // out
	var _cret C.gint         // in

	_arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))

	_cret = C.gtk_text_view_get_pixels_below_lines(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (t textView) PixelsInsideWrap() int {
	var _arg0 *C.GtkTextView // out
	var _cret C.gint         // in

	_arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))

	_cret = C.gtk_text_view_get_pixels_inside_wrap(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (t textView) RightMargin() int {
	var _arg0 *C.GtkTextView // out
	var _cret C.gint         // in

	_arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))

	_cret = C.gtk_text_view_get_right_margin(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (t textView) Tabs() *pango.TabArray {
	var _arg0 *C.GtkTextView   // out
	var _cret *C.PangoTabArray // in

	_arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))

	_cret = C.gtk_text_view_get_tabs(_arg0)

	var _tabArray *pango.TabArray // out

	_tabArray = (*pango.TabArray)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(&_tabArray, func(v **pango.TabArray) {
		C.free(unsafe.Pointer(v))
	})

	return _tabArray
}

func (t textView) TopMargin() int {
	var _arg0 *C.GtkTextView // out
	var _cret C.gint         // in

	_arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))

	_cret = C.gtk_text_view_get_top_margin(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (t textView) GetVAdjustment() Adjustment {
	var _arg0 *C.GtkTextView   // out
	var _cret *C.GtkAdjustment // in

	_arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))

	_cret = C.gtk_text_view_get_vadjustment(_arg0)

	var _adjustment Adjustment // out

	_adjustment = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Adjustment)

	return _adjustment
}

func (t textView) VisibleRect() gdk.Rectangle {
	var _arg0 *C.GtkTextView // out
	var _arg1 C.GdkRectangle // in

	_arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))

	C.gtk_text_view_get_visible_rect(_arg0, &_arg1)

	var _visibleRect gdk.Rectangle // out

	{
		var refTmpIn *C.GdkRectangle
		var refTmpOut *gdk.Rectangle

		in0 := &_arg1
		refTmpIn = in0

		refTmpOut = (*gdk.Rectangle)(unsafe.Pointer(refTmpIn))

		_visibleRect = *refTmpOut
	}

	return _visibleRect
}

func (t textView) Window(win TextWindowType) gdk.Window {
	var _arg0 *C.GtkTextView      // out
	var _arg1 C.GtkTextWindowType // out
	var _cret *C.GdkWindow        // in

	_arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	_arg1 = C.GtkTextWindowType(win)

	_cret = C.gtk_text_view_get_window(_arg0, _arg1)

	var _window gdk.Window // out

	_window = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(gdk.Window)

	return _window
}

func (t textView) WindowType(window gdk.Window) TextWindowType {
	var _arg0 *C.GtkTextView      // out
	var _arg1 *C.GdkWindow        // out
	var _cret C.GtkTextWindowType // in

	_arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	_arg1 = (*C.GdkWindow)(unsafe.Pointer(window.Native()))

	_cret = C.gtk_text_view_get_window_type(_arg0, _arg1)

	var _textWindowType TextWindowType // out

	_textWindowType = TextWindowType(_cret)

	return _textWindowType
}

func (t textView) WrapMode() WrapMode {
	var _arg0 *C.GtkTextView // out
	var _cret C.GtkWrapMode  // in

	_arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))

	_cret = C.gtk_text_view_get_wrap_mode(_arg0)

	var _wrapMode WrapMode // out

	_wrapMode = WrapMode(_cret)

	return _wrapMode
}

func (t textView) ImContextFilterKeypressTextView(event *gdk.EventKey) bool {
	var _arg0 *C.GtkTextView // out
	var _arg1 *C.GdkEventKey // out
	var _cret C.gboolean     // in

	_arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	_arg1 = (*C.GdkEventKey)(unsafe.Pointer(event.Native()))

	_cret = C.gtk_text_view_im_context_filter_keypress(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (t textView) MoveChildTextView(child Widget, xpos int, ypos int) {
	var _arg0 *C.GtkTextView // out
	var _arg1 *C.GtkWidget   // out
	var _arg2 C.gint         // out
	var _arg3 C.gint         // out

	_arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(child.Native()))
	_arg2 = C.gint(xpos)
	_arg3 = C.gint(ypos)

	C.gtk_text_view_move_child(_arg0, _arg1, _arg2, _arg3)
}

func (t textView) MoveMarkOnscreenTextView(mark TextMark) bool {
	var _arg0 *C.GtkTextView // out
	var _arg1 *C.GtkTextMark // out
	var _cret C.gboolean     // in

	_arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	_arg1 = (*C.GtkTextMark)(unsafe.Pointer(mark.Native()))

	_cret = C.gtk_text_view_move_mark_onscreen(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (t textView) MoveVisuallyTextView(iter *TextIter, count int) bool {
	var _arg0 *C.GtkTextView // out
	var _arg1 *C.GtkTextIter // out
	var _arg2 C.gint         // out
	var _cret C.gboolean     // in

	_arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	_arg1 = (*C.GtkTextIter)(unsafe.Pointer(iter.Native()))
	_arg2 = C.gint(count)

	_cret = C.gtk_text_view_move_visually(_arg0, _arg1, _arg2)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (t textView) PlaceCursorOnscreenTextView() bool {
	var _arg0 *C.GtkTextView // out
	var _cret C.gboolean     // in

	_arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))

	_cret = C.gtk_text_view_place_cursor_onscreen(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (t textView) ResetCursorBlinkTextView() {
	var _arg0 *C.GtkTextView // out

	_arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))

	C.gtk_text_view_reset_cursor_blink(_arg0)
}

func (t textView) ResetImContextTextView() {
	var _arg0 *C.GtkTextView // out

	_arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))

	C.gtk_text_view_reset_im_context(_arg0)
}

func (t textView) ScrollMarkOnscreenTextView(mark TextMark) {
	var _arg0 *C.GtkTextView // out
	var _arg1 *C.GtkTextMark // out

	_arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	_arg1 = (*C.GtkTextMark)(unsafe.Pointer(mark.Native()))

	C.gtk_text_view_scroll_mark_onscreen(_arg0, _arg1)
}

func (t textView) ScrollToIterTextView(iter *TextIter, withinMargin float64, useAlign bool, xalign float64, yalign float64) bool {
	var _arg0 *C.GtkTextView // out
	var _arg1 *C.GtkTextIter // out
	var _arg2 C.gdouble      // out
	var _arg3 C.gboolean     // out
	var _arg4 C.gdouble      // out
	var _arg5 C.gdouble      // out
	var _cret C.gboolean     // in

	_arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	_arg1 = (*C.GtkTextIter)(unsafe.Pointer(iter.Native()))
	_arg2 = C.gdouble(withinMargin)
	if useAlign {
		_arg3 = C.TRUE
	}
	_arg4 = C.gdouble(xalign)
	_arg5 = C.gdouble(yalign)

	_cret = C.gtk_text_view_scroll_to_iter(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (t textView) ScrollToMarkTextView(mark TextMark, withinMargin float64, useAlign bool, xalign float64, yalign float64) {
	var _arg0 *C.GtkTextView // out
	var _arg1 *C.GtkTextMark // out
	var _arg2 C.gdouble      // out
	var _arg3 C.gboolean     // out
	var _arg4 C.gdouble      // out
	var _arg5 C.gdouble      // out

	_arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	_arg1 = (*C.GtkTextMark)(unsafe.Pointer(mark.Native()))
	_arg2 = C.gdouble(withinMargin)
	if useAlign {
		_arg3 = C.TRUE
	}
	_arg4 = C.gdouble(xalign)
	_arg5 = C.gdouble(yalign)

	C.gtk_text_view_scroll_to_mark(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
}

func (t textView) SetAcceptsTabTextView(acceptsTab bool) {
	var _arg0 *C.GtkTextView // out
	var _arg1 C.gboolean     // out

	_arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	if acceptsTab {
		_arg1 = C.TRUE
	}

	C.gtk_text_view_set_accepts_tab(_arg0, _arg1)
}

func (t textView) SetBorderWindowSizeTextView(typ TextWindowType, size int) {
	var _arg0 *C.GtkTextView      // out
	var _arg1 C.GtkTextWindowType // out
	var _arg2 C.gint              // out

	_arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	_arg1 = C.GtkTextWindowType(typ)
	_arg2 = C.gint(size)

	C.gtk_text_view_set_border_window_size(_arg0, _arg1, _arg2)
}

func (t textView) SetBottomMarginTextView(bottomMargin int) {
	var _arg0 *C.GtkTextView // out
	var _arg1 C.gint         // out

	_arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	_arg1 = C.gint(bottomMargin)

	C.gtk_text_view_set_bottom_margin(_arg0, _arg1)
}

func (t textView) SetBufferTextView(buffer TextBuffer) {
	var _arg0 *C.GtkTextView   // out
	var _arg1 *C.GtkTextBuffer // out

	_arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	_arg1 = (*C.GtkTextBuffer)(unsafe.Pointer(buffer.Native()))

	C.gtk_text_view_set_buffer(_arg0, _arg1)
}

func (t textView) SetCursorVisibleTextView(setting bool) {
	var _arg0 *C.GtkTextView // out
	var _arg1 C.gboolean     // out

	_arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	if setting {
		_arg1 = C.TRUE
	}

	C.gtk_text_view_set_cursor_visible(_arg0, _arg1)
}

func (t textView) SetEditableTextView(setting bool) {
	var _arg0 *C.GtkTextView // out
	var _arg1 C.gboolean     // out

	_arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	if setting {
		_arg1 = C.TRUE
	}

	C.gtk_text_view_set_editable(_arg0, _arg1)
}

func (t textView) SetIndentTextView(indent int) {
	var _arg0 *C.GtkTextView // out
	var _arg1 C.gint         // out

	_arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	_arg1 = C.gint(indent)

	C.gtk_text_view_set_indent(_arg0, _arg1)
}

func (t textView) SetInputHintsTextView(hints InputHints) {
	var _arg0 *C.GtkTextView  // out
	var _arg1 C.GtkInputHints // out

	_arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	_arg1 = C.GtkInputHints(hints)

	C.gtk_text_view_set_input_hints(_arg0, _arg1)
}

func (t textView) SetInputPurposeTextView(purpose InputPurpose) {
	var _arg0 *C.GtkTextView    // out
	var _arg1 C.GtkInputPurpose // out

	_arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	_arg1 = C.GtkInputPurpose(purpose)

	C.gtk_text_view_set_input_purpose(_arg0, _arg1)
}

func (t textView) SetJustificationTextView(justification Justification) {
	var _arg0 *C.GtkTextView     // out
	var _arg1 C.GtkJustification // out

	_arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	_arg1 = C.GtkJustification(justification)

	C.gtk_text_view_set_justification(_arg0, _arg1)
}

func (t textView) SetLeftMarginTextView(leftMargin int) {
	var _arg0 *C.GtkTextView // out
	var _arg1 C.gint         // out

	_arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	_arg1 = C.gint(leftMargin)

	C.gtk_text_view_set_left_margin(_arg0, _arg1)
}

func (t textView) SetMonospaceTextView(monospace bool) {
	var _arg0 *C.GtkTextView // out
	var _arg1 C.gboolean     // out

	_arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	if monospace {
		_arg1 = C.TRUE
	}

	C.gtk_text_view_set_monospace(_arg0, _arg1)
}

func (t textView) SetOverwriteTextView(overwrite bool) {
	var _arg0 *C.GtkTextView // out
	var _arg1 C.gboolean     // out

	_arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	if overwrite {
		_arg1 = C.TRUE
	}

	C.gtk_text_view_set_overwrite(_arg0, _arg1)
}

func (t textView) SetPixelsAboveLinesTextView(pixelsAboveLines int) {
	var _arg0 *C.GtkTextView // out
	var _arg1 C.gint         // out

	_arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	_arg1 = C.gint(pixelsAboveLines)

	C.gtk_text_view_set_pixels_above_lines(_arg0, _arg1)
}

func (t textView) SetPixelsBelowLinesTextView(pixelsBelowLines int) {
	var _arg0 *C.GtkTextView // out
	var _arg1 C.gint         // out

	_arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	_arg1 = C.gint(pixelsBelowLines)

	C.gtk_text_view_set_pixels_below_lines(_arg0, _arg1)
}

func (t textView) SetPixelsInsideWrapTextView(pixelsInsideWrap int) {
	var _arg0 *C.GtkTextView // out
	var _arg1 C.gint         // out

	_arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	_arg1 = C.gint(pixelsInsideWrap)

	C.gtk_text_view_set_pixels_inside_wrap(_arg0, _arg1)
}

func (t textView) SetRightMarginTextView(rightMargin int) {
	var _arg0 *C.GtkTextView // out
	var _arg1 C.gint         // out

	_arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	_arg1 = C.gint(rightMargin)

	C.gtk_text_view_set_right_margin(_arg0, _arg1)
}

func (t textView) SetTabsTextView(tabs *pango.TabArray) {
	var _arg0 *C.GtkTextView   // out
	var _arg1 *C.PangoTabArray // out

	_arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	_arg1 = (*C.PangoTabArray)(unsafe.Pointer(tabs.Native()))

	C.gtk_text_view_set_tabs(_arg0, _arg1)
}

func (t textView) SetTopMarginTextView(topMargin int) {
	var _arg0 *C.GtkTextView // out
	var _arg1 C.gint         // out

	_arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	_arg1 = C.gint(topMargin)

	C.gtk_text_view_set_top_margin(_arg0, _arg1)
}

func (t textView) SetWrapModeTextView(wrapMode WrapMode) {
	var _arg0 *C.GtkTextView // out
	var _arg1 C.GtkWrapMode  // out

	_arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	_arg1 = C.GtkWrapMode(wrapMode)

	C.gtk_text_view_set_wrap_mode(_arg0, _arg1)
}

func (t textView) StartsDisplayLineTextView(iter *TextIter) bool {
	var _arg0 *C.GtkTextView // out
	var _arg1 *C.GtkTextIter // out
	var _cret C.gboolean     // in

	_arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	_arg1 = (*C.GtkTextIter)(unsafe.Pointer(iter.Native()))

	_cret = C.gtk_text_view_starts_display_line(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (t textView) WindowToBufferCoordsTextView(win TextWindowType, windowX int, windowY int) (bufferX int, bufferY int) {
	var _arg0 *C.GtkTextView      // out
	var _arg1 C.GtkTextWindowType // out
	var _arg2 C.gint              // out
	var _arg3 C.gint              // out
	var _arg4 C.gint              // in
	var _arg5 C.gint              // in

	_arg0 = (*C.GtkTextView)(unsafe.Pointer(t.Native()))
	_arg1 = C.GtkTextWindowType(win)
	_arg2 = C.gint(windowX)
	_arg3 = C.gint(windowY)

	C.gtk_text_view_window_to_buffer_coords(_arg0, _arg1, _arg2, _arg3, &_arg4, &_arg5)

	var _bufferX int // out
	var _bufferY int // out

	_bufferX = int(_arg4)
	_bufferY = int(_arg5)

	return _bufferX, _bufferY
}

func (b textView) AddChild(builder Builder, child gextras.Objector, typ string) {
	WrapBuildable(gextras.InternObject(b)).AddChild(builder, child, typ)
}

func (b textView) ConstructChild(builder Builder, name string) gextras.Objector {
	return WrapBuildable(gextras.InternObject(b)).ConstructChild(builder, name)
}

func (b textView) InternalChild(builder Builder, childname string) gextras.Objector {
	return WrapBuildable(gextras.InternObject(b)).InternalChild(builder, childname)
}

func (b textView) Name() string {
	return WrapBuildable(gextras.InternObject(b)).Name()
}

func (b textView) ParserFinished(builder Builder) {
	WrapBuildable(gextras.InternObject(b)).ParserFinished(builder)
}

func (b textView) SetBuildableProperty(builder Builder, name string, value externglib.Value) {
	WrapBuildable(gextras.InternObject(b)).SetBuildableProperty(builder, name, value)
}

func (b textView) SetName(name string) {
	WrapBuildable(gextras.InternObject(b)).SetName(name)
}

func (s textView) Border() (Border, bool) {
	return WrapScrollable(gextras.InternObject(s)).Border()
}

func (s textView) HAdjustment() Adjustment {
	return WrapScrollable(gextras.InternObject(s)).HAdjustment()
}

func (s textView) HScrollPolicy() ScrollablePolicy {
	return WrapScrollable(gextras.InternObject(s)).HScrollPolicy()
}

func (s textView) VAdjustment() Adjustment {
	return WrapScrollable(gextras.InternObject(s)).VAdjustment()
}

func (s textView) VScrollPolicy() ScrollablePolicy {
	return WrapScrollable(gextras.InternObject(s)).VScrollPolicy()
}

func (s textView) SetHAdjustment(hadjustment Adjustment) {
	WrapScrollable(gextras.InternObject(s)).SetHAdjustment(hadjustment)
}

func (s textView) SetHScrollPolicy(policy ScrollablePolicy) {
	WrapScrollable(gextras.InternObject(s)).SetHScrollPolicy(policy)
}

func (s textView) SetVAdjustment(vadjustment Adjustment) {
	WrapScrollable(gextras.InternObject(s)).SetVAdjustment(vadjustment)
}

func (s textView) SetVScrollPolicy(policy ScrollablePolicy) {
	WrapScrollable(gextras.InternObject(s)).SetVScrollPolicy(policy)
}
