// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/core/gextras"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_numerable_icon_get_type()), F: marshalNumerableIcon},
	})
}

// NumerableIcon: gtkNumerableIcon is a subclass of Icon that can show a number
// or short string as an emblem. The number can be overlayed on top of another
// emblem, if desired.
//
// It supports theming by taking font and color information from a provided
// StyleContext; see gtk_numerable_icon_set_style_context().
//
// Typical numerable icons: ! (numerableicon.png) ! (numerableicon2.png)
type NumerableIcon interface {
	gio.EmblemedIcon
	gio.Icon

	// BackgroundGIcon:
	BackgroundGIcon() gio.Icon
	// BackgroundIconName:
	BackgroundIconName() string
	// Count:
	Count() int
	// Label:
	Label() string
	// StyleContext:
	StyleContext() StyleContext
	// SetBackgroundGIconNumerableIcon:
	SetBackgroundGIconNumerableIcon(icon gio.Icon)
	// SetBackgroundIconNameNumerableIcon:
	SetBackgroundIconNameNumerableIcon(iconName string)
	// SetCountNumerableIcon:
	SetCountNumerableIcon(count int)
	// SetLabelNumerableIcon:
	SetLabelNumerableIcon(label string)
	// SetStyleContextNumerableIcon:
	SetStyleContextNumerableIcon(style StyleContext)
}

// numerableIcon implements the NumerableIcon class.
type numerableIcon struct {
	gio.EmblemedIcon
}

// WrapNumerableIcon wraps a GObject to the right type. It is
// primarily used internally.
func WrapNumerableIcon(obj *externglib.Object) NumerableIcon {
	return numerableIcon{
		EmblemedIcon: gio.WrapEmblemedIcon(obj),
	}
}

func marshalNumerableIcon(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapNumerableIcon(obj), nil
}

func (s numerableIcon) BackgroundGIcon() gio.Icon {
	var _arg0 *C.GtkNumerableIcon // out
	var _cret *C.GIcon            // in

	_arg0 = (*C.GtkNumerableIcon)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_numerable_icon_get_background_gicon(_arg0)

	var _icon gio.Icon // out

	_icon = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(gio.Icon)

	return _icon
}

func (s numerableIcon) BackgroundIconName() string {
	var _arg0 *C.GtkNumerableIcon // out
	var _cret *C.gchar            // in

	_arg0 = (*C.GtkNumerableIcon)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_numerable_icon_get_background_icon_name(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

func (s numerableIcon) Count() int {
	var _arg0 *C.GtkNumerableIcon // out
	var _cret C.gint              // in

	_arg0 = (*C.GtkNumerableIcon)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_numerable_icon_get_count(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (s numerableIcon) Label() string {
	var _arg0 *C.GtkNumerableIcon // out
	var _cret *C.gchar            // in

	_arg0 = (*C.GtkNumerableIcon)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_numerable_icon_get_label(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

func (s numerableIcon) StyleContext() StyleContext {
	var _arg0 *C.GtkNumerableIcon // out
	var _cret *C.GtkStyleContext  // in

	_arg0 = (*C.GtkNumerableIcon)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_numerable_icon_get_style_context(_arg0)

	var _styleContext StyleContext // out

	_styleContext = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(StyleContext)

	return _styleContext
}

func (s numerableIcon) SetBackgroundGIconNumerableIcon(icon gio.Icon) {
	var _arg0 *C.GtkNumerableIcon // out
	var _arg1 *C.GIcon            // out

	_arg0 = (*C.GtkNumerableIcon)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GIcon)(unsafe.Pointer(icon.Native()))

	C.gtk_numerable_icon_set_background_gicon(_arg0, _arg1)
}

func (s numerableIcon) SetBackgroundIconNameNumerableIcon(iconName string) {
	var _arg0 *C.GtkNumerableIcon // out
	var _arg1 *C.gchar            // out

	_arg0 = (*C.GtkNumerableIcon)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.gchar)(C.CString(iconName))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_numerable_icon_set_background_icon_name(_arg0, _arg1)
}

func (s numerableIcon) SetCountNumerableIcon(count int) {
	var _arg0 *C.GtkNumerableIcon // out
	var _arg1 C.gint              // out

	_arg0 = (*C.GtkNumerableIcon)(unsafe.Pointer(s.Native()))
	_arg1 = C.gint(count)

	C.gtk_numerable_icon_set_count(_arg0, _arg1)
}

func (s numerableIcon) SetLabelNumerableIcon(label string) {
	var _arg0 *C.GtkNumerableIcon // out
	var _arg1 *C.gchar            // out

	_arg0 = (*C.GtkNumerableIcon)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.gchar)(C.CString(label))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_numerable_icon_set_label(_arg0, _arg1)
}

func (s numerableIcon) SetStyleContextNumerableIcon(style StyleContext) {
	var _arg0 *C.GtkNumerableIcon // out
	var _arg1 *C.GtkStyleContext  // out

	_arg0 = (*C.GtkNumerableIcon)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GtkStyleContext)(unsafe.Pointer(style.Native()))

	C.gtk_numerable_icon_set_style_context(_arg0, _arg1)
}

func (i numerableIcon) Equal(icon2 gio.Icon) bool {
	return gio.WrapIcon(gextras.InternObject(i)).Equal(icon2)
}

func (i numerableIcon) Serialize() *glib.Variant {
	return gio.WrapIcon(gextras.InternObject(i)).Serialize()
}

func (i numerableIcon) String() string {
	return gio.WrapIcon(gextras.InternObject(i)).String()
}
