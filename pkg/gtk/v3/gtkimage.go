// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/core/gextras"
	"github.com/diamondburned/gotk4/pkg/cairo"
	"github.com/diamondburned/gotk4/pkg/gdkpixbuf/v2"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_image_type_get_type()), F: marshalImageType},
		{T: externglib.Type(C.gtk_image_get_type()), F: marshalImage},
	})
}

// ImageType describes the image data representation used by a Image. If you
// want to get the image from the widget, you can only get the currently-stored
// representation. e.g. if the gtk_image_get_storage_type() returns
// K_IMAGE_PIXBUF, then you can call gtk_image_get_pixbuf() but not
// gtk_image_get_stock(). For empty images, you can request any storage type
// (call any of the "get" functions), but they will all return nil values.
type ImageType int

const (
	// empty: there is no image displayed by the widget
	ImageTypeEmpty ImageType = 0
	// pixbuf: the widget contains a Pixbuf
	ImageTypePixbuf ImageType = 1
	// stock: the widget contains a [stock item name][gtkstock]
	ImageTypeStock ImageType = 2
	// IconSet: the widget contains a IconSet
	ImageTypeIconSet ImageType = 3
	// animation: the widget contains a PixbufAnimation
	ImageTypeAnimation ImageType = 4
	// IconName: the widget contains a named icon. This image type was added in
	// GTK+ 2.6
	ImageTypeIconName ImageType = 5
	// gicon: the widget contains a #GIcon. This image type was added in GTK+
	// 2.14
	ImageTypeGIcon ImageType = 6
	// surface: the widget contains a #cairo_surface_t. This image type was
	// added in GTK+ 3.10
	ImageTypeSurface ImageType = 7
)

func marshalImageType(p uintptr) (interface{}, error) {
	return ImageType(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// Image: the Image widget displays an image. Various kinds of object can be
// displayed as an image; most typically, you would load a Pixbuf ("pixel
// buffer") from a file, and then display that. There’s a convenience function
// to do this, gtk_image_new_from_file(), used as follows:
//
//      static gboolean
//      button_press_callback (GtkWidget      *event_box,
//                             GdkEventButton *event,
//                             gpointer        data)
//      {
//        g_print ("Event box clicked at coordinates f,f\n",
//                 event->x, event->y);
//
//        // Returning TRUE means we handled the event, so the signal
//        // emission should be stopped (don’t call any further callbacks
//        // that may be connected). Return FALSE to continue invoking callbacks.
//        return TRUE;
//      }
//
//      static GtkWidget*
//      create_image (void)
//      {
//        GtkWidget *image;
//        GtkWidget *event_box;
//
//        image = gtk_image_new_from_file ("myfile.png");
//
//        event_box = gtk_event_box_new ();
//
//        gtk_container_add (GTK_CONTAINER (event_box), image);
//
//        g_signal_connect (G_OBJECT (event_box),
//                          "button_press_event",
//                          G_CALLBACK (button_press_callback),
//                          image);
//
//        return image;
//      }
//
// When handling events on the event box, keep in mind that coordinates in the
// image may be different from event box coordinates due to the alignment and
// padding settings on the image (see Misc). The simplest way to solve this is
// to set the alignment to 0.0 (left/top), and set the padding to zero. Then the
// origin of the image will be the same as the origin of the event box.
//
// Sometimes an application will want to avoid depending on external data files,
// such as image files. GTK+ comes with a program to avoid this, called
// “gdk-pixbuf-csource”. This library allows you to convert an image into a C
// variable declaration, which can then be loaded into a Pixbuf using
// gdk_pixbuf_new_from_inline().
//
//
// CSS nodes
//
// GtkImage has a single CSS node with the name image. The style classes may
// appear on image CSS nodes: .icon-dropshadow, .lowres-icon.
type Image interface {
	Misc

	// ClearImage:
	ClearImage()
	// Animation:
	Animation() gdkpixbuf.PixbufAnimation
	// GIcon:
	GIcon() (gio.Icon, int)
	// IconName:
	IconName() (string, int)
	// IconSet:
	IconSet() (*IconSet, int)
	// Pixbuf:
	Pixbuf() gdkpixbuf.Pixbuf
	// PixelSize:
	PixelSize() int
	// Stock:
	Stock() (string, int)
	// StorageType:
	StorageType() ImageType
	// SetFromAnimationImage:
	SetFromAnimationImage(animation gdkpixbuf.PixbufAnimation)
	// SetFromFileImage:
	SetFromFileImage(filename string)
	// SetFromGIconImage:
	SetFromGIconImage(icon gio.Icon, size int)
	// SetFromIconNameImage:
	SetFromIconNameImage(iconName string, size int)
	// SetFromIconSetImage:
	SetFromIconSetImage(iconSet *IconSet, size int)
	// SetFromPixbufImage:
	SetFromPixbufImage(pixbuf gdkpixbuf.Pixbuf)
	// SetFromResourceImage:
	SetFromResourceImage(resourcePath string)
	// SetFromStockImage:
	SetFromStockImage(stockId string, size int)
	// SetFromSurfaceImage:
	SetFromSurfaceImage(surface *cairo.Surface)
	// SetPixelSizeImage:
	SetPixelSizeImage(pixelSize int)
}

// image implements the Image class.
type image struct {
	Misc
}

// WrapImage wraps a GObject to the right type. It is
// primarily used internally.
func WrapImage(obj *externglib.Object) Image {
	return image{
		Misc: WrapMisc(obj),
	}
}

func marshalImage(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapImage(obj), nil
}

// NewImage:
func NewImage() Image {
	var _cret *C.GtkWidget // in

	_cret = C.gtk_image_new()

	var _image Image // out

	_image = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Image)

	return _image
}

// NewImageFromAnimation:
func NewImageFromAnimation(animation gdkpixbuf.PixbufAnimation) Image {
	var _arg1 *C.GdkPixbufAnimation // out
	var _cret *C.GtkWidget          // in

	_arg1 = (*C.GdkPixbufAnimation)(unsafe.Pointer(animation.Native()))

	_cret = C.gtk_image_new_from_animation(_arg1)

	var _image Image // out

	_image = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Image)

	return _image
}

// NewImageFromFile:
func NewImageFromFile(filename string) Image {
	var _arg1 *C.gchar     // out
	var _cret *C.GtkWidget // in

	_arg1 = (*C.gchar)(C.CString(filename))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_image_new_from_file(_arg1)

	var _image Image // out

	_image = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Image)

	return _image
}

// NewImageFromGIcon:
func NewImageFromGIcon(icon gio.Icon, size int) Image {
	var _arg1 *C.GIcon      // out
	var _arg2 C.GtkIconSize // out
	var _cret *C.GtkWidget  // in

	_arg1 = (*C.GIcon)(unsafe.Pointer(icon.Native()))
	_arg2 = C.GtkIconSize(size)

	_cret = C.gtk_image_new_from_gicon(_arg1, _arg2)

	var _image Image // out

	_image = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Image)

	return _image
}

// NewImageFromIconName:
func NewImageFromIconName(iconName string, size int) Image {
	var _arg1 *C.gchar      // out
	var _arg2 C.GtkIconSize // out
	var _cret *C.GtkWidget  // in

	_arg1 = (*C.gchar)(C.CString(iconName))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.GtkIconSize(size)

	_cret = C.gtk_image_new_from_icon_name(_arg1, _arg2)

	var _image Image // out

	_image = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Image)

	return _image
}

// NewImageFromIconSet:
func NewImageFromIconSet(iconSet *IconSet, size int) Image {
	var _arg1 *C.GtkIconSet // out
	var _arg2 C.GtkIconSize // out
	var _cret *C.GtkWidget  // in

	_arg1 = (*C.GtkIconSet)(unsafe.Pointer(iconSet.Native()))
	_arg2 = C.GtkIconSize(size)

	_cret = C.gtk_image_new_from_icon_set(_arg1, _arg2)

	var _image Image // out

	_image = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Image)

	return _image
}

// NewImageFromPixbuf:
func NewImageFromPixbuf(pixbuf gdkpixbuf.Pixbuf) Image {
	var _arg1 *C.GdkPixbuf // out
	var _cret *C.GtkWidget // in

	_arg1 = (*C.GdkPixbuf)(unsafe.Pointer(pixbuf.Native()))

	_cret = C.gtk_image_new_from_pixbuf(_arg1)

	var _image Image // out

	_image = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Image)

	return _image
}

// NewImageFromResource:
func NewImageFromResource(resourcePath string) Image {
	var _arg1 *C.gchar     // out
	var _cret *C.GtkWidget // in

	_arg1 = (*C.gchar)(C.CString(resourcePath))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_image_new_from_resource(_arg1)

	var _image Image // out

	_image = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Image)

	return _image
}

// NewImageFromStock:
func NewImageFromStock(stockId string, size int) Image {
	var _arg1 *C.gchar      // out
	var _arg2 C.GtkIconSize // out
	var _cret *C.GtkWidget  // in

	_arg1 = (*C.gchar)(C.CString(stockId))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.GtkIconSize(size)

	_cret = C.gtk_image_new_from_stock(_arg1, _arg2)

	var _image Image // out

	_image = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Image)

	return _image
}

// NewImageFromSurface:
func NewImageFromSurface(surface *cairo.Surface) Image {
	var _arg1 *C.cairo_surface_t // out
	var _cret *C.GtkWidget       // in

	_arg1 = (*C.cairo_surface_t)(unsafe.Pointer(surface.Native()))

	_cret = C.gtk_image_new_from_surface(_arg1)

	var _image Image // out

	_image = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Image)

	return _image
}

func (i image) ClearImage() {
	var _arg0 *C.GtkImage // out

	_arg0 = (*C.GtkImage)(unsafe.Pointer(i.Native()))

	C.gtk_image_clear(_arg0)
}

func (i image) Animation() gdkpixbuf.PixbufAnimation {
	var _arg0 *C.GtkImage           // out
	var _cret *C.GdkPixbufAnimation // in

	_arg0 = (*C.GtkImage)(unsafe.Pointer(i.Native()))

	_cret = C.gtk_image_get_animation(_arg0)

	var _pixbufAnimation gdkpixbuf.PixbufAnimation // out

	_pixbufAnimation = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(gdkpixbuf.PixbufAnimation)

	return _pixbufAnimation
}

func (i image) GIcon() (gio.Icon, int) {
	var _arg0 *C.GtkImage   // out
	var _arg1 *C.GIcon      // in
	var _arg2 C.GtkIconSize // in

	_arg0 = (*C.GtkImage)(unsafe.Pointer(i.Native()))

	C.gtk_image_get_gicon(_arg0, &_arg1, &_arg2)

	var _gicon gio.Icon // out
	var _size int       // out

	_gicon = gextras.CastObject(externglib.Take(unsafe.Pointer(_arg1))).(gio.Icon)
	_size = int(_arg2)

	return _gicon, _size
}

func (i image) IconName() (string, int) {
	var _arg0 *C.GtkImage   // out
	var _arg1 *C.gchar      // in
	var _arg2 C.GtkIconSize // in

	_arg0 = (*C.GtkImage)(unsafe.Pointer(i.Native()))

	C.gtk_image_get_icon_name(_arg0, &_arg1, &_arg2)

	var _iconName string // out
	var _size int        // out

	_iconName = C.GoString(_arg1)
	_size = int(_arg2)

	return _iconName, _size
}

func (i image) IconSet() (*IconSet, int) {
	var _arg0 *C.GtkImage   // out
	var _arg1 *C.GtkIconSet // in
	var _arg2 C.GtkIconSize // in

	_arg0 = (*C.GtkImage)(unsafe.Pointer(i.Native()))

	C.gtk_image_get_icon_set(_arg0, &_arg1, &_arg2)

	var _iconSet *IconSet // out
	var _size int         // out

	_iconSet = (*IconSet)(unsafe.Pointer(_arg1))
	_size = int(_arg2)

	return _iconSet, _size
}

func (i image) Pixbuf() gdkpixbuf.Pixbuf {
	var _arg0 *C.GtkImage  // out
	var _cret *C.GdkPixbuf // in

	_arg0 = (*C.GtkImage)(unsafe.Pointer(i.Native()))

	_cret = C.gtk_image_get_pixbuf(_arg0)

	var _pixbuf gdkpixbuf.Pixbuf // out

	_pixbuf = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(gdkpixbuf.Pixbuf)

	return _pixbuf
}

func (i image) PixelSize() int {
	var _arg0 *C.GtkImage // out
	var _cret C.gint      // in

	_arg0 = (*C.GtkImage)(unsafe.Pointer(i.Native()))

	_cret = C.gtk_image_get_pixel_size(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (i image) Stock() (string, int) {
	var _arg0 *C.GtkImage   // out
	var _arg1 *C.gchar      // in
	var _arg2 C.GtkIconSize // in

	_arg0 = (*C.GtkImage)(unsafe.Pointer(i.Native()))

	C.gtk_image_get_stock(_arg0, &_arg1, &_arg2)

	var _stockId string // out
	var _size int       // out

	_stockId = C.GoString(_arg1)
	_size = int(_arg2)

	return _stockId, _size
}

func (i image) StorageType() ImageType {
	var _arg0 *C.GtkImage    // out
	var _cret C.GtkImageType // in

	_arg0 = (*C.GtkImage)(unsafe.Pointer(i.Native()))

	_cret = C.gtk_image_get_storage_type(_arg0)

	var _imageType ImageType // out

	_imageType = ImageType(_cret)

	return _imageType
}

func (i image) SetFromAnimationImage(animation gdkpixbuf.PixbufAnimation) {
	var _arg0 *C.GtkImage           // out
	var _arg1 *C.GdkPixbufAnimation // out

	_arg0 = (*C.GtkImage)(unsafe.Pointer(i.Native()))
	_arg1 = (*C.GdkPixbufAnimation)(unsafe.Pointer(animation.Native()))

	C.gtk_image_set_from_animation(_arg0, _arg1)
}

func (i image) SetFromFileImage(filename string) {
	var _arg0 *C.GtkImage // out
	var _arg1 *C.gchar    // out

	_arg0 = (*C.GtkImage)(unsafe.Pointer(i.Native()))
	_arg1 = (*C.gchar)(C.CString(filename))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_image_set_from_file(_arg0, _arg1)
}

func (i image) SetFromGIconImage(icon gio.Icon, size int) {
	var _arg0 *C.GtkImage   // out
	var _arg1 *C.GIcon      // out
	var _arg2 C.GtkIconSize // out

	_arg0 = (*C.GtkImage)(unsafe.Pointer(i.Native()))
	_arg1 = (*C.GIcon)(unsafe.Pointer(icon.Native()))
	_arg2 = C.GtkIconSize(size)

	C.gtk_image_set_from_gicon(_arg0, _arg1, _arg2)
}

func (i image) SetFromIconNameImage(iconName string, size int) {
	var _arg0 *C.GtkImage   // out
	var _arg1 *C.gchar      // out
	var _arg2 C.GtkIconSize // out

	_arg0 = (*C.GtkImage)(unsafe.Pointer(i.Native()))
	_arg1 = (*C.gchar)(C.CString(iconName))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.GtkIconSize(size)

	C.gtk_image_set_from_icon_name(_arg0, _arg1, _arg2)
}

func (i image) SetFromIconSetImage(iconSet *IconSet, size int) {
	var _arg0 *C.GtkImage   // out
	var _arg1 *C.GtkIconSet // out
	var _arg2 C.GtkIconSize // out

	_arg0 = (*C.GtkImage)(unsafe.Pointer(i.Native()))
	_arg1 = (*C.GtkIconSet)(unsafe.Pointer(iconSet.Native()))
	_arg2 = C.GtkIconSize(size)

	C.gtk_image_set_from_icon_set(_arg0, _arg1, _arg2)
}

func (i image) SetFromPixbufImage(pixbuf gdkpixbuf.Pixbuf) {
	var _arg0 *C.GtkImage  // out
	var _arg1 *C.GdkPixbuf // out

	_arg0 = (*C.GtkImage)(unsafe.Pointer(i.Native()))
	_arg1 = (*C.GdkPixbuf)(unsafe.Pointer(pixbuf.Native()))

	C.gtk_image_set_from_pixbuf(_arg0, _arg1)
}

func (i image) SetFromResourceImage(resourcePath string) {
	var _arg0 *C.GtkImage // out
	var _arg1 *C.gchar    // out

	_arg0 = (*C.GtkImage)(unsafe.Pointer(i.Native()))
	_arg1 = (*C.gchar)(C.CString(resourcePath))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_image_set_from_resource(_arg0, _arg1)
}

func (i image) SetFromStockImage(stockId string, size int) {
	var _arg0 *C.GtkImage   // out
	var _arg1 *C.gchar      // out
	var _arg2 C.GtkIconSize // out

	_arg0 = (*C.GtkImage)(unsafe.Pointer(i.Native()))
	_arg1 = (*C.gchar)(C.CString(stockId))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.GtkIconSize(size)

	C.gtk_image_set_from_stock(_arg0, _arg1, _arg2)
}

func (i image) SetFromSurfaceImage(surface *cairo.Surface) {
	var _arg0 *C.GtkImage        // out
	var _arg1 *C.cairo_surface_t // out

	_arg0 = (*C.GtkImage)(unsafe.Pointer(i.Native()))
	_arg1 = (*C.cairo_surface_t)(unsafe.Pointer(surface.Native()))

	C.gtk_image_set_from_surface(_arg0, _arg1)
}

func (i image) SetPixelSizeImage(pixelSize int) {
	var _arg0 *C.GtkImage // out
	var _arg1 C.gint      // out

	_arg0 = (*C.GtkImage)(unsafe.Pointer(i.Native()))
	_arg1 = C.gint(pixelSize)

	C.gtk_image_set_pixel_size(_arg0, _arg1)
}

func (b image) AddChild(builder Builder, child gextras.Objector, typ string) {
	WrapBuildable(gextras.InternObject(b)).AddChild(builder, child, typ)
}

func (b image) ConstructChild(builder Builder, name string) gextras.Objector {
	return WrapBuildable(gextras.InternObject(b)).ConstructChild(builder, name)
}

func (b image) InternalChild(builder Builder, childname string) gextras.Objector {
	return WrapBuildable(gextras.InternObject(b)).InternalChild(builder, childname)
}

func (b image) Name() string {
	return WrapBuildable(gextras.InternObject(b)).Name()
}

func (b image) ParserFinished(builder Builder) {
	WrapBuildable(gextras.InternObject(b)).ParserFinished(builder)
}

func (b image) SetBuildableProperty(builder Builder, name string, value externglib.Value) {
	WrapBuildable(gextras.InternObject(b)).SetBuildableProperty(builder, name, value)
}

func (b image) SetName(name string) {
	WrapBuildable(gextras.InternObject(b)).SetName(name)
}
