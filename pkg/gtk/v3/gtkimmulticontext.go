// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_im_multicontext_get_type()), F: marshalIMMulticontext},
	})
}

type IMMulticontext interface {
	IMContext

	// AppendMenuitems: add menuitems for various available input methods to a
	// menu; the menuitems, when selected, will switch the input method for the
	// context and the global default input method.
	AppendMenuitems(c IMMulticontext, menushell MenuShell)
	// ContextID gets the id of the currently active slave of the @context.
	ContextID(c IMMulticontext)
	// SetContextID sets the context id for @context.
	//
	// This causes the currently active slave of @context to be replaced by the
	// slave corresponding to the new context id.
	SetContextID(c IMMulticontext, contextID string)
}

// imMulticontext implements the IMMulticontext interface.
type imMulticontext struct {
	IMContext
}

var _ IMMulticontext = (*imMulticontext)(nil)

// WrapIMMulticontext wraps a GObject to the right type. It is
// primarily used internally.
func WrapIMMulticontext(obj *externglib.Object) IMMulticontext {
	return IMMulticontext{
		IMContext: WrapIMContext(obj),
	}
}

func marshalIMMulticontext(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapIMMulticontext(obj), nil
}

// NewIMMulticontext constructs a class IMMulticontext.
func NewIMMulticontext() {
	C.gtk_im_multicontext_new()
}

// AppendMenuitems: add menuitems for various available input methods to a
// menu; the menuitems, when selected, will switch the input method for the
// context and the global default input method.
func (c imMulticontext) AppendMenuitems(c IMMulticontext, menushell MenuShell) {
	var arg0 *C.GtkIMMulticontext
	var arg1 *C.GtkMenuShell

	arg0 = (*C.GtkIMMulticontext)(unsafe.Pointer(c.Native()))
	arg1 = (*C.GtkMenuShell)(unsafe.Pointer(menushell.Native()))

	C.gtk_im_multicontext_append_menuitems(arg0, arg1)
}

// ContextID gets the id of the currently active slave of the @context.
func (c imMulticontext) ContextID(c IMMulticontext) {
	var arg0 *C.GtkIMMulticontext

	arg0 = (*C.GtkIMMulticontext)(unsafe.Pointer(c.Native()))

	C.gtk_im_multicontext_get_context_id(arg0)
}

// SetContextID sets the context id for @context.
//
// This causes the currently active slave of @context to be replaced by the
// slave corresponding to the new context id.
func (c imMulticontext) SetContextID(c IMMulticontext, contextID string) {
	var arg0 *C.GtkIMMulticontext
	var arg1 *C.char

	arg0 = (*C.GtkIMMulticontext)(unsafe.Pointer(c.Native()))
	arg1 = (*C.char)(C.CString(contextID))
	defer C.free(unsafe.Pointer(arg1))

	C.gtk_im_multicontext_set_context_id(arg0, arg1)
}
