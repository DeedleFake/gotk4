// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk+-3.0 glib-2.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_text_mark_get_type()), F: marshalTextMark},
	})
}

// TextMark: you may wish to begin by reading the [text widget conceptual
// overview][TextWidget] which gives an overview of all the objects and data
// types related to the text widget and how they work together.
//
// A TextMark is like a bookmark in a text buffer; it preserves a position in
// the text. You can convert the mark to an iterator using
// gtk_text_buffer_get_iter_at_mark(). Unlike iterators, marks remain valid
// across buffer mutations, because their behavior is defined when text is
// inserted or deleted. When text containing a mark is deleted, the mark remains
// in the position originally occupied by the deleted text. When text is
// inserted at a mark, a mark with “left gravity” will be moved to the beginning
// of the newly-inserted text, and a mark with “right gravity” will be moved to
// the end.
//
// Note that “left” and “right” here refer to logical direction (left is the
// toward the start of the buffer); in some languages such as Hebrew the
// logically-leftmost text is not actually on the left when displayed.
//
// Marks are reference counted, but the reference count only controls the
// validity of the memory; marks can be deleted from the buffer at any time with
// gtk_text_buffer_delete_mark(). Once deleted from the buffer, a mark is
// essentially useless.
//
// Marks optionally have names; these can be convenient to avoid passing the
// TextMark object around.
//
// Marks are typically created using the gtk_text_buffer_create_mark() function.
type TextMark interface {
	gextras.Objector

	// Deleted returns true if the mark has been removed from its buffer with
	// gtk_text_buffer_delete_mark(). See gtk_text_buffer_add_mark() for a way
	// to add it to a buffer again.
	Deleted() bool
	// LeftGravity determines whether the mark has left gravity.
	LeftGravity() bool
	// Name returns the mark name; returns NULL for anonymous marks.
	Name() string
	// Visible returns true if the mark is visible (i.e. a cursor is displayed
	// for it).
	Visible() bool
	// SetVisible sets the visibility of @mark; the insertion point is normally
	// visible, i.e. you can see it as a vertical bar. Also, the text widget
	// uses a visible mark to indicate where a drop will occur when
	// dragging-and-dropping text. Most other marks are not visible. Marks are
	// not visible by default.
	SetVisible(setting bool)
}

// textMark implements the TextMark interface.
type textMark struct {
	gextras.Objector
}

var _ TextMark = (*textMark)(nil)

// WrapTextMark wraps a GObject to the right type. It is
// primarily used internally.
func WrapTextMark(obj *externglib.Object) TextMark {
	return TextMark{
		Objector: obj,
	}
}

func marshalTextMark(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapTextMark(obj), nil
}

// Deleted returns true if the mark has been removed from its buffer with
// gtk_text_buffer_delete_mark(). See gtk_text_buffer_add_mark() for a way
// to add it to a buffer again.
func (m textMark) Deleted() bool {
	var _arg0 *C.GtkTextMark // out

	_arg0 = (*C.GtkTextMark)(unsafe.Pointer(m.Native()))

	var _cret C.gboolean // in

	_cret = C.gtk_text_mark_get_deleted(_arg0)

	var _ok bool // out

	if _cret {
		_ok = true
	}

	return _ok
}

// LeftGravity determines whether the mark has left gravity.
func (m textMark) LeftGravity() bool {
	var _arg0 *C.GtkTextMark // out

	_arg0 = (*C.GtkTextMark)(unsafe.Pointer(m.Native()))

	var _cret C.gboolean // in

	_cret = C.gtk_text_mark_get_left_gravity(_arg0)

	var _ok bool // out

	if _cret {
		_ok = true
	}

	return _ok
}

// Name returns the mark name; returns NULL for anonymous marks.
func (m textMark) Name() string {
	var _arg0 *C.GtkTextMark // out

	_arg0 = (*C.GtkTextMark)(unsafe.Pointer(m.Native()))

	var _cret *C.gchar // in

	_cret = C.gtk_text_mark_get_name(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

// Visible returns true if the mark is visible (i.e. a cursor is displayed
// for it).
func (m textMark) Visible() bool {
	var _arg0 *C.GtkTextMark // out

	_arg0 = (*C.GtkTextMark)(unsafe.Pointer(m.Native()))

	var _cret C.gboolean // in

	_cret = C.gtk_text_mark_get_visible(_arg0)

	var _ok bool // out

	if _cret {
		_ok = true
	}

	return _ok
}

// SetVisible sets the visibility of @mark; the insertion point is normally
// visible, i.e. you can see it as a vertical bar. Also, the text widget
// uses a visible mark to indicate where a drop will occur when
// dragging-and-dropping text. Most other marks are not visible. Marks are
// not visible by default.
func (m textMark) SetVisible(setting bool) {
	var _arg0 *C.GtkTextMark // out
	var _arg1 C.gboolean     // out

	_arg0 = (*C.GtkTextMark)(unsafe.Pointer(m.Native()))
	if setting {
		_arg1 = C.gboolean(1)
	}

	C.gtk_text_mark_set_visible(_arg0, _arg1)
}
