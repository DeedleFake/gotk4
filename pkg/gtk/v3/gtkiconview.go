// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/box"
	"github.com/diamondburned/gotk4/internal/gextras"
)

// #cgo pkg-config: gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
//
// extern void gotk4_IconViewForeachFunc(GtkIconView* _0, GtkTreePath* _1, gpointer _2);
import "C"

// IconViewForeachFunc: a function used by gtk_icon_view_selected_foreach() to
// map all selected rows. It will be called on every selected row in the view.
type IconViewForeachFunc func(iconView IconView, path *TreePath)

//export gotk4_IconViewForeachFunc
func gotk4_IconViewForeachFunc(arg0 *C.GtkIconView, arg1 *C.GtkTreePath, arg2 C.gpointer) {
	v := box.Get(uintptr(arg2))
	if v == nil {
		panic(`callback not found`)
	}

	var iconView IconView
	var path *TreePath

	iconView = gextras.CastObject(externglib.Take(unsafe.Pointer(arg0.Native()))).(IconView)

	{
		path = WrapTreePath(unsafe.Pointer(arg1))
	}

	v.(IconViewForeachFunc)(iconView, path)
}

type IconViewPrivate struct {
	native C.GtkIconViewPrivate
}

// WrapIconViewPrivate wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapIconViewPrivate(ptr unsafe.Pointer) *IconViewPrivate {
	if ptr == nil {
		return nil
	}

	return (*IconViewPrivate)(ptr)
}

func marshalIconViewPrivate(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapIconViewPrivate(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (i *IconViewPrivate) Native() unsafe.Pointer {
	return unsafe.Pointer(&i.native)
}
