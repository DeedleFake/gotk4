// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_toggle_tool_button_get_type()), F: marshalToggleToolButtonner},
	})
}

// ToggleToolButtonnerOverrider contains methods that are overridable.
//
// As of right now, interface overriding and subclassing is not supported
// yet, so the interface currently has no use.
type ToggleToolButtonnerOverrider interface {
	Toggled()
}

// ToggleToolButtonner describes ToggleToolButton's methods.
type ToggleToolButtonner interface {
	gextras.Objector

	Active() bool
	SetActive(isActive bool)
}

// ToggleToolButton is a ToolItem that contains a toggle button.
//
// Use gtk_toggle_tool_button_new() to create a new GtkToggleToolButton.
//
//
// CSS nodes
//
// GtkToggleToolButton has a single CSS node with name togglebutton.
type ToggleToolButton struct {
	*externglib.Object

	ToolButton
	atk.ImplementorIface
	Actionable
	Activatable
	Buildable
}

var _ ToggleToolButtonner = (*ToggleToolButton)(nil)

func wrapToggleToolButtonner(obj *externglib.Object) ToggleToolButtonner {
	return &ToggleToolButton{
		Object: obj,
		ToolButton: ToolButton{
			Object: obj,
			ToolItem: ToolItem{
				Object: obj,
				Bin: Bin{
					Object: obj,
					Container: Container{
						Object: obj,
						Widget: Widget{
							Object: obj,
							InitiallyUnowned: externglib.InitiallyUnowned{
								Object: obj,
							},
							ImplementorIface: atk.ImplementorIface{
								Object: obj,
							},
							Buildable: Buildable{
								Object: obj,
							},
						},
						ImplementorIface: atk.ImplementorIface{
							Object: obj,
						},
						Buildable: Buildable{
							Object: obj,
						},
					},
					ImplementorIface: atk.ImplementorIface{
						Object: obj,
					},
					Buildable: Buildable{
						Object: obj,
					},
				},
				ImplementorIface: atk.ImplementorIface{
					Object: obj,
				},
				Activatable: Activatable{
					Object: obj,
				},
				Buildable: Buildable{
					Object: obj,
				},
			},
			ImplementorIface: atk.ImplementorIface{
				Object: obj,
			},
			Actionable: Actionable{
				Object: obj,
				Widget: Widget{
					Object: obj,
					InitiallyUnowned: externglib.InitiallyUnowned{
						Object: obj,
					},
					ImplementorIface: atk.ImplementorIface{
						Object: obj,
					},
					Buildable: Buildable{
						Object: obj,
					},
				},
			},
			Activatable: Activatable{
				Object: obj,
			},
			Buildable: Buildable{
				Object: obj,
			},
		},
		ImplementorIface: atk.ImplementorIface{
			Object: obj,
		},
		Actionable: Actionable{
			Object: obj,
			Widget: Widget{
				Object: obj,
				InitiallyUnowned: externglib.InitiallyUnowned{
					Object: obj,
				},
				ImplementorIface: atk.ImplementorIface{
					Object: obj,
				},
				Buildable: Buildable{
					Object: obj,
				},
			},
		},
		Activatable: Activatable{
			Object: obj,
		},
		Buildable: Buildable{
			Object: obj,
		},
	}
}

func marshalToggleToolButtonner(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapToggleToolButtonner(obj), nil
}

// NewToggleToolButton returns a new ToggleToolButton
func NewToggleToolButton() *ToggleToolButton {
	var _cret *C.GtkToolItem // in

	_cret = C.gtk_toggle_tool_button_new()

	var _toggleToolButton *ToggleToolButton // out

	_toggleToolButton = (gextras.CastObject(externglib.Take(unsafe.Pointer(_cret)))).(*ToggleToolButton)

	return _toggleToolButton
}

// NewToggleToolButtonFromStock creates a new ToggleToolButton containing the
// image and text from a stock item. Some stock ids have preprocessor macros
// like K_STOCK_OK and K_STOCK_APPLY.
//
// It is an error if @stock_id is not a name of a stock item.
//
// Deprecated: Use gtk_toggle_tool_button_new() instead.
func NewToggleToolButtonFromStock(stockId string) *ToggleToolButton {
	var _arg1 *C.gchar       // out
	var _cret *C.GtkToolItem // in

	_arg1 = (*C.gchar)(C.CString(stockId))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_toggle_tool_button_new_from_stock(_arg1)

	var _toggleToolButton *ToggleToolButton // out

	_toggleToolButton = (gextras.CastObject(externglib.Take(unsafe.Pointer(_cret)))).(*ToggleToolButton)

	return _toggleToolButton
}

// Active queries a ToggleToolButton and returns its current state. Returns true
// if the toggle button is pressed in and false if it is raised.
func (button *ToggleToolButton) Active() bool {
	var _arg0 *C.GtkToggleToolButton // out
	var _cret C.gboolean             // in

	_arg0 = (*C.GtkToggleToolButton)(unsafe.Pointer(button.Native()))

	_cret = C.gtk_toggle_tool_button_get_active(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetActive sets the status of the toggle tool button. Set to true if you want
// the GtkToggleButton to be “pressed in”, and false to raise it. This action
// causes the toggled signal to be emitted.
func (button *ToggleToolButton) SetActive(isActive bool) {
	var _arg0 *C.GtkToggleToolButton // out
	var _arg1 C.gboolean             // out

	_arg0 = (*C.GtkToggleToolButton)(unsafe.Pointer(button.Native()))
	if isActive {
		_arg1 = C.TRUE
	}

	C.gtk_toggle_tool_button_set_active(_arg0, _arg1)
}
