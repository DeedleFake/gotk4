// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/box"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_misc_get_type()), F: marshalMisc},
	})
}

// Misc: the Misc widget is an abstract widget which is not useful itself, but
// is used to derive subclasses which have alignment and padding attributes.
//
// The horizontal and vertical padding attributes allows extra space to be added
// around the widget.
//
// The horizontal and vertical alignment attributes enable the widget to be
// positioned within its allocated area. Note that if the widget is added to a
// container in such a way that it expands automatically to fill its allocated
// area, the alignment settings will not alter the widget's position.
//
// Note that the desired effect can in most cases be achieved by using the
// Widget:halign, Widget:valign and Widget:margin properties on the child
// widget, so GtkMisc should not be used in new code. To reflect this fact, all
// Misc API has been deprecated.
type Misc interface {
	Widget

	Alignment() (xalign float32, yalign float32)

	Padding() (xpad int, ypad int)

	SetAlignmentMisc(xalign float32, yalign float32)

	SetPaddingMisc(xpad int, ypad int)
}

// misc implements the Misc class.
type misc struct {
	Widget
}

// WrapMisc wraps a GObject to the right type. It is
// primarily used internally.
func WrapMisc(obj *externglib.Object) Misc {
	return misc{
		Widget: WrapWidget(obj),
	}
}

func marshalMisc(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapMisc(obj), nil
}

func (m misc) Alignment() (xalign float32, yalign float32) {
	var _arg0 *C.GtkMisc // out
	var _arg1 C.gfloat   // in
	var _arg2 C.gfloat   // in

	_arg0 = (*C.GtkMisc)(unsafe.Pointer(m.Native()))

	C.gtk_misc_get_alignment(_arg0, &_arg1, &_arg2)

	var _xalign float32 // out
	var _yalign float32 // out

	_xalign = float32(_arg1)
	_yalign = float32(_arg2)

	return _xalign, _yalign
}

func (m misc) Padding() (xpad int, ypad int) {
	var _arg0 *C.GtkMisc // out
	var _arg1 C.gint     // in
	var _arg2 C.gint     // in

	_arg0 = (*C.GtkMisc)(unsafe.Pointer(m.Native()))

	C.gtk_misc_get_padding(_arg0, &_arg1, &_arg2)

	var _xpad int // out
	var _ypad int // out

	_xpad = int(_arg1)
	_ypad = int(_arg2)

	return _xpad, _ypad
}

func (m misc) SetAlignmentMisc(xalign float32, yalign float32) {
	var _arg0 *C.GtkMisc // out
	var _arg1 C.gfloat   // out
	var _arg2 C.gfloat   // out

	_arg0 = (*C.GtkMisc)(unsafe.Pointer(m.Native()))
	_arg1 = C.gfloat(xalign)
	_arg2 = C.gfloat(yalign)

	C.gtk_misc_set_alignment(_arg0, _arg1, _arg2)
}

func (m misc) SetPaddingMisc(xpad int, ypad int) {
	var _arg0 *C.GtkMisc // out
	var _arg1 C.gint     // out
	var _arg2 C.gint     // out

	_arg0 = (*C.GtkMisc)(unsafe.Pointer(m.Native()))
	_arg1 = C.gint(xpad)
	_arg2 = C.gint(ypad)

	C.gtk_misc_set_padding(_arg0, _arg1, _arg2)
}

func (b misc) AddChild(builder Builder, child gextras.Objector, typ string) {
	WrapBuildable(gextras.InternObject(b)).AddChild(builder, child, typ)
}

func (b misc) ConstructChild(builder Builder, name string) gextras.Objector {
	return WrapBuildable(gextras.InternObject(b)).ConstructChild(builder, name)
}

func (b misc) CustomFinished(builder Builder, child gextras.Objector, tagname string, data interface{}) {
	WrapBuildable(gextras.InternObject(b)).CustomFinished(builder, child, tagname, data)
}

func (b misc) CustomTagEnd(builder Builder, child gextras.Objector, tagname string, data *interface{}) {
	WrapBuildable(gextras.InternObject(b)).CustomTagEnd(builder, child, tagname, data)
}

func (b misc) CustomTagStart(builder Builder, child gextras.Objector, tagname string) (glib.MarkupParser, interface{}, bool) {
	return WrapBuildable(gextras.InternObject(b)).CustomTagStart(builder, child, tagname)
}

func (b misc) InternalChild(builder Builder, childname string) gextras.Objector {
	return WrapBuildable(gextras.InternObject(b)).InternalChild(builder, childname)
}

func (b misc) Name() string {
	return WrapBuildable(gextras.InternObject(b)).Name()
}

func (b misc) ParserFinished(builder Builder) {
	WrapBuildable(gextras.InternObject(b)).ParserFinished(builder)
}

func (b misc) SetBuildableProperty(builder Builder, name string, value externglib.Value) {
	WrapBuildable(gextras.InternObject(b)).SetBuildableProperty(builder, name, value)
}

func (b misc) SetName(name string) {
	WrapBuildable(gextras.InternObject(b)).SetName(name)
}
