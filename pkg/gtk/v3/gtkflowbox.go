// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/box"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
//
// void gotk4_FlowBoxForeachFunc(GtkFlowBox*, GtkFlowBoxChild*, gpointer);
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_flow_box_get_type()), F: marshalFlowBox},
		{T: externglib.Type(C.gtk_flow_box_child_get_type()), F: marshalFlowBoxChild},
	})
}

// FlowBoxCreateWidgetFunc: called for flow boxes that are bound to a Model with
// gtk_flow_box_bind_model() for each item that gets added to the model.
type FlowBoxCreateWidgetFunc func(item gextras.Objector) (widget Widget)

//export gotk4_FlowBoxCreateWidgetFunc
func gotk4_FlowBoxCreateWidgetFunc(arg0 C.gpointer, arg1 C.gpointer) *C.GtkWidget {
	v := box.Get(uintptr(arg1))
	if v == nil {
		panic(`callback not found`)
	}

	var item gextras.Objector // out

	item = gextras.CastObject(externglib.Take(unsafe.Pointer(arg0))).(gextras.Objector)

	fn := v.(FlowBoxCreateWidgetFunc)
	widget := fn(item)

	var cret *C.GtkWidget // out

	cret = (*C.GtkWidget)(unsafe.Pointer(widget.Native()))

	return cret
}

// FlowBoxFilterFunc: function that will be called whenrever a child changes or
// is added. It lets you control if the child should be visible or not.
type FlowBoxFilterFunc func(child FlowBoxChild) (ok bool)

//export gotk4_FlowBoxFilterFunc
func gotk4_FlowBoxFilterFunc(arg0 *C.GtkFlowBoxChild, arg1 C.gpointer) C.gboolean {
	v := box.Get(uintptr(arg1))
	if v == nil {
		panic(`callback not found`)
	}

	var child FlowBoxChild // out

	child = gextras.CastObject(externglib.Take(unsafe.Pointer(arg0))).(FlowBoxChild)

	fn := v.(FlowBoxFilterFunc)
	ok := fn(child)

	var cret C.gboolean // out

	if ok {
		cret = C.TRUE
	}

	return cret
}

// FlowBoxForeachFunc: function used by gtk_flow_box_selected_foreach(). It will
// be called on every selected child of the @box.
type FlowBoxForeachFunc func(box FlowBox, child FlowBoxChild)

//export gotk4_FlowBoxForeachFunc
func gotk4_FlowBoxForeachFunc(arg0 *C.GtkFlowBox, arg1 *C.GtkFlowBoxChild, arg2 C.gpointer) {
	v := box.Get(uintptr(arg2))
	if v == nil {
		panic(`callback not found`)
	}

	var box FlowBox        // out
	var child FlowBoxChild // out

	box = gextras.CastObject(externglib.Take(unsafe.Pointer(arg0))).(FlowBox)
	child = gextras.CastObject(externglib.Take(unsafe.Pointer(arg1))).(FlowBoxChild)

	fn := v.(FlowBoxForeachFunc)
	fn(box, child)
}

// FlowBoxSortFunc: function to compare two children to determine which should
// come first.
type FlowBoxSortFunc func(child1 FlowBoxChild, child2 FlowBoxChild) (gint int)

//export gotk4_FlowBoxSortFunc
func gotk4_FlowBoxSortFunc(arg0 *C.GtkFlowBoxChild, arg1 *C.GtkFlowBoxChild, arg2 C.gpointer) C.gint {
	v := box.Get(uintptr(arg2))
	if v == nil {
		panic(`callback not found`)
	}

	var child1 FlowBoxChild // out
	var child2 FlowBoxChild // out

	child1 = gextras.CastObject(externglib.Take(unsafe.Pointer(arg0))).(FlowBoxChild)
	child2 = gextras.CastObject(externglib.Take(unsafe.Pointer(arg1))).(FlowBoxChild)

	fn := v.(FlowBoxSortFunc)
	gint := fn(child1, child2)

	var cret C.gint // out

	cret = C.gint(gint)

	return cret
}

// FlowBox positions child widgets in sequence according to its orientation.
//
// For instance, with the horizontal orientation, the widgets will be arranged
// from left to right, starting a new row under the previous row when necessary.
// Reducing the width in this case will require more rows, so a larger height
// will be requested.
//
// Likewise, with the vertical orientation, the widgets will be arranged from
// top to bottom, starting a new column to the right when necessary. Reducing
// the height will require more columns, so a larger width will be requested.
//
// The size request of a GtkFlowBox alone may not be what you expect; if you
// need to be able to shrink it along both axes and dynamically reflow its
// children, you may have to wrap it in a ScrolledWindow to enable that.
//
// The children of a GtkFlowBox can be dynamically sorted and filtered.
//
// Although a GtkFlowBox must have only FlowBoxChild children, you can add any
// kind of widget to it via gtk_container_add(), and a GtkFlowBoxChild widget
// will automatically be inserted between the box and the widget.
//
// Also see ListBox.
//
// GtkFlowBox was added in GTK+ 3.12.
//
// CSS nodes
//
//    flowbox
//    ├── flowboxchild
//    │   ╰── <child>
//    ├── flowboxchild
//    │   ╰── <child>
//    ┊
//    ╰── [rubberband]
//
// GtkFlowBox uses a single CSS node with name flowbox. GtkFlowBoxChild uses a
// single CSS node with name flowboxchild. For rubberband selection, a subnode
// with name rubberband is used.
type FlowBox interface {
	Container

	// AsBuildable casts the class to the Buildable interface.
	AsBuildable() Buildable
	// AsOrientable casts the class to the Orientable interface.
	AsOrientable() Orientable

	// ActivateOnSingleClick returns whether children activate on single clicks.
	ActivateOnSingleClick() bool
	// ChildAtIndex gets the nth child in the @box.
	ChildAtIndex(idx int) FlowBoxChild
	// ChildAtPos gets the child in the (@x, @y) position.
	ChildAtPos(x int, y int) FlowBoxChild
	// ColumnSpacing gets the horizontal spacing.
	ColumnSpacing() uint
	// Homogeneous returns whether the box is homogeneous (all children are the
	// same size). See gtk_box_set_homogeneous().
	Homogeneous() bool
	// MaxChildrenPerLine gets the maximum number of children per line.
	MaxChildrenPerLine() uint
	// MinChildrenPerLine gets the minimum number of children per line.
	MinChildrenPerLine() uint
	// RowSpacing gets the vertical spacing.
	RowSpacing() uint
	// SelectionMode gets the selection mode of @box.
	SelectionMode() SelectionMode
	// InsertFlowBox inserts the @widget into @box at @position.
	//
	// If a sort function is set, the widget will actually be inserted at the
	// calculated position and this function has the same effect as
	// gtk_container_add().
	//
	// If @position is -1, or larger than the total number of children in the
	// @box, then the @widget will be appended to the end.
	InsertFlowBox(widget Widget, position int)
	// InvalidateFilterFlowBox updates the filtering for all children.
	//
	// Call this function when the result of the filter function on the @box is
	// changed due ot an external factor. For instance, this would be used if
	// the filter function just looked for a specific search term, and the entry
	// with the string has changed.
	InvalidateFilterFlowBox()
	// InvalidateSortFlowBox updates the sorting for all children.
	//
	// Call this when the result of the sort function on @box is changed due to
	// an external factor.
	InvalidateSortFlowBox()
	// SelectAllFlowBox: select all children of @box, if the selection mode
	// allows it.
	SelectAllFlowBox()
	// SelectChildFlowBox selects a single child of @box, if the selection mode
	// allows it.
	SelectChildFlowBox(child FlowBoxChild)
	// SelectedForeachFlowBox calls a function for each selected child.
	//
	// Note that the selection cannot be modified from within this function.
	SelectedForeachFlowBox(fn FlowBoxForeachFunc)
	// SetActivateOnSingleClickFlowBox: if @single is true, children will be
	// activated when you click on them, otherwise you need to double-click.
	SetActivateOnSingleClickFlowBox(single bool)
	// SetColumnSpacingFlowBox sets the horizontal space to add between
	// children. See the FlowBox:column-spacing property.
	SetColumnSpacingFlowBox(spacing uint)
	// SetHAdjustmentFlowBox hooks up an adjustment to focus handling in @box.
	// The adjustment is also used for autoscrolling during rubberband
	// selection. See gtk_scrolled_window_get_hadjustment() for a typical way of
	// obtaining the adjustment, and gtk_flow_box_set_vadjustment()for setting
	// the vertical adjustment.
	//
	// The adjustments have to be in pixel units and in the same coordinate
	// system as the allocation for immediate children of the box.
	SetHAdjustmentFlowBox(adjustment Adjustment)
	// SetHomogeneousFlowBox sets the FlowBox:homogeneous property of @box,
	// controlling whether or not all children of @box are given equal space in
	// the box.
	SetHomogeneousFlowBox(homogeneous bool)
	// SetMaxChildrenPerLineFlowBox sets the maximum number of children to
	// request and allocate space for in @box’s orientation.
	//
	// Setting the maximum number of children per line limits the overall
	// natural size request to be no more than @n_children children long in the
	// given orientation.
	SetMaxChildrenPerLineFlowBox(nChildren uint)
	// SetMinChildrenPerLineFlowBox sets the minimum number of children to line
	// up in @box’s orientation before flowing.
	SetMinChildrenPerLineFlowBox(nChildren uint)
	// SetRowSpacingFlowBox sets the vertical space to add between children. See
	// the FlowBox:row-spacing property.
	SetRowSpacingFlowBox(spacing uint)
	// SetSelectionModeFlowBox sets how selection works in @box. See
	// SelectionMode for details.
	SetSelectionModeFlowBox(mode SelectionMode)
	// SetVAdjustmentFlowBox hooks up an adjustment to focus handling in @box.
	// The adjustment is also used for autoscrolling during rubberband
	// selection. See gtk_scrolled_window_get_vadjustment() for a typical way of
	// obtaining the adjustment, and gtk_flow_box_set_hadjustment()for setting
	// the horizontal adjustment.
	//
	// The adjustments have to be in pixel units and in the same coordinate
	// system as the allocation for immediate children of the box.
	SetVAdjustmentFlowBox(adjustment Adjustment)
	// UnselectAllFlowBox: unselect all children of @box, if the selection mode
	// allows it.
	UnselectAllFlowBox()
	// UnselectChildFlowBox unselects a single child of @box, if the selection
	// mode allows it.
	UnselectChildFlowBox(child FlowBoxChild)
}

// flowBox implements the FlowBox class.
type flowBox struct {
	Container
}

// WrapFlowBox wraps a GObject to the right type. It is
// primarily used internally.
func WrapFlowBox(obj *externglib.Object) FlowBox {
	return flowBox{
		Container: WrapContainer(obj),
	}
}

func marshalFlowBox(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapFlowBox(obj), nil
}

// NewFlowBox creates a GtkFlowBox.
func NewFlowBox() FlowBox {
	var _cret *C.GtkWidget // in

	_cret = C.gtk_flow_box_new()

	var _flowBox FlowBox // out

	_flowBox = WrapFlowBox(externglib.Take(unsafe.Pointer(_cret)))

	return _flowBox
}

func (b flowBox) ActivateOnSingleClick() bool {
	var _arg0 *C.GtkFlowBox // out
	var _cret C.gboolean    // in

	_arg0 = (*C.GtkFlowBox)(unsafe.Pointer(b.Native()))

	_cret = C.gtk_flow_box_get_activate_on_single_click(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (b flowBox) ChildAtIndex(idx int) FlowBoxChild {
	var _arg0 *C.GtkFlowBox      // out
	var _arg1 C.gint             // out
	var _cret *C.GtkFlowBoxChild // in

	_arg0 = (*C.GtkFlowBox)(unsafe.Pointer(b.Native()))
	_arg1 = C.gint(idx)

	_cret = C.gtk_flow_box_get_child_at_index(_arg0, _arg1)

	var _flowBoxChild FlowBoxChild // out

	_flowBoxChild = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(FlowBoxChild)

	return _flowBoxChild
}

func (b flowBox) ChildAtPos(x int, y int) FlowBoxChild {
	var _arg0 *C.GtkFlowBox      // out
	var _arg1 C.gint             // out
	var _arg2 C.gint             // out
	var _cret *C.GtkFlowBoxChild // in

	_arg0 = (*C.GtkFlowBox)(unsafe.Pointer(b.Native()))
	_arg1 = C.gint(x)
	_arg2 = C.gint(y)

	_cret = C.gtk_flow_box_get_child_at_pos(_arg0, _arg1, _arg2)

	var _flowBoxChild FlowBoxChild // out

	_flowBoxChild = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(FlowBoxChild)

	return _flowBoxChild
}

func (b flowBox) ColumnSpacing() uint {
	var _arg0 *C.GtkFlowBox // out
	var _cret C.guint       // in

	_arg0 = (*C.GtkFlowBox)(unsafe.Pointer(b.Native()))

	_cret = C.gtk_flow_box_get_column_spacing(_arg0)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

func (b flowBox) Homogeneous() bool {
	var _arg0 *C.GtkFlowBox // out
	var _cret C.gboolean    // in

	_arg0 = (*C.GtkFlowBox)(unsafe.Pointer(b.Native()))

	_cret = C.gtk_flow_box_get_homogeneous(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (b flowBox) MaxChildrenPerLine() uint {
	var _arg0 *C.GtkFlowBox // out
	var _cret C.guint       // in

	_arg0 = (*C.GtkFlowBox)(unsafe.Pointer(b.Native()))

	_cret = C.gtk_flow_box_get_max_children_per_line(_arg0)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

func (b flowBox) MinChildrenPerLine() uint {
	var _arg0 *C.GtkFlowBox // out
	var _cret C.guint       // in

	_arg0 = (*C.GtkFlowBox)(unsafe.Pointer(b.Native()))

	_cret = C.gtk_flow_box_get_min_children_per_line(_arg0)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

func (b flowBox) RowSpacing() uint {
	var _arg0 *C.GtkFlowBox // out
	var _cret C.guint       // in

	_arg0 = (*C.GtkFlowBox)(unsafe.Pointer(b.Native()))

	_cret = C.gtk_flow_box_get_row_spacing(_arg0)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

func (b flowBox) SelectionMode() SelectionMode {
	var _arg0 *C.GtkFlowBox      // out
	var _cret C.GtkSelectionMode // in

	_arg0 = (*C.GtkFlowBox)(unsafe.Pointer(b.Native()))

	_cret = C.gtk_flow_box_get_selection_mode(_arg0)

	var _selectionMode SelectionMode // out

	_selectionMode = SelectionMode(_cret)

	return _selectionMode
}

func (b flowBox) InsertFlowBox(widget Widget, position int) {
	var _arg0 *C.GtkFlowBox // out
	var _arg1 *C.GtkWidget  // out
	var _arg2 C.gint        // out

	_arg0 = (*C.GtkFlowBox)(unsafe.Pointer(b.Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(widget.Native()))
	_arg2 = C.gint(position)

	C.gtk_flow_box_insert(_arg0, _arg1, _arg2)
}

func (b flowBox) InvalidateFilterFlowBox() {
	var _arg0 *C.GtkFlowBox // out

	_arg0 = (*C.GtkFlowBox)(unsafe.Pointer(b.Native()))

	C.gtk_flow_box_invalidate_filter(_arg0)
}

func (b flowBox) InvalidateSortFlowBox() {
	var _arg0 *C.GtkFlowBox // out

	_arg0 = (*C.GtkFlowBox)(unsafe.Pointer(b.Native()))

	C.gtk_flow_box_invalidate_sort(_arg0)
}

func (b flowBox) SelectAllFlowBox() {
	var _arg0 *C.GtkFlowBox // out

	_arg0 = (*C.GtkFlowBox)(unsafe.Pointer(b.Native()))

	C.gtk_flow_box_select_all(_arg0)
}

func (b flowBox) SelectChildFlowBox(child FlowBoxChild) {
	var _arg0 *C.GtkFlowBox      // out
	var _arg1 *C.GtkFlowBoxChild // out

	_arg0 = (*C.GtkFlowBox)(unsafe.Pointer(b.Native()))
	_arg1 = (*C.GtkFlowBoxChild)(unsafe.Pointer(child.Native()))

	C.gtk_flow_box_select_child(_arg0, _arg1)
}

func (b flowBox) SelectedForeachFlowBox(fn FlowBoxForeachFunc) {
	var _arg0 *C.GtkFlowBox           // out
	var _arg1 C.GtkFlowBoxForeachFunc // out
	var _arg2 C.gpointer

	_arg0 = (*C.GtkFlowBox)(unsafe.Pointer(b.Native()))
	_arg1 = (*[0]byte)(C.gotk4_FlowBoxForeachFunc)
	_arg2 = C.gpointer(box.Assign(fn))

	C.gtk_flow_box_selected_foreach(_arg0, _arg1, _arg2)
}

func (b flowBox) SetActivateOnSingleClickFlowBox(single bool) {
	var _arg0 *C.GtkFlowBox // out
	var _arg1 C.gboolean    // out

	_arg0 = (*C.GtkFlowBox)(unsafe.Pointer(b.Native()))
	if single {
		_arg1 = C.TRUE
	}

	C.gtk_flow_box_set_activate_on_single_click(_arg0, _arg1)
}

func (b flowBox) SetColumnSpacingFlowBox(spacing uint) {
	var _arg0 *C.GtkFlowBox // out
	var _arg1 C.guint       // out

	_arg0 = (*C.GtkFlowBox)(unsafe.Pointer(b.Native()))
	_arg1 = C.guint(spacing)

	C.gtk_flow_box_set_column_spacing(_arg0, _arg1)
}

func (b flowBox) SetHAdjustmentFlowBox(adjustment Adjustment) {
	var _arg0 *C.GtkFlowBox    // out
	var _arg1 *C.GtkAdjustment // out

	_arg0 = (*C.GtkFlowBox)(unsafe.Pointer(b.Native()))
	_arg1 = (*C.GtkAdjustment)(unsafe.Pointer(adjustment.Native()))

	C.gtk_flow_box_set_hadjustment(_arg0, _arg1)
}

func (b flowBox) SetHomogeneousFlowBox(homogeneous bool) {
	var _arg0 *C.GtkFlowBox // out
	var _arg1 C.gboolean    // out

	_arg0 = (*C.GtkFlowBox)(unsafe.Pointer(b.Native()))
	if homogeneous {
		_arg1 = C.TRUE
	}

	C.gtk_flow_box_set_homogeneous(_arg0, _arg1)
}

func (b flowBox) SetMaxChildrenPerLineFlowBox(nChildren uint) {
	var _arg0 *C.GtkFlowBox // out
	var _arg1 C.guint       // out

	_arg0 = (*C.GtkFlowBox)(unsafe.Pointer(b.Native()))
	_arg1 = C.guint(nChildren)

	C.gtk_flow_box_set_max_children_per_line(_arg0, _arg1)
}

func (b flowBox) SetMinChildrenPerLineFlowBox(nChildren uint) {
	var _arg0 *C.GtkFlowBox // out
	var _arg1 C.guint       // out

	_arg0 = (*C.GtkFlowBox)(unsafe.Pointer(b.Native()))
	_arg1 = C.guint(nChildren)

	C.gtk_flow_box_set_min_children_per_line(_arg0, _arg1)
}

func (b flowBox) SetRowSpacingFlowBox(spacing uint) {
	var _arg0 *C.GtkFlowBox // out
	var _arg1 C.guint       // out

	_arg0 = (*C.GtkFlowBox)(unsafe.Pointer(b.Native()))
	_arg1 = C.guint(spacing)

	C.gtk_flow_box_set_row_spacing(_arg0, _arg1)
}

func (b flowBox) SetSelectionModeFlowBox(mode SelectionMode) {
	var _arg0 *C.GtkFlowBox      // out
	var _arg1 C.GtkSelectionMode // out

	_arg0 = (*C.GtkFlowBox)(unsafe.Pointer(b.Native()))
	_arg1 = C.GtkSelectionMode(mode)

	C.gtk_flow_box_set_selection_mode(_arg0, _arg1)
}

func (b flowBox) SetVAdjustmentFlowBox(adjustment Adjustment) {
	var _arg0 *C.GtkFlowBox    // out
	var _arg1 *C.GtkAdjustment // out

	_arg0 = (*C.GtkFlowBox)(unsafe.Pointer(b.Native()))
	_arg1 = (*C.GtkAdjustment)(unsafe.Pointer(adjustment.Native()))

	C.gtk_flow_box_set_vadjustment(_arg0, _arg1)
}

func (b flowBox) UnselectAllFlowBox() {
	var _arg0 *C.GtkFlowBox // out

	_arg0 = (*C.GtkFlowBox)(unsafe.Pointer(b.Native()))

	C.gtk_flow_box_unselect_all(_arg0)
}

func (b flowBox) UnselectChildFlowBox(child FlowBoxChild) {
	var _arg0 *C.GtkFlowBox      // out
	var _arg1 *C.GtkFlowBoxChild // out

	_arg0 = (*C.GtkFlowBox)(unsafe.Pointer(b.Native()))
	_arg1 = (*C.GtkFlowBoxChild)(unsafe.Pointer(child.Native()))

	C.gtk_flow_box_unselect_child(_arg0, _arg1)
}

func (f flowBox) AsBuildable() Buildable {
	return WrapBuildable(gextras.InternObject(f))
}

func (f flowBox) AsOrientable() Orientable {
	return WrapOrientable(gextras.InternObject(f))
}

type FlowBoxChild interface {
	Bin

	// AsBuildable casts the class to the Buildable interface.
	AsBuildable() Buildable

	// ChangedFlowBoxChild marks @child as changed, causing any state that
	// depends on this to be updated. This affects sorting and filtering.
	//
	// Note that calls to this method must be in sync with the data used for the
	// sorting and filtering functions. For instance, if the list is mirroring
	// some external data set, and *two* children changed in the external data
	// set when you call gtk_flow_box_child_changed() on the first child, the
	// sort function must only read the new data for the first of the two
	// changed children, otherwise the resorting of the children will be wrong.
	//
	// This generally means that if you don’t fully control the data model, you
	// have to duplicate the data that affects the sorting and filtering
	// functions into the widgets themselves. Another alternative is to call
	// gtk_flow_box_invalidate_sort() on any model change, but that is more
	// expensive.
	ChangedFlowBoxChild()
	// Index gets the current index of the @child in its FlowBox container.
	Index() int
	// IsSelectedFlowBoxChild returns whether the @child is currently selected
	// in its FlowBox container.
	IsSelectedFlowBoxChild() bool
}

// flowBoxChild implements the FlowBoxChild class.
type flowBoxChild struct {
	Bin
}

// WrapFlowBoxChild wraps a GObject to the right type. It is
// primarily used internally.
func WrapFlowBoxChild(obj *externglib.Object) FlowBoxChild {
	return flowBoxChild{
		Bin: WrapBin(obj),
	}
}

func marshalFlowBoxChild(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapFlowBoxChild(obj), nil
}

// NewFlowBoxChild creates a new FlowBoxChild, to be used as a child of a
// FlowBox.
func NewFlowBoxChild() FlowBoxChild {
	var _cret *C.GtkWidget // in

	_cret = C.gtk_flow_box_child_new()

	var _flowBoxChild FlowBoxChild // out

	_flowBoxChild = WrapFlowBoxChild(externglib.Take(unsafe.Pointer(_cret)))

	return _flowBoxChild
}

func (c flowBoxChild) ChangedFlowBoxChild() {
	var _arg0 *C.GtkFlowBoxChild // out

	_arg0 = (*C.GtkFlowBoxChild)(unsafe.Pointer(c.Native()))

	C.gtk_flow_box_child_changed(_arg0)
}

func (c flowBoxChild) Index() int {
	var _arg0 *C.GtkFlowBoxChild // out
	var _cret C.gint             // in

	_arg0 = (*C.GtkFlowBoxChild)(unsafe.Pointer(c.Native()))

	_cret = C.gtk_flow_box_child_get_index(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (c flowBoxChild) IsSelectedFlowBoxChild() bool {
	var _arg0 *C.GtkFlowBoxChild // out
	var _cret C.gboolean         // in

	_arg0 = (*C.GtkFlowBoxChild)(unsafe.Pointer(c.Native()))

	_cret = C.gtk_flow_box_child_is_selected(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (f flowBoxChild) AsBuildable() Buildable {
	return WrapBuildable(gextras.InternObject(f))
}
