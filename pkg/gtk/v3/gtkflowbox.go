// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/internal/box"
	"github.com/diamondburned/gotk4/internal/gextras"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_flow_box_get_type()), F: marshalFlowBox},
		{T: externglib.Type(C.gtk_flow_box_child_get_type()), F: marshalFlowBoxChild},
	})
}

// FlowBoxCreateWidgetFunc: called for flow boxes that are bound to a Model with
// gtk_flow_box_bind_model() for each item that gets added to the model.
type FlowBoxCreateWidgetFunc func() (widget Widget)

//export gotk4_FlowBoxCreateWidgetFunc
func gotk4_FlowBoxCreateWidgetFunc(arg0 C.gpointer, arg1 C.gpointer) *C.GtkWidget {
	v := box.Get(uintptr(arg1))
	if v == nil {
		panic(`callback not found`)
	}

	fn := v.(FlowBoxCreateWidgetFunc)
	fn(widget)

	cret = (*C.GtkWidget)(unsafe.Pointer(widget.Native()))
}

// FlowBoxFilterFunc: a function that will be called whenrever a child changes
// or is added. It lets you control if the child should be visible or not.
type FlowBoxFilterFunc func() (ok bool)

//export gotk4_FlowBoxFilterFunc
func gotk4_FlowBoxFilterFunc(arg0 *C.GtkFlowBoxChild, arg1 C.gpointer) C.gboolean {
	v := box.Get(uintptr(arg1))
	if v == nil {
		panic(`callback not found`)
	}

	fn := v.(FlowBoxFilterFunc)
	fn(ok)

	if ok {
		cret = C.gboolean(1)
	}
}

// FlowBoxForeachFunc: a function used by gtk_flow_box_selected_foreach(). It
// will be called on every selected child of the @box.
type FlowBoxForeachFunc func()

//export gotk4_FlowBoxForeachFunc
func gotk4_FlowBoxForeachFunc(arg0 *C.GtkFlowBox, arg1 *C.GtkFlowBoxChild, arg2 C.gpointer) {
	v := box.Get(uintptr(arg2))
	if v == nil {
		panic(`callback not found`)
	}

	fn := v.(FlowBoxForeachFunc)
	fn()
}

// FlowBoxSortFunc: a function to compare two children to determine which should
// come first.
type FlowBoxSortFunc func() (gint int)

//export gotk4_FlowBoxSortFunc
func gotk4_FlowBoxSortFunc(arg0 *C.GtkFlowBoxChild, arg1 *C.GtkFlowBoxChild, arg2 C.gpointer) C.gint {
	v := box.Get(uintptr(arg2))
	if v == nil {
		panic(`callback not found`)
	}

	fn := v.(FlowBoxSortFunc)
	fn(gint)

	cret = C.gint(gint)
}

// FlowBox: a GtkFlowBox positions child widgets in sequence according to its
// orientation.
//
// For instance, with the horizontal orientation, the widgets will be arranged
// from left to right, starting a new row under the previous row when necessary.
// Reducing the width in this case will require more rows, so a larger height
// will be requested.
//
// Likewise, with the vertical orientation, the widgets will be arranged from
// top to bottom, starting a new column to the right when necessary. Reducing
// the height will require more columns, so a larger width will be requested.
//
// The size request of a GtkFlowBox alone may not be what you expect; if you
// need to be able to shrink it along both axes and dynamically reflow its
// children, you may have to wrap it in a ScrolledWindow to enable that.
//
// The children of a GtkFlowBox can be dynamically sorted and filtered.
//
// Although a GtkFlowBox must have only FlowBoxChild children, you can add any
// kind of widget to it via gtk_container_add(), and a GtkFlowBoxChild widget
// will automatically be inserted between the box and the widget.
//
// Also see ListBox.
//
// GtkFlowBox was added in GTK+ 3.12.
//
// CSS nodes
//
//    flowbox
//    ├── flowboxchild
//    │   ╰── <child>
//    ├── flowboxchild
//    │   ╰── <child>
//    ┊
//    ╰── [rubberband]
//
// GtkFlowBox uses a single CSS node with name flowbox. GtkFlowBoxChild uses a
// single CSS node with name flowboxchild. For rubberband selection, a subnode
// with name rubberband is used.
type FlowBox interface {
	Container
	Buildable
	Orientable

	// BindModel binds @model to @box.
	//
	// If @box was already bound to a model, that previous binding is destroyed.
	//
	// The contents of @box are cleared and then filled with widgets that
	// represent items from @model. @box is updated whenever @model changes. If
	// @model is nil, @box is left empty.
	//
	// It is undefined to add or remove widgets directly (for example, with
	// gtk_flow_box_insert() or gtk_container_add()) while @box is bound to a
	// model.
	//
	// Note that using a model is incompatible with the filtering and sorting
	// functionality in GtkFlowBox. When using a model, filtering and sorting
	// should be implemented by the model.
	BindModel()
	// ActivateOnSingleClick returns whether children activate on single clicks.
	ActivateOnSingleClick() bool
	// ChildAtIndex gets the nth child in the @box.
	ChildAtIndex(idx int) FlowBoxChild
	// ChildAtPos gets the child in the (@x, @y) position.
	ChildAtPos(x int, y int) FlowBoxChild
	// ColumnSpacing gets the horizontal spacing.
	ColumnSpacing() uint
	// Homogeneous returns whether the box is homogeneous (all children are the
	// same size). See gtk_box_set_homogeneous().
	Homogeneous() bool
	// MaxChildrenPerLine gets the maximum number of children per line.
	MaxChildrenPerLine() uint
	// MinChildrenPerLine gets the minimum number of children per line.
	MinChildrenPerLine() uint
	// RowSpacing gets the vertical spacing.
	RowSpacing() uint
	// SelectedChildren creates a list of all selected children.
	SelectedChildren() *glib.List
	// SelectionMode gets the selection mode of @box.
	SelectionMode() SelectionMode
	// Insert inserts the @widget into @box at @position.
	//
	// If a sort function is set, the widget will actually be inserted at the
	// calculated position and this function has the same effect as
	// gtk_container_add().
	//
	// If @position is -1, or larger than the total number of children in the
	// @box, then the @widget will be appended to the end.
	Insert(widget Widget, position int)
	// InvalidateFilter updates the filtering for all children.
	//
	// Call this function when the result of the filter function on the @box is
	// changed due ot an external factor. For instance, this would be used if
	// the filter function just looked for a specific search term, and the entry
	// with the string has changed.
	InvalidateFilter()
	// InvalidateSort updates the sorting for all children.
	//
	// Call this when the result of the sort function on @box is changed due to
	// an external factor.
	InvalidateSort()
	// SelectAll: select all children of @box, if the selection mode allows it.
	SelectAll()
	// SelectChild selects a single child of @box, if the selection mode allows
	// it.
	SelectChild(child FlowBoxChild)
	// SelectedForeach calls a function for each selected child.
	//
	// Note that the selection cannot be modified from within this function.
	SelectedForeach()
	// SetActivateOnSingleClick: if @single is true, children will be activated
	// when you click on them, otherwise you need to double-click.
	SetActivateOnSingleClick(single bool)
	// SetColumnSpacing sets the horizontal space to add between children. See
	// the FlowBox:column-spacing property.
	SetColumnSpacing(spacing uint)
	// SetFilterFunc: by setting a filter function on the @box one can decide
	// dynamically which of the children to show. For instance, to implement a
	// search function that only shows the children matching the search terms.
	//
	// The @filter_func will be called for each child after the call, and it
	// will continue to be called each time a child changes (via
	// gtk_flow_box_child_changed()) or when gtk_flow_box_invalidate_filter() is
	// called.
	//
	// Note that using a filter function is incompatible with using a model (see
	// gtk_flow_box_bind_model()).
	SetFilterFunc()
	// SetHAdjustment hooks up an adjustment to focus handling in @box. The
	// adjustment is also used for autoscrolling during rubberband selection.
	// See gtk_scrolled_window_get_hadjustment() for a typical way of obtaining
	// the adjustment, and gtk_flow_box_set_vadjustment()for setting the
	// vertical adjustment.
	//
	// The adjustments have to be in pixel units and in the same coordinate
	// system as the allocation for immediate children of the box.
	SetHAdjustment(adjustment Adjustment)
	// SetHomogeneous sets the FlowBox:homogeneous property of @box, controlling
	// whether or not all children of @box are given equal space in the box.
	SetHomogeneous(homogeneous bool)
	// SetMaxChildrenPerLine sets the maximum number of children to request and
	// allocate space for in @box’s orientation.
	//
	// Setting the maximum number of children per line limits the overall
	// natural size request to be no more than @n_children children long in the
	// given orientation.
	SetMaxChildrenPerLine(nChildren uint)
	// SetMinChildrenPerLine sets the minimum number of children to line up in
	// @box’s orientation before flowing.
	SetMinChildrenPerLine(nChildren uint)
	// SetRowSpacing sets the vertical space to add between children. See the
	// FlowBox:row-spacing property.
	SetRowSpacing(spacing uint)
	// SetSelectionMode sets how selection works in @box. See SelectionMode for
	// details.
	SetSelectionMode(mode SelectionMode)
	// SetSortFunc: by setting a sort function on the @box, one can dynamically
	// reorder the children of the box, based on the contents of the children.
	//
	// The @sort_func will be called for each child after the call, and will
	// continue to be called each time a child changes (via
	// gtk_flow_box_child_changed()) and when gtk_flow_box_invalidate_sort() is
	// called.
	//
	// Note that using a sort function is incompatible with using a model (see
	// gtk_flow_box_bind_model()).
	SetSortFunc()
	// SetVAdjustment hooks up an adjustment to focus handling in @box. The
	// adjustment is also used for autoscrolling during rubberband selection.
	// See gtk_scrolled_window_get_vadjustment() for a typical way of obtaining
	// the adjustment, and gtk_flow_box_set_hadjustment()for setting the
	// horizontal adjustment.
	//
	// The adjustments have to be in pixel units and in the same coordinate
	// system as the allocation for immediate children of the box.
	SetVAdjustment(adjustment Adjustment)
	// UnselectAll: unselect all children of @box, if the selection mode allows
	// it.
	UnselectAll()
	// UnselectChild unselects a single child of @box, if the selection mode
	// allows it.
	UnselectChild(child FlowBoxChild)
}

// flowBox implements the FlowBox interface.
type flowBox struct {
	Container
	Buildable
	Orientable
}

var _ FlowBox = (*flowBox)(nil)

// WrapFlowBox wraps a GObject to the right type. It is
// primarily used internally.
func WrapFlowBox(obj *externglib.Object) FlowBox {
	return FlowBox{
		Container:  WrapContainer(obj),
		Buildable:  WrapBuildable(obj),
		Orientable: WrapOrientable(obj),
	}
}

func marshalFlowBox(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapFlowBox(obj), nil
}

// NewFlowBox constructs a class FlowBox.
func NewFlowBox() FlowBox {
	var cret C.GtkFlowBox
	var goret FlowBox

	cret = C.gtk_flow_box_new()

	goret = gextras.CastObject(externglib.Take(unsafe.Pointer(cret.Native()))).(FlowBox)

	return goret
}

// BindModel binds @model to @box.
//
// If @box was already bound to a model, that previous binding is destroyed.
//
// The contents of @box are cleared and then filled with widgets that
// represent items from @model. @box is updated whenever @model changes. If
// @model is nil, @box is left empty.
//
// It is undefined to add or remove widgets directly (for example, with
// gtk_flow_box_insert() or gtk_container_add()) while @box is bound to a
// model.
//
// Note that using a model is incompatible with the filtering and sorting
// functionality in GtkFlowBox. When using a model, filtering and sorting
// should be implemented by the model.
func (b flowBox) BindModel() {
	var arg0 *C.GtkFlowBox

	arg0 = (*C.GtkFlowBox)(unsafe.Pointer(b.Native()))

	C.gtk_flow_box_bind_model(arg0, arg1, arg2, arg3, arg4)
}

// ActivateOnSingleClick returns whether children activate on single clicks.
func (b flowBox) ActivateOnSingleClick() bool {
	var arg0 *C.GtkFlowBox

	arg0 = (*C.GtkFlowBox)(unsafe.Pointer(b.Native()))

	var cret C.gboolean
	var goret bool

	cret = C.gtk_flow_box_get_activate_on_single_click(arg0)

	if cret {
		goret = true
	}

	return goret
}

// ChildAtIndex gets the nth child in the @box.
func (b flowBox) ChildAtIndex(idx int) FlowBoxChild {
	var arg0 *C.GtkFlowBox
	var arg1 C.gint

	arg0 = (*C.GtkFlowBox)(unsafe.Pointer(b.Native()))
	arg1 = C.gint(idx)

	var cret *C.GtkFlowBoxChild
	var goret FlowBoxChild

	cret = C.gtk_flow_box_get_child_at_index(arg0, arg1)

	goret = gextras.CastObject(externglib.Take(unsafe.Pointer(cret.Native()))).(FlowBoxChild)

	return goret
}

// ChildAtPos gets the child in the (@x, @y) position.
func (b flowBox) ChildAtPos(x int, y int) FlowBoxChild {
	var arg0 *C.GtkFlowBox
	var arg1 C.gint
	var arg2 C.gint

	arg0 = (*C.GtkFlowBox)(unsafe.Pointer(b.Native()))
	arg1 = C.gint(x)
	arg2 = C.gint(y)

	var cret *C.GtkFlowBoxChild
	var goret FlowBoxChild

	cret = C.gtk_flow_box_get_child_at_pos(arg0, arg1, arg2)

	goret = gextras.CastObject(externglib.Take(unsafe.Pointer(cret.Native()))).(FlowBoxChild)

	return goret
}

// ColumnSpacing gets the horizontal spacing.
func (b flowBox) ColumnSpacing() uint {
	var arg0 *C.GtkFlowBox

	arg0 = (*C.GtkFlowBox)(unsafe.Pointer(b.Native()))

	var cret C.guint
	var goret uint

	cret = C.gtk_flow_box_get_column_spacing(arg0)

	goret = uint(cret)

	return goret
}

// Homogeneous returns whether the box is homogeneous (all children are the
// same size). See gtk_box_set_homogeneous().
func (b flowBox) Homogeneous() bool {
	var arg0 *C.GtkFlowBox

	arg0 = (*C.GtkFlowBox)(unsafe.Pointer(b.Native()))

	var cret C.gboolean
	var goret bool

	cret = C.gtk_flow_box_get_homogeneous(arg0)

	if cret {
		goret = true
	}

	return goret
}

// MaxChildrenPerLine gets the maximum number of children per line.
func (b flowBox) MaxChildrenPerLine() uint {
	var arg0 *C.GtkFlowBox

	arg0 = (*C.GtkFlowBox)(unsafe.Pointer(b.Native()))

	var cret C.guint
	var goret uint

	cret = C.gtk_flow_box_get_max_children_per_line(arg0)

	goret = uint(cret)

	return goret
}

// MinChildrenPerLine gets the minimum number of children per line.
func (b flowBox) MinChildrenPerLine() uint {
	var arg0 *C.GtkFlowBox

	arg0 = (*C.GtkFlowBox)(unsafe.Pointer(b.Native()))

	var cret C.guint
	var goret uint

	cret = C.gtk_flow_box_get_min_children_per_line(arg0)

	goret = uint(cret)

	return goret
}

// RowSpacing gets the vertical spacing.
func (b flowBox) RowSpacing() uint {
	var arg0 *C.GtkFlowBox

	arg0 = (*C.GtkFlowBox)(unsafe.Pointer(b.Native()))

	var cret C.guint
	var goret uint

	cret = C.gtk_flow_box_get_row_spacing(arg0)

	goret = uint(cret)

	return goret
}

// SelectedChildren creates a list of all selected children.
func (b flowBox) SelectedChildren() *glib.List {
	var arg0 *C.GtkFlowBox

	arg0 = (*C.GtkFlowBox)(unsafe.Pointer(b.Native()))

	cret := new(C.GList)
	var goret *glib.List

	cret = C.gtk_flow_box_get_selected_children(arg0)

	goret = glib.WrapList(unsafe.Pointer(cret))
	runtime.SetFinalizer(goret, func(v *glib.List) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return goret
}

// SelectionMode gets the selection mode of @box.
func (b flowBox) SelectionMode() SelectionMode {
	var arg0 *C.GtkFlowBox

	arg0 = (*C.GtkFlowBox)(unsafe.Pointer(b.Native()))

	var cret C.GtkSelectionMode
	var goret SelectionMode

	cret = C.gtk_flow_box_get_selection_mode(arg0)

	goret = SelectionMode(cret)

	return goret
}

// Insert inserts the @widget into @box at @position.
//
// If a sort function is set, the widget will actually be inserted at the
// calculated position and this function has the same effect as
// gtk_container_add().
//
// If @position is -1, or larger than the total number of children in the
// @box, then the @widget will be appended to the end.
func (b flowBox) Insert(widget Widget, position int) {
	var arg0 *C.GtkFlowBox
	var arg1 *C.GtkWidget
	var arg2 C.gint

	arg0 = (*C.GtkFlowBox)(unsafe.Pointer(b.Native()))
	arg1 = (*C.GtkWidget)(unsafe.Pointer(widget.Native()))
	arg2 = C.gint(position)

	C.gtk_flow_box_insert(arg0, arg1, arg2)
}

// InvalidateFilter updates the filtering for all children.
//
// Call this function when the result of the filter function on the @box is
// changed due ot an external factor. For instance, this would be used if
// the filter function just looked for a specific search term, and the entry
// with the string has changed.
func (b flowBox) InvalidateFilter() {
	var arg0 *C.GtkFlowBox

	arg0 = (*C.GtkFlowBox)(unsafe.Pointer(b.Native()))

	C.gtk_flow_box_invalidate_filter(arg0)
}

// InvalidateSort updates the sorting for all children.
//
// Call this when the result of the sort function on @box is changed due to
// an external factor.
func (b flowBox) InvalidateSort() {
	var arg0 *C.GtkFlowBox

	arg0 = (*C.GtkFlowBox)(unsafe.Pointer(b.Native()))

	C.gtk_flow_box_invalidate_sort(arg0)
}

// SelectAll: select all children of @box, if the selection mode allows it.
func (b flowBox) SelectAll() {
	var arg0 *C.GtkFlowBox

	arg0 = (*C.GtkFlowBox)(unsafe.Pointer(b.Native()))

	C.gtk_flow_box_select_all(arg0)
}

// SelectChild selects a single child of @box, if the selection mode allows
// it.
func (b flowBox) SelectChild(child FlowBoxChild) {
	var arg0 *C.GtkFlowBox
	var arg1 *C.GtkFlowBoxChild

	arg0 = (*C.GtkFlowBox)(unsafe.Pointer(b.Native()))
	arg1 = (*C.GtkFlowBoxChild)(unsafe.Pointer(child.Native()))

	C.gtk_flow_box_select_child(arg0, arg1)
}

// SelectedForeach calls a function for each selected child.
//
// Note that the selection cannot be modified from within this function.
func (b flowBox) SelectedForeach() {
	var arg0 *C.GtkFlowBox

	arg0 = (*C.GtkFlowBox)(unsafe.Pointer(b.Native()))

	C.gtk_flow_box_selected_foreach(arg0, arg1, arg2)
}

// SetActivateOnSingleClick: if @single is true, children will be activated
// when you click on them, otherwise you need to double-click.
func (b flowBox) SetActivateOnSingleClick(single bool) {
	var arg0 *C.GtkFlowBox
	var arg1 C.gboolean

	arg0 = (*C.GtkFlowBox)(unsafe.Pointer(b.Native()))
	if single {
		arg1 = C.gboolean(1)
	}

	C.gtk_flow_box_set_activate_on_single_click(arg0, arg1)
}

// SetColumnSpacing sets the horizontal space to add between children. See
// the FlowBox:column-spacing property.
func (b flowBox) SetColumnSpacing(spacing uint) {
	var arg0 *C.GtkFlowBox
	var arg1 C.guint

	arg0 = (*C.GtkFlowBox)(unsafe.Pointer(b.Native()))
	arg1 = C.guint(spacing)

	C.gtk_flow_box_set_column_spacing(arg0, arg1)
}

// SetFilterFunc: by setting a filter function on the @box one can decide
// dynamically which of the children to show. For instance, to implement a
// search function that only shows the children matching the search terms.
//
// The @filter_func will be called for each child after the call, and it
// will continue to be called each time a child changes (via
// gtk_flow_box_child_changed()) or when gtk_flow_box_invalidate_filter() is
// called.
//
// Note that using a filter function is incompatible with using a model (see
// gtk_flow_box_bind_model()).
func (b flowBox) SetFilterFunc() {
	var arg0 *C.GtkFlowBox

	arg0 = (*C.GtkFlowBox)(unsafe.Pointer(b.Native()))

	C.gtk_flow_box_set_filter_func(arg0, arg1, arg2, arg3)
}

// SetHAdjustment hooks up an adjustment to focus handling in @box. The
// adjustment is also used for autoscrolling during rubberband selection.
// See gtk_scrolled_window_get_hadjustment() for a typical way of obtaining
// the adjustment, and gtk_flow_box_set_vadjustment()for setting the
// vertical adjustment.
//
// The adjustments have to be in pixel units and in the same coordinate
// system as the allocation for immediate children of the box.
func (b flowBox) SetHAdjustment(adjustment Adjustment) {
	var arg0 *C.GtkFlowBox
	var arg1 *C.GtkAdjustment

	arg0 = (*C.GtkFlowBox)(unsafe.Pointer(b.Native()))
	arg1 = (*C.GtkAdjustment)(unsafe.Pointer(adjustment.Native()))

	C.gtk_flow_box_set_hadjustment(arg0, arg1)
}

// SetHomogeneous sets the FlowBox:homogeneous property of @box, controlling
// whether or not all children of @box are given equal space in the box.
func (b flowBox) SetHomogeneous(homogeneous bool) {
	var arg0 *C.GtkFlowBox
	var arg1 C.gboolean

	arg0 = (*C.GtkFlowBox)(unsafe.Pointer(b.Native()))
	if homogeneous {
		arg1 = C.gboolean(1)
	}

	C.gtk_flow_box_set_homogeneous(arg0, arg1)
}

// SetMaxChildrenPerLine sets the maximum number of children to request and
// allocate space for in @box’s orientation.
//
// Setting the maximum number of children per line limits the overall
// natural size request to be no more than @n_children children long in the
// given orientation.
func (b flowBox) SetMaxChildrenPerLine(nChildren uint) {
	var arg0 *C.GtkFlowBox
	var arg1 C.guint

	arg0 = (*C.GtkFlowBox)(unsafe.Pointer(b.Native()))
	arg1 = C.guint(nChildren)

	C.gtk_flow_box_set_max_children_per_line(arg0, arg1)
}

// SetMinChildrenPerLine sets the minimum number of children to line up in
// @box’s orientation before flowing.
func (b flowBox) SetMinChildrenPerLine(nChildren uint) {
	var arg0 *C.GtkFlowBox
	var arg1 C.guint

	arg0 = (*C.GtkFlowBox)(unsafe.Pointer(b.Native()))
	arg1 = C.guint(nChildren)

	C.gtk_flow_box_set_min_children_per_line(arg0, arg1)
}

// SetRowSpacing sets the vertical space to add between children. See the
// FlowBox:row-spacing property.
func (b flowBox) SetRowSpacing(spacing uint) {
	var arg0 *C.GtkFlowBox
	var arg1 C.guint

	arg0 = (*C.GtkFlowBox)(unsafe.Pointer(b.Native()))
	arg1 = C.guint(spacing)

	C.gtk_flow_box_set_row_spacing(arg0, arg1)
}

// SetSelectionMode sets how selection works in @box. See SelectionMode for
// details.
func (b flowBox) SetSelectionMode(mode SelectionMode) {
	var arg0 *C.GtkFlowBox
	var arg1 C.GtkSelectionMode

	arg0 = (*C.GtkFlowBox)(unsafe.Pointer(b.Native()))
	arg1 = (C.GtkSelectionMode)(mode)

	C.gtk_flow_box_set_selection_mode(arg0, arg1)
}

// SetSortFunc: by setting a sort function on the @box, one can dynamically
// reorder the children of the box, based on the contents of the children.
//
// The @sort_func will be called for each child after the call, and will
// continue to be called each time a child changes (via
// gtk_flow_box_child_changed()) and when gtk_flow_box_invalidate_sort() is
// called.
//
// Note that using a sort function is incompatible with using a model (see
// gtk_flow_box_bind_model()).
func (b flowBox) SetSortFunc() {
	var arg0 *C.GtkFlowBox

	arg0 = (*C.GtkFlowBox)(unsafe.Pointer(b.Native()))

	C.gtk_flow_box_set_sort_func(arg0, arg1, arg2, arg3)
}

// SetVAdjustment hooks up an adjustment to focus handling in @box. The
// adjustment is also used for autoscrolling during rubberband selection.
// See gtk_scrolled_window_get_vadjustment() for a typical way of obtaining
// the adjustment, and gtk_flow_box_set_hadjustment()for setting the
// horizontal adjustment.
//
// The adjustments have to be in pixel units and in the same coordinate
// system as the allocation for immediate children of the box.
func (b flowBox) SetVAdjustment(adjustment Adjustment) {
	var arg0 *C.GtkFlowBox
	var arg1 *C.GtkAdjustment

	arg0 = (*C.GtkFlowBox)(unsafe.Pointer(b.Native()))
	arg1 = (*C.GtkAdjustment)(unsafe.Pointer(adjustment.Native()))

	C.gtk_flow_box_set_vadjustment(arg0, arg1)
}

// UnselectAll: unselect all children of @box, if the selection mode allows
// it.
func (b flowBox) UnselectAll() {
	var arg0 *C.GtkFlowBox

	arg0 = (*C.GtkFlowBox)(unsafe.Pointer(b.Native()))

	C.gtk_flow_box_unselect_all(arg0)
}

// UnselectChild unselects a single child of @box, if the selection mode
// allows it.
func (b flowBox) UnselectChild(child FlowBoxChild) {
	var arg0 *C.GtkFlowBox
	var arg1 *C.GtkFlowBoxChild

	arg0 = (*C.GtkFlowBox)(unsafe.Pointer(b.Native()))
	arg1 = (*C.GtkFlowBoxChild)(unsafe.Pointer(child.Native()))

	C.gtk_flow_box_unselect_child(arg0, arg1)
}

type FlowBoxChild interface {
	Bin
	Buildable

	// Changed marks @child as changed, causing any state that depends on this
	// to be updated. This affects sorting and filtering.
	//
	// Note that calls to this method must be in sync with the data used for the
	// sorting and filtering functions. For instance, if the list is mirroring
	// some external data set, and *two* children changed in the external data
	// set when you call gtk_flow_box_child_changed() on the first child, the
	// sort function must only read the new data for the first of the two
	// changed children, otherwise the resorting of the children will be wrong.
	//
	// This generally means that if you don’t fully control the data model, you
	// have to duplicate the data that affects the sorting and filtering
	// functions into the widgets themselves. Another alternative is to call
	// gtk_flow_box_invalidate_sort() on any model change, but that is more
	// expensive.
	Changed()
	// Index gets the current index of the @child in its FlowBox container.
	Index() int
	// IsSelected returns whether the @child is currently selected in its
	// FlowBox container.
	IsSelected() bool
}

// flowBoxChild implements the FlowBoxChild interface.
type flowBoxChild struct {
	Bin
	Buildable
}

var _ FlowBoxChild = (*flowBoxChild)(nil)

// WrapFlowBoxChild wraps a GObject to the right type. It is
// primarily used internally.
func WrapFlowBoxChild(obj *externglib.Object) FlowBoxChild {
	return FlowBoxChild{
		Bin:       WrapBin(obj),
		Buildable: WrapBuildable(obj),
	}
}

func marshalFlowBoxChild(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapFlowBoxChild(obj), nil
}

// NewFlowBoxChild constructs a class FlowBoxChild.
func NewFlowBoxChild() FlowBoxChild {
	var cret C.GtkFlowBoxChild
	var goret FlowBoxChild

	cret = C.gtk_flow_box_child_new()

	goret = gextras.CastObject(externglib.Take(unsafe.Pointer(cret.Native()))).(FlowBoxChild)

	return goret
}

// Changed marks @child as changed, causing any state that depends on this
// to be updated. This affects sorting and filtering.
//
// Note that calls to this method must be in sync with the data used for the
// sorting and filtering functions. For instance, if the list is mirroring
// some external data set, and *two* children changed in the external data
// set when you call gtk_flow_box_child_changed() on the first child, the
// sort function must only read the new data for the first of the two
// changed children, otherwise the resorting of the children will be wrong.
//
// This generally means that if you don’t fully control the data model, you
// have to duplicate the data that affects the sorting and filtering
// functions into the widgets themselves. Another alternative is to call
// gtk_flow_box_invalidate_sort() on any model change, but that is more
// expensive.
func (c flowBoxChild) Changed() {
	var arg0 *C.GtkFlowBoxChild

	arg0 = (*C.GtkFlowBoxChild)(unsafe.Pointer(c.Native()))

	C.gtk_flow_box_child_changed(arg0)
}

// Index gets the current index of the @child in its FlowBox container.
func (c flowBoxChild) Index() int {
	var arg0 *C.GtkFlowBoxChild

	arg0 = (*C.GtkFlowBoxChild)(unsafe.Pointer(c.Native()))

	var cret C.gint
	var goret int

	cret = C.gtk_flow_box_child_get_index(arg0)

	goret = int(cret)

	return goret
}

// IsSelected returns whether the @child is currently selected in its
// FlowBox container.
func (c flowBoxChild) IsSelected() bool {
	var arg0 *C.GtkFlowBoxChild

	arg0 = (*C.GtkFlowBoxChild)(unsafe.Pointer(c.Native()))

	var cret C.gboolean
	var goret bool

	cret = C.gtk_flow_box_child_is_selected(arg0)

	if cret {
		goret = true
	}

	return goret
}
