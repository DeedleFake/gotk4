// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/box"
	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_recent_chooser_error_get_type()), F: marshalRecentChooserError},
		{T: externglib.Type(C.gtk_recent_sort_type_get_type()), F: marshalRecentSortType},
		{T: externglib.Type(C.gtk_recent_chooser_get_type()), F: marshalRecentChooser},
	})
}

// RecentChooserError: these identify the various errors that can occur while
// calling RecentChooser functions.
type RecentChooserError int

const (
	// NotFound indicates that a file does not exist
	RecentChooserErrorNotFound RecentChooserError = 0
	// InvalidURI indicates a malformed URI
	RecentChooserErrorInvalidURI RecentChooserError = 1
)

func marshalRecentChooserError(p uintptr) (interface{}, error) {
	return RecentChooserError(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// RecentSortType: used to specify the sorting method to be applyed to the
// recently used resource list.
type RecentSortType int

const (
	// none: do not sort the returned list of recently used resources.
	RecentSortTypeNone RecentSortType = 0
	// mru: sort the returned list with the most recently used items first.
	RecentSortTypeMru RecentSortType = 1
	// lru: sort the returned list with the least recently used items first.
	RecentSortTypeLru RecentSortType = 2
	// custom: sort the returned list using a custom sorting function passed
	// using gtk_recent_chooser_set_sort_func().
	RecentSortTypeCustom RecentSortType = 3
)

func marshalRecentSortType(p uintptr) (interface{}, error) {
	return RecentSortType(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

type RecentSortFunc func(a *RecentInfo, b *RecentInfo, gint int)

//export gotk4_RecentSortFunc
func gotk4_RecentSortFunc(arg0 *C.GtkRecentInfo, arg1 *C.GtkRecentInfo, arg2 C.gpointer) C.gint {
	v := box.Get(uintptr(arg2))
	if v == nil {
		panic(`callback not found`)
	}

	var a *RecentInfo // out
	var b *RecentInfo // out

	a = (*RecentInfo)(unsafe.Pointer(arg0))
	b = (*RecentInfo)(unsafe.Pointer(arg1))

	fn := v.(RecentSortFunc)
	gint := fn(a, b)

	var cret C.gint // out

	cret = C.gint(gint)

	return cret
}

// RecentChooser is an interface that can be implemented by widgets displaying
// the list of recently used files. In GTK+, the main objects that implement
// this interface are RecentChooserWidget, RecentChooserDialog and
// RecentChooserMenu.
//
// Recently used files are supported since GTK+ 2.10.
type RecentChooser interface {
	gextras.Objector

	// AddFilter unselects @uri inside @chooser.
	AddFilter(filter RecentFilter)
	// CurrentItem unselects @uri inside @chooser.
	CurrentItem() *RecentInfo
	// CurrentURI unselects @uri inside @chooser.
	CurrentURI() string
	// Filter unselects @uri inside @chooser.
	Filter() RecentFilter
	// Limit unselects @uri inside @chooser.
	Limit() int
	// LocalOnly unselects @uri inside @chooser.
	LocalOnly() bool
	// SelectMultiple unselects @uri inside @chooser.
	SelectMultiple() bool
	// ShowIcons unselects @uri inside @chooser.
	ShowIcons() bool
	// ShowNotFound unselects @uri inside @chooser.
	ShowNotFound() bool
	// ShowPrivate unselects @uri inside @chooser.
	ShowPrivate() bool
	// ShowTips unselects @uri inside @chooser.
	ShowTips() bool
	// SortType unselects @uri inside @chooser.
	SortType() RecentSortType
	// RemoveFilter unselects @uri inside @chooser.
	RemoveFilter(filter RecentFilter)
	// SelectAll unselects @uri inside @chooser.
	SelectAll()
	// SelectURI unselects @uri inside @chooser.
	SelectURI(uri string) error
	// SetCurrentURI unselects @uri inside @chooser.
	SetCurrentURI(uri string) error
	// SetFilter unselects @uri inside @chooser.
	SetFilter(filter RecentFilter)
	// SetLimit unselects @uri inside @chooser.
	SetLimit(limit int)
	// SetLocalOnly unselects @uri inside @chooser.
	SetLocalOnly(localOnly bool)
	// SetSelectMultiple unselects @uri inside @chooser.
	SetSelectMultiple(selectMultiple bool)
	// SetShowIcons unselects @uri inside @chooser.
	SetShowIcons(showIcons bool)
	// SetShowNotFound unselects @uri inside @chooser.
	SetShowNotFound(showNotFound bool)
	// SetShowPrivate unselects @uri inside @chooser.
	SetShowPrivate(showPrivate bool)
	// SetShowTips unselects @uri inside @chooser.
	SetShowTips(showTips bool)
	// SetSortType unselects @uri inside @chooser.
	SetSortType(sortType RecentSortType)
	// UnselectAll unselects @uri inside @chooser.
	UnselectAll()
	// UnselectURI unselects @uri inside @chooser.
	UnselectURI(uri string)
}

// recentChooser implements the RecentChooser interface.
type recentChooser struct {
	gextras.Objector
}

var _ RecentChooser = (*recentChooser)(nil)

// WrapRecentChooser wraps a GObject to a type that implements
// interface RecentChooser. It is primarily used internally.
func WrapRecentChooser(obj *externglib.Object) RecentChooser {
	return recentChooser{
		Objector: obj,
	}
}

func marshalRecentChooser(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapRecentChooser(obj), nil
}

func (c recentChooser) AddFilter(filter RecentFilter) {
	var _arg0 *C.GtkRecentChooser // out
	var _arg1 *C.GtkRecentFilter  // out

	_arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.GtkRecentFilter)(unsafe.Pointer(filter.Native()))

	C.gtk_recent_chooser_add_filter(_arg0, _arg1)
}

func (c recentChooser) CurrentItem() *RecentInfo {
	var _arg0 *C.GtkRecentChooser // out
	var _cret *C.GtkRecentInfo    // in

	_arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(c.Native()))

	_cret = C.gtk_recent_chooser_get_current_item(_arg0)

	var _recentInfo *RecentInfo // out

	_recentInfo = (*RecentInfo)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(&_recentInfo, func(v **RecentInfo) {
		C.free(unsafe.Pointer(v))
	})

	return _recentInfo
}

func (c recentChooser) CurrentURI() string {
	var _arg0 *C.GtkRecentChooser // out
	var _cret *C.gchar            // in

	_arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(c.Native()))

	_cret = C.gtk_recent_chooser_get_current_uri(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

func (c recentChooser) Filter() RecentFilter {
	var _arg0 *C.GtkRecentChooser // out
	var _cret *C.GtkRecentFilter  // in

	_arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(c.Native()))

	_cret = C.gtk_recent_chooser_get_filter(_arg0)

	var _recentFilter RecentFilter // out

	_recentFilter = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(RecentFilter)

	return _recentFilter
}

func (c recentChooser) Limit() int {
	var _arg0 *C.GtkRecentChooser // out
	var _cret C.gint              // in

	_arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(c.Native()))

	_cret = C.gtk_recent_chooser_get_limit(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (c recentChooser) LocalOnly() bool {
	var _arg0 *C.GtkRecentChooser // out
	var _cret C.gboolean          // in

	_arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(c.Native()))

	_cret = C.gtk_recent_chooser_get_local_only(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (c recentChooser) SelectMultiple() bool {
	var _arg0 *C.GtkRecentChooser // out
	var _cret C.gboolean          // in

	_arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(c.Native()))

	_cret = C.gtk_recent_chooser_get_select_multiple(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (c recentChooser) ShowIcons() bool {
	var _arg0 *C.GtkRecentChooser // out
	var _cret C.gboolean          // in

	_arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(c.Native()))

	_cret = C.gtk_recent_chooser_get_show_icons(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (c recentChooser) ShowNotFound() bool {
	var _arg0 *C.GtkRecentChooser // out
	var _cret C.gboolean          // in

	_arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(c.Native()))

	_cret = C.gtk_recent_chooser_get_show_not_found(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (c recentChooser) ShowPrivate() bool {
	var _arg0 *C.GtkRecentChooser // out
	var _cret C.gboolean          // in

	_arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(c.Native()))

	_cret = C.gtk_recent_chooser_get_show_private(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (c recentChooser) ShowTips() bool {
	var _arg0 *C.GtkRecentChooser // out
	var _cret C.gboolean          // in

	_arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(c.Native()))

	_cret = C.gtk_recent_chooser_get_show_tips(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (c recentChooser) SortType() RecentSortType {
	var _arg0 *C.GtkRecentChooser // out
	var _cret C.GtkRecentSortType // in

	_arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(c.Native()))

	_cret = C.gtk_recent_chooser_get_sort_type(_arg0)

	var _recentSortType RecentSortType // out

	_recentSortType = RecentSortType(_cret)

	return _recentSortType
}

func (c recentChooser) RemoveFilter(filter RecentFilter) {
	var _arg0 *C.GtkRecentChooser // out
	var _arg1 *C.GtkRecentFilter  // out

	_arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.GtkRecentFilter)(unsafe.Pointer(filter.Native()))

	C.gtk_recent_chooser_remove_filter(_arg0, _arg1)
}

func (c recentChooser) SelectAll() {
	var _arg0 *C.GtkRecentChooser // out

	_arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(c.Native()))

	C.gtk_recent_chooser_select_all(_arg0)
}

func (c recentChooser) SelectURI(uri string) error {
	var _arg0 *C.GtkRecentChooser // out
	var _arg1 *C.gchar            // out
	var _cerr *C.GError           // in

	_arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.gchar)(C.CString(uri))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_recent_chooser_select_uri(_arg0, _arg1, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

func (c recentChooser) SetCurrentURI(uri string) error {
	var _arg0 *C.GtkRecentChooser // out
	var _arg1 *C.gchar            // out
	var _cerr *C.GError           // in

	_arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.gchar)(C.CString(uri))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_recent_chooser_set_current_uri(_arg0, _arg1, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

func (c recentChooser) SetFilter(filter RecentFilter) {
	var _arg0 *C.GtkRecentChooser // out
	var _arg1 *C.GtkRecentFilter  // out

	_arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.GtkRecentFilter)(unsafe.Pointer(filter.Native()))

	C.gtk_recent_chooser_set_filter(_arg0, _arg1)
}

func (c recentChooser) SetLimit(limit int) {
	var _arg0 *C.GtkRecentChooser // out
	var _arg1 C.gint              // out

	_arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(c.Native()))
	_arg1 = C.gint(limit)

	C.gtk_recent_chooser_set_limit(_arg0, _arg1)
}

func (c recentChooser) SetLocalOnly(localOnly bool) {
	var _arg0 *C.GtkRecentChooser // out
	var _arg1 C.gboolean          // out

	_arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(c.Native()))
	if localOnly {
		_arg1 = C.TRUE
	}

	C.gtk_recent_chooser_set_local_only(_arg0, _arg1)
}

func (c recentChooser) SetSelectMultiple(selectMultiple bool) {
	var _arg0 *C.GtkRecentChooser // out
	var _arg1 C.gboolean          // out

	_arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(c.Native()))
	if selectMultiple {
		_arg1 = C.TRUE
	}

	C.gtk_recent_chooser_set_select_multiple(_arg0, _arg1)
}

func (c recentChooser) SetShowIcons(showIcons bool) {
	var _arg0 *C.GtkRecentChooser // out
	var _arg1 C.gboolean          // out

	_arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(c.Native()))
	if showIcons {
		_arg1 = C.TRUE
	}

	C.gtk_recent_chooser_set_show_icons(_arg0, _arg1)
}

func (c recentChooser) SetShowNotFound(showNotFound bool) {
	var _arg0 *C.GtkRecentChooser // out
	var _arg1 C.gboolean          // out

	_arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(c.Native()))
	if showNotFound {
		_arg1 = C.TRUE
	}

	C.gtk_recent_chooser_set_show_not_found(_arg0, _arg1)
}

func (c recentChooser) SetShowPrivate(showPrivate bool) {
	var _arg0 *C.GtkRecentChooser // out
	var _arg1 C.gboolean          // out

	_arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(c.Native()))
	if showPrivate {
		_arg1 = C.TRUE
	}

	C.gtk_recent_chooser_set_show_private(_arg0, _arg1)
}

func (c recentChooser) SetShowTips(showTips bool) {
	var _arg0 *C.GtkRecentChooser // out
	var _arg1 C.gboolean          // out

	_arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(c.Native()))
	if showTips {
		_arg1 = C.TRUE
	}

	C.gtk_recent_chooser_set_show_tips(_arg0, _arg1)
}

func (c recentChooser) SetSortType(sortType RecentSortType) {
	var _arg0 *C.GtkRecentChooser // out
	var _arg1 C.GtkRecentSortType // out

	_arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(c.Native()))
	_arg1 = C.GtkRecentSortType(sortType)

	C.gtk_recent_chooser_set_sort_type(_arg0, _arg1)
}

func (c recentChooser) UnselectAll() {
	var _arg0 *C.GtkRecentChooser // out

	_arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(c.Native()))

	C.gtk_recent_chooser_unselect_all(_arg0)
}

func (c recentChooser) UnselectURI(uri string) {
	var _arg0 *C.GtkRecentChooser // out
	var _arg1 *C.gchar            // out

	_arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.gchar)(C.CString(uri))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_recent_chooser_unselect_uri(_arg0, _arg1)
}
