// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/box"
	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_recent_chooser_error_get_type()), F: marshalRecentChooserError},
		{T: externglib.Type(C.gtk_recent_sort_type_get_type()), F: marshalRecentSortType},
		{T: externglib.Type(C.gtk_recent_chooser_get_type()), F: marshalRecentChooserer},
	})
}

// RecentChooserError: these identify the various errors that can occur while
// calling RecentChooser functions.
type RecentChooserError int

const (
	// NotFound indicates that a file does not exist
	RecentChooserErrorNotFound RecentChooserError = iota
	// InvalidURI indicates a malformed URI
	RecentChooserErrorInvalidURI
)

func marshalRecentChooserError(p uintptr) (interface{}, error) {
	return RecentChooserError(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// RecentSortType: used to specify the sorting method to be applyed to the
// recently used resource list.
type RecentSortType int

const (
	// None: do not sort the returned list of recently used resources.
	RecentSortTypeNone RecentSortType = iota
	// Mru: sort the returned list with the most recently used items first.
	RecentSortTypeMru
	// Lru: sort the returned list with the least recently used items first.
	RecentSortTypeLru
	// Custom: sort the returned list using a custom sorting function passed
	// using gtk_recent_chooser_set_sort_func().
	RecentSortTypeCustom
)

func marshalRecentSortType(p uintptr) (interface{}, error) {
	return RecentSortType(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

type RecentSortFunc func(a *RecentInfo, b *RecentInfo, userData interface{}) (gint int)

//export gotk4_RecentSortFunc
func gotk4_RecentSortFunc(arg0 *C.GtkRecentInfo, arg1 *C.GtkRecentInfo, arg2 C.gpointer) (cret C.gint) {
	v := box.Get(uintptr(arg2))
	if v == nil {
		panic(`callback not found`)
	}

	var a *RecentInfo        // out
	var b *RecentInfo        // out
	var userData interface{} // out

	a = (*RecentInfo)(unsafe.Pointer(arg0))
	C.gtk_recent_info_ref(arg0)
	runtime.SetFinalizer(a, func(v *RecentInfo) {
		C.gtk_recent_info_unref((*C.GtkRecentInfo)(unsafe.Pointer(v)))
	})
	b = (*RecentInfo)(unsafe.Pointer(arg1))
	C.gtk_recent_info_ref(arg1)
	runtime.SetFinalizer(b, func(v *RecentInfo) {
		C.gtk_recent_info_unref((*C.GtkRecentInfo)(unsafe.Pointer(v)))
	})
	userData = box.Get(uintptr(arg2))

	fn := v.(RecentSortFunc)
	gint := fn(a, b, userData)

	cret = C.gint(gint)

	return cret
}

// RecentChooserOverrider contains methods that are overridable.
//
// As of right now, interface overriding and subclassing is not supported
// yet, so the interface currently has no use.
type RecentChooserOverrider interface {
	// AddFilter adds @filter to the list of RecentFilter objects held by
	// @chooser.
	//
	// If no previous filter objects were defined, this function will call
	// gtk_recent_chooser_set_filter().
	AddFilter(filter RecentFilterer)
	// CurrentURI gets the URI currently selected by @chooser.
	CurrentURI() string

	ItemActivated()
	// RemoveFilter removes @filter from the list of RecentFilter objects held
	// by @chooser.
	RemoveFilter(filter RecentFilterer)
	// SelectAll selects all the items inside @chooser, if the @chooser supports
	// multiple selection.
	SelectAll()
	// SelectURI selects @uri inside @chooser.
	SelectURI(uri string) error

	SelectionChanged()
	// SetCurrentURI sets @uri as the current URI for @chooser.
	SetCurrentURI(uri string) error
	// UnselectAll unselects all the items inside @chooser.
	UnselectAll()
	// UnselectURI unselects @uri inside @chooser.
	UnselectURI(uri string)
}

// RecentChooserer describes RecentChooser's methods.
type RecentChooserer interface {
	// AddFilter adds @filter to the list of RecentFilter objects held by
	// @chooser.
	AddFilter(filter RecentFilterer)
	// CurrentItem gets the RecentInfo currently selected by @chooser.
	CurrentItem() *RecentInfo
	// CurrentURI gets the URI currently selected by @chooser.
	CurrentURI() string
	// Filter gets the RecentFilter object currently used by @chooser to affect
	// the display of the recently used resources.
	Filter() *RecentFilter
	// Limit gets the number of items returned by gtk_recent_chooser_get_items()
	// and gtk_recent_chooser_get_uris().
	Limit() int
	// LocalOnly gets whether only local resources should be shown in the
	// recently used resources selector.
	LocalOnly() bool
	// SelectMultiple gets whether @chooser can select multiple items.
	SelectMultiple() bool
	// ShowIcons retrieves whether @chooser should show an icon near the
	// resource.
	ShowIcons() bool
	// ShowNotFound retrieves whether @chooser should show the recently used
	// resources that were not found.
	ShowNotFound() bool
	// ShowPrivate returns whether @chooser should display recently used
	// resources registered as private.
	ShowPrivate() bool
	// ShowTips gets whether @chooser should display tooltips containing the
	// full path of a recently user resource.
	ShowTips() bool
	// SortType gets the value set by gtk_recent_chooser_set_sort_type().
	SortType() RecentSortType
	// RemoveFilter removes @filter from the list of RecentFilter objects held
	// by @chooser.
	RemoveFilter(filter RecentFilterer)
	// SelectAll selects all the items inside @chooser, if the @chooser supports
	// multiple selection.
	SelectAll()
	// SelectURI selects @uri inside @chooser.
	SelectURI(uri string) error
	// SetCurrentURI sets @uri as the current URI for @chooser.
	SetCurrentURI(uri string) error
	// SetFilter sets @filter as the current RecentFilter object used by
	// @chooser to affect the displayed recently used resources.
	SetFilter(filter RecentFilterer)
	// SetLimit sets the number of items that should be returned by
	// gtk_recent_chooser_get_items() and gtk_recent_chooser_get_uris().
	SetLimit(limit int)
	// SetLocalOnly sets whether only local resources, that is resources using
	// the file:// URI scheme, should be shown in the recently used resources
	// selector.
	SetLocalOnly(localOnly bool)
	// SetSelectMultiple sets whether @chooser can select multiple items.
	SetSelectMultiple(selectMultiple bool)
	// SetShowIcons sets whether @chooser should show an icon near the resource
	// when displaying it.
	SetShowIcons(showIcons bool)
	// SetShowNotFound sets whether @chooser should display the recently used
	// resources that it didnâ€™t find.
	SetShowNotFound(showNotFound bool)
	// SetShowPrivate: whether to show recently used resources marked registered
	// as private.
	SetShowPrivate(showPrivate bool)
	// SetShowTips sets whether to show a tooltips containing the full path of
	// each recently used resource in a RecentChooser widget.
	SetShowTips(showTips bool)
	// UnselectAll unselects all the items inside @chooser.
	UnselectAll()
	// UnselectURI unselects @uri inside @chooser.
	UnselectURI(uri string)
}

// RecentChooser is an interface that can be implemented by widgets displaying
// the list of recently used files. In GTK+, the main objects that implement
// this interface are RecentChooserWidget, RecentChooserDialog and
// RecentChooserMenu.
//
// Recently used files are supported since GTK+ 2.10.
type RecentChooser struct {
	*externglib.Object
}

var (
	_ RecentChooserer = (*RecentChooser)(nil)
	_ gextras.Nativer = (*RecentChooser)(nil)
)

func wrapRecentChooser(obj *externglib.Object) RecentChooserer {
	return &RecentChooser{
		Object: obj,
	}
}

func marshalRecentChooserer(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapRecentChooser(obj), nil
}

// AddFilter adds @filter to the list of RecentFilter objects held by @chooser.
//
// If no previous filter objects were defined, this function will call
// gtk_recent_chooser_set_filter().
func (chooser *RecentChooser) AddFilter(filter RecentFilterer) {
	var _arg0 *C.GtkRecentChooser // out
	var _arg1 *C.GtkRecentFilter  // out

	_arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(chooser.Native()))
	_arg1 = (*C.GtkRecentFilter)(unsafe.Pointer((filter).(gextras.Nativer).Native()))

	C.gtk_recent_chooser_add_filter(_arg0, _arg1)
}

// CurrentItem gets the RecentInfo currently selected by @chooser.
func (chooser *RecentChooser) CurrentItem() *RecentInfo {
	var _arg0 *C.GtkRecentChooser // out
	var _cret *C.GtkRecentInfo    // in

	_arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(chooser.Native()))

	_cret = C.gtk_recent_chooser_get_current_item(_arg0)

	var _recentInfo *RecentInfo // out

	_recentInfo = (*RecentInfo)(unsafe.Pointer(_cret))
	C.gtk_recent_info_ref(_cret)
	runtime.SetFinalizer(_recentInfo, func(v *RecentInfo) {
		C.gtk_recent_info_unref((*C.GtkRecentInfo)(unsafe.Pointer(v)))
	})

	return _recentInfo
}

// CurrentURI gets the URI currently selected by @chooser.
func (chooser *RecentChooser) CurrentURI() string {
	var _arg0 *C.GtkRecentChooser // out
	var _cret *C.gchar            // in

	_arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(chooser.Native()))

	_cret = C.gtk_recent_chooser_get_current_uri(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Filter gets the RecentFilter object currently used by @chooser to affect the
// display of the recently used resources.
func (chooser *RecentChooser) Filter() *RecentFilter {
	var _arg0 *C.GtkRecentChooser // out
	var _cret *C.GtkRecentFilter  // in

	_arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(chooser.Native()))

	_cret = C.gtk_recent_chooser_get_filter(_arg0)

	var _recentFilter *RecentFilter // out

	_recentFilter = (gextras.CastObject(externglib.Take(unsafe.Pointer(_cret)))).(*RecentFilter)

	return _recentFilter
}

// Limit gets the number of items returned by gtk_recent_chooser_get_items() and
// gtk_recent_chooser_get_uris().
func (chooser *RecentChooser) Limit() int {
	var _arg0 *C.GtkRecentChooser // out
	var _cret C.gint              // in

	_arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(chooser.Native()))

	_cret = C.gtk_recent_chooser_get_limit(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// LocalOnly gets whether only local resources should be shown in the recently
// used resources selector. See gtk_recent_chooser_set_local_only()
func (chooser *RecentChooser) LocalOnly() bool {
	var _arg0 *C.GtkRecentChooser // out
	var _cret C.gboolean          // in

	_arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(chooser.Native()))

	_cret = C.gtk_recent_chooser_get_local_only(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SelectMultiple gets whether @chooser can select multiple items.
func (chooser *RecentChooser) SelectMultiple() bool {
	var _arg0 *C.GtkRecentChooser // out
	var _cret C.gboolean          // in

	_arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(chooser.Native()))

	_cret = C.gtk_recent_chooser_get_select_multiple(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// ShowIcons retrieves whether @chooser should show an icon near the resource.
func (chooser *RecentChooser) ShowIcons() bool {
	var _arg0 *C.GtkRecentChooser // out
	var _cret C.gboolean          // in

	_arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(chooser.Native()))

	_cret = C.gtk_recent_chooser_get_show_icons(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// ShowNotFound retrieves whether @chooser should show the recently used
// resources that were not found.
func (chooser *RecentChooser) ShowNotFound() bool {
	var _arg0 *C.GtkRecentChooser // out
	var _cret C.gboolean          // in

	_arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(chooser.Native()))

	_cret = C.gtk_recent_chooser_get_show_not_found(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// ShowPrivate returns whether @chooser should display recently used resources
// registered as private.
func (chooser *RecentChooser) ShowPrivate() bool {
	var _arg0 *C.GtkRecentChooser // out
	var _cret C.gboolean          // in

	_arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(chooser.Native()))

	_cret = C.gtk_recent_chooser_get_show_private(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// ShowTips gets whether @chooser should display tooltips containing the full
// path of a recently user resource.
func (chooser *RecentChooser) ShowTips() bool {
	var _arg0 *C.GtkRecentChooser // out
	var _cret C.gboolean          // in

	_arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(chooser.Native()))

	_cret = C.gtk_recent_chooser_get_show_tips(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SortType gets the value set by gtk_recent_chooser_set_sort_type().
func (chooser *RecentChooser) SortType() RecentSortType {
	var _arg0 *C.GtkRecentChooser // out
	var _cret C.GtkRecentSortType // in

	_arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(chooser.Native()))

	_cret = C.gtk_recent_chooser_get_sort_type(_arg0)

	var _recentSortType RecentSortType // out

	_recentSortType = (RecentSortType)(_cret)

	return _recentSortType
}

// RemoveFilter removes @filter from the list of RecentFilter objects held by
// @chooser.
func (chooser *RecentChooser) RemoveFilter(filter RecentFilterer) {
	var _arg0 *C.GtkRecentChooser // out
	var _arg1 *C.GtkRecentFilter  // out

	_arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(chooser.Native()))
	_arg1 = (*C.GtkRecentFilter)(unsafe.Pointer((filter).(gextras.Nativer).Native()))

	C.gtk_recent_chooser_remove_filter(_arg0, _arg1)
}

// SelectAll selects all the items inside @chooser, if the @chooser supports
// multiple selection.
func (chooser *RecentChooser) SelectAll() {
	var _arg0 *C.GtkRecentChooser // out

	_arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(chooser.Native()))

	C.gtk_recent_chooser_select_all(_arg0)
}

// SelectURI selects @uri inside @chooser.
func (chooser *RecentChooser) SelectURI(uri string) error {
	var _arg0 *C.GtkRecentChooser // out
	var _arg1 *C.gchar            // out
	var _cerr *C.GError           // in

	_arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(chooser.Native()))
	_arg1 = (*C.gchar)(C.CString(uri))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_recent_chooser_select_uri(_arg0, _arg1, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

// SetCurrentURI sets @uri as the current URI for @chooser.
func (chooser *RecentChooser) SetCurrentURI(uri string) error {
	var _arg0 *C.GtkRecentChooser // out
	var _arg1 *C.gchar            // out
	var _cerr *C.GError           // in

	_arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(chooser.Native()))
	_arg1 = (*C.gchar)(C.CString(uri))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_recent_chooser_set_current_uri(_arg0, _arg1, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

// SetFilter sets @filter as the current RecentFilter object used by @chooser to
// affect the displayed recently used resources.
func (chooser *RecentChooser) SetFilter(filter RecentFilterer) {
	var _arg0 *C.GtkRecentChooser // out
	var _arg1 *C.GtkRecentFilter  // out

	_arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(chooser.Native()))
	_arg1 = (*C.GtkRecentFilter)(unsafe.Pointer((filter).(gextras.Nativer).Native()))

	C.gtk_recent_chooser_set_filter(_arg0, _arg1)
}

// SetLimit sets the number of items that should be returned by
// gtk_recent_chooser_get_items() and gtk_recent_chooser_get_uris().
func (chooser *RecentChooser) SetLimit(limit int) {
	var _arg0 *C.GtkRecentChooser // out
	var _arg1 C.gint              // out

	_arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(chooser.Native()))
	_arg1 = C.gint(limit)

	C.gtk_recent_chooser_set_limit(_arg0, _arg1)
}

// SetLocalOnly sets whether only local resources, that is resources using the
// file:// URI scheme, should be shown in the recently used resources selector.
// If @local_only is true (the default) then the shown resources are guaranteed
// to be accessible through the operating system native file system.
func (chooser *RecentChooser) SetLocalOnly(localOnly bool) {
	var _arg0 *C.GtkRecentChooser // out
	var _arg1 C.gboolean          // out

	_arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(chooser.Native()))
	if localOnly {
		_arg1 = C.TRUE
	}

	C.gtk_recent_chooser_set_local_only(_arg0, _arg1)
}

// SetSelectMultiple sets whether @chooser can select multiple items.
func (chooser *RecentChooser) SetSelectMultiple(selectMultiple bool) {
	var _arg0 *C.GtkRecentChooser // out
	var _arg1 C.gboolean          // out

	_arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(chooser.Native()))
	if selectMultiple {
		_arg1 = C.TRUE
	}

	C.gtk_recent_chooser_set_select_multiple(_arg0, _arg1)
}

// SetShowIcons sets whether @chooser should show an icon near the resource when
// displaying it.
func (chooser *RecentChooser) SetShowIcons(showIcons bool) {
	var _arg0 *C.GtkRecentChooser // out
	var _arg1 C.gboolean          // out

	_arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(chooser.Native()))
	if showIcons {
		_arg1 = C.TRUE
	}

	C.gtk_recent_chooser_set_show_icons(_arg0, _arg1)
}

// SetShowNotFound sets whether @chooser should display the recently used
// resources that it didnâ€™t find. This only applies to local resources.
func (chooser *RecentChooser) SetShowNotFound(showNotFound bool) {
	var _arg0 *C.GtkRecentChooser // out
	var _arg1 C.gboolean          // out

	_arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(chooser.Native()))
	if showNotFound {
		_arg1 = C.TRUE
	}

	C.gtk_recent_chooser_set_show_not_found(_arg0, _arg1)
}

// SetShowPrivate: whether to show recently used resources marked registered as
// private.
func (chooser *RecentChooser) SetShowPrivate(showPrivate bool) {
	var _arg0 *C.GtkRecentChooser // out
	var _arg1 C.gboolean          // out

	_arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(chooser.Native()))
	if showPrivate {
		_arg1 = C.TRUE
	}

	C.gtk_recent_chooser_set_show_private(_arg0, _arg1)
}

// SetShowTips sets whether to show a tooltips containing the full path of each
// recently used resource in a RecentChooser widget.
func (chooser *RecentChooser) SetShowTips(showTips bool) {
	var _arg0 *C.GtkRecentChooser // out
	var _arg1 C.gboolean          // out

	_arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(chooser.Native()))
	if showTips {
		_arg1 = C.TRUE
	}

	C.gtk_recent_chooser_set_show_tips(_arg0, _arg1)
}

// UnselectAll unselects all the items inside @chooser.
func (chooser *RecentChooser) UnselectAll() {
	var _arg0 *C.GtkRecentChooser // out

	_arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(chooser.Native()))

	C.gtk_recent_chooser_unselect_all(_arg0)
}

// UnselectURI unselects @uri inside @chooser.
func (chooser *RecentChooser) UnselectURI(uri string) {
	var _arg0 *C.GtkRecentChooser // out
	var _arg1 *C.gchar            // out

	_arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(chooser.Native()))
	_arg1 = (*C.gchar)(C.CString(uri))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_recent_chooser_unselect_uri(_arg0, _arg1)
}
