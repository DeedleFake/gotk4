// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/internal/box"
	"github.com/diamondburned/gotk4/internal/gerror"
	"github.com/diamondburned/gotk4/internal/gextras"
	"github.com/diamondburned/gotk4/internal/ptr"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <stdbool.h>
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_recent_chooser_get_type()), F: marshalRecentChooser},
	})
}

type RecentSortFunc func(a *RecentInfo, b *RecentInfo) int

//export gotk4_RecentSortFunc
func gotk4_RecentSortFunc(arg0 *C.GtkRecentInfo, arg1 *C.GtkRecentInfo, arg2 C.gpointer) C.gint {
	v := box.Get(uintptr(arg2))
	if v == nil {
		panic(`callback not found`)
	}

	fn := v.(RecentSortFunc)
	ret := fn(a, b, userData)

	cret = C.gint(ret)

	return cret
}

// RecentChooserOverrider contains methods that are overridable. This
// interface is a subset of the interface RecentChooser.
type RecentChooserOverrider interface {
	// AddFilter adds @filter to the list of RecentFilter objects held by
	// @chooser.
	//
	// If no previous filter objects were defined, this function will call
	// gtk_recent_chooser_set_filter().
	AddFilter(filter RecentFilter)
	// CurrentURI gets the URI currently selected by @chooser.
	CurrentURI() string
	// Items gets the list of recently used resources in form of RecentInfo
	// objects.
	//
	// The return value of this function is affected by the “sort-type” and
	// “limit” properties of @chooser.
	Items() *glib.List

	RecentManager() RecentManager

	ItemActivated()
	// ListFilters gets the RecentFilter objects held by @chooser.
	ListFilters() *glib.SList
	// RemoveFilter removes @filter from the list of RecentFilter objects held
	// by @chooser.
	RemoveFilter(filter RecentFilter)
	// SelectAll selects all the items inside @chooser, if the @chooser supports
	// multiple selection.
	SelectAll()
	// SelectURI selects @uri inside @chooser.
	SelectURI(uri string) error

	SelectionChanged()
	// SetCurrentURI sets @uri as the current URI for @chooser.
	SetCurrentURI(uri string) error
	// SetSortFunc sets the comparison function used when sorting to be
	// @sort_func. If the @chooser has the sort type set to K_RECENT_SORT_CUSTOM
	// then the chooser will sort using this function.
	//
	// To the comparison function will be passed two RecentInfo structs and
	// @sort_data; @sort_func should return a positive integer if the first item
	// comes before the second, zero if the two items are equal and a negative
	// integer if the first item comes after the second.
	SetSortFunc(sortFunc RecentSortFunc)
	// UnselectAll unselects all the items inside @chooser.
	UnselectAll()
	// UnselectURI unselects @uri inside @chooser.
	UnselectURI(uri string)
}

// RecentChooser is an interface that can be implemented by widgets displaying
// the list of recently used files. In GTK+, the main objects that implement
// this interface are RecentChooserWidget, RecentChooserDialog and
// RecentChooserMenu.
//
// Recently used files are supported since GTK+ 2.10.
type RecentChooser interface {
	gextras.Objector
	RecentChooserOverrider

	// CurrentItem gets the RecentInfo currently selected by @chooser.
	CurrentItem() *RecentInfo
	// Filter gets the RecentFilter object currently used by @chooser to affect
	// the display of the recently used resources.
	Filter() RecentFilter
	// Limit gets the number of items returned by gtk_recent_chooser_get_items()
	// and gtk_recent_chooser_get_uris().
	Limit() int
	// LocalOnly gets whether only local resources should be shown in the
	// recently used resources selector. See gtk_recent_chooser_set_local_only()
	LocalOnly() bool
	// SelectMultiple gets whether @chooser can select multiple items.
	SelectMultiple() bool
	// ShowIcons retrieves whether @chooser should show an icon near the
	// resource.
	ShowIcons() bool
	// ShowNotFound retrieves whether @chooser should show the recently used
	// resources that were not found.
	ShowNotFound() bool
	// ShowPrivate returns whether @chooser should display recently used
	// resources registered as private.
	ShowPrivate() bool
	// ShowTips gets whether @chooser should display tooltips containing the
	// full path of a recently user resource.
	ShowTips() bool
	// SortType gets the value set by gtk_recent_chooser_set_sort_type().
	SortType() RecentSortType
	// Uris gets the URI of the recently used resources.
	//
	// The return value of this function is affected by the “sort-type” and
	// “limit” properties of @chooser.
	//
	// Since the returned array is nil terminated, @length may be nil.
	Uris() (length uint, utf8s []string)
	// SetFilter sets @filter as the current RecentFilter object used by
	// @chooser to affect the displayed recently used resources.
	SetFilter(filter RecentFilter)
	// SetLimit sets the number of items that should be returned by
	// gtk_recent_chooser_get_items() and gtk_recent_chooser_get_uris().
	SetLimit(limit int)
	// SetLocalOnly sets whether only local resources, that is resources using
	// the file:// URI scheme, should be shown in the recently used resources
	// selector. If @local_only is true (the default) then the shown resources
	// are guaranteed to be accessible through the operating system native file
	// system.
	SetLocalOnly(localOnly bool)
	// SetSelectMultiple sets whether @chooser can select multiple items.
	SetSelectMultiple(selectMultiple bool)
	// SetShowIcons sets whether @chooser should show an icon near the resource
	// when displaying it.
	SetShowIcons(showIcons bool)
	// SetShowNotFound sets whether @chooser should display the recently used
	// resources that it didn’t find. This only applies to local resources.
	SetShowNotFound(showNotFound bool)
	// SetShowPrivate: whether to show recently used resources marked registered
	// as private.
	SetShowPrivate(showPrivate bool)
	// SetShowTips sets whether to show a tooltips containing the full path of
	// each recently used resource in a RecentChooser widget.
	SetShowTips(showTips bool)
	// SetSortType changes the sorting order of the recently used resources list
	// displayed by @chooser.
	SetSortType(sortType RecentSortType)
}

// recentChooser implements the RecentChooser interface.
type recentChooser struct {
	gextras.Objector
}

var _ RecentChooser = (*recentChooser)(nil)

// WrapRecentChooser wraps a GObject to a type that implements interface
// RecentChooser. It is primarily used internally.
func WrapRecentChooser(obj *externglib.Object) RecentChooser {
	return RecentChooser{
		Objector: obj,
	}
}

func marshalRecentChooser(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapRecentChooser(obj), nil
}

// AddFilter adds @filter to the list of RecentFilter objects held by
// @chooser.
//
// If no previous filter objects were defined, this function will call
// gtk_recent_chooser_set_filter().
func (c recentChooser) AddFilter(filter RecentFilter) {
	var arg0 *C.GtkRecentChooser
	var arg1 *C.GtkRecentFilter

	arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(c.Native()))
	arg1 = (*C.GtkRecentFilter)(unsafe.Pointer(filter.Native()))

	C.gtk_recent_chooser_add_filter(arg0, filter)
}

// CurrentItem gets the RecentInfo currently selected by @chooser.
func (c recentChooser) CurrentItem() *RecentInfo {
	var arg0 *C.GtkRecentChooser

	arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(c.Native()))

	var cret *C.GtkRecentInfo
	var ret1 *RecentInfo

	cret = C.gtk_recent_chooser_get_current_item(arg0)

	ret1 = WrapRecentInfo(unsafe.Pointer(cret))
	runtime.SetFinalizer(ret1, func(v *RecentInfo) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return ret1
}

// CurrentURI gets the URI currently selected by @chooser.
func (c recentChooser) CurrentURI() string {
	var arg0 *C.GtkRecentChooser

	arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(c.Native()))

	var cret *C.gchar
	var ret1 string

	cret = C.gtk_recent_chooser_get_current_uri(arg0)

	ret1 = C.GoString(cret)
	defer C.free(unsafe.Pointer(cret))

	return ret1
}

// Filter gets the RecentFilter object currently used by @chooser to affect
// the display of the recently used resources.
func (c recentChooser) Filter() RecentFilter {
	var arg0 *C.GtkRecentChooser

	arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(c.Native()))

	var cret *C.GtkRecentFilter
	var ret1 RecentFilter

	cret = C.gtk_recent_chooser_get_filter(arg0)

	ret1 = gextras.CastObject(externglib.Take(unsafe.Pointer(cret.Native()))).(RecentFilter)

	return ret1
}

// Items gets the list of recently used resources in form of RecentInfo
// objects.
//
// The return value of this function is affected by the “sort-type” and
// “limit” properties of @chooser.
func (c recentChooser) Items() *glib.List {
	var arg0 *C.GtkRecentChooser

	arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(c.Native()))

	var cret *C.GList
	var ret1 *glib.List

	cret = C.gtk_recent_chooser_get_items(arg0)

	ret1 = glib.WrapList(unsafe.Pointer(cret))
	runtime.SetFinalizer(ret1, func(v *glib.List) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return ret1
}

// Limit gets the number of items returned by gtk_recent_chooser_get_items()
// and gtk_recent_chooser_get_uris().
func (c recentChooser) Limit() int {
	var arg0 *C.GtkRecentChooser

	arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(c.Native()))

	var cret C.gint
	var ret1 int

	cret = C.gtk_recent_chooser_get_limit(arg0)

	ret1 = C.gint(cret)

	return ret1
}

// LocalOnly gets whether only local resources should be shown in the
// recently used resources selector. See gtk_recent_chooser_set_local_only()
func (c recentChooser) LocalOnly() bool {
	var arg0 *C.GtkRecentChooser

	arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(c.Native()))

	var cret C.gboolean
	var ret1 bool

	cret = C.gtk_recent_chooser_get_local_only(arg0)

	ret1 = C.bool(cret) != C.false

	return ret1
}

// SelectMultiple gets whether @chooser can select multiple items.
func (c recentChooser) SelectMultiple() bool {
	var arg0 *C.GtkRecentChooser

	arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(c.Native()))

	var cret C.gboolean
	var ret1 bool

	cret = C.gtk_recent_chooser_get_select_multiple(arg0)

	ret1 = C.bool(cret) != C.false

	return ret1
}

// ShowIcons retrieves whether @chooser should show an icon near the
// resource.
func (c recentChooser) ShowIcons() bool {
	var arg0 *C.GtkRecentChooser

	arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(c.Native()))

	var cret C.gboolean
	var ret1 bool

	cret = C.gtk_recent_chooser_get_show_icons(arg0)

	ret1 = C.bool(cret) != C.false

	return ret1
}

// ShowNotFound retrieves whether @chooser should show the recently used
// resources that were not found.
func (c recentChooser) ShowNotFound() bool {
	var arg0 *C.GtkRecentChooser

	arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(c.Native()))

	var cret C.gboolean
	var ret1 bool

	cret = C.gtk_recent_chooser_get_show_not_found(arg0)

	ret1 = C.bool(cret) != C.false

	return ret1
}

// ShowPrivate returns whether @chooser should display recently used
// resources registered as private.
func (c recentChooser) ShowPrivate() bool {
	var arg0 *C.GtkRecentChooser

	arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(c.Native()))

	var cret C.gboolean
	var ret1 bool

	cret = C.gtk_recent_chooser_get_show_private(arg0)

	ret1 = C.bool(cret) != C.false

	return ret1
}

// ShowTips gets whether @chooser should display tooltips containing the
// full path of a recently user resource.
func (c recentChooser) ShowTips() bool {
	var arg0 *C.GtkRecentChooser

	arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(c.Native()))

	var cret C.gboolean
	var ret1 bool

	cret = C.gtk_recent_chooser_get_show_tips(arg0)

	ret1 = C.bool(cret) != C.false

	return ret1
}

// SortType gets the value set by gtk_recent_chooser_set_sort_type().
func (c recentChooser) SortType() RecentSortType {
	var arg0 *C.GtkRecentChooser

	arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(c.Native()))

	var cret C.GtkRecentSortType
	var ret1 RecentSortType

	cret = C.gtk_recent_chooser_get_sort_type(arg0)

	ret1 = RecentSortType(cret)

	return ret1
}

// Uris gets the URI of the recently used resources.
//
// The return value of this function is affected by the “sort-type” and
// “limit” properties of @chooser.
//
// Since the returned array is nil terminated, @length may be nil.
func (c recentChooser) Uris() (length uint, utf8s []string) {
	var arg0 *C.GtkRecentChooser

	arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(c.Native()))

	var cret **C.gchar
	var arg1 *C.gsize
	var ret2 []string

	cret = C.gtk_recent_chooser_get_uris(arg0, &arg1)

	ret2 = make([]string, arg1)
	for i := 0; i < uintptr(arg1); i++ {
		src := (*C.gchar)(ptr.Add(unsafe.Pointer(cret), i))
		ret2[i] = C.GoString(src)
		defer C.free(unsafe.Pointer(src))
	}

	return ret1, ret2
}

// ListFilters gets the RecentFilter objects held by @chooser.
func (c recentChooser) ListFilters() *glib.SList {
	var arg0 *C.GtkRecentChooser

	arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(c.Native()))

	var cret *C.GSList
	var ret1 *glib.SList

	cret = C.gtk_recent_chooser_list_filters(arg0)

	ret1 = glib.WrapSList(unsafe.Pointer(cret))
	runtime.SetFinalizer(ret1, func(v *glib.SList) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return ret1
}

// RemoveFilter removes @filter from the list of RecentFilter objects held
// by @chooser.
func (c recentChooser) RemoveFilter(filter RecentFilter) {
	var arg0 *C.GtkRecentChooser
	var arg1 *C.GtkRecentFilter

	arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(c.Native()))
	arg1 = (*C.GtkRecentFilter)(unsafe.Pointer(filter.Native()))

	C.gtk_recent_chooser_remove_filter(arg0, filter)
}

// SelectAll selects all the items inside @chooser, if the @chooser supports
// multiple selection.
func (c recentChooser) SelectAll() {
	var arg0 *C.GtkRecentChooser

	arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(c.Native()))

	C.gtk_recent_chooser_select_all(arg0)
}

// SelectURI selects @uri inside @chooser.
func (c recentChooser) SelectURI(uri string) error {
	var arg0 *C.GtkRecentChooser
	var arg1 *C.gchar

	arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(c.Native()))
	arg1 = (*C.gchar)(C.CString(uri))
	defer C.free(unsafe.Pointer(arg1))

	var errout *C.GError
	var goerr error

	C.gtk_recent_chooser_select_uri(arg0, uri, &errout)

	goerr = gerror.Take(unsafe.Pointer(errout))

	return goerr
}

// SetCurrentURI sets @uri as the current URI for @chooser.
func (c recentChooser) SetCurrentURI(uri string) error {
	var arg0 *C.GtkRecentChooser
	var arg1 *C.gchar

	arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(c.Native()))
	arg1 = (*C.gchar)(C.CString(uri))
	defer C.free(unsafe.Pointer(arg1))

	var errout *C.GError
	var goerr error

	C.gtk_recent_chooser_set_current_uri(arg0, uri, &errout)

	goerr = gerror.Take(unsafe.Pointer(errout))

	return goerr
}

// SetFilter sets @filter as the current RecentFilter object used by
// @chooser to affect the displayed recently used resources.
func (c recentChooser) SetFilter(filter RecentFilter) {
	var arg0 *C.GtkRecentChooser
	var arg1 *C.GtkRecentFilter

	arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(c.Native()))
	arg1 = (*C.GtkRecentFilter)(unsafe.Pointer(filter.Native()))

	C.gtk_recent_chooser_set_filter(arg0, filter)
}

// SetLimit sets the number of items that should be returned by
// gtk_recent_chooser_get_items() and gtk_recent_chooser_get_uris().
func (c recentChooser) SetLimit(limit int) {
	var arg0 *C.GtkRecentChooser
	var arg1 C.gint

	arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(c.Native()))
	arg1 = C.gint(limit)

	C.gtk_recent_chooser_set_limit(arg0, limit)
}

// SetLocalOnly sets whether only local resources, that is resources using
// the file:// URI scheme, should be shown in the recently used resources
// selector. If @local_only is true (the default) then the shown resources
// are guaranteed to be accessible through the operating system native file
// system.
func (c recentChooser) SetLocalOnly(localOnly bool) {
	var arg0 *C.GtkRecentChooser
	var arg1 C.gboolean

	arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(c.Native()))
	if localOnly {
		arg1 = C.gboolean(1)
	}

	C.gtk_recent_chooser_set_local_only(arg0, localOnly)
}

// SetSelectMultiple sets whether @chooser can select multiple items.
func (c recentChooser) SetSelectMultiple(selectMultiple bool) {
	var arg0 *C.GtkRecentChooser
	var arg1 C.gboolean

	arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(c.Native()))
	if selectMultiple {
		arg1 = C.gboolean(1)
	}

	C.gtk_recent_chooser_set_select_multiple(arg0, selectMultiple)
}

// SetShowIcons sets whether @chooser should show an icon near the resource
// when displaying it.
func (c recentChooser) SetShowIcons(showIcons bool) {
	var arg0 *C.GtkRecentChooser
	var arg1 C.gboolean

	arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(c.Native()))
	if showIcons {
		arg1 = C.gboolean(1)
	}

	C.gtk_recent_chooser_set_show_icons(arg0, showIcons)
}

// SetShowNotFound sets whether @chooser should display the recently used
// resources that it didn’t find. This only applies to local resources.
func (c recentChooser) SetShowNotFound(showNotFound bool) {
	var arg0 *C.GtkRecentChooser
	var arg1 C.gboolean

	arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(c.Native()))
	if showNotFound {
		arg1 = C.gboolean(1)
	}

	C.gtk_recent_chooser_set_show_not_found(arg0, showNotFound)
}

// SetShowPrivate: whether to show recently used resources marked registered
// as private.
func (c recentChooser) SetShowPrivate(showPrivate bool) {
	var arg0 *C.GtkRecentChooser
	var arg1 C.gboolean

	arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(c.Native()))
	if showPrivate {
		arg1 = C.gboolean(1)
	}

	C.gtk_recent_chooser_set_show_private(arg0, showPrivate)
}

// SetShowTips sets whether to show a tooltips containing the full path of
// each recently used resource in a RecentChooser widget.
func (c recentChooser) SetShowTips(showTips bool) {
	var arg0 *C.GtkRecentChooser
	var arg1 C.gboolean

	arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(c.Native()))
	if showTips {
		arg1 = C.gboolean(1)
	}

	C.gtk_recent_chooser_set_show_tips(arg0, showTips)
}

// SetSortFunc sets the comparison function used when sorting to be
// @sort_func. If the @chooser has the sort type set to K_RECENT_SORT_CUSTOM
// then the chooser will sort using this function.
//
// To the comparison function will be passed two RecentInfo structs and
// @sort_data; @sort_func should return a positive integer if the first item
// comes before the second, zero if the two items are equal and a negative
// integer if the first item comes after the second.
func (c recentChooser) SetSortFunc(sortFunc RecentSortFunc) {
	var arg0 *C.GtkRecentChooser

	arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(c.Native()))

	C.gtk_recent_chooser_set_sort_func(arg0, sortFunc, sortData, dataDestroy)
}

// SetSortType changes the sorting order of the recently used resources list
// displayed by @chooser.
func (c recentChooser) SetSortType(sortType RecentSortType) {
	var arg0 *C.GtkRecentChooser
	var arg1 C.GtkRecentSortType

	arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(c.Native()))
	arg1 = (C.GtkRecentSortType)(sortType)

	C.gtk_recent_chooser_set_sort_type(arg0, sortType)
}

// UnselectAll unselects all the items inside @chooser.
func (c recentChooser) UnselectAll() {
	var arg0 *C.GtkRecentChooser

	arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(c.Native()))

	C.gtk_recent_chooser_unselect_all(arg0)
}

// UnselectURI unselects @uri inside @chooser.
func (c recentChooser) UnselectURI(uri string) {
	var arg0 *C.GtkRecentChooser
	var arg1 *C.gchar

	arg0 = (*C.GtkRecentChooser)(unsafe.Pointer(c.Native()))
	arg1 = (*C.gchar)(C.CString(uri))
	defer C.free(unsafe.Pointer(arg1))

	C.gtk_recent_chooser_unselect_uri(arg0, uri)
}
