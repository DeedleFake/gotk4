// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	"github.com/diamondburned/gotk4/internal/ptr"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_scale_button_get_type()), F: marshalScaleButton},
	})
}

// ScaleButton provides a button which pops up a scale widget. This kind of
// widget is commonly used for volume controls in multimedia applications, and
// GTK+ provides a VolumeButton subclass that is tailored for this use case.
//
//
// CSS nodes
//
// GtkScaleButton has a single CSS node with name button. To differentiate it
// from a plain Button, it gets the .scale style class.
//
// The popup widget that contains the scale has a .scale-popup style class.
type ScaleButton interface {
	Button
	Actionable
	Activatable
	Buildable
	Orientable

	// Adjustment gets the Adjustment associated with the ScaleButton’s scale.
	// See gtk_range_get_adjustment() for details.
	Adjustment() Adjustment
	// MinusButton retrieves the minus button of the ScaleButton.
	MinusButton() Button
	// PlusButton retrieves the plus button of the ScaleButton.
	PlusButton() Button
	// Popup retrieves the popup of the ScaleButton.
	Popup() Widget
	// Value gets the current value of the scale button.
	Value() float64
	// SetAdjustment sets the Adjustment to be used as a model for the
	// ScaleButton’s scale. See gtk_range_set_adjustment() for details.
	SetAdjustment(adjustment Adjustment)
	// SetIcons sets the icons to be used by the scale button. For details, see
	// the ScaleButton:icons property.
	SetIcons(icons []string)
	// SetValue sets the current value of the scale; if the value is outside the
	// minimum or maximum range values, it will be clamped to fit inside them.
	// The scale button emits the ScaleButton::value-changed signal if the value
	// changes.
	SetValue(value float64)
}

// scaleButton implements the ScaleButton interface.
type scaleButton struct {
	Button
	Actionable
	Activatable
	Buildable
	Orientable
}

var _ ScaleButton = (*scaleButton)(nil)

// WrapScaleButton wraps a GObject to the right type. It is
// primarily used internally.
func WrapScaleButton(obj *externglib.Object) ScaleButton {
	return ScaleButton{
		Button:      WrapButton(obj),
		Actionable:  WrapActionable(obj),
		Activatable: WrapActivatable(obj),
		Buildable:   WrapBuildable(obj),
		Orientable:  WrapOrientable(obj),
	}
}

func marshalScaleButton(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapScaleButton(obj), nil
}

// NewScaleButton constructs a class ScaleButton.
func NewScaleButton(size int, min float64, max float64, step float64, icons []string) ScaleButton {
	var _arg1 C.GtkIconSize
	var _arg2 C.gdouble
	var _arg3 C.gdouble
	var _arg4 C.gdouble
	var _arg5 **C.gchar

	_arg1 = C.GtkIconSize(size)
	_arg2 = C.gdouble(min)
	_arg3 = C.gdouble(max)
	_arg4 = C.gdouble(step)
	_arg5 = (**C.gchar)(C.malloc((len(icons) + 1) * unsafe.Sizeof(int(0))))
	defer C.free(unsafe.Pointer(_arg5))

	{
		var out []*C.gchar
		ptr.SetSlice(unsafe.Pointer(&dst), unsafe.Pointer(_arg5), int(len(icons)))

		for i := range icons {
			_arg5 = (*C.gchar)(C.CString(icons))
			defer C.free(unsafe.Pointer(_arg5))
		}
	}

	var _cret C.GtkScaleButton

	cret = C.gtk_scale_button_new(_arg1, _arg2, _arg3, _arg4, _arg5)

	var _scaleButton ScaleButton

	_scaleButton = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret.Native()))).(ScaleButton)

	return _scaleButton
}

// Adjustment gets the Adjustment associated with the ScaleButton’s scale.
// See gtk_range_get_adjustment() for details.
func (b scaleButton) Adjustment() Adjustment {
	var _arg0 *C.GtkScaleButton

	_arg0 = (*C.GtkScaleButton)(unsafe.Pointer(b.Native()))

	var _cret *C.GtkAdjustment

	cret = C.gtk_scale_button_get_adjustment(_arg0)

	var _adjustment Adjustment

	_adjustment = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret.Native()))).(Adjustment)

	return _adjustment
}

// MinusButton retrieves the minus button of the ScaleButton.
func (b scaleButton) MinusButton() Button {
	var _arg0 *C.GtkScaleButton

	_arg0 = (*C.GtkScaleButton)(unsafe.Pointer(b.Native()))

	var _cret *C.GtkWidget

	cret = C.gtk_scale_button_get_minus_button(_arg0)

	var _ret Button

	_ret = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret.Native()))).(Button)

	return _ret
}

// PlusButton retrieves the plus button of the ScaleButton.
func (b scaleButton) PlusButton() Button {
	var _arg0 *C.GtkScaleButton

	_arg0 = (*C.GtkScaleButton)(unsafe.Pointer(b.Native()))

	var _cret *C.GtkWidget

	cret = C.gtk_scale_button_get_plus_button(_arg0)

	var _ret Button

	_ret = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret.Native()))).(Button)

	return _ret
}

// Popup retrieves the popup of the ScaleButton.
func (b scaleButton) Popup() Widget {
	var _arg0 *C.GtkScaleButton

	_arg0 = (*C.GtkScaleButton)(unsafe.Pointer(b.Native()))

	var _cret *C.GtkWidget

	cret = C.gtk_scale_button_get_popup(_arg0)

	var _widget Widget

	_widget = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret.Native()))).(Widget)

	return _widget
}

// Value gets the current value of the scale button.
func (b scaleButton) Value() float64 {
	var _arg0 *C.GtkScaleButton

	_arg0 = (*C.GtkScaleButton)(unsafe.Pointer(b.Native()))

	var _cret C.gdouble

	cret = C.gtk_scale_button_get_value(_arg0)

	var _gdouble float64

	_gdouble = (float64)(_cret)

	return _gdouble
}

// SetAdjustment sets the Adjustment to be used as a model for the
// ScaleButton’s scale. See gtk_range_set_adjustment() for details.
func (b scaleButton) SetAdjustment(adjustment Adjustment) {
	var _arg0 *C.GtkScaleButton
	var _arg1 *C.GtkAdjustment

	_arg0 = (*C.GtkScaleButton)(unsafe.Pointer(b.Native()))
	_arg1 = (*C.GtkAdjustment)(unsafe.Pointer(adjustment.Native()))

	C.gtk_scale_button_set_adjustment(_arg0, _arg1)
}

// SetIcons sets the icons to be used by the scale button. For details, see
// the ScaleButton:icons property.
func (b scaleButton) SetIcons(icons []string) {
	var _arg0 *C.GtkScaleButton
	var _arg1 **C.gchar

	_arg0 = (*C.GtkScaleButton)(unsafe.Pointer(b.Native()))
	_arg1 = (**C.gchar)(C.malloc((len(icons) + 1) * unsafe.Sizeof(int(0))))
	defer C.free(unsafe.Pointer(_arg1))

	{
		var out []*C.gchar
		ptr.SetSlice(unsafe.Pointer(&dst), unsafe.Pointer(_arg1), int(len(icons)))

		for i := range icons {
			_arg1 = (*C.gchar)(C.CString(icons))
			defer C.free(unsafe.Pointer(_arg1))
		}
	}

	C.gtk_scale_button_set_icons(_arg0, _arg1)
}

// SetValue sets the current value of the scale; if the value is outside the
// minimum or maximum range values, it will be clamped to fit inside them.
// The scale button emits the ScaleButton::value-changed signal if the value
// changes.
func (b scaleButton) SetValue(value float64) {
	var _arg0 *C.GtkScaleButton
	var _arg1 C.gdouble

	_arg0 = (*C.GtkScaleButton)(unsafe.Pointer(b.Native()))
	_arg1 = C.gdouble(value)

	C.gtk_scale_button_set_value(_arg0, _arg1)
}
