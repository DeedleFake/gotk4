// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_color_button_get_type()), F: marshalColorButton},
	})
}

// ColorButtonOverrider contains methods that are overridable.
//
// As of right now, interface overriding and subclassing is not supported
// yet, so the interface currently has no use.
type ColorButtonOverrider interface {
	ColorSet()
}

// ColorButton: the ColorButton is a button which displays the currently
// selected color and allows to open a color selection dialog to change the
// color. It is suitable widget for selecting a color in a preference dialog.
//
//
// CSS nodes
//
// GtkColorButton has a single CSS node with name button. To differentiate it
// from a plain Button, it gets the .color style class.
type ColorButton interface {
	gextras.Objector

	// Alpha returns the current alpha value.
	//
	// Deprecated: since version 3.4.
	Alpha() uint16
	// Title gets the title of the color selection dialog.
	Title() string
	// UseAlpha does the color selection dialog use the alpha channel ?
	//
	// Deprecated: since version 3.4.
	UseAlpha() bool
	// SetAlpha sets the current opacity to be @alpha.
	//
	// Deprecated: since version 3.4.
	SetAlpha(alpha uint16)
	// SetColor sets the current color to be @color.
	//
	// Deprecated.
	SetColor(color *gdk.Color)
	// SetTitle sets the title for the color selection dialog.
	SetTitle(title string)
	// SetUseAlpha sets whether or not the color button should use the alpha
	// channel.
	//
	// Deprecated: since version 3.4.
	SetUseAlpha(useAlpha bool)
}

// ColorButtonClass implements the ColorButton interface.
type ColorButtonClass struct {
	*externglib.Object
	ButtonClass
	ActionableInterface
	ActivatableInterface
	BuildableInterface
	ColorChooserInterface
}

var _ ColorButton = (*ColorButtonClass)(nil)

func wrapColorButton(obj *externglib.Object) ColorButton {
	return &ColorButtonClass{
		Object: obj,
		ButtonClass: ButtonClass{
			Object: obj,
			BinClass: BinClass{
				Object: obj,
				ContainerClass: ContainerClass{
					Object: obj,
					WidgetClass: WidgetClass{
						InitiallyUnowned: externglib.InitiallyUnowned{Object: obj},
						BuildableInterface: BuildableInterface{
							Object: obj,
						},
					},
					BuildableInterface: BuildableInterface{
						Object: obj,
					},
				},
				BuildableInterface: BuildableInterface{
					Object: obj,
				},
			},
			ActionableInterface: ActionableInterface{
				WidgetClass: WidgetClass{
					InitiallyUnowned: externglib.InitiallyUnowned{Object: obj},
					BuildableInterface: BuildableInterface{
						Object: obj,
					},
				},
			},
			ActivatableInterface: ActivatableInterface{
				Object: obj,
			},
			BuildableInterface: BuildableInterface{
				Object: obj,
			},
		},
		ActionableInterface: ActionableInterface{
			WidgetClass: WidgetClass{
				InitiallyUnowned: externglib.InitiallyUnowned{Object: obj},
				BuildableInterface: BuildableInterface{
					Object: obj,
				},
			},
		},
		ActivatableInterface: ActivatableInterface{
			Object: obj,
		},
		BuildableInterface: BuildableInterface{
			Object: obj,
		},
		ColorChooserInterface: ColorChooserInterface{
			Object: obj,
		},
	}
}

func marshalColorButton(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapColorButton(obj), nil
}

// NewColorButton creates a new color button.
//
// This returns a widget in the form of a small button containing a swatch
// representing the current selected color. When the button is clicked, a
// color-selection dialog will open, allowing the user to select a color. The
// swatch will be updated to reflect the new color when the user finishes.
func NewColorButton() *ColorButtonClass {
	var _cret *C.GtkWidget // in

	_cret = C.gtk_color_button_new()

	var _colorButton *ColorButtonClass // out

	_colorButton = gextras.CastObject(
		externglib.Take(unsafe.Pointer(_cret))).(*ColorButtonClass)

	return _colorButton
}

// NewColorButtonWithColor creates a new color button.
//
// Deprecated: since version 3.4.
func NewColorButtonWithColor(color *gdk.Color) *ColorButtonClass {
	var _arg1 *C.GdkColor  // out
	var _cret *C.GtkWidget // in

	_arg1 = (*C.GdkColor)(unsafe.Pointer(*gdk.Color))

	_cret = C.gtk_color_button_new_with_color(_arg1)

	var _colorButton *ColorButtonClass // out

	_colorButton = gextras.CastObject(
		externglib.Take(unsafe.Pointer(_cret))).(*ColorButtonClass)

	return _colorButton
}

// NewColorButtonWithRGBA creates a new color button.
func NewColorButtonWithRGBA(rgba *gdk.RGBA) *ColorButtonClass {
	var _arg1 *C.GdkRGBA   // out
	var _cret *C.GtkWidget // in

	_arg1 = (*C.GdkRGBA)(unsafe.Pointer(*gdk.RGBA))

	_cret = C.gtk_color_button_new_with_rgba(_arg1)

	var _colorButton *ColorButtonClass // out

	_colorButton = gextras.CastObject(
		externglib.Take(unsafe.Pointer(_cret))).(*ColorButtonClass)

	return _colorButton
}

// Alpha returns the current alpha value.
//
// Deprecated: since version 3.4.
func (b *ColorButtonClass) Alpha() uint16 {
	var _arg0 *C.GtkColorButton // out
	var _cret C.guint16         // in

	_arg0 = (*C.GtkColorButton)(unsafe.Pointer((&ColorButton).Native()))

	_cret = C.gtk_color_button_get_alpha(_arg0)

	var _guint16 uint16 // out

	_guint16 = uint16(_cret)

	return _guint16
}

// Title gets the title of the color selection dialog.
func (b *ColorButtonClass) Title() string {
	var _arg0 *C.GtkColorButton // out
	var _cret *C.gchar          // in

	_arg0 = (*C.GtkColorButton)(unsafe.Pointer((&ColorButton).Native()))

	_cret = C.gtk_color_button_get_title(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

// UseAlpha does the color selection dialog use the alpha channel ?
//
// Deprecated: since version 3.4.
func (b *ColorButtonClass) UseAlpha() bool {
	var _arg0 *C.GtkColorButton // out
	var _cret C.gboolean        // in

	_arg0 = (*C.GtkColorButton)(unsafe.Pointer((&ColorButton).Native()))

	_cret = C.gtk_color_button_get_use_alpha(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetAlpha sets the current opacity to be @alpha.
//
// Deprecated: since version 3.4.
func (b *ColorButtonClass) SetAlpha(alpha uint16) {
	var _arg0 *C.GtkColorButton // out
	var _arg1 C.guint16         // out

	_arg0 = (*C.GtkColorButton)(unsafe.Pointer((&ColorButton).Native()))
	_arg1 = C.guint16(alpha)

	C.gtk_color_button_set_alpha(_arg0, _arg1)
}

// SetColor sets the current color to be @color.
//
// Deprecated.
func (b *ColorButtonClass) SetColor(color *gdk.Color) {
	var _arg0 *C.GtkColorButton // out
	var _arg1 *C.GdkColor       // out

	_arg0 = (*C.GtkColorButton)(unsafe.Pointer((&ColorButton).Native()))
	_arg1 = (*C.GdkColor)(unsafe.Pointer(*gdk.Color))

	C.gtk_color_button_set_color(_arg0, _arg1)
}

// SetTitle sets the title for the color selection dialog.
func (b *ColorButtonClass) SetTitle(title string) {
	var _arg0 *C.GtkColorButton // out
	var _arg1 *C.gchar          // out

	_arg0 = (*C.GtkColorButton)(unsafe.Pointer((&ColorButton).Native()))
	_arg1 = (*C.gchar)(C.CString(title))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_color_button_set_title(_arg0, _arg1)
}

// SetUseAlpha sets whether or not the color button should use the alpha
// channel.
//
// Deprecated: since version 3.4.
func (b *ColorButtonClass) SetUseAlpha(useAlpha bool) {
	var _arg0 *C.GtkColorButton // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.GtkColorButton)(unsafe.Pointer((&ColorButton).Native()))
	if useAlpha {
		_arg1 = C.TRUE
	}

	C.gtk_color_button_set_use_alpha(_arg0, _arg1)
}
