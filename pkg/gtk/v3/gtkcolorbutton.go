// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/gdk/v3"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: glib-2.0 gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_color_button_get_type()), F: marshalColorButton},
	})
}

// ColorButton: the ColorButton is a button which displays the currently
// selected color and allows to open a color selection dialog to change the
// color. It is suitable widget for selecting a color in a preference dialog.
//
//
// CSS nodes
//
// GtkColorButton has a single CSS node with name button. To differentiate it
// from a plain Button, it gets the .color style class.
type ColorButton interface {
	Button
	Actionable
	Activatable
	Buildable
	ColorChooser

	// Alpha returns the current alpha value.
	Alpha() uint16
	// Color sets @color to be the current color in the ColorButton widget.
	Color() gdk.Color
	// Title gets the title of the color selection dialog.
	Title() string
	// UseAlpha does the color selection dialog use the alpha channel ?
	UseAlpha() bool
	// SetAlpha sets the current opacity to be @alpha.
	SetAlpha(alpha uint16)
	// SetColor sets the current color to be @color.
	SetColor(color *gdk.Color)
	// SetTitle sets the title for the color selection dialog.
	SetTitle(title string)
	// SetUseAlpha sets whether or not the color button should use the alpha
	// channel.
	SetUseAlpha(useAlpha bool)
}

// colorButton implements the ColorButton class.
type colorButton struct {
	Button
	Actionable
	Activatable
	Buildable
	ColorChooser
}

var _ ColorButton = (*colorButton)(nil)

// WrapColorButton wraps a GObject to the right type. It is
// primarily used internally.
func WrapColorButton(obj *externglib.Object) ColorButton {
	return colorButton{
		Button:       WrapButton(obj),
		Actionable:   WrapActionable(obj),
		Activatable:  WrapActivatable(obj),
		Buildable:    WrapBuildable(obj),
		ColorChooser: WrapColorChooser(obj),
	}
}

func marshalColorButton(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapColorButton(obj), nil
}

// Alpha returns the current alpha value.
func (b colorButton) Alpha() uint16 {
	var _arg0 *C.GtkColorButton // out

	_arg0 = (*C.GtkColorButton)(unsafe.Pointer(b.Native()))

	var _cret C.guint16 // in

	_cret = C.gtk_color_button_get_alpha(_arg0)

	var _guint16 uint16 // out

	_guint16 = (uint16)(_cret)

	return _guint16
}

// Color sets @color to be the current color in the ColorButton widget.
func (b colorButton) Color() gdk.Color {
	var _arg0 *C.GtkColorButton // out

	_arg0 = (*C.GtkColorButton)(unsafe.Pointer(b.Native()))

	var _color gdk.Color

	C.gtk_color_button_get_color(_arg0, (*C.GdkColor)(unsafe.Pointer(&_color)))

	return _color
}

// Title gets the title of the color selection dialog.
func (b colorButton) Title() string {
	var _arg0 *C.GtkColorButton // out

	_arg0 = (*C.GtkColorButton)(unsafe.Pointer(b.Native()))

	var _cret *C.gchar // in

	_cret = C.gtk_color_button_get_title(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

// UseAlpha does the color selection dialog use the alpha channel ?
func (b colorButton) UseAlpha() bool {
	var _arg0 *C.GtkColorButton // out

	_arg0 = (*C.GtkColorButton)(unsafe.Pointer(b.Native()))

	var _cret C.gboolean // in

	_cret = C.gtk_color_button_get_use_alpha(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetAlpha sets the current opacity to be @alpha.
func (b colorButton) SetAlpha(alpha uint16) {
	var _arg0 *C.GtkColorButton // out
	var _arg1 C.guint16         // out

	_arg0 = (*C.GtkColorButton)(unsafe.Pointer(b.Native()))
	_arg1 = C.guint16(alpha)

	C.gtk_color_button_set_alpha(_arg0, _arg1)
}

// SetColor sets the current color to be @color.
func (b colorButton) SetColor(color *gdk.Color) {
	var _arg0 *C.GtkColorButton // out
	var _arg1 *C.GdkColor       // out

	_arg0 = (*C.GtkColorButton)(unsafe.Pointer(b.Native()))
	_arg1 = (*C.GdkColor)(unsafe.Pointer(color.Native()))

	C.gtk_color_button_set_color(_arg0, _arg1)
}

// SetTitle sets the title for the color selection dialog.
func (b colorButton) SetTitle(title string) {
	var _arg0 *C.GtkColorButton // out
	var _arg1 *C.gchar          // out

	_arg0 = (*C.GtkColorButton)(unsafe.Pointer(b.Native()))
	_arg1 = (*C.gchar)(C.CString(title))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_color_button_set_title(_arg0, _arg1)
}

// SetUseAlpha sets whether or not the color button should use the alpha
// channel.
func (b colorButton) SetUseAlpha(useAlpha bool) {
	var _arg0 *C.GtkColorButton // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.GtkColorButton)(unsafe.Pointer(b.Native()))
	if useAlpha {
		_arg1 = C.TRUE
	}

	C.gtk_color_button_set_use_alpha(_arg0, _arg1)
}
