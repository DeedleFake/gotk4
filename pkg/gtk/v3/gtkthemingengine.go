// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
	"github.com/diamondburned/gotk4/pkg/pango"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <stdbool.h>
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_theming_engine_get_type()), F: marshalThemingEngine},
	})
}

// ThemingEngine was the object used for rendering themed content in GTK+
// widgets. It used to allow overriding GTK+'s default implementation of
// rendering functions by allowing engines to be loaded as modules.
//
// ThemingEngine has been deprecated in GTK+ 3.14 and will be ignored for
// rendering. The advancements in CSS theming are good enough to allow themers
// to achieve their goals without the need to modify source code.
type ThemingEngine interface {
	gextras.Objector

	// BackgroundColor gets the background color for a given state.
	BackgroundColor(state StateFlags) gdk.RGBA
	// Border gets the border for a given state as a Border.
	Border(state StateFlags) Border
	// BorderColor gets the border color for a given state.
	BorderColor(state StateFlags) gdk.RGBA
	// Color gets the foreground color for a given state.
	Color(state StateFlags) gdk.RGBA
	// Direction returns the widget direction used for rendering.
	Direction() TextDirection
	// Font returns the font description for a given state.
	Font(state StateFlags) *pango.FontDescription
	// JunctionSides returns the widget direction used for rendering.
	JunctionSides() JunctionSides
	// Margin gets the margin for a given state as a Border.
	Margin(state StateFlags) Border
	// Padding gets the padding for a given state as a Border.
	Padding(state StateFlags) Border
	// Path returns the widget path used for style matching.
	Path() *WidgetPath
	// Property gets a property value as retrieved from the style settings that
	// apply to the currently rendered element.
	Property(property string, state StateFlags) externglib.Value
	// Screen returns the Screen to which @engine currently rendering to.
	Screen() gdk.Screen
	// State returns the state used when rendering.
	State() StateFlags
	// StyleProperty gets the value for a widget style property.
	StyleProperty(propertyName string) externglib.Value
	// HasClass returns true if the currently rendered contents have defined the
	// given class name.
	HasClass(styleClass string) bool
	// HasRegion returns true if the currently rendered contents have the region
	// defined. If @flags_return is not nil, it is set to the flags affecting
	// the region.
	HasRegion(styleRegion string) (flags RegionFlags, ok bool)
	// LookupColor looks up and resolves a color name in the current style’s
	// color map.
	LookupColor(colorName string) (color gdk.RGBA, ok bool)
	// StateIsRunning returns true if there is a transition animation running
	// for the current region (see gtk_style_context_push_animatable_region()).
	//
	// If @progress is not nil, the animation progress will be returned there,
	// 0.0 means the state is closest to being false, while 1.0 means it’s
	// closest to being true. This means transition animations will run from 0
	// to 1 when @state is being set to true and from 1 to 0 when it’s being set
	// to false.
	StateIsRunning(state StateType) (progress float64, ok bool)
}

// themingEngine implements the ThemingEngine interface.
type themingEngine struct {
	gextras.Objector
}

var _ ThemingEngine = (*themingEngine)(nil)

// WrapThemingEngine wraps a GObject to the right type. It is
// primarily used internally.
func WrapThemingEngine(obj *externglib.Object) ThemingEngine {
	return ThemingEngine{
		Objector: obj,
	}
}

func marshalThemingEngine(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapThemingEngine(obj), nil
}

// BackgroundColor gets the background color for a given state.
func (e themingEngine) BackgroundColor(state StateFlags) gdk.RGBA {
	var arg0 *C.GtkThemingEngine
	var arg1 C.GtkStateFlags
	var arg2 *C.GdkRGBA // out

	arg0 = (*C.GtkThemingEngine)(e.Native())
	arg1 = (C.GtkStateFlags)(state)

	C.gtk_theming_engine_get_background_color(arg0, arg1, &arg2)

	var ret0 *gdk.RGBA

	{
		ret0 = gdk.WrapRGBA(unsafe.Pointer(arg2))
	}

	return ret0
}

// Border gets the border for a given state as a Border.
func (e themingEngine) Border(state StateFlags) Border {
	var arg0 *C.GtkThemingEngine
	var arg1 C.GtkStateFlags
	var arg2 *C.GtkBorder // out

	arg0 = (*C.GtkThemingEngine)(e.Native())
	arg1 = (C.GtkStateFlags)(state)

	C.gtk_theming_engine_get_border(arg0, arg1, &arg2)

	var ret0 *Border

	{
		ret0 = WrapBorder(unsafe.Pointer(arg2))
	}

	return ret0
}

// BorderColor gets the border color for a given state.
func (e themingEngine) BorderColor(state StateFlags) gdk.RGBA {
	var arg0 *C.GtkThemingEngine
	var arg1 C.GtkStateFlags
	var arg2 *C.GdkRGBA // out

	arg0 = (*C.GtkThemingEngine)(e.Native())
	arg1 = (C.GtkStateFlags)(state)

	C.gtk_theming_engine_get_border_color(arg0, arg1, &arg2)

	var ret0 *gdk.RGBA

	{
		ret0 = gdk.WrapRGBA(unsafe.Pointer(arg2))
	}

	return ret0
}

// Color gets the foreground color for a given state.
func (e themingEngine) Color(state StateFlags) gdk.RGBA {
	var arg0 *C.GtkThemingEngine
	var arg1 C.GtkStateFlags
	var arg2 *C.GdkRGBA // out

	arg0 = (*C.GtkThemingEngine)(e.Native())
	arg1 = (C.GtkStateFlags)(state)

	C.gtk_theming_engine_get_color(arg0, arg1, &arg2)

	var ret0 *gdk.RGBA

	{
		ret0 = gdk.WrapRGBA(unsafe.Pointer(arg2))
	}

	return ret0
}

// Direction returns the widget direction used for rendering.
func (e themingEngine) Direction() TextDirection {
	var arg0 *C.GtkThemingEngine

	arg0 = (*C.GtkThemingEngine)(e.Native())

	ret := C.gtk_theming_engine_get_direction(arg0)

	var ret0 TextDirection

	ret0 = TextDirection(ret)

	return ret0
}

// Font returns the font description for a given state.
func (e themingEngine) Font(state StateFlags) *pango.FontDescription {
	var arg0 *C.GtkThemingEngine
	var arg1 C.GtkStateFlags

	arg0 = (*C.GtkThemingEngine)(e.Native())
	arg1 = (C.GtkStateFlags)(state)

	ret := C.gtk_theming_engine_get_font(arg0, arg1)

	var ret0 *pango.FontDescription

	{
		ret0 = pango.WrapFontDescription(unsafe.Pointer(ret))
	}

	return ret0
}

// JunctionSides returns the widget direction used for rendering.
func (e themingEngine) JunctionSides() JunctionSides {
	var arg0 *C.GtkThemingEngine

	arg0 = (*C.GtkThemingEngine)(e.Native())

	ret := C.gtk_theming_engine_get_junction_sides(arg0)

	var ret0 JunctionSides

	ret0 = JunctionSides(ret)

	return ret0
}

// Margin gets the margin for a given state as a Border.
func (e themingEngine) Margin(state StateFlags) Border {
	var arg0 *C.GtkThemingEngine
	var arg1 C.GtkStateFlags
	var arg2 *C.GtkBorder // out

	arg0 = (*C.GtkThemingEngine)(e.Native())
	arg1 = (C.GtkStateFlags)(state)

	C.gtk_theming_engine_get_margin(arg0, arg1, &arg2)

	var ret0 *Border

	{
		ret0 = WrapBorder(unsafe.Pointer(arg2))
	}

	return ret0
}

// Padding gets the padding for a given state as a Border.
func (e themingEngine) Padding(state StateFlags) Border {
	var arg0 *C.GtkThemingEngine
	var arg1 C.GtkStateFlags
	var arg2 *C.GtkBorder // out

	arg0 = (*C.GtkThemingEngine)(e.Native())
	arg1 = (C.GtkStateFlags)(state)

	C.gtk_theming_engine_get_padding(arg0, arg1, &arg2)

	var ret0 *Border

	{
		ret0 = WrapBorder(unsafe.Pointer(arg2))
	}

	return ret0
}

// Path returns the widget path used for style matching.
func (e themingEngine) Path() *WidgetPath {
	var arg0 *C.GtkThemingEngine

	arg0 = (*C.GtkThemingEngine)(e.Native())

	ret := C.gtk_theming_engine_get_path(arg0)

	var ret0 *WidgetPath

	{
		ret0 = WrapWidgetPath(unsafe.Pointer(ret))
	}

	return ret0
}

// Property gets a property value as retrieved from the style settings that
// apply to the currently rendered element.
func (e themingEngine) Property(property string, state StateFlags) externglib.Value {
	var arg0 *C.GtkThemingEngine
	var arg1 *C.gchar
	var arg2 C.GtkStateFlags
	var arg3 *C.GValue // out

	arg0 = (*C.GtkThemingEngine)(e.Native())
	arg1 = (*C.gchar)(C.CString(property))
	defer C.free(unsafe.Pointer(arg1))
	arg2 = (C.GtkStateFlags)(state)

	C.gtk_theming_engine_get_property(arg0, arg1, arg2, &arg3)

	var ret0 *externglib.Value

	ret0 = externglib.ValueFromNative(unsafe.Pointer(arg3))
	runtime.SetFinalizer(ret0, func(v *externglib.Value) {
		C.g_value_unset((*C.GValue)(v.GValue))
	})

	return ret0
}

// Screen returns the Screen to which @engine currently rendering to.
func (e themingEngine) Screen() gdk.Screen {
	var arg0 *C.GtkThemingEngine

	arg0 = (*C.GtkThemingEngine)(e.Native())

	ret := C.gtk_theming_engine_get_screen(arg0)

	var ret0 gdk.Screen

	ret0 = gextras.CastObject(externglib.Take(unsafe.Pointer(ret.Native()))).(gdk.Screen)

	return ret0
}

// State returns the state used when rendering.
func (e themingEngine) State() StateFlags {
	var arg0 *C.GtkThemingEngine

	arg0 = (*C.GtkThemingEngine)(e.Native())

	ret := C.gtk_theming_engine_get_state(arg0)

	var ret0 StateFlags

	ret0 = StateFlags(ret)

	return ret0
}

// StyleProperty gets the value for a widget style property.
func (e themingEngine) StyleProperty(propertyName string) externglib.Value {
	var arg0 *C.GtkThemingEngine
	var arg1 *C.gchar
	var arg2 *C.GValue // out

	arg0 = (*C.GtkThemingEngine)(e.Native())
	arg1 = (*C.gchar)(C.CString(propertyName))
	defer C.free(unsafe.Pointer(arg1))

	C.gtk_theming_engine_get_style_property(arg0, arg1, &arg2)

	var ret0 *externglib.Value

	ret0 = externglib.ValueFromNative(unsafe.Pointer(arg2))

	return ret0
}

// HasClass returns true if the currently rendered contents have defined the
// given class name.
func (e themingEngine) HasClass(styleClass string) bool {
	var arg0 *C.GtkThemingEngine
	var arg1 *C.gchar

	arg0 = (*C.GtkThemingEngine)(e.Native())
	arg1 = (*C.gchar)(C.CString(styleClass))
	defer C.free(unsafe.Pointer(arg1))

	ret := C.gtk_theming_engine_has_class(arg0, arg1)

	var ret0 bool

	ret0 = C.bool(ret) != C.false

	return ret0
}

// HasRegion returns true if the currently rendered contents have the region
// defined. If @flags_return is not nil, it is set to the flags affecting
// the region.
func (e themingEngine) HasRegion(styleRegion string) (flags RegionFlags, ok bool) {
	var arg0 *C.GtkThemingEngine
	var arg1 *C.gchar
	var arg2 *C.GtkRegionFlags // out

	arg0 = (*C.GtkThemingEngine)(e.Native())
	arg1 = (*C.gchar)(C.CString(styleRegion))
	defer C.free(unsafe.Pointer(arg1))

	ret := C.gtk_theming_engine_has_region(arg0, arg1, &arg2)

	var ret0 *RegionFlags
	var ret1 bool

	ret0 = (*RegionFlags)(arg2)

	ret1 = C.bool(ret) != C.false

	return ret0, ret1
}

// LookupColor looks up and resolves a color name in the current style’s
// color map.
func (e themingEngine) LookupColor(colorName string) (color gdk.RGBA, ok bool) {
	var arg0 *C.GtkThemingEngine
	var arg1 *C.gchar
	var arg2 *C.GdkRGBA // out

	arg0 = (*C.GtkThemingEngine)(e.Native())
	arg1 = (*C.gchar)(C.CString(colorName))
	defer C.free(unsafe.Pointer(arg1))

	ret := C.gtk_theming_engine_lookup_color(arg0, arg1, &arg2)

	var ret0 *gdk.RGBA
	var ret1 bool

	{
		ret0 = gdk.WrapRGBA(unsafe.Pointer(arg2))
	}

	ret1 = C.bool(ret) != C.false

	return ret0, ret1
}

// StateIsRunning returns true if there is a transition animation running
// for the current region (see gtk_style_context_push_animatable_region()).
//
// If @progress is not nil, the animation progress will be returned there,
// 0.0 means the state is closest to being false, while 1.0 means it’s
// closest to being true. This means transition animations will run from 0
// to 1 when @state is being set to true and from 1 to 0 when it’s being set
// to false.
func (e themingEngine) StateIsRunning(state StateType) (progress float64, ok bool) {
	var arg0 *C.GtkThemingEngine
	var arg1 C.GtkStateType
	var arg2 *C.gdouble // out

	arg0 = (*C.GtkThemingEngine)(e.Native())
	arg1 = (C.GtkStateType)(state)

	ret := C.gtk_theming_engine_state_is_running(arg0, arg1, &arg2)

	var ret0 float64
	var ret1 bool

	ret0 = float64(arg2)

	ret1 = C.bool(ret) != C.false

	return ret0, ret1
}

type ThemingEnginePrivate struct {
	native C.GtkThemingEnginePrivate
}

// WrapThemingEnginePrivate wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapThemingEnginePrivate(ptr unsafe.Pointer) *ThemingEnginePrivate {
	if ptr == nil {
		return nil
	}

	return (*ThemingEnginePrivate)(ptr)
}

func marshalThemingEnginePrivate(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapThemingEnginePrivate(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (t *ThemingEnginePrivate) Native() unsafe.Pointer {
	return unsafe.Pointer(&t.native)
}
