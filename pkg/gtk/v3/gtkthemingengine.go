// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/cairo"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
	"github.com/diamondburned/gotk4/pkg/gdkpixbuf/v2"
	"github.com/diamondburned/gotk4/pkg/pango"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_theming_engine_get_type()), F: marshalThemingEnginer},
	})
}

// ThemingEnginerOverrider contains methods that are overridable.
//
// As of right now, interface overriding and subclassing is not supported
// yet, so the interface currently has no use.
type ThemingEnginerOverrider interface {
	RenderActivity(cr *cairo.Context, x float64, y float64, width float64, height float64)
	RenderArrow(cr *cairo.Context, angle float64, x float64, y float64, size float64)
	RenderBackground(cr *cairo.Context, x float64, y float64, width float64, height float64)
	RenderCheck(cr *cairo.Context, x float64, y float64, width float64, height float64)
	RenderExpander(cr *cairo.Context, x float64, y float64, width float64, height float64)
	RenderFocus(cr *cairo.Context, x float64, y float64, width float64, height float64)
	RenderFrame(cr *cairo.Context, x float64, y float64, width float64, height float64)
	RenderHandle(cr *cairo.Context, x float64, y float64, width float64, height float64)
	RenderIcon(cr *cairo.Context, pixbuf gdkpixbuf.Pixbuffer, x float64, y float64)
	RenderIconSurface(cr *cairo.Context, surface *cairo.Surface, x float64, y float64)
	RenderLayout(cr *cairo.Context, x float64, y float64, layout pango.Layouter)
	RenderLine(cr *cairo.Context, x0 float64, y0 float64, x1 float64, y1 float64)
	RenderOption(cr *cairo.Context, x float64, y float64, width float64, height float64)
}

// ThemingEnginer describes ThemingEngine's methods.
type ThemingEnginer interface {
	gextras.Objector

	Direction() TextDirection
	JunctionSides() JunctionSides
	Path() *WidgetPath
	Screen() *gdk.Screen
	State() StateFlags
	StyleProperty(propertyName string) externglib.Value
	HasClass(styleClass string) bool
	HasRegion(styleRegion string) (RegionFlags, bool)
	LookupColor(colorName string) (gdk.RGBA, bool)
}

// ThemingEngine was the object used for rendering themed content in GTK+
// widgets. It used to allow overriding GTK+'s default implementation of
// rendering functions by allowing engines to be loaded as modules.
//
// ThemingEngine has been deprecated in GTK+ 3.14 and will be ignored for
// rendering. The advancements in CSS theming are good enough to allow themers
// to achieve their goals without the need to modify source code.
type ThemingEngine struct {
	*externglib.Object
}

var _ ThemingEnginer = (*ThemingEngine)(nil)

func wrapThemingEnginer(obj *externglib.Object) ThemingEnginer {
	return &ThemingEngine{
		Object: obj,
	}
}

func marshalThemingEnginer(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapThemingEnginer(obj), nil
}

// Direction returns the widget direction used for rendering.
//
// Deprecated: Use gtk_theming_engine_get_state() and check for
// K_STATE_FLAG_DIR_LTR and K_STATE_FLAG_DIR_RTL instead.
func (engine *ThemingEngine) Direction() TextDirection {
	var _arg0 *C.GtkThemingEngine // out
	var _cret C.GtkTextDirection  // in

	_arg0 = (*C.GtkThemingEngine)(unsafe.Pointer(engine.Native()))

	_cret = C.gtk_theming_engine_get_direction(_arg0)

	var _textDirection TextDirection // out

	_textDirection = (TextDirection)(_cret)

	return _textDirection
}

// JunctionSides returns the widget direction used for rendering.
//
// Deprecated: since version 3.14.
func (engine *ThemingEngine) JunctionSides() JunctionSides {
	var _arg0 *C.GtkThemingEngine // out
	var _cret C.GtkJunctionSides  // in

	_arg0 = (*C.GtkThemingEngine)(unsafe.Pointer(engine.Native()))

	_cret = C.gtk_theming_engine_get_junction_sides(_arg0)

	var _junctionSides JunctionSides // out

	_junctionSides = (JunctionSides)(_cret)

	return _junctionSides
}

// Path returns the widget path used for style matching.
//
// Deprecated: since version 3.14.
func (engine *ThemingEngine) Path() *WidgetPath {
	var _arg0 *C.GtkThemingEngine // out
	var _cret *C.GtkWidgetPath    // in

	_arg0 = (*C.GtkThemingEngine)(unsafe.Pointer(engine.Native()))

	_cret = C.gtk_theming_engine_get_path(_arg0)

	var _widgetPath *WidgetPath // out

	_widgetPath = (*WidgetPath)(unsafe.Pointer(_cret))
	C.gtk_widget_path_ref(_cret)
	runtime.SetFinalizer(_widgetPath, func(v *WidgetPath) {
		C.gtk_widget_path_unref((*C.GtkWidgetPath)(unsafe.Pointer(v)))
	})

	return _widgetPath
}

// Screen returns the Screen to which @engine currently rendering to.
//
// Deprecated: since version 3.14.
func (engine *ThemingEngine) Screen() *gdk.Screen {
	var _arg0 *C.GtkThemingEngine // out
	var _cret *C.GdkScreen        // in

	_arg0 = (*C.GtkThemingEngine)(unsafe.Pointer(engine.Native()))

	_cret = C.gtk_theming_engine_get_screen(_arg0)

	var _screen *gdk.Screen // out

	_screen = (gextras.CastObject(externglib.Take(unsafe.Pointer(_cret)))).(*gdk.Screen)

	return _screen
}

// State returns the state used when rendering.
//
// Deprecated: since version 3.14.
func (engine *ThemingEngine) State() StateFlags {
	var _arg0 *C.GtkThemingEngine // out
	var _cret C.GtkStateFlags     // in

	_arg0 = (*C.GtkThemingEngine)(unsafe.Pointer(engine.Native()))

	_cret = C.gtk_theming_engine_get_state(_arg0)

	var _stateFlags StateFlags // out

	_stateFlags = (StateFlags)(_cret)

	return _stateFlags
}

// StyleProperty gets the value for a widget style property.
//
// Deprecated: since version 3.14.
func (engine *ThemingEngine) StyleProperty(propertyName string) externglib.Value {
	var _arg0 *C.GtkThemingEngine // out
	var _arg1 *C.gchar            // out
	var _arg2 C.GValue            // in

	_arg0 = (*C.GtkThemingEngine)(unsafe.Pointer(engine.Native()))
	_arg1 = (*C.gchar)(C.CString(propertyName))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_theming_engine_get_style_property(_arg0, _arg1, &_arg2)

	var _value externglib.Value // out

	_value = *externglib.ValueFromNative(unsafe.Pointer((&_arg2)))

	return _value
}

// HasClass returns true if the currently rendered contents have defined the
// given class name.
//
// Deprecated: since version 3.14.
func (engine *ThemingEngine) HasClass(styleClass string) bool {
	var _arg0 *C.GtkThemingEngine // out
	var _arg1 *C.gchar            // out
	var _cret C.gboolean          // in

	_arg0 = (*C.GtkThemingEngine)(unsafe.Pointer(engine.Native()))
	_arg1 = (*C.gchar)(C.CString(styleClass))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_theming_engine_has_class(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// HasRegion returns true if the currently rendered contents have the region
// defined. If @flags_return is not nil, it is set to the flags affecting the
// region.
//
// Deprecated: since version 3.14.
func (engine *ThemingEngine) HasRegion(styleRegion string) (RegionFlags, bool) {
	var _arg0 *C.GtkThemingEngine // out
	var _arg1 *C.gchar            // out
	var _arg2 C.GtkRegionFlags    // in
	var _cret C.gboolean          // in

	_arg0 = (*C.GtkThemingEngine)(unsafe.Pointer(engine.Native()))
	_arg1 = (*C.gchar)(C.CString(styleRegion))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_theming_engine_has_region(_arg0, _arg1, &_arg2)

	var _flags RegionFlags // out
	var _ok bool           // out

	_flags = (RegionFlags)(_arg2)
	if _cret != 0 {
		_ok = true
	}

	return _flags, _ok
}

// LookupColor looks up and resolves a color name in the current styleâ€™s color
// map.
//
// Deprecated: since version 3.14.
func (engine *ThemingEngine) LookupColor(colorName string) (gdk.RGBA, bool) {
	var _arg0 *C.GtkThemingEngine // out
	var _arg1 *C.gchar            // out
	var _arg2 C.GdkRGBA           // in
	var _cret C.gboolean          // in

	_arg0 = (*C.GtkThemingEngine)(unsafe.Pointer(engine.Native()))
	_arg1 = (*C.gchar)(C.CString(colorName))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_theming_engine_lookup_color(_arg0, _arg1, &_arg2)

	var _color gdk.RGBA // out
	var _ok bool        // out

	_color = *(*gdk.RGBA)(unsafe.Pointer((&_arg2)))
	if _cret != 0 {
		_ok = true
	}

	return _color, _ok
}
