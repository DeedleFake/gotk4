// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/gdk/v3"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_theming_engine_get_type()), F: marshalThemingEngine},
	})
}

// ThemingEngine was the object used for rendering themed content in GTK+
// widgets. It used to allow overriding GTK+'s default implementation of
// rendering functions by allowing engines to be loaded as modules.
//
// ThemingEngine has been deprecated in GTK+ 3.14 and will be ignored for
// rendering. The advancements in CSS theming are good enough to allow themers
// to achieve their goals without the need to modify source code.
type ThemingEngine interface {
	gextras.Objector

	// BackgroundColor gets the background color for a given state.
	BackgroundColor(state StateFlags) gdk.RGBA
	// Border gets the border for a given state as a Border.
	Border(state StateFlags) Border
	// BorderColor gets the border color for a given state.
	BorderColor(state StateFlags) gdk.RGBA
	// Color gets the foreground color for a given state.
	Color(state StateFlags) gdk.RGBA
	// Margin gets the margin for a given state as a Border.
	Margin(state StateFlags) Border
	// Padding gets the padding for a given state as a Border.
	Padding(state StateFlags) Border
	// Property gets a property value as retrieved from the style settings that
	// apply to the currently rendered element.
	Property(property string, state StateFlags) *externglib.Value
	// StyleProperty gets the value for a widget style property.
	StyleProperty(propertyName string) *externglib.Value
	// HasClass returns true if the currently rendered contents have defined the
	// given class name.
	HasClass(styleClass string) bool
	// LookupColor looks up and resolves a color name in the current style’s
	// color map.
	LookupColor(colorName string) (gdk.RGBA, bool)
	// StateIsRunning returns true if there is a transition animation running
	// for the current region (see gtk_style_context_push_animatable_region()).
	//
	// If @progress is not nil, the animation progress will be returned there,
	// 0.0 means the state is closest to being false, while 1.0 means it’s
	// closest to being true. This means transition animations will run from 0
	// to 1 when @state is being set to true and from 1 to 0 when it’s being set
	// to false.
	StateIsRunning(state StateType) (float64, bool)
}

// themingEngine implements the ThemingEngine interface.
type themingEngine struct {
	gextras.Objector
}

var _ ThemingEngine = (*themingEngine)(nil)

// WrapThemingEngine wraps a GObject to the right type. It is
// primarily used internally.
func WrapThemingEngine(obj *externglib.Object) ThemingEngine {
	return ThemingEngine{
		Objector: obj,
	}
}

func marshalThemingEngine(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapThemingEngine(obj), nil
}

// BackgroundColor gets the background color for a given state.
func (e themingEngine) BackgroundColor(state StateFlags) gdk.RGBA {
	var _arg0 *C.GtkThemingEngine
	var _arg1 C.GtkStateFlags

	_arg0 = (*C.GtkThemingEngine)(unsafe.Pointer(e.Native()))
	_arg1 = (C.GtkStateFlags)(state)

	var _color gdk.RGBA

	C.gtk_theming_engine_get_background_color(_arg0, _arg1, (*C.GdkRGBA)(unsafe.Pointer(&_color)))

	return _color
}

// Border gets the border for a given state as a Border.
func (e themingEngine) Border(state StateFlags) Border {
	var _arg0 *C.GtkThemingEngine
	var _arg1 C.GtkStateFlags

	_arg0 = (*C.GtkThemingEngine)(unsafe.Pointer(e.Native()))
	_arg1 = (C.GtkStateFlags)(state)

	var _border Border

	C.gtk_theming_engine_get_border(_arg0, _arg1, (*C.GtkBorder)(unsafe.Pointer(&_border)))

	return _border
}

// BorderColor gets the border color for a given state.
func (e themingEngine) BorderColor(state StateFlags) gdk.RGBA {
	var _arg0 *C.GtkThemingEngine
	var _arg1 C.GtkStateFlags

	_arg0 = (*C.GtkThemingEngine)(unsafe.Pointer(e.Native()))
	_arg1 = (C.GtkStateFlags)(state)

	var _color gdk.RGBA

	C.gtk_theming_engine_get_border_color(_arg0, _arg1, (*C.GdkRGBA)(unsafe.Pointer(&_color)))

	return _color
}

// Color gets the foreground color for a given state.
func (e themingEngine) Color(state StateFlags) gdk.RGBA {
	var _arg0 *C.GtkThemingEngine
	var _arg1 C.GtkStateFlags

	_arg0 = (*C.GtkThemingEngine)(unsafe.Pointer(e.Native()))
	_arg1 = (C.GtkStateFlags)(state)

	var _color gdk.RGBA

	C.gtk_theming_engine_get_color(_arg0, _arg1, (*C.GdkRGBA)(unsafe.Pointer(&_color)))

	return _color
}

// Margin gets the margin for a given state as a Border.
func (e themingEngine) Margin(state StateFlags) Border {
	var _arg0 *C.GtkThemingEngine
	var _arg1 C.GtkStateFlags

	_arg0 = (*C.GtkThemingEngine)(unsafe.Pointer(e.Native()))
	_arg1 = (C.GtkStateFlags)(state)

	var _margin Border

	C.gtk_theming_engine_get_margin(_arg0, _arg1, (*C.GtkBorder)(unsafe.Pointer(&_margin)))

	return _margin
}

// Padding gets the padding for a given state as a Border.
func (e themingEngine) Padding(state StateFlags) Border {
	var _arg0 *C.GtkThemingEngine
	var _arg1 C.GtkStateFlags

	_arg0 = (*C.GtkThemingEngine)(unsafe.Pointer(e.Native()))
	_arg1 = (C.GtkStateFlags)(state)

	var _padding Border

	C.gtk_theming_engine_get_padding(_arg0, _arg1, (*C.GtkBorder)(unsafe.Pointer(&_padding)))

	return _padding
}

// Property gets a property value as retrieved from the style settings that
// apply to the currently rendered element.
func (e themingEngine) Property(property string, state StateFlags) *externglib.Value {
	var _arg0 *C.GtkThemingEngine
	var _arg1 *C.gchar
	var _arg2 C.GtkStateFlags

	_arg0 = (*C.GtkThemingEngine)(unsafe.Pointer(e.Native()))
	_arg1 = (*C.gchar)(C.CString(property))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (C.GtkStateFlags)(state)

	var _arg3 C.GValue

	C.gtk_theming_engine_get_property(_arg0, _arg1, _arg2, &_arg3)

	var _value *externglib.Value

	_value = externglib.ValueFromNative(unsafe.Pointer(_arg3))
	runtime.SetFinalizer(_value, func(v *externglib.Value) {
		C.g_value_unset((*C.GValue)(v.GValue))
	})

	return _value
}

// StyleProperty gets the value for a widget style property.
func (e themingEngine) StyleProperty(propertyName string) *externglib.Value {
	var _arg0 *C.GtkThemingEngine
	var _arg1 *C.gchar

	_arg0 = (*C.GtkThemingEngine)(unsafe.Pointer(e.Native()))
	_arg1 = (*C.gchar)(C.CString(propertyName))
	defer C.free(unsafe.Pointer(_arg1))

	var _arg2 C.GValue

	C.gtk_theming_engine_get_style_property(_arg0, _arg1, &_arg2)

	var _value *externglib.Value

	_value = externglib.ValueFromNative(unsafe.Pointer(_arg2))

	return _value
}

// HasClass returns true if the currently rendered contents have defined the
// given class name.
func (e themingEngine) HasClass(styleClass string) bool {
	var _arg0 *C.GtkThemingEngine
	var _arg1 *C.gchar

	_arg0 = (*C.GtkThemingEngine)(unsafe.Pointer(e.Native()))
	_arg1 = (*C.gchar)(C.CString(styleClass))
	defer C.free(unsafe.Pointer(_arg1))

	var _cret C.gboolean

	_cret = C.gtk_theming_engine_has_class(_arg0, _arg1)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// LookupColor looks up and resolves a color name in the current style’s
// color map.
func (e themingEngine) LookupColor(colorName string) (gdk.RGBA, bool) {
	var _arg0 *C.GtkThemingEngine
	var _arg1 *C.gchar

	_arg0 = (*C.GtkThemingEngine)(unsafe.Pointer(e.Native()))
	_arg1 = (*C.gchar)(C.CString(colorName))
	defer C.free(unsafe.Pointer(_arg1))

	var _color gdk.RGBA
	var _cret C.gboolean

	_cret = C.gtk_theming_engine_lookup_color(_arg0, _arg1, (*C.GdkRGBA)(unsafe.Pointer(&_color)))

	var _ok bool

	if _cret {
		_ok = true
	}

	return _color, _ok
}

// StateIsRunning returns true if there is a transition animation running
// for the current region (see gtk_style_context_push_animatable_region()).
//
// If @progress is not nil, the animation progress will be returned there,
// 0.0 means the state is closest to being false, while 1.0 means it’s
// closest to being true. This means transition animations will run from 0
// to 1 when @state is being set to true and from 1 to 0 when it’s being set
// to false.
func (e themingEngine) StateIsRunning(state StateType) (float64, bool) {
	var _arg0 *C.GtkThemingEngine
	var _arg1 C.GtkStateType

	_arg0 = (*C.GtkThemingEngine)(unsafe.Pointer(e.Native()))
	_arg1 = (C.GtkStateType)(state)

	var _arg2 C.gdouble
	var _cret C.gboolean

	_cret = C.gtk_theming_engine_state_is_running(_arg0, _arg1, &_arg2)

	var _progress float64
	var _ok bool

	_progress = (float64)(_arg2)
	if _cret {
		_ok = true
	}

	return _progress, _ok
}
