// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_style_properties_get_type()), F: marshalStyleProperties},
		{T: externglib.Type(C.gtk_gradient_get_type()), F: marshalGradient},
		{T: externglib.Type(C.gtk_symbolic_color_get_type()), F: marshalSymbolicColor},
	})
}

// StyleProperties gtkStyleProperties provides the storage for style information
// that is used by StyleContext and other StyleProvider implementations.
//
// Before style properties can be stored in GtkStyleProperties, they must be
// registered with gtk_style_properties_register_property().
//
// Unless you are writing a StyleProvider implementation, you are unlikely to
// use this API directly, as gtk_style_context_get() and its variants are the
// preferred way to access styling information from widget implementations and
// theming engine implementations should use the APIs provided by ThemingEngine
// instead.
//
// StyleProperties has been deprecated in GTK 3.16. The CSS machinery does not
// use it anymore and all users of this object have been deprecated.
type StyleProperties interface {
	gextras.Objector
	StyleProvider

	// Clear clears all style information from @props.
	Clear(p StyleProperties)
	// Property gets a style property from @props for the given state. When done
	// with @value, g_value_unset() needs to be called to free any allocated
	// memory.
	Property(p StyleProperties, property string, state StateFlags) (value *externglib.Value, ok bool)
	// LookupColor returns the symbolic color that is mapped to @name.
	LookupColor(p StyleProperties, name string)
	// MapColor maps @color so it can be referenced by @name. See
	// gtk_style_properties_lookup_color()
	MapColor(p StyleProperties, name string, color *SymbolicColor)
	// Merge merges into @props all the style information contained in
	// @props_to_merge. If @replace is true, the values will be overwritten, if
	// it is false, the older values will prevail.
	Merge(p StyleProperties, propsToMerge StyleProperties, replace bool)
	// SetProperty sets a styling property in @props.
	SetProperty(p StyleProperties, property string, state StateFlags, value *externglib.Value)
	// UnsetProperty unsets a style property in @props.
	UnsetProperty(p StyleProperties, property string, state StateFlags)
}

// styleProperties implements the StyleProperties interface.
type styleProperties struct {
	gextras.Objector
	StyleProvider
}

var _ StyleProperties = (*styleProperties)(nil)

// WrapStyleProperties wraps a GObject to the right type. It is
// primarily used internally.
func WrapStyleProperties(obj *externglib.Object) StyleProperties {
	return StyleProperties{
		Objector:      obj,
		StyleProvider: WrapStyleProvider(obj),
	}
}

func marshalStyleProperties(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapStyleProperties(obj), nil
}

// NewStyleProperties constructs a class StyleProperties.
func NewStyleProperties() {
	C.gtk_style_properties_new()
}

// Clear clears all style information from @props.
func (p styleProperties) Clear(p StyleProperties) {
	var arg0 *C.GtkStyleProperties

	arg0 = (*C.GtkStyleProperties)(unsafe.Pointer(p.Native()))

	C.gtk_style_properties_clear(arg0)
}

// Property gets a style property from @props for the given state. When done
// with @value, g_value_unset() needs to be called to free any allocated
// memory.
func (p styleProperties) Property(p StyleProperties, property string, state StateFlags) (value *externglib.Value, ok bool) {
	var arg0 *C.GtkStyleProperties
	var arg1 *C.gchar
	var arg2 C.GtkStateFlags

	arg0 = (*C.GtkStyleProperties)(unsafe.Pointer(p.Native()))
	arg1 = (*C.gchar)(C.CString(property))
	defer C.free(unsafe.Pointer(arg1))
	arg2 = (C.GtkStateFlags)(state)

	var arg3 C.GValue
	var value *externglib.Value
	var cret C.gboolean
	var ok bool

	cret = C.gtk_style_properties_get_property(arg0, arg1, arg2, &arg3)

	value = externglib.ValueFromNative(unsafe.Pointer(&arg3))
	runtime.SetFinalizer(value, func(v *externglib.Value) {
		C.g_value_unset((*C.GValue)(v.GValue))
	})
	if cret {
		ok = true
	}

	return value, ok
}

// LookupColor returns the symbolic color that is mapped to @name.
func (p styleProperties) LookupColor(p StyleProperties, name string) {
	var arg0 *C.GtkStyleProperties
	var arg1 *C.gchar

	arg0 = (*C.GtkStyleProperties)(unsafe.Pointer(p.Native()))
	arg1 = (*C.gchar)(C.CString(name))
	defer C.free(unsafe.Pointer(arg1))

	C.gtk_style_properties_lookup_color(arg0, arg1)
}

// MapColor maps @color so it can be referenced by @name. See
// gtk_style_properties_lookup_color()
func (p styleProperties) MapColor(p StyleProperties, name string, color *SymbolicColor) {
	var arg0 *C.GtkStyleProperties
	var arg1 *C.gchar
	var arg2 *C.GtkSymbolicColor

	arg0 = (*C.GtkStyleProperties)(unsafe.Pointer(p.Native()))
	arg1 = (*C.gchar)(C.CString(name))
	defer C.free(unsafe.Pointer(arg1))
	arg2 = (*C.GtkSymbolicColor)(unsafe.Pointer(color.Native()))

	C.gtk_style_properties_map_color(arg0, arg1, arg2)
}

// Merge merges into @props all the style information contained in
// @props_to_merge. If @replace is true, the values will be overwritten, if
// it is false, the older values will prevail.
func (p styleProperties) Merge(p StyleProperties, propsToMerge StyleProperties, replace bool) {
	var arg0 *C.GtkStyleProperties
	var arg1 *C.GtkStyleProperties
	var arg2 C.gboolean

	arg0 = (*C.GtkStyleProperties)(unsafe.Pointer(p.Native()))
	arg1 = (*C.GtkStyleProperties)(unsafe.Pointer(propsToMerge.Native()))
	if replace {
		arg2 = C.gboolean(1)
	}

	C.gtk_style_properties_merge(arg0, arg1, arg2)
}

// SetProperty sets a styling property in @props.
func (p styleProperties) SetProperty(p StyleProperties, property string, state StateFlags, value *externglib.Value) {
	var arg0 *C.GtkStyleProperties
	var arg1 *C.gchar
	var arg2 C.GtkStateFlags
	var arg3 *C.GValue

	arg0 = (*C.GtkStyleProperties)(unsafe.Pointer(p.Native()))
	arg1 = (*C.gchar)(C.CString(property))
	defer C.free(unsafe.Pointer(arg1))
	arg2 = (C.GtkStateFlags)(state)
	arg3 = (*C.GValue)(value.GValue)

	C.gtk_style_properties_set_property(arg0, arg1, arg2, arg3)
}

// UnsetProperty unsets a style property in @props.
func (p styleProperties) UnsetProperty(p StyleProperties, property string, state StateFlags) {
	var arg0 *C.GtkStyleProperties
	var arg1 *C.gchar
	var arg2 C.GtkStateFlags

	arg0 = (*C.GtkStyleProperties)(unsafe.Pointer(p.Native()))
	arg1 = (*C.gchar)(C.CString(property))
	defer C.free(unsafe.Pointer(arg1))
	arg2 = (C.GtkStateFlags)(state)

	C.gtk_style_properties_unset_property(arg0, arg1, arg2)
}

// Gradient: gtkGradient is a boxed type that represents a gradient. It is the
// result of parsing a [gradient expression][gtkcssprovider-gradients]. To
// obtain the gradient represented by a GtkGradient, it has to be resolved with
// gtk_gradient_resolve(), which replaces all symbolic color references by the
// colors they refer to (in a given context) and constructs a #cairo_pattern_t
// value.
//
// It is not normally necessary to deal directly with Gradients, since they are
// mostly used behind the scenes by StyleContext and CssProvider.
//
// Gradient is deprecated. It was used internally by GTK’s CSS engine to
// represent gradients. As its handling is not conforming to modern web
// standards, it is not used anymore. If you want to use gradients in your own
// code, please use Cairo directly.
type Gradient struct {
	native C.GtkGradient
}

// WrapGradient wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapGradient(ptr unsafe.Pointer) *Gradient {
	if ptr == nil {
		return nil
	}

	return (*Gradient)(ptr)
}

func marshalGradient(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapGradient(unsafe.Pointer(b)), nil
}

// NewGradientLinear constructs a struct Gradient.
func NewGradientLinear(x0 float64, y0 float64, x1 float64, y1 float64) {
	var arg1 C.gdouble
	var arg2 C.gdouble
	var arg3 C.gdouble
	var arg4 C.gdouble

	arg1 = C.gdouble(x0)
	arg2 = C.gdouble(y0)
	arg3 = C.gdouble(x1)
	arg4 = C.gdouble(y1)

	C.gtk_gradient_new_linear(arg1, arg2, arg3, arg4)
}

// NewGradientRadial constructs a struct Gradient.
func NewGradientRadial(x0 float64, y0 float64, radius0 float64, x1 float64, y1 float64, radius1 float64) {
	var arg1 C.gdouble
	var arg2 C.gdouble
	var arg3 C.gdouble
	var arg4 C.gdouble
	var arg5 C.gdouble
	var arg6 C.gdouble

	arg1 = C.gdouble(x0)
	arg2 = C.gdouble(y0)
	arg3 = C.gdouble(radius0)
	arg4 = C.gdouble(x1)
	arg5 = C.gdouble(y1)
	arg6 = C.gdouble(radius1)

	C.gtk_gradient_new_radial(arg1, arg2, arg3, arg4, arg5, arg6)
}

// Native returns the underlying C source pointer.
func (g *Gradient) Native() unsafe.Pointer {
	return unsafe.Pointer(&g.native)
}

// AddColorStop adds a stop color to @gradient.
func (g *Gradient) AddColorStop(g *Gradient, offset float64, color *SymbolicColor) {
	var arg0 *C.GtkGradient
	var arg1 C.gdouble
	var arg2 *C.GtkSymbolicColor

	arg0 = (*C.GtkGradient)(unsafe.Pointer(g.Native()))
	arg1 = C.gdouble(offset)
	arg2 = (*C.GtkSymbolicColor)(unsafe.Pointer(color.Native()))

	C.gtk_gradient_add_color_stop(arg0, arg1, arg2)
}

// Ref increases the reference count of @gradient.
func (g *Gradient) Ref(g *Gradient) {
	var arg0 *C.GtkGradient

	arg0 = (*C.GtkGradient)(unsafe.Pointer(g.Native()))

	C.gtk_gradient_ref(arg0)
}

// Resolve: if @gradient is resolvable, @resolved_gradient will be filled in
// with the resolved gradient as a cairo_pattern_t, and true will be returned.
// Generally, if @gradient can’t be resolved, it is due to it being defined on
// top of a named color that doesn't exist in @props.
func (g *Gradient) Resolve(g *Gradient, props StyleProperties) (resolvedGradient **cairo.Pattern, ok bool) {
	var arg0 *C.GtkGradient
	var arg1 *C.GtkStyleProperties

	arg0 = (*C.GtkGradient)(unsafe.Pointer(g.Native()))
	arg1 = (*C.GtkStyleProperties)(unsafe.Pointer(props.Native()))

	var arg2 *C.cairo_pattern_t
	var resolvedGradient **cairo.Pattern
	var cret C.gboolean
	var ok bool

	cret = C.gtk_gradient_resolve(arg0, arg1, &arg2)

	resolvedGradient = cairo.WrapPattern(unsafe.Pointer(&arg2))
	runtime.SetFinalizer(resolvedGradient, func(v **cairo.Pattern) {
		C.free(unsafe.Pointer(v.Native()))
	})
	if cret {
		ok = true
	}

	return resolvedGradient, ok
}

func (g *Gradient) ResolveForContext(g *Gradient, context StyleContext) {
	var arg0 *C.GtkGradient
	var arg1 *C.GtkStyleContext

	arg0 = (*C.GtkGradient)(unsafe.Pointer(g.Native()))
	arg1 = (*C.GtkStyleContext)(unsafe.Pointer(context.Native()))

	C.gtk_gradient_resolve_for_context(arg0, arg1)
}

// String creates a string representation for @gradient that is suitable for
// using in GTK CSS files.
func (g *Gradient) String(g *Gradient) {
	var arg0 *C.GtkGradient

	arg0 = (*C.GtkGradient)(unsafe.Pointer(g.Native()))

	C.gtk_gradient_to_string(arg0)
}

// Unref decreases the reference count of @gradient, freeing its memory if the
// reference count reaches 0.
func (g *Gradient) Unref(g *Gradient) {
	var arg0 *C.GtkGradient

	arg0 = (*C.GtkGradient)(unsafe.Pointer(g.Native()))

	C.gtk_gradient_unref(arg0)
}

// SymbolicColor: gtkSymbolicColor is a boxed type that represents a symbolic
// color. It is the result of parsing a [color
// expression][gtkcssprovider-symbolic-colors]. To obtain the color represented
// by a GtkSymbolicColor, it has to be resolved with
// gtk_symbolic_color_resolve(), which replaces all symbolic color references by
// the colors they refer to (in a given context) and evaluates mix, shade and
// other expressions, resulting in a RGBA value.
//
// It is not normally necessary to deal directly with SymbolicColors, since they
// are mostly used behind the scenes by StyleContext and CssProvider.
//
// SymbolicColor is deprecated. Symbolic colors are considered an implementation
// detail of GTK+.
type SymbolicColor struct {
	native C.GtkSymbolicColor
}

// WrapSymbolicColor wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSymbolicColor(ptr unsafe.Pointer) *SymbolicColor {
	if ptr == nil {
		return nil
	}

	return (*SymbolicColor)(ptr)
}

func marshalSymbolicColor(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSymbolicColor(unsafe.Pointer(b)), nil
}

// NewSymbolicColorAlpha constructs a struct SymbolicColor.
func NewSymbolicColorAlpha(color *SymbolicColor, factor float64) {
	var arg1 *C.GtkSymbolicColor
	var arg2 C.gdouble

	arg1 = (*C.GtkSymbolicColor)(unsafe.Pointer(color.Native()))
	arg2 = C.gdouble(factor)

	C.gtk_symbolic_color_new_alpha(arg1, arg2)
}

// NewSymbolicColorLiteral constructs a struct SymbolicColor.
func NewSymbolicColorLiteral(color *gdk.RGBA) {
	var arg1 *C.GdkRGBA

	arg1 = (*C.GdkRGBA)(unsafe.Pointer(color.Native()))

	C.gtk_symbolic_color_new_literal(arg1)
}

// NewSymbolicColorMix constructs a struct SymbolicColor.
func NewSymbolicColorMix(color1 *SymbolicColor, color2 *SymbolicColor, factor float64) {
	var arg1 *C.GtkSymbolicColor
	var arg2 *C.GtkSymbolicColor
	var arg3 C.gdouble

	arg1 = (*C.GtkSymbolicColor)(unsafe.Pointer(color1.Native()))
	arg2 = (*C.GtkSymbolicColor)(unsafe.Pointer(color2.Native()))
	arg3 = C.gdouble(factor)

	C.gtk_symbolic_color_new_mix(arg1, arg2, arg3)
}

// NewSymbolicColorName constructs a struct SymbolicColor.
func NewSymbolicColorName(name string) {
	var arg1 *C.gchar

	arg1 = (*C.gchar)(C.CString(name))
	defer C.free(unsafe.Pointer(arg1))

	C.gtk_symbolic_color_new_name(arg1)
}

// NewSymbolicColorShade constructs a struct SymbolicColor.
func NewSymbolicColorShade(color *SymbolicColor, factor float64) {
	var arg1 *C.GtkSymbolicColor
	var arg2 C.gdouble

	arg1 = (*C.GtkSymbolicColor)(unsafe.Pointer(color.Native()))
	arg2 = C.gdouble(factor)

	C.gtk_symbolic_color_new_shade(arg1, arg2)
}

// NewSymbolicColorWin32 constructs a struct SymbolicColor.
func NewSymbolicColorWin32(themeClass string, id int) {
	var arg1 *C.gchar
	var arg2 C.gint

	arg1 = (*C.gchar)(C.CString(themeClass))
	defer C.free(unsafe.Pointer(arg1))
	arg2 = C.gint(id)

	C.gtk_symbolic_color_new_win32(arg1, arg2)
}

// Native returns the underlying C source pointer.
func (s *SymbolicColor) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

// Ref increases the reference count of @color
func (c *SymbolicColor) Ref(c *SymbolicColor) {
	var arg0 *C.GtkSymbolicColor

	arg0 = (*C.GtkSymbolicColor)(unsafe.Pointer(c.Native()))

	C.gtk_symbolic_color_ref(arg0)
}

// Resolve: if @color is resolvable, @resolved_color will be filled in with the
// resolved color, and true will be returned. Generally, if @color can’t be
// resolved, it is due to it being defined on top of a named color that doesn’t
// exist in @props.
//
// When @props is nil, resolving of named colors will fail, so if your @color is
// or references such a color, this function will return false.
func (c *SymbolicColor) Resolve(c *SymbolicColor, props StyleProperties) (resolvedColor *gdk.RGBA, ok bool) {
	var arg0 *C.GtkSymbolicColor
	var arg1 *C.GtkStyleProperties

	arg0 = (*C.GtkSymbolicColor)(unsafe.Pointer(c.Native()))
	arg1 = (*C.GtkStyleProperties)(unsafe.Pointer(props.Native()))

	var arg2 C.GdkRGBA
	var resolvedColor *gdk.RGBA
	var cret C.gboolean
	var ok bool

	cret = C.gtk_symbolic_color_resolve(arg0, arg1, &arg2)

	resolvedColor = gdk.WrapRGBA(unsafe.Pointer(&arg2))
	if cret {
		ok = true
	}

	return resolvedColor, ok
}

// String converts the given @color to a string representation. This is useful
// both for debugging and for serialization of strings. The format of the string
// may change between different versions of GTK, but it is guaranteed that the
// GTK css parser is able to read the string and create the same symbolic color
// from it.
func (c *SymbolicColor) String(c *SymbolicColor) {
	var arg0 *C.GtkSymbolicColor

	arg0 = (*C.GtkSymbolicColor)(unsafe.Pointer(c.Native()))

	C.gtk_symbolic_color_to_string(arg0)
}

// Unref decreases the reference count of @color, freeing its memory if the
// reference count reaches 0.
func (c *SymbolicColor) Unref(c *SymbolicColor) {
	var arg0 *C.GtkSymbolicColor

	arg0 = (*C.GtkSymbolicColor)(unsafe.Pointer(c.Native()))

	C.gtk_symbolic_color_unref(arg0)
}
