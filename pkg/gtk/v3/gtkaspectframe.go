// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_aspect_frame_get_type()), F: marshalAspectFrame},
	})
}

// AspectFrame: the AspectFrame is useful when you want pack a widget so that it
// can resize but always retains the same aspect ratio. For instance, one might
// be drawing a small preview of a larger image. AspectFrame derives from Frame,
// so it can draw a label and a frame around the child. The frame will be
// “shrink-wrapped” to the size of the child.
//
//
// CSS nodes
//
// GtkAspectFrame uses a CSS node with name frame.
type AspectFrame interface {
	Frame
	Buildable

	// Set: set parameters for an existing AspectFrame.
	Set(xalign float32, yalign float32, ratio float32, obeyChild bool)
}

// aspectFrame implements the AspectFrame interface.
type aspectFrame struct {
	Frame
	Buildable
}

var _ AspectFrame = (*aspectFrame)(nil)

// WrapAspectFrame wraps a GObject to the right type. It is
// primarily used internally.
func WrapAspectFrame(obj *externglib.Object) AspectFrame {
	return AspectFrame{
		Frame:     WrapFrame(obj),
		Buildable: WrapBuildable(obj),
	}
}

func marshalAspectFrame(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapAspectFrame(obj), nil
}

// NewAspectFrame constructs a class AspectFrame.
func NewAspectFrame(label string, xalign float32, yalign float32, ratio float32, obeyChild bool) AspectFrame {
	var arg1 *C.gchar
	var arg2 C.gfloat
	var arg3 C.gfloat
	var arg4 C.gfloat
	var arg5 C.gboolean

	arg1 = (*C.gchar)(C.CString(label))
	defer C.free(unsafe.Pointer(arg1))
	arg2 = C.gfloat(xalign)
	arg3 = C.gfloat(yalign)
	arg4 = C.gfloat(ratio)
	if obeyChild {
		arg5 = C.gboolean(1)
	}

	var cret C.GtkAspectFrame
	var goret1 AspectFrame

	cret = C.gtk_aspect_frame_new(label, xalign, yalign, ratio, obeyChild)

	goret1 = gextras.CastObject(externglib.Take(unsafe.Pointer(cret.Native()))).(AspectFrame)

	return goret1
}

// Set: set parameters for an existing AspectFrame.
func (a aspectFrame) Set(xalign float32, yalign float32, ratio float32, obeyChild bool) {
	var arg0 *C.GtkAspectFrame
	var arg1 C.gfloat
	var arg2 C.gfloat
	var arg3 C.gfloat
	var arg4 C.gboolean

	arg0 = (*C.GtkAspectFrame)(unsafe.Pointer(a.Native()))
	arg1 = C.gfloat(xalign)
	arg2 = C.gfloat(yalign)
	arg3 = C.gfloat(ratio)
	if obeyChild {
		arg4 = C.gboolean(1)
	}

	C.gtk_aspect_frame_set(arg0, xalign, yalign, ratio, obeyChild)
}

type AspectFramePrivate struct {
	native C.GtkAspectFramePrivate
}

// WrapAspectFramePrivate wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapAspectFramePrivate(ptr unsafe.Pointer) *AspectFramePrivate {
	if ptr == nil {
		return nil
	}

	return (*AspectFramePrivate)(ptr)
}

func marshalAspectFramePrivate(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapAspectFramePrivate(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (a *AspectFramePrivate) Native() unsafe.Pointer {
	return unsafe.Pointer(&a.native)
}
