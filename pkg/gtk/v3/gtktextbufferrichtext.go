// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"reflect"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/internal/box"
	"github.com/diamondburned/gotk4/internal/gextras"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
)

// #cgo pkg-config: gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <stdbool.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
//
// extern gboolean gotk4_TextBufferDeserializeFunc(GtkTextBuffer* _0, GtkTextBuffer* _1, GtkTextIter* _2, const guint8* _3, gsize _4, gboolean _5, gpointer _6);
// extern guint8* gotk4_TextBufferSerializeFunc(GtkTextBuffer* _0, GtkTextBuffer* _1, const GtkTextIter* _2, const GtkTextIter* _3, gsize* _4, gpointer _5);
// extern void callbackDelete(gpointer);
import "C"

//export callbackDelete
func callbackDelete(ptr C.gpointer) {
	box.Delete(box.Callback, uintptr(ptr))
}

// TextBufferDeserializeFunc: a function that is called to deserialize rich text
// that has been serialized with gtk_text_buffer_serialize(), and insert it at
// @iter.
type TextBufferDeserializeFunc func(registerBuffer TextBuffer, contentBuffer TextBuffer, iter *TextIter, data []byte, createTags bool) error

//export gotk4_TextBufferDeserializeFunc
func gotk4_TextBufferDeserializeFunc(arg0 *C.GtkTextBuffer, arg1 *C.GtkTextBuffer, arg2 *C.GtkTextIter, arg3 *C.guint8, arg4 C.gsize, arg5 C.gboolean, arg6 C.gpointer) C.gboolean {
	v := box.Get(uintptr(arg6))
	if v == nil {
		panic(`callback not found`)
	}

	var registerBuffer TextBuffer
	var contentBuffer TextBuffer
	var iter *TextIter
	var data []byte
	var createTags bool

	registerBuffer = gextras.CastObject(externglib.Take(unsafe.Pointer(arg0.Native()))).(TextBuffer)

	contentBuffer = gextras.CastObject(externglib.Take(unsafe.Pointer(arg1.Native()))).(TextBuffer)

	{
		iter = WrapTextIter(unsafe.Pointer(arg2))
	}

	{
		data = make([]byte, arg4)
		for i := 0; i < uintptr(arg4); i++ {
			src := (C.guint8)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + i))
			data[i] = byte(src)
		}
	}

	createTags = C.bool(arg5) != 0

	ok := v.(TextBufferDeserializeFunc)(registerBuffer, contentBuffer, iter, data, createTags)
}

// TextBufferSerializeFunc: a function that is called to serialize the content
// of a text buffer. It must return the serialized form of the content.
type TextBufferSerializeFunc func(registerBuffer TextBuffer, contentBuffer TextBuffer, start *TextIter, end *TextIter, length uint) byte

//export gotk4_TextBufferSerializeFunc
func gotk4_TextBufferSerializeFunc(arg0 *C.GtkTextBuffer, arg1 *C.GtkTextBuffer, arg2 *C.GtkTextIter, arg3 *C.GtkTextIter, arg4 *C.gsize, arg5 C.gpointer) *C.guint8 {
	v := box.Get(uintptr(arg5))
	if v == nil {
		panic(`callback not found`)
	}

	var registerBuffer TextBuffer
	var contentBuffer TextBuffer
	var start *TextIter
	var end *TextIter
	var length uint

	registerBuffer = gextras.CastObject(externglib.Take(unsafe.Pointer(arg0.Native()))).(TextBuffer)

	contentBuffer = gextras.CastObject(externglib.Take(unsafe.Pointer(arg1.Native()))).(TextBuffer)

	{
		start = WrapTextIter(unsafe.Pointer(arg2))
	}

	{
		end = WrapTextIter(unsafe.Pointer(arg3))
	}

	length = uint(arg4)

	guint8 := v.(TextBufferSerializeFunc)(registerBuffer, contentBuffer, start, end, length)
}
