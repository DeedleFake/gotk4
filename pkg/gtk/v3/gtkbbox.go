// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_button_box_get_type()), F: marshalButtonBox},
	})
}

type ButtonBox interface {
	Box
	Buildable
	Orientable

	// ChildNonHomogeneous returns whether the child is exempted from homogenous
	// sizing.
	ChildNonHomogeneous(w ButtonBox, child Widget) bool
	// ChildSecondary returns whether @child should appear in a secondary group
	// of children.
	ChildSecondary(w ButtonBox, child Widget) bool
	// Layout retrieves the method being used to arrange the buttons in a button
	// box.
	Layout(w ButtonBox)
	// SetChildNonHomogeneous sets whether the child is exempted from homogeous
	// sizing.
	SetChildNonHomogeneous(w ButtonBox, child Widget, nonHomogeneous bool)
	// SetChildSecondary sets whether @child should appear in a secondary group
	// of children. A typical use of a secondary child is the help button in a
	// dialog.
	//
	// This group appears after the other children if the style is
	// GTK_BUTTONBOX_START, GTK_BUTTONBOX_SPREAD or GTK_BUTTONBOX_EDGE, and
	// before the other children if the style is GTK_BUTTONBOX_END. For
	// horizontal button boxes, the definition of before/after depends on
	// direction of the widget (see gtk_widget_set_direction()). If the style is
	// GTK_BUTTONBOX_START or GTK_BUTTONBOX_END, then the secondary children are
	// aligned at the other end of the button box from the main children. For
	// the other styles, they appear immediately next to the main children.
	SetChildSecondary(w ButtonBox, child Widget, isSecondary bool)
	// SetLayout changes the way buttons are arranged in their container.
	SetLayout(w ButtonBox, layoutStyle ButtonBoxStyle)
}

// buttonBox implements the ButtonBox interface.
type buttonBox struct {
	Box
	Buildable
	Orientable
}

var _ ButtonBox = (*buttonBox)(nil)

// WrapButtonBox wraps a GObject to the right type. It is
// primarily used internally.
func WrapButtonBox(obj *externglib.Object) ButtonBox {
	return ButtonBox{
		Box:        WrapBox(obj),
		Buildable:  WrapBuildable(obj),
		Orientable: WrapOrientable(obj),
	}
}

func marshalButtonBox(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapButtonBox(obj), nil
}

// NewButtonBox constructs a class ButtonBox.
func NewButtonBox(orientation Orientation) {
	var arg1 C.GtkOrientation

	arg1 = (C.GtkOrientation)(orientation)

	C.gtk_button_box_new(arg1)
}

// ChildNonHomogeneous returns whether the child is exempted from homogenous
// sizing.
func (w buttonBox) ChildNonHomogeneous(w ButtonBox, child Widget) bool {
	var arg0 *C.GtkButtonBox
	var arg1 *C.GtkWidget

	arg0 = (*C.GtkButtonBox)(unsafe.Pointer(w.Native()))
	arg1 = (*C.GtkWidget)(unsafe.Pointer(child.Native()))

	var cret C.gboolean
	var ok bool

	cret = C.gtk_button_box_get_child_non_homogeneous(arg0, arg1)

	if cret {
		ok = true
	}

	return ok
}

// ChildSecondary returns whether @child should appear in a secondary group
// of children.
func (w buttonBox) ChildSecondary(w ButtonBox, child Widget) bool {
	var arg0 *C.GtkButtonBox
	var arg1 *C.GtkWidget

	arg0 = (*C.GtkButtonBox)(unsafe.Pointer(w.Native()))
	arg1 = (*C.GtkWidget)(unsafe.Pointer(child.Native()))

	var cret C.gboolean
	var ok bool

	cret = C.gtk_button_box_get_child_secondary(arg0, arg1)

	if cret {
		ok = true
	}

	return ok
}

// Layout retrieves the method being used to arrange the buttons in a button
// box.
func (w buttonBox) Layout(w ButtonBox) {
	var arg0 *C.GtkButtonBox

	arg0 = (*C.GtkButtonBox)(unsafe.Pointer(w.Native()))

	C.gtk_button_box_get_layout(arg0)
}

// SetChildNonHomogeneous sets whether the child is exempted from homogeous
// sizing.
func (w buttonBox) SetChildNonHomogeneous(w ButtonBox, child Widget, nonHomogeneous bool) {
	var arg0 *C.GtkButtonBox
	var arg1 *C.GtkWidget
	var arg2 C.gboolean

	arg0 = (*C.GtkButtonBox)(unsafe.Pointer(w.Native()))
	arg1 = (*C.GtkWidget)(unsafe.Pointer(child.Native()))
	if nonHomogeneous {
		arg2 = C.gboolean(1)
	}

	C.gtk_button_box_set_child_non_homogeneous(arg0, arg1, arg2)
}

// SetChildSecondary sets whether @child should appear in a secondary group
// of children. A typical use of a secondary child is the help button in a
// dialog.
//
// This group appears after the other children if the style is
// GTK_BUTTONBOX_START, GTK_BUTTONBOX_SPREAD or GTK_BUTTONBOX_EDGE, and
// before the other children if the style is GTK_BUTTONBOX_END. For
// horizontal button boxes, the definition of before/after depends on
// direction of the widget (see gtk_widget_set_direction()). If the style is
// GTK_BUTTONBOX_START or GTK_BUTTONBOX_END, then the secondary children are
// aligned at the other end of the button box from the main children. For
// the other styles, they appear immediately next to the main children.
func (w buttonBox) SetChildSecondary(w ButtonBox, child Widget, isSecondary bool) {
	var arg0 *C.GtkButtonBox
	var arg1 *C.GtkWidget
	var arg2 C.gboolean

	arg0 = (*C.GtkButtonBox)(unsafe.Pointer(w.Native()))
	arg1 = (*C.GtkWidget)(unsafe.Pointer(child.Native()))
	if isSecondary {
		arg2 = C.gboolean(1)
	}

	C.gtk_button_box_set_child_secondary(arg0, arg1, arg2)
}

// SetLayout changes the way buttons are arranged in their container.
func (w buttonBox) SetLayout(w ButtonBox, layoutStyle ButtonBoxStyle) {
	var arg0 *C.GtkButtonBox
	var arg1 C.GtkButtonBoxStyle

	arg0 = (*C.GtkButtonBox)(unsafe.Pointer(w.Native()))
	arg1 = (C.GtkButtonBoxStyle)(layoutStyle)

	C.gtk_button_box_set_layout(arg0, arg1)
}
