// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_stack_transition_type_get_type()), F: marshalStackTransitionType},
		{T: externglib.Type(C.gtk_stack_get_type()), F: marshalStack},
	})
}

// StackTransitionType: these enumeration values describe the possible
// transitions between pages in a Stack widget.
//
// New values may be added to this enumeration over time.
type StackTransitionType int

const (
	// none: no transition
	StackTransitionTypeNone StackTransitionType = iota
	// crossfade: cross-fade
	StackTransitionTypeCrossfade
	// SlideRight: slide from left to right
	StackTransitionTypeSlideRight
	// SlideLeft: slide from right to left
	StackTransitionTypeSlideLeft
	// SlideUp: slide from bottom up
	StackTransitionTypeSlideUp
	// SlideDown: slide from top down
	StackTransitionTypeSlideDown
	// SlideLeftRight: slide from left or right according to the children order
	StackTransitionTypeSlideLeftRight
	// SlideUpDown: slide from top down or bottom up according to the order
	StackTransitionTypeSlideUpDown
	// OverUp: cover the old page by sliding up. Since 3.12
	StackTransitionTypeOverUp
	// OverDown: cover the old page by sliding down. Since: 3.12
	StackTransitionTypeOverDown
	// OverLeft: cover the old page by sliding to the left. Since: 3.12
	StackTransitionTypeOverLeft
	// OverRight: cover the old page by sliding to the right. Since: 3.12
	StackTransitionTypeOverRight
	// UnderUp: uncover the new page by sliding up. Since 3.12
	StackTransitionTypeUnderUp
	// UnderDown: uncover the new page by sliding down. Since: 3.12
	StackTransitionTypeUnderDown
	// UnderLeft: uncover the new page by sliding to the left. Since: 3.12
	StackTransitionTypeUnderLeft
	// UnderRight: uncover the new page by sliding to the right. Since: 3.12
	StackTransitionTypeUnderRight
	// OverUpDown: cover the old page sliding up or uncover the new page sliding
	// down, according to order. Since: 3.12
	StackTransitionTypeOverUpDown
	// OverDownUp: cover the old page sliding down or uncover the new page
	// sliding up, according to order. Since: 3.14
	StackTransitionTypeOverDownUp
	// OverLeftRight: cover the old page sliding left or uncover the new page
	// sliding right, according to order. Since: 3.14
	StackTransitionTypeOverLeftRight
	// OverRightLeft: cover the old page sliding right or uncover the new page
	// sliding left, according to order. Since: 3.14
	StackTransitionTypeOverRightLeft
)

func marshalStackTransitionType(p uintptr) (interface{}, error) {
	return StackTransitionType(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// Stack: the GtkStack widget is a container which only shows one of its
// children at a time. In contrast to GtkNotebook, GtkStack does not provide a
// means for users to change the visible child. Instead, the StackSwitcher
// widget can be used with GtkStack to provide this functionality.
//
// Transitions between pages can be animated as slides or fades. This can be
// controlled with gtk_stack_set_transition_type(). These animations respect the
// Settings:gtk-enable-animations setting.
//
// The GtkStack widget was added in GTK+ 3.10.
//
//
// CSS nodes
//
// GtkStack has a single CSS node named stack.
type Stack interface {
	Container

	// AsBuildable casts the class to the Buildable interface.
	AsBuildable() Buildable

	// AddNamedStack adds a child to @stack. The child is identified by the
	// @name.
	AddNamedStack(child Widget, name string)
	// AddTitledStack adds a child to @stack. The child is identified by the
	// @name. The @title will be used by StackSwitcher to represent @child in a
	// tab bar, so it should be short.
	AddTitledStack(child Widget, name string, title string)
	// ChildByName finds the child of the Stack with the name given as the
	// argument. Returns nil if there is no child with this name.
	ChildByName(name string) Widget
	// Hhomogeneous gets whether @stack is horizontally homogeneous. See
	// gtk_stack_set_hhomogeneous().
	Hhomogeneous() bool
	// Homogeneous gets whether @stack is homogeneous. See
	// gtk_stack_set_homogeneous().
	Homogeneous() bool
	// InterpolateSize returns wether the Stack is set up to interpolate between
	// the sizes of children on page switch.
	InterpolateSize() bool
	// TransitionDuration returns the amount of time (in milliseconds) that
	// transitions between pages in @stack will take.
	TransitionDuration() uint
	// TransitionRunning returns whether the @stack is currently in a transition
	// from one page to another.
	TransitionRunning() bool
	// TransitionType gets the type of animation that will be used for
	// transitions between pages in @stack.
	TransitionType() StackTransitionType
	// Vhomogeneous gets whether @stack is vertically homogeneous. See
	// gtk_stack_set_vhomogeneous().
	Vhomogeneous() bool
	// VisibleChild gets the currently visible child of @stack, or nil if there
	// are no visible children.
	VisibleChild() Widget
	// VisibleChildName returns the name of the currently visible child of
	// @stack, or nil if there is no visible child.
	VisibleChildName() string
	// SetHhomogeneousStack sets the Stack to be horizontally homogeneous or
	// not. If it is homogeneous, the Stack will request the same width for all
	// its children. If it isn't, the stack may change width when a different
	// child becomes visible.
	SetHhomogeneousStack(hhomogeneous bool)
	// SetHomogeneousStack sets the Stack to be homogeneous or not. If it is
	// homogeneous, the Stack will request the same size for all its children.
	// If it isn't, the stack may change size when a different child becomes
	// visible.
	//
	// Since 3.16, homogeneity can be controlled separately for horizontal and
	// vertical size, with the Stack:hhomogeneous and Stack:vhomogeneous.
	SetHomogeneousStack(homogeneous bool)
	// SetInterpolateSizeStack sets whether or not @stack will interpolate its
	// size when changing the visible child. If the Stack:interpolate-size
	// property is set to true, @stack will interpolate its size between the
	// current one and the one it'll take after changing the visible child,
	// according to the set transition duration.
	SetInterpolateSizeStack(interpolateSize bool)
	// SetTransitionDurationStack sets the duration that transitions between
	// pages in @stack will take.
	SetTransitionDurationStack(duration uint)
	// SetTransitionTypeStack sets the type of animation that will be used for
	// transitions between pages in @stack. Available types include various
	// kinds of fades and slides.
	//
	// The transition type can be changed without problems at runtime, so it is
	// possible to change the animation based on the page that is about to
	// become current.
	SetTransitionTypeStack(transition StackTransitionType)
	// SetVhomogeneousStack sets the Stack to be vertically homogeneous or not.
	// If it is homogeneous, the Stack will request the same height for all its
	// children. If it isn't, the stack may change height when a different child
	// becomes visible.
	SetVhomogeneousStack(vhomogeneous bool)
	// SetVisibleChildStack makes @child the visible child of @stack.
	//
	// If @child is different from the currently visible child, the transition
	// between the two will be animated with the current transition type of
	// @stack.
	//
	// Note that the @child widget has to be visible itself (see
	// gtk_widget_show()) in order to become the visible child of @stack.
	SetVisibleChildStack(child Widget)
	// SetVisibleChildFullStack makes the child with the given name visible.
	//
	// Note that the child widget has to be visible itself (see
	// gtk_widget_show()) in order to become the visible child of @stack.
	SetVisibleChildFullStack(name string, transition StackTransitionType)
	// SetVisibleChildNameStack makes the child with the given name visible.
	//
	// If @child is different from the currently visible child, the transition
	// between the two will be animated with the current transition type of
	// @stack.
	//
	// Note that the child widget has to be visible itself (see
	// gtk_widget_show()) in order to become the visible child of @stack.
	SetVisibleChildNameStack(name string)
}

// stack implements the Stack class.
type stack struct {
	Container
}

// WrapStack wraps a GObject to the right type. It is
// primarily used internally.
func WrapStack(obj *externglib.Object) Stack {
	return stack{
		Container: WrapContainer(obj),
	}
}

func marshalStack(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapStack(obj), nil
}

// NewStack creates a new Stack container.
func NewStack() Stack {
	var _cret *C.GtkWidget // in

	_cret = C.gtk_stack_new()

	var _stack Stack // out

	_stack = WrapStack(externglib.Take(unsafe.Pointer(_cret)))

	return _stack
}

func (s stack) AddNamedStack(child Widget, name string) {
	var _arg0 *C.GtkStack  // out
	var _arg1 *C.GtkWidget // out
	var _arg2 *C.gchar     // out

	_arg0 = (*C.GtkStack)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(child.Native()))
	_arg2 = (*C.gchar)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg2))

	C.gtk_stack_add_named(_arg0, _arg1, _arg2)
}

func (s stack) AddTitledStack(child Widget, name string, title string) {
	var _arg0 *C.GtkStack  // out
	var _arg1 *C.GtkWidget // out
	var _arg2 *C.gchar     // out
	var _arg3 *C.gchar     // out

	_arg0 = (*C.GtkStack)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(child.Native()))
	_arg2 = (*C.gchar)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = (*C.gchar)(C.CString(title))
	defer C.free(unsafe.Pointer(_arg3))

	C.gtk_stack_add_titled(_arg0, _arg1, _arg2, _arg3)
}

func (s stack) ChildByName(name string) Widget {
	var _arg0 *C.GtkStack  // out
	var _arg1 *C.gchar     // out
	var _cret *C.GtkWidget // in

	_arg0 = (*C.GtkStack)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.gchar)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_stack_get_child_by_name(_arg0, _arg1)

	var _widget Widget // out

	_widget = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Widget)

	return _widget
}

func (s stack) Hhomogeneous() bool {
	var _arg0 *C.GtkStack // out
	var _cret C.gboolean  // in

	_arg0 = (*C.GtkStack)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_stack_get_hhomogeneous(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (s stack) Homogeneous() bool {
	var _arg0 *C.GtkStack // out
	var _cret C.gboolean  // in

	_arg0 = (*C.GtkStack)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_stack_get_homogeneous(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (s stack) InterpolateSize() bool {
	var _arg0 *C.GtkStack // out
	var _cret C.gboolean  // in

	_arg0 = (*C.GtkStack)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_stack_get_interpolate_size(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (s stack) TransitionDuration() uint {
	var _arg0 *C.GtkStack // out
	var _cret C.guint     // in

	_arg0 = (*C.GtkStack)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_stack_get_transition_duration(_arg0)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

func (s stack) TransitionRunning() bool {
	var _arg0 *C.GtkStack // out
	var _cret C.gboolean  // in

	_arg0 = (*C.GtkStack)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_stack_get_transition_running(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (s stack) TransitionType() StackTransitionType {
	var _arg0 *C.GtkStack              // out
	var _cret C.GtkStackTransitionType // in

	_arg0 = (*C.GtkStack)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_stack_get_transition_type(_arg0)

	var _stackTransitionType StackTransitionType // out

	_stackTransitionType = StackTransitionType(_cret)

	return _stackTransitionType
}

func (s stack) Vhomogeneous() bool {
	var _arg0 *C.GtkStack // out
	var _cret C.gboolean  // in

	_arg0 = (*C.GtkStack)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_stack_get_vhomogeneous(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (s stack) VisibleChild() Widget {
	var _arg0 *C.GtkStack  // out
	var _cret *C.GtkWidget // in

	_arg0 = (*C.GtkStack)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_stack_get_visible_child(_arg0)

	var _widget Widget // out

	_widget = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Widget)

	return _widget
}

func (s stack) VisibleChildName() string {
	var _arg0 *C.GtkStack // out
	var _cret *C.gchar    // in

	_arg0 = (*C.GtkStack)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_stack_get_visible_child_name(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

func (s stack) SetHhomogeneousStack(hhomogeneous bool) {
	var _arg0 *C.GtkStack // out
	var _arg1 C.gboolean  // out

	_arg0 = (*C.GtkStack)(unsafe.Pointer(s.Native()))
	if hhomogeneous {
		_arg1 = C.TRUE
	}

	C.gtk_stack_set_hhomogeneous(_arg0, _arg1)
}

func (s stack) SetHomogeneousStack(homogeneous bool) {
	var _arg0 *C.GtkStack // out
	var _arg1 C.gboolean  // out

	_arg0 = (*C.GtkStack)(unsafe.Pointer(s.Native()))
	if homogeneous {
		_arg1 = C.TRUE
	}

	C.gtk_stack_set_homogeneous(_arg0, _arg1)
}

func (s stack) SetInterpolateSizeStack(interpolateSize bool) {
	var _arg0 *C.GtkStack // out
	var _arg1 C.gboolean  // out

	_arg0 = (*C.GtkStack)(unsafe.Pointer(s.Native()))
	if interpolateSize {
		_arg1 = C.TRUE
	}

	C.gtk_stack_set_interpolate_size(_arg0, _arg1)
}

func (s stack) SetTransitionDurationStack(duration uint) {
	var _arg0 *C.GtkStack // out
	var _arg1 C.guint     // out

	_arg0 = (*C.GtkStack)(unsafe.Pointer(s.Native()))
	_arg1 = C.guint(duration)

	C.gtk_stack_set_transition_duration(_arg0, _arg1)
}

func (s stack) SetTransitionTypeStack(transition StackTransitionType) {
	var _arg0 *C.GtkStack              // out
	var _arg1 C.GtkStackTransitionType // out

	_arg0 = (*C.GtkStack)(unsafe.Pointer(s.Native()))
	_arg1 = C.GtkStackTransitionType(transition)

	C.gtk_stack_set_transition_type(_arg0, _arg1)
}

func (s stack) SetVhomogeneousStack(vhomogeneous bool) {
	var _arg0 *C.GtkStack // out
	var _arg1 C.gboolean  // out

	_arg0 = (*C.GtkStack)(unsafe.Pointer(s.Native()))
	if vhomogeneous {
		_arg1 = C.TRUE
	}

	C.gtk_stack_set_vhomogeneous(_arg0, _arg1)
}

func (s stack) SetVisibleChildStack(child Widget) {
	var _arg0 *C.GtkStack  // out
	var _arg1 *C.GtkWidget // out

	_arg0 = (*C.GtkStack)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(child.Native()))

	C.gtk_stack_set_visible_child(_arg0, _arg1)
}

func (s stack) SetVisibleChildFullStack(name string, transition StackTransitionType) {
	var _arg0 *C.GtkStack              // out
	var _arg1 *C.gchar                 // out
	var _arg2 C.GtkStackTransitionType // out

	_arg0 = (*C.GtkStack)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.gchar)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.GtkStackTransitionType(transition)

	C.gtk_stack_set_visible_child_full(_arg0, _arg1, _arg2)
}

func (s stack) SetVisibleChildNameStack(name string) {
	var _arg0 *C.GtkStack // out
	var _arg1 *C.gchar    // out

	_arg0 = (*C.GtkStack)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.gchar)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_stack_set_visible_child_name(_arg0, _arg1)
}

func (s stack) AsBuildable() Buildable {
	return WrapBuildable(gextras.InternObject(s))
}
