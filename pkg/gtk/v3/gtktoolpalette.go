// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/box"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_tool_palette_drag_targets_get_type()), F: marshalToolPaletteDragTargets},
		{T: externglib.Type(C.gtk_tool_palette_get_type()), F: marshalToolPalette},
	})
}

// ToolPaletteDragTargets flags used to specify the supported drag targets.
type ToolPaletteDragTargets int

const (
	// ToolPaletteDragTargetsItems: support drag of items.
	ToolPaletteDragTargetsItems ToolPaletteDragTargets = 0b1
	// ToolPaletteDragTargetsGroups: support drag of groups.
	ToolPaletteDragTargetsGroups ToolPaletteDragTargets = 0b10
)

func marshalToolPaletteDragTargets(p uintptr) (interface{}, error) {
	return ToolPaletteDragTargets(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// ToolPalette: a ToolPalette allows you to add ToolItems to a palette-like
// container with different categories and drag and drop support.
//
// A ToolPalette is created with a call to gtk_tool_palette_new().
//
// ToolItems cannot be added directly to a ToolPalette - instead they are added
// to a ToolItemGroup which can than be added to a ToolPalette. To add a
// ToolItemGroup to a ToolPalette, use gtk_container_add().
//
//    static void
//    passive_canvas_drag_data_received (GtkWidget        *widget,
//                                       GdkDragContext   *context,
//                                       gint              x,
//                                       gint              y,
//                                       GtkSelectionData *selection,
//                                       guint             info,
//                                       guint             time,
//                                       gpointer          data)
//    {
//      GtkWidget *palette;
//      GtkWidget *item;
//
//      // Get the dragged item
//      palette = gtk_widget_get_ancestor (gtk_drag_get_source_widget (context),
//                                         GTK_TYPE_TOOL_PALETTE);
//      if (palette != NULL)
//        item = gtk_tool_palette_get_drag_item (GTK_TOOL_PALETTE (palette),
//                                               selection);
//
//      // Do something with item
//    }
//
//    GtkWidget *target, palette;
//
//    palette = gtk_tool_palette_new ();
//    target = gtk_drawing_area_new ();
//
//    g_signal_connect (G_OBJECT (target), "drag-data-received",
//                      G_CALLBACK (passive_canvas_drag_data_received), NULL);
//    gtk_tool_palette_add_drag_dest (GTK_TOOL_PALETTE (palette), target,
//                                    GTK_DEST_DEFAULT_ALL,
//                                    GTK_TOOL_PALETTE_DRAG_ITEMS,
//                                    GDK_ACTION_COPY);
//
//
// CSS nodes
//
// GtkToolPalette has a single CSS node named toolpalette.
type ToolPalette interface {
	Container
	Orientable
	Scrollable

	AddDragDestToolPalette(widget Widget, flags DestDefaults, targets ToolPaletteDragTargets, actions gdk.DragAction)

	DragItem(selection *SelectionData) Widget

	DropGroup(x int, y int) ToolItemGroup

	DropItem(x int, y int) ToolItem

	Exclusive(group ToolItemGroup) bool

	Expand(group ToolItemGroup) bool

	GroupPosition(group ToolItemGroup) int

	GetHAdjustment() Adjustment

	IconSize() int

	Style() ToolbarStyle

	GetVAdjustment() Adjustment

	SetDragSourceToolPalette(targets ToolPaletteDragTargets)

	SetExclusiveToolPalette(group ToolItemGroup, exclusive bool)

	SetExpandToolPalette(group ToolItemGroup, expand bool)

	SetGroupPositionToolPalette(group ToolItemGroup, position int)

	SetIconSizeToolPalette(iconSize int)

	SetStyleToolPalette(style ToolbarStyle)

	UnsetIconSizeToolPalette()

	UnsetStyleToolPalette()
}

// toolPalette implements the ToolPalette class.
type toolPalette struct {
	Container
}

// WrapToolPalette wraps a GObject to the right type. It is
// primarily used internally.
func WrapToolPalette(obj *externglib.Object) ToolPalette {
	return toolPalette{
		Container: WrapContainer(obj),
	}
}

func marshalToolPalette(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapToolPalette(obj), nil
}

func NewToolPalette() ToolPalette {
	var _cret *C.GtkWidget // in

	_cret = C.gtk_tool_palette_new()

	var _toolPalette ToolPalette // out

	_toolPalette = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(ToolPalette)

	return _toolPalette
}

func (p toolPalette) AddDragDestToolPalette(widget Widget, flags DestDefaults, targets ToolPaletteDragTargets, actions gdk.DragAction) {
	var _arg0 *C.GtkToolPalette           // out
	var _arg1 *C.GtkWidget                // out
	var _arg2 C.GtkDestDefaults           // out
	var _arg3 C.GtkToolPaletteDragTargets // out
	var _arg4 C.GdkDragAction             // out

	_arg0 = (*C.GtkToolPalette)(unsafe.Pointer(p.Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(widget.Native()))
	_arg2 = C.GtkDestDefaults(flags)
	_arg3 = C.GtkToolPaletteDragTargets(targets)
	_arg4 = C.GdkDragAction(actions)

	C.gtk_tool_palette_add_drag_dest(_arg0, _arg1, _arg2, _arg3, _arg4)
}

func (p toolPalette) DragItem(selection *SelectionData) Widget {
	var _arg0 *C.GtkToolPalette   // out
	var _arg1 *C.GtkSelectionData // out
	var _cret *C.GtkWidget        // in

	_arg0 = (*C.GtkToolPalette)(unsafe.Pointer(p.Native()))
	_arg1 = (*C.GtkSelectionData)(unsafe.Pointer(selection.Native()))

	_cret = C.gtk_tool_palette_get_drag_item(_arg0, _arg1)

	var _widget Widget // out

	_widget = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Widget)

	return _widget
}

func (p toolPalette) DropGroup(x int, y int) ToolItemGroup {
	var _arg0 *C.GtkToolPalette   // out
	var _arg1 C.gint              // out
	var _arg2 C.gint              // out
	var _cret *C.GtkToolItemGroup // in

	_arg0 = (*C.GtkToolPalette)(unsafe.Pointer(p.Native()))
	_arg1 = C.gint(x)
	_arg2 = C.gint(y)

	_cret = C.gtk_tool_palette_get_drop_group(_arg0, _arg1, _arg2)

	var _toolItemGroup ToolItemGroup // out

	_toolItemGroup = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(ToolItemGroup)

	return _toolItemGroup
}

func (p toolPalette) DropItem(x int, y int) ToolItem {
	var _arg0 *C.GtkToolPalette // out
	var _arg1 C.gint            // out
	var _arg2 C.gint            // out
	var _cret *C.GtkToolItem    // in

	_arg0 = (*C.GtkToolPalette)(unsafe.Pointer(p.Native()))
	_arg1 = C.gint(x)
	_arg2 = C.gint(y)

	_cret = C.gtk_tool_palette_get_drop_item(_arg0, _arg1, _arg2)

	var _toolItem ToolItem // out

	_toolItem = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(ToolItem)

	return _toolItem
}

func (p toolPalette) Exclusive(group ToolItemGroup) bool {
	var _arg0 *C.GtkToolPalette   // out
	var _arg1 *C.GtkToolItemGroup // out
	var _cret C.gboolean          // in

	_arg0 = (*C.GtkToolPalette)(unsafe.Pointer(p.Native()))
	_arg1 = (*C.GtkToolItemGroup)(unsafe.Pointer(group.Native()))

	_cret = C.gtk_tool_palette_get_exclusive(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (p toolPalette) Expand(group ToolItemGroup) bool {
	var _arg0 *C.GtkToolPalette   // out
	var _arg1 *C.GtkToolItemGroup // out
	var _cret C.gboolean          // in

	_arg0 = (*C.GtkToolPalette)(unsafe.Pointer(p.Native()))
	_arg1 = (*C.GtkToolItemGroup)(unsafe.Pointer(group.Native()))

	_cret = C.gtk_tool_palette_get_expand(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (p toolPalette) GroupPosition(group ToolItemGroup) int {
	var _arg0 *C.GtkToolPalette   // out
	var _arg1 *C.GtkToolItemGroup // out
	var _cret C.gint              // in

	_arg0 = (*C.GtkToolPalette)(unsafe.Pointer(p.Native()))
	_arg1 = (*C.GtkToolItemGroup)(unsafe.Pointer(group.Native()))

	_cret = C.gtk_tool_palette_get_group_position(_arg0, _arg1)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (p toolPalette) GetHAdjustment() Adjustment {
	var _arg0 *C.GtkToolPalette // out
	var _cret *C.GtkAdjustment  // in

	_arg0 = (*C.GtkToolPalette)(unsafe.Pointer(p.Native()))

	_cret = C.gtk_tool_palette_get_hadjustment(_arg0)

	var _adjustment Adjustment // out

	_adjustment = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Adjustment)

	return _adjustment
}

func (p toolPalette) IconSize() int {
	var _arg0 *C.GtkToolPalette // out
	var _cret C.GtkIconSize     // in

	_arg0 = (*C.GtkToolPalette)(unsafe.Pointer(p.Native()))

	_cret = C.gtk_tool_palette_get_icon_size(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (p toolPalette) Style() ToolbarStyle {
	var _arg0 *C.GtkToolPalette // out
	var _cret C.GtkToolbarStyle // in

	_arg0 = (*C.GtkToolPalette)(unsafe.Pointer(p.Native()))

	_cret = C.gtk_tool_palette_get_style(_arg0)

	var _toolbarStyle ToolbarStyle // out

	_toolbarStyle = ToolbarStyle(_cret)

	return _toolbarStyle
}

func (p toolPalette) GetVAdjustment() Adjustment {
	var _arg0 *C.GtkToolPalette // out
	var _cret *C.GtkAdjustment  // in

	_arg0 = (*C.GtkToolPalette)(unsafe.Pointer(p.Native()))

	_cret = C.gtk_tool_palette_get_vadjustment(_arg0)

	var _adjustment Adjustment // out

	_adjustment = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Adjustment)

	return _adjustment
}

func (p toolPalette) SetDragSourceToolPalette(targets ToolPaletteDragTargets) {
	var _arg0 *C.GtkToolPalette           // out
	var _arg1 C.GtkToolPaletteDragTargets // out

	_arg0 = (*C.GtkToolPalette)(unsafe.Pointer(p.Native()))
	_arg1 = C.GtkToolPaletteDragTargets(targets)

	C.gtk_tool_palette_set_drag_source(_arg0, _arg1)
}

func (p toolPalette) SetExclusiveToolPalette(group ToolItemGroup, exclusive bool) {
	var _arg0 *C.GtkToolPalette   // out
	var _arg1 *C.GtkToolItemGroup // out
	var _arg2 C.gboolean          // out

	_arg0 = (*C.GtkToolPalette)(unsafe.Pointer(p.Native()))
	_arg1 = (*C.GtkToolItemGroup)(unsafe.Pointer(group.Native()))
	if exclusive {
		_arg2 = C.TRUE
	}

	C.gtk_tool_palette_set_exclusive(_arg0, _arg1, _arg2)
}

func (p toolPalette) SetExpandToolPalette(group ToolItemGroup, expand bool) {
	var _arg0 *C.GtkToolPalette   // out
	var _arg1 *C.GtkToolItemGroup // out
	var _arg2 C.gboolean          // out

	_arg0 = (*C.GtkToolPalette)(unsafe.Pointer(p.Native()))
	_arg1 = (*C.GtkToolItemGroup)(unsafe.Pointer(group.Native()))
	if expand {
		_arg2 = C.TRUE
	}

	C.gtk_tool_palette_set_expand(_arg0, _arg1, _arg2)
}

func (p toolPalette) SetGroupPositionToolPalette(group ToolItemGroup, position int) {
	var _arg0 *C.GtkToolPalette   // out
	var _arg1 *C.GtkToolItemGroup // out
	var _arg2 C.gint              // out

	_arg0 = (*C.GtkToolPalette)(unsafe.Pointer(p.Native()))
	_arg1 = (*C.GtkToolItemGroup)(unsafe.Pointer(group.Native()))
	_arg2 = C.gint(position)

	C.gtk_tool_palette_set_group_position(_arg0, _arg1, _arg2)
}

func (p toolPalette) SetIconSizeToolPalette(iconSize int) {
	var _arg0 *C.GtkToolPalette // out
	var _arg1 C.GtkIconSize     // out

	_arg0 = (*C.GtkToolPalette)(unsafe.Pointer(p.Native()))
	_arg1 = C.GtkIconSize(iconSize)

	C.gtk_tool_palette_set_icon_size(_arg0, _arg1)
}

func (p toolPalette) SetStyleToolPalette(style ToolbarStyle) {
	var _arg0 *C.GtkToolPalette // out
	var _arg1 C.GtkToolbarStyle // out

	_arg0 = (*C.GtkToolPalette)(unsafe.Pointer(p.Native()))
	_arg1 = C.GtkToolbarStyle(style)

	C.gtk_tool_palette_set_style(_arg0, _arg1)
}

func (p toolPalette) UnsetIconSizeToolPalette() {
	var _arg0 *C.GtkToolPalette // out

	_arg0 = (*C.GtkToolPalette)(unsafe.Pointer(p.Native()))

	C.gtk_tool_palette_unset_icon_size(_arg0)
}

func (p toolPalette) UnsetStyleToolPalette() {
	var _arg0 *C.GtkToolPalette // out

	_arg0 = (*C.GtkToolPalette)(unsafe.Pointer(p.Native()))

	C.gtk_tool_palette_unset_style(_arg0)
}

func (b toolPalette) AddChild(builder Builder, child gextras.Objector, typ string) {
	WrapBuildable(gextras.InternObject(b)).AddChild(builder, child, typ)
}

func (b toolPalette) ConstructChild(builder Builder, name string) gextras.Objector {
	return WrapBuildable(gextras.InternObject(b)).ConstructChild(builder, name)
}

func (b toolPalette) CustomFinished(builder Builder, child gextras.Objector, tagname string, data interface{}) {
	WrapBuildable(gextras.InternObject(b)).CustomFinished(builder, child, tagname, data)
}

func (b toolPalette) CustomTagEnd(builder Builder, child gextras.Objector, tagname string, data *interface{}) {
	WrapBuildable(gextras.InternObject(b)).CustomTagEnd(builder, child, tagname, data)
}

func (b toolPalette) CustomTagStart(builder Builder, child gextras.Objector, tagname string) (glib.MarkupParser, interface{}, bool) {
	return WrapBuildable(gextras.InternObject(b)).CustomTagStart(builder, child, tagname)
}

func (b toolPalette) InternalChild(builder Builder, childname string) gextras.Objector {
	return WrapBuildable(gextras.InternObject(b)).InternalChild(builder, childname)
}

func (b toolPalette) Name() string {
	return WrapBuildable(gextras.InternObject(b)).Name()
}

func (b toolPalette) ParserFinished(builder Builder) {
	WrapBuildable(gextras.InternObject(b)).ParserFinished(builder)
}

func (b toolPalette) SetBuildableProperty(builder Builder, name string, value externglib.Value) {
	WrapBuildable(gextras.InternObject(b)).SetBuildableProperty(builder, name, value)
}

func (b toolPalette) SetName(name string) {
	WrapBuildable(gextras.InternObject(b)).SetName(name)
}

func (o toolPalette) Orientation() Orientation {
	return WrapOrientable(gextras.InternObject(o)).Orientation()
}

func (o toolPalette) SetOrientation(orientation Orientation) {
	WrapOrientable(gextras.InternObject(o)).SetOrientation(orientation)
}

func (s toolPalette) Border() (Border, bool) {
	return WrapScrollable(gextras.InternObject(s)).Border()
}

func (s toolPalette) HAdjustment() Adjustment {
	return WrapScrollable(gextras.InternObject(s)).HAdjustment()
}

func (s toolPalette) HScrollPolicy() ScrollablePolicy {
	return WrapScrollable(gextras.InternObject(s)).HScrollPolicy()
}

func (s toolPalette) VAdjustment() Adjustment {
	return WrapScrollable(gextras.InternObject(s)).VAdjustment()
}

func (s toolPalette) VScrollPolicy() ScrollablePolicy {
	return WrapScrollable(gextras.InternObject(s)).VScrollPolicy()
}

func (s toolPalette) SetHAdjustment(hadjustment Adjustment) {
	WrapScrollable(gextras.InternObject(s)).SetHAdjustment(hadjustment)
}

func (s toolPalette) SetHScrollPolicy(policy ScrollablePolicy) {
	WrapScrollable(gextras.InternObject(s)).SetHScrollPolicy(policy)
}

func (s toolPalette) SetVAdjustment(vadjustment Adjustment) {
	WrapScrollable(gextras.InternObject(s)).SetVAdjustment(vadjustment)
}

func (s toolPalette) SetVScrollPolicy(policy ScrollablePolicy) {
	WrapScrollable(gextras.InternObject(s)).SetVScrollPolicy(policy)
}
