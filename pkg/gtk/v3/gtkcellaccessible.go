// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_cell_accessible_get_type()), F: marshalCellAccessible},
	})
}

// CellAccessibleOverrider contains methods that are overridable.
//
// As of right now, interface overriding and subclassing is not supported
// yet, so the interface currently has no use.
type CellAccessibleOverrider interface {
	UpdateCache(emitSignal bool)
}

type CellAccessible interface {
	gextras.Objector

	privateCellAccessibleClass()
}

// CellAccessibleClass implements the CellAccessible interface.
type CellAccessibleClass struct {
	AccessibleClass
	atk.ActionIface
}

var _ CellAccessible = (*CellAccessibleClass)(nil)

func wrapCellAccessible(obj *externglib.Object) CellAccessible {
	return &CellAccessibleClass{
		AccessibleClass: AccessibleClass{
			ObjectClass: atk.ObjectClass{
				Object: obj,
			},
		},
		ActionIface: atk.ActionIface{
			Object: obj,
		},
	}
}

func marshalCellAccessible(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapCellAccessible(obj), nil
}

func (*CellAccessibleClass) privateCellAccessibleClass() {}
