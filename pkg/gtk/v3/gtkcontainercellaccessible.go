// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_container_cell_accessible_get_type()), F: marshalContainerCellAccessible},
	})
}

type ContainerCellAccessible interface {
	CellAccessible

	AddChild(child CellAccessible)
	// Children: get a list of children.
	Children() *glib.List

	RemoveChild(child CellAccessible)
}

// containerCellAccessible implements the ContainerCellAccessible interface.
type containerCellAccessible struct {
	CellAccessible
}

var _ ContainerCellAccessible = (*containerCellAccessible)(nil)

// WrapContainerCellAccessible wraps a GObject to the right type. It is
// primarily used internally.
func WrapContainerCellAccessible(obj *externglib.Object) ContainerCellAccessible {
	return ContainerCellAccessible{
		CellAccessible: WrapCellAccessible(obj),
	}
}

func marshalContainerCellAccessible(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapContainerCellAccessible(obj), nil
}

// NewContainerCellAccessible constructs a class ContainerCellAccessible.
func NewContainerCellAccessible() ContainerCellAccessible {
	var cret C.GtkContainerCellAccessible
	var goret1 ContainerCellAccessible

	cret = C.gtk_container_cell_accessible_new()

	goret1 = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(cret.Native()))).(ContainerCellAccessible)

	return goret1
}

func (c containerCellAccessible) AddChild(child CellAccessible) {
	var arg0 *C.GtkContainerCellAccessible
	var arg1 *C.GtkCellAccessible

	arg0 = (*C.GtkContainerCellAccessible)(unsafe.Pointer(c.Native()))
	arg1 = (*C.GtkCellAccessible)(unsafe.Pointer(child.Native()))

	C.gtk_container_cell_accessible_add_child(arg0, child)
}

// Children: get a list of children.
func (c containerCellAccessible) Children() *glib.List {
	var arg0 *C.GtkContainerCellAccessible

	arg0 = (*C.GtkContainerCellAccessible)(unsafe.Pointer(c.Native()))

	var cret *C.GList
	var goret1 *glib.List

	cret = C.gtk_container_cell_accessible_get_children(arg0)

	goret1 = glib.WrapList(unsafe.Pointer(cret))

	return goret1
}

func (c containerCellAccessible) RemoveChild(child CellAccessible) {
	var arg0 *C.GtkContainerCellAccessible
	var arg1 *C.GtkCellAccessible

	arg0 = (*C.GtkContainerCellAccessible)(unsafe.Pointer(c.Native()))
	arg1 = (*C.GtkCellAccessible)(unsafe.Pointer(child.Native()))

	C.gtk_container_cell_accessible_remove_child(arg0, child)
}

type ContainerCellAccessiblePrivate struct {
	native C.GtkContainerCellAccessiblePrivate
}

// WrapContainerCellAccessiblePrivate wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapContainerCellAccessiblePrivate(ptr unsafe.Pointer) *ContainerCellAccessiblePrivate {
	if ptr == nil {
		return nil
	}

	return (*ContainerCellAccessiblePrivate)(ptr)
}

func marshalContainerCellAccessiblePrivate(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapContainerCellAccessiblePrivate(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (c *ContainerCellAccessiblePrivate) Native() unsafe.Pointer {
	return unsafe.Pointer(&c.native)
}
