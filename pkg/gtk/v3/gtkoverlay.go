// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_overlay_get_type()), F: marshalOverlay},
	})
}

// Overlay: gtkOverlay is a container which contains a single main child, on top
// of which it can place “overlay” widgets. The position of each overlay widget
// is determined by its Widget:halign and Widget:valign properties. E.g. a
// widget with both alignments set to GTK_ALIGN_START will be placed at the top
// left corner of the GtkOverlay container, whereas an overlay with halign set
// to GTK_ALIGN_CENTER and valign set to GTK_ALIGN_END will be placed a the
// bottom edge of the GtkOverlay, horizontally centered. The position can be
// adjusted by setting the margin properties of the child to non-zero values.
//
// More complicated placement of overlays is possible by connecting to the
// Overlay::get-child-position signal.
//
// An overlay’s minimum and natural sizes are those of its main child. The sizes
// of overlay children are not considered when measuring these preferred sizes.
//
//
// GtkOverlay as GtkBuildable
//
// The GtkOverlay implementation of the GtkBuildable interface supports placing
// a child as an overlay by specifying “overlay” as the “type” attribute of a
// `<child>` element.
//
//
// CSS nodes
//
// GtkOverlay has a single CSS node with the name “overlay”. Overlay children
// whose alignments cause them to be positioned at an edge get the style classes
// “.left”, “.right”, “.top”, and/or “.bottom” according to their position.
type Overlay interface {
	Bin
	Buildable

	// AddOverlay adds @widget to @overlay.
	//
	// The widget will be stacked on top of the main widget added with
	// gtk_container_add().
	//
	// The position at which @widget is placed is determined from its
	// Widget:halign and Widget:valign properties.
	AddOverlay(widget Widget)
	// OverlayPassThrough: convenience function to get the value of the
	// Overlay:pass-through child property for @widget.
	OverlayPassThrough(widget Widget) bool
	// ReorderOverlay moves @child to a new @index in the list of @overlay
	// children. The list contains overlays in the order that these were added
	// to @overlay by default. See also Overlay:index.
	//
	// A widget’s index in the @overlay children list determines which order the
	// children are drawn if they overlap. The first child is drawn at the
	// bottom. It also affects the default focus chain order.
	ReorderOverlay(child Widget, index_ int)
	// SetOverlayPassThrough: convenience function to set the value of the
	// Overlay:pass-through child property for @widget.
	SetOverlayPassThrough(widget Widget, passThrough bool)
}

// overlay implements the Overlay interface.
type overlay struct {
	Bin
	Buildable
}

var _ Overlay = (*overlay)(nil)

// WrapOverlay wraps a GObject to the right type. It is
// primarily used internally.
func WrapOverlay(obj *externglib.Object) Overlay {
	return Overlay{
		Bin:       WrapBin(obj),
		Buildable: WrapBuildable(obj),
	}
}

func marshalOverlay(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapOverlay(obj), nil
}

// NewOverlay constructs a class Overlay.
func NewOverlay() Overlay {
	var cret C.GtkOverlay
	var goret Overlay

	cret = C.gtk_overlay_new()

	goret = gextras.CastObject(externglib.Take(unsafe.Pointer(cret.Native()))).(Overlay)

	return goret
}

// AddOverlay adds @widget to @overlay.
//
// The widget will be stacked on top of the main widget added with
// gtk_container_add().
//
// The position at which @widget is placed is determined from its
// Widget:halign and Widget:valign properties.
func (o overlay) AddOverlay(widget Widget) {
	var arg0 *C.GtkOverlay
	var arg1 *C.GtkWidget

	arg0 = (*C.GtkOverlay)(unsafe.Pointer(o.Native()))
	arg1 = (*C.GtkWidget)(unsafe.Pointer(widget.Native()))

	C.gtk_overlay_add_overlay(arg0, arg1)
}

// OverlayPassThrough: convenience function to get the value of the
// Overlay:pass-through child property for @widget.
func (o overlay) OverlayPassThrough(widget Widget) bool {
	var arg0 *C.GtkOverlay
	var arg1 *C.GtkWidget

	arg0 = (*C.GtkOverlay)(unsafe.Pointer(o.Native()))
	arg1 = (*C.GtkWidget)(unsafe.Pointer(widget.Native()))

	var cret C.gboolean
	var goret bool

	cret = C.gtk_overlay_get_overlay_pass_through(arg0, arg1)

	if cret {
		goret = true
	}

	return goret
}

// ReorderOverlay moves @child to a new @index in the list of @overlay
// children. The list contains overlays in the order that these were added
// to @overlay by default. See also Overlay:index.
//
// A widget’s index in the @overlay children list determines which order the
// children are drawn if they overlap. The first child is drawn at the
// bottom. It also affects the default focus chain order.
func (o overlay) ReorderOverlay(child Widget, index_ int) {
	var arg0 *C.GtkOverlay
	var arg1 *C.GtkWidget
	var arg2 C.int

	arg0 = (*C.GtkOverlay)(unsafe.Pointer(o.Native()))
	arg1 = (*C.GtkWidget)(unsafe.Pointer(child.Native()))
	arg2 = C.int(index_)

	C.gtk_overlay_reorder_overlay(arg0, arg1, arg2)
}

// SetOverlayPassThrough: convenience function to set the value of the
// Overlay:pass-through child property for @widget.
func (o overlay) SetOverlayPassThrough(widget Widget, passThrough bool) {
	var arg0 *C.GtkOverlay
	var arg1 *C.GtkWidget
	var arg2 C.gboolean

	arg0 = (*C.GtkOverlay)(unsafe.Pointer(o.Native()))
	arg1 = (*C.GtkWidget)(unsafe.Pointer(widget.Native()))
	if passThrough {
		arg2 = C.gboolean(1)
	}

	C.gtk_overlay_set_overlay_pass_through(arg0, arg1, arg2)
}
