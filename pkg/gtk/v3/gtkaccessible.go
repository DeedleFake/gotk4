// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_accessible_get_type()), F: marshalAccessible},
	})
}

// Accessible: the Accessible class is the base class for accessible
// implementations for Widget subclasses. It is a thin wrapper around Object,
// which adds facilities for associating a widget with its accessible object.
//
// An accessible implementation for a third-party widget should derive from
// Accessible and implement the suitable interfaces from ATK, such as Text or
// Selection. To establish the connection between the widget class and its
// corresponding acccessible implementation, override the get_accessible vfunc
// in WidgetClass.
type Accessible interface {
	atk.Object

	// ConnectWidgetDestroyedAccessible: this function specifies the callback
	// function to be called when the widget corresponding to a GtkAccessible is
	// destroyed.
	//
	// Deprecated: since version 3.4.
	ConnectWidgetDestroyedAccessible()
	// Widget gets the Widget corresponding to the Accessible. The returned
	// widget does not have a reference added, so you do not need to unref it.
	Widget() Widget
	// SetWidgetAccessible sets the Widget corresponding to the Accessible.
	//
	// @accessible will not hold a reference to @widget. It is the callerâ€™s
	// responsibility to ensure that when @widget is destroyed, the widget is
	// unset by calling this function again with @widget set to nil.
	SetWidgetAccessible(widget Widget)
}

// accessible implements the Accessible class.
type accessible struct {
	atk.Object
}

// WrapAccessible wraps a GObject to the right type. It is
// primarily used internally.
func WrapAccessible(obj *externglib.Object) Accessible {
	return accessible{
		Object: atk.WrapObject(obj),
	}
}

func marshalAccessible(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapAccessible(obj), nil
}

func (a accessible) ConnectWidgetDestroyedAccessible() {
	var _arg0 *C.GtkAccessible // out

	_arg0 = (*C.GtkAccessible)(unsafe.Pointer(a.Native()))

	C.gtk_accessible_connect_widget_destroyed(_arg0)
}

func (a accessible) Widget() Widget {
	var _arg0 *C.GtkAccessible // out
	var _cret *C.GtkWidget     // in

	_arg0 = (*C.GtkAccessible)(unsafe.Pointer(a.Native()))

	_cret = C.gtk_accessible_get_widget(_arg0)

	var _widget Widget // out

	_widget = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Widget)

	return _widget
}

func (a accessible) SetWidgetAccessible(widget Widget) {
	var _arg0 *C.GtkAccessible // out
	var _arg1 *C.GtkWidget     // out

	_arg0 = (*C.GtkAccessible)(unsafe.Pointer(a.Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(widget.Native()))

	C.gtk_accessible_set_widget(_arg0, _arg1)
}
