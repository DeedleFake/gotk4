// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_vseparator_get_type()), F: marshalVSeparator},
	})
}

// VSeparator: the VSeparator widget is a vertical separator, used to group the
// widgets within a window. It displays a vertical line with a shadow to make it
// appear sunken into the interface.
//
// GtkVSeparator has been deprecated, use Separator instead.
type VSeparator interface {
	Separator

	// AsBuildable casts the class to the Buildable interface.
	AsBuildable() Buildable
	// AsOrientable casts the class to the Orientable interface.
	AsOrientable() Orientable
}

// vSeparator implements the VSeparator class.
type vSeparator struct {
	Separator
}

// WrapVSeparator wraps a GObject to the right type. It is
// primarily used internally.
func WrapVSeparator(obj *externglib.Object) VSeparator {
	return vSeparator{
		Separator: WrapSeparator(obj),
	}
}

func marshalVSeparator(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapVSeparator(obj), nil
}

// NewVSeparator creates a new VSeparator.
//
// Deprecated: since version 3.2.
func NewVSeparator() VSeparator {
	var _cret *C.GtkWidget // in

	_cret = C.gtk_vseparator_new()

	var _vSeparator VSeparator // out

	_vSeparator = WrapVSeparator(externglib.Take(unsafe.Pointer(_cret)))

	return _vSeparator
}

func (v vSeparator) AsBuildable() Buildable {
	return WrapBuildable(gextras.InternObject(v))
}

func (v vSeparator) AsOrientable() Orientable {
	return WrapOrientable(gextras.InternObject(v))
}
