// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_image_cell_accessible_get_type()), F: marshalImageCellAccessibler},
	})
}

// ImageCellAccessibler describes ImageCellAccessible's methods.
type ImageCellAccessibler interface {
	gextras.Objector

	privateImageCellAccessible()
}

type ImageCellAccessible struct {
	*externglib.Object
	RendererCellAccessible
	atk.Action
	atk.Image
}

var _ ImageCellAccessibler = (*ImageCellAccessible)(nil)

func wrapImageCellAccessibler(obj *externglib.Object) ImageCellAccessibler {
	return &ImageCellAccessible{
		Object: obj,
		RendererCellAccessible: RendererCellAccessible{
			CellAccessible: CellAccessible{
				Accessible: Accessible{
					Object: atk.Object{
						Object: obj,
					},
				},
				Action: atk.Action{
					Object: obj,
				},
			},
			Action: atk.Action{
				Object: obj,
			},
		},
		Action: atk.Action{
			Object: obj,
		},
		Image: atk.Image{
			Object: obj,
		},
	}
}

func marshalImageCellAccessibler(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapImageCellAccessibler(obj), nil
}

func (*ImageCellAccessible) privateImageCellAccessible() {}
