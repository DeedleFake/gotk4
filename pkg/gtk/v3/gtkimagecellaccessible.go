// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_image_cell_accessible_get_type()), F: marshalImageCellAccessible},
	})
}

type ImageCellAccessible interface {
	gextras.Objector

	privateImageCellAccessibleClass()
}

// ImageCellAccessibleClass implements the ImageCellAccessible interface.
type ImageCellAccessibleClass struct {
	*externglib.Object
	RendererCellAccessibleClass
	atk.ActionInterface
	atk.ImageInterface
}

var _ ImageCellAccessible = (*ImageCellAccessibleClass)(nil)

func wrapImageCellAccessible(obj *externglib.Object) ImageCellAccessible {
	return &ImageCellAccessibleClass{
		Object: obj,
		RendererCellAccessibleClass: RendererCellAccessibleClass{
			Object: obj,
			CellAccessibleClass: CellAccessibleClass{
				Object: obj,
				AccessibleClass: AccessibleClass{
					ObjectClass: atk.ObjectClass{
						Object: obj,
					},
				},
				ActionInterface: atk.ActionInterface{
					Object: obj,
				},
			},
			ActionInterface: atk.ActionInterface{
				Object: obj,
			},
		},
		ActionInterface: atk.ActionInterface{
			Object: obj,
		},
		ImageInterface: atk.ImageInterface{
			Object: obj,
		},
	}
}

func marshalImageCellAccessible(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapImageCellAccessible(obj), nil
}

func (*ImageCellAccessibleClass) privateImageCellAccessibleClass() {}
