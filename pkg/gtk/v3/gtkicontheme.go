// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/cairo"
	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
	"github.com/diamondburned/gotk4/pkg/gdkpixbuf/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_icon_theme_error_get_type()), F: marshalIconThemeError},
		{T: externglib.Type(C.gtk_icon_lookup_flags_get_type()), F: marshalIconLookupFlags},
		{T: externglib.Type(C.gtk_icon_info_get_type()), F: marshalIconInfo},
		{T: externglib.Type(C.gtk_icon_theme_get_type()), F: marshalIconTheme},
	})
}

// IconThemeError: error codes for GtkIconTheme operations.
type IconThemeError int

const (
	// NotFound: the icon specified does not exist in the theme
	IconThemeErrorNotFound IconThemeError = iota
	// Failed: unspecified error occurred.
	IconThemeErrorFailed
)

func marshalIconThemeError(p uintptr) (interface{}, error) {
	return IconThemeError(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// IconLookupFlags: used to specify options for gtk_icon_theme_lookup_icon()
type IconLookupFlags int

const (
	// IconLookupFlagsNoSvg: never get SVG icons, even if gdk-pixbuf supports
	// them. Cannot be used together with GTK_ICON_LOOKUP_FORCE_SVG.
	IconLookupFlagsNoSvg IconLookupFlags = 0b1
	// IconLookupFlagsForceSvg: get SVG icons, even if gdk-pixbuf doesn’t
	// support them. Cannot be used together with GTK_ICON_LOOKUP_NO_SVG.
	IconLookupFlagsForceSvg IconLookupFlags = 0b10
	// IconLookupFlagsUseBuiltin: when passed to gtk_icon_theme_lookup_icon()
	// includes builtin icons as well as files. For a builtin icon,
	// gtk_icon_info_get_filename() is nil and you need to call
	// gtk_icon_info_get_builtin_pixbuf().
	IconLookupFlagsUseBuiltin IconLookupFlags = 0b100
	// IconLookupFlagsGenericFallback: try to shorten icon name at '-'
	// characters before looking at inherited themes. This flag is only
	// supported in functions that take a single icon name. For more general
	// fallback, see gtk_icon_theme_choose_icon(). Since 2.12.
	IconLookupFlagsGenericFallback IconLookupFlags = 0b1000
	// IconLookupFlagsForceSize always get the icon scaled to the requested
	// size. Since 2.14.
	IconLookupFlagsForceSize IconLookupFlags = 0b10000
	// IconLookupFlagsForceRegular: try to always load regular icons, even when
	// symbolic icon names are given. Since 3.14.
	IconLookupFlagsForceRegular IconLookupFlags = 0b100000
	// IconLookupFlagsForceSymbolic: try to always load symbolic icons, even
	// when regular icon names are given. Since 3.14.
	IconLookupFlagsForceSymbolic IconLookupFlags = 0b1000000
	// IconLookupFlagsDirLTR: try to load a variant of the icon for
	// left-to-right text direction. Since 3.14.
	IconLookupFlagsDirLTR IconLookupFlags = 0b10000000
	// IconLookupFlagsDirRTL: try to load a variant of the icon for
	// right-to-left text direction. Since 3.14.
	IconLookupFlagsDirRTL IconLookupFlags = 0b100000000
)

func marshalIconLookupFlags(p uintptr) (interface{}, error) {
	return IconLookupFlags(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// IconInfo contains information found when looking up an icon in an icon theme.
type IconInfo interface {
	gextras.Objector

	// AttachPoints: this function is deprecated and always returns false.
	//
	// Deprecated: since version 3.14.
	AttachPoints() ([]gdk.Point, bool)
	// BaseScale gets the base scale for the icon. The base scale is a scale for
	// the icon that was specified by the icon theme creator. For instance an
	// icon drawn for a high-dpi screen with window scale 2 for a base size of
	// 32 will be 64 pixels tall and have a base scale of 2.
	BaseScale() int
	// BaseSize gets the base size for the icon. The base size is a size for the
	// icon that was specified by the icon theme creator. This may be different
	// than the actual size of image; an example of this is small emblem icons
	// that can be attached to a larger icon. These icons will be given the same
	// base size as the larger icons to which they are attached.
	//
	// Note that for scaled icons the base size does not include the base scale.
	BaseSize() int
	// BuiltinPixbuf gets the built-in image for this icon, if any. To allow
	// GTK+ to use built in icon images, you must pass the
	// GTK_ICON_LOOKUP_USE_BUILTIN to gtk_icon_theme_lookup_icon().
	//
	// Deprecated: since version 3.14.
	BuiltinPixbuf() *gdkpixbuf.PixbufClass
	// DisplayName: this function is deprecated and always returns nil.
	//
	// Deprecated: since version 3.14.
	DisplayName() string
	// EmbeddedRect: this function is deprecated and always returns false.
	//
	// Deprecated: since version 3.14.
	EmbeddedRect() (gdk.Rectangle, bool)
	// Filename gets the filename for the icon. If the
	// GTK_ICON_LOOKUP_USE_BUILTIN flag was passed to
	// gtk_icon_theme_lookup_icon(), there may be no filename if a builtin icon
	// is returned; in this case, you should use
	// gtk_icon_info_get_builtin_pixbuf().
	Filename() string
	// IsSymbolic checks if the icon is symbolic or not. This currently uses
	// only the file name and not the file contents for determining this. This
	// behaviour may change in the future.
	IsSymbolic() bool
	// LoadIcon renders an icon previously looked up in an icon theme using
	// gtk_icon_theme_lookup_icon(); the size will be based on the size passed
	// to gtk_icon_theme_lookup_icon(). Note that the resulting pixbuf may not
	// be exactly this size; an icon theme may have icons that differ slightly
	// from their nominal sizes, and in addition GTK+ will avoid scaling icons
	// that it considers sufficiently close to the requested size or for which
	// the source image would have to be scaled up too far. (This maintains
	// sharpness.). This behaviour can be changed by passing the
	// GTK_ICON_LOOKUP_FORCE_SIZE flag when obtaining the IconInfo. If this flag
	// has been specified, the pixbuf returned by this function will be scaled
	// to the exact size.
	LoadIcon() (*gdkpixbuf.PixbufClass, error)
	// LoadSurface renders an icon previously looked up in an icon theme using
	// gtk_icon_theme_lookup_icon(); the size will be based on the size passed
	// to gtk_icon_theme_lookup_icon(). Note that the resulting surface may not
	// be exactly this size; an icon theme may have icons that differ slightly
	// from their nominal sizes, and in addition GTK+ will avoid scaling icons
	// that it considers sufficiently close to the requested size or for which
	// the source image would have to be scaled up too far. (This maintains
	// sharpness.). This behaviour can be changed by passing the
	// GTK_ICON_LOOKUP_FORCE_SIZE flag when obtaining the IconInfo. If this flag
	// has been specified, the pixbuf returned by this function will be scaled
	// to the exact size.
	LoadSurface(forWindow gdk.Window) (*cairo.Surface, error)
	// LoadSymbolic loads an icon, modifying it to match the system colours for
	// the foreground, success, warning and error colors provided. If the icon
	// is not a symbolic one, the function will return the result from
	// gtk_icon_info_load_icon().
	//
	// This allows loading symbolic icons that will match the system theme.
	//
	// Unless you are implementing a widget, you will want to use
	// g_themed_icon_new_with_default_fallbacks() to load the icon.
	//
	// As implementation details, the icon loaded needs to be of SVG type,
	// contain the “symbolic” term as the last component of the icon name, and
	// use the “fg”, “success”, “warning” and “error” CSS styles in the SVG file
	// itself.
	//
	// See the Symbolic Icons Specification
	// (http://www.freedesktop.org/wiki/SymbolicIcons) for more information
	// about symbolic icons.
	LoadSymbolic(fg *gdk.RGBA, successColor *gdk.RGBA, warningColor *gdk.RGBA, errorColor *gdk.RGBA) (bool, *gdkpixbuf.PixbufClass, error)
	// LoadSymbolicForContext loads an icon, modifying it to match the system
	// colors for the foreground, success, warning and error colors provided. If
	// the icon is not a symbolic one, the function will return the result from
	// gtk_icon_info_load_icon(). This function uses the regular foreground
	// color and the symbolic colors with the names “success_color”,
	// “warning_color” and “error_color” from the context.
	//
	// This allows loading symbolic icons that will match the system theme.
	//
	// See gtk_icon_info_load_symbolic() for more details.
	LoadSymbolicForContext(context StyleContext) (bool, *gdkpixbuf.PixbufClass, error)
	// SetRawCoordinates sets whether the coordinates returned by
	// gtk_icon_info_get_embedded_rect() and gtk_icon_info_get_attach_points()
	// should be returned in their original form as specified in the icon theme,
	// instead of scaled appropriately for the pixbuf returned by
	// gtk_icon_info_load_icon().
	//
	// Raw coordinates are somewhat strange; they are specified to be with
	// respect to the unscaled pixmap for PNG and XPM icons, but for SVG icons,
	// they are in a 1000x1000 coordinate space that is scaled to the final size
	// of the icon. You can determine if the icon is an SVG icon by using
	// gtk_icon_info_get_filename(), and seeing if it is non-nil and ends in
	// “.svg”.
	//
	// This function is provided primarily to allow compatibility wrappers for
	// older API's, and is not expected to be useful for applications.
	//
	// Deprecated: since version 3.14.
	SetRawCoordinates(rawCoordinates bool)
}

// IconInfoClass implements the IconInfo interface.
type IconInfoClass struct {
	*externglib.Object
}

var _ IconInfo = (*IconInfoClass)(nil)

func wrapIconInfo(obj *externglib.Object) IconInfo {
	return &IconInfoClass{
		Object: obj,
	}
}

func marshalIconInfo(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapIconInfo(obj), nil
}

// NewIconInfoForPixbuf creates a IconInfo for a Pixbuf.
func NewIconInfoForPixbuf(iconTheme IconTheme, pixbuf gdkpixbuf.Pixbuf) *IconInfoClass {
	var _arg1 *C.GtkIconTheme // out
	var _arg2 *C.GdkPixbuf    // out
	var _cret *C.GtkIconInfo  // in

	_arg1 = (*C.GtkIconTheme)(unsafe.Pointer(iconTheme.Native()))
	_arg2 = (*C.GdkPixbuf)(unsafe.Pointer(pixbuf.Native()))

	_cret = C.gtk_icon_info_new_for_pixbuf(_arg1, _arg2)

	var _iconInfo *IconInfoClass // out

	_iconInfo = (gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret)))).(*IconInfoClass)

	return _iconInfo
}

// AttachPoints: this function is deprecated and always returns false.
//
// Deprecated: since version 3.14.
func (i *IconInfoClass) AttachPoints() ([]gdk.Point, bool) {
	var _arg0 *C.GtkIconInfo // out
	var _arg1 *C.GdkPoint
	var _arg2 C.gint     // in
	var _cret C.gboolean // in

	_arg0 = (*C.GtkIconInfo)(unsafe.Pointer(i.Native()))

	_cret = C.gtk_icon_info_get_attach_points(_arg0, &_arg1, &_arg2)

	var _points []gdk.Point
	var _ok bool // out

	_points = unsafe.Slice((*gdk.Point)(unsafe.Pointer(_arg1)), _arg2)
	runtime.SetFinalizer(&_points, func(v *[]gdk.Point) {
		C.free(unsafe.Pointer(&(*v)[0]))
	})
	if _cret != 0 {
		_ok = true
	}

	return _points, _ok
}

// BaseScale gets the base scale for the icon. The base scale is a scale for the
// icon that was specified by the icon theme creator. For instance an icon drawn
// for a high-dpi screen with window scale 2 for a base size of 32 will be 64
// pixels tall and have a base scale of 2.
func (i *IconInfoClass) BaseScale() int {
	var _arg0 *C.GtkIconInfo // out
	var _cret C.gint         // in

	_arg0 = (*C.GtkIconInfo)(unsafe.Pointer(i.Native()))

	_cret = C.gtk_icon_info_get_base_scale(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// BaseSize gets the base size for the icon. The base size is a size for the
// icon that was specified by the icon theme creator. This may be different than
// the actual size of image; an example of this is small emblem icons that can
// be attached to a larger icon. These icons will be given the same base size as
// the larger icons to which they are attached.
//
// Note that for scaled icons the base size does not include the base scale.
func (i *IconInfoClass) BaseSize() int {
	var _arg0 *C.GtkIconInfo // out
	var _cret C.gint         // in

	_arg0 = (*C.GtkIconInfo)(unsafe.Pointer(i.Native()))

	_cret = C.gtk_icon_info_get_base_size(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// BuiltinPixbuf gets the built-in image for this icon, if any. To allow GTK+ to
// use built in icon images, you must pass the GTK_ICON_LOOKUP_USE_BUILTIN to
// gtk_icon_theme_lookup_icon().
//
// Deprecated: since version 3.14.
func (i *IconInfoClass) BuiltinPixbuf() *gdkpixbuf.PixbufClass {
	var _arg0 *C.GtkIconInfo // out
	var _cret *C.GdkPixbuf   // in

	_arg0 = (*C.GtkIconInfo)(unsafe.Pointer(i.Native()))

	_cret = C.gtk_icon_info_get_builtin_pixbuf(_arg0)

	var _pixbuf *gdkpixbuf.PixbufClass // out

	_pixbuf = (gextras.CastObject(externglib.Take(unsafe.Pointer(_cret)))).(*gdkpixbuf.PixbufClass)

	return _pixbuf
}

// DisplayName: this function is deprecated and always returns nil.
//
// Deprecated: since version 3.14.
func (i *IconInfoClass) DisplayName() string {
	var _arg0 *C.GtkIconInfo // out
	var _cret *C.gchar       // in

	_arg0 = (*C.GtkIconInfo)(unsafe.Pointer(i.Native()))

	_cret = C.gtk_icon_info_get_display_name(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

// EmbeddedRect: this function is deprecated and always returns false.
//
// Deprecated: since version 3.14.
func (i *IconInfoClass) EmbeddedRect() (gdk.Rectangle, bool) {
	var _arg0 *C.GtkIconInfo // out
	var _arg1 C.GdkRectangle // in
	var _cret C.gboolean     // in

	_arg0 = (*C.GtkIconInfo)(unsafe.Pointer(i.Native()))

	_cret = C.gtk_icon_info_get_embedded_rect(_arg0, &_arg1)

	var _rectangle gdk.Rectangle // out
	var _ok bool                 // out

	_rectangle = *(*gdk.Rectangle)(unsafe.Pointer((&_arg1)))
	if _cret != 0 {
		_ok = true
	}

	return _rectangle, _ok
}

// Filename gets the filename for the icon. If the GTK_ICON_LOOKUP_USE_BUILTIN
// flag was passed to gtk_icon_theme_lookup_icon(), there may be no filename if
// a builtin icon is returned; in this case, you should use
// gtk_icon_info_get_builtin_pixbuf().
func (i *IconInfoClass) Filename() string {
	var _arg0 *C.GtkIconInfo // out
	var _cret *C.gchar       // in

	_arg0 = (*C.GtkIconInfo)(unsafe.Pointer(i.Native()))

	_cret = C.gtk_icon_info_get_filename(_arg0)

	var _filename string // out

	_filename = C.GoString(_cret)

	return _filename
}

// IsSymbolic checks if the icon is symbolic or not. This currently uses only
// the file name and not the file contents for determining this. This behaviour
// may change in the future.
func (i *IconInfoClass) IsSymbolic() bool {
	var _arg0 *C.GtkIconInfo // out
	var _cret C.gboolean     // in

	_arg0 = (*C.GtkIconInfo)(unsafe.Pointer(i.Native()))

	_cret = C.gtk_icon_info_is_symbolic(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// LoadIcon renders an icon previously looked up in an icon theme using
// gtk_icon_theme_lookup_icon(); the size will be based on the size passed to
// gtk_icon_theme_lookup_icon(). Note that the resulting pixbuf may not be
// exactly this size; an icon theme may have icons that differ slightly from
// their nominal sizes, and in addition GTK+ will avoid scaling icons that it
// considers sufficiently close to the requested size or for which the source
// image would have to be scaled up too far. (This maintains sharpness.). This
// behaviour can be changed by passing the GTK_ICON_LOOKUP_FORCE_SIZE flag when
// obtaining the IconInfo. If this flag has been specified, the pixbuf returned
// by this function will be scaled to the exact size.
func (i *IconInfoClass) LoadIcon() (*gdkpixbuf.PixbufClass, error) {
	var _arg0 *C.GtkIconInfo // out
	var _cret *C.GdkPixbuf   // in
	var _cerr *C.GError      // in

	_arg0 = (*C.GtkIconInfo)(unsafe.Pointer(i.Native()))

	_cret = C.gtk_icon_info_load_icon(_arg0, &_cerr)

	var _pixbuf *gdkpixbuf.PixbufClass // out
	var _goerr error                   // out

	_pixbuf = (gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret)))).(*gdkpixbuf.PixbufClass)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _pixbuf, _goerr
}

// LoadSurface renders an icon previously looked up in an icon theme using
// gtk_icon_theme_lookup_icon(); the size will be based on the size passed to
// gtk_icon_theme_lookup_icon(). Note that the resulting surface may not be
// exactly this size; an icon theme may have icons that differ slightly from
// their nominal sizes, and in addition GTK+ will avoid scaling icons that it
// considers sufficiently close to the requested size or for which the source
// image would have to be scaled up too far. (This maintains sharpness.). This
// behaviour can be changed by passing the GTK_ICON_LOOKUP_FORCE_SIZE flag when
// obtaining the IconInfo. If this flag has been specified, the pixbuf returned
// by this function will be scaled to the exact size.
func (i *IconInfoClass) LoadSurface(forWindow gdk.Window) (*cairo.Surface, error) {
	var _arg0 *C.GtkIconInfo     // out
	var _arg1 *C.GdkWindow       // out
	var _cret *C.cairo_surface_t // in
	var _cerr *C.GError          // in

	_arg0 = (*C.GtkIconInfo)(unsafe.Pointer(i.Native()))
	_arg1 = (*C.GdkWindow)(unsafe.Pointer(forWindow.Native()))

	_cret = C.gtk_icon_info_load_surface(_arg0, _arg1, &_cerr)

	var _surface *cairo.Surface // out
	var _goerr error            // out

	_surface = (*cairo.Surface)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(_surface, func(v *cairo.Surface) {
		C.free(unsafe.Pointer(v))
	})
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _surface, _goerr
}

// LoadSymbolic loads an icon, modifying it to match the system colours for the
// foreground, success, warning and error colors provided. If the icon is not a
// symbolic one, the function will return the result from
// gtk_icon_info_load_icon().
//
// This allows loading symbolic icons that will match the system theme.
//
// Unless you are implementing a widget, you will want to use
// g_themed_icon_new_with_default_fallbacks() to load the icon.
//
// As implementation details, the icon loaded needs to be of SVG type, contain
// the “symbolic” term as the last component of the icon name, and use the “fg”,
// “success”, “warning” and “error” CSS styles in the SVG file itself.
//
// See the Symbolic Icons Specification
// (http://www.freedesktop.org/wiki/SymbolicIcons) for more information about
// symbolic icons.
func (i *IconInfoClass) LoadSymbolic(fg *gdk.RGBA, successColor *gdk.RGBA, warningColor *gdk.RGBA, errorColor *gdk.RGBA) (bool, *gdkpixbuf.PixbufClass, error) {
	var _arg0 *C.GtkIconInfo // out
	var _arg1 *C.GdkRGBA     // out
	var _arg2 *C.GdkRGBA     // out
	var _arg3 *C.GdkRGBA     // out
	var _arg4 *C.GdkRGBA     // out
	var _arg5 C.gboolean     // in
	var _cret *C.GdkPixbuf   // in
	var _cerr *C.GError      // in

	_arg0 = (*C.GtkIconInfo)(unsafe.Pointer(i.Native()))
	_arg1 = (*C.GdkRGBA)(unsafe.Pointer(fg))
	_arg2 = (*C.GdkRGBA)(unsafe.Pointer(successColor))
	_arg3 = (*C.GdkRGBA)(unsafe.Pointer(warningColor))
	_arg4 = (*C.GdkRGBA)(unsafe.Pointer(errorColor))

	_cret = C.gtk_icon_info_load_symbolic(_arg0, _arg1, _arg2, _arg3, _arg4, &_arg5, &_cerr)

	var _wasSymbolic bool              // out
	var _pixbuf *gdkpixbuf.PixbufClass // out
	var _goerr error                   // out

	if _arg5 != 0 {
		_wasSymbolic = true
	}
	_pixbuf = (gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret)))).(*gdkpixbuf.PixbufClass)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _wasSymbolic, _pixbuf, _goerr
}

// LoadSymbolicForContext loads an icon, modifying it to match the system colors
// for the foreground, success, warning and error colors provided. If the icon
// is not a symbolic one, the function will return the result from
// gtk_icon_info_load_icon(). This function uses the regular foreground color
// and the symbolic colors with the names “success_color”, “warning_color” and
// “error_color” from the context.
//
// This allows loading symbolic icons that will match the system theme.
//
// See gtk_icon_info_load_symbolic() for more details.
func (i *IconInfoClass) LoadSymbolicForContext(context StyleContext) (bool, *gdkpixbuf.PixbufClass, error) {
	var _arg0 *C.GtkIconInfo     // out
	var _arg1 *C.GtkStyleContext // out
	var _arg2 C.gboolean         // in
	var _cret *C.GdkPixbuf       // in
	var _cerr *C.GError          // in

	_arg0 = (*C.GtkIconInfo)(unsafe.Pointer(i.Native()))
	_arg1 = (*C.GtkStyleContext)(unsafe.Pointer(context.Native()))

	_cret = C.gtk_icon_info_load_symbolic_for_context(_arg0, _arg1, &_arg2, &_cerr)

	var _wasSymbolic bool              // out
	var _pixbuf *gdkpixbuf.PixbufClass // out
	var _goerr error                   // out

	if _arg2 != 0 {
		_wasSymbolic = true
	}
	_pixbuf = (gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret)))).(*gdkpixbuf.PixbufClass)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _wasSymbolic, _pixbuf, _goerr
}

// SetRawCoordinates sets whether the coordinates returned by
// gtk_icon_info_get_embedded_rect() and gtk_icon_info_get_attach_points()
// should be returned in their original form as specified in the icon theme,
// instead of scaled appropriately for the pixbuf returned by
// gtk_icon_info_load_icon().
//
// Raw coordinates are somewhat strange; they are specified to be with respect
// to the unscaled pixmap for PNG and XPM icons, but for SVG icons, they are in
// a 1000x1000 coordinate space that is scaled to the final size of the icon.
// You can determine if the icon is an SVG icon by using
// gtk_icon_info_get_filename(), and seeing if it is non-nil and ends in “.svg”.
//
// This function is provided primarily to allow compatibility wrappers for older
// API's, and is not expected to be useful for applications.
//
// Deprecated: since version 3.14.
func (i *IconInfoClass) SetRawCoordinates(rawCoordinates bool) {
	var _arg0 *C.GtkIconInfo // out
	var _arg1 C.gboolean     // out

	_arg0 = (*C.GtkIconInfo)(unsafe.Pointer(i.Native()))
	if rawCoordinates {
		_arg1 = C.TRUE
	}

	C.gtk_icon_info_set_raw_coordinates(_arg0, _arg1)
}

// IconThemeOverrider contains methods that are overridable.
//
// As of right now, interface overriding and subclassing is not supported
// yet, so the interface currently has no use.
type IconThemeOverrider interface {
	Changed()
}

// IconTheme provides a facility for looking up icons by name and size. The main
// reason for using a name rather than simply providing a filename is to allow
// different icons to be used depending on what “icon theme” is selected by the
// user. The operation of icon themes on Linux and Unix follows the Icon Theme
// Specification (http://www.freedesktop.org/Standards/icon-theme-spec) There is
// a fallback icon theme, named `hicolor`, where applications should install
// their icons, but additional icon themes can be installed as operating system
// vendors and users choose.
//
// Named icons are similar to the deprecated [Stock Items][gtkstock], and the
// distinction between the two may be a bit confusing. A few things to keep in
// mind:
//
// - Stock images usually are used in conjunction with [Stock Items][gtkstock],
// such as GTK_STOCK_OK or GTK_STOCK_OPEN. Named icons are easier to set up and
// therefore are more useful for new icons that an application wants to add,
// such as application icons or window icons.
//
// - Stock images can only be loaded at the symbolic sizes defined by the
// IconSize enumeration, or by custom sizes defined by gtk_icon_size_register(),
// while named icons are more flexible and any pixel size can be specified.
//
// - Because stock images are closely tied to stock items, and thus to actions
// in the user interface, stock images may come in multiple variants for
// different widget states or writing directions.
//
// A good rule of thumb is that if there is a stock image for what you want to
// use, use it, otherwise use a named icon. It turns out that internally stock
// images are generally defined in terms of one or more named icons. (An example
// of the more than one case is icons that depend on writing direction;
// GTK_STOCK_GO_FORWARD uses the two themed icons “gtk-stock-go-forward-ltr” and
// “gtk-stock-go-forward-rtl”.)
//
// In many cases, named themes are used indirectly, via Image or stock items,
// rather than directly, but looking up icons directly is also simple. The
// IconTheme object acts as a database of all the icons in the current theme.
// You can create new IconTheme objects, but it’s much more efficient to use the
// standard icon theme for the Screen so that the icon information is shared
// with other people looking up icons.
//
//    GError *error = NULL;
//    GtkIconTheme *icon_theme;
//    GdkPixbuf *pixbuf;
//
//    icon_theme = gtk_icon_theme_get_default ();
//    pixbuf = gtk_icon_theme_load_icon (icon_theme,
//                                       "my-icon-name", // icon name
//                                       48, // icon size
//                                       0,  // flags
//                                       &error);
//    if (!pixbuf)
//      {
//        g_warning ("Couldn’t load icon: s", error->message);
//        g_error_free (error);
//      }
//    else
//      {
//        // Use the pixbuf
//        g_object_unref (pixbuf);
//      }
type IconTheme interface {
	gextras.Objector

	// AddResourcePath adds a resource path that will be looked at when looking
	// for icons, similar to search paths.
	//
	// This function should be used to make application-specific icons available
	// as part of the icon theme.
	//
	// The resources are considered as part of the hicolor icon theme and must
	// be located in subdirectories that are defined in the hicolor icon theme,
	// such as `@path/16x16/actions/run.png`. Icons that are directly placed in
	// the resource path instead of a subdirectory are also considered as
	// ultimate fallback.
	AddResourcePath(path string)
	// AppendSearchPath appends a directory to the search path. See
	// gtk_icon_theme_set_search_path().
	AppendSearchPath(path string)
	// ExampleIconName gets the name of an icon that is representative of the
	// current theme (for instance, to use when presenting a list of themes to
	// the user.)
	ExampleIconName() string
	// IconSizes returns an array of integers describing the sizes at which the
	// icon is available without scaling. A size of -1 means that the icon is
	// available in a scalable format. The array is zero-terminated.
	IconSizes(iconName string) []int
	// SearchPath gets the current search path. See
	// gtk_icon_theme_set_search_path().
	SearchPath() []string
	// HasIcon checks whether an icon theme includes an icon for a particular
	// name.
	HasIcon(iconName string) bool
	// PrependSearchPath prepends a directory to the search path. See
	// gtk_icon_theme_set_search_path().
	PrependSearchPath(path string)
	// RescanIfNeeded checks to see if the icon theme has changed; if it has,
	// any currently cached information is discarded and will be reloaded next
	// time @icon_theme is accessed.
	RescanIfNeeded() bool
	// SetCustomTheme sets the name of the icon theme that the IconTheme object
	// uses overriding system configuration. This function cannot be called on
	// the icon theme objects returned from gtk_icon_theme_get_default() and
	// gtk_icon_theme_get_for_screen().
	SetCustomTheme(themeName string)
	// SetScreen sets the screen for an icon theme; the screen is used to track
	// the user’s currently configured icon theme, which might be different for
	// different screens.
	SetScreen(screen gdk.Screen)
	// SetSearchPath sets the search path for the icon theme object. When
	// looking for an icon theme, GTK+ will search for a subdirectory of one or
	// more of the directories in @path with the same name as the icon theme
	// containing an index.theme file. (Themes from multiple of the path
	// elements are combined to allow themes to be extended by adding icons in
	// the user’s home directory.)
	//
	// In addition if an icon found isn’t found either in the current icon theme
	// or the default icon theme, and an image file with the right name is found
	// directly in one of the elements of @path, then that image will be used
	// for the icon name. (This is legacy feature, and new icons should be put
	// into the fallback icon theme, which is called hicolor, rather than
	// directly on the icon path.)
	SetSearchPath(path []string)
}

// IconThemeClass implements the IconTheme interface.
type IconThemeClass struct {
	*externglib.Object
}

var _ IconTheme = (*IconThemeClass)(nil)

func wrapIconTheme(obj *externglib.Object) IconTheme {
	return &IconThemeClass{
		Object: obj,
	}
}

func marshalIconTheme(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapIconTheme(obj), nil
}

// NewIconTheme creates a new icon theme object. Icon theme objects are used to
// lookup up an icon by name in a particular icon theme. Usually, you’ll want to
// use gtk_icon_theme_get_default() or gtk_icon_theme_get_for_screen() rather
// than creating a new icon theme object for scratch.
func NewIconTheme() *IconThemeClass {
	var _cret *C.GtkIconTheme // in

	_cret = C.gtk_icon_theme_new()

	var _iconTheme *IconThemeClass // out

	_iconTheme = (gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret)))).(*IconThemeClass)

	return _iconTheme
}

// AddResourcePath adds a resource path that will be looked at when looking for
// icons, similar to search paths.
//
// This function should be used to make application-specific icons available as
// part of the icon theme.
//
// The resources are considered as part of the hicolor icon theme and must be
// located in subdirectories that are defined in the hicolor icon theme, such as
// `@path/16x16/actions/run.png`. Icons that are directly placed in the resource
// path instead of a subdirectory are also considered as ultimate fallback.
func (i *IconThemeClass) AddResourcePath(path string) {
	var _arg0 *C.GtkIconTheme // out
	var _arg1 *C.gchar        // out

	_arg0 = (*C.GtkIconTheme)(unsafe.Pointer(i.Native()))
	_arg1 = (*C.gchar)(C.CString(path))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_icon_theme_add_resource_path(_arg0, _arg1)
}

// AppendSearchPath appends a directory to the search path. See
// gtk_icon_theme_set_search_path().
func (i *IconThemeClass) AppendSearchPath(path string) {
	var _arg0 *C.GtkIconTheme // out
	var _arg1 *C.gchar        // out

	_arg0 = (*C.GtkIconTheme)(unsafe.Pointer(i.Native()))
	_arg1 = (*C.gchar)(C.CString(path))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_icon_theme_append_search_path(_arg0, _arg1)
}

// ExampleIconName gets the name of an icon that is representative of the
// current theme (for instance, to use when presenting a list of themes to the
// user.)
func (i *IconThemeClass) ExampleIconName() string {
	var _arg0 *C.GtkIconTheme // out
	var _cret *C.char         // in

	_arg0 = (*C.GtkIconTheme)(unsafe.Pointer(i.Native()))

	_cret = C.gtk_icon_theme_get_example_icon_name(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// IconSizes returns an array of integers describing the sizes at which the icon
// is available without scaling. A size of -1 means that the icon is available
// in a scalable format. The array is zero-terminated.
func (i *IconThemeClass) IconSizes(iconName string) []int {
	var _arg0 *C.GtkIconTheme // out
	var _arg1 *C.gchar        // out
	var _cret *C.gint

	_arg0 = (*C.GtkIconTheme)(unsafe.Pointer(i.Native()))
	_arg1 = (*C.gchar)(C.CString(iconName))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_icon_theme_get_icon_sizes(_arg0, _arg1)

	var _gints []int

	{
		var i int
		var z C.gint
		for p := _cret; *p != z; p = &unsafe.Slice(p, i+1)[i] {
			i++
		}

		src := unsafe.Slice(_cret, i)
		_gints = make([]int, i)
		for i := range src {
			_gints[i] = int(src[i])
		}
	}

	return _gints
}

// SearchPath gets the current search path. See
// gtk_icon_theme_set_search_path().
func (i *IconThemeClass) SearchPath() []string {
	var _arg0 *C.GtkIconTheme // out
	var _arg1 **C.gchar
	var _arg2 C.gint // in

	_arg0 = (*C.GtkIconTheme)(unsafe.Pointer(i.Native()))

	C.gtk_icon_theme_get_search_path(_arg0, &_arg1, &_arg2)

	var _path []string

	defer C.free(unsafe.Pointer(_arg1))
	{
		src := unsafe.Slice(_arg1, _arg2)
		_path = make([]string, _arg2)
		for i := 0; i < int(_arg2); i++ {
			_path[i] = C.GoString(src[i])
			defer C.free(unsafe.Pointer(src[i]))
		}
	}

	return _path
}

// HasIcon checks whether an icon theme includes an icon for a particular name.
func (i *IconThemeClass) HasIcon(iconName string) bool {
	var _arg0 *C.GtkIconTheme // out
	var _arg1 *C.gchar        // out
	var _cret C.gboolean      // in

	_arg0 = (*C.GtkIconTheme)(unsafe.Pointer(i.Native()))
	_arg1 = (*C.gchar)(C.CString(iconName))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_icon_theme_has_icon(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// PrependSearchPath prepends a directory to the search path. See
// gtk_icon_theme_set_search_path().
func (i *IconThemeClass) PrependSearchPath(path string) {
	var _arg0 *C.GtkIconTheme // out
	var _arg1 *C.gchar        // out

	_arg0 = (*C.GtkIconTheme)(unsafe.Pointer(i.Native()))
	_arg1 = (*C.gchar)(C.CString(path))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_icon_theme_prepend_search_path(_arg0, _arg1)
}

// RescanIfNeeded checks to see if the icon theme has changed; if it has, any
// currently cached information is discarded and will be reloaded next time
// @icon_theme is accessed.
func (i *IconThemeClass) RescanIfNeeded() bool {
	var _arg0 *C.GtkIconTheme // out
	var _cret C.gboolean      // in

	_arg0 = (*C.GtkIconTheme)(unsafe.Pointer(i.Native()))

	_cret = C.gtk_icon_theme_rescan_if_needed(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetCustomTheme sets the name of the icon theme that the IconTheme object uses
// overriding system configuration. This function cannot be called on the icon
// theme objects returned from gtk_icon_theme_get_default() and
// gtk_icon_theme_get_for_screen().
func (i *IconThemeClass) SetCustomTheme(themeName string) {
	var _arg0 *C.GtkIconTheme // out
	var _arg1 *C.gchar        // out

	_arg0 = (*C.GtkIconTheme)(unsafe.Pointer(i.Native()))
	_arg1 = (*C.gchar)(C.CString(themeName))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_icon_theme_set_custom_theme(_arg0, _arg1)
}

// SetScreen sets the screen for an icon theme; the screen is used to track the
// user’s currently configured icon theme, which might be different for
// different screens.
func (i *IconThemeClass) SetScreen(screen gdk.Screen) {
	var _arg0 *C.GtkIconTheme // out
	var _arg1 *C.GdkScreen    // out

	_arg0 = (*C.GtkIconTheme)(unsafe.Pointer(i.Native()))
	_arg1 = (*C.GdkScreen)(unsafe.Pointer(screen.Native()))

	C.gtk_icon_theme_set_screen(_arg0, _arg1)
}

// SetSearchPath sets the search path for the icon theme object. When looking
// for an icon theme, GTK+ will search for a subdirectory of one or more of the
// directories in @path with the same name as the icon theme containing an
// index.theme file. (Themes from multiple of the path elements are combined to
// allow themes to be extended by adding icons in the user’s home directory.)
//
// In addition if an icon found isn’t found either in the current icon theme or
// the default icon theme, and an image file with the right name is found
// directly in one of the elements of @path, then that image will be used for
// the icon name. (This is legacy feature, and new icons should be put into the
// fallback icon theme, which is called hicolor, rather than directly on the
// icon path.)
func (i *IconThemeClass) SetSearchPath(path []string) {
	var _arg0 *C.GtkIconTheme // out
	var _arg1 **C.gchar
	var _arg2 C.gint

	_arg0 = (*C.GtkIconTheme)(unsafe.Pointer(i.Native()))
	_arg2 = C.gint(len(path))
	_arg1 = (**C.gchar)(C.malloc(C.ulong(len(path)) * C.ulong(unsafe.Sizeof(uint(0)))))
	defer C.free(unsafe.Pointer(_arg1))
	{
		out := unsafe.Slice(_arg1, len(path))
		for i := range path {
			out[i] = (*C.gchar)(C.CString(path[i]))
			defer C.free(unsafe.Pointer(out[i]))
		}
	}

	C.gtk_icon_theme_set_search_path(_arg0, _arg1, _arg2)
}
