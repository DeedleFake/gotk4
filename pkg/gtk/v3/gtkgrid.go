// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_grid_get_type()), F: marshalGrid},
	})
}

// Grid: gtkGrid is a container which arranges its child widgets in rows and
// columns, with arbitrary positions and horizontal/vertical spans.
//
// Children are added using gtk_grid_attach(). They can span multiple rows or
// columns. It is also possible to add a child next to an existing child, using
// gtk_grid_attach_next_to(). The behaviour of GtkGrid when several children
// occupy the same grid cell is undefined.
//
// GtkGrid can be used like a Box by just using gtk_container_add(), which will
// place children next to each other in the direction determined by the
// Orientable:orientation property. However, if all you want is a single row or
// column, then Box is the preferred widget.
//
//
// CSS nodes
//
// GtkGrid uses a single CSS node with name grid.
type Grid interface {
	Container
	Buildable
	Orientable

	// Attach adds a widget to the grid.
	//
	// The position of @child is determined by @left and @top. The number of
	// “cells” that @child will occupy is determined by @width and @height.
	Attach(child Widget, left int, top int, width int, height int)
	// AttachNextTo adds a widget to the grid.
	//
	// The widget is placed next to @sibling, on the side determined by @side.
	// When @sibling is nil, the widget is placed in row (for left or right
	// placement) or column 0 (for top or bottom placement), at the end
	// indicated by @side.
	//
	// Attaching widgets labeled [1], [2], [3] with @sibling == nil and @side ==
	// GTK_POS_LEFT yields a layout of [3][2][1].
	AttachNextTo(child Widget, sibling Widget, side PositionType, width int, height int)
	// BaselineRow returns which row defines the global baseline of @grid.
	BaselineRow() int
	// ChildAt gets the child of @grid whose area covers the grid cell whose
	// upper left corner is at @left, @top.
	ChildAt(left int, top int) Widget
	// ColumnHomogeneous returns whether all columns of @grid have the same
	// width.
	ColumnHomogeneous() bool
	// ColumnSpacing returns the amount of space between the columns of @grid.
	ColumnSpacing() uint
	// RowBaselinePosition returns the baseline position of @row as set by
	// gtk_grid_set_row_baseline_position() or the default value
	// GTK_BASELINE_POSITION_CENTER.
	RowBaselinePosition(row int) BaselinePosition
	// RowHomogeneous returns whether all rows of @grid have the same height.
	RowHomogeneous() bool
	// RowSpacing returns the amount of space between the rows of @grid.
	RowSpacing() uint
	// InsertColumn inserts a column at the specified position.
	//
	// Children which are attached at or to the right of this position are moved
	// one column to the right. Children which span across this position are
	// grown to span the new column.
	InsertColumn(position int)
	// InsertNextTo inserts a row or column at the specified position.
	//
	// The new row or column is placed next to @sibling, on the side determined
	// by @side. If @side is GTK_POS_TOP or GTK_POS_BOTTOM, a row is inserted.
	// If @side is GTK_POS_LEFT of GTK_POS_RIGHT, a column is inserted.
	InsertNextTo(sibling Widget, side PositionType)
	// InsertRow inserts a row at the specified position.
	//
	// Children which are attached at or below this position are moved one row
	// down. Children which span across this position are grown to span the new
	// row.
	InsertRow(position int)
	// RemoveColumn removes a column from the grid.
	//
	// Children that are placed in this column are removed, spanning children
	// that overlap this column have their width reduced by one, and children
	// after the column are moved to the left.
	RemoveColumn(position int)
	// RemoveRow removes a row from the grid.
	//
	// Children that are placed in this row are removed, spanning children that
	// overlap this row have their height reduced by one, and children below the
	// row are moved up.
	RemoveRow(position int)
	// SetBaselineRow sets which row defines the global baseline for the entire
	// grid. Each row in the grid can have its own local baseline, but only one
	// of those is global, meaning it will be the baseline in the parent of the
	// @grid.
	SetBaselineRow(row int)
	// SetColumnHomogeneous sets whether all columns of @grid will have the same
	// width.
	SetColumnHomogeneous(homogeneous bool)
	// SetColumnSpacing sets the amount of space between columns of @grid.
	SetColumnSpacing(spacing uint)
	// SetRowBaselinePosition sets how the baseline should be positioned on @row
	// of the grid, in case that row is assigned more space than is requested.
	SetRowBaselinePosition(row int, pos BaselinePosition)
	// SetRowHomogeneous sets whether all rows of @grid will have the same
	// height.
	SetRowHomogeneous(homogeneous bool)
	// SetRowSpacing sets the amount of space between rows of @grid.
	SetRowSpacing(spacing uint)
}

// grid implements the Grid interface.
type grid struct {
	Container
	Buildable
	Orientable
}

var _ Grid = (*grid)(nil)

// WrapGrid wraps a GObject to the right type. It is
// primarily used internally.
func WrapGrid(obj *externglib.Object) Grid {
	return Grid{
		Container:  WrapContainer(obj),
		Buildable:  WrapBuildable(obj),
		Orientable: WrapOrientable(obj),
	}
}

func marshalGrid(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapGrid(obj), nil
}

// NewGrid constructs a class Grid.
func NewGrid() Grid {
	var cret C.GtkGrid
	var goret Grid

	cret = C.gtk_grid_new()

	goret = gextras.CastObject(externglib.Take(unsafe.Pointer(cret.Native()))).(Grid)

	return goret
}

// Attach adds a widget to the grid.
//
// The position of @child is determined by @left and @top. The number of
// “cells” that @child will occupy is determined by @width and @height.
func (g grid) Attach(child Widget, left int, top int, width int, height int) {
	var arg0 *C.GtkGrid
	var arg1 *C.GtkWidget
	var arg2 C.gint
	var arg3 C.gint
	var arg4 C.gint
	var arg5 C.gint

	arg0 = (*C.GtkGrid)(unsafe.Pointer(g.Native()))
	arg1 = (*C.GtkWidget)(unsafe.Pointer(child.Native()))
	arg2 = C.gint(left)
	arg3 = C.gint(top)
	arg4 = C.gint(width)
	arg5 = C.gint(height)

	C.gtk_grid_attach(arg0, arg1, arg2, arg3, arg4, arg5)
}

// AttachNextTo adds a widget to the grid.
//
// The widget is placed next to @sibling, on the side determined by @side.
// When @sibling is nil, the widget is placed in row (for left or right
// placement) or column 0 (for top or bottom placement), at the end
// indicated by @side.
//
// Attaching widgets labeled [1], [2], [3] with @sibling == nil and @side ==
// GTK_POS_LEFT yields a layout of [3][2][1].
func (g grid) AttachNextTo(child Widget, sibling Widget, side PositionType, width int, height int) {
	var arg0 *C.GtkGrid
	var arg1 *C.GtkWidget
	var arg2 *C.GtkWidget
	var arg3 C.GtkPositionType
	var arg4 C.gint
	var arg5 C.gint

	arg0 = (*C.GtkGrid)(unsafe.Pointer(g.Native()))
	arg1 = (*C.GtkWidget)(unsafe.Pointer(child.Native()))
	arg2 = (*C.GtkWidget)(unsafe.Pointer(sibling.Native()))
	arg3 = (C.GtkPositionType)(side)
	arg4 = C.gint(width)
	arg5 = C.gint(height)

	C.gtk_grid_attach_next_to(arg0, arg1, arg2, arg3, arg4, arg5)
}

// BaselineRow returns which row defines the global baseline of @grid.
func (g grid) BaselineRow() int {
	var arg0 *C.GtkGrid

	arg0 = (*C.GtkGrid)(unsafe.Pointer(g.Native()))

	var cret C.gint
	var goret int

	cret = C.gtk_grid_get_baseline_row(arg0)

	goret = int(cret)

	return goret
}

// ChildAt gets the child of @grid whose area covers the grid cell whose
// upper left corner is at @left, @top.
func (g grid) ChildAt(left int, top int) Widget {
	var arg0 *C.GtkGrid
	var arg1 C.gint
	var arg2 C.gint

	arg0 = (*C.GtkGrid)(unsafe.Pointer(g.Native()))
	arg1 = C.gint(left)
	arg2 = C.gint(top)

	var cret *C.GtkWidget
	var goret Widget

	cret = C.gtk_grid_get_child_at(arg0, arg1, arg2)

	goret = gextras.CastObject(externglib.Take(unsafe.Pointer(cret.Native()))).(Widget)

	return goret
}

// ColumnHomogeneous returns whether all columns of @grid have the same
// width.
func (g grid) ColumnHomogeneous() bool {
	var arg0 *C.GtkGrid

	arg0 = (*C.GtkGrid)(unsafe.Pointer(g.Native()))

	var cret C.gboolean
	var goret bool

	cret = C.gtk_grid_get_column_homogeneous(arg0)

	if cret {
		goret = true
	}

	return goret
}

// ColumnSpacing returns the amount of space between the columns of @grid.
func (g grid) ColumnSpacing() uint {
	var arg0 *C.GtkGrid

	arg0 = (*C.GtkGrid)(unsafe.Pointer(g.Native()))

	var cret C.guint
	var goret uint

	cret = C.gtk_grid_get_column_spacing(arg0)

	goret = uint(cret)

	return goret
}

// RowBaselinePosition returns the baseline position of @row as set by
// gtk_grid_set_row_baseline_position() or the default value
// GTK_BASELINE_POSITION_CENTER.
func (g grid) RowBaselinePosition(row int) BaselinePosition {
	var arg0 *C.GtkGrid
	var arg1 C.gint

	arg0 = (*C.GtkGrid)(unsafe.Pointer(g.Native()))
	arg1 = C.gint(row)

	var cret C.GtkBaselinePosition
	var goret BaselinePosition

	cret = C.gtk_grid_get_row_baseline_position(arg0, arg1)

	goret = BaselinePosition(cret)

	return goret
}

// RowHomogeneous returns whether all rows of @grid have the same height.
func (g grid) RowHomogeneous() bool {
	var arg0 *C.GtkGrid

	arg0 = (*C.GtkGrid)(unsafe.Pointer(g.Native()))

	var cret C.gboolean
	var goret bool

	cret = C.gtk_grid_get_row_homogeneous(arg0)

	if cret {
		goret = true
	}

	return goret
}

// RowSpacing returns the amount of space between the rows of @grid.
func (g grid) RowSpacing() uint {
	var arg0 *C.GtkGrid

	arg0 = (*C.GtkGrid)(unsafe.Pointer(g.Native()))

	var cret C.guint
	var goret uint

	cret = C.gtk_grid_get_row_spacing(arg0)

	goret = uint(cret)

	return goret
}

// InsertColumn inserts a column at the specified position.
//
// Children which are attached at or to the right of this position are moved
// one column to the right. Children which span across this position are
// grown to span the new column.
func (g grid) InsertColumn(position int) {
	var arg0 *C.GtkGrid
	var arg1 C.gint

	arg0 = (*C.GtkGrid)(unsafe.Pointer(g.Native()))
	arg1 = C.gint(position)

	C.gtk_grid_insert_column(arg0, arg1)
}

// InsertNextTo inserts a row or column at the specified position.
//
// The new row or column is placed next to @sibling, on the side determined
// by @side. If @side is GTK_POS_TOP or GTK_POS_BOTTOM, a row is inserted.
// If @side is GTK_POS_LEFT of GTK_POS_RIGHT, a column is inserted.
func (g grid) InsertNextTo(sibling Widget, side PositionType) {
	var arg0 *C.GtkGrid
	var arg1 *C.GtkWidget
	var arg2 C.GtkPositionType

	arg0 = (*C.GtkGrid)(unsafe.Pointer(g.Native()))
	arg1 = (*C.GtkWidget)(unsafe.Pointer(sibling.Native()))
	arg2 = (C.GtkPositionType)(side)

	C.gtk_grid_insert_next_to(arg0, arg1, arg2)
}

// InsertRow inserts a row at the specified position.
//
// Children which are attached at or below this position are moved one row
// down. Children which span across this position are grown to span the new
// row.
func (g grid) InsertRow(position int) {
	var arg0 *C.GtkGrid
	var arg1 C.gint

	arg0 = (*C.GtkGrid)(unsafe.Pointer(g.Native()))
	arg1 = C.gint(position)

	C.gtk_grid_insert_row(arg0, arg1)
}

// RemoveColumn removes a column from the grid.
//
// Children that are placed in this column are removed, spanning children
// that overlap this column have their width reduced by one, and children
// after the column are moved to the left.
func (g grid) RemoveColumn(position int) {
	var arg0 *C.GtkGrid
	var arg1 C.gint

	arg0 = (*C.GtkGrid)(unsafe.Pointer(g.Native()))
	arg1 = C.gint(position)

	C.gtk_grid_remove_column(arg0, arg1)
}

// RemoveRow removes a row from the grid.
//
// Children that are placed in this row are removed, spanning children that
// overlap this row have their height reduced by one, and children below the
// row are moved up.
func (g grid) RemoveRow(position int) {
	var arg0 *C.GtkGrid
	var arg1 C.gint

	arg0 = (*C.GtkGrid)(unsafe.Pointer(g.Native()))
	arg1 = C.gint(position)

	C.gtk_grid_remove_row(arg0, arg1)
}

// SetBaselineRow sets which row defines the global baseline for the entire
// grid. Each row in the grid can have its own local baseline, but only one
// of those is global, meaning it will be the baseline in the parent of the
// @grid.
func (g grid) SetBaselineRow(row int) {
	var arg0 *C.GtkGrid
	var arg1 C.gint

	arg0 = (*C.GtkGrid)(unsafe.Pointer(g.Native()))
	arg1 = C.gint(row)

	C.gtk_grid_set_baseline_row(arg0, arg1)
}

// SetColumnHomogeneous sets whether all columns of @grid will have the same
// width.
func (g grid) SetColumnHomogeneous(homogeneous bool) {
	var arg0 *C.GtkGrid
	var arg1 C.gboolean

	arg0 = (*C.GtkGrid)(unsafe.Pointer(g.Native()))
	if homogeneous {
		arg1 = C.gboolean(1)
	}

	C.gtk_grid_set_column_homogeneous(arg0, arg1)
}

// SetColumnSpacing sets the amount of space between columns of @grid.
func (g grid) SetColumnSpacing(spacing uint) {
	var arg0 *C.GtkGrid
	var arg1 C.guint

	arg0 = (*C.GtkGrid)(unsafe.Pointer(g.Native()))
	arg1 = C.guint(spacing)

	C.gtk_grid_set_column_spacing(arg0, arg1)
}

// SetRowBaselinePosition sets how the baseline should be positioned on @row
// of the grid, in case that row is assigned more space than is requested.
func (g grid) SetRowBaselinePosition(row int, pos BaselinePosition) {
	var arg0 *C.GtkGrid
	var arg1 C.gint
	var arg2 C.GtkBaselinePosition

	arg0 = (*C.GtkGrid)(unsafe.Pointer(g.Native()))
	arg1 = C.gint(row)
	arg2 = (C.GtkBaselinePosition)(pos)

	C.gtk_grid_set_row_baseline_position(arg0, arg1, arg2)
}

// SetRowHomogeneous sets whether all rows of @grid will have the same
// height.
func (g grid) SetRowHomogeneous(homogeneous bool) {
	var arg0 *C.GtkGrid
	var arg1 C.gboolean

	arg0 = (*C.GtkGrid)(unsafe.Pointer(g.Native()))
	if homogeneous {
		arg1 = C.gboolean(1)
	}

	C.gtk_grid_set_row_homogeneous(arg0, arg1)
}

// SetRowSpacing sets the amount of space between rows of @grid.
func (g grid) SetRowSpacing(spacing uint) {
	var arg0 *C.GtkGrid
	var arg1 C.guint

	arg0 = (*C.GtkGrid)(unsafe.Pointer(g.Native()))
	arg1 = C.guint(spacing)

	C.gtk_grid_set_row_spacing(arg0, arg1)
}
