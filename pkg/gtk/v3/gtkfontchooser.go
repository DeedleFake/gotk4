// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"github.com/diamondburned/gotk4/internal/box"
	"github.com/diamondburned/gotk4/pkg/pango"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_font_chooser_get_type()), F: marshalFontChooser},
	})
}

// FontFilterFunc: the type of function that is used for deciding what fonts get
// shown in a FontChooser. See gtk_font_chooser_set_filter_func().
type FontFilterFunc func(family pango.FontFamily, face pango.FontFace) bool

//export gotk4_FontFilterFunc
func gotk4_FontFilterFunc(arg0 *C.PangoFontFamily, arg1 *C.PangoFontFace, arg2 C.gpointer) C.gboolean {
	v := box.Get(uintptr(arg2))
	if v == nil {
		panic(`callback not found`)
	}

	fn := v.(FontFilterFunc)
	ret := fn(family, face, data)

	if ret {
		cret = C.gboolean(1)
	}

	return cret
}

// FontChooserOverrider contains methods that are overridable. This
// interface is a subset of the interface FontChooser.
type FontChooserOverrider interface {
	FontActivated(c FontChooser, fontname string)
	// FontFace gets the FontFace representing the selected font group details
	// (i.e. family, slant, weight, width, etc).
	//
	// If the selected font is not installed, returns nil.
	FontFace(f FontChooser)
	// FontFamily gets the FontFamily representing the selected font family.
	// Font families are a collection of font faces.
	//
	// If the selected font is not installed, returns nil.
	FontFamily(f FontChooser)
	// FontMap gets the custom font map of this font chooser widget, or nil if
	// it does not have one.
	FontMap(f FontChooser)
	// FontSize: the selected font size.
	FontSize(f FontChooser)
	// SetFilterFunc adds a filter function that decides which fonts to display
	// in the font chooser.
	SetFilterFunc(f FontChooser)
	// SetFontMap sets a custom font map to use for this font chooser widget. A
	// custom font map can be used to present application-specific fonts instead
	// of or in addition to the normal system fonts.
	//
	//    FcConfig *config;
	//    PangoFontMap *fontmap;
	//
	//    config = FcInitLoadConfigAndFonts ();
	//    FcConfigAppFontAddFile (config, my_app_font_file);
	//
	//    fontmap = pango_cairo_font_map_new_for_font_type (CAIRO_FONT_TYPE_FT);
	//    pango_fc_font_map_set_config (PANGO_FC_FONT_MAP (fontmap), config);
	//
	//    gtk_font_chooser_set_font_map (font_chooser, fontmap);
	//
	// Note that other GTK+ widgets will only be able to use the
	// application-specific font if it is present in the font map they use:
	//
	//    context = gtk_widget_get_pango_context (label);
	//    pango_context_set_font_map (context, fontmap);
	SetFontMap(f FontChooser, fontmap pango.FontMap)
}

// FontChooser is an interface that can be implemented by widgets displaying the
// list of fonts. In GTK+, the main objects that implement this interface are
// FontChooserWidget, FontChooserDialog and FontButton. The GtkFontChooser
// interface has been introducted in GTK+ 3.2.
type FontChooser interface {
	gextras.Objector
	FontChooserOverrider

	// Font gets the currently-selected font name.
	//
	// Note that this can be a different string than what you set with
	// gtk_font_chooser_set_font(), as the font chooser widget may normalize
	// font names and thus return a string with a different structure. For
	// example, “Helvetica Italic Bold 12” could be normalized to “Helvetica
	// Bold Italic 12”.
	//
	// Use pango_font_description_equal() if you want to compare two font
	// descriptions.
	Font(f FontChooser)
	// FontDesc gets the currently-selected font.
	//
	// Note that this can be a different string than what you set with
	// gtk_font_chooser_set_font(), as the font chooser widget may normalize
	// font names and thus return a string with a different structure. For
	// example, “Helvetica Italic Bold 12” could be normalized to “Helvetica
	// Bold Italic 12”.
	//
	// Use pango_font_description_equal() if you want to compare two font
	// descriptions.
	FontDesc(f FontChooser)
	// FontFeatures gets the currently-selected font features.
	FontFeatures(f FontChooser)
	// Language gets the language that is used for font features.
	Language(f FontChooser)
	// Level returns the current level of granularity for selecting fonts.
	Level(f FontChooser)
	// PreviewText gets the text displayed in the preview area.
	PreviewText(f FontChooser)
	// ShowPreviewEntry returns whether the preview entry is shown or not.
	ShowPreviewEntry(f FontChooser) bool
	// SetFont sets the currently-selected font.
	SetFont(f FontChooser, fontname string)
	// SetFontDesc sets the currently-selected font from @font_desc.
	SetFontDesc(f FontChooser, fontDesc *pango.FontDescription)
	// SetLanguage sets the language to use for font features.
	SetLanguage(f FontChooser, language string)
	// SetLevel sets the desired level of granularity for selecting fonts.
	SetLevel(f FontChooser, level FontChooserLevel)
	// SetPreviewText sets the text displayed in the preview area. The @text is
	// used to show how the selected font looks.
	SetPreviewText(f FontChooser, text string)
	// SetShowPreviewEntry shows or hides the editable preview entry.
	SetShowPreviewEntry(f FontChooser, showPreviewEntry bool)
}

// fontChooser implements the FontChooser interface.
type fontChooser struct {
	gextras.Objector
}

var _ FontChooser = (*fontChooser)(nil)

// WrapFontChooser wraps a GObject to a type that implements interface
// FontChooser. It is primarily used internally.
func WrapFontChooser(obj *externglib.Object) FontChooser {
	return FontChooser{
		Objector: obj,
	}
}

func marshalFontChooser(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapFontChooser(obj), nil
}

// Font gets the currently-selected font name.
//
// Note that this can be a different string than what you set with
// gtk_font_chooser_set_font(), as the font chooser widget may normalize
// font names and thus return a string with a different structure. For
// example, “Helvetica Italic Bold 12” could be normalized to “Helvetica
// Bold Italic 12”.
//
// Use pango_font_description_equal() if you want to compare two font
// descriptions.
func (f fontChooser) Font(f FontChooser) {
	var arg0 *C.GtkFontChooser

	arg0 = (*C.GtkFontChooser)(unsafe.Pointer(f.Native()))

	C.gtk_font_chooser_get_font(arg0)
}

// FontDesc gets the currently-selected font.
//
// Note that this can be a different string than what you set with
// gtk_font_chooser_set_font(), as the font chooser widget may normalize
// font names and thus return a string with a different structure. For
// example, “Helvetica Italic Bold 12” could be normalized to “Helvetica
// Bold Italic 12”.
//
// Use pango_font_description_equal() if you want to compare two font
// descriptions.
func (f fontChooser) FontDesc(f FontChooser) {
	var arg0 *C.GtkFontChooser

	arg0 = (*C.GtkFontChooser)(unsafe.Pointer(f.Native()))

	C.gtk_font_chooser_get_font_desc(arg0)
}

// FontFace gets the FontFace representing the selected font group details
// (i.e. family, slant, weight, width, etc).
//
// If the selected font is not installed, returns nil.
func (f fontChooser) FontFace(f FontChooser) {
	var arg0 *C.GtkFontChooser

	arg0 = (*C.GtkFontChooser)(unsafe.Pointer(f.Native()))

	C.gtk_font_chooser_get_font_face(arg0)
}

// FontFamily gets the FontFamily representing the selected font family.
// Font families are a collection of font faces.
//
// If the selected font is not installed, returns nil.
func (f fontChooser) FontFamily(f FontChooser) {
	var arg0 *C.GtkFontChooser

	arg0 = (*C.GtkFontChooser)(unsafe.Pointer(f.Native()))

	C.gtk_font_chooser_get_font_family(arg0)
}

// FontFeatures gets the currently-selected font features.
func (f fontChooser) FontFeatures(f FontChooser) {
	var arg0 *C.GtkFontChooser

	arg0 = (*C.GtkFontChooser)(unsafe.Pointer(f.Native()))

	C.gtk_font_chooser_get_font_features(arg0)
}

// FontMap gets the custom font map of this font chooser widget, or nil if
// it does not have one.
func (f fontChooser) FontMap(f FontChooser) {
	var arg0 *C.GtkFontChooser

	arg0 = (*C.GtkFontChooser)(unsafe.Pointer(f.Native()))

	C.gtk_font_chooser_get_font_map(arg0)
}

// FontSize: the selected font size.
func (f fontChooser) FontSize(f FontChooser) {
	var arg0 *C.GtkFontChooser

	arg0 = (*C.GtkFontChooser)(unsafe.Pointer(f.Native()))

	C.gtk_font_chooser_get_font_size(arg0)
}

// Language gets the language that is used for font features.
func (f fontChooser) Language(f FontChooser) {
	var arg0 *C.GtkFontChooser

	arg0 = (*C.GtkFontChooser)(unsafe.Pointer(f.Native()))

	C.gtk_font_chooser_get_language(arg0)
}

// Level returns the current level of granularity for selecting fonts.
func (f fontChooser) Level(f FontChooser) {
	var arg0 *C.GtkFontChooser

	arg0 = (*C.GtkFontChooser)(unsafe.Pointer(f.Native()))

	C.gtk_font_chooser_get_level(arg0)
}

// PreviewText gets the text displayed in the preview area.
func (f fontChooser) PreviewText(f FontChooser) {
	var arg0 *C.GtkFontChooser

	arg0 = (*C.GtkFontChooser)(unsafe.Pointer(f.Native()))

	C.gtk_font_chooser_get_preview_text(arg0)
}

// ShowPreviewEntry returns whether the preview entry is shown or not.
func (f fontChooser) ShowPreviewEntry(f FontChooser) bool {
	var arg0 *C.GtkFontChooser

	arg0 = (*C.GtkFontChooser)(unsafe.Pointer(f.Native()))

	var cret C.gboolean
	var ok bool

	cret = C.gtk_font_chooser_get_show_preview_entry(arg0)

	if cret {
		ok = true
	}

	return ok
}

// SetFilterFunc adds a filter function that decides which fonts to display
// in the font chooser.
func (f fontChooser) SetFilterFunc(f FontChooser) {
	var arg0 *C.GtkFontChooser

	arg0 = (*C.GtkFontChooser)(unsafe.Pointer(f.Native()))

	C.gtk_font_chooser_set_filter_func(arg0, arg1, arg2, arg3)
}

// SetFont sets the currently-selected font.
func (f fontChooser) SetFont(f FontChooser, fontname string) {
	var arg0 *C.GtkFontChooser
	var arg1 *C.gchar

	arg0 = (*C.GtkFontChooser)(unsafe.Pointer(f.Native()))
	arg1 = (*C.gchar)(C.CString(fontname))
	defer C.free(unsafe.Pointer(arg1))

	C.gtk_font_chooser_set_font(arg0, arg1)
}

// SetFontDesc sets the currently-selected font from @font_desc.
func (f fontChooser) SetFontDesc(f FontChooser, fontDesc *pango.FontDescription) {
	var arg0 *C.GtkFontChooser
	var arg1 *C.PangoFontDescription

	arg0 = (*C.GtkFontChooser)(unsafe.Pointer(f.Native()))
	arg1 = (*C.PangoFontDescription)(unsafe.Pointer(fontDesc.Native()))

	C.gtk_font_chooser_set_font_desc(arg0, arg1)
}

// SetFontMap sets a custom font map to use for this font chooser widget. A
// custom font map can be used to present application-specific fonts instead
// of or in addition to the normal system fonts.
//
//    FcConfig *config;
//    PangoFontMap *fontmap;
//
//    config = FcInitLoadConfigAndFonts ();
//    FcConfigAppFontAddFile (config, my_app_font_file);
//
//    fontmap = pango_cairo_font_map_new_for_font_type (CAIRO_FONT_TYPE_FT);
//    pango_fc_font_map_set_config (PANGO_FC_FONT_MAP (fontmap), config);
//
//    gtk_font_chooser_set_font_map (font_chooser, fontmap);
//
// Note that other GTK+ widgets will only be able to use the
// application-specific font if it is present in the font map they use:
//
//    context = gtk_widget_get_pango_context (label);
//    pango_context_set_font_map (context, fontmap);
func (f fontChooser) SetFontMap(f FontChooser, fontmap pango.FontMap) {
	var arg0 *C.GtkFontChooser
	var arg1 *C.PangoFontMap

	arg0 = (*C.GtkFontChooser)(unsafe.Pointer(f.Native()))
	arg1 = (*C.PangoFontMap)(unsafe.Pointer(fontmap.Native()))

	C.gtk_font_chooser_set_font_map(arg0, arg1)
}

// SetLanguage sets the language to use for font features.
func (f fontChooser) SetLanguage(f FontChooser, language string) {
	var arg0 *C.GtkFontChooser
	var arg1 *C.char

	arg0 = (*C.GtkFontChooser)(unsafe.Pointer(f.Native()))
	arg1 = (*C.char)(C.CString(language))
	defer C.free(unsafe.Pointer(arg1))

	C.gtk_font_chooser_set_language(arg0, arg1)
}

// SetLevel sets the desired level of granularity for selecting fonts.
func (f fontChooser) SetLevel(f FontChooser, level FontChooserLevel) {
	var arg0 *C.GtkFontChooser
	var arg1 C.GtkFontChooserLevel

	arg0 = (*C.GtkFontChooser)(unsafe.Pointer(f.Native()))
	arg1 = (C.GtkFontChooserLevel)(level)

	C.gtk_font_chooser_set_level(arg0, arg1)
}

// SetPreviewText sets the text displayed in the preview area. The @text is
// used to show how the selected font looks.
func (f fontChooser) SetPreviewText(f FontChooser, text string) {
	var arg0 *C.GtkFontChooser
	var arg1 *C.gchar

	arg0 = (*C.GtkFontChooser)(unsafe.Pointer(f.Native()))
	arg1 = (*C.gchar)(C.CString(text))
	defer C.free(unsafe.Pointer(arg1))

	C.gtk_font_chooser_set_preview_text(arg0, arg1)
}

// SetShowPreviewEntry shows or hides the editable preview entry.
func (f fontChooser) SetShowPreviewEntry(f FontChooser, showPreviewEntry bool) {
	var arg0 *C.GtkFontChooser
	var arg1 C.gboolean

	arg0 = (*C.GtkFontChooser)(unsafe.Pointer(f.Native()))
	if showPreviewEntry {
		arg1 = C.gboolean(1)
	}

	C.gtk_font_chooser_set_show_preview_entry(arg0, arg1)
}
