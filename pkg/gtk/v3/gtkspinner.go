// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_spinner_get_type()), F: marshalSpinner},
	})
}

// Spinner widget displays an icon-size spinning animation. It is often used as
// an alternative to a ProgressBar for displaying indefinite activity, instead
// of actual progress.
//
// To start the animation, use gtk_spinner_start(), to stop it use
// gtk_spinner_stop().
//
//
// CSS nodes
//
// GtkSpinner has a single CSS node with the name spinner. When the animation is
// active, the :checked pseudoclass is added to this node.
type Spinner interface {
	Widget

	// AsBuildable casts the class to the Buildable interface.
	AsBuildable() Buildable

	// StartSpinner starts the animation of the spinner.
	StartSpinner()
	// StopSpinner stops the animation of the spinner.
	StopSpinner()
}

// spinner implements the Spinner class.
type spinner struct {
	Widget
}

// WrapSpinner wraps a GObject to the right type. It is
// primarily used internally.
func WrapSpinner(obj *externglib.Object) Spinner {
	return spinner{
		Widget: WrapWidget(obj),
	}
}

func marshalSpinner(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapSpinner(obj), nil
}

// NewSpinner returns a new spinner widget. Not yet started.
func NewSpinner() Spinner {
	var _cret *C.GtkWidget // in

	_cret = C.gtk_spinner_new()

	var _spinner Spinner // out

	_spinner = WrapSpinner(externglib.Take(unsafe.Pointer(_cret)))

	return _spinner
}

func (s spinner) StartSpinner() {
	var _arg0 *C.GtkSpinner // out

	_arg0 = (*C.GtkSpinner)(unsafe.Pointer(s.Native()))

	C.gtk_spinner_start(_arg0)
}

func (s spinner) StopSpinner() {
	var _arg0 *C.GtkSpinner // out

	_arg0 = (*C.GtkSpinner)(unsafe.Pointer(s.Native()))

	C.gtk_spinner_stop(_arg0)
}

func (s spinner) AsBuildable() Buildable {
	return WrapBuildable(gextras.InternObject(s))
}
