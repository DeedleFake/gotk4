// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_toplevel_accessible_get_type()), F: marshalToplevelAccessible},
	})
}

type ToplevelAccessible interface {
	atk.Object
}

// toplevelAccessible implements the ToplevelAccessible class.
type toplevelAccessible struct {
	atk.Object
}

// WrapToplevelAccessible wraps a GObject to the right type. It is
// primarily used internally.
func WrapToplevelAccessible(obj *externglib.Object) ToplevelAccessible {
	return toplevelAccessible{
		Object: atk.WrapObject(obj),
	}
}

func marshalToplevelAccessible(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapToplevelAccessible(obj), nil
}
