// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk+-3.0 glib-2.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_menu_bar_get_type()), F: marshalMenuBar},
	})
}

// MenuBar: the MenuBar is a subclass of MenuShell which contains one or more
// MenuItems. The result is a standard menu bar which can hold many menu items.
//
//
// CSS nodes
//
// GtkMenuBar has a single CSS node with name menubar.
type MenuBar interface {
	MenuShell
	Buildable

	// SetChildPackDirection sets how widgets should be packed inside the
	// children of a menubar.
	SetChildPackDirection(childPackDir PackDirection)
	// SetPackDirection sets how items should be packed inside a menubar.
	SetPackDirection(packDir PackDirection)
}

// menuBar implements the MenuBar interface.
type menuBar struct {
	MenuShell
	Buildable
}

var _ MenuBar = (*menuBar)(nil)

// WrapMenuBar wraps a GObject to the right type. It is
// primarily used internally.
func WrapMenuBar(obj *externglib.Object) MenuBar {
	return MenuBar{
		MenuShell: WrapMenuShell(obj),
		Buildable: WrapBuildable(obj),
	}
}

func marshalMenuBar(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapMenuBar(obj), nil
}

// SetChildPackDirection sets how widgets should be packed inside the
// children of a menubar.
func (m menuBar) SetChildPackDirection(childPackDir PackDirection) {
	var _arg0 *C.GtkMenuBar      // out
	var _arg1 C.GtkPackDirection // out

	_arg0 = (*C.GtkMenuBar)(unsafe.Pointer(m.Native()))
	_arg1 = (C.GtkPackDirection)(childPackDir)

	C.gtk_menu_bar_set_child_pack_direction(_arg0, _arg1)
}

// SetPackDirection sets how items should be packed inside a menubar.
func (m menuBar) SetPackDirection(packDir PackDirection) {
	var _arg0 *C.GtkMenuBar      // out
	var _arg1 C.GtkPackDirection // out

	_arg0 = (*C.GtkMenuBar)(unsafe.Pointer(m.Native()))
	_arg1 = (C.GtkPackDirection)(packDir)

	C.gtk_menu_bar_set_pack_direction(_arg0, _arg1)
}
