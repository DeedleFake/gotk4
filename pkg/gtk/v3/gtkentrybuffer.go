// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_entry_buffer_get_type()), F: marshalEntryBuffer},
	})
}

// EntryBuffer: the EntryBuffer class contains the actual text displayed in a
// Entry widget.
//
// A single EntryBuffer object can be shared by multiple Entry widgets which
// will then share the same text content, but not the cursor position,
// visibility attributes, icon etc.
//
// EntryBuffer may be derived from. Such a derived class might allow text to be
// stored in an alternate location, such as non-pageable memory, useful in the
// case of important passwords. Or a derived class could integrate with an
// applicationâ€™s concept of undo/redo.
type EntryBuffer interface {
	gextras.Objector

	DeleteTextEntryBuffer(position uint, nChars int) uint

	EmitDeletedTextEntryBuffer(position uint, nChars uint)

	EmitInsertedTextEntryBuffer(position uint, chars string, nChars uint)

	Bytes() uint

	Length() uint

	MaxLength() int

	Text() string

	InsertTextEntryBuffer(position uint, chars string, nChars int) uint

	SetMaxLengthEntryBuffer(maxLength int)

	SetTextEntryBuffer(chars string, nChars int)
}

// entryBuffer implements the EntryBuffer class.
type entryBuffer struct {
	gextras.Objector
}

// WrapEntryBuffer wraps a GObject to the right type. It is
// primarily used internally.
func WrapEntryBuffer(obj *externglib.Object) EntryBuffer {
	return entryBuffer{
		Objector: obj,
	}
}

func marshalEntryBuffer(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapEntryBuffer(obj), nil
}

func NewEntryBuffer(initialChars string, nInitialChars int) EntryBuffer {
	var _arg1 *C.gchar          // out
	var _arg2 C.gint            // out
	var _cret *C.GtkEntryBuffer // in

	_arg1 = (*C.gchar)(C.CString(initialChars))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.gint(nInitialChars)

	_cret = C.gtk_entry_buffer_new(_arg1, _arg2)

	var _entryBuffer EntryBuffer // out

	_entryBuffer = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(EntryBuffer)

	return _entryBuffer
}

func (b entryBuffer) DeleteTextEntryBuffer(position uint, nChars int) uint {
	var _arg0 *C.GtkEntryBuffer // out
	var _arg1 C.guint           // out
	var _arg2 C.gint            // out
	var _cret C.guint           // in

	_arg0 = (*C.GtkEntryBuffer)(unsafe.Pointer(b.Native()))
	_arg1 = C.guint(position)
	_arg2 = C.gint(nChars)

	_cret = C.gtk_entry_buffer_delete_text(_arg0, _arg1, _arg2)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

func (b entryBuffer) EmitDeletedTextEntryBuffer(position uint, nChars uint) {
	var _arg0 *C.GtkEntryBuffer // out
	var _arg1 C.guint           // out
	var _arg2 C.guint           // out

	_arg0 = (*C.GtkEntryBuffer)(unsafe.Pointer(b.Native()))
	_arg1 = C.guint(position)
	_arg2 = C.guint(nChars)

	C.gtk_entry_buffer_emit_deleted_text(_arg0, _arg1, _arg2)
}

func (b entryBuffer) EmitInsertedTextEntryBuffer(position uint, chars string, nChars uint) {
	var _arg0 *C.GtkEntryBuffer // out
	var _arg1 C.guint           // out
	var _arg2 *C.gchar          // out
	var _arg3 C.guint           // out

	_arg0 = (*C.GtkEntryBuffer)(unsafe.Pointer(b.Native()))
	_arg1 = C.guint(position)
	_arg2 = (*C.gchar)(C.CString(chars))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = C.guint(nChars)

	C.gtk_entry_buffer_emit_inserted_text(_arg0, _arg1, _arg2, _arg3)
}

func (b entryBuffer) Bytes() uint {
	var _arg0 *C.GtkEntryBuffer // out
	var _cret C.gsize           // in

	_arg0 = (*C.GtkEntryBuffer)(unsafe.Pointer(b.Native()))

	_cret = C.gtk_entry_buffer_get_bytes(_arg0)

	var _gsize uint // out

	_gsize = uint(_cret)

	return _gsize
}

func (b entryBuffer) Length() uint {
	var _arg0 *C.GtkEntryBuffer // out
	var _cret C.guint           // in

	_arg0 = (*C.GtkEntryBuffer)(unsafe.Pointer(b.Native()))

	_cret = C.gtk_entry_buffer_get_length(_arg0)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

func (b entryBuffer) MaxLength() int {
	var _arg0 *C.GtkEntryBuffer // out
	var _cret C.gint            // in

	_arg0 = (*C.GtkEntryBuffer)(unsafe.Pointer(b.Native()))

	_cret = C.gtk_entry_buffer_get_max_length(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (b entryBuffer) Text() string {
	var _arg0 *C.GtkEntryBuffer // out
	var _cret *C.gchar          // in

	_arg0 = (*C.GtkEntryBuffer)(unsafe.Pointer(b.Native()))

	_cret = C.gtk_entry_buffer_get_text(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

func (b entryBuffer) InsertTextEntryBuffer(position uint, chars string, nChars int) uint {
	var _arg0 *C.GtkEntryBuffer // out
	var _arg1 C.guint           // out
	var _arg2 *C.gchar          // out
	var _arg3 C.gint            // out
	var _cret C.guint           // in

	_arg0 = (*C.GtkEntryBuffer)(unsafe.Pointer(b.Native()))
	_arg1 = C.guint(position)
	_arg2 = (*C.gchar)(C.CString(chars))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = C.gint(nChars)

	_cret = C.gtk_entry_buffer_insert_text(_arg0, _arg1, _arg2, _arg3)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

func (b entryBuffer) SetMaxLengthEntryBuffer(maxLength int) {
	var _arg0 *C.GtkEntryBuffer // out
	var _arg1 C.gint            // out

	_arg0 = (*C.GtkEntryBuffer)(unsafe.Pointer(b.Native()))
	_arg1 = C.gint(maxLength)

	C.gtk_entry_buffer_set_max_length(_arg0, _arg1)
}

func (b entryBuffer) SetTextEntryBuffer(chars string, nChars int) {
	var _arg0 *C.GtkEntryBuffer // out
	var _arg1 *C.gchar          // out
	var _arg2 C.gint            // out

	_arg0 = (*C.GtkEntryBuffer)(unsafe.Pointer(b.Native()))
	_arg1 = (*C.gchar)(C.CString(chars))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.gint(nChars)

	C.gtk_entry_buffer_set_text(_arg0, _arg1, _arg2)
}
