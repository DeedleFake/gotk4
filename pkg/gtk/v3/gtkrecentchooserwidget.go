// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_recent_chooser_widget_get_type()), F: marshalRecentChooserWidget},
	})
}

// RecentChooserWidget is a widget suitable for selecting recently used files.
// It is the main building block of a RecentChooserDialog. Most applications
// will only need to use the latter; you can use RecentChooserWidget as part of
// a larger window if you have special needs.
//
// Note that RecentChooserWidget does not have any methods of its own. Instead,
// you should use the functions that work on a RecentChooser.
//
// Recently used files are supported since GTK+ 2.10.
type RecentChooserWidget interface {
	gextras.Objector

	privateRecentChooserWidgetClass()
}

// RecentChooserWidgetClass implements the RecentChooserWidget interface.
type RecentChooserWidgetClass struct {
	*externglib.Object
	BoxClass
	BuildableIface
	OrientableIface
	RecentChooserIface
}

var _ RecentChooserWidget = (*RecentChooserWidgetClass)(nil)

func wrapRecentChooserWidget(obj *externglib.Object) RecentChooserWidget {
	return &RecentChooserWidgetClass{
		Object: obj,
		BoxClass: BoxClass{
			Object: obj,
			ContainerClass: ContainerClass{
				Object: obj,
				WidgetClass: WidgetClass{
					Object: obj,
					InitiallyUnowned: externglib.InitiallyUnowned{
						Object: obj,
					},
					BuildableIface: BuildableIface{
						Object: obj,
					},
				},
				BuildableIface: BuildableIface{
					Object: obj,
				},
			},
			BuildableIface: BuildableIface{
				Object: obj,
			},
			OrientableIface: OrientableIface{
				Object: obj,
			},
		},
		BuildableIface: BuildableIface{
			Object: obj,
		},
		OrientableIface: OrientableIface{
			Object: obj,
		},
		RecentChooserIface: RecentChooserIface{
			Object: obj,
		},
	}
}

func marshalRecentChooserWidget(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapRecentChooserWidget(obj), nil
}

// NewRecentChooserWidget creates a new RecentChooserWidget object. This is an
// embeddable widget used to access the recently used resources list.
func NewRecentChooserWidget() *RecentChooserWidgetClass {
	var _cret *C.GtkWidget // in

	_cret = C.gtk_recent_chooser_widget_new()

	var _recentChooserWidget *RecentChooserWidgetClass // out

	_recentChooserWidget = (gextras.CastObject(externglib.Take(unsafe.Pointer(_cret)))).(*RecentChooserWidgetClass)

	return _recentChooserWidget
}

// NewRecentChooserWidgetForManager creates a new RecentChooserWidget with a
// specified recent manager.
//
// This is useful if you have implemented your own recent manager, or if you
// have a customized instance of a RecentManager object.
func NewRecentChooserWidgetForManager(manager RecentManager) *RecentChooserWidgetClass {
	var _arg1 *C.GtkRecentManager // out
	var _cret *C.GtkWidget        // in

	_arg1 = (*C.GtkRecentManager)(unsafe.Pointer(manager.Native()))

	_cret = C.gtk_recent_chooser_widget_new_for_manager(_arg1)

	var _recentChooserWidget *RecentChooserWidgetClass // out

	_recentChooserWidget = (gextras.CastObject(externglib.Take(unsafe.Pointer(_cret)))).(*RecentChooserWidgetClass)

	return _recentChooserWidget
}

func (*RecentChooserWidgetClass) privateRecentChooserWidgetClass() {}
