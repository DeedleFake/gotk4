// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/box"
	"github.com/diamondburned/gotk4/internal/gextras"
	"github.com/diamondburned/gotk4/internal/ptr"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

// RecentFilterFunc: the type of function that is used with custom filters, see
// gtk_recent_filter_add_custom().
type RecentFilterFunc func() (ok bool)

//export gotk4_RecentFilterFunc
func gotk4_RecentFilterFunc(arg0 *C.GtkRecentFilterInfo, arg1 C.gpointer) C.gboolean {
	v := box.Get(uintptr(arg1))
	if v == nil {
		panic(`callback not found`)
	}

	fn := v.(RecentFilterFunc)
	ok := fn()

	if ok {
		cret = C.gboolean(1)
	}
}

// RecentFilterInfo: a GtkRecentFilterInfo struct is used to pass information
// about the tested file to gtk_recent_filter_filter().
type RecentFilterInfo struct {
	native C.GtkRecentFilterInfo
}

// WrapRecentFilterInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapRecentFilterInfo(ptr unsafe.Pointer) *RecentFilterInfo {
	if ptr == nil {
		return nil
	}

	return (*RecentFilterInfo)(ptr)
}

func marshalRecentFilterInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapRecentFilterInfo(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (r *RecentFilterInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(&r.native)
}

// Contains gets the field inside the struct.
func (r *RecentFilterInfo) Contains() RecentFilterFlags {
	var v RecentFilterFlags
	v = RecentFilterFlags(r.native.contains)
	return v
}

// URI gets the field inside the struct.
func (r *RecentFilterInfo) URI() string {
	var v string
	v = C.GoString(r.native.uri)
	return v
}

// DisplayName gets the field inside the struct.
func (r *RecentFilterInfo) DisplayName() string {
	var v string
	v = C.GoString(r.native.display_name)
	return v
}

// MIMEType gets the field inside the struct.
func (r *RecentFilterInfo) MIMEType() string {
	var v string
	v = C.GoString(r.native.mime_type)
	return v
}

// Applications gets the field inside the struct.
func (r *RecentFilterInfo) Applications() []string {
	var v []string
	{
		var length int
		for p := r.native.applications; *p != 0; p = (**C.gchar)(ptr.Add(unsafe.Pointer(p), unsafe.Sizeof(int(0)))) {
			length++
			if length < 0 {
				panic(`length overflow`)
			}
		}

		var src []*C.gchar
		ptr.SetSlice(unsafe.Pointer(&src), unsafe.Pointer(r.native.applications), int(length))

		v = make([]string, length)
		for i := uintptr(0); i < uintptr(length); i += unsafe.Sizeof(int(0)) {
			v = C.GoString(r.native.applications)
		}
	}
	return v
}

// Groups gets the field inside the struct.
func (r *RecentFilterInfo) Groups() []string {
	var v []string
	{
		var length int
		for p := r.native.groups; *p != 0; p = (**C.gchar)(ptr.Add(unsafe.Pointer(p), unsafe.Sizeof(int(0)))) {
			length++
			if length < 0 {
				panic(`length overflow`)
			}
		}

		var src []*C.gchar
		ptr.SetSlice(unsafe.Pointer(&src), unsafe.Pointer(r.native.groups), int(length))

		v = make([]string, length)
		for i := uintptr(0); i < uintptr(length); i += unsafe.Sizeof(int(0)) {
			v = C.GoString(r.native.groups)
		}
	}
	return v
}

// Age gets the field inside the struct.
func (r *RecentFilterInfo) Age() int {
	var v int
	v = (int)(r.native.age)
	return v
}
