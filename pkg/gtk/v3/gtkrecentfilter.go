// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/box"
	"github.com/diamondburned/gotk4/internal/gextras"
)

// #cgo pkg-config: gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <stdbool.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
//
// extern gboolean gotk4_RecentFilterFunc(const GtkRecentFilterInfo* _0, gpointer _1);
// extern void callbackDelete(gpointer);
import "C"

//export callbackDelete
func callbackDelete(ptr C.gpointer) {
	box.Delete(box.Callback, uintptr(ptr))
}

// RecentFilterFunc: the type of function that is used with custom filters, see
// gtk_recent_filter_add_custom().
type RecentFilterFunc func(filterInfo *RecentFilterInfo) bool

//export gotk4_RecentFilterFunc
func gotk4_RecentFilterFunc(arg0 *C.GtkRecentFilterInfo, arg1 C.gpointer) C.gboolean {
	v := box.Get(uintptr(arg1))
	if v == nil {
		panic(`callback not found`)
	}

	var filterInfo *RecentFilterInfo

	{
		filterInfo = WrapRecentFilterInfo(unsafe.Pointer(arg0))
	}

	ok := v.(RecentFilterFunc)(filterInfo)
}

// RecentFilterInfo: a GtkRecentFilterInfo struct is used to pass information
// about the tested file to gtk_recent_filter_filter().
type RecentFilterInfo struct {
	native C.GtkRecentFilterInfo
}

// WrapRecentFilterInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapRecentFilterInfo(ptr unsafe.Pointer) *RecentFilterInfo {
	if ptr == nil {
		return nil
	}

	return (*RecentFilterInfo)(ptr)
}

func marshalRecentFilterInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapRecentFilterInfo(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (r *RecentFilterInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(&r.native)
}

// Contains gets the field inside the struct.
func (r *RecentFilterInfo) Contains() RecentFilterFlags {
	var ret RecentFilterFlags
	ret = RecentFilterFlags(r.native.contains)
	return ret
}

// URI gets the field inside the struct.
func (r *RecentFilterInfo) URI() string {
	var ret string
	ret = C.GoString(r.native.uri)
	return ret
}

// DisplayName gets the field inside the struct.
func (r *RecentFilterInfo) DisplayName() string {
	var ret string
	ret = C.GoString(r.native.display_name)
	return ret
}

// MIMEType gets the field inside the struct.
func (r *RecentFilterInfo) MIMEType() string {
	var ret string
	ret = C.GoString(r.native.mime_type)
	return ret
}

// Applications gets the field inside the struct.
func (r *RecentFilterInfo) Applications() []string {
	var ret []string
	{
		var length uint
		for p := unsafe.Pointer(r.native.applications); *p != 0; p = unsafe.Pointer(uintptr(p) + 1) {
			length++
		}

		ret = make([]string, length)
		for i := 0; i < length; i++ {
			src := (*C.gchar)(unsafe.Pointer(uintptr(unsafe.Pointer(r.native.applications)) + i))
			ret[i] = C.GoString(src)
		}
	}
	return ret
}

// Groups gets the field inside the struct.
func (r *RecentFilterInfo) Groups() []string {
	var ret []string
	{
		var length uint
		for p := unsafe.Pointer(r.native.groups); *p != 0; p = unsafe.Pointer(uintptr(p) + 1) {
			length++
		}

		ret = make([]string, length)
		for i := 0; i < length; i++ {
			src := (*C.gchar)(unsafe.Pointer(uintptr(unsafe.Pointer(r.native.groups)) + i))
			ret[i] = C.GoString(src)
		}
	}
	return ret
}

// Age gets the field inside the struct.
func (r *RecentFilterInfo) Age() int {
	var ret int
	ret = int(r.native.age)
	return ret
}
