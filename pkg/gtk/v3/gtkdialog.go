// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/cairo"
	"github.com/diamondburned/gotk4/pkg/core/box"
	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
	"github.com/diamondburned/gotk4/pkg/gdkpixbuf/v2"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
	"github.com/diamondburned/gotk4/pkg/pango"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
//
// void gotk4_Callback(GtkWidget*, gpointer);
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_response_type_get_type()), F: marshalResponseType},
		{T: externglib.Type(C.gtk_dialog_flags_get_type()), F: marshalDialogFlags},
		{T: externglib.Type(C.gtk_dialog_get_type()), F: marshalDialog},
	})
}

// ResponseType: predefined values for use as response ids in
// gtk_dialog_add_button(). All predefined values are negative; GTK+ leaves
// values of 0 or greater for application-defined response ids.
type ResponseType int

const (
	// None: returned if an action widget has no response id, or if the dialog
	// gets programmatically hidden or destroyed
	ResponseNone ResponseType = -1
	// Reject: generic response id, not used by GTK+ dialogs
	ResponseReject ResponseType = -2
	// Accept: generic response id, not used by GTK+ dialogs
	ResponseAccept ResponseType = -3
	// DeleteEvent: returned if the dialog is deleted
	ResponseDeleteEvent ResponseType = -4
	// Ok: returned by OK buttons in GTK+ dialogs
	ResponseOk ResponseType = -5
	// Cancel: returned by Cancel buttons in GTK+ dialogs
	ResponseCancel ResponseType = -6
	// Close: returned by Close buttons in GTK+ dialogs
	ResponseClose ResponseType = -7
	// Yes: returned by Yes buttons in GTK+ dialogs
	ResponseYes ResponseType = -8
	// No: returned by No buttons in GTK+ dialogs
	ResponseNo ResponseType = -9
	// Apply: returned by Apply buttons in GTK+ dialogs
	ResponseApply ResponseType = -10
	// Help: returned by Help buttons in GTK+ dialogs
	ResponseHelp ResponseType = -11
)

func marshalResponseType(p uintptr) (interface{}, error) {
	return ResponseType(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// DialogFlags flags used to influence dialog construction.
type DialogFlags int

const (
	// DialogFlagsModal: make the constructed dialog modal, see
	// gtk_window_set_modal()
	DialogFlagsModal DialogFlags = 0b1
	// DialogFlagsDestroyWithParent: destroy the dialog when its parent is
	// destroyed, see gtk_window_set_destroy_with_parent()
	DialogFlagsDestroyWithParent DialogFlags = 0b10
	// DialogFlagsUseHeaderBar: create dialog with actions in header bar instead
	// of action area. Since 3.12.
	DialogFlagsUseHeaderBar DialogFlags = 0b100
)

func marshalDialogFlags(p uintptr) (interface{}, error) {
	return DialogFlags(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// AlternativeDialogButtonOrder returns true if dialogs are expected to use an
// alternative button order on the screen @screen. See
// gtk_dialog_set_alternative_button_order() for more details about alternative
// button order.
//
// If you need to use this function, you should probably connect to the
// ::notify:gtk-alternative-button-order signal on the Settings object
// associated to @screen, in order to be notified if the button order setting
// changes.
//
// Deprecated: since version 3.10.
func AlternativeDialogButtonOrder(screen gdk.Screen) bool {
	var _arg1 *C.GdkScreen // out
	var _cret C.gboolean   // in

	_arg1 = (*C.GdkScreen)(unsafe.Pointer(screen.Native()))

	_cret = C.gtk_alternative_dialog_button_order(_arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// DialogOverrider contains methods that are overridable .
//
// As of right now, interface overriding and subclassing is not supported
// yet, so the interface currently has no use.
type DialogOverrider interface {
	Close()
	// Response emits the Dialog::response signal with the given response ID.
	// Used to indicate that the user has responded to the dialog in some way;
	// typically either you or gtk_dialog_run() will be monitoring the
	// ::response signal and take appropriate action.
	Response(responseId int)
}

// Dialog boxes are a convenient way to prompt the user for a small amount of
// input, e.g. to display a message, ask a question, or anything else that does
// not require extensive effort on the user’s part.
//
// GTK+ treats a dialog as a window split vertically. The top section is a VBox,
// and is where widgets such as a Label or a Entry should be packed. The bottom
// area is known as the “action area”. This is generally used for packing
// buttons into the dialog which may perform functions such as cancel, ok, or
// apply.
//
// Dialog boxes are created with a call to gtk_dialog_new() or
// gtk_dialog_new_with_buttons(). gtk_dialog_new_with_buttons() is recommended;
// it allows you to set the dialog title, some convenient flags, and add simple
// buttons.
//
// If “dialog” is a newly created dialog, the two primary areas of the window
// can be accessed through gtk_dialog_get_content_area() and
// gtk_dialog_get_action_area(), as can be seen from the example below.
//
// A “modal” dialog (that is, one which freezes the rest of the application from
// user input), can be created by calling gtk_window_set_modal() on the dialog.
// Use the GTK_WINDOW() macro to cast the widget returned from gtk_dialog_new()
// into a Window. When using gtk_dialog_new_with_buttons() you can also pass the
// K_DIALOG_MODAL flag to make a dialog modal.
//
// If you add buttons to Dialog using gtk_dialog_new_with_buttons(),
// gtk_dialog_add_button(), gtk_dialog_add_buttons(), or
// gtk_dialog_add_action_widget(), clicking the button will emit a signal called
// Dialog::response with a response ID that you specified. GTK+ will never
// assign a meaning to positive response IDs; these are entirely user-defined.
// But for convenience, you can use the response IDs in the ResponseType
// enumeration (these all have values less than zero). If a dialog receives a
// delete event, the Dialog::response signal will be emitted with a response ID
// of K_RESPONSE_DELETE_EVENT.
//
// If you want to block waiting for a dialog to return before returning control
// flow to your code, you can call gtk_dialog_run(). This function enters a
// recursive main loop and waits for the user to respond to the dialog,
// returning the response ID corresponding to the button the user clicked.
//
// For the simple dialog in the following example, in reality you’d probably use
// MessageDialog to save yourself some effort. But you’d need to create the
// dialog contents manually if you had more than a simple message in the dialog.
//
// An example for simple GtkDialog usage:
//
//    // Function to open a dialog box with a message
//    void
//    quick_message (GtkWindow *parent, gchar *message)
//    {
//     GtkWidget *dialog, *label, *content_area;
//     GtkDialogFlags flags;
//
//     // Create the widgets
//     flags = GTK_DIALOG_DESTROY_WITH_PARENT;
//     dialog = gtk_dialog_new_with_buttons ("Message",
//                                           parent,
//                                           flags,
//                                           _("_OK"),
//                                           GTK_RESPONSE_NONE,
//                                           NULL);
//     content_area = gtk_dialog_get_content_area (GTK_DIALOG (dialog));
//     label = gtk_label_new (message);
//
//     // Ensure that the dialog box is destroyed when the user responds
//
//     g_signal_connect_swapped (dialog,
//                               "response",
//                               G_CALLBACK (gtk_widget_destroy),
//                               dialog);
//
//     // Add the label, and show everything we’ve added
//
//     gtk_container_add (GTK_CONTAINER (content_area), label);
//     gtk_widget_show_all (dialog);
//    }
//
//
// GtkDialog as GtkBuildable
//
// The GtkDialog implementation of the Buildable interface exposes the @vbox and
// @action_area as internal children with the names “vbox” and “action_area”.
//
// GtkDialog supports a custom <action-widgets> element, which can contain
// multiple <action-widget> elements. The “response” attribute specifies a
// numeric response, and the content of the element is the id of widget (which
// should be a child of the dialogs @action_area). To mark a response as
// default, set the “default“ attribute of the <action-widget> element to true.
//
// GtkDialog supports adding action widgets by specifying “action“ as the “type“
// attribute of a <child> element. The widget will be added either to the action
// area or the headerbar of the dialog, depending on the “use-header-bar“
// property. The response id has to be associated with the action widget using
// the <action-widgets> element.
//
// An example of a Dialog UI definition fragment:
//
//    <object class="GtkDialog" id="dialog1">
//      <child type="action">
//        <object class="GtkButton" id="button_cancel"/>
//      </child>
//      <child type="action">
//        <object class="GtkButton" id="button_ok">
//          <property name="can-default">True</property>
//        </object>
//      </child>
//      <action-widgets>
//        <action-widget response="cancel">button_cancel</action-widget>
//        <action-widget response="ok" default="true">button_ok</action-widget>
//      </action-widgets>
//    </object>
type Dialog interface {
	Window

	// AsWindow casts the class to the Window interface.
	AsWindow() Window
	// AsBuildable casts the class to the Buildable interface.
	AsBuildable() Buildable

	// ActivateDefault activates the default widget for the window, unless the
	// current focused widget has been configured to receive the default action
	// (see gtk_widget_set_receives_default()), in which case the focused widget
	// is activated.
	//
	// This method is inherited from Window
	ActivateDefault() bool
	// ActivateFocus activates the current focused widget within the window.
	//
	// This method is inherited from Window
	ActivateFocus() bool
	// ActivateKey activates mnemonics and accelerators for this Window. This is
	// normally called by the default ::key_press_event handler for toplevel
	// windows, however in some cases it may be useful to call this directly
	// when overriding the standard key handling for a toplevel window.
	//
	// This method is inherited from Window
	ActivateKey(event *gdk.EventKey) bool
	// AddAccelGroup: associate @accel_group with @window, such that calling
	// gtk_accel_groups_activate() on @window will activate accelerators in
	// @accel_group.
	//
	// This method is inherited from Window
	AddAccelGroup(accelGroup AccelGroup)
	// AddMnemonic adds a mnemonic to this window.
	//
	// This method is inherited from Window
	AddMnemonic(keyval uint, target Widget)
	// BeginMoveDrag starts moving a window. This function is used if an
	// application has window movement grips. When GDK can support it, the
	// window movement will be done using the standard mechanism for the [window
	// manager][gtk-X11-arch] or windowing system. Otherwise, GDK will try to
	// emulate window movement, potentially not all that well, depending on the
	// windowing system.
	//
	// This method is inherited from Window
	BeginMoveDrag(button int, rootX int, rootY int, timestamp uint32)
	// BeginResizeDrag starts resizing a window. This function is used if an
	// application has window resizing controls. When GDK can support it, the
	// resize will be done using the standard mechanism for the [window
	// manager][gtk-X11-arch] or windowing system. Otherwise, GDK will try to
	// emulate window resizing, potentially not all that well, depending on the
	// windowing system.
	//
	// This method is inherited from Window
	BeginResizeDrag(edge gdk.WindowEdge, button int, rootX int, rootY int, timestamp uint32)
	// Close requests that the window is closed, similar to what happens when a
	// window manager close button is clicked.
	//
	// This function can be used with close buttons in custom titlebars.
	//
	// This method is inherited from Window
	Close()
	// Deiconify asks to deiconify (i.e. unminimize) the specified @window. Note
	// that you shouldn’t assume the window is definitely deiconified afterward,
	// because other entities (e.g. the user or [window manager][gtk-X11-arch]))
	// could iconify it again before your code which assumes deiconification
	// gets to run.
	//
	// You can track iconification via the “window-state-event” signal on
	// Widget.
	//
	// This method is inherited from Window
	Deiconify()
	// Fullscreen asks to place @window in the fullscreen state. Note that you
	// shouldn’t assume the window is definitely full screen afterward, because
	// other entities (e.g. the user or [window manager][gtk-X11-arch]) could
	// unfullscreen it again, and not all window managers honor requests to
	// fullscreen windows. But normally the window will end up fullscreen. Just
	// don’t write code that crashes if not.
	//
	// You can track the fullscreen state via the “window-state-event” signal on
	// Widget.
	//
	// This method is inherited from Window
	Fullscreen()
	// FullscreenOnMonitor asks to place @window in the fullscreen state. Note
	// that you shouldn't assume the window is definitely full screen afterward.
	//
	// You can track the fullscreen state via the "window-state-event" signal on
	// Widget.
	//
	// This method is inherited from Window
	FullscreenOnMonitor(screen gdk.Screen, monitor int)
	// GetAcceptFocus gets the value set by gtk_window_set_accept_focus().
	//
	// This method is inherited from Window
	GetAcceptFocus() bool
	// GetApplication gets the Application associated with the window (if any).
	//
	// This method is inherited from Window
	GetApplication() Application
	// GetAttachedTo fetches the attach widget for this window. See
	// gtk_window_set_attached_to().
	//
	// This method is inherited from Window
	GetAttachedTo() Widget
	// GetDecorated returns whether the window has been set to have decorations
	// such as a title bar via gtk_window_set_decorated().
	//
	// This method is inherited from Window
	GetDecorated() bool
	// GetDefaultSize gets the default size of the window. A value of -1 for the
	// width or height indicates that a default size has not been explicitly set
	// for that dimension, so the “natural” size of the window will be used.
	//
	// This method is inherited from Window
	GetDefaultSize() (width int, height int)
	// GetDefaultWidget returns the default widget for @window. See
	// gtk_window_set_default() for more details.
	//
	// This method is inherited from Window
	GetDefaultWidget() Widget
	// GetDeletable returns whether the window has been set to have a close
	// button via gtk_window_set_deletable().
	//
	// This method is inherited from Window
	GetDeletable() bool
	// GetDestroyWithParent returns whether the window will be destroyed with
	// its transient parent. See gtk_window_set_destroy_with_parent ().
	//
	// This method is inherited from Window
	GetDestroyWithParent() bool
	// GetFocus retrieves the current focused widget within the window. Note
	// that this is the widget that would have the focus if the toplevel window
	// focused; if the toplevel window is not focused then `gtk_widget_has_focus
	// (widget)` will not be true for the widget.
	//
	// This method is inherited from Window
	GetFocus() Widget
	// GetFocusOnMap gets the value set by gtk_window_set_focus_on_map().
	//
	// This method is inherited from Window
	GetFocusOnMap() bool
	// GetFocusVisible gets the value of the Window:focus-visible property.
	//
	// This method is inherited from Window
	GetFocusVisible() bool
	// GetGravity gets the value set by gtk_window_set_gravity().
	//
	// This method is inherited from Window
	GetGravity() gdk.Gravity
	// GetGroup returns the group for @window or the default group, if @window
	// is nil or if @window does not have an explicit window group.
	//
	// This method is inherited from Window
	GetGroup() WindowGroup
	// GetHasResizeGrip determines whether the window may have a resize grip.
	//
	// Deprecated: since version 3.14.
	//
	// This method is inherited from Window
	GetHasResizeGrip() bool
	// GetHideTitlebarWhenMaximized returns whether the window has requested to
	// have its titlebar hidden when maximized. See
	// gtk_window_set_hide_titlebar_when_maximized ().
	//
	// This method is inherited from Window
	GetHideTitlebarWhenMaximized() bool
	// GetIcon gets the value set by gtk_window_set_icon() (or if you've called
	// gtk_window_set_icon_list(), gets the first icon in the icon list).
	//
	// This method is inherited from Window
	GetIcon() gdkpixbuf.Pixbuf
	// GetIconName returns the name of the themed icon for the window, see
	// gtk_window_set_icon_name().
	//
	// This method is inherited from Window
	GetIconName() string
	// GetMnemonicModifier returns the mnemonic modifier for this window. See
	// gtk_window_set_mnemonic_modifier().
	//
	// This method is inherited from Window
	GetMnemonicModifier() gdk.ModifierType
	// GetMnemonicsVisible gets the value of the Window:mnemonics-visible
	// property.
	//
	// This method is inherited from Window
	GetMnemonicsVisible() bool
	// GetModal returns whether the window is modal. See gtk_window_set_modal().
	//
	// This method is inherited from Window
	GetModal() bool
	// GetOpacity fetches the requested opacity for this window. See
	// gtk_window_set_opacity().
	//
	// Deprecated: since version 3.8.
	//
	// This method is inherited from Window
	GetOpacity() float64
	// GetPosition: this function returns the position you need to pass to
	// gtk_window_move() to keep @window in its current position. This means
	// that the meaning of the returned value varies with window gravity. See
	// gtk_window_move() for more details.
	//
	// The reliability of this function depends on the windowing system
	// currently in use. Some windowing systems, such as Wayland, do not support
	// a global coordinate system, and thus the position of the window will
	// always be (0, 0). Others, like X11, do not have a reliable way to obtain
	// the geometry of the decorations of a window if they are provided by the
	// window manager. Additionally, on X11, window manager have been known to
	// mismanage window gravity, which result in windows moving even if you use
	// the coordinates of the current position as returned by this function.
	//
	// If you haven’t changed the window gravity, its gravity will be
	// K_GRAVITY_NORTH_WEST. This means that gtk_window_get_position() gets the
	// position of the top-left corner of the window manager frame for the
	// window. gtk_window_move() sets the position of this same top-left corner.
	//
	// If a window has gravity K_GRAVITY_STATIC the window manager frame is not
	// relevant, and thus gtk_window_get_position() will always produce accurate
	// results. However you can’t use static gravity to do things like place a
	// window in a corner of the screen, because static gravity ignores the
	// window manager decorations.
	//
	// Ideally, this function should return appropriate values if the window has
	// client side decorations, assuming that the windowing system supports
	// global coordinates.
	//
	// In practice, saving the window position should not be left to
	// applications, as they lack enough knowledge of the windowing system and
	// the window manager state to effectively do so. The appropriate way to
	// implement saving the window position is to use a platform-specific
	// protocol, wherever that is available.
	//
	// This method is inherited from Window
	GetPosition() (rootX int, rootY int)
	// GetResizable gets the value set by gtk_window_set_resizable().
	//
	// This method is inherited from Window
	GetResizable() bool
	// GetResizeGripArea: if a window has a resize grip, this will retrieve the
	// grip position, width and height into the specified Rectangle.
	//
	// Deprecated: since version 3.14.
	//
	// This method is inherited from Window
	GetResizeGripArea() (gdk.Rectangle, bool)
	// GetRole returns the role of the window. See gtk_window_set_role() for
	// further explanation.
	//
	// This method is inherited from Window
	GetRole() string
	// GetScreen returns the Screen associated with @window.
	//
	// This method is inherited from Window
	GetScreen() gdk.Screen
	// GetSize obtains the current size of @window.
	//
	// If @window is not visible on screen, this function return the size GTK+
	// will suggest to the [window manager][gtk-X11-arch] for the initial window
	// size (but this is not reliably the same as the size the window manager
	// will actually select). See: gtk_window_set_default_size().
	//
	// Depending on the windowing system and the window manager constraints, the
	// size returned by this function may not match the size set using
	// gtk_window_resize(); additionally, since gtk_window_resize() may be
	// implemented as an asynchronous operation, GTK+ cannot guarantee in any
	// way that this code:
	//
	//    static void
	//    on_size_allocate (GtkWidget *widget, GtkAllocation *allocation)
	//    {
	//      int new_width, new_height;
	//
	//      gtk_window_get_size (GTK_WINDOW (widget), &new_width, &new_height);
	//
	//      ...
	//    }
	//
	// Note that, if you connect to the Widget::size-allocate signal, you should
	// not use the dimensions of the Allocation passed to the signal handler, as
	// the allocation may contain client side decorations added by GTK+,
	// depending on the windowing system in use.
	//
	// If you are getting a window size in order to position the window on the
	// screen, you should, instead, simply set the window’s semantic type with
	// gtk_window_set_type_hint(), which allows the window manager to e.g.
	// center dialogs. Also, if you set the transient parent of dialogs with
	// gtk_window_set_transient_for() window managers will often center the
	// dialog over its parent window. It's much preferred to let the window
	// manager handle these cases rather than doing it yourself, because all
	// apps will behave consistently and according to user or system
	// preferences, if the window manager handles it. Also, the window manager
	// can take into account the size of the window decorations and border that
	// it may add, and of which GTK+ has no knowledge. Additionally, positioning
	// windows in global screen coordinates may not be allowed by the windowing
	// system. For more information, see: gtk_window_set_position().
	//
	// This method is inherited from Window
	GetSize() (width int, height int)
	// GetSkipPagerHint gets the value set by gtk_window_set_skip_pager_hint().
	//
	// This method is inherited from Window
	GetSkipPagerHint() bool
	// GetSkipTaskbarHint gets the value set by
	// gtk_window_set_skip_taskbar_hint()
	//
	// This method is inherited from Window
	GetSkipTaskbarHint() bool
	// GetTitle retrieves the title of the window. See gtk_window_set_title().
	//
	// This method is inherited from Window
	GetTitle() string
	// GetTitlebar returns the custom titlebar that has been set with
	// gtk_window_set_titlebar().
	//
	// This method is inherited from Window
	GetTitlebar() Widget
	// GetTransientFor fetches the transient parent for this window. See
	// gtk_window_set_transient_for().
	//
	// This method is inherited from Window
	GetTransientFor() Window
	// GetTypeHint gets the type hint for this window. See
	// gtk_window_set_type_hint().
	//
	// This method is inherited from Window
	GetTypeHint() gdk.WindowTypeHint
	// GetUrgencyHint gets the value set by gtk_window_set_urgency_hint()
	//
	// This method is inherited from Window
	GetUrgencyHint() bool
	// GetWindowType gets the type of the window. See WindowType.
	//
	// This method is inherited from Window
	GetWindowType() WindowType
	// HasGroup returns whether @window has an explicit window group.
	//
	// This method is inherited from Window
	HasGroup() bool
	// HasToplevelFocus returns whether the input focus is within this
	// GtkWindow. For real toplevel windows, this is identical to
	// gtk_window_is_active(), but for embedded windows, like Plug, the results
	// will differ.
	//
	// This method is inherited from Window
	HasToplevelFocus() bool
	// Iconify asks to iconify (i.e. minimize) the specified @window. Note that
	// you shouldn’t assume the window is definitely iconified afterward,
	// because other entities (e.g. the user or [window manager][gtk-X11-arch])
	// could deiconify it again, or there may not be a window manager in which
	// case iconification isn’t possible, etc. But normally the window will end
	// up iconified. Just don’t write code that crashes if not.
	//
	// It’s permitted to call this function before showing a window, in which
	// case the window will be iconified before it ever appears onscreen.
	//
	// You can track iconification via the “window-state-event” signal on
	// Widget.
	//
	// This method is inherited from Window
	Iconify()
	// IsActive returns whether the window is part of the current active
	// toplevel. (That is, the toplevel window receiving keystrokes.) The return
	// value is true if the window is active toplevel itself, but also if it is,
	// say, a Plug embedded in the active toplevel. You might use this function
	// if you wanted to draw a widget differently in an active window from a
	// widget in an inactive window. See gtk_window_has_toplevel_focus()
	//
	// This method is inherited from Window
	IsActive() bool
	// IsMaximized retrieves the current maximized state of @window.
	//
	// Note that since maximization is ultimately handled by the window manager
	// and happens asynchronously to an application request, you shouldn’t
	// assume the return value of this function changing immediately (or at
	// all), as an effect of calling gtk_window_maximize() or
	// gtk_window_unmaximize().
	//
	// This method is inherited from Window
	IsMaximized() bool
	// Maximize asks to maximize @window, so that it becomes full-screen. Note
	// that you shouldn’t assume the window is definitely maximized afterward,
	// because other entities (e.g. the user or [window manager][gtk-X11-arch])
	// could unmaximize it again, and not all window managers support
	// maximization. But normally the window will end up maximized. Just don’t
	// write code that crashes if not.
	//
	// It’s permitted to call this function before showing a window, in which
	// case the window will be maximized when it appears onscreen initially.
	//
	// You can track maximization via the “window-state-event” signal on Widget,
	// or by listening to notifications on the Window:is-maximized property.
	//
	// This method is inherited from Window
	Maximize()
	// MnemonicActivate activates the targets associated with the mnemonic.
	//
	// This method is inherited from Window
	MnemonicActivate(keyval uint, modifier gdk.ModifierType) bool
	// Move asks the [window manager][gtk-X11-arch] to move @window to the given
	// position. Window managers are free to ignore this; most window managers
	// ignore requests for initial window positions (instead using a
	// user-defined placement algorithm) and honor requests after the window has
	// already been shown.
	//
	// Note: the position is the position of the gravity-determined reference
	// point for the window. The gravity determines two things: first, the
	// location of the reference point in root window coordinates; and second,
	// which point on the window is positioned at the reference point.
	//
	// By default the gravity is K_GRAVITY_NORTH_WEST, so the reference point is
	// simply the @x, @y supplied to gtk_window_move(). The top-left corner of
	// the window decorations (aka window frame or border) will be placed at @x,
	// @y. Therefore, to position a window at the top left of the screen, you
	// want to use the default gravity (which is K_GRAVITY_NORTH_WEST) and move
	// the window to 0,0.
	//
	// To position a window at the bottom right corner of the screen, you would
	// set K_GRAVITY_SOUTH_EAST, which means that the reference point is at @x +
	// the window width and @y + the window height, and the bottom-right corner
	// of the window border will be placed at that reference point. So, to place
	// a window in the bottom right corner you would first set gravity to south
	// east, then write: `gtk_window_move (window, gdk_screen_width () -
	// window_width, gdk_screen_height () - window_height)` (note that this
	// example does not take multi-head scenarios into account).
	//
	// The Extended Window Manager Hints Specification
	// (http://www.freedesktop.org/Standards/wm-spec) has a nice table of
	// gravities in the “implementation notes” section.
	//
	// The gtk_window_get_position() documentation may also be relevant.
	//
	// This method is inherited from Window
	Move(x int, y int)
	// ParseGeometry parses a standard X Window System geometry string - see the
	// manual page for X (type “man X”) for details on this.
	// gtk_window_parse_geometry() does work on all GTK+ ports including Win32
	// but is primarily intended for an X environment.
	//
	// If either a size or a position can be extracted from the geometry string,
	// gtk_window_parse_geometry() returns true and calls
	// gtk_window_set_default_size() and/or gtk_window_move() to resize/move the
	// window.
	//
	// If gtk_window_parse_geometry() returns true, it will also set the
	// K_HINT_USER_POS and/or K_HINT_USER_SIZE hints indicating to the window
	// manager that the size/position of the window was user-specified. This
	// causes most window managers to honor the geometry.
	//
	// Note that for gtk_window_parse_geometry() to work as expected, it has to
	// be called when the window has its “final” size, i.e. after calling
	// gtk_widget_show_all() on the contents and gtk_window_set_geometry_hints()
	// on the window.
	//
	//    #include <gtk/gtk.h>
	//
	//    static void
	//    fill_with_content (GtkWidget *vbox)
	//    {
	//      // fill with content...
	//    }
	//
	//    int
	//    main (int argc, char *argv[])
	//    {
	//      GtkWidget *window, *vbox;
	//      GdkGeometry size_hints = {
	//        100, 50, 0, 0, 100, 50, 10,
	//        10, 0.0, 0.0, GDK_GRAVITY_NORTH_WEST
	//      };
	//
	//      gtk_init (&argc, &argv);
	//
	//      window = gtk_window_new (GTK_WINDOW_TOPLEVEL);
	//      vbox = gtk_box_new (GTK_ORIENTATION_VERTICAL, 0);
	//
	//      gtk_container_add (GTK_CONTAINER (window), vbox);
	//      fill_with_content (vbox);
	//      gtk_widget_show_all (vbox);
	//
	//      gtk_window_set_geometry_hints (GTK_WINDOW (window),
	//    	  			    NULL,
	//    				    &size_hints,
	//    				    GDK_HINT_MIN_SIZE |
	//    				    GDK_HINT_BASE_SIZE |
	//    				    GDK_HINT_RESIZE_INC);
	//
	//      if (argc > 1)
	//        {
	//          gboolean res;
	//          res = gtk_window_parse_geometry (GTK_WINDOW (window),
	//                                           argv[1]);
	//          if (! res)
	//            fprintf (stderr,
	//                     "Failed to parse “s”\n",
	//                     argv[1]);
	//        }
	//
	//      gtk_widget_show_all (window);
	//      gtk_main ();
	//
	//      return 0;
	//    }
	//
	// Deprecated: since version 3.20.
	//
	// This method is inherited from Window
	ParseGeometry(geometry string) bool
	// Present presents a window to the user. This function should not be used
	// as when it is called, it is too late to gather a valid timestamp to allow
	// focus stealing prevention to work correctly.
	//
	// This method is inherited from Window
	Present()
	// PresentWithTime presents a window to the user. This may mean raising the
	// window in the stacking order, deiconifying it, moving it to the current
	// desktop, and/or giving it the keyboard focus, possibly dependent on the
	// user’s platform, window manager, and preferences.
	//
	// If @window is hidden, this function calls gtk_widget_show() as well.
	//
	// This function should be used when the user tries to open a window that’s
	// already open. Say for example the preferences dialog is currently open,
	// and the user chooses Preferences from the menu a second time; use
	// gtk_window_present() to move the already-open dialog where the user can
	// see it.
	//
	// Presents a window to the user in response to a user interaction. The
	// timestamp should be gathered when the window was requested to be shown
	// (when clicking a link for example), rather than once the window is ready
	// to be shown.
	//
	// This method is inherited from Window
	PresentWithTime(timestamp uint32)
	// PropagateKeyEvent: propagate a key press or release event to the focus
	// widget and up the focus container chain until a widget handles @event.
	// This is normally called by the default ::key_press_event and
	// ::key_release_event handlers for toplevel windows, however in some cases
	// it may be useful to call this directly when overriding the standard key
	// handling for a toplevel window.
	//
	// This method is inherited from Window
	PropagateKeyEvent(event *gdk.EventKey) bool
	// RemoveAccelGroup reverses the effects of gtk_window_add_accel_group().
	//
	// This method is inherited from Window
	RemoveAccelGroup(accelGroup AccelGroup)
	// RemoveMnemonic removes a mnemonic from this window.
	//
	// This method is inherited from Window
	RemoveMnemonic(keyval uint, target Widget)
	// ReshowWithInitialSize hides @window, then reshows it, resetting the
	// default size and position of the window. Used by GUI builders only.
	//
	// Deprecated: since version 3.10.
	//
	// This method is inherited from Window
	ReshowWithInitialSize()
	// Resize resizes the window as if the user had done so, obeying geometry
	// constraints. The default geometry constraint is that windows may not be
	// smaller than their size request; to override this constraint, call
	// gtk_widget_set_size_request() to set the window's request to a smaller
	// value.
	//
	// If gtk_window_resize() is called before showing a window for the first
	// time, it overrides any default size set with
	// gtk_window_set_default_size().
	//
	// Windows may not be resized smaller than 1 by 1 pixels.
	//
	// When using client side decorations, GTK+ will do its best to adjust the
	// given size so that the resulting window size matches the requested size
	// without the title bar, borders and shadows added for the client side
	// decorations, but there is no guarantee that the result will be totally
	// accurate because these widgets added for client side decorations depend
	// on the theme and may not be realized or visible at the time
	// gtk_window_resize() is issued.
	//
	// If the GtkWindow has a titlebar widget (see gtk_window_set_titlebar()),
	// then typically, gtk_window_resize() will compensate for the height of the
	// titlebar widget only if the height is known when the resulting GtkWindow
	// configuration is issued. For example, if new widgets are added after the
	// GtkWindow configuration and cause the titlebar widget to grow in height,
	// this will result in a window content smaller that specified by
	// gtk_window_resize() and not a larger window.
	//
	// This method is inherited from Window
	Resize(width int, height int)
	// ResizeGripIsVisible determines whether a resize grip is visible for the
	// specified window.
	//
	// Deprecated: since version 3.14.
	//
	// This method is inherited from Window
	ResizeGripIsVisible() bool
	// ResizeToGeometry: like gtk_window_resize(), but @width and @height are
	// interpreted in terms of the base size and increment set with
	// gtk_window_set_geometry_hints.
	//
	// Deprecated: since version 3.20.
	//
	// This method is inherited from Window
	ResizeToGeometry(width int, height int)
	// SetAcceptFocus windows may set a hint asking the desktop environment not
	// to receive the input focus. This function sets this hint.
	//
	// This method is inherited from Window
	SetAcceptFocus(setting bool)
	// SetApplication sets or unsets the Application associated with the window.
	//
	// The application will be kept alive for at least as long as it has any
	// windows associated with it (see g_application_hold() for a way to keep it
	// alive without windows).
	//
	// Normally, the connection between the application and the window will
	// remain until the window is destroyed, but you can explicitly remove it by
	// setting the @application to nil.
	//
	// This is equivalent to calling gtk_application_remove_window() and/or
	// gtk_application_add_window() on the old/new applications as relevant.
	//
	// This method is inherited from Window
	SetApplication(application Application)
	// SetAttachedTo marks @window as attached to @attach_widget. This creates a
	// logical binding between the window and the widget it belongs to, which is
	// used by GTK+ to propagate information such as styling or accessibility to
	// @window as if it was a children of @attach_widget.
	//
	// Examples of places where specifying this relation is useful are for
	// instance a Menu created by a ComboBox, a completion popup window created
	// by Entry or a typeahead search entry created by TreeView.
	//
	// Note that this function should not be confused with
	// gtk_window_set_transient_for(), which specifies a window manager relation
	// between two toplevels instead.
	//
	// Passing nil for @attach_widget detaches the window.
	//
	// This method is inherited from Window
	SetAttachedTo(attachWidget Widget)
	// SetDecorated: by default, windows are decorated with a title bar, resize
	// controls, etc. Some [window managers][gtk-X11-arch] allow GTK+ to disable
	// these decorations, creating a borderless window. If you set the decorated
	// property to false using this function, GTK+ will do its best to convince
	// the window manager not to decorate the window. Depending on the system,
	// this function may not have any effect when called on a window that is
	// already visible, so you should call it before calling gtk_widget_show().
	//
	// On Windows, this function always works, since there’s no window manager
	// policy involved.
	//
	// This method is inherited from Window
	SetDecorated(setting bool)
	// SetDefault: the default widget is the widget that’s activated when the
	// user presses Enter in a dialog (for example). This function sets or
	// unsets the default widget for a Window. When setting (rather than
	// unsetting) the default widget it’s generally easier to call
	// gtk_widget_grab_default() on the widget. Before making a widget the
	// default widget, you must call gtk_widget_set_can_default() on the widget
	// you’d like to make the default.
	//
	// This method is inherited from Window
	SetDefault(defaultWidget Widget)
	// SetDefaultGeometry: like gtk_window_set_default_size(), but @width and
	// @height are interpreted in terms of the base size and increment set with
	// gtk_window_set_geometry_hints.
	//
	// Deprecated: since version 3.20.
	//
	// This method is inherited from Window
	SetDefaultGeometry(width int, height int)
	// SetDefaultSize sets the default size of a window. If the window’s
	// “natural” size (its size request) is larger than the default, the default
	// will be ignored. More generally, if the default size does not obey the
	// geometry hints for the window (gtk_window_set_geometry_hints() can be
	// used to set these explicitly), the default size will be clamped to the
	// nearest permitted size.
	//
	// Unlike gtk_widget_set_size_request(), which sets a size request for a
	// widget and thus would keep users from shrinking the window, this function
	// only sets the initial size, just as if the user had resized the window
	// themselves. Users can still shrink the window again as they normally
	// would. Setting a default size of -1 means to use the “natural” default
	// size (the size request of the window).
	//
	// For more control over a window’s initial size and how resizing works,
	// investigate gtk_window_set_geometry_hints().
	//
	// For some uses, gtk_window_resize() is a more appropriate function.
	// gtk_window_resize() changes the current size of the window, rather than
	// the size to be used on initial display. gtk_window_resize() always
	// affects the window itself, not the geometry widget.
	//
	// The default size of a window only affects the first time a window is
	// shown; if a window is hidden and re-shown, it will remember the size it
	// had prior to hiding, rather than using the default size.
	//
	// Windows can’t actually be 0x0 in size, they must be at least 1x1, but
	// passing 0 for @width and @height is OK, resulting in a 1x1 default size.
	//
	// If you use this function to reestablish a previously saved window size,
	// note that the appropriate size to save is the one returned by
	// gtk_window_get_size(). Using the window allocation directly will not work
	// in all circumstances and can lead to growing or shrinking windows.
	//
	// This method is inherited from Window
	SetDefaultSize(width int, height int)
	// SetDeletable: by default, windows have a close button in the window
	// frame. Some [window managers][gtk-X11-arch] allow GTK+ to disable this
	// button. If you set the deletable property to false using this function,
	// GTK+ will do its best to convince the window manager not to show a close
	// button. Depending on the system, this function may not have any effect
	// when called on a window that is already visible, so you should call it
	// before calling gtk_widget_show().
	//
	// On Windows, this function always works, since there’s no window manager
	// policy involved.
	//
	// This method is inherited from Window
	SetDeletable(setting bool)
	// SetDestroyWithParent: if @setting is true, then destroying the transient
	// parent of @window will also destroy @window itself. This is useful for
	// dialogs that shouldn’t persist beyond the lifetime of the main window
	// they're associated with, for example.
	//
	// This method is inherited from Window
	SetDestroyWithParent(setting bool)
	// SetFocus: if @focus is not the current focus widget, and is focusable,
	// sets it as the focus widget for the window. If @focus is nil, unsets the
	// focus widget for this window. To set the focus to a particular widget in
	// the toplevel, it is usually more convenient to use
	// gtk_widget_grab_focus() instead of this function.
	//
	// This method is inherited from Window
	SetFocus(focus Widget)
	// SetFocusOnMap windows may set a hint asking the desktop environment not
	// to receive the input focus when the window is mapped. This function sets
	// this hint.
	//
	// This method is inherited from Window
	SetFocusOnMap(setting bool)
	// SetFocusVisible sets the Window:focus-visible property.
	//
	// This method is inherited from Window
	SetFocusVisible(setting bool)
	// SetGeometryHints: this function sets up hints about how a window can be
	// resized by the user. You can set a minimum and maximum size; allowed
	// resize increments (e.g. for xterm, you can only resize by the size of a
	// character); aspect ratios; and more. See the Geometry struct.
	//
	// This method is inherited from Window
	SetGeometryHints(geometryWidget Widget, geometry *gdk.Geometry, geomMask gdk.WindowHints)
	// SetGravity: window gravity defines the meaning of coordinates passed to
	// gtk_window_move(). See gtk_window_move() and Gravity for more details.
	//
	// The default window gravity is K_GRAVITY_NORTH_WEST which will typically
	// “do what you mean.”
	//
	// This method is inherited from Window
	SetGravity(gravity gdk.Gravity)
	// SetHasResizeGrip sets whether @window has a corner resize grip.
	//
	// Note that the resize grip is only shown if the window is actually
	// resizable and not maximized. Use gtk_window_resize_grip_is_visible() to
	// find out if the resize grip is currently shown.
	//
	// Deprecated: since version 3.14.
	//
	// This method is inherited from Window
	SetHasResizeGrip(value bool)
	// SetHasUserRefCount tells GTK+ whether to drop its extra reference to the
	// window when gtk_widget_destroy() is called.
	//
	// This function is only exported for the benefit of language bindings which
	// may need to keep the window alive until their wrapper object is garbage
	// collected. There is no justification for ever calling this function in an
	// application.
	//
	// This method is inherited from Window
	SetHasUserRefCount(setting bool)
	// SetHideTitlebarWhenMaximized: if @setting is true, then @window will
	// request that it’s titlebar should be hidden when maximized. This is
	// useful for windows that don’t convey any information other than the
	// application name in the titlebar, to put the available screen space to
	// better use. If the underlying window system does not support the request,
	// the setting will not have any effect.
	//
	// Note that custom titlebars set with gtk_window_set_titlebar() are not
	// affected by this. The application is in full control of their content and
	// visibility anyway.
	//
	// This method is inherited from Window
	SetHideTitlebarWhenMaximized(setting bool)
	// SetIcon sets up the icon representing a Window. This icon is used when
	// the window is minimized (also known as iconified). Some window managers
	// or desktop environments may also place it in the window frame, or display
	// it in other contexts. On others, the icon is not used at all, so your
	// mileage may vary.
	//
	// The icon should be provided in whatever size it was naturally drawn; that
	// is, don’t scale the image before passing it to GTK+. Scaling is postponed
	// until the last minute, when the desired final size is known, to allow
	// best quality.
	//
	// If you have your icon hand-drawn in multiple sizes, use
	// gtk_window_set_icon_list(). Then the best size will be used.
	//
	// This function is equivalent to calling gtk_window_set_icon_list() with a
	// 1-element list.
	//
	// See also gtk_window_set_default_icon_list() to set the icon for all
	// windows in your application in one go.
	//
	// This method is inherited from Window
	SetIcon(icon gdkpixbuf.Pixbuf)
	// SetIconFromFile sets the icon for @window. Warns on failure if @err is
	// nil.
	//
	// This function is equivalent to calling gtk_window_set_icon() with a
	// pixbuf created by loading the image from @filename.
	//
	// This method is inherited from Window
	SetIconFromFile(filename string) error
	// SetIconName sets the icon for the window from a named themed icon. See
	// the docs for IconTheme for more details. On some platforms, the window
	// icon is not used at all.
	//
	// Note that this has nothing to do with the WM_ICON_NAME property which is
	// mentioned in the ICCCM.
	//
	// This method is inherited from Window
	SetIconName(name string)
	// SetKeepAbove asks to keep @window above, so that it stays on top. Note
	// that you shouldn’t assume the window is definitely above afterward,
	// because other entities (e.g. the user or [window manager][gtk-X11-arch])
	// could not keep it above, and not all window managers support keeping
	// windows above. But normally the window will end kept above. Just don’t
	// write code that crashes if not.
	//
	// It’s permitted to call this function before showing a window, in which
	// case the window will be kept above when it appears onscreen initially.
	//
	// You can track the above state via the “window-state-event” signal on
	// Widget.
	//
	// Note that, according to the Extended Window Manager Hints Specification
	// (http://www.freedesktop.org/Standards/wm-spec), the above state is mainly
	// meant for user preferences and should not be used by applications e.g.
	// for drawing attention to their dialogs.
	//
	// This method is inherited from Window
	SetKeepAbove(setting bool)
	// SetKeepBelow asks to keep @window below, so that it stays in bottom. Note
	// that you shouldn’t assume the window is definitely below afterward,
	// because other entities (e.g. the user or [window manager][gtk-X11-arch])
	// could not keep it below, and not all window managers support putting
	// windows below. But normally the window will be kept below. Just don’t
	// write code that crashes if not.
	//
	// It’s permitted to call this function before showing a window, in which
	// case the window will be kept below when it appears onscreen initially.
	//
	// You can track the below state via the “window-state-event” signal on
	// Widget.
	//
	// Note that, according to the Extended Window Manager Hints Specification
	// (http://www.freedesktop.org/Standards/wm-spec), the above state is mainly
	// meant for user preferences and should not be used by applications e.g.
	// for drawing attention to their dialogs.
	//
	// This method is inherited from Window
	SetKeepBelow(setting bool)
	// SetMnemonicModifier sets the mnemonic modifier for this window.
	//
	// This method is inherited from Window
	SetMnemonicModifier(modifier gdk.ModifierType)
	// SetMnemonicsVisible sets the Window:mnemonics-visible property.
	//
	// This method is inherited from Window
	SetMnemonicsVisible(setting bool)
	// SetModal sets a window modal or non-modal. Modal windows prevent
	// interaction with other windows in the same application. To keep modal
	// dialogs on top of main application windows, use
	// gtk_window_set_transient_for() to make the dialog transient for the
	// parent; most [window managers][gtk-X11-arch] will then disallow lowering
	// the dialog below the parent.
	//
	// This method is inherited from Window
	SetModal(modal bool)
	// SetOpacity: request the windowing system to make @window partially
	// transparent, with opacity 0 being fully transparent and 1 fully opaque.
	// (Values of the opacity parameter are clamped to the [0,1] range.) On X11
	// this has any effect only on X screens with a compositing manager running.
	// See gtk_widget_is_composited(). On Windows it should work always.
	//
	// Note that setting a window’s opacity after the window has been shown
	// causes it to flicker once on Windows.
	//
	// Deprecated: since version 3.8.
	//
	// This method is inherited from Window
	SetOpacity(opacity float64)
	// SetPosition sets a position constraint for this window. If the old or new
	// constraint is GTK_WIN_POS_CENTER_ALWAYS, this will also cause the window
	// to be repositioned to satisfy the new constraint.
	//
	// This method is inherited from Window
	SetPosition(position WindowPosition)
	// SetResizable sets whether the user can resize a window. Windows are user
	// resizable by default.
	//
	// This method is inherited from Window
	SetResizable(resizable bool)
	// SetRole: this function is only useful on X11, not with other GTK+
	// targets.
	//
	// In combination with the window title, the window role allows a [window
	// manager][gtk-X11-arch] to identify "the same" window when an application
	// is restarted. So for example you might set the “toolbox” role on your
	// app’s toolbox window, so that when the user restarts their session, the
	// window manager can put the toolbox back in the same place.
	//
	// If a window already has a unique title, you don’t need to set the role,
	// since the WM can use the title to identify the window when restoring the
	// session.
	//
	// This method is inherited from Window
	SetRole(role string)
	// SetScreen sets the Screen where the @window is displayed; if the window
	// is already mapped, it will be unmapped, and then remapped on the new
	// screen.
	//
	// This method is inherited from Window
	SetScreen(screen gdk.Screen)
	// SetSkipPagerHint windows may set a hint asking the desktop environment
	// not to display the window in the pager. This function sets this hint. (A
	// "pager" is any desktop navigation tool such as a workspace switcher that
	// displays a thumbnail representation of the windows on the screen.)
	//
	// This method is inherited from Window
	SetSkipPagerHint(setting bool)
	// SetSkipTaskbarHint windows may set a hint asking the desktop environment
	// not to display the window in the task bar. This function sets this hint.
	//
	// This method is inherited from Window
	SetSkipTaskbarHint(setting bool)
	// SetStartupID: startup notification identifiers are used by desktop
	// environment to track application startup, to provide user feedback and
	// other features. This function changes the corresponding property on the
	// underlying GdkWindow. Normally, startup identifier is managed
	// automatically and you should only use this function in special cases like
	// transferring focus from other processes. You should use this function
	// before calling gtk_window_present() or any equivalent function generating
	// a window map event.
	//
	// This function is only useful on X11, not with other GTK+ targets.
	//
	// This method is inherited from Window
	SetStartupID(startupId string)
	// SetTitle sets the title of the Window. The title of a window will be
	// displayed in its title bar; on the X Window System, the title bar is
	// rendered by the [window manager][gtk-X11-arch], so exactly how the title
	// appears to users may vary according to a user’s exact configuration. The
	// title should help a user distinguish this window from other windows they
	// may have open. A good title might include the application name and
	// current document filename, for example.
	//
	// This method is inherited from Window
	SetTitle(title string)
	// SetTitlebar sets a custom titlebar for @window.
	//
	// A typical widget used here is HeaderBar, as it provides various features
	// expected of a titlebar while allowing the addition of child widgets to
	// it.
	//
	// If you set a custom titlebar, GTK+ will do its best to convince the
	// window manager not to put its own titlebar on the window. Depending on
	// the system, this function may not work for a window that is already
	// visible, so you set the titlebar before calling gtk_widget_show().
	//
	// This method is inherited from Window
	SetTitlebar(titlebar Widget)
	// SetTransientFor: dialog windows should be set transient for the main
	// application window they were spawned from. This allows [window
	// managers][gtk-X11-arch] to e.g. keep the dialog on top of the main
	// window, or center the dialog over the main window.
	// gtk_dialog_new_with_buttons() and other convenience functions in GTK+
	// will sometimes call gtk_window_set_transient_for() on your behalf.
	//
	// Passing nil for @parent unsets the current transient window.
	//
	// On Wayland, this function can also be used to attach a new K_WINDOW_POPUP
	// to a K_WINDOW_TOPLEVEL parent already mapped on screen so that the
	// K_WINDOW_POPUP will be created as a subsurface-based window
	// K_WINDOW_SUBSURFACE which can be positioned at will relatively to the
	// K_WINDOW_TOPLEVEL surface.
	//
	// On Windows, this function puts the child window on top of the parent,
	// much as the window manager would have done on X.
	//
	// This method is inherited from Window
	SetTransientFor(parent Window)
	// SetTypeHint: by setting the type hint for the window, you allow the
	// window manager to decorate and handle the window in a way which is
	// suitable to the function of the window in your application.
	//
	// This function should be called before the window becomes visible.
	//
	// gtk_dialog_new_with_buttons() and other convenience functions in GTK+
	// will sometimes call gtk_window_set_type_hint() on your behalf.
	//
	// This method is inherited from Window
	SetTypeHint(hint gdk.WindowTypeHint)
	// SetUrgencyHint windows may set a hint asking the desktop environment to
	// draw the users attention to the window. This function sets this hint.
	//
	// This method is inherited from Window
	SetUrgencyHint(setting bool)
	// SetWmclass: don’t use this function. It sets the X Window System “class”
	// and “name” hints for a window. According to the ICCCM, you should always
	// set these to the same value for all windows in an application, and GTK+
	// sets them to that value by default, so calling this function is sort of
	// pointless. However, you may want to call gtk_window_set_role() on each
	// window in your application, for the benefit of the session manager.
	// Setting the role allows the window manager to restore window positions
	// when loading a saved session.
	//
	// Deprecated: since version 3.22.
	//
	// This method is inherited from Window
	SetWmclass(wmclassName string, wmclassClass string)
	// Stick asks to stick @window, which means that it will appear on all user
	// desktops. Note that you shouldn’t assume the window is definitely stuck
	// afterward, because other entities (e.g. the user or [window
	// manager][gtk-X11-arch] could unstick it again, and some window managers
	// do not support sticking windows. But normally the window will end up
	// stuck. Just don't write code that crashes if not.
	//
	// It’s permitted to call this function before showing a window.
	//
	// You can track stickiness via the “window-state-event” signal on Widget.
	//
	// This method is inherited from Window
	Stick()
	// Unfullscreen asks to toggle off the fullscreen state for @window. Note
	// that you shouldn’t assume the window is definitely not full screen
	// afterward, because other entities (e.g. the user or [window
	// manager][gtk-X11-arch]) could fullscreen it again, and not all window
	// managers honor requests to unfullscreen windows. But normally the window
	// will end up restored to its normal state. Just don’t write code that
	// crashes if not.
	//
	// You can track the fullscreen state via the “window-state-event” signal on
	// Widget.
	//
	// This method is inherited from Window
	Unfullscreen()
	// Unmaximize asks to unmaximize @window. Note that you shouldn’t assume the
	// window is definitely unmaximized afterward, because other entities (e.g.
	// the user or [window manager][gtk-X11-arch]) could maximize it again, and
	// not all window managers honor requests to unmaximize. But normally the
	// window will end up unmaximized. Just don’t write code that crashes if
	// not.
	//
	// You can track maximization via the “window-state-event” signal on Widget.
	//
	// This method is inherited from Window
	Unmaximize()
	// Unstick asks to unstick @window, which means that it will appear on only
	// one of the user’s desktops. Note that you shouldn’t assume the window is
	// definitely unstuck afterward, because other entities (e.g. the user or
	// [window manager][gtk-X11-arch]) could stick it again. But normally the
	// window will end up stuck. Just don’t write code that crashes if not.
	//
	// You can track stickiness via the “window-state-event” signal on Widget.
	//
	// This method is inherited from Window
	Unstick()
	// GetChild gets the child of the Bin, or nil if the bin contains no child
	// widget. The returned widget does not have a reference added, so you do
	// not need to unref it.
	//
	// This method is inherited from Bin
	GetChild() Widget
	// Add adds @widget to @container. Typically used for simple containers such
	// as Window, Frame, or Button; for more complicated layout containers such
	// as Box or Grid, this function will pick default packing parameters that
	// may not be correct. So consider functions such as gtk_box_pack_start()
	// and gtk_grid_attach() as an alternative to gtk_container_add() in those
	// cases. A widget may be added to only one container at a time; you can’t
	// place the same widget inside two different containers.
	//
	// Note that some containers, such as ScrolledWindow or ListBox, may add
	// intermediate children between the added widget and the container.
	//
	// This method is inherited from Container
	Add(widget Widget)
	// CheckResize: this method is inherited from Container
	CheckResize()
	// ChildGetProperty gets the value of a child property for @child and
	// @container.
	//
	// This method is inherited from Container
	ChildGetProperty(child Widget, propertyName string, value externglib.Value)
	// ChildNotify emits a Widget::child-notify signal for the [child
	// property][child-properties] @child_property on the child.
	//
	// This is an analogue of g_object_notify() for child properties.
	//
	// Also see gtk_widget_child_notify().
	//
	// This method is inherited from Container
	ChildNotify(child Widget, childProperty string)
	// ChildSetProperty sets a child property for @child and @container.
	//
	// This method is inherited from Container
	ChildSetProperty(child Widget, propertyName string, value externglib.Value)
	// ChildType returns the type of the children supported by the container.
	//
	// Note that this may return G_TYPE_NONE to indicate that no more children
	// can be added, e.g. for a Paned which already has two children.
	//
	// This method is inherited from Container
	ChildType() externglib.Type
	// Forall invokes @callback on each direct child of @container, including
	// children that are considered “internal” (implementation details of the
	// container). “Internal” children generally weren’t added by the user of
	// the container, but were added by the container implementation itself.
	//
	// Most applications should use gtk_container_foreach(), rather than
	// gtk_container_forall().
	//
	// This method is inherited from Container
	Forall(callback Callback)
	// Foreach invokes @callback on each non-internal child of @container. See
	// gtk_container_forall() for details on what constitutes an “internal”
	// child. For all practical purposes, this function should iterate over
	// precisely those child widgets that were added to the container by the
	// application with explicit add() calls.
	//
	// It is permissible to remove the child from the @callback handler.
	//
	// Most applications should use gtk_container_foreach(), rather than
	// gtk_container_forall().
	//
	// This method is inherited from Container
	Foreach(callback Callback)
	// GetBorderWidth retrieves the border width of the container. See
	// gtk_container_set_border_width().
	//
	// This method is inherited from Container
	GetBorderWidth() uint
	// GetFocusChild returns the current focus child widget inside @container.
	// This is not the currently focused widget. That can be obtained by calling
	// gtk_window_get_focus().
	//
	// This method is inherited from Container
	GetFocusChild() Widget
	// GetFocusHAdjustment retrieves the horizontal focus adjustment for the
	// container. See gtk_container_set_focus_hadjustment ().
	//
	// This method is inherited from Container
	GetFocusHAdjustment() Adjustment
	// GetFocusVAdjustment retrieves the vertical focus adjustment for the
	// container. See gtk_container_set_focus_vadjustment().
	//
	// This method is inherited from Container
	GetFocusVAdjustment() Adjustment
	// GetPathForChild returns a newly created widget path representing all the
	// widget hierarchy from the toplevel down to and including @child.
	//
	// This method is inherited from Container
	GetPathForChild(child Widget) *WidgetPath
	// GetResizeMode returns the resize mode for the container. See
	// gtk_container_set_resize_mode ().
	//
	// Deprecated: since version 3.12.
	//
	// This method is inherited from Container
	GetResizeMode() ResizeMode
	// PropagateDraw: when a container receives a call to the draw function, it
	// must send synthetic Widget::draw calls to all children that don’t have
	// their own Windows. This function provides a convenient way of doing this.
	// A container, when it receives a call to its Widget::draw function, calls
	// gtk_container_propagate_draw() once for each child, passing in the @cr
	// the container received.
	//
	// gtk_container_propagate_draw() takes care of translating the origin of
	// @cr, and deciding whether the draw needs to be sent to the child. It is a
	// convenient and optimized way of getting the same effect as calling
	// gtk_widget_draw() on the child directly.
	//
	// In most cases, a container can simply either inherit the Widget::draw
	// implementation from Container, or do some drawing and then chain to the
	// ::draw implementation from Container.
	//
	// This method is inherited from Container
	PropagateDraw(child Widget, cr *cairo.Context)
	// Remove removes @widget from @container. @widget must be inside
	// @container. Note that @container will own a reference to @widget, and
	// that this may be the last reference held; so removing a widget from its
	// container can destroy that widget. If you want to use @widget again, you
	// need to add a reference to it before removing it from a container, using
	// g_object_ref(). If you don’t want to use @widget again it’s usually more
	// efficient to simply destroy it directly using gtk_widget_destroy() since
	// this will remove it from the container and help break any circular
	// reference count cycles.
	//
	// This method is inherited from Container
	Remove(widget Widget)
	// ResizeChildren: deprecated: since version 3.10.
	//
	// This method is inherited from Container
	ResizeChildren()
	// SetBorderWidth sets the border width of the container.
	//
	// The border width of a container is the amount of space to leave around
	// the outside of the container. The only exception to this is Window;
	// because toplevel windows can’t leave space outside, they leave the space
	// inside. The border is added on all sides of the container. To add space
	// to only one side, use a specific Widget:margin property on the child
	// widget, for example Widget:margin-top.
	//
	// This method is inherited from Container
	SetBorderWidth(borderWidth uint)
	// SetFocusChild: sets, or unsets if @child is nil, the focused child of
	// @container.
	//
	// This function emits the GtkContainer::set_focus_child signal of
	// @container. Implementations of Container can override the default
	// behaviour by overriding the class closure of this signal.
	//
	// This is function is mostly meant to be used by widgets. Applications can
	// use gtk_widget_grab_focus() to manually set the focus to a specific
	// widget.
	//
	// This method is inherited from Container
	SetFocusChild(child Widget)
	// SetFocusHAdjustment hooks up an adjustment to focus handling in a
	// container, so when a child of the container is focused, the adjustment is
	// scrolled to show that widget. This function sets the horizontal
	// alignment. See gtk_scrolled_window_get_hadjustment() for a typical way of
	// obtaining the adjustment and gtk_container_set_focus_vadjustment() for
	// setting the vertical adjustment.
	//
	// The adjustments have to be in pixel units and in the same coordinate
	// system as the allocation for immediate children of the container.
	//
	// This method is inherited from Container
	SetFocusHAdjustment(adjustment Adjustment)
	// SetFocusVAdjustment hooks up an adjustment to focus handling in a
	// container, so when a child of the container is focused, the adjustment is
	// scrolled to show that widget. This function sets the vertical alignment.
	// See gtk_scrolled_window_get_vadjustment() for a typical way of obtaining
	// the adjustment and gtk_container_set_focus_hadjustment() for setting the
	// horizontal adjustment.
	//
	// The adjustments have to be in pixel units and in the same coordinate
	// system as the allocation for immediate children of the container.
	//
	// This method is inherited from Container
	SetFocusVAdjustment(adjustment Adjustment)
	// SetReallocateRedraws sets the @reallocate_redraws flag of the container
	// to the given value.
	//
	// Containers requesting reallocation redraws get automatically redrawn if
	// any of their children changed allocation.
	//
	// Deprecated: since version 3.14.
	//
	// This method is inherited from Container
	SetReallocateRedraws(needsRedraws bool)
	// SetResizeMode sets the resize mode for the container.
	//
	// The resize mode of a container determines whether a resize request will
	// be passed to the container’s parent, queued for later execution or
	// executed immediately.
	//
	// Deprecated: since version 3.12.
	//
	// This method is inherited from Container
	SetResizeMode(resizeMode ResizeMode)
	// UnsetFocusChain removes a focus chain explicitly set with
	// gtk_container_set_focus_chain().
	//
	// Deprecated: since version 3.24.
	//
	// This method is inherited from Container
	UnsetFocusChain()
	// Activate: for widgets that can be “activated” (buttons, menu items, etc.)
	// this function activates them. Activation is what happens when you press
	// Enter on a widget during key navigation. If @widget isn't activatable,
	// the function returns false.
	//
	// This method is inherited from Widget
	Activate() bool
	// AddAccelerator installs an accelerator for this @widget in @accel_group
	// that causes @accel_signal to be emitted if the accelerator is activated.
	// The @accel_group needs to be added to the widget’s toplevel via
	// gtk_window_add_accel_group(), and the signal must be of type
	// G_SIGNAL_ACTION. Accelerators added through this function are not user
	// changeable during runtime. If you want to support accelerators that can
	// be changed by the user, use gtk_accel_map_add_entry() and
	// gtk_widget_set_accel_path() or gtk_menu_item_set_accel_path() instead.
	//
	// This method is inherited from Widget
	AddAccelerator(accelSignal string, accelGroup AccelGroup, accelKey uint, accelMods gdk.ModifierType, accelFlags AccelFlags)
	// AddDeviceEvents adds the device events in the bitfield @events to the
	// event mask for @widget. See gtk_widget_set_device_events() for details.
	//
	// This method is inherited from Widget
	AddDeviceEvents(device gdk.Device, events gdk.EventMask)
	// AddEvents adds the events in the bitfield @events to the event mask for
	// @widget. See gtk_widget_set_events() and the [input handling
	// overview][event-masks] for details.
	//
	// This method is inherited from Widget
	AddEvents(events int)
	// AddMnemonicLabel adds a widget to the list of mnemonic labels for this
	// widget. (See gtk_widget_list_mnemonic_labels()). Note the list of
	// mnemonic labels for the widget is cleared when the widget is destroyed,
	// so the caller must make sure to update its internal state at this point
	// as well, by using a connection to the Widget::destroy signal or a weak
	// notifier.
	//
	// This method is inherited from Widget
	AddMnemonicLabel(label Widget)
	// CanActivateAccel determines whether an accelerator that activates the
	// signal identified by @signal_id can currently be activated. This is done
	// by emitting the Widget::can-activate-accel signal on @widget; if the
	// signal isn’t overridden by a handler or in a derived widget, then the
	// default check is that the widget must be sensitive, and the widget and
	// all its ancestors mapped.
	//
	// This method is inherited from Widget
	CanActivateAccel(signalId uint) bool
	// ChildFocus: this function is used by custom widget implementations; if
	// you're writing an app, you’d use gtk_widget_grab_focus() to move the
	// focus to a particular widget, and gtk_container_set_focus_chain() to
	// change the focus tab order. So you may want to investigate those
	// functions instead.
	//
	// gtk_widget_child_focus() is called by containers as the user moves around
	// the window using keyboard shortcuts. @direction indicates what kind of
	// motion is taking place (up, down, left, right, tab forward, tab
	// backward). gtk_widget_child_focus() emits the Widget::focus signal;
	// widgets override the default handler for this signal in order to
	// implement appropriate focus behavior.
	//
	// The default ::focus handler for a widget should return true if moving in
	// @direction left the focus on a focusable location inside that widget, and
	// false if moving in @direction moved the focus outside the widget. If
	// returning true, widgets normally call gtk_widget_grab_focus() to place
	// the focus accordingly; if returning false, they don’t modify the current
	// focus location.
	//
	// This method is inherited from Widget
	ChildFocus(direction DirectionType) bool
	// ChildNotify emits a Widget::child-notify signal for the [child
	// property][child-properties] @child_property on @widget.
	//
	// This is the analogue of g_object_notify() for child properties.
	//
	// Also see gtk_container_child_notify().
	//
	// This method is inherited from Widget
	ChildNotify(childProperty string)
	// ClassPath: same as gtk_widget_path(), but always uses the name of a
	// widget’s type, never uses a custom name set with gtk_widget_set_name().
	//
	// Deprecated: since version 3.0.
	//
	// This method is inherited from Widget
	ClassPath() (pathLength uint, path string, pathReversed string)
	// ComputeExpand computes whether a container should give this widget extra
	// space when possible. Containers should check this, rather than looking at
	// gtk_widget_get_hexpand() or gtk_widget_get_vexpand().
	//
	// This function already checks whether the widget is visible, so visibility
	// does not need to be checked separately. Non-visible widgets are not
	// expanded.
	//
	// The computed expand value uses either the expand setting explicitly set
	// on the widget itself, or, if none has been explicitly set, the widget may
	// expand if some of its children do.
	//
	// This method is inherited from Widget
	ComputeExpand(orientation Orientation) bool
	// CreatePangoContext creates a new Context with the appropriate font map,
	// font options, font description, and base direction for drawing text for
	// this widget. See also gtk_widget_get_pango_context().
	//
	// This method is inherited from Widget
	CreatePangoContext() pango.Context
	// CreatePangoLayout creates a new Layout with the appropriate font map,
	// font description, and base direction for drawing text for this widget.
	//
	// If you keep a Layout created in this way around, you need to re-create it
	// when the widget Context is replaced. This can be tracked by using the
	// Widget::screen-changed signal on the widget.
	//
	// This method is inherited from Widget
	CreatePangoLayout(text string) pango.Layout
	// Destroy destroys a widget.
	//
	// When a widget is destroyed all references it holds on other objects will
	// be released:
	//
	//    - if the widget is inside a container, it will be removed from its
	//    parent
	//    - if the widget is a container, all its children will be destroyed,
	//    recursively
	//    - if the widget is a top level, it will be removed from the list
	//    of top level widgets that GTK+ maintains internally
	//
	// It's expected that all references held on the widget will also be
	// released; you should connect to the Widget::destroy signal if you hold a
	// reference to @widget and you wish to remove it when this function is
	// called. It is not necessary to do so if you are implementing a Container,
	// as you'll be able to use the ContainerClass.remove() virtual function for
	// that.
	//
	// It's important to notice that gtk_widget_destroy() will only cause the
	// @widget to be finalized if no additional references, acquired using
	// g_object_ref(), are held on it. In case additional references are in
	// place, the @widget will be in an "inert" state after calling this
	// function; @widget will still point to valid memory, allowing you to
	// release the references you hold, but you may not query the widget's own
	// state.
	//
	// You should typically call this function on top level widgets, and rarely
	// on child widgets.
	//
	// See also: gtk_container_remove()
	//
	// This method is inherited from Widget
	Destroy()
	// DeviceIsShadowed returns true if @device has been shadowed by a GTK+
	// device grab on another widget, so it would stop sending events to
	// @widget. This may be used in the Widget::grab-notify signal to check for
	// specific devices. See gtk_device_grab_add().
	//
	// This method is inherited from Widget
	DeviceIsShadowed(device gdk.Device) bool
	// DragCheckThreshold checks to see if a mouse drag starting at (@start_x,
	// @start_y) and ending at (@current_x, @current_y) has passed the GTK+ drag
	// threshold, and thus should trigger the beginning of a drag-and-drop
	// operation.
	//
	// This method is inherited from Widget
	DragCheckThreshold(startX int, startY int, currentX int, currentY int) bool
	// DragDestAddImageTargets: add the image targets supported by SelectionData
	// to the target list of the drag destination. The targets are added with
	// @info = 0. If you need another value, use
	// gtk_target_list_add_image_targets() and gtk_drag_dest_set_target_list().
	//
	// This method is inherited from Widget
	DragDestAddImageTargets()
	// DragDestAddTextTargets: add the text targets supported by SelectionData
	// to the target list of the drag destination. The targets are added with
	// @info = 0. If you need another value, use
	// gtk_target_list_add_text_targets() and gtk_drag_dest_set_target_list().
	//
	// This method is inherited from Widget
	DragDestAddTextTargets()
	// DragDestAddURITargets: add the URI targets supported by SelectionData to
	// the target list of the drag destination. The targets are added with @info
	// = 0. If you need another value, use gtk_target_list_add_uri_targets() and
	// gtk_drag_dest_set_target_list().
	//
	// This method is inherited from Widget
	DragDestAddURITargets()
	// DragDestGetTargetList returns the list of targets this widget can accept
	// from drag-and-drop.
	//
	// This method is inherited from Widget
	DragDestGetTargetList() *TargetList
	// DragDestGetTrackMotion returns whether the widget has been configured to
	// always emit Widget::drag-motion signals.
	//
	// This method is inherited from Widget
	DragDestGetTrackMotion() bool
	// DragDestSet sets a widget as a potential drop destination, and adds
	// default behaviors.
	//
	// The default behaviors listed in @flags have an effect similar to
	// installing default handlers for the widget’s drag-and-drop signals
	// (Widget::drag-motion, Widget::drag-drop, ...). They all exist for
	// convenience. When passing K_DEST_DEFAULT_ALL for instance it is
	// sufficient to connect to the widget’s Widget::drag-data-received signal
	// to get primitive, but consistent drag-and-drop support.
	//
	// Things become more complicated when you try to preview the dragged data,
	// as described in the documentation for Widget::drag-motion. The default
	// behaviors described by @flags make some assumptions, that can conflict
	// with your own signal handlers. For instance K_DEST_DEFAULT_DROP causes
	// invokations of gdk_drag_status() in the context of Widget::drag-motion,
	// and invokations of gtk_drag_finish() in Widget::drag-data-received.
	// Especially the later is dramatic, when your own Widget::drag-motion
	// handler calls gtk_drag_get_data() to inspect the dragged data.
	//
	// There’s no way to set a default action here, you can use the
	// Widget::drag-motion callback for that. Here’s an example which selects
	// the action to use depending on whether the control key is pressed or not:
	//
	//    static void
	//    drag_motion (GtkWidget *widget,
	//                 GdkDragContext *context,
	//                 gint x,
	//                 gint y,
	//                 guint time)
	//    {
	//      GdkModifierType mask;
	//
	//      gdk_window_get_pointer (gtk_widget_get_window (widget),
	//                              NULL, NULL, &mask);
	//      if (mask & GDK_CONTROL_MASK)
	//        gdk_drag_status (context, GDK_ACTION_COPY, time);
	//      else
	//        gdk_drag_status (context, GDK_ACTION_MOVE, time);
	//    }
	//
	// This method is inherited from Widget
	DragDestSet(flags DestDefaults, targets []TargetEntry, actions gdk.DragAction)
	// DragDestSetProxy sets this widget as a proxy for drops to another window.
	//
	// Deprecated: since version 3.22.
	//
	// This method is inherited from Widget
	DragDestSetProxy(proxyWindow gdk.Window, protocol gdk.DragProtocol, useCoordinates bool)
	// DragDestSetTargetList sets the target types that this widget can accept
	// from drag-and-drop. The widget must first be made into a drag destination
	// with gtk_drag_dest_set().
	//
	// This method is inherited from Widget
	DragDestSetTargetList(targetList *TargetList)
	// DragDestSetTrackMotion tells the widget to emit Widget::drag-motion and
	// Widget::drag-leave events regardless of the targets and the
	// GTK_DEST_DEFAULT_MOTION flag.
	//
	// This may be used when a widget wants to do generic actions regardless of
	// the targets that the source offers.
	//
	// This method is inherited from Widget
	DragDestSetTrackMotion(trackMotion bool)
	// DragDestUnset clears information about a drop destination set with
	// gtk_drag_dest_set(). The widget will no longer receive notification of
	// drags.
	//
	// This method is inherited from Widget
	DragDestUnset()
	// DragHighlight highlights a widget as a currently hovered drop target. To
	// end the highlight, call gtk_drag_unhighlight(). GTK+ calls this
	// automatically if GTK_DEST_DEFAULT_HIGHLIGHT is set.
	//
	// This method is inherited from Widget
	DragHighlight()
	// DragSourceAddImageTargets: add the writable image targets supported by
	// SelectionData to the target list of the drag source. The targets are
	// added with @info = 0. If you need another value, use
	// gtk_target_list_add_image_targets() and
	// gtk_drag_source_set_target_list().
	//
	// This method is inherited from Widget
	DragSourceAddImageTargets()
	// DragSourceAddTextTargets: add the text targets supported by SelectionData
	// to the target list of the drag source. The targets are added with @info =
	// 0. If you need another value, use gtk_target_list_add_text_targets() and
	// gtk_drag_source_set_target_list().
	//
	// This method is inherited from Widget
	DragSourceAddTextTargets()
	// DragSourceAddURITargets: add the URI targets supported by SelectionData
	// to the target list of the drag source. The targets are added with @info =
	// 0. If you need another value, use gtk_target_list_add_uri_targets() and
	// gtk_drag_source_set_target_list().
	//
	// This method is inherited from Widget
	DragSourceAddURITargets()
	// DragSourceGetTargetList gets the list of targets this widget can provide
	// for drag-and-drop.
	//
	// This method is inherited from Widget
	DragSourceGetTargetList() *TargetList
	// DragSourceSet sets up a widget so that GTK+ will start a drag operation
	// when the user clicks and drags on the widget. The widget must have a
	// window.
	//
	// This method is inherited from Widget
	DragSourceSet(startButtonMask gdk.ModifierType, targets []TargetEntry, actions gdk.DragAction)
	// DragSourceSetIconName sets the icon that will be used for drags from a
	// particular source to a themed icon. See the docs for IconTheme for more
	// details.
	//
	// This method is inherited from Widget
	DragSourceSetIconName(iconName string)
	// DragSourceSetIconPixbuf sets the icon that will be used for drags from a
	// particular widget from a Pixbuf. GTK+ retains a reference for @pixbuf and
	// will release it when it is no longer needed.
	//
	// This method is inherited from Widget
	DragSourceSetIconPixbuf(pixbuf gdkpixbuf.Pixbuf)
	// DragSourceSetIconStock sets the icon that will be used for drags from a
	// particular source to a stock icon.
	//
	// Deprecated: since version 3.10.
	//
	// This method is inherited from Widget
	DragSourceSetIconStock(stockId string)
	// DragSourceSetTargetList changes the target types that this widget offers
	// for drag-and-drop. The widget must first be made into a drag source with
	// gtk_drag_source_set().
	//
	// This method is inherited from Widget
	DragSourceSetTargetList(targetList *TargetList)
	// DragSourceUnset undoes the effects of gtk_drag_source_set().
	//
	// This method is inherited from Widget
	DragSourceUnset()
	// DragUnhighlight removes a highlight set by gtk_drag_highlight() from a
	// widget.
	//
	// This method is inherited from Widget
	DragUnhighlight()
	// Draw draws @widget to @cr. The top left corner of the widget will be
	// drawn to the currently set origin point of @cr.
	//
	// You should pass a cairo context as @cr argument that is in an original
	// state. Otherwise the resulting drawing is undefined. For example changing
	// the operator using cairo_set_operator() or the line width using
	// cairo_set_line_width() might have unwanted side effects. You may however
	// change the context’s transform matrix - like with cairo_scale(),
	// cairo_translate() or cairo_set_matrix() and clip region with cairo_clip()
	// prior to calling this function. Also, it is fine to modify the context
	// with cairo_save() and cairo_push_group() prior to calling this function.
	//
	// Note that special-purpose widgets may contain special code for rendering
	// to the screen and might appear differently on screen and when rendered
	// using gtk_widget_draw().
	//
	// This method is inherited from Widget
	Draw(cr *cairo.Context)
	// EnsureStyle ensures that @widget has a style (@widget->style).
	//
	// Not a very useful function; most of the time, if you want the style, the
	// widget is realized, and realized widgets are guaranteed to have a style
	// already.
	//
	// Deprecated: since version 3.0.
	//
	// This method is inherited from Widget
	EnsureStyle()
	// ErrorBell notifies the user about an input-related error on this widget.
	// If the Settings:gtk-error-bell setting is true, it calls
	// gdk_window_beep(), otherwise it does nothing.
	//
	// Note that the effect of gdk_window_beep() can be configured in many ways,
	// depending on the windowing backend and the desktop environment or window
	// manager that is used.
	//
	// This method is inherited from Widget
	ErrorBell()
	// FreezeChildNotify stops emission of Widget::child-notify signals on
	// @widget. The signals are queued until gtk_widget_thaw_child_notify() is
	// called on @widget.
	//
	// This is the analogue of g_object_freeze_notify() for child properties.
	//
	// This method is inherited from Widget
	FreezeChildNotify()
	// GetAccessible returns the accessible object that describes the widget to
	// an assistive technology.
	//
	// If accessibility support is not available, this Object instance may be a
	// no-op. Likewise, if no class-specific Object implementation is available
	// for the widget instance in question, it will inherit an Object
	// implementation from the first ancestor class for which such an
	// implementation is defined.
	//
	// The documentation of the ATK (http://developer.gnome.org/atk/stable/)
	// library contains more information about accessible objects and their
	// uses.
	//
	// This method is inherited from Widget
	GetAccessible() atk.Object
	// GetActionGroup retrieves the Group that was registered using @prefix. The
	// resulting Group may have been registered to @widget or any Widget in its
	// ancestry.
	//
	// If no action group was found matching @prefix, then nil is returned.
	//
	// This method is inherited from Widget
	GetActionGroup(prefix string) gio.ActionGroup
	// GetAllocatedBaseline returns the baseline that has currently been
	// allocated to @widget. This function is intended to be used when
	// implementing handlers for the Widget::draw function, and when allocating
	// child widgets in Widget::size_allocate.
	//
	// This method is inherited from Widget
	GetAllocatedBaseline() int
	// GetAllocatedHeight returns the height that has currently been allocated
	// to @widget. This function is intended to be used when implementing
	// handlers for the Widget::draw function.
	//
	// This method is inherited from Widget
	GetAllocatedHeight() int
	// GetAllocatedWidth returns the width that has currently been allocated to
	// @widget. This function is intended to be used when implementing handlers
	// for the Widget::draw function.
	//
	// This method is inherited from Widget
	GetAllocatedWidth() int
	// GetAncestor gets the first ancestor of @widget with type @widget_type.
	// For example, `gtk_widget_get_ancestor (widget, GTK_TYPE_BOX)` gets the
	// first Box that’s an ancestor of @widget. No reference will be added to
	// the returned widget; it should not be unreferenced. See note about
	// checking for a toplevel Window in the docs for gtk_widget_get_toplevel().
	//
	// Note that unlike gtk_widget_is_ancestor(), gtk_widget_get_ancestor()
	// considers @widget to be an ancestor of itself.
	//
	// This method is inherited from Widget
	GetAncestor(widgetType externglib.Type) Widget
	// GetAppPaintable determines whether the application intends to draw on the
	// widget in an Widget::draw handler.
	//
	// See gtk_widget_set_app_paintable()
	//
	// This method is inherited from Widget
	GetAppPaintable() bool
	// GetCanDefault determines whether @widget can be a default widget. See
	// gtk_widget_set_can_default().
	//
	// This method is inherited from Widget
	GetCanDefault() bool
	// GetCanFocus determines whether @widget can own the input focus. See
	// gtk_widget_set_can_focus().
	//
	// This method is inherited from Widget
	GetCanFocus() bool
	// GetChildRequisition: this function is only for use in widget
	// implementations. Obtains @widget->requisition, unless someone has forced
	// a particular geometry on the widget (e.g. with
	// gtk_widget_set_size_request()), in which case it returns that geometry
	// instead of the widget's requisition.
	//
	// This function differs from gtk_widget_size_request() in that it retrieves
	// the last size request value from @widget->requisition, while
	// gtk_widget_size_request() actually calls the "size_request" method on
	// @widget to compute the size request and fill in @widget->requisition, and
	// only then returns @widget->requisition.
	//
	// Because this function does not call the “size_request” method, it can
	// only be used when you know that @widget->requisition is up-to-date, that
	// is, gtk_widget_size_request() has been called since the last time a
	// resize was queued. In general, only container implementations have this
	// information; applications should use gtk_widget_size_request().
	//
	// Deprecated: since version 3.0.
	//
	// This method is inherited from Widget
	GetChildRequisition() Requisition
	// GetChildVisible gets the value set with gtk_widget_set_child_visible().
	// If you feel a need to use this function, your code probably needs
	// reorganization.
	//
	// This function is only useful for container implementations and never
	// should be called by an application.
	//
	// This method is inherited from Widget
	GetChildVisible() bool
	// GetCompositeName obtains the composite name of a widget.
	//
	// Deprecated: since version 3.10.
	//
	// This method is inherited from Widget
	GetCompositeName() string
	// GetDeviceEnabled returns whether @device can interact with @widget and
	// its children. See gtk_widget_set_device_enabled().
	//
	// This method is inherited from Widget
	GetDeviceEnabled(device gdk.Device) bool
	// GetDeviceEvents returns the events mask for the widget corresponding to
	// an specific device. These are the events that the widget will receive
	// when @device operates on it.
	//
	// This method is inherited from Widget
	GetDeviceEvents(device gdk.Device) gdk.EventMask
	// GetDirection gets the reading direction for a particular widget. See
	// gtk_widget_set_direction().
	//
	// This method is inherited from Widget
	GetDirection() TextDirection
	// GetDisplay: get the Display for the toplevel window associated with this
	// widget. This function can only be called after the widget has been added
	// to a widget hierarchy with a Window at the top.
	//
	// In general, you should only create display specific resources when a
	// widget has been realized, and you should free those resources when the
	// widget is unrealized.
	//
	// This method is inherited from Widget
	GetDisplay() gdk.Display
	// GetDoubleBuffered determines whether the widget is double buffered.
	//
	// See gtk_widget_set_double_buffered()
	//
	// This method is inherited from Widget
	GetDoubleBuffered() bool
	// GetEvents returns the event mask (see EventMask) for the widget. These
	// are the events that the widget will receive.
	//
	// Note: Internally, the widget event mask will be the logical OR of the
	// event mask set through gtk_widget_set_events() or
	// gtk_widget_add_events(), and the event mask necessary to cater for every
	// EventController created for the widget.
	//
	// This method is inherited from Widget
	GetEvents() int
	// GetFocusOnClick returns whether the widget should grab focus when it is
	// clicked with the mouse. See gtk_widget_set_focus_on_click().
	//
	// This method is inherited from Widget
	GetFocusOnClick() bool
	// GetFontMap gets the font map that has been set with
	// gtk_widget_set_font_map().
	//
	// This method is inherited from Widget
	GetFontMap() pango.FontMap
	// GetFontOptions returns the #cairo_font_options_t used for Pango
	// rendering. When not set, the defaults font options for the Screen will be
	// used.
	//
	// This method is inherited from Widget
	GetFontOptions() *cairo.FontOptions
	// GetFrameClock obtains the frame clock for a widget. The frame clock is a
	// global “ticker” that can be used to drive animations and repaints. The
	// most common reason to get the frame clock is to call
	// gdk_frame_clock_get_frame_time(), in order to get a time to use for
	// animating. For example you might record the start of the animation with
	// an initial value from gdk_frame_clock_get_frame_time(), and then update
	// the animation by calling gdk_frame_clock_get_frame_time() again during
	// each repaint.
	//
	// gdk_frame_clock_request_phase() will result in a new frame on the clock,
	// but won’t necessarily repaint any widgets. To repaint a widget, you have
	// to use gtk_widget_queue_draw() which invalidates the widget (thus
	// scheduling it to receive a draw on the next frame).
	// gtk_widget_queue_draw() will also end up requesting a frame on the
	// appropriate frame clock.
	//
	// A widget’s frame clock will not change while the widget is mapped.
	// Reparenting a widget (which implies a temporary unmap) can change the
	// widget’s frame clock.
	//
	// Unrealized widgets do not have a frame clock.
	//
	// This method is inherited from Widget
	GetFrameClock() gdk.FrameClock
	// GetHAlign gets the value of the Widget:halign property.
	//
	// For backwards compatibility reasons this method will never return
	// GTK_ALIGN_BASELINE, but instead it will convert it to GTK_ALIGN_FILL.
	// Baselines are not supported for horizontal alignment.
	//
	// This method is inherited from Widget
	GetHAlign() Align
	// GetHasTooltip returns the current value of the has-tooltip property. See
	// Widget:has-tooltip for more information.
	//
	// This method is inherited from Widget
	GetHasTooltip() bool
	// GetHasWindow determines whether @widget has a Window of its own. See
	// gtk_widget_set_has_window().
	//
	// This method is inherited from Widget
	GetHasWindow() bool
	// GetHExpand gets whether the widget would like any available extra
	// horizontal space. When a user resizes a Window, widgets with expand=TRUE
	// generally receive the extra space. For example, a list or scrollable area
	// or document in your window would often be set to expand.
	//
	// Containers should use gtk_widget_compute_expand() rather than this
	// function, to see whether a widget, or any of its children, has the expand
	// flag set. If any child of a widget wants to expand, the parent may ask to
	// expand also.
	//
	// This function only looks at the widget’s own hexpand flag, rather than
	// computing whether the entire widget tree rooted at this widget wants to
	// expand.
	//
	// This method is inherited from Widget
	GetHExpand() bool
	// GetHExpandSet gets whether gtk_widget_set_hexpand() has been used to
	// explicitly set the expand flag on this widget.
	//
	// If hexpand is set, then it overrides any computed expand value based on
	// child widgets. If hexpand is not set, then the expand value depends on
	// whether any children of the widget would like to expand.
	//
	// There are few reasons to use this function, but it’s here for
	// completeness and consistency.
	//
	// This method is inherited from Widget
	GetHExpandSet() bool
	// GetMapped: whether the widget is mapped.
	//
	// This method is inherited from Widget
	GetMapped() bool
	// GetMarginBottom gets the value of the Widget:margin-bottom property.
	//
	// This method is inherited from Widget
	GetMarginBottom() int
	// GetMarginEnd gets the value of the Widget:margin-end property.
	//
	// This method is inherited from Widget
	GetMarginEnd() int
	// GetMarginLeft gets the value of the Widget:margin-left property.
	//
	// Deprecated: since version 3.12.
	//
	// This method is inherited from Widget
	GetMarginLeft() int
	// GetMarginRight gets the value of the Widget:margin-right property.
	//
	// Deprecated: since version 3.12.
	//
	// This method is inherited from Widget
	GetMarginRight() int
	// GetMarginStart gets the value of the Widget:margin-start property.
	//
	// This method is inherited from Widget
	GetMarginStart() int
	// GetMarginTop gets the value of the Widget:margin-top property.
	//
	// This method is inherited from Widget
	GetMarginTop() int
	// GetModifierMask returns the modifier mask the @widget’s windowing system
	// backend uses for a particular purpose.
	//
	// See gdk_keymap_get_modifier_mask().
	//
	// This method is inherited from Widget
	GetModifierMask(intent gdk.ModifierIntent) gdk.ModifierType
	// GetModifierStyle returns the current modifier style for the widget. (As
	// set by gtk_widget_modify_style().) If no style has previously set, a new
	// RcStyle will be created with all values unset, and set as the modifier
	// style for the widget. If you make changes to this rc style, you must call
	// gtk_widget_modify_style(), passing in the returned rc style, to make sure
	// that your changes take effect.
	//
	// Caution: passing the style back to gtk_widget_modify_style() will
	// normally end up destroying it, because gtk_widget_modify_style() copies
	// the passed-in style and sets the copy as the new modifier style, thus
	// dropping any reference to the old modifier style. Add a reference to the
	// modifier style if you want to keep it alive.
	//
	// Deprecated: since version 3.0.
	//
	// This method is inherited from Widget
	GetModifierStyle() RCStyle
	// GetName retrieves the name of a widget. See gtk_widget_set_name() for the
	// significance of widget names.
	//
	// This method is inherited from Widget
	GetName() string
	// GetNoShowAll returns the current value of the Widget:no-show-all
	// property, which determines whether calls to gtk_widget_show_all() will
	// affect this widget.
	//
	// This method is inherited from Widget
	GetNoShowAll() bool
	// GetOpacity fetches the requested opacity for this widget. See
	// gtk_widget_set_opacity().
	//
	// This method is inherited from Widget
	GetOpacity() float64
	// GetPangoContext gets a Context with the appropriate font map, font
	// description, and base direction for this widget. Unlike the context
	// returned by gtk_widget_create_pango_context(), this context is owned by
	// the widget (it can be used until the screen for the widget changes or the
	// widget is removed from its toplevel), and will be updated to match any
	// changes to the widget’s attributes. This can be tracked by using the
	// Widget::screen-changed signal on the widget.
	//
	// This method is inherited from Widget
	GetPangoContext() pango.Context
	// GetParent returns the parent container of @widget.
	//
	// This method is inherited from Widget
	GetParent() Widget
	// GetParentWindow gets @widget’s parent window, or nil if it does not have
	// one.
	//
	// This method is inherited from Widget
	GetParentWindow() gdk.Window
	// GetPath returns the WidgetPath representing @widget, if the widget is not
	// connected to a toplevel widget, a partial path will be created.
	//
	// This method is inherited from Widget
	GetPath() *WidgetPath
	// GetPointer obtains the location of the mouse pointer in widget
	// coordinates. Widget coordinates are a bit odd; for historical reasons,
	// they are defined as @widget->window coordinates for widgets that return
	// true for gtk_widget_get_has_window(); and are relative to
	// @widget->allocation.x, @widget->allocation.y otherwise.
	//
	// Deprecated: since version 3.4.
	//
	// This method is inherited from Widget
	GetPointer() (x int, y int)
	// GetPreferredHeight retrieves a widget’s initial minimum and natural
	// height.
	//
	// This call is specific to width-for-height requests.
	//
	// The returned request will be modified by the
	// GtkWidgetClass::adjust_size_request virtual method and by any SizeGroups
	// that have been applied. That is, the returned request is the one that
	// should be used for layout, not necessarily the one returned by the widget
	// itself.
	//
	// This method is inherited from Widget
	GetPreferredHeight() (minimumHeight int, naturalHeight int)
	// GetPreferredHeightAndBaselineForWidth retrieves a widget’s minimum and
	// natural height and the corresponding baselines if it would be given the
	// specified @width, or the default height if @width is -1. The baselines
	// may be -1 which means that no baseline is requested for this widget.
	//
	// The returned request will be modified by the
	// GtkWidgetClass::adjust_size_request and
	// GtkWidgetClass::adjust_baseline_request virtual methods and by any
	// SizeGroups that have been applied. That is, the returned request is the
	// one that should be used for layout, not necessarily the one returned by
	// the widget itself.
	//
	// This method is inherited from Widget
	GetPreferredHeightAndBaselineForWidth(width int) (minimumHeight int, naturalHeight int, minimumBaseline int, naturalBaseline int)
	// GetPreferredHeightForWidth retrieves a widget’s minimum and natural
	// height if it would be given the specified @width.
	//
	// The returned request will be modified by the
	// GtkWidgetClass::adjust_size_request virtual method and by any SizeGroups
	// that have been applied. That is, the returned request is the one that
	// should be used for layout, not necessarily the one returned by the widget
	// itself.
	//
	// This method is inherited from Widget
	GetPreferredHeightForWidth(width int) (minimumHeight int, naturalHeight int)
	// GetPreferredSize retrieves the minimum and natural size of a widget,
	// taking into account the widget’s preference for height-for-width
	// management.
	//
	// This is used to retrieve a suitable size by container widgets which do
	// not impose any restrictions on the child placement. It can be used to
	// deduce toplevel window and menu sizes as well as child widgets in
	// free-form containers such as GtkLayout.
	//
	// Handle with care. Note that the natural height of a height-for-width
	// widget will generally be a smaller size than the minimum height, since
	// the required height for the natural width is generally smaller than the
	// required height for the minimum width.
	//
	// Use gtk_widget_get_preferred_height_and_baseline_for_width() if you want
	// to support baseline alignment.
	//
	// This method is inherited from Widget
	GetPreferredSize() (minimumSize Requisition, naturalSize Requisition)
	// GetPreferredWidth retrieves a widget’s initial minimum and natural width.
	//
	// This call is specific to height-for-width requests.
	//
	// The returned request will be modified by the
	// GtkWidgetClass::adjust_size_request virtual method and by any SizeGroups
	// that have been applied. That is, the returned request is the one that
	// should be used for layout, not necessarily the one returned by the widget
	// itself.
	//
	// This method is inherited from Widget
	GetPreferredWidth() (minimumWidth int, naturalWidth int)
	// GetPreferredWidthForHeight retrieves a widget’s minimum and natural width
	// if it would be given the specified @height.
	//
	// The returned request will be modified by the
	// GtkWidgetClass::adjust_size_request virtual method and by any SizeGroups
	// that have been applied. That is, the returned request is the one that
	// should be used for layout, not necessarily the one returned by the widget
	// itself.
	//
	// This method is inherited from Widget
	GetPreferredWidthForHeight(height int) (minimumWidth int, naturalWidth int)
	// GetRealized determines whether @widget is realized.
	//
	// This method is inherited from Widget
	GetRealized() bool
	// GetReceivesDefault determines whether @widget is always treated as the
	// default widget within its toplevel when it has the focus, even if another
	// widget is the default.
	//
	// See gtk_widget_set_receives_default().
	//
	// This method is inherited from Widget
	GetReceivesDefault() bool
	// GetRequestMode gets whether the widget prefers a height-for-width layout
	// or a width-for-height layout.
	//
	// Bin widgets generally propagate the preference of their child, container
	// widgets need to request something either in context of their children or
	// in context of their allocation capabilities.
	//
	// This method is inherited from Widget
	GetRequestMode() SizeRequestMode
	// GetRequisition retrieves the widget’s requisition.
	//
	// This function should only be used by widget implementations in order to
	// figure whether the widget’s requisition has actually changed after some
	// internal state change (so that they can call gtk_widget_queue_resize()
	// instead of gtk_widget_queue_draw()).
	//
	// Normally, gtk_widget_size_request() should be used.
	//
	// Deprecated: since version 3.0.
	//
	// This method is inherited from Widget
	GetRequisition() Requisition
	// GetRootWindow: get the root window where this widget is located. This
	// function can only be called after the widget has been added to a widget
	// hierarchy with Window at the top.
	//
	// The root window is useful for such purposes as creating a popup Window
	// associated with the window. In general, you should only create display
	// specific resources when a widget has been realized, and you should free
	// those resources when the widget is unrealized.
	//
	// Deprecated: since version 3.12.
	//
	// This method is inherited from Widget
	GetRootWindow() gdk.Window
	// GetScaleFactor retrieves the internal scale factor that maps from window
	// coordinates to the actual device pixels. On traditional systems this is
	// 1, on high density outputs, it can be a higher value (typically 2).
	//
	// See gdk_window_get_scale_factor().
	//
	// This method is inherited from Widget
	GetScaleFactor() int
	// GetScreen: get the Screen from the toplevel window associated with this
	// widget. This function can only be called after the widget has been added
	// to a widget hierarchy with a Window at the top.
	//
	// In general, you should only create screen specific resources when a
	// widget has been realized, and you should free those resources when the
	// widget is unrealized.
	//
	// This method is inherited from Widget
	GetScreen() gdk.Screen
	// GetSensitive returns the widget’s sensitivity (in the sense of returning
	// the value that has been set using gtk_widget_set_sensitive()).
	//
	// The effective sensitivity of a widget is however determined by both its
	// own and its parent widget’s sensitivity. See gtk_widget_is_sensitive().
	//
	// This method is inherited from Widget
	GetSensitive() bool
	// GetSettings gets the settings object holding the settings used for this
	// widget.
	//
	// Note that this function can only be called when the Widget is attached to
	// a toplevel, since the settings object is specific to a particular Screen.
	//
	// This method is inherited from Widget
	GetSettings() Settings
	// GetSizeRequest gets the size request that was explicitly set for the
	// widget using gtk_widget_set_size_request(). A value of -1 stored in
	// @width or @height indicates that that dimension has not been set
	// explicitly and the natural requisition of the widget will be used
	// instead. See gtk_widget_set_size_request(). To get the size a widget will
	// actually request, call gtk_widget_get_preferred_size() instead of this
	// function.
	//
	// This method is inherited from Widget
	GetSizeRequest() (width int, height int)
	// GetState returns the widget’s state. See gtk_widget_set_state().
	//
	// Deprecated: since version 3.0.
	//
	// This method is inherited from Widget
	GetState() StateType
	// GetStateFlags returns the widget state as a flag set. It is worth
	// mentioning that the effective GTK_STATE_FLAG_INSENSITIVE state will be
	// returned, that is, also based on parent insensitivity, even if @widget
	// itself is sensitive.
	//
	// Also note that if you are looking for a way to obtain the StateFlags to
	// pass to a StyleContext method, you should look at
	// gtk_style_context_get_state().
	//
	// This method is inherited from Widget
	GetStateFlags() StateFlags
	// GetStyle: simply an accessor function that returns @widget->style.
	//
	// Deprecated: since version 3.0.
	//
	// This method is inherited from Widget
	GetStyle() Style
	// GetStyleContext returns the style context associated to @widget. The
	// returned object is guaranteed to be the same for the lifetime of @widget.
	//
	// This method is inherited from Widget
	GetStyleContext() StyleContext
	// GetSupportMultidevice returns true if @widget is multiple pointer aware.
	// See gtk_widget_set_support_multidevice() for more information.
	//
	// This method is inherited from Widget
	GetSupportMultidevice() bool
	// GetTemplateChild: fetch an object build from the template XML for
	// @widget_type in this @widget instance.
	//
	// This will only report children which were previously declared with
	// gtk_widget_class_bind_template_child_full() or one of its variants.
	//
	// This function is only meant to be called for code which is private to the
	// @widget_type which declared the child and is meant for language bindings
	// which cannot easily make use of the GObject structure offsets.
	//
	// This method is inherited from Widget
	GetTemplateChild(widgetType externglib.Type, name string) gextras.Objector
	// GetTooltipMarkup gets the contents of the tooltip for @widget.
	//
	// This method is inherited from Widget
	GetTooltipMarkup() string
	// GetTooltipText gets the contents of the tooltip for @widget.
	//
	// This method is inherited from Widget
	GetTooltipText() string
	// GetTooltipWindow returns the Window of the current tooltip. This can be
	// the GtkWindow created by default, or the custom tooltip window set using
	// gtk_widget_set_tooltip_window().
	//
	// This method is inherited from Widget
	GetTooltipWindow() Window
	// GetToplevel: this function returns the topmost widget in the container
	// hierarchy @widget is a part of. If @widget has no parent widgets, it will
	// be returned as the topmost widget. No reference will be added to the
	// returned widget; it should not be unreferenced.
	//
	// Note the difference in behavior vs. gtk_widget_get_ancestor();
	// `gtk_widget_get_ancestor (widget, GTK_TYPE_WINDOW)` would return nil if
	// @widget wasn’t inside a toplevel window, and if the window was inside a
	// Window-derived widget which was in turn inside the toplevel Window. While
	// the second case may seem unlikely, it actually happens when a Plug is
	// embedded inside a Socket within the same application.
	//
	// To reliably find the toplevel Window, use gtk_widget_get_toplevel() and
	// call GTK_IS_WINDOW() on the result. For instance, to get the title of a
	// widget's toplevel window, one might use:
	//
	//    static const char *
	//    get_widget_toplevel_title (GtkWidget *widget)
	//    {
	//      GtkWidget *toplevel = gtk_widget_get_toplevel (widget);
	//      if (GTK_IS_WINDOW (toplevel))
	//        {
	//          return gtk_window_get_title (GTK_WINDOW (toplevel));
	//        }
	//
	//      return NULL;
	//    }
	//
	// This method is inherited from Widget
	GetToplevel() Widget
	// GetVAlign gets the value of the Widget:valign property.
	//
	// For backwards compatibility reasons this method will never return
	// GTK_ALIGN_BASELINE, but instead it will convert it to GTK_ALIGN_FILL. If
	// your widget want to support baseline aligned children it must use
	// gtk_widget_get_valign_with_baseline(), or `g_object_get (widget,
	// "valign", &value, NULL)`, which will also report the true value.
	//
	// This method is inherited from Widget
	GetVAlign() Align
	// GetVAlignWithBaseline gets the value of the Widget:valign property,
	// including GTK_ALIGN_BASELINE.
	//
	// This method is inherited from Widget
	GetVAlignWithBaseline() Align
	// GetVExpand gets whether the widget would like any available extra
	// vertical space.
	//
	// See gtk_widget_get_hexpand() for more detail.
	//
	// This method is inherited from Widget
	GetVExpand() bool
	// GetVExpandSet gets whether gtk_widget_set_vexpand() has been used to
	// explicitly set the expand flag on this widget.
	//
	// See gtk_widget_get_hexpand_set() for more detail.
	//
	// This method is inherited from Widget
	GetVExpandSet() bool
	// GetVisible determines whether the widget is visible. If you want to take
	// into account whether the widget’s parent is also marked as visible, use
	// gtk_widget_is_visible() instead.
	//
	// This function does not check if the widget is obscured in any way.
	//
	// See gtk_widget_set_visible().
	//
	// This method is inherited from Widget
	GetVisible() bool
	// GetVisual gets the visual that will be used to render @widget.
	//
	// This method is inherited from Widget
	GetVisual() gdk.Visual
	// GetWindow returns the widget’s window if it is realized, nil otherwise
	//
	// This method is inherited from Widget
	GetWindow() gdk.Window
	// GrabAdd makes @widget the current grabbed widget.
	//
	// This means that interaction with other widgets in the same application is
	// blocked and mouse as well as keyboard events are delivered to this
	// widget.
	//
	// If @widget is not sensitive, it is not set as the current grabbed widget
	// and this function does nothing.
	//
	// This method is inherited from Widget
	GrabAdd()
	// GrabDefault causes @widget to become the default widget. @widget must be
	// able to be a default widget; typically you would ensure this yourself by
	// calling gtk_widget_set_can_default() with a true value. The default
	// widget is activated when the user presses Enter in a window. Default
	// widgets must be activatable, that is, gtk_widget_activate() should affect
	// them. Note that Entry widgets require the “activates-default” property
	// set to true before they activate the default widget when Enter is pressed
	// and the Entry is focused.
	//
	// This method is inherited from Widget
	GrabDefault()
	// GrabFocus causes @widget to have the keyboard focus for the Window it's
	// inside. @widget must be a focusable widget, such as a Entry; something
	// like Frame won’t work.
	//
	// More precisely, it must have the GTK_CAN_FOCUS flag set. Use
	// gtk_widget_set_can_focus() to modify that flag.
	//
	// The widget also needs to be realized and mapped. This is indicated by the
	// related signals. Grabbing the focus immediately after creating the widget
	// will likely fail and cause critical warnings.
	//
	// This method is inherited from Widget
	GrabFocus()
	// GrabRemove removes the grab from the given widget.
	//
	// You have to pair calls to gtk_grab_add() and gtk_grab_remove().
	//
	// If @widget does not have the grab, this function does nothing.
	//
	// This method is inherited from Widget
	GrabRemove()
	// HasDefault determines whether @widget is the current default widget
	// within its toplevel. See gtk_widget_set_can_default().
	//
	// This method is inherited from Widget
	HasDefault() bool
	// HasFocus determines if the widget has the global input focus. See
	// gtk_widget_is_focus() for the difference between having the global input
	// focus, and only having the focus within a toplevel.
	//
	// This method is inherited from Widget
	HasFocus() bool
	// HasGrab determines whether the widget is currently grabbing events, so it
	// is the only widget receiving input events (keyboard and mouse).
	//
	// See also gtk_grab_add().
	//
	// This method is inherited from Widget
	HasGrab() bool
	// HasRCStyle determines if the widget style has been looked up through the
	// rc mechanism.
	//
	// Deprecated: since version 3.0.
	//
	// This method is inherited from Widget
	HasRCStyle() bool
	// HasScreen checks whether there is a Screen is associated with this
	// widget. All toplevel widgets have an associated screen, and all widgets
	// added into a hierarchy with a toplevel window at the top.
	//
	// This method is inherited from Widget
	HasScreen() bool
	// HasVisibleFocus determines if the widget should show a visible indication
	// that it has the global input focus. This is a convenience function for
	// use in ::draw handlers that takes into account whether focus indication
	// should currently be shown in the toplevel window of @widget. See
	// gtk_window_get_focus_visible() for more information about focus
	// indication.
	//
	// To find out if the widget has the global input focus, use
	// gtk_widget_has_focus().
	//
	// This method is inherited from Widget
	HasVisibleFocus() bool
	// Hide reverses the effects of gtk_widget_show(), causing the widget to be
	// hidden (invisible to the user).
	//
	// This method is inherited from Widget
	Hide()
	// HideOnDelete: utility function; intended to be connected to the
	// Widget::delete-event signal on a Window. The function calls
	// gtk_widget_hide() on its argument, then returns true. If connected to
	// ::delete-event, the result is that clicking the close button for a window
	// (on the window frame, top right corner usually) will hide but not destroy
	// the window. By default, GTK+ destroys windows when ::delete-event is
	// received.
	//
	// This method is inherited from Widget
	HideOnDelete() bool
	// InDestruction returns whether the widget is currently being destroyed.
	// This information can sometimes be used to avoid doing unnecessary work.
	//
	// This method is inherited from Widget
	InDestruction() bool
	// InitTemplate creates and initializes child widgets defined in templates.
	// This function must be called in the instance initializer for any class
	// which assigned itself a template using gtk_widget_class_set_template()
	//
	// It is important to call this function in the instance initializer of a
	// Widget subclass and not in #GObject.constructed() or
	// #GObject.constructor() for two reasons.
	//
	// One reason is that generally derived widgets will assume that parent
	// class composite widgets have been created in their instance initializers.
	//
	// Another reason is that when calling g_object_new() on a widget with
	// composite templates, it’s important to build the composite widgets before
	// the construct properties are set. Properties passed to g_object_new()
	// should take precedence over properties set in the private template XML.
	//
	// This method is inherited from Widget
	InitTemplate()
	// InputShapeCombineRegion sets an input shape for this widget’s GDK window.
	// This allows for windows which react to mouse click in a nonrectangular
	// region, see gdk_window_input_shape_combine_region() for more information.
	//
	// This method is inherited from Widget
	InputShapeCombineRegion(region *cairo.Region)
	// InsertActionGroup inserts @group into @widget. Children of @widget that
	// implement Actionable can then be associated with actions in @group by
	// setting their “action-name” to @prefix.`action-name`.
	//
	// If @group is nil, a previously inserted group for @name is removed from
	// @widget.
	//
	// This method is inherited from Widget
	InsertActionGroup(name string, group gio.ActionGroup)
	// Intersect computes the intersection of a @widget’s area and @area,
	// storing the intersection in @intersection, and returns true if there was
	// an intersection. @intersection may be nil if you’re only interested in
	// whether there was an intersection.
	//
	// This method is inherited from Widget
	Intersect(area *gdk.Rectangle) (gdk.Rectangle, bool)
	// IsAncestor determines whether @widget is somewhere inside @ancestor,
	// possibly with intermediate containers.
	//
	// This method is inherited from Widget
	IsAncestor(ancestor Widget) bool
	// IsComposited: whether @widget can rely on having its alpha channel drawn
	// correctly. On X11 this function returns whether a compositing manager is
	// running for @widget’s screen.
	//
	// Please note that the semantics of this call will change in the future if
	// used on a widget that has a composited window in its hierarchy (as set by
	// gdk_window_set_composited()).
	//
	// Deprecated: since version 3.22.
	//
	// This method is inherited from Widget
	IsComposited() bool
	// IsDrawable determines whether @widget can be drawn to. A widget can be
	// drawn to if it is mapped and visible.
	//
	// This method is inherited from Widget
	IsDrawable() bool
	// IsFocus determines if the widget is the focus widget within its toplevel.
	// (This does not mean that the Widget:has-focus property is necessarily
	// set; Widget:has-focus will only be set if the toplevel widget
	// additionally has the global input focus.)
	//
	// This method is inherited from Widget
	IsFocus() bool
	// IsSensitive returns the widget’s effective sensitivity, which means it is
	// sensitive itself and also its parent widget is sensitive
	//
	// This method is inherited from Widget
	IsSensitive() bool
	// IsToplevel determines whether @widget is a toplevel widget.
	//
	// Currently only Window and Invisible (and out-of-process Plugs) are
	// toplevel widgets. Toplevel widgets have no parent widget.
	//
	// This method is inherited from Widget
	IsToplevel() bool
	// IsVisible determines whether the widget and all its parents are marked as
	// visible.
	//
	// This function does not check if the widget is obscured in any way.
	//
	// See also gtk_widget_get_visible() and gtk_widget_set_visible()
	//
	// This method is inherited from Widget
	IsVisible() bool
	// KeynavFailed: this function should be called whenever keyboard navigation
	// within a single widget hits a boundary. The function emits the
	// Widget::keynav-failed signal on the widget and its return value should be
	// interpreted in a way similar to the return value of
	// gtk_widget_child_focus():
	//
	// When true is returned, stay in the widget, the failed keyboard navigation
	// is OK and/or there is nowhere we can/should move the focus to.
	//
	// When false is returned, the caller should continue with keyboard
	// navigation outside the widget, e.g. by calling gtk_widget_child_focus()
	// on the widget’s toplevel.
	//
	// The default ::keynav-failed handler returns false for GTK_DIR_TAB_FORWARD
	// and GTK_DIR_TAB_BACKWARD. For the other values of DirectionType it
	// returns true.
	//
	// Whenever the default handler returns true, it also calls
	// gtk_widget_error_bell() to notify the user of the failed keyboard
	// navigation.
	//
	// A use case for providing an own implementation of ::keynav-failed (either
	// by connecting to it or by overriding it) would be a row of Entry widgets
	// where the user should be able to navigate the entire row with the cursor
	// keys, as e.g. known from user interfaces that require entering license
	// keys.
	//
	// This method is inherited from Widget
	KeynavFailed(direction DirectionType) bool
	// ListActionPrefixes retrieves a nil-terminated array of strings containing
	// the prefixes of Group's available to @widget.
	//
	// This method is inherited from Widget
	ListActionPrefixes() []string
	// Map: this function is only for use in widget implementations. Causes a
	// widget to be mapped if it isn’t already.
	//
	// This method is inherited from Widget
	Map()
	// MnemonicActivate emits the Widget::mnemonic-activate signal.
	//
	// This method is inherited from Widget
	MnemonicActivate(groupCycling bool) bool
	// ModifyBase sets the base color for a widget in a particular state. All
	// other style values are left untouched. The base color is the background
	// color used along with the text color (see gtk_widget_modify_text()) for
	// widgets such as Entry and TextView. See also gtk_widget_modify_style().
	//
	// > Note that “no window” widgets (which have the GTK_NO_WINDOW > flag set)
	// draw on their parent container’s window and thus may > not draw any
	// background themselves. This is the case for e.g. > Label. > > To modify
	// the background of such widgets, you have to set the > base color on their
	// parent; if you want to set the background > of a rectangular area around
	// a label, try placing the label in > a EventBox widget and setting the
	// base color on that.
	//
	// Deprecated: since version 3.0.
	//
	// This method is inherited from Widget
	ModifyBase(state StateType, color *gdk.Color)
	// ModifyBg sets the background color for a widget in a particular state.
	//
	// All other style values are left untouched. See also
	// gtk_widget_modify_style().
	//
	// > Note that “no window” widgets (which have the GTK_NO_WINDOW > flag set)
	// draw on their parent container’s window and thus may > not draw any
	// background themselves. This is the case for e.g. > Label. > > To modify
	// the background of such widgets, you have to set the > background color on
	// their parent; if you want to set the background > of a rectangular area
	// around a label, try placing the label in > a EventBox widget and setting
	// the background color on that.
	//
	// Deprecated: since version 3.0.
	//
	// This method is inherited from Widget
	ModifyBg(state StateType, color *gdk.Color)
	// ModifyCursor sets the cursor color to use in a widget, overriding the
	// Widget cursor-color and secondary-cursor-color style properties.
	//
	// All other style values are left untouched. See also
	// gtk_widget_modify_style().
	//
	// Deprecated: since version 3.0.
	//
	// This method is inherited from Widget
	ModifyCursor(primary *gdk.Color, secondary *gdk.Color)
	// ModifyFg sets the foreground color for a widget in a particular state.
	//
	// All other style values are left untouched. See also
	// gtk_widget_modify_style().
	//
	// Deprecated: since version 3.0.
	//
	// This method is inherited from Widget
	ModifyFg(state StateType, color *gdk.Color)
	// ModifyFont sets the font to use for a widget.
	//
	// All other style values are left untouched. See also
	// gtk_widget_modify_style().
	//
	// Deprecated: since version 3.0.
	//
	// This method is inherited from Widget
	ModifyFont(fontDesc *pango.FontDescription)
	// ModifyStyle modifies style values on the widget.
	//
	// Modifications made using this technique take precedence over style values
	// set via an RC file, however, they will be overridden if a style is
	// explicitly set on the widget using gtk_widget_set_style(). The
	// RcStyle-struct is designed so each field can either be set or unset, so
	// it is possible, using this function, to modify some style values and
	// leave the others unchanged.
	//
	// Note that modifications made with this function are not cumulative with
	// previous calls to gtk_widget_modify_style() or with such functions as
	// gtk_widget_modify_fg(). If you wish to retain previous values, you must
	// first call gtk_widget_get_modifier_style(), make your modifications to
	// the returned style, then call gtk_widget_modify_style() with that style.
	// On the other hand, if you first call gtk_widget_modify_style(),
	// subsequent calls to such functions gtk_widget_modify_fg() will have a
	// cumulative effect with the initial modifications.
	//
	// Deprecated: since version 3.0.
	//
	// This method is inherited from Widget
	ModifyStyle(style RCStyle)
	// ModifyText sets the text color for a widget in a particular state.
	//
	// All other style values are left untouched. The text color is the
	// foreground color used along with the base color (see
	// gtk_widget_modify_base()) for widgets such as Entry and TextView. See
	// also gtk_widget_modify_style().
	//
	// Deprecated: since version 3.0.
	//
	// This method is inherited from Widget
	ModifyText(state StateType, color *gdk.Color)
	// OverrideBackgroundColor sets the background color to use for a widget.
	//
	// All other style values are left untouched. See
	// gtk_widget_override_color().
	//
	// Deprecated: since version 3.16.
	//
	// This method is inherited from Widget
	OverrideBackgroundColor(state StateFlags, color *gdk.RGBA)
	// OverrideColor sets the color to use for a widget.
	//
	// All other style values are left untouched.
	//
	// This function does not act recursively. Setting the color of a container
	// does not affect its children. Note that some widgets that you may not
	// think of as containers, for instance Buttons, are actually containers.
	//
	// This API is mostly meant as a quick way for applications to change a
	// widget appearance. If you are developing a widgets library and intend
	// this change to be themeable, it is better done by setting meaningful CSS
	// classes in your widget/container implementation through
	// gtk_style_context_add_class().
	//
	// This way, your widget library can install a CssProvider with the
	// GTK_STYLE_PROVIDER_PRIORITY_FALLBACK priority in order to provide a
	// default styling for those widgets that need so, and this theming may
	// fully overridden by the user’s theme.
	//
	// Note that for complex widgets this may bring in undesired results (such
	// as uniform background color everywhere), in these cases it is better to
	// fully style such widgets through a CssProvider with the
	// GTK_STYLE_PROVIDER_PRIORITY_APPLICATION priority.
	//
	// Deprecated: since version 3.16.
	//
	// This method is inherited from Widget
	OverrideColor(state StateFlags, color *gdk.RGBA)
	// OverrideCursor sets the cursor color to use in a widget, overriding the
	// cursor-color and secondary-cursor-color style properties. All other style
	// values are left untouched. See also gtk_widget_modify_style().
	//
	// Note that the underlying properties have the Color type, so the alpha
	// value in @primary and @secondary will be ignored.
	//
	// Deprecated: since version 3.16.
	//
	// This method is inherited from Widget
	OverrideCursor(cursor *gdk.RGBA, secondaryCursor *gdk.RGBA)
	// OverrideFont sets the font to use for a widget. All other style values
	// are left untouched. See gtk_widget_override_color().
	//
	// Deprecated: since version 3.16.
	//
	// This method is inherited from Widget
	OverrideFont(fontDesc *pango.FontDescription)
	// OverrideSymbolicColor sets a symbolic color for a widget.
	//
	// All other style values are left untouched. See
	// gtk_widget_override_color() for overriding the foreground or background
	// color.
	//
	// Deprecated: since version 3.16.
	//
	// This method is inherited from Widget
	OverrideSymbolicColor(name string, color *gdk.RGBA)
	// Path obtains the full path to @widget. The path is simply the name of a
	// widget and all its parents in the container hierarchy, separated by
	// periods. The name of a widget comes from gtk_widget_get_name(). Paths are
	// used to apply styles to a widget in gtkrc configuration files. Widget
	// names are the type of the widget by default (e.g. “GtkButton”) or can be
	// set to an application-specific value with gtk_widget_set_name(). By
	// setting the name of a widget, you allow users or theme authors to apply
	// styles to that specific widget in their gtkrc file. @path_reversed_p
	// fills in the path in reverse order, i.e. starting with @widget’s name
	// instead of starting with the name of @widget’s outermost ancestor.
	//
	// Deprecated: since version 3.0.
	//
	// This method is inherited from Widget
	Path() (pathLength uint, path string, pathReversed string)
	// QueueAllocate: this function is only for use in widget implementations.
	//
	// Flags the widget for a rerun of the GtkWidgetClass::size_allocate
	// function. Use this function instead of gtk_widget_queue_resize() when the
	// @widget's size request didn't change but it wants to reposition its
	// contents.
	//
	// An example user of this function is gtk_widget_set_halign().
	//
	// This method is inherited from Widget
	QueueAllocate()
	// QueueComputeExpand: mark @widget as needing to recompute its expand
	// flags. Call this function when setting legacy expand child properties on
	// the child of a container.
	//
	// See gtk_widget_compute_expand().
	//
	// This method is inherited from Widget
	QueueComputeExpand()
	// QueueDraw: equivalent to calling gtk_widget_queue_draw_area() for the
	// entire area of a widget.
	//
	// This method is inherited from Widget
	QueueDraw()
	// QueueDrawArea: convenience function that calls
	// gtk_widget_queue_draw_region() on the region created from the given
	// coordinates.
	//
	// The region here is specified in widget coordinates. Widget coordinates
	// are a bit odd; for historical reasons, they are defined as
	// @widget->window coordinates for widgets that return true for
	// gtk_widget_get_has_window(), and are relative to @widget->allocation.x,
	// @widget->allocation.y otherwise.
	//
	// @width or @height may be 0, in this case this function does nothing.
	// Negative values for @width and @height are not allowed.
	//
	// This method is inherited from Widget
	QueueDrawArea(x int, y int, width int, height int)
	// QueueDrawRegion invalidates the area of @widget defined by @region by
	// calling gdk_window_invalidate_region() on the widget’s window and all its
	// child windows. Once the main loop becomes idle (after the current batch
	// of events has been processed, roughly), the window will receive expose
	// events for the union of all regions that have been invalidated.
	//
	// Normally you would only use this function in widget implementations. You
	// might also use it to schedule a redraw of a DrawingArea or some portion
	// thereof.
	//
	// This method is inherited from Widget
	QueueDrawRegion(region *cairo.Region)
	// QueueResize: this function is only for use in widget implementations.
	// Flags a widget to have its size renegotiated; should be called when a
	// widget for some reason has a new size request. For example, when you
	// change the text in a Label, Label queues a resize to ensure there’s
	// enough space for the new text.
	//
	// Note that you cannot call gtk_widget_queue_resize() on a widget from
	// inside its implementation of the GtkWidgetClass::size_allocate virtual
	// method. Calls to gtk_widget_queue_resize() from inside
	// GtkWidgetClass::size_allocate will be silently ignored.
	//
	// This method is inherited from Widget
	QueueResize()
	// QueueResizeNoRedraw: this function works like gtk_widget_queue_resize(),
	// except that the widget is not invalidated.
	//
	// This method is inherited from Widget
	QueueResizeNoRedraw()
	// Realize creates the GDK (windowing system) resources associated with a
	// widget. For example, @widget->window will be created when a widget is
	// realized. Normally realization happens implicitly; if you show a widget
	// and all its parent containers, then the widget will be realized and
	// mapped automatically.
	//
	// Realizing a widget requires all the widget’s parent widgets to be
	// realized; calling gtk_widget_realize() realizes the widget’s parents in
	// addition to @widget itself. If a widget is not yet inside a toplevel
	// window when you realize it, bad things will happen.
	//
	// This function is primarily used in widget implementations, and isn’t very
	// useful otherwise. Many times when you think you might need it, a better
	// approach is to connect to a signal that will be called after the widget
	// is realized automatically, such as Widget::draw. Or simply
	// g_signal_connect () to the Widget::realize signal.
	//
	// This method is inherited from Widget
	Realize()
	// RegionIntersect computes the intersection of a @widget’s area and
	// @region, returning the intersection. The result may be empty, use
	// cairo_region_is_empty() to check.
	//
	// Deprecated: since version 3.14.
	//
	// This method is inherited from Widget
	RegionIntersect(region *cairo.Region) *cairo.Region
	// RegisterWindow registers a Window with the widget and sets it up so that
	// the widget receives events for it. Call gtk_widget_unregister_window()
	// when destroying the window.
	//
	// Before 3.8 you needed to call gdk_window_set_user_data() directly to set
	// this up. This is now deprecated and you should use
	// gtk_widget_register_window() instead. Old code will keep working as is,
	// although some new features like transparency might not work perfectly.
	//
	// This method is inherited from Widget
	RegisterWindow(window gdk.Window)
	// RemoveAccelerator removes an accelerator from @widget, previously
	// installed with gtk_widget_add_accelerator().
	//
	// This method is inherited from Widget
	RemoveAccelerator(accelGroup AccelGroup, accelKey uint, accelMods gdk.ModifierType) bool
	// RemoveMnemonicLabel removes a widget from the list of mnemonic labels for
	// this widget. (See gtk_widget_list_mnemonic_labels()). The widget must
	// have previously been added to the list with
	// gtk_widget_add_mnemonic_label().
	//
	// This method is inherited from Widget
	RemoveMnemonicLabel(label Widget)
	// RemoveTickCallback removes a tick callback previously registered with
	// gtk_widget_add_tick_callback().
	//
	// This method is inherited from Widget
	RemoveTickCallback(id uint)
	// RenderIcon: convenience function that uses the theme settings for @widget
	// to look up @stock_id and render it to a pixbuf. @stock_id should be a
	// stock icon ID such as K_STOCK_OPEN or K_STOCK_OK. @size should be a size
	// such as K_ICON_SIZE_MENU. @detail should be a string that identifies the
	// widget or code doing the rendering, so that theme engines can
	// special-case rendering for that widget or code.
	//
	// The pixels in the returned Pixbuf are shared with the rest of the
	// application and should not be modified. The pixbuf should be freed after
	// use with g_object_unref().
	//
	// Deprecated: since version 3.0.
	//
	// This method is inherited from Widget
	RenderIcon(stockId string, size int, detail string) gdkpixbuf.Pixbuf
	// RenderIconPixbuf: convenience function that uses the theme engine and
	// style settings for @widget to look up @stock_id and render it to a
	// pixbuf. @stock_id should be a stock icon ID such as K_STOCK_OPEN or
	// K_STOCK_OK. @size should be a size such as K_ICON_SIZE_MENU.
	//
	// The pixels in the returned Pixbuf are shared with the rest of the
	// application and should not be modified. The pixbuf should be freed after
	// use with g_object_unref().
	//
	// Deprecated: since version 3.10.
	//
	// This method is inherited from Widget
	RenderIconPixbuf(stockId string, size int) gdkpixbuf.Pixbuf
	// Reparent moves a widget from one Container to another, handling reference
	// count issues to avoid destroying the widget.
	//
	// Deprecated: since version 3.14.
	//
	// This method is inherited from Widget
	Reparent(newParent Widget)
	// ResetRCStyles: reset the styles of @widget and all descendents, so when
	// they are looked up again, they get the correct values for the currently
	// loaded RC file settings.
	//
	// This function is not useful for applications.
	//
	// Deprecated: since version 3.0.
	//
	// This method is inherited from Widget
	ResetRCStyles()
	// ResetStyle updates the style context of @widget and all descendants by
	// updating its widget path. Containers may want to use this on a child when
	// reordering it in a way that a different style might apply to it. See also
	// gtk_container_get_path_for_child().
	//
	// This method is inherited from Widget
	ResetStyle()
	// SetAccelPath: given an accelerator group, @accel_group, and an
	// accelerator path, @accel_path, sets up an accelerator in @accel_group so
	// whenever the key binding that is defined for @accel_path is pressed,
	// @widget will be activated. This removes any accelerators (for any
	// accelerator group) installed by previous calls to
	// gtk_widget_set_accel_path(). Associating accelerators with paths allows
	// them to be modified by the user and the modifications to be saved for
	// future use. (See gtk_accel_map_save().)
	//
	// This function is a low level function that would most likely be used by a
	// menu creation system like UIManager. If you use UIManager, setting up
	// accelerator paths will be done automatically.
	//
	// Even when you you aren’t using UIManager, if you only want to set up
	// accelerators on menu items gtk_menu_item_set_accel_path() provides a
	// somewhat more convenient interface.
	//
	// Note that @accel_path string will be stored in a #GQuark. Therefore, if
	// you pass a static string, you can save some memory by interning it first
	// with g_intern_static_string().
	//
	// This method is inherited from Widget
	SetAccelPath(accelPath string, accelGroup AccelGroup)
	// SetAppPaintable sets whether the application intends to draw on the
	// widget in an Widget::draw handler.
	//
	// This is a hint to the widget and does not affect the behavior of the GTK+
	// core; many widgets ignore this flag entirely. For widgets that do pay
	// attention to the flag, such as EventBox and Window, the effect is to
	// suppress default themed drawing of the widget's background. (Children of
	// the widget will still be drawn.) The application is then entirely
	// responsible for drawing the widget background.
	//
	// Note that the background is still drawn when the widget is mapped.
	//
	// This method is inherited from Widget
	SetAppPaintable(appPaintable bool)
	// SetCanDefault specifies whether @widget can be a default widget. See
	// gtk_widget_grab_default() for details about the meaning of “default”.
	//
	// This method is inherited from Widget
	SetCanDefault(canDefault bool)
	// SetCanFocus specifies whether @widget can own the input focus. See
	// gtk_widget_grab_focus() for actually setting the input focus on a widget.
	//
	// This method is inherited from Widget
	SetCanFocus(canFocus bool)
	// SetChildVisible sets whether @widget should be mapped along with its when
	// its parent is mapped and @widget has been shown with gtk_widget_show().
	//
	// The child visibility can be set for widget before it is added to a
	// container with gtk_widget_set_parent(), to avoid mapping children
	// unnecessary before immediately unmapping them. However it will be reset
	// to its default state of true when the widget is removed from a container.
	//
	// Note that changing the child visibility of a widget does not queue a
	// resize on the widget. Most of the time, the size of a widget is computed
	// from all visible children, whether or not they are mapped. If this is not
	// the case, the container can queue a resize itself.
	//
	// This function is only useful for container implementations and never
	// should be called by an application.
	//
	// This method is inherited from Widget
	SetChildVisible(isVisible bool)
	// SetCompositeName sets a widgets composite name. The widget must be a
	// composite child of its parent; see gtk_widget_push_composite_child().
	//
	// Deprecated: since version 3.10.
	//
	// This method is inherited from Widget
	SetCompositeName(name string)
	// SetDeviceEnabled enables or disables a Device to interact with @widget
	// and all its children.
	//
	// It does so by descending through the Window hierarchy and enabling the
	// same mask that is has for core events (i.e. the one that
	// gdk_window_get_events() returns).
	//
	// This method is inherited from Widget
	SetDeviceEnabled(device gdk.Device, enabled bool)
	// SetDeviceEvents sets the device event mask (see EventMask) for a widget.
	// The event mask determines which events a widget will receive from
	// @device. Keep in mind that different widgets have different default event
	// masks, and by changing the event mask you may disrupt a widget’s
	// functionality, so be careful. This function must be called while a widget
	// is unrealized. Consider gtk_widget_add_device_events() for widgets that
	// are already realized, or if you want to preserve the existing event mask.
	// This function can’t be used with windowless widgets (which return false
	// from gtk_widget_get_has_window()); to get events on those widgets, place
	// them inside a EventBox and receive events on the event box.
	//
	// This method is inherited from Widget
	SetDeviceEvents(device gdk.Device, events gdk.EventMask)
	// SetDirection sets the reading direction on a particular widget. This
	// direction controls the primary direction for widgets containing text, and
	// also the direction in which the children of a container are packed. The
	// ability to set the direction is present in order so that correct
	// localization into languages with right-to-left reading directions can be
	// done. Generally, applications will let the default reading direction
	// present, except for containers where the containers are arranged in an
	// order that is explicitly visual rather than logical (such as buttons for
	// text justification).
	//
	// If the direction is set to GTK_TEXT_DIR_NONE, then the value set by
	// gtk_widget_set_default_direction() will be used.
	//
	// This method is inherited from Widget
	SetDirection(dir TextDirection)
	// SetDoubleBuffered widgets are double buffered by default; you can use
	// this function to turn off the buffering. “Double buffered” simply means
	// that gdk_window_begin_draw_frame() and gdk_window_end_draw_frame() are
	// called automatically around expose events sent to the widget.
	// gdk_window_begin_draw_frame() diverts all drawing to a widget's window to
	// an offscreen buffer, and gdk_window_end_draw_frame() draws the buffer to
	// the screen. The result is that users see the window update in one smooth
	// step, and don’t see individual graphics primitives being rendered.
	//
	// In very simple terms, double buffered widgets don’t flicker, so you would
	// only use this function to turn off double buffering if you had special
	// needs and really knew what you were doing.
	//
	// Note: if you turn off double-buffering, you have to handle expose events,
	// since even the clearing to the background color or pixmap will not happen
	// automatically (as it is done in gdk_window_begin_draw_frame()).
	//
	// In 3.10 GTK and GDK have been restructured for translucent drawing. Since
	// then expose events for double-buffered widgets are culled into a single
	// event to the toplevel GDK window. If you now unset double buffering, you
	// will cause a separate rendering pass for every widget. This will likely
	// cause rendering problems - in particular related to stacking - and
	// usually increases rendering times significantly.
	//
	// Deprecated: since version 3.14.
	//
	// This method is inherited from Widget
	SetDoubleBuffered(doubleBuffered bool)
	// SetEvents sets the event mask (see EventMask) for a widget. The event
	// mask determines which events a widget will receive. Keep in mind that
	// different widgets have different default event masks, and by changing the
	// event mask you may disrupt a widget’s functionality, so be careful. This
	// function must be called while a widget is unrealized. Consider
	// gtk_widget_add_events() for widgets that are already realized, or if you
	// want to preserve the existing event mask. This function can’t be used
	// with widgets that have no window. (See gtk_widget_get_has_window()). To
	// get events on those widgets, place them inside a EventBox and receive
	// events on the event box.
	//
	// This method is inherited from Widget
	SetEvents(events int)
	// SetFocusOnClick sets whether the widget should grab focus when it is
	// clicked with the mouse. Making mouse clicks not grab focus is useful in
	// places like toolbars where you don’t want the keyboard focus removed from
	// the main area of the application.
	//
	// This method is inherited from Widget
	SetFocusOnClick(focusOnClick bool)
	// SetFontMap sets the font map to use for Pango rendering. When not set,
	// the widget will inherit the font map from its parent.
	//
	// This method is inherited from Widget
	SetFontMap(fontMap pango.FontMap)
	// SetFontOptions sets the #cairo_font_options_t used for Pango rendering in
	// this widget. When not set, the default font options for the Screen will
	// be used.
	//
	// This method is inherited from Widget
	SetFontOptions(options *cairo.FontOptions)
	// SetHAlign sets the horizontal alignment of @widget. See the Widget:halign
	// property.
	//
	// This method is inherited from Widget
	SetHAlign(align Align)
	// SetHasTooltip sets the has-tooltip property on @widget to @has_tooltip.
	// See Widget:has-tooltip for more information.
	//
	// This method is inherited from Widget
	SetHasTooltip(hasTooltip bool)
	// SetHasWindow specifies whether @widget has a Window of its own. Note that
	// all realized widgets have a non-nil “window” pointer
	// (gtk_widget_get_window() never returns a nil window when a widget is
	// realized), but for many of them it’s actually the Window of one of its
	// parent widgets. Widgets that do not create a window for themselves in
	// Widget::realize must announce this by calling this function with
	// @has_window = false.
	//
	// This function should only be called by widget implementations, and they
	// should call it in their init() function.
	//
	// This method is inherited from Widget
	SetHasWindow(hasWindow bool)
	// SetHExpand sets whether the widget would like any available extra
	// horizontal space. When a user resizes a Window, widgets with expand=TRUE
	// generally receive the extra space. For example, a list or scrollable area
	// or document in your window would often be set to expand.
	//
	// Call this function to set the expand flag if you would like your widget
	// to become larger horizontally when the window has extra room.
	//
	// By default, widgets automatically expand if any of their children want to
	// expand. (To see if a widget will automatically expand given its current
	// children and state, call gtk_widget_compute_expand(). A container can
	// decide how the expandability of children affects the expansion of the
	// container by overriding the compute_expand virtual method on Widget.).
	//
	// Setting hexpand explicitly with this function will override the automatic
	// expand behavior.
	//
	// This function forces the widget to expand or not to expand, regardless of
	// children. The override occurs because gtk_widget_set_hexpand() sets the
	// hexpand-set property (see gtk_widget_set_hexpand_set()) which causes the
	// widget’s hexpand value to be used, rather than looking at children and
	// widget state.
	//
	// This method is inherited from Widget
	SetHExpand(expand bool)
	// SetHExpandSet sets whether the hexpand flag (see
	// gtk_widget_get_hexpand()) will be used.
	//
	// The hexpand-set property will be set automatically when you call
	// gtk_widget_set_hexpand() to set hexpand, so the most likely reason to use
	// this function would be to unset an explicit expand flag.
	//
	// If hexpand is set, then it overrides any computed expand value based on
	// child widgets. If hexpand is not set, then the expand value depends on
	// whether any children of the widget would like to expand.
	//
	// There are few reasons to use this function, but it’s here for
	// completeness and consistency.
	//
	// This method is inherited from Widget
	SetHExpandSet(set bool)
	// SetMapped marks the widget as being mapped.
	//
	// This function should only ever be called in a derived widget's “map” or
	// “unmap” implementation.
	//
	// This method is inherited from Widget
	SetMapped(mapped bool)
	// SetMarginBottom sets the bottom margin of @widget. See the
	// Widget:margin-bottom property.
	//
	// This method is inherited from Widget
	SetMarginBottom(margin int)
	// SetMarginEnd sets the end margin of @widget. See the Widget:margin-end
	// property.
	//
	// This method is inherited from Widget
	SetMarginEnd(margin int)
	// SetMarginLeft sets the left margin of @widget. See the Widget:margin-left
	// property.
	//
	// Deprecated: since version 3.12.
	//
	// This method is inherited from Widget
	SetMarginLeft(margin int)
	// SetMarginRight sets the right margin of @widget. See the
	// Widget:margin-right property.
	//
	// Deprecated: since version 3.12.
	//
	// This method is inherited from Widget
	SetMarginRight(margin int)
	// SetMarginStart sets the start margin of @widget. See the
	// Widget:margin-start property.
	//
	// This method is inherited from Widget
	SetMarginStart(margin int)
	// SetMarginTop sets the top margin of @widget. See the Widget:margin-top
	// property.
	//
	// This method is inherited from Widget
	SetMarginTop(margin int)
	// SetName widgets can be named, which allows you to refer to them from a
	// CSS file. You can apply a style to widgets with a particular name in the
	// CSS file. See the documentation for the CSS syntax (on the same page as
	// the docs for StyleContext).
	//
	// Note that the CSS syntax has certain special characters to delimit and
	// represent elements in a selector (period, #, >, *...), so using these
	// will make your widget impossible to match by name. Any combination of
	// alphanumeric symbols, dashes and underscores will suffice.
	//
	// This method is inherited from Widget
	SetName(name string)
	// SetNoShowAll sets the Widget:no-show-all property, which determines
	// whether calls to gtk_widget_show_all() will affect this widget.
	//
	// This is mostly for use in constructing widget hierarchies with externally
	// controlled visibility, see UIManager.
	//
	// This method is inherited from Widget
	SetNoShowAll(noShowAll bool)
	// SetOpacity: request the @widget to be rendered partially transparent,
	// with opacity 0 being fully transparent and 1 fully opaque. (Opacity
	// values are clamped to the [0,1] range.). This works on both toplevel
	// widget, and child widgets, although there are some limitations:
	//
	// For toplevel widgets this depends on the capabilities of the windowing
	// system. On X11 this has any effect only on X screens with a compositing
	// manager running. See gtk_widget_is_composited(). On Windows it should
	// work always, although setting a window’s opacity after the window has
	// been shown causes it to flicker once on Windows.
	//
	// For child widgets it doesn’t work if any affected widget has a native
	// window, or disables double buffering.
	//
	// This method is inherited from Widget
	SetOpacity(opacity float64)
	// SetParent: this function is useful only when implementing subclasses of
	// Container. Sets the container as the parent of @widget, and takes care of
	// some details such as updating the state and style of the child to reflect
	// its new location. The opposite function is gtk_widget_unparent().
	//
	// This method is inherited from Widget
	SetParent(parent Widget)
	// SetParentWindow sets a non default parent window for @widget.
	//
	// For Window classes, setting a @parent_window effects whether the window
	// is a toplevel window or can be embedded into other widgets.
	//
	// For Window classes, this needs to be called before the window is
	// realized.
	//
	// This method is inherited from Widget
	SetParentWindow(parentWindow gdk.Window)
	// SetRealized marks the widget as being realized. This function must only
	// be called after all Windows for the @widget have been created and
	// registered.
	//
	// This function should only ever be called in a derived widget's “realize”
	// or “unrealize” implementation.
	//
	// This method is inherited from Widget
	SetRealized(realized bool)
	// SetReceivesDefault specifies whether @widget will be treated as the
	// default widget within its toplevel when it has the focus, even if another
	// widget is the default.
	//
	// See gtk_widget_grab_default() for details about the meaning of “default”.
	//
	// This method is inherited from Widget
	SetReceivesDefault(receivesDefault bool)
	// SetRedrawOnAllocate sets whether the entire widget is queued for drawing
	// when its size allocation changes. By default, this setting is true and
	// the entire widget is redrawn on every size change. If your widget leaves
	// the upper left unchanged when made bigger, turning this setting off will
	// improve performance.
	//
	// Note that for widgets where gtk_widget_get_has_window() is false setting
	// this flag to false turns off all allocation on resizing: the widget will
	// not even redraw if its position changes; this is to allow containers that
	// don’t draw anything to avoid excess invalidations. If you set this flag
	// on a widget with no window that does draw on @widget->window, you are
	// responsible for invalidating both the old and new allocation of the
	// widget when the widget is moved and responsible for invalidating regions
	// newly when the widget increases size.
	//
	// This method is inherited from Widget
	SetRedrawOnAllocate(redrawOnAllocate bool)
	// SetSensitive sets the sensitivity of a widget. A widget is sensitive if
	// the user can interact with it. Insensitive widgets are “grayed out” and
	// the user can’t interact with them. Insensitive widgets are known as
	// “inactive”, “disabled”, or “ghosted” in some other toolkits.
	//
	// This method is inherited from Widget
	SetSensitive(sensitive bool)
	// SetSizeRequest sets the minimum size of a widget; that is, the widget’s
	// size request will be at least @width by @height. You can use this
	// function to force a widget to be larger than it normally would be.
	//
	// In most cases, gtk_window_set_default_size() is a better choice for
	// toplevel windows than this function; setting the default size will still
	// allow users to shrink the window. Setting the size request will force
	// them to leave the window at least as large as the size request. When
	// dealing with window sizes, gtk_window_set_geometry_hints() can be a
	// useful function as well.
	//
	// Note the inherent danger of setting any fixed size - themes, translations
	// into other languages, different fonts, and user action can all change the
	// appropriate size for a given widget. So, it's basically impossible to
	// hardcode a size that will always be correct.
	//
	// The size request of a widget is the smallest size a widget can accept
	// while still functioning well and drawing itself correctly. However in
	// some strange cases a widget may be allocated less than its requested
	// size, and in many cases a widget may be allocated more space than it
	// requested.
	//
	// If the size request in a given direction is -1 (unset), then the
	// “natural” size request of the widget will be used instead.
	//
	// The size request set here does not include any margin from the Widget
	// properties margin-left, margin-right, margin-top, and margin-bottom, but
	// it does include pretty much all other padding or border properties set by
	// any subclass of Widget.
	//
	// This method is inherited from Widget
	SetSizeRequest(width int, height int)
	// SetState: this function is for use in widget implementations. Sets the
	// state of a widget (insensitive, prelighted, etc.) Usually you should set
	// the state using wrapper functions such as gtk_widget_set_sensitive().
	//
	// Deprecated: since version 3.0.
	//
	// This method is inherited from Widget
	SetState(state StateType)
	// SetStateFlags: this function is for use in widget implementations. Turns
	// on flag values in the current widget state (insensitive, prelighted,
	// etc.).
	//
	// This function accepts the values GTK_STATE_FLAG_DIR_LTR and
	// GTK_STATE_FLAG_DIR_RTL but ignores them. If you want to set the widget's
	// direction, use gtk_widget_set_direction().
	//
	// It is worth mentioning that any other state than
	// GTK_STATE_FLAG_INSENSITIVE, will be propagated down to all non-internal
	// children if @widget is a Container, while GTK_STATE_FLAG_INSENSITIVE
	// itself will be propagated down to all Container children by different
	// means than turning on the state flag down the hierarchy, both
	// gtk_widget_get_state_flags() and gtk_widget_is_sensitive() will make use
	// of these.
	//
	// This method is inherited from Widget
	SetStateFlags(flags StateFlags, clear bool)
	// SetStyle: used to set the Style for a widget (@widget->style). Since GTK
	// 3, this function does nothing, the passed in style is ignored.
	//
	// Deprecated: since version 3.0.
	//
	// This method is inherited from Widget
	SetStyle(style Style)
	// SetSupportMultidevice enables or disables multiple pointer awareness. If
	// this setting is true, @widget will start receiving multiple, per device
	// enter/leave events. Note that if custom Windows are created in
	// Widget::realize, gdk_window_set_support_multidevice() will have to be
	// called manually on them.
	//
	// This method is inherited from Widget
	SetSupportMultidevice(supportMultidevice bool)
	// SetTooltipMarkup sets @markup as the contents of the tooltip, which is
	// marked up with the [Pango text markup language][PangoMarkupFormat].
	//
	// This function will take care of setting Widget:has-tooltip to true and of
	// the default handler for the Widget::query-tooltip signal.
	//
	// See also the Widget:tooltip-markup property and gtk_tooltip_set_markup().
	//
	// This method is inherited from Widget
	SetTooltipMarkup(markup string)
	// SetTooltipText sets @text as the contents of the tooltip. This function
	// will take care of setting Widget:has-tooltip to true and of the default
	// handler for the Widget::query-tooltip signal.
	//
	// See also the Widget:tooltip-text property and gtk_tooltip_set_text().
	//
	// This method is inherited from Widget
	SetTooltipText(text string)
	// SetTooltipWindow replaces the default window used for displaying tooltips
	// with @custom_window. GTK+ will take care of showing and hiding
	// @custom_window at the right moment, to behave likewise as the default
	// tooltip window. If @custom_window is nil, the default tooltip window will
	// be used.
	//
	// This method is inherited from Widget
	SetTooltipWindow(customWindow Window)
	// SetVAlign sets the vertical alignment of @widget. See the Widget:valign
	// property.
	//
	// This method is inherited from Widget
	SetVAlign(align Align)
	// SetVExpand sets whether the widget would like any available extra
	// vertical space.
	//
	// See gtk_widget_set_hexpand() for more detail.
	//
	// This method is inherited from Widget
	SetVExpand(expand bool)
	// SetVExpandSet sets whether the vexpand flag (see
	// gtk_widget_get_vexpand()) will be used.
	//
	// See gtk_widget_set_hexpand_set() for more detail.
	//
	// This method is inherited from Widget
	SetVExpandSet(set bool)
	// SetVisible sets the visibility state of @widget. Note that setting this
	// to true doesn’t mean the widget is actually viewable, see
	// gtk_widget_get_visible().
	//
	// This function simply calls gtk_widget_show() or gtk_widget_hide() but is
	// nicer to use when the visibility of the widget depends on some condition.
	//
	// This method is inherited from Widget
	SetVisible(visible bool)
	// SetVisual sets the visual that should be used for by widget and its
	// children for creating Windows. The visual must be on the same Screen as
	// returned by gtk_widget_get_screen(), so handling the
	// Widget::screen-changed signal is necessary.
	//
	// Setting a new @visual will not cause @widget to recreate its windows, so
	// you should call this function before @widget is realized.
	//
	// This method is inherited from Widget
	SetVisual(visual gdk.Visual)
	// SetWindow sets a widget’s window. This function should only be used in a
	// widget’s Widget::realize implementation. The window passed is usually
	// either new window created with gdk_window_new(), or the window of its
	// parent widget as returned by gtk_widget_get_parent_window().
	//
	// Widgets must indicate whether they will create their own Window by
	// calling gtk_widget_set_has_window(). This is usually done in the widget’s
	// init() function.
	//
	// Note that this function does not add any reference to @window.
	//
	// This method is inherited from Widget
	SetWindow(window gdk.Window)
	// ShapeCombineRegion sets a shape for this widget’s GDK window. This allows
	// for transparent windows etc., see gdk_window_shape_combine_region() for
	// more information.
	//
	// This method is inherited from Widget
	ShapeCombineRegion(region *cairo.Region)
	// Show flags a widget to be displayed. Any widget that isn’t shown will not
	// appear on the screen. If you want to show all the widgets in a container,
	// it’s easier to call gtk_widget_show_all() on the container, instead of
	// individually showing the widgets.
	//
	// Remember that you have to show the containers containing a widget, in
	// addition to the widget itself, before it will appear onscreen.
	//
	// When a toplevel container is shown, it is immediately realized and
	// mapped; other shown widgets are realized and mapped when their toplevel
	// container is realized and mapped.
	//
	// This method is inherited from Widget
	Show()
	// ShowAll: recursively shows a widget, and any child widgets (if the widget
	// is a container).
	//
	// This method is inherited from Widget
	ShowAll()
	// ShowNow shows a widget. If the widget is an unmapped toplevel widget
	// (i.e. a Window that has not yet been shown), enter the main loop and wait
	// for the window to actually be mapped. Be careful; because the main loop
	// is running, anything can happen during this function.
	//
	// This method is inherited from Widget
	ShowNow()
	// SizeRequest: this function is typically used when implementing a
	// Container subclass. Obtains the preferred size of a widget. The container
	// uses this information to arrange its child widgets and decide what size
	// allocations to give them with gtk_widget_size_allocate().
	//
	// You can also call this function from an application, with some caveats.
	// Most notably, getting a size request requires the widget to be associated
	// with a screen, because font information may be needed. Multihead-aware
	// applications should keep this in mind.
	//
	// Also remember that the size request is not necessarily the size a widget
	// will actually be allocated.
	//
	// Deprecated: since version 3.0.
	//
	// This method is inherited from Widget
	SizeRequest() Requisition
	// StyleAttach: this function attaches the widget’s Style to the widget's
	// Window. It is a replacement for
	//
	//    widget->style = gtk_style_attach (widget->style, widget->window);
	//
	// and should only ever be called in a derived widget’s “realize”
	// implementation which does not chain up to its parent class' “realize”
	// implementation, because one of the parent classes (finally Widget) would
	// attach the style itself.
	//
	// Deprecated: since version 3.0.
	//
	// This method is inherited from Widget
	StyleAttach()
	// StyleGetProperty gets the value of a style property of @widget.
	//
	// This method is inherited from Widget
	StyleGetProperty(propertyName string, value externglib.Value)
	// ThawChildNotify reverts the effect of a previous call to
	// gtk_widget_freeze_child_notify(). This causes all queued
	// Widget::child-notify signals on @widget to be emitted.
	//
	// This method is inherited from Widget
	ThawChildNotify()
	// TranslateCoordinates: translate coordinates relative to @src_widget’s
	// allocation to coordinates relative to @dest_widget’s allocations. In
	// order to perform this operation, both widgets must be realized, and must
	// share a common toplevel.
	//
	// This method is inherited from Widget
	TranslateCoordinates(destWidget Widget, srcX int, srcY int) (destX int, destY int, ok bool)
	// TriggerTooltipQuery triggers a tooltip query on the display where the
	// toplevel of @widget is located. See gtk_tooltip_trigger_tooltip_query()
	// for more information.
	//
	// This method is inherited from Widget
	TriggerTooltipQuery()
	// Unmap: this function is only for use in widget implementations. Causes a
	// widget to be unmapped if it’s currently mapped.
	//
	// This method is inherited from Widget
	Unmap()
	// Unparent: this function is only for use in widget implementations. Should
	// be called by implementations of the remove method on Container, to
	// dissociate a child from the container.
	//
	// This method is inherited from Widget
	Unparent()
	// Unrealize: this function is only useful in widget implementations. Causes
	// a widget to be unrealized (frees all GDK resources associated with the
	// widget, such as @widget->window).
	//
	// This method is inherited from Widget
	Unrealize()
	// UnregisterWindow unregisters a Window from the widget that was previously
	// set up with gtk_widget_register_window(). You need to call this when the
	// window is no longer used by the widget, such as when you destroy it.
	//
	// This method is inherited from Widget
	UnregisterWindow(window gdk.Window)
	// UnsetStateFlags: this function is for use in widget implementations.
	// Turns off flag values for the current widget state (insensitive,
	// prelighted, etc.). See gtk_widget_set_state_flags().
	//
	// This method is inherited from Widget
	UnsetStateFlags(flags StateFlags)
	// AddChild adds a child to @buildable. @type is an optional string
	// describing how the child should be added.
	//
	// This method is inherited from Buildable
	AddChild(builder Builder, child gextras.Objector, typ string)
	// ConstructChild constructs a child of @buildable with the name @name.
	//
	// Builder calls this function if a “constructor” has been specified in the
	// UI definition.
	//
	// This method is inherited from Buildable
	ConstructChild(builder Builder, name string) gextras.Objector
	// CustomFinished: this is similar to gtk_buildable_parser_finished() but is
	// called once for each custom tag handled by the @buildable.
	//
	// This method is inherited from Buildable
	CustomFinished(builder Builder, child gextras.Objector, tagname string, data interface{})
	// CustomTagEnd: this is called at the end of each custom element handled by
	// the buildable.
	//
	// This method is inherited from Buildable
	CustomTagEnd(builder Builder, child gextras.Objector, tagname string, data interface{})
	// CustomTagStart: this is called for each unknown element under <child>.
	//
	// This method is inherited from Buildable
	CustomTagStart(builder Builder, child gextras.Objector, tagname string) (glib.MarkupParser, interface{}, bool)
	// GetInternalChild: get the internal child called @childname of the
	// @buildable object.
	//
	// This method is inherited from Buildable
	GetInternalChild(builder Builder, childname string) gextras.Objector
	// GetName gets the name of the @buildable object.
	//
	// Builder sets the name based on the [GtkBuilder UI definition][BUILDER-UI]
	// used to construct the @buildable.
	//
	// This method is inherited from Buildable
	GetName() string
	// ParserFinished: called when the builder finishes the parsing of a
	// [GtkBuilder UI definition][BUILDER-UI]. Note that this will be called
	// once for each time gtk_builder_add_from_file() or
	// gtk_builder_add_from_string() is called on a builder.
	//
	// This method is inherited from Buildable
	ParserFinished(builder Builder)
	// SetBuildableProperty sets the property name @name to @value on the
	// @buildable object.
	//
	// This method is inherited from Buildable
	SetBuildableProperty(builder Builder, name string, value externglib.Value)
	// SetName sets the name of the @buildable object.
	//
	// This method is inherited from Buildable
	SetName(name string)
	// AddChild adds a child to @buildable. @type is an optional string
	// describing how the child should be added.
	//
	// This method is inherited from Buildable
	AddChild(builder Builder, child gextras.Objector, typ string)
	// ConstructChild constructs a child of @buildable with the name @name.
	//
	// Builder calls this function if a “constructor” has been specified in the
	// UI definition.
	//
	// This method is inherited from Buildable
	ConstructChild(builder Builder, name string) gextras.Objector
	// CustomFinished: this is similar to gtk_buildable_parser_finished() but is
	// called once for each custom tag handled by the @buildable.
	//
	// This method is inherited from Buildable
	CustomFinished(builder Builder, child gextras.Objector, tagname string, data interface{})
	// CustomTagEnd: this is called at the end of each custom element handled by
	// the buildable.
	//
	// This method is inherited from Buildable
	CustomTagEnd(builder Builder, child gextras.Objector, tagname string, data interface{})
	// CustomTagStart: this is called for each unknown element under <child>.
	//
	// This method is inherited from Buildable
	CustomTagStart(builder Builder, child gextras.Objector, tagname string) (glib.MarkupParser, interface{}, bool)
	// GetInternalChild: get the internal child called @childname of the
	// @buildable object.
	//
	// This method is inherited from Buildable
	GetInternalChild(builder Builder, childname string) gextras.Objector
	// GetName gets the name of the @buildable object.
	//
	// Builder sets the name based on the [GtkBuilder UI definition][BUILDER-UI]
	// used to construct the @buildable.
	//
	// This method is inherited from Buildable
	GetName() string
	// ParserFinished: called when the builder finishes the parsing of a
	// [GtkBuilder UI definition][BUILDER-UI]. Note that this will be called
	// once for each time gtk_builder_add_from_file() or
	// gtk_builder_add_from_string() is called on a builder.
	//
	// This method is inherited from Buildable
	ParserFinished(builder Builder)
	// SetBuildableProperty sets the property name @name to @value on the
	// @buildable object.
	//
	// This method is inherited from Buildable
	SetBuildableProperty(builder Builder, name string, value externglib.Value)
	// SetName sets the name of the @buildable object.
	//
	// This method is inherited from Buildable
	SetName(name string)
	// AddChild adds a child to @buildable. @type is an optional string
	// describing how the child should be added.
	//
	// This method is inherited from Buildable
	AddChild(builder Builder, child gextras.Objector, typ string)
	// ConstructChild constructs a child of @buildable with the name @name.
	//
	// Builder calls this function if a “constructor” has been specified in the
	// UI definition.
	//
	// This method is inherited from Buildable
	ConstructChild(builder Builder, name string) gextras.Objector
	// CustomFinished: this is similar to gtk_buildable_parser_finished() but is
	// called once for each custom tag handled by the @buildable.
	//
	// This method is inherited from Buildable
	CustomFinished(builder Builder, child gextras.Objector, tagname string, data interface{})
	// CustomTagEnd: this is called at the end of each custom element handled by
	// the buildable.
	//
	// This method is inherited from Buildable
	CustomTagEnd(builder Builder, child gextras.Objector, tagname string, data interface{})
	// CustomTagStart: this is called for each unknown element under <child>.
	//
	// This method is inherited from Buildable
	CustomTagStart(builder Builder, child gextras.Objector, tagname string) (glib.MarkupParser, interface{}, bool)
	// GetInternalChild: get the internal child called @childname of the
	// @buildable object.
	//
	// This method is inherited from Buildable
	GetInternalChild(builder Builder, childname string) gextras.Objector
	// GetName gets the name of the @buildable object.
	//
	// Builder sets the name based on the [GtkBuilder UI definition][BUILDER-UI]
	// used to construct the @buildable.
	//
	// This method is inherited from Buildable
	GetName() string
	// ParserFinished: called when the builder finishes the parsing of a
	// [GtkBuilder UI definition][BUILDER-UI]. Note that this will be called
	// once for each time gtk_builder_add_from_file() or
	// gtk_builder_add_from_string() is called on a builder.
	//
	// This method is inherited from Buildable
	ParserFinished(builder Builder)
	// SetBuildableProperty sets the property name @name to @value on the
	// @buildable object.
	//
	// This method is inherited from Buildable
	SetBuildableProperty(builder Builder, name string, value externglib.Value)
	// SetName sets the name of the @buildable object.
	//
	// This method is inherited from Buildable
	SetName(name string)
	// AddChild adds a child to @buildable. @type is an optional string
	// describing how the child should be added.
	//
	// This method is inherited from Buildable
	AddChild(builder Builder, child gextras.Objector, typ string)
	// ConstructChild constructs a child of @buildable with the name @name.
	//
	// Builder calls this function if a “constructor” has been specified in the
	// UI definition.
	//
	// This method is inherited from Buildable
	ConstructChild(builder Builder, name string) gextras.Objector
	// CustomFinished: this is similar to gtk_buildable_parser_finished() but is
	// called once for each custom tag handled by the @buildable.
	//
	// This method is inherited from Buildable
	CustomFinished(builder Builder, child gextras.Objector, tagname string, data interface{})
	// CustomTagEnd: this is called at the end of each custom element handled by
	// the buildable.
	//
	// This method is inherited from Buildable
	CustomTagEnd(builder Builder, child gextras.Objector, tagname string, data interface{})
	// CustomTagStart: this is called for each unknown element under <child>.
	//
	// This method is inherited from Buildable
	CustomTagStart(builder Builder, child gextras.Objector, tagname string) (glib.MarkupParser, interface{}, bool)
	// GetInternalChild: get the internal child called @childname of the
	// @buildable object.
	//
	// This method is inherited from Buildable
	GetInternalChild(builder Builder, childname string) gextras.Objector
	// GetName gets the name of the @buildable object.
	//
	// Builder sets the name based on the [GtkBuilder UI definition][BUILDER-UI]
	// used to construct the @buildable.
	//
	// This method is inherited from Buildable
	GetName() string
	// ParserFinished: called when the builder finishes the parsing of a
	// [GtkBuilder UI definition][BUILDER-UI]. Note that this will be called
	// once for each time gtk_builder_add_from_file() or
	// gtk_builder_add_from_string() is called on a builder.
	//
	// This method is inherited from Buildable
	ParserFinished(builder Builder)
	// SetBuildableProperty sets the property name @name to @value on the
	// @buildable object.
	//
	// This method is inherited from Buildable
	SetBuildableProperty(builder Builder, name string, value externglib.Value)
	// SetName sets the name of the @buildable object.
	//
	// This method is inherited from Buildable
	SetName(name string)
	// AddChild adds a child to @buildable. @type is an optional string
	// describing how the child should be added.
	//
	// This method is inherited from Buildable
	AddChild(builder Builder, child gextras.Objector, typ string)
	// ConstructChild constructs a child of @buildable with the name @name.
	//
	// Builder calls this function if a “constructor” has been specified in the
	// UI definition.
	//
	// This method is inherited from Buildable
	ConstructChild(builder Builder, name string) gextras.Objector
	// CustomFinished: this is similar to gtk_buildable_parser_finished() but is
	// called once for each custom tag handled by the @buildable.
	//
	// This method is inherited from Buildable
	CustomFinished(builder Builder, child gextras.Objector, tagname string, data interface{})
	// CustomTagEnd: this is called at the end of each custom element handled by
	// the buildable.
	//
	// This method is inherited from Buildable
	CustomTagEnd(builder Builder, child gextras.Objector, tagname string, data interface{})
	// CustomTagStart: this is called for each unknown element under <child>.
	//
	// This method is inherited from Buildable
	CustomTagStart(builder Builder, child gextras.Objector, tagname string) (glib.MarkupParser, interface{}, bool)
	// GetInternalChild: get the internal child called @childname of the
	// @buildable object.
	//
	// This method is inherited from Buildable
	GetInternalChild(builder Builder, childname string) gextras.Objector
	// GetName gets the name of the @buildable object.
	//
	// Builder sets the name based on the [GtkBuilder UI definition][BUILDER-UI]
	// used to construct the @buildable.
	//
	// This method is inherited from Buildable
	GetName() string
	// ParserFinished: called when the builder finishes the parsing of a
	// [GtkBuilder UI definition][BUILDER-UI]. Note that this will be called
	// once for each time gtk_builder_add_from_file() or
	// gtk_builder_add_from_string() is called on a builder.
	//
	// This method is inherited from Buildable
	ParserFinished(builder Builder)
	// SetBuildableProperty sets the property name @name to @value on the
	// @buildable object.
	//
	// This method is inherited from Buildable
	SetBuildableProperty(builder Builder, name string, value externglib.Value)
	// SetName sets the name of the @buildable object.
	//
	// This method is inherited from Buildable
	SetName(name string)

	// AddActionWidget adds an activatable widget to the action area of a
	// Dialog, connecting a signal handler that will emit the Dialog::response
	// signal on the dialog when the widget is activated. The widget is appended
	// to the end of the dialog’s action area. If you want to add a
	// non-activatable widget, simply pack it into the @action_area field of the
	// Dialog struct.
	AddActionWidget(child Widget, responseId int)
	// AddButton adds a button with the given text and sets things up so that
	// clicking the button will emit the Dialog::response signal with the given
	// @response_id. The button is appended to the end of the dialog’s action
	// area. The button widget is returned, but usually you don’t need it.
	AddButton(buttonText string, responseId int) Widget
	// ActionArea returns the action area of @dialog.
	//
	// Deprecated: since version 3.12.
	ActionArea() Box
	// ContentArea returns the content area of @dialog.
	ContentArea() Box
	// HeaderBar returns the header bar of @dialog. Note that the headerbar is
	// only used by the dialog if the Dialog:use-header-bar property is true.
	HeaderBar() HeaderBar
	// ResponseForWidget gets the response id of a widget in the action area of
	// a dialog.
	ResponseForWidget(widget Widget) int
	// WidgetForResponse gets the widget button that uses the given response ID
	// in the action area of a dialog.
	WidgetForResponse(responseId int) Widget
	// Response emits the Dialog::response signal with the given response ID.
	// Used to indicate that the user has responded to the dialog in some way;
	// typically either you or gtk_dialog_run() will be monitoring the
	// ::response signal and take appropriate action.
	Response(responseId int)
	// Run blocks in a recursive main loop until the @dialog either emits the
	// Dialog::response signal, or is destroyed. If the dialog is destroyed
	// during the call to gtk_dialog_run(), gtk_dialog_run() returns
	// K_RESPONSE_NONE. Otherwise, it returns the response ID from the
	// ::response signal emission.
	//
	// Before entering the recursive main loop, gtk_dialog_run() calls
	// gtk_widget_show() on the dialog for you. Note that you still need to show
	// any children of the dialog yourself.
	//
	// During gtk_dialog_run(), the default behavior of Widget::delete-event is
	// disabled; if the dialog receives ::delete_event, it will not be destroyed
	// as windows usually are, and gtk_dialog_run() will return
	// K_RESPONSE_DELETE_EVENT. Also, during gtk_dialog_run() the dialog will be
	// modal. You can force gtk_dialog_run() to return at any time by calling
	// gtk_dialog_response() to emit the ::response signal. Destroying the
	// dialog during gtk_dialog_run() is a very bad idea, because your post-run
	// code won’t know whether the dialog was destroyed or not.
	//
	// After gtk_dialog_run() returns, you are responsible for hiding or
	// destroying the dialog if you wish to do so.
	//
	// Typical usage of this function might be:
	//
	//      GtkWidget *dialog = gtk_dialog_new ();
	//      // Set up dialog...
	//
	//      int result = gtk_dialog_run (GTK_DIALOG (dialog));
	//      switch (result)
	//        {
	//          case GTK_RESPONSE_ACCEPT:
	//             // do_application_specific_something ();
	//             break;
	//          default:
	//             // do_nothing_since_dialog_was_cancelled ();
	//             break;
	//        }
	//      gtk_widget_destroy (dialog);
	//
	// Note that even though the recursive main loop gives the effect of a modal
	// dialog (it prevents the user from interacting with other windows in the
	// same window group while the dialog is run), callbacks such as timeouts,
	// IO channel watches, DND drops, etc, will be triggered during a
	// gtk_dialog_run() call.
	Run() int
	// SetAlternativeButtonOrderFromArray sets an alternative button order. If
	// the Settings:gtk-alternative-button-order setting is set to true, the
	// dialog buttons are reordered according to the order of the response ids
	// in @new_order.
	//
	// See gtk_dialog_set_alternative_button_order() for more information.
	//
	// This function is for use by language bindings.
	//
	// Deprecated: since version 3.10.
	SetAlternativeButtonOrderFromArray(newOrder []int)
	// SetDefaultResponse sets the last widget in the dialog’s action area with
	// the given @response_id as the default widget for the dialog. Pressing
	// “Enter” normally activates the default widget.
	SetDefaultResponse(responseId int)
	// SetResponseSensitive calls `gtk_widget_set_sensitive (widget, @setting)`
	// for each widget in the dialog’s action area with the given @response_id.
	// A convenient way to sensitize/desensitize dialog buttons.
	SetResponseSensitive(responseId int, setting bool)
}

// dialog implements the Dialog interface.
type dialog struct {
	*externglib.Object
}

var _ Dialog = (*dialog)(nil)

// WrapDialog wraps a GObject to a type that implements
// interface Dialog. It is primarily used internally.
func WrapDialog(obj *externglib.Object) Dialog {
	return dialog{obj}
}

func marshalDialog(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapDialog(obj), nil
}

// NewDialog creates a new dialog box.
//
// Widgets should not be packed into this Window directly, but into the @vbox
// and @action_area, as described above.
func NewDialog() Dialog {
	var _cret *C.GtkWidget // in

	_cret = C.gtk_dialog_new()

	var _dialog Dialog // out

	_dialog = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Dialog)

	return _dialog
}

func (d dialog) AsWindow() Window {
	return WrapWindow(gextras.InternObject(d))
}

func (d dialog) AsBuildable() Buildable {
	return WrapBuildable(gextras.InternObject(d))
}

func (w dialog) ActivateDefault() bool {
	return WrapWindow(gextras.InternObject(w)).ActivateDefault()
}

func (w dialog) ActivateFocus() bool {
	return WrapWindow(gextras.InternObject(w)).ActivateFocus()
}

func (w dialog) ActivateKey(event *gdk.EventKey) bool {
	return WrapWindow(gextras.InternObject(w)).ActivateKey(event)
}

func (w dialog) AddAccelGroup(accelGroup AccelGroup) {
	WrapWindow(gextras.InternObject(w)).AddAccelGroup(accelGroup)
}

func (w dialog) AddMnemonic(keyval uint, target Widget) {
	WrapWindow(gextras.InternObject(w)).AddMnemonic(keyval, target)
}

func (w dialog) BeginMoveDrag(button int, rootX int, rootY int, timestamp uint32) {
	WrapWindow(gextras.InternObject(w)).BeginMoveDrag(button, rootX, rootY, timestamp)
}

func (w dialog) BeginResizeDrag(edge gdk.WindowEdge, button int, rootX int, rootY int, timestamp uint32) {
	WrapWindow(gextras.InternObject(w)).BeginResizeDrag(edge, button, rootX, rootY, timestamp)
}

func (w dialog) Close() {
	WrapWindow(gextras.InternObject(w)).Close()
}

func (w dialog) Deiconify() {
	WrapWindow(gextras.InternObject(w)).Deiconify()
}

func (w dialog) Fullscreen() {
	WrapWindow(gextras.InternObject(w)).Fullscreen()
}

func (w dialog) FullscreenOnMonitor(screen gdk.Screen, monitor int) {
	WrapWindow(gextras.InternObject(w)).FullscreenOnMonitor(screen, monitor)
}

func (w dialog) GetAcceptFocus() bool {
	return WrapWindow(gextras.InternObject(w)).GetAcceptFocus()
}

func (w dialog) GetApplication() Application {
	return WrapWindow(gextras.InternObject(w)).GetApplication()
}

func (w dialog) GetAttachedTo() Widget {
	return WrapWindow(gextras.InternObject(w)).GetAttachedTo()
}

func (w dialog) GetDecorated() bool {
	return WrapWindow(gextras.InternObject(w)).GetDecorated()
}

func (w dialog) GetDefaultSize() (width int, height int) {
	return WrapWindow(gextras.InternObject(w)).GetDefaultSize()
}

func (w dialog) GetDefaultWidget() Widget {
	return WrapWindow(gextras.InternObject(w)).GetDefaultWidget()
}

func (w dialog) GetDeletable() bool {
	return WrapWindow(gextras.InternObject(w)).GetDeletable()
}

func (w dialog) GetDestroyWithParent() bool {
	return WrapWindow(gextras.InternObject(w)).GetDestroyWithParent()
}

func (w dialog) GetFocus() Widget {
	return WrapWindow(gextras.InternObject(w)).GetFocus()
}

func (w dialog) GetFocusOnMap() bool {
	return WrapWindow(gextras.InternObject(w)).GetFocusOnMap()
}

func (w dialog) GetFocusVisible() bool {
	return WrapWindow(gextras.InternObject(w)).GetFocusVisible()
}

func (w dialog) GetGravity() gdk.Gravity {
	return WrapWindow(gextras.InternObject(w)).GetGravity()
}

func (w dialog) GetGroup() WindowGroup {
	return WrapWindow(gextras.InternObject(w)).GetGroup()
}

func (w dialog) GetHasResizeGrip() bool {
	return WrapWindow(gextras.InternObject(w)).GetHasResizeGrip()
}

func (w dialog) GetHideTitlebarWhenMaximized() bool {
	return WrapWindow(gextras.InternObject(w)).GetHideTitlebarWhenMaximized()
}

func (w dialog) GetIcon() gdkpixbuf.Pixbuf {
	return WrapWindow(gextras.InternObject(w)).GetIcon()
}

func (w dialog) GetIconName() string {
	return WrapWindow(gextras.InternObject(w)).GetIconName()
}

func (w dialog) GetMnemonicModifier() gdk.ModifierType {
	return WrapWindow(gextras.InternObject(w)).GetMnemonicModifier()
}

func (w dialog) GetMnemonicsVisible() bool {
	return WrapWindow(gextras.InternObject(w)).GetMnemonicsVisible()
}

func (w dialog) GetModal() bool {
	return WrapWindow(gextras.InternObject(w)).GetModal()
}

func (w dialog) GetOpacity() float64 {
	return WrapWindow(gextras.InternObject(w)).GetOpacity()
}

func (w dialog) GetPosition() (rootX int, rootY int) {
	return WrapWindow(gextras.InternObject(w)).GetPosition()
}

func (w dialog) GetResizable() bool {
	return WrapWindow(gextras.InternObject(w)).GetResizable()
}

func (w dialog) GetResizeGripArea() (gdk.Rectangle, bool) {
	return WrapWindow(gextras.InternObject(w)).GetResizeGripArea()
}

func (w dialog) GetRole() string {
	return WrapWindow(gextras.InternObject(w)).GetRole()
}

func (w dialog) GetScreen() gdk.Screen {
	return WrapWindow(gextras.InternObject(w)).GetScreen()
}

func (w dialog) GetSize() (width int, height int) {
	return WrapWindow(gextras.InternObject(w)).GetSize()
}

func (w dialog) GetSkipPagerHint() bool {
	return WrapWindow(gextras.InternObject(w)).GetSkipPagerHint()
}

func (w dialog) GetSkipTaskbarHint() bool {
	return WrapWindow(gextras.InternObject(w)).GetSkipTaskbarHint()
}

func (w dialog) GetTitle() string {
	return WrapWindow(gextras.InternObject(w)).GetTitle()
}

func (w dialog) GetTitlebar() Widget {
	return WrapWindow(gextras.InternObject(w)).GetTitlebar()
}

func (w dialog) GetTransientFor() Window {
	return WrapWindow(gextras.InternObject(w)).GetTransientFor()
}

func (w dialog) GetTypeHint() gdk.WindowTypeHint {
	return WrapWindow(gextras.InternObject(w)).GetTypeHint()
}

func (w dialog) GetUrgencyHint() bool {
	return WrapWindow(gextras.InternObject(w)).GetUrgencyHint()
}

func (w dialog) GetWindowType() WindowType {
	return WrapWindow(gextras.InternObject(w)).GetWindowType()
}

func (w dialog) HasGroup() bool {
	return WrapWindow(gextras.InternObject(w)).HasGroup()
}

func (w dialog) HasToplevelFocus() bool {
	return WrapWindow(gextras.InternObject(w)).HasToplevelFocus()
}

func (w dialog) Iconify() {
	WrapWindow(gextras.InternObject(w)).Iconify()
}

func (w dialog) IsActive() bool {
	return WrapWindow(gextras.InternObject(w)).IsActive()
}

func (w dialog) IsMaximized() bool {
	return WrapWindow(gextras.InternObject(w)).IsMaximized()
}

func (w dialog) Maximize() {
	WrapWindow(gextras.InternObject(w)).Maximize()
}

func (w dialog) MnemonicActivate(keyval uint, modifier gdk.ModifierType) bool {
	return WrapWindow(gextras.InternObject(w)).MnemonicActivate(keyval, modifier)
}

func (w dialog) Move(x int, y int) {
	WrapWindow(gextras.InternObject(w)).Move(x, y)
}

func (w dialog) ParseGeometry(geometry string) bool {
	return WrapWindow(gextras.InternObject(w)).ParseGeometry(geometry)
}

func (w dialog) Present() {
	WrapWindow(gextras.InternObject(w)).Present()
}

func (w dialog) PresentWithTime(timestamp uint32) {
	WrapWindow(gextras.InternObject(w)).PresentWithTime(timestamp)
}

func (w dialog) PropagateKeyEvent(event *gdk.EventKey) bool {
	return WrapWindow(gextras.InternObject(w)).PropagateKeyEvent(event)
}

func (w dialog) RemoveAccelGroup(accelGroup AccelGroup) {
	WrapWindow(gextras.InternObject(w)).RemoveAccelGroup(accelGroup)
}

func (w dialog) RemoveMnemonic(keyval uint, target Widget) {
	WrapWindow(gextras.InternObject(w)).RemoveMnemonic(keyval, target)
}

func (w dialog) ReshowWithInitialSize() {
	WrapWindow(gextras.InternObject(w)).ReshowWithInitialSize()
}

func (w dialog) Resize(width int, height int) {
	WrapWindow(gextras.InternObject(w)).Resize(width, height)
}

func (w dialog) ResizeGripIsVisible() bool {
	return WrapWindow(gextras.InternObject(w)).ResizeGripIsVisible()
}

func (w dialog) ResizeToGeometry(width int, height int) {
	WrapWindow(gextras.InternObject(w)).ResizeToGeometry(width, height)
}

func (w dialog) SetAcceptFocus(setting bool) {
	WrapWindow(gextras.InternObject(w)).SetAcceptFocus(setting)
}

func (w dialog) SetApplication(application Application) {
	WrapWindow(gextras.InternObject(w)).SetApplication(application)
}

func (w dialog) SetAttachedTo(attachWidget Widget) {
	WrapWindow(gextras.InternObject(w)).SetAttachedTo(attachWidget)
}

func (w dialog) SetDecorated(setting bool) {
	WrapWindow(gextras.InternObject(w)).SetDecorated(setting)
}

func (w dialog) SetDefault(defaultWidget Widget) {
	WrapWindow(gextras.InternObject(w)).SetDefault(defaultWidget)
}

func (w dialog) SetDefaultGeometry(width int, height int) {
	WrapWindow(gextras.InternObject(w)).SetDefaultGeometry(width, height)
}

func (w dialog) SetDefaultSize(width int, height int) {
	WrapWindow(gextras.InternObject(w)).SetDefaultSize(width, height)
}

func (w dialog) SetDeletable(setting bool) {
	WrapWindow(gextras.InternObject(w)).SetDeletable(setting)
}

func (w dialog) SetDestroyWithParent(setting bool) {
	WrapWindow(gextras.InternObject(w)).SetDestroyWithParent(setting)
}

func (w dialog) SetFocus(focus Widget) {
	WrapWindow(gextras.InternObject(w)).SetFocus(focus)
}

func (w dialog) SetFocusOnMap(setting bool) {
	WrapWindow(gextras.InternObject(w)).SetFocusOnMap(setting)
}

func (w dialog) SetFocusVisible(setting bool) {
	WrapWindow(gextras.InternObject(w)).SetFocusVisible(setting)
}

func (w dialog) SetGeometryHints(geometryWidget Widget, geometry *gdk.Geometry, geomMask gdk.WindowHints) {
	WrapWindow(gextras.InternObject(w)).SetGeometryHints(geometryWidget, geometry, geomMask)
}

func (w dialog) SetGravity(gravity gdk.Gravity) {
	WrapWindow(gextras.InternObject(w)).SetGravity(gravity)
}

func (w dialog) SetHasResizeGrip(value bool) {
	WrapWindow(gextras.InternObject(w)).SetHasResizeGrip(value)
}

func (w dialog) SetHasUserRefCount(setting bool) {
	WrapWindow(gextras.InternObject(w)).SetHasUserRefCount(setting)
}

func (w dialog) SetHideTitlebarWhenMaximized(setting bool) {
	WrapWindow(gextras.InternObject(w)).SetHideTitlebarWhenMaximized(setting)
}

func (w dialog) SetIcon(icon gdkpixbuf.Pixbuf) {
	WrapWindow(gextras.InternObject(w)).SetIcon(icon)
}

func (w dialog) SetIconFromFile(filename string) error {
	return WrapWindow(gextras.InternObject(w)).SetIconFromFile(filename)
}

func (w dialog) SetIconName(name string) {
	WrapWindow(gextras.InternObject(w)).SetIconName(name)
}

func (w dialog) SetKeepAbove(setting bool) {
	WrapWindow(gextras.InternObject(w)).SetKeepAbove(setting)
}

func (w dialog) SetKeepBelow(setting bool) {
	WrapWindow(gextras.InternObject(w)).SetKeepBelow(setting)
}

func (w dialog) SetMnemonicModifier(modifier gdk.ModifierType) {
	WrapWindow(gextras.InternObject(w)).SetMnemonicModifier(modifier)
}

func (w dialog) SetMnemonicsVisible(setting bool) {
	WrapWindow(gextras.InternObject(w)).SetMnemonicsVisible(setting)
}

func (w dialog) SetModal(modal bool) {
	WrapWindow(gextras.InternObject(w)).SetModal(modal)
}

func (w dialog) SetOpacity(opacity float64) {
	WrapWindow(gextras.InternObject(w)).SetOpacity(opacity)
}

func (w dialog) SetPosition(position WindowPosition) {
	WrapWindow(gextras.InternObject(w)).SetPosition(position)
}

func (w dialog) SetResizable(resizable bool) {
	WrapWindow(gextras.InternObject(w)).SetResizable(resizable)
}

func (w dialog) SetRole(role string) {
	WrapWindow(gextras.InternObject(w)).SetRole(role)
}

func (w dialog) SetScreen(screen gdk.Screen) {
	WrapWindow(gextras.InternObject(w)).SetScreen(screen)
}

func (w dialog) SetSkipPagerHint(setting bool) {
	WrapWindow(gextras.InternObject(w)).SetSkipPagerHint(setting)
}

func (w dialog) SetSkipTaskbarHint(setting bool) {
	WrapWindow(gextras.InternObject(w)).SetSkipTaskbarHint(setting)
}

func (w dialog) SetStartupID(startupId string) {
	WrapWindow(gextras.InternObject(w)).SetStartupID(startupId)
}

func (w dialog) SetTitle(title string) {
	WrapWindow(gextras.InternObject(w)).SetTitle(title)
}

func (w dialog) SetTitlebar(titlebar Widget) {
	WrapWindow(gextras.InternObject(w)).SetTitlebar(titlebar)
}

func (w dialog) SetTransientFor(parent Window) {
	WrapWindow(gextras.InternObject(w)).SetTransientFor(parent)
}

func (w dialog) SetTypeHint(hint gdk.WindowTypeHint) {
	WrapWindow(gextras.InternObject(w)).SetTypeHint(hint)
}

func (w dialog) SetUrgencyHint(setting bool) {
	WrapWindow(gextras.InternObject(w)).SetUrgencyHint(setting)
}

func (w dialog) SetWmclass(wmclassName string, wmclassClass string) {
	WrapWindow(gextras.InternObject(w)).SetWmclass(wmclassName, wmclassClass)
}

func (w dialog) Stick() {
	WrapWindow(gextras.InternObject(w)).Stick()
}

func (w dialog) Unfullscreen() {
	WrapWindow(gextras.InternObject(w)).Unfullscreen()
}

func (w dialog) Unmaximize() {
	WrapWindow(gextras.InternObject(w)).Unmaximize()
}

func (w dialog) Unstick() {
	WrapWindow(gextras.InternObject(w)).Unstick()
}

func (b dialog) GetChild() Widget {
	return WrapBin(gextras.InternObject(b)).GetChild()
}

func (c dialog) Add(widget Widget) {
	WrapContainer(gextras.InternObject(c)).Add(widget)
}

func (c dialog) CheckResize() {
	WrapContainer(gextras.InternObject(c)).CheckResize()
}

func (c dialog) ChildGetProperty(child Widget, propertyName string, value externglib.Value) {
	WrapContainer(gextras.InternObject(c)).ChildGetProperty(child, propertyName, value)
}

func (c dialog) ChildNotify(child Widget, childProperty string) {
	WrapContainer(gextras.InternObject(c)).ChildNotify(child, childProperty)
}

func (c dialog) ChildSetProperty(child Widget, propertyName string, value externglib.Value) {
	WrapContainer(gextras.InternObject(c)).ChildSetProperty(child, propertyName, value)
}

func (c dialog) ChildType() externglib.Type {
	return WrapContainer(gextras.InternObject(c)).ChildType()
}

func (c dialog) Forall(callback Callback) {
	WrapContainer(gextras.InternObject(c)).Forall(callback)
}

func (c dialog) Foreach(callback Callback) {
	WrapContainer(gextras.InternObject(c)).Foreach(callback)
}

func (c dialog) GetBorderWidth() uint {
	return WrapContainer(gextras.InternObject(c)).GetBorderWidth()
}

func (c dialog) GetFocusChild() Widget {
	return WrapContainer(gextras.InternObject(c)).GetFocusChild()
}

func (c dialog) GetFocusHAdjustment() Adjustment {
	return WrapContainer(gextras.InternObject(c)).GetFocusHAdjustment()
}

func (c dialog) GetFocusVAdjustment() Adjustment {
	return WrapContainer(gextras.InternObject(c)).GetFocusVAdjustment()
}

func (c dialog) GetPathForChild(child Widget) *WidgetPath {
	return WrapContainer(gextras.InternObject(c)).GetPathForChild(child)
}

func (c dialog) GetResizeMode() ResizeMode {
	return WrapContainer(gextras.InternObject(c)).GetResizeMode()
}

func (c dialog) PropagateDraw(child Widget, cr *cairo.Context) {
	WrapContainer(gextras.InternObject(c)).PropagateDraw(child, cr)
}

func (c dialog) Remove(widget Widget) {
	WrapContainer(gextras.InternObject(c)).Remove(widget)
}

func (c dialog) ResizeChildren() {
	WrapContainer(gextras.InternObject(c)).ResizeChildren()
}

func (c dialog) SetBorderWidth(borderWidth uint) {
	WrapContainer(gextras.InternObject(c)).SetBorderWidth(borderWidth)
}

func (c dialog) SetFocusChild(child Widget) {
	WrapContainer(gextras.InternObject(c)).SetFocusChild(child)
}

func (c dialog) SetFocusHAdjustment(adjustment Adjustment) {
	WrapContainer(gextras.InternObject(c)).SetFocusHAdjustment(adjustment)
}

func (c dialog) SetFocusVAdjustment(adjustment Adjustment) {
	WrapContainer(gextras.InternObject(c)).SetFocusVAdjustment(adjustment)
}

func (c dialog) SetReallocateRedraws(needsRedraws bool) {
	WrapContainer(gextras.InternObject(c)).SetReallocateRedraws(needsRedraws)
}

func (c dialog) SetResizeMode(resizeMode ResizeMode) {
	WrapContainer(gextras.InternObject(c)).SetResizeMode(resizeMode)
}

func (c dialog) UnsetFocusChain() {
	WrapContainer(gextras.InternObject(c)).UnsetFocusChain()
}

func (w dialog) Activate() bool {
	return WrapWidget(gextras.InternObject(w)).Activate()
}

func (w dialog) AddAccelerator(accelSignal string, accelGroup AccelGroup, accelKey uint, accelMods gdk.ModifierType, accelFlags AccelFlags) {
	WrapWidget(gextras.InternObject(w)).AddAccelerator(accelSignal, accelGroup, accelKey, accelMods, accelFlags)
}

func (w dialog) AddDeviceEvents(device gdk.Device, events gdk.EventMask) {
	WrapWidget(gextras.InternObject(w)).AddDeviceEvents(device, events)
}

func (w dialog) AddEvents(events int) {
	WrapWidget(gextras.InternObject(w)).AddEvents(events)
}

func (w dialog) AddMnemonicLabel(label Widget) {
	WrapWidget(gextras.InternObject(w)).AddMnemonicLabel(label)
}

func (w dialog) CanActivateAccel(signalId uint) bool {
	return WrapWidget(gextras.InternObject(w)).CanActivateAccel(signalId)
}

func (w dialog) ChildFocus(direction DirectionType) bool {
	return WrapWidget(gextras.InternObject(w)).ChildFocus(direction)
}

func (w dialog) ChildNotify(childProperty string) {
	WrapWidget(gextras.InternObject(w)).ChildNotify(childProperty)
}

func (w dialog) ClassPath() (pathLength uint, path string, pathReversed string) {
	return WrapWidget(gextras.InternObject(w)).ClassPath()
}

func (w dialog) ComputeExpand(orientation Orientation) bool {
	return WrapWidget(gextras.InternObject(w)).ComputeExpand(orientation)
}

func (w dialog) CreatePangoContext() pango.Context {
	return WrapWidget(gextras.InternObject(w)).CreatePangoContext()
}

func (w dialog) CreatePangoLayout(text string) pango.Layout {
	return WrapWidget(gextras.InternObject(w)).CreatePangoLayout(text)
}

func (w dialog) Destroy() {
	WrapWidget(gextras.InternObject(w)).Destroy()
}

func (w dialog) DeviceIsShadowed(device gdk.Device) bool {
	return WrapWidget(gextras.InternObject(w)).DeviceIsShadowed(device)
}

func (w dialog) DragCheckThreshold(startX int, startY int, currentX int, currentY int) bool {
	return WrapWidget(gextras.InternObject(w)).DragCheckThreshold(startX, startY, currentX, currentY)
}

func (w dialog) DragDestAddImageTargets() {
	WrapWidget(gextras.InternObject(w)).DragDestAddImageTargets()
}

func (w dialog) DragDestAddTextTargets() {
	WrapWidget(gextras.InternObject(w)).DragDestAddTextTargets()
}

func (w dialog) DragDestAddURITargets() {
	WrapWidget(gextras.InternObject(w)).DragDestAddURITargets()
}

func (w dialog) DragDestGetTargetList() *TargetList {
	return WrapWidget(gextras.InternObject(w)).DragDestGetTargetList()
}

func (w dialog) DragDestGetTrackMotion() bool {
	return WrapWidget(gextras.InternObject(w)).DragDestGetTrackMotion()
}

func (w dialog) DragDestSet(flags DestDefaults, targets []TargetEntry, actions gdk.DragAction) {
	WrapWidget(gextras.InternObject(w)).DragDestSet(flags, targets, actions)
}

func (w dialog) DragDestSetProxy(proxyWindow gdk.Window, protocol gdk.DragProtocol, useCoordinates bool) {
	WrapWidget(gextras.InternObject(w)).DragDestSetProxy(proxyWindow, protocol, useCoordinates)
}

func (w dialog) DragDestSetTargetList(targetList *TargetList) {
	WrapWidget(gextras.InternObject(w)).DragDestSetTargetList(targetList)
}

func (w dialog) DragDestSetTrackMotion(trackMotion bool) {
	WrapWidget(gextras.InternObject(w)).DragDestSetTrackMotion(trackMotion)
}

func (w dialog) DragDestUnset() {
	WrapWidget(gextras.InternObject(w)).DragDestUnset()
}

func (w dialog) DragHighlight() {
	WrapWidget(gextras.InternObject(w)).DragHighlight()
}

func (w dialog) DragSourceAddImageTargets() {
	WrapWidget(gextras.InternObject(w)).DragSourceAddImageTargets()
}

func (w dialog) DragSourceAddTextTargets() {
	WrapWidget(gextras.InternObject(w)).DragSourceAddTextTargets()
}

func (w dialog) DragSourceAddURITargets() {
	WrapWidget(gextras.InternObject(w)).DragSourceAddURITargets()
}

func (w dialog) DragSourceGetTargetList() *TargetList {
	return WrapWidget(gextras.InternObject(w)).DragSourceGetTargetList()
}

func (w dialog) DragSourceSet(startButtonMask gdk.ModifierType, targets []TargetEntry, actions gdk.DragAction) {
	WrapWidget(gextras.InternObject(w)).DragSourceSet(startButtonMask, targets, actions)
}

func (w dialog) DragSourceSetIconName(iconName string) {
	WrapWidget(gextras.InternObject(w)).DragSourceSetIconName(iconName)
}

func (w dialog) DragSourceSetIconPixbuf(pixbuf gdkpixbuf.Pixbuf) {
	WrapWidget(gextras.InternObject(w)).DragSourceSetIconPixbuf(pixbuf)
}

func (w dialog) DragSourceSetIconStock(stockId string) {
	WrapWidget(gextras.InternObject(w)).DragSourceSetIconStock(stockId)
}

func (w dialog) DragSourceSetTargetList(targetList *TargetList) {
	WrapWidget(gextras.InternObject(w)).DragSourceSetTargetList(targetList)
}

func (w dialog) DragSourceUnset() {
	WrapWidget(gextras.InternObject(w)).DragSourceUnset()
}

func (w dialog) DragUnhighlight() {
	WrapWidget(gextras.InternObject(w)).DragUnhighlight()
}

func (w dialog) Draw(cr *cairo.Context) {
	WrapWidget(gextras.InternObject(w)).Draw(cr)
}

func (w dialog) EnsureStyle() {
	WrapWidget(gextras.InternObject(w)).EnsureStyle()
}

func (w dialog) ErrorBell() {
	WrapWidget(gextras.InternObject(w)).ErrorBell()
}

func (w dialog) FreezeChildNotify() {
	WrapWidget(gextras.InternObject(w)).FreezeChildNotify()
}

func (w dialog) GetAccessible() atk.Object {
	return WrapWidget(gextras.InternObject(w)).GetAccessible()
}

func (w dialog) GetActionGroup(prefix string) gio.ActionGroup {
	return WrapWidget(gextras.InternObject(w)).GetActionGroup(prefix)
}

func (w dialog) GetAllocatedBaseline() int {
	return WrapWidget(gextras.InternObject(w)).GetAllocatedBaseline()
}

func (w dialog) GetAllocatedHeight() int {
	return WrapWidget(gextras.InternObject(w)).GetAllocatedHeight()
}

func (w dialog) GetAllocatedWidth() int {
	return WrapWidget(gextras.InternObject(w)).GetAllocatedWidth()
}

func (w dialog) GetAncestor(widgetType externglib.Type) Widget {
	return WrapWidget(gextras.InternObject(w)).GetAncestor(widgetType)
}

func (w dialog) GetAppPaintable() bool {
	return WrapWidget(gextras.InternObject(w)).GetAppPaintable()
}

func (w dialog) GetCanDefault() bool {
	return WrapWidget(gextras.InternObject(w)).GetCanDefault()
}

func (w dialog) GetCanFocus() bool {
	return WrapWidget(gextras.InternObject(w)).GetCanFocus()
}

func (w dialog) GetChildRequisition() Requisition {
	return WrapWidget(gextras.InternObject(w)).GetChildRequisition()
}

func (w dialog) GetChildVisible() bool {
	return WrapWidget(gextras.InternObject(w)).GetChildVisible()
}

func (w dialog) GetCompositeName() string {
	return WrapWidget(gextras.InternObject(w)).GetCompositeName()
}

func (w dialog) GetDeviceEnabled(device gdk.Device) bool {
	return WrapWidget(gextras.InternObject(w)).GetDeviceEnabled(device)
}

func (w dialog) GetDeviceEvents(device gdk.Device) gdk.EventMask {
	return WrapWidget(gextras.InternObject(w)).GetDeviceEvents(device)
}

func (w dialog) GetDirection() TextDirection {
	return WrapWidget(gextras.InternObject(w)).GetDirection()
}

func (w dialog) GetDisplay() gdk.Display {
	return WrapWidget(gextras.InternObject(w)).GetDisplay()
}

func (w dialog) GetDoubleBuffered() bool {
	return WrapWidget(gextras.InternObject(w)).GetDoubleBuffered()
}

func (w dialog) GetEvents() int {
	return WrapWidget(gextras.InternObject(w)).GetEvents()
}

func (w dialog) GetFocusOnClick() bool {
	return WrapWidget(gextras.InternObject(w)).GetFocusOnClick()
}

func (w dialog) GetFontMap() pango.FontMap {
	return WrapWidget(gextras.InternObject(w)).GetFontMap()
}

func (w dialog) GetFontOptions() *cairo.FontOptions {
	return WrapWidget(gextras.InternObject(w)).GetFontOptions()
}

func (w dialog) GetFrameClock() gdk.FrameClock {
	return WrapWidget(gextras.InternObject(w)).GetFrameClock()
}

func (w dialog) GetHAlign() Align {
	return WrapWidget(gextras.InternObject(w)).GetHAlign()
}

func (w dialog) GetHasTooltip() bool {
	return WrapWidget(gextras.InternObject(w)).GetHasTooltip()
}

func (w dialog) GetHasWindow() bool {
	return WrapWidget(gextras.InternObject(w)).GetHasWindow()
}

func (w dialog) GetHExpand() bool {
	return WrapWidget(gextras.InternObject(w)).GetHExpand()
}

func (w dialog) GetHExpandSet() bool {
	return WrapWidget(gextras.InternObject(w)).GetHExpandSet()
}

func (w dialog) GetMapped() bool {
	return WrapWidget(gextras.InternObject(w)).GetMapped()
}

func (w dialog) GetMarginBottom() int {
	return WrapWidget(gextras.InternObject(w)).GetMarginBottom()
}

func (w dialog) GetMarginEnd() int {
	return WrapWidget(gextras.InternObject(w)).GetMarginEnd()
}

func (w dialog) GetMarginLeft() int {
	return WrapWidget(gextras.InternObject(w)).GetMarginLeft()
}

func (w dialog) GetMarginRight() int {
	return WrapWidget(gextras.InternObject(w)).GetMarginRight()
}

func (w dialog) GetMarginStart() int {
	return WrapWidget(gextras.InternObject(w)).GetMarginStart()
}

func (w dialog) GetMarginTop() int {
	return WrapWidget(gextras.InternObject(w)).GetMarginTop()
}

func (w dialog) GetModifierMask(intent gdk.ModifierIntent) gdk.ModifierType {
	return WrapWidget(gextras.InternObject(w)).GetModifierMask(intent)
}

func (w dialog) GetModifierStyle() RCStyle {
	return WrapWidget(gextras.InternObject(w)).GetModifierStyle()
}

func (w dialog) GetName() string {
	return WrapWidget(gextras.InternObject(w)).GetName()
}

func (w dialog) GetNoShowAll() bool {
	return WrapWidget(gextras.InternObject(w)).GetNoShowAll()
}

func (w dialog) GetOpacity() float64 {
	return WrapWidget(gextras.InternObject(w)).GetOpacity()
}

func (w dialog) GetPangoContext() pango.Context {
	return WrapWidget(gextras.InternObject(w)).GetPangoContext()
}

func (w dialog) GetParent() Widget {
	return WrapWidget(gextras.InternObject(w)).GetParent()
}

func (w dialog) GetParentWindow() gdk.Window {
	return WrapWidget(gextras.InternObject(w)).GetParentWindow()
}

func (w dialog) GetPath() *WidgetPath {
	return WrapWidget(gextras.InternObject(w)).GetPath()
}

func (w dialog) GetPointer() (x int, y int) {
	return WrapWidget(gextras.InternObject(w)).GetPointer()
}

func (w dialog) GetPreferredHeight() (minimumHeight int, naturalHeight int) {
	return WrapWidget(gextras.InternObject(w)).GetPreferredHeight()
}

func (w dialog) GetPreferredHeightAndBaselineForWidth(width int) (minimumHeight int, naturalHeight int, minimumBaseline int, naturalBaseline int) {
	return WrapWidget(gextras.InternObject(w)).GetPreferredHeightAndBaselineForWidth(width)
}

func (w dialog) GetPreferredHeightForWidth(width int) (minimumHeight int, naturalHeight int) {
	return WrapWidget(gextras.InternObject(w)).GetPreferredHeightForWidth(width)
}

func (w dialog) GetPreferredSize() (minimumSize Requisition, naturalSize Requisition) {
	return WrapWidget(gextras.InternObject(w)).GetPreferredSize()
}

func (w dialog) GetPreferredWidth() (minimumWidth int, naturalWidth int) {
	return WrapWidget(gextras.InternObject(w)).GetPreferredWidth()
}

func (w dialog) GetPreferredWidthForHeight(height int) (minimumWidth int, naturalWidth int) {
	return WrapWidget(gextras.InternObject(w)).GetPreferredWidthForHeight(height)
}

func (w dialog) GetRealized() bool {
	return WrapWidget(gextras.InternObject(w)).GetRealized()
}

func (w dialog) GetReceivesDefault() bool {
	return WrapWidget(gextras.InternObject(w)).GetReceivesDefault()
}

func (w dialog) GetRequestMode() SizeRequestMode {
	return WrapWidget(gextras.InternObject(w)).GetRequestMode()
}

func (w dialog) GetRequisition() Requisition {
	return WrapWidget(gextras.InternObject(w)).GetRequisition()
}

func (w dialog) GetRootWindow() gdk.Window {
	return WrapWidget(gextras.InternObject(w)).GetRootWindow()
}

func (w dialog) GetScaleFactor() int {
	return WrapWidget(gextras.InternObject(w)).GetScaleFactor()
}

func (w dialog) GetScreen() gdk.Screen {
	return WrapWidget(gextras.InternObject(w)).GetScreen()
}

func (w dialog) GetSensitive() bool {
	return WrapWidget(gextras.InternObject(w)).GetSensitive()
}

func (w dialog) GetSettings() Settings {
	return WrapWidget(gextras.InternObject(w)).GetSettings()
}

func (w dialog) GetSizeRequest() (width int, height int) {
	return WrapWidget(gextras.InternObject(w)).GetSizeRequest()
}

func (w dialog) GetState() StateType {
	return WrapWidget(gextras.InternObject(w)).GetState()
}

func (w dialog) GetStateFlags() StateFlags {
	return WrapWidget(gextras.InternObject(w)).GetStateFlags()
}

func (w dialog) GetStyle() Style {
	return WrapWidget(gextras.InternObject(w)).GetStyle()
}

func (w dialog) GetStyleContext() StyleContext {
	return WrapWidget(gextras.InternObject(w)).GetStyleContext()
}

func (w dialog) GetSupportMultidevice() bool {
	return WrapWidget(gextras.InternObject(w)).GetSupportMultidevice()
}

func (w dialog) GetTemplateChild(widgetType externglib.Type, name string) gextras.Objector {
	return WrapWidget(gextras.InternObject(w)).GetTemplateChild(widgetType, name)
}

func (w dialog) GetTooltipMarkup() string {
	return WrapWidget(gextras.InternObject(w)).GetTooltipMarkup()
}

func (w dialog) GetTooltipText() string {
	return WrapWidget(gextras.InternObject(w)).GetTooltipText()
}

func (w dialog) GetTooltipWindow() Window {
	return WrapWidget(gextras.InternObject(w)).GetTooltipWindow()
}

func (w dialog) GetToplevel() Widget {
	return WrapWidget(gextras.InternObject(w)).GetToplevel()
}

func (w dialog) GetVAlign() Align {
	return WrapWidget(gextras.InternObject(w)).GetVAlign()
}

func (w dialog) GetVAlignWithBaseline() Align {
	return WrapWidget(gextras.InternObject(w)).GetVAlignWithBaseline()
}

func (w dialog) GetVExpand() bool {
	return WrapWidget(gextras.InternObject(w)).GetVExpand()
}

func (w dialog) GetVExpandSet() bool {
	return WrapWidget(gextras.InternObject(w)).GetVExpandSet()
}

func (w dialog) GetVisible() bool {
	return WrapWidget(gextras.InternObject(w)).GetVisible()
}

func (w dialog) GetVisual() gdk.Visual {
	return WrapWidget(gextras.InternObject(w)).GetVisual()
}

func (w dialog) GetWindow() gdk.Window {
	return WrapWidget(gextras.InternObject(w)).GetWindow()
}

func (w dialog) GrabAdd() {
	WrapWidget(gextras.InternObject(w)).GrabAdd()
}

func (w dialog) GrabDefault() {
	WrapWidget(gextras.InternObject(w)).GrabDefault()
}

func (w dialog) GrabFocus() {
	WrapWidget(gextras.InternObject(w)).GrabFocus()
}

func (w dialog) GrabRemove() {
	WrapWidget(gextras.InternObject(w)).GrabRemove()
}

func (w dialog) HasDefault() bool {
	return WrapWidget(gextras.InternObject(w)).HasDefault()
}

func (w dialog) HasFocus() bool {
	return WrapWidget(gextras.InternObject(w)).HasFocus()
}

func (w dialog) HasGrab() bool {
	return WrapWidget(gextras.InternObject(w)).HasGrab()
}

func (w dialog) HasRCStyle() bool {
	return WrapWidget(gextras.InternObject(w)).HasRCStyle()
}

func (w dialog) HasScreen() bool {
	return WrapWidget(gextras.InternObject(w)).HasScreen()
}

func (w dialog) HasVisibleFocus() bool {
	return WrapWidget(gextras.InternObject(w)).HasVisibleFocus()
}

func (w dialog) Hide() {
	WrapWidget(gextras.InternObject(w)).Hide()
}

func (w dialog) HideOnDelete() bool {
	return WrapWidget(gextras.InternObject(w)).HideOnDelete()
}

func (w dialog) InDestruction() bool {
	return WrapWidget(gextras.InternObject(w)).InDestruction()
}

func (w dialog) InitTemplate() {
	WrapWidget(gextras.InternObject(w)).InitTemplate()
}

func (w dialog) InputShapeCombineRegion(region *cairo.Region) {
	WrapWidget(gextras.InternObject(w)).InputShapeCombineRegion(region)
}

func (w dialog) InsertActionGroup(name string, group gio.ActionGroup) {
	WrapWidget(gextras.InternObject(w)).InsertActionGroup(name, group)
}

func (w dialog) Intersect(area *gdk.Rectangle) (gdk.Rectangle, bool) {
	return WrapWidget(gextras.InternObject(w)).Intersect(area)
}

func (w dialog) IsAncestor(ancestor Widget) bool {
	return WrapWidget(gextras.InternObject(w)).IsAncestor(ancestor)
}

func (w dialog) IsComposited() bool {
	return WrapWidget(gextras.InternObject(w)).IsComposited()
}

func (w dialog) IsDrawable() bool {
	return WrapWidget(gextras.InternObject(w)).IsDrawable()
}

func (w dialog) IsFocus() bool {
	return WrapWidget(gextras.InternObject(w)).IsFocus()
}

func (w dialog) IsSensitive() bool {
	return WrapWidget(gextras.InternObject(w)).IsSensitive()
}

func (w dialog) IsToplevel() bool {
	return WrapWidget(gextras.InternObject(w)).IsToplevel()
}

func (w dialog) IsVisible() bool {
	return WrapWidget(gextras.InternObject(w)).IsVisible()
}

func (w dialog) KeynavFailed(direction DirectionType) bool {
	return WrapWidget(gextras.InternObject(w)).KeynavFailed(direction)
}

func (w dialog) ListActionPrefixes() []string {
	return WrapWidget(gextras.InternObject(w)).ListActionPrefixes()
}

func (w dialog) Map() {
	WrapWidget(gextras.InternObject(w)).Map()
}

func (w dialog) MnemonicActivate(groupCycling bool) bool {
	return WrapWidget(gextras.InternObject(w)).MnemonicActivate(groupCycling)
}

func (w dialog) ModifyBase(state StateType, color *gdk.Color) {
	WrapWidget(gextras.InternObject(w)).ModifyBase(state, color)
}

func (w dialog) ModifyBg(state StateType, color *gdk.Color) {
	WrapWidget(gextras.InternObject(w)).ModifyBg(state, color)
}

func (w dialog) ModifyCursor(primary *gdk.Color, secondary *gdk.Color) {
	WrapWidget(gextras.InternObject(w)).ModifyCursor(primary, secondary)
}

func (w dialog) ModifyFg(state StateType, color *gdk.Color) {
	WrapWidget(gextras.InternObject(w)).ModifyFg(state, color)
}

func (w dialog) ModifyFont(fontDesc *pango.FontDescription) {
	WrapWidget(gextras.InternObject(w)).ModifyFont(fontDesc)
}

func (w dialog) ModifyStyle(style RCStyle) {
	WrapWidget(gextras.InternObject(w)).ModifyStyle(style)
}

func (w dialog) ModifyText(state StateType, color *gdk.Color) {
	WrapWidget(gextras.InternObject(w)).ModifyText(state, color)
}

func (w dialog) OverrideBackgroundColor(state StateFlags, color *gdk.RGBA) {
	WrapWidget(gextras.InternObject(w)).OverrideBackgroundColor(state, color)
}

func (w dialog) OverrideColor(state StateFlags, color *gdk.RGBA) {
	WrapWidget(gextras.InternObject(w)).OverrideColor(state, color)
}

func (w dialog) OverrideCursor(cursor *gdk.RGBA, secondaryCursor *gdk.RGBA) {
	WrapWidget(gextras.InternObject(w)).OverrideCursor(cursor, secondaryCursor)
}

func (w dialog) OverrideFont(fontDesc *pango.FontDescription) {
	WrapWidget(gextras.InternObject(w)).OverrideFont(fontDesc)
}

func (w dialog) OverrideSymbolicColor(name string, color *gdk.RGBA) {
	WrapWidget(gextras.InternObject(w)).OverrideSymbolicColor(name, color)
}

func (w dialog) Path() (pathLength uint, path string, pathReversed string) {
	return WrapWidget(gextras.InternObject(w)).Path()
}

func (w dialog) QueueAllocate() {
	WrapWidget(gextras.InternObject(w)).QueueAllocate()
}

func (w dialog) QueueComputeExpand() {
	WrapWidget(gextras.InternObject(w)).QueueComputeExpand()
}

func (w dialog) QueueDraw() {
	WrapWidget(gextras.InternObject(w)).QueueDraw()
}

func (w dialog) QueueDrawArea(x int, y int, width int, height int) {
	WrapWidget(gextras.InternObject(w)).QueueDrawArea(x, y, width, height)
}

func (w dialog) QueueDrawRegion(region *cairo.Region) {
	WrapWidget(gextras.InternObject(w)).QueueDrawRegion(region)
}

func (w dialog) QueueResize() {
	WrapWidget(gextras.InternObject(w)).QueueResize()
}

func (w dialog) QueueResizeNoRedraw() {
	WrapWidget(gextras.InternObject(w)).QueueResizeNoRedraw()
}

func (w dialog) Realize() {
	WrapWidget(gextras.InternObject(w)).Realize()
}

func (w dialog) RegionIntersect(region *cairo.Region) *cairo.Region {
	return WrapWidget(gextras.InternObject(w)).RegionIntersect(region)
}

func (w dialog) RegisterWindow(window gdk.Window) {
	WrapWidget(gextras.InternObject(w)).RegisterWindow(window)
}

func (w dialog) RemoveAccelerator(accelGroup AccelGroup, accelKey uint, accelMods gdk.ModifierType) bool {
	return WrapWidget(gextras.InternObject(w)).RemoveAccelerator(accelGroup, accelKey, accelMods)
}

func (w dialog) RemoveMnemonicLabel(label Widget) {
	WrapWidget(gextras.InternObject(w)).RemoveMnemonicLabel(label)
}

func (w dialog) RemoveTickCallback(id uint) {
	WrapWidget(gextras.InternObject(w)).RemoveTickCallback(id)
}

func (w dialog) RenderIcon(stockId string, size int, detail string) gdkpixbuf.Pixbuf {
	return WrapWidget(gextras.InternObject(w)).RenderIcon(stockId, size, detail)
}

func (w dialog) RenderIconPixbuf(stockId string, size int) gdkpixbuf.Pixbuf {
	return WrapWidget(gextras.InternObject(w)).RenderIconPixbuf(stockId, size)
}

func (w dialog) Reparent(newParent Widget) {
	WrapWidget(gextras.InternObject(w)).Reparent(newParent)
}

func (w dialog) ResetRCStyles() {
	WrapWidget(gextras.InternObject(w)).ResetRCStyles()
}

func (w dialog) ResetStyle() {
	WrapWidget(gextras.InternObject(w)).ResetStyle()
}

func (w dialog) SetAccelPath(accelPath string, accelGroup AccelGroup) {
	WrapWidget(gextras.InternObject(w)).SetAccelPath(accelPath, accelGroup)
}

func (w dialog) SetAppPaintable(appPaintable bool) {
	WrapWidget(gextras.InternObject(w)).SetAppPaintable(appPaintable)
}

func (w dialog) SetCanDefault(canDefault bool) {
	WrapWidget(gextras.InternObject(w)).SetCanDefault(canDefault)
}

func (w dialog) SetCanFocus(canFocus bool) {
	WrapWidget(gextras.InternObject(w)).SetCanFocus(canFocus)
}

func (w dialog) SetChildVisible(isVisible bool) {
	WrapWidget(gextras.InternObject(w)).SetChildVisible(isVisible)
}

func (w dialog) SetCompositeName(name string) {
	WrapWidget(gextras.InternObject(w)).SetCompositeName(name)
}

func (w dialog) SetDeviceEnabled(device gdk.Device, enabled bool) {
	WrapWidget(gextras.InternObject(w)).SetDeviceEnabled(device, enabled)
}

func (w dialog) SetDeviceEvents(device gdk.Device, events gdk.EventMask) {
	WrapWidget(gextras.InternObject(w)).SetDeviceEvents(device, events)
}

func (w dialog) SetDirection(dir TextDirection) {
	WrapWidget(gextras.InternObject(w)).SetDirection(dir)
}

func (w dialog) SetDoubleBuffered(doubleBuffered bool) {
	WrapWidget(gextras.InternObject(w)).SetDoubleBuffered(doubleBuffered)
}

func (w dialog) SetEvents(events int) {
	WrapWidget(gextras.InternObject(w)).SetEvents(events)
}

func (w dialog) SetFocusOnClick(focusOnClick bool) {
	WrapWidget(gextras.InternObject(w)).SetFocusOnClick(focusOnClick)
}

func (w dialog) SetFontMap(fontMap pango.FontMap) {
	WrapWidget(gextras.InternObject(w)).SetFontMap(fontMap)
}

func (w dialog) SetFontOptions(options *cairo.FontOptions) {
	WrapWidget(gextras.InternObject(w)).SetFontOptions(options)
}

func (w dialog) SetHAlign(align Align) {
	WrapWidget(gextras.InternObject(w)).SetHAlign(align)
}

func (w dialog) SetHasTooltip(hasTooltip bool) {
	WrapWidget(gextras.InternObject(w)).SetHasTooltip(hasTooltip)
}

func (w dialog) SetHasWindow(hasWindow bool) {
	WrapWidget(gextras.InternObject(w)).SetHasWindow(hasWindow)
}

func (w dialog) SetHExpand(expand bool) {
	WrapWidget(gextras.InternObject(w)).SetHExpand(expand)
}

func (w dialog) SetHExpandSet(set bool) {
	WrapWidget(gextras.InternObject(w)).SetHExpandSet(set)
}

func (w dialog) SetMapped(mapped bool) {
	WrapWidget(gextras.InternObject(w)).SetMapped(mapped)
}

func (w dialog) SetMarginBottom(margin int) {
	WrapWidget(gextras.InternObject(w)).SetMarginBottom(margin)
}

func (w dialog) SetMarginEnd(margin int) {
	WrapWidget(gextras.InternObject(w)).SetMarginEnd(margin)
}

func (w dialog) SetMarginLeft(margin int) {
	WrapWidget(gextras.InternObject(w)).SetMarginLeft(margin)
}

func (w dialog) SetMarginRight(margin int) {
	WrapWidget(gextras.InternObject(w)).SetMarginRight(margin)
}

func (w dialog) SetMarginStart(margin int) {
	WrapWidget(gextras.InternObject(w)).SetMarginStart(margin)
}

func (w dialog) SetMarginTop(margin int) {
	WrapWidget(gextras.InternObject(w)).SetMarginTop(margin)
}

func (w dialog) SetName(name string) {
	WrapWidget(gextras.InternObject(w)).SetName(name)
}

func (w dialog) SetNoShowAll(noShowAll bool) {
	WrapWidget(gextras.InternObject(w)).SetNoShowAll(noShowAll)
}

func (w dialog) SetOpacity(opacity float64) {
	WrapWidget(gextras.InternObject(w)).SetOpacity(opacity)
}

func (w dialog) SetParent(parent Widget) {
	WrapWidget(gextras.InternObject(w)).SetParent(parent)
}

func (w dialog) SetParentWindow(parentWindow gdk.Window) {
	WrapWidget(gextras.InternObject(w)).SetParentWindow(parentWindow)
}

func (w dialog) SetRealized(realized bool) {
	WrapWidget(gextras.InternObject(w)).SetRealized(realized)
}

func (w dialog) SetReceivesDefault(receivesDefault bool) {
	WrapWidget(gextras.InternObject(w)).SetReceivesDefault(receivesDefault)
}

func (w dialog) SetRedrawOnAllocate(redrawOnAllocate bool) {
	WrapWidget(gextras.InternObject(w)).SetRedrawOnAllocate(redrawOnAllocate)
}

func (w dialog) SetSensitive(sensitive bool) {
	WrapWidget(gextras.InternObject(w)).SetSensitive(sensitive)
}

func (w dialog) SetSizeRequest(width int, height int) {
	WrapWidget(gextras.InternObject(w)).SetSizeRequest(width, height)
}

func (w dialog) SetState(state StateType) {
	WrapWidget(gextras.InternObject(w)).SetState(state)
}

func (w dialog) SetStateFlags(flags StateFlags, clear bool) {
	WrapWidget(gextras.InternObject(w)).SetStateFlags(flags, clear)
}

func (w dialog) SetStyle(style Style) {
	WrapWidget(gextras.InternObject(w)).SetStyle(style)
}

func (w dialog) SetSupportMultidevice(supportMultidevice bool) {
	WrapWidget(gextras.InternObject(w)).SetSupportMultidevice(supportMultidevice)
}

func (w dialog) SetTooltipMarkup(markup string) {
	WrapWidget(gextras.InternObject(w)).SetTooltipMarkup(markup)
}

func (w dialog) SetTooltipText(text string) {
	WrapWidget(gextras.InternObject(w)).SetTooltipText(text)
}

func (w dialog) SetTooltipWindow(customWindow Window) {
	WrapWidget(gextras.InternObject(w)).SetTooltipWindow(customWindow)
}

func (w dialog) SetVAlign(align Align) {
	WrapWidget(gextras.InternObject(w)).SetVAlign(align)
}

func (w dialog) SetVExpand(expand bool) {
	WrapWidget(gextras.InternObject(w)).SetVExpand(expand)
}

func (w dialog) SetVExpandSet(set bool) {
	WrapWidget(gextras.InternObject(w)).SetVExpandSet(set)
}

func (w dialog) SetVisible(visible bool) {
	WrapWidget(gextras.InternObject(w)).SetVisible(visible)
}

func (w dialog) SetVisual(visual gdk.Visual) {
	WrapWidget(gextras.InternObject(w)).SetVisual(visual)
}

func (w dialog) SetWindow(window gdk.Window) {
	WrapWidget(gextras.InternObject(w)).SetWindow(window)
}

func (w dialog) ShapeCombineRegion(region *cairo.Region) {
	WrapWidget(gextras.InternObject(w)).ShapeCombineRegion(region)
}

func (w dialog) Show() {
	WrapWidget(gextras.InternObject(w)).Show()
}

func (w dialog) ShowAll() {
	WrapWidget(gextras.InternObject(w)).ShowAll()
}

func (w dialog) ShowNow() {
	WrapWidget(gextras.InternObject(w)).ShowNow()
}

func (w dialog) SizeRequest() Requisition {
	return WrapWidget(gextras.InternObject(w)).SizeRequest()
}

func (w dialog) StyleAttach() {
	WrapWidget(gextras.InternObject(w)).StyleAttach()
}

func (w dialog) StyleGetProperty(propertyName string, value externglib.Value) {
	WrapWidget(gextras.InternObject(w)).StyleGetProperty(propertyName, value)
}

func (w dialog) ThawChildNotify() {
	WrapWidget(gextras.InternObject(w)).ThawChildNotify()
}

func (s dialog) TranslateCoordinates(destWidget Widget, srcX int, srcY int) (destX int, destY int, ok bool) {
	return WrapWidget(gextras.InternObject(s)).TranslateCoordinates(destWidget, srcX, srcY)
}

func (w dialog) TriggerTooltipQuery() {
	WrapWidget(gextras.InternObject(w)).TriggerTooltipQuery()
}

func (w dialog) Unmap() {
	WrapWidget(gextras.InternObject(w)).Unmap()
}

func (w dialog) Unparent() {
	WrapWidget(gextras.InternObject(w)).Unparent()
}

func (w dialog) Unrealize() {
	WrapWidget(gextras.InternObject(w)).Unrealize()
}

func (w dialog) UnregisterWindow(window gdk.Window) {
	WrapWidget(gextras.InternObject(w)).UnregisterWindow(window)
}

func (w dialog) UnsetStateFlags(flags StateFlags) {
	WrapWidget(gextras.InternObject(w)).UnsetStateFlags(flags)
}

func (b dialog) AddChild(builder Builder, child gextras.Objector, typ string) {
	WrapBuildable(gextras.InternObject(b)).AddChild(builder, child, typ)
}

func (b dialog) ConstructChild(builder Builder, name string) gextras.Objector {
	return WrapBuildable(gextras.InternObject(b)).ConstructChild(builder, name)
}

func (b dialog) CustomFinished(builder Builder, child gextras.Objector, tagname string, data interface{}) {
	WrapBuildable(gextras.InternObject(b)).CustomFinished(builder, child, tagname, data)
}

func (b dialog) CustomTagEnd(builder Builder, child gextras.Objector, tagname string, data interface{}) {
	WrapBuildable(gextras.InternObject(b)).CustomTagEnd(builder, child, tagname, data)
}

func (b dialog) CustomTagStart(builder Builder, child gextras.Objector, tagname string) (glib.MarkupParser, interface{}, bool) {
	return WrapBuildable(gextras.InternObject(b)).CustomTagStart(builder, child, tagname)
}

func (b dialog) GetInternalChild(builder Builder, childname string) gextras.Objector {
	return WrapBuildable(gextras.InternObject(b)).GetInternalChild(builder, childname)
}

func (b dialog) GetName() string {
	return WrapBuildable(gextras.InternObject(b)).GetName()
}

func (b dialog) ParserFinished(builder Builder) {
	WrapBuildable(gextras.InternObject(b)).ParserFinished(builder)
}

func (b dialog) SetBuildableProperty(builder Builder, name string, value externglib.Value) {
	WrapBuildable(gextras.InternObject(b)).SetBuildableProperty(builder, name, value)
}

func (b dialog) SetName(name string) {
	WrapBuildable(gextras.InternObject(b)).SetName(name)
}

func (b dialog) AddChild(builder Builder, child gextras.Objector, typ string) {
	WrapBuildable(gextras.InternObject(b)).AddChild(builder, child, typ)
}

func (b dialog) ConstructChild(builder Builder, name string) gextras.Objector {
	return WrapBuildable(gextras.InternObject(b)).ConstructChild(builder, name)
}

func (b dialog) CustomFinished(builder Builder, child gextras.Objector, tagname string, data interface{}) {
	WrapBuildable(gextras.InternObject(b)).CustomFinished(builder, child, tagname, data)
}

func (b dialog) CustomTagEnd(builder Builder, child gextras.Objector, tagname string, data interface{}) {
	WrapBuildable(gextras.InternObject(b)).CustomTagEnd(builder, child, tagname, data)
}

func (b dialog) CustomTagStart(builder Builder, child gextras.Objector, tagname string) (glib.MarkupParser, interface{}, bool) {
	return WrapBuildable(gextras.InternObject(b)).CustomTagStart(builder, child, tagname)
}

func (b dialog) GetInternalChild(builder Builder, childname string) gextras.Objector {
	return WrapBuildable(gextras.InternObject(b)).GetInternalChild(builder, childname)
}

func (b dialog) GetName() string {
	return WrapBuildable(gextras.InternObject(b)).GetName()
}

func (b dialog) ParserFinished(builder Builder) {
	WrapBuildable(gextras.InternObject(b)).ParserFinished(builder)
}

func (b dialog) SetBuildableProperty(builder Builder, name string, value externglib.Value) {
	WrapBuildable(gextras.InternObject(b)).SetBuildableProperty(builder, name, value)
}

func (b dialog) SetName(name string) {
	WrapBuildable(gextras.InternObject(b)).SetName(name)
}

func (b dialog) AddChild(builder Builder, child gextras.Objector, typ string) {
	WrapBuildable(gextras.InternObject(b)).AddChild(builder, child, typ)
}

func (b dialog) ConstructChild(builder Builder, name string) gextras.Objector {
	return WrapBuildable(gextras.InternObject(b)).ConstructChild(builder, name)
}

func (b dialog) CustomFinished(builder Builder, child gextras.Objector, tagname string, data interface{}) {
	WrapBuildable(gextras.InternObject(b)).CustomFinished(builder, child, tagname, data)
}

func (b dialog) CustomTagEnd(builder Builder, child gextras.Objector, tagname string, data interface{}) {
	WrapBuildable(gextras.InternObject(b)).CustomTagEnd(builder, child, tagname, data)
}

func (b dialog) CustomTagStart(builder Builder, child gextras.Objector, tagname string) (glib.MarkupParser, interface{}, bool) {
	return WrapBuildable(gextras.InternObject(b)).CustomTagStart(builder, child, tagname)
}

func (b dialog) GetInternalChild(builder Builder, childname string) gextras.Objector {
	return WrapBuildable(gextras.InternObject(b)).GetInternalChild(builder, childname)
}

func (b dialog) GetName() string {
	return WrapBuildable(gextras.InternObject(b)).GetName()
}

func (b dialog) ParserFinished(builder Builder) {
	WrapBuildable(gextras.InternObject(b)).ParserFinished(builder)
}

func (b dialog) SetBuildableProperty(builder Builder, name string, value externglib.Value) {
	WrapBuildable(gextras.InternObject(b)).SetBuildableProperty(builder, name, value)
}

func (b dialog) SetName(name string) {
	WrapBuildable(gextras.InternObject(b)).SetName(name)
}

func (b dialog) AddChild(builder Builder, child gextras.Objector, typ string) {
	WrapBuildable(gextras.InternObject(b)).AddChild(builder, child, typ)
}

func (b dialog) ConstructChild(builder Builder, name string) gextras.Objector {
	return WrapBuildable(gextras.InternObject(b)).ConstructChild(builder, name)
}

func (b dialog) CustomFinished(builder Builder, child gextras.Objector, tagname string, data interface{}) {
	WrapBuildable(gextras.InternObject(b)).CustomFinished(builder, child, tagname, data)
}

func (b dialog) CustomTagEnd(builder Builder, child gextras.Objector, tagname string, data interface{}) {
	WrapBuildable(gextras.InternObject(b)).CustomTagEnd(builder, child, tagname, data)
}

func (b dialog) CustomTagStart(builder Builder, child gextras.Objector, tagname string) (glib.MarkupParser, interface{}, bool) {
	return WrapBuildable(gextras.InternObject(b)).CustomTagStart(builder, child, tagname)
}

func (b dialog) GetInternalChild(builder Builder, childname string) gextras.Objector {
	return WrapBuildable(gextras.InternObject(b)).GetInternalChild(builder, childname)
}

func (b dialog) GetName() string {
	return WrapBuildable(gextras.InternObject(b)).GetName()
}

func (b dialog) ParserFinished(builder Builder) {
	WrapBuildable(gextras.InternObject(b)).ParserFinished(builder)
}

func (b dialog) SetBuildableProperty(builder Builder, name string, value externglib.Value) {
	WrapBuildable(gextras.InternObject(b)).SetBuildableProperty(builder, name, value)
}

func (b dialog) SetName(name string) {
	WrapBuildable(gextras.InternObject(b)).SetName(name)
}

func (b dialog) AddChild(builder Builder, child gextras.Objector, typ string) {
	WrapBuildable(gextras.InternObject(b)).AddChild(builder, child, typ)
}

func (b dialog) ConstructChild(builder Builder, name string) gextras.Objector {
	return WrapBuildable(gextras.InternObject(b)).ConstructChild(builder, name)
}

func (b dialog) CustomFinished(builder Builder, child gextras.Objector, tagname string, data interface{}) {
	WrapBuildable(gextras.InternObject(b)).CustomFinished(builder, child, tagname, data)
}

func (b dialog) CustomTagEnd(builder Builder, child gextras.Objector, tagname string, data interface{}) {
	WrapBuildable(gextras.InternObject(b)).CustomTagEnd(builder, child, tagname, data)
}

func (b dialog) CustomTagStart(builder Builder, child gextras.Objector, tagname string) (glib.MarkupParser, interface{}, bool) {
	return WrapBuildable(gextras.InternObject(b)).CustomTagStart(builder, child, tagname)
}

func (b dialog) GetInternalChild(builder Builder, childname string) gextras.Objector {
	return WrapBuildable(gextras.InternObject(b)).GetInternalChild(builder, childname)
}

func (b dialog) GetName() string {
	return WrapBuildable(gextras.InternObject(b)).GetName()
}

func (b dialog) ParserFinished(builder Builder) {
	WrapBuildable(gextras.InternObject(b)).ParserFinished(builder)
}

func (b dialog) SetBuildableProperty(builder Builder, name string, value externglib.Value) {
	WrapBuildable(gextras.InternObject(b)).SetBuildableProperty(builder, name, value)
}

func (b dialog) SetName(name string) {
	WrapBuildable(gextras.InternObject(b)).SetName(name)
}

func (d dialog) AddActionWidget(child Widget, responseId int) {
	var _arg0 *C.GtkDialog // out
	var _arg1 *C.GtkWidget // out
	var _arg2 C.gint       // out

	_arg0 = (*C.GtkDialog)(unsafe.Pointer(d.Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(child.Native()))
	_arg2 = C.gint(responseId)

	C.gtk_dialog_add_action_widget(_arg0, _arg1, _arg2)
}

func (d dialog) AddButton(buttonText string, responseId int) Widget {
	var _arg0 *C.GtkDialog // out
	var _arg1 *C.gchar     // out
	var _arg2 C.gint       // out
	var _cret *C.GtkWidget // in

	_arg0 = (*C.GtkDialog)(unsafe.Pointer(d.Native()))
	_arg1 = (*C.gchar)(C.CString(buttonText))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.gint(responseId)

	_cret = C.gtk_dialog_add_button(_arg0, _arg1, _arg2)

	var _widget Widget // out

	_widget = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Widget)

	return _widget
}

func (d dialog) ActionArea() Box {
	var _arg0 *C.GtkDialog // out
	var _cret *C.GtkWidget // in

	_arg0 = (*C.GtkDialog)(unsafe.Pointer(d.Native()))

	_cret = C.gtk_dialog_get_action_area(_arg0)

	var _box Box // out

	_box = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Box)

	return _box
}

func (d dialog) ContentArea() Box {
	var _arg0 *C.GtkDialog // out
	var _cret *C.GtkWidget // in

	_arg0 = (*C.GtkDialog)(unsafe.Pointer(d.Native()))

	_cret = C.gtk_dialog_get_content_area(_arg0)

	var _box Box // out

	_box = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Box)

	return _box
}

func (d dialog) HeaderBar() HeaderBar {
	var _arg0 *C.GtkDialog // out
	var _cret *C.GtkWidget // in

	_arg0 = (*C.GtkDialog)(unsafe.Pointer(d.Native()))

	_cret = C.gtk_dialog_get_header_bar(_arg0)

	var _headerBar HeaderBar // out

	_headerBar = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(HeaderBar)

	return _headerBar
}

func (d dialog) ResponseForWidget(widget Widget) int {
	var _arg0 *C.GtkDialog // out
	var _arg1 *C.GtkWidget // out
	var _cret C.gint       // in

	_arg0 = (*C.GtkDialog)(unsafe.Pointer(d.Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(widget.Native()))

	_cret = C.gtk_dialog_get_response_for_widget(_arg0, _arg1)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (d dialog) WidgetForResponse(responseId int) Widget {
	var _arg0 *C.GtkDialog // out
	var _arg1 C.gint       // out
	var _cret *C.GtkWidget // in

	_arg0 = (*C.GtkDialog)(unsafe.Pointer(d.Native()))
	_arg1 = C.gint(responseId)

	_cret = C.gtk_dialog_get_widget_for_response(_arg0, _arg1)

	var _widget Widget // out

	_widget = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Widget)

	return _widget
}

func (d dialog) Response(responseId int) {
	var _arg0 *C.GtkDialog // out
	var _arg1 C.gint       // out

	_arg0 = (*C.GtkDialog)(unsafe.Pointer(d.Native()))
	_arg1 = C.gint(responseId)

	C.gtk_dialog_response(_arg0, _arg1)
}

func (d dialog) Run() int {
	var _arg0 *C.GtkDialog // out
	var _cret C.gint       // in

	_arg0 = (*C.GtkDialog)(unsafe.Pointer(d.Native()))

	_cret = C.gtk_dialog_run(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (d dialog) SetAlternativeButtonOrderFromArray(newOrder []int) {
	var _arg0 *C.GtkDialog // out
	var _arg2 *C.gint
	var _arg1 C.gint

	_arg0 = (*C.GtkDialog)(unsafe.Pointer(d.Native()))
	_arg1 = C.gint(len(newOrder))
	_arg2 = (*C.gint)(unsafe.Pointer(&newOrder[0]))

	C.gtk_dialog_set_alternative_button_order_from_array(_arg0, _arg1, _arg2)
}

func (d dialog) SetDefaultResponse(responseId int) {
	var _arg0 *C.GtkDialog // out
	var _arg1 C.gint       // out

	_arg0 = (*C.GtkDialog)(unsafe.Pointer(d.Native()))
	_arg1 = C.gint(responseId)

	C.gtk_dialog_set_default_response(_arg0, _arg1)
}

func (d dialog) SetResponseSensitive(responseId int, setting bool) {
	var _arg0 *C.GtkDialog // out
	var _arg1 C.gint       // out
	var _arg2 C.gboolean   // out

	_arg0 = (*C.GtkDialog)(unsafe.Pointer(d.Native()))
	_arg1 = C.gint(responseId)
	if setting {
		_arg2 = C.TRUE
	}

	C.gtk_dialog_set_response_sensitive(_arg0, _arg1, _arg2)
}
