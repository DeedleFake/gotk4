// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/gdk/v3"
)

// #cgo pkg-config: gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <stdbool.h>
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

// AlternativeDialogButtonOrder returns true if dialogs are expected to use an
// alternative button order on the screen @screen. See
// gtk_dialog_set_alternative_button_order() for more details about alternative
// button order.
//
// If you need to use this function, you should probably connect to the
// ::notify:gtk-alternative-button-order signal on the Settings object
// associated to @screen, in order to be notified if the button order setting
// changes.
func AlternativeDialogButtonOrder(screen gdk.Screen) bool {
	var arg1 *C.GdkScreen

	arg1 = (*C.GdkScreen)(screen.Native())

	ret := C.gtk_alternative_dialog_button_order(arg1)

	var ret0 bool

	ret0 = C.bool(ret) != 0

	return ret0
}

type DialogPrivate struct {
	native C.GtkDialogPrivate
}

// WrapDialogPrivate wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDialogPrivate(ptr unsafe.Pointer) *DialogPrivate {
	if ptr == nil {
		return nil
	}

	return (*DialogPrivate)(ptr)
}

func marshalDialogPrivate(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDialogPrivate(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (d *DialogPrivate) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}
