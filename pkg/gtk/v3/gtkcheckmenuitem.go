// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk+-3.0 glib-2.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_check_menu_item_get_type()), F: marshalCheckMenuItem},
	})
}

// CheckMenuItem: a CheckMenuItem is a menu item that maintains the state of a
// boolean value in addition to a MenuItem usual role in activating application
// code.
//
// A check box indicating the state of the boolean value is displayed at the
// left side of the MenuItem. Activating the MenuItem toggles the value.
//
// CSS nodes
//
//    menuitem
//    ├── check.left
//    ╰── <child>
//
// GtkCheckMenuItem has a main CSS node with name menuitem, and a subnode with
// name check, which gets the .left or .right style class.
type CheckMenuItem interface {
	MenuItem
	Actionable
	Activatable
	Buildable

	// Active returns whether the check menu item is active. See
	// gtk_check_menu_item_set_active ().
	Active() bool
	// DrawAsRadio returns whether @check_menu_item looks like a RadioMenuItem
	DrawAsRadio() bool
	// Inconsistent retrieves the value set by
	// gtk_check_menu_item_set_inconsistent().
	Inconsistent() bool
	// SetActive sets the active state of the menu item’s check box.
	SetActive(isActive bool)
	// SetDrawAsRadio sets whether @check_menu_item is drawn like a
	// RadioMenuItem
	SetDrawAsRadio(drawAsRadio bool)
	// SetInconsistent: if the user has selected a range of elements (such as
	// some text or spreadsheet cells) that are affected by a boolean setting,
	// and the current values in that range are inconsistent, you may want to
	// display the check in an “in between” state. This function turns on “in
	// between” display. Normally you would turn off the inconsistent state
	// again if the user explicitly selects a setting. This has to be done
	// manually, gtk_check_menu_item_set_inconsistent() only affects visual
	// appearance, it doesn’t affect the semantics of the widget.
	SetInconsistent(setting bool)
	// Toggled emits the CheckMenuItem::toggled signal.
	Toggled()
}

// checkMenuItem implements the CheckMenuItem interface.
type checkMenuItem struct {
	MenuItem
	Actionable
	Activatable
	Buildable
}

var _ CheckMenuItem = (*checkMenuItem)(nil)

// WrapCheckMenuItem wraps a GObject to the right type. It is
// primarily used internally.
func WrapCheckMenuItem(obj *externglib.Object) CheckMenuItem {
	return CheckMenuItem{
		MenuItem:    WrapMenuItem(obj),
		Actionable:  WrapActionable(obj),
		Activatable: WrapActivatable(obj),
		Buildable:   WrapBuildable(obj),
	}
}

func marshalCheckMenuItem(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapCheckMenuItem(obj), nil
}

// Active returns whether the check menu item is active. See
// gtk_check_menu_item_set_active ().
func (c checkMenuItem) Active() bool {
	var _arg0 *C.GtkCheckMenuItem // out

	_arg0 = (*C.GtkCheckMenuItem)(unsafe.Pointer(c.Native()))

	var _cret C.gboolean // in

	_cret = C.gtk_check_menu_item_get_active(_arg0)

	var _ok bool // out

	if _cret {
		_ok = true
	}

	return _ok
}

// DrawAsRadio returns whether @check_menu_item looks like a RadioMenuItem
func (c checkMenuItem) DrawAsRadio() bool {
	var _arg0 *C.GtkCheckMenuItem // out

	_arg0 = (*C.GtkCheckMenuItem)(unsafe.Pointer(c.Native()))

	var _cret C.gboolean // in

	_cret = C.gtk_check_menu_item_get_draw_as_radio(_arg0)

	var _ok bool // out

	if _cret {
		_ok = true
	}

	return _ok
}

// Inconsistent retrieves the value set by
// gtk_check_menu_item_set_inconsistent().
func (c checkMenuItem) Inconsistent() bool {
	var _arg0 *C.GtkCheckMenuItem // out

	_arg0 = (*C.GtkCheckMenuItem)(unsafe.Pointer(c.Native()))

	var _cret C.gboolean // in

	_cret = C.gtk_check_menu_item_get_inconsistent(_arg0)

	var _ok bool // out

	if _cret {
		_ok = true
	}

	return _ok
}

// SetActive sets the active state of the menu item’s check box.
func (c checkMenuItem) SetActive(isActive bool) {
	var _arg0 *C.GtkCheckMenuItem // out
	var _arg1 C.gboolean          // out

	_arg0 = (*C.GtkCheckMenuItem)(unsafe.Pointer(c.Native()))
	if isActive {
		_arg1 = C.gboolean(1)
	}

	C.gtk_check_menu_item_set_active(_arg0, _arg1)
}

// SetDrawAsRadio sets whether @check_menu_item is drawn like a
// RadioMenuItem
func (c checkMenuItem) SetDrawAsRadio(drawAsRadio bool) {
	var _arg0 *C.GtkCheckMenuItem // out
	var _arg1 C.gboolean          // out

	_arg0 = (*C.GtkCheckMenuItem)(unsafe.Pointer(c.Native()))
	if drawAsRadio {
		_arg1 = C.gboolean(1)
	}

	C.gtk_check_menu_item_set_draw_as_radio(_arg0, _arg1)
}

// SetInconsistent: if the user has selected a range of elements (such as
// some text or spreadsheet cells) that are affected by a boolean setting,
// and the current values in that range are inconsistent, you may want to
// display the check in an “in between” state. This function turns on “in
// between” display. Normally you would turn off the inconsistent state
// again if the user explicitly selects a setting. This has to be done
// manually, gtk_check_menu_item_set_inconsistent() only affects visual
// appearance, it doesn’t affect the semantics of the widget.
func (c checkMenuItem) SetInconsistent(setting bool) {
	var _arg0 *C.GtkCheckMenuItem // out
	var _arg1 C.gboolean          // out

	_arg0 = (*C.GtkCheckMenuItem)(unsafe.Pointer(c.Native()))
	if setting {
		_arg1 = C.gboolean(1)
	}

	C.gtk_check_menu_item_set_inconsistent(_arg0, _arg1)
}

// Toggled emits the CheckMenuItem::toggled signal.
func (c checkMenuItem) Toggled() {
	var _arg0 *C.GtkCheckMenuItem // out

	_arg0 = (*C.GtkCheckMenuItem)(unsafe.Pointer(c.Native()))

	C.gtk_check_menu_item_toggled(_arg0)
}
