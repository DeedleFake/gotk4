// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/core/box"
	"github.com/diamondburned/gotk4/core/gextras"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_check_menu_item_get_type()), F: marshalCheckMenuItem},
	})
}

// CheckMenuItem: a CheckMenuItem is a menu item that maintains the state of a
// boolean value in addition to a MenuItem usual role in activating application
// code.
//
// A check box indicating the state of the boolean value is displayed at the
// left side of the MenuItem. Activating the MenuItem toggles the value.
//
// CSS nodes
//
//    menuitem
//    ├── check.left
//    ╰── <child>
//
// GtkCheckMenuItem has a main CSS node with name menuitem, and a subnode with
// name check, which gets the .left or .right style class.
type CheckMenuItem interface {
	MenuItem

	Active() bool

	DrawAsRadio() bool

	Inconsistent() bool

	SetActiveCheckMenuItem(isActive bool)

	SetDrawAsRadioCheckMenuItem(drawAsRadio bool)

	SetInconsistentCheckMenuItem(setting bool)

	ToggledCheckMenuItem()
}

// checkMenuItem implements the CheckMenuItem class.
type checkMenuItem struct {
	MenuItem
}

// WrapCheckMenuItem wraps a GObject to the right type. It is
// primarily used internally.
func WrapCheckMenuItem(obj *externglib.Object) CheckMenuItem {
	return checkMenuItem{
		MenuItem: WrapMenuItem(obj),
	}
}

func marshalCheckMenuItem(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapCheckMenuItem(obj), nil
}

func NewCheckMenuItem() CheckMenuItem {
	var _cret *C.GtkWidget // in

	_cret = C.gtk_check_menu_item_new()

	var _checkMenuItem CheckMenuItem // out

	_checkMenuItem = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(CheckMenuItem)

	return _checkMenuItem
}

func NewCheckMenuItemWithLabel(label string) CheckMenuItem {
	var _arg1 *C.gchar     // out
	var _cret *C.GtkWidget // in

	_arg1 = (*C.gchar)(C.CString(label))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_check_menu_item_new_with_label(_arg1)

	var _checkMenuItem CheckMenuItem // out

	_checkMenuItem = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(CheckMenuItem)

	return _checkMenuItem
}

func NewCheckMenuItemWithMnemonic(label string) CheckMenuItem {
	var _arg1 *C.gchar     // out
	var _cret *C.GtkWidget // in

	_arg1 = (*C.gchar)(C.CString(label))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_check_menu_item_new_with_mnemonic(_arg1)

	var _checkMenuItem CheckMenuItem // out

	_checkMenuItem = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(CheckMenuItem)

	return _checkMenuItem
}

func (c checkMenuItem) Active() bool {
	var _arg0 *C.GtkCheckMenuItem // out
	var _cret C.gboolean          // in

	_arg0 = (*C.GtkCheckMenuItem)(unsafe.Pointer(c.Native()))

	_cret = C.gtk_check_menu_item_get_active(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (c checkMenuItem) DrawAsRadio() bool {
	var _arg0 *C.GtkCheckMenuItem // out
	var _cret C.gboolean          // in

	_arg0 = (*C.GtkCheckMenuItem)(unsafe.Pointer(c.Native()))

	_cret = C.gtk_check_menu_item_get_draw_as_radio(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (c checkMenuItem) Inconsistent() bool {
	var _arg0 *C.GtkCheckMenuItem // out
	var _cret C.gboolean          // in

	_arg0 = (*C.GtkCheckMenuItem)(unsafe.Pointer(c.Native()))

	_cret = C.gtk_check_menu_item_get_inconsistent(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (c checkMenuItem) SetActiveCheckMenuItem(isActive bool) {
	var _arg0 *C.GtkCheckMenuItem // out
	var _arg1 C.gboolean          // out

	_arg0 = (*C.GtkCheckMenuItem)(unsafe.Pointer(c.Native()))
	if isActive {
		_arg1 = C.TRUE
	}

	C.gtk_check_menu_item_set_active(_arg0, _arg1)
}

func (c checkMenuItem) SetDrawAsRadioCheckMenuItem(drawAsRadio bool) {
	var _arg0 *C.GtkCheckMenuItem // out
	var _arg1 C.gboolean          // out

	_arg0 = (*C.GtkCheckMenuItem)(unsafe.Pointer(c.Native()))
	if drawAsRadio {
		_arg1 = C.TRUE
	}

	C.gtk_check_menu_item_set_draw_as_radio(_arg0, _arg1)
}

func (c checkMenuItem) SetInconsistentCheckMenuItem(setting bool) {
	var _arg0 *C.GtkCheckMenuItem // out
	var _arg1 C.gboolean          // out

	_arg0 = (*C.GtkCheckMenuItem)(unsafe.Pointer(c.Native()))
	if setting {
		_arg1 = C.TRUE
	}

	C.gtk_check_menu_item_set_inconsistent(_arg0, _arg1)
}

func (c checkMenuItem) ToggledCheckMenuItem() {
	var _arg0 *C.GtkCheckMenuItem // out

	_arg0 = (*C.GtkCheckMenuItem)(unsafe.Pointer(c.Native()))

	C.gtk_check_menu_item_toggled(_arg0)
}

func (b checkMenuItem) AddChild(builder Builder, child gextras.Objector, typ string) {
	WrapBuildable(gextras.InternObject(b)).AddChild(builder, child, typ)
}

func (b checkMenuItem) ConstructChild(builder Builder, name string) gextras.Objector {
	return WrapBuildable(gextras.InternObject(b)).ConstructChild(builder, name)
}

func (b checkMenuItem) CustomFinished(builder Builder, child gextras.Objector, tagname string, data interface{}) {
	WrapBuildable(gextras.InternObject(b)).CustomFinished(builder, child, tagname, data)
}

func (b checkMenuItem) CustomTagEnd(builder Builder, child gextras.Objector, tagname string, data *interface{}) {
	WrapBuildable(gextras.InternObject(b)).CustomTagEnd(builder, child, tagname, data)
}

func (b checkMenuItem) CustomTagStart(builder Builder, child gextras.Objector, tagname string) (glib.MarkupParser, interface{}, bool) {
	return WrapBuildable(gextras.InternObject(b)).CustomTagStart(builder, child, tagname)
}

func (b checkMenuItem) InternalChild(builder Builder, childname string) gextras.Objector {
	return WrapBuildable(gextras.InternObject(b)).InternalChild(builder, childname)
}

func (b checkMenuItem) Name() string {
	return WrapBuildable(gextras.InternObject(b)).Name()
}

func (b checkMenuItem) ParserFinished(builder Builder) {
	WrapBuildable(gextras.InternObject(b)).ParserFinished(builder)
}

func (b checkMenuItem) SetBuildableProperty(builder Builder, name string, value externglib.Value) {
	WrapBuildable(gextras.InternObject(b)).SetBuildableProperty(builder, name, value)
}

func (b checkMenuItem) SetName(name string) {
	WrapBuildable(gextras.InternObject(b)).SetName(name)
}

func (a checkMenuItem) ActionName() string {
	return WrapActionable(gextras.InternObject(a)).ActionName()
}

func (a checkMenuItem) ActionTargetValue() *glib.Variant {
	return WrapActionable(gextras.InternObject(a)).ActionTargetValue()
}

func (a checkMenuItem) SetActionName(actionName string) {
	WrapActionable(gextras.InternObject(a)).SetActionName(actionName)
}

func (a checkMenuItem) SetActionTargetValue(targetValue *glib.Variant) {
	WrapActionable(gextras.InternObject(a)).SetActionTargetValue(targetValue)
}

func (a checkMenuItem) SetDetailedActionName(detailedActionName string) {
	WrapActionable(gextras.InternObject(a)).SetDetailedActionName(detailedActionName)
}

func (b checkMenuItem) AddChild(builder Builder, child gextras.Objector, typ string) {
	WrapBuildable(gextras.InternObject(b)).AddChild(builder, child, typ)
}

func (b checkMenuItem) ConstructChild(builder Builder, name string) gextras.Objector {
	return WrapBuildable(gextras.InternObject(b)).ConstructChild(builder, name)
}

func (b checkMenuItem) CustomFinished(builder Builder, child gextras.Objector, tagname string, data interface{}) {
	WrapBuildable(gextras.InternObject(b)).CustomFinished(builder, child, tagname, data)
}

func (b checkMenuItem) CustomTagEnd(builder Builder, child gextras.Objector, tagname string, data *interface{}) {
	WrapBuildable(gextras.InternObject(b)).CustomTagEnd(builder, child, tagname, data)
}

func (b checkMenuItem) CustomTagStart(builder Builder, child gextras.Objector, tagname string) (glib.MarkupParser, interface{}, bool) {
	return WrapBuildable(gextras.InternObject(b)).CustomTagStart(builder, child, tagname)
}

func (b checkMenuItem) InternalChild(builder Builder, childname string) gextras.Objector {
	return WrapBuildable(gextras.InternObject(b)).InternalChild(builder, childname)
}

func (b checkMenuItem) Name() string {
	return WrapBuildable(gextras.InternObject(b)).Name()
}

func (b checkMenuItem) ParserFinished(builder Builder) {
	WrapBuildable(gextras.InternObject(b)).ParserFinished(builder)
}

func (b checkMenuItem) SetBuildableProperty(builder Builder, name string, value externglib.Value) {
	WrapBuildable(gextras.InternObject(b)).SetBuildableProperty(builder, name, value)
}

func (b checkMenuItem) SetName(name string) {
	WrapBuildable(gextras.InternObject(b)).SetName(name)
}

func (a checkMenuItem) DoSetRelatedAction(action Action) {
	WrapActivatable(gextras.InternObject(a)).DoSetRelatedAction(action)
}

func (a checkMenuItem) RelatedAction() Action {
	return WrapActivatable(gextras.InternObject(a)).RelatedAction()
}

func (a checkMenuItem) UseActionAppearance() bool {
	return WrapActivatable(gextras.InternObject(a)).UseActionAppearance()
}

func (a checkMenuItem) SetRelatedAction(action Action) {
	WrapActivatable(gextras.InternObject(a)).SetRelatedAction(action)
}

func (a checkMenuItem) SetUseActionAppearance(useAppearance bool) {
	WrapActivatable(gextras.InternObject(a)).SetUseActionAppearance(useAppearance)
}

func (a checkMenuItem) SyncActionProperties(action Action) {
	WrapActivatable(gextras.InternObject(a)).SyncActionProperties(action)
}
