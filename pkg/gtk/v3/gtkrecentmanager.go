// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/core/gerror"
	"github.com/diamondburned/gotk4/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_recent_manager_error_get_type()), F: marshalRecentManagerError},
		{T: externglib.Type(C.gtk_recent_manager_get_type()), F: marshalRecentManager},
		{T: externglib.Type(C.gtk_recent_info_get_type()), F: marshalRecentInfo},
	})
}

// RecentManagerError: error codes for RecentManager operations
type RecentManagerError int

const (
	// NotFound: the URI specified does not exists in the recently used
	// resources list.
	RecentManagerErrorNotFound RecentManagerError = 0
	// InvalidURI: the URI specified is not valid.
	RecentManagerErrorInvalidURI RecentManagerError = 1
	// InvalidEncoding: the supplied string is not UTF-8 encoded.
	RecentManagerErrorInvalidEncoding RecentManagerError = 2
	// NotRegistered: no application has registered the specified item.
	RecentManagerErrorNotRegistered RecentManagerError = 3
	// read: failure while reading the recently used resources file.
	RecentManagerErrorRead RecentManagerError = 4
	// write: failure while writing the recently used resources file.
	RecentManagerErrorWrite RecentManagerError = 5
	// unknown: unspecified error.
	RecentManagerErrorUnknown RecentManagerError = 6
)

func marshalRecentManagerError(p uintptr) (interface{}, error) {
	return RecentManagerError(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// RecentManager provides a facility for adding, removing and looking up
// recently used files. Each recently used file is identified by its URI, and
// has meta-data associated to it, like the names and command lines of the
// applications that have registered it, the number of time each application has
// registered the same file, the mime type of the file and whether the file
// should be displayed only by the applications that have registered it.
//
// The recently used files list is per user.
//
// The RecentManager acts like a database of all the recently used files. You
// can create new RecentManager objects, but it is more efficient to use the
// default manager created by GTK+.
//
// Adding a new recently used file is as simple as:
//
//    GtkRecentManager *manager;
//    GtkRecentInfo *info;
//    GError *error = NULL;
//
//    manager = gtk_recent_manager_get_default ();
//    info = gtk_recent_manager_lookup_item (manager, file_uri, &error);
//    if (error)
//      {
//        g_warning ("Could not find the file: s", error->message);
//        g_error_free (error);
//      }
//    else
//     {
//       // Use the info object
//       gtk_recent_info_unref (info);
//     }
//
// In order to retrieve the list of recently used files, you can use
// gtk_recent_manager_get_items(), which returns a list of RecentInfo-structs.
//
// A RecentManager is the model used to populate the contents of one, or more
// RecentChooser implementations.
//
// Note that the maximum age of the recently used files list is controllable
// through the Settings:gtk-recent-files-max-age property.
//
// Recently used files are supported since GTK+ 2.10.
type RecentManager interface {
	gextras.Objector

	AddFullRecentManager(uri string, recentData *RecentData) bool

	AddItemRecentManager(uri string) bool

	HasItemRecentManager(uri string) bool

	LookupItemRecentManager(uri string) (*RecentInfo, error)

	MoveItemRecentManager(uri string, newUri string) error

	PurgeItemsRecentManager() (int, error)

	RemoveItemRecentManager(uri string) error
}

// recentManager implements the RecentManager class.
type recentManager struct {
	gextras.Objector
}

// WrapRecentManager wraps a GObject to the right type. It is
// primarily used internally.
func WrapRecentManager(obj *externglib.Object) RecentManager {
	return recentManager{
		Objector: obj,
	}
}

func marshalRecentManager(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapRecentManager(obj), nil
}

func NewRecentManager() RecentManager {
	var _cret *C.GtkRecentManager // in

	_cret = C.gtk_recent_manager_new()

	var _recentManager RecentManager // out

	_recentManager = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(RecentManager)

	return _recentManager
}

func (m recentManager) AddFullRecentManager(uri string, recentData *RecentData) bool {
	var _arg0 *C.GtkRecentManager // out
	var _arg1 *C.gchar            // out
	var _arg2 *C.GtkRecentData    // out
	var _cret C.gboolean          // in

	_arg0 = (*C.GtkRecentManager)(unsafe.Pointer(m.Native()))
	_arg1 = (*C.gchar)(C.CString(uri))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.GtkRecentData)(unsafe.Pointer(recentData.Native()))

	_cret = C.gtk_recent_manager_add_full(_arg0, _arg1, _arg2)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (m recentManager) AddItemRecentManager(uri string) bool {
	var _arg0 *C.GtkRecentManager // out
	var _arg1 *C.gchar            // out
	var _cret C.gboolean          // in

	_arg0 = (*C.GtkRecentManager)(unsafe.Pointer(m.Native()))
	_arg1 = (*C.gchar)(C.CString(uri))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_recent_manager_add_item(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (m recentManager) HasItemRecentManager(uri string) bool {
	var _arg0 *C.GtkRecentManager // out
	var _arg1 *C.gchar            // out
	var _cret C.gboolean          // in

	_arg0 = (*C.GtkRecentManager)(unsafe.Pointer(m.Native()))
	_arg1 = (*C.gchar)(C.CString(uri))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_recent_manager_has_item(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (m recentManager) LookupItemRecentManager(uri string) (*RecentInfo, error) {
	var _arg0 *C.GtkRecentManager // out
	var _arg1 *C.gchar            // out
	var _cret *C.GtkRecentInfo    // in
	var _cerr *C.GError           // in

	_arg0 = (*C.GtkRecentManager)(unsafe.Pointer(m.Native()))
	_arg1 = (*C.gchar)(C.CString(uri))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_recent_manager_lookup_item(_arg0, _arg1, &_cerr)

	var _recentInfo *RecentInfo // out
	var _goerr error            // out

	_recentInfo = (*RecentInfo)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(&_recentInfo, func(v **RecentInfo) {
		C.free(unsafe.Pointer(v))
	})
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _recentInfo, _goerr
}

func (m recentManager) MoveItemRecentManager(uri string, newUri string) error {
	var _arg0 *C.GtkRecentManager // out
	var _arg1 *C.gchar            // out
	var _arg2 *C.gchar            // out
	var _cerr *C.GError           // in

	_arg0 = (*C.GtkRecentManager)(unsafe.Pointer(m.Native()))
	_arg1 = (*C.gchar)(C.CString(uri))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(newUri))
	defer C.free(unsafe.Pointer(_arg2))

	C.gtk_recent_manager_move_item(_arg0, _arg1, _arg2, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

func (m recentManager) PurgeItemsRecentManager() (int, error) {
	var _arg0 *C.GtkRecentManager // out
	var _cret C.gint              // in
	var _cerr *C.GError           // in

	_arg0 = (*C.GtkRecentManager)(unsafe.Pointer(m.Native()))

	_cret = C.gtk_recent_manager_purge_items(_arg0, &_cerr)

	var _gint int    // out
	var _goerr error // out

	_gint = int(_cret)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _gint, _goerr
}

func (m recentManager) RemoveItemRecentManager(uri string) error {
	var _arg0 *C.GtkRecentManager // out
	var _arg1 *C.gchar            // out
	var _cerr *C.GError           // in

	_arg0 = (*C.GtkRecentManager)(unsafe.Pointer(m.Native()))
	_arg1 = (*C.gchar)(C.CString(uri))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_recent_manager_remove_item(_arg0, _arg1, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

// RecentData: meta-data to be passed to gtk_recent_manager_add_full() when
// registering a recently used resource.
type RecentData C.GtkRecentData

// WrapRecentData wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapRecentData(ptr unsafe.Pointer) *RecentData {
	return (*RecentData)(ptr)
}

// Native returns the underlying C source pointer.
func (r *RecentData) Native() unsafe.Pointer {
	return unsafe.Pointer(r)
}

// RecentInfo contains private data only, and should be accessed using the
// provided API.
//
// RecentInfo constains all the meta-data associated with an entry in the
// recently used files list.
type RecentInfo C.GtkRecentInfo

// WrapRecentInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapRecentInfo(ptr unsafe.Pointer) *RecentInfo {
	return (*RecentInfo)(ptr)
}

func marshalRecentInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return (*RecentInfo)(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (r *RecentInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(r)
}

// Exists decreases the reference count of @info by one. If the reference count
// reaches zero, @info is deallocated, and the memory freed.
func (i *RecentInfo) Exists() bool {
	var _arg0 *C.GtkRecentInfo // out
	var _cret C.gboolean       // in

	_arg0 = (*C.GtkRecentInfo)(unsafe.Pointer(i.Native()))

	_cret = C.gtk_recent_info_exists(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Added decreases the reference count of @info by one. If the reference count
// reaches zero, @info is deallocated, and the memory freed.
func (i *RecentInfo) Added() int32 {
	var _arg0 *C.GtkRecentInfo // out
	var _cret C.time_t         // in

	_arg0 = (*C.GtkRecentInfo)(unsafe.Pointer(i.Native()))

	_cret = C.gtk_recent_info_get_added(_arg0)

	var _glong int32 // out

	_glong = int32(_cret)

	return _glong
}

// Age decreases the reference count of @info by one. If the reference count
// reaches zero, @info is deallocated, and the memory freed.
func (i *RecentInfo) Age() int {
	var _arg0 *C.GtkRecentInfo // out
	var _cret C.gint           // in

	_arg0 = (*C.GtkRecentInfo)(unsafe.Pointer(i.Native()))

	_cret = C.gtk_recent_info_get_age(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// ApplicationInfo decreases the reference count of @info by one. If the
// reference count reaches zero, @info is deallocated, and the memory freed.
func (i *RecentInfo) ApplicationInfo(appName string) (string, uint, int32, bool) {
	var _arg0 *C.GtkRecentInfo // out
	var _arg1 *C.gchar         // out
	var _arg2 *C.gchar         // in
	var _arg3 C.guint          // in
	var _arg4 C.time_t         // in
	var _cret C.gboolean       // in

	_arg0 = (*C.GtkRecentInfo)(unsafe.Pointer(i.Native()))
	_arg1 = (*C.gchar)(C.CString(appName))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_recent_info_get_application_info(_arg0, _arg1, &_arg2, &_arg3, &_arg4)

	var _appExec string // out
	var _count uint     // out
	var _time_ int32    // out
	var _ok bool        // out

	_appExec = C.GoString(_arg2)
	_count = uint(_arg3)
	_time_ = int32(_arg4)
	if _cret != 0 {
		_ok = true
	}

	return _appExec, _count, _time_, _ok
}

// Description decreases the reference count of @info by one. If the reference
// count reaches zero, @info is deallocated, and the memory freed.
func (i *RecentInfo) Description() string {
	var _arg0 *C.GtkRecentInfo // out
	var _cret *C.gchar         // in

	_arg0 = (*C.GtkRecentInfo)(unsafe.Pointer(i.Native()))

	_cret = C.gtk_recent_info_get_description(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

// DisplayName decreases the reference count of @info by one. If the reference
// count reaches zero, @info is deallocated, and the memory freed.
func (i *RecentInfo) DisplayName() string {
	var _arg0 *C.GtkRecentInfo // out
	var _cret *C.gchar         // in

	_arg0 = (*C.GtkRecentInfo)(unsafe.Pointer(i.Native()))

	_cret = C.gtk_recent_info_get_display_name(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

// Icon decreases the reference count of @info by one. If the reference count
// reaches zero, @info is deallocated, and the memory freed.
func (i *RecentInfo) Icon(size int) gdkpixbuf.Pixbuf {
	var _arg0 *C.GtkRecentInfo // out
	var _arg1 C.gint           // out
	var _cret *C.GdkPixbuf     // in

	_arg0 = (*C.GtkRecentInfo)(unsafe.Pointer(i.Native()))
	_arg1 = C.gint(size)

	_cret = C.gtk_recent_info_get_icon(_arg0, _arg1)

	var _pixbuf gdkpixbuf.Pixbuf // out

	_pixbuf = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(gdkpixbuf.Pixbuf)

	return _pixbuf
}

// MIMEType decreases the reference count of @info by one. If the reference
// count reaches zero, @info is deallocated, and the memory freed.
func (i *RecentInfo) MIMEType() string {
	var _arg0 *C.GtkRecentInfo // out
	var _cret *C.gchar         // in

	_arg0 = (*C.GtkRecentInfo)(unsafe.Pointer(i.Native()))

	_cret = C.gtk_recent_info_get_mime_type(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

// Modified decreases the reference count of @info by one. If the reference
// count reaches zero, @info is deallocated, and the memory freed.
func (i *RecentInfo) Modified() int32 {
	var _arg0 *C.GtkRecentInfo // out
	var _cret C.time_t         // in

	_arg0 = (*C.GtkRecentInfo)(unsafe.Pointer(i.Native()))

	_cret = C.gtk_recent_info_get_modified(_arg0)

	var _glong int32 // out

	_glong = int32(_cret)

	return _glong
}

// PrivateHint decreases the reference count of @info by one. If the reference
// count reaches zero, @info is deallocated, and the memory freed.
func (i *RecentInfo) PrivateHint() bool {
	var _arg0 *C.GtkRecentInfo // out
	var _cret C.gboolean       // in

	_arg0 = (*C.GtkRecentInfo)(unsafe.Pointer(i.Native()))

	_cret = C.gtk_recent_info_get_private_hint(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// ShortName decreases the reference count of @info by one. If the reference
// count reaches zero, @info is deallocated, and the memory freed.
func (i *RecentInfo) ShortName() string {
	var _arg0 *C.GtkRecentInfo // out
	var _cret *C.gchar         // in

	_arg0 = (*C.GtkRecentInfo)(unsafe.Pointer(i.Native()))

	_cret = C.gtk_recent_info_get_short_name(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// URI decreases the reference count of @info by one. If the reference count
// reaches zero, @info is deallocated, and the memory freed.
func (i *RecentInfo) URI() string {
	var _arg0 *C.GtkRecentInfo // out
	var _cret *C.gchar         // in

	_arg0 = (*C.GtkRecentInfo)(unsafe.Pointer(i.Native()))

	_cret = C.gtk_recent_info_get_uri(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

// URIDisplay decreases the reference count of @info by one. If the reference
// count reaches zero, @info is deallocated, and the memory freed.
func (i *RecentInfo) URIDisplay() string {
	var _arg0 *C.GtkRecentInfo // out
	var _cret *C.gchar         // in

	_arg0 = (*C.GtkRecentInfo)(unsafe.Pointer(i.Native()))

	_cret = C.gtk_recent_info_get_uri_display(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Visited decreases the reference count of @info by one. If the reference count
// reaches zero, @info is deallocated, and the memory freed.
func (i *RecentInfo) Visited() int32 {
	var _arg0 *C.GtkRecentInfo // out
	var _cret C.time_t         // in

	_arg0 = (*C.GtkRecentInfo)(unsafe.Pointer(i.Native()))

	_cret = C.gtk_recent_info_get_visited(_arg0)

	var _glong int32 // out

	_glong = int32(_cret)

	return _glong
}

// HasApplication decreases the reference count of @info by one. If the
// reference count reaches zero, @info is deallocated, and the memory freed.
func (i *RecentInfo) HasApplication(appName string) bool {
	var _arg0 *C.GtkRecentInfo // out
	var _arg1 *C.gchar         // out
	var _cret C.gboolean       // in

	_arg0 = (*C.GtkRecentInfo)(unsafe.Pointer(i.Native()))
	_arg1 = (*C.gchar)(C.CString(appName))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_recent_info_has_application(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// HasGroup decreases the reference count of @info by one. If the reference
// count reaches zero, @info is deallocated, and the memory freed.
func (i *RecentInfo) HasGroup(groupName string) bool {
	var _arg0 *C.GtkRecentInfo // out
	var _arg1 *C.gchar         // out
	var _cret C.gboolean       // in

	_arg0 = (*C.GtkRecentInfo)(unsafe.Pointer(i.Native()))
	_arg1 = (*C.gchar)(C.CString(groupName))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_recent_info_has_group(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// IsLocal decreases the reference count of @info by one. If the reference count
// reaches zero, @info is deallocated, and the memory freed.
func (i *RecentInfo) IsLocal() bool {
	var _arg0 *C.GtkRecentInfo // out
	var _cret C.gboolean       // in

	_arg0 = (*C.GtkRecentInfo)(unsafe.Pointer(i.Native()))

	_cret = C.gtk_recent_info_is_local(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// LastApplication decreases the reference count of @info by one. If the
// reference count reaches zero, @info is deallocated, and the memory freed.
func (i *RecentInfo) LastApplication() string {
	var _arg0 *C.GtkRecentInfo // out
	var _cret *C.gchar         // in

	_arg0 = (*C.GtkRecentInfo)(unsafe.Pointer(i.Native()))

	_cret = C.gtk_recent_info_last_application(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Match decreases the reference count of @info by one. If the reference count
// reaches zero, @info is deallocated, and the memory freed.
func (i *RecentInfo) Match(infoB *RecentInfo) bool {
	var _arg0 *C.GtkRecentInfo // out
	var _arg1 *C.GtkRecentInfo // out
	var _cret C.gboolean       // in

	_arg0 = (*C.GtkRecentInfo)(unsafe.Pointer(i.Native()))
	_arg1 = (*C.GtkRecentInfo)(unsafe.Pointer(infoB.Native()))

	_cret = C.gtk_recent_info_match(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Ref decreases the reference count of @info by one. If the reference count
// reaches zero, @info is deallocated, and the memory freed.
func (i *RecentInfo) Ref() *RecentInfo {
	var _arg0 *C.GtkRecentInfo // out
	var _cret *C.GtkRecentInfo // in

	_arg0 = (*C.GtkRecentInfo)(unsafe.Pointer(i.Native()))

	_cret = C.gtk_recent_info_ref(_arg0)

	var _recentInfo *RecentInfo // out

	_recentInfo = (*RecentInfo)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(&_recentInfo, func(v **RecentInfo) {
		C.free(unsafe.Pointer(v))
	})

	return _recentInfo
}

// Unref decreases the reference count of @info by one. If the reference count
// reaches zero, @info is deallocated, and the memory freed.
func (i *RecentInfo) Unref() {
	var _arg0 *C.GtkRecentInfo // out

	_arg0 = (*C.GtkRecentInfo)(unsafe.Pointer(i.Native()))

	C.gtk_recent_info_unref(_arg0)
}
