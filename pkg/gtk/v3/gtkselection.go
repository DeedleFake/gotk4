// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: glib-2.0 gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_target_flags_get_type()), F: marshalTargetFlags},
		{T: externglib.Type(C.gtk_target_entry_get_type()), F: marshalTargetEntry},
		{T: externglib.Type(C.gtk_target_list_get_type()), F: marshalTargetList},
	})
}

// TargetFlags: the TargetFlags enumeration is used to specify constraints on a
// TargetEntry.
type TargetFlags int

const (
	// TargetFlagsSameApp: if this is set, the target will only be selected for
	// drags within a single application.
	TargetFlagsSameApp TargetFlags = 1
	// TargetFlagsSameWidget: if this is set, the target will only be selected
	// for drags within a single widget.
	TargetFlagsSameWidget TargetFlags = 2
	// TargetFlagsOtherApp: if this is set, the target will not be selected for
	// drags within a single application.
	TargetFlagsOtherApp TargetFlags = 4
	// TargetFlagsOtherWidget: if this is set, the target will not be selected
	// for drags withing a single widget.
	TargetFlagsOtherWidget TargetFlags = 8
)

func marshalTargetFlags(p uintptr) (interface{}, error) {
	return TargetFlags(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// SelectionRemoveAll removes all handlers and unsets ownership of all
// selections for a widget. Called when widget is being destroyed. This function
// will not generally be called by applications.
func SelectionRemoveAll(widget Widget) {
	var _arg1 *C.GtkWidget // out

	_arg1 = (*C.GtkWidget)(unsafe.Pointer(widget.Native()))

	C.gtk_selection_remove_all(_arg1)
}

// TargetTableFree: this function frees a target table as returned by
// gtk_target_table_new_from_list()
func TargetTableFree(targets []TargetEntry) {
	var _arg1 *C.GtkTargetEntry
	var _arg2 C.gint

	_arg2 = C.gint(len(targets))
	_arg1 = (*C.GtkTargetEntry)(unsafe.Pointer(&targets[0]))

	C.gtk_target_table_free(_arg1, _arg2)
}

// TargetTableNewFromList: this function creates an TargetEntry array that
// contains the same targets as the passed list. The returned table is newly
// allocated and should be freed using gtk_target_table_free() when no longer
// needed.
func TargetTableNewFromList(list *TargetList) []TargetEntry {
	var _arg1 *C.GtkTargetList // out

	_arg1 = (*C.GtkTargetList)(unsafe.Pointer(list.Native()))

	var _cret *C.GtkTargetEntry
	var _arg2 C.gint // in

	_cret = C.gtk_target_table_new_from_list(_arg1, &_arg2)

	var _targetEntrys []TargetEntry

	_targetEntrys = unsafe.Slice((*TargetEntry)(unsafe.Pointer(_cret)), _arg2)
	runtime.SetFinalizer(&_targetEntrys, func(v *[]TargetEntry) {
		C.free(unsafe.Pointer(&(*v)[0]))
	})

	return _targetEntrys
}

// TargetEntry: a TargetEntry represents a single type of data than can be
// supplied for by a widget for a selection or for supplied or received during
// drag-and-drop.
type TargetEntry struct {
	native C.GtkTargetEntry
}

// WrapTargetEntry wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapTargetEntry(ptr unsafe.Pointer) *TargetEntry {
	if ptr == nil {
		return nil
	}

	return (*TargetEntry)(ptr)
}

func marshalTargetEntry(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapTargetEntry(unsafe.Pointer(b)), nil
}

// NewTargetEntry constructs a struct TargetEntry.
func NewTargetEntry(target string, flags uint, info uint) *TargetEntry {
	var _arg1 *C.gchar // out
	var _arg2 C.guint  // out
	var _arg3 C.guint  // out

	_arg1 = (*C.gchar)(C.CString(target))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.guint(flags)
	_arg3 = C.guint(info)

	var _cret *C.GtkTargetEntry // in

	_cret = C.gtk_target_entry_new(_arg1, _arg2, _arg3)

	var _targetEntry *TargetEntry // out

	_targetEntry = WrapTargetEntry(unsafe.Pointer(_cret))
	runtime.SetFinalizer(_targetEntry, func(v *TargetEntry) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return _targetEntry
}

// Native returns the underlying C source pointer.
func (t *TargetEntry) Native() unsafe.Pointer {
	return unsafe.Pointer(&t.native)
}

// Target gets the field inside the struct.
func (t *TargetEntry) Target() string {
	var v string // out
	v = C.GoString(t.native.target)
	return v
}

// Flags gets the field inside the struct.
func (t *TargetEntry) Flags() uint {
	var v uint // out
	v = (uint)(t.native.flags)
	return v
}

// Info gets the field inside the struct.
func (t *TargetEntry) Info() uint {
	var v uint // out
	v = (uint)(t.native.info)
	return v
}

// Copy makes a copy of a TargetEntry and its data.
func (d *TargetEntry) Copy() *TargetEntry {
	var _arg0 *C.GtkTargetEntry // out

	_arg0 = (*C.GtkTargetEntry)(unsafe.Pointer(d.Native()))

	var _cret *C.GtkTargetEntry // in

	_cret = C.gtk_target_entry_copy(_arg0)

	var _targetEntry *TargetEntry // out

	_targetEntry = WrapTargetEntry(unsafe.Pointer(_cret))
	runtime.SetFinalizer(_targetEntry, func(v *TargetEntry) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return _targetEntry
}

// Free frees a TargetEntry returned from gtk_target_entry_new() or
// gtk_target_entry_copy().
func (d *TargetEntry) Free() {
	var _arg0 *C.GtkTargetEntry // out

	_arg0 = (*C.GtkTargetEntry)(unsafe.Pointer(d.Native()))

	C.gtk_target_entry_free(_arg0)
}

// TargetList: a TargetList-struct is a reference counted list of TargetPair and
// should be treated as opaque.
type TargetList struct {
	native C.GtkTargetList
}

// WrapTargetList wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapTargetList(ptr unsafe.Pointer) *TargetList {
	if ptr == nil {
		return nil
	}

	return (*TargetList)(ptr)
}

func marshalTargetList(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapTargetList(unsafe.Pointer(b)), nil
}

// NewTargetList constructs a struct TargetList.
func NewTargetList(targets []TargetEntry) *TargetList {
	var _arg1 *C.GtkTargetEntry
	var _arg2 C.guint

	_arg2 = C.guint(len(targets))
	_arg1 = (*C.GtkTargetEntry)(unsafe.Pointer(&targets[0]))

	var _cret *C.GtkTargetList // in

	_cret = C.gtk_target_list_new(_arg1, _arg2)

	var _targetList *TargetList // out

	_targetList = WrapTargetList(unsafe.Pointer(_cret))
	runtime.SetFinalizer(_targetList, func(v *TargetList) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return _targetList
}

// Native returns the underlying C source pointer.
func (t *TargetList) Native() unsafe.Pointer {
	return unsafe.Pointer(&t.native)
}

// AddImageTargets appends the image targets supported by SelectionData to the
// target list. All targets are added with the same @info.
func (l *TargetList) AddImageTargets(info uint, writable bool) {
	var _arg0 *C.GtkTargetList // out
	var _arg1 C.guint          // out
	var _arg2 C.gboolean       // out

	_arg0 = (*C.GtkTargetList)(unsafe.Pointer(l.Native()))
	_arg1 = C.guint(info)
	if writable {
		_arg2 = C.TRUE
	}

	C.gtk_target_list_add_image_targets(_arg0, _arg1, _arg2)
}

// AddRichTextTargets appends the rich text targets registered with
// gtk_text_buffer_register_serialize_format() or
// gtk_text_buffer_register_deserialize_format() to the target list. All targets
// are added with the same @info.
func (l *TargetList) AddRichTextTargets(info uint, deserializable bool, buffer TextBuffer) {
	var _arg0 *C.GtkTargetList // out
	var _arg1 C.guint          // out
	var _arg2 C.gboolean       // out
	var _arg3 *C.GtkTextBuffer // out

	_arg0 = (*C.GtkTargetList)(unsafe.Pointer(l.Native()))
	_arg1 = C.guint(info)
	if deserializable {
		_arg2 = C.TRUE
	}
	_arg3 = (*C.GtkTextBuffer)(unsafe.Pointer(buffer.Native()))

	C.gtk_target_list_add_rich_text_targets(_arg0, _arg1, _arg2, _arg3)
}

// AddTable prepends a table of TargetEntry to a target list.
func (l *TargetList) AddTable(targets []TargetEntry) {
	var _arg0 *C.GtkTargetList // out
	var _arg1 *C.GtkTargetEntry
	var _arg2 C.guint

	_arg0 = (*C.GtkTargetList)(unsafe.Pointer(l.Native()))
	_arg2 = C.guint(len(targets))
	_arg1 = (*C.GtkTargetEntry)(unsafe.Pointer(&targets[0]))

	C.gtk_target_list_add_table(_arg0, _arg1, _arg2)
}

// AddTextTargets appends the text targets supported by SelectionData to the
// target list. All targets are added with the same @info.
func (l *TargetList) AddTextTargets(info uint) {
	var _arg0 *C.GtkTargetList // out
	var _arg1 C.guint          // out

	_arg0 = (*C.GtkTargetList)(unsafe.Pointer(l.Native()))
	_arg1 = C.guint(info)

	C.gtk_target_list_add_text_targets(_arg0, _arg1)
}

// AddURITargets appends the URI targets supported by SelectionData to the
// target list. All targets are added with the same @info.
func (l *TargetList) AddURITargets(info uint) {
	var _arg0 *C.GtkTargetList // out
	var _arg1 C.guint          // out

	_arg0 = (*C.GtkTargetList)(unsafe.Pointer(l.Native()))
	_arg1 = C.guint(info)

	C.gtk_target_list_add_uri_targets(_arg0, _arg1)
}

// Ref increases the reference count of a TargetList by one.
func (l *TargetList) Ref() *TargetList {
	var _arg0 *C.GtkTargetList // out

	_arg0 = (*C.GtkTargetList)(unsafe.Pointer(l.Native()))

	var _cret *C.GtkTargetList // in

	_cret = C.gtk_target_list_ref(_arg0)

	var _targetList *TargetList // out

	_targetList = WrapTargetList(unsafe.Pointer(_cret))
	runtime.SetFinalizer(_targetList, func(v *TargetList) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return _targetList
}

// Unref decreases the reference count of a TargetList by one. If the resulting
// reference count is zero, frees the list.
func (l *TargetList) Unref() {
	var _arg0 *C.GtkTargetList // out

	_arg0 = (*C.GtkTargetList)(unsafe.Pointer(l.Native()))

	C.gtk_target_list_unref(_arg0)
}

// TargetPair: a TargetPair is used to represent the same information as a table
// of TargetEntry, but in an efficient form.
type TargetPair struct {
	native C.GtkTargetPair
}

// WrapTargetPair wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapTargetPair(ptr unsafe.Pointer) *TargetPair {
	if ptr == nil {
		return nil
	}

	return (*TargetPair)(ptr)
}

// Native returns the underlying C source pointer.
func (t *TargetPair) Native() unsafe.Pointer {
	return unsafe.Pointer(&t.native)
}

// Flags gets the field inside the struct.
func (t *TargetPair) Flags() uint {
	var v uint // out
	v = (uint)(t.native.flags)
	return v
}

// Info gets the field inside the struct.
func (t *TargetPair) Info() uint {
	var v uint // out
	v = (uint)(t.native.info)
	return v
}
