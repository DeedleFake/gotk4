// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_text_attributes_get_type()), F: marshalTextAttributes},
	})
}

type TextAppearance C.GtkTextAppearance

// WrapTextAppearance wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapTextAppearance(ptr unsafe.Pointer) *TextAppearance {
	return (*TextAppearance)(ptr)
}

// Native returns the underlying C source pointer.
func (t *TextAppearance) Native() unsafe.Pointer {
	return unsafe.Pointer(t)
}

// TextAttributes: using TextAttributes directly should rarely be necessary.
// Itâ€™s primarily useful with gtk_text_iter_get_attributes(). As with most GTK+
// structs, the fields in this struct should only be read, never modified
// directly.
type TextAttributes C.GtkTextAttributes

// WrapTextAttributes wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapTextAttributes(ptr unsafe.Pointer) *TextAttributes {
	return (*TextAttributes)(ptr)
}

func marshalTextAttributes(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return (*TextAttributes)(unsafe.Pointer(b)), nil
}

// NewTextAttributes constructs a struct TextAttributes.
func NewTextAttributes() *TextAttributes {
	var _cret *C.GtkTextAttributes // in

	_cret = C.gtk_text_attributes_new()

	var _textAttributes *TextAttributes // out

	_textAttributes = (*TextAttributes)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(&_textAttributes, func(v **TextAttributes) {
		C.free(unsafe.Pointer(v))
	})

	return _textAttributes
}

// Native returns the underlying C source pointer.
func (t *TextAttributes) Native() unsafe.Pointer {
	return unsafe.Pointer(t)
}

// Copy decrements the reference count on @values, freeing the structure if the
// reference count reaches 0.
func (v *TextAttributes) Copy() *TextAttributes {
	var _arg0 *C.GtkTextAttributes // out
	var _cret *C.GtkTextAttributes // in

	_arg0 = (*C.GtkTextAttributes)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_text_attributes_copy(_arg0)

	var _textAttributes *TextAttributes // out

	_textAttributes = (*TextAttributes)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(&_textAttributes, func(v **TextAttributes) {
		C.free(unsafe.Pointer(v))
	})

	return _textAttributes
}

// CopyValues decrements the reference count on @values, freeing the structure
// if the reference count reaches 0.
func (v *TextAttributes) CopyValues(dest *TextAttributes) {
	var _arg0 *C.GtkTextAttributes // out
	var _arg1 *C.GtkTextAttributes // out

	_arg0 = (*C.GtkTextAttributes)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GtkTextAttributes)(unsafe.Pointer(dest.Native()))

	C.gtk_text_attributes_copy_values(_arg0, _arg1)
}

// Ref decrements the reference count on @values, freeing the structure if the
// reference count reaches 0.
func (v *TextAttributes) Ref() *TextAttributes {
	var _arg0 *C.GtkTextAttributes // out
	var _cret *C.GtkTextAttributes // in

	_arg0 = (*C.GtkTextAttributes)(unsafe.Pointer(v.Native()))

	_cret = C.gtk_text_attributes_ref(_arg0)

	var _textAttributes *TextAttributes // out

	_textAttributes = (*TextAttributes)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(&_textAttributes, func(v **TextAttributes) {
		C.free(unsafe.Pointer(v))
	})

	return _textAttributes
}

// Unref decrements the reference count on @values, freeing the structure if the
// reference count reaches 0.
func (v *TextAttributes) Unref() {
	var _arg0 *C.GtkTextAttributes // out

	_arg0 = (*C.GtkTextAttributes)(unsafe.Pointer(v.Native()))

	C.gtk_text_attributes_unref(_arg0)
}
