// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/gdk/v3"
	"github.com/diamondburned/gotk4/pkg/pango"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_text_attributes_get_type()), F: marshalTextAttributes},
	})
}

type TextAppearance struct {
	native C.GtkTextAppearance
}

// WrapTextAppearance wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapTextAppearance(ptr unsafe.Pointer) *TextAppearance {
	if ptr == nil {
		return nil
	}

	return (*TextAppearance)(ptr)
}

func marshalTextAppearance(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapTextAppearance(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (t *TextAppearance) Native() unsafe.Pointer {
	return unsafe.Pointer(&t.native)
}

// BgColor gets the field inside the struct.
func (t *TextAppearance) BgColor() gdk.Color {
	var ret gdk.Color
	{
		ret = gdk.WrapColor(unsafe.Pointer(t.native.bg_color))
	}
	return ret
}

// FgColor gets the field inside the struct.
func (t *TextAppearance) FgColor() gdk.Color {
	var ret gdk.Color
	{
		ret = gdk.WrapColor(unsafe.Pointer(t.native.fg_color))
	}
	return ret
}

// Rise gets the field inside the struct.
func (t *TextAppearance) Rise() int {
	var ret int
	ret = int(t.native.rise)
	return ret
}

// TextAttributes: using TextAttributes directly should rarely be necessary.
// Itâ€™s primarily useful with gtk_text_iter_get_attributes(). As with most GTK+
// structs, the fields in this struct should only be read, never modified
// directly.
type TextAttributes struct {
	native C.GtkTextAttributes
}

// WrapTextAttributes wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapTextAttributes(ptr unsafe.Pointer) *TextAttributes {
	if ptr == nil {
		return nil
	}

	return (*TextAttributes)(ptr)
}

func marshalTextAttributes(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapTextAttributes(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (t *TextAttributes) Native() unsafe.Pointer {
	return unsafe.Pointer(&t.native)
}

// NewTextAttributes constructs a struct TextAttributes.
func NewTextAttributes() *TextAttributes {
	ret := C.gtk_text_attributes_new()

	var ret0 *TextAttributes

	{
		ret0 = WrapTextAttributes(unsafe.Pointer(ret))
		runtime.SetFinalizer(ret0, func(v *TextAttributes) {
			C.free(unsafe.Pointer(v.Native()))
		})
	}

	return ret0
}

// Appearance gets the field inside the struct.
func (t *TextAttributes) Appearance() TextAppearance {
	var ret TextAppearance
	{
		ret = WrapTextAppearance(unsafe.Pointer(t.native.appearance))
	}
	return ret
}

// Justification gets the field inside the struct.
func (t *TextAttributes) Justification() Justification {
	var ret Justification
	ret = Justification(t.native.justification)
	return ret
}

// Direction gets the field inside the struct.
func (t *TextAttributes) Direction() TextDirection {
	var ret TextDirection
	ret = TextDirection(t.native.direction)
	return ret
}

// Font gets the field inside the struct.
func (t *TextAttributes) Font() *pango.FontDescription {
	var ret *pango.FontDescription
	{
		ret = pango.WrapFontDescription(unsafe.Pointer(t.native.font))
	}
	return ret
}

// FontScale gets the field inside the struct.
func (t *TextAttributes) FontScale() float64 {
	var ret float64
	ret = float64(t.native.font_scale)
	return ret
}

// LeftMargin gets the field inside the struct.
func (t *TextAttributes) LeftMargin() int {
	var ret int
	ret = int(t.native.left_margin)
	return ret
}

// RightMargin gets the field inside the struct.
func (t *TextAttributes) RightMargin() int {
	var ret int
	ret = int(t.native.right_margin)
	return ret
}

// Indent gets the field inside the struct.
func (t *TextAttributes) Indent() int {
	var ret int
	ret = int(t.native.indent)
	return ret
}

// PixelsAboveLines gets the field inside the struct.
func (t *TextAttributes) PixelsAboveLines() int {
	var ret int
	ret = int(t.native.pixels_above_lines)
	return ret
}

// PixelsBelowLines gets the field inside the struct.
func (t *TextAttributes) PixelsBelowLines() int {
	var ret int
	ret = int(t.native.pixels_below_lines)
	return ret
}

// PixelsInsideWrap gets the field inside the struct.
func (t *TextAttributes) PixelsInsideWrap() int {
	var ret int
	ret = int(t.native.pixels_inside_wrap)
	return ret
}

// Tabs gets the field inside the struct.
func (t *TextAttributes) Tabs() *pango.TabArray {
	var ret *pango.TabArray
	{
		ret = pango.WrapTabArray(unsafe.Pointer(t.native.tabs))
	}
	return ret
}

// WrapMode gets the field inside the struct.
func (t *TextAttributes) WrapMode() WrapMode {
	var ret WrapMode
	ret = WrapMode(t.native.wrap_mode)
	return ret
}

// Language gets the field inside the struct.
func (t *TextAttributes) Language() *pango.Language {
	var ret *pango.Language
	{
		ret = pango.WrapLanguage(unsafe.Pointer(t.native.language))
	}
	return ret
}

// LetterSpacing gets the field inside the struct.
func (t *TextAttributes) LetterSpacing() int {
	var ret int
	ret = int(t.native.letter_spacing)
	return ret
}

// Copy copies @src and returns a new TextAttributes.
func (s *TextAttributes) Copy() *TextAttributes {
	var arg0 *C.GtkTextAttributes

	arg0 = (*C.GtkTextAttributes)(s.Native())

	ret := C.gtk_text_attributes_copy(arg0)

	var ret0 *TextAttributes

	{
		ret0 = WrapTextAttributes(unsafe.Pointer(ret))
		runtime.SetFinalizer(ret0, func(v *TextAttributes) {
			C.free(unsafe.Pointer(v.Native()))
		})
	}

	return ret0
}

// CopyValues copies the values from @src to @dest so that @dest has the same
// values as @src. Frees existing values in @dest.
func (s *TextAttributes) CopyValues(dest *TextAttributes) {
	var arg0 *C.GtkTextAttributes
	var arg1 *C.GtkTextAttributes

	arg0 = (*C.GtkTextAttributes)(s.Native())
	arg1 = (*C.GtkTextAttributes)(dest.Native())

	C.gtk_text_attributes_copy_values(arg0, arg1)
}

// Ref increments the reference count on @values.
func (v *TextAttributes) Ref() *TextAttributes {
	var arg0 *C.GtkTextAttributes

	arg0 = (*C.GtkTextAttributes)(v.Native())

	ret := C.gtk_text_attributes_ref(arg0)

	var ret0 *TextAttributes

	{
		ret0 = WrapTextAttributes(unsafe.Pointer(ret))
		runtime.SetFinalizer(ret0, func(v *TextAttributes) {
			C.free(unsafe.Pointer(v.Native()))
		})
	}

	return ret0
}

// Unref decrements the reference count on @values, freeing the structure if the
// reference count reaches 0.
func (v *TextAttributes) Unref() {
	var arg0 *C.GtkTextAttributes

	arg0 = (*C.GtkTextAttributes)(v.Native())

	C.gtk_text_attributes_unref(arg0)
}
