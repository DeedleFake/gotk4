// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_spinner_accessible_get_type()), F: marshalSpinnerAccessibler},
	})
}

// SpinnerAccessibler describes SpinnerAccessible's methods.
type SpinnerAccessibler interface {
	gextras.Objector

	privateSpinnerAccessible()
}

type SpinnerAccessible struct {
	*externglib.Object

	WidgetAccessible
	atk.Component
	atk.Image
}

var _ SpinnerAccessibler = (*SpinnerAccessible)(nil)

func wrapSpinnerAccessibler(obj *externglib.Object) SpinnerAccessibler {
	return &SpinnerAccessible{
		Object: obj,
		WidgetAccessible: WidgetAccessible{
			Accessible: Accessible{
				ObjectClass: atk.ObjectClass{
					Object: obj,
				},
			},
			Component: atk.Component{
				Object: obj,
			},
		},
		Component: atk.Component{
			Object: obj,
		},
		Image: atk.Image{
			Object: obj,
		},
	}
}

func marshalSpinnerAccessibler(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapSpinnerAccessibler(obj), nil
}

func (*SpinnerAccessible) privateSpinnerAccessible() {}
