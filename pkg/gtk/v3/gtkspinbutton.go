// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_spin_button_get_type()), F: marshalSpinButton},
	})
}

// SpinButton: a SpinButton is an ideal way to allow the user to set the value
// of some attribute. Rather than having to directly type a number into a Entry,
// GtkSpinButton allows the user to click on one of two arrows to increment or
// decrement the displayed value. A value can still be typed in, with the bonus
// that it can be checked to ensure it is in a given range.
//
// The main properties of a GtkSpinButton are through an adjustment. See the
// Adjustment section for more details about an adjustment's properties. Note
// that GtkSpinButton will by default make its entry large enough to accomodate
// the lower and upper bounds of the adjustment, which can lead to surprising
// results. Best practice is to set both the Entry:width-chars and
// Entry:max-width-chars poperties to the desired number of characters to
// display in the entry.
//
// CSS nodes
//
//    // Provides a function to retrieve a floating point value from a
//    // GtkSpinButton, and creates a high precision spin button.
//
//    gfloat
//    grab_float_value (GtkSpinButton *button,
//                      gpointer       user_data)
//    {
//      return gtk_spin_button_get_value (button);
//    }
//
//    void
//    create_floating_spin_button (void)
//    {
//      GtkWidget *window, *button;
//      GtkAdjustment *adjustment;
//
//      adjustment = gtk_adjustment_new (2.500, 0.0, 5.0, 0.001, 0.1, 0.0);
//
//      window = gtk_window_new (GTK_WINDOW_TOPLEVEL);
//      gtk_container_set_border_width (GTK_CONTAINER (window), 5);
//
//      // creates the spinbutton, with three decimal places
//      button = gtk_spin_button_new (adjustment, 0.001, 3);
//      gtk_container_add (GTK_CONTAINER (window), button);
//
//      gtk_widget_show_all (window);
//    }
type SpinButton interface {
	Entry
	Buildable
	CellEditable
	Editable
	Orientable

	// Configure changes the properties of an existing spin button. The
	// adjustment, climb rate, and number of decimal places are updated
	// accordingly.
	Configure(adjustment Adjustment, climbRate float64, digits uint)
	// Digits fetches the precision of @spin_button. See
	// gtk_spin_button_set_digits().
	Digits() uint
	// Increments gets the current step and page the increments used by
	// @spin_button. See gtk_spin_button_set_increments().
	Increments() (step float64, page float64)
	// Numeric returns whether non-numeric text can be typed into the spin
	// button. See gtk_spin_button_set_numeric().
	Numeric() bool
	// Range gets the range allowed for @spin_button. See
	// gtk_spin_button_set_range().
	Range() (min float64, max float64)
	// SnapToTicks returns whether the values are corrected to the nearest step.
	// See gtk_spin_button_set_snap_to_ticks().
	SnapToTicks() bool
	// Value: get the value in the @spin_button.
	Value() float64
	// ValueAsInt: get the value @spin_button represented as an integer.
	ValueAsInt() int
	// Wrap returns whether the spin button’s value wraps around to the opposite
	// limit when the upper or lower limit of the range is exceeded. See
	// gtk_spin_button_set_wrap().
	Wrap() bool
	// SetAdjustment replaces the Adjustment associated with @spin_button.
	SetAdjustment(adjustment Adjustment)
	// SetDigits: set the precision to be displayed by @spin_button. Up to 20
	// digit precision is allowed.
	SetDigits(digits uint)
	// SetIncrements sets the step and page increments for spin_button. This
	// affects how quickly the value changes when the spin button’s arrows are
	// activated.
	SetIncrements(step float64, page float64)
	// SetNumeric sets the flag that determines if non-numeric text can be typed
	// into the spin button.
	SetNumeric(numeric bool)
	// SetRange sets the minimum and maximum allowable values for @spin_button.
	//
	// If the current value is outside this range, it will be adjusted to fit
	// within the range, otherwise it will remain unchanged.
	SetRange(min float64, max float64)
	// SetSnapToTicks sets the policy as to whether values are corrected to the
	// nearest step increment when a spin button is activated after providing an
	// invalid value.
	SetSnapToTicks(snapToTicks bool)
	// SetUpdatePolicy sets the update behavior of a spin button. This
	// determines whether the spin button is always updated or only when a valid
	// value is set.
	SetUpdatePolicy(policy SpinButtonUpdatePolicy)
	// SetValue sets the value of @spin_button.
	SetValue(value float64)
	// SetWrap sets the flag that determines if a spin button value wraps around
	// to the opposite limit when the upper or lower limit of the range is
	// exceeded.
	SetWrap(wrap bool)
	// Spin: increment or decrement a spin button’s value in a specified
	// direction by a specified amount.
	Spin(direction SpinType, increment float64)
	// Update: manually force an update of the spin button.
	Update()
}

// spinButton implements the SpinButton interface.
type spinButton struct {
	Entry
	Buildable
	CellEditable
	Editable
	Orientable
}

var _ SpinButton = (*spinButton)(nil)

// WrapSpinButton wraps a GObject to the right type. It is
// primarily used internally.
func WrapSpinButton(obj *externglib.Object) SpinButton {
	return SpinButton{
		Entry:        WrapEntry(obj),
		Buildable:    WrapBuildable(obj),
		CellEditable: WrapCellEditable(obj),
		Editable:     WrapEditable(obj),
		Orientable:   WrapOrientable(obj),
	}
}

func marshalSpinButton(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapSpinButton(obj), nil
}

// Configure changes the properties of an existing spin button. The
// adjustment, climb rate, and number of decimal places are updated
// accordingly.
func (s spinButton) Configure(adjustment Adjustment, climbRate float64, digits uint) {
	var _arg0 *C.GtkSpinButton
	var _arg1 *C.GtkAdjustment
	var _arg2 C.gdouble
	var _arg3 C.guint

	_arg0 = (*C.GtkSpinButton)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GtkAdjustment)(unsafe.Pointer(adjustment.Native()))
	_arg2 = C.gdouble(climbRate)
	_arg3 = C.guint(digits)

	C.gtk_spin_button_configure(_arg0, _arg1, _arg2, _arg3)
}

// Digits fetches the precision of @spin_button. See
// gtk_spin_button_set_digits().
func (s spinButton) Digits() uint {
	var _arg0 *C.GtkSpinButton

	_arg0 = (*C.GtkSpinButton)(unsafe.Pointer(s.Native()))

	var _cret C.guint

	_cret = C.gtk_spin_button_get_digits(_arg0)

	var _guint uint

	_guint = (uint)(_cret)

	return _guint
}

// Increments gets the current step and page the increments used by
// @spin_button. See gtk_spin_button_set_increments().
func (s spinButton) Increments() (step float64, page float64) {
	var _arg0 *C.GtkSpinButton

	_arg0 = (*C.GtkSpinButton)(unsafe.Pointer(s.Native()))

	var _arg1 C.gdouble
	var _arg2 C.gdouble

	C.gtk_spin_button_get_increments(_arg0, &_arg1, &_arg2)

	var _step float64
	var _page float64

	_step = (float64)(_arg1)
	_page = (float64)(_arg2)

	return _step, _page
}

// Numeric returns whether non-numeric text can be typed into the spin
// button. See gtk_spin_button_set_numeric().
func (s spinButton) Numeric() bool {
	var _arg0 *C.GtkSpinButton

	_arg0 = (*C.GtkSpinButton)(unsafe.Pointer(s.Native()))

	var _cret C.gboolean

	_cret = C.gtk_spin_button_get_numeric(_arg0)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// Range gets the range allowed for @spin_button. See
// gtk_spin_button_set_range().
func (s spinButton) Range() (min float64, max float64) {
	var _arg0 *C.GtkSpinButton

	_arg0 = (*C.GtkSpinButton)(unsafe.Pointer(s.Native()))

	var _arg1 C.gdouble
	var _arg2 C.gdouble

	C.gtk_spin_button_get_range(_arg0, &_arg1, &_arg2)

	var _min float64
	var _max float64

	_min = (float64)(_arg1)
	_max = (float64)(_arg2)

	return _min, _max
}

// SnapToTicks returns whether the values are corrected to the nearest step.
// See gtk_spin_button_set_snap_to_ticks().
func (s spinButton) SnapToTicks() bool {
	var _arg0 *C.GtkSpinButton

	_arg0 = (*C.GtkSpinButton)(unsafe.Pointer(s.Native()))

	var _cret C.gboolean

	_cret = C.gtk_spin_button_get_snap_to_ticks(_arg0)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// Value: get the value in the @spin_button.
func (s spinButton) Value() float64 {
	var _arg0 *C.GtkSpinButton

	_arg0 = (*C.GtkSpinButton)(unsafe.Pointer(s.Native()))

	var _cret C.gdouble

	_cret = C.gtk_spin_button_get_value(_arg0)

	var _gdouble float64

	_gdouble = (float64)(_cret)

	return _gdouble
}

// ValueAsInt: get the value @spin_button represented as an integer.
func (s spinButton) ValueAsInt() int {
	var _arg0 *C.GtkSpinButton

	_arg0 = (*C.GtkSpinButton)(unsafe.Pointer(s.Native()))

	var _cret C.gint

	_cret = C.gtk_spin_button_get_value_as_int(_arg0)

	var _gint int

	_gint = (int)(_cret)

	return _gint
}

// Wrap returns whether the spin button’s value wraps around to the opposite
// limit when the upper or lower limit of the range is exceeded. See
// gtk_spin_button_set_wrap().
func (s spinButton) Wrap() bool {
	var _arg0 *C.GtkSpinButton

	_arg0 = (*C.GtkSpinButton)(unsafe.Pointer(s.Native()))

	var _cret C.gboolean

	_cret = C.gtk_spin_button_get_wrap(_arg0)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// SetAdjustment replaces the Adjustment associated with @spin_button.
func (s spinButton) SetAdjustment(adjustment Adjustment) {
	var _arg0 *C.GtkSpinButton
	var _arg1 *C.GtkAdjustment

	_arg0 = (*C.GtkSpinButton)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GtkAdjustment)(unsafe.Pointer(adjustment.Native()))

	C.gtk_spin_button_set_adjustment(_arg0, _arg1)
}

// SetDigits: set the precision to be displayed by @spin_button. Up to 20
// digit precision is allowed.
func (s spinButton) SetDigits(digits uint) {
	var _arg0 *C.GtkSpinButton
	var _arg1 C.guint

	_arg0 = (*C.GtkSpinButton)(unsafe.Pointer(s.Native()))
	_arg1 = C.guint(digits)

	C.gtk_spin_button_set_digits(_arg0, _arg1)
}

// SetIncrements sets the step and page increments for spin_button. This
// affects how quickly the value changes when the spin button’s arrows are
// activated.
func (s spinButton) SetIncrements(step float64, page float64) {
	var _arg0 *C.GtkSpinButton
	var _arg1 C.gdouble
	var _arg2 C.gdouble

	_arg0 = (*C.GtkSpinButton)(unsafe.Pointer(s.Native()))
	_arg1 = C.gdouble(step)
	_arg2 = C.gdouble(page)

	C.gtk_spin_button_set_increments(_arg0, _arg1, _arg2)
}

// SetNumeric sets the flag that determines if non-numeric text can be typed
// into the spin button.
func (s spinButton) SetNumeric(numeric bool) {
	var _arg0 *C.GtkSpinButton
	var _arg1 C.gboolean

	_arg0 = (*C.GtkSpinButton)(unsafe.Pointer(s.Native()))
	if numeric {
		_arg1 = C.gboolean(1)
	}

	C.gtk_spin_button_set_numeric(_arg0, _arg1)
}

// SetRange sets the minimum and maximum allowable values for @spin_button.
//
// If the current value is outside this range, it will be adjusted to fit
// within the range, otherwise it will remain unchanged.
func (s spinButton) SetRange(min float64, max float64) {
	var _arg0 *C.GtkSpinButton
	var _arg1 C.gdouble
	var _arg2 C.gdouble

	_arg0 = (*C.GtkSpinButton)(unsafe.Pointer(s.Native()))
	_arg1 = C.gdouble(min)
	_arg2 = C.gdouble(max)

	C.gtk_spin_button_set_range(_arg0, _arg1, _arg2)
}

// SetSnapToTicks sets the policy as to whether values are corrected to the
// nearest step increment when a spin button is activated after providing an
// invalid value.
func (s spinButton) SetSnapToTicks(snapToTicks bool) {
	var _arg0 *C.GtkSpinButton
	var _arg1 C.gboolean

	_arg0 = (*C.GtkSpinButton)(unsafe.Pointer(s.Native()))
	if snapToTicks {
		_arg1 = C.gboolean(1)
	}

	C.gtk_spin_button_set_snap_to_ticks(_arg0, _arg1)
}

// SetUpdatePolicy sets the update behavior of a spin button. This
// determines whether the spin button is always updated or only when a valid
// value is set.
func (s spinButton) SetUpdatePolicy(policy SpinButtonUpdatePolicy) {
	var _arg0 *C.GtkSpinButton
	var _arg1 C.GtkSpinButtonUpdatePolicy

	_arg0 = (*C.GtkSpinButton)(unsafe.Pointer(s.Native()))
	_arg1 = (C.GtkSpinButtonUpdatePolicy)(policy)

	C.gtk_spin_button_set_update_policy(_arg0, _arg1)
}

// SetValue sets the value of @spin_button.
func (s spinButton) SetValue(value float64) {
	var _arg0 *C.GtkSpinButton
	var _arg1 C.gdouble

	_arg0 = (*C.GtkSpinButton)(unsafe.Pointer(s.Native()))
	_arg1 = C.gdouble(value)

	C.gtk_spin_button_set_value(_arg0, _arg1)
}

// SetWrap sets the flag that determines if a spin button value wraps around
// to the opposite limit when the upper or lower limit of the range is
// exceeded.
func (s spinButton) SetWrap(wrap bool) {
	var _arg0 *C.GtkSpinButton
	var _arg1 C.gboolean

	_arg0 = (*C.GtkSpinButton)(unsafe.Pointer(s.Native()))
	if wrap {
		_arg1 = C.gboolean(1)
	}

	C.gtk_spin_button_set_wrap(_arg0, _arg1)
}

// Spin: increment or decrement a spin button’s value in a specified
// direction by a specified amount.
func (s spinButton) Spin(direction SpinType, increment float64) {
	var _arg0 *C.GtkSpinButton
	var _arg1 C.GtkSpinType
	var _arg2 C.gdouble

	_arg0 = (*C.GtkSpinButton)(unsafe.Pointer(s.Native()))
	_arg1 = (C.GtkSpinType)(direction)
	_arg2 = C.gdouble(increment)

	C.gtk_spin_button_spin(_arg0, _arg1, _arg2)
}

// Update: manually force an update of the spin button.
func (s spinButton) Update() {
	var _arg0 *C.GtkSpinButton

	_arg0 = (*C.GtkSpinButton)(unsafe.Pointer(s.Native()))

	C.gtk_spin_button_update(_arg0)
}
