// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <stdbool.h>
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_file_chooser_button_get_type()), F: marshalFileChooserButton},
	})
}

// FileChooserButton: the FileChooserButton is a widget that lets the user
// select a file. It implements the FileChooser interface. Visually, it is a
// file name with a button to bring up a FileChooserDialog. The user can then
// use that dialog to change the file associated with that button. This widget
// does not support setting the FileChooser:select-multiple property to true.
//
// Create a button to let the user select a file in /etc
//
//    {
//      GtkWidget *button;
//
//      button = gtk_file_chooser_button_new (_("Select a file"),
//                                            GTK_FILE_CHOOSER_ACTION_OPEN);
//      gtk_file_chooser_set_current_folder (GTK_FILE_CHOOSER (button),
//                                           "/etc");
//    }
//
// The FileChooserButton supports the FileChooserActions
// GTK_FILE_CHOOSER_ACTION_OPEN and GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER.
//
// > The FileChooserButton will ellipsize the label, and will thus > request
// little horizontal space. To give the button more space, > you should call
// gtk_widget_get_preferred_size(), > gtk_file_chooser_button_set_width_chars(),
// or pack the button in > such a way that other interface elements give space
// to the > widget.
//
//
// CSS nodes
//
// GtkFileChooserButton has a CSS node with name “filechooserbutton”, containing
// a subnode for the internal button with name “button” and style class “.file”.
type FileChooserButton interface {
	Box
	Buildable
	FileChooser
	Orientable

	// FocusOnClick returns whether the button grabs focus when it is clicked
	// with the mouse. See gtk_file_chooser_button_set_focus_on_click().
	FocusOnClick() bool
	// Title retrieves the title of the browse dialog used by @button. The
	// returned value should not be modified or freed.
	Title() string
	// WidthChars retrieves the width in characters of the @button widget’s
	// entry and/or label.
	WidthChars() int
	// SetFocusOnClick sets whether the button will grab focus when it is
	// clicked with the mouse. Making mouse clicks not grab focus is useful in
	// places like toolbars where you don’t want the keyboard focus removed from
	// the main area of the application.
	SetFocusOnClick(focusOnClick bool)
	// SetTitle modifies the @title of the browse dialog used by @button.
	SetTitle(title string)
	// SetWidthChars sets the width (in characters) that @button will use to
	// @n_chars.
	SetWidthChars(nChars int)
}

// fileChooserButton implements the FileChooserButton interface.
type fileChooserButton struct {
	Box
	Buildable
	FileChooser
	Orientable
}

var _ FileChooserButton = (*fileChooserButton)(nil)

// WrapFileChooserButton wraps a GObject to the right type. It is
// primarily used internally.
func WrapFileChooserButton(obj *externglib.Object) FileChooserButton {
	return FileChooserButton{
		Box:         WrapBox(obj),
		Buildable:   WrapBuildable(obj),
		FileChooser: WrapFileChooser(obj),
		Orientable:  WrapOrientable(obj),
	}
}

func marshalFileChooserButton(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapFileChooserButton(obj), nil
}

// NewFileChooserButton constructs a class FileChooserButton.
func NewFileChooserButton(title string, action FileChooserAction) FileChooserButton {
	var arg1 *C.gchar
	var arg2 C.GtkFileChooserAction

	arg1 = (*C.gchar)(C.CString(title))
	defer C.free(unsafe.Pointer(arg1))
	arg2 = (C.GtkFileChooserAction)(action)

	var cret C.GtkFileChooserButton
	var ret1 FileChooserButton

	cret = C.gtk_file_chooser_button_new(title, action)

	ret1 = gextras.CastObject(externglib.Take(unsafe.Pointer(cret.Native()))).(FileChooserButton)

	return ret1
}

// NewFileChooserButtonWithDialog constructs a class FileChooserButton.
func NewFileChooserButtonWithDialog(dialog Dialog) FileChooserButton {
	var arg1 *C.GtkWidget

	arg1 = (*C.GtkWidget)(unsafe.Pointer(dialog.Native()))

	var cret C.GtkFileChooserButton
	var ret1 FileChooserButton

	cret = C.gtk_file_chooser_button_new_with_dialog(dialog)

	ret1 = gextras.CastObject(externglib.Take(unsafe.Pointer(cret.Native()))).(FileChooserButton)

	return ret1
}

// FocusOnClick returns whether the button grabs focus when it is clicked
// with the mouse. See gtk_file_chooser_button_set_focus_on_click().
func (b fileChooserButton) FocusOnClick() bool {
	var arg0 *C.GtkFileChooserButton

	arg0 = (*C.GtkFileChooserButton)(unsafe.Pointer(b.Native()))

	var cret C.gboolean
	var ret1 bool

	cret = C.gtk_file_chooser_button_get_focus_on_click(arg0)

	ret1 = C.bool(cret) != C.false

	return ret1
}

// Title retrieves the title of the browse dialog used by @button. The
// returned value should not be modified or freed.
func (b fileChooserButton) Title() string {
	var arg0 *C.GtkFileChooserButton

	arg0 = (*C.GtkFileChooserButton)(unsafe.Pointer(b.Native()))

	var cret *C.gchar
	var ret1 string

	cret = C.gtk_file_chooser_button_get_title(arg0)

	ret1 = C.GoString(cret)

	return ret1
}

// WidthChars retrieves the width in characters of the @button widget’s
// entry and/or label.
func (b fileChooserButton) WidthChars() int {
	var arg0 *C.GtkFileChooserButton

	arg0 = (*C.GtkFileChooserButton)(unsafe.Pointer(b.Native()))

	var cret C.gint
	var ret1 int

	cret = C.gtk_file_chooser_button_get_width_chars(arg0)

	ret1 = C.gint(cret)

	return ret1
}

// SetFocusOnClick sets whether the button will grab focus when it is
// clicked with the mouse. Making mouse clicks not grab focus is useful in
// places like toolbars where you don’t want the keyboard focus removed from
// the main area of the application.
func (b fileChooserButton) SetFocusOnClick(focusOnClick bool) {
	var arg0 *C.GtkFileChooserButton
	var arg1 C.gboolean

	arg0 = (*C.GtkFileChooserButton)(unsafe.Pointer(b.Native()))
	if focusOnClick {
		arg1 = C.gboolean(1)
	}

	C.gtk_file_chooser_button_set_focus_on_click(arg0, focusOnClick)
}

// SetTitle modifies the @title of the browse dialog used by @button.
func (b fileChooserButton) SetTitle(title string) {
	var arg0 *C.GtkFileChooserButton
	var arg1 *C.gchar

	arg0 = (*C.GtkFileChooserButton)(unsafe.Pointer(b.Native()))
	arg1 = (*C.gchar)(C.CString(title))
	defer C.free(unsafe.Pointer(arg1))

	C.gtk_file_chooser_button_set_title(arg0, title)
}

// SetWidthChars sets the width (in characters) that @button will use to
// @n_chars.
func (b fileChooserButton) SetWidthChars(nChars int) {
	var arg0 *C.GtkFileChooserButton
	var arg1 C.gint

	arg0 = (*C.GtkFileChooserButton)(unsafe.Pointer(b.Native()))
	arg1 = C.gint(nChars)

	C.gtk_file_chooser_button_set_width_chars(arg0, nChars)
}
