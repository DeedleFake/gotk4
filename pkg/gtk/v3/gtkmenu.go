// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/box"
	"github.com/diamondburned/gotk4/internal/gextras"
)

// #cgo pkg-config: gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
//
// extern void gotk4_MenuPositionFunc(GtkMenu* _0, gint* _1, gint* _2, gboolean* _3, gpointer _4);
import "C"

// MenuPositionFunc: a user function supplied when calling gtk_menu_popup()
// which controls the positioning of the menu when it is displayed. The function
// sets the @x and @y parameters to the coordinates where the menu is to be
// drawn. To make the menu appear on a different monitor than the mouse pointer,
// gtk_menu_set_monitor() must be called.
type MenuPositionFunc func(menu Menu, x int, y int) bool

//export gotk4_MenuPositionFunc
func gotk4_MenuPositionFunc(arg0 *C.GtkMenu, arg1 *C.gint, arg2 *C.gint, arg3 *C.gboolean, arg4 C.gpointer) {
	v := box.Get(uintptr(arg4))
	if v == nil {
		panic(`callback not found`)
	}

	var menu Menu
	var x int
	var y int

	menu = gextras.CastObject(externglib.Take(unsafe.Pointer(arg0.Native()))).(Menu)

	x = int(arg1)

	y = int(arg2)

	pushIn := v.(MenuPositionFunc)(menu, x, y)
}

type MenuPrivate struct {
	native C.GtkMenuPrivate
}

// WrapMenuPrivate wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapMenuPrivate(ptr unsafe.Pointer) *MenuPrivate {
	if ptr == nil {
		return nil
	}

	return (*MenuPrivate)(ptr)
}

func marshalMenuPrivate(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapMenuPrivate(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (m *MenuPrivate) Native() unsafe.Pointer {
	return unsafe.Pointer(&m.native)
}
