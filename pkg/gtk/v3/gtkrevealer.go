// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_revealer_transition_type_get_type()), F: marshalRevealerTransitionType},
		{T: externglib.Type(C.gtk_revealer_get_type()), F: marshalRevealer},
	})
}

// RevealerTransitionType: these enumeration values describe the possible
// transitions when the child of a Revealer widget is shown or hidden.
type RevealerTransitionType int

const (
	// None: no transition
	RevealerTransitionTypeNone RevealerTransitionType = iota
	// Crossfade: fade in
	RevealerTransitionTypeCrossfade
	// SlideRight: slide in from the left
	RevealerTransitionTypeSlideRight
	// SlideLeft: slide in from the right
	RevealerTransitionTypeSlideLeft
	// SlideUp: slide in from the bottom
	RevealerTransitionTypeSlideUp
	// SlideDown: slide in from the top
	RevealerTransitionTypeSlideDown
)

func marshalRevealerTransitionType(p uintptr) (interface{}, error) {
	return RevealerTransitionType(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// Revealer: the GtkRevealer widget is a container which animates the transition
// of its child from invisible to visible.
//
// The style of transition can be controlled with
// gtk_revealer_set_transition_type().
//
// These animations respect the Settings:gtk-enable-animations setting.
//
//
// CSS nodes
//
// GtkRevealer has a single CSS node with name revealer.
//
// The GtkRevealer widget was added in GTK+ 3.10.
type Revealer interface {
	gextras.Objector

	// ChildRevealed returns whether the child is fully revealed, in other words
	// whether the transition to the revealed state is completed.
	ChildRevealed() bool
	// RevealChild returns whether the child is currently revealed. See
	// gtk_revealer_set_reveal_child().
	//
	// This function returns true as soon as the transition is to the revealed
	// state is started. To learn whether the child is fully revealed (ie the
	// transition is completed), use gtk_revealer_get_child_revealed().
	RevealChild() bool
	// TransitionDuration returns the amount of time (in milliseconds) that
	// transitions will take.
	TransitionDuration() uint
	// TransitionType gets the type of animation that will be used for
	// transitions in @revealer.
	TransitionType() RevealerTransitionType
	// SetRevealChild tells the Revealer to reveal or conceal its child.
	//
	// The transition will be animated with the current transition type of
	// @revealer.
	SetRevealChild(revealChild bool)
	// SetTransitionDuration sets the duration that transitions will take.
	SetTransitionDuration(duration uint)
}

// RevealerClass implements the Revealer interface.
type RevealerClass struct {
	*externglib.Object
	BinClass
	BuildableInterface
}

var _ Revealer = (*RevealerClass)(nil)

func wrapRevealer(obj *externglib.Object) Revealer {
	return &RevealerClass{
		Object: obj,
		BinClass: BinClass{
			Object: obj,
			ContainerClass: ContainerClass{
				Object: obj,
				WidgetClass: WidgetClass{
					InitiallyUnowned: externglib.InitiallyUnowned{Object: obj},
					BuildableInterface: BuildableInterface{
						Object: obj,
					},
				},
				BuildableInterface: BuildableInterface{
					Object: obj,
				},
			},
			BuildableInterface: BuildableInterface{
				Object: obj,
			},
		},
		BuildableInterface: BuildableInterface{
			Object: obj,
		},
	}
}

func marshalRevealer(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapRevealer(obj), nil
}

// NewRevealer creates a new Revealer.
func NewRevealer() *RevealerClass {
	var _cret *C.GtkWidget // in

	_cret = C.gtk_revealer_new()

	var _revealer *RevealerClass // out

	_revealer = gextras.CastObject(
		externglib.Take(unsafe.Pointer(_cret))).(*RevealerClass)

	return _revealer
}

// ChildRevealed returns whether the child is fully revealed, in other words
// whether the transition to the revealed state is completed.
func (r *RevealerClass) ChildRevealed() bool {
	var _arg0 *C.GtkRevealer // out
	var _cret C.gboolean     // in

	_arg0 = (*C.GtkRevealer)(unsafe.Pointer((&Revealer).Native()))

	_cret = C.gtk_revealer_get_child_revealed(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// RevealChild returns whether the child is currently revealed. See
// gtk_revealer_set_reveal_child().
//
// This function returns true as soon as the transition is to the revealed state
// is started. To learn whether the child is fully revealed (ie the transition
// is completed), use gtk_revealer_get_child_revealed().
func (r *RevealerClass) RevealChild() bool {
	var _arg0 *C.GtkRevealer // out
	var _cret C.gboolean     // in

	_arg0 = (*C.GtkRevealer)(unsafe.Pointer((&Revealer).Native()))

	_cret = C.gtk_revealer_get_reveal_child(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// TransitionDuration returns the amount of time (in milliseconds) that
// transitions will take.
func (r *RevealerClass) TransitionDuration() uint {
	var _arg0 *C.GtkRevealer // out
	var _cret C.guint        // in

	_arg0 = (*C.GtkRevealer)(unsafe.Pointer((&Revealer).Native()))

	_cret = C.gtk_revealer_get_transition_duration(_arg0)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// TransitionType gets the type of animation that will be used for transitions
// in @revealer.
func (r *RevealerClass) TransitionType() RevealerTransitionType {
	var _arg0 *C.GtkRevealer              // out
	var _cret C.GtkRevealerTransitionType // in

	_arg0 = (*C.GtkRevealer)(unsafe.Pointer((&Revealer).Native()))

	_cret = C.gtk_revealer_get_transition_type(_arg0)

	var _revealerTransitionType RevealerTransitionType // out

	_revealerTransitionType = (RevealerTransitionType)(C.GtkRevealerTransitionType)

	return _revealerTransitionType
}

// SetRevealChild tells the Revealer to reveal or conceal its child.
//
// The transition will be animated with the current transition type of
// @revealer.
func (r *RevealerClass) SetRevealChild(revealChild bool) {
	var _arg0 *C.GtkRevealer // out
	var _arg1 C.gboolean     // out

	_arg0 = (*C.GtkRevealer)(unsafe.Pointer((&Revealer).Native()))
	if revealChild {
		_arg1 = C.TRUE
	}

	C.gtk_revealer_set_reveal_child(_arg0, _arg1)
}

// SetTransitionDuration sets the duration that transitions will take.
func (r *RevealerClass) SetTransitionDuration(duration uint) {
	var _arg0 *C.GtkRevealer // out
	var _arg1 C.guint        // out

	_arg0 = (*C.GtkRevealer)(unsafe.Pointer((&Revealer).Native()))
	_arg1 = C.guint(duration)

	C.gtk_revealer_set_transition_duration(_arg0, _arg1)
}
