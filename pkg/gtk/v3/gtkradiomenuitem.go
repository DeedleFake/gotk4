// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: glib-2.0 gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_radio_menu_item_get_type()), F: marshalRadioMenuItem},
	})
}

// RadioMenuItem: a radio menu item is a check menu item that belongs to a
// group. At each instant exactly one of the radio menu items from a group is
// selected.
//
// The group list does not need to be freed, as each RadioMenuItem will remove
// itself and its list item when it is destroyed.
//
// The correct way to create a group of radio menu items is approximatively
// this:
//
// How to create a group of radio menu items.
//
//    menuitem
//    ├── radio.left
//    ╰── <child>
//
// GtkRadioMenuItem has a main CSS node with name menuitem, and a subnode with
// name radio, which gets the .left or .right style class.
type RadioMenuItem interface {
	CheckMenuItem
	Actionable
	Activatable
	Buildable

	// JoinGroup joins a RadioMenuItem object to the group of another
	// RadioMenuItem object.
	//
	// This function should be used by language bindings to avoid the memory
	// manangement of the opaque List of gtk_radio_menu_item_get_group() and
	// gtk_radio_menu_item_set_group().
	//
	// A common way to set up a group of RadioMenuItem instances is:
	//
	//      GtkRadioMenuItem *last_item = NULL;
	//
	//      while ( ...more items to add... )
	//        {
	//          GtkRadioMenuItem *radio_item;
	//
	//          radio_item = gtk_radio_menu_item_new (...);
	//
	//          gtk_radio_menu_item_join_group (radio_item, last_item);
	//          last_item = radio_item;
	//        }
	JoinGroup(groupSource RadioMenuItem)
}

// radioMenuItem implements the RadioMenuItem class.
type radioMenuItem struct {
	CheckMenuItem
	Actionable
	Activatable
	Buildable
}

var _ RadioMenuItem = (*radioMenuItem)(nil)

// WrapRadioMenuItem wraps a GObject to the right type. It is
// primarily used internally.
func WrapRadioMenuItem(obj *externglib.Object) RadioMenuItem {
	return radioMenuItem{
		CheckMenuItem: WrapCheckMenuItem(obj),
		Actionable:    WrapActionable(obj),
		Activatable:   WrapActivatable(obj),
		Buildable:     WrapBuildable(obj),
	}
}

func marshalRadioMenuItem(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapRadioMenuItem(obj), nil
}

// NewRadioMenuItemFromWidget constructs a class RadioMenuItem.
func NewRadioMenuItemFromWidget(group RadioMenuItem) RadioMenuItem {
	var _arg1 *C.GtkRadioMenuItem // out

	_arg1 = (*C.GtkRadioMenuItem)(unsafe.Pointer(group.Native()))

	var _cret C.GtkRadioMenuItem // in

	_cret = C.gtk_radio_menu_item_new_from_widget(_arg1)

	var _radioMenuItem RadioMenuItem // out

	_radioMenuItem = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret.Native()))).(RadioMenuItem)

	return _radioMenuItem
}

// NewRadioMenuItemWithLabelFromWidget constructs a class RadioMenuItem.
func NewRadioMenuItemWithLabelFromWidget(group RadioMenuItem, label string) RadioMenuItem {
	var _arg1 *C.GtkRadioMenuItem // out
	var _arg2 *C.gchar            // out

	_arg1 = (*C.GtkRadioMenuItem)(unsafe.Pointer(group.Native()))
	_arg2 = (*C.gchar)(C.CString(label))
	defer C.free(unsafe.Pointer(_arg2))

	var _cret C.GtkRadioMenuItem // in

	_cret = C.gtk_radio_menu_item_new_with_label_from_widget(_arg1, _arg2)

	var _radioMenuItem RadioMenuItem // out

	_radioMenuItem = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret.Native()))).(RadioMenuItem)

	return _radioMenuItem
}

// NewRadioMenuItemWithMnemonicFromWidget constructs a class RadioMenuItem.
func NewRadioMenuItemWithMnemonicFromWidget(group RadioMenuItem, label string) RadioMenuItem {
	var _arg1 *C.GtkRadioMenuItem // out
	var _arg2 *C.gchar            // out

	_arg1 = (*C.GtkRadioMenuItem)(unsafe.Pointer(group.Native()))
	_arg2 = (*C.gchar)(C.CString(label))
	defer C.free(unsafe.Pointer(_arg2))

	var _cret C.GtkRadioMenuItem // in

	_cret = C.gtk_radio_menu_item_new_with_mnemonic_from_widget(_arg1, _arg2)

	var _radioMenuItem RadioMenuItem // out

	_radioMenuItem = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret.Native()))).(RadioMenuItem)

	return _radioMenuItem
}

// JoinGroup joins a RadioMenuItem object to the group of another
// RadioMenuItem object.
//
// This function should be used by language bindings to avoid the memory
// manangement of the opaque List of gtk_radio_menu_item_get_group() and
// gtk_radio_menu_item_set_group().
//
// A common way to set up a group of RadioMenuItem instances is:
//
//      GtkRadioMenuItem *last_item = NULL;
//
//      while ( ...more items to add... )
//        {
//          GtkRadioMenuItem *radio_item;
//
//          radio_item = gtk_radio_menu_item_new (...);
//
//          gtk_radio_menu_item_join_group (radio_item, last_item);
//          last_item = radio_item;
//        }
func (r radioMenuItem) JoinGroup(groupSource RadioMenuItem) {
	var _arg0 *C.GtkRadioMenuItem // out
	var _arg1 *C.GtkRadioMenuItem // out

	_arg0 = (*C.GtkRadioMenuItem)(unsafe.Pointer(r.Native()))
	_arg1 = (*C.GtkRadioMenuItem)(unsafe.Pointer(groupSource.Native()))

	C.gtk_radio_menu_item_join_group(_arg0, _arg1)
}
