// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_radio_menu_item_get_type()), F: marshalRadioMenuItem},
	})
}

// RadioMenuItemOverrider contains methods that are overridable.
//
// As of right now, interface overriding and subclassing is not supported
// yet, so the interface currently has no use.
type RadioMenuItemOverrider interface {
	GroupChanged()
}

// RadioMenuItem: radio menu item is a check menu item that belongs to a group.
// At each instant exactly one of the radio menu items from a group is selected.
//
// The group list does not need to be freed, as each RadioMenuItem will remove
// itself and its list item when it is destroyed.
//
// The correct way to create a group of radio menu items is approximatively
// this:
//
// How to create a group of radio menu items.
//
//    menuitem
//    ├── radio.left
//    ╰── <child>
//
// GtkRadioMenuItem has a main CSS node with name menuitem, and a subnode with
// name radio, which gets the .left or .right style class.
type RadioMenuItem interface {
	gextras.Objector

	// JoinGroup joins a RadioMenuItem object to the group of another
	// RadioMenuItem object.
	//
	// This function should be used by language bindings to avoid the memory
	// manangement of the opaque List of gtk_radio_menu_item_get_group() and
	// gtk_radio_menu_item_set_group().
	//
	// A common way to set up a group of RadioMenuItem instances is:
	//
	//      GtkRadioMenuItem *last_item = NULL;
	//
	//      while ( ...more items to add... )
	//        {
	//          GtkRadioMenuItem *radio_item;
	//
	//          radio_item = gtk_radio_menu_item_new (...);
	//
	//          gtk_radio_menu_item_join_group (radio_item, last_item);
	//          last_item = radio_item;
	//        }
	JoinGroup(groupSource RadioMenuItem)
}

// RadioMenuItemClass implements the RadioMenuItem interface.
type RadioMenuItemClass struct {
	*externglib.Object
	CheckMenuItemClass
	ActionableInterface
	ActivatableInterface
	BuildableInterface
}

var _ RadioMenuItem = (*RadioMenuItemClass)(nil)

func wrapRadioMenuItem(obj *externglib.Object) RadioMenuItem {
	return &RadioMenuItemClass{
		Object: obj,
		CheckMenuItemClass: CheckMenuItemClass{
			Object: obj,
			MenuItemClass: MenuItemClass{
				Object: obj,
				BinClass: BinClass{
					Object: obj,
					ContainerClass: ContainerClass{
						Object: obj,
						WidgetClass: WidgetClass{
							Object:           obj,
							InitiallyUnowned: externglib.InitiallyUnowned{Object: obj},
							BuildableInterface: BuildableInterface{
								Object: obj,
							},
						},
						BuildableInterface: BuildableInterface{
							Object: obj,
						},
					},
					BuildableInterface: BuildableInterface{
						Object: obj,
					},
				},
				ActionableInterface: ActionableInterface{
					WidgetClass: WidgetClass{
						Object:           obj,
						InitiallyUnowned: externglib.InitiallyUnowned{Object: obj},
						BuildableInterface: BuildableInterface{
							Object: obj,
						},
					},
				},
				ActivatableInterface: ActivatableInterface{
					Object: obj,
				},
				BuildableInterface: BuildableInterface{
					Object: obj,
				},
			},
			ActionableInterface: ActionableInterface{
				WidgetClass: WidgetClass{
					Object:           obj,
					InitiallyUnowned: externglib.InitiallyUnowned{Object: obj},
					BuildableInterface: BuildableInterface{
						Object: obj,
					},
				},
			},
			ActivatableInterface: ActivatableInterface{
				Object: obj,
			},
			BuildableInterface: BuildableInterface{
				Object: obj,
			},
		},
		ActionableInterface: ActionableInterface{
			WidgetClass: WidgetClass{
				Object:           obj,
				InitiallyUnowned: externglib.InitiallyUnowned{Object: obj},
				BuildableInterface: BuildableInterface{
					Object: obj,
				},
			},
		},
		ActivatableInterface: ActivatableInterface{
			Object: obj,
		},
		BuildableInterface: BuildableInterface{
			Object: obj,
		},
	}
}

func marshalRadioMenuItem(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapRadioMenuItem(obj), nil
}

// NewRadioMenuItemFromWidget creates a new RadioMenuItem adding it to the same
// group as @group.
func NewRadioMenuItemFromWidget(group RadioMenuItem) RadioMenuItem {
	var _arg1 *C.GtkRadioMenuItem // out
	var _cret *C.GtkWidget        // in

	_arg1 = (*C.GtkRadioMenuItem)(unsafe.Pointer(group.Native()))

	_cret = C.gtk_radio_menu_item_new_from_widget(_arg1)

	var _radioMenuItem RadioMenuItem // out

	_radioMenuItem = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(RadioMenuItem)

	return _radioMenuItem
}

// NewRadioMenuItemWithLabelFromWidget creates a new GtkRadioMenuItem whose
// child is a simple GtkLabel. The new RadioMenuItem is added to the same group
// as @group.
func NewRadioMenuItemWithLabelFromWidget(group RadioMenuItem, label string) RadioMenuItem {
	var _arg1 *C.GtkRadioMenuItem // out
	var _arg2 *C.gchar            // out
	var _cret *C.GtkWidget        // in

	_arg1 = (*C.GtkRadioMenuItem)(unsafe.Pointer(group.Native()))
	_arg2 = (*C.gchar)(C.CString(label))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.gtk_radio_menu_item_new_with_label_from_widget(_arg1, _arg2)

	var _radioMenuItem RadioMenuItem // out

	_radioMenuItem = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(RadioMenuItem)

	return _radioMenuItem
}

// NewRadioMenuItemWithMnemonicFromWidget creates a new GtkRadioMenuItem
// containing a label. The label will be created using
// gtk_label_new_with_mnemonic(), so underscores in label indicate the mnemonic
// for the menu item.
//
// The new RadioMenuItem is added to the same group as @group.
func NewRadioMenuItemWithMnemonicFromWidget(group RadioMenuItem, label string) RadioMenuItem {
	var _arg1 *C.GtkRadioMenuItem // out
	var _arg2 *C.gchar            // out
	var _cret *C.GtkWidget        // in

	_arg1 = (*C.GtkRadioMenuItem)(unsafe.Pointer(group.Native()))
	_arg2 = (*C.gchar)(C.CString(label))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.gtk_radio_menu_item_new_with_mnemonic_from_widget(_arg1, _arg2)

	var _radioMenuItem RadioMenuItem // out

	_radioMenuItem = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(RadioMenuItem)

	return _radioMenuItem
}

// JoinGroup joins a RadioMenuItem object to the group of another RadioMenuItem
// object.
//
// This function should be used by language bindings to avoid the memory
// manangement of the opaque List of gtk_radio_menu_item_get_group() and
// gtk_radio_menu_item_set_group().
//
// A common way to set up a group of RadioMenuItem instances is:
//
//      GtkRadioMenuItem *last_item = NULL;
//
//      while ( ...more items to add... )
//        {
//          GtkRadioMenuItem *radio_item;
//
//          radio_item = gtk_radio_menu_item_new (...);
//
//          gtk_radio_menu_item_join_group (radio_item, last_item);
//          last_item = radio_item;
//        }
func (r *RadioMenuItemClass) JoinGroup(groupSource RadioMenuItem) {
	var _arg0 *C.GtkRadioMenuItem // out
	var _arg1 *C.GtkRadioMenuItem // out

	_arg0 = (*C.GtkRadioMenuItem)(unsafe.Pointer(r.Native()))
	_arg1 = (*C.GtkRadioMenuItem)(unsafe.Pointer(groupSource.Native()))

	C.gtk_radio_menu_item_join_group(_arg0, _arg1)
}
