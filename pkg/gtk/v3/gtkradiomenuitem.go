// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_radio_menu_item_get_type()), F: marshalRadioMenuItem},
	})
}

// RadioMenuItem: a radio menu item is a check menu item that belongs to a
// group. At each instant exactly one of the radio menu items from a group is
// selected.
//
// The group list does not need to be freed, as each RadioMenuItem will remove
// itself and its list item when it is destroyed.
//
// The correct way to create a group of radio menu items is approximatively
// this:
//
// How to create a group of radio menu items.
//
//    menuitem
//    ├── radio.left
//    ╰── <child>
//
// GtkRadioMenuItem has a main CSS node with name menuitem, and a subnode with
// name radio, which gets the .left or .right style class.
type RadioMenuItem interface {
	CheckMenuItem
	Actionable
	Activatable
	Buildable

	// Group returns the group to which the radio menu item belongs, as a #GList
	// of RadioMenuItem. The list belongs to GTK+ and should not be freed.
	Group(r RadioMenuItem)
	// JoinGroup joins a RadioMenuItem object to the group of another
	// RadioMenuItem object.
	//
	// This function should be used by language bindings to avoid the memory
	// manangement of the opaque List of gtk_radio_menu_item_get_group() and
	// gtk_radio_menu_item_set_group().
	//
	// A common way to set up a group of RadioMenuItem instances is:
	//
	//      GtkRadioMenuItem *last_item = NULL;
	//
	//      while ( ...more items to add... )
	//        {
	//          GtkRadioMenuItem *radio_item;
	//
	//          radio_item = gtk_radio_menu_item_new (...);
	//
	//          gtk_radio_menu_item_join_group (radio_item, last_item);
	//          last_item = radio_item;
	//        }
	JoinGroup(r RadioMenuItem, groupSource RadioMenuItem)
	// SetGroup sets the group of a radio menu item, or changes it.
	SetGroup(r RadioMenuItem, group *glib.SList)
}

// radioMenuItem implements the RadioMenuItem interface.
type radioMenuItem struct {
	CheckMenuItem
	Actionable
	Activatable
	Buildable
}

var _ RadioMenuItem = (*radioMenuItem)(nil)

// WrapRadioMenuItem wraps a GObject to the right type. It is
// primarily used internally.
func WrapRadioMenuItem(obj *externglib.Object) RadioMenuItem {
	return RadioMenuItem{
		CheckMenuItem: WrapCheckMenuItem(obj),
		Actionable:    WrapActionable(obj),
		Activatable:   WrapActivatable(obj),
		Buildable:     WrapBuildable(obj),
	}
}

func marshalRadioMenuItem(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapRadioMenuItem(obj), nil
}

// NewRadioMenuItem constructs a class RadioMenuItem.
func NewRadioMenuItem(group *glib.SList) {
	var arg1 *C.GSList

	arg1 = (*C.GSList)(unsafe.Pointer(group.Native()))

	C.gtk_radio_menu_item_new(arg1)
}

// NewRadioMenuItemFromWidget constructs a class RadioMenuItem.
func NewRadioMenuItemFromWidget(group RadioMenuItem) {
	var arg1 *C.GtkRadioMenuItem

	arg1 = (*C.GtkRadioMenuItem)(unsafe.Pointer(group.Native()))

	C.gtk_radio_menu_item_new_from_widget(arg1)
}

// NewRadioMenuItemWithLabel constructs a class RadioMenuItem.
func NewRadioMenuItemWithLabel(group *glib.SList, label string) {
	var arg1 *C.GSList
	var arg2 *C.gchar

	arg1 = (*C.GSList)(unsafe.Pointer(group.Native()))
	arg2 = (*C.gchar)(C.CString(label))
	defer C.free(unsafe.Pointer(arg2))

	C.gtk_radio_menu_item_new_with_label(arg1, arg2)
}

// NewRadioMenuItemWithLabelFromWidget constructs a class RadioMenuItem.
func NewRadioMenuItemWithLabelFromWidget(group RadioMenuItem, label string) {
	var arg1 *C.GtkRadioMenuItem
	var arg2 *C.gchar

	arg1 = (*C.GtkRadioMenuItem)(unsafe.Pointer(group.Native()))
	arg2 = (*C.gchar)(C.CString(label))
	defer C.free(unsafe.Pointer(arg2))

	C.gtk_radio_menu_item_new_with_label_from_widget(arg1, arg2)
}

// NewRadioMenuItemWithMnemonic constructs a class RadioMenuItem.
func NewRadioMenuItemWithMnemonic(group *glib.SList, label string) {
	var arg1 *C.GSList
	var arg2 *C.gchar

	arg1 = (*C.GSList)(unsafe.Pointer(group.Native()))
	arg2 = (*C.gchar)(C.CString(label))
	defer C.free(unsafe.Pointer(arg2))

	C.gtk_radio_menu_item_new_with_mnemonic(arg1, arg2)
}

// NewRadioMenuItemWithMnemonicFromWidget constructs a class RadioMenuItem.
func NewRadioMenuItemWithMnemonicFromWidget(group RadioMenuItem, label string) {
	var arg1 *C.GtkRadioMenuItem
	var arg2 *C.gchar

	arg1 = (*C.GtkRadioMenuItem)(unsafe.Pointer(group.Native()))
	arg2 = (*C.gchar)(C.CString(label))
	defer C.free(unsafe.Pointer(arg2))

	C.gtk_radio_menu_item_new_with_mnemonic_from_widget(arg1, arg2)
}

// Group returns the group to which the radio menu item belongs, as a #GList
// of RadioMenuItem. The list belongs to GTK+ and should not be freed.
func (r radioMenuItem) Group(r RadioMenuItem) {
	var arg0 *C.GtkRadioMenuItem

	arg0 = (*C.GtkRadioMenuItem)(unsafe.Pointer(r.Native()))

	C.gtk_radio_menu_item_get_group(arg0)
}

// JoinGroup joins a RadioMenuItem object to the group of another
// RadioMenuItem object.
//
// This function should be used by language bindings to avoid the memory
// manangement of the opaque List of gtk_radio_menu_item_get_group() and
// gtk_radio_menu_item_set_group().
//
// A common way to set up a group of RadioMenuItem instances is:
//
//      GtkRadioMenuItem *last_item = NULL;
//
//      while ( ...more items to add... )
//        {
//          GtkRadioMenuItem *radio_item;
//
//          radio_item = gtk_radio_menu_item_new (...);
//
//          gtk_radio_menu_item_join_group (radio_item, last_item);
//          last_item = radio_item;
//        }
func (r radioMenuItem) JoinGroup(r RadioMenuItem, groupSource RadioMenuItem) {
	var arg0 *C.GtkRadioMenuItem
	var arg1 *C.GtkRadioMenuItem

	arg0 = (*C.GtkRadioMenuItem)(unsafe.Pointer(r.Native()))
	arg1 = (*C.GtkRadioMenuItem)(unsafe.Pointer(groupSource.Native()))

	C.gtk_radio_menu_item_join_group(arg0, arg1)
}

// SetGroup sets the group of a radio menu item, or changes it.
func (r radioMenuItem) SetGroup(r RadioMenuItem, group *glib.SList) {
	var arg0 *C.GtkRadioMenuItem
	var arg1 *C.GSList

	arg0 = (*C.GtkRadioMenuItem)(unsafe.Pointer(r.Native()))
	arg1 = (*C.GSList)(unsafe.Pointer(group.Native()))

	C.gtk_radio_menu_item_set_group(arg0, arg1)
}
