// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_toolbar_space_style_get_type()), F: marshalToolbarSpaceStyle},
		{T: externglib.Type(C.gtk_toolbar_get_type()), F: marshalToolbar},
	})
}

// ToolbarSpaceStyle: whether spacers are vertical lines or just blank.
//
// Deprecated: since version 3.20.
type ToolbarSpaceStyle int

const (
	// Empty: use blank spacers.
	ToolbarSpaceStyleEmpty ToolbarSpaceStyle = iota
	// Line: use vertical lines for spacers.
	ToolbarSpaceStyleLine
)

func marshalToolbarSpaceStyle(p uintptr) (interface{}, error) {
	return ToolbarSpaceStyle(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// ToolbarOverrider contains methods that are overridable.
//
// As of right now, interface overriding and subclassing is not supported
// yet, so the interface currently has no use.
type ToolbarOverrider interface {
	PopupContextMenu(x int, y int, buttonNumber int) bool
}

// Toolbar: toolbar is created with a call to gtk_toolbar_new().
//
// A toolbar can contain instances of a subclass of ToolItem. To add a ToolItem
// to the a toolbar, use gtk_toolbar_insert(). To remove an item from the
// toolbar use gtk_container_remove(). To add a button to the toolbar, add an
// instance of ToolButton.
//
// Toolbar items can be visually grouped by adding instances of
// SeparatorToolItem to the toolbar. If the GtkToolbar child property “expand”
// is UE and the property SeparatorToolItem:draw is set to LSE, the effect is to
// force all following items to the end of the toolbar.
//
// By default, a toolbar can be shrunk, upon which it will add an arrow button
// to show an overflow menu offering access to any ToolItem child that has a
// proxy menu item. To disable this and request enough size for all children,
// call gtk_toolbar_set_show_arrow() to set Toolbar:show-arrow to false.
//
// Creating a context menu for the toolbar can be done by connecting to the
// Toolbar::popup-context-menu signal.
//
//
// CSS nodes
//
// GtkToolbar has a single CSS node with name toolbar.
type Toolbar interface {
	gextras.Objector

	// DropIndex returns the position corresponding to the indicated point on
	// @toolbar. This is useful when dragging items to the toolbar: this
	// function returns the position a new item should be inserted.
	//
	// @x and @y are in @toolbar coordinates.
	DropIndex(x int, y int) int
	// IconSize retrieves the icon size for the toolbar. See
	// gtk_toolbar_set_icon_size().
	IconSize() IconSize
	// ItemIndex returns the position of @item on the toolbar, starting from 0.
	// It is an error if @item is not a child of the toolbar.
	ItemIndex(item ToolItem) int
	// NItems returns the number of items on the toolbar.
	NItems() int
	// NthItem returns the @n'th item on @toolbar, or nil if the toolbar does
	// not contain an @n'th item.
	NthItem(n int) *ToolItemClass
	// ReliefStyle returns the relief style of buttons on @toolbar. See
	// gtk_button_set_relief().
	ReliefStyle() ReliefStyle
	// ShowArrow returns whether the toolbar has an overflow menu. See
	// gtk_toolbar_set_show_arrow().
	ShowArrow() bool
	// Style retrieves whether the toolbar has text, icons, or both . See
	// gtk_toolbar_set_style().
	Style() ToolbarStyle
	// Insert a ToolItem into the toolbar at position @pos. If @pos is 0 the
	// item is prepended to the start of the toolbar. If @pos is negative, the
	// item is appended to the end of the toolbar.
	Insert(item ToolItem, pos int)
	// SetDropHighlightItem highlights @toolbar to give an idea of what it would
	// look like if @item was added to @toolbar at the position indicated by
	// @index_. If @item is nil, highlighting is turned off. In that case
	// @index_ is ignored.
	//
	// The @tool_item passed to this function must not be part of any widget
	// hierarchy. When an item is set as drop highlight item it can not added to
	// any widget hierarchy or used as highlight item for another toolbar.
	SetDropHighlightItem(toolItem ToolItem, index_ int)
	// SetShowArrow sets whether to show an overflow menu when @toolbar isn’t
	// allocated enough size to show all of its items. If true, items which
	// can’t fit in @toolbar, and which have a proxy menu item set by
	// gtk_tool_item_set_proxy_menu_item() or ToolItem::create-menu-proxy, will
	// be available in an overflow menu, which can be opened by an added arrow
	// button. If false, @toolbar will request enough size to fit all of its
	// child items without any overflow.
	SetShowArrow(showArrow bool)
	// UnsetIconSize unsets toolbar icon size set with
	// gtk_toolbar_set_icon_size(), so that user preferences will be used to
	// determine the icon size.
	UnsetIconSize()
	// UnsetStyle unsets a toolbar style set with gtk_toolbar_set_style(), so
	// that user preferences will be used to determine the toolbar style.
	UnsetStyle()
}

// ToolbarClass implements the Toolbar interface.
type ToolbarClass struct {
	*externglib.Object
	ContainerClass
	BuildableInterface
	OrientableInterface
	ToolShellInterface
}

var _ Toolbar = (*ToolbarClass)(nil)

func wrapToolbar(obj *externglib.Object) Toolbar {
	return &ToolbarClass{
		Object: obj,
		ContainerClass: ContainerClass{
			Object: obj,
			WidgetClass: WidgetClass{
				InitiallyUnowned: externglib.InitiallyUnowned{Object: obj},
				BuildableInterface: BuildableInterface{
					Object: obj,
				},
			},
			BuildableInterface: BuildableInterface{
				Object: obj,
			},
		},
		BuildableInterface: BuildableInterface{
			Object: obj,
		},
		OrientableInterface: OrientableInterface{
			Object: obj,
		},
		ToolShellInterface: ToolShellInterface{
			WidgetClass: WidgetClass{
				InitiallyUnowned: externglib.InitiallyUnowned{Object: obj},
				BuildableInterface: BuildableInterface{
					Object: obj,
				},
			},
		},
	}
}

func marshalToolbar(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapToolbar(obj), nil
}

// NewToolbar creates a new toolbar.
func NewToolbar() *ToolbarClass {
	var _cret *C.GtkWidget // in

	_cret = C.gtk_toolbar_new()

	var _toolbar *ToolbarClass // out

	_toolbar = gextras.CastObject(
		externglib.Take(unsafe.Pointer(_cret))).(*ToolbarClass)

	return _toolbar
}

// DropIndex returns the position corresponding to the indicated point on
// @toolbar. This is useful when dragging items to the toolbar: this function
// returns the position a new item should be inserted.
//
// @x and @y are in @toolbar coordinates.
func (t *ToolbarClass) DropIndex(x int, y int) int {
	var _arg0 *C.GtkToolbar // out
	var _arg1 C.gint        // out
	var _arg2 C.gint        // out
	var _cret C.gint        // in

	_arg0 = (*C.GtkToolbar)(unsafe.Pointer((&Toolbar).Native()))
	_arg1 = C.gint(x)
	_arg2 = C.gint(y)

	_cret = C.gtk_toolbar_get_drop_index(_arg0, _arg1, _arg2)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// IconSize retrieves the icon size for the toolbar. See
// gtk_toolbar_set_icon_size().
func (t *ToolbarClass) IconSize() IconSize {
	var _arg0 *C.GtkToolbar // out
	var _cret C.GtkIconSize // in

	_arg0 = (*C.GtkToolbar)(unsafe.Pointer((&Toolbar).Native()))

	_cret = C.gtk_toolbar_get_icon_size(_arg0)

	var _iconSize IconSize // out

	_iconSize = (IconSize)(C.GtkIconSize)

	return _iconSize
}

// ItemIndex returns the position of @item on the toolbar, starting from 0. It
// is an error if @item is not a child of the toolbar.
func (t *ToolbarClass) ItemIndex(item ToolItem) int {
	var _arg0 *C.GtkToolbar  // out
	var _arg1 *C.GtkToolItem // out
	var _cret C.gint         // in

	_arg0 = (*C.GtkToolbar)(unsafe.Pointer((&Toolbar).Native()))
	_arg1 = (*C.GtkToolItem)(unsafe.Pointer((&ToolItem).Native()))

	_cret = C.gtk_toolbar_get_item_index(_arg0, _arg1)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// NItems returns the number of items on the toolbar.
func (t *ToolbarClass) NItems() int {
	var _arg0 *C.GtkToolbar // out
	var _cret C.gint        // in

	_arg0 = (*C.GtkToolbar)(unsafe.Pointer((&Toolbar).Native()))

	_cret = C.gtk_toolbar_get_n_items(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// NthItem returns the @n'th item on @toolbar, or nil if the toolbar does not
// contain an @n'th item.
func (t *ToolbarClass) NthItem(n int) *ToolItemClass {
	var _arg0 *C.GtkToolbar  // out
	var _arg1 C.gint         // out
	var _cret *C.GtkToolItem // in

	_arg0 = (*C.GtkToolbar)(unsafe.Pointer((&Toolbar).Native()))
	_arg1 = C.gint(n)

	_cret = C.gtk_toolbar_get_nth_item(_arg0, _arg1)

	var _toolItem *ToolItemClass // out

	_toolItem = gextras.CastObject(
		externglib.Take(unsafe.Pointer(_cret))).(*ToolItemClass)

	return _toolItem
}

// ReliefStyle returns the relief style of buttons on @toolbar. See
// gtk_button_set_relief().
func (t *ToolbarClass) ReliefStyle() ReliefStyle {
	var _arg0 *C.GtkToolbar    // out
	var _cret C.GtkReliefStyle // in

	_arg0 = (*C.GtkToolbar)(unsafe.Pointer((&Toolbar).Native()))

	_cret = C.gtk_toolbar_get_relief_style(_arg0)

	var _reliefStyle ReliefStyle // out

	_reliefStyle = (ReliefStyle)(C.GtkReliefStyle)

	return _reliefStyle
}

// ShowArrow returns whether the toolbar has an overflow menu. See
// gtk_toolbar_set_show_arrow().
func (t *ToolbarClass) ShowArrow() bool {
	var _arg0 *C.GtkToolbar // out
	var _cret C.gboolean    // in

	_arg0 = (*C.GtkToolbar)(unsafe.Pointer((&Toolbar).Native()))

	_cret = C.gtk_toolbar_get_show_arrow(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Style retrieves whether the toolbar has text, icons, or both . See
// gtk_toolbar_set_style().
func (t *ToolbarClass) Style() ToolbarStyle {
	var _arg0 *C.GtkToolbar     // out
	var _cret C.GtkToolbarStyle // in

	_arg0 = (*C.GtkToolbar)(unsafe.Pointer((&Toolbar).Native()))

	_cret = C.gtk_toolbar_get_style(_arg0)

	var _toolbarStyle ToolbarStyle // out

	_toolbarStyle = (ToolbarStyle)(C.GtkToolbarStyle)

	return _toolbarStyle
}

// Insert a ToolItem into the toolbar at position @pos. If @pos is 0 the item is
// prepended to the start of the toolbar. If @pos is negative, the item is
// appended to the end of the toolbar.
func (t *ToolbarClass) Insert(item ToolItem, pos int) {
	var _arg0 *C.GtkToolbar  // out
	var _arg1 *C.GtkToolItem // out
	var _arg2 C.gint         // out

	_arg0 = (*C.GtkToolbar)(unsafe.Pointer((&Toolbar).Native()))
	_arg1 = (*C.GtkToolItem)(unsafe.Pointer((&ToolItem).Native()))
	_arg2 = C.gint(pos)

	C.gtk_toolbar_insert(_arg0, _arg1, _arg2)
}

// SetDropHighlightItem highlights @toolbar to give an idea of what it would
// look like if @item was added to @toolbar at the position indicated by
// @index_. If @item is nil, highlighting is turned off. In that case @index_ is
// ignored.
//
// The @tool_item passed to this function must not be part of any widget
// hierarchy. When an item is set as drop highlight item it can not added to any
// widget hierarchy or used as highlight item for another toolbar.
func (t *ToolbarClass) SetDropHighlightItem(toolItem ToolItem, index_ int) {
	var _arg0 *C.GtkToolbar  // out
	var _arg1 *C.GtkToolItem // out
	var _arg2 C.gint         // out

	_arg0 = (*C.GtkToolbar)(unsafe.Pointer((&Toolbar).Native()))
	_arg1 = (*C.GtkToolItem)(unsafe.Pointer((&ToolItem).Native()))
	_arg2 = C.gint(index_)

	C.gtk_toolbar_set_drop_highlight_item(_arg0, _arg1, _arg2)
}

// SetShowArrow sets whether to show an overflow menu when @toolbar isn’t
// allocated enough size to show all of its items. If true, items which can’t
// fit in @toolbar, and which have a proxy menu item set by
// gtk_tool_item_set_proxy_menu_item() or ToolItem::create-menu-proxy, will be
// available in an overflow menu, which can be opened by an added arrow button.
// If false, @toolbar will request enough size to fit all of its child items
// without any overflow.
func (t *ToolbarClass) SetShowArrow(showArrow bool) {
	var _arg0 *C.GtkToolbar // out
	var _arg1 C.gboolean    // out

	_arg0 = (*C.GtkToolbar)(unsafe.Pointer((&Toolbar).Native()))
	if showArrow {
		_arg1 = C.TRUE
	}

	C.gtk_toolbar_set_show_arrow(_arg0, _arg1)
}

// UnsetIconSize unsets toolbar icon size set with gtk_toolbar_set_icon_size(),
// so that user preferences will be used to determine the icon size.
func (t *ToolbarClass) UnsetIconSize() {
	var _arg0 *C.GtkToolbar // out

	_arg0 = (*C.GtkToolbar)(unsafe.Pointer((&Toolbar).Native()))

	C.gtk_toolbar_unset_icon_size(_arg0)
}

// UnsetStyle unsets a toolbar style set with gtk_toolbar_set_style(), so that
// user preferences will be used to determine the toolbar style.
func (t *ToolbarClass) UnsetStyle() {
	var _arg0 *C.GtkToolbar // out

	_arg0 = (*C.GtkToolbar)(unsafe.Pointer((&Toolbar).Native()))

	C.gtk_toolbar_unset_style(_arg0)
}
