// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime/cgo"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
)

// #cgo pkg-config: gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

type Stock = string

// TranslateFunc: function used to translate messages in e.g. IconFactory and
// ActionGroup.
//
// Deprecated: since version 3.10.
type TranslateFunc func(path string, funcData cgo.Handle) (utf8 string)

//export _gotk4_gtk3_TranslateFunc
func _gotk4_gtk3_TranslateFunc(arg0 *C.gchar, arg1 C.gpointer) (cret *C.gchar) {
	v := gbox.Get(uintptr(arg1))
	if v == nil {
		panic(`callback not found`)
	}

	var path string         // out
	var funcData cgo.Handle // out

	path = C.GoString((*C.gchar)(unsafe.Pointer(arg0)))
	defer C.free(unsafe.Pointer(arg0))
	funcData = (cgo.Handle)(unsafe.Pointer(arg1))

	fn := v.(TranslateFunc)
	utf8 := fn(path, funcData)

	cret = (*C.gchar)(unsafe.Pointer(C.CString(utf8)))

	return cret
}

// StockAdd registers each of the stock items in items. If an item already
// exists with the same stock ID as one of the items, the old item gets
// replaced. The stock items are copied, so GTK+ does not hold any pointer into
// items and items can be freed. Use gtk_stock_add_static() if items is
// persistent and GTK+ need not copy the array.
//
// Deprecated: since version 3.10.
func StockAdd(items []StockItem) {
	var _arg1 *C.GtkStockItem
	var _arg2 C.guint

	_arg2 = (C.guint)(len(items))
	if len(items) > 0 {
		_arg1 = (*C.GtkStockItem)(unsafe.Pointer(&items[0]))
	}

	C.gtk_stock_add(_arg1, _arg2)
}

// StockAddStatic: same as gtk_stock_add(), but doesnâ€™t copy items, so items
// must persist until application exit.
//
// Deprecated: since version 3.10.
func StockAddStatic(items []StockItem) {
	var _arg1 *C.GtkStockItem
	var _arg2 C.guint

	_arg2 = (C.guint)(len(items))
	if len(items) > 0 {
		_arg1 = (*C.GtkStockItem)(unsafe.Pointer(&items[0]))
	}

	C.gtk_stock_add_static(_arg1, _arg2)
}

// StockLookup fills item with the registered values for stock_id, returning
// TRUE if stock_id was known.
//
// Deprecated: since version 3.10.
func StockLookup(stockId string) (StockItem, bool) {
	var _arg1 *C.gchar // out
	var _item StockItem
	var _cret C.gboolean // in

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(stockId)))

	_cret = C.gtk_stock_lookup(_arg1, (*C.GtkStockItem)(unsafe.Pointer(&_item)))

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _item, _ok
}

// StockItem: deprecated: since version 3.10.
type StockItem struct {
	native C.GtkStockItem
}

// Native returns the underlying C source pointer.
func (s *StockItem) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

// StockID: identifier.
func (s *StockItem) StockID() string {
	var v string // out
	v = C.GoString((*C.gchar)(unsafe.Pointer(s.native.stock_id)))
	return v
}

// Label: user visible label.
func (s *StockItem) Label() string {
	var v string // out
	v = C.GoString((*C.gchar)(unsafe.Pointer(s.native.label)))
	return v
}

// Modifier type for keyboard accelerator
func (s *StockItem) Modifier() gdk.ModifierType {
	var v gdk.ModifierType // out
	v = gdk.ModifierType(s.native.modifier)
	return v
}

// Keyval: keyboard accelerator
func (s *StockItem) Keyval() uint {
	var v uint // out
	v = uint(s.native.keyval)
	return v
}

// TranslationDomain: translation domain of the menu or toolbar item
func (s *StockItem) TranslationDomain() string {
	var v string // out
	v = C.GoString((*C.gchar)(unsafe.Pointer(s.native.translation_domain)))
	return v
}

// Free frees a stock item allocated on the heap, such as one returned by
// gtk_stock_item_copy(). Also frees the fields inside the stock item, if they
// are not NULL.
//
// Deprecated: since version 3.10.
func (item *StockItem) free() {
	var _arg0 *C.GtkStockItem // out

	_arg0 = (*C.GtkStockItem)(unsafe.Pointer(item))

	C.gtk_stock_item_free(_arg0)
}
