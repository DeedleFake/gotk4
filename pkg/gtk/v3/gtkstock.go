// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/box"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
)

// #cgo pkg-config: gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

type Stock = string

// TranslateFunc: the function used to translate messages in e.g. IconFactory
// and ActionGroup.
//
// Deprecated: since version 3.10.
type TranslateFunc func(path string) (utf8 string)

//export gotk4_TranslateFunc
func gotk4_TranslateFunc(arg0 *C.gchar, arg1 C.gpointer) (cret *C.gchar) {
	v := box.Get(uintptr(arg1))
	if v == nil {
		panic(`callback not found`)
	}

	var path string // out

	path = C.GoString(arg0)

	fn := v.(TranslateFunc)
	utf8 := fn(path)

	cret = (*C.gchar)(C.CString(utf8))

	return cret
}

// StockItem: deprecated: since version 3.10.
type StockItem struct {
	native C.GtkStockItem
}

// WrapStockItem wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapStockItem(ptr unsafe.Pointer) *StockItem {
	return (*StockItem)(ptr)
}

// Native returns the underlying C source pointer.
func (s *StockItem) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

// StockID: identifier.
func (s *StockItem) StockID() string {
	var v string // out
	v = C.GoString(s.native.stock_id)
	return v
}

// Label: user visible label.
func (s *StockItem) Label() string {
	var v string // out
	v = C.GoString(s.native.label)
	return v
}

// Modifier type for keyboard accelerator
func (s *StockItem) Modifier() gdk.ModifierType {
	var v gdk.ModifierType // out
	v = gdk.ModifierType(s.native.modifier)
	return v
}

// Keyval: keyboard accelerator
func (s *StockItem) Keyval() uint {
	var v uint // out
	v = uint(s.native.keyval)
	return v
}

// TranslationDomain: translation domain of the menu or toolbar item
func (s *StockItem) TranslationDomain() string {
	var v string // out
	v = C.GoString(s.native.translation_domain)
	return v
}

// Free frees a stock item allocated on the heap, such as one returned by
// gtk_stock_item_copy(). Also frees the fields inside the stock item, if they
// are not nil.
//
// Deprecated: since version 3.10.
func (i *StockItem) free() {
	var _arg0 *C.GtkStockItem // out

	_arg0 = (*C.GtkStockItem)(unsafe.Pointer(i))

	C.gtk_stock_item_free(_arg0)
}
