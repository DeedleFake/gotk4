// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
)

// #cgo pkg-config: gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

type FixedChild struct {
	native C.GtkFixedChild
}

// WrapFixedChild wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapFixedChild(ptr unsafe.Pointer) *FixedChild {
	if ptr == nil {
		return nil
	}

	return (*FixedChild)(ptr)
}

func marshalFixedChild(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapFixedChild(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (f *FixedChild) Native() unsafe.Pointer {
	return unsafe.Pointer(&f.native)
}

// Widget gets the field inside the struct.
func (f *FixedChild) Widget() Widget {
	var ret Widget
	ret = gextras.CastObject(externglib.Take(unsafe.Pointer(f.native.widget.Native()))).(Widget)
	return ret
}

// X gets the field inside the struct.
func (f *FixedChild) X() int {
	var ret int
	ret = int(f.native.x)
	return ret
}

// Y gets the field inside the struct.
func (f *FixedChild) Y() int {
	var ret int
	ret = int(f.native.y)
	return ret
}

type FixedPrivate struct {
	native C.GtkFixedPrivate
}

// WrapFixedPrivate wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapFixedPrivate(ptr unsafe.Pointer) *FixedPrivate {
	if ptr == nil {
		return nil
	}

	return (*FixedPrivate)(ptr)
}

func marshalFixedPrivate(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapFixedPrivate(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (f *FixedPrivate) Native() unsafe.Pointer {
	return unsafe.Pointer(&f.native)
}
