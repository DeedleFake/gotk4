// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_expander_style_get_type()), F: marshalExpanderStyle},
		{T: externglib.Type(C.gtk_style_get_type()), F: marshalStyle},
	})
}

// ExpanderStyle: used to specify the style of the expanders drawn by a
// TreeView.
type ExpanderStyle int

const (
	// Collapsed: the style used for a collapsed subtree.
	ExpanderStyleCollapsed ExpanderStyle = iota
	// SemiCollapsed: intermediate style used during animation.
	ExpanderStyleSemiCollapsed
	// SemiExpanded: intermediate style used during animation.
	ExpanderStyleSemiExpanded
	// Expanded: the style used for an expanded subtree.
	ExpanderStyleExpanded
)

func marshalExpanderStyle(p uintptr) (interface{}, error) {
	return ExpanderStyle(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// StyleOverrider contains methods that are overridable.
//
// As of right now, interface overriding and subclassing is not supported
// yet, so the interface currently has no use.
type StyleOverrider interface {
	Copy(src Style)
	InitFromRC(rcStyle RCStyle)
	Realize()
	Unrealize()
}

// Style object encapsulates the information that provides the look and feel for
// a widget.
//
// > In GTK+ 3.0, GtkStyle has been deprecated and replaced by > StyleContext.
//
// Each Widget has an associated Style object that is used when rendering that
// widget. Also, a Style holds information for the five possible widget states
// though not every widget supports all five states; see StateType.
//
// Usually the Style for a widget is the same as the default style that is set
// by GTK+ and modified the theme engine.
//
// Usually applications should not need to use or modify the Style of their
// widgets.
type Style interface {
	gextras.Objector

	// Copy creates a copy of the passed in Style object.
	//
	// Deprecated: since version 3.0.
	Copy() *StyleClass
	// Detach detaches a style from a window. If the style is not attached to
	// any windows anymore, it is unrealized. See gtk_style_attach().
	//
	// Deprecated: since version 3.0.
	Detach()
	// HasContext returns whether @style has an associated StyleContext.
	HasContext() bool
	// LookupIconSet looks up @stock_id in the icon factories associated with
	// @style and the default icon factory, returning an icon set if found,
	// otherwise nil.
	//
	// Deprecated: since version 3.0.
	LookupIconSet(stockId string) *IconSet
}

// StyleClass implements the Style interface.
type StyleClass struct {
	*externglib.Object
}

var _ Style = (*StyleClass)(nil)

func wrapStyle(obj *externglib.Object) Style {
	return &StyleClass{
		Object: obj,
	}
}

func marshalStyle(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapStyle(obj), nil
}

// NewStyle creates a new Style.
//
// Deprecated: since version 3.0.
func NewStyle() *StyleClass {
	var _cret *C.GtkStyle // in

	_cret = C.gtk_style_new()

	var _style *StyleClass // out

	_style = gextras.CastObject(
		externglib.AssumeOwnership(unsafe.Pointer(_cret))).(*StyleClass)

	return _style
}

// Copy creates a copy of the passed in Style object.
//
// Deprecated: since version 3.0.
func (s *StyleClass) Copy() *StyleClass {
	var _arg0 *C.GtkStyle // out
	var _cret *C.GtkStyle // in

	_arg0 = (*C.GtkStyle)(unsafe.Pointer((&s).Native()))

	_cret = C.gtk_style_copy(_arg0)

	var _ret *StyleClass // out

	_ret = gextras.CastObject(
		externglib.AssumeOwnership(unsafe.Pointer(_cret))).(*StyleClass)

	return _ret
}

// Detach detaches a style from a window. If the style is not attached to any
// windows anymore, it is unrealized. See gtk_style_attach().
//
// Deprecated: since version 3.0.
func (s *StyleClass) Detach() {
	var _arg0 *C.GtkStyle // out

	_arg0 = (*C.GtkStyle)(unsafe.Pointer((&s).Native()))

	C.gtk_style_detach(_arg0)
}

// HasContext returns whether @style has an associated StyleContext.
func (s *StyleClass) HasContext() bool {
	var _arg0 *C.GtkStyle // out
	var _cret C.gboolean  // in

	_arg0 = (*C.GtkStyle)(unsafe.Pointer((&s).Native()))

	_cret = C.gtk_style_has_context(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// LookupIconSet looks up @stock_id in the icon factories associated with @style
// and the default icon factory, returning an icon set if found, otherwise nil.
//
// Deprecated: since version 3.0.
func (s *StyleClass) LookupIconSet(stockId string) *IconSet {
	var _arg0 *C.GtkStyle   // out
	var _arg1 *C.gchar      // out
	var _cret *C.GtkIconSet // in

	_arg0 = (*C.GtkStyle)(unsafe.Pointer((&s).Native()))
	_arg1 = (*C.gchar)(C.CString(stockId))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_style_lookup_icon_set(_arg0, _arg1)

	var _iconSet *IconSet // out

	_iconSet = (*IconSet)(unsafe.Pointer(_cret))
	C.gtk_icon_set_ref(_cret)
	runtime.SetFinalizer(_iconSet, func(v *IconSet) {
		C.gtk_icon_set_unref((*C.GtkIconSet)(unsafe.Pointer(v)))
	})

	return _iconSet
}
