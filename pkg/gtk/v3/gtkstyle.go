// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_style_get_type()), F: marshalStyle},
	})
}

// PaintArrow draws an arrow in the given rectangle on @cr using the given
// parameters. @arrow_type determines the direction of the arrow.
func PaintArrow(style Style, cr *cairo.Context, stateType StateType, shadowType ShadowType, widget Widget, detail string, arrowType ArrowType, fill bool, x int, y int, width int, height int) {
	var arg1 *C.GtkStyle
	var arg2 *C.cairo_t
	var arg3 C.GtkStateType
	var arg4 C.GtkShadowType
	var arg5 *C.GtkWidget
	var arg6 *C.gchar
	var arg7 C.GtkArrowType
	var arg8 C.gboolean
	var arg9 C.gint
	var arg10 C.gint
	var arg11 C.gint
	var arg12 C.gint

	arg1 = (*C.GtkStyle)(unsafe.Pointer(style.Native()))
	arg2 = (*C.cairo_t)(unsafe.Pointer(cr.Native()))
	arg3 = (C.GtkStateType)(stateType)
	arg4 = (C.GtkShadowType)(shadowType)
	arg5 = (*C.GtkWidget)(unsafe.Pointer(widget.Native()))
	arg6 = (*C.gchar)(C.CString(detail))
	defer C.free(unsafe.Pointer(arg6))
	arg7 = (C.GtkArrowType)(arrowType)
	if fill {
		arg8 = C.gboolean(1)
	}
	arg9 = C.gint(x)
	arg10 = C.gint(y)
	arg11 = C.gint(width)
	arg12 = C.gint(height)

	C.gtk_paint_arrow(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)
}

// PaintBox draws a box on @cr with the given parameters.
func PaintBox(style Style, cr *cairo.Context, stateType StateType, shadowType ShadowType, widget Widget, detail string, x int, y int, width int, height int) {
	var arg1 *C.GtkStyle
	var arg2 *C.cairo_t
	var arg3 C.GtkStateType
	var arg4 C.GtkShadowType
	var arg5 *C.GtkWidget
	var arg6 *C.gchar
	var arg7 C.gint
	var arg8 C.gint
	var arg9 C.gint
	var arg10 C.gint

	arg1 = (*C.GtkStyle)(unsafe.Pointer(style.Native()))
	arg2 = (*C.cairo_t)(unsafe.Pointer(cr.Native()))
	arg3 = (C.GtkStateType)(stateType)
	arg4 = (C.GtkShadowType)(shadowType)
	arg5 = (*C.GtkWidget)(unsafe.Pointer(widget.Native()))
	arg6 = (*C.gchar)(C.CString(detail))
	defer C.free(unsafe.Pointer(arg6))
	arg7 = C.gint(x)
	arg8 = C.gint(y)
	arg9 = C.gint(width)
	arg10 = C.gint(height)

	C.gtk_paint_box(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
}

// PaintBoxGap draws a box in @cr using the given style and state and shadow
// type, leaving a gap in one side.
func PaintBoxGap(style Style, cr *cairo.Context, stateType StateType, shadowType ShadowType, widget Widget, detail string, x int, y int, width int, height int, gapSide PositionType, gapX int, gapWidth int) {
	var arg1 *C.GtkStyle
	var arg2 *C.cairo_t
	var arg3 C.GtkStateType
	var arg4 C.GtkShadowType
	var arg5 *C.GtkWidget
	var arg6 *C.gchar
	var arg7 C.gint
	var arg8 C.gint
	var arg9 C.gint
	var arg10 C.gint
	var arg11 C.GtkPositionType
	var arg12 C.gint
	var arg13 C.gint

	arg1 = (*C.GtkStyle)(unsafe.Pointer(style.Native()))
	arg2 = (*C.cairo_t)(unsafe.Pointer(cr.Native()))
	arg3 = (C.GtkStateType)(stateType)
	arg4 = (C.GtkShadowType)(shadowType)
	arg5 = (*C.GtkWidget)(unsafe.Pointer(widget.Native()))
	arg6 = (*C.gchar)(C.CString(detail))
	defer C.free(unsafe.Pointer(arg6))
	arg7 = C.gint(x)
	arg8 = C.gint(y)
	arg9 = C.gint(width)
	arg10 = C.gint(height)
	arg11 = (C.GtkPositionType)(gapSide)
	arg12 = C.gint(gapX)
	arg13 = C.gint(gapWidth)

	C.gtk_paint_box_gap(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13)
}

// PaintCheck draws a check button indicator in the given rectangle on @cr with
// the given parameters.
func PaintCheck(style Style, cr *cairo.Context, stateType StateType, shadowType ShadowType, widget Widget, detail string, x int, y int, width int, height int) {
	var arg1 *C.GtkStyle
	var arg2 *C.cairo_t
	var arg3 C.GtkStateType
	var arg4 C.GtkShadowType
	var arg5 *C.GtkWidget
	var arg6 *C.gchar
	var arg7 C.gint
	var arg8 C.gint
	var arg9 C.gint
	var arg10 C.gint

	arg1 = (*C.GtkStyle)(unsafe.Pointer(style.Native()))
	arg2 = (*C.cairo_t)(unsafe.Pointer(cr.Native()))
	arg3 = (C.GtkStateType)(stateType)
	arg4 = (C.GtkShadowType)(shadowType)
	arg5 = (*C.GtkWidget)(unsafe.Pointer(widget.Native()))
	arg6 = (*C.gchar)(C.CString(detail))
	defer C.free(unsafe.Pointer(arg6))
	arg7 = C.gint(x)
	arg8 = C.gint(y)
	arg9 = C.gint(width)
	arg10 = C.gint(height)

	C.gtk_paint_check(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
}

// PaintDiamond draws a diamond in the given rectangle on @window using the
// given parameters.
func PaintDiamond(style Style, cr *cairo.Context, stateType StateType, shadowType ShadowType, widget Widget, detail string, x int, y int, width int, height int) {
	var arg1 *C.GtkStyle
	var arg2 *C.cairo_t
	var arg3 C.GtkStateType
	var arg4 C.GtkShadowType
	var arg5 *C.GtkWidget
	var arg6 *C.gchar
	var arg7 C.gint
	var arg8 C.gint
	var arg9 C.gint
	var arg10 C.gint

	arg1 = (*C.GtkStyle)(unsafe.Pointer(style.Native()))
	arg2 = (*C.cairo_t)(unsafe.Pointer(cr.Native()))
	arg3 = (C.GtkStateType)(stateType)
	arg4 = (C.GtkShadowType)(shadowType)
	arg5 = (*C.GtkWidget)(unsafe.Pointer(widget.Native()))
	arg6 = (*C.gchar)(C.CString(detail))
	defer C.free(unsafe.Pointer(arg6))
	arg7 = C.gint(x)
	arg8 = C.gint(y)
	arg9 = C.gint(width)
	arg10 = C.gint(height)

	C.gtk_paint_diamond(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
}

// PaintExpander draws an expander as used in TreeView. @x and @y specify the
// center the expander. The size of the expander is determined by the
// “expander-size” style property of @widget. (If widget is not specified or
// doesn’t have an “expander-size” property, an unspecified default size will be
// used, since the caller doesn't have sufficient information to position the
// expander, this is likely not useful.) The expander is expander_size pixels
// tall in the collapsed position and expander_size pixels wide in the expanded
// position.
func PaintExpander(style Style, cr *cairo.Context, stateType StateType, widget Widget, detail string, x int, y int, expanderStyle ExpanderStyle) {
	var arg1 *C.GtkStyle
	var arg2 *C.cairo_t
	var arg3 C.GtkStateType
	var arg4 *C.GtkWidget
	var arg5 *C.gchar
	var arg6 C.gint
	var arg7 C.gint
	var arg8 C.GtkExpanderStyle

	arg1 = (*C.GtkStyle)(unsafe.Pointer(style.Native()))
	arg2 = (*C.cairo_t)(unsafe.Pointer(cr.Native()))
	arg3 = (C.GtkStateType)(stateType)
	arg4 = (*C.GtkWidget)(unsafe.Pointer(widget.Native()))
	arg5 = (*C.gchar)(C.CString(detail))
	defer C.free(unsafe.Pointer(arg5))
	arg6 = C.gint(x)
	arg7 = C.gint(y)
	arg8 = (C.GtkExpanderStyle)(expanderStyle)

	C.gtk_paint_expander(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
}

// PaintExtension draws an extension, i.e. a notebook tab.
func PaintExtension(style Style, cr *cairo.Context, stateType StateType, shadowType ShadowType, widget Widget, detail string, x int, y int, width int, height int, gapSide PositionType) {
	var arg1 *C.GtkStyle
	var arg2 *C.cairo_t
	var arg3 C.GtkStateType
	var arg4 C.GtkShadowType
	var arg5 *C.GtkWidget
	var arg6 *C.gchar
	var arg7 C.gint
	var arg8 C.gint
	var arg9 C.gint
	var arg10 C.gint
	var arg11 C.GtkPositionType

	arg1 = (*C.GtkStyle)(unsafe.Pointer(style.Native()))
	arg2 = (*C.cairo_t)(unsafe.Pointer(cr.Native()))
	arg3 = (C.GtkStateType)(stateType)
	arg4 = (C.GtkShadowType)(shadowType)
	arg5 = (*C.GtkWidget)(unsafe.Pointer(widget.Native()))
	arg6 = (*C.gchar)(C.CString(detail))
	defer C.free(unsafe.Pointer(arg6))
	arg7 = C.gint(x)
	arg8 = C.gint(y)
	arg9 = C.gint(width)
	arg10 = C.gint(height)
	arg11 = (C.GtkPositionType)(gapSide)

	C.gtk_paint_extension(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)
}

// PaintFlatBox draws a flat box on @cr with the given parameters.
func PaintFlatBox(style Style, cr *cairo.Context, stateType StateType, shadowType ShadowType, widget Widget, detail string, x int, y int, width int, height int) {
	var arg1 *C.GtkStyle
	var arg2 *C.cairo_t
	var arg3 C.GtkStateType
	var arg4 C.GtkShadowType
	var arg5 *C.GtkWidget
	var arg6 *C.gchar
	var arg7 C.gint
	var arg8 C.gint
	var arg9 C.gint
	var arg10 C.gint

	arg1 = (*C.GtkStyle)(unsafe.Pointer(style.Native()))
	arg2 = (*C.cairo_t)(unsafe.Pointer(cr.Native()))
	arg3 = (C.GtkStateType)(stateType)
	arg4 = (C.GtkShadowType)(shadowType)
	arg5 = (*C.GtkWidget)(unsafe.Pointer(widget.Native()))
	arg6 = (*C.gchar)(C.CString(detail))
	defer C.free(unsafe.Pointer(arg6))
	arg7 = C.gint(x)
	arg8 = C.gint(y)
	arg9 = C.gint(width)
	arg10 = C.gint(height)

	C.gtk_paint_flat_box(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
}

// PaintFocus draws a focus indicator around the given rectangle on @cr using
// the given style.
func PaintFocus(style Style, cr *cairo.Context, stateType StateType, widget Widget, detail string, x int, y int, width int, height int) {
	var arg1 *C.GtkStyle
	var arg2 *C.cairo_t
	var arg3 C.GtkStateType
	var arg4 *C.GtkWidget
	var arg5 *C.gchar
	var arg6 C.gint
	var arg7 C.gint
	var arg8 C.gint
	var arg9 C.gint

	arg1 = (*C.GtkStyle)(unsafe.Pointer(style.Native()))
	arg2 = (*C.cairo_t)(unsafe.Pointer(cr.Native()))
	arg3 = (C.GtkStateType)(stateType)
	arg4 = (*C.GtkWidget)(unsafe.Pointer(widget.Native()))
	arg5 = (*C.gchar)(C.CString(detail))
	defer C.free(unsafe.Pointer(arg5))
	arg6 = C.gint(x)
	arg7 = C.gint(y)
	arg8 = C.gint(width)
	arg9 = C.gint(height)

	C.gtk_paint_focus(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
}

// PaintHandle draws a handle as used in HandleBox and Paned.
func PaintHandle(style Style, cr *cairo.Context, stateType StateType, shadowType ShadowType, widget Widget, detail string, x int, y int, width int, height int, orientation Orientation) {
	var arg1 *C.GtkStyle
	var arg2 *C.cairo_t
	var arg3 C.GtkStateType
	var arg4 C.GtkShadowType
	var arg5 *C.GtkWidget
	var arg6 *C.gchar
	var arg7 C.gint
	var arg8 C.gint
	var arg9 C.gint
	var arg10 C.gint
	var arg11 C.GtkOrientation

	arg1 = (*C.GtkStyle)(unsafe.Pointer(style.Native()))
	arg2 = (*C.cairo_t)(unsafe.Pointer(cr.Native()))
	arg3 = (C.GtkStateType)(stateType)
	arg4 = (C.GtkShadowType)(shadowType)
	arg5 = (*C.GtkWidget)(unsafe.Pointer(widget.Native()))
	arg6 = (*C.gchar)(C.CString(detail))
	defer C.free(unsafe.Pointer(arg6))
	arg7 = C.gint(x)
	arg8 = C.gint(y)
	arg9 = C.gint(width)
	arg10 = C.gint(height)
	arg11 = (C.GtkOrientation)(orientation)

	C.gtk_paint_handle(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)
}

// PaintHline draws a horizontal line from (@x1, @y) to (@x2, @y) in @cr using
// the given style and state.
func PaintHline(style Style, cr *cairo.Context, stateType StateType, widget Widget, detail string, x1 int, x2 int, y int) {
	var arg1 *C.GtkStyle
	var arg2 *C.cairo_t
	var arg3 C.GtkStateType
	var arg4 *C.GtkWidget
	var arg5 *C.gchar
	var arg6 C.gint
	var arg7 C.gint
	var arg8 C.gint

	arg1 = (*C.GtkStyle)(unsafe.Pointer(style.Native()))
	arg2 = (*C.cairo_t)(unsafe.Pointer(cr.Native()))
	arg3 = (C.GtkStateType)(stateType)
	arg4 = (*C.GtkWidget)(unsafe.Pointer(widget.Native()))
	arg5 = (*C.gchar)(C.CString(detail))
	defer C.free(unsafe.Pointer(arg5))
	arg6 = C.gint(x1)
	arg7 = C.gint(x2)
	arg8 = C.gint(y)

	C.gtk_paint_hline(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
}

// PaintLayout draws a layout on @cr using the given parameters.
func PaintLayout(style Style, cr *cairo.Context, stateType StateType, useText bool, widget Widget, detail string, x int, y int, layout pango.Layout) {
	var arg1 *C.GtkStyle
	var arg2 *C.cairo_t
	var arg3 C.GtkStateType
	var arg4 C.gboolean
	var arg5 *C.GtkWidget
	var arg6 *C.gchar
	var arg7 C.gint
	var arg8 C.gint
	var arg9 *C.PangoLayout

	arg1 = (*C.GtkStyle)(unsafe.Pointer(style.Native()))
	arg2 = (*C.cairo_t)(unsafe.Pointer(cr.Native()))
	arg3 = (C.GtkStateType)(stateType)
	if useText {
		arg4 = C.gboolean(1)
	}
	arg5 = (*C.GtkWidget)(unsafe.Pointer(widget.Native()))
	arg6 = (*C.gchar)(C.CString(detail))
	defer C.free(unsafe.Pointer(arg6))
	arg7 = C.gint(x)
	arg8 = C.gint(y)
	arg9 = (*C.PangoLayout)(unsafe.Pointer(layout.Native()))

	C.gtk_paint_layout(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
}

// PaintOption draws a radio button indicator in the given rectangle on @cr with
// the given parameters.
func PaintOption(style Style, cr *cairo.Context, stateType StateType, shadowType ShadowType, widget Widget, detail string, x int, y int, width int, height int) {
	var arg1 *C.GtkStyle
	var arg2 *C.cairo_t
	var arg3 C.GtkStateType
	var arg4 C.GtkShadowType
	var arg5 *C.GtkWidget
	var arg6 *C.gchar
	var arg7 C.gint
	var arg8 C.gint
	var arg9 C.gint
	var arg10 C.gint

	arg1 = (*C.GtkStyle)(unsafe.Pointer(style.Native()))
	arg2 = (*C.cairo_t)(unsafe.Pointer(cr.Native()))
	arg3 = (C.GtkStateType)(stateType)
	arg4 = (C.GtkShadowType)(shadowType)
	arg5 = (*C.GtkWidget)(unsafe.Pointer(widget.Native()))
	arg6 = (*C.gchar)(C.CString(detail))
	defer C.free(unsafe.Pointer(arg6))
	arg7 = C.gint(x)
	arg8 = C.gint(y)
	arg9 = C.gint(width)
	arg10 = C.gint(height)

	C.gtk_paint_option(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
}

// PaintResizeGrip draws a resize grip in the given rectangle on @cr using the
// given parameters.
func PaintResizeGrip(style Style, cr *cairo.Context, stateType StateType, widget Widget, detail string, edge gdk.WindowEdge, x int, y int, width int, height int) {
	var arg1 *C.GtkStyle
	var arg2 *C.cairo_t
	var arg3 C.GtkStateType
	var arg4 *C.GtkWidget
	var arg5 *C.gchar
	var arg6 C.GdkWindowEdge
	var arg7 C.gint
	var arg8 C.gint
	var arg9 C.gint
	var arg10 C.gint

	arg1 = (*C.GtkStyle)(unsafe.Pointer(style.Native()))
	arg2 = (*C.cairo_t)(unsafe.Pointer(cr.Native()))
	arg3 = (C.GtkStateType)(stateType)
	arg4 = (*C.GtkWidget)(unsafe.Pointer(widget.Native()))
	arg5 = (*C.gchar)(C.CString(detail))
	defer C.free(unsafe.Pointer(arg5))
	arg6 = (C.GdkWindowEdge)(edge)
	arg7 = C.gint(x)
	arg8 = C.gint(y)
	arg9 = C.gint(width)
	arg10 = C.gint(height)

	C.gtk_paint_resize_grip(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
}

// PaintShadow draws a shadow around the given rectangle in @cr using the given
// style and state and shadow type.
func PaintShadow(style Style, cr *cairo.Context, stateType StateType, shadowType ShadowType, widget Widget, detail string, x int, y int, width int, height int) {
	var arg1 *C.GtkStyle
	var arg2 *C.cairo_t
	var arg3 C.GtkStateType
	var arg4 C.GtkShadowType
	var arg5 *C.GtkWidget
	var arg6 *C.gchar
	var arg7 C.gint
	var arg8 C.gint
	var arg9 C.gint
	var arg10 C.gint

	arg1 = (*C.GtkStyle)(unsafe.Pointer(style.Native()))
	arg2 = (*C.cairo_t)(unsafe.Pointer(cr.Native()))
	arg3 = (C.GtkStateType)(stateType)
	arg4 = (C.GtkShadowType)(shadowType)
	arg5 = (*C.GtkWidget)(unsafe.Pointer(widget.Native()))
	arg6 = (*C.gchar)(C.CString(detail))
	defer C.free(unsafe.Pointer(arg6))
	arg7 = C.gint(x)
	arg8 = C.gint(y)
	arg9 = C.gint(width)
	arg10 = C.gint(height)

	C.gtk_paint_shadow(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
}

// PaintShadowGap draws a shadow around the given rectangle in @cr using the
// given style and state and shadow type, leaving a gap in one side.
func PaintShadowGap(style Style, cr *cairo.Context, stateType StateType, shadowType ShadowType, widget Widget, detail string, x int, y int, width int, height int, gapSide PositionType, gapX int, gapWidth int) {
	var arg1 *C.GtkStyle
	var arg2 *C.cairo_t
	var arg3 C.GtkStateType
	var arg4 C.GtkShadowType
	var arg5 *C.GtkWidget
	var arg6 *C.gchar
	var arg7 C.gint
	var arg8 C.gint
	var arg9 C.gint
	var arg10 C.gint
	var arg11 C.GtkPositionType
	var arg12 C.gint
	var arg13 C.gint

	arg1 = (*C.GtkStyle)(unsafe.Pointer(style.Native()))
	arg2 = (*C.cairo_t)(unsafe.Pointer(cr.Native()))
	arg3 = (C.GtkStateType)(stateType)
	arg4 = (C.GtkShadowType)(shadowType)
	arg5 = (*C.GtkWidget)(unsafe.Pointer(widget.Native()))
	arg6 = (*C.gchar)(C.CString(detail))
	defer C.free(unsafe.Pointer(arg6))
	arg7 = C.gint(x)
	arg8 = C.gint(y)
	arg9 = C.gint(width)
	arg10 = C.gint(height)
	arg11 = (C.GtkPositionType)(gapSide)
	arg12 = C.gint(gapX)
	arg13 = C.gint(gapWidth)

	C.gtk_paint_shadow_gap(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13)
}

// PaintSlider draws a slider in the given rectangle on @cr using the given
// style and orientation.
func PaintSlider(style Style, cr *cairo.Context, stateType StateType, shadowType ShadowType, widget Widget, detail string, x int, y int, width int, height int, orientation Orientation) {
	var arg1 *C.GtkStyle
	var arg2 *C.cairo_t
	var arg3 C.GtkStateType
	var arg4 C.GtkShadowType
	var arg5 *C.GtkWidget
	var arg6 *C.gchar
	var arg7 C.gint
	var arg8 C.gint
	var arg9 C.gint
	var arg10 C.gint
	var arg11 C.GtkOrientation

	arg1 = (*C.GtkStyle)(unsafe.Pointer(style.Native()))
	arg2 = (*C.cairo_t)(unsafe.Pointer(cr.Native()))
	arg3 = (C.GtkStateType)(stateType)
	arg4 = (C.GtkShadowType)(shadowType)
	arg5 = (*C.GtkWidget)(unsafe.Pointer(widget.Native()))
	arg6 = (*C.gchar)(C.CString(detail))
	defer C.free(unsafe.Pointer(arg6))
	arg7 = C.gint(x)
	arg8 = C.gint(y)
	arg9 = C.gint(width)
	arg10 = C.gint(height)
	arg11 = (C.GtkOrientation)(orientation)

	C.gtk_paint_slider(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)
}

// PaintSpinner draws a spinner on @window using the given parameters.
func PaintSpinner(style Style, cr *cairo.Context, stateType StateType, widget Widget, detail string, step uint, x int, y int, width int, height int) {
	var arg1 *C.GtkStyle
	var arg2 *C.cairo_t
	var arg3 C.GtkStateType
	var arg4 *C.GtkWidget
	var arg5 *C.gchar
	var arg6 C.guint
	var arg7 C.gint
	var arg8 C.gint
	var arg9 C.gint
	var arg10 C.gint

	arg1 = (*C.GtkStyle)(unsafe.Pointer(style.Native()))
	arg2 = (*C.cairo_t)(unsafe.Pointer(cr.Native()))
	arg3 = (C.GtkStateType)(stateType)
	arg4 = (*C.GtkWidget)(unsafe.Pointer(widget.Native()))
	arg5 = (*C.gchar)(C.CString(detail))
	defer C.free(unsafe.Pointer(arg5))
	arg6 = C.guint(step)
	arg7 = C.gint(x)
	arg8 = C.gint(y)
	arg9 = C.gint(width)
	arg10 = C.gint(height)

	C.gtk_paint_spinner(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
}

// PaintTab draws an option menu tab (i.e. the up and down pointing arrows) in
// the given rectangle on @cr using the given parameters.
func PaintTab(style Style, cr *cairo.Context, stateType StateType, shadowType ShadowType, widget Widget, detail string, x int, y int, width int, height int) {
	var arg1 *C.GtkStyle
	var arg2 *C.cairo_t
	var arg3 C.GtkStateType
	var arg4 C.GtkShadowType
	var arg5 *C.GtkWidget
	var arg6 *C.gchar
	var arg7 C.gint
	var arg8 C.gint
	var arg9 C.gint
	var arg10 C.gint

	arg1 = (*C.GtkStyle)(unsafe.Pointer(style.Native()))
	arg2 = (*C.cairo_t)(unsafe.Pointer(cr.Native()))
	arg3 = (C.GtkStateType)(stateType)
	arg4 = (C.GtkShadowType)(shadowType)
	arg5 = (*C.GtkWidget)(unsafe.Pointer(widget.Native()))
	arg6 = (*C.gchar)(C.CString(detail))
	defer C.free(unsafe.Pointer(arg6))
	arg7 = C.gint(x)
	arg8 = C.gint(y)
	arg9 = C.gint(width)
	arg10 = C.gint(height)

	C.gtk_paint_tab(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
}

// PaintVline draws a vertical line from (@x, @y1_) to (@x, @y2_) in @cr using
// the given style and state.
func PaintVline(style Style, cr *cairo.Context, stateType StateType, widget Widget, detail string, y1 int, y2 int, x int) {
	var arg1 *C.GtkStyle
	var arg2 *C.cairo_t
	var arg3 C.GtkStateType
	var arg4 *C.GtkWidget
	var arg5 *C.gchar
	var arg6 C.gint
	var arg7 C.gint
	var arg8 C.gint

	arg1 = (*C.GtkStyle)(unsafe.Pointer(style.Native()))
	arg2 = (*C.cairo_t)(unsafe.Pointer(cr.Native()))
	arg3 = (C.GtkStateType)(stateType)
	arg4 = (*C.GtkWidget)(unsafe.Pointer(widget.Native()))
	arg5 = (*C.gchar)(C.CString(detail))
	defer C.free(unsafe.Pointer(arg5))
	arg6 = C.gint(y1)
	arg7 = C.gint(y2)
	arg8 = C.gint(x)

	C.gtk_paint_vline(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
}

// Style: a Style object encapsulates the information that provides the look and
// feel for a widget.
//
// > In GTK+ 3.0, GtkStyle has been deprecated and replaced by > StyleContext.
//
// Each Widget has an associated Style object that is used when rendering that
// widget. Also, a Style holds information for the five possible widget states
// though not every widget supports all five states; see StateType.
//
// Usually the Style for a widget is the same as the default style that is set
// by GTK+ and modified the theme engine.
//
// Usually applications should not need to use or modify the Style of their
// widgets.
type Style interface {
	gextras.Objector

	ApplyDefaultBackground(s Style, cr *cairo.Context, window gdk.Window, stateType StateType, x int, y int, width int, height int)
	// Attach attaches a style to a window; this process allocates the colors
	// and creates the GC’s for the style - it specializes it to a particular
	// visual. The process may involve the creation of a new style if the style
	// has already been attached to a window with a different style and visual.
	//
	// Since this function may return a new object, you have to use it in the
	// following way: `style = gtk_style_attach (style, window)`
	Attach(s Style, window gdk.Window)
	// Copy creates a copy of the passed in Style object.
	Copy(s Style)
	// Detach detaches a style from a window. If the style is not attached to
	// any windows anymore, it is unrealized. See gtk_style_attach().
	Detach(s Style)
	// StyleProperty queries the value of a style property corresponding to a
	// widget class is in the given style.
	StyleProperty(s Style, widgetType externglib.Type, propertyName string) *externglib.Value
	// HasContext returns whether @style has an associated StyleContext.
	HasContext(s Style) bool
	// LookupColor looks up @color_name in the style’s logical color mappings,
	// filling in @color and returning true if found, otherwise returning false.
	// Do not cache the found mapping, because it depends on the Style and might
	// change when a theme switch occurs.
	LookupColor(s Style, colorName string) (color *gdk.Color, ok bool)
	// LookupIconSet looks up @stock_id in the icon factories associated with
	// @style and the default icon factory, returning an icon set if found,
	// otherwise nil.
	LookupIconSet(s Style, stockID string)
	// RenderIcon renders the icon specified by @source at the given @size
	// according to the given parameters and returns the result in a pixbuf.
	RenderIcon(s Style, source *IconSource, direction TextDirection, state StateType, size int, widget Widget, detail string)
	// SetBackground sets the background of @window to the background color or
	// pixmap specified by @style for the given state.
	SetBackground(s Style, window gdk.Window, stateType StateType)
}

// style implements the Style interface.
type style struct {
	gextras.Objector
}

var _ Style = (*style)(nil)

// WrapStyle wraps a GObject to the right type. It is
// primarily used internally.
func WrapStyle(obj *externglib.Object) Style {
	return Style{
		Objector: obj,
	}
}

func marshalStyle(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapStyle(obj), nil
}

// NewStyle constructs a class Style.
func NewStyle() {
	C.gtk_style_new()
}

func (s style) ApplyDefaultBackground(s Style, cr *cairo.Context, window gdk.Window, stateType StateType, x int, y int, width int, height int) {
	var arg0 *C.GtkStyle
	var arg1 *C.cairo_t
	var arg2 *C.GdkWindow
	var arg3 C.GtkStateType
	var arg4 C.gint
	var arg5 C.gint
	var arg6 C.gint
	var arg7 C.gint

	arg0 = (*C.GtkStyle)(unsafe.Pointer(s.Native()))
	arg1 = (*C.cairo_t)(unsafe.Pointer(cr.Native()))
	arg2 = (*C.GdkWindow)(unsafe.Pointer(window.Native()))
	arg3 = (C.GtkStateType)(stateType)
	arg4 = C.gint(x)
	arg5 = C.gint(y)
	arg6 = C.gint(width)
	arg7 = C.gint(height)

	C.gtk_style_apply_default_background(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
}

// Attach attaches a style to a window; this process allocates the colors
// and creates the GC’s for the style - it specializes it to a particular
// visual. The process may involve the creation of a new style if the style
// has already been attached to a window with a different style and visual.
//
// Since this function may return a new object, you have to use it in the
// following way: `style = gtk_style_attach (style, window)`
func (s style) Attach(s Style, window gdk.Window) {
	var arg0 *C.GtkStyle
	var arg1 *C.GdkWindow

	arg0 = (*C.GtkStyle)(unsafe.Pointer(s.Native()))
	arg1 = (*C.GdkWindow)(unsafe.Pointer(window.Native()))

	C.gtk_style_attach(arg0, arg1)
}

// Copy creates a copy of the passed in Style object.
func (s style) Copy(s Style) {
	var arg0 *C.GtkStyle

	arg0 = (*C.GtkStyle)(unsafe.Pointer(s.Native()))

	C.gtk_style_copy(arg0)
}

// Detach detaches a style from a window. If the style is not attached to
// any windows anymore, it is unrealized. See gtk_style_attach().
func (s style) Detach(s Style) {
	var arg0 *C.GtkStyle

	arg0 = (*C.GtkStyle)(unsafe.Pointer(s.Native()))

	C.gtk_style_detach(arg0)
}

// StyleProperty queries the value of a style property corresponding to a
// widget class is in the given style.
func (s style) StyleProperty(s Style, widgetType externglib.Type, propertyName string) *externglib.Value {
	var arg0 *C.GtkStyle
	var arg1 C.GType
	var arg2 *C.gchar

	arg0 = (*C.GtkStyle)(unsafe.Pointer(s.Native()))
	arg1 := C.GType(widgetType)
	arg2 = (*C.gchar)(C.CString(propertyName))
	defer C.free(unsafe.Pointer(arg2))

	var arg3 C.GValue
	var value *externglib.Value

	C.gtk_style_get_style_property(arg0, arg1, arg2, &arg3)

	value = externglib.ValueFromNative(unsafe.Pointer(&arg3))

	return value
}

// HasContext returns whether @style has an associated StyleContext.
func (s style) HasContext(s Style) bool {
	var arg0 *C.GtkStyle

	arg0 = (*C.GtkStyle)(unsafe.Pointer(s.Native()))

	var cret C.gboolean
	var ok bool

	cret = C.gtk_style_has_context(arg0)

	if cret {
		ok = true
	}

	return ok
}

// LookupColor looks up @color_name in the style’s logical color mappings,
// filling in @color and returning true if found, otherwise returning false.
// Do not cache the found mapping, because it depends on the Style and might
// change when a theme switch occurs.
func (s style) LookupColor(s Style, colorName string) (color *gdk.Color, ok bool) {
	var arg0 *C.GtkStyle
	var arg1 *C.gchar

	arg0 = (*C.GtkStyle)(unsafe.Pointer(s.Native()))
	arg1 = (*C.gchar)(C.CString(colorName))
	defer C.free(unsafe.Pointer(arg1))

	var arg2 C.GdkColor
	var color *gdk.Color
	var cret C.gboolean
	var ok bool

	cret = C.gtk_style_lookup_color(arg0, arg1, &arg2)

	color = gdk.WrapColor(unsafe.Pointer(&arg2))
	if cret {
		ok = true
	}

	return color, ok
}

// LookupIconSet looks up @stock_id in the icon factories associated with
// @style and the default icon factory, returning an icon set if found,
// otherwise nil.
func (s style) LookupIconSet(s Style, stockID string) {
	var arg0 *C.GtkStyle
	var arg1 *C.gchar

	arg0 = (*C.GtkStyle)(unsafe.Pointer(s.Native()))
	arg1 = (*C.gchar)(C.CString(stockID))
	defer C.free(unsafe.Pointer(arg1))

	C.gtk_style_lookup_icon_set(arg0, arg1)
}

// RenderIcon renders the icon specified by @source at the given @size
// according to the given parameters and returns the result in a pixbuf.
func (s style) RenderIcon(s Style, source *IconSource, direction TextDirection, state StateType, size int, widget Widget, detail string) {
	var arg0 *C.GtkStyle
	var arg1 *C.GtkIconSource
	var arg2 C.GtkTextDirection
	var arg3 C.GtkStateType
	var arg4 C.GtkIconSize
	var arg5 *C.GtkWidget
	var arg6 *C.gchar

	arg0 = (*C.GtkStyle)(unsafe.Pointer(s.Native()))
	arg1 = (*C.GtkIconSource)(unsafe.Pointer(source.Native()))
	arg2 = (C.GtkTextDirection)(direction)
	arg3 = (C.GtkStateType)(state)
	arg4 = C.GtkIconSize(size)
	arg5 = (*C.GtkWidget)(unsafe.Pointer(widget.Native()))
	arg6 = (*C.gchar)(C.CString(detail))
	defer C.free(unsafe.Pointer(arg6))

	C.gtk_style_render_icon(arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// SetBackground sets the background of @window to the background color or
// pixmap specified by @style for the given state.
func (s style) SetBackground(s Style, window gdk.Window, stateType StateType) {
	var arg0 *C.GtkStyle
	var arg1 *C.GdkWindow
	var arg2 C.GtkStateType

	arg0 = (*C.GtkStyle)(unsafe.Pointer(s.Native()))
	arg1 = (*C.GdkWindow)(unsafe.Pointer(window.Native()))
	arg2 = (C.GtkStateType)(stateType)

	C.gtk_style_set_background(arg0, arg1, arg2)
}

type ThemeEngine struct {
	native C.GtkThemeEngine
}

// WrapThemeEngine wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapThemeEngine(ptr unsafe.Pointer) *ThemeEngine {
	if ptr == nil {
		return nil
	}

	return (*ThemeEngine)(ptr)
}

func marshalThemeEngine(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapThemeEngine(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (t *ThemeEngine) Native() unsafe.Pointer {
	return unsafe.Pointer(&t.native)
}
