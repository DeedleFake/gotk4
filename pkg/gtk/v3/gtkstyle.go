// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: glib-2.0 gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_expander_style_get_type()), F: marshalExpanderStyle},
		{T: externglib.Type(C.gtk_style_get_type()), F: marshalStyle},
	})
}

// ExpanderStyle: used to specify the style of the expanders drawn by a
// TreeView.
type ExpanderStyle int

const (
	// ExpanderStyleCollapsed: the style used for a collapsed subtree.
	ExpanderStyleCollapsed ExpanderStyle = 0
	// ExpanderStyleSemiCollapsed: intermediate style used during animation.
	ExpanderStyleSemiCollapsed ExpanderStyle = 1
	// ExpanderStyleSemiExpanded: intermediate style used during animation.
	ExpanderStyleSemiExpanded ExpanderStyle = 2
	// ExpanderStyleExpanded: the style used for an expanded subtree.
	ExpanderStyleExpanded ExpanderStyle = 3
)

func marshalExpanderStyle(p uintptr) (interface{}, error) {
	return ExpanderStyle(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// Style: a Style object encapsulates the information that provides the look and
// feel for a widget.
//
// > In GTK+ 3.0, GtkStyle has been deprecated and replaced by > StyleContext.
//
// Each Widget has an associated Style object that is used when rendering that
// widget. Also, a Style holds information for the five possible widget states
// though not every widget supports all five states; see StateType.
//
// Usually the Style for a widget is the same as the default style that is set
// by GTK+ and modified the theme engine.
//
// Usually applications should not need to use or modify the Style of their
// widgets.
type Style interface {
	gextras.Objector

	// Copy creates a copy of the passed in Style object.
	Copy() Style
	// Detach detaches a style from a window. If the style is not attached to
	// any windows anymore, it is unrealized. See gtk_style_attach().
	Detach()
	// HasContext returns whether @style has an associated StyleContext.
	HasContext() bool
	// LookupIconSet looks up @stock_id in the icon factories associated with
	// @style and the default icon factory, returning an icon set if found,
	// otherwise nil.
	LookupIconSet(stockId string) *IconSet
	// SetBackground sets the background of @window to the background color or
	// pixmap specified by @style for the given state.
	SetBackground(window Window, stateType StateType)
}

// style implements the Style class.
type style struct {
	gextras.Objector
}

var _ Style = (*style)(nil)

// WrapStyle wraps a GObject to the right type. It is
// primarily used internally.
func WrapStyle(obj *externglib.Object) Style {
	return style{
		Objector: obj,
	}
}

func marshalStyle(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapStyle(obj), nil
}

// NewStyle constructs a class Style.
func NewStyle() Style {
	var _cret C.GtkStyle // in

	_cret = C.gtk_style_new()

	var _style Style // out

	_style = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret.Native()))).(Style)

	return _style
}

// Copy creates a copy of the passed in Style object.
func (s style) Copy() Style {
	var _arg0 *C.GtkStyle // out

	_arg0 = (*C.GtkStyle)(unsafe.Pointer(s.Native()))

	var _cret *C.GtkStyle // in

	_cret = C.gtk_style_copy(_arg0)

	var _ret Style // out

	_ret = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret.Native()))).(Style)

	return _ret
}

// Detach detaches a style from a window. If the style is not attached to
// any windows anymore, it is unrealized. See gtk_style_attach().
func (s style) Detach() {
	var _arg0 *C.GtkStyle // out

	_arg0 = (*C.GtkStyle)(unsafe.Pointer(s.Native()))

	C.gtk_style_detach(_arg0)
}

// HasContext returns whether @style has an associated StyleContext.
func (s style) HasContext() bool {
	var _arg0 *C.GtkStyle // out

	_arg0 = (*C.GtkStyle)(unsafe.Pointer(s.Native()))

	var _cret C.gboolean // in

	_cret = C.gtk_style_has_context(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// LookupIconSet looks up @stock_id in the icon factories associated with
// @style and the default icon factory, returning an icon set if found,
// otherwise nil.
func (s style) LookupIconSet(stockId string) *IconSet {
	var _arg0 *C.GtkStyle // out
	var _arg1 *C.gchar    // out

	_arg0 = (*C.GtkStyle)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.gchar)(C.CString(stockId))
	defer C.free(unsafe.Pointer(_arg1))

	var _cret *C.GtkIconSet // in

	_cret = C.gtk_style_lookup_icon_set(_arg0, _arg1)

	var _iconSet *IconSet // out

	_iconSet = WrapIconSet(unsafe.Pointer(_cret))

	return _iconSet
}

// SetBackground sets the background of @window to the background color or
// pixmap specified by @style for the given state.
func (s style) SetBackground(window Window, stateType StateType) {
	var _arg0 *C.GtkStyle    // out
	var _arg1 *C.GdkWindow   // out
	var _arg2 C.GtkStateType // out

	_arg0 = (*C.GtkStyle)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GdkWindow)(unsafe.Pointer(window.Native()))
	_arg2 = (C.GtkStateType)(stateType)

	C.gtk_style_set_background(_arg0, _arg1, _arg2)
}

type ThemeEngine struct {
	native C.GtkThemeEngine
}

// WrapThemeEngine wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapThemeEngine(ptr unsafe.Pointer) *ThemeEngine {
	if ptr == nil {
		return nil
	}

	return (*ThemeEngine)(ptr)
}

// Native returns the underlying C source pointer.
func (t *ThemeEngine) Native() unsafe.Pointer {
	return unsafe.Pointer(&t.native)
}
