// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_search_bar_get_type()), F: marshalSearchBar},
	})
}

// SearchBar is a container made to have a search entry (possibly with
// additional connex widgets, such as drop-down menus, or buttons) built-in. The
// search bar would appear when a search is started through typing on the
// keyboard, or the application’s search mode is toggled on.
//
// For keyboard presses to start a search, events will need to be forwarded from
// the top-level window that contains the search bar. See
// gtk_search_bar_handle_event() for example code. Common shortcuts such as
// Ctrl+F should be handled as an application action, or through the menu items.
//
// You will also need to tell the search bar about which entry you are using as
// your search entry using gtk_search_bar_connect_entry(). The following example
// shows you how to create a more complex search entry.
//
//
// CSS nodes
//
// GtkSearchBar has a single CSS node with name searchbar.
//
//
// Creating a search bar
//
// A simple example
// (https://gitlab.gnome.org/GNOME/gtk/blob/gtk-3-24/examples/search-bar.c)
type SearchBar interface {
	Bin
	Buildable

	// ConnectEntry connects the Entry widget passed as the one to be used in
	// this search bar. The entry should be a descendant of the search bar. This
	// is only required if the entry isn’t the direct child of the search bar
	// (as in our main example).
	ConnectEntry(entry Entry)
	// SearchMode returns whether the search mode is on or off.
	SearchMode() bool
	// ShowCloseButton returns whether the close button is shown.
	ShowCloseButton() bool
	// SetSearchMode switches the search mode on or off.
	SetSearchMode(searchMode bool)
	// SetShowCloseButton shows or hides the close button. Applications that
	// already have a “search” toggle button should not show a close button in
	// their search bar, as it duplicates the role of the toggle button.
	SetShowCloseButton(visible bool)
}

// searchBar implements the SearchBar interface.
type searchBar struct {
	Bin
	Buildable
}

var _ SearchBar = (*searchBar)(nil)

// WrapSearchBar wraps a GObject to the right type. It is
// primarily used internally.
func WrapSearchBar(obj *externglib.Object) SearchBar {
	return SearchBar{
		Bin:       WrapBin(obj),
		Buildable: WrapBuildable(obj),
	}
}

func marshalSearchBar(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapSearchBar(obj), nil
}

// NewSearchBar constructs a class SearchBar.
func NewSearchBar() SearchBar {
	var cret C.GtkSearchBar

	cret = C.gtk_search_bar_new()

	var searchBar SearchBar

	searchBar = gextras.CastObject(externglib.Take(unsafe.Pointer(cret.Native()))).(SearchBar)

	return searchBar
}

// ConnectEntry connects the Entry widget passed as the one to be used in
// this search bar. The entry should be a descendant of the search bar. This
// is only required if the entry isn’t the direct child of the search bar
// (as in our main example).
func (b searchBar) ConnectEntry(entry Entry) {
	var arg0 *C.GtkSearchBar
	var arg1 *C.GtkEntry

	arg0 = (*C.GtkSearchBar)(unsafe.Pointer(b.Native()))
	arg1 = (*C.GtkEntry)(unsafe.Pointer(entry.Native()))

	C.gtk_search_bar_connect_entry(arg0, arg1)
}

// SearchMode returns whether the search mode is on or off.
func (b searchBar) SearchMode() bool {
	var arg0 *C.GtkSearchBar

	arg0 = (*C.GtkSearchBar)(unsafe.Pointer(b.Native()))

	var cret C.gboolean

	cret = C.gtk_search_bar_get_search_mode(arg0)

	var ok bool

	if cret {
		ok = true
	}

	return ok
}

// ShowCloseButton returns whether the close button is shown.
func (b searchBar) ShowCloseButton() bool {
	var arg0 *C.GtkSearchBar

	arg0 = (*C.GtkSearchBar)(unsafe.Pointer(b.Native()))

	var cret C.gboolean

	cret = C.gtk_search_bar_get_show_close_button(arg0)

	var ok bool

	if cret {
		ok = true
	}

	return ok
}

// SetSearchMode switches the search mode on or off.
func (b searchBar) SetSearchMode(searchMode bool) {
	var arg0 *C.GtkSearchBar
	var arg1 C.gboolean

	arg0 = (*C.GtkSearchBar)(unsafe.Pointer(b.Native()))
	if searchMode {
		arg1 = C.gboolean(1)
	}

	C.gtk_search_bar_set_search_mode(arg0, arg1)
}

// SetShowCloseButton shows or hides the close button. Applications that
// already have a “search” toggle button should not show a close button in
// their search bar, as it duplicates the role of the toggle button.
func (b searchBar) SetShowCloseButton(visible bool) {
	var arg0 *C.GtkSearchBar
	var arg1 C.gboolean

	arg0 = (*C.GtkSearchBar)(unsafe.Pointer(b.Native()))
	if visible {
		arg1 = C.gboolean(1)
	}

	C.gtk_search_bar_set_show_close_button(arg0, arg1)
}
