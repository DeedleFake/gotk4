// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/core/box"
	"github.com/diamondburned/gotk4/core/gextras"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_alignment_get_type()), F: marshalAlignment},
	})
}

// Alignment: the Alignment widget controls the alignment and size of its child
// widget. It has four settings: xscale, yscale, xalign, and yalign.
//
// The scale settings are used to specify how much the child widget should
// expand to fill the space allocated to the Alignment. The values can range
// from 0 (meaning the child doesnâ€™t expand at all) to 1 (meaning the child
// expands to fill all of the available space).
//
// The align settings are used to place the child widget within the available
// area. The values range from 0 (top or left) to 1 (bottom or right). Of
// course, if the scale settings are both set to 1, the alignment settings have
// no effect.
//
// GtkAlignment has been deprecated in 3.14 and should not be used in
// newly-written code. The desired effect can be achieved by using the
// Widget:halign, Widget:valign and Widget:margin properties on the child
// widget.
type Alignment interface {
	Bin

	Padding() (paddingTop uint, paddingBottom uint, paddingLeft uint, paddingRight uint)

	SetAlignment(xalign float32, yalign float32, xscale float32, yscale float32)

	SetPaddingAlignment(paddingTop uint, paddingBottom uint, paddingLeft uint, paddingRight uint)
}

// alignment implements the Alignment class.
type alignment struct {
	Bin
}

// WrapAlignment wraps a GObject to the right type. It is
// primarily used internally.
func WrapAlignment(obj *externglib.Object) Alignment {
	return alignment{
		Bin: WrapBin(obj),
	}
}

func marshalAlignment(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapAlignment(obj), nil
}

func NewAlignment(xalign float32, yalign float32, xscale float32, yscale float32) Alignment {
	var _arg1 C.gfloat     // out
	var _arg2 C.gfloat     // out
	var _arg3 C.gfloat     // out
	var _arg4 C.gfloat     // out
	var _cret *C.GtkWidget // in

	_arg1 = C.gfloat(xalign)
	_arg2 = C.gfloat(yalign)
	_arg3 = C.gfloat(xscale)
	_arg4 = C.gfloat(yscale)

	_cret = C.gtk_alignment_new(_arg1, _arg2, _arg3, _arg4)

	var _alignment Alignment // out

	_alignment = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Alignment)

	return _alignment
}

func (a alignment) Padding() (paddingTop uint, paddingBottom uint, paddingLeft uint, paddingRight uint) {
	var _arg0 *C.GtkAlignment // out
	var _arg1 C.guint         // in
	var _arg2 C.guint         // in
	var _arg3 C.guint         // in
	var _arg4 C.guint         // in

	_arg0 = (*C.GtkAlignment)(unsafe.Pointer(a.Native()))

	C.gtk_alignment_get_padding(_arg0, &_arg1, &_arg2, &_arg3, &_arg4)

	var _paddingTop uint    // out
	var _paddingBottom uint // out
	var _paddingLeft uint   // out
	var _paddingRight uint  // out

	_paddingTop = uint(_arg1)
	_paddingBottom = uint(_arg2)
	_paddingLeft = uint(_arg3)
	_paddingRight = uint(_arg4)

	return _paddingTop, _paddingBottom, _paddingLeft, _paddingRight
}

func (a alignment) SetAlignment(xalign float32, yalign float32, xscale float32, yscale float32) {
	var _arg0 *C.GtkAlignment // out
	var _arg1 C.gfloat        // out
	var _arg2 C.gfloat        // out
	var _arg3 C.gfloat        // out
	var _arg4 C.gfloat        // out

	_arg0 = (*C.GtkAlignment)(unsafe.Pointer(a.Native()))
	_arg1 = C.gfloat(xalign)
	_arg2 = C.gfloat(yalign)
	_arg3 = C.gfloat(xscale)
	_arg4 = C.gfloat(yscale)

	C.gtk_alignment_set(_arg0, _arg1, _arg2, _arg3, _arg4)
}

func (a alignment) SetPaddingAlignment(paddingTop uint, paddingBottom uint, paddingLeft uint, paddingRight uint) {
	var _arg0 *C.GtkAlignment // out
	var _arg1 C.guint         // out
	var _arg2 C.guint         // out
	var _arg3 C.guint         // out
	var _arg4 C.guint         // out

	_arg0 = (*C.GtkAlignment)(unsafe.Pointer(a.Native()))
	_arg1 = C.guint(paddingTop)
	_arg2 = C.guint(paddingBottom)
	_arg3 = C.guint(paddingLeft)
	_arg4 = C.guint(paddingRight)

	C.gtk_alignment_set_padding(_arg0, _arg1, _arg2, _arg3, _arg4)
}

func (b alignment) AddChild(builder Builder, child gextras.Objector, typ string) {
	WrapBuildable(gextras.InternObject(b)).AddChild(builder, child, typ)
}

func (b alignment) ConstructChild(builder Builder, name string) gextras.Objector {
	return WrapBuildable(gextras.InternObject(b)).ConstructChild(builder, name)
}

func (b alignment) CustomFinished(builder Builder, child gextras.Objector, tagname string, data interface{}) {
	WrapBuildable(gextras.InternObject(b)).CustomFinished(builder, child, tagname, data)
}

func (b alignment) CustomTagEnd(builder Builder, child gextras.Objector, tagname string, data *interface{}) {
	WrapBuildable(gextras.InternObject(b)).CustomTagEnd(builder, child, tagname, data)
}

func (b alignment) CustomTagStart(builder Builder, child gextras.Objector, tagname string) (glib.MarkupParser, interface{}, bool) {
	return WrapBuildable(gextras.InternObject(b)).CustomTagStart(builder, child, tagname)
}

func (b alignment) InternalChild(builder Builder, childname string) gextras.Objector {
	return WrapBuildable(gextras.InternObject(b)).InternalChild(builder, childname)
}

func (b alignment) Name() string {
	return WrapBuildable(gextras.InternObject(b)).Name()
}

func (b alignment) ParserFinished(builder Builder) {
	WrapBuildable(gextras.InternObject(b)).ParserFinished(builder)
}

func (b alignment) SetBuildableProperty(builder Builder, name string, value externglib.Value) {
	WrapBuildable(gextras.InternObject(b)).SetBuildableProperty(builder, name, value)
}

func (b alignment) SetName(name string) {
	WrapBuildable(gextras.InternObject(b)).SetName(name)
}
