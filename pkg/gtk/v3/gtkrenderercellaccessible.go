// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_renderer_cell_accessible_get_type()), F: marshalRendererCellAccessible},
	})
}

type RendererCellAccessible interface {
	gextras.Objector

	privateRendererCellAccessibleClass()
}

// RendererCellAccessibleClass implements the RendererCellAccessible interface.
type RendererCellAccessibleClass struct {
	*externglib.Object
	CellAccessibleClass
	atk.ActionInterface
}

var _ RendererCellAccessible = (*RendererCellAccessibleClass)(nil)

func wrapRendererCellAccessible(obj *externglib.Object) RendererCellAccessible {
	return &RendererCellAccessibleClass{
		Object: obj,
		CellAccessibleClass: CellAccessibleClass{
			Object: obj,
			AccessibleClass: AccessibleClass{
				ObjectClass: atk.ObjectClass{
					Object: obj,
				},
			},
			ActionInterface: atk.ActionInterface{
				Object: obj,
			},
		},
		ActionInterface: atk.ActionInterface{
			Object: obj,
		},
	}
}

func marshalRendererCellAccessible(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapRendererCellAccessible(obj), nil
}

func NewRendererCellAccessible(renderer CellRenderer) RendererCellAccessible {
	var _arg1 *C.GtkCellRenderer // out
	var _cret *C.AtkObject       // in

	_arg1 = (*C.GtkCellRenderer)(unsafe.Pointer(renderer.Native()))

	_cret = C.gtk_renderer_cell_accessible_new(_arg1)

	var _rendererCellAccessible RendererCellAccessible // out

	_rendererCellAccessible = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(RendererCellAccessible)

	return _rendererCellAccessible
}

func (*RendererCellAccessibleClass) privateRendererCellAccessibleClass() {}
