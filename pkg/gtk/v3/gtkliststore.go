// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_list_store_get_type()), F: marshalListStore},
	})
}

// ListStore: the ListStore object is a list model for use with a TreeView
// widget. It implements the TreeModel interface, and consequentialy, can use
// all of the methods available there. It also implements the TreeSortable
// interface so it can be sorted by the view. Finally, it also implements the
// tree [drag and drop][gtk3-GtkTreeView-drag-and-drop] interfaces.
//
// The ListStore can accept most GObject types as a column type, though it canâ€™t
// accept all custom types. Internally, it will keep a copy of data passed in
// (such as a string or a boxed pointer). Columns that accept #GObjects are
// handled a little differently. The ListStore will keep a reference to the
// object instead of copying the value. As a result, if the object is modified,
// it is up to the application writer to call gtk_tree_model_row_changed() to
// emit the TreeModel::row_changed signal. This most commonly affects lists with
// Pixbufs stored.
//
// An example for creating a simple list store:
//
//    <object class="GtkListStore">
//      <columns>
//        <column type="gchararray"/>
//        <column type="gchararray"/>
//        <column type="gint"/>
//      </columns>
//      <data>
//        <row>
//          <col id="0">John</col>
//          <col id="1">Doe</col>
//          <col id="2">25</col>
//        </row>
//        <row>
//          <col id="0">Johan</col>
//          <col id="1">Dahlin</col>
//          <col id="2">50</col>
//        </row>
//      </data>
//    </object>
type ListStore interface {
	gextras.Objector

	// AsBuildable casts the class to the Buildable interface.
	AsBuildable() Buildable
	// AsTreeDragDest casts the class to the TreeDragDest interface.
	AsTreeDragDest() TreeDragDest
	// AsTreeDragSource casts the class to the TreeDragSource interface.
	AsTreeDragSource() TreeDragSource
	// AsTreeModel casts the class to the TreeModel interface.
	AsTreeModel() TreeModel
	// AsTreeSortable casts the class to the TreeSortable interface.
	AsTreeSortable() TreeSortable

	// AppendListStore appends a new row to @list_store. @iter will be changed
	// to point to this new row. The row will be empty after this function is
	// called. To fill in values, you need to call gtk_list_store_set() or
	// gtk_list_store_set_value().
	AppendListStore() TreeIter
	// ClearListStore removes all rows from the list store.
	ClearListStore()
	// InsertListStore creates a new row at @position. @iter will be changed to
	// point to this new row. If @position is -1 or is larger than the number of
	// rows on the list, then the new row will be appended to the list. The row
	// will be empty after this function is called. To fill in values, you need
	// to call gtk_list_store_set() or gtk_list_store_set_value().
	InsertListStore(position int) TreeIter
	// InsertAfterListStore inserts a new row after @sibling. If @sibling is
	// nil, then the row will be prepended to the beginning of the list. @iter
	// will be changed to point to this new row. The row will be empty after
	// this function is called. To fill in values, you need to call
	// gtk_list_store_set() or gtk_list_store_set_value().
	InsertAfterListStore(sibling *TreeIter) TreeIter
	// InsertBeforeListStore inserts a new row before @sibling. If @sibling is
	// nil, then the row will be appended to the end of the list. @iter will be
	// changed to point to this new row. The row will be empty after this
	// function is called. To fill in values, you need to call
	// gtk_list_store_set() or gtk_list_store_set_value().
	InsertBeforeListStore(sibling *TreeIter) TreeIter
	// InsertWithValuesvListStore: variant of
	// gtk_list_store_insert_with_values() which takes the columns and values as
	// two arrays, instead of varargs. This function is mainly intended for
	// language-bindings.
	InsertWithValuesvListStore(position int, columns []int, values []externglib.Value) TreeIter
	// IterIsValidListStore: > This function is slow. Only use it for debugging
	// and/or testing > purposes.
	//
	// Checks if the given iter is a valid iter for this ListStore.
	IterIsValidListStore(iter *TreeIter) bool
	// MoveAfterListStore moves @iter in @store to the position after @position.
	// Note that this function only works with unsorted stores. If @position is
	// nil, @iter will be moved to the start of the list.
	MoveAfterListStore(iter *TreeIter, position *TreeIter)
	// MoveBeforeListStore moves @iter in @store to the position before
	// @position. Note that this function only works with unsorted stores. If
	// @position is nil, @iter will be moved to the end of the list.
	MoveBeforeListStore(iter *TreeIter, position *TreeIter)
	// PrependListStore prepends a new row to @list_store. @iter will be changed
	// to point to this new row. The row will be empty after this function is
	// called. To fill in values, you need to call gtk_list_store_set() or
	// gtk_list_store_set_value().
	PrependListStore() TreeIter
	// RemoveListStore removes the given row from the list store. After being
	// removed, @iter is set to be the next valid row, or invalidated if it
	// pointed to the last row in @list_store.
	RemoveListStore(iter *TreeIter) bool
	// ReorderListStore reorders @store to follow the order indicated by
	// @new_order. Note that this function only works with unsorted stores.
	ReorderListStore(newOrder []int)
	// SetColumnTypesListStore: this function is meant primarily for #GObjects
	// that inherit from ListStore, and should only be used when constructing a
	// new ListStore. It will not function after a row has been added, or a
	// method on the TreeModel interface is called.
	SetColumnTypesListStore(types []externglib.Type)
	// SetValueListStore sets the data in the cell specified by @iter and
	// @column. The type of @value must be convertible to the type of the
	// column.
	SetValueListStore(iter *TreeIter, column int, value externglib.Value)
	// SetValuesvListStore: variant of gtk_list_store_set_valist() which takes
	// the columns and values as two arrays, instead of varargs. This function
	// is mainly intended for language-bindings and in case the number of
	// columns to change is not known until run-time.
	SetValuesvListStore(iter *TreeIter, columns []int, values []externglib.Value)
	// SwapListStore swaps @a and @b in @store. Note that this function only
	// works with unsorted stores.
	SwapListStore(a *TreeIter, b *TreeIter)
}

// listStore implements the ListStore class.
type listStore struct {
	gextras.Objector
}

// WrapListStore wraps a GObject to the right type. It is
// primarily used internally.
func WrapListStore(obj *externglib.Object) ListStore {
	return listStore{
		Objector: obj,
	}
}

func marshalListStore(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapListStore(obj), nil
}

// NewListStoreV: non-vararg creation function. Used primarily by language
// bindings.
func NewListStoreV(types []externglib.Type) ListStore {
	var _arg2 *C.GType
	var _arg1 C.gint
	var _cret *C.GtkListStore // in

	_arg1 = C.gint(len(types))
	_arg2 = (*C.GType)(C.malloc(C.ulong(len(types)) * C.ulong(C.sizeof_GType)))
	defer C.free(unsafe.Pointer(_arg2))
	{
		out := unsafe.Slice(_arg2, len(types))
		for i := range types {
			out[i] = (C.GType)(types[i])
		}
	}

	_cret = C.gtk_list_store_newv(_arg1, _arg2)

	var _listStore ListStore // out

	_listStore = WrapListStore(externglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _listStore
}

func (l listStore) AppendListStore() TreeIter {
	var _arg0 *C.GtkListStore // out
	var _arg1 C.GtkTreeIter   // in

	_arg0 = (*C.GtkListStore)(unsafe.Pointer(l.Native()))

	C.gtk_list_store_append(_arg0, &_arg1)

	var _iter TreeIter // out

	{
		var refTmpIn *C.GtkTreeIter
		var refTmpOut *TreeIter

		in0 := &_arg1
		refTmpIn = in0

		refTmpOut = (*TreeIter)(unsafe.Pointer(refTmpIn))

		_iter = *refTmpOut
	}

	return _iter
}

func (l listStore) ClearListStore() {
	var _arg0 *C.GtkListStore // out

	_arg0 = (*C.GtkListStore)(unsafe.Pointer(l.Native()))

	C.gtk_list_store_clear(_arg0)
}

func (l listStore) InsertListStore(position int) TreeIter {
	var _arg0 *C.GtkListStore // out
	var _arg1 C.GtkTreeIter   // in
	var _arg2 C.gint          // out

	_arg0 = (*C.GtkListStore)(unsafe.Pointer(l.Native()))
	_arg2 = C.gint(position)

	C.gtk_list_store_insert(_arg0, &_arg1, _arg2)

	var _iter TreeIter // out

	{
		var refTmpIn *C.GtkTreeIter
		var refTmpOut *TreeIter

		in0 := &_arg1
		refTmpIn = in0

		refTmpOut = (*TreeIter)(unsafe.Pointer(refTmpIn))

		_iter = *refTmpOut
	}

	return _iter
}

func (l listStore) InsertAfterListStore(sibling *TreeIter) TreeIter {
	var _arg0 *C.GtkListStore // out
	var _arg1 C.GtkTreeIter   // in
	var _arg2 *C.GtkTreeIter  // out

	_arg0 = (*C.GtkListStore)(unsafe.Pointer(l.Native()))
	_arg2 = (*C.GtkTreeIter)(unsafe.Pointer(sibling))

	C.gtk_list_store_insert_after(_arg0, &_arg1, _arg2)

	var _iter TreeIter // out

	{
		var refTmpIn *C.GtkTreeIter
		var refTmpOut *TreeIter

		in0 := &_arg1
		refTmpIn = in0

		refTmpOut = (*TreeIter)(unsafe.Pointer(refTmpIn))

		_iter = *refTmpOut
	}

	return _iter
}

func (l listStore) InsertBeforeListStore(sibling *TreeIter) TreeIter {
	var _arg0 *C.GtkListStore // out
	var _arg1 C.GtkTreeIter   // in
	var _arg2 *C.GtkTreeIter  // out

	_arg0 = (*C.GtkListStore)(unsafe.Pointer(l.Native()))
	_arg2 = (*C.GtkTreeIter)(unsafe.Pointer(sibling))

	C.gtk_list_store_insert_before(_arg0, &_arg1, _arg2)

	var _iter TreeIter // out

	{
		var refTmpIn *C.GtkTreeIter
		var refTmpOut *TreeIter

		in0 := &_arg1
		refTmpIn = in0

		refTmpOut = (*TreeIter)(unsafe.Pointer(refTmpIn))

		_iter = *refTmpOut
	}

	return _iter
}

func (l listStore) InsertWithValuesvListStore(position int, columns []int, values []externglib.Value) TreeIter {
	var _arg0 *C.GtkListStore // out
	var _arg1 C.GtkTreeIter   // in
	var _arg2 C.gint          // out
	var _arg3 *C.gint
	var _arg5 C.gint
	var _arg4 *C.GValue
	var _arg5 C.gint

	_arg0 = (*C.GtkListStore)(unsafe.Pointer(l.Native()))
	_arg2 = C.gint(position)
	_arg5 = C.gint(len(columns))
	_arg3 = (*C.gint)(unsafe.Pointer(&columns[0]))
	_arg5 = C.gint(len(values))
	_arg4 = (*C.GValue)(C.malloc(C.ulong(len(values)) * C.ulong(C.sizeof_GValue)))
	defer C.free(unsafe.Pointer(_arg4))
	{
		out := unsafe.Slice(_arg4, len(values))
		for i := range values {
			{
				var refTmpIn *externglib.Value
				var refTmpOut *C.GValue

				in0 := &values[i]
				refTmpIn = in0

				refTmpOut = (*C.GValue)(unsafe.Pointer(&refTmpIn.GValue))

				out[i] = *refTmpOut
			}
		}
	}

	C.gtk_list_store_insert_with_valuesv(_arg0, &_arg1, _arg2, _arg3, _arg4, _arg5)

	var _iter TreeIter // out

	{
		var refTmpIn *C.GtkTreeIter
		var refTmpOut *TreeIter

		in0 := &_arg1
		refTmpIn = in0

		refTmpOut = (*TreeIter)(unsafe.Pointer(refTmpIn))

		_iter = *refTmpOut
	}

	return _iter
}

func (l listStore) IterIsValidListStore(iter *TreeIter) bool {
	var _arg0 *C.GtkListStore // out
	var _arg1 *C.GtkTreeIter  // out
	var _cret C.gboolean      // in

	_arg0 = (*C.GtkListStore)(unsafe.Pointer(l.Native()))
	_arg1 = (*C.GtkTreeIter)(unsafe.Pointer(iter))

	_cret = C.gtk_list_store_iter_is_valid(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (s listStore) MoveAfterListStore(iter *TreeIter, position *TreeIter) {
	var _arg0 *C.GtkListStore // out
	var _arg1 *C.GtkTreeIter  // out
	var _arg2 *C.GtkTreeIter  // out

	_arg0 = (*C.GtkListStore)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GtkTreeIter)(unsafe.Pointer(iter))
	_arg2 = (*C.GtkTreeIter)(unsafe.Pointer(position))

	C.gtk_list_store_move_after(_arg0, _arg1, _arg2)
}

func (s listStore) MoveBeforeListStore(iter *TreeIter, position *TreeIter) {
	var _arg0 *C.GtkListStore // out
	var _arg1 *C.GtkTreeIter  // out
	var _arg2 *C.GtkTreeIter  // out

	_arg0 = (*C.GtkListStore)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GtkTreeIter)(unsafe.Pointer(iter))
	_arg2 = (*C.GtkTreeIter)(unsafe.Pointer(position))

	C.gtk_list_store_move_before(_arg0, _arg1, _arg2)
}

func (l listStore) PrependListStore() TreeIter {
	var _arg0 *C.GtkListStore // out
	var _arg1 C.GtkTreeIter   // in

	_arg0 = (*C.GtkListStore)(unsafe.Pointer(l.Native()))

	C.gtk_list_store_prepend(_arg0, &_arg1)

	var _iter TreeIter // out

	{
		var refTmpIn *C.GtkTreeIter
		var refTmpOut *TreeIter

		in0 := &_arg1
		refTmpIn = in0

		refTmpOut = (*TreeIter)(unsafe.Pointer(refTmpIn))

		_iter = *refTmpOut
	}

	return _iter
}

func (l listStore) RemoveListStore(iter *TreeIter) bool {
	var _arg0 *C.GtkListStore // out
	var _arg1 *C.GtkTreeIter  // out
	var _cret C.gboolean      // in

	_arg0 = (*C.GtkListStore)(unsafe.Pointer(l.Native()))
	_arg1 = (*C.GtkTreeIter)(unsafe.Pointer(iter))

	_cret = C.gtk_list_store_remove(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (s listStore) ReorderListStore(newOrder []int) {
	var _arg0 *C.GtkListStore // out
	var _arg1 *C.gint

	_arg0 = (*C.GtkListStore)(unsafe.Pointer(s.Native()))
	{
		var zero int
		newOrder = append(newOrder, zero)
	}
	_arg1 = (*C.gint)(unsafe.Pointer(&newOrder[0]))

	C.gtk_list_store_reorder(_arg0, _arg1)
}

func (l listStore) SetColumnTypesListStore(types []externglib.Type) {
	var _arg0 *C.GtkListStore // out
	var _arg2 *C.GType
	var _arg1 C.gint

	_arg0 = (*C.GtkListStore)(unsafe.Pointer(l.Native()))
	_arg1 = C.gint(len(types))
	_arg2 = (*C.GType)(C.malloc(C.ulong(len(types)) * C.ulong(C.sizeof_GType)))
	defer C.free(unsafe.Pointer(_arg2))
	{
		out := unsafe.Slice(_arg2, len(types))
		for i := range types {
			out[i] = (C.GType)(types[i])
		}
	}

	C.gtk_list_store_set_column_types(_arg0, _arg1, _arg2)
}

func (l listStore) SetValueListStore(iter *TreeIter, column int, value externglib.Value) {
	var _arg0 *C.GtkListStore // out
	var _arg1 *C.GtkTreeIter  // out
	var _arg2 C.gint          // out
	var _arg3 *C.GValue       // out

	_arg0 = (*C.GtkListStore)(unsafe.Pointer(l.Native()))
	_arg1 = (*C.GtkTreeIter)(unsafe.Pointer(iter))
	_arg2 = C.gint(column)
	_arg3 = (*C.GValue)(unsafe.Pointer(&value.GValue))

	C.gtk_list_store_set_value(_arg0, _arg1, _arg2, _arg3)
}

func (l listStore) SetValuesvListStore(iter *TreeIter, columns []int, values []externglib.Value) {
	var _arg0 *C.GtkListStore // out
	var _arg1 *C.GtkTreeIter  // out
	var _arg2 *C.gint
	var _arg4 C.gint
	var _arg3 *C.GValue
	var _arg4 C.gint

	_arg0 = (*C.GtkListStore)(unsafe.Pointer(l.Native()))
	_arg1 = (*C.GtkTreeIter)(unsafe.Pointer(iter))
	_arg4 = C.gint(len(columns))
	_arg2 = (*C.gint)(unsafe.Pointer(&columns[0]))
	_arg4 = C.gint(len(values))
	_arg3 = (*C.GValue)(C.malloc(C.ulong(len(values)) * C.ulong(C.sizeof_GValue)))
	defer C.free(unsafe.Pointer(_arg3))
	{
		out := unsafe.Slice(_arg3, len(values))
		for i := range values {
			{
				var refTmpIn *externglib.Value
				var refTmpOut *C.GValue

				in0 := &values[i]
				refTmpIn = in0

				refTmpOut = (*C.GValue)(unsafe.Pointer(&refTmpIn.GValue))

				out[i] = *refTmpOut
			}
		}
	}

	C.gtk_list_store_set_valuesv(_arg0, _arg1, _arg2, _arg3, _arg4)
}

func (s listStore) SwapListStore(a *TreeIter, b *TreeIter) {
	var _arg0 *C.GtkListStore // out
	var _arg1 *C.GtkTreeIter  // out
	var _arg2 *C.GtkTreeIter  // out

	_arg0 = (*C.GtkListStore)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GtkTreeIter)(unsafe.Pointer(a))
	_arg2 = (*C.GtkTreeIter)(unsafe.Pointer(b))

	C.gtk_list_store_swap(_arg0, _arg1, _arg2)
}

func (l listStore) AsBuildable() Buildable {
	return WrapBuildable(gextras.InternObject(l))
}

func (l listStore) AsTreeDragDest() TreeDragDest {
	return WrapTreeDragDest(gextras.InternObject(l))
}

func (l listStore) AsTreeDragSource() TreeDragSource {
	return WrapTreeDragSource(gextras.InternObject(l))
}

func (l listStore) AsTreeModel() TreeModel {
	return WrapTreeModel(gextras.InternObject(l))
}

func (l listStore) AsTreeSortable() TreeSortable {
	return WrapTreeSortable(gextras.InternObject(l))
}
