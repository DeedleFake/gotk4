// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/pango"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_font_selection_get_type()), F: marshalFontSelection},
		{T: externglib.Type(C.gtk_font_selection_dialog_get_type()), F: marshalFontSelectionDialog},
	})
}

type FontSelection interface {
	gextras.Objector

	// Face gets the FontFace representing the selected font group details (i.e.
	// family, slant, weight, width, etc).
	//
	// Deprecated: since version 3.2.
	Face() *pango.FontFaceClass
	// FaceList: this returns the TreeView which lists all styles available for
	// the selected font. For example, “Regular”, “Bold”, etc.
	//
	// Deprecated: since version 3.2.
	FaceList() *WidgetClass
	// Family gets the FontFamily representing the selected font family.
	//
	// Deprecated: since version 3.2.
	Family() *pango.FontFamilyClass
	// FamilyList: this returns the TreeView that lists font families, for
	// example, “Sans”, “Serif”, etc.
	//
	// Deprecated: since version 3.2.
	FamilyList() *WidgetClass
	// FontName gets the currently-selected font name.
	//
	// Note that this can be a different string than what you set with
	// gtk_font_selection_set_font_name(), as the font selection widget may
	// normalize font names and thus return a string with a different structure.
	// For example, “Helvetica Italic Bold 12” could be normalized to “Helvetica
	// Bold Italic 12”. Use pango_font_description_equal() if you want to
	// compare two font descriptions.
	//
	// Deprecated: since version 3.2.
	FontName() string
	// PreviewEntry: this returns the Entry used to display the font as a
	// preview.
	//
	// Deprecated: since version 3.2.
	PreviewEntry() *WidgetClass
	// PreviewText gets the text displayed in the preview area.
	//
	// Deprecated: since version 3.2.
	PreviewText() string
	// Size: the selected font size.
	//
	// Deprecated: since version 3.2.
	Size() int
	// SizeEntry: this returns the Entry used to allow the user to edit the font
	// number manually instead of selecting it from the list of font sizes.
	//
	// Deprecated: since version 3.2.
	SizeEntry() *WidgetClass
	// SizeList: this returns the TreeView used to list font sizes.
	//
	// Deprecated: since version 3.2.
	SizeList() *WidgetClass
	// SetFontName sets the currently-selected font.
	//
	// Note that the @fontsel needs to know the screen in which it will appear
	// for this to work; this can be guaranteed by simply making sure that the
	// @fontsel is inserted in a toplevel window before you call this function.
	//
	// Deprecated: since version 3.2.
	SetFontName(fontname string) bool
	// SetPreviewText sets the text displayed in the preview area. The @text is
	// used to show how the selected font looks.
	//
	// Deprecated: since version 3.2.
	SetPreviewText(text string)
}

// FontSelectionClass implements the FontSelection interface.
type FontSelectionClass struct {
	*externglib.Object
	BoxClass
	BuildableInterface
	OrientableInterface
}

var _ FontSelection = (*FontSelectionClass)(nil)

func wrapFontSelection(obj *externglib.Object) FontSelection {
	return &FontSelectionClass{
		Object: obj,
		BoxClass: BoxClass{
			Object: obj,
			ContainerClass: ContainerClass{
				Object: obj,
				WidgetClass: WidgetClass{
					InitiallyUnowned: externglib.InitiallyUnowned{Object: obj},
					BuildableInterface: BuildableInterface{
						Object: obj,
					},
				},
				BuildableInterface: BuildableInterface{
					Object: obj,
				},
			},
			BuildableInterface: BuildableInterface{
				Object: obj,
			},
			OrientableInterface: OrientableInterface{
				Object: obj,
			},
		},
		BuildableInterface: BuildableInterface{
			Object: obj,
		},
		OrientableInterface: OrientableInterface{
			Object: obj,
		},
	}
}

func marshalFontSelection(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapFontSelection(obj), nil
}

// NewFontSelection creates a new FontSelection.
//
// Deprecated: since version 3.2.
func NewFontSelection() *FontSelectionClass {
	var _cret *C.GtkWidget // in

	_cret = C.gtk_font_selection_new()

	var _fontSelection *FontSelectionClass // out

	_fontSelection = gextras.CastObject(
		externglib.Take(unsafe.Pointer(_cret))).(*FontSelectionClass)

	return _fontSelection
}

// Face gets the FontFace representing the selected font group details (i.e.
// family, slant, weight, width, etc).
//
// Deprecated: since version 3.2.
func (f *FontSelectionClass) Face() *pango.FontFaceClass {
	var _arg0 *C.GtkFontSelection // out
	var _cret *C.PangoFontFace    // in

	_arg0 = (*C.GtkFontSelection)(unsafe.Pointer((&FontSelection).Native()))

	_cret = C.gtk_font_selection_get_face(_arg0)

	var _fontFace *pango.FontFaceClass // out

	_fontFace = gextras.CastObject(
		externglib.Take(unsafe.Pointer(_cret))).(*pango.FontFaceClass)

	return _fontFace
}

// FaceList: this returns the TreeView which lists all styles available for the
// selected font. For example, “Regular”, “Bold”, etc.
//
// Deprecated: since version 3.2.
func (f *FontSelectionClass) FaceList() *WidgetClass {
	var _arg0 *C.GtkFontSelection // out
	var _cret *C.GtkWidget        // in

	_arg0 = (*C.GtkFontSelection)(unsafe.Pointer((&FontSelection).Native()))

	_cret = C.gtk_font_selection_get_face_list(_arg0)

	var _widget *WidgetClass // out

	_widget = gextras.CastObject(
		externglib.Take(unsafe.Pointer(_cret))).(*WidgetClass)

	return _widget
}

// Family gets the FontFamily representing the selected font family.
//
// Deprecated: since version 3.2.
func (f *FontSelectionClass) Family() *pango.FontFamilyClass {
	var _arg0 *C.GtkFontSelection // out
	var _cret *C.PangoFontFamily  // in

	_arg0 = (*C.GtkFontSelection)(unsafe.Pointer((&FontSelection).Native()))

	_cret = C.gtk_font_selection_get_family(_arg0)

	var _fontFamily *pango.FontFamilyClass // out

	_fontFamily = gextras.CastObject(
		externglib.Take(unsafe.Pointer(_cret))).(*pango.FontFamilyClass)

	return _fontFamily
}

// FamilyList: this returns the TreeView that lists font families, for example,
// “Sans”, “Serif”, etc.
//
// Deprecated: since version 3.2.
func (f *FontSelectionClass) FamilyList() *WidgetClass {
	var _arg0 *C.GtkFontSelection // out
	var _cret *C.GtkWidget        // in

	_arg0 = (*C.GtkFontSelection)(unsafe.Pointer((&FontSelection).Native()))

	_cret = C.gtk_font_selection_get_family_list(_arg0)

	var _widget *WidgetClass // out

	_widget = gextras.CastObject(
		externglib.Take(unsafe.Pointer(_cret))).(*WidgetClass)

	return _widget
}

// FontName gets the currently-selected font name.
//
// Note that this can be a different string than what you set with
// gtk_font_selection_set_font_name(), as the font selection widget may
// normalize font names and thus return a string with a different structure. For
// example, “Helvetica Italic Bold 12” could be normalized to “Helvetica Bold
// Italic 12”. Use pango_font_description_equal() if you want to compare two
// font descriptions.
//
// Deprecated: since version 3.2.
func (f *FontSelectionClass) FontName() string {
	var _arg0 *C.GtkFontSelection // out
	var _cret *C.gchar            // in

	_arg0 = (*C.GtkFontSelection)(unsafe.Pointer((&FontSelection).Native()))

	_cret = C.gtk_font_selection_get_font_name(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// PreviewEntry: this returns the Entry used to display the font as a preview.
//
// Deprecated: since version 3.2.
func (f *FontSelectionClass) PreviewEntry() *WidgetClass {
	var _arg0 *C.GtkFontSelection // out
	var _cret *C.GtkWidget        // in

	_arg0 = (*C.GtkFontSelection)(unsafe.Pointer((&FontSelection).Native()))

	_cret = C.gtk_font_selection_get_preview_entry(_arg0)

	var _widget *WidgetClass // out

	_widget = gextras.CastObject(
		externglib.Take(unsafe.Pointer(_cret))).(*WidgetClass)

	return _widget
}

// PreviewText gets the text displayed in the preview area.
//
// Deprecated: since version 3.2.
func (f *FontSelectionClass) PreviewText() string {
	var _arg0 *C.GtkFontSelection // out
	var _cret *C.gchar            // in

	_arg0 = (*C.GtkFontSelection)(unsafe.Pointer((&FontSelection).Native()))

	_cret = C.gtk_font_selection_get_preview_text(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

// Size: the selected font size.
//
// Deprecated: since version 3.2.
func (f *FontSelectionClass) Size() int {
	var _arg0 *C.GtkFontSelection // out
	var _cret C.gint              // in

	_arg0 = (*C.GtkFontSelection)(unsafe.Pointer((&FontSelection).Native()))

	_cret = C.gtk_font_selection_get_size(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// SizeEntry: this returns the Entry used to allow the user to edit the font
// number manually instead of selecting it from the list of font sizes.
//
// Deprecated: since version 3.2.
func (f *FontSelectionClass) SizeEntry() *WidgetClass {
	var _arg0 *C.GtkFontSelection // out
	var _cret *C.GtkWidget        // in

	_arg0 = (*C.GtkFontSelection)(unsafe.Pointer((&FontSelection).Native()))

	_cret = C.gtk_font_selection_get_size_entry(_arg0)

	var _widget *WidgetClass // out

	_widget = gextras.CastObject(
		externglib.Take(unsafe.Pointer(_cret))).(*WidgetClass)

	return _widget
}

// SizeList: this returns the TreeView used to list font sizes.
//
// Deprecated: since version 3.2.
func (f *FontSelectionClass) SizeList() *WidgetClass {
	var _arg0 *C.GtkFontSelection // out
	var _cret *C.GtkWidget        // in

	_arg0 = (*C.GtkFontSelection)(unsafe.Pointer((&FontSelection).Native()))

	_cret = C.gtk_font_selection_get_size_list(_arg0)

	var _widget *WidgetClass // out

	_widget = gextras.CastObject(
		externglib.Take(unsafe.Pointer(_cret))).(*WidgetClass)

	return _widget
}

// SetFontName sets the currently-selected font.
//
// Note that the @fontsel needs to know the screen in which it will appear for
// this to work; this can be guaranteed by simply making sure that the @fontsel
// is inserted in a toplevel window before you call this function.
//
// Deprecated: since version 3.2.
func (f *FontSelectionClass) SetFontName(fontname string) bool {
	var _arg0 *C.GtkFontSelection // out
	var _arg1 *C.gchar            // out
	var _cret C.gboolean          // in

	_arg0 = (*C.GtkFontSelection)(unsafe.Pointer((&FontSelection).Native()))
	_arg1 = (*C.gchar)(C.CString(fontname))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_font_selection_set_font_name(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetPreviewText sets the text displayed in the preview area. The @text is used
// to show how the selected font looks.
//
// Deprecated: since version 3.2.
func (f *FontSelectionClass) SetPreviewText(text string) {
	var _arg0 *C.GtkFontSelection // out
	var _arg1 *C.gchar            // out

	_arg0 = (*C.GtkFontSelection)(unsafe.Pointer((&FontSelection).Native()))
	_arg1 = (*C.gchar)(C.CString(text))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_font_selection_set_preview_text(_arg0, _arg1)
}

type FontSelectionDialog interface {
	gextras.Objector

	// CancelButton gets the “Cancel” button.
	//
	// Deprecated: since version 3.2.
	CancelButton() *WidgetClass
	// FontName gets the currently-selected font name.
	//
	// Note that this can be a different string than what you set with
	// gtk_font_selection_dialog_set_font_name(), as the font selection widget
	// may normalize font names and thus return a string with a different
	// structure. For example, “Helvetica Italic Bold 12” could be normalized to
	// “Helvetica Bold Italic 12”. Use pango_font_description_equal() if you
	// want to compare two font descriptions.
	//
	// Deprecated: since version 3.2.
	FontName() string
	// FontSelection retrieves the FontSelection widget embedded in the dialog.
	//
	// Deprecated: since version 3.2.
	FontSelection() *WidgetClass
	// OkButton gets the “OK” button.
	//
	// Deprecated: since version 3.2.
	OkButton() *WidgetClass
	// PreviewText gets the text displayed in the preview area.
	//
	// Deprecated: since version 3.2.
	PreviewText() string
	// SetFontName sets the currently selected font.
	//
	// Deprecated: since version 3.2.
	SetFontName(fontname string) bool
	// SetPreviewText sets the text displayed in the preview area.
	//
	// Deprecated: since version 3.2.
	SetPreviewText(text string)
}

// FontSelectionDialogClass implements the FontSelectionDialog interface.
type FontSelectionDialogClass struct {
	*externglib.Object
	DialogClass
	BuildableInterface
}

var _ FontSelectionDialog = (*FontSelectionDialogClass)(nil)

func wrapFontSelectionDialog(obj *externglib.Object) FontSelectionDialog {
	return &FontSelectionDialogClass{
		Object: obj,
		DialogClass: DialogClass{
			Object: obj,
			WindowClass: WindowClass{
				Object: obj,
				BinClass: BinClass{
					Object: obj,
					ContainerClass: ContainerClass{
						Object: obj,
						WidgetClass: WidgetClass{
							InitiallyUnowned: externglib.InitiallyUnowned{Object: obj},
							BuildableInterface: BuildableInterface{
								Object: obj,
							},
						},
						BuildableInterface: BuildableInterface{
							Object: obj,
						},
					},
					BuildableInterface: BuildableInterface{
						Object: obj,
					},
				},
				BuildableInterface: BuildableInterface{
					Object: obj,
				},
			},
			BuildableInterface: BuildableInterface{
				Object: obj,
			},
		},
		BuildableInterface: BuildableInterface{
			Object: obj,
		},
	}
}

func marshalFontSelectionDialog(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapFontSelectionDialog(obj), nil
}

// NewFontSelectionDialog creates a new FontSelectionDialog.
//
// Deprecated: since version 3.2.
func NewFontSelectionDialog(title string) *FontSelectionDialogClass {
	var _arg1 *C.gchar     // out
	var _cret *C.GtkWidget // in

	_arg1 = (*C.gchar)(C.CString(title))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_font_selection_dialog_new(_arg1)

	var _fontSelectionDialog *FontSelectionDialogClass // out

	_fontSelectionDialog = gextras.CastObject(
		externglib.Take(unsafe.Pointer(_cret))).(*FontSelectionDialogClass)

	return _fontSelectionDialog
}

// CancelButton gets the “Cancel” button.
//
// Deprecated: since version 3.2.
func (f *FontSelectionDialogClass) CancelButton() *WidgetClass {
	var _arg0 *C.GtkFontSelectionDialog // out
	var _cret *C.GtkWidget              // in

	_arg0 = (*C.GtkFontSelectionDialog)(unsafe.Pointer((&FontSelectionDialog).Native()))

	_cret = C.gtk_font_selection_dialog_get_cancel_button(_arg0)

	var _widget *WidgetClass // out

	_widget = gextras.CastObject(
		externglib.Take(unsafe.Pointer(_cret))).(*WidgetClass)

	return _widget
}

// FontName gets the currently-selected font name.
//
// Note that this can be a different string than what you set with
// gtk_font_selection_dialog_set_font_name(), as the font selection widget may
// normalize font names and thus return a string with a different structure. For
// example, “Helvetica Italic Bold 12” could be normalized to “Helvetica Bold
// Italic 12”. Use pango_font_description_equal() if you want to compare two
// font descriptions.
//
// Deprecated: since version 3.2.
func (f *FontSelectionDialogClass) FontName() string {
	var _arg0 *C.GtkFontSelectionDialog // out
	var _cret *C.gchar                  // in

	_arg0 = (*C.GtkFontSelectionDialog)(unsafe.Pointer((&FontSelectionDialog).Native()))

	_cret = C.gtk_font_selection_dialog_get_font_name(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// FontSelection retrieves the FontSelection widget embedded in the dialog.
//
// Deprecated: since version 3.2.
func (f *FontSelectionDialogClass) FontSelection() *WidgetClass {
	var _arg0 *C.GtkFontSelectionDialog // out
	var _cret *C.GtkWidget              // in

	_arg0 = (*C.GtkFontSelectionDialog)(unsafe.Pointer((&FontSelectionDialog).Native()))

	_cret = C.gtk_font_selection_dialog_get_font_selection(_arg0)

	var _widget *WidgetClass // out

	_widget = gextras.CastObject(
		externglib.Take(unsafe.Pointer(_cret))).(*WidgetClass)

	return _widget
}

// OkButton gets the “OK” button.
//
// Deprecated: since version 3.2.
func (f *FontSelectionDialogClass) OkButton() *WidgetClass {
	var _arg0 *C.GtkFontSelectionDialog // out
	var _cret *C.GtkWidget              // in

	_arg0 = (*C.GtkFontSelectionDialog)(unsafe.Pointer((&FontSelectionDialog).Native()))

	_cret = C.gtk_font_selection_dialog_get_ok_button(_arg0)

	var _widget *WidgetClass // out

	_widget = gextras.CastObject(
		externglib.Take(unsafe.Pointer(_cret))).(*WidgetClass)

	return _widget
}

// PreviewText gets the text displayed in the preview area.
//
// Deprecated: since version 3.2.
func (f *FontSelectionDialogClass) PreviewText() string {
	var _arg0 *C.GtkFontSelectionDialog // out
	var _cret *C.gchar                  // in

	_arg0 = (*C.GtkFontSelectionDialog)(unsafe.Pointer((&FontSelectionDialog).Native()))

	_cret = C.gtk_font_selection_dialog_get_preview_text(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

// SetFontName sets the currently selected font.
//
// Deprecated: since version 3.2.
func (f *FontSelectionDialogClass) SetFontName(fontname string) bool {
	var _arg0 *C.GtkFontSelectionDialog // out
	var _arg1 *C.gchar                  // out
	var _cret C.gboolean                // in

	_arg0 = (*C.GtkFontSelectionDialog)(unsafe.Pointer((&FontSelectionDialog).Native()))
	_arg1 = (*C.gchar)(C.CString(fontname))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_font_selection_dialog_set_font_name(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetPreviewText sets the text displayed in the preview area.
//
// Deprecated: since version 3.2.
func (f *FontSelectionDialogClass) SetPreviewText(text string) {
	var _arg0 *C.GtkFontSelectionDialog // out
	var _arg1 *C.gchar                  // out

	_arg0 = (*C.GtkFontSelectionDialog)(unsafe.Pointer((&FontSelectionDialog).Native()))
	_arg1 = (*C.gchar)(C.CString(text))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_font_selection_dialog_set_preview_text(_arg0, _arg1)
}
