// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/pango"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_font_selection_get_type()), F: marshalFontSelection},
		{T: externglib.Type(C.gtk_font_selection_dialog_get_type()), F: marshalFontSelectionDialog},
	})
}

type FontSelection interface {
	Box

	// AsBuildable casts the class to the Buildable interface.
	AsBuildable() Buildable
	// AsOrientable casts the class to the Orientable interface.
	AsOrientable() Orientable

	// Face gets the FontFace representing the selected font group details (i.e.
	// family, slant, weight, width, etc).
	//
	// Deprecated: since version 3.2.
	Face() pango.FontFace
	// FaceList: this returns the TreeView which lists all styles available for
	// the selected font. For example, “Regular”, “Bold”, etc.
	//
	// Deprecated: since version 3.2.
	FaceList() Widget
	// Family gets the FontFamily representing the selected font family.
	//
	// Deprecated: since version 3.2.
	Family() pango.FontFamily
	// FamilyList: this returns the TreeView that lists font families, for
	// example, “Sans”, “Serif”, etc.
	//
	// Deprecated: since version 3.2.
	FamilyList() Widget
	// FontName gets the currently-selected font name.
	//
	// Note that this can be a different string than what you set with
	// gtk_font_selection_set_font_name(), as the font selection widget may
	// normalize font names and thus return a string with a different structure.
	// For example, “Helvetica Italic Bold 12” could be normalized to “Helvetica
	// Bold Italic 12”. Use pango_font_description_equal() if you want to
	// compare two font descriptions.
	//
	// Deprecated: since version 3.2.
	FontName() string
	// PreviewEntry: this returns the Entry used to display the font as a
	// preview.
	//
	// Deprecated: since version 3.2.
	PreviewEntry() Widget
	// PreviewText gets the text displayed in the preview area.
	//
	// Deprecated: since version 3.2.
	PreviewText() string
	// Size: the selected font size.
	//
	// Deprecated: since version 3.2.
	Size() int
	// SizeEntry: this returns the Entry used to allow the user to edit the font
	// number manually instead of selecting it from the list of font sizes.
	//
	// Deprecated: since version 3.2.
	SizeEntry() Widget
	// SizeList: this returns the TreeView used to list font sizes.
	//
	// Deprecated: since version 3.2.
	SizeList() Widget
	// SetFontName sets the currently-selected font.
	//
	// Note that the @fontsel needs to know the screen in which it will appear
	// for this to work; this can be guaranteed by simply making sure that the
	// @fontsel is inserted in a toplevel window before you call this function.
	//
	// Deprecated: since version 3.2.
	SetFontName(fontname string) bool
	// SetPreviewText sets the text displayed in the preview area. The @text is
	// used to show how the selected font looks.
	//
	// Deprecated: since version 3.2.
	SetPreviewText(text string)
}

// fontSelection implements the FontSelection class.
type fontSelection struct {
	Box
}

// WrapFontSelection wraps a GObject to the right type. It is
// primarily used internally.
func WrapFontSelection(obj *externglib.Object) FontSelection {
	return fontSelection{
		Box: WrapBox(obj),
	}
}

func marshalFontSelection(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapFontSelection(obj), nil
}

// NewFontSelection creates a new FontSelection.
//
// Deprecated: since version 3.2.
func NewFontSelection() FontSelection {
	var _cret *C.GtkWidget // in

	_cret = C.gtk_font_selection_new()

	var _fontSelection FontSelection // out

	_fontSelection = WrapFontSelection(externglib.Take(unsafe.Pointer(_cret)))

	return _fontSelection
}

func (f fontSelection) AsBuildable() Buildable {
	return WrapBuildable(gextras.InternObject(f))
}

func (f fontSelection) AsOrientable() Orientable {
	return WrapOrientable(gextras.InternObject(f))
}

func (f fontSelection) Face() pango.FontFace {
	var _arg0 *C.GtkFontSelection // out
	var _cret *C.PangoFontFace    // in

	_arg0 = (*C.GtkFontSelection)(unsafe.Pointer(f.Native()))

	_cret = C.gtk_font_selection_get_face(_arg0)

	var _fontFace pango.FontFace // out

	_fontFace = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(pango.FontFace)

	return _fontFace
}

func (f fontSelection) FaceList() Widget {
	var _arg0 *C.GtkFontSelection // out
	var _cret *C.GtkWidget        // in

	_arg0 = (*C.GtkFontSelection)(unsafe.Pointer(f.Native()))

	_cret = C.gtk_font_selection_get_face_list(_arg0)

	var _widget Widget // out

	_widget = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Widget)

	return _widget
}

func (f fontSelection) Family() pango.FontFamily {
	var _arg0 *C.GtkFontSelection // out
	var _cret *C.PangoFontFamily  // in

	_arg0 = (*C.GtkFontSelection)(unsafe.Pointer(f.Native()))

	_cret = C.gtk_font_selection_get_family(_arg0)

	var _fontFamily pango.FontFamily // out

	_fontFamily = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(pango.FontFamily)

	return _fontFamily
}

func (f fontSelection) FamilyList() Widget {
	var _arg0 *C.GtkFontSelection // out
	var _cret *C.GtkWidget        // in

	_arg0 = (*C.GtkFontSelection)(unsafe.Pointer(f.Native()))

	_cret = C.gtk_font_selection_get_family_list(_arg0)

	var _widget Widget // out

	_widget = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Widget)

	return _widget
}

func (f fontSelection) FontName() string {
	var _arg0 *C.GtkFontSelection // out
	var _cret *C.gchar            // in

	_arg0 = (*C.GtkFontSelection)(unsafe.Pointer(f.Native()))

	_cret = C.gtk_font_selection_get_font_name(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

func (f fontSelection) PreviewEntry() Widget {
	var _arg0 *C.GtkFontSelection // out
	var _cret *C.GtkWidget        // in

	_arg0 = (*C.GtkFontSelection)(unsafe.Pointer(f.Native()))

	_cret = C.gtk_font_selection_get_preview_entry(_arg0)

	var _widget Widget // out

	_widget = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Widget)

	return _widget
}

func (f fontSelection) PreviewText() string {
	var _arg0 *C.GtkFontSelection // out
	var _cret *C.gchar            // in

	_arg0 = (*C.GtkFontSelection)(unsafe.Pointer(f.Native()))

	_cret = C.gtk_font_selection_get_preview_text(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

func (f fontSelection) Size() int {
	var _arg0 *C.GtkFontSelection // out
	var _cret C.gint              // in

	_arg0 = (*C.GtkFontSelection)(unsafe.Pointer(f.Native()))

	_cret = C.gtk_font_selection_get_size(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (f fontSelection) SizeEntry() Widget {
	var _arg0 *C.GtkFontSelection // out
	var _cret *C.GtkWidget        // in

	_arg0 = (*C.GtkFontSelection)(unsafe.Pointer(f.Native()))

	_cret = C.gtk_font_selection_get_size_entry(_arg0)

	var _widget Widget // out

	_widget = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Widget)

	return _widget
}

func (f fontSelection) SizeList() Widget {
	var _arg0 *C.GtkFontSelection // out
	var _cret *C.GtkWidget        // in

	_arg0 = (*C.GtkFontSelection)(unsafe.Pointer(f.Native()))

	_cret = C.gtk_font_selection_get_size_list(_arg0)

	var _widget Widget // out

	_widget = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Widget)

	return _widget
}

func (f fontSelection) SetFontName(fontname string) bool {
	var _arg0 *C.GtkFontSelection // out
	var _arg1 *C.gchar            // out
	var _cret C.gboolean          // in

	_arg0 = (*C.GtkFontSelection)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.gchar)(C.CString(fontname))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_font_selection_set_font_name(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (f fontSelection) SetPreviewText(text string) {
	var _arg0 *C.GtkFontSelection // out
	var _arg1 *C.gchar            // out

	_arg0 = (*C.GtkFontSelection)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.gchar)(C.CString(text))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_font_selection_set_preview_text(_arg0, _arg1)
}

type FontSelectionDialog interface {
	Dialog

	// AsBuildable casts the class to the Buildable interface.
	AsBuildable() Buildable

	// CancelButton gets the “Cancel” button.
	//
	// Deprecated: since version 3.2.
	CancelButton() Widget
	// FontName gets the currently-selected font name.
	//
	// Note that this can be a different string than what you set with
	// gtk_font_selection_dialog_set_font_name(), as the font selection widget
	// may normalize font names and thus return a string with a different
	// structure. For example, “Helvetica Italic Bold 12” could be normalized to
	// “Helvetica Bold Italic 12”. Use pango_font_description_equal() if you
	// want to compare two font descriptions.
	//
	// Deprecated: since version 3.2.
	FontName() string
	// FontSelection retrieves the FontSelection widget embedded in the dialog.
	//
	// Deprecated: since version 3.2.
	FontSelection() Widget
	// OkButton gets the “OK” button.
	//
	// Deprecated: since version 3.2.
	OkButton() Widget
	// PreviewText gets the text displayed in the preview area.
	//
	// Deprecated: since version 3.2.
	PreviewText() string
	// SetFontName sets the currently selected font.
	//
	// Deprecated: since version 3.2.
	SetFontName(fontname string) bool
	// SetPreviewText sets the text displayed in the preview area.
	//
	// Deprecated: since version 3.2.
	SetPreviewText(text string)
}

// fontSelectionDialog implements the FontSelectionDialog class.
type fontSelectionDialog struct {
	Dialog
}

// WrapFontSelectionDialog wraps a GObject to the right type. It is
// primarily used internally.
func WrapFontSelectionDialog(obj *externglib.Object) FontSelectionDialog {
	return fontSelectionDialog{
		Dialog: WrapDialog(obj),
	}
}

func marshalFontSelectionDialog(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapFontSelectionDialog(obj), nil
}

// NewFontSelectionDialog creates a new FontSelectionDialog.
//
// Deprecated: since version 3.2.
func NewFontSelectionDialog(title string) FontSelectionDialog {
	var _arg1 *C.gchar     // out
	var _cret *C.GtkWidget // in

	_arg1 = (*C.gchar)(C.CString(title))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_font_selection_dialog_new(_arg1)

	var _fontSelectionDialog FontSelectionDialog // out

	_fontSelectionDialog = WrapFontSelectionDialog(externglib.Take(unsafe.Pointer(_cret)))

	return _fontSelectionDialog
}

func (f fontSelectionDialog) AsBuildable() Buildable {
	return WrapBuildable(gextras.InternObject(f))
}

func (f fontSelectionDialog) CancelButton() Widget {
	var _arg0 *C.GtkFontSelectionDialog // out
	var _cret *C.GtkWidget              // in

	_arg0 = (*C.GtkFontSelectionDialog)(unsafe.Pointer(f.Native()))

	_cret = C.gtk_font_selection_dialog_get_cancel_button(_arg0)

	var _widget Widget // out

	_widget = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Widget)

	return _widget
}

func (f fontSelectionDialog) FontName() string {
	var _arg0 *C.GtkFontSelectionDialog // out
	var _cret *C.gchar                  // in

	_arg0 = (*C.GtkFontSelectionDialog)(unsafe.Pointer(f.Native()))

	_cret = C.gtk_font_selection_dialog_get_font_name(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

func (f fontSelectionDialog) FontSelection() Widget {
	var _arg0 *C.GtkFontSelectionDialog // out
	var _cret *C.GtkWidget              // in

	_arg0 = (*C.GtkFontSelectionDialog)(unsafe.Pointer(f.Native()))

	_cret = C.gtk_font_selection_dialog_get_font_selection(_arg0)

	var _widget Widget // out

	_widget = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Widget)

	return _widget
}

func (f fontSelectionDialog) OkButton() Widget {
	var _arg0 *C.GtkFontSelectionDialog // out
	var _cret *C.GtkWidget              // in

	_arg0 = (*C.GtkFontSelectionDialog)(unsafe.Pointer(f.Native()))

	_cret = C.gtk_font_selection_dialog_get_ok_button(_arg0)

	var _widget Widget // out

	_widget = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Widget)

	return _widget
}

func (f fontSelectionDialog) PreviewText() string {
	var _arg0 *C.GtkFontSelectionDialog // out
	var _cret *C.gchar                  // in

	_arg0 = (*C.GtkFontSelectionDialog)(unsafe.Pointer(f.Native()))

	_cret = C.gtk_font_selection_dialog_get_preview_text(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

func (f fontSelectionDialog) SetFontName(fontname string) bool {
	var _arg0 *C.GtkFontSelectionDialog // out
	var _arg1 *C.gchar                  // out
	var _cret C.gboolean                // in

	_arg0 = (*C.GtkFontSelectionDialog)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.gchar)(C.CString(fontname))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_font_selection_dialog_set_font_name(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (f fontSelectionDialog) SetPreviewText(text string) {
	var _arg0 *C.GtkFontSelectionDialog // out
	var _arg1 *C.gchar                  // out

	_arg0 = (*C.GtkFontSelectionDialog)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.gchar)(C.CString(text))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_font_selection_dialog_set_preview_text(_arg0, _arg1)
}
