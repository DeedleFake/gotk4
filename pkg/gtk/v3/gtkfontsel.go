// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk+-3.0 glib-2.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_font_selection_get_type()), F: marshalFontSelection},
		{T: externglib.Type(C.gtk_font_selection_dialog_get_type()), F: marshalFontSelectionDialog},
	})
}

type FontSelection interface {
	Box
	Buildable
	Orientable

	// FontName gets the currently-selected font name.
	//
	// Note that this can be a different string than what you set with
	// gtk_font_selection_set_font_name(), as the font selection widget may
	// normalize font names and thus return a string with a different structure.
	// For example, “Helvetica Italic Bold 12” could be normalized to “Helvetica
	// Bold Italic 12”. Use pango_font_description_equal() if you want to
	// compare two font descriptions.
	FontName() string
	// PreviewText gets the text displayed in the preview area.
	PreviewText() string
	// Size: the selected font size.
	Size() int
	// SetFontName sets the currently-selected font.
	//
	// Note that the @fontsel needs to know the screen in which it will appear
	// for this to work; this can be guaranteed by simply making sure that the
	// @fontsel is inserted in a toplevel window before you call this function.
	SetFontName(fontname string) bool
	// SetPreviewText sets the text displayed in the preview area. The @text is
	// used to show how the selected font looks.
	SetPreviewText(text string)
}

// fontSelection implements the FontSelection interface.
type fontSelection struct {
	Box
	Buildable
	Orientable
}

var _ FontSelection = (*fontSelection)(nil)

// WrapFontSelection wraps a GObject to the right type. It is
// primarily used internally.
func WrapFontSelection(obj *externglib.Object) FontSelection {
	return FontSelection{
		Box:        WrapBox(obj),
		Buildable:  WrapBuildable(obj),
		Orientable: WrapOrientable(obj),
	}
}

func marshalFontSelection(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapFontSelection(obj), nil
}

// FontName gets the currently-selected font name.
//
// Note that this can be a different string than what you set with
// gtk_font_selection_set_font_name(), as the font selection widget may
// normalize font names and thus return a string with a different structure.
// For example, “Helvetica Italic Bold 12” could be normalized to “Helvetica
// Bold Italic 12”. Use pango_font_description_equal() if you want to
// compare two font descriptions.
func (f fontSelection) FontName() string {
	var _arg0 *C.GtkFontSelection // out

	_arg0 = (*C.GtkFontSelection)(unsafe.Pointer(f.Native()))

	var _cret *C.gchar // in

	_cret = C.gtk_font_selection_get_font_name(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// PreviewText gets the text displayed in the preview area.
func (f fontSelection) PreviewText() string {
	var _arg0 *C.GtkFontSelection // out

	_arg0 = (*C.GtkFontSelection)(unsafe.Pointer(f.Native()))

	var _cret *C.gchar // in

	_cret = C.gtk_font_selection_get_preview_text(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

// Size: the selected font size.
func (f fontSelection) Size() int {
	var _arg0 *C.GtkFontSelection // out

	_arg0 = (*C.GtkFontSelection)(unsafe.Pointer(f.Native()))

	var _cret C.gint // in

	_cret = C.gtk_font_selection_get_size(_arg0)

	var _gint int // out

	_gint = (int)(_cret)

	return _gint
}

// SetFontName sets the currently-selected font.
//
// Note that the @fontsel needs to know the screen in which it will appear
// for this to work; this can be guaranteed by simply making sure that the
// @fontsel is inserted in a toplevel window before you call this function.
func (f fontSelection) SetFontName(fontname string) bool {
	var _arg0 *C.GtkFontSelection // out
	var _arg1 *C.gchar            // out

	_arg0 = (*C.GtkFontSelection)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.gchar)(C.CString(fontname))
	defer C.free(unsafe.Pointer(_arg1))

	var _cret C.gboolean // in

	_cret = C.gtk_font_selection_set_font_name(_arg0, _arg1)

	var _ok bool // out

	if _cret {
		_ok = true
	}

	return _ok
}

// SetPreviewText sets the text displayed in the preview area. The @text is
// used to show how the selected font looks.
func (f fontSelection) SetPreviewText(text string) {
	var _arg0 *C.GtkFontSelection // out
	var _arg1 *C.gchar            // out

	_arg0 = (*C.GtkFontSelection)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.gchar)(C.CString(text))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_font_selection_set_preview_text(_arg0, _arg1)
}

type FontSelectionDialog interface {
	Dialog
	Buildable

	// FontName gets the currently-selected font name.
	//
	// Note that this can be a different string than what you set with
	// gtk_font_selection_dialog_set_font_name(), as the font selection widget
	// may normalize font names and thus return a string with a different
	// structure. For example, “Helvetica Italic Bold 12” could be normalized to
	// “Helvetica Bold Italic 12”. Use pango_font_description_equal() if you
	// want to compare two font descriptions.
	FontName() string
	// PreviewText gets the text displayed in the preview area.
	PreviewText() string
	// SetFontName sets the currently selected font.
	SetFontName(fontname string) bool
	// SetPreviewText sets the text displayed in the preview area.
	SetPreviewText(text string)
}

// fontSelectionDialog implements the FontSelectionDialog interface.
type fontSelectionDialog struct {
	Dialog
	Buildable
}

var _ FontSelectionDialog = (*fontSelectionDialog)(nil)

// WrapFontSelectionDialog wraps a GObject to the right type. It is
// primarily used internally.
func WrapFontSelectionDialog(obj *externglib.Object) FontSelectionDialog {
	return FontSelectionDialog{
		Dialog:    WrapDialog(obj),
		Buildable: WrapBuildable(obj),
	}
}

func marshalFontSelectionDialog(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapFontSelectionDialog(obj), nil
}

// FontName gets the currently-selected font name.
//
// Note that this can be a different string than what you set with
// gtk_font_selection_dialog_set_font_name(), as the font selection widget
// may normalize font names and thus return a string with a different
// structure. For example, “Helvetica Italic Bold 12” could be normalized to
// “Helvetica Bold Italic 12”. Use pango_font_description_equal() if you
// want to compare two font descriptions.
func (f fontSelectionDialog) FontName() string {
	var _arg0 *C.GtkFontSelectionDialog // out

	_arg0 = (*C.GtkFontSelectionDialog)(unsafe.Pointer(f.Native()))

	var _cret *C.gchar // in

	_cret = C.gtk_font_selection_dialog_get_font_name(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// PreviewText gets the text displayed in the preview area.
func (f fontSelectionDialog) PreviewText() string {
	var _arg0 *C.GtkFontSelectionDialog // out

	_arg0 = (*C.GtkFontSelectionDialog)(unsafe.Pointer(f.Native()))

	var _cret *C.gchar // in

	_cret = C.gtk_font_selection_dialog_get_preview_text(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

// SetFontName sets the currently selected font.
func (f fontSelectionDialog) SetFontName(fontname string) bool {
	var _arg0 *C.GtkFontSelectionDialog // out
	var _arg1 *C.gchar                  // out

	_arg0 = (*C.GtkFontSelectionDialog)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.gchar)(C.CString(fontname))
	defer C.free(unsafe.Pointer(_arg1))

	var _cret C.gboolean // in

	_cret = C.gtk_font_selection_dialog_set_font_name(_arg0, _arg1)

	var _ok bool // out

	if _cret {
		_ok = true
	}

	return _ok
}

// SetPreviewText sets the text displayed in the preview area.
func (f fontSelectionDialog) SetPreviewText(text string) {
	var _arg0 *C.GtkFontSelectionDialog // out
	var _arg1 *C.gchar                  // out

	_arg0 = (*C.GtkFontSelectionDialog)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.gchar)(C.CString(text))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_font_selection_dialog_set_preview_text(_arg0, _arg1)
}
