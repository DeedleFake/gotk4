// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_check_button_get_type()), F: marshalCheckButton},
	})
}

// CheckButton: a CheckButton places a discrete ToggleButton next to a widget,
// (usually a Label). See the section on ToggleButton widgets for more
// information about toggle/check buttons.
//
// The important signal ( ToggleButton::toggled ) is also inherited from
// ToggleButton.
//
// CSS nodes
//
//    button.check
//    ├── check
//    ╰── <child>
//
// A GtkCheckButton without indicator changes the name of its main node to
// button and adds a .check style class to it. The subnode is invisible in this
// case.
type CheckButton interface {
	ToggleButton
	Actionable
	Activatable
	Buildable
}

// checkButton implements the CheckButton interface.
type checkButton struct {
	ToggleButton
	Actionable
	Activatable
	Buildable
}

var _ CheckButton = (*checkButton)(nil)

// WrapCheckButton wraps a GObject to the right type. It is
// primarily used internally.
func WrapCheckButton(obj *externglib.Object) CheckButton {
	return CheckButton{
		ToggleButton: WrapToggleButton(obj),
		Actionable:   WrapActionable(obj),
		Activatable:  WrapActivatable(obj),
		Buildable:    WrapBuildable(obj),
	}
}

func marshalCheckButton(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapCheckButton(obj), nil
}

// NewCheckButton constructs a class CheckButton.
func NewCheckButton() CheckButton {
	var cret C.GtkCheckButton
	var goret CheckButton

	cret = C.gtk_check_button_new()

	goret = gextras.CastObject(externglib.Take(unsafe.Pointer(cret.Native()))).(CheckButton)

	return goret
}

// NewCheckButtonWithLabel constructs a class CheckButton.
func NewCheckButtonWithLabel(label string) CheckButton {
	var arg1 *C.gchar

	arg1 = (*C.gchar)(C.CString(label))
	defer C.free(unsafe.Pointer(arg1))

	var cret C.GtkCheckButton
	var goret CheckButton

	cret = C.gtk_check_button_new_with_label(arg1)

	goret = gextras.CastObject(externglib.Take(unsafe.Pointer(cret.Native()))).(CheckButton)

	return goret
}

// NewCheckButtonWithMnemonic constructs a class CheckButton.
func NewCheckButtonWithMnemonic(label string) CheckButton {
	var arg1 *C.gchar

	arg1 = (*C.gchar)(C.CString(label))
	defer C.free(unsafe.Pointer(arg1))

	var cret C.GtkCheckButton
	var goret CheckButton

	cret = C.gtk_check_button_new_with_mnemonic(arg1)

	goret = gextras.CastObject(externglib.Take(unsafe.Pointer(cret.Native()))).(CheckButton)

	return goret
}
