// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk+-3.0 glib-2.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_button_get_type()), F: marshalButton},
	})
}

// Button: the Button widget is generally used to trigger a callback function
// that is called when the button is pressed. The various signals and how to use
// them are outlined below.
//
// The Button widget can hold any valid child widget. That is, it can hold
// almost any other standard Widget. The most commonly used child is the Label.
//
//
// CSS nodes
//
// GtkButton has a single CSS node with name button. The node will get the style
// classes .image-button or .text-button, if the content is just an image or
// label, respectively. It may also receive the .flat style class.
//
// Other style classes that are commonly used with GtkButton include
// .suggested-action and .destructive-action. In special cases, buttons can be
// made round by adding the .circular style class.
//
// Button-like widgets like ToggleButton, MenuButton, VolumeButton, LockButton,
// ColorButton, FontButton or FileChooserButton use style classes such as
// .toggle, .popup, .scale, .lock, .color, .font, .file to differentiate
// themselves from a plain GtkButton.
type Button interface {
	Bin
	Actionable
	Activatable
	Buildable

	// Clicked emits a Button::clicked signal to the given Button.
	Clicked()
	// Enter emits a Button::enter signal to the given Button.
	Enter()
	// Alignment gets the alignment of the child in the button.
	Alignment() (xalign float32, yalign float32)
	// AlwaysShowImage returns whether the button will ignore the
	// Settings:gtk-button-images setting and always show the image, if
	// available.
	AlwaysShowImage() bool
	// FocusOnClick returns whether the button grabs focus when it is clicked
	// with the mouse. See gtk_button_set_focus_on_click().
	FocusOnClick() bool
	// Label fetches the text from the label of the button, as set by
	// gtk_button_set_label(). If the label text has not been set the return
	// value will be nil. This will be the case if you create an empty button
	// with gtk_button_new() to use as a container.
	Label() string
	// UseStock returns whether the button label is a stock item.
	UseStock() bool
	// UseUnderline returns whether an embedded underline in the button label
	// indicates a mnemonic. See gtk_button_set_use_underline ().
	UseUnderline() bool
	// Leave emits a Button::leave signal to the given Button.
	Leave()
	// Pressed emits a Button::pressed signal to the given Button.
	Pressed()
	// Released emits a Button::released signal to the given Button.
	Released()
	// SetAlignment sets the alignment of the child. This property has no effect
	// unless the child is a Misc or a Alignment.
	SetAlignment(xalign float32, yalign float32)
	// SetAlwaysShowImage: if true, the button will ignore the
	// Settings:gtk-button-images setting and always show the image, if
	// available.
	//
	// Use this property if the button would be useless or hard to use without
	// the image.
	SetAlwaysShowImage(alwaysShow bool)
	// SetFocusOnClick sets whether the button will grab focus when it is
	// clicked with the mouse. Making mouse clicks not grab focus is useful in
	// places like toolbars where you don’t want the keyboard focus removed from
	// the main area of the application.
	SetFocusOnClick(focusOnClick bool)
	// SetImage: set the image of @button to the given widget. The image will be
	// displayed if the label text is nil or if Button:always-show-image is
	// true. You don’t have to call gtk_widget_show() on @image yourself.
	SetImage(image Widget)
	// SetImagePosition sets the position of the image relative to the text
	// inside the button.
	SetImagePosition(position PositionType)
	// SetLabel sets the text of the label of the button to @str. This text is
	// also used to select the stock item if gtk_button_set_use_stock() is used.
	//
	// This will also clear any previously set labels.
	SetLabel(label string)
	// SetRelief sets the relief style of the edges of the given Button widget.
	// Two styles exist, GTK_RELIEF_NORMAL and GTK_RELIEF_NONE. The default
	// style is, as one can guess, GTK_RELIEF_NORMAL. The deprecated value
	// GTK_RELIEF_HALF behaves the same as GTK_RELIEF_NORMAL.
	SetRelief(relief ReliefStyle)
	// SetUseStock: if true, the label set on the button is used as a stock id
	// to select the stock item for the button.
	SetUseStock(useStock bool)
	// SetUseUnderline: if true, an underline in the text of the button label
	// indicates the next character should be used for the mnemonic accelerator
	// key.
	SetUseUnderline(useUnderline bool)
}

// button implements the Button interface.
type button struct {
	Bin
	Actionable
	Activatable
	Buildable
}

var _ Button = (*button)(nil)

// WrapButton wraps a GObject to the right type. It is
// primarily used internally.
func WrapButton(obj *externglib.Object) Button {
	return Button{
		Bin:         WrapBin(obj),
		Actionable:  WrapActionable(obj),
		Activatable: WrapActivatable(obj),
		Buildable:   WrapBuildable(obj),
	}
}

func marshalButton(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapButton(obj), nil
}

// Clicked emits a Button::clicked signal to the given Button.
func (b button) Clicked() {
	var _arg0 *C.GtkButton // out

	_arg0 = (*C.GtkButton)(unsafe.Pointer(b.Native()))

	C.gtk_button_clicked(_arg0)
}

// Enter emits a Button::enter signal to the given Button.
func (b button) Enter() {
	var _arg0 *C.GtkButton // out

	_arg0 = (*C.GtkButton)(unsafe.Pointer(b.Native()))

	C.gtk_button_enter(_arg0)
}

// Alignment gets the alignment of the child in the button.
func (b button) Alignment() (xalign float32, yalign float32) {
	var _arg0 *C.GtkButton // out

	_arg0 = (*C.GtkButton)(unsafe.Pointer(b.Native()))

	var _arg1 C.gfloat // in
	var _arg2 C.gfloat // in

	C.gtk_button_get_alignment(_arg0, &_arg1, &_arg2)

	var _xalign float32 // out
	var _yalign float32 // out

	_xalign = (float32)(_arg1)
	_yalign = (float32)(_arg2)

	return _xalign, _yalign
}

// AlwaysShowImage returns whether the button will ignore the
// Settings:gtk-button-images setting and always show the image, if
// available.
func (b button) AlwaysShowImage() bool {
	var _arg0 *C.GtkButton // out

	_arg0 = (*C.GtkButton)(unsafe.Pointer(b.Native()))

	var _cret C.gboolean // in

	_cret = C.gtk_button_get_always_show_image(_arg0)

	var _ok bool // out

	if _cret {
		_ok = true
	}

	return _ok
}

// FocusOnClick returns whether the button grabs focus when it is clicked
// with the mouse. See gtk_button_set_focus_on_click().
func (b button) FocusOnClick() bool {
	var _arg0 *C.GtkButton // out

	_arg0 = (*C.GtkButton)(unsafe.Pointer(b.Native()))

	var _cret C.gboolean // in

	_cret = C.gtk_button_get_focus_on_click(_arg0)

	var _ok bool // out

	if _cret {
		_ok = true
	}

	return _ok
}

// Label fetches the text from the label of the button, as set by
// gtk_button_set_label(). If the label text has not been set the return
// value will be nil. This will be the case if you create an empty button
// with gtk_button_new() to use as a container.
func (b button) Label() string {
	var _arg0 *C.GtkButton // out

	_arg0 = (*C.GtkButton)(unsafe.Pointer(b.Native()))

	var _cret *C.gchar // in

	_cret = C.gtk_button_get_label(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

// UseStock returns whether the button label is a stock item.
func (b button) UseStock() bool {
	var _arg0 *C.GtkButton // out

	_arg0 = (*C.GtkButton)(unsafe.Pointer(b.Native()))

	var _cret C.gboolean // in

	_cret = C.gtk_button_get_use_stock(_arg0)

	var _ok bool // out

	if _cret {
		_ok = true
	}

	return _ok
}

// UseUnderline returns whether an embedded underline in the button label
// indicates a mnemonic. See gtk_button_set_use_underline ().
func (b button) UseUnderline() bool {
	var _arg0 *C.GtkButton // out

	_arg0 = (*C.GtkButton)(unsafe.Pointer(b.Native()))

	var _cret C.gboolean // in

	_cret = C.gtk_button_get_use_underline(_arg0)

	var _ok bool // out

	if _cret {
		_ok = true
	}

	return _ok
}

// Leave emits a Button::leave signal to the given Button.
func (b button) Leave() {
	var _arg0 *C.GtkButton // out

	_arg0 = (*C.GtkButton)(unsafe.Pointer(b.Native()))

	C.gtk_button_leave(_arg0)
}

// Pressed emits a Button::pressed signal to the given Button.
func (b button) Pressed() {
	var _arg0 *C.GtkButton // out

	_arg0 = (*C.GtkButton)(unsafe.Pointer(b.Native()))

	C.gtk_button_pressed(_arg0)
}

// Released emits a Button::released signal to the given Button.
func (b button) Released() {
	var _arg0 *C.GtkButton // out

	_arg0 = (*C.GtkButton)(unsafe.Pointer(b.Native()))

	C.gtk_button_released(_arg0)
}

// SetAlignment sets the alignment of the child. This property has no effect
// unless the child is a Misc or a Alignment.
func (b button) SetAlignment(xalign float32, yalign float32) {
	var _arg0 *C.GtkButton // out
	var _arg1 C.gfloat     // out
	var _arg2 C.gfloat     // out

	_arg0 = (*C.GtkButton)(unsafe.Pointer(b.Native()))
	_arg1 = C.gfloat(xalign)
	_arg2 = C.gfloat(yalign)

	C.gtk_button_set_alignment(_arg0, _arg1, _arg2)
}

// SetAlwaysShowImage: if true, the button will ignore the
// Settings:gtk-button-images setting and always show the image, if
// available.
//
// Use this property if the button would be useless or hard to use without
// the image.
func (b button) SetAlwaysShowImage(alwaysShow bool) {
	var _arg0 *C.GtkButton // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GtkButton)(unsafe.Pointer(b.Native()))
	if alwaysShow {
		_arg1 = C.gboolean(1)
	}

	C.gtk_button_set_always_show_image(_arg0, _arg1)
}

// SetFocusOnClick sets whether the button will grab focus when it is
// clicked with the mouse. Making mouse clicks not grab focus is useful in
// places like toolbars where you don’t want the keyboard focus removed from
// the main area of the application.
func (b button) SetFocusOnClick(focusOnClick bool) {
	var _arg0 *C.GtkButton // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GtkButton)(unsafe.Pointer(b.Native()))
	if focusOnClick {
		_arg1 = C.gboolean(1)
	}

	C.gtk_button_set_focus_on_click(_arg0, _arg1)
}

// SetImage: set the image of @button to the given widget. The image will be
// displayed if the label text is nil or if Button:always-show-image is
// true. You don’t have to call gtk_widget_show() on @image yourself.
func (b button) SetImage(image Widget) {
	var _arg0 *C.GtkButton // out
	var _arg1 *C.GtkWidget // out

	_arg0 = (*C.GtkButton)(unsafe.Pointer(b.Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(image.Native()))

	C.gtk_button_set_image(_arg0, _arg1)
}

// SetImagePosition sets the position of the image relative to the text
// inside the button.
func (b button) SetImagePosition(position PositionType) {
	var _arg0 *C.GtkButton      // out
	var _arg1 C.GtkPositionType // out

	_arg0 = (*C.GtkButton)(unsafe.Pointer(b.Native()))
	_arg1 = (C.GtkPositionType)(position)

	C.gtk_button_set_image_position(_arg0, _arg1)
}

// SetLabel sets the text of the label of the button to @str. This text is
// also used to select the stock item if gtk_button_set_use_stock() is used.
//
// This will also clear any previously set labels.
func (b button) SetLabel(label string) {
	var _arg0 *C.GtkButton // out
	var _arg1 *C.gchar     // out

	_arg0 = (*C.GtkButton)(unsafe.Pointer(b.Native()))
	_arg1 = (*C.gchar)(C.CString(label))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_button_set_label(_arg0, _arg1)
}

// SetRelief sets the relief style of the edges of the given Button widget.
// Two styles exist, GTK_RELIEF_NORMAL and GTK_RELIEF_NONE. The default
// style is, as one can guess, GTK_RELIEF_NORMAL. The deprecated value
// GTK_RELIEF_HALF behaves the same as GTK_RELIEF_NORMAL.
func (b button) SetRelief(relief ReliefStyle) {
	var _arg0 *C.GtkButton     // out
	var _arg1 C.GtkReliefStyle // out

	_arg0 = (*C.GtkButton)(unsafe.Pointer(b.Native()))
	_arg1 = (C.GtkReliefStyle)(relief)

	C.gtk_button_set_relief(_arg0, _arg1)
}

// SetUseStock: if true, the label set on the button is used as a stock id
// to select the stock item for the button.
func (b button) SetUseStock(useStock bool) {
	var _arg0 *C.GtkButton // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GtkButton)(unsafe.Pointer(b.Native()))
	if useStock {
		_arg1 = C.gboolean(1)
	}

	C.gtk_button_set_use_stock(_arg0, _arg1)
}

// SetUseUnderline: if true, an underline in the text of the button label
// indicates the next character should be used for the mnemonic accelerator
// key.
func (b button) SetUseUnderline(useUnderline bool) {
	var _arg0 *C.GtkButton // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GtkButton)(unsafe.Pointer(b.Native()))
	if useUnderline {
		_arg1 = C.gboolean(1)
	}

	C.gtk_button_set_use_underline(_arg0, _arg1)
}
