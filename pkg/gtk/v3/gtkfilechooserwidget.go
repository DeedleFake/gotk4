// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/core/box"
	"github.com/diamondburned/gotk4/core/gerror"
	"github.com/diamondburned/gotk4/core/gextras"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_file_chooser_widget_get_type()), F: marshalFileChooserWidget},
	})
}

// FileChooserWidget is a widget for choosing files. It exposes the FileChooser
// interface, and you should use the methods of this interface to interact with
// the widget.
//
//
// CSS nodes
//
// GtkFileChooserWidget has a single CSS node with name filechooser.
type FileChooserWidget interface {
	Box
	FileChooser
}

// fileChooserWidget implements the FileChooserWidget class.
type fileChooserWidget struct {
	Box
}

// WrapFileChooserWidget wraps a GObject to the right type. It is
// primarily used internally.
func WrapFileChooserWidget(obj *externglib.Object) FileChooserWidget {
	return fileChooserWidget{
		Box: WrapBox(obj),
	}
}

func marshalFileChooserWidget(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapFileChooserWidget(obj), nil
}

func NewFileChooserWidget(action FileChooserAction) FileChooserWidget {
	var _arg1 C.GtkFileChooserAction // out
	var _cret *C.GtkWidget           // in

	_arg1 = C.GtkFileChooserAction(action)

	_cret = C.gtk_file_chooser_widget_new(_arg1)

	var _fileChooserWidget FileChooserWidget // out

	_fileChooserWidget = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(FileChooserWidget)

	return _fileChooserWidget
}

func (b fileChooserWidget) AddChild(builder Builder, child gextras.Objector, typ string) {
	WrapBuildable(gextras.InternObject(b)).AddChild(builder, child, typ)
}

func (b fileChooserWidget) ConstructChild(builder Builder, name string) gextras.Objector {
	return WrapBuildable(gextras.InternObject(b)).ConstructChild(builder, name)
}

func (b fileChooserWidget) CustomFinished(builder Builder, child gextras.Objector, tagname string, data interface{}) {
	WrapBuildable(gextras.InternObject(b)).CustomFinished(builder, child, tagname, data)
}

func (b fileChooserWidget) CustomTagEnd(builder Builder, child gextras.Objector, tagname string, data *interface{}) {
	WrapBuildable(gextras.InternObject(b)).CustomTagEnd(builder, child, tagname, data)
}

func (b fileChooserWidget) CustomTagStart(builder Builder, child gextras.Objector, tagname string) (glib.MarkupParser, interface{}, bool) {
	return WrapBuildable(gextras.InternObject(b)).CustomTagStart(builder, child, tagname)
}

func (b fileChooserWidget) InternalChild(builder Builder, childname string) gextras.Objector {
	return WrapBuildable(gextras.InternObject(b)).InternalChild(builder, childname)
}

func (b fileChooserWidget) Name() string {
	return WrapBuildable(gextras.InternObject(b)).Name()
}

func (b fileChooserWidget) ParserFinished(builder Builder) {
	WrapBuildable(gextras.InternObject(b)).ParserFinished(builder)
}

func (b fileChooserWidget) SetBuildableProperty(builder Builder, name string, value externglib.Value) {
	WrapBuildable(gextras.InternObject(b)).SetBuildableProperty(builder, name, value)
}

func (b fileChooserWidget) SetName(name string) {
	WrapBuildable(gextras.InternObject(b)).SetName(name)
}

func (o fileChooserWidget) Orientation() Orientation {
	return WrapOrientable(gextras.InternObject(o)).Orientation()
}

func (o fileChooserWidget) SetOrientation(orientation Orientation) {
	WrapOrientable(gextras.InternObject(o)).SetOrientation(orientation)
}

func (c fileChooserWidget) AddChoice(id string, label string, options []string, optionLabels []string) {
	WrapFileChooser(gextras.InternObject(c)).AddChoice(id, label, options, optionLabels)
}

func (c fileChooserWidget) AddFilter(filter FileFilter) {
	WrapFileChooser(gextras.InternObject(c)).AddFilter(filter)
}

func (c fileChooserWidget) AddShortcutFolder(folder string) error {
	return WrapFileChooser(gextras.InternObject(c)).AddShortcutFolder(folder)
}

func (c fileChooserWidget) AddShortcutFolderURI(uri string) error {
	return WrapFileChooser(gextras.InternObject(c)).AddShortcutFolderURI(uri)
}

func (c fileChooserWidget) Action() FileChooserAction {
	return WrapFileChooser(gextras.InternObject(c)).Action()
}

func (c fileChooserWidget) Choice(id string) string {
	return WrapFileChooser(gextras.InternObject(c)).Choice(id)
}

func (c fileChooserWidget) CreateFolders() bool {
	return WrapFileChooser(gextras.InternObject(c)).CreateFolders()
}

func (c fileChooserWidget) CurrentFolder() string {
	return WrapFileChooser(gextras.InternObject(c)).CurrentFolder()
}

func (c fileChooserWidget) CurrentFolderURI() string {
	return WrapFileChooser(gextras.InternObject(c)).CurrentFolderURI()
}

func (c fileChooserWidget) CurrentName() string {
	return WrapFileChooser(gextras.InternObject(c)).CurrentName()
}

func (c fileChooserWidget) DoOverwriteConfirmation() bool {
	return WrapFileChooser(gextras.InternObject(c)).DoOverwriteConfirmation()
}

func (c fileChooserWidget) ExtraWidget() Widget {
	return WrapFileChooser(gextras.InternObject(c)).ExtraWidget()
}

func (c fileChooserWidget) Filename() string {
	return WrapFileChooser(gextras.InternObject(c)).Filename()
}

func (c fileChooserWidget) Filter() FileFilter {
	return WrapFileChooser(gextras.InternObject(c)).Filter()
}

func (c fileChooserWidget) LocalOnly() bool {
	return WrapFileChooser(gextras.InternObject(c)).LocalOnly()
}

func (c fileChooserWidget) PreviewFilename() string {
	return WrapFileChooser(gextras.InternObject(c)).PreviewFilename()
}

func (c fileChooserWidget) PreviewURI() string {
	return WrapFileChooser(gextras.InternObject(c)).PreviewURI()
}

func (c fileChooserWidget) PreviewWidget() Widget {
	return WrapFileChooser(gextras.InternObject(c)).PreviewWidget()
}

func (c fileChooserWidget) PreviewWidgetActive() bool {
	return WrapFileChooser(gextras.InternObject(c)).PreviewWidgetActive()
}

func (c fileChooserWidget) SelectMultiple() bool {
	return WrapFileChooser(gextras.InternObject(c)).SelectMultiple()
}

func (c fileChooserWidget) ShowHidden() bool {
	return WrapFileChooser(gextras.InternObject(c)).ShowHidden()
}

func (c fileChooserWidget) URI() string {
	return WrapFileChooser(gextras.InternObject(c)).URI()
}

func (c fileChooserWidget) UsePreviewLabel() bool {
	return WrapFileChooser(gextras.InternObject(c)).UsePreviewLabel()
}

func (c fileChooserWidget) RemoveChoice(id string) {
	WrapFileChooser(gextras.InternObject(c)).RemoveChoice(id)
}

func (c fileChooserWidget) RemoveFilter(filter FileFilter) {
	WrapFileChooser(gextras.InternObject(c)).RemoveFilter(filter)
}

func (c fileChooserWidget) RemoveShortcutFolder(folder string) error {
	return WrapFileChooser(gextras.InternObject(c)).RemoveShortcutFolder(folder)
}

func (c fileChooserWidget) RemoveShortcutFolderURI(uri string) error {
	return WrapFileChooser(gextras.InternObject(c)).RemoveShortcutFolderURI(uri)
}

func (c fileChooserWidget) SelectAll() {
	WrapFileChooser(gextras.InternObject(c)).SelectAll()
}

func (c fileChooserWidget) SelectFilename(filename string) bool {
	return WrapFileChooser(gextras.InternObject(c)).SelectFilename(filename)
}

func (c fileChooserWidget) SelectURI(uri string) bool {
	return WrapFileChooser(gextras.InternObject(c)).SelectURI(uri)
}

func (c fileChooserWidget) SetAction(action FileChooserAction) {
	WrapFileChooser(gextras.InternObject(c)).SetAction(action)
}

func (c fileChooserWidget) SetChoice(id string, option string) {
	WrapFileChooser(gextras.InternObject(c)).SetChoice(id, option)
}

func (c fileChooserWidget) SetCreateFolders(createFolders bool) {
	WrapFileChooser(gextras.InternObject(c)).SetCreateFolders(createFolders)
}

func (c fileChooserWidget) SetCurrentFolder(filename string) bool {
	return WrapFileChooser(gextras.InternObject(c)).SetCurrentFolder(filename)
}

func (c fileChooserWidget) SetCurrentFolderURI(uri string) bool {
	return WrapFileChooser(gextras.InternObject(c)).SetCurrentFolderURI(uri)
}

func (c fileChooserWidget) SetCurrentName(name string) {
	WrapFileChooser(gextras.InternObject(c)).SetCurrentName(name)
}

func (c fileChooserWidget) SetDoOverwriteConfirmation(doOverwriteConfirmation bool) {
	WrapFileChooser(gextras.InternObject(c)).SetDoOverwriteConfirmation(doOverwriteConfirmation)
}

func (c fileChooserWidget) SetExtraWidget(extraWidget Widget) {
	WrapFileChooser(gextras.InternObject(c)).SetExtraWidget(extraWidget)
}

func (c fileChooserWidget) SetFilename(filename string) bool {
	return WrapFileChooser(gextras.InternObject(c)).SetFilename(filename)
}

func (c fileChooserWidget) SetFilter(filter FileFilter) {
	WrapFileChooser(gextras.InternObject(c)).SetFilter(filter)
}

func (c fileChooserWidget) SetLocalOnly(localOnly bool) {
	WrapFileChooser(gextras.InternObject(c)).SetLocalOnly(localOnly)
}

func (c fileChooserWidget) SetPreviewWidget(previewWidget Widget) {
	WrapFileChooser(gextras.InternObject(c)).SetPreviewWidget(previewWidget)
}

func (c fileChooserWidget) SetPreviewWidgetActive(active bool) {
	WrapFileChooser(gextras.InternObject(c)).SetPreviewWidgetActive(active)
}

func (c fileChooserWidget) SetSelectMultiple(selectMultiple bool) {
	WrapFileChooser(gextras.InternObject(c)).SetSelectMultiple(selectMultiple)
}

func (c fileChooserWidget) SetShowHidden(showHidden bool) {
	WrapFileChooser(gextras.InternObject(c)).SetShowHidden(showHidden)
}

func (c fileChooserWidget) SetURI(uri string) bool {
	return WrapFileChooser(gextras.InternObject(c)).SetURI(uri)
}

func (c fileChooserWidget) SetUsePreviewLabel(useLabel bool) {
	WrapFileChooser(gextras.InternObject(c)).SetUsePreviewLabel(useLabel)
}

func (c fileChooserWidget) UnselectAll() {
	WrapFileChooser(gextras.InternObject(c)).UnselectAll()
}

func (c fileChooserWidget) UnselectFilename(filename string) {
	WrapFileChooser(gextras.InternObject(c)).UnselectFilename(filename)
}

func (c fileChooserWidget) UnselectURI(uri string) {
	WrapFileChooser(gextras.InternObject(c)).UnselectURI(uri)
}
