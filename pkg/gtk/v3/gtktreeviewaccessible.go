// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/box"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_tree_view_accessible_get_type()), F: marshalTreeViewAccessible},
	})
}

type TreeViewAccessible interface {
	ContainerAccessible

	// AsContainerAccessible casts the class to the ContainerAccessible interface.
	AsContainerAccessible() ContainerAccessible
	// AsTable casts the class to the atk.Table interface.
	AsTable() atk.Table
	// AsCellAccessibleParent casts the class to the CellAccessibleParent interface.
	AsCellAccessibleParent() CellAccessibleParent

	// ConnectWidgetDestroyed: this function specifies the callback function to
	// be called when the widget corresponding to a GtkAccessible is destroyed.
	//
	// Deprecated: since version 3.4.
	//
	// This method is inherited from Accessible
	ConnectWidgetDestroyed()
	// GetWidget gets the Widget corresponding to the Accessible. The returned
	// widget does not have a reference added, so you do not need to unref it.
	//
	// This method is inherited from Accessible
	GetWidget() Widget
	// SetWidget sets the Widget corresponding to the Accessible.
	//
	// @accessible will not hold a reference to @widget. It is the callerâ€™s
	// responsibility to ensure that when @widget is destroyed, the widget is
	// unset by calling this function again with @widget set to nil.
	//
	// This method is inherited from Accessible
	SetWidget(widget Widget)
	// AddRelationship adds a relationship of the specified type with the
	// specified target.
	//
	// This method is inherited from atk.Object
	AddRelationship(relationship atk.RelationType, target atk.Object) bool
	// GetAccessibleID gets the accessible id of the accessible.
	//
	// This method is inherited from atk.Object
	GetAccessibleID() string
	// GetDescription gets the accessible description of the accessible.
	//
	// This method is inherited from atk.Object
	GetDescription() string
	// GetIndexInParent gets the 0-based index of this accessible in its parent;
	// returns -1 if the accessible does not have an accessible parent.
	//
	// This method is inherited from atk.Object
	GetIndexInParent() int
	// GetLayer gets the layer of the accessible.
	//
	// Deprecated.
	//
	// This method is inherited from atk.Object
	GetLayer() atk.Layer
	// GetMDIZOrder gets the zorder of the accessible. The value G_MININT will
	// be returned if the layer of the accessible is not ATK_LAYER_MDI.
	//
	// Deprecated.
	//
	// This method is inherited from atk.Object
	GetMDIZOrder() int
	// GetNAccessibleChildren gets the number of accessible children of the
	// accessible.
	//
	// This method is inherited from atk.Object
	GetNAccessibleChildren() int
	// GetName gets the accessible name of the accessible.
	//
	// This method is inherited from atk.Object
	GetName() string
	// GetObjectLocale gets a UTF-8 string indicating the POSIX-style
	// LC_MESSAGES locale of @accessible.
	//
	// This method is inherited from atk.Object
	GetObjectLocale() string
	// GetParent gets the accessible parent of the accessible. By default this
	// is the one assigned with atk_object_set_parent(), but it is assumed that
	// ATK implementors have ways to get the parent of the object without the
	// need of assigning it manually with atk_object_set_parent(), and will
	// return it with this method.
	//
	// If you are only interested on the parent assigned with
	// atk_object_set_parent(), use atk_object_peek_parent().
	//
	// This method is inherited from atk.Object
	GetParent() atk.Object
	// GetRole gets the role of the accessible.
	//
	// This method is inherited from atk.Object
	GetRole() atk.Role
	// Initialize: this function is called when implementing subclasses of
	// Object. It does initialization required for the new object. It is
	// intended that this function should called only in the ..._new() functions
	// used to create an instance of a subclass of Object
	//
	// This method is inherited from atk.Object
	Initialize(data interface{})
	// PeekParent gets the accessible parent of the accessible, if it has been
	// manually assigned with atk_object_set_parent. Otherwise, this function
	// returns nil.
	//
	// This method is intended as an utility for ATK implementors, and not to be
	// exposed to accessible tools. See atk_object_get_parent() for further
	// reference.
	//
	// This method is inherited from atk.Object
	PeekParent() atk.Object
	// RefAccessibleChild gets a reference to the specified accessible child of
	// the object. The accessible children are 0-based so the first accessible
	// child is at index 0, the second at index 1 and so on.
	//
	// This method is inherited from atk.Object
	RefAccessibleChild(i int) atk.Object
	// RefRelationSet gets the RelationSet associated with the object.
	//
	// This method is inherited from atk.Object
	RefRelationSet() atk.RelationSet
	// RefStateSet gets a reference to the state set of the accessible; the
	// caller must unreference it when it is no longer needed.
	//
	// This method is inherited from atk.Object
	RefStateSet() atk.StateSet
	// RemovePropertyChangeHandler removes a property change handler.
	//
	// Deprecated: since version 2.12.
	//
	// This method is inherited from atk.Object
	RemovePropertyChangeHandler(handlerId uint)
	// RemoveRelationship removes a relationship of the specified type with the
	// specified target.
	//
	// This method is inherited from atk.Object
	RemoveRelationship(relationship atk.RelationType, target atk.Object) bool
	// SetAccessibleID sets the accessible ID of the accessible. This is not
	// meant to be presented to the user, but to be an ID which is stable over
	// application development. Typically, this is the gtkbuilder ID. Such an ID
	// will be available for instance to identify a given well-known accessible
	// object for tailored screen reading, or for automatic regression testing.
	//
	// This method is inherited from atk.Object
	SetAccessibleID(name string)
	// SetDescription sets the accessible description of the accessible. You
	// can't set the description to NULL. This is reserved for the initial
	// value. In this aspect NULL is similar to ATK_ROLE_UNKNOWN. If you want to
	// set the name to a empty value you can use "".
	//
	// This method is inherited from atk.Object
	SetDescription(description string)
	// SetName sets the accessible name of the accessible. You can't set the
	// name to NULL. This is reserved for the initial value. In this aspect NULL
	// is similar to ATK_ROLE_UNKNOWN. If you want to set the name to a empty
	// value you can use "".
	//
	// This method is inherited from atk.Object
	SetName(name string)
	// SetParent sets the accessible parent of the accessible. @parent can be
	// NULL.
	//
	// This method is inherited from atk.Object
	SetParent(parent atk.Object)
	// SetRole sets the role of the accessible.
	//
	// This method is inherited from atk.Object
	SetRole(role atk.Role)
	// AddColumnSelection adds the specified @column to the selection.
	//
	// This method is inherited from atk.Table
	AddColumnSelection(column int) bool
	// AddRowSelection adds the specified @row to the selection.
	//
	// This method is inherited from atk.Table
	AddRowSelection(row int) bool
	// GetCaption gets the caption for the @table.
	//
	// This method is inherited from atk.Table
	GetCaption() atk.Object
	// GetColumnAtIndex gets a #gint representing the column at the specified
	// @index_.
	//
	// Deprecated.
	//
	// This method is inherited from atk.Table
	GetColumnAtIndex(index_ int) int
	// GetColumnDescription gets the description text of the specified @column
	// in the table
	//
	// This method is inherited from atk.Table
	GetColumnDescription(column int) string
	// GetColumnExtentAt gets the number of columns occupied by the accessible
	// object at the specified @row and @column in the @table.
	//
	// This method is inherited from atk.Table
	GetColumnExtentAt(row int, column int) int
	// GetColumnHeader gets the column header of a specified column in an
	// accessible table.
	//
	// This method is inherited from atk.Table
	GetColumnHeader(column int) atk.Object
	// GetIndexAt gets a #gint representing the index at the specified @row and
	// @column.
	//
	// Deprecated.
	//
	// This method is inherited from atk.Table
	GetIndexAt(row int, column int) int
	// GetNColumns gets the number of columns in the table.
	//
	// This method is inherited from atk.Table
	GetNColumns() int
	// GetNRows gets the number of rows in the table.
	//
	// This method is inherited from atk.Table
	GetNRows() int
	// GetRowAtIndex gets a #gint representing the row at the specified @index_.
	//
	// Deprecated.
	//
	// This method is inherited from atk.Table
	GetRowAtIndex(index_ int) int
	// GetRowDescription gets the description text of the specified row in the
	// table
	//
	// This method is inherited from atk.Table
	GetRowDescription(row int) string
	// GetRowExtentAt gets the number of rows occupied by the accessible object
	// at a specified @row and @column in the @table.
	//
	// This method is inherited from atk.Table
	GetRowExtentAt(row int, column int) int
	// GetRowHeader gets the row header of a specified row in an accessible
	// table.
	//
	// This method is inherited from atk.Table
	GetRowHeader(row int) atk.Object
	// GetSelectedColumns gets the selected columns of the table by initializing
	// **selected with the selected column numbers. This array should be freed
	// by the caller.
	//
	// This method is inherited from atk.Table
	GetSelectedColumns(selected **int) int
	// GetSelectedRows gets the selected rows of the table by initializing
	// **selected with the selected row numbers. This array should be freed by
	// the caller.
	//
	// This method is inherited from atk.Table
	GetSelectedRows(selected **int) int
	// GetSummary gets the summary description of the table.
	//
	// This method is inherited from atk.Table
	GetSummary() atk.Object
	// IsColumnSelected gets a boolean value indicating whether the specified
	// @column is selected
	//
	// This method is inherited from atk.Table
	IsColumnSelected(column int) bool
	// IsRowSelected gets a boolean value indicating whether the specified @row
	// is selected
	//
	// This method is inherited from atk.Table
	IsRowSelected(row int) bool
	// IsSelected gets a boolean value indicating whether the accessible object
	// at the specified @row and @column is selected
	//
	// This method is inherited from atk.Table
	IsSelected(row int, column int) bool
	// RefAt: get a reference to the table cell at @row, @column. This cell
	// should implement the interface TableCell
	//
	// This method is inherited from atk.Table
	RefAt(row int, column int) atk.Object
	// RemoveColumnSelection adds the specified @column to the selection.
	//
	// This method is inherited from atk.Table
	RemoveColumnSelection(column int) bool
	// RemoveRowSelection removes the specified @row from the selection.
	//
	// This method is inherited from atk.Table
	RemoveRowSelection(row int) bool
	// SetCaption sets the caption for the table.
	//
	// This method is inherited from atk.Table
	SetCaption(caption atk.Object)
	// SetColumnDescription sets the description text for the specified @column
	// of the @table.
	//
	// This method is inherited from atk.Table
	SetColumnDescription(column int, description string)
	// SetColumnHeader sets the specified column header to @header.
	//
	// This method is inherited from atk.Table
	SetColumnHeader(column int, header atk.Object)
	// SetRowDescription sets the description text for the specified @row of
	// @table.
	//
	// This method is inherited from atk.Table
	SetRowDescription(row int, description string)
	// SetRowHeader sets the specified row header to @header.
	//
	// This method is inherited from atk.Table
	SetRowHeader(row int, header atk.Object)
	// SetSummary sets the summary description of the table.
	//
	// This method is inherited from atk.Table
	SetSummary(accessible atk.Object)
	// Activate: this method is inherited from CellAccessibleParent
	Activate(cell CellAccessible)
	// Edit: this method is inherited from CellAccessibleParent
	Edit(cell CellAccessible)
	// ExpandCollapse: this method is inherited from CellAccessibleParent
	ExpandCollapse(cell CellAccessible)
	// GetCellArea: this method is inherited from CellAccessibleParent
	GetCellArea(cell CellAccessible) gdk.Rectangle
	// GetCellExtents: this method is inherited from CellAccessibleParent
	GetCellExtents(cell CellAccessible, coordType atk.CoordType) (x int, y int, width int, height int)
	// GetCellPosition: this method is inherited from CellAccessibleParent
	GetCellPosition(cell CellAccessible) (row int, column int)
	// GetChildIndex: this method is inherited from CellAccessibleParent
	GetChildIndex(cell CellAccessible) int
	// GetRendererState: this method is inherited from CellAccessibleParent
	GetRendererState(cell CellAccessible) CellRendererState
	// GrabFocus: this method is inherited from CellAccessibleParent
	GrabFocus(cell CellAccessible) bool
	// UpdateRelationset: this method is inherited from CellAccessibleParent
	UpdateRelationset(cell CellAccessible, relationset atk.RelationSet)
}

// treeViewAccessible implements the TreeViewAccessible interface.
type treeViewAccessible struct {
	*externglib.Object
}

var _ TreeViewAccessible = (*treeViewAccessible)(nil)

// WrapTreeViewAccessible wraps a GObject to a type that implements
// interface TreeViewAccessible. It is primarily used internally.
func WrapTreeViewAccessible(obj *externglib.Object) TreeViewAccessible {
	return treeViewAccessible{obj}
}

func marshalTreeViewAccessible(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapTreeViewAccessible(obj), nil
}

func (t treeViewAccessible) AsContainerAccessible() ContainerAccessible {
	return WrapContainerAccessible(gextras.InternObject(t))
}

func (t treeViewAccessible) AsTable() atk.Table {
	return atk.WrapTable(gextras.InternObject(t))
}

func (t treeViewAccessible) AsCellAccessibleParent() CellAccessibleParent {
	return WrapCellAccessibleParent(gextras.InternObject(t))
}

func (a treeViewAccessible) ConnectWidgetDestroyed() {
	WrapAccessible(gextras.InternObject(a)).ConnectWidgetDestroyed()
}

func (a treeViewAccessible) GetWidget() Widget {
	return WrapAccessible(gextras.InternObject(a)).GetWidget()
}

func (a treeViewAccessible) SetWidget(widget Widget) {
	WrapAccessible(gextras.InternObject(a)).SetWidget(widget)
}

func (o treeViewAccessible) AddRelationship(relationship atk.RelationType, target atk.Object) bool {
	return atk.WrapObject(gextras.InternObject(o)).AddRelationship(relationship, target)
}

func (a treeViewAccessible) GetAccessibleID() string {
	return atk.WrapObject(gextras.InternObject(a)).GetAccessibleID()
}

func (a treeViewAccessible) GetDescription() string {
	return atk.WrapObject(gextras.InternObject(a)).GetDescription()
}

func (a treeViewAccessible) GetIndexInParent() int {
	return atk.WrapObject(gextras.InternObject(a)).GetIndexInParent()
}

func (a treeViewAccessible) GetLayer() atk.Layer {
	return atk.WrapObject(gextras.InternObject(a)).GetLayer()
}

func (a treeViewAccessible) GetMDIZOrder() int {
	return atk.WrapObject(gextras.InternObject(a)).GetMDIZOrder()
}

func (a treeViewAccessible) GetNAccessibleChildren() int {
	return atk.WrapObject(gextras.InternObject(a)).GetNAccessibleChildren()
}

func (a treeViewAccessible) GetName() string {
	return atk.WrapObject(gextras.InternObject(a)).GetName()
}

func (a treeViewAccessible) GetObjectLocale() string {
	return atk.WrapObject(gextras.InternObject(a)).GetObjectLocale()
}

func (a treeViewAccessible) GetParent() atk.Object {
	return atk.WrapObject(gextras.InternObject(a)).GetParent()
}

func (a treeViewAccessible) GetRole() atk.Role {
	return atk.WrapObject(gextras.InternObject(a)).GetRole()
}

func (a treeViewAccessible) Initialize(data interface{}) {
	atk.WrapObject(gextras.InternObject(a)).Initialize(data)
}

func (a treeViewAccessible) PeekParent() atk.Object {
	return atk.WrapObject(gextras.InternObject(a)).PeekParent()
}

func (a treeViewAccessible) RefAccessibleChild(i int) atk.Object {
	return atk.WrapObject(gextras.InternObject(a)).RefAccessibleChild(i)
}

func (a treeViewAccessible) RefRelationSet() atk.RelationSet {
	return atk.WrapObject(gextras.InternObject(a)).RefRelationSet()
}

func (a treeViewAccessible) RefStateSet() atk.StateSet {
	return atk.WrapObject(gextras.InternObject(a)).RefStateSet()
}

func (a treeViewAccessible) RemovePropertyChangeHandler(handlerId uint) {
	atk.WrapObject(gextras.InternObject(a)).RemovePropertyChangeHandler(handlerId)
}

func (o treeViewAccessible) RemoveRelationship(relationship atk.RelationType, target atk.Object) bool {
	return atk.WrapObject(gextras.InternObject(o)).RemoveRelationship(relationship, target)
}

func (a treeViewAccessible) SetAccessibleID(name string) {
	atk.WrapObject(gextras.InternObject(a)).SetAccessibleID(name)
}

func (a treeViewAccessible) SetDescription(description string) {
	atk.WrapObject(gextras.InternObject(a)).SetDescription(description)
}

func (a treeViewAccessible) SetName(name string) {
	atk.WrapObject(gextras.InternObject(a)).SetName(name)
}

func (a treeViewAccessible) SetParent(parent atk.Object) {
	atk.WrapObject(gextras.InternObject(a)).SetParent(parent)
}

func (a treeViewAccessible) SetRole(role atk.Role) {
	atk.WrapObject(gextras.InternObject(a)).SetRole(role)
}

func (t treeViewAccessible) AddColumnSelection(column int) bool {
	return atk.WrapTable(gextras.InternObject(t)).AddColumnSelection(column)
}

func (t treeViewAccessible) AddRowSelection(row int) bool {
	return atk.WrapTable(gextras.InternObject(t)).AddRowSelection(row)
}

func (t treeViewAccessible) GetCaption() atk.Object {
	return atk.WrapTable(gextras.InternObject(t)).GetCaption()
}

func (t treeViewAccessible) GetColumnAtIndex(index_ int) int {
	return atk.WrapTable(gextras.InternObject(t)).GetColumnAtIndex(index_)
}

func (t treeViewAccessible) GetColumnDescription(column int) string {
	return atk.WrapTable(gextras.InternObject(t)).GetColumnDescription(column)
}

func (t treeViewAccessible) GetColumnExtentAt(row int, column int) int {
	return atk.WrapTable(gextras.InternObject(t)).GetColumnExtentAt(row, column)
}

func (t treeViewAccessible) GetColumnHeader(column int) atk.Object {
	return atk.WrapTable(gextras.InternObject(t)).GetColumnHeader(column)
}

func (t treeViewAccessible) GetIndexAt(row int, column int) int {
	return atk.WrapTable(gextras.InternObject(t)).GetIndexAt(row, column)
}

func (t treeViewAccessible) GetNColumns() int {
	return atk.WrapTable(gextras.InternObject(t)).GetNColumns()
}

func (t treeViewAccessible) GetNRows() int {
	return atk.WrapTable(gextras.InternObject(t)).GetNRows()
}

func (t treeViewAccessible) GetRowAtIndex(index_ int) int {
	return atk.WrapTable(gextras.InternObject(t)).GetRowAtIndex(index_)
}

func (t treeViewAccessible) GetRowDescription(row int) string {
	return atk.WrapTable(gextras.InternObject(t)).GetRowDescription(row)
}

func (t treeViewAccessible) GetRowExtentAt(row int, column int) int {
	return atk.WrapTable(gextras.InternObject(t)).GetRowExtentAt(row, column)
}

func (t treeViewAccessible) GetRowHeader(row int) atk.Object {
	return atk.WrapTable(gextras.InternObject(t)).GetRowHeader(row)
}

func (t treeViewAccessible) GetSelectedColumns(selected **int) int {
	return atk.WrapTable(gextras.InternObject(t)).GetSelectedColumns(selected)
}

func (t treeViewAccessible) GetSelectedRows(selected **int) int {
	return atk.WrapTable(gextras.InternObject(t)).GetSelectedRows(selected)
}

func (t treeViewAccessible) GetSummary() atk.Object {
	return atk.WrapTable(gextras.InternObject(t)).GetSummary()
}

func (t treeViewAccessible) IsColumnSelected(column int) bool {
	return atk.WrapTable(gextras.InternObject(t)).IsColumnSelected(column)
}

func (t treeViewAccessible) IsRowSelected(row int) bool {
	return atk.WrapTable(gextras.InternObject(t)).IsRowSelected(row)
}

func (t treeViewAccessible) IsSelected(row int, column int) bool {
	return atk.WrapTable(gextras.InternObject(t)).IsSelected(row, column)
}

func (t treeViewAccessible) RefAt(row int, column int) atk.Object {
	return atk.WrapTable(gextras.InternObject(t)).RefAt(row, column)
}

func (t treeViewAccessible) RemoveColumnSelection(column int) bool {
	return atk.WrapTable(gextras.InternObject(t)).RemoveColumnSelection(column)
}

func (t treeViewAccessible) RemoveRowSelection(row int) bool {
	return atk.WrapTable(gextras.InternObject(t)).RemoveRowSelection(row)
}

func (t treeViewAccessible) SetCaption(caption atk.Object) {
	atk.WrapTable(gextras.InternObject(t)).SetCaption(caption)
}

func (t treeViewAccessible) SetColumnDescription(column int, description string) {
	atk.WrapTable(gextras.InternObject(t)).SetColumnDescription(column, description)
}

func (t treeViewAccessible) SetColumnHeader(column int, header atk.Object) {
	atk.WrapTable(gextras.InternObject(t)).SetColumnHeader(column, header)
}

func (t treeViewAccessible) SetRowDescription(row int, description string) {
	atk.WrapTable(gextras.InternObject(t)).SetRowDescription(row, description)
}

func (t treeViewAccessible) SetRowHeader(row int, header atk.Object) {
	atk.WrapTable(gextras.InternObject(t)).SetRowHeader(row, header)
}

func (t treeViewAccessible) SetSummary(accessible atk.Object) {
	atk.WrapTable(gextras.InternObject(t)).SetSummary(accessible)
}

func (p treeViewAccessible) Activate(cell CellAccessible) {
	WrapCellAccessibleParent(gextras.InternObject(p)).Activate(cell)
}

func (p treeViewAccessible) Edit(cell CellAccessible) {
	WrapCellAccessibleParent(gextras.InternObject(p)).Edit(cell)
}

func (p treeViewAccessible) ExpandCollapse(cell CellAccessible) {
	WrapCellAccessibleParent(gextras.InternObject(p)).ExpandCollapse(cell)
}

func (p treeViewAccessible) GetCellArea(cell CellAccessible) gdk.Rectangle {
	return WrapCellAccessibleParent(gextras.InternObject(p)).GetCellArea(cell)
}

func (p treeViewAccessible) GetCellExtents(cell CellAccessible, coordType atk.CoordType) (x int, y int, width int, height int) {
	return WrapCellAccessibleParent(gextras.InternObject(p)).GetCellExtents(cell, coordType)
}

func (p treeViewAccessible) GetCellPosition(cell CellAccessible) (row int, column int) {
	return WrapCellAccessibleParent(gextras.InternObject(p)).GetCellPosition(cell)
}

func (p treeViewAccessible) GetChildIndex(cell CellAccessible) int {
	return WrapCellAccessibleParent(gextras.InternObject(p)).GetChildIndex(cell)
}

func (p treeViewAccessible) GetRendererState(cell CellAccessible) CellRendererState {
	return WrapCellAccessibleParent(gextras.InternObject(p)).GetRendererState(cell)
}

func (p treeViewAccessible) GrabFocus(cell CellAccessible) bool {
	return WrapCellAccessibleParent(gextras.InternObject(p)).GrabFocus(cell)
}

func (p treeViewAccessible) UpdateRelationset(cell CellAccessible, relationset atk.RelationSet) {
	WrapCellAccessibleParent(gextras.InternObject(p)).UpdateRelationset(cell, relationset)
}
