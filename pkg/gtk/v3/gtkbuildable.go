// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_buildable_get_type()), F: marshalBuildable},
	})
}

// BuildableOverrider contains methods that are overridable. This
// interface is a subset of the interface Buildable.
type BuildableOverrider interface {
	// AddChild adds a child to @buildable. @type is an optional string
	// describing how the child should be added.
	AddChild(builder Builder, child gextras.Objector, typ string)
	// ConstructChild constructs a child of @buildable with the name @name.
	//
	// Builder calls this function if a “constructor” has been specified in the
	// UI definition.
	ConstructChild(builder Builder, name string) gextras.Objector
	// CustomFinished: this is similar to gtk_buildable_parser_finished() but is
	// called once for each custom tag handled by the @buildable.
	CustomFinished(builder Builder, child gextras.Objector, tagname string, data interface{})
	// CustomTagEnd: this is called at the end of each custom element handled by
	// the buildable.
	CustomTagEnd(builder Builder, child gextras.Objector, tagname string, data interface{})
	// InternalChild: get the internal child called @childname of the @buildable
	// object.
	InternalChild(builder Builder, childname string) gextras.Objector
	// Name gets the name of the @buildable object.
	//
	// Builder sets the name based on the [GtkBuilder UI definition][BUILDER-UI]
	// used to construct the @buildable.
	Name() string
	// ParserFinished: called when the builder finishes the parsing of a
	// [GtkBuilder UI definition][BUILDER-UI]. Note that this will be called
	// once for each time gtk_builder_add_from_file() or
	// gtk_builder_add_from_string() is called on a builder.
	ParserFinished(builder Builder)
	// SetBuildableProperty sets the property name @name to @value on the
	// @buildable object.
	SetBuildableProperty(builder Builder, name string, value *externglib.Value)
	// SetName sets the name of the @buildable object.
	SetName(name string)
}

// Buildable: gtkBuildable allows objects to extend and customize their
// deserialization from [GtkBuilder UI descriptions][BUILDER-UI]. The interface
// includes methods for setting names and properties of objects, parsing custom
// tags and constructing child objects.
//
// The GtkBuildable interface is implemented by all widgets and many of the
// non-widget objects that are provided by GTK+. The main user of this interface
// is Builder. There should be very little need for applications to call any of
// these functions directly.
//
// An object only needs to implement this interface if it needs to extend the
// Builder format or run any extra routines at deserialization time.
type Buildable interface {
	gextras.Objector
	BuildableOverrider
}

// buildable implements the Buildable interface.
type buildable struct {
	gextras.Objector
}

var _ Buildable = (*buildable)(nil)

// WrapBuildable wraps a GObject to a type that implements interface
// Buildable. It is primarily used internally.
func WrapBuildable(obj *externglib.Object) Buildable {
	return Buildable{
		Objector: obj,
	}
}

func marshalBuildable(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapBuildable(obj), nil
}

// AddChild adds a child to @buildable. @type is an optional string
// describing how the child should be added.
func (b buildable) AddChild(builder Builder, child gextras.Objector, typ string) {
	var arg0 *C.GtkBuildable
	var arg1 *C.GtkBuilder
	var arg2 *C.GObject
	var arg3 *C.gchar

	arg0 = (*C.GtkBuildable)(unsafe.Pointer(b.Native()))
	arg1 = (*C.GtkBuilder)(unsafe.Pointer(builder.Native()))
	arg2 = (*C.GObject)(unsafe.Pointer(child.Native()))
	arg3 = (*C.gchar)(C.CString(typ))
	defer C.free(unsafe.Pointer(arg3))

	C.gtk_buildable_add_child(arg0, builder, child, typ)
}

// ConstructChild constructs a child of @buildable with the name @name.
//
// Builder calls this function if a “constructor” has been specified in the
// UI definition.
func (b buildable) ConstructChild(builder Builder, name string) gextras.Objector {
	var arg0 *C.GtkBuildable
	var arg1 *C.GtkBuilder
	var arg2 *C.gchar

	arg0 = (*C.GtkBuildable)(unsafe.Pointer(b.Native()))
	arg1 = (*C.GtkBuilder)(unsafe.Pointer(builder.Native()))
	arg2 = (*C.gchar)(C.CString(name))
	defer C.free(unsafe.Pointer(arg2))

	var cret *C.GObject
	var goret1 gextras.Objector

	cret = C.gtk_buildable_construct_child(arg0, builder, name)

	goret1 = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(cret.Native()))).(gextras.Objector)

	return goret1
}

// CustomFinished: this is similar to gtk_buildable_parser_finished() but is
// called once for each custom tag handled by the @buildable.
func (b buildable) CustomFinished(builder Builder, child gextras.Objector, tagname string, data interface{}) {
	var arg0 *C.GtkBuildable
	var arg1 *C.GtkBuilder
	var arg2 *C.GObject
	var arg3 *C.gchar
	var arg4 C.gpointer

	arg0 = (*C.GtkBuildable)(unsafe.Pointer(b.Native()))
	arg1 = (*C.GtkBuilder)(unsafe.Pointer(builder.Native()))
	arg2 = (*C.GObject)(unsafe.Pointer(child.Native()))
	arg3 = (*C.gchar)(C.CString(tagname))
	defer C.free(unsafe.Pointer(arg3))
	arg4 = C.gpointer(data)

	C.gtk_buildable_custom_finished(arg0, builder, child, tagname, data)
}

// CustomTagEnd: this is called at the end of each custom element handled by
// the buildable.
func (b buildable) CustomTagEnd(builder Builder, child gextras.Objector, tagname string, data interface{}) {
	var arg0 *C.GtkBuildable
	var arg1 *C.GtkBuilder
	var arg2 *C.GObject
	var arg3 *C.gchar
	var arg4 *C.gpointer

	arg0 = (*C.GtkBuildable)(unsafe.Pointer(b.Native()))
	arg1 = (*C.GtkBuilder)(unsafe.Pointer(builder.Native()))
	arg2 = (*C.GObject)(unsafe.Pointer(child.Native()))
	arg3 = (*C.gchar)(C.CString(tagname))
	defer C.free(unsafe.Pointer(arg3))
	arg4 = *C.gpointer(data)

	C.gtk_buildable_custom_tag_end(arg0, builder, child, tagname, data)
}

// InternalChild: get the internal child called @childname of the @buildable
// object.
func (b buildable) InternalChild(builder Builder, childname string) gextras.Objector {
	var arg0 *C.GtkBuildable
	var arg1 *C.GtkBuilder
	var arg2 *C.gchar

	arg0 = (*C.GtkBuildable)(unsafe.Pointer(b.Native()))
	arg1 = (*C.GtkBuilder)(unsafe.Pointer(builder.Native()))
	arg2 = (*C.gchar)(C.CString(childname))
	defer C.free(unsafe.Pointer(arg2))

	var cret *C.GObject
	var goret1 gextras.Objector

	cret = C.gtk_buildable_get_internal_child(arg0, builder, childname)

	goret1 = gextras.CastObject(externglib.Take(unsafe.Pointer(cret.Native()))).(gextras.Objector)

	return goret1
}

// Name gets the name of the @buildable object.
//
// Builder sets the name based on the [GtkBuilder UI definition][BUILDER-UI]
// used to construct the @buildable.
func (b buildable) Name() string {
	var arg0 *C.GtkBuildable

	arg0 = (*C.GtkBuildable)(unsafe.Pointer(b.Native()))

	var cret *C.gchar
	var goret1 string

	cret = C.gtk_buildable_get_name(arg0)

	goret1 = C.GoString(cret)

	return goret1
}

// ParserFinished: called when the builder finishes the parsing of a
// [GtkBuilder UI definition][BUILDER-UI]. Note that this will be called
// once for each time gtk_builder_add_from_file() or
// gtk_builder_add_from_string() is called on a builder.
func (b buildable) ParserFinished(builder Builder) {
	var arg0 *C.GtkBuildable
	var arg1 *C.GtkBuilder

	arg0 = (*C.GtkBuildable)(unsafe.Pointer(b.Native()))
	arg1 = (*C.GtkBuilder)(unsafe.Pointer(builder.Native()))

	C.gtk_buildable_parser_finished(arg0, builder)
}

// SetBuildableProperty sets the property name @name to @value on the
// @buildable object.
func (b buildable) SetBuildableProperty(builder Builder, name string, value *externglib.Value) {
	var arg0 *C.GtkBuildable
	var arg1 *C.GtkBuilder
	var arg2 *C.gchar
	var arg3 *C.GValue

	arg0 = (*C.GtkBuildable)(unsafe.Pointer(b.Native()))
	arg1 = (*C.GtkBuilder)(unsafe.Pointer(builder.Native()))
	arg2 = (*C.gchar)(C.CString(name))
	defer C.free(unsafe.Pointer(arg2))
	arg3 = (*C.GValue)(value.GValue)

	C.gtk_buildable_set_buildable_property(arg0, builder, name, value)
}

// SetName sets the name of the @buildable object.
func (b buildable) SetName(name string) {
	var arg0 *C.GtkBuildable
	var arg1 *C.gchar

	arg0 = (*C.GtkBuildable)(unsafe.Pointer(b.Native()))
	arg1 = (*C.gchar)(C.CString(name))
	defer C.free(unsafe.Pointer(arg1))

	C.gtk_buildable_set_name(arg0, name)
}
