// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_tearoff_menu_item_get_type()), F: marshalTearoffMenuItem},
	})
}

// TearoffMenuItem: a TearoffMenuItem is a special MenuItem which is used to
// tear off and reattach its menu.
//
// When its menu is shown normally, the TearoffMenuItem is drawn as a dotted
// line indicating that the menu can be torn off. Activating it causes its menu
// to be torn off and displayed in its own window as a tearoff menu.
//
// When its menu is shown as a tearoff menu, the TearoffMenuItem is drawn as a
// dotted line which has a left pointing arrow graphic indicating that the
// tearoff menu can be reattached. Activating it will erase the tearoff menu
// window.
//
// > TearoffMenuItem is deprecated and should not be used in newly > written
// code. Menus are not meant to be torn around.
type TearoffMenuItem interface {
	MenuItem
	Actionable
	Activatable
	Buildable
}

// tearoffMenuItem implements the TearoffMenuItem interface.
type tearoffMenuItem struct {
	MenuItem
	Actionable
	Activatable
	Buildable
}

var _ TearoffMenuItem = (*tearoffMenuItem)(nil)

// WrapTearoffMenuItem wraps a GObject to the right type. It is
// primarily used internally.
func WrapTearoffMenuItem(obj *externglib.Object) TearoffMenuItem {
	return TearoffMenuItem{
		MenuItem:    WrapMenuItem(obj),
		Actionable:  WrapActionable(obj),
		Activatable: WrapActivatable(obj),
		Buildable:   WrapBuildable(obj),
	}
}

func marshalTearoffMenuItem(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapTearoffMenuItem(obj), nil
}

// NewTearoffMenuItem constructs a class TearoffMenuItem.
func NewTearoffMenuItem() TearoffMenuItem {
	var cret C.GtkTearoffMenuItem
	var goret1 TearoffMenuItem

	cret = C.gtk_tearoff_menu_item_new()

	goret1 = gextras.CastObject(externglib.Take(unsafe.Pointer(cret.Native()))).(TearoffMenuItem)

	return goret1
}

type TearoffMenuItemPrivate struct {
	native C.GtkTearoffMenuItemPrivate
}

// WrapTearoffMenuItemPrivate wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapTearoffMenuItemPrivate(ptr unsafe.Pointer) *TearoffMenuItemPrivate {
	if ptr == nil {
		return nil
	}

	return (*TearoffMenuItemPrivate)(ptr)
}

func marshalTearoffMenuItemPrivate(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapTearoffMenuItemPrivate(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (t *TearoffMenuItemPrivate) Native() unsafe.Pointer {
	return unsafe.Pointer(&t.native)
}
