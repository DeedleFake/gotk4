// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_text_view_accessible_get_type()), F: marshalTextViewAccessible},
	})
}

type TextViewAccessible interface {
	gextras.Objector

	privateTextViewAccessibleClass()
}

// TextViewAccessibleClass implements the TextViewAccessible interface.
type TextViewAccessibleClass struct {
	ContainerAccessibleClass
}

var _ TextViewAccessible = (*TextViewAccessibleClass)(nil)

func wrapTextViewAccessible(obj *externglib.Object) TextViewAccessible {
	return &TextViewAccessibleClass{
		ContainerAccessibleClass: ContainerAccessibleClass{
			WidgetAccessibleClass: WidgetAccessibleClass{
				AccessibleClass: AccessibleClass{
					ObjectClass: atk.ObjectClass{
						Object: obj,
					},
				},
			},
		},
	}
}

func marshalTextViewAccessible(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapTextViewAccessible(obj), nil
}

func (*TextViewAccessibleClass) privateTextViewAccessibleClass() {}
