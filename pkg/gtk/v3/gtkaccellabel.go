// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_accel_label_get_type()), F: marshalAccelLabel},
	})
}

// AccelLabel: the AccelLabel widget is a subclass of Label that also displays
// an accelerator key on the right of the label text, e.g. “Ctrl+S”. It is
// commonly used in menus to show the keyboard short-cuts for commands.
//
// The accelerator key to display is typically not set explicitly (although it
// can be, with gtk_accel_label_set_accel()). Instead, the AccelLabel displays
// the accelerators which have been added to a particular widget. This widget is
// set by calling gtk_accel_label_set_accel_widget().
//
// For example, a MenuItem widget may have an accelerator added to emit the
// “activate” signal when the “Ctrl+S” key combination is pressed. A AccelLabel
// is created and added to the MenuItem, and gtk_accel_label_set_accel_widget()
// is called with the MenuItem as the second argument. The AccelLabel will now
// display “Ctrl+S” after its label.
//
// Note that creating a MenuItem with gtk_menu_item_new_with_label() (or one of
// the similar functions for CheckMenuItem and RadioMenuItem) automatically adds
// a AccelLabel to the MenuItem and calls gtk_accel_label_set_accel_widget() to
// set it up for you.
//
// A AccelLabel will only display accelerators which have GTK_ACCEL_VISIBLE set
// (see AccelFlags). A AccelLabel can display multiple accelerators and even
// signal names, though it is almost always used to display just one accelerator
// key.
//
// Creating a simple menu item with an accelerator key.
//
//    label
//    ╰── accelerator
//
// Like Label, GtkAccelLabel has a main CSS node with the name label. It adds a
// subnode with name accelerator.
type AccelLabel interface {
	Label
	Buildable

	// Accel gets the keyval and modifier mask set with
	// gtk_accel_label_set_accel().
	Accel(a AccelLabel) (acceleratorKey uint, acceleratorMods *gdk.ModifierType)
	// AccelWidget fetches the widget monitored by this accelerator label. See
	// gtk_accel_label_set_accel_widget().
	AccelWidget(a AccelLabel)
	// AccelWidth returns the width needed to display the accelerator key(s).
	// This is used by menus to align all of the MenuItem widgets, and shouldn't
	// be needed by applications.
	AccelWidth(a AccelLabel)
	// Refetch recreates the string representing the accelerator keys. This
	// should not be needed since the string is automatically updated whenever
	// accelerators are added or removed from the associated widget.
	Refetch(a AccelLabel) bool
	// SetAccel: manually sets a keyval and modifier mask as the accelerator
	// rendered by @accel_label.
	//
	// If a keyval and modifier are explicitly set then these values are used
	// regardless of any associated accel closure or widget.
	//
	// Providing an @accelerator_key of 0 removes the manual setting.
	SetAccel(a AccelLabel, acceleratorKey uint, acceleratorMods gdk.ModifierType)
	// SetAccelWidget sets the widget to be monitored by this accelerator label.
	// Passing nil for @accel_widget will dissociate @accel_label from its
	// current widget, if any.
	SetAccelWidget(a AccelLabel, accelWidget Widget)
}

// accelLabel implements the AccelLabel interface.
type accelLabel struct {
	Label
	Buildable
}

var _ AccelLabel = (*accelLabel)(nil)

// WrapAccelLabel wraps a GObject to the right type. It is
// primarily used internally.
func WrapAccelLabel(obj *externglib.Object) AccelLabel {
	return AccelLabel{
		Label:     WrapLabel(obj),
		Buildable: WrapBuildable(obj),
	}
}

func marshalAccelLabel(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapAccelLabel(obj), nil
}

// NewAccelLabel constructs a class AccelLabel.
func NewAccelLabel(string string) {
	var arg1 *C.gchar

	arg1 = (*C.gchar)(C.CString(string))
	defer C.free(unsafe.Pointer(arg1))

	C.gtk_accel_label_new(arg1)
}

// Accel gets the keyval and modifier mask set with
// gtk_accel_label_set_accel().
func (a accelLabel) Accel(a AccelLabel) (acceleratorKey uint, acceleratorMods *gdk.ModifierType) {
	var arg0 *C.GtkAccelLabel

	arg0 = (*C.GtkAccelLabel)(unsafe.Pointer(a.Native()))

	var arg1 C.guint
	var acceleratorKey uint
	var arg2 C.GdkModifierType
	var acceleratorMods *gdk.ModifierType

	C.gtk_accel_label_get_accel(arg0, &arg1, &arg2)

	acceleratorKey = uint(&arg1)
	acceleratorMods = *gdk.ModifierType(&arg2)

	return acceleratorKey, acceleratorMods
}

// AccelWidget fetches the widget monitored by this accelerator label. See
// gtk_accel_label_set_accel_widget().
func (a accelLabel) AccelWidget(a AccelLabel) {
	var arg0 *C.GtkAccelLabel

	arg0 = (*C.GtkAccelLabel)(unsafe.Pointer(a.Native()))

	C.gtk_accel_label_get_accel_widget(arg0)
}

// AccelWidth returns the width needed to display the accelerator key(s).
// This is used by menus to align all of the MenuItem widgets, and shouldn't
// be needed by applications.
func (a accelLabel) AccelWidth(a AccelLabel) {
	var arg0 *C.GtkAccelLabel

	arg0 = (*C.GtkAccelLabel)(unsafe.Pointer(a.Native()))

	C.gtk_accel_label_get_accel_width(arg0)
}

// Refetch recreates the string representing the accelerator keys. This
// should not be needed since the string is automatically updated whenever
// accelerators are added or removed from the associated widget.
func (a accelLabel) Refetch(a AccelLabel) bool {
	var arg0 *C.GtkAccelLabel

	arg0 = (*C.GtkAccelLabel)(unsafe.Pointer(a.Native()))

	var cret C.gboolean
	var ok bool

	cret = C.gtk_accel_label_refetch(arg0)

	if cret {
		ok = true
	}

	return ok
}

// SetAccel: manually sets a keyval and modifier mask as the accelerator
// rendered by @accel_label.
//
// If a keyval and modifier are explicitly set then these values are used
// regardless of any associated accel closure or widget.
//
// Providing an @accelerator_key of 0 removes the manual setting.
func (a accelLabel) SetAccel(a AccelLabel, acceleratorKey uint, acceleratorMods gdk.ModifierType) {
	var arg0 *C.GtkAccelLabel
	var arg1 C.guint
	var arg2 C.GdkModifierType

	arg0 = (*C.GtkAccelLabel)(unsafe.Pointer(a.Native()))
	arg1 = C.guint(acceleratorKey)
	arg2 = (C.GdkModifierType)(acceleratorMods)

	C.gtk_accel_label_set_accel(arg0, arg1, arg2)
}

// SetAccelWidget sets the widget to be monitored by this accelerator label.
// Passing nil for @accel_widget will dissociate @accel_label from its
// current widget, if any.
func (a accelLabel) SetAccelWidget(a AccelLabel, accelWidget Widget) {
	var arg0 *C.GtkAccelLabel
	var arg1 *C.GtkWidget

	arg0 = (*C.GtkAccelLabel)(unsafe.Pointer(a.Native()))
	arg1 = (*C.GtkWidget)(unsafe.Pointer(accelWidget.Native()))

	C.gtk_accel_label_set_accel_widget(arg0, arg1)
}
