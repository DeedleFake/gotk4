// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/gdk/v3"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: glib-2.0 gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_accel_label_get_type()), F: marshalAccelLabel},
	})
}

// AccelLabel: the AccelLabel widget is a subclass of Label that also displays
// an accelerator key on the right of the label text, e.g. “Ctrl+S”. It is
// commonly used in menus to show the keyboard short-cuts for commands.
//
// The accelerator key to display is typically not set explicitly (although it
// can be, with gtk_accel_label_set_accel()). Instead, the AccelLabel displays
// the accelerators which have been added to a particular widget. This widget is
// set by calling gtk_accel_label_set_accel_widget().
//
// For example, a MenuItem widget may have an accelerator added to emit the
// “activate” signal when the “Ctrl+S” key combination is pressed. A AccelLabel
// is created and added to the MenuItem, and gtk_accel_label_set_accel_widget()
// is called with the MenuItem as the second argument. The AccelLabel will now
// display “Ctrl+S” after its label.
//
// Note that creating a MenuItem with gtk_menu_item_new_with_label() (or one of
// the similar functions for CheckMenuItem and RadioMenuItem) automatically adds
// a AccelLabel to the MenuItem and calls gtk_accel_label_set_accel_widget() to
// set it up for you.
//
// A AccelLabel will only display accelerators which have GTK_ACCEL_VISIBLE set
// (see AccelFlags). A AccelLabel can display multiple accelerators and even
// signal names, though it is almost always used to display just one accelerator
// key.
//
// Creating a simple menu item with an accelerator key.
//
//    label
//    ╰── accelerator
//
// Like Label, GtkAccelLabel has a main CSS node with the name label. It adds a
// subnode with name accelerator.
type AccelLabel interface {
	Label
	Buildable

	// AccelWidth returns the width needed to display the accelerator key(s).
	// This is used by menus to align all of the MenuItem widgets, and shouldn't
	// be needed by applications.
	AccelWidth() uint
	// Refetch recreates the string representing the accelerator keys. This
	// should not be needed since the string is automatically updated whenever
	// accelerators are added or removed from the associated widget.
	Refetch() bool
	// SetAccel: manually sets a keyval and modifier mask as the accelerator
	// rendered by @accel_label.
	//
	// If a keyval and modifier are explicitly set then these values are used
	// regardless of any associated accel closure or widget.
	//
	// Providing an @accelerator_key of 0 removes the manual setting.
	SetAccel(acceleratorKey uint, acceleratorMods gdk.ModifierType)
	// SetAccelWidget sets the widget to be monitored by this accelerator label.
	// Passing nil for @accel_widget will dissociate @accel_label from its
	// current widget, if any.
	SetAccelWidget(accelWidget Widget)
}

// accelLabel implements the AccelLabel class.
type accelLabel struct {
	Label
	Buildable
}

var _ AccelLabel = (*accelLabel)(nil)

// WrapAccelLabel wraps a GObject to the right type. It is
// primarily used internally.
func WrapAccelLabel(obj *externglib.Object) AccelLabel {
	return accelLabel{
		Label:     WrapLabel(obj),
		Buildable: WrapBuildable(obj),
	}
}

func marshalAccelLabel(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapAccelLabel(obj), nil
}

// AccelWidth returns the width needed to display the accelerator key(s).
// This is used by menus to align all of the MenuItem widgets, and shouldn't
// be needed by applications.
func (a accelLabel) AccelWidth() uint {
	var _arg0 *C.GtkAccelLabel // out

	_arg0 = (*C.GtkAccelLabel)(unsafe.Pointer(a.Native()))

	var _cret C.guint // in

	_cret = C.gtk_accel_label_get_accel_width(_arg0)

	var _guint uint // out

	_guint = (uint)(_cret)

	return _guint
}

// Refetch recreates the string representing the accelerator keys. This
// should not be needed since the string is automatically updated whenever
// accelerators are added or removed from the associated widget.
func (a accelLabel) Refetch() bool {
	var _arg0 *C.GtkAccelLabel // out

	_arg0 = (*C.GtkAccelLabel)(unsafe.Pointer(a.Native()))

	var _cret C.gboolean // in

	_cret = C.gtk_accel_label_refetch(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetAccel: manually sets a keyval and modifier mask as the accelerator
// rendered by @accel_label.
//
// If a keyval and modifier are explicitly set then these values are used
// regardless of any associated accel closure or widget.
//
// Providing an @accelerator_key of 0 removes the manual setting.
func (a accelLabel) SetAccel(acceleratorKey uint, acceleratorMods gdk.ModifierType) {
	var _arg0 *C.GtkAccelLabel  // out
	var _arg1 C.guint           // out
	var _arg2 C.GdkModifierType // out

	_arg0 = (*C.GtkAccelLabel)(unsafe.Pointer(a.Native()))
	_arg1 = C.guint(acceleratorKey)
	_arg2 = (C.GdkModifierType)(acceleratorMods)

	C.gtk_accel_label_set_accel(_arg0, _arg1, _arg2)
}

// SetAccelWidget sets the widget to be monitored by this accelerator label.
// Passing nil for @accel_widget will dissociate @accel_label from its
// current widget, if any.
func (a accelLabel) SetAccelWidget(accelWidget Widget) {
	var _arg0 *C.GtkAccelLabel // out
	var _arg1 *C.GtkWidget     // out

	_arg0 = (*C.GtkAccelLabel)(unsafe.Pointer(a.Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(accelWidget.Native()))

	C.gtk_accel_label_set_accel_widget(_arg0, _arg1)
}
