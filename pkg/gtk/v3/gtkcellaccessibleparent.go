// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/gdk/v3"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_cell_accessible_parent_get_type()), F: marshalCellAccessibleParent},
	})
}

// CellAccessibleParentOverrider contains methods that are overridable. This
// interface is a subset of the interface CellAccessibleParent.
type CellAccessibleParentOverrider interface {
	Activate(cell CellAccessible)

	Edit(cell CellAccessible)

	ExpandCollapse(cell CellAccessible)

	CellArea(cell CellAccessible) gdk.Rectangle

	CellPosition(cell CellAccessible) (row int, column int)

	ChildIndex(cell CellAccessible) int

	RendererState(cell CellAccessible) CellRendererState

	GrabFocus(cell CellAccessible) bool
}

type CellAccessibleParent interface {
	gextras.Objector
	CellAccessibleParentOverrider
}

// cellAccessibleParent implements the CellAccessibleParent interface.
type cellAccessibleParent struct {
	gextras.Objector
}

var _ CellAccessibleParent = (*cellAccessibleParent)(nil)

// WrapCellAccessibleParent wraps a GObject to a type that implements interface
// CellAccessibleParent. It is primarily used internally.
func WrapCellAccessibleParent(obj *externglib.Object) CellAccessibleParent {
	return CellAccessibleParent{
		Objector: obj,
	}
}

func marshalCellAccessibleParent(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapCellAccessibleParent(obj), nil
}

func (p cellAccessibleParent) Activate(cell CellAccessible) {
	var arg0 *C.GtkCellAccessibleParent
	var arg1 *C.GtkCellAccessible

	arg0 = (*C.GtkCellAccessibleParent)(unsafe.Pointer(p.Native()))
	arg1 = (*C.GtkCellAccessible)(unsafe.Pointer(cell.Native()))

	C.gtk_cell_accessible_parent_activate(arg0, arg1)
}

func (p cellAccessibleParent) Edit(cell CellAccessible) {
	var arg0 *C.GtkCellAccessibleParent
	var arg1 *C.GtkCellAccessible

	arg0 = (*C.GtkCellAccessibleParent)(unsafe.Pointer(p.Native()))
	arg1 = (*C.GtkCellAccessible)(unsafe.Pointer(cell.Native()))

	C.gtk_cell_accessible_parent_edit(arg0, arg1)
}

func (p cellAccessibleParent) ExpandCollapse(cell CellAccessible) {
	var arg0 *C.GtkCellAccessibleParent
	var arg1 *C.GtkCellAccessible

	arg0 = (*C.GtkCellAccessibleParent)(unsafe.Pointer(p.Native()))
	arg1 = (*C.GtkCellAccessible)(unsafe.Pointer(cell.Native()))

	C.gtk_cell_accessible_parent_expand_collapse(arg0, arg1)
}

func (p cellAccessibleParent) CellArea(cell CellAccessible) gdk.Rectangle {
	var arg0 *C.GtkCellAccessibleParent
	var arg1 *C.GtkCellAccessible

	arg0 = (*C.GtkCellAccessibleParent)(unsafe.Pointer(p.Native()))
	arg1 = (*C.GtkCellAccessible)(unsafe.Pointer(cell.Native()))

	var cellRect gdk.Rectangle

	C.gtk_cell_accessible_parent_get_cell_area(arg0, arg1, (*C.GdkRectangle)(unsafe.Pointer(&cellRect)))

	return cellRect
}

func (p cellAccessibleParent) CellPosition(cell CellAccessible) (row int, column int) {
	var arg0 *C.GtkCellAccessibleParent
	var arg1 *C.GtkCellAccessible

	arg0 = (*C.GtkCellAccessibleParent)(unsafe.Pointer(p.Native()))
	arg1 = (*C.GtkCellAccessible)(unsafe.Pointer(cell.Native()))

	var arg2 C.gint
	var arg3 C.gint

	C.gtk_cell_accessible_parent_get_cell_position(arg0, arg1, &arg2, &arg3)

	var row int
	var column int

	row = (int)(arg2)
	column = (int)(arg3)

	return row, column
}

func (p cellAccessibleParent) ChildIndex(cell CellAccessible) int {
	var arg0 *C.GtkCellAccessibleParent
	var arg1 *C.GtkCellAccessible

	arg0 = (*C.GtkCellAccessibleParent)(unsafe.Pointer(p.Native()))
	arg1 = (*C.GtkCellAccessible)(unsafe.Pointer(cell.Native()))

	var cret C.int

	cret = C.gtk_cell_accessible_parent_get_child_index(arg0, arg1)

	var gint int

	gint = (int)(cret)

	return gint
}

func (p cellAccessibleParent) RendererState(cell CellAccessible) CellRendererState {
	var arg0 *C.GtkCellAccessibleParent
	var arg1 *C.GtkCellAccessible

	arg0 = (*C.GtkCellAccessibleParent)(unsafe.Pointer(p.Native()))
	arg1 = (*C.GtkCellAccessible)(unsafe.Pointer(cell.Native()))

	var cret C.GtkCellRendererState

	cret = C.gtk_cell_accessible_parent_get_renderer_state(arg0, arg1)

	var cellRendererState CellRendererState

	cellRendererState = CellRendererState(cret)

	return cellRendererState
}

func (p cellAccessibleParent) GrabFocus(cell CellAccessible) bool {
	var arg0 *C.GtkCellAccessibleParent
	var arg1 *C.GtkCellAccessible

	arg0 = (*C.GtkCellAccessibleParent)(unsafe.Pointer(p.Native()))
	arg1 = (*C.GtkCellAccessible)(unsafe.Pointer(cell.Native()))

	var cret C.gboolean

	cret = C.gtk_cell_accessible_parent_grab_focus(arg0, arg1)

	var ok bool

	if cret {
		ok = true
	}

	return ok
}
