// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/core/gextras"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_cell_accessible_parent_get_type()), F: marshalCellAccessibleParent},
	})
}

// CellAccessibleParent:
type CellAccessibleParent interface {
	gextras.Objector

	// Activate:
	Activate(cell CellAccessible)
	// Edit:
	Edit(cell CellAccessible)
	// ExpandCollapse:
	ExpandCollapse(cell CellAccessible)
	// CellArea:
	CellArea(cell CellAccessible) gdk.Rectangle
	// CellPosition:
	CellPosition(cell CellAccessible) (row int, column int)
	// ChildIndex:
	ChildIndex(cell CellAccessible) int
	// RendererState:
	RendererState(cell CellAccessible) CellRendererState
	// GrabFocus:
	GrabFocus(cell CellAccessible) bool
}

// cellAccessibleParent implements the CellAccessibleParent interface.
type cellAccessibleParent struct {
	gextras.Objector
}

var _ CellAccessibleParent = (*cellAccessibleParent)(nil)

// WrapCellAccessibleParent wraps a GObject to a type that implements
// interface CellAccessibleParent. It is primarily used internally.
func WrapCellAccessibleParent(obj *externglib.Object) CellAccessibleParent {
	return cellAccessibleParent{
		Objector: obj,
	}
}

func marshalCellAccessibleParent(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapCellAccessibleParent(obj), nil
}

func (p cellAccessibleParent) Activate(cell CellAccessible) {
	var _arg0 *C.GtkCellAccessibleParent // out
	var _arg1 *C.GtkCellAccessible       // out

	_arg0 = (*C.GtkCellAccessibleParent)(unsafe.Pointer(p.Native()))
	_arg1 = (*C.GtkCellAccessible)(unsafe.Pointer(cell.Native()))

	C.gtk_cell_accessible_parent_activate(_arg0, _arg1)
}

func (p cellAccessibleParent) Edit(cell CellAccessible) {
	var _arg0 *C.GtkCellAccessibleParent // out
	var _arg1 *C.GtkCellAccessible       // out

	_arg0 = (*C.GtkCellAccessibleParent)(unsafe.Pointer(p.Native()))
	_arg1 = (*C.GtkCellAccessible)(unsafe.Pointer(cell.Native()))

	C.gtk_cell_accessible_parent_edit(_arg0, _arg1)
}

func (p cellAccessibleParent) ExpandCollapse(cell CellAccessible) {
	var _arg0 *C.GtkCellAccessibleParent // out
	var _arg1 *C.GtkCellAccessible       // out

	_arg0 = (*C.GtkCellAccessibleParent)(unsafe.Pointer(p.Native()))
	_arg1 = (*C.GtkCellAccessible)(unsafe.Pointer(cell.Native()))

	C.gtk_cell_accessible_parent_expand_collapse(_arg0, _arg1)
}

func (p cellAccessibleParent) CellArea(cell CellAccessible) gdk.Rectangle {
	var _arg0 *C.GtkCellAccessibleParent // out
	var _arg1 *C.GtkCellAccessible       // out
	var _arg2 C.GdkRectangle             // in

	_arg0 = (*C.GtkCellAccessibleParent)(unsafe.Pointer(p.Native()))
	_arg1 = (*C.GtkCellAccessible)(unsafe.Pointer(cell.Native()))

	C.gtk_cell_accessible_parent_get_cell_area(_arg0, _arg1, &_arg2)

	var _cellRect gdk.Rectangle // out

	{
		var refTmpIn *C.GdkRectangle
		var refTmpOut *gdk.Rectangle

		in0 := &_arg2
		refTmpIn = in0

		refTmpOut = (*gdk.Rectangle)(unsafe.Pointer(refTmpIn))

		_cellRect = *refTmpOut
	}

	return _cellRect
}

func (p cellAccessibleParent) CellPosition(cell CellAccessible) (row int, column int) {
	var _arg0 *C.GtkCellAccessibleParent // out
	var _arg1 *C.GtkCellAccessible       // out
	var _arg2 C.gint                     // in
	var _arg3 C.gint                     // in

	_arg0 = (*C.GtkCellAccessibleParent)(unsafe.Pointer(p.Native()))
	_arg1 = (*C.GtkCellAccessible)(unsafe.Pointer(cell.Native()))

	C.gtk_cell_accessible_parent_get_cell_position(_arg0, _arg1, &_arg2, &_arg3)

	var _row int    // out
	var _column int // out

	_row = int(_arg2)
	_column = int(_arg3)

	return _row, _column
}

func (p cellAccessibleParent) ChildIndex(cell CellAccessible) int {
	var _arg0 *C.GtkCellAccessibleParent // out
	var _arg1 *C.GtkCellAccessible       // out
	var _cret C.int                      // in

	_arg0 = (*C.GtkCellAccessibleParent)(unsafe.Pointer(p.Native()))
	_arg1 = (*C.GtkCellAccessible)(unsafe.Pointer(cell.Native()))

	_cret = C.gtk_cell_accessible_parent_get_child_index(_arg0, _arg1)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (p cellAccessibleParent) RendererState(cell CellAccessible) CellRendererState {
	var _arg0 *C.GtkCellAccessibleParent // out
	var _arg1 *C.GtkCellAccessible       // out
	var _cret C.GtkCellRendererState     // in

	_arg0 = (*C.GtkCellAccessibleParent)(unsafe.Pointer(p.Native()))
	_arg1 = (*C.GtkCellAccessible)(unsafe.Pointer(cell.Native()))

	_cret = C.gtk_cell_accessible_parent_get_renderer_state(_arg0, _arg1)

	var _cellRendererState CellRendererState // out

	_cellRendererState = CellRendererState(_cret)

	return _cellRendererState
}

func (p cellAccessibleParent) GrabFocus(cell CellAccessible) bool {
	var _arg0 *C.GtkCellAccessibleParent // out
	var _arg1 *C.GtkCellAccessible       // out
	var _cret C.gboolean                 // in

	_arg0 = (*C.GtkCellAccessibleParent)(unsafe.Pointer(p.Native()))
	_arg1 = (*C.GtkCellAccessible)(unsafe.Pointer(cell.Native()))

	_cret = C.gtk_cell_accessible_parent_grab_focus(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}
