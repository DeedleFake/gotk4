// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_color_selection_get_type()), F: marshalColorSelection},
	})
}

// ColorSelectionOverrider contains methods that are overridable.
//
// As of right now, interface overriding and subclassing is not supported
// yet, so the interface currently has no use.
type ColorSelectionOverrider interface {
	ColorChanged()
}

type ColorSelection interface {
	gextras.Objector

	// CurrentAlpha returns the current alpha value.
	CurrentAlpha() uint16
	// HasOpacityControl determines whether the colorsel has an opacity control.
	HasOpacityControl() bool
	// HasPalette determines whether the color selector has a color palette.
	HasPalette() bool
	// PreviousAlpha returns the previous alpha value.
	PreviousAlpha() uint16
	// IsAdjusting gets the current state of the @colorsel.
	IsAdjusting() bool
	// SetCurrentAlpha sets the current opacity to be @alpha.
	//
	// The first time this is called, it will also set the original opacity to
	// be @alpha too.
	SetCurrentAlpha(alpha uint16)
	// SetCurrentColor sets the current color to be @color.
	//
	// The first time this is called, it will also set the original color to be
	// @color too.
	//
	// Deprecated: since version 3.4.
	SetCurrentColor(color *gdk.Color)
	// SetCurrentRGBA sets the current color to be @rgba.
	//
	// The first time this is called, it will also set the original color to be
	// @rgba too.
	SetCurrentRGBA(rgba *gdk.RGBA)
	// SetHasOpacityControl sets the @colorsel to use or not use opacity.
	SetHasOpacityControl(hasOpacity bool)
	// SetHasPalette shows and hides the palette based upon the value of
	// @has_palette.
	SetHasPalette(hasPalette bool)
	// SetPreviousAlpha sets the “previous” alpha to be @alpha.
	//
	// This function should be called with some hesitations, as it might seem
	// confusing to have that alpha change.
	SetPreviousAlpha(alpha uint16)
	// SetPreviousColor sets the “previous” color to be @color.
	//
	// This function should be called with some hesitations, as it might seem
	// confusing to have that color change. Calling
	// gtk_color_selection_set_current_color() will also set this color the
	// first time it is called.
	//
	// Deprecated: since version 3.4.
	SetPreviousColor(color *gdk.Color)
	// SetPreviousRGBA sets the “previous” color to be @rgba.
	//
	// This function should be called with some hesitations, as it might seem
	// confusing to have that color change. Calling
	// gtk_color_selection_set_current_rgba() will also set this color the first
	// time it is called.
	SetPreviousRGBA(rgba *gdk.RGBA)
}

// ColorSelectionClass implements the ColorSelection interface.
type ColorSelectionClass struct {
	*externglib.Object
	BoxClass
	BuildableInterface
	OrientableInterface
}

var _ ColorSelection = (*ColorSelectionClass)(nil)

func wrapColorSelection(obj *externglib.Object) ColorSelection {
	return &ColorSelectionClass{
		Object: obj,
		BoxClass: BoxClass{
			Object: obj,
			ContainerClass: ContainerClass{
				Object: obj,
				WidgetClass: WidgetClass{
					Object:           obj,
					InitiallyUnowned: externglib.InitiallyUnowned{Object: obj},
					BuildableInterface: BuildableInterface{
						Object: obj,
					},
				},
				BuildableInterface: BuildableInterface{
					Object: obj,
				},
			},
			BuildableInterface: BuildableInterface{
				Object: obj,
			},
			OrientableInterface: OrientableInterface{
				Object: obj,
			},
		},
		BuildableInterface: BuildableInterface{
			Object: obj,
		},
		OrientableInterface: OrientableInterface{
			Object: obj,
		},
	}
}

func marshalColorSelection(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapColorSelection(obj), nil
}

// NewColorSelection creates a new GtkColorSelection.
func NewColorSelection() ColorSelection {
	var _cret *C.GtkWidget // in

	_cret = C.gtk_color_selection_new()

	var _colorSelection ColorSelection // out

	_colorSelection = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(ColorSelection)

	return _colorSelection
}

// CurrentAlpha returns the current alpha value.
func (c *ColorSelectionClass) CurrentAlpha() uint16 {
	var _arg0 *C.GtkColorSelection // out
	var _cret C.guint16            // in

	_arg0 = (*C.GtkColorSelection)(unsafe.Pointer(c.Native()))

	_cret = C.gtk_color_selection_get_current_alpha(_arg0)

	var _guint16 uint16 // out

	_guint16 = uint16(_cret)

	return _guint16
}

// HasOpacityControl determines whether the colorsel has an opacity control.
func (c *ColorSelectionClass) HasOpacityControl() bool {
	var _arg0 *C.GtkColorSelection // out
	var _cret C.gboolean           // in

	_arg0 = (*C.GtkColorSelection)(unsafe.Pointer(c.Native()))

	_cret = C.gtk_color_selection_get_has_opacity_control(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// HasPalette determines whether the color selector has a color palette.
func (c *ColorSelectionClass) HasPalette() bool {
	var _arg0 *C.GtkColorSelection // out
	var _cret C.gboolean           // in

	_arg0 = (*C.GtkColorSelection)(unsafe.Pointer(c.Native()))

	_cret = C.gtk_color_selection_get_has_palette(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// PreviousAlpha returns the previous alpha value.
func (c *ColorSelectionClass) PreviousAlpha() uint16 {
	var _arg0 *C.GtkColorSelection // out
	var _cret C.guint16            // in

	_arg0 = (*C.GtkColorSelection)(unsafe.Pointer(c.Native()))

	_cret = C.gtk_color_selection_get_previous_alpha(_arg0)

	var _guint16 uint16 // out

	_guint16 = uint16(_cret)

	return _guint16
}

// IsAdjusting gets the current state of the @colorsel.
func (c *ColorSelectionClass) IsAdjusting() bool {
	var _arg0 *C.GtkColorSelection // out
	var _cret C.gboolean           // in

	_arg0 = (*C.GtkColorSelection)(unsafe.Pointer(c.Native()))

	_cret = C.gtk_color_selection_is_adjusting(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetCurrentAlpha sets the current opacity to be @alpha.
//
// The first time this is called, it will also set the original opacity to be
// @alpha too.
func (c *ColorSelectionClass) SetCurrentAlpha(alpha uint16) {
	var _arg0 *C.GtkColorSelection // out
	var _arg1 C.guint16            // out

	_arg0 = (*C.GtkColorSelection)(unsafe.Pointer(c.Native()))
	_arg1 = C.guint16(alpha)

	C.gtk_color_selection_set_current_alpha(_arg0, _arg1)
}

// SetCurrentColor sets the current color to be @color.
//
// The first time this is called, it will also set the original color to be
// @color too.
//
// Deprecated: since version 3.4.
func (c *ColorSelectionClass) SetCurrentColor(color *gdk.Color) {
	var _arg0 *C.GtkColorSelection // out
	var _arg1 *C.GdkColor          // out

	_arg0 = (*C.GtkColorSelection)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.GdkColor)(unsafe.Pointer(color))

	C.gtk_color_selection_set_current_color(_arg0, _arg1)
}

// SetCurrentRGBA sets the current color to be @rgba.
//
// The first time this is called, it will also set the original color to be
// @rgba too.
func (c *ColorSelectionClass) SetCurrentRGBA(rgba *gdk.RGBA) {
	var _arg0 *C.GtkColorSelection // out
	var _arg1 *C.GdkRGBA           // out

	_arg0 = (*C.GtkColorSelection)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.GdkRGBA)(unsafe.Pointer(rgba))

	C.gtk_color_selection_set_current_rgba(_arg0, _arg1)
}

// SetHasOpacityControl sets the @colorsel to use or not use opacity.
func (c *ColorSelectionClass) SetHasOpacityControl(hasOpacity bool) {
	var _arg0 *C.GtkColorSelection // out
	var _arg1 C.gboolean           // out

	_arg0 = (*C.GtkColorSelection)(unsafe.Pointer(c.Native()))
	if hasOpacity {
		_arg1 = C.TRUE
	}

	C.gtk_color_selection_set_has_opacity_control(_arg0, _arg1)
}

// SetHasPalette shows and hides the palette based upon the value of
// @has_palette.
func (c *ColorSelectionClass) SetHasPalette(hasPalette bool) {
	var _arg0 *C.GtkColorSelection // out
	var _arg1 C.gboolean           // out

	_arg0 = (*C.GtkColorSelection)(unsafe.Pointer(c.Native()))
	if hasPalette {
		_arg1 = C.TRUE
	}

	C.gtk_color_selection_set_has_palette(_arg0, _arg1)
}

// SetPreviousAlpha sets the “previous” alpha to be @alpha.
//
// This function should be called with some hesitations, as it might seem
// confusing to have that alpha change.
func (c *ColorSelectionClass) SetPreviousAlpha(alpha uint16) {
	var _arg0 *C.GtkColorSelection // out
	var _arg1 C.guint16            // out

	_arg0 = (*C.GtkColorSelection)(unsafe.Pointer(c.Native()))
	_arg1 = C.guint16(alpha)

	C.gtk_color_selection_set_previous_alpha(_arg0, _arg1)
}

// SetPreviousColor sets the “previous” color to be @color.
//
// This function should be called with some hesitations, as it might seem
// confusing to have that color change. Calling
// gtk_color_selection_set_current_color() will also set this color the first
// time it is called.
//
// Deprecated: since version 3.4.
func (c *ColorSelectionClass) SetPreviousColor(color *gdk.Color) {
	var _arg0 *C.GtkColorSelection // out
	var _arg1 *C.GdkColor          // out

	_arg0 = (*C.GtkColorSelection)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.GdkColor)(unsafe.Pointer(color))

	C.gtk_color_selection_set_previous_color(_arg0, _arg1)
}

// SetPreviousRGBA sets the “previous” color to be @rgba.
//
// This function should be called with some hesitations, as it might seem
// confusing to have that color change. Calling
// gtk_color_selection_set_current_rgba() will also set this color the first
// time it is called.
func (c *ColorSelectionClass) SetPreviousRGBA(rgba *gdk.RGBA) {
	var _arg0 *C.GtkColorSelection // out
	var _arg1 *C.GdkRGBA           // out

	_arg0 = (*C.GtkColorSelection)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.GdkRGBA)(unsafe.Pointer(rgba))

	C.gtk_color_selection_set_previous_rgba(_arg0, _arg1)
}
