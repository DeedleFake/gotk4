// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/box"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <stdbool.h>
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

// BindingEntryAddSignalFromString parses a signal description from @signal_desc
// and incorporates it into @binding_set.
//
// Signal descriptions may either bind a key combination to one or more signals:
//
//    bind "key" {
//      "signalname" (param, ...)
//      ...
//    }
//
// Or they may also unbind a key combination:
//
//    unbind "key"
//
// Key combinations must be in a format that can be parsed by
// gtk_accelerator_parse().
func BindingEntryAddSignalFromString(bindingSet *BindingSet, signalDesc string) glib.TokenType {
	var arg1 *C.GtkBindingSet
	var arg2 *C.gchar

	arg1 = (*C.GtkBindingSet)(bindingSet.Native())
	arg2 = (*C.gchar)(C.CString(signalDesc))
	defer C.free(unsafe.Pointer(arg2))

	ret := C.gtk_binding_entry_add_signal_from_string(arg1, arg2)

	var ret0 glib.TokenType

	ret0 = glib.TokenType(ret)

	return ret0
}

// BindingEntryAddSignall: override or install a new key binding for @keyval
// with @modifiers on @binding_set.
func BindingEntryAddSignall(bindingSet *BindingSet, keyval uint, modifiers gdk.ModifierType, signalName string, bindingArgs *glib.SList) {
	var arg1 *C.GtkBindingSet
	var arg2 C.guint
	var arg3 C.GdkModifierType
	var arg4 *C.gchar
	var arg5 *C.GSList

	arg1 = (*C.GtkBindingSet)(bindingSet.Native())
	arg2 = C.guint(keyval)
	arg3 = (C.GdkModifierType)(modifiers)
	arg4 = (*C.gchar)(C.CString(signalName))
	defer C.free(unsafe.Pointer(arg4))
	arg5 = (*C.GSList)(bindingArgs.Native())

	C.gtk_binding_entry_add_signall(arg1, arg2, arg3, arg4, arg5)
}

// BindingEntryRemove: remove a binding previously installed via
// gtk_binding_entry_add_signal() on @binding_set.
func BindingEntryRemove(bindingSet *BindingSet, keyval uint, modifiers gdk.ModifierType) {
	var arg1 *C.GtkBindingSet
	var arg2 C.guint
	var arg3 C.GdkModifierType

	arg1 = (*C.GtkBindingSet)(bindingSet.Native())
	arg2 = C.guint(keyval)
	arg3 = (C.GdkModifierType)(modifiers)

	C.gtk_binding_entry_remove(arg1, arg2, arg3)
}

// BindingEntrySkip: install a binding on @binding_set which causes key lookups
// to be aborted, to prevent bindings from lower priority sets to be activated.
func BindingEntrySkip(bindingSet *BindingSet, keyval uint, modifiers gdk.ModifierType) {
	var arg1 *C.GtkBindingSet
	var arg2 C.guint
	var arg3 C.GdkModifierType

	arg1 = (*C.GtkBindingSet)(bindingSet.Native())
	arg2 = C.guint(keyval)
	arg3 = (C.GdkModifierType)(modifiers)

	C.gtk_binding_entry_skip(arg1, arg2, arg3)
}

// BindingSetByClass: this function returns the binding set named after the type
// name of the passed in class structure. New binding sets are created on demand
// by this function.
func BindingSetByClass(objectClass interface{}) *BindingSet {
	var arg1 C.gpointer

	arg1 = C.gpointer(box.Assign(objectClass))

	ret := C.gtk_binding_set_by_class(arg1)

	var ret0 *BindingSet

	{
		ret0 = WrapBindingSet(unsafe.Pointer(ret))
	}

	return ret0
}

// BindingSetFind: find a binding set by its globally unique name.
//
// The @set_name can either be a name used for gtk_binding_set_new() or the type
// name of a class used in gtk_binding_set_by_class().
func BindingSetFind(setName string) *BindingSet {
	var arg1 *C.gchar

	arg1 = (*C.gchar)(C.CString(setName))
	defer C.free(unsafe.Pointer(arg1))

	ret := C.gtk_binding_set_find(arg1)

	var ret0 *BindingSet

	{
		ret0 = WrapBindingSet(unsafe.Pointer(ret))
	}

	return ret0
}

// NewBindingSet: GTK+ maintains a global list of binding sets. Each binding set
// has a unique name which needs to be specified upon creation.
func NewBindingSet(setName string) *BindingSet {
	var arg1 *C.gchar

	arg1 = (*C.gchar)(C.CString(setName))
	defer C.free(unsafe.Pointer(arg1))

	ret := C.gtk_binding_set_new(arg1)

	var ret0 *BindingSet

	{
		ret0 = WrapBindingSet(unsafe.Pointer(ret))
	}

	return ret0
}

// BindingsActivate: find a key binding matching @keyval and @modifiers and
// activate the binding on @object.
func BindingsActivate(object gextras.Objector, keyval uint, modifiers gdk.ModifierType) bool {
	var arg1 *C.GObject
	var arg2 C.guint
	var arg3 C.GdkModifierType

	arg1 = (*C.GObject)(object.Native())
	arg2 = C.guint(keyval)
	arg3 = (C.GdkModifierType)(modifiers)

	ret := C.gtk_bindings_activate(arg1, arg2, arg3)

	var ret0 bool

	ret0 = C.bool(ret) != C.false

	return ret0
}

// BindingsActivateEvent looks up key bindings for @object to find one matching
// @event, and if one was found, activate it.
func BindingsActivateEvent(object gextras.Objector, event *gdk.EventKey) bool {
	var arg1 *C.GObject
	var arg2 *C.GdkEventKey

	arg1 = (*C.GObject)(object.Native())
	arg2 = (*C.GdkEventKey)(event.Native())

	ret := C.gtk_bindings_activate_event(arg1, arg2)

	var ret0 bool

	ret0 = C.bool(ret) != C.false

	return ret0
}

// BindingArg: a BindingArg holds the data associated with an argument for a key
// binding signal emission as stored in BindingSignal.
type BindingArg struct {
	native C.GtkBindingArg
}

// WrapBindingArg wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapBindingArg(ptr unsafe.Pointer) *BindingArg {
	if ptr == nil {
		return nil
	}

	return (*BindingArg)(ptr)
}

func marshalBindingArg(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapBindingArg(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (b *BindingArg) Native() unsafe.Pointer {
	return unsafe.Pointer(&b.native)
}

// ArgType gets the field inside the struct.
func (b *BindingArg) ArgType() externglib.Type {
	var ret externglib.Type
	ret = externglib.Type(b.native.arg_type)
	return ret
}

// BindingEntry: each key binding element of a binding sets binding list is
// represented by a GtkBindingEntry.
type BindingEntry struct {
	native C.GtkBindingEntry
}

// WrapBindingEntry wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapBindingEntry(ptr unsafe.Pointer) *BindingEntry {
	if ptr == nil {
		return nil
	}

	return (*BindingEntry)(ptr)
}

func marshalBindingEntry(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapBindingEntry(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (b *BindingEntry) Native() unsafe.Pointer {
	return unsafe.Pointer(&b.native)
}

// Keyval gets the field inside the struct.
func (b *BindingEntry) Keyval() uint {
	var ret uint
	ret = uint(b.native.keyval)
	return ret
}

// Modifiers gets the field inside the struct.
func (b *BindingEntry) Modifiers() gdk.ModifierType {
	var ret gdk.ModifierType
	ret = gdk.ModifierType(b.native.modifiers)
	return ret
}

// BindingSet gets the field inside the struct.
func (b *BindingEntry) BindingSet() *BindingSet {
	var ret *BindingSet
	{
		ret = WrapBindingSet(unsafe.Pointer(b.native.binding_set))
	}
	return ret
}

// SetNext gets the field inside the struct.
func (b *BindingEntry) SetNext() *BindingEntry {
	var ret *BindingEntry
	{
		ret = WrapBindingEntry(unsafe.Pointer(b.native.set_next))
	}
	return ret
}

// HashNext gets the field inside the struct.
func (b *BindingEntry) HashNext() *BindingEntry {
	var ret *BindingEntry
	{
		ret = WrapBindingEntry(unsafe.Pointer(b.native.hash_next))
	}
	return ret
}

// Signals gets the field inside the struct.
func (b *BindingEntry) Signals() *BindingSignal {
	var ret *BindingSignal
	{
		ret = WrapBindingSignal(unsafe.Pointer(b.native.signals))
	}
	return ret
}

// BindingSet: a binding set maintains a list of activatable key bindings. A
// single binding set can match multiple types of widgets. Similar to style
// contexts, can be matched by any information contained in a widgets
// WidgetPath. When a binding within a set is matched upon activation, an action
// signal is emitted on the target widget to carry out the actual activation.
type BindingSet struct {
	native C.GtkBindingSet
}

// WrapBindingSet wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapBindingSet(ptr unsafe.Pointer) *BindingSet {
	if ptr == nil {
		return nil
	}

	return (*BindingSet)(ptr)
}

func marshalBindingSet(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapBindingSet(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (b *BindingSet) Native() unsafe.Pointer {
	return unsafe.Pointer(&b.native)
}

// SetName gets the field inside the struct.
func (b *BindingSet) SetName() string {
	var ret string
	ret = C.GoString(b.native.set_name)
	return ret
}

// Priority gets the field inside the struct.
func (b *BindingSet) Priority() int {
	var ret int
	ret = int(b.native.priority)
	return ret
}

// WidgetPathPspecs gets the field inside the struct.
func (b *BindingSet) WidgetPathPspecs() *glib.SList {
	var ret *glib.SList
	{
		ret = glib.WrapSList(unsafe.Pointer(b.native.widget_path_pspecs))
	}
	return ret
}

// WidgetClassPspecs gets the field inside the struct.
func (b *BindingSet) WidgetClassPspecs() *glib.SList {
	var ret *glib.SList
	{
		ret = glib.WrapSList(unsafe.Pointer(b.native.widget_class_pspecs))
	}
	return ret
}

// ClassBranchPspecs gets the field inside the struct.
func (b *BindingSet) ClassBranchPspecs() *glib.SList {
	var ret *glib.SList
	{
		ret = glib.WrapSList(unsafe.Pointer(b.native.class_branch_pspecs))
	}
	return ret
}

// Entries gets the field inside the struct.
func (b *BindingSet) Entries() *BindingEntry {
	var ret *BindingEntry
	{
		ret = WrapBindingEntry(unsafe.Pointer(b.native.entries))
	}
	return ret
}

// Current gets the field inside the struct.
func (b *BindingSet) Current() *BindingEntry {
	var ret *BindingEntry
	{
		ret = WrapBindingEntry(unsafe.Pointer(b.native.current))
	}
	return ret
}

// Activate: find a key binding matching @keyval and @modifiers within
// @binding_set and activate the binding on @object.
func (b *BindingSet) Activate(keyval uint, modifiers gdk.ModifierType, object gextras.Objector) bool {
	var arg0 *C.GtkBindingSet
	var arg1 C.guint
	var arg2 C.GdkModifierType
	var arg3 *C.GObject

	arg0 = (*C.GtkBindingSet)(b.Native())
	arg1 = C.guint(keyval)
	arg2 = (C.GdkModifierType)(modifiers)
	arg3 = (*C.GObject)(object.Native())

	ret := C.gtk_binding_set_activate(arg0, arg1, arg2, arg3)

	var ret0 bool

	ret0 = C.bool(ret) != C.false

	return ret0
}

// AddPath: this function was used internally by the GtkRC parsing mechanism to
// assign match patterns to BindingSet structures.
//
// In GTK+ 3, these match patterns are unused.
func (b *BindingSet) AddPath(pathType PathType, pathPattern string, priority PathPriorityType) {
	var arg0 *C.GtkBindingSet
	var arg1 C.GtkPathType
	var arg2 *C.gchar
	var arg3 C.GtkPathPriorityType

	arg0 = (*C.GtkBindingSet)(b.Native())
	arg1 = (C.GtkPathType)(pathType)
	arg2 = (*C.gchar)(C.CString(pathPattern))
	defer C.free(unsafe.Pointer(arg2))
	arg3 = (C.GtkPathPriorityType)(priority)

	C.gtk_binding_set_add_path(arg0, arg1, arg2, arg3)
}

// BindingSignal: a GtkBindingSignal stores the necessary information to
// activate a widget in response to a key press via a signal emission.
type BindingSignal struct {
	native C.GtkBindingSignal
}

// WrapBindingSignal wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapBindingSignal(ptr unsafe.Pointer) *BindingSignal {
	if ptr == nil {
		return nil
	}

	return (*BindingSignal)(ptr)
}

func marshalBindingSignal(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapBindingSignal(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (b *BindingSignal) Native() unsafe.Pointer {
	return unsafe.Pointer(&b.native)
}

// Next gets the field inside the struct.
func (b *BindingSignal) Next() *BindingSignal {
	var ret *BindingSignal
	{
		ret = WrapBindingSignal(unsafe.Pointer(b.native.next))
	}
	return ret
}

// SignalName gets the field inside the struct.
func (b *BindingSignal) SignalName() string {
	var ret string
	ret = C.GoString(b.native.signal_name)
	return ret
}

// NArgs gets the field inside the struct.
func (b *BindingSignal) NArgs() uint {
	var ret uint
	ret = uint(b.native.n_args)
	return ret
}

// Args gets the field inside the struct.
func (b *BindingSignal) Args() []BindingArg {
	var ret []BindingArg
	{
		ret = make([]BindingArg, b.native.n_args)
		for i := 0; i < uintptr(b.native.n_args); i++ {
			src := (C.GtkBindingArg)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + i))
			{
				ret[i] = WrapBindingArg(unsafe.Pointer(src))
			}
		}
	}
	return ret
}
