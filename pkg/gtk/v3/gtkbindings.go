// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: glib-2.0 gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

// BindingArg: a BindingArg holds the data associated with an argument for a key
// binding signal emission as stored in BindingSignal.
type BindingArg struct {
	native C.GtkBindingArg
}

// WrapBindingArg wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapBindingArg(ptr unsafe.Pointer) *BindingArg {
	if ptr == nil {
		return nil
	}

	return (*BindingArg)(ptr)
}

// Native returns the underlying C source pointer.
func (b *BindingArg) Native() unsafe.Pointer {
	return unsafe.Pointer(&b.native)
}

// ArgType gets the field inside the struct.
func (b *BindingArg) ArgType() externglib.Type {
	var v externglib.Type // out
	v = externglib.Type(b.native.arg_type)
	return v
}

// BindingEntry: each key binding element of a binding sets binding list is
// represented by a GtkBindingEntry.
type BindingEntry struct {
	native C.GtkBindingEntry
}

// WrapBindingEntry wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapBindingEntry(ptr unsafe.Pointer) *BindingEntry {
	if ptr == nil {
		return nil
	}

	return (*BindingEntry)(ptr)
}

// Native returns the underlying C source pointer.
func (b *BindingEntry) Native() unsafe.Pointer {
	return unsafe.Pointer(&b.native)
}

// Keyval gets the field inside the struct.
func (b *BindingEntry) Keyval() uint {
	var v uint // out
	v = (uint)(b.native.keyval)
	return v
}

// SetNext gets the field inside the struct.
func (b *BindingEntry) SetNext() *BindingEntry {
	var v *BindingEntry // out
	v = WrapBindingEntry(unsafe.Pointer(b.native.set_next))
	return v
}

// HashNext gets the field inside the struct.
func (b *BindingEntry) HashNext() *BindingEntry {
	var v *BindingEntry // out
	v = WrapBindingEntry(unsafe.Pointer(b.native.hash_next))
	return v
}

// Signals gets the field inside the struct.
func (b *BindingEntry) Signals() *BindingSignal {
	var v *BindingSignal // out
	v = WrapBindingSignal(unsafe.Pointer(b.native.signals))
	return v
}

// BindingSignal: a GtkBindingSignal stores the necessary information to
// activate a widget in response to a key press via a signal emission.
type BindingSignal struct {
	native C.GtkBindingSignal
}

// WrapBindingSignal wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapBindingSignal(ptr unsafe.Pointer) *BindingSignal {
	if ptr == nil {
		return nil
	}

	return (*BindingSignal)(ptr)
}

// Native returns the underlying C source pointer.
func (b *BindingSignal) Native() unsafe.Pointer {
	return unsafe.Pointer(&b.native)
}

// Next gets the field inside the struct.
func (b *BindingSignal) Next() *BindingSignal {
	var v *BindingSignal // out
	v = WrapBindingSignal(unsafe.Pointer(b.native.next))
	return v
}

// SignalName gets the field inside the struct.
func (b *BindingSignal) SignalName() string {
	var v string // out
	v = C.GoString(b.native.signal_name)
	return v
}

// NArgs gets the field inside the struct.
func (b *BindingSignal) NArgs() uint {
	var v uint // out
	v = (uint)(b.native.n_args)
	return v
}
