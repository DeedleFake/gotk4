// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
	"github.com/diamondburned/gotk4/pkg/gdkpixbuf/v2"
	"github.com/diamondburned/gotk4/pkg/pango"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_entry_icon_position_get_type()), F: marshalEntryIconPosition},
		{T: externglib.Type(C.gtk_entry_get_type()), F: marshalEntry},
	})
}

// EntryIconPosition specifies the side of the entry at which an icon is placed.
type EntryIconPosition int

const (
	// primary: at the beginning of the entry (depending on the text direction).
	EntryIconPositionPrimary EntryIconPosition = 0
	// secondary: at the end of the entry (depending on the text direction).
	EntryIconPositionSecondary EntryIconPosition = 1
)

func marshalEntryIconPosition(p uintptr) (interface{}, error) {
	return EntryIconPosition(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// Entry: the Entry widget is a single line text entry widget. A fairly large
// set of key bindings are supported by default. If the entered text is longer
// than the allocation of the widget, the widget will scroll so that the cursor
// position is visible.
//
// When using an entry for passwords and other sensitive information, it can be
// put into “password mode” using gtk_entry_set_visibility(). In this mode,
// entered text is displayed using a “invisible” character. By default, GTK+
// picks the best invisible character that is available in the current font, but
// it can be changed with gtk_entry_set_invisible_char(). Since 2.16, GTK+
// displays a warning when Caps Lock or input methods might interfere with
// entering text in a password entry. The warning can be turned off with the
// Entry:caps-lock-warning property.
//
// Since 2.16, GtkEntry has the ability to display progress or activity
// information behind the text. To make an entry display such information, use
// gtk_entry_set_progress_fraction() or gtk_entry_set_progress_pulse_step().
//
// Additionally, GtkEntry can show icons at either side of the entry. These
// icons can be activatable by clicking, can be set up as drag source and can
// have tooltips. To add an icon, use gtk_entry_set_icon_from_gicon() or one of
// the various other functions that set an icon from a stock id, an icon name or
// a pixbuf. To trigger an action when the user clicks an icon, connect to the
// Entry::icon-press signal. To allow DND operations from an icon, use
// gtk_entry_set_icon_drag_source(). To set a tooltip on an icon, use
// gtk_entry_set_icon_tooltip_text() or the corresponding function for markup.
//
// Note that functionality or information that is only available by clicking on
// an icon in an entry may not be accessible at all to users which are not able
// to use a mouse or other pointing device. It is therefore recommended that any
// such functionality should also be available by other means, e.g. via the
// context menu of the entry.
//
// CSS nodes
//
//    entry[.read-only][.flat][.warning][.error]
//    ├── image.left
//    ├── image.right
//    ├── undershoot.left
//    ├── undershoot.right
//    ├── [selection]
//    ├── [progress[.pulse]]
//    ╰── [window.popup]
//
// GtkEntry has a main node with the name entry. Depending on the properties of
// the entry, the style classes .read-only and .flat may appear. The style
// classes .warning and .error may also be used with entries.
//
// When the entry shows icons, it adds subnodes with the name image and the
// style class .left or .right, depending on where the icon appears.
//
// When the entry has a selection, it adds a subnode with the name selection.
//
// When the entry shows progress, it adds a subnode with the name progress. The
// node has the style class .pulse when the shown progress is pulsing.
//
// The CSS node for a context menu is added as a subnode below entry as well.
//
// The undershoot nodes are used to draw the underflow indication when content
// is scrolled out of view. These nodes get the .left and .right style classes
// added depending on where the indication is drawn.
//
// When touch is used and touch selection handles are shown, they are using CSS
// nodes with name cursor-handle. They get the .top or .bottom style class
// depending on where they are shown in relation to the selection. If there is
// just a single handle for the text cursor, it gets the style class
// .insertion-cursor.
type Entry interface {
	Widget

	// AsBuildable casts the class to the Buildable interface.
	AsBuildable() Buildable
	// AsCellEditable casts the class to the CellEditable interface.
	AsCellEditable() CellEditable
	// AsEditable casts the class to the Editable interface.
	AsEditable() Editable

	// ActivatesDefault retrieves the value set by
	// gtk_entry_set_activates_default().
	ActivatesDefault() bool
	// Alignment gets the value set by gtk_entry_set_alignment().
	Alignment() float32
	// Attributes gets the attribute list that was set on the entry using
	// gtk_entry_set_attributes(), if any.
	Attributes() pango.AttrList
	// Buffer: get the EntryBuffer object which holds the text for this widget.
	Buffer() EntryBuffer
	// Completion returns the auxiliary completion object currently in use by
	// @entry.
	Completion() EntryCompletion
	// CurrentIconDragSource returns the index of the icon which is the source
	// of the current DND operation, or -1.
	//
	// This function is meant to be used in a Widget::drag-data-get callback.
	CurrentIconDragSource() int
	// CursorHAdjustment retrieves the horizontal cursor adjustment for the
	// entry. See gtk_entry_set_cursor_hadjustment().
	CursorHAdjustment() Adjustment
	// HasFrame gets the value set by gtk_entry_set_has_frame().
	HasFrame() bool
	// IconActivatable returns whether the icon is activatable.
	IconActivatable(iconPos EntryIconPosition) bool
	// IconArea gets the area where entry’s icon at @icon_pos is drawn. This
	// function is useful when drawing something to the entry in a draw
	// callback.
	//
	// If the entry is not realized or has no icon at the given position,
	// @icon_area is filled with zeros. Otherwise, @icon_area will be filled
	// with the icon’s allocation, relative to @entry’s allocation.
	//
	// See also gtk_entry_get_text_area()
	IconArea(iconPos EntryIconPosition) gdk.Rectangle
	// IconAtPos finds the icon at the given position and return its index. The
	// position’s coordinates are relative to the @entry’s top left corner. If
	// @x, @y doesn’t lie inside an icon, -1 is returned. This function is
	// intended for use in a Widget::query-tooltip signal handler.
	IconAtPos(x int, y int) int
	// IconName retrieves the icon name used for the icon, or nil if there is no
	// icon or if the icon was set by some other method (e.g., by pixbuf, stock
	// or gicon).
	IconName(iconPos EntryIconPosition) string
	// IconPixbuf retrieves the image used for the icon.
	//
	// Unlike the other methods of setting and getting icon data, this method
	// will work regardless of whether the icon was set using a Pixbuf, a
	// #GIcon, a stock item, or an icon name.
	IconPixbuf(iconPos EntryIconPosition) gdkpixbuf.Pixbuf
	// IconSensitive returns whether the icon appears sensitive or insensitive.
	IconSensitive(iconPos EntryIconPosition) bool
	// IconStock retrieves the stock id used for the icon, or nil if there is no
	// icon or if the icon was set by some other method (e.g., by pixbuf, icon
	// name or gicon).
	//
	// Deprecated: since version 3.10.
	IconStock(iconPos EntryIconPosition) string
	// IconStorageType gets the type of representation being used by the icon to
	// store image data. If the icon has no image data, the return value will be
	// GTK_IMAGE_EMPTY.
	IconStorageType(iconPos EntryIconPosition) ImageType
	// IconTooltipMarkup gets the contents of the tooltip on the icon at the
	// specified position in @entry.
	IconTooltipMarkup(iconPos EntryIconPosition) string
	// IconTooltipText gets the contents of the tooltip on the icon at the
	// specified position in @entry.
	IconTooltipText(iconPos EntryIconPosition) string
	// InnerBorder: this function returns the entry’s Entry:inner-border
	// property. See gtk_entry_set_inner_border() for more information.
	//
	// Deprecated: since version 3.4.
	InnerBorder() Border
	// InputHints gets the value of the Entry:input-hints property.
	InputHints() InputHints
	// InputPurpose gets the value of the Entry:input-purpose property.
	InputPurpose() InputPurpose
	// InvisibleChar retrieves the character displayed in place of the real
	// characters for entries with visibility set to false. See
	// gtk_entry_set_invisible_char().
	InvisibleChar() uint32
	// Layout gets the Layout used to display the entry. The layout is useful to
	// e.g. convert text positions to pixel positions, in combination with
	// gtk_entry_get_layout_offsets(). The returned layout is owned by the entry
	// and must not be modified or freed by the caller.
	//
	// Keep in mind that the layout text may contain a preedit string, so
	// gtk_entry_layout_index_to_text_index() and
	// gtk_entry_text_index_to_layout_index() are needed to convert byte indices
	// in the layout to byte indices in the entry contents.
	Layout() pango.Layout
	// LayoutOffsets obtains the position of the Layout used to render text in
	// the entry, in widget coordinates. Useful if you want to line up the text
	// in an entry with some other text, e.g. when using the entry to implement
	// editable cells in a sheet widget.
	//
	// Also useful to convert mouse events into coordinates inside the Layout,
	// e.g. to take some action if some part of the entry text is clicked.
	//
	// Note that as the user scrolls around in the entry the offsets will
	// change; you’ll need to connect to the “notify::scroll-offset” signal to
	// track this. Remember when using the Layout functions you need to convert
	// to and from pixels using PANGO_PIXELS() or NGO_SCALE.
	//
	// Keep in mind that the layout text may contain a preedit string, so
	// gtk_entry_layout_index_to_text_index() and
	// gtk_entry_text_index_to_layout_index() are needed to convert byte indices
	// in the layout to byte indices in the entry contents.
	LayoutOffsets() (x int, y int)
	// MaxLength retrieves the maximum allowed length of the text in @entry. See
	// gtk_entry_set_max_length().
	//
	// This is equivalent to getting @entry's EntryBuffer and calling
	// gtk_entry_buffer_get_max_length() on it.
	MaxLength() int
	// MaxWidthChars retrieves the desired maximum width of @entry, in
	// characters. See gtk_entry_set_max_width_chars().
	MaxWidthChars() int
	// OverwriteMode gets the value set by gtk_entry_set_overwrite_mode().
	OverwriteMode() bool
	// PlaceholderText retrieves the text that will be displayed when @entry is
	// empty and unfocused
	PlaceholderText() string
	// ProgressFraction returns the current fraction of the task that’s been
	// completed. See gtk_entry_set_progress_fraction().
	ProgressFraction() float64
	// ProgressPulseStep retrieves the pulse step set with
	// gtk_entry_set_progress_pulse_step().
	ProgressPulseStep() float64
	// Tabs gets the tabstops that were set on the entry using
	// gtk_entry_set_tabs(), if any.
	Tabs() pango.TabArray
	// Text retrieves the contents of the entry widget. See also
	// gtk_editable_get_chars().
	//
	// This is equivalent to getting @entry's EntryBuffer and calling
	// gtk_entry_buffer_get_text() on it.
	Text() string
	// TextArea gets the area where the entry’s text is drawn. This function is
	// useful when drawing something to the entry in a draw callback.
	//
	// If the entry is not realized, @text_area is filled with zeros.
	//
	// See also gtk_entry_get_icon_area().
	TextArea() gdk.Rectangle
	// TextLength retrieves the current length of the text in @entry.
	//
	// This is equivalent to getting @entry's EntryBuffer and calling
	// gtk_entry_buffer_get_length() on it.
	TextLength() uint16
	// Visibility retrieves whether the text in @entry is visible. See
	// gtk_entry_set_visibility().
	Visibility() bool
	// WidthChars gets the value set by gtk_entry_set_width_chars().
	WidthChars() int
	// GrabFocusWithoutSelectingEntry causes @entry to have keyboard focus.
	//
	// It behaves like gtk_widget_grab_focus(), except that it doesn't select
	// the contents of the entry. You only want to call this on some special
	// entries which the user usually doesn't want to replace all text in, such
	// as search-as-you-type entries.
	GrabFocusWithoutSelectingEntry()
	// ImContextFilterKeypressEntry: allow the Entry input method to internally
	// handle key press and release events. If this function returns true, then
	// no further processing should be done for this key event. See
	// gtk_im_context_filter_keypress().
	//
	// Note that you are expected to call this function from your handler when
	// overriding key event handling. This is needed in the case when you need
	// to insert your own key handling between the input method and the default
	// key event handling of the Entry. See gtk_text_view_reset_im_context() for
	// an example of use.
	ImContextFilterKeypressEntry(event gdk.EventKey) bool
	// LayoutIndexToTextIndexEntry converts from a position in the entry’s
	// Layout (returned by gtk_entry_get_layout()) to a position in the entry
	// contents (returned by gtk_entry_get_text()).
	LayoutIndexToTextIndexEntry(layoutIndex int) int
	// ProgressPulseEntry indicates that some progress is made, but you don’t
	// know how much. Causes the entry’s progress indicator to enter “activity
	// mode,” where a block bounces back and forth. Each call to
	// gtk_entry_progress_pulse() causes the block to move by a little bit (the
	// amount of movement per pulse is determined by
	// gtk_entry_set_progress_pulse_step()).
	ProgressPulseEntry()
	// ResetImContextEntry: reset the input method context of the entry if
	// needed.
	//
	// This can be necessary in the case where modifying the buffer would
	// confuse on-going input method behavior.
	ResetImContextEntry()
	// SetActivatesDefaultEntry: if @setting is true, pressing Enter in the
	// @entry will activate the default widget for the window containing the
	// entry. This usually means that the dialog box containing the entry will
	// be closed, since the default widget is usually one of the dialog buttons.
	//
	// (For experts: if @setting is true, the entry calls
	// gtk_window_activate_default() on the window containing the entry, in the
	// default handler for the Entry::activate signal.)
	SetActivatesDefaultEntry(setting bool)
	// SetAlignmentEntry sets the alignment for the contents of the entry. This
	// controls the horizontal positioning of the contents when the displayed
	// text is shorter than the width of the entry.
	SetAlignmentEntry(xalign float32)
	// SetAttributesEntry sets a AttrList; the attributes in the list are
	// applied to the entry text.
	SetAttributesEntry(attrs pango.AttrList)
	// SetBufferEntry: set the EntryBuffer object which holds the text for this
	// widget.
	SetBufferEntry(buffer EntryBuffer)
	// SetCompletionEntry sets @completion to be the auxiliary completion object
	// to use with @entry. All further configuration of the completion mechanism
	// is done on @completion using the EntryCompletion API. Completion is
	// disabled if @completion is set to nil.
	SetCompletionEntry(completion EntryCompletion)
	// SetCursorHAdjustmentEntry hooks up an adjustment to the cursor position
	// in an entry, so that when the cursor is moved, the adjustment is scrolled
	// to show that position. See gtk_scrolled_window_get_hadjustment() for a
	// typical way of obtaining the adjustment.
	//
	// The adjustment has to be in pixel units and in the same coordinate system
	// as the entry.
	SetCursorHAdjustmentEntry(adjustment Adjustment)
	// SetHasFrameEntry sets whether the entry has a beveled frame around it.
	SetHasFrameEntry(setting bool)
	// SetIconActivatableEntry sets whether the icon is activatable.
	SetIconActivatableEntry(iconPos EntryIconPosition, activatable bool)
	// SetIconDragSourceEntry sets up the icon at the given position so that
	// GTK+ will start a drag operation when the user clicks and drags the icon.
	//
	// To handle the drag operation, you need to connect to the usual
	// Widget::drag-data-get (or possibly Widget::drag-data-delete) signal, and
	// use gtk_entry_get_current_icon_drag_source() in your signal handler to
	// find out if the drag was started from an icon.
	//
	// By default, GTK+ uses the icon as the drag icon. You can use the
	// Widget::drag-begin signal to set a different icon. Note that you have to
	// use g_signal_connect_after() to ensure that your signal handler gets
	// executed after the default handler.
	SetIconDragSourceEntry(iconPos EntryIconPosition, targetList TargetList, actions gdk.DragAction)
	// SetIconFromIconNameEntry sets the icon shown in the entry at the
	// specified position from the current icon theme.
	//
	// If the icon name isn’t known, a “broken image” icon will be displayed
	// instead.
	//
	// If @icon_name is nil, no icon will be shown in the specified position.
	SetIconFromIconNameEntry(iconPos EntryIconPosition, iconName string)
	// SetIconFromPixbufEntry sets the icon shown in the specified position
	// using a pixbuf.
	//
	// If @pixbuf is nil, no icon will be shown in the specified position.
	SetIconFromPixbufEntry(iconPos EntryIconPosition, pixbuf gdkpixbuf.Pixbuf)
	// SetIconFromStockEntry sets the icon shown in the entry at the specified
	// position from a stock image.
	//
	// If @stock_id is nil, no icon will be shown in the specified position.
	//
	// Deprecated: since version 3.10.
	SetIconFromStockEntry(iconPos EntryIconPosition, stockId string)
	// SetIconSensitiveEntry sets the sensitivity for the specified icon.
	SetIconSensitiveEntry(iconPos EntryIconPosition, sensitive bool)
	// SetIconTooltipMarkupEntry sets @tooltip as the contents of the tooltip
	// for the icon at the specified position. @tooltip is assumed to be marked
	// up with the [Pango text markup language][PangoMarkupFormat].
	//
	// Use nil for @tooltip to remove an existing tooltip.
	//
	// See also gtk_widget_set_tooltip_markup() and
	// gtk_entry_set_icon_tooltip_text().
	SetIconTooltipMarkupEntry(iconPos EntryIconPosition, tooltip string)
	// SetIconTooltipTextEntry sets @tooltip as the contents of the tooltip for
	// the icon at the specified position.
	//
	// Use nil for @tooltip to remove an existing tooltip.
	//
	// See also gtk_widget_set_tooltip_text() and
	// gtk_entry_set_icon_tooltip_markup().
	//
	// If you unset the widget tooltip via gtk_widget_set_tooltip_text() or
	// gtk_widget_set_tooltip_markup(), this sets GtkWidget:has-tooltip to
	// false, which suppresses icon tooltips too. You can resolve this by then
	// calling gtk_widget_set_has_tooltip() to set GtkWidget:has-tooltip back to
	// true, or setting at least one non-empty tooltip on any icon achieves the
	// same result.
	SetIconTooltipTextEntry(iconPos EntryIconPosition, tooltip string)
	// SetInnerBorderEntry sets entry’s inner-border property to @border, or
	// clears it if nil is passed. The inner-border is the area around the
	// entry’s text, but inside its frame.
	//
	// If set, this property overrides the inner-border style property.
	// Overriding the style-provided border is useful when you want to do
	// in-place editing of some text in a canvas or list widget, where
	// pixel-exact positioning of the entry is important.
	//
	// Deprecated: since version 3.4.
	SetInnerBorderEntry(border Border)
	// SetInputHintsEntry sets the Entry:input-hints property, which allows
	// input methods to fine-tune their behaviour.
	SetInputHintsEntry(hints InputHints)
	// SetInputPurposeEntry sets the Entry:input-purpose property which can be
	// used by on-screen keyboards and other input methods to adjust their
	// behaviour.
	SetInputPurposeEntry(purpose InputPurpose)
	// SetInvisibleCharEntry sets the character to use in place of the actual
	// text when gtk_entry_set_visibility() has been called to set text
	// visibility to false. i.e. this is the character used in “password mode”
	// to show the user how many characters have been typed. By default, GTK+
	// picks the best invisible char available in the current font. If you set
	// the invisible char to 0, then the user will get no feedback at all; there
	// will be no text on the screen as they type.
	SetInvisibleCharEntry(ch uint32)
	// SetMaxLengthEntry sets the maximum allowed length of the contents of the
	// widget. If the current contents are longer than the given length, then
	// they will be truncated to fit.
	//
	// This is equivalent to getting @entry's EntryBuffer and calling
	// gtk_entry_buffer_set_max_length() on it. ]|
	SetMaxLengthEntry(max int)
	// SetMaxWidthCharsEntry sets the desired maximum width in characters of
	// @entry.
	SetMaxWidthCharsEntry(nChars int)
	// SetOverwriteModeEntry sets whether the text is overwritten when typing in
	// the Entry.
	SetOverwriteModeEntry(overwrite bool)
	// SetPlaceholderTextEntry sets text to be displayed in @entry when it is
	// empty and unfocused. This can be used to give a visual hint of the
	// expected contents of the Entry.
	//
	// Note that since the placeholder text gets removed when the entry received
	// focus, using this feature is a bit problematic if the entry is given the
	// initial focus in a window. Sometimes this can be worked around by
	// delaying the initial focus setting until the first key event arrives.
	SetPlaceholderTextEntry(text string)
	// SetProgressFractionEntry causes the entry’s progress indicator to “fill
	// in” the given fraction of the bar. The fraction should be between 0.0 and
	// 1.0, inclusive.
	SetProgressFractionEntry(fraction float64)
	// SetProgressPulseStepEntry sets the fraction of total entry width to move
	// the progress bouncing block for each call to gtk_entry_progress_pulse().
	SetProgressPulseStepEntry(fraction float64)
	// SetTabsEntry sets a TabArray; the tabstops in the array are applied to
	// the entry text.
	SetTabsEntry(tabs pango.TabArray)
	// SetTextEntry sets the text in the widget to the given value, replacing
	// the current contents.
	//
	// See gtk_entry_buffer_set_text().
	SetTextEntry(text string)
	// SetVisibilityEntry sets whether the contents of the entry are visible or
	// not. When visibility is set to false, characters are displayed as the
	// invisible char, and will also appear that way when the text in the entry
	// widget is copied elsewhere.
	//
	// By default, GTK+ picks the best invisible character available in the
	// current font, but it can be changed with gtk_entry_set_invisible_char().
	//
	// Note that you probably want to set Entry:input-purpose to
	// GTK_INPUT_PURPOSE_PASSWORD or GTK_INPUT_PURPOSE_PIN to inform input
	// methods about the purpose of this entry, in addition to setting
	// visibility to false.
	SetVisibilityEntry(visible bool)
	// SetWidthCharsEntry changes the size request of the entry to be about the
	// right size for @n_chars characters. Note that it changes the size
	// request, the size can still be affected by how you pack the widget into
	// containers. If @n_chars is -1, the size reverts to the default entry
	// size.
	SetWidthCharsEntry(nChars int)
	// TextIndexToLayoutIndexEntry converts from a position in the entry
	// contents (returned by gtk_entry_get_text()) to a position in the entry’s
	// Layout (returned by gtk_entry_get_layout(), with text retrieved via
	// pango_layout_get_text()).
	TextIndexToLayoutIndexEntry(textIndex int) int
	// UnsetInvisibleCharEntry unsets the invisible char previously set with
	// gtk_entry_set_invisible_char(). So that the default invisible char is
	// used again.
	UnsetInvisibleCharEntry()
}

// entry implements the Entry class.
type entry struct {
	Widget
}

// WrapEntry wraps a GObject to the right type. It is
// primarily used internally.
func WrapEntry(obj *externglib.Object) Entry {
	return entry{
		Widget: WrapWidget(obj),
	}
}

func marshalEntry(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapEntry(obj), nil
}

// NewEntry creates a new entry.
func NewEntry() Entry {
	var _cret *C.GtkWidget // in

	_cret = C.gtk_entry_new()

	var _entry Entry // out

	_entry = WrapEntry(externglib.Take(unsafe.Pointer(_cret)))

	return _entry
}

// NewEntryWithBuffer creates a new entry with the specified text buffer.
func NewEntryWithBuffer(buffer EntryBuffer) Entry {
	var _arg1 *C.GtkEntryBuffer // out
	var _cret *C.GtkWidget      // in

	_arg1 = (*C.GtkEntryBuffer)(unsafe.Pointer(buffer.Native()))

	_cret = C.gtk_entry_new_with_buffer(_arg1)

	var _entry Entry // out

	_entry = WrapEntry(externglib.Take(unsafe.Pointer(_cret)))

	return _entry
}

func (e entry) ActivatesDefault() bool {
	var _arg0 *C.GtkEntry // out
	var _cret C.gboolean  // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))

	_cret = C.gtk_entry_get_activates_default(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (e entry) Alignment() float32 {
	var _arg0 *C.GtkEntry // out
	var _cret C.gfloat    // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))

	_cret = C.gtk_entry_get_alignment(_arg0)

	var _gfloat float32 // out

	_gfloat = float32(_cret)

	return _gfloat
}

func (e entry) Attributes() pango.AttrList {
	var _arg0 *C.GtkEntry      // out
	var _cret *C.PangoAttrList // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))

	_cret = C.gtk_entry_get_attributes(_arg0)

	var _attrList pango.AttrList // out

	_attrList = (pango.AttrList)(unsafe.Pointer(_cret))
	C.pango_attr_list_ref(_cret)

	return _attrList
}

func (e entry) Buffer() EntryBuffer {
	var _arg0 *C.GtkEntry       // out
	var _cret *C.GtkEntryBuffer // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))

	_cret = C.gtk_entry_get_buffer(_arg0)

	var _entryBuffer EntryBuffer // out

	_entryBuffer = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(EntryBuffer)

	return _entryBuffer
}

func (e entry) Completion() EntryCompletion {
	var _arg0 *C.GtkEntry           // out
	var _cret *C.GtkEntryCompletion // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))

	_cret = C.gtk_entry_get_completion(_arg0)

	var _entryCompletion EntryCompletion // out

	_entryCompletion = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(EntryCompletion)

	return _entryCompletion
}

func (e entry) CurrentIconDragSource() int {
	var _arg0 *C.GtkEntry // out
	var _cret C.gint      // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))

	_cret = C.gtk_entry_get_current_icon_drag_source(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (e entry) CursorHAdjustment() Adjustment {
	var _arg0 *C.GtkEntry      // out
	var _cret *C.GtkAdjustment // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))

	_cret = C.gtk_entry_get_cursor_hadjustment(_arg0)

	var _adjustment Adjustment // out

	_adjustment = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Adjustment)

	return _adjustment
}

func (e entry) HasFrame() bool {
	var _arg0 *C.GtkEntry // out
	var _cret C.gboolean  // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))

	_cret = C.gtk_entry_get_has_frame(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (e entry) IconActivatable(iconPos EntryIconPosition) bool {
	var _arg0 *C.GtkEntry            // out
	var _arg1 C.GtkEntryIconPosition // out
	var _cret C.gboolean             // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))
	_arg1 = C.GtkEntryIconPosition(iconPos)

	_cret = C.gtk_entry_get_icon_activatable(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (e entry) IconArea(iconPos EntryIconPosition) gdk.Rectangle {
	var _arg0 *C.GtkEntry            // out
	var _arg1 C.GtkEntryIconPosition // out
	var _arg2 *C.GdkRectangle        // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))
	_arg1 = C.GtkEntryIconPosition(iconPos)

	C.gtk_entry_get_icon_area(_arg0, _arg1, &_arg2)

	var _iconArea gdk.Rectangle // out

	_iconArea = (gdk.Rectangle)(unsafe.Pointer(_arg2))

	return _iconArea
}

func (e entry) IconAtPos(x int, y int) int {
	var _arg0 *C.GtkEntry // out
	var _arg1 C.gint      // out
	var _arg2 C.gint      // out
	var _cret C.gint      // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))
	_arg1 = C.gint(x)
	_arg2 = C.gint(y)

	_cret = C.gtk_entry_get_icon_at_pos(_arg0, _arg1, _arg2)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (e entry) IconName(iconPos EntryIconPosition) string {
	var _arg0 *C.GtkEntry            // out
	var _arg1 C.GtkEntryIconPosition // out
	var _cret *C.gchar               // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))
	_arg1 = C.GtkEntryIconPosition(iconPos)

	_cret = C.gtk_entry_get_icon_name(_arg0, _arg1)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

func (e entry) IconPixbuf(iconPos EntryIconPosition) gdkpixbuf.Pixbuf {
	var _arg0 *C.GtkEntry            // out
	var _arg1 C.GtkEntryIconPosition // out
	var _cret *C.GdkPixbuf           // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))
	_arg1 = C.GtkEntryIconPosition(iconPos)

	_cret = C.gtk_entry_get_icon_pixbuf(_arg0, _arg1)

	var _pixbuf gdkpixbuf.Pixbuf // out

	_pixbuf = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(gdkpixbuf.Pixbuf)

	return _pixbuf
}

func (e entry) IconSensitive(iconPos EntryIconPosition) bool {
	var _arg0 *C.GtkEntry            // out
	var _arg1 C.GtkEntryIconPosition // out
	var _cret C.gboolean             // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))
	_arg1 = C.GtkEntryIconPosition(iconPos)

	_cret = C.gtk_entry_get_icon_sensitive(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (e entry) IconStock(iconPos EntryIconPosition) string {
	var _arg0 *C.GtkEntry            // out
	var _arg1 C.GtkEntryIconPosition // out
	var _cret *C.gchar               // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))
	_arg1 = C.GtkEntryIconPosition(iconPos)

	_cret = C.gtk_entry_get_icon_stock(_arg0, _arg1)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

func (e entry) IconStorageType(iconPos EntryIconPosition) ImageType {
	var _arg0 *C.GtkEntry            // out
	var _arg1 C.GtkEntryIconPosition // out
	var _cret C.GtkImageType         // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))
	_arg1 = C.GtkEntryIconPosition(iconPos)

	_cret = C.gtk_entry_get_icon_storage_type(_arg0, _arg1)

	var _imageType ImageType // out

	_imageType = ImageType(_cret)

	return _imageType
}

func (e entry) IconTooltipMarkup(iconPos EntryIconPosition) string {
	var _arg0 *C.GtkEntry            // out
	var _arg1 C.GtkEntryIconPosition // out
	var _cret *C.gchar               // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))
	_arg1 = C.GtkEntryIconPosition(iconPos)

	_cret = C.gtk_entry_get_icon_tooltip_markup(_arg0, _arg1)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

func (e entry) IconTooltipText(iconPos EntryIconPosition) string {
	var _arg0 *C.GtkEntry            // out
	var _arg1 C.GtkEntryIconPosition // out
	var _cret *C.gchar               // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))
	_arg1 = C.GtkEntryIconPosition(iconPos)

	_cret = C.gtk_entry_get_icon_tooltip_text(_arg0, _arg1)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

func (e entry) InnerBorder() Border {
	var _arg0 *C.GtkEntry  // out
	var _cret *C.GtkBorder // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))

	_cret = C.gtk_entry_get_inner_border(_arg0)

	var _border Border // out

	_border = (Border)(unsafe.Pointer(_cret))

	return _border
}

func (e entry) InputHints() InputHints {
	var _arg0 *C.GtkEntry     // out
	var _cret C.GtkInputHints // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))

	_cret = C.gtk_entry_get_input_hints(_arg0)

	var _inputHints InputHints // out

	_inputHints = InputHints(_cret)

	return _inputHints
}

func (e entry) InputPurpose() InputPurpose {
	var _arg0 *C.GtkEntry       // out
	var _cret C.GtkInputPurpose // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))

	_cret = C.gtk_entry_get_input_purpose(_arg0)

	var _inputPurpose InputPurpose // out

	_inputPurpose = InputPurpose(_cret)

	return _inputPurpose
}

func (e entry) InvisibleChar() uint32 {
	var _arg0 *C.GtkEntry // out
	var _cret C.gunichar  // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))

	_cret = C.gtk_entry_get_invisible_char(_arg0)

	var _gunichar uint32 // out

	_gunichar = uint32(_cret)

	return _gunichar
}

func (e entry) Layout() pango.Layout {
	var _arg0 *C.GtkEntry    // out
	var _cret *C.PangoLayout // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))

	_cret = C.gtk_entry_get_layout(_arg0)

	var _layout pango.Layout // out

	_layout = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(pango.Layout)

	return _layout
}

func (e entry) LayoutOffsets() (x int, y int) {
	var _arg0 *C.GtkEntry // out
	var _arg1 *C.gint     // in
	var _arg2 *C.gint     // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))

	C.gtk_entry_get_layout_offsets(_arg0, &_arg1, &_arg2)

	var _x int // out
	var _y int // out

	_x = int(_arg1)
	_y = int(_arg2)

	return _x, _y
}

func (e entry) MaxLength() int {
	var _arg0 *C.GtkEntry // out
	var _cret C.gint      // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))

	_cret = C.gtk_entry_get_max_length(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (e entry) MaxWidthChars() int {
	var _arg0 *C.GtkEntry // out
	var _cret C.gint      // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))

	_cret = C.gtk_entry_get_max_width_chars(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (e entry) OverwriteMode() bool {
	var _arg0 *C.GtkEntry // out
	var _cret C.gboolean  // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))

	_cret = C.gtk_entry_get_overwrite_mode(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (e entry) PlaceholderText() string {
	var _arg0 *C.GtkEntry // out
	var _cret *C.gchar    // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))

	_cret = C.gtk_entry_get_placeholder_text(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

func (e entry) ProgressFraction() float64 {
	var _arg0 *C.GtkEntry // out
	var _cret C.gdouble   // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))

	_cret = C.gtk_entry_get_progress_fraction(_arg0)

	var _gdouble float64 // out

	_gdouble = float64(_cret)

	return _gdouble
}

func (e entry) ProgressPulseStep() float64 {
	var _arg0 *C.GtkEntry // out
	var _cret C.gdouble   // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))

	_cret = C.gtk_entry_get_progress_pulse_step(_arg0)

	var _gdouble float64 // out

	_gdouble = float64(_cret)

	return _gdouble
}

func (e entry) Tabs() pango.TabArray {
	var _arg0 *C.GtkEntry      // out
	var _cret *C.PangoTabArray // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))

	_cret = C.gtk_entry_get_tabs(_arg0)

	var _tabArray pango.TabArray // out

	_tabArray = (pango.TabArray)(unsafe.Pointer(_cret))

	return _tabArray
}

func (e entry) Text() string {
	var _arg0 *C.GtkEntry // out
	var _cret *C.gchar    // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))

	_cret = C.gtk_entry_get_text(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

func (e entry) TextArea() gdk.Rectangle {
	var _arg0 *C.GtkEntry     // out
	var _arg1 *C.GdkRectangle // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))

	C.gtk_entry_get_text_area(_arg0, &_arg1)

	var _textArea gdk.Rectangle // out

	_textArea = (gdk.Rectangle)(unsafe.Pointer(_arg1))

	return _textArea
}

func (e entry) TextLength() uint16 {
	var _arg0 *C.GtkEntry // out
	var _cret C.guint16   // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))

	_cret = C.gtk_entry_get_text_length(_arg0)

	var _guint16 uint16 // out

	_guint16 = uint16(_cret)

	return _guint16
}

func (e entry) Visibility() bool {
	var _arg0 *C.GtkEntry // out
	var _cret C.gboolean  // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))

	_cret = C.gtk_entry_get_visibility(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (e entry) WidthChars() int {
	var _arg0 *C.GtkEntry // out
	var _cret C.gint      // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))

	_cret = C.gtk_entry_get_width_chars(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (e entry) GrabFocusWithoutSelectingEntry() {
	var _arg0 *C.GtkEntry // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))

	C.gtk_entry_grab_focus_without_selecting(_arg0)
}

func (e entry) ImContextFilterKeypressEntry(event gdk.EventKey) bool {
	var _arg0 *C.GtkEntry    // out
	var _arg1 *C.GdkEventKey // out
	var _cret C.gboolean     // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))
	_arg1 = (*C.GdkEventKey)(unsafe.Pointer(event))

	_cret = C.gtk_entry_im_context_filter_keypress(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (e entry) LayoutIndexToTextIndexEntry(layoutIndex int) int {
	var _arg0 *C.GtkEntry // out
	var _arg1 C.gint      // out
	var _cret C.gint      // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))
	_arg1 = C.gint(layoutIndex)

	_cret = C.gtk_entry_layout_index_to_text_index(_arg0, _arg1)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (e entry) ProgressPulseEntry() {
	var _arg0 *C.GtkEntry // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))

	C.gtk_entry_progress_pulse(_arg0)
}

func (e entry) ResetImContextEntry() {
	var _arg0 *C.GtkEntry // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))

	C.gtk_entry_reset_im_context(_arg0)
}

func (e entry) SetActivatesDefaultEntry(setting bool) {
	var _arg0 *C.GtkEntry // out
	var _arg1 C.gboolean  // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))
	if setting {
		_arg1 = C.TRUE
	}

	C.gtk_entry_set_activates_default(_arg0, _arg1)
}

func (e entry) SetAlignmentEntry(xalign float32) {
	var _arg0 *C.GtkEntry // out
	var _arg1 C.gfloat    // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))
	_arg1 = C.gfloat(xalign)

	C.gtk_entry_set_alignment(_arg0, _arg1)
}

func (e entry) SetAttributesEntry(attrs pango.AttrList) {
	var _arg0 *C.GtkEntry      // out
	var _arg1 *C.PangoAttrList // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))
	_arg1 = (*C.PangoAttrList)(unsafe.Pointer(attrs))

	C.gtk_entry_set_attributes(_arg0, _arg1)
}

func (e entry) SetBufferEntry(buffer EntryBuffer) {
	var _arg0 *C.GtkEntry       // out
	var _arg1 *C.GtkEntryBuffer // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))
	_arg1 = (*C.GtkEntryBuffer)(unsafe.Pointer(buffer.Native()))

	C.gtk_entry_set_buffer(_arg0, _arg1)
}

func (e entry) SetCompletionEntry(completion EntryCompletion) {
	var _arg0 *C.GtkEntry           // out
	var _arg1 *C.GtkEntryCompletion // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))
	_arg1 = (*C.GtkEntryCompletion)(unsafe.Pointer(completion.Native()))

	C.gtk_entry_set_completion(_arg0, _arg1)
}

func (e entry) SetCursorHAdjustmentEntry(adjustment Adjustment) {
	var _arg0 *C.GtkEntry      // out
	var _arg1 *C.GtkAdjustment // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))
	_arg1 = (*C.GtkAdjustment)(unsafe.Pointer(adjustment.Native()))

	C.gtk_entry_set_cursor_hadjustment(_arg0, _arg1)
}

func (e entry) SetHasFrameEntry(setting bool) {
	var _arg0 *C.GtkEntry // out
	var _arg1 C.gboolean  // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))
	if setting {
		_arg1 = C.TRUE
	}

	C.gtk_entry_set_has_frame(_arg0, _arg1)
}

func (e entry) SetIconActivatableEntry(iconPos EntryIconPosition, activatable bool) {
	var _arg0 *C.GtkEntry            // out
	var _arg1 C.GtkEntryIconPosition // out
	var _arg2 C.gboolean             // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))
	_arg1 = C.GtkEntryIconPosition(iconPos)
	if activatable {
		_arg2 = C.TRUE
	}

	C.gtk_entry_set_icon_activatable(_arg0, _arg1, _arg2)
}

func (e entry) SetIconDragSourceEntry(iconPos EntryIconPosition, targetList TargetList, actions gdk.DragAction) {
	var _arg0 *C.GtkEntry            // out
	var _arg1 C.GtkEntryIconPosition // out
	var _arg2 *C.GtkTargetList       // out
	var _arg3 C.GdkDragAction        // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))
	_arg1 = C.GtkEntryIconPosition(iconPos)
	_arg2 = (*C.GtkTargetList)(unsafe.Pointer(targetList))
	_arg3 = C.GdkDragAction(actions)

	C.gtk_entry_set_icon_drag_source(_arg0, _arg1, _arg2, _arg3)
}

func (e entry) SetIconFromIconNameEntry(iconPos EntryIconPosition, iconName string) {
	var _arg0 *C.GtkEntry            // out
	var _arg1 C.GtkEntryIconPosition // out
	var _arg2 *C.gchar               // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))
	_arg1 = C.GtkEntryIconPosition(iconPos)
	_arg2 = (*C.gchar)(C.CString(iconName))
	defer C.free(unsafe.Pointer(_arg2))

	C.gtk_entry_set_icon_from_icon_name(_arg0, _arg1, _arg2)
}

func (e entry) SetIconFromPixbufEntry(iconPos EntryIconPosition, pixbuf gdkpixbuf.Pixbuf) {
	var _arg0 *C.GtkEntry            // out
	var _arg1 C.GtkEntryIconPosition // out
	var _arg2 *C.GdkPixbuf           // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))
	_arg1 = C.GtkEntryIconPosition(iconPos)
	_arg2 = (*C.GdkPixbuf)(unsafe.Pointer(pixbuf.Native()))

	C.gtk_entry_set_icon_from_pixbuf(_arg0, _arg1, _arg2)
}

func (e entry) SetIconFromStockEntry(iconPos EntryIconPosition, stockId string) {
	var _arg0 *C.GtkEntry            // out
	var _arg1 C.GtkEntryIconPosition // out
	var _arg2 *C.gchar               // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))
	_arg1 = C.GtkEntryIconPosition(iconPos)
	_arg2 = (*C.gchar)(C.CString(stockId))
	defer C.free(unsafe.Pointer(_arg2))

	C.gtk_entry_set_icon_from_stock(_arg0, _arg1, _arg2)
}

func (e entry) SetIconSensitiveEntry(iconPos EntryIconPosition, sensitive bool) {
	var _arg0 *C.GtkEntry            // out
	var _arg1 C.GtkEntryIconPosition // out
	var _arg2 C.gboolean             // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))
	_arg1 = C.GtkEntryIconPosition(iconPos)
	if sensitive {
		_arg2 = C.TRUE
	}

	C.gtk_entry_set_icon_sensitive(_arg0, _arg1, _arg2)
}

func (e entry) SetIconTooltipMarkupEntry(iconPos EntryIconPosition, tooltip string) {
	var _arg0 *C.GtkEntry            // out
	var _arg1 C.GtkEntryIconPosition // out
	var _arg2 *C.gchar               // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))
	_arg1 = C.GtkEntryIconPosition(iconPos)
	_arg2 = (*C.gchar)(C.CString(tooltip))
	defer C.free(unsafe.Pointer(_arg2))

	C.gtk_entry_set_icon_tooltip_markup(_arg0, _arg1, _arg2)
}

func (e entry) SetIconTooltipTextEntry(iconPos EntryIconPosition, tooltip string) {
	var _arg0 *C.GtkEntry            // out
	var _arg1 C.GtkEntryIconPosition // out
	var _arg2 *C.gchar               // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))
	_arg1 = C.GtkEntryIconPosition(iconPos)
	_arg2 = (*C.gchar)(C.CString(tooltip))
	defer C.free(unsafe.Pointer(_arg2))

	C.gtk_entry_set_icon_tooltip_text(_arg0, _arg1, _arg2)
}

func (e entry) SetInnerBorderEntry(border Border) {
	var _arg0 *C.GtkEntry  // out
	var _arg1 *C.GtkBorder // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))
	_arg1 = (*C.GtkBorder)(unsafe.Pointer(border))

	C.gtk_entry_set_inner_border(_arg0, _arg1)
}

func (e entry) SetInputHintsEntry(hints InputHints) {
	var _arg0 *C.GtkEntry     // out
	var _arg1 C.GtkInputHints // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))
	_arg1 = C.GtkInputHints(hints)

	C.gtk_entry_set_input_hints(_arg0, _arg1)
}

func (e entry) SetInputPurposeEntry(purpose InputPurpose) {
	var _arg0 *C.GtkEntry       // out
	var _arg1 C.GtkInputPurpose // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))
	_arg1 = C.GtkInputPurpose(purpose)

	C.gtk_entry_set_input_purpose(_arg0, _arg1)
}

func (e entry) SetInvisibleCharEntry(ch uint32) {
	var _arg0 *C.GtkEntry // out
	var _arg1 C.gunichar  // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))
	_arg1 = C.gunichar(ch)

	C.gtk_entry_set_invisible_char(_arg0, _arg1)
}

func (e entry) SetMaxLengthEntry(max int) {
	var _arg0 *C.GtkEntry // out
	var _arg1 C.gint      // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))
	_arg1 = C.gint(max)

	C.gtk_entry_set_max_length(_arg0, _arg1)
}

func (e entry) SetMaxWidthCharsEntry(nChars int) {
	var _arg0 *C.GtkEntry // out
	var _arg1 C.gint      // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))
	_arg1 = C.gint(nChars)

	C.gtk_entry_set_max_width_chars(_arg0, _arg1)
}

func (e entry) SetOverwriteModeEntry(overwrite bool) {
	var _arg0 *C.GtkEntry // out
	var _arg1 C.gboolean  // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))
	if overwrite {
		_arg1 = C.TRUE
	}

	C.gtk_entry_set_overwrite_mode(_arg0, _arg1)
}

func (e entry) SetPlaceholderTextEntry(text string) {
	var _arg0 *C.GtkEntry // out
	var _arg1 *C.gchar    // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))
	_arg1 = (*C.gchar)(C.CString(text))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_entry_set_placeholder_text(_arg0, _arg1)
}

func (e entry) SetProgressFractionEntry(fraction float64) {
	var _arg0 *C.GtkEntry // out
	var _arg1 C.gdouble   // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))
	_arg1 = C.gdouble(fraction)

	C.gtk_entry_set_progress_fraction(_arg0, _arg1)
}

func (e entry) SetProgressPulseStepEntry(fraction float64) {
	var _arg0 *C.GtkEntry // out
	var _arg1 C.gdouble   // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))
	_arg1 = C.gdouble(fraction)

	C.gtk_entry_set_progress_pulse_step(_arg0, _arg1)
}

func (e entry) SetTabsEntry(tabs pango.TabArray) {
	var _arg0 *C.GtkEntry      // out
	var _arg1 *C.PangoTabArray // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))
	_arg1 = (*C.PangoTabArray)(unsafe.Pointer(tabs))

	C.gtk_entry_set_tabs(_arg0, _arg1)
}

func (e entry) SetTextEntry(text string) {
	var _arg0 *C.GtkEntry // out
	var _arg1 *C.gchar    // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))
	_arg1 = (*C.gchar)(C.CString(text))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_entry_set_text(_arg0, _arg1)
}

func (e entry) SetVisibilityEntry(visible bool) {
	var _arg0 *C.GtkEntry // out
	var _arg1 C.gboolean  // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))
	if visible {
		_arg1 = C.TRUE
	}

	C.gtk_entry_set_visibility(_arg0, _arg1)
}

func (e entry) SetWidthCharsEntry(nChars int) {
	var _arg0 *C.GtkEntry // out
	var _arg1 C.gint      // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))
	_arg1 = C.gint(nChars)

	C.gtk_entry_set_width_chars(_arg0, _arg1)
}

func (e entry) TextIndexToLayoutIndexEntry(textIndex int) int {
	var _arg0 *C.GtkEntry // out
	var _arg1 C.gint      // out
	var _cret C.gint      // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))
	_arg1 = C.gint(textIndex)

	_cret = C.gtk_entry_text_index_to_layout_index(_arg0, _arg1)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (e entry) UnsetInvisibleCharEntry() {
	var _arg0 *C.GtkEntry // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(e.Native()))

	C.gtk_entry_unset_invisible_char(_arg0)
}

func (e entry) AsBuildable() Buildable {
	return WrapBuildable(gextras.InternObject(e))
}

func (e entry) AsCellEditable() CellEditable {
	return WrapCellEditable(gextras.InternObject(e))
}

func (e entry) AsEditable() Editable {
	return WrapEditable(gextras.InternObject(e))
}
