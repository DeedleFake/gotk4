// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: glib-2.0 gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_style_context_print_flags_get_type()), F: marshalStyleContextPrintFlags},
		{T: externglib.Type(C.gtk_style_context_get_type()), F: marshalStyleContext},
	})
}

// StyleContextPrintFlags flags that modify the behavior of
// gtk_style_context_to_string(). New values may be added to this enumeration.
type StyleContextPrintFlags int

const (
	StyleContextPrintFlagsNone StyleContextPrintFlags = 0
	// StyleContextPrintFlagsRecurse: print the entire tree of CSS nodes
	// starting at the style context's node
	StyleContextPrintFlagsRecurse StyleContextPrintFlags = 1
	// StyleContextPrintFlagsShowStyle: show the values of the CSS properties
	// for each node
	StyleContextPrintFlagsShowStyle StyleContextPrintFlags = 2
)

func marshalStyleContextPrintFlags(p uintptr) (interface{}, error) {
	return StyleContextPrintFlags(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// StyleContext is an object that stores styling information affecting a widget
// defined by WidgetPath.
//
// In order to construct the final style information, StyleContext queries
// information from all attached StyleProviders. Style providers can be either
// attached explicitly to the context through gtk_style_context_add_provider(),
// or to the screen through gtk_style_context_add_provider_for_screen(). The
// resulting style is a combination of all providers’ information in priority
// order.
//
// For GTK+ widgets, any StyleContext returned by gtk_widget_get_style_context()
// will already have a WidgetPath, a Screen and RTL/LTR information set. The
// style context will also be updated automatically if any of these settings
// change on the widget.
//
// If you are using the theming layer standalone, you will need to set a widget
// path and a screen yourself to the created style context through
// gtk_style_context_set_path() and possibly gtk_style_context_set_screen(). See
// the “Foreign drawing“ example in gtk3-demo.
//
//
// Style Classes
//
// Widgets can add style classes to their context, which can be used to
// associate different styles by class. The documentation for individual widgets
// lists which style classes it uses itself, and which style classes may be
// added by applications to affect their appearance.
//
// GTK+ defines macros for a number of style classes.
//
//
// Style Regions
//
// Widgets can also add regions with flags to their context. This feature is
// deprecated and will be removed in a future GTK+ update. Please use style
// classes instead.
//
// GTK+ defines macros for a number of style regions.
//
//
// Custom styling in UI libraries and applications
//
// If you are developing a library with custom Widgets that render differently
// than standard components, you may need to add a StyleProvider yourself with
// the GTK_STYLE_PROVIDER_PRIORITY_FALLBACK priority, either a CssProvider or a
// custom object implementing the StyleProvider interface. This way themes may
// still attempt to style your UI elements in a different way if needed so.
//
// If you are using custom styling on an applications, you probably want then to
// make your style information prevail to the theme’s, so you must use a
// StyleProvider with the GTK_STYLE_PROVIDER_PRIORITY_APPLICATION priority, keep
// in mind that the user settings in `XDG_CONFIG_HOME/gtk-3.0/gtk.css` will
// still take precedence over your changes, as it uses the
// GTK_STYLE_PROVIDER_PRIORITY_USER priority.
type StyleContext interface {
	gextras.Objector

	// AddClass adds a style class to @context, so posterior calls to
	// gtk_style_context_get() or any of the gtk_render_*() functions will make
	// use of this new class for styling.
	//
	// In the CSS file format, a Entry defining a “search” class, would be
	// matched by:
	//
	// |[ <!-- language="CSS" --> entry.search { ... } ]|
	//
	// While any widget defining a “search” class would be matched by: |[ <!--
	// language="CSS" --> .search { ... } ]|
	AddClass(className string)
	// AddProvider adds a style provider to @context, to be used in style
	// construction. Note that a style provider added by this function only
	// affects the style of the widget to which @context belongs. If you want to
	// affect the style of all widgets, use
	// gtk_style_context_add_provider_for_screen().
	//
	// Note: If both priorities are the same, a StyleProvider added through this
	// function takes precedence over another added through
	// gtk_style_context_add_provider_for_screen().
	AddProvider(provider StyleProvider, priority uint)
	// AddRegion adds a region to @context, so posterior calls to
	// gtk_style_context_get() or any of the gtk_render_*() functions will make
	// use of this new region for styling.
	//
	// In the CSS file format, a TreeView defining a “row” region, would be
	// matched by:
	//
	// |[ <!-- language="CSS" --> treeview row { ... } ]|
	//
	// Pseudo-classes are used for matching @flags, so the two following rules:
	// |[ <!-- language="CSS" --> treeview row:nth-child(even) { ... } treeview
	// row:nth-child(odd) { ... } ]|
	//
	// would apply to even and odd rows, respectively.
	//
	// Region names must only contain lowercase letters and “-”, starting always
	// with a lowercase letter.
	AddRegion(regionName string, flags RegionFlags)
	// CancelAnimations stops all running animations for @region_id and all
	// animatable regions underneath.
	//
	// A nil @region_id will stop all ongoing animations in @context, when
	// dealing with a StyleContext obtained through
	// gtk_widget_get_style_context(), this is normally done for you in all
	// circumstances you would expect all widget to be stopped, so this should
	// be only used in complex widgets with different animatable regions.
	CancelAnimations(regionId interface{})
	// Border gets the border for a given state as a Border.
	//
	// See gtk_style_context_get_property() and K_STYLE_PROPERTY_BORDER_WIDTH
	// for details.
	Border(state StateFlags) Border
	// Direction returns the widget direction used for rendering.
	Direction() TextDirection
	// JunctionSides returns the sides where rendered elements connect visually
	// with others.
	JunctionSides() JunctionSides
	// Margin gets the margin for a given state as a Border. See
	// gtk_style_property_get() and K_STYLE_PROPERTY_MARGIN for details.
	Margin(state StateFlags) Border
	// Padding gets the padding for a given state as a Border. See
	// gtk_style_context_get() and K_STYLE_PROPERTY_PADDING for details.
	Padding(state StateFlags) Border
	// Parent gets the parent context set via gtk_style_context_set_parent().
	// See that function for details.
	Parent() StyleContext
	// Path returns the widget path used for style matching.
	Path() *WidgetPath
	// Scale returns the scale used for assets.
	Scale() int
	// Section queries the location in the CSS where @property was defined for
	// the current @context. Note that the state to be queried is taken from
	// gtk_style_context_get_state().
	//
	// If the location is not available, nil will be returned. The location
	// might not be available for various reasons, such as the property being
	// overridden, @property not naming a supported CSS property or tracking of
	// definitions being disabled for performance reasons.
	//
	// Shorthand CSS properties cannot be queried for a location and will always
	// return nil.
	Section(property string) *CSSSection
	// State returns the state used for style matching.
	//
	// This method should only be used to retrieve the StateFlags to pass to
	// StyleContext methods, like gtk_style_context_get_padding(). If you need
	// to retrieve the current state of a Widget, use
	// gtk_widget_get_state_flags().
	State() StateFlags
	// HasClass returns true if @context currently has defined the given class
	// name.
	HasClass(className string) bool
	// HasRegion returns true if @context has the region defined. If
	// @flags_return is not nil, it is set to the flags affecting the region.
	HasRegion(regionName string) (RegionFlags, bool)
	// Invalidate invalidates @context style information, so it will be
	// reconstructed again. It is useful if you modify the @context and need the
	// new information immediately.
	Invalidate()
	// LookupIconSet looks up @stock_id in the icon factories associated to
	// @context and the default icon factory, returning an icon set if found,
	// otherwise nil.
	LookupIconSet(stockId string) *IconSet
	// NotifyStateChange notifies a state change on @context, so if the current
	// style makes use of transition animations, one will be started so all
	// rendered elements under @region_id are animated for state @state being
	// set to value @state_value.
	//
	// The @window parameter is used in order to invalidate the rendered area as
	// the animation runs, so make sure it is the same window that is being
	// rendered on by the gtk_render_*() functions.
	//
	// If @region_id is nil, all rendered elements using @context will be
	// affected by this state transition.
	//
	// As a practical example, a Button notifying a state transition on the
	// prelight state: |[ <!-- language="C" -->
	// gtk_style_context_notify_state_change (context, gtk_widget_get_window
	// (widget), NULL, GTK_STATE_PRELIGHT, button->in_button); ]|
	//
	// Can be handled in the CSS file like this: |[ <!-- language="CSS" -->
	// button { background-color: #f00 }
	//
	// button:hover { background-color: #fff; transition: 200ms linear } ]|
	//
	// This combination will animate the button background from red to white if
	// a pointer enters the button, and back to red if the pointer leaves the
	// button.
	//
	// Note that @state is used when finding the transition parameters, which is
	// why the style places the transition under the :hover pseudo-class.
	NotifyStateChange(window Window, regionId interface{}, state StateType, stateValue bool)
	// PopAnimatableRegion pops an animatable region from @context. See
	// gtk_style_context_push_animatable_region().
	PopAnimatableRegion()
	// PushAnimatableRegion pushes an animatable region, so all further
	// gtk_render_*() calls between this call and the following
	// gtk_style_context_pop_animatable_region() will potentially show
	// transition animations for this region if
	// gtk_style_context_notify_state_change() is called for a given state, and
	// the current theme/style defines transition animations for state changes.
	//
	// The @region_id used must be unique in @context so the themes can uniquely
	// identify rendered elements subject to a state transition.
	PushAnimatableRegion(regionId interface{})
	// RemoveClass removes @class_name from @context.
	RemoveClass(className string)
	// RemoveProvider removes @provider from the style providers list in
	// @context.
	RemoveProvider(provider StyleProvider)
	// RemoveRegion removes a region from @context.
	RemoveRegion(regionName string)
	// Restore restores @context state to a previous stage. See
	// gtk_style_context_save().
	Restore()
	// Save saves the @context state, so temporary modifications done through
	// gtk_style_context_add_class(), gtk_style_context_remove_class(),
	// gtk_style_context_set_state(), etc. can quickly be reverted in one go
	// through gtk_style_context_restore().
	//
	// The matching call to gtk_style_context_restore() must be done before GTK
	// returns to the main loop.
	Save()
	// ScrollAnimations: this function is analogous to gdk_window_scroll(), and
	// should be called together with it so the invalidation areas for any
	// ongoing animation are scrolled together with it.
	ScrollAnimations(window Window, dx int, dy int)
	// SetBackground sets the background of @window to the background pattern or
	// color specified in @context for its current state.
	SetBackground(window Window)
	// SetDirection sets the reading direction for rendering purposes.
	//
	// If you are using a StyleContext returned from
	// gtk_widget_get_style_context(), you do not need to call this yourself.
	SetDirection(direction TextDirection)
	// SetJunctionSides sets the sides where rendered elements (mostly through
	// gtk_render_frame()) will visually connect with other visual elements.
	//
	// This is merely a hint that may or may not be honored by themes.
	//
	// Container widgets are expected to set junction hints as appropriate for
	// their children, so it should not normally be necessary to call this
	// function manually.
	SetJunctionSides(sides JunctionSides)
	// SetParent sets the parent style context for @context. The parent style
	// context is used to implement inheritance
	// (http://www.w3.org/TR/css3-cascade/#inheritance) of properties.
	//
	// If you are using a StyleContext returned from
	// gtk_widget_get_style_context(), the parent will be set for you.
	SetParent(parent StyleContext)
	// SetPath sets the WidgetPath used for style matching. As a consequence,
	// the style will be regenerated to match the new given path.
	//
	// If you are using a StyleContext returned from
	// gtk_widget_get_style_context(), you do not need to call this yourself.
	SetPath(path *WidgetPath)
	// SetScale sets the scale to use when getting image assets for the style.
	SetScale(scale int)
	// SetState sets the state to be used for style matching.
	SetState(flags StateFlags)
	// StateIsRunning returns true if there is a transition animation running
	// for the current region (see gtk_style_context_push_animatable_region()).
	//
	// If @progress is not nil, the animation progress will be returned there,
	// 0.0 means the state is closest to being unset, while 1.0 means it’s
	// closest to being set. This means transition animation will run from 0 to
	// 1 when @state is being set and from 1 to 0 when it’s being unset.
	StateIsRunning(state StateType) (float64, bool)
	// String converts the style context into a string representation.
	//
	// The string representation always includes information about the name,
	// state, id, visibility and style classes of the CSS node that is backing
	// @context. Depending on the flags, more information may be included.
	//
	// This function is intended for testing and debugging of the CSS
	// implementation in GTK+. There are no guarantees about the format of the
	// returned string, it may change.
	String(flags StyleContextPrintFlags) string
}

// styleContext implements the StyleContext class.
type styleContext struct {
	gextras.Objector
}

var _ StyleContext = (*styleContext)(nil)

// WrapStyleContext wraps a GObject to the right type. It is
// primarily used internally.
func WrapStyleContext(obj *externglib.Object) StyleContext {
	return styleContext{
		Objector: obj,
	}
}

func marshalStyleContext(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapStyleContext(obj), nil
}

// NewStyleContext constructs a class StyleContext.
func NewStyleContext() StyleContext {
	var _cret C.GtkStyleContext // in

	_cret = C.gtk_style_context_new()

	var _styleContext StyleContext // out

	_styleContext = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret.Native()))).(StyleContext)

	return _styleContext
}

// AddClass adds a style class to @context, so posterior calls to
// gtk_style_context_get() or any of the gtk_render_*() functions will make
// use of this new class for styling.
//
// In the CSS file format, a Entry defining a “search” class, would be
// matched by:
//
// |[ <!-- language="CSS" --> entry.search { ... } ]|
//
// While any widget defining a “search” class would be matched by: |[ <!--
// language="CSS" --> .search { ... } ]|
func (c styleContext) AddClass(className string) {
	var _arg0 *C.GtkStyleContext // out
	var _arg1 *C.gchar           // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.gchar)(C.CString(className))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_style_context_add_class(_arg0, _arg1)
}

// AddProvider adds a style provider to @context, to be used in style
// construction. Note that a style provider added by this function only
// affects the style of the widget to which @context belongs. If you want to
// affect the style of all widgets, use
// gtk_style_context_add_provider_for_screen().
//
// Note: If both priorities are the same, a StyleProvider added through this
// function takes precedence over another added through
// gtk_style_context_add_provider_for_screen().
func (c styleContext) AddProvider(provider StyleProvider, priority uint) {
	var _arg0 *C.GtkStyleContext  // out
	var _arg1 *C.GtkStyleProvider // out
	var _arg2 C.guint             // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.GtkStyleProvider)(unsafe.Pointer(provider.Native()))
	_arg2 = C.guint(priority)

	C.gtk_style_context_add_provider(_arg0, _arg1, _arg2)
}

// AddRegion adds a region to @context, so posterior calls to
// gtk_style_context_get() or any of the gtk_render_*() functions will make
// use of this new region for styling.
//
// In the CSS file format, a TreeView defining a “row” region, would be
// matched by:
//
// |[ <!-- language="CSS" --> treeview row { ... } ]|
//
// Pseudo-classes are used for matching @flags, so the two following rules:
// |[ <!-- language="CSS" --> treeview row:nth-child(even) { ... } treeview
// row:nth-child(odd) { ... } ]|
//
// would apply to even and odd rows, respectively.
//
// Region names must only contain lowercase letters and “-”, starting always
// with a lowercase letter.
func (c styleContext) AddRegion(regionName string, flags RegionFlags) {
	var _arg0 *C.GtkStyleContext // out
	var _arg1 *C.gchar           // out
	var _arg2 C.GtkRegionFlags   // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.gchar)(C.CString(regionName))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (C.GtkRegionFlags)(flags)

	C.gtk_style_context_add_region(_arg0, _arg1, _arg2)
}

// CancelAnimations stops all running animations for @region_id and all
// animatable regions underneath.
//
// A nil @region_id will stop all ongoing animations in @context, when
// dealing with a StyleContext obtained through
// gtk_widget_get_style_context(), this is normally done for you in all
// circumstances you would expect all widget to be stopped, so this should
// be only used in complex widgets with different animatable regions.
func (c styleContext) CancelAnimations(regionId interface{}) {
	var _arg0 *C.GtkStyleContext // out
	var _arg1 C.gpointer         // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	_arg1 = C.gpointer(regionId)

	C.gtk_style_context_cancel_animations(_arg0, _arg1)
}

// Border gets the border for a given state as a Border.
//
// See gtk_style_context_get_property() and K_STYLE_PROPERTY_BORDER_WIDTH
// for details.
func (c styleContext) Border(state StateFlags) Border {
	var _arg0 *C.GtkStyleContext // out
	var _arg1 C.GtkStateFlags    // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	_arg1 = (C.GtkStateFlags)(state)

	var _border Border

	C.gtk_style_context_get_border(_arg0, _arg1, (*C.GtkBorder)(unsafe.Pointer(&_border)))

	return _border
}

// Direction returns the widget direction used for rendering.
func (c styleContext) Direction() TextDirection {
	var _arg0 *C.GtkStyleContext // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))

	var _cret C.GtkTextDirection // in

	_cret = C.gtk_style_context_get_direction(_arg0)

	var _textDirection TextDirection // out

	_textDirection = TextDirection(_cret)

	return _textDirection
}

// JunctionSides returns the sides where rendered elements connect visually
// with others.
func (c styleContext) JunctionSides() JunctionSides {
	var _arg0 *C.GtkStyleContext // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))

	var _cret C.GtkJunctionSides // in

	_cret = C.gtk_style_context_get_junction_sides(_arg0)

	var _junctionSides JunctionSides // out

	_junctionSides = JunctionSides(_cret)

	return _junctionSides
}

// Margin gets the margin for a given state as a Border. See
// gtk_style_property_get() and K_STYLE_PROPERTY_MARGIN for details.
func (c styleContext) Margin(state StateFlags) Border {
	var _arg0 *C.GtkStyleContext // out
	var _arg1 C.GtkStateFlags    // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	_arg1 = (C.GtkStateFlags)(state)

	var _margin Border

	C.gtk_style_context_get_margin(_arg0, _arg1, (*C.GtkBorder)(unsafe.Pointer(&_margin)))

	return _margin
}

// Padding gets the padding for a given state as a Border. See
// gtk_style_context_get() and K_STYLE_PROPERTY_PADDING for details.
func (c styleContext) Padding(state StateFlags) Border {
	var _arg0 *C.GtkStyleContext // out
	var _arg1 C.GtkStateFlags    // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	_arg1 = (C.GtkStateFlags)(state)

	var _padding Border

	C.gtk_style_context_get_padding(_arg0, _arg1, (*C.GtkBorder)(unsafe.Pointer(&_padding)))

	return _padding
}

// Parent gets the parent context set via gtk_style_context_set_parent().
// See that function for details.
func (c styleContext) Parent() StyleContext {
	var _arg0 *C.GtkStyleContext // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))

	var _cret *C.GtkStyleContext // in

	_cret = C.gtk_style_context_get_parent(_arg0)

	var _styleContext StyleContext // out

	_styleContext = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret.Native()))).(StyleContext)

	return _styleContext
}

// Path returns the widget path used for style matching.
func (c styleContext) Path() *WidgetPath {
	var _arg0 *C.GtkStyleContext // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))

	var _cret *C.GtkWidgetPath // in

	_cret = C.gtk_style_context_get_path(_arg0)

	var _widgetPath *WidgetPath // out

	_widgetPath = WrapWidgetPath(unsafe.Pointer(_cret))

	return _widgetPath
}

// Scale returns the scale used for assets.
func (c styleContext) Scale() int {
	var _arg0 *C.GtkStyleContext // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))

	var _cret C.gint // in

	_cret = C.gtk_style_context_get_scale(_arg0)

	var _gint int // out

	_gint = (int)(_cret)

	return _gint
}

// Section queries the location in the CSS where @property was defined for
// the current @context. Note that the state to be queried is taken from
// gtk_style_context_get_state().
//
// If the location is not available, nil will be returned. The location
// might not be available for various reasons, such as the property being
// overridden, @property not naming a supported CSS property or tracking of
// definitions being disabled for performance reasons.
//
// Shorthand CSS properties cannot be queried for a location and will always
// return nil.
func (c styleContext) Section(property string) *CSSSection {
	var _arg0 *C.GtkStyleContext // out
	var _arg1 *C.gchar           // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.gchar)(C.CString(property))
	defer C.free(unsafe.Pointer(_arg1))

	var _cret *C.GtkCssSection // in

	_cret = C.gtk_style_context_get_section(_arg0, _arg1)

	var _cssSection *CSSSection // out

	_cssSection = WrapCSSSection(unsafe.Pointer(_cret))

	return _cssSection
}

// State returns the state used for style matching.
//
// This method should only be used to retrieve the StateFlags to pass to
// StyleContext methods, like gtk_style_context_get_padding(). If you need
// to retrieve the current state of a Widget, use
// gtk_widget_get_state_flags().
func (c styleContext) State() StateFlags {
	var _arg0 *C.GtkStyleContext // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))

	var _cret C.GtkStateFlags // in

	_cret = C.gtk_style_context_get_state(_arg0)

	var _stateFlags StateFlags // out

	_stateFlags = StateFlags(_cret)

	return _stateFlags
}

// HasClass returns true if @context currently has defined the given class
// name.
func (c styleContext) HasClass(className string) bool {
	var _arg0 *C.GtkStyleContext // out
	var _arg1 *C.gchar           // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.gchar)(C.CString(className))
	defer C.free(unsafe.Pointer(_arg1))

	var _cret C.gboolean // in

	_cret = C.gtk_style_context_has_class(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// HasRegion returns true if @context has the region defined. If
// @flags_return is not nil, it is set to the flags affecting the region.
func (c styleContext) HasRegion(regionName string) (RegionFlags, bool) {
	var _arg0 *C.GtkStyleContext // out
	var _arg1 *C.gchar           // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.gchar)(C.CString(regionName))
	defer C.free(unsafe.Pointer(_arg1))

	var _arg2 C.GtkRegionFlags // in
	var _cret C.gboolean       // in

	_cret = C.gtk_style_context_has_region(_arg0, _arg1, &_arg2)

	var _flagsReturn RegionFlags // out
	var _ok bool                 // out

	_flagsReturn = RegionFlags(_arg2)
	if _cret != 0 {
		_ok = true
	}

	return _flagsReturn, _ok
}

// Invalidate invalidates @context style information, so it will be
// reconstructed again. It is useful if you modify the @context and need the
// new information immediately.
func (c styleContext) Invalidate() {
	var _arg0 *C.GtkStyleContext // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))

	C.gtk_style_context_invalidate(_arg0)
}

// LookupIconSet looks up @stock_id in the icon factories associated to
// @context and the default icon factory, returning an icon set if found,
// otherwise nil.
func (c styleContext) LookupIconSet(stockId string) *IconSet {
	var _arg0 *C.GtkStyleContext // out
	var _arg1 *C.gchar           // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.gchar)(C.CString(stockId))
	defer C.free(unsafe.Pointer(_arg1))

	var _cret *C.GtkIconSet // in

	_cret = C.gtk_style_context_lookup_icon_set(_arg0, _arg1)

	var _iconSet *IconSet // out

	_iconSet = WrapIconSet(unsafe.Pointer(_cret))

	return _iconSet
}

// NotifyStateChange notifies a state change on @context, so if the current
// style makes use of transition animations, one will be started so all
// rendered elements under @region_id are animated for state @state being
// set to value @state_value.
//
// The @window parameter is used in order to invalidate the rendered area as
// the animation runs, so make sure it is the same window that is being
// rendered on by the gtk_render_*() functions.
//
// If @region_id is nil, all rendered elements using @context will be
// affected by this state transition.
//
// As a practical example, a Button notifying a state transition on the
// prelight state: |[ <!-- language="C" -->
// gtk_style_context_notify_state_change (context, gtk_widget_get_window
// (widget), NULL, GTK_STATE_PRELIGHT, button->in_button); ]|
//
// Can be handled in the CSS file like this: |[ <!-- language="CSS" -->
// button { background-color: #f00 }
//
// button:hover { background-color: #fff; transition: 200ms linear } ]|
//
// This combination will animate the button background from red to white if
// a pointer enters the button, and back to red if the pointer leaves the
// button.
//
// Note that @state is used when finding the transition parameters, which is
// why the style places the transition under the :hover pseudo-class.
func (c styleContext) NotifyStateChange(window Window, regionId interface{}, state StateType, stateValue bool) {
	var _arg0 *C.GtkStyleContext // out
	var _arg1 *C.GdkWindow       // out
	var _arg2 C.gpointer         // out
	var _arg3 C.GtkStateType     // out
	var _arg4 C.gboolean         // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.GdkWindow)(unsafe.Pointer(window.Native()))
	_arg2 = C.gpointer(regionId)
	_arg3 = (C.GtkStateType)(state)
	if stateValue {
		_arg4 = C.TRUE
	}

	C.gtk_style_context_notify_state_change(_arg0, _arg1, _arg2, _arg3, _arg4)
}

// PopAnimatableRegion pops an animatable region from @context. See
// gtk_style_context_push_animatable_region().
func (c styleContext) PopAnimatableRegion() {
	var _arg0 *C.GtkStyleContext // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))

	C.gtk_style_context_pop_animatable_region(_arg0)
}

// PushAnimatableRegion pushes an animatable region, so all further
// gtk_render_*() calls between this call and the following
// gtk_style_context_pop_animatable_region() will potentially show
// transition animations for this region if
// gtk_style_context_notify_state_change() is called for a given state, and
// the current theme/style defines transition animations for state changes.
//
// The @region_id used must be unique in @context so the themes can uniquely
// identify rendered elements subject to a state transition.
func (c styleContext) PushAnimatableRegion(regionId interface{}) {
	var _arg0 *C.GtkStyleContext // out
	var _arg1 C.gpointer         // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	_arg1 = C.gpointer(regionId)

	C.gtk_style_context_push_animatable_region(_arg0, _arg1)
}

// RemoveClass removes @class_name from @context.
func (c styleContext) RemoveClass(className string) {
	var _arg0 *C.GtkStyleContext // out
	var _arg1 *C.gchar           // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.gchar)(C.CString(className))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_style_context_remove_class(_arg0, _arg1)
}

// RemoveProvider removes @provider from the style providers list in
// @context.
func (c styleContext) RemoveProvider(provider StyleProvider) {
	var _arg0 *C.GtkStyleContext  // out
	var _arg1 *C.GtkStyleProvider // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.GtkStyleProvider)(unsafe.Pointer(provider.Native()))

	C.gtk_style_context_remove_provider(_arg0, _arg1)
}

// RemoveRegion removes a region from @context.
func (c styleContext) RemoveRegion(regionName string) {
	var _arg0 *C.GtkStyleContext // out
	var _arg1 *C.gchar           // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.gchar)(C.CString(regionName))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_style_context_remove_region(_arg0, _arg1)
}

// Restore restores @context state to a previous stage. See
// gtk_style_context_save().
func (c styleContext) Restore() {
	var _arg0 *C.GtkStyleContext // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))

	C.gtk_style_context_restore(_arg0)
}

// Save saves the @context state, so temporary modifications done through
// gtk_style_context_add_class(), gtk_style_context_remove_class(),
// gtk_style_context_set_state(), etc. can quickly be reverted in one go
// through gtk_style_context_restore().
//
// The matching call to gtk_style_context_restore() must be done before GTK
// returns to the main loop.
func (c styleContext) Save() {
	var _arg0 *C.GtkStyleContext // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))

	C.gtk_style_context_save(_arg0)
}

// ScrollAnimations: this function is analogous to gdk_window_scroll(), and
// should be called together with it so the invalidation areas for any
// ongoing animation are scrolled together with it.
func (c styleContext) ScrollAnimations(window Window, dx int, dy int) {
	var _arg0 *C.GtkStyleContext // out
	var _arg1 *C.GdkWindow       // out
	var _arg2 C.gint             // out
	var _arg3 C.gint             // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.GdkWindow)(unsafe.Pointer(window.Native()))
	_arg2 = C.gint(dx)
	_arg3 = C.gint(dy)

	C.gtk_style_context_scroll_animations(_arg0, _arg1, _arg2, _arg3)
}

// SetBackground sets the background of @window to the background pattern or
// color specified in @context for its current state.
func (c styleContext) SetBackground(window Window) {
	var _arg0 *C.GtkStyleContext // out
	var _arg1 *C.GdkWindow       // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.GdkWindow)(unsafe.Pointer(window.Native()))

	C.gtk_style_context_set_background(_arg0, _arg1)
}

// SetDirection sets the reading direction for rendering purposes.
//
// If you are using a StyleContext returned from
// gtk_widget_get_style_context(), you do not need to call this yourself.
func (c styleContext) SetDirection(direction TextDirection) {
	var _arg0 *C.GtkStyleContext // out
	var _arg1 C.GtkTextDirection // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	_arg1 = (C.GtkTextDirection)(direction)

	C.gtk_style_context_set_direction(_arg0, _arg1)
}

// SetJunctionSides sets the sides where rendered elements (mostly through
// gtk_render_frame()) will visually connect with other visual elements.
//
// This is merely a hint that may or may not be honored by themes.
//
// Container widgets are expected to set junction hints as appropriate for
// their children, so it should not normally be necessary to call this
// function manually.
func (c styleContext) SetJunctionSides(sides JunctionSides) {
	var _arg0 *C.GtkStyleContext // out
	var _arg1 C.GtkJunctionSides // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	_arg1 = (C.GtkJunctionSides)(sides)

	C.gtk_style_context_set_junction_sides(_arg0, _arg1)
}

// SetParent sets the parent style context for @context. The parent style
// context is used to implement inheritance
// (http://www.w3.org/TR/css3-cascade/#inheritance) of properties.
//
// If you are using a StyleContext returned from
// gtk_widget_get_style_context(), the parent will be set for you.
func (c styleContext) SetParent(parent StyleContext) {
	var _arg0 *C.GtkStyleContext // out
	var _arg1 *C.GtkStyleContext // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.GtkStyleContext)(unsafe.Pointer(parent.Native()))

	C.gtk_style_context_set_parent(_arg0, _arg1)
}

// SetPath sets the WidgetPath used for style matching. As a consequence,
// the style will be regenerated to match the new given path.
//
// If you are using a StyleContext returned from
// gtk_widget_get_style_context(), you do not need to call this yourself.
func (c styleContext) SetPath(path *WidgetPath) {
	var _arg0 *C.GtkStyleContext // out
	var _arg1 *C.GtkWidgetPath   // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.GtkWidgetPath)(unsafe.Pointer(path.Native()))

	C.gtk_style_context_set_path(_arg0, _arg1)
}

// SetScale sets the scale to use when getting image assets for the style.
func (c styleContext) SetScale(scale int) {
	var _arg0 *C.GtkStyleContext // out
	var _arg1 C.gint             // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	_arg1 = C.gint(scale)

	C.gtk_style_context_set_scale(_arg0, _arg1)
}

// SetState sets the state to be used for style matching.
func (c styleContext) SetState(flags StateFlags) {
	var _arg0 *C.GtkStyleContext // out
	var _arg1 C.GtkStateFlags    // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	_arg1 = (C.GtkStateFlags)(flags)

	C.gtk_style_context_set_state(_arg0, _arg1)
}

// StateIsRunning returns true if there is a transition animation running
// for the current region (see gtk_style_context_push_animatable_region()).
//
// If @progress is not nil, the animation progress will be returned there,
// 0.0 means the state is closest to being unset, while 1.0 means it’s
// closest to being set. This means transition animation will run from 0 to
// 1 when @state is being set and from 1 to 0 when it’s being unset.
func (c styleContext) StateIsRunning(state StateType) (float64, bool) {
	var _arg0 *C.GtkStyleContext // out
	var _arg1 C.GtkStateType     // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	_arg1 = (C.GtkStateType)(state)

	var _arg2 C.gdouble  // in
	var _cret C.gboolean // in

	_cret = C.gtk_style_context_state_is_running(_arg0, _arg1, &_arg2)

	var _progress float64 // out
	var _ok bool          // out

	_progress = (float64)(_arg2)
	if _cret != 0 {
		_ok = true
	}

	return _progress, _ok
}

// String converts the style context into a string representation.
//
// The string representation always includes information about the name,
// state, id, visibility and style classes of the CSS node that is backing
// @context. Depending on the flags, more information may be included.
//
// This function is intended for testing and debugging of the CSS
// implementation in GTK+. There are no guarantees about the format of the
// returned string, it may change.
func (c styleContext) String(flags StyleContextPrintFlags) string {
	var _arg0 *C.GtkStyleContext          // out
	var _arg1 C.GtkStyleContextPrintFlags // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	_arg1 = (C.GtkStyleContextPrintFlags)(flags)

	var _cret *C.char // in

	_cret = C.gtk_style_context_to_string(_arg0, _arg1)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}
