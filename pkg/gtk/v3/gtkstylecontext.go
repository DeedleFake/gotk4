// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_style_context_get_type()), F: marshalStyleContext},
	})
}

// DrawInsertionCursor draws a text caret on @cr at @location. This is not a
// style function but merely a convenience function for drawing the standard
// cursor shape.
func DrawInsertionCursor(widget Widget, cr *cairo.Context, location *gdk.Rectangle, isPrimary bool, direction TextDirection, drawArrow bool) {
	var arg1 *C.GtkWidget
	var arg2 *C.cairo_t
	var arg3 *C.GdkRectangle
	var arg4 C.gboolean
	var arg5 C.GtkTextDirection
	var arg6 C.gboolean

	arg1 = (*C.GtkWidget)(unsafe.Pointer(widget.Native()))
	arg2 = (*C.cairo_t)(unsafe.Pointer(cr.Native()))
	arg3 = (*C.GdkRectangle)(unsafe.Pointer(location.Native()))
	if isPrimary {
		arg4 = C.gboolean(1)
	}
	arg5 = (C.GtkTextDirection)(direction)
	if drawArrow {
		arg6 = C.gboolean(1)
	}

	C.gtk_draw_insertion_cursor(arg1, arg2, arg3, arg4, arg5, arg6)
}

// RenderInsertionCursor draws a text caret on @cr at the specified index of
// @layout.
func RenderInsertionCursor(context StyleContext, cr *cairo.Context, x float64, y float64, layout pango.Layout, index int, direction pango.Direction) {
	var arg1 *C.GtkStyleContext
	var arg2 *C.cairo_t
	var arg3 C.gdouble
	var arg4 C.gdouble
	var arg5 *C.PangoLayout
	var arg6 C.int
	var arg7 C.PangoDirection

	arg1 = (*C.GtkStyleContext)(unsafe.Pointer(context.Native()))
	arg2 = (*C.cairo_t)(unsafe.Pointer(cr.Native()))
	arg3 = C.gdouble(x)
	arg4 = C.gdouble(y)
	arg5 = (*C.PangoLayout)(unsafe.Pointer(layout.Native()))
	arg6 = C.int(index)
	arg7 = (C.PangoDirection)(direction)

	C.gtk_render_insertion_cursor(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
}

// StyleContext is an object that stores styling information affecting a widget
// defined by WidgetPath.
//
// In order to construct the final style information, StyleContext queries
// information from all attached StyleProviders. Style providers can be either
// attached explicitly to the context through gtk_style_context_add_provider(),
// or to the screen through gtk_style_context_add_provider_for_screen(). The
// resulting style is a combination of all providers’ information in priority
// order.
//
// For GTK+ widgets, any StyleContext returned by gtk_widget_get_style_context()
// will already have a WidgetPath, a Screen and RTL/LTR information set. The
// style context will also be updated automatically if any of these settings
// change on the widget.
//
// If you are using the theming layer standalone, you will need to set a widget
// path and a screen yourself to the created style context through
// gtk_style_context_set_path() and possibly gtk_style_context_set_screen(). See
// the “Foreign drawing“ example in gtk3-demo.
//
//
// Style Classes
//
// Widgets can add style classes to their context, which can be used to
// associate different styles by class. The documentation for individual widgets
// lists which style classes it uses itself, and which style classes may be
// added by applications to affect their appearance.
//
// GTK+ defines macros for a number of style classes.
//
//
// Style Regions
//
// Widgets can also add regions with flags to their context. This feature is
// deprecated and will be removed in a future GTK+ update. Please use style
// classes instead.
//
// GTK+ defines macros for a number of style regions.
//
//
// Custom styling in UI libraries and applications
//
// If you are developing a library with custom Widgets that render differently
// than standard components, you may need to add a StyleProvider yourself with
// the GTK_STYLE_PROVIDER_PRIORITY_FALLBACK priority, either a CssProvider or a
// custom object implementing the StyleProvider interface. This way themes may
// still attempt to style your UI elements in a different way if needed so.
//
// If you are using custom styling on an applications, you probably want then to
// make your style information prevail to the theme’s, so you must use a
// StyleProvider with the GTK_STYLE_PROVIDER_PRIORITY_APPLICATION priority, keep
// in mind that the user settings in `XDG_CONFIG_HOME/gtk-3.0/gtk.css` will
// still take precedence over your changes, as it uses the
// GTK_STYLE_PROVIDER_PRIORITY_USER priority.
type StyleContext interface {
	gextras.Objector

	// AddClass adds a style class to @context, so posterior calls to
	// gtk_style_context_get() or any of the gtk_render_*() functions will make
	// use of this new class for styling.
	//
	// In the CSS file format, a Entry defining a “search” class, would be
	// matched by:
	//
	// |[ <!-- language="CSS" --> entry.search { ... } ]|
	//
	// While any widget defining a “search” class would be matched by: |[ <!--
	// language="CSS" --> .search { ... } ]|
	AddClass(c StyleContext, className string)
	// AddProvider adds a style provider to @context, to be used in style
	// construction. Note that a style provider added by this function only
	// affects the style of the widget to which @context belongs. If you want to
	// affect the style of all widgets, use
	// gtk_style_context_add_provider_for_screen().
	//
	// Note: If both priorities are the same, a StyleProvider added through this
	// function takes precedence over another added through
	// gtk_style_context_add_provider_for_screen().
	AddProvider(c StyleContext, provider StyleProvider, priority uint)
	// AddRegion adds a region to @context, so posterior calls to
	// gtk_style_context_get() or any of the gtk_render_*() functions will make
	// use of this new region for styling.
	//
	// In the CSS file format, a TreeView defining a “row” region, would be
	// matched by:
	//
	// |[ <!-- language="CSS" --> treeview row { ... } ]|
	//
	// Pseudo-classes are used for matching @flags, so the two following rules:
	// |[ <!-- language="CSS" --> treeview row:nth-child(even) { ... } treeview
	// row:nth-child(odd) { ... } ]|
	//
	// would apply to even and odd rows, respectively.
	//
	// Region names must only contain lowercase letters and “-”, starting always
	// with a lowercase letter.
	AddRegion(c StyleContext, regionName string, flags RegionFlags)
	// CancelAnimations stops all running animations for @region_id and all
	// animatable regions underneath.
	//
	// A nil @region_id will stop all ongoing animations in @context, when
	// dealing with a StyleContext obtained through
	// gtk_widget_get_style_context(), this is normally done for you in all
	// circumstances you would expect all widget to be stopped, so this should
	// be only used in complex widgets with different animatable regions.
	CancelAnimations(c StyleContext, regionID interface{})
	// BackgroundColor gets the background color for a given state.
	//
	// This function is far less useful than it seems, and it should not be used
	// in newly written code. CSS has no concept of "background color", as a
	// background can be an image, or a gradient, or any other pattern including
	// solid colors.
	//
	// The only reason why you would call
	// gtk_style_context_get_background_color() is to use the returned value to
	// draw the background with it; the correct way to achieve this result is to
	// use gtk_render_background() instead, along with CSS style classes to
	// modify the color to be rendered.
	BackgroundColor(c StyleContext, state StateFlags) *gdk.RGBA
	// Border gets the border for a given state as a Border.
	//
	// See gtk_style_context_get_property() and K_STYLE_PROPERTY_BORDER_WIDTH
	// for details.
	Border(c StyleContext, state StateFlags) *Border
	// BorderColor gets the border color for a given state.
	BorderColor(c StyleContext, state StateFlags) *gdk.RGBA
	// Color gets the foreground color for a given state.
	//
	// See gtk_style_context_get_property() and K_STYLE_PROPERTY_COLOR for
	// details.
	Color(c StyleContext, state StateFlags) *gdk.RGBA
	// Direction returns the widget direction used for rendering.
	Direction(c StyleContext)
	// Font returns the font description for a given state. The returned object
	// is const and will remain valid until the StyleContext::changed signal
	// happens.
	Font(c StyleContext, state StateFlags)
	// FrameClock returns the FrameClock to which @context is attached.
	FrameClock(c StyleContext)
	// JunctionSides returns the sides where rendered elements connect visually
	// with others.
	JunctionSides(c StyleContext)
	// Margin gets the margin for a given state as a Border. See
	// gtk_style_property_get() and K_STYLE_PROPERTY_MARGIN for details.
	Margin(c StyleContext, state StateFlags) *Border
	// Padding gets the padding for a given state as a Border. See
	// gtk_style_context_get() and K_STYLE_PROPERTY_PADDING for details.
	Padding(c StyleContext, state StateFlags) *Border
	// Parent gets the parent context set via gtk_style_context_set_parent().
	// See that function for details.
	Parent(c StyleContext)
	// Path returns the widget path used for style matching.
	Path(c StyleContext)
	// Property gets a style property from @context for the given state.
	//
	// Note that not all CSS properties that are supported by GTK+ can be
	// retrieved in this way, since they may not be representable as #GValue.
	// GTK+ defines macros for a number of properties that can be used with this
	// function.
	//
	// Note that passing a state other than the current state of @context is not
	// recommended unless the style context has been saved with
	// gtk_style_context_save().
	//
	// When @value is no longer needed, g_value_unset() must be called to free
	// any allocated memory.
	Property(c StyleContext, property string, state StateFlags) *externglib.Value
	// Scale returns the scale used for assets.
	Scale(c StyleContext)
	// Screen returns the Screen to which @context is attached.
	Screen(c StyleContext)
	// Section queries the location in the CSS where @property was defined for
	// the current @context. Note that the state to be queried is taken from
	// gtk_style_context_get_state().
	//
	// If the location is not available, nil will be returned. The location
	// might not be available for various reasons, such as the property being
	// overridden, @property not naming a supported CSS property or tracking of
	// definitions being disabled for performance reasons.
	//
	// Shorthand CSS properties cannot be queried for a location and will always
	// return nil.
	Section(c StyleContext, property string)
	// State returns the state used for style matching.
	//
	// This method should only be used to retrieve the StateFlags to pass to
	// StyleContext methods, like gtk_style_context_get_padding(). If you need
	// to retrieve the current state of a Widget, use
	// gtk_widget_get_state_flags().
	State(c StyleContext)
	// StyleProperty gets the value for a widget style property.
	//
	// When @value is no longer needed, g_value_unset() must be called to free
	// any allocated memory.
	StyleProperty(c StyleContext, propertyName string, value *externglib.Value)
	// HasClass returns true if @context currently has defined the given class
	// name.
	HasClass(c StyleContext, className string) bool
	// HasRegion returns true if @context has the region defined. If
	// @flags_return is not nil, it is set to the flags affecting the region.
	HasRegion(c StyleContext, regionName string) (flagsReturn *RegionFlags, ok bool)
	// Invalidate invalidates @context style information, so it will be
	// reconstructed again. It is useful if you modify the @context and need the
	// new information immediately.
	Invalidate(c StyleContext)
	// ListClasses returns the list of classes currently defined in @context.
	ListClasses(c StyleContext)
	// ListRegions returns the list of regions currently defined in @context.
	ListRegions(c StyleContext)
	// LookupColor looks up and resolves a color name in the @context color map.
	LookupColor(c StyleContext, colorName string) (color *gdk.RGBA, ok bool)
	// LookupIconSet looks up @stock_id in the icon factories associated to
	// @context and the default icon factory, returning an icon set if found,
	// otherwise nil.
	LookupIconSet(c StyleContext, stockID string)
	// NotifyStateChange notifies a state change on @context, so if the current
	// style makes use of transition animations, one will be started so all
	// rendered elements under @region_id are animated for state @state being
	// set to value @state_value.
	//
	// The @window parameter is used in order to invalidate the rendered area as
	// the animation runs, so make sure it is the same window that is being
	// rendered on by the gtk_render_*() functions.
	//
	// If @region_id is nil, all rendered elements using @context will be
	// affected by this state transition.
	//
	// As a practical example, a Button notifying a state transition on the
	// prelight state: |[ <!-- language="C" -->
	// gtk_style_context_notify_state_change (context, gtk_widget_get_window
	// (widget), NULL, GTK_STATE_PRELIGHT, button->in_button); ]|
	//
	// Can be handled in the CSS file like this: |[ <!-- language="CSS" -->
	// button { background-color: #f00 }
	//
	// button:hover { background-color: #fff; transition: 200ms linear } ]|
	//
	// This combination will animate the button background from red to white if
	// a pointer enters the button, and back to red if the pointer leaves the
	// button.
	//
	// Note that @state is used when finding the transition parameters, which is
	// why the style places the transition under the :hover pseudo-class.
	NotifyStateChange(c StyleContext, window gdk.Window, regionID interface{}, state StateType, stateValue bool)
	// PopAnimatableRegion pops an animatable region from @context. See
	// gtk_style_context_push_animatable_region().
	PopAnimatableRegion(c StyleContext)
	// PushAnimatableRegion pushes an animatable region, so all further
	// gtk_render_*() calls between this call and the following
	// gtk_style_context_pop_animatable_region() will potentially show
	// transition animations for this region if
	// gtk_style_context_notify_state_change() is called for a given state, and
	// the current theme/style defines transition animations for state changes.
	//
	// The @region_id used must be unique in @context so the themes can uniquely
	// identify rendered elements subject to a state transition.
	PushAnimatableRegion(c StyleContext, regionID interface{})
	// RemoveClass removes @class_name from @context.
	RemoveClass(c StyleContext, className string)
	// RemoveProvider removes @provider from the style providers list in
	// @context.
	RemoveProvider(c StyleContext, provider StyleProvider)
	// RemoveRegion removes a region from @context.
	RemoveRegion(c StyleContext, regionName string)
	// Restore restores @context state to a previous stage. See
	// gtk_style_context_save().
	Restore(c StyleContext)
	// Save saves the @context state, so temporary modifications done through
	// gtk_style_context_add_class(), gtk_style_context_remove_class(),
	// gtk_style_context_set_state(), etc. can quickly be reverted in one go
	// through gtk_style_context_restore().
	//
	// The matching call to gtk_style_context_restore() must be done before GTK
	// returns to the main loop.
	Save(c StyleContext)
	// ScrollAnimations: this function is analogous to gdk_window_scroll(), and
	// should be called together with it so the invalidation areas for any
	// ongoing animation are scrolled together with it.
	ScrollAnimations(c StyleContext, window gdk.Window, dx int, dy int)
	// SetBackground sets the background of @window to the background pattern or
	// color specified in @context for its current state.
	SetBackground(c StyleContext, window gdk.Window)
	// SetDirection sets the reading direction for rendering purposes.
	//
	// If you are using a StyleContext returned from
	// gtk_widget_get_style_context(), you do not need to call this yourself.
	SetDirection(c StyleContext, direction TextDirection)
	// SetFrameClock attaches @context to the given frame clock.
	//
	// The frame clock is used for the timing of animations.
	//
	// If you are using a StyleContext returned from
	// gtk_widget_get_style_context(), you do not need to call this yourself.
	SetFrameClock(c StyleContext, frameClock gdk.FrameClock)
	// SetJunctionSides sets the sides where rendered elements (mostly through
	// gtk_render_frame()) will visually connect with other visual elements.
	//
	// This is merely a hint that may or may not be honored by themes.
	//
	// Container widgets are expected to set junction hints as appropriate for
	// their children, so it should not normally be necessary to call this
	// function manually.
	SetJunctionSides(c StyleContext, sides JunctionSides)
	// SetParent sets the parent style context for @context. The parent style
	// context is used to implement inheritance
	// (http://www.w3.org/TR/css3-cascade/#inheritance) of properties.
	//
	// If you are using a StyleContext returned from
	// gtk_widget_get_style_context(), the parent will be set for you.
	SetParent(c StyleContext, parent StyleContext)
	// SetPath sets the WidgetPath used for style matching. As a consequence,
	// the style will be regenerated to match the new given path.
	//
	// If you are using a StyleContext returned from
	// gtk_widget_get_style_context(), you do not need to call this yourself.
	SetPath(c StyleContext, path *WidgetPath)
	// SetScale sets the scale to use when getting image assets for the style.
	SetScale(c StyleContext, scale int)
	// SetScreen attaches @context to the given screen.
	//
	// The screen is used to add style information from “global” style
	// providers, such as the screen’s Settings instance.
	//
	// If you are using a StyleContext returned from
	// gtk_widget_get_style_context(), you do not need to call this yourself.
	SetScreen(c StyleContext, screen gdk.Screen)
	// SetState sets the state to be used for style matching.
	SetState(c StyleContext, flags StateFlags)
	// StateIsRunning returns true if there is a transition animation running
	// for the current region (see gtk_style_context_push_animatable_region()).
	//
	// If @progress is not nil, the animation progress will be returned there,
	// 0.0 means the state is closest to being unset, while 1.0 means it’s
	// closest to being set. This means transition animation will run from 0 to
	// 1 when @state is being set and from 1 to 0 when it’s being unset.
	StateIsRunning(c StyleContext, state StateType) (progress float64, ok bool)
	// String converts the style context into a string representation.
	//
	// The string representation always includes information about the name,
	// state, id, visibility and style classes of the CSS node that is backing
	// @context. Depending on the flags, more information may be included.
	//
	// This function is intended for testing and debugging of the CSS
	// implementation in GTK+. There are no guarantees about the format of the
	// returned string, it may change.
	String(c StyleContext, flags StyleContextPrintFlags)
}

// styleContext implements the StyleContext interface.
type styleContext struct {
	gextras.Objector
}

var _ StyleContext = (*styleContext)(nil)

// WrapStyleContext wraps a GObject to the right type. It is
// primarily used internally.
func WrapStyleContext(obj *externglib.Object) StyleContext {
	return StyleContext{
		Objector: obj,
	}
}

func marshalStyleContext(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapStyleContext(obj), nil
}

// NewStyleContext constructs a class StyleContext.
func NewStyleContext() {
	C.gtk_style_context_new()
}

// AddClass adds a style class to @context, so posterior calls to
// gtk_style_context_get() or any of the gtk_render_*() functions will make
// use of this new class for styling.
//
// In the CSS file format, a Entry defining a “search” class, would be
// matched by:
//
// |[ <!-- language="CSS" --> entry.search { ... } ]|
//
// While any widget defining a “search” class would be matched by: |[ <!--
// language="CSS" --> .search { ... } ]|
func (c styleContext) AddClass(c StyleContext, className string) {
	var arg0 *C.GtkStyleContext
	var arg1 *C.gchar

	arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	arg1 = (*C.gchar)(C.CString(className))
	defer C.free(unsafe.Pointer(arg1))

	C.gtk_style_context_add_class(arg0, arg1)
}

// AddProvider adds a style provider to @context, to be used in style
// construction. Note that a style provider added by this function only
// affects the style of the widget to which @context belongs. If you want to
// affect the style of all widgets, use
// gtk_style_context_add_provider_for_screen().
//
// Note: If both priorities are the same, a StyleProvider added through this
// function takes precedence over another added through
// gtk_style_context_add_provider_for_screen().
func (c styleContext) AddProvider(c StyleContext, provider StyleProvider, priority uint) {
	var arg0 *C.GtkStyleContext
	var arg1 *C.GtkStyleProvider
	var arg2 C.guint

	arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	arg1 = (*C.GtkStyleProvider)(unsafe.Pointer(provider.Native()))
	arg2 = C.guint(priority)

	C.gtk_style_context_add_provider(arg0, arg1, arg2)
}

// AddRegion adds a region to @context, so posterior calls to
// gtk_style_context_get() or any of the gtk_render_*() functions will make
// use of this new region for styling.
//
// In the CSS file format, a TreeView defining a “row” region, would be
// matched by:
//
// |[ <!-- language="CSS" --> treeview row { ... } ]|
//
// Pseudo-classes are used for matching @flags, so the two following rules:
// |[ <!-- language="CSS" --> treeview row:nth-child(even) { ... } treeview
// row:nth-child(odd) { ... } ]|
//
// would apply to even and odd rows, respectively.
//
// Region names must only contain lowercase letters and “-”, starting always
// with a lowercase letter.
func (c styleContext) AddRegion(c StyleContext, regionName string, flags RegionFlags) {
	var arg0 *C.GtkStyleContext
	var arg1 *C.gchar
	var arg2 C.GtkRegionFlags

	arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	arg1 = (*C.gchar)(C.CString(regionName))
	defer C.free(unsafe.Pointer(arg1))
	arg2 = (C.GtkRegionFlags)(flags)

	C.gtk_style_context_add_region(arg0, arg1, arg2)
}

// CancelAnimations stops all running animations for @region_id and all
// animatable regions underneath.
//
// A nil @region_id will stop all ongoing animations in @context, when
// dealing with a StyleContext obtained through
// gtk_widget_get_style_context(), this is normally done for you in all
// circumstances you would expect all widget to be stopped, so this should
// be only used in complex widgets with different animatable regions.
func (c styleContext) CancelAnimations(c StyleContext, regionID interface{}) {
	var arg0 *C.GtkStyleContext
	var arg1 C.gpointer

	arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	arg1 = C.gpointer(regionID)

	C.gtk_style_context_cancel_animations(arg0, arg1)
}

// BackgroundColor gets the background color for a given state.
//
// This function is far less useful than it seems, and it should not be used
// in newly written code. CSS has no concept of "background color", as a
// background can be an image, or a gradient, or any other pattern including
// solid colors.
//
// The only reason why you would call
// gtk_style_context_get_background_color() is to use the returned value to
// draw the background with it; the correct way to achieve this result is to
// use gtk_render_background() instead, along with CSS style classes to
// modify the color to be rendered.
func (c styleContext) BackgroundColor(c StyleContext, state StateFlags) *gdk.RGBA {
	var arg0 *C.GtkStyleContext
	var arg1 C.GtkStateFlags

	arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	arg1 = (C.GtkStateFlags)(state)

	var arg2 C.GdkRGBA
	var color *gdk.RGBA

	C.gtk_style_context_get_background_color(arg0, arg1, &arg2)

	color = gdk.WrapRGBA(unsafe.Pointer(&arg2))

	return color
}

// Border gets the border for a given state as a Border.
//
// See gtk_style_context_get_property() and K_STYLE_PROPERTY_BORDER_WIDTH
// for details.
func (c styleContext) Border(c StyleContext, state StateFlags) *Border {
	var arg0 *C.GtkStyleContext
	var arg1 C.GtkStateFlags

	arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	arg1 = (C.GtkStateFlags)(state)

	var arg2 C.GtkBorder
	var border *Border

	C.gtk_style_context_get_border(arg0, arg1, &arg2)

	border = WrapBorder(unsafe.Pointer(&arg2))

	return border
}

// BorderColor gets the border color for a given state.
func (c styleContext) BorderColor(c StyleContext, state StateFlags) *gdk.RGBA {
	var arg0 *C.GtkStyleContext
	var arg1 C.GtkStateFlags

	arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	arg1 = (C.GtkStateFlags)(state)

	var arg2 C.GdkRGBA
	var color *gdk.RGBA

	C.gtk_style_context_get_border_color(arg0, arg1, &arg2)

	color = gdk.WrapRGBA(unsafe.Pointer(&arg2))

	return color
}

// Color gets the foreground color for a given state.
//
// See gtk_style_context_get_property() and K_STYLE_PROPERTY_COLOR for
// details.
func (c styleContext) Color(c StyleContext, state StateFlags) *gdk.RGBA {
	var arg0 *C.GtkStyleContext
	var arg1 C.GtkStateFlags

	arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	arg1 = (C.GtkStateFlags)(state)

	var arg2 C.GdkRGBA
	var color *gdk.RGBA

	C.gtk_style_context_get_color(arg0, arg1, &arg2)

	color = gdk.WrapRGBA(unsafe.Pointer(&arg2))

	return color
}

// Direction returns the widget direction used for rendering.
func (c styleContext) Direction(c StyleContext) {
	var arg0 *C.GtkStyleContext

	arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))

	C.gtk_style_context_get_direction(arg0)
}

// Font returns the font description for a given state. The returned object
// is const and will remain valid until the StyleContext::changed signal
// happens.
func (c styleContext) Font(c StyleContext, state StateFlags) {
	var arg0 *C.GtkStyleContext
	var arg1 C.GtkStateFlags

	arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	arg1 = (C.GtkStateFlags)(state)

	C.gtk_style_context_get_font(arg0, arg1)
}

// FrameClock returns the FrameClock to which @context is attached.
func (c styleContext) FrameClock(c StyleContext) {
	var arg0 *C.GtkStyleContext

	arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))

	C.gtk_style_context_get_frame_clock(arg0)
}

// JunctionSides returns the sides where rendered elements connect visually
// with others.
func (c styleContext) JunctionSides(c StyleContext) {
	var arg0 *C.GtkStyleContext

	arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))

	C.gtk_style_context_get_junction_sides(arg0)
}

// Margin gets the margin for a given state as a Border. See
// gtk_style_property_get() and K_STYLE_PROPERTY_MARGIN for details.
func (c styleContext) Margin(c StyleContext, state StateFlags) *Border {
	var arg0 *C.GtkStyleContext
	var arg1 C.GtkStateFlags

	arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	arg1 = (C.GtkStateFlags)(state)

	var arg2 C.GtkBorder
	var margin *Border

	C.gtk_style_context_get_margin(arg0, arg1, &arg2)

	margin = WrapBorder(unsafe.Pointer(&arg2))

	return margin
}

// Padding gets the padding for a given state as a Border. See
// gtk_style_context_get() and K_STYLE_PROPERTY_PADDING for details.
func (c styleContext) Padding(c StyleContext, state StateFlags) *Border {
	var arg0 *C.GtkStyleContext
	var arg1 C.GtkStateFlags

	arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	arg1 = (C.GtkStateFlags)(state)

	var arg2 C.GtkBorder
	var padding *Border

	C.gtk_style_context_get_padding(arg0, arg1, &arg2)

	padding = WrapBorder(unsafe.Pointer(&arg2))

	return padding
}

// Parent gets the parent context set via gtk_style_context_set_parent().
// See that function for details.
func (c styleContext) Parent(c StyleContext) {
	var arg0 *C.GtkStyleContext

	arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))

	C.gtk_style_context_get_parent(arg0)
}

// Path returns the widget path used for style matching.
func (c styleContext) Path(c StyleContext) {
	var arg0 *C.GtkStyleContext

	arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))

	C.gtk_style_context_get_path(arg0)
}

// Property gets a style property from @context for the given state.
//
// Note that not all CSS properties that are supported by GTK+ can be
// retrieved in this way, since they may not be representable as #GValue.
// GTK+ defines macros for a number of properties that can be used with this
// function.
//
// Note that passing a state other than the current state of @context is not
// recommended unless the style context has been saved with
// gtk_style_context_save().
//
// When @value is no longer needed, g_value_unset() must be called to free
// any allocated memory.
func (c styleContext) Property(c StyleContext, property string, state StateFlags) *externglib.Value {
	var arg0 *C.GtkStyleContext
	var arg1 *C.gchar
	var arg2 C.GtkStateFlags

	arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	arg1 = (*C.gchar)(C.CString(property))
	defer C.free(unsafe.Pointer(arg1))
	arg2 = (C.GtkStateFlags)(state)

	var arg3 C.GValue
	var value *externglib.Value

	C.gtk_style_context_get_property(arg0, arg1, arg2, &arg3)

	value = externglib.ValueFromNative(unsafe.Pointer(&arg3))
	runtime.SetFinalizer(value, func(v *externglib.Value) {
		C.g_value_unset((*C.GValue)(v.GValue))
	})

	return value
}

// Scale returns the scale used for assets.
func (c styleContext) Scale(c StyleContext) {
	var arg0 *C.GtkStyleContext

	arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))

	C.gtk_style_context_get_scale(arg0)
}

// Screen returns the Screen to which @context is attached.
func (c styleContext) Screen(c StyleContext) {
	var arg0 *C.GtkStyleContext

	arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))

	C.gtk_style_context_get_screen(arg0)
}

// Section queries the location in the CSS where @property was defined for
// the current @context. Note that the state to be queried is taken from
// gtk_style_context_get_state().
//
// If the location is not available, nil will be returned. The location
// might not be available for various reasons, such as the property being
// overridden, @property not naming a supported CSS property or tracking of
// definitions being disabled for performance reasons.
//
// Shorthand CSS properties cannot be queried for a location and will always
// return nil.
func (c styleContext) Section(c StyleContext, property string) {
	var arg0 *C.GtkStyleContext
	var arg1 *C.gchar

	arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	arg1 = (*C.gchar)(C.CString(property))
	defer C.free(unsafe.Pointer(arg1))

	C.gtk_style_context_get_section(arg0, arg1)
}

// State returns the state used for style matching.
//
// This method should only be used to retrieve the StateFlags to pass to
// StyleContext methods, like gtk_style_context_get_padding(). If you need
// to retrieve the current state of a Widget, use
// gtk_widget_get_state_flags().
func (c styleContext) State(c StyleContext) {
	var arg0 *C.GtkStyleContext

	arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))

	C.gtk_style_context_get_state(arg0)
}

// StyleProperty gets the value for a widget style property.
//
// When @value is no longer needed, g_value_unset() must be called to free
// any allocated memory.
func (c styleContext) StyleProperty(c StyleContext, propertyName string, value *externglib.Value) {
	var arg0 *C.GtkStyleContext
	var arg1 *C.gchar
	var arg2 *C.GValue

	arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	arg1 = (*C.gchar)(C.CString(propertyName))
	defer C.free(unsafe.Pointer(arg1))
	arg2 = (*C.GValue)(value.GValue)

	C.gtk_style_context_get_style_property(arg0, arg1, arg2)
}

// HasClass returns true if @context currently has defined the given class
// name.
func (c styleContext) HasClass(c StyleContext, className string) bool {
	var arg0 *C.GtkStyleContext
	var arg1 *C.gchar

	arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	arg1 = (*C.gchar)(C.CString(className))
	defer C.free(unsafe.Pointer(arg1))

	var cret C.gboolean
	var ok bool

	cret = C.gtk_style_context_has_class(arg0, arg1)

	if cret {
		ok = true
	}

	return ok
}

// HasRegion returns true if @context has the region defined. If
// @flags_return is not nil, it is set to the flags affecting the region.
func (c styleContext) HasRegion(c StyleContext, regionName string) (flagsReturn *RegionFlags, ok bool) {
	var arg0 *C.GtkStyleContext
	var arg1 *C.gchar

	arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	arg1 = (*C.gchar)(C.CString(regionName))
	defer C.free(unsafe.Pointer(arg1))

	var arg2 C.GtkRegionFlags
	var flagsReturn *RegionFlags
	var cret C.gboolean
	var ok bool

	cret = C.gtk_style_context_has_region(arg0, arg1, &arg2)

	flagsReturn = *RegionFlags(&arg2)
	if cret {
		ok = true
	}

	return flagsReturn, ok
}

// Invalidate invalidates @context style information, so it will be
// reconstructed again. It is useful if you modify the @context and need the
// new information immediately.
func (c styleContext) Invalidate(c StyleContext) {
	var arg0 *C.GtkStyleContext

	arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))

	C.gtk_style_context_invalidate(arg0)
}

// ListClasses returns the list of classes currently defined in @context.
func (c styleContext) ListClasses(c StyleContext) {
	var arg0 *C.GtkStyleContext

	arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))

	C.gtk_style_context_list_classes(arg0)
}

// ListRegions returns the list of regions currently defined in @context.
func (c styleContext) ListRegions(c StyleContext) {
	var arg0 *C.GtkStyleContext

	arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))

	C.gtk_style_context_list_regions(arg0)
}

// LookupColor looks up and resolves a color name in the @context color map.
func (c styleContext) LookupColor(c StyleContext, colorName string) (color *gdk.RGBA, ok bool) {
	var arg0 *C.GtkStyleContext
	var arg1 *C.gchar

	arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	arg1 = (*C.gchar)(C.CString(colorName))
	defer C.free(unsafe.Pointer(arg1))

	var arg2 C.GdkRGBA
	var color *gdk.RGBA
	var cret C.gboolean
	var ok bool

	cret = C.gtk_style_context_lookup_color(arg0, arg1, &arg2)

	color = gdk.WrapRGBA(unsafe.Pointer(&arg2))
	if cret {
		ok = true
	}

	return color, ok
}

// LookupIconSet looks up @stock_id in the icon factories associated to
// @context and the default icon factory, returning an icon set if found,
// otherwise nil.
func (c styleContext) LookupIconSet(c StyleContext, stockID string) {
	var arg0 *C.GtkStyleContext
	var arg1 *C.gchar

	arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	arg1 = (*C.gchar)(C.CString(stockID))
	defer C.free(unsafe.Pointer(arg1))

	C.gtk_style_context_lookup_icon_set(arg0, arg1)
}

// NotifyStateChange notifies a state change on @context, so if the current
// style makes use of transition animations, one will be started so all
// rendered elements under @region_id are animated for state @state being
// set to value @state_value.
//
// The @window parameter is used in order to invalidate the rendered area as
// the animation runs, so make sure it is the same window that is being
// rendered on by the gtk_render_*() functions.
//
// If @region_id is nil, all rendered elements using @context will be
// affected by this state transition.
//
// As a practical example, a Button notifying a state transition on the
// prelight state: |[ <!-- language="C" -->
// gtk_style_context_notify_state_change (context, gtk_widget_get_window
// (widget), NULL, GTK_STATE_PRELIGHT, button->in_button); ]|
//
// Can be handled in the CSS file like this: |[ <!-- language="CSS" -->
// button { background-color: #f00 }
//
// button:hover { background-color: #fff; transition: 200ms linear } ]|
//
// This combination will animate the button background from red to white if
// a pointer enters the button, and back to red if the pointer leaves the
// button.
//
// Note that @state is used when finding the transition parameters, which is
// why the style places the transition under the :hover pseudo-class.
func (c styleContext) NotifyStateChange(c StyleContext, window gdk.Window, regionID interface{}, state StateType, stateValue bool) {
	var arg0 *C.GtkStyleContext
	var arg1 *C.GdkWindow
	var arg2 C.gpointer
	var arg3 C.GtkStateType
	var arg4 C.gboolean

	arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	arg1 = (*C.GdkWindow)(unsafe.Pointer(window.Native()))
	arg2 = C.gpointer(regionID)
	arg3 = (C.GtkStateType)(state)
	if stateValue {
		arg4 = C.gboolean(1)
	}

	C.gtk_style_context_notify_state_change(arg0, arg1, arg2, arg3, arg4)
}

// PopAnimatableRegion pops an animatable region from @context. See
// gtk_style_context_push_animatable_region().
func (c styleContext) PopAnimatableRegion(c StyleContext) {
	var arg0 *C.GtkStyleContext

	arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))

	C.gtk_style_context_pop_animatable_region(arg0)
}

// PushAnimatableRegion pushes an animatable region, so all further
// gtk_render_*() calls between this call and the following
// gtk_style_context_pop_animatable_region() will potentially show
// transition animations for this region if
// gtk_style_context_notify_state_change() is called for a given state, and
// the current theme/style defines transition animations for state changes.
//
// The @region_id used must be unique in @context so the themes can uniquely
// identify rendered elements subject to a state transition.
func (c styleContext) PushAnimatableRegion(c StyleContext, regionID interface{}) {
	var arg0 *C.GtkStyleContext
	var arg1 C.gpointer

	arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	arg1 = C.gpointer(regionID)

	C.gtk_style_context_push_animatable_region(arg0, arg1)
}

// RemoveClass removes @class_name from @context.
func (c styleContext) RemoveClass(c StyleContext, className string) {
	var arg0 *C.GtkStyleContext
	var arg1 *C.gchar

	arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	arg1 = (*C.gchar)(C.CString(className))
	defer C.free(unsafe.Pointer(arg1))

	C.gtk_style_context_remove_class(arg0, arg1)
}

// RemoveProvider removes @provider from the style providers list in
// @context.
func (c styleContext) RemoveProvider(c StyleContext, provider StyleProvider) {
	var arg0 *C.GtkStyleContext
	var arg1 *C.GtkStyleProvider

	arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	arg1 = (*C.GtkStyleProvider)(unsafe.Pointer(provider.Native()))

	C.gtk_style_context_remove_provider(arg0, arg1)
}

// RemoveRegion removes a region from @context.
func (c styleContext) RemoveRegion(c StyleContext, regionName string) {
	var arg0 *C.GtkStyleContext
	var arg1 *C.gchar

	arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	arg1 = (*C.gchar)(C.CString(regionName))
	defer C.free(unsafe.Pointer(arg1))

	C.gtk_style_context_remove_region(arg0, arg1)
}

// Restore restores @context state to a previous stage. See
// gtk_style_context_save().
func (c styleContext) Restore(c StyleContext) {
	var arg0 *C.GtkStyleContext

	arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))

	C.gtk_style_context_restore(arg0)
}

// Save saves the @context state, so temporary modifications done through
// gtk_style_context_add_class(), gtk_style_context_remove_class(),
// gtk_style_context_set_state(), etc. can quickly be reverted in one go
// through gtk_style_context_restore().
//
// The matching call to gtk_style_context_restore() must be done before GTK
// returns to the main loop.
func (c styleContext) Save(c StyleContext) {
	var arg0 *C.GtkStyleContext

	arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))

	C.gtk_style_context_save(arg0)
}

// ScrollAnimations: this function is analogous to gdk_window_scroll(), and
// should be called together with it so the invalidation areas for any
// ongoing animation are scrolled together with it.
func (c styleContext) ScrollAnimations(c StyleContext, window gdk.Window, dx int, dy int) {
	var arg0 *C.GtkStyleContext
	var arg1 *C.GdkWindow
	var arg2 C.gint
	var arg3 C.gint

	arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	arg1 = (*C.GdkWindow)(unsafe.Pointer(window.Native()))
	arg2 = C.gint(dx)
	arg3 = C.gint(dy)

	C.gtk_style_context_scroll_animations(arg0, arg1, arg2, arg3)
}

// SetBackground sets the background of @window to the background pattern or
// color specified in @context for its current state.
func (c styleContext) SetBackground(c StyleContext, window gdk.Window) {
	var arg0 *C.GtkStyleContext
	var arg1 *C.GdkWindow

	arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	arg1 = (*C.GdkWindow)(unsafe.Pointer(window.Native()))

	C.gtk_style_context_set_background(arg0, arg1)
}

// SetDirection sets the reading direction for rendering purposes.
//
// If you are using a StyleContext returned from
// gtk_widget_get_style_context(), you do not need to call this yourself.
func (c styleContext) SetDirection(c StyleContext, direction TextDirection) {
	var arg0 *C.GtkStyleContext
	var arg1 C.GtkTextDirection

	arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	arg1 = (C.GtkTextDirection)(direction)

	C.gtk_style_context_set_direction(arg0, arg1)
}

// SetFrameClock attaches @context to the given frame clock.
//
// The frame clock is used for the timing of animations.
//
// If you are using a StyleContext returned from
// gtk_widget_get_style_context(), you do not need to call this yourself.
func (c styleContext) SetFrameClock(c StyleContext, frameClock gdk.FrameClock) {
	var arg0 *C.GtkStyleContext
	var arg1 *C.GdkFrameClock

	arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	arg1 = (*C.GdkFrameClock)(unsafe.Pointer(frameClock.Native()))

	C.gtk_style_context_set_frame_clock(arg0, arg1)
}

// SetJunctionSides sets the sides where rendered elements (mostly through
// gtk_render_frame()) will visually connect with other visual elements.
//
// This is merely a hint that may or may not be honored by themes.
//
// Container widgets are expected to set junction hints as appropriate for
// their children, so it should not normally be necessary to call this
// function manually.
func (c styleContext) SetJunctionSides(c StyleContext, sides JunctionSides) {
	var arg0 *C.GtkStyleContext
	var arg1 C.GtkJunctionSides

	arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	arg1 = (C.GtkJunctionSides)(sides)

	C.gtk_style_context_set_junction_sides(arg0, arg1)
}

// SetParent sets the parent style context for @context. The parent style
// context is used to implement inheritance
// (http://www.w3.org/TR/css3-cascade/#inheritance) of properties.
//
// If you are using a StyleContext returned from
// gtk_widget_get_style_context(), the parent will be set for you.
func (c styleContext) SetParent(c StyleContext, parent StyleContext) {
	var arg0 *C.GtkStyleContext
	var arg1 *C.GtkStyleContext

	arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	arg1 = (*C.GtkStyleContext)(unsafe.Pointer(parent.Native()))

	C.gtk_style_context_set_parent(arg0, arg1)
}

// SetPath sets the WidgetPath used for style matching. As a consequence,
// the style will be regenerated to match the new given path.
//
// If you are using a StyleContext returned from
// gtk_widget_get_style_context(), you do not need to call this yourself.
func (c styleContext) SetPath(c StyleContext, path *WidgetPath) {
	var arg0 *C.GtkStyleContext
	var arg1 *C.GtkWidgetPath

	arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	arg1 = (*C.GtkWidgetPath)(unsafe.Pointer(path.Native()))

	C.gtk_style_context_set_path(arg0, arg1)
}

// SetScale sets the scale to use when getting image assets for the style.
func (c styleContext) SetScale(c StyleContext, scale int) {
	var arg0 *C.GtkStyleContext
	var arg1 C.gint

	arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	arg1 = C.gint(scale)

	C.gtk_style_context_set_scale(arg0, arg1)
}

// SetScreen attaches @context to the given screen.
//
// The screen is used to add style information from “global” style
// providers, such as the screen’s Settings instance.
//
// If you are using a StyleContext returned from
// gtk_widget_get_style_context(), you do not need to call this yourself.
func (c styleContext) SetScreen(c StyleContext, screen gdk.Screen) {
	var arg0 *C.GtkStyleContext
	var arg1 *C.GdkScreen

	arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	arg1 = (*C.GdkScreen)(unsafe.Pointer(screen.Native()))

	C.gtk_style_context_set_screen(arg0, arg1)
}

// SetState sets the state to be used for style matching.
func (c styleContext) SetState(c StyleContext, flags StateFlags) {
	var arg0 *C.GtkStyleContext
	var arg1 C.GtkStateFlags

	arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	arg1 = (C.GtkStateFlags)(flags)

	C.gtk_style_context_set_state(arg0, arg1)
}

// StateIsRunning returns true if there is a transition animation running
// for the current region (see gtk_style_context_push_animatable_region()).
//
// If @progress is not nil, the animation progress will be returned there,
// 0.0 means the state is closest to being unset, while 1.0 means it’s
// closest to being set. This means transition animation will run from 0 to
// 1 when @state is being set and from 1 to 0 when it’s being unset.
func (c styleContext) StateIsRunning(c StyleContext, state StateType) (progress float64, ok bool) {
	var arg0 *C.GtkStyleContext
	var arg1 C.GtkStateType

	arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	arg1 = (C.GtkStateType)(state)

	var arg2 C.gdouble
	var progress float64
	var cret C.gboolean
	var ok bool

	cret = C.gtk_style_context_state_is_running(arg0, arg1, &arg2)

	progress = float64(&arg2)
	if cret {
		ok = true
	}

	return progress, ok
}

// String converts the style context into a string representation.
//
// The string representation always includes information about the name,
// state, id, visibility and style classes of the CSS node that is backing
// @context. Depending on the flags, more information may be included.
//
// This function is intended for testing and debugging of the CSS
// implementation in GTK+. There are no guarantees about the format of the
// returned string, it may change.
func (c styleContext) String(c StyleContext, flags StyleContextPrintFlags) {
	var arg0 *C.GtkStyleContext
	var arg1 C.GtkStyleContextPrintFlags

	arg0 = (*C.GtkStyleContext)(unsafe.Pointer(c.Native()))
	arg1 = (C.GtkStyleContextPrintFlags)(flags)

	C.gtk_style_context_to_string(arg0, arg1)
}
