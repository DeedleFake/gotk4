// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <stdbool.h>
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_event_box_get_type()), F: marshalEventBox},
	})
}

// EventBox: the EventBox widget is a subclass of Bin which also has its own
// window. It is useful since it allows you to catch events for widgets which do
// not have their own window.
type EventBox interface {
	Bin
	Buildable

	// AboveChild returns whether the event box window is above or below the
	// windows of its child. See gtk_event_box_set_above_child() for details.
	AboveChild() bool
	// VisibleWindow returns whether the event box has a visible window. See
	// gtk_event_box_set_visible_window() for details.
	VisibleWindow() bool
	// SetAboveChild: set whether the event box window is positioned above the
	// windows of its child, as opposed to below it. If the window is above, all
	// events inside the event box will go to the event box. If the window is
	// below, events in windows of child widgets will first got to that widget,
	// and then to its parents.
	//
	// The default is to keep the window below the child.
	SetAboveChild(aboveChild bool)
	// SetVisibleWindow: set whether the event box uses a visible or invisible
	// child window. The default is to use visible windows.
	//
	// In an invisible window event box, the window that the event box creates
	// is a GDK_INPUT_ONLY window, which means that it is invisible and only
	// serves to receive events.
	//
	// A visible window event box creates a visible (GDK_INPUT_OUTPUT) window
	// that acts as the parent window for all the widgets contained in the event
	// box.
	//
	// You should generally make your event box invisible if you just want to
	// trap events. Creating a visible window may cause artifacts that are
	// visible to the user, especially if the user is using a theme with
	// gradients or pixmaps.
	//
	// The main reason to create a non input-only event box is if you want to
	// set the background to a different color or draw on it.
	//
	// There is one unexpected issue for an invisible event box that has its
	// window below the child. (See gtk_event_box_set_above_child().) Since the
	// input-only window is not an ancestor window of any windows that
	// descendent widgets of the event box create, events on these windows
	// aren’t propagated up by the windowing system, but only by GTK+. The
	// practical effect of this is if an event isn’t in the event mask for the
	// descendant window (see gtk_widget_add_events()), it won’t be received by
	// the event box.
	//
	// This problem doesn’t occur for visible event boxes, because in that case,
	// the event box window is actually the ancestor of the descendant windows,
	// not just at the same place on the screen.
	SetVisibleWindow(visibleWindow bool)
}

// eventBox implements the EventBox interface.
type eventBox struct {
	Bin
	Buildable
}

var _ EventBox = (*eventBox)(nil)

// WrapEventBox wraps a GObject to the right type. It is
// primarily used internally.
func WrapEventBox(obj *externglib.Object) EventBox {
	return EventBox{
		Bin:       WrapBin(obj),
		Buildable: WrapBuildable(obj),
	}
}

func marshalEventBox(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapEventBox(obj), nil
}

// NewEventBox constructs a class EventBox.
func NewEventBox() EventBox {
	var cret C.GtkEventBox
	var goret1 EventBox

	cret = C.gtk_event_box_new()

	goret1 = gextras.CastObject(externglib.Take(unsafe.Pointer(cret.Native()))).(EventBox)

	return goret1
}

// AboveChild returns whether the event box window is above or below the
// windows of its child. See gtk_event_box_set_above_child() for details.
func (e eventBox) AboveChild() bool {
	var arg0 *C.GtkEventBox

	arg0 = (*C.GtkEventBox)(unsafe.Pointer(e.Native()))

	var cret C.gboolean
	var goret1 bool

	cret = C.gtk_event_box_get_above_child(arg0)

	goret1 = C.bool(cret) != C.false

	return goret1
}

// VisibleWindow returns whether the event box has a visible window. See
// gtk_event_box_set_visible_window() for details.
func (e eventBox) VisibleWindow() bool {
	var arg0 *C.GtkEventBox

	arg0 = (*C.GtkEventBox)(unsafe.Pointer(e.Native()))

	var cret C.gboolean
	var goret1 bool

	cret = C.gtk_event_box_get_visible_window(arg0)

	goret1 = C.bool(cret) != C.false

	return goret1
}

// SetAboveChild: set whether the event box window is positioned above the
// windows of its child, as opposed to below it. If the window is above, all
// events inside the event box will go to the event box. If the window is
// below, events in windows of child widgets will first got to that widget,
// and then to its parents.
//
// The default is to keep the window below the child.
func (e eventBox) SetAboveChild(aboveChild bool) {
	var arg0 *C.GtkEventBox
	var arg1 C.gboolean

	arg0 = (*C.GtkEventBox)(unsafe.Pointer(e.Native()))
	if aboveChild {
		arg1 = C.gboolean(1)
	}

	C.gtk_event_box_set_above_child(arg0, aboveChild)
}

// SetVisibleWindow: set whether the event box uses a visible or invisible
// child window. The default is to use visible windows.
//
// In an invisible window event box, the window that the event box creates
// is a GDK_INPUT_ONLY window, which means that it is invisible and only
// serves to receive events.
//
// A visible window event box creates a visible (GDK_INPUT_OUTPUT) window
// that acts as the parent window for all the widgets contained in the event
// box.
//
// You should generally make your event box invisible if you just want to
// trap events. Creating a visible window may cause artifacts that are
// visible to the user, especially if the user is using a theme with
// gradients or pixmaps.
//
// The main reason to create a non input-only event box is if you want to
// set the background to a different color or draw on it.
//
// There is one unexpected issue for an invisible event box that has its
// window below the child. (See gtk_event_box_set_above_child().) Since the
// input-only window is not an ancestor window of any windows that
// descendent widgets of the event box create, events on these windows
// aren’t propagated up by the windowing system, but only by GTK+. The
// practical effect of this is if an event isn’t in the event mask for the
// descendant window (see gtk_widget_add_events()), it won’t be received by
// the event box.
//
// This problem doesn’t occur for visible event boxes, because in that case,
// the event box window is actually the ancestor of the descendant windows,
// not just at the same place on the screen.
func (e eventBox) SetVisibleWindow(visibleWindow bool) {
	var arg0 *C.GtkEventBox
	var arg1 C.gboolean

	arg0 = (*C.GtkEventBox)(unsafe.Pointer(e.Native()))
	if visibleWindow {
		arg1 = C.gboolean(1)
	}

	C.gtk_event_box_set_visible_window(arg0, visibleWindow)
}

type EventBoxPrivate struct {
	native C.GtkEventBoxPrivate
}

// WrapEventBoxPrivate wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapEventBoxPrivate(ptr unsafe.Pointer) *EventBoxPrivate {
	if ptr == nil {
		return nil
	}

	return (*EventBoxPrivate)(ptr)
}

func marshalEventBoxPrivate(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapEventBoxPrivate(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (e *EventBoxPrivate) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}
