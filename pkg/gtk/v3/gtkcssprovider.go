// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_css_provider_get_type()), F: marshalCSSProvider},
	})
}

type CSSProviderPrivate struct {
	native C.GtkCssProviderPrivate
}

// WrapCSSProviderPrivate wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapCSSProviderPrivate(ptr unsafe.Pointer) *CSSProviderPrivate {
	if ptr == nil {
		return nil
	}

	return (*CSSProviderPrivate)(ptr)
}

func marshalCSSProviderPrivate(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapCSSProviderPrivate(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (c *CSSProviderPrivate) Native() unsafe.Pointer {
	return unsafe.Pointer(&c.native)
}

// CSSProvider: gtkCssProvider is an object implementing the StyleProvider
// interface. It is able to parse [CSS-like][css-overview] input in order to
// style widgets.
//
// An application can make GTK+ parse a specific CSS style sheet by calling
// gtk_css_provider_load_from_file() or gtk_css_provider_load_from_resource()
// and adding the provider with gtk_style_context_add_provider() or
// gtk_style_context_add_provider_for_screen().
//
// In addition, certain files will be read when GTK+ is initialized. First, the
// file `$XDG_CONFIG_HOME/gtk-3.0/gtk.css` is loaded if it exists. Then, GTK+
// loads the first existing file among
// `XDG_DATA_HOME/themes/THEME/gtk-VERSION/gtk.css`,
// `$HOME/.themes/THEME/gtk-VERSION/gtk.css`,
// `$XDG_DATA_DIRS/themes/THEME/gtk-VERSION/gtk.css` and
// `DATADIR/share/themes/THEME/gtk-VERSION/gtk.css`, where `THEME` is the name
// of the current theme (see the Settings:gtk-theme-name setting), `DATADIR` is
// the prefix configured when GTK+ was compiled (unless overridden by the
// `GTK_DATA_PREFIX` environment variable), and `VERSION` is the GTK+ version
// number. If no file is found for the current version, GTK+ tries older
// versions all the way back to 3.0.
//
// In the same way, GTK+ tries to load a gtk-keys.css file for the current key
// theme, as defined by Settings:gtk-key-theme-name.
type CSSProvider interface {
	gextras.Objector
	StyleProvider

	// LoadFromData loads @data into @css_provider, and by doing so clears any
	// previously loaded information.
	LoadFromData(data []byte) error
	// LoadFromFile loads the data contained in @file into @css_provider, making
	// it clear any previously loaded information.
	LoadFromFile(file gio.File) error
	// LoadFromPath loads the data contained in @path into @css_provider, making
	// it clear any previously loaded information.
	LoadFromPath(path string) error
	// LoadFromResource loads the data contained in the resource at
	// @resource_path into the CssProvider, clearing any previously loaded
	// information.
	//
	// To track errors while loading CSS, connect to the
	// CssProvider::parsing-error signal.
	LoadFromResource(resourcePath string)
	// String converts the @provider into a string representation in CSS format.
	//
	// Using gtk_css_provider_load_from_data() with the return value from this
	// function on a new provider created with gtk_css_provider_new() will
	// basically create a duplicate of this @provider.
	String() string
}

// cssProvider implements the CSSProvider interface.
type cssProvider struct {
	gextras.Objector
	StyleProvider
}

var _ CSSProvider = (*cssProvider)(nil)

// WrapCSSProvider wraps a GObject to the right type. It is
// primarily used internally.
func WrapCSSProvider(obj *externglib.Object) CSSProvider {
	return CSSProvider{
		Objector:      obj,
		StyleProvider: WrapStyleProvider(obj),
	}
}

func marshalCSSProvider(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapCSSProvider(obj), nil
}

// NewCSSProvider constructs a class CSSProvider.
func NewCSSProvider() CSSProvider {
	ret := C.gtk_css_provider_new()

	var ret0 CSSProvider

	ret0 = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(ret.Native()))).(CSSProvider)

	return ret0
}

// LoadFromData loads @data into @css_provider, and by doing so clears any
// previously loaded information.
func (c cssProvider) LoadFromData(data []byte) error {
	var arg0 *C.GtkCssProvider
	var arg1 *C.gchar
	var arg2 C.gssize
	var gError *C.GError

	arg0 = (*C.GtkCssProvider)(c.Native())
	arg1 = (*C.gchar)(unsafe.Pointer(&data[0]))
	arg2 = len(data)
	defer runtime.KeepAlive(data)

	ret := C.gtk_css_provider_load_from_data(arg0, arg1, arg2, &gError)

	var goError error

	if gError != nil {
		goError = fmt.Errorf("%d: %s", gError.code, C.GoString(gError.message))
		C.g_error_free(gError)
	}

	return goError
}

// LoadFromFile loads the data contained in @file into @css_provider, making
// it clear any previously loaded information.
func (c cssProvider) LoadFromFile(file gio.File) error {
	var arg0 *C.GtkCssProvider
	var arg1 *C.GFile
	var gError *C.GError

	arg0 = (*C.GtkCssProvider)(c.Native())
	arg1 = (*C.GFile)(file.Native())

	ret := C.gtk_css_provider_load_from_file(arg0, arg1, &gError)

	var goError error

	if gError != nil {
		goError = fmt.Errorf("%d: %s", gError.code, C.GoString(gError.message))
		C.g_error_free(gError)
	}

	return goError
}

// LoadFromPath loads the data contained in @path into @css_provider, making
// it clear any previously loaded information.
func (c cssProvider) LoadFromPath(path string) error {
	var arg0 *C.GtkCssProvider
	var arg1 *C.gchar
	var gError *C.GError

	arg0 = (*C.GtkCssProvider)(c.Native())
	arg1 = (*C.gchar)(C.CString(path))
	defer C.free(unsafe.Pointer(arg1))

	ret := C.gtk_css_provider_load_from_path(arg0, arg1, &gError)

	var goError error

	if gError != nil {
		goError = fmt.Errorf("%d: %s", gError.code, C.GoString(gError.message))
		C.g_error_free(gError)
	}

	return goError
}

// LoadFromResource loads the data contained in the resource at
// @resource_path into the CssProvider, clearing any previously loaded
// information.
//
// To track errors while loading CSS, connect to the
// CssProvider::parsing-error signal.
func (c cssProvider) LoadFromResource(resourcePath string) {
	var arg0 *C.GtkCssProvider
	var arg1 *C.gchar

	arg0 = (*C.GtkCssProvider)(c.Native())
	arg1 = (*C.gchar)(C.CString(resourcePath))
	defer C.free(unsafe.Pointer(arg1))

	C.gtk_css_provider_load_from_resource(arg0, arg1)
}

// String converts the @provider into a string representation in CSS format.
//
// Using gtk_css_provider_load_from_data() with the return value from this
// function on a new provider created with gtk_css_provider_new() will
// basically create a duplicate of this @provider.
func (p cssProvider) String() string {
	var arg0 *C.GtkCssProvider

	arg0 = (*C.GtkCssProvider)(p.Native())

	ret := C.gtk_css_provider_to_string(arg0)

	var ret0 string

	ret0 = C.GoString(ret)
	C.free(unsafe.Pointer(ret))

	return ret0
}
