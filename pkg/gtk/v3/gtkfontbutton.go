// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_font_button_get_type()), F: marshalFontButton},
	})
}

// FontButton: the FontButton is a button which displays the currently selected
// font an allows to open a font chooser dialog to change the font. It is
// suitable widget for selecting a font in a preference dialog.
//
//
// CSS nodes
//
// GtkFontButton has a single CSS node with name button and style class .font.
type FontButton interface {
	Button
	Actionable
	Activatable
	Buildable
	FontChooser

	// FontName retrieves the name of the currently selected font. This name
	// includes style and size information as well. If you want to render
	// something with the font, use this string with
	// pango_font_description_from_string() . If you’re interested in peeking
	// certain values (family name, style, size, weight) just query these
	// properties from the FontDescription object.
	FontName() string
	// ShowSize returns whether the font size will be shown in the label.
	ShowSize() bool
	// ShowStyle returns whether the name of the font style will be shown in the
	// label.
	ShowStyle() bool
	// Title retrieves the title of the font chooser dialog.
	Title() string
	// UseFont returns whether the selected font is used in the label.
	UseFont() bool
	// UseSize returns whether the selected size is used in the label.
	UseSize() bool
	// SetFontName sets or updates the currently-displayed font in font picker
	// dialog.
	SetFontName(fontname string) bool
	// SetShowSize: if @show_size is true, the font size will be displayed along
	// with the name of the selected font.
	SetShowSize(showSize bool)
	// SetShowStyle: if @show_style is true, the font style will be displayed
	// along with name of the selected font.
	SetShowStyle(showStyle bool)
	// SetTitle sets the title for the font chooser dialog.
	SetTitle(title string)
	// SetUseFont: if @use_font is true, the font name will be written using the
	// selected font.
	SetUseFont(useFont bool)
	// SetUseSize: if @use_size is true, the font name will be written using the
	// selected size.
	SetUseSize(useSize bool)
}

// fontButton implements the FontButton interface.
type fontButton struct {
	Button
	Actionable
	Activatable
	Buildable
	FontChooser
}

var _ FontButton = (*fontButton)(nil)

// WrapFontButton wraps a GObject to the right type. It is
// primarily used internally.
func WrapFontButton(obj *externglib.Object) FontButton {
	return FontButton{
		Button:      WrapButton(obj),
		Actionable:  WrapActionable(obj),
		Activatable: WrapActivatable(obj),
		Buildable:   WrapBuildable(obj),
		FontChooser: WrapFontChooser(obj),
	}
}

func marshalFontButton(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapFontButton(obj), nil
}

// NewFontButton constructs a class FontButton.
func NewFontButton() FontButton {
	var cret C.GtkFontButton
	var goret FontButton

	cret = C.gtk_font_button_new()

	goret = gextras.CastObject(externglib.Take(unsafe.Pointer(cret.Native()))).(FontButton)

	return goret
}

// NewFontButtonWithFont constructs a class FontButton.
func NewFontButtonWithFont(fontname string) FontButton {
	var arg1 *C.gchar

	arg1 = (*C.gchar)(C.CString(fontname))
	defer C.free(unsafe.Pointer(arg1))

	var cret C.GtkFontButton
	var goret FontButton

	cret = C.gtk_font_button_new_with_font(arg1)

	goret = gextras.CastObject(externglib.Take(unsafe.Pointer(cret.Native()))).(FontButton)

	return goret
}

// FontName retrieves the name of the currently selected font. This name
// includes style and size information as well. If you want to render
// something with the font, use this string with
// pango_font_description_from_string() . If you’re interested in peeking
// certain values (family name, style, size, weight) just query these
// properties from the FontDescription object.
func (f fontButton) FontName() string {
	var arg0 *C.GtkFontButton

	arg0 = (*C.GtkFontButton)(unsafe.Pointer(f.Native()))

	var cret *C.gchar
	var goret string

	cret = C.gtk_font_button_get_font_name(arg0)

	goret = C.GoString(cret)

	return goret
}

// ShowSize returns whether the font size will be shown in the label.
func (f fontButton) ShowSize() bool {
	var arg0 *C.GtkFontButton

	arg0 = (*C.GtkFontButton)(unsafe.Pointer(f.Native()))

	var cret C.gboolean
	var goret bool

	cret = C.gtk_font_button_get_show_size(arg0)

	if cret {
		goret = true
	}

	return goret
}

// ShowStyle returns whether the name of the font style will be shown in the
// label.
func (f fontButton) ShowStyle() bool {
	var arg0 *C.GtkFontButton

	arg0 = (*C.GtkFontButton)(unsafe.Pointer(f.Native()))

	var cret C.gboolean
	var goret bool

	cret = C.gtk_font_button_get_show_style(arg0)

	if cret {
		goret = true
	}

	return goret
}

// Title retrieves the title of the font chooser dialog.
func (f fontButton) Title() string {
	var arg0 *C.GtkFontButton

	arg0 = (*C.GtkFontButton)(unsafe.Pointer(f.Native()))

	var cret *C.gchar
	var goret string

	cret = C.gtk_font_button_get_title(arg0)

	goret = C.GoString(cret)

	return goret
}

// UseFont returns whether the selected font is used in the label.
func (f fontButton) UseFont() bool {
	var arg0 *C.GtkFontButton

	arg0 = (*C.GtkFontButton)(unsafe.Pointer(f.Native()))

	var cret C.gboolean
	var goret bool

	cret = C.gtk_font_button_get_use_font(arg0)

	if cret {
		goret = true
	}

	return goret
}

// UseSize returns whether the selected size is used in the label.
func (f fontButton) UseSize() bool {
	var arg0 *C.GtkFontButton

	arg0 = (*C.GtkFontButton)(unsafe.Pointer(f.Native()))

	var cret C.gboolean
	var goret bool

	cret = C.gtk_font_button_get_use_size(arg0)

	if cret {
		goret = true
	}

	return goret
}

// SetFontName sets or updates the currently-displayed font in font picker
// dialog.
func (f fontButton) SetFontName(fontname string) bool {
	var arg0 *C.GtkFontButton
	var arg1 *C.gchar

	arg0 = (*C.GtkFontButton)(unsafe.Pointer(f.Native()))
	arg1 = (*C.gchar)(C.CString(fontname))
	defer C.free(unsafe.Pointer(arg1))

	var cret C.gboolean
	var goret bool

	cret = C.gtk_font_button_set_font_name(arg0, arg1)

	if cret {
		goret = true
	}

	return goret
}

// SetShowSize: if @show_size is true, the font size will be displayed along
// with the name of the selected font.
func (f fontButton) SetShowSize(showSize bool) {
	var arg0 *C.GtkFontButton
	var arg1 C.gboolean

	arg0 = (*C.GtkFontButton)(unsafe.Pointer(f.Native()))
	if showSize {
		arg1 = C.gboolean(1)
	}

	C.gtk_font_button_set_show_size(arg0, arg1)
}

// SetShowStyle: if @show_style is true, the font style will be displayed
// along with name of the selected font.
func (f fontButton) SetShowStyle(showStyle bool) {
	var arg0 *C.GtkFontButton
	var arg1 C.gboolean

	arg0 = (*C.GtkFontButton)(unsafe.Pointer(f.Native()))
	if showStyle {
		arg1 = C.gboolean(1)
	}

	C.gtk_font_button_set_show_style(arg0, arg1)
}

// SetTitle sets the title for the font chooser dialog.
func (f fontButton) SetTitle(title string) {
	var arg0 *C.GtkFontButton
	var arg1 *C.gchar

	arg0 = (*C.GtkFontButton)(unsafe.Pointer(f.Native()))
	arg1 = (*C.gchar)(C.CString(title))
	defer C.free(unsafe.Pointer(arg1))

	C.gtk_font_button_set_title(arg0, arg1)
}

// SetUseFont: if @use_font is true, the font name will be written using the
// selected font.
func (f fontButton) SetUseFont(useFont bool) {
	var arg0 *C.GtkFontButton
	var arg1 C.gboolean

	arg0 = (*C.GtkFontButton)(unsafe.Pointer(f.Native()))
	if useFont {
		arg1 = C.gboolean(1)
	}

	C.gtk_font_button_set_use_font(arg0, arg1)
}

// SetUseSize: if @use_size is true, the font name will be written using the
// selected size.
func (f fontButton) SetUseSize(useSize bool) {
	var arg0 *C.GtkFontButton
	var arg1 C.gboolean

	arg0 = (*C.GtkFontButton)(unsafe.Pointer(f.Native()))
	if useSize {
		arg1 = C.gboolean(1)
	}

	C.gtk_font_button_set_use_size(arg0, arg1)
}
