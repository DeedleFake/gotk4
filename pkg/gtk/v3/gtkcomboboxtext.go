// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_combo_box_text_get_type()), F: marshalComboBoxTexter},
	})
}

// ComboBoxTexter describes ComboBoxText's methods.
type ComboBoxTexter interface {
	// Append appends @text to the list of strings stored in @combo_box.
	Append(id string, text string)
	// AppendText appends @text to the list of strings stored in @combo_box.
	AppendText(text string)
	// ActiveText returns the currently active string in @combo_box, or nil if
	// none is selected.
	ActiveText() string
	// Insert inserts @text at @position in the list of strings stored in
	// @combo_box.
	Insert(position int, id string, text string)
	// InsertText inserts @text at @position in the list of strings stored in
	// @combo_box.
	InsertText(position int, text string)
	// Prepend prepends @text to the list of strings stored in @combo_box.
	Prepend(id string, text string)
	// PrependText prepends @text to the list of strings stored in @combo_box.
	PrependText(text string)
	// Remove removes the string at @position from @combo_box.
	Remove(position int)
	// RemoveAll removes all the text entries from the combo box.
	RemoveAll()
}

// ComboBoxText is a simple variant of ComboBox that hides the model-view
// complexity for simple text-only use cases.
//
// To create a GtkComboBoxText, use gtk_combo_box_text_new() or
// gtk_combo_box_text_new_with_entry().
//
// You can add items to a GtkComboBoxText with gtk_combo_box_text_append_text(),
// gtk_combo_box_text_insert_text() or gtk_combo_box_text_prepend_text() and
// remove options with gtk_combo_box_text_remove().
//
// If the GtkComboBoxText contains an entry (via the “has-entry” property), its
// contents can be retrieved using gtk_combo_box_text_get_active_text(). The
// entry itself can be accessed by calling gtk_bin_get_child() on the combo box.
//
// You should not call gtk_combo_box_set_model() or attempt to pack more cells
// into this combo box via its GtkCellLayout interface.
//
//
// GtkComboBoxText as GtkBuildable
//
// The GtkComboBoxText implementation of the GtkBuildable interface supports
// adding items directly using the <items> element and specifying <item>
// elements for each item. Each <item> element can specify the “id”
// corresponding to the appended text and also supports the regular translation
// attributes “translatable”, “context” and “comments”.
//
// Here is a UI definition fragment specifying GtkComboBoxText items:
//
//    <object class="GtkComboBoxText">
//      <items>
//        <item translatable="yes" id="factory">Factory</item>
//        <item translatable="yes" id="home">Home</item>
//        <item translatable="yes" id="subway">Subway</item>
//      </items>
//    </object>
//
// CSS nodes
//
//    combobox
//    ╰── box.linked
//        ├── entry.combo
//        ├── button.combo
//        ╰── window.popup
//
// GtkComboBoxText has a single CSS node with name combobox. It adds the style
// class .combo to the main CSS nodes of its entry and button children, and the
// .linked class to the node of its internal box.
type ComboBoxText struct {
	ComboBox
}

var (
	_ ComboBoxTexter  = (*ComboBoxText)(nil)
	_ gextras.Nativer = (*ComboBoxText)(nil)
)

func wrapComboBoxText(obj *externglib.Object) *ComboBoxText {
	return &ComboBoxText{
		ComboBox: ComboBox{
			Bin: Bin{
				Container: Container{
					Widget: Widget{
						InitiallyUnowned: externglib.InitiallyUnowned{
							Object: obj,
						},
						ImplementorIface: atk.ImplementorIface{
							Object: obj,
						},
						Buildable: Buildable{
							Object: obj,
						},
					},
				},
			},
			CellEditable: CellEditable{
				Widget: Widget{
					InitiallyUnowned: externglib.InitiallyUnowned{
						Object: obj,
					},
					ImplementorIface: atk.ImplementorIface{
						Object: obj,
					},
					Buildable: Buildable{
						Object: obj,
					},
				},
			},
			CellLayout: CellLayout{
				Object: obj,
			},
		},
	}
}

func marshalComboBoxTexter(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapComboBoxText(obj), nil
}

// NewComboBoxText creates a new ComboBoxText, which is a ComboBox just
// displaying strings.
func NewComboBoxText() *ComboBoxText {
	var _cret *C.GtkWidget // in

	_cret = C.gtk_combo_box_text_new()

	var _comboBoxText *ComboBoxText // out

	_comboBoxText = wrapComboBoxText(externglib.Take(unsafe.Pointer(_cret)))

	return _comboBoxText
}

// NewComboBoxTextWithEntry creates a new ComboBoxText, which is a ComboBox just
// displaying strings. The combo box created by this function has an entry.
func NewComboBoxTextWithEntry() *ComboBoxText {
	var _cret *C.GtkWidget // in

	_cret = C.gtk_combo_box_text_new_with_entry()

	var _comboBoxText *ComboBoxText // out

	_comboBoxText = wrapComboBoxText(externglib.Take(unsafe.Pointer(_cret)))

	return _comboBoxText
}

// Append appends @text to the list of strings stored in @combo_box. If @id is
// non-nil then it is used as the ID of the row.
//
// This is the same as calling gtk_combo_box_text_insert() with a position of
// -1.
func (comboBox *ComboBoxText) Append(id string, text string) {
	var _arg0 *C.GtkComboBoxText // out
	var _arg1 *C.gchar           // out
	var _arg2 *C.gchar           // out

	_arg0 = (*C.GtkComboBoxText)(unsafe.Pointer(comboBox.Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(id)))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(text)))

	C.gtk_combo_box_text_append(_arg0, _arg1, _arg2)
}

// AppendText appends @text to the list of strings stored in @combo_box.
//
// This is the same as calling gtk_combo_box_text_insert_text() with a position
// of -1.
func (comboBox *ComboBoxText) AppendText(text string) {
	var _arg0 *C.GtkComboBoxText // out
	var _arg1 *C.gchar           // out

	_arg0 = (*C.GtkComboBoxText)(unsafe.Pointer(comboBox.Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(text)))

	C.gtk_combo_box_text_append_text(_arg0, _arg1)
}

// ActiveText returns the currently active string in @combo_box, or nil if none
// is selected. If @combo_box contains an entry, this function will return its
// contents (which will not necessarily be an item from the list).
func (comboBox *ComboBoxText) ActiveText() string {
	var _arg0 *C.GtkComboBoxText // out
	var _cret *C.gchar           // in

	_arg0 = (*C.GtkComboBoxText)(unsafe.Pointer(comboBox.Native()))

	_cret = C.gtk_combo_box_text_get_active_text(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Insert inserts @text at @position in the list of strings stored in
// @combo_box. If @id is non-nil then it is used as the ID of the row. See
// ComboBox:id-column.
//
// If @position is negative then @text is appended.
func (comboBox *ComboBoxText) Insert(position int, id string, text string) {
	var _arg0 *C.GtkComboBoxText // out
	var _arg1 C.gint             // out
	var _arg2 *C.gchar           // out
	var _arg3 *C.gchar           // out

	_arg0 = (*C.GtkComboBoxText)(unsafe.Pointer(comboBox.Native()))
	_arg1 = C.gint(position)
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(id)))
	_arg3 = (*C.gchar)(unsafe.Pointer(C.CString(text)))

	C.gtk_combo_box_text_insert(_arg0, _arg1, _arg2, _arg3)
}

// InsertText inserts @text at @position in the list of strings stored in
// @combo_box.
//
// If @position is negative then @text is appended.
//
// This is the same as calling gtk_combo_box_text_insert() with a nil ID string.
func (comboBox *ComboBoxText) InsertText(position int, text string) {
	var _arg0 *C.GtkComboBoxText // out
	var _arg1 C.gint             // out
	var _arg2 *C.gchar           // out

	_arg0 = (*C.GtkComboBoxText)(unsafe.Pointer(comboBox.Native()))
	_arg1 = C.gint(position)
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(text)))

	C.gtk_combo_box_text_insert_text(_arg0, _arg1, _arg2)
}

// Prepend prepends @text to the list of strings stored in @combo_box. If @id is
// non-nil then it is used as the ID of the row.
//
// This is the same as calling gtk_combo_box_text_insert() with a position of 0.
func (comboBox *ComboBoxText) Prepend(id string, text string) {
	var _arg0 *C.GtkComboBoxText // out
	var _arg1 *C.gchar           // out
	var _arg2 *C.gchar           // out

	_arg0 = (*C.GtkComboBoxText)(unsafe.Pointer(comboBox.Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(id)))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(text)))

	C.gtk_combo_box_text_prepend(_arg0, _arg1, _arg2)
}

// PrependText prepends @text to the list of strings stored in @combo_box.
//
// This is the same as calling gtk_combo_box_text_insert_text() with a position
// of 0.
func (comboBox *ComboBoxText) PrependText(text string) {
	var _arg0 *C.GtkComboBoxText // out
	var _arg1 *C.gchar           // out

	_arg0 = (*C.GtkComboBoxText)(unsafe.Pointer(comboBox.Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(text)))

	C.gtk_combo_box_text_prepend_text(_arg0, _arg1)
}

// Remove removes the string at @position from @combo_box.
func (comboBox *ComboBoxText) Remove(position int) {
	var _arg0 *C.GtkComboBoxText // out
	var _arg1 C.gint             // out

	_arg0 = (*C.GtkComboBoxText)(unsafe.Pointer(comboBox.Native()))
	_arg1 = C.gint(position)

	C.gtk_combo_box_text_remove(_arg0, _arg1)
}

// RemoveAll removes all the text entries from the combo box.
func (comboBox *ComboBoxText) RemoveAll() {
	var _arg0 *C.GtkComboBoxText // out

	_arg0 = (*C.GtkComboBoxText)(unsafe.Pointer(comboBox.Native()))

	C.gtk_combo_box_text_remove_all(_arg0)
}
