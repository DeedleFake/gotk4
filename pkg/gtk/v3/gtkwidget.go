// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/core/gextras"
	"github.com/diamondburned/gotk4/pkg/cairo"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
	"github.com/diamondburned/gotk4/pkg/gdkpixbuf/v2"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
	"github.com/diamondburned/gotk4/pkg/pango"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_widget_help_type_get_type()), F: marshalWidgetHelpType},
		{T: externglib.Type(C.gtk_widget_get_type()), F: marshalWidget},
		{T: externglib.Type(C.gtk_requisition_get_type()), F: marshalRequisition},
	})
}

// Allocation: a Allocation-struct of a widget represents region which has been
// allocated to the widget by its parent. It is a subregion of its parents
// allocation. See [GtkWidget’s geometry management
// section][geometry-management] for more information.
type Allocation = gdk.Rectangle

// WidgetHelpType kinds of widget-specific help. Used by the ::show-help signal.
type WidgetHelpType int

const (
	// tooltip: tooltip.
	WidgetHelpTypeTooltip WidgetHelpType = 0
	// WhatsThis what’s this.
	WidgetHelpTypeWhatsThis WidgetHelpType = 1
)

func marshalWidgetHelpType(p uintptr) (interface{}, error) {
	return WidgetHelpType(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// CairoShouldDrawWindow: this function is supposed to be called in Widget::draw
// implementations for widgets that support multiple windows. @cr must be
// untransformed from invoking of the draw function. This function will return
// true if the contents of the given @window are supposed to be drawn and false
// otherwise. Note that when the drawing was not initiated by the windowing
// system this function will return true for all windows, so you need to draw
// the bottommost window first. Also, do not use “else if” statements to check
// which window should be drawn.
func CairoShouldDrawWindow(cr *cairo.Context, window gdk.Window) bool {
	var _arg1 *C.cairo_t   // out
	var _arg2 *C.GdkWindow // out
	var _cret C.gboolean   // in

	_arg1 = (*C.cairo_t)(unsafe.Pointer(cr.Native()))
	_arg2 = (*C.GdkWindow)(unsafe.Pointer(window.Native()))

	_cret = C.gtk_cairo_should_draw_window(_arg1, _arg2)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// CairoTransformToWindow transforms the given cairo context @cr that from
// @widget-relative coordinates to @window-relative coordinates. If the
// @widget’s window is not an ancestor of @window, no modification will be
// applied.
//
// This is the inverse to the transformation GTK applies when preparing an
// expose event to be emitted with the Widget::draw signal. It is intended to
// help porting multiwindow widgets from GTK+ 2 to the rendering architecture of
// GTK+ 3.
func CairoTransformToWindow(cr *cairo.Context, widget Widget, window gdk.Window) {
	var _arg1 *C.cairo_t   // out
	var _arg2 *C.GtkWidget // out
	var _arg3 *C.GdkWindow // out

	_arg1 = (*C.cairo_t)(unsafe.Pointer(cr.Native()))
	_arg2 = (*C.GtkWidget)(unsafe.Pointer(widget.Native()))
	_arg3 = (*C.GdkWindow)(unsafe.Pointer(window.Native()))

	C.gtk_cairo_transform_to_window(_arg1, _arg2, _arg3)
}

// Widget: gtkWidget is the base class all widgets in GTK+ derive from. It
// manages the widget lifecycle, states and style.
//
//
// Height-for-width Geometry Management
//
// GTK+ uses a height-for-width (and width-for-height) geometry management
// system. Height-for-width means that a widget can change how much vertical
// space it needs, depending on the amount of horizontal space that it is given
// (and similar for width-for-height). The most common example is a label that
// reflows to fill up the available width, wraps to fewer lines, and therefore
// needs less height.
//
// Height-for-width geometry management is implemented in GTK+ by way of five
// virtual methods:
//
// - WidgetClass.get_request_mode() - WidgetClass.get_preferred_width() -
// WidgetClass.get_preferred_height() -
// WidgetClass.get_preferred_height_for_width() -
// WidgetClass.get_preferred_width_for_height() -
// WidgetClass.get_preferred_height_and_baseline_for_width()
//
// There are some important things to keep in mind when implementing
// height-for-width and when using it in container implementations.
//
// The geometry management system will query a widget hierarchy in only one
// orientation at a time. When widgets are initially queried for their minimum
// sizes it is generally done in two initial passes in the SizeRequestMode
// chosen by the toplevel.
//
// For example, when queried in the normal GTK_SIZE_REQUEST_HEIGHT_FOR_WIDTH
// mode: First, the default minimum and natural width for each widget in the
// interface will be computed using gtk_widget_get_preferred_width(). Because
// the preferred widths for each container depend on the preferred widths of
// their children, this information propagates up the hierarchy, and finally a
// minimum and natural width is determined for the entire toplevel. Next, the
// toplevel will use the minimum width to query for the minimum height
// contextual to that width using gtk_widget_get_preferred_height_for_width(),
// which will also be a highly recursive operation. The minimum height for the
// minimum width is normally used to set the minimum size constraint on the
// toplevel (unless gtk_window_set_geometry_hints() is explicitly used instead).
//
// After the toplevel window has initially requested its size in both dimensions
// it can go on to allocate itself a reasonable size (or a size previously
// specified with gtk_window_set_default_size()). During the recursive
// allocation process it’s important to note that request cycles will be
// recursively executed while container widgets allocate their children. Each
// container widget, once allocated a size, will go on to first share the space
// in one orientation among its children and then request each child's height
// for its target allocated width or its width for allocated height, depending.
// In this way a Widget will typically be requested its size a number of times
// before actually being allocated a size. The size a widget is finally
// allocated can of course differ from the size it has requested. For this
// reason, Widget caches a small number of results to avoid re-querying for the
// same sizes in one allocation cycle.
//
// See [GtkContainer’s geometry management
// section][container-geometry-management] to learn more about how
// height-for-width allocations are performed by container widgets.
//
// If a widget does move content around to intelligently use up the allocated
// size then it must support the request in both SizeRequestModes even if the
// widget in question only trades sizes in a single orientation.
//
// For instance, a Label that does height-for-width word wrapping will not
// expect to have WidgetClass.get_preferred_height() called because that call is
// specific to a width-for-height request. In this case the label must return
// the height required for its own minimum possible width. By following this
// rule any widget that handles height-for-width or width-for-height requests
// will always be allocated at least enough space to fit its own content.
//
// Here are some examples of how a GTK_SIZE_REQUEST_HEIGHT_FOR_WIDTH widget
// generally deals with width-for-height requests, for
// WidgetClass.get_preferred_height() it will do:
//
//    // the signal handler has the instance and user data swapped
//    // because of the swapped="yes" attribute in the template XML
//    static void
//    hello_button_clicked (FooWidget *self,
//                          GtkButton *button)
//    {
//      g_print ("Hello, world!\n");
//    }
//
//    static void
//    foo_widget_class_init (FooWidgetClass *klass)
//    {
//      // ...
//      gtk_widget_class_set_template_from_resource (GTK_WIDGET_CLASS (klass),
//                                                   "/com/example/ui/foowidget.ui");
//      gtk_widget_class_bind_template_callback (GTK_WIDGET_CLASS (klass), hello_button_clicked);
//    }
type Widget interface {
	Buildable

	// ActivateWidget:
	ActivateWidget() bool
	// AddAcceleratorWidget:
	AddAcceleratorWidget(accelSignal string, accelGroup AccelGroup, accelKey uint, accelMods gdk.ModifierType, accelFlags AccelFlags)
	// AddDeviceEventsWidget:
	AddDeviceEventsWidget(device gdk.Device, events gdk.EventMask)
	// AddEventsWidget:
	AddEventsWidget(events int)
	// AddMnemonicLabelWidget:
	AddMnemonicLabelWidget(label Widget)
	// CanActivateAccelWidget:
	CanActivateAccelWidget(signalId uint) bool
	// ChildFocusWidget:
	ChildFocusWidget(direction DirectionType) bool
	// ChildNotifyWidget:
	ChildNotifyWidget(childProperty string)
	// ClassPathWidget:
	ClassPathWidget() (pathLength uint, path string, pathReversed string)
	// ComputeExpandWidget:
	ComputeExpandWidget(orientation Orientation) bool
	// CreatePangoContextWidget:
	CreatePangoContextWidget() pango.Context
	// CreatePangoLayoutWidget:
	CreatePangoLayoutWidget(text string) pango.Layout
	// DestroyWidget:
	DestroyWidget()
	// DeviceIsShadowedWidget:
	DeviceIsShadowedWidget(device gdk.Device) bool
	// DragCheckThresholdWidget:
	DragCheckThresholdWidget(startX int, startY int, currentX int, currentY int) bool
	// DragDestAddImageTargetsWidget:
	DragDestAddImageTargetsWidget()
	// DragDestAddTextTargetsWidget:
	DragDestAddTextTargetsWidget()
	// DragDestAddURITargetsWidget:
	DragDestAddURITargetsWidget()
	// DragDestFindTargetWidget:
	DragDestFindTargetWidget(context gdk.DragContext, targetList *TargetList) *gdk.Atom
	// DragDestGetTargetListWidget:
	DragDestGetTargetListWidget() *TargetList
	// DragDestGetTrackMotionWidget:
	DragDestGetTrackMotionWidget() bool
	// DragDestSetWidget:
	DragDestSetWidget(flags DestDefaults, targets []TargetEntry, actions gdk.DragAction)
	// DragDestSetProxyWidget:
	DragDestSetProxyWidget(proxyWindow gdk.Window, protocol gdk.DragProtocol, useCoordinates bool)
	// DragDestSetTargetListWidget:
	DragDestSetTargetListWidget(targetList *TargetList)
	// DragDestSetTrackMotionWidget:
	DragDestSetTrackMotionWidget(trackMotion bool)
	// DragDestUnsetWidget:
	DragDestUnsetWidget()
	// DragGetDataWidget:
	DragGetDataWidget(context gdk.DragContext, target *gdk.Atom, time_ uint32)
	// DragHighlightWidget:
	DragHighlightWidget()
	// DragSourceAddImageTargetsWidget:
	DragSourceAddImageTargetsWidget()
	// DragSourceAddTextTargetsWidget:
	DragSourceAddTextTargetsWidget()
	// DragSourceAddURITargetsWidget:
	DragSourceAddURITargetsWidget()
	// DragSourceGetTargetListWidget:
	DragSourceGetTargetListWidget() *TargetList
	// DragSourceSetWidget:
	DragSourceSetWidget(startButtonMask gdk.ModifierType, targets []TargetEntry, actions gdk.DragAction)
	// DragSourceSetIconGIconWidget:
	DragSourceSetIconGIconWidget(icon gio.Icon)
	// DragSourceSetIconNameWidget:
	DragSourceSetIconNameWidget(iconName string)
	// DragSourceSetIconPixbufWidget:
	DragSourceSetIconPixbufWidget(pixbuf gdkpixbuf.Pixbuf)
	// DragSourceSetIconStockWidget:
	DragSourceSetIconStockWidget(stockId string)
	// DragSourceSetTargetListWidget:
	DragSourceSetTargetListWidget(targetList *TargetList)
	// DragSourceUnsetWidget:
	DragSourceUnsetWidget()
	// DragUnhighlightWidget:
	DragUnhighlightWidget()
	// DrawWidget:
	DrawWidget(cr *cairo.Context)
	// EnsureStyleWidget:
	EnsureStyleWidget()
	// ErrorBellWidget:
	ErrorBellWidget()
	// FreezeChildNotifyWidget:
	FreezeChildNotifyWidget()
	// ActionGroup:
	ActionGroup(prefix string) gio.ActionGroup
	// AllocatedBaseline:
	AllocatedBaseline() int
	// AllocatedHeight:
	AllocatedHeight() int
	// AllocatedWidth:
	AllocatedWidth() int
	// Ancestor:
	Ancestor(widgetType externglib.Type) Widget
	// AppPaintable:
	AppPaintable() bool
	// CanDefault:
	CanDefault() bool
	// CanFocus:
	CanFocus() bool
	// ChildRequisition:
	ChildRequisition() Requisition
	// ChildVisible:
	ChildVisible() bool
	// Clipboard:
	Clipboard(selection *gdk.Atom) Clipboard
	// CompositeName:
	CompositeName() string
	// DeviceEnabled:
	DeviceEnabled(device gdk.Device) bool
	// DeviceEvents:
	DeviceEvents(device gdk.Device) gdk.EventMask
	// Direction:
	Direction() TextDirection
	// Display:
	Display() gdk.Display
	// DoubleBuffered:
	DoubleBuffered() bool
	// Events:
	Events() int
	// FocusOnClick:
	FocusOnClick() bool
	// FontMap:
	FontMap() pango.FontMap
	// FontOptions:
	FontOptions() *cairo.FontOptions
	// FrameClock:
	FrameClock() gdk.FrameClock
	// Halign:
	Halign() Align
	// HasTooltip:
	HasTooltip() bool
	// HasWindow:
	HasWindow() bool
	// Hexpand:
	Hexpand() bool
	// HexpandSet:
	HexpandSet() bool
	// Mapped:
	Mapped() bool
	// MarginBottom:
	MarginBottom() int
	// MarginEnd:
	MarginEnd() int
	// MarginLeft:
	MarginLeft() int
	// MarginRight:
	MarginRight() int
	// MarginStart:
	MarginStart() int
	// MarginTop:
	MarginTop() int
	// ModifierMask:
	ModifierMask(intent gdk.ModifierIntent) gdk.ModifierType
	// ModifierStyle:
	ModifierStyle() RCStyle
	// GetName:
	GetName() string
	// NoShowAll:
	NoShowAll() bool
	// Opacity:
	Opacity() float64
	// PangoContext:
	PangoContext() pango.Context
	// Parent:
	Parent() Widget
	// ParentWindow:
	ParentWindow() gdk.Window
	// GetPath:
	GetPath() *WidgetPath
	// Pointer:
	Pointer() (x int, y int)
	// PreferredHeight:
	PreferredHeight() (minimumHeight int, naturalHeight int)
	// PreferredHeightAndBaselineForWidth:
	PreferredHeightAndBaselineForWidth(width int) (minimumHeight int, naturalHeight int, minimumBaseline int, naturalBaseline int)
	// PreferredHeightForWidth:
	PreferredHeightForWidth(width int) (minimumHeight int, naturalHeight int)
	// PreferredSize:
	PreferredSize() (minimumSize Requisition, naturalSize Requisition)
	// PreferredWidth:
	PreferredWidth() (minimumWidth int, naturalWidth int)
	// PreferredWidthForHeight:
	PreferredWidthForHeight(height int) (minimumWidth int, naturalWidth int)
	// Realized:
	Realized() bool
	// ReceivesDefault:
	ReceivesDefault() bool
	// RequestMode:
	RequestMode() SizeRequestMode
	// Requisition:
	Requisition() Requisition
	// RootWindow:
	RootWindow() gdk.Window
	// ScaleFactor:
	ScaleFactor() int
	// Screen:
	Screen() gdk.Screen
	// Sensitive:
	Sensitive() bool
	// Settings:
	Settings() Settings
	// GetSizeRequest:
	GetSizeRequest() (width int, height int)
	// State:
	State() StateType
	// StateFlags:
	StateFlags() StateFlags
	// Style:
	Style() Style
	// StyleContext:
	StyleContext() StyleContext
	// SupportMultidevice:
	SupportMultidevice() bool
	// TemplateChild:
	TemplateChild(widgetType externglib.Type, name string) gextras.Objector
	// TooltipMarkup:
	TooltipMarkup() string
	// TooltipText:
	TooltipText() string
	// TooltipWindow:
	TooltipWindow() Window
	// Toplevel:
	Toplevel() Widget
	// Valign:
	Valign() Align
	// ValignWithBaseline:
	ValignWithBaseline() Align
	// Vexpand:
	Vexpand() bool
	// VexpandSet:
	VexpandSet() bool
	// Visible:
	Visible() bool
	// Visual:
	Visual() gdk.Visual
	// Window:
	Window() gdk.Window
	// GrabAddWidget:
	GrabAddWidget()
	// GrabDefaultWidget:
	GrabDefaultWidget()
	// GrabFocusWidget:
	GrabFocusWidget()
	// GrabRemoveWidget:
	GrabRemoveWidget()
	// HasDefaultWidget:
	HasDefaultWidget() bool
	// HasFocusWidget:
	HasFocusWidget() bool
	// HasGrabWidget:
	HasGrabWidget() bool
	// HasRCStyleWidget:
	HasRCStyleWidget() bool
	// HasScreenWidget:
	HasScreenWidget() bool
	// HasVisibleFocusWidget:
	HasVisibleFocusWidget() bool
	// HideWidget:
	HideWidget()
	// HideOnDeleteWidget:
	HideOnDeleteWidget() bool
	// InDestructionWidget:
	InDestructionWidget() bool
	// InitTemplateWidget:
	InitTemplateWidget()
	// InputShapeCombineRegionWidget:
	InputShapeCombineRegionWidget(region *cairo.Region)
	// InsertActionGroupWidget:
	InsertActionGroupWidget(name string, group gio.ActionGroup)
	// IntersectWidget:
	IntersectWidget(area *gdk.Rectangle) (gdk.Rectangle, bool)
	// IsAncestorWidget:
	IsAncestorWidget(ancestor Widget) bool
	// IsCompositedWidget:
	IsCompositedWidget() bool
	// IsDrawableWidget:
	IsDrawableWidget() bool
	// IsFocusWidget:
	IsFocusWidget() bool
	// IsSensitiveWidget:
	IsSensitiveWidget() bool
	// IsToplevelWidget:
	IsToplevelWidget() bool
	// IsVisibleWidget:
	IsVisibleWidget() bool
	// KeynavFailedWidget:
	KeynavFailedWidget(direction DirectionType) bool
	// ListActionPrefixesWidget:
	ListActionPrefixesWidget() []string
	// MapWidget:
	MapWidget()
	// MnemonicActivateWidget:
	MnemonicActivateWidget(groupCycling bool) bool
	// ModifyBaseWidget:
	ModifyBaseWidget(state StateType, color *gdk.Color)
	// ModifyBgWidget:
	ModifyBgWidget(state StateType, color *gdk.Color)
	// ModifyCursorWidget:
	ModifyCursorWidget(primary *gdk.Color, secondary *gdk.Color)
	// ModifyFgWidget:
	ModifyFgWidget(state StateType, color *gdk.Color)
	// ModifyFontWidget:
	ModifyFontWidget(fontDesc *pango.FontDescription)
	// ModifyStyleWidget:
	ModifyStyleWidget(style RCStyle)
	// ModifyTextWidget:
	ModifyTextWidget(state StateType, color *gdk.Color)
	// OverrideBackgroundColorWidget:
	OverrideBackgroundColorWidget(state StateFlags, color *gdk.RGBA)
	// OverrideColorWidget:
	OverrideColorWidget(state StateFlags, color *gdk.RGBA)
	// OverrideCursorWidget:
	OverrideCursorWidget(cursor *gdk.RGBA, secondaryCursor *gdk.RGBA)
	// OverrideFontWidget:
	OverrideFontWidget(fontDesc *pango.FontDescription)
	// OverrideSymbolicColorWidget:
	OverrideSymbolicColorWidget(name string, color *gdk.RGBA)
	// PathWidget:
	PathWidget() (pathLength uint, path string, pathReversed string)
	// QueueAllocateWidget:
	QueueAllocateWidget()
	// QueueComputeExpandWidget:
	QueueComputeExpandWidget()
	// QueueDrawWidget:
	QueueDrawWidget()
	// QueueDrawAreaWidget:
	QueueDrawAreaWidget(x int, y int, width int, height int)
	// QueueDrawRegionWidget:
	QueueDrawRegionWidget(region *cairo.Region)
	// QueueResizeWidget:
	QueueResizeWidget()
	// QueueResizeNoRedrawWidget:
	QueueResizeNoRedrawWidget()
	// RealizeWidget:
	RealizeWidget()
	// RegionIntersectWidget:
	RegionIntersectWidget(region *cairo.Region) *cairo.Region
	// RegisterWindowWidget:
	RegisterWindowWidget(window gdk.Window)
	// RemoveAcceleratorWidget:
	RemoveAcceleratorWidget(accelGroup AccelGroup, accelKey uint, accelMods gdk.ModifierType) bool
	// RemoveMnemonicLabelWidget:
	RemoveMnemonicLabelWidget(label Widget)
	// RemoveTickCallbackWidget:
	RemoveTickCallbackWidget(id uint)
	// RenderIconWidget:
	RenderIconWidget(stockId string, size int, detail string) gdkpixbuf.Pixbuf
	// RenderIconPixbufWidget:
	RenderIconPixbufWidget(stockId string, size int) gdkpixbuf.Pixbuf
	// ReparentWidget:
	ReparentWidget(newParent Widget)
	// ResetRCStylesWidget:
	ResetRCStylesWidget()
	// ResetStyleWidget:
	ResetStyleWidget()
	// SetAccelPathWidget:
	SetAccelPathWidget(accelPath string, accelGroup AccelGroup)
	// SetAppPaintableWidget:
	SetAppPaintableWidget(appPaintable bool)
	// SetCanDefaultWidget:
	SetCanDefaultWidget(canDefault bool)
	// SetCanFocusWidget:
	SetCanFocusWidget(canFocus bool)
	// SetChildVisibleWidget:
	SetChildVisibleWidget(isVisible bool)
	// SetCompositeNameWidget:
	SetCompositeNameWidget(name string)
	// SetDeviceEnabledWidget:
	SetDeviceEnabledWidget(device gdk.Device, enabled bool)
	// SetDeviceEventsWidget:
	SetDeviceEventsWidget(device gdk.Device, events gdk.EventMask)
	// SetDirectionWidget:
	SetDirectionWidget(dir TextDirection)
	// SetDoubleBufferedWidget:
	SetDoubleBufferedWidget(doubleBuffered bool)
	// SetEventsWidget:
	SetEventsWidget(events int)
	// SetFocusOnClickWidget:
	SetFocusOnClickWidget(focusOnClick bool)
	// SetFontMapWidget:
	SetFontMapWidget(fontMap pango.FontMap)
	// SetFontOptionsWidget:
	SetFontOptionsWidget(options *cairo.FontOptions)
	// SetHalignWidget:
	SetHalignWidget(align Align)
	// SetHasTooltipWidget:
	SetHasTooltipWidget(hasTooltip bool)
	// SetHasWindowWidget:
	SetHasWindowWidget(hasWindow bool)
	// SetHexpandWidget:
	SetHexpandWidget(expand bool)
	// SetHexpandSetWidget:
	SetHexpandSetWidget(set bool)
	// SetMappedWidget:
	SetMappedWidget(mapped bool)
	// SetMarginBottomWidget:
	SetMarginBottomWidget(margin int)
	// SetMarginEndWidget:
	SetMarginEndWidget(margin int)
	// SetMarginLeftWidget:
	SetMarginLeftWidget(margin int)
	// SetMarginRightWidget:
	SetMarginRightWidget(margin int)
	// SetMarginStartWidget:
	SetMarginStartWidget(margin int)
	// SetMarginTopWidget:
	SetMarginTopWidget(margin int)
	// SetNameWidget:
	SetNameWidget(name string)
	// SetNoShowAllWidget:
	SetNoShowAllWidget(noShowAll bool)
	// SetOpacityWidget:
	SetOpacityWidget(opacity float64)
	// SetParentWidget:
	SetParentWidget(parent Widget)
	// SetParentWindowWidget:
	SetParentWindowWidget(parentWindow gdk.Window)
	// SetRealizedWidget:
	SetRealizedWidget(realized bool)
	// SetReceivesDefaultWidget:
	SetReceivesDefaultWidget(receivesDefault bool)
	// SetRedrawOnAllocateWidget:
	SetRedrawOnAllocateWidget(redrawOnAllocate bool)
	// SetSensitiveWidget:
	SetSensitiveWidget(sensitive bool)
	// SetSizeRequestWidget:
	SetSizeRequestWidget(width int, height int)
	// SetStateWidget:
	SetStateWidget(state StateType)
	// SetStateFlagsWidget:
	SetStateFlagsWidget(flags StateFlags, clear bool)
	// SetStyleWidget:
	SetStyleWidget(style Style)
	// SetSupportMultideviceWidget:
	SetSupportMultideviceWidget(supportMultidevice bool)
	// SetTooltipMarkupWidget:
	SetTooltipMarkupWidget(markup string)
	// SetTooltipTextWidget:
	SetTooltipTextWidget(text string)
	// SetTooltipWindowWidget:
	SetTooltipWindowWidget(customWindow Window)
	// SetValignWidget:
	SetValignWidget(align Align)
	// SetVexpandWidget:
	SetVexpandWidget(expand bool)
	// SetVexpandSetWidget:
	SetVexpandSetWidget(set bool)
	// SetVisibleWidget:
	SetVisibleWidget(visible bool)
	// SetVisualWidget:
	SetVisualWidget(visual gdk.Visual)
	// SetWindowWidget:
	SetWindowWidget(window gdk.Window)
	// ShapeCombineRegionWidget:
	ShapeCombineRegionWidget(region *cairo.Region)
	// ShowWidget:
	ShowWidget()
	// ShowAllWidget:
	ShowAllWidget()
	// ShowNowWidget:
	ShowNowWidget()
	// SizeRequestWidget:
	SizeRequestWidget() Requisition
	// StyleAttachWidget:
	StyleAttachWidget()
	// StyleGetPropertyWidget:
	StyleGetPropertyWidget(propertyName string, value externglib.Value)
	// ThawChildNotifyWidget:
	ThawChildNotifyWidget()
	// TranslateCoordinatesWidget:
	TranslateCoordinatesWidget(destWidget Widget, srcX int, srcY int) (destX int, destY int, ok bool)
	// TriggerTooltipQueryWidget:
	TriggerTooltipQueryWidget()
	// UnmapWidget:
	UnmapWidget()
	// UnparentWidget:
	UnparentWidget()
	// UnrealizeWidget:
	UnrealizeWidget()
	// UnregisterWindowWidget:
	UnregisterWindowWidget(window gdk.Window)
	// UnsetStateFlagsWidget:
	UnsetStateFlagsWidget(flags StateFlags)
}

// widget implements the Widget class.
type widget struct {
	gextras.Objector
}

// WrapWidget wraps a GObject to the right type. It is
// primarily used internally.
func WrapWidget(obj *externglib.Object) Widget {
	return widget{
		Objector: obj,
	}
}

func marshalWidget(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapWidget(obj), nil
}

func (w widget) ActivateWidget() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_activate(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) AddAcceleratorWidget(accelSignal string, accelGroup AccelGroup, accelKey uint, accelMods gdk.ModifierType, accelFlags AccelFlags) {
	var _arg0 *C.GtkWidget      // out
	var _arg1 *C.gchar          // out
	var _arg2 *C.GtkAccelGroup  // out
	var _arg3 C.guint           // out
	var _arg4 C.GdkModifierType // out
	var _arg5 C.GtkAccelFlags   // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.gchar)(C.CString(accelSignal))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.GtkAccelGroup)(unsafe.Pointer(accelGroup.Native()))
	_arg3 = C.guint(accelKey)
	_arg4 = C.GdkModifierType(accelMods)
	_arg5 = C.GtkAccelFlags(accelFlags)

	C.gtk_widget_add_accelerator(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
}

func (w widget) AddDeviceEventsWidget(device gdk.Device, events gdk.EventMask) {
	var _arg0 *C.GtkWidget   // out
	var _arg1 *C.GdkDevice   // out
	var _arg2 C.GdkEventMask // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GdkDevice)(unsafe.Pointer(device.Native()))
	_arg2 = C.GdkEventMask(events)

	C.gtk_widget_add_device_events(_arg0, _arg1, _arg2)
}

func (w widget) AddEventsWidget(events int) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gint       // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.gint(events)

	C.gtk_widget_add_events(_arg0, _arg1)
}

func (w widget) AddMnemonicLabelWidget(label Widget) {
	var _arg0 *C.GtkWidget // out
	var _arg1 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(label.Native()))

	C.gtk_widget_add_mnemonic_label(_arg0, _arg1)
}

func (w widget) CanActivateAccelWidget(signalId uint) bool {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.guint      // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.guint(signalId)

	_cret = C.gtk_widget_can_activate_accel(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) ChildFocusWidget(direction DirectionType) bool {
	var _arg0 *C.GtkWidget       // out
	var _arg1 C.GtkDirectionType // out
	var _cret C.gboolean         // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.GtkDirectionType(direction)

	_cret = C.gtk_widget_child_focus(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) ChildNotifyWidget(childProperty string) {
	var _arg0 *C.GtkWidget // out
	var _arg1 *C.gchar     // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.gchar)(C.CString(childProperty))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_widget_child_notify(_arg0, _arg1)
}

func (w widget) ClassPathWidget() (pathLength uint, path string, pathReversed string) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.guint      // in
	var _arg2 *C.gchar     // in
	var _arg3 *C.gchar     // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_class_path(_arg0, &_arg1, &_arg2, &_arg3)

	var _pathLength uint     // out
	var _path string         // out
	var _pathReversed string // out

	_pathLength = uint(_arg1)
	_path = C.GoString(_arg2)
	defer C.free(unsafe.Pointer(_arg2))
	_pathReversed = C.GoString(_arg3)
	defer C.free(unsafe.Pointer(_arg3))

	return _pathLength, _path, _pathReversed
}

func (w widget) ComputeExpandWidget(orientation Orientation) bool {
	var _arg0 *C.GtkWidget     // out
	var _arg1 C.GtkOrientation // out
	var _cret C.gboolean       // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.GtkOrientation(orientation)

	_cret = C.gtk_widget_compute_expand(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) CreatePangoContextWidget() pango.Context {
	var _arg0 *C.GtkWidget    // out
	var _cret *C.PangoContext // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_create_pango_context(_arg0)

	var _context pango.Context // out

	_context = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(pango.Context)

	return _context
}

func (w widget) CreatePangoLayoutWidget(text string) pango.Layout {
	var _arg0 *C.GtkWidget   // out
	var _arg1 *C.gchar       // out
	var _cret *C.PangoLayout // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.gchar)(C.CString(text))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_widget_create_pango_layout(_arg0, _arg1)

	var _layout pango.Layout // out

	_layout = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(pango.Layout)

	return _layout
}

func (w widget) DestroyWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_destroy(_arg0)
}

func (w widget) DeviceIsShadowedWidget(device gdk.Device) bool {
	var _arg0 *C.GtkWidget // out
	var _arg1 *C.GdkDevice // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GdkDevice)(unsafe.Pointer(device.Native()))

	_cret = C.gtk_widget_device_is_shadowed(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) DragCheckThresholdWidget(startX int, startY int, currentX int, currentY int) bool {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gint       // out
	var _arg2 C.gint       // out
	var _arg3 C.gint       // out
	var _arg4 C.gint       // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.gint(startX)
	_arg2 = C.gint(startY)
	_arg3 = C.gint(currentX)
	_arg4 = C.gint(currentY)

	_cret = C.gtk_drag_check_threshold(_arg0, _arg1, _arg2, _arg3, _arg4)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) DragDestAddImageTargetsWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_drag_dest_add_image_targets(_arg0)
}

func (w widget) DragDestAddTextTargetsWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_drag_dest_add_text_targets(_arg0)
}

func (w widget) DragDestAddURITargetsWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_drag_dest_add_uri_targets(_arg0)
}

func (w widget) DragDestFindTargetWidget(context gdk.DragContext, targetList *TargetList) *gdk.Atom {
	var _arg0 *C.GtkWidget      // out
	var _arg1 *C.GdkDragContext // out
	var _arg2 *C.GtkTargetList  // out
	var _cret C.GdkAtom         // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GdkDragContext)(unsafe.Pointer(context.Native()))
	_arg2 = (*C.GtkTargetList)(unsafe.Pointer(targetList.Native()))

	_cret = C.gtk_drag_dest_find_target(_arg0, _arg1, _arg2)

	var _atom *gdk.Atom // out

	{
		var refTmpIn *C.GdkAtom
		var refTmpOut *gdk.Atom

		in0 := &_cret
		refTmpIn = in0

		refTmpOut = (*gdk.Atom)(unsafe.Pointer(refTmpIn))

		_atom = refTmpOut
	}

	return _atom
}

func (w widget) DragDestGetTargetListWidget() *TargetList {
	var _arg0 *C.GtkWidget     // out
	var _cret *C.GtkTargetList // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_drag_dest_get_target_list(_arg0)

	var _targetList *TargetList // out

	_targetList = (*TargetList)(unsafe.Pointer(_cret))

	return _targetList
}

func (w widget) DragDestGetTrackMotionWidget() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_drag_dest_get_track_motion(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) DragDestSetWidget(flags DestDefaults, targets []TargetEntry, actions gdk.DragAction) {
	var _arg0 *C.GtkWidget      // out
	var _arg1 C.GtkDestDefaults // out
	var _arg2 *C.GtkTargetEntry
	var _arg3 C.gint
	var _arg4 C.GdkDragAction // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.GtkDestDefaults(flags)
	_arg3 = C.gint(len(targets))
	_arg2 = (*C.GtkTargetEntry)(unsafe.Pointer(&targets[0]))
	_arg4 = C.GdkDragAction(actions)

	C.gtk_drag_dest_set(_arg0, _arg1, _arg2, _arg3, _arg4)
}

func (w widget) DragDestSetProxyWidget(proxyWindow gdk.Window, protocol gdk.DragProtocol, useCoordinates bool) {
	var _arg0 *C.GtkWidget      // out
	var _arg1 *C.GdkWindow      // out
	var _arg2 C.GdkDragProtocol // out
	var _arg3 C.gboolean        // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GdkWindow)(unsafe.Pointer(proxyWindow.Native()))
	_arg2 = C.GdkDragProtocol(protocol)
	if useCoordinates {
		_arg3 = C.TRUE
	}

	C.gtk_drag_dest_set_proxy(_arg0, _arg1, _arg2, _arg3)
}

func (w widget) DragDestSetTargetListWidget(targetList *TargetList) {
	var _arg0 *C.GtkWidget     // out
	var _arg1 *C.GtkTargetList // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GtkTargetList)(unsafe.Pointer(targetList.Native()))

	C.gtk_drag_dest_set_target_list(_arg0, _arg1)
}

func (w widget) DragDestSetTrackMotionWidget(trackMotion bool) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	if trackMotion {
		_arg1 = C.TRUE
	}

	C.gtk_drag_dest_set_track_motion(_arg0, _arg1)
}

func (w widget) DragDestUnsetWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_drag_dest_unset(_arg0)
}

func (w widget) DragGetDataWidget(context gdk.DragContext, target *gdk.Atom, time_ uint32) {
	var _arg0 *C.GtkWidget      // out
	var _arg1 *C.GdkDragContext // out
	var _arg2 C.GdkAtom         // out
	var _arg3 C.guint32         // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GdkDragContext)(unsafe.Pointer(context.Native()))
	{
		var refTmpIn *gdk.Atom
		var refTmpOut *C.GdkAtom

		refTmpIn = target

		refTmpOut = (*C.GdkAtom)(unsafe.Pointer(refTmpIn.Native()))

		_arg2 = *refTmpOut
	}
	_arg3 = C.guint32(time_)

	C.gtk_drag_get_data(_arg0, _arg1, _arg2, _arg3)
}

func (w widget) DragHighlightWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_drag_highlight(_arg0)
}

func (w widget) DragSourceAddImageTargetsWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_drag_source_add_image_targets(_arg0)
}

func (w widget) DragSourceAddTextTargetsWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_drag_source_add_text_targets(_arg0)
}

func (w widget) DragSourceAddURITargetsWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_drag_source_add_uri_targets(_arg0)
}

func (w widget) DragSourceGetTargetListWidget() *TargetList {
	var _arg0 *C.GtkWidget     // out
	var _cret *C.GtkTargetList // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_drag_source_get_target_list(_arg0)

	var _targetList *TargetList // out

	_targetList = (*TargetList)(unsafe.Pointer(_cret))

	return _targetList
}

func (w widget) DragSourceSetWidget(startButtonMask gdk.ModifierType, targets []TargetEntry, actions gdk.DragAction) {
	var _arg0 *C.GtkWidget      // out
	var _arg1 C.GdkModifierType // out
	var _arg2 *C.GtkTargetEntry
	var _arg3 C.gint
	var _arg4 C.GdkDragAction // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.GdkModifierType(startButtonMask)
	_arg3 = C.gint(len(targets))
	_arg2 = (*C.GtkTargetEntry)(unsafe.Pointer(&targets[0]))
	_arg4 = C.GdkDragAction(actions)

	C.gtk_drag_source_set(_arg0, _arg1, _arg2, _arg3, _arg4)
}

func (w widget) DragSourceSetIconGIconWidget(icon gio.Icon) {
	var _arg0 *C.GtkWidget // out
	var _arg1 *C.GIcon     // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GIcon)(unsafe.Pointer(icon.Native()))

	C.gtk_drag_source_set_icon_gicon(_arg0, _arg1)
}

func (w widget) DragSourceSetIconNameWidget(iconName string) {
	var _arg0 *C.GtkWidget // out
	var _arg1 *C.gchar     // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.gchar)(C.CString(iconName))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_drag_source_set_icon_name(_arg0, _arg1)
}

func (w widget) DragSourceSetIconPixbufWidget(pixbuf gdkpixbuf.Pixbuf) {
	var _arg0 *C.GtkWidget // out
	var _arg1 *C.GdkPixbuf // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GdkPixbuf)(unsafe.Pointer(pixbuf.Native()))

	C.gtk_drag_source_set_icon_pixbuf(_arg0, _arg1)
}

func (w widget) DragSourceSetIconStockWidget(stockId string) {
	var _arg0 *C.GtkWidget // out
	var _arg1 *C.gchar     // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.gchar)(C.CString(stockId))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_drag_source_set_icon_stock(_arg0, _arg1)
}

func (w widget) DragSourceSetTargetListWidget(targetList *TargetList) {
	var _arg0 *C.GtkWidget     // out
	var _arg1 *C.GtkTargetList // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GtkTargetList)(unsafe.Pointer(targetList.Native()))

	C.gtk_drag_source_set_target_list(_arg0, _arg1)
}

func (w widget) DragSourceUnsetWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_drag_source_unset(_arg0)
}

func (w widget) DragUnhighlightWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_drag_unhighlight(_arg0)
}

func (w widget) DrawWidget(cr *cairo.Context) {
	var _arg0 *C.GtkWidget // out
	var _arg1 *C.cairo_t   // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.cairo_t)(unsafe.Pointer(cr.Native()))

	C.gtk_widget_draw(_arg0, _arg1)
}

func (w widget) EnsureStyleWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_ensure_style(_arg0)
}

func (w widget) ErrorBellWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_error_bell(_arg0)
}

func (w widget) FreezeChildNotifyWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_freeze_child_notify(_arg0)
}

func (w widget) ActionGroup(prefix string) gio.ActionGroup {
	var _arg0 *C.GtkWidget    // out
	var _arg1 *C.gchar        // out
	var _cret *C.GActionGroup // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.gchar)(C.CString(prefix))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_widget_get_action_group(_arg0, _arg1)

	var _actionGroup gio.ActionGroup // out

	_actionGroup = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(gio.ActionGroup)

	return _actionGroup
}

func (w widget) AllocatedBaseline() int {
	var _arg0 *C.GtkWidget // out
	var _cret C.int        // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_allocated_baseline(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (w widget) AllocatedHeight() int {
	var _arg0 *C.GtkWidget // out
	var _cret C.int        // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_allocated_height(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (w widget) AllocatedWidth() int {
	var _arg0 *C.GtkWidget // out
	var _cret C.int        // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_allocated_width(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (w widget) Ancestor(widgetType externglib.Type) Widget {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.GType      // out
	var _cret *C.GtkWidget // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (C.GType)(widgetType)

	_cret = C.gtk_widget_get_ancestor(_arg0, _arg1)

	var _ret Widget // out

	_ret = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Widget)

	return _ret
}

func (w widget) AppPaintable() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_app_paintable(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) CanDefault() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_can_default(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) CanFocus() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_can_focus(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) ChildRequisition() Requisition {
	var _arg0 *C.GtkWidget     // out
	var _arg1 C.GtkRequisition // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_get_child_requisition(_arg0, &_arg1)

	var _requisition Requisition // out

	{
		var refTmpIn *C.GtkRequisition
		var refTmpOut *Requisition

		in0 := &_arg1
		refTmpIn = in0

		refTmpOut = (*Requisition)(unsafe.Pointer(refTmpIn))

		_requisition = *refTmpOut
	}

	return _requisition
}

func (w widget) ChildVisible() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_child_visible(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) Clipboard(selection *gdk.Atom) Clipboard {
	var _arg0 *C.GtkWidget    // out
	var _arg1 C.GdkAtom       // out
	var _cret *C.GtkClipboard // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	{
		var refTmpIn *gdk.Atom
		var refTmpOut *C.GdkAtom

		refTmpIn = selection

		refTmpOut = (*C.GdkAtom)(unsafe.Pointer(refTmpIn.Native()))

		_arg1 = *refTmpOut
	}

	_cret = C.gtk_widget_get_clipboard(_arg0, _arg1)

	var _clipboard Clipboard // out

	_clipboard = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Clipboard)

	return _clipboard
}

func (w widget) CompositeName() string {
	var _arg0 *C.GtkWidget // out
	var _cret *C.gchar     // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_composite_name(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

func (w widget) DeviceEnabled(device gdk.Device) bool {
	var _arg0 *C.GtkWidget // out
	var _arg1 *C.GdkDevice // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GdkDevice)(unsafe.Pointer(device.Native()))

	_cret = C.gtk_widget_get_device_enabled(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) DeviceEvents(device gdk.Device) gdk.EventMask {
	var _arg0 *C.GtkWidget   // out
	var _arg1 *C.GdkDevice   // out
	var _cret C.GdkEventMask // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GdkDevice)(unsafe.Pointer(device.Native()))

	_cret = C.gtk_widget_get_device_events(_arg0, _arg1)

	var _eventMask gdk.EventMask // out

	_eventMask = gdk.EventMask(_cret)

	return _eventMask
}

func (w widget) Direction() TextDirection {
	var _arg0 *C.GtkWidget       // out
	var _cret C.GtkTextDirection // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_direction(_arg0)

	var _textDirection TextDirection // out

	_textDirection = TextDirection(_cret)

	return _textDirection
}

func (w widget) Display() gdk.Display {
	var _arg0 *C.GtkWidget  // out
	var _cret *C.GdkDisplay // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_display(_arg0)

	var _display gdk.Display // out

	_display = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(gdk.Display)

	return _display
}

func (w widget) DoubleBuffered() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_double_buffered(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) Events() int {
	var _arg0 *C.GtkWidget // out
	var _cret C.gint       // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_events(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (w widget) FocusOnClick() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_focus_on_click(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) FontMap() pango.FontMap {
	var _arg0 *C.GtkWidget    // out
	var _cret *C.PangoFontMap // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_font_map(_arg0)

	var _fontMap pango.FontMap // out

	_fontMap = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(pango.FontMap)

	return _fontMap
}

func (w widget) FontOptions() *cairo.FontOptions {
	var _arg0 *C.GtkWidget            // out
	var _cret *C.cairo_font_options_t // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_font_options(_arg0)

	var _fontOptions *cairo.FontOptions // out

	_fontOptions = (*cairo.FontOptions)(unsafe.Pointer(_cret))

	return _fontOptions
}

func (w widget) FrameClock() gdk.FrameClock {
	var _arg0 *C.GtkWidget     // out
	var _cret *C.GdkFrameClock // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_frame_clock(_arg0)

	var _frameClock gdk.FrameClock // out

	_frameClock = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(gdk.FrameClock)

	return _frameClock
}

func (w widget) Halign() Align {
	var _arg0 *C.GtkWidget // out
	var _cret C.GtkAlign   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_halign(_arg0)

	var _align Align // out

	_align = Align(_cret)

	return _align
}

func (w widget) HasTooltip() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_has_tooltip(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) HasWindow() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_has_window(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) Hexpand() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_hexpand(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) HexpandSet() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_hexpand_set(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) Mapped() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_mapped(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) MarginBottom() int {
	var _arg0 *C.GtkWidget // out
	var _cret C.gint       // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_margin_bottom(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (w widget) MarginEnd() int {
	var _arg0 *C.GtkWidget // out
	var _cret C.gint       // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_margin_end(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (w widget) MarginLeft() int {
	var _arg0 *C.GtkWidget // out
	var _cret C.gint       // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_margin_left(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (w widget) MarginRight() int {
	var _arg0 *C.GtkWidget // out
	var _cret C.gint       // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_margin_right(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (w widget) MarginStart() int {
	var _arg0 *C.GtkWidget // out
	var _cret C.gint       // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_margin_start(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (w widget) MarginTop() int {
	var _arg0 *C.GtkWidget // out
	var _cret C.gint       // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_margin_top(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (w widget) ModifierMask(intent gdk.ModifierIntent) gdk.ModifierType {
	var _arg0 *C.GtkWidget        // out
	var _arg1 C.GdkModifierIntent // out
	var _cret C.GdkModifierType   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.GdkModifierIntent(intent)

	_cret = C.gtk_widget_get_modifier_mask(_arg0, _arg1)

	var _modifierType gdk.ModifierType // out

	_modifierType = gdk.ModifierType(_cret)

	return _modifierType
}

func (w widget) ModifierStyle() RCStyle {
	var _arg0 *C.GtkWidget  // out
	var _cret *C.GtkRcStyle // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_modifier_style(_arg0)

	var _rcStyle RCStyle // out

	_rcStyle = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(RCStyle)

	return _rcStyle
}

func (w widget) GetName() string {
	var _arg0 *C.GtkWidget // out
	var _cret *C.gchar     // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_name(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

func (w widget) NoShowAll() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_no_show_all(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) Opacity() float64 {
	var _arg0 *C.GtkWidget // out
	var _cret C.double     // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_opacity(_arg0)

	var _gdouble float64 // out

	_gdouble = float64(_cret)

	return _gdouble
}

func (w widget) PangoContext() pango.Context {
	var _arg0 *C.GtkWidget    // out
	var _cret *C.PangoContext // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_pango_context(_arg0)

	var _context pango.Context // out

	_context = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(pango.Context)

	return _context
}

func (w widget) Parent() Widget {
	var _arg0 *C.GtkWidget // out
	var _cret *C.GtkWidget // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_parent(_arg0)

	var _ret Widget // out

	_ret = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Widget)

	return _ret
}

func (w widget) ParentWindow() gdk.Window {
	var _arg0 *C.GtkWidget // out
	var _cret *C.GdkWindow // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_parent_window(_arg0)

	var _window gdk.Window // out

	_window = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(gdk.Window)

	return _window
}

func (w widget) GetPath() *WidgetPath {
	var _arg0 *C.GtkWidget     // out
	var _cret *C.GtkWidgetPath // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_path(_arg0)

	var _widgetPath *WidgetPath // out

	_widgetPath = (*WidgetPath)(unsafe.Pointer(_cret))

	return _widgetPath
}

func (w widget) Pointer() (x int, y int) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gint       // in
	var _arg2 C.gint       // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_get_pointer(_arg0, &_arg1, &_arg2)

	var _x int // out
	var _y int // out

	_x = int(_arg1)
	_y = int(_arg2)

	return _x, _y
}

func (w widget) PreferredHeight() (minimumHeight int, naturalHeight int) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gint       // in
	var _arg2 C.gint       // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_get_preferred_height(_arg0, &_arg1, &_arg2)

	var _minimumHeight int // out
	var _naturalHeight int // out

	_minimumHeight = int(_arg1)
	_naturalHeight = int(_arg2)

	return _minimumHeight, _naturalHeight
}

func (w widget) PreferredHeightAndBaselineForWidth(width int) (minimumHeight int, naturalHeight int, minimumBaseline int, naturalBaseline int) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gint       // out
	var _arg2 C.gint       // in
	var _arg3 C.gint       // in
	var _arg4 C.gint       // in
	var _arg5 C.gint       // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.gint(width)

	C.gtk_widget_get_preferred_height_and_baseline_for_width(_arg0, _arg1, &_arg2, &_arg3, &_arg4, &_arg5)

	var _minimumHeight int   // out
	var _naturalHeight int   // out
	var _minimumBaseline int // out
	var _naturalBaseline int // out

	_minimumHeight = int(_arg2)
	_naturalHeight = int(_arg3)
	_minimumBaseline = int(_arg4)
	_naturalBaseline = int(_arg5)

	return _minimumHeight, _naturalHeight, _minimumBaseline, _naturalBaseline
}

func (w widget) PreferredHeightForWidth(width int) (minimumHeight int, naturalHeight int) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gint       // out
	var _arg2 C.gint       // in
	var _arg3 C.gint       // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.gint(width)

	C.gtk_widget_get_preferred_height_for_width(_arg0, _arg1, &_arg2, &_arg3)

	var _minimumHeight int // out
	var _naturalHeight int // out

	_minimumHeight = int(_arg2)
	_naturalHeight = int(_arg3)

	return _minimumHeight, _naturalHeight
}

func (w widget) PreferredSize() (minimumSize Requisition, naturalSize Requisition) {
	var _arg0 *C.GtkWidget     // out
	var _arg1 C.GtkRequisition // in
	var _arg2 C.GtkRequisition // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_get_preferred_size(_arg0, &_arg1, &_arg2)

	var _minimumSize Requisition // out
	var _naturalSize Requisition // out

	{
		var refTmpIn *C.GtkRequisition
		var refTmpOut *Requisition

		in0 := &_arg1
		refTmpIn = in0

		refTmpOut = (*Requisition)(unsafe.Pointer(refTmpIn))

		_minimumSize = *refTmpOut
	}
	{
		var refTmpIn *C.GtkRequisition
		var refTmpOut *Requisition

		in0 := &_arg2
		refTmpIn = in0

		refTmpOut = (*Requisition)(unsafe.Pointer(refTmpIn))

		_naturalSize = *refTmpOut
	}

	return _minimumSize, _naturalSize
}

func (w widget) PreferredWidth() (minimumWidth int, naturalWidth int) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gint       // in
	var _arg2 C.gint       // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_get_preferred_width(_arg0, &_arg1, &_arg2)

	var _minimumWidth int // out
	var _naturalWidth int // out

	_minimumWidth = int(_arg1)
	_naturalWidth = int(_arg2)

	return _minimumWidth, _naturalWidth
}

func (w widget) PreferredWidthForHeight(height int) (minimumWidth int, naturalWidth int) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gint       // out
	var _arg2 C.gint       // in
	var _arg3 C.gint       // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.gint(height)

	C.gtk_widget_get_preferred_width_for_height(_arg0, _arg1, &_arg2, &_arg3)

	var _minimumWidth int // out
	var _naturalWidth int // out

	_minimumWidth = int(_arg2)
	_naturalWidth = int(_arg3)

	return _minimumWidth, _naturalWidth
}

func (w widget) Realized() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_realized(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) ReceivesDefault() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_receives_default(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) RequestMode() SizeRequestMode {
	var _arg0 *C.GtkWidget         // out
	var _cret C.GtkSizeRequestMode // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_request_mode(_arg0)

	var _sizeRequestMode SizeRequestMode // out

	_sizeRequestMode = SizeRequestMode(_cret)

	return _sizeRequestMode
}

func (w widget) Requisition() Requisition {
	var _arg0 *C.GtkWidget     // out
	var _arg1 C.GtkRequisition // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_get_requisition(_arg0, &_arg1)

	var _requisition Requisition // out

	{
		var refTmpIn *C.GtkRequisition
		var refTmpOut *Requisition

		in0 := &_arg1
		refTmpIn = in0

		refTmpOut = (*Requisition)(unsafe.Pointer(refTmpIn))

		_requisition = *refTmpOut
	}

	return _requisition
}

func (w widget) RootWindow() gdk.Window {
	var _arg0 *C.GtkWidget // out
	var _cret *C.GdkWindow // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_root_window(_arg0)

	var _window gdk.Window // out

	_window = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(gdk.Window)

	return _window
}

func (w widget) ScaleFactor() int {
	var _arg0 *C.GtkWidget // out
	var _cret C.gint       // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_scale_factor(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (w widget) Screen() gdk.Screen {
	var _arg0 *C.GtkWidget // out
	var _cret *C.GdkScreen // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_screen(_arg0)

	var _screen gdk.Screen // out

	_screen = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(gdk.Screen)

	return _screen
}

func (w widget) Sensitive() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_sensitive(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) Settings() Settings {
	var _arg0 *C.GtkWidget   // out
	var _cret *C.GtkSettings // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_settings(_arg0)

	var _settings Settings // out

	_settings = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Settings)

	return _settings
}

func (w widget) GetSizeRequest() (width int, height int) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gint       // in
	var _arg2 C.gint       // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_get_size_request(_arg0, &_arg1, &_arg2)

	var _width int  // out
	var _height int // out

	_width = int(_arg1)
	_height = int(_arg2)

	return _width, _height
}

func (w widget) State() StateType {
	var _arg0 *C.GtkWidget   // out
	var _cret C.GtkStateType // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_state(_arg0)

	var _stateType StateType // out

	_stateType = StateType(_cret)

	return _stateType
}

func (w widget) StateFlags() StateFlags {
	var _arg0 *C.GtkWidget    // out
	var _cret C.GtkStateFlags // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_state_flags(_arg0)

	var _stateFlags StateFlags // out

	_stateFlags = StateFlags(_cret)

	return _stateFlags
}

func (w widget) Style() Style {
	var _arg0 *C.GtkWidget // out
	var _cret *C.GtkStyle  // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_style(_arg0)

	var _style Style // out

	_style = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Style)

	return _style
}

func (w widget) StyleContext() StyleContext {
	var _arg0 *C.GtkWidget       // out
	var _cret *C.GtkStyleContext // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_style_context(_arg0)

	var _styleContext StyleContext // out

	_styleContext = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(StyleContext)

	return _styleContext
}

func (w widget) SupportMultidevice() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_support_multidevice(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) TemplateChild(widgetType externglib.Type, name string) gextras.Objector {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.GType      // out
	var _arg2 *C.gchar     // out
	var _cret *C.GObject   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (C.GType)(widgetType)
	_arg2 = (*C.gchar)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.gtk_widget_get_template_child(_arg0, _arg1, _arg2)

	var _object gextras.Objector // out

	_object = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(gextras.Objector)

	return _object
}

func (w widget) TooltipMarkup() string {
	var _arg0 *C.GtkWidget // out
	var _cret *C.gchar     // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_tooltip_markup(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

func (w widget) TooltipText() string {
	var _arg0 *C.GtkWidget // out
	var _cret *C.gchar     // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_tooltip_text(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

func (w widget) TooltipWindow() Window {
	var _arg0 *C.GtkWidget // out
	var _cret *C.GtkWindow // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_tooltip_window(_arg0)

	var _window Window // out

	_window = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Window)

	return _window
}

func (w widget) Toplevel() Widget {
	var _arg0 *C.GtkWidget // out
	var _cret *C.GtkWidget // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_toplevel(_arg0)

	var _ret Widget // out

	_ret = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Widget)

	return _ret
}

func (w widget) Valign() Align {
	var _arg0 *C.GtkWidget // out
	var _cret C.GtkAlign   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_valign(_arg0)

	var _align Align // out

	_align = Align(_cret)

	return _align
}

func (w widget) ValignWithBaseline() Align {
	var _arg0 *C.GtkWidget // out
	var _cret C.GtkAlign   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_valign_with_baseline(_arg0)

	var _align Align // out

	_align = Align(_cret)

	return _align
}

func (w widget) Vexpand() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_vexpand(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) VexpandSet() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_vexpand_set(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) Visible() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_visible(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) Visual() gdk.Visual {
	var _arg0 *C.GtkWidget // out
	var _cret *C.GdkVisual // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_visual(_arg0)

	var _visual gdk.Visual // out

	_visual = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(gdk.Visual)

	return _visual
}

func (w widget) Window() gdk.Window {
	var _arg0 *C.GtkWidget // out
	var _cret *C.GdkWindow // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_window(_arg0)

	var _window gdk.Window // out

	_window = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(gdk.Window)

	return _window
}

func (w widget) GrabAddWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_grab_add(_arg0)
}

func (w widget) GrabDefaultWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_grab_default(_arg0)
}

func (w widget) GrabFocusWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_grab_focus(_arg0)
}

func (w widget) GrabRemoveWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_grab_remove(_arg0)
}

func (w widget) HasDefaultWidget() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_has_default(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) HasFocusWidget() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_has_focus(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) HasGrabWidget() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_has_grab(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) HasRCStyleWidget() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_has_rc_style(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) HasScreenWidget() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_has_screen(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) HasVisibleFocusWidget() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_has_visible_focus(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) HideWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_hide(_arg0)
}

func (w widget) HideOnDeleteWidget() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_hide_on_delete(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) InDestructionWidget() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_in_destruction(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) InitTemplateWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_init_template(_arg0)
}

func (w widget) InputShapeCombineRegionWidget(region *cairo.Region) {
	var _arg0 *C.GtkWidget      // out
	var _arg1 *C.cairo_region_t // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.cairo_region_t)(unsafe.Pointer(region.Native()))

	C.gtk_widget_input_shape_combine_region(_arg0, _arg1)
}

func (w widget) InsertActionGroupWidget(name string, group gio.ActionGroup) {
	var _arg0 *C.GtkWidget    // out
	var _arg1 *C.gchar        // out
	var _arg2 *C.GActionGroup // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.gchar)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.GActionGroup)(unsafe.Pointer(group.Native()))

	C.gtk_widget_insert_action_group(_arg0, _arg1, _arg2)
}

func (w widget) IntersectWidget(area *gdk.Rectangle) (gdk.Rectangle, bool) {
	var _arg0 *C.GtkWidget    // out
	var _arg1 *C.GdkRectangle // out
	var _arg2 C.GdkRectangle  // in
	var _cret C.gboolean      // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GdkRectangle)(unsafe.Pointer(area.Native()))

	_cret = C.gtk_widget_intersect(_arg0, _arg1, &_arg2)

	var _intersection gdk.Rectangle // out
	var _ok bool                    // out

	{
		var refTmpIn *C.GdkRectangle
		var refTmpOut *gdk.Rectangle

		in0 := &_arg2
		refTmpIn = in0

		refTmpOut = (*gdk.Rectangle)(unsafe.Pointer(refTmpIn))

		_intersection = *refTmpOut
	}
	if _cret != 0 {
		_ok = true
	}

	return _intersection, _ok
}

func (w widget) IsAncestorWidget(ancestor Widget) bool {
	var _arg0 *C.GtkWidget // out
	var _arg1 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(ancestor.Native()))

	_cret = C.gtk_widget_is_ancestor(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) IsCompositedWidget() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_is_composited(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) IsDrawableWidget() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_is_drawable(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) IsFocusWidget() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_is_focus(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) IsSensitiveWidget() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_is_sensitive(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) IsToplevelWidget() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_is_toplevel(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) IsVisibleWidget() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_is_visible(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) KeynavFailedWidget(direction DirectionType) bool {
	var _arg0 *C.GtkWidget       // out
	var _arg1 C.GtkDirectionType // out
	var _cret C.gboolean         // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.GtkDirectionType(direction)

	_cret = C.gtk_widget_keynav_failed(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) ListActionPrefixesWidget() []string {
	var _arg0 *C.GtkWidget // out
	var _cret **C.gchar

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_list_action_prefixes(_arg0)

	var _utf8s []string

	{
		var i int
		var z *C.gchar
		for p := _cret; *p != z; p = &unsafe.Slice(p, i+1)[i] {
			i++
		}

		src := unsafe.Slice(_cret, i)
		_utf8s = make([]string, i)
		for i := range src {
			_utf8s[i] = C.GoString(src[i])
		}
	}

	return _utf8s
}

func (w widget) MapWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_map(_arg0)
}

func (w widget) MnemonicActivateWidget(groupCycling bool) bool {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gboolean   // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	if groupCycling {
		_arg1 = C.TRUE
	}

	_cret = C.gtk_widget_mnemonic_activate(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) ModifyBaseWidget(state StateType, color *gdk.Color) {
	var _arg0 *C.GtkWidget   // out
	var _arg1 C.GtkStateType // out
	var _arg2 *C.GdkColor    // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.GtkStateType(state)
	_arg2 = (*C.GdkColor)(unsafe.Pointer(color.Native()))

	C.gtk_widget_modify_base(_arg0, _arg1, _arg2)
}

func (w widget) ModifyBgWidget(state StateType, color *gdk.Color) {
	var _arg0 *C.GtkWidget   // out
	var _arg1 C.GtkStateType // out
	var _arg2 *C.GdkColor    // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.GtkStateType(state)
	_arg2 = (*C.GdkColor)(unsafe.Pointer(color.Native()))

	C.gtk_widget_modify_bg(_arg0, _arg1, _arg2)
}

func (w widget) ModifyCursorWidget(primary *gdk.Color, secondary *gdk.Color) {
	var _arg0 *C.GtkWidget // out
	var _arg1 *C.GdkColor  // out
	var _arg2 *C.GdkColor  // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GdkColor)(unsafe.Pointer(primary.Native()))
	_arg2 = (*C.GdkColor)(unsafe.Pointer(secondary.Native()))

	C.gtk_widget_modify_cursor(_arg0, _arg1, _arg2)
}

func (w widget) ModifyFgWidget(state StateType, color *gdk.Color) {
	var _arg0 *C.GtkWidget   // out
	var _arg1 C.GtkStateType // out
	var _arg2 *C.GdkColor    // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.GtkStateType(state)
	_arg2 = (*C.GdkColor)(unsafe.Pointer(color.Native()))

	C.gtk_widget_modify_fg(_arg0, _arg1, _arg2)
}

func (w widget) ModifyFontWidget(fontDesc *pango.FontDescription) {
	var _arg0 *C.GtkWidget            // out
	var _arg1 *C.PangoFontDescription // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.PangoFontDescription)(unsafe.Pointer(fontDesc.Native()))

	C.gtk_widget_modify_font(_arg0, _arg1)
}

func (w widget) ModifyStyleWidget(style RCStyle) {
	var _arg0 *C.GtkWidget  // out
	var _arg1 *C.GtkRcStyle // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GtkRcStyle)(unsafe.Pointer(style.Native()))

	C.gtk_widget_modify_style(_arg0, _arg1)
}

func (w widget) ModifyTextWidget(state StateType, color *gdk.Color) {
	var _arg0 *C.GtkWidget   // out
	var _arg1 C.GtkStateType // out
	var _arg2 *C.GdkColor    // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.GtkStateType(state)
	_arg2 = (*C.GdkColor)(unsafe.Pointer(color.Native()))

	C.gtk_widget_modify_text(_arg0, _arg1, _arg2)
}

func (w widget) OverrideBackgroundColorWidget(state StateFlags, color *gdk.RGBA) {
	var _arg0 *C.GtkWidget    // out
	var _arg1 C.GtkStateFlags // out
	var _arg2 *C.GdkRGBA      // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.GtkStateFlags(state)
	_arg2 = (*C.GdkRGBA)(unsafe.Pointer(color.Native()))

	C.gtk_widget_override_background_color(_arg0, _arg1, _arg2)
}

func (w widget) OverrideColorWidget(state StateFlags, color *gdk.RGBA) {
	var _arg0 *C.GtkWidget    // out
	var _arg1 C.GtkStateFlags // out
	var _arg2 *C.GdkRGBA      // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.GtkStateFlags(state)
	_arg2 = (*C.GdkRGBA)(unsafe.Pointer(color.Native()))

	C.gtk_widget_override_color(_arg0, _arg1, _arg2)
}

func (w widget) OverrideCursorWidget(cursor *gdk.RGBA, secondaryCursor *gdk.RGBA) {
	var _arg0 *C.GtkWidget // out
	var _arg1 *C.GdkRGBA   // out
	var _arg2 *C.GdkRGBA   // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GdkRGBA)(unsafe.Pointer(cursor.Native()))
	_arg2 = (*C.GdkRGBA)(unsafe.Pointer(secondaryCursor.Native()))

	C.gtk_widget_override_cursor(_arg0, _arg1, _arg2)
}

func (w widget) OverrideFontWidget(fontDesc *pango.FontDescription) {
	var _arg0 *C.GtkWidget            // out
	var _arg1 *C.PangoFontDescription // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.PangoFontDescription)(unsafe.Pointer(fontDesc.Native()))

	C.gtk_widget_override_font(_arg0, _arg1)
}

func (w widget) OverrideSymbolicColorWidget(name string, color *gdk.RGBA) {
	var _arg0 *C.GtkWidget // out
	var _arg1 *C.gchar     // out
	var _arg2 *C.GdkRGBA   // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.gchar)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.GdkRGBA)(unsafe.Pointer(color.Native()))

	C.gtk_widget_override_symbolic_color(_arg0, _arg1, _arg2)
}

func (w widget) PathWidget() (pathLength uint, path string, pathReversed string) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.guint      // in
	var _arg2 *C.gchar     // in
	var _arg3 *C.gchar     // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_path(_arg0, &_arg1, &_arg2, &_arg3)

	var _pathLength uint     // out
	var _path string         // out
	var _pathReversed string // out

	_pathLength = uint(_arg1)
	_path = C.GoString(_arg2)
	defer C.free(unsafe.Pointer(_arg2))
	_pathReversed = C.GoString(_arg3)
	defer C.free(unsafe.Pointer(_arg3))

	return _pathLength, _path, _pathReversed
}

func (w widget) QueueAllocateWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_queue_allocate(_arg0)
}

func (w widget) QueueComputeExpandWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_queue_compute_expand(_arg0)
}

func (w widget) QueueDrawWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_queue_draw(_arg0)
}

func (w widget) QueueDrawAreaWidget(x int, y int, width int, height int) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gint       // out
	var _arg2 C.gint       // out
	var _arg3 C.gint       // out
	var _arg4 C.gint       // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.gint(x)
	_arg2 = C.gint(y)
	_arg3 = C.gint(width)
	_arg4 = C.gint(height)

	C.gtk_widget_queue_draw_area(_arg0, _arg1, _arg2, _arg3, _arg4)
}

func (w widget) QueueDrawRegionWidget(region *cairo.Region) {
	var _arg0 *C.GtkWidget      // out
	var _arg1 *C.cairo_region_t // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.cairo_region_t)(unsafe.Pointer(region.Native()))

	C.gtk_widget_queue_draw_region(_arg0, _arg1)
}

func (w widget) QueueResizeWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_queue_resize(_arg0)
}

func (w widget) QueueResizeNoRedrawWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_queue_resize_no_redraw(_arg0)
}

func (w widget) RealizeWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_realize(_arg0)
}

func (w widget) RegionIntersectWidget(region *cairo.Region) *cairo.Region {
	var _arg0 *C.GtkWidget      // out
	var _arg1 *C.cairo_region_t // out
	var _cret *C.cairo_region_t // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.cairo_region_t)(unsafe.Pointer(region.Native()))

	_cret = C.gtk_widget_region_intersect(_arg0, _arg1)

	var _ret *cairo.Region // out

	_ret = (*cairo.Region)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(&_ret, func(v **cairo.Region) {
		C.free(unsafe.Pointer(v))
	})

	return _ret
}

func (w widget) RegisterWindowWidget(window gdk.Window) {
	var _arg0 *C.GtkWidget // out
	var _arg1 *C.GdkWindow // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GdkWindow)(unsafe.Pointer(window.Native()))

	C.gtk_widget_register_window(_arg0, _arg1)
}

func (w widget) RemoveAcceleratorWidget(accelGroup AccelGroup, accelKey uint, accelMods gdk.ModifierType) bool {
	var _arg0 *C.GtkWidget      // out
	var _arg1 *C.GtkAccelGroup  // out
	var _arg2 C.guint           // out
	var _arg3 C.GdkModifierType // out
	var _cret C.gboolean        // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GtkAccelGroup)(unsafe.Pointer(accelGroup.Native()))
	_arg2 = C.guint(accelKey)
	_arg3 = C.GdkModifierType(accelMods)

	_cret = C.gtk_widget_remove_accelerator(_arg0, _arg1, _arg2, _arg3)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) RemoveMnemonicLabelWidget(label Widget) {
	var _arg0 *C.GtkWidget // out
	var _arg1 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(label.Native()))

	C.gtk_widget_remove_mnemonic_label(_arg0, _arg1)
}

func (w widget) RemoveTickCallbackWidget(id uint) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.guint      // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.guint(id)

	C.gtk_widget_remove_tick_callback(_arg0, _arg1)
}

func (w widget) RenderIconWidget(stockId string, size int, detail string) gdkpixbuf.Pixbuf {
	var _arg0 *C.GtkWidget  // out
	var _arg1 *C.gchar      // out
	var _arg2 C.GtkIconSize // out
	var _arg3 *C.gchar      // out
	var _cret *C.GdkPixbuf  // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.gchar)(C.CString(stockId))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.GtkIconSize(size)
	_arg3 = (*C.gchar)(C.CString(detail))
	defer C.free(unsafe.Pointer(_arg3))

	_cret = C.gtk_widget_render_icon(_arg0, _arg1, _arg2, _arg3)

	var _pixbuf gdkpixbuf.Pixbuf // out

	_pixbuf = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(gdkpixbuf.Pixbuf)

	return _pixbuf
}

func (w widget) RenderIconPixbufWidget(stockId string, size int) gdkpixbuf.Pixbuf {
	var _arg0 *C.GtkWidget  // out
	var _arg1 *C.gchar      // out
	var _arg2 C.GtkIconSize // out
	var _cret *C.GdkPixbuf  // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.gchar)(C.CString(stockId))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.GtkIconSize(size)

	_cret = C.gtk_widget_render_icon_pixbuf(_arg0, _arg1, _arg2)

	var _pixbuf gdkpixbuf.Pixbuf // out

	_pixbuf = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(gdkpixbuf.Pixbuf)

	return _pixbuf
}

func (w widget) ReparentWidget(newParent Widget) {
	var _arg0 *C.GtkWidget // out
	var _arg1 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(newParent.Native()))

	C.gtk_widget_reparent(_arg0, _arg1)
}

func (w widget) ResetRCStylesWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_reset_rc_styles(_arg0)
}

func (w widget) ResetStyleWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_reset_style(_arg0)
}

func (w widget) SetAccelPathWidget(accelPath string, accelGroup AccelGroup) {
	var _arg0 *C.GtkWidget     // out
	var _arg1 *C.gchar         // out
	var _arg2 *C.GtkAccelGroup // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.gchar)(C.CString(accelPath))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.GtkAccelGroup)(unsafe.Pointer(accelGroup.Native()))

	C.gtk_widget_set_accel_path(_arg0, _arg1, _arg2)
}

func (w widget) SetAppPaintableWidget(appPaintable bool) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	if appPaintable {
		_arg1 = C.TRUE
	}

	C.gtk_widget_set_app_paintable(_arg0, _arg1)
}

func (w widget) SetCanDefaultWidget(canDefault bool) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	if canDefault {
		_arg1 = C.TRUE
	}

	C.gtk_widget_set_can_default(_arg0, _arg1)
}

func (w widget) SetCanFocusWidget(canFocus bool) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	if canFocus {
		_arg1 = C.TRUE
	}

	C.gtk_widget_set_can_focus(_arg0, _arg1)
}

func (w widget) SetChildVisibleWidget(isVisible bool) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	if isVisible {
		_arg1 = C.TRUE
	}

	C.gtk_widget_set_child_visible(_arg0, _arg1)
}

func (w widget) SetCompositeNameWidget(name string) {
	var _arg0 *C.GtkWidget // out
	var _arg1 *C.gchar     // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.gchar)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_widget_set_composite_name(_arg0, _arg1)
}

func (w widget) SetDeviceEnabledWidget(device gdk.Device, enabled bool) {
	var _arg0 *C.GtkWidget // out
	var _arg1 *C.GdkDevice // out
	var _arg2 C.gboolean   // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GdkDevice)(unsafe.Pointer(device.Native()))
	if enabled {
		_arg2 = C.TRUE
	}

	C.gtk_widget_set_device_enabled(_arg0, _arg1, _arg2)
}

func (w widget) SetDeviceEventsWidget(device gdk.Device, events gdk.EventMask) {
	var _arg0 *C.GtkWidget   // out
	var _arg1 *C.GdkDevice   // out
	var _arg2 C.GdkEventMask // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GdkDevice)(unsafe.Pointer(device.Native()))
	_arg2 = C.GdkEventMask(events)

	C.gtk_widget_set_device_events(_arg0, _arg1, _arg2)
}

func (w widget) SetDirectionWidget(dir TextDirection) {
	var _arg0 *C.GtkWidget       // out
	var _arg1 C.GtkTextDirection // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.GtkTextDirection(dir)

	C.gtk_widget_set_direction(_arg0, _arg1)
}

func (w widget) SetDoubleBufferedWidget(doubleBuffered bool) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	if doubleBuffered {
		_arg1 = C.TRUE
	}

	C.gtk_widget_set_double_buffered(_arg0, _arg1)
}

func (w widget) SetEventsWidget(events int) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gint       // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.gint(events)

	C.gtk_widget_set_events(_arg0, _arg1)
}

func (w widget) SetFocusOnClickWidget(focusOnClick bool) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	if focusOnClick {
		_arg1 = C.TRUE
	}

	C.gtk_widget_set_focus_on_click(_arg0, _arg1)
}

func (w widget) SetFontMapWidget(fontMap pango.FontMap) {
	var _arg0 *C.GtkWidget    // out
	var _arg1 *C.PangoFontMap // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.PangoFontMap)(unsafe.Pointer(fontMap.Native()))

	C.gtk_widget_set_font_map(_arg0, _arg1)
}

func (w widget) SetFontOptionsWidget(options *cairo.FontOptions) {
	var _arg0 *C.GtkWidget            // out
	var _arg1 *C.cairo_font_options_t // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.cairo_font_options_t)(unsafe.Pointer(options.Native()))

	C.gtk_widget_set_font_options(_arg0, _arg1)
}

func (w widget) SetHalignWidget(align Align) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.GtkAlign   // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.GtkAlign(align)

	C.gtk_widget_set_halign(_arg0, _arg1)
}

func (w widget) SetHasTooltipWidget(hasTooltip bool) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	if hasTooltip {
		_arg1 = C.TRUE
	}

	C.gtk_widget_set_has_tooltip(_arg0, _arg1)
}

func (w widget) SetHasWindowWidget(hasWindow bool) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	if hasWindow {
		_arg1 = C.TRUE
	}

	C.gtk_widget_set_has_window(_arg0, _arg1)
}

func (w widget) SetHexpandWidget(expand bool) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	if expand {
		_arg1 = C.TRUE
	}

	C.gtk_widget_set_hexpand(_arg0, _arg1)
}

func (w widget) SetHexpandSetWidget(set bool) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	if set {
		_arg1 = C.TRUE
	}

	C.gtk_widget_set_hexpand_set(_arg0, _arg1)
}

func (w widget) SetMappedWidget(mapped bool) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	if mapped {
		_arg1 = C.TRUE
	}

	C.gtk_widget_set_mapped(_arg0, _arg1)
}

func (w widget) SetMarginBottomWidget(margin int) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gint       // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.gint(margin)

	C.gtk_widget_set_margin_bottom(_arg0, _arg1)
}

func (w widget) SetMarginEndWidget(margin int) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gint       // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.gint(margin)

	C.gtk_widget_set_margin_end(_arg0, _arg1)
}

func (w widget) SetMarginLeftWidget(margin int) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gint       // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.gint(margin)

	C.gtk_widget_set_margin_left(_arg0, _arg1)
}

func (w widget) SetMarginRightWidget(margin int) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gint       // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.gint(margin)

	C.gtk_widget_set_margin_right(_arg0, _arg1)
}

func (w widget) SetMarginStartWidget(margin int) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gint       // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.gint(margin)

	C.gtk_widget_set_margin_start(_arg0, _arg1)
}

func (w widget) SetMarginTopWidget(margin int) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gint       // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.gint(margin)

	C.gtk_widget_set_margin_top(_arg0, _arg1)
}

func (w widget) SetNameWidget(name string) {
	var _arg0 *C.GtkWidget // out
	var _arg1 *C.gchar     // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.gchar)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_widget_set_name(_arg0, _arg1)
}

func (w widget) SetNoShowAllWidget(noShowAll bool) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	if noShowAll {
		_arg1 = C.TRUE
	}

	C.gtk_widget_set_no_show_all(_arg0, _arg1)
}

func (w widget) SetOpacityWidget(opacity float64) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.double     // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.double(opacity)

	C.gtk_widget_set_opacity(_arg0, _arg1)
}

func (w widget) SetParentWidget(parent Widget) {
	var _arg0 *C.GtkWidget // out
	var _arg1 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(parent.Native()))

	C.gtk_widget_set_parent(_arg0, _arg1)
}

func (w widget) SetParentWindowWidget(parentWindow gdk.Window) {
	var _arg0 *C.GtkWidget // out
	var _arg1 *C.GdkWindow // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GdkWindow)(unsafe.Pointer(parentWindow.Native()))

	C.gtk_widget_set_parent_window(_arg0, _arg1)
}

func (w widget) SetRealizedWidget(realized bool) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	if realized {
		_arg1 = C.TRUE
	}

	C.gtk_widget_set_realized(_arg0, _arg1)
}

func (w widget) SetReceivesDefaultWidget(receivesDefault bool) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	if receivesDefault {
		_arg1 = C.TRUE
	}

	C.gtk_widget_set_receives_default(_arg0, _arg1)
}

func (w widget) SetRedrawOnAllocateWidget(redrawOnAllocate bool) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	if redrawOnAllocate {
		_arg1 = C.TRUE
	}

	C.gtk_widget_set_redraw_on_allocate(_arg0, _arg1)
}

func (w widget) SetSensitiveWidget(sensitive bool) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	if sensitive {
		_arg1 = C.TRUE
	}

	C.gtk_widget_set_sensitive(_arg0, _arg1)
}

func (w widget) SetSizeRequestWidget(width int, height int) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gint       // out
	var _arg2 C.gint       // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.gint(width)
	_arg2 = C.gint(height)

	C.gtk_widget_set_size_request(_arg0, _arg1, _arg2)
}

func (w widget) SetStateWidget(state StateType) {
	var _arg0 *C.GtkWidget   // out
	var _arg1 C.GtkStateType // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.GtkStateType(state)

	C.gtk_widget_set_state(_arg0, _arg1)
}

func (w widget) SetStateFlagsWidget(flags StateFlags, clear bool) {
	var _arg0 *C.GtkWidget    // out
	var _arg1 C.GtkStateFlags // out
	var _arg2 C.gboolean      // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.GtkStateFlags(flags)
	if clear {
		_arg2 = C.TRUE
	}

	C.gtk_widget_set_state_flags(_arg0, _arg1, _arg2)
}

func (w widget) SetStyleWidget(style Style) {
	var _arg0 *C.GtkWidget // out
	var _arg1 *C.GtkStyle  // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GtkStyle)(unsafe.Pointer(style.Native()))

	C.gtk_widget_set_style(_arg0, _arg1)
}

func (w widget) SetSupportMultideviceWidget(supportMultidevice bool) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	if supportMultidevice {
		_arg1 = C.TRUE
	}

	C.gtk_widget_set_support_multidevice(_arg0, _arg1)
}

func (w widget) SetTooltipMarkupWidget(markup string) {
	var _arg0 *C.GtkWidget // out
	var _arg1 *C.gchar     // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.gchar)(C.CString(markup))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_widget_set_tooltip_markup(_arg0, _arg1)
}

func (w widget) SetTooltipTextWidget(text string) {
	var _arg0 *C.GtkWidget // out
	var _arg1 *C.gchar     // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.gchar)(C.CString(text))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_widget_set_tooltip_text(_arg0, _arg1)
}

func (w widget) SetTooltipWindowWidget(customWindow Window) {
	var _arg0 *C.GtkWidget // out
	var _arg1 *C.GtkWindow // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GtkWindow)(unsafe.Pointer(customWindow.Native()))

	C.gtk_widget_set_tooltip_window(_arg0, _arg1)
}

func (w widget) SetValignWidget(align Align) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.GtkAlign   // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.GtkAlign(align)

	C.gtk_widget_set_valign(_arg0, _arg1)
}

func (w widget) SetVexpandWidget(expand bool) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	if expand {
		_arg1 = C.TRUE
	}

	C.gtk_widget_set_vexpand(_arg0, _arg1)
}

func (w widget) SetVexpandSetWidget(set bool) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	if set {
		_arg1 = C.TRUE
	}

	C.gtk_widget_set_vexpand_set(_arg0, _arg1)
}

func (w widget) SetVisibleWidget(visible bool) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	if visible {
		_arg1 = C.TRUE
	}

	C.gtk_widget_set_visible(_arg0, _arg1)
}

func (w widget) SetVisualWidget(visual gdk.Visual) {
	var _arg0 *C.GtkWidget // out
	var _arg1 *C.GdkVisual // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GdkVisual)(unsafe.Pointer(visual.Native()))

	C.gtk_widget_set_visual(_arg0, _arg1)
}

func (w widget) SetWindowWidget(window gdk.Window) {
	var _arg0 *C.GtkWidget // out
	var _arg1 *C.GdkWindow // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GdkWindow)(unsafe.Pointer(window.Native()))

	C.gtk_widget_set_window(_arg0, _arg1)
}

func (w widget) ShapeCombineRegionWidget(region *cairo.Region) {
	var _arg0 *C.GtkWidget      // out
	var _arg1 *C.cairo_region_t // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.cairo_region_t)(unsafe.Pointer(region.Native()))

	C.gtk_widget_shape_combine_region(_arg0, _arg1)
}

func (w widget) ShowWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_show(_arg0)
}

func (w widget) ShowAllWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_show_all(_arg0)
}

func (w widget) ShowNowWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_show_now(_arg0)
}

func (w widget) SizeRequestWidget() Requisition {
	var _arg0 *C.GtkWidget     // out
	var _arg1 C.GtkRequisition // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_size_request(_arg0, &_arg1)

	var _requisition Requisition // out

	{
		var refTmpIn *C.GtkRequisition
		var refTmpOut *Requisition

		in0 := &_arg1
		refTmpIn = in0

		refTmpOut = (*Requisition)(unsafe.Pointer(refTmpIn))

		_requisition = *refTmpOut
	}

	return _requisition
}

func (w widget) StyleAttachWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_style_attach(_arg0)
}

func (w widget) StyleGetPropertyWidget(propertyName string, value externglib.Value) {
	var _arg0 *C.GtkWidget // out
	var _arg1 *C.gchar     // out
	var _arg2 *C.GValue    // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.gchar)(C.CString(propertyName))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.GValue)(unsafe.Pointer(&value.GValue))

	C.gtk_widget_style_get_property(_arg0, _arg1, _arg2)
}

func (w widget) ThawChildNotifyWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_thaw_child_notify(_arg0)
}

func (s widget) TranslateCoordinatesWidget(destWidget Widget, srcX int, srcY int) (destX int, destY int, ok bool) {
	var _arg0 *C.GtkWidget // out
	var _arg1 *C.GtkWidget // out
	var _arg2 C.gint       // out
	var _arg3 C.gint       // out
	var _arg4 C.gint       // in
	var _arg5 C.gint       // in
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(destWidget.Native()))
	_arg2 = C.gint(srcX)
	_arg3 = C.gint(srcY)

	_cret = C.gtk_widget_translate_coordinates(_arg0, _arg1, _arg2, _arg3, &_arg4, &_arg5)

	var _destX int // out
	var _destY int // out
	var _ok bool   // out

	_destX = int(_arg4)
	_destY = int(_arg5)
	if _cret != 0 {
		_ok = true
	}

	return _destX, _destY, _ok
}

func (w widget) TriggerTooltipQueryWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_trigger_tooltip_query(_arg0)
}

func (w widget) UnmapWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_unmap(_arg0)
}

func (w widget) UnparentWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_unparent(_arg0)
}

func (w widget) UnrealizeWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_unrealize(_arg0)
}

func (w widget) UnregisterWindowWidget(window gdk.Window) {
	var _arg0 *C.GtkWidget // out
	var _arg1 *C.GdkWindow // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GdkWindow)(unsafe.Pointer(window.Native()))

	C.gtk_widget_unregister_window(_arg0, _arg1)
}

func (w widget) UnsetStateFlagsWidget(flags StateFlags) {
	var _arg0 *C.GtkWidget    // out
	var _arg1 C.GtkStateFlags // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.GtkStateFlags(flags)

	C.gtk_widget_unset_state_flags(_arg0, _arg1)
}

func (b widget) AddChild(builder Builder, child gextras.Objector, typ string) {
	WrapBuildable(gextras.InternObject(b)).AddChild(builder, child, typ)
}

func (b widget) ConstructChild(builder Builder, name string) gextras.Objector {
	return WrapBuildable(gextras.InternObject(b)).ConstructChild(builder, name)
}

func (b widget) InternalChild(builder Builder, childname string) gextras.Objector {
	return WrapBuildable(gextras.InternObject(b)).InternalChild(builder, childname)
}

func (b widget) Name() string {
	return WrapBuildable(gextras.InternObject(b)).Name()
}

func (b widget) ParserFinished(builder Builder) {
	WrapBuildable(gextras.InternObject(b)).ParserFinished(builder)
}

func (b widget) SetBuildableProperty(builder Builder, name string, value externglib.Value) {
	WrapBuildable(gextras.InternObject(b)).SetBuildableProperty(builder, name, value)
}

func (b widget) SetName(name string) {
	WrapBuildable(gextras.InternObject(b)).SetName(name)
}

// Requisition: a Requisition-struct represents the desired size of a widget.
// See [GtkWidget’s geometry management section][geometry-management] for more
// information.
type Requisition C.GtkRequisition

// WrapRequisition wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapRequisition(ptr unsafe.Pointer) *Requisition {
	return (*Requisition)(ptr)
}

func marshalRequisition(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return (*Requisition)(unsafe.Pointer(b)), nil
}

// NewRequisition constructs a struct Requisition.
func NewRequisition() *Requisition {
	var _cret *C.GtkRequisition // in

	_cret = C.gtk_requisition_new()

	var _requisition *Requisition // out

	_requisition = (*Requisition)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(&_requisition, func(v **Requisition) {
		C.free(unsafe.Pointer(v))
	})

	return _requisition
}

// Native returns the underlying C source pointer.
func (r *Requisition) Native() unsafe.Pointer {
	return unsafe.Pointer(r)
}

// Copy frees a Requisition.
func (r *Requisition) Copy() *Requisition {
	var _arg0 *C.GtkRequisition // out
	var _cret *C.GtkRequisition // in

	_arg0 = (*C.GtkRequisition)(unsafe.Pointer(r.Native()))

	_cret = C.gtk_requisition_copy(_arg0)

	var _ret *Requisition // out

	_ret = (*Requisition)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(&_ret, func(v **Requisition) {
		C.free(unsafe.Pointer(v))
	})

	return _ret
}

// Free frees a Requisition.
func (r *Requisition) Free() {
	var _arg0 *C.GtkRequisition // out

	_arg0 = (*C.GtkRequisition)(unsafe.Pointer(r.Native()))

	C.gtk_requisition_free(_arg0)
}
