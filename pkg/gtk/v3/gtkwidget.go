// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/cairo"
	"github.com/diamondburned/gotk4/pkg/core/box"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
	"github.com/diamondburned/gotk4/pkg/gdkpixbuf/v2"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
	"github.com/diamondburned/gotk4/pkg/pango"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_widget_help_type_get_type()), F: marshalWidgetHelpType},
		{T: externglib.Type(C.gtk_widget_get_type()), F: marshalWidget},
		{T: externglib.Type(C.gtk_requisition_get_type()), F: marshalRequisition},
	})
}

// Allocation of a widget represents region which has been allocated to the
// widget by its parent. It is a subregion of its parents allocation. See
// [GtkWidget’s geometry management section][geometry-management] for more
// information.
type Allocation = gdk.Rectangle

// WidgetHelpType kinds of widget-specific help. Used by the ::show-help signal.
type WidgetHelpType int

const (
	// tooltip: tooltip.
	WidgetHelpTypeTooltip WidgetHelpType = 0
	// WhatsThis what’s this.
	WidgetHelpTypeWhatsThis WidgetHelpType = 1
)

func marshalWidgetHelpType(p uintptr) (interface{}, error) {
	return WidgetHelpType(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// Callback: the type of the callback functions used for e.g. iterating over the
// children of a container, see gtk_container_foreach().
type Callback func(widget Widget)

//export gotk4_Callback
func gotk4_Callback(arg0 *C.GtkWidget, arg1 C.gpointer) {
	v := box.Get(uintptr(arg1))
	if v == nil {
		panic(`callback not found`)
	}

	var widget Widget // out

	widget = gextras.CastObject(externglib.Take(unsafe.Pointer(arg0))).(Widget)

	fn := v.(Callback)
	fn(widget)
}

// TickCallback: callback type for adding a function to update animations. See
// gtk_widget_add_tick_callback().
type TickCallback func(widget Widget, frameClock gdk.FrameClock) (ok bool)

//export gotk4_TickCallback
func gotk4_TickCallback(arg0 *C.GtkWidget, arg1 *C.GdkFrameClock, arg2 C.gpointer) C.gboolean {
	v := box.Get(uintptr(arg2))
	if v == nil {
		panic(`callback not found`)
	}

	var widget Widget             // out
	var frameClock gdk.FrameClock // out

	widget = gextras.CastObject(externglib.Take(unsafe.Pointer(arg0))).(Widget)
	frameClock = gextras.CastObject(externglib.Take(unsafe.Pointer(arg1))).(gdk.FrameClock)

	fn := v.(TickCallback)
	ok := fn(widget, frameClock)

	var cret C.gboolean // out

	if ok {
		cret = C.TRUE
	}

	return cret
}

// CairoShouldDrawWindow: this function is supposed to be called in Widget::draw
// implementations for widgets that support multiple windows. @cr must be
// untransformed from invoking of the draw function. This function will return
// true if the contents of the given @window are supposed to be drawn and false
// otherwise. Note that when the drawing was not initiated by the windowing
// system this function will return true for all windows, so you need to draw
// the bottommost window first. Also, do not use “else if” statements to check
// which window should be drawn.
func CairoShouldDrawWindow(cr *cairo.Context, window gdk.Window) bool {
	var _arg1 *C.cairo_t   // out
	var _arg2 *C.GdkWindow // out
	var _cret C.gboolean   // in

	_arg1 = (*C.cairo_t)(unsafe.Pointer(cr))
	_arg2 = (*C.GdkWindow)(unsafe.Pointer(window.Native()))

	_cret = C.gtk_cairo_should_draw_window(_arg1, _arg2)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// CairoTransformToWindow transforms the given cairo context @cr that from
// @widget-relative coordinates to @window-relative coordinates. If the
// @widget’s window is not an ancestor of @window, no modification will be
// applied.
//
// This is the inverse to the transformation GTK applies when preparing an
// expose event to be emitted with the Widget::draw signal. It is intended to
// help porting multiwindow widgets from GTK+ 2 to the rendering architecture of
// GTK+ 3.
func CairoTransformToWindow(cr *cairo.Context, widget Widget, window gdk.Window) {
	var _arg1 *C.cairo_t   // out
	var _arg2 *C.GtkWidget // out
	var _arg3 *C.GdkWindow // out

	_arg1 = (*C.cairo_t)(unsafe.Pointer(cr))
	_arg2 = (*C.GtkWidget)(unsafe.Pointer(widget.Native()))
	_arg3 = (*C.GdkWindow)(unsafe.Pointer(window.Native()))

	C.gtk_cairo_transform_to_window(_arg1, _arg2, _arg3)
}

// Widget is the base class all widgets in GTK+ derive from. It manages the
// widget lifecycle, states and style.
//
//
// Height-for-width Geometry Management
//
// GTK+ uses a height-for-width (and width-for-height) geometry management
// system. Height-for-width means that a widget can change how much vertical
// space it needs, depending on the amount of horizontal space that it is given
// (and similar for width-for-height). The most common example is a label that
// reflows to fill up the available width, wraps to fewer lines, and therefore
// needs less height.
//
// Height-for-width geometry management is implemented in GTK+ by way of five
// virtual methods:
//
// - WidgetClass.get_request_mode() - WidgetClass.get_preferred_width() -
// WidgetClass.get_preferred_height() -
// WidgetClass.get_preferred_height_for_width() -
// WidgetClass.get_preferred_width_for_height() -
// WidgetClass.get_preferred_height_and_baseline_for_width()
//
// There are some important things to keep in mind when implementing
// height-for-width and when using it in container implementations.
//
// The geometry management system will query a widget hierarchy in only one
// orientation at a time. When widgets are initially queried for their minimum
// sizes it is generally done in two initial passes in the SizeRequestMode
// chosen by the toplevel.
//
// For example, when queried in the normal GTK_SIZE_REQUEST_HEIGHT_FOR_WIDTH
// mode: First, the default minimum and natural width for each widget in the
// interface will be computed using gtk_widget_get_preferred_width(). Because
// the preferred widths for each container depend on the preferred widths of
// their children, this information propagates up the hierarchy, and finally a
// minimum and natural width is determined for the entire toplevel. Next, the
// toplevel will use the minimum width to query for the minimum height
// contextual to that width using gtk_widget_get_preferred_height_for_width(),
// which will also be a highly recursive operation. The minimum height for the
// minimum width is normally used to set the minimum size constraint on the
// toplevel (unless gtk_window_set_geometry_hints() is explicitly used instead).
//
// After the toplevel window has initially requested its size in both dimensions
// it can go on to allocate itself a reasonable size (or a size previously
// specified with gtk_window_set_default_size()). During the recursive
// allocation process it’s important to note that request cycles will be
// recursively executed while container widgets allocate their children. Each
// container widget, once allocated a size, will go on to first share the space
// in one orientation among its children and then request each child's height
// for its target allocated width or its width for allocated height, depending.
// In this way a Widget will typically be requested its size a number of times
// before actually being allocated a size. The size a widget is finally
// allocated can of course differ from the size it has requested. For this
// reason, Widget caches a small number of results to avoid re-querying for the
// same sizes in one allocation cycle.
//
// See [GtkContainer’s geometry management
// section][container-geometry-management] to learn more about how
// height-for-width allocations are performed by container widgets.
//
// If a widget does move content around to intelligently use up the allocated
// size then it must support the request in both SizeRequestModes even if the
// widget in question only trades sizes in a single orientation.
//
// For instance, a Label that does height-for-width word wrapping will not
// expect to have WidgetClass.get_preferred_height() called because that call is
// specific to a width-for-height request. In this case the label must return
// the height required for its own minimum possible width. By following this
// rule any widget that handles height-for-width or width-for-height requests
// will always be allocated at least enough space to fit its own content.
//
// Here are some examples of how a GTK_SIZE_REQUEST_HEIGHT_FOR_WIDTH widget
// generally deals with width-for-height requests, for
// WidgetClass.get_preferred_height() it will do:
//
//    // the signal handler has the instance and user data swapped
//    // because of the swapped="yes" attribute in the template XML
//    static void
//    hello_button_clicked (FooWidget *self,
//                          GtkButton *button)
//    {
//      g_print ("Hello, world!\n");
//    }
//
//    static void
//    foo_widget_class_init (FooWidgetClass *klass)
//    {
//      // ...
//      gtk_widget_class_set_template_from_resource (GTK_WIDGET_CLASS (klass),
//                                                   "/com/example/ui/foowidget.ui");
//      gtk_widget_class_bind_template_callback (GTK_WIDGET_CLASS (klass), hello_button_clicked);
//    }
type Widget interface {
	gextras.Objector

	// AsBuildable casts the class to the Buildable interface.
	AsBuildable() Buildable

	// ActivateWidget: for widgets that can be “activated” (buttons, menu items,
	// etc.) this function activates them. Activation is what happens when you
	// press Enter on a widget during key navigation. If @widget isn't
	// activatable, the function returns false.
	ActivateWidget() bool
	// AddAcceleratorWidget installs an accelerator for this @widget in
	// @accel_group that causes @accel_signal to be emitted if the accelerator
	// is activated. The @accel_group needs to be added to the widget’s toplevel
	// via gtk_window_add_accel_group(), and the signal must be of type
	// G_SIGNAL_ACTION. Accelerators added through this function are not user
	// changeable during runtime. If you want to support accelerators that can
	// be changed by the user, use gtk_accel_map_add_entry() and
	// gtk_widget_set_accel_path() or gtk_menu_item_set_accel_path() instead.
	AddAcceleratorWidget(accelSignal string, accelGroup AccelGroup, accelKey uint, accelMods gdk.ModifierType, accelFlags AccelFlags)
	// AddDeviceEventsWidget adds the device events in the bitfield @events to
	// the event mask for @widget. See gtk_widget_set_device_events() for
	// details.
	AddDeviceEventsWidget(device gdk.Device, events gdk.EventMask)
	// AddEventsWidget adds the events in the bitfield @events to the event mask
	// for @widget. See gtk_widget_set_events() and the [input handling
	// overview][event-masks] for details.
	AddEventsWidget(events int)
	// AddMnemonicLabelWidget adds a widget to the list of mnemonic labels for
	// this widget. (See gtk_widget_list_mnemonic_labels()). Note the list of
	// mnemonic labels for the widget is cleared when the widget is destroyed,
	// so the caller must make sure to update its internal state at this point
	// as well, by using a connection to the Widget::destroy signal or a weak
	// notifier.
	AddMnemonicLabelWidget(label Widget)
	// CanActivateAccelWidget determines whether an accelerator that activates
	// the signal identified by @signal_id can currently be activated. This is
	// done by emitting the Widget::can-activate-accel signal on @widget; if the
	// signal isn’t overridden by a handler or in a derived widget, then the
	// default check is that the widget must be sensitive, and the widget and
	// all its ancestors mapped.
	CanActivateAccelWidget(signalId uint) bool
	// ChildFocusWidget: this function is used by custom widget implementations;
	// if you're writing an app, you’d use gtk_widget_grab_focus() to move the
	// focus to a particular widget, and gtk_container_set_focus_chain() to
	// change the focus tab order. So you may want to investigate those
	// functions instead.
	//
	// gtk_widget_child_focus() is called by containers as the user moves around
	// the window using keyboard shortcuts. @direction indicates what kind of
	// motion is taking place (up, down, left, right, tab forward, tab
	// backward). gtk_widget_child_focus() emits the Widget::focus signal;
	// widgets override the default handler for this signal in order to
	// implement appropriate focus behavior.
	//
	// The default ::focus handler for a widget should return true if moving in
	// @direction left the focus on a focusable location inside that widget, and
	// false if moving in @direction moved the focus outside the widget. If
	// returning true, widgets normally call gtk_widget_grab_focus() to place
	// the focus accordingly; if returning false, they don’t modify the current
	// focus location.
	ChildFocusWidget(direction DirectionType) bool
	// ChildNotifyWidget emits a Widget::child-notify signal for the [child
	// property][child-properties] @child_property on @widget.
	//
	// This is the analogue of g_object_notify() for child properties.
	//
	// Also see gtk_container_child_notify().
	ChildNotifyWidget(childProperty string)
	// ClassPathWidget: same as gtk_widget_path(), but always uses the name of a
	// widget’s type, never uses a custom name set with gtk_widget_set_name().
	//
	// Deprecated: since version 3.0.
	ClassPathWidget() (pathLength uint, path string, pathReversed string)
	// ComputeExpandWidget computes whether a container should give this widget
	// extra space when possible. Containers should check this, rather than
	// looking at gtk_widget_get_hexpand() or gtk_widget_get_vexpand().
	//
	// This function already checks whether the widget is visible, so visibility
	// does not need to be checked separately. Non-visible widgets are not
	// expanded.
	//
	// The computed expand value uses either the expand setting explicitly set
	// on the widget itself, or, if none has been explicitly set, the widget may
	// expand if some of its children do.
	ComputeExpandWidget(orientation Orientation) bool
	// CreatePangoContextWidget creates a new Context with the appropriate font
	// map, font options, font description, and base direction for drawing text
	// for this widget. See also gtk_widget_get_pango_context().
	CreatePangoContextWidget() pango.Context
	// CreatePangoLayoutWidget creates a new Layout with the appropriate font
	// map, font description, and base direction for drawing text for this
	// widget.
	//
	// If you keep a Layout created in this way around, you need to re-create it
	// when the widget Context is replaced. This can be tracked by using the
	// Widget::screen-changed signal on the widget.
	CreatePangoLayoutWidget(text string) pango.Layout
	// DestroyWidget destroys a widget.
	//
	// When a widget is destroyed all references it holds on other objects will
	// be released:
	//
	//    - if the widget is inside a container, it will be removed from its
	//    parent
	//    - if the widget is a container, all its children will be destroyed,
	//    recursively
	//    - if the widget is a top level, it will be removed from the list
	//    of top level widgets that GTK+ maintains internally
	//
	// It's expected that all references held on the widget will also be
	// released; you should connect to the Widget::destroy signal if you hold a
	// reference to @widget and you wish to remove it when this function is
	// called. It is not necessary to do so if you are implementing a Container,
	// as you'll be able to use the ContainerClass.remove() virtual function for
	// that.
	//
	// It's important to notice that gtk_widget_destroy() will only cause the
	// @widget to be finalized if no additional references, acquired using
	// g_object_ref(), are held on it. In case additional references are in
	// place, the @widget will be in an "inert" state after calling this
	// function; @widget will still point to valid memory, allowing you to
	// release the references you hold, but you may not query the widget's own
	// state.
	//
	// You should typically call this function on top level widgets, and rarely
	// on child widgets.
	//
	// See also: gtk_container_remove()
	DestroyWidget()
	// DeviceIsShadowedWidget returns true if @device has been shadowed by a
	// GTK+ device grab on another widget, so it would stop sending events to
	// @widget. This may be used in the Widget::grab-notify signal to check for
	// specific devices. See gtk_device_grab_add().
	DeviceIsShadowedWidget(device gdk.Device) bool
	// DragCheckThresholdWidget checks to see if a mouse drag starting at
	// (@start_x, @start_y) and ending at (@current_x, @current_y) has passed
	// the GTK+ drag threshold, and thus should trigger the beginning of a
	// drag-and-drop operation.
	DragCheckThresholdWidget(startX int, startY int, currentX int, currentY int) bool
	// DragDestAddImageTargetsWidget: add the image targets supported by
	// SelectionData to the target list of the drag destination. The targets are
	// added with @info = 0. If you need another value, use
	// gtk_target_list_add_image_targets() and gtk_drag_dest_set_target_list().
	DragDestAddImageTargetsWidget()
	// DragDestAddTextTargetsWidget: add the text targets supported by
	// SelectionData to the target list of the drag destination. The targets are
	// added with @info = 0. If you need another value, use
	// gtk_target_list_add_text_targets() and gtk_drag_dest_set_target_list().
	DragDestAddTextTargetsWidget()
	// DragDestAddURITargetsWidget: add the URI targets supported by
	// SelectionData to the target list of the drag destination. The targets are
	// added with @info = 0. If you need another value, use
	// gtk_target_list_add_uri_targets() and gtk_drag_dest_set_target_list().
	DragDestAddURITargetsWidget()
	// DragDestGetTargetListWidget returns the list of targets this widget can
	// accept from drag-and-drop.
	DragDestGetTargetListWidget() *TargetList
	// DragDestGetTrackMotionWidget returns whether the widget has been
	// configured to always emit Widget::drag-motion signals.
	DragDestGetTrackMotionWidget() bool
	// DragDestSetWidget sets a widget as a potential drop destination, and adds
	// default behaviors.
	//
	// The default behaviors listed in @flags have an effect similar to
	// installing default handlers for the widget’s drag-and-drop signals
	// (Widget::drag-motion, Widget::drag-drop, ...). They all exist for
	// convenience. When passing K_DEST_DEFAULT_ALL for instance it is
	// sufficient to connect to the widget’s Widget::drag-data-received signal
	// to get primitive, but consistent drag-and-drop support.
	//
	// Things become more complicated when you try to preview the dragged data,
	// as described in the documentation for Widget::drag-motion. The default
	// behaviors described by @flags make some assumptions, that can conflict
	// with your own signal handlers. For instance K_DEST_DEFAULT_DROP causes
	// invokations of gdk_drag_status() in the context of Widget::drag-motion,
	// and invokations of gtk_drag_finish() in Widget::drag-data-received.
	// Especially the later is dramatic, when your own Widget::drag-motion
	// handler calls gtk_drag_get_data() to inspect the dragged data.
	//
	// There’s no way to set a default action here, you can use the
	// Widget::drag-motion callback for that. Here’s an example which selects
	// the action to use depending on whether the control key is pressed or not:
	//
	//    static void
	//    drag_motion (GtkWidget *widget,
	//                 GdkDragContext *context,
	//                 gint x,
	//                 gint y,
	//                 guint time)
	//    {
	//      GdkModifierType mask;
	//
	//      gdk_window_get_pointer (gtk_widget_get_window (widget),
	//                              NULL, NULL, &mask);
	//      if (mask & GDK_CONTROL_MASK)
	//        gdk_drag_status (context, GDK_ACTION_COPY, time);
	//      else
	//        gdk_drag_status (context, GDK_ACTION_MOVE, time);
	//    }
	DragDestSetWidget(flags DestDefaults, targets []TargetEntry, actions gdk.DragAction)
	// DragDestSetProxyWidget sets this widget as a proxy for drops to another
	// window.
	//
	// Deprecated: since version 3.22.
	DragDestSetProxyWidget(proxyWindow gdk.Window, protocol gdk.DragProtocol, useCoordinates bool)
	// DragDestSetTargetListWidget sets the target types that this widget can
	// accept from drag-and-drop. The widget must first be made into a drag
	// destination with gtk_drag_dest_set().
	DragDestSetTargetListWidget(targetList *TargetList)
	// DragDestSetTrackMotionWidget tells the widget to emit Widget::drag-motion
	// and Widget::drag-leave events regardless of the targets and the
	// GTK_DEST_DEFAULT_MOTION flag.
	//
	// This may be used when a widget wants to do generic actions regardless of
	// the targets that the source offers.
	DragDestSetTrackMotionWidget(trackMotion bool)
	// DragDestUnsetWidget clears information about a drop destination set with
	// gtk_drag_dest_set(). The widget will no longer receive notification of
	// drags.
	DragDestUnsetWidget()
	// DragHighlightWidget highlights a widget as a currently hovered drop
	// target. To end the highlight, call gtk_drag_unhighlight(). GTK+ calls
	// this automatically if GTK_DEST_DEFAULT_HIGHLIGHT is set.
	DragHighlightWidget()
	// DragSourceAddImageTargetsWidget: add the writable image targets supported
	// by SelectionData to the target list of the drag source. The targets are
	// added with @info = 0. If you need another value, use
	// gtk_target_list_add_image_targets() and
	// gtk_drag_source_set_target_list().
	DragSourceAddImageTargetsWidget()
	// DragSourceAddTextTargetsWidget: add the text targets supported by
	// SelectionData to the target list of the drag source. The targets are
	// added with @info = 0. If you need another value, use
	// gtk_target_list_add_text_targets() and gtk_drag_source_set_target_list().
	DragSourceAddTextTargetsWidget()
	// DragSourceAddURITargetsWidget: add the URI targets supported by
	// SelectionData to the target list of the drag source. The targets are
	// added with @info = 0. If you need another value, use
	// gtk_target_list_add_uri_targets() and gtk_drag_source_set_target_list().
	DragSourceAddURITargetsWidget()
	// DragSourceGetTargetListWidget gets the list of targets this widget can
	// provide for drag-and-drop.
	DragSourceGetTargetListWidget() *TargetList
	// DragSourceSetWidget sets up a widget so that GTK+ will start a drag
	// operation when the user clicks and drags on the widget. The widget must
	// have a window.
	DragSourceSetWidget(startButtonMask gdk.ModifierType, targets []TargetEntry, actions gdk.DragAction)
	// DragSourceSetIconNameWidget sets the icon that will be used for drags
	// from a particular source to a themed icon. See the docs for IconTheme for
	// more details.
	DragSourceSetIconNameWidget(iconName string)
	// DragSourceSetIconPixbufWidget sets the icon that will be used for drags
	// from a particular widget from a Pixbuf. GTK+ retains a reference for
	// @pixbuf and will release it when it is no longer needed.
	DragSourceSetIconPixbufWidget(pixbuf gdkpixbuf.Pixbuf)
	// DragSourceSetIconStockWidget sets the icon that will be used for drags
	// from a particular source to a stock icon.
	//
	// Deprecated: since version 3.10.
	DragSourceSetIconStockWidget(stockId string)
	// DragSourceSetTargetListWidget changes the target types that this widget
	// offers for drag-and-drop. The widget must first be made into a drag
	// source with gtk_drag_source_set().
	DragSourceSetTargetListWidget(targetList *TargetList)
	// DragSourceUnsetWidget undoes the effects of gtk_drag_source_set().
	DragSourceUnsetWidget()
	// DragUnhighlightWidget removes a highlight set by gtk_drag_highlight()
	// from a widget.
	DragUnhighlightWidget()
	// DrawWidget draws @widget to @cr. The top left corner of the widget will
	// be drawn to the currently set origin point of @cr.
	//
	// You should pass a cairo context as @cr argument that is in an original
	// state. Otherwise the resulting drawing is undefined. For example changing
	// the operator using cairo_set_operator() or the line width using
	// cairo_set_line_width() might have unwanted side effects. You may however
	// change the context’s transform matrix - like with cairo_scale(),
	// cairo_translate() or cairo_set_matrix() and clip region with cairo_clip()
	// prior to calling this function. Also, it is fine to modify the context
	// with cairo_save() and cairo_push_group() prior to calling this function.
	//
	// Note that special-purpose widgets may contain special code for rendering
	// to the screen and might appear differently on screen and when rendered
	// using gtk_widget_draw().
	DrawWidget(cr *cairo.Context)
	// EnsureStyleWidget ensures that @widget has a style (@widget->style).
	//
	// Not a very useful function; most of the time, if you want the style, the
	// widget is realized, and realized widgets are guaranteed to have a style
	// already.
	//
	// Deprecated: since version 3.0.
	EnsureStyleWidget()
	// ErrorBellWidget notifies the user about an input-related error on this
	// widget. If the Settings:gtk-error-bell setting is true, it calls
	// gdk_window_beep(), otherwise it does nothing.
	//
	// Note that the effect of gdk_window_beep() can be configured in many ways,
	// depending on the windowing backend and the desktop environment or window
	// manager that is used.
	ErrorBellWidget()
	// FreezeChildNotifyWidget stops emission of Widget::child-notify signals on
	// @widget. The signals are queued until gtk_widget_thaw_child_notify() is
	// called on @widget.
	//
	// This is the analogue of g_object_freeze_notify() for child properties.
	FreezeChildNotifyWidget()
	// Accessible returns the accessible object that describes the widget to an
	// assistive technology.
	//
	// If accessibility support is not available, this Object instance may be a
	// no-op. Likewise, if no class-specific Object implementation is available
	// for the widget instance in question, it will inherit an Object
	// implementation from the first ancestor class for which such an
	// implementation is defined.
	//
	// The documentation of the ATK (http://developer.gnome.org/atk/stable/)
	// library contains more information about accessible objects and their
	// uses.
	Accessible() atk.Object
	// ActionGroup retrieves the Group that was registered using @prefix. The
	// resulting Group may have been registered to @widget or any Widget in its
	// ancestry.
	//
	// If no action group was found matching @prefix, then nil is returned.
	ActionGroup(prefix string) gio.ActionGroup
	// AllocatedBaseline returns the baseline that has currently been allocated
	// to @widget. This function is intended to be used when implementing
	// handlers for the Widget::draw function, and when allocating child widgets
	// in Widget::size_allocate.
	AllocatedBaseline() int
	// AllocatedHeight returns the height that has currently been allocated to
	// @widget. This function is intended to be used when implementing handlers
	// for the Widget::draw function.
	AllocatedHeight() int
	// AllocatedWidth returns the width that has currently been allocated to
	// @widget. This function is intended to be used when implementing handlers
	// for the Widget::draw function.
	AllocatedWidth() int
	// Ancestor gets the first ancestor of @widget with type @widget_type. For
	// example, `gtk_widget_get_ancestor (widget, GTK_TYPE_BOX)` gets the first
	// Box that’s an ancestor of @widget. No reference will be added to the
	// returned widget; it should not be unreferenced. See note about checking
	// for a toplevel Window in the docs for gtk_widget_get_toplevel().
	//
	// Note that unlike gtk_widget_is_ancestor(), gtk_widget_get_ancestor()
	// considers @widget to be an ancestor of itself.
	Ancestor(widgetType externglib.Type) Widget
	// AppPaintable determines whether the application intends to draw on the
	// widget in an Widget::draw handler.
	//
	// See gtk_widget_set_app_paintable()
	AppPaintable() bool
	// CanDefault determines whether @widget can be a default widget. See
	// gtk_widget_set_can_default().
	CanDefault() bool
	// CanFocus determines whether @widget can own the input focus. See
	// gtk_widget_set_can_focus().
	CanFocus() bool
	// ChildRequisition: this function is only for use in widget
	// implementations. Obtains @widget->requisition, unless someone has forced
	// a particular geometry on the widget (e.g. with
	// gtk_widget_set_size_request()), in which case it returns that geometry
	// instead of the widget's requisition.
	//
	// This function differs from gtk_widget_size_request() in that it retrieves
	// the last size request value from @widget->requisition, while
	// gtk_widget_size_request() actually calls the "size_request" method on
	// @widget to compute the size request and fill in @widget->requisition, and
	// only then returns @widget->requisition.
	//
	// Because this function does not call the “size_request” method, it can
	// only be used when you know that @widget->requisition is up-to-date, that
	// is, gtk_widget_size_request() has been called since the last time a
	// resize was queued. In general, only container implementations have this
	// information; applications should use gtk_widget_size_request().
	//
	// Deprecated: since version 3.0.
	ChildRequisition() Requisition
	// ChildVisible gets the value set with gtk_widget_set_child_visible(). If
	// you feel a need to use this function, your code probably needs
	// reorganization.
	//
	// This function is only useful for container implementations and never
	// should be called by an application.
	ChildVisible() bool
	// CompositeName obtains the composite name of a widget.
	//
	// Deprecated: since version 3.10.
	CompositeName() string
	// DeviceEnabled returns whether @device can interact with @widget and its
	// children. See gtk_widget_set_device_enabled().
	DeviceEnabled(device gdk.Device) bool
	// DeviceEvents returns the events mask for the widget corresponding to an
	// specific device. These are the events that the widget will receive when
	// @device operates on it.
	DeviceEvents(device gdk.Device) gdk.EventMask
	// Direction gets the reading direction for a particular widget. See
	// gtk_widget_set_direction().
	Direction() TextDirection
	// Display: get the Display for the toplevel window associated with this
	// widget. This function can only be called after the widget has been added
	// to a widget hierarchy with a Window at the top.
	//
	// In general, you should only create display specific resources when a
	// widget has been realized, and you should free those resources when the
	// widget is unrealized.
	Display() gdk.Display
	// DoubleBuffered determines whether the widget is double buffered.
	//
	// See gtk_widget_set_double_buffered()
	DoubleBuffered() bool
	// Events returns the event mask (see EventMask) for the widget. These are
	// the events that the widget will receive.
	//
	// Note: Internally, the widget event mask will be the logical OR of the
	// event mask set through gtk_widget_set_events() or
	// gtk_widget_add_events(), and the event mask necessary to cater for every
	// EventController created for the widget.
	Events() int
	// FocusOnClick returns whether the widget should grab focus when it is
	// clicked with the mouse. See gtk_widget_set_focus_on_click().
	FocusOnClick() bool
	// FontMap gets the font map that has been set with
	// gtk_widget_set_font_map().
	FontMap() pango.FontMap
	// FontOptions returns the #cairo_font_options_t used for Pango rendering.
	// When not set, the defaults font options for the Screen will be used.
	FontOptions() *cairo.FontOptions
	// FrameClock obtains the frame clock for a widget. The frame clock is a
	// global “ticker” that can be used to drive animations and repaints. The
	// most common reason to get the frame clock is to call
	// gdk_frame_clock_get_frame_time(), in order to get a time to use for
	// animating. For example you might record the start of the animation with
	// an initial value from gdk_frame_clock_get_frame_time(), and then update
	// the animation by calling gdk_frame_clock_get_frame_time() again during
	// each repaint.
	//
	// gdk_frame_clock_request_phase() will result in a new frame on the clock,
	// but won’t necessarily repaint any widgets. To repaint a widget, you have
	// to use gtk_widget_queue_draw() which invalidates the widget (thus
	// scheduling it to receive a draw on the next frame).
	// gtk_widget_queue_draw() will also end up requesting a frame on the
	// appropriate frame clock.
	//
	// A widget’s frame clock will not change while the widget is mapped.
	// Reparenting a widget (which implies a temporary unmap) can change the
	// widget’s frame clock.
	//
	// Unrealized widgets do not have a frame clock.
	FrameClock() gdk.FrameClock
	// Halign gets the value of the Widget:halign property.
	//
	// For backwards compatibility reasons this method will never return
	// GTK_ALIGN_BASELINE, but instead it will convert it to GTK_ALIGN_FILL.
	// Baselines are not supported for horizontal alignment.
	Halign() Align
	// HasTooltip returns the current value of the has-tooltip property. See
	// Widget:has-tooltip for more information.
	HasTooltip() bool
	// HasWindow determines whether @widget has a Window of its own. See
	// gtk_widget_set_has_window().
	HasWindow() bool
	// Hexpand gets whether the widget would like any available extra horizontal
	// space. When a user resizes a Window, widgets with expand=TRUE generally
	// receive the extra space. For example, a list or scrollable area or
	// document in your window would often be set to expand.
	//
	// Containers should use gtk_widget_compute_expand() rather than this
	// function, to see whether a widget, or any of its children, has the expand
	// flag set. If any child of a widget wants to expand, the parent may ask to
	// expand also.
	//
	// This function only looks at the widget’s own hexpand flag, rather than
	// computing whether the entire widget tree rooted at this widget wants to
	// expand.
	Hexpand() bool
	// HexpandSet gets whether gtk_widget_set_hexpand() has been used to
	// explicitly set the expand flag on this widget.
	//
	// If hexpand is set, then it overrides any computed expand value based on
	// child widgets. If hexpand is not set, then the expand value depends on
	// whether any children of the widget would like to expand.
	//
	// There are few reasons to use this function, but it’s here for
	// completeness and consistency.
	HexpandSet() bool
	// Mapped: whether the widget is mapped.
	Mapped() bool
	// MarginBottom gets the value of the Widget:margin-bottom property.
	MarginBottom() int
	// MarginEnd gets the value of the Widget:margin-end property.
	MarginEnd() int
	// MarginLeft gets the value of the Widget:margin-left property.
	//
	// Deprecated: since version 3.12.
	MarginLeft() int
	// MarginRight gets the value of the Widget:margin-right property.
	//
	// Deprecated: since version 3.12.
	MarginRight() int
	// MarginStart gets the value of the Widget:margin-start property.
	MarginStart() int
	// MarginTop gets the value of the Widget:margin-top property.
	MarginTop() int
	// ModifierMask returns the modifier mask the @widget’s windowing system
	// backend uses for a particular purpose.
	//
	// See gdk_keymap_get_modifier_mask().
	ModifierMask(intent gdk.ModifierIntent) gdk.ModifierType
	// ModifierStyle returns the current modifier style for the widget. (As set
	// by gtk_widget_modify_style().) If no style has previously set, a new
	// RcStyle will be created with all values unset, and set as the modifier
	// style for the widget. If you make changes to this rc style, you must call
	// gtk_widget_modify_style(), passing in the returned rc style, to make sure
	// that your changes take effect.
	//
	// Caution: passing the style back to gtk_widget_modify_style() will
	// normally end up destroying it, because gtk_widget_modify_style() copies
	// the passed-in style and sets the copy as the new modifier style, thus
	// dropping any reference to the old modifier style. Add a reference to the
	// modifier style if you want to keep it alive.
	//
	// Deprecated: since version 3.0.
	ModifierStyle() RCStyle
	// Name retrieves the name of a widget. See gtk_widget_set_name() for the
	// significance of widget names.
	Name() string
	// NoShowAll returns the current value of the Widget:no-show-all property,
	// which determines whether calls to gtk_widget_show_all() will affect this
	// widget.
	NoShowAll() bool
	// Opacity fetches the requested opacity for this widget. See
	// gtk_widget_set_opacity().
	Opacity() float64
	// PangoContext gets a Context with the appropriate font map, font
	// description, and base direction for this widget. Unlike the context
	// returned by gtk_widget_create_pango_context(), this context is owned by
	// the widget (it can be used until the screen for the widget changes or the
	// widget is removed from its toplevel), and will be updated to match any
	// changes to the widget’s attributes. This can be tracked by using the
	// Widget::screen-changed signal on the widget.
	PangoContext() pango.Context
	// Parent returns the parent container of @widget.
	Parent() Widget
	// ParentWindow gets @widget’s parent window, or nil if it does not have
	// one.
	ParentWindow() gdk.Window
	// GetPath returns the WidgetPath representing @widget, if the widget is not
	// connected to a toplevel widget, a partial path will be created.
	GetPath() *WidgetPath
	// Pointer obtains the location of the mouse pointer in widget coordinates.
	// Widget coordinates are a bit odd; for historical reasons, they are
	// defined as @widget->window coordinates for widgets that return true for
	// gtk_widget_get_has_window(); and are relative to @widget->allocation.x,
	// @widget->allocation.y otherwise.
	//
	// Deprecated: since version 3.4.
	Pointer() (x int, y int)
	// PreferredHeight retrieves a widget’s initial minimum and natural height.
	//
	// This call is specific to width-for-height requests.
	//
	// The returned request will be modified by the
	// GtkWidgetClass::adjust_size_request virtual method and by any SizeGroups
	// that have been applied. That is, the returned request is the one that
	// should be used for layout, not necessarily the one returned by the widget
	// itself.
	PreferredHeight() (minimumHeight int, naturalHeight int)
	// PreferredHeightAndBaselineForWidth retrieves a widget’s minimum and
	// natural height and the corresponding baselines if it would be given the
	// specified @width, or the default height if @width is -1. The baselines
	// may be -1 which means that no baseline is requested for this widget.
	//
	// The returned request will be modified by the
	// GtkWidgetClass::adjust_size_request and
	// GtkWidgetClass::adjust_baseline_request virtual methods and by any
	// SizeGroups that have been applied. That is, the returned request is the
	// one that should be used for layout, not necessarily the one returned by
	// the widget itself.
	PreferredHeightAndBaselineForWidth(width int) (minimumHeight int, naturalHeight int, minimumBaseline int, naturalBaseline int)
	// PreferredHeightForWidth retrieves a widget’s minimum and natural height
	// if it would be given the specified @width.
	//
	// The returned request will be modified by the
	// GtkWidgetClass::adjust_size_request virtual method and by any SizeGroups
	// that have been applied. That is, the returned request is the one that
	// should be used for layout, not necessarily the one returned by the widget
	// itself.
	PreferredHeightForWidth(width int) (minimumHeight int, naturalHeight int)
	// PreferredSize retrieves the minimum and natural size of a widget, taking
	// into account the widget’s preference for height-for-width management.
	//
	// This is used to retrieve a suitable size by container widgets which do
	// not impose any restrictions on the child placement. It can be used to
	// deduce toplevel window and menu sizes as well as child widgets in
	// free-form containers such as GtkLayout.
	//
	// Handle with care. Note that the natural height of a height-for-width
	// widget will generally be a smaller size than the minimum height, since
	// the required height for the natural width is generally smaller than the
	// required height for the minimum width.
	//
	// Use gtk_widget_get_preferred_height_and_baseline_for_width() if you want
	// to support baseline alignment.
	PreferredSize() (minimumSize Requisition, naturalSize Requisition)
	// PreferredWidth retrieves a widget’s initial minimum and natural width.
	//
	// This call is specific to height-for-width requests.
	//
	// The returned request will be modified by the
	// GtkWidgetClass::adjust_size_request virtual method and by any SizeGroups
	// that have been applied. That is, the returned request is the one that
	// should be used for layout, not necessarily the one returned by the widget
	// itself.
	PreferredWidth() (minimumWidth int, naturalWidth int)
	// PreferredWidthForHeight retrieves a widget’s minimum and natural width if
	// it would be given the specified @height.
	//
	// The returned request will be modified by the
	// GtkWidgetClass::adjust_size_request virtual method and by any SizeGroups
	// that have been applied. That is, the returned request is the one that
	// should be used for layout, not necessarily the one returned by the widget
	// itself.
	PreferredWidthForHeight(height int) (minimumWidth int, naturalWidth int)
	// Realized determines whether @widget is realized.
	Realized() bool
	// ReceivesDefault determines whether @widget is always treated as the
	// default widget within its toplevel when it has the focus, even if another
	// widget is the default.
	//
	// See gtk_widget_set_receives_default().
	ReceivesDefault() bool
	// RequestMode gets whether the widget prefers a height-for-width layout or
	// a width-for-height layout.
	//
	// Bin widgets generally propagate the preference of their child, container
	// widgets need to request something either in context of their children or
	// in context of their allocation capabilities.
	RequestMode() SizeRequestMode
	// Requisition retrieves the widget’s requisition.
	//
	// This function should only be used by widget implementations in order to
	// figure whether the widget’s requisition has actually changed after some
	// internal state change (so that they can call gtk_widget_queue_resize()
	// instead of gtk_widget_queue_draw()).
	//
	// Normally, gtk_widget_size_request() should be used.
	//
	// Deprecated: since version 3.0.
	Requisition() Requisition
	// RootWindow: get the root window where this widget is located. This
	// function can only be called after the widget has been added to a widget
	// hierarchy with Window at the top.
	//
	// The root window is useful for such purposes as creating a popup Window
	// associated with the window. In general, you should only create display
	// specific resources when a widget has been realized, and you should free
	// those resources when the widget is unrealized.
	//
	// Deprecated: since version 3.12.
	RootWindow() gdk.Window
	// ScaleFactor retrieves the internal scale factor that maps from window
	// coordinates to the actual device pixels. On traditional systems this is
	// 1, on high density outputs, it can be a higher value (typically 2).
	//
	// See gdk_window_get_scale_factor().
	ScaleFactor() int
	// Screen: get the Screen from the toplevel window associated with this
	// widget. This function can only be called after the widget has been added
	// to a widget hierarchy with a Window at the top.
	//
	// In general, you should only create screen specific resources when a
	// widget has been realized, and you should free those resources when the
	// widget is unrealized.
	Screen() gdk.Screen
	// Sensitive returns the widget’s sensitivity (in the sense of returning the
	// value that has been set using gtk_widget_set_sensitive()).
	//
	// The effective sensitivity of a widget is however determined by both its
	// own and its parent widget’s sensitivity. See gtk_widget_is_sensitive().
	Sensitive() bool
	// Settings gets the settings object holding the settings used for this
	// widget.
	//
	// Note that this function can only be called when the Widget is attached to
	// a toplevel, since the settings object is specific to a particular Screen.
	Settings() Settings
	// GetSizeRequest gets the size request that was explicitly set for the
	// widget using gtk_widget_set_size_request(). A value of -1 stored in
	// @width or @height indicates that that dimension has not been set
	// explicitly and the natural requisition of the widget will be used
	// instead. See gtk_widget_set_size_request(). To get the size a widget will
	// actually request, call gtk_widget_get_preferred_size() instead of this
	// function.
	GetSizeRequest() (width int, height int)
	// State returns the widget’s state. See gtk_widget_set_state().
	//
	// Deprecated: since version 3.0.
	State() StateType
	// StateFlags returns the widget state as a flag set. It is worth mentioning
	// that the effective GTK_STATE_FLAG_INSENSITIVE state will be returned,
	// that is, also based on parent insensitivity, even if @widget itself is
	// sensitive.
	//
	// Also note that if you are looking for a way to obtain the StateFlags to
	// pass to a StyleContext method, you should look at
	// gtk_style_context_get_state().
	StateFlags() StateFlags
	// Style: simply an accessor function that returns @widget->style.
	//
	// Deprecated: since version 3.0.
	Style() Style
	// StyleContext returns the style context associated to @widget. The
	// returned object is guaranteed to be the same for the lifetime of @widget.
	StyleContext() StyleContext
	// SupportMultidevice returns true if @widget is multiple pointer aware. See
	// gtk_widget_set_support_multidevice() for more information.
	SupportMultidevice() bool
	// TemplateChild: fetch an object build from the template XML for
	// @widget_type in this @widget instance.
	//
	// This will only report children which were previously declared with
	// gtk_widget_class_bind_template_child_full() or one of its variants.
	//
	// This function is only meant to be called for code which is private to the
	// @widget_type which declared the child and is meant for language bindings
	// which cannot easily make use of the GObject structure offsets.
	TemplateChild(widgetType externglib.Type, name string) gextras.Objector
	// TooltipMarkup gets the contents of the tooltip for @widget.
	TooltipMarkup() string
	// TooltipText gets the contents of the tooltip for @widget.
	TooltipText() string
	// TooltipWindow returns the Window of the current tooltip. This can be the
	// GtkWindow created by default, or the custom tooltip window set using
	// gtk_widget_set_tooltip_window().
	TooltipWindow() Window
	// Toplevel: this function returns the topmost widget in the container
	// hierarchy @widget is a part of. If @widget has no parent widgets, it will
	// be returned as the topmost widget. No reference will be added to the
	// returned widget; it should not be unreferenced.
	//
	// Note the difference in behavior vs. gtk_widget_get_ancestor();
	// `gtk_widget_get_ancestor (widget, GTK_TYPE_WINDOW)` would return nil if
	// @widget wasn’t inside a toplevel window, and if the window was inside a
	// Window-derived widget which was in turn inside the toplevel Window. While
	// the second case may seem unlikely, it actually happens when a Plug is
	// embedded inside a Socket within the same application.
	//
	// To reliably find the toplevel Window, use gtk_widget_get_toplevel() and
	// call GTK_IS_WINDOW() on the result. For instance, to get the title of a
	// widget's toplevel window, one might use:
	//
	//    static const char *
	//    get_widget_toplevel_title (GtkWidget *widget)
	//    {
	//      GtkWidget *toplevel = gtk_widget_get_toplevel (widget);
	//      if (GTK_IS_WINDOW (toplevel))
	//        {
	//          return gtk_window_get_title (GTK_WINDOW (toplevel));
	//        }
	//
	//      return NULL;
	//    }
	Toplevel() Widget
	// Valign gets the value of the Widget:valign property.
	//
	// For backwards compatibility reasons this method will never return
	// GTK_ALIGN_BASELINE, but instead it will convert it to GTK_ALIGN_FILL. If
	// your widget want to support baseline aligned children it must use
	// gtk_widget_get_valign_with_baseline(), or `g_object_get (widget,
	// "valign", &value, NULL)`, which will also report the true value.
	Valign() Align
	// ValignWithBaseline gets the value of the Widget:valign property,
	// including GTK_ALIGN_BASELINE.
	ValignWithBaseline() Align
	// Vexpand gets whether the widget would like any available extra vertical
	// space.
	//
	// See gtk_widget_get_hexpand() for more detail.
	Vexpand() bool
	// VexpandSet gets whether gtk_widget_set_vexpand() has been used to
	// explicitly set the expand flag on this widget.
	//
	// See gtk_widget_get_hexpand_set() for more detail.
	VexpandSet() bool
	// Visible determines whether the widget is visible. If you want to take
	// into account whether the widget’s parent is also marked as visible, use
	// gtk_widget_is_visible() instead.
	//
	// This function does not check if the widget is obscured in any way.
	//
	// See gtk_widget_set_visible().
	Visible() bool
	// Visual gets the visual that will be used to render @widget.
	Visual() gdk.Visual
	// Window returns the widget’s window if it is realized, nil otherwise
	Window() gdk.Window
	// GrabAddWidget makes @widget the current grabbed widget.
	//
	// This means that interaction with other widgets in the same application is
	// blocked and mouse as well as keyboard events are delivered to this
	// widget.
	//
	// If @widget is not sensitive, it is not set as the current grabbed widget
	// and this function does nothing.
	GrabAddWidget()
	// GrabDefaultWidget causes @widget to become the default widget. @widget
	// must be able to be a default widget; typically you would ensure this
	// yourself by calling gtk_widget_set_can_default() with a true value. The
	// default widget is activated when the user presses Enter in a window.
	// Default widgets must be activatable, that is, gtk_widget_activate()
	// should affect them. Note that Entry widgets require the
	// “activates-default” property set to true before they activate the default
	// widget when Enter is pressed and the Entry is focused.
	GrabDefaultWidget()
	// GrabFocusWidget causes @widget to have the keyboard focus for the Window
	// it's inside. @widget must be a focusable widget, such as a Entry;
	// something like Frame won’t work.
	//
	// More precisely, it must have the GTK_CAN_FOCUS flag set. Use
	// gtk_widget_set_can_focus() to modify that flag.
	//
	// The widget also needs to be realized and mapped. This is indicated by the
	// related signals. Grabbing the focus immediately after creating the widget
	// will likely fail and cause critical warnings.
	GrabFocusWidget()
	// GrabRemoveWidget removes the grab from the given widget.
	//
	// You have to pair calls to gtk_grab_add() and gtk_grab_remove().
	//
	// If @widget does not have the grab, this function does nothing.
	GrabRemoveWidget()
	// HasDefaultWidget determines whether @widget is the current default widget
	// within its toplevel. See gtk_widget_set_can_default().
	HasDefaultWidget() bool
	// HasFocusWidget determines if the widget has the global input focus. See
	// gtk_widget_is_focus() for the difference between having the global input
	// focus, and only having the focus within a toplevel.
	HasFocusWidget() bool
	// HasGrabWidget determines whether the widget is currently grabbing events,
	// so it is the only widget receiving input events (keyboard and mouse).
	//
	// See also gtk_grab_add().
	HasGrabWidget() bool
	// HasRCStyleWidget determines if the widget style has been looked up
	// through the rc mechanism.
	//
	// Deprecated: since version 3.0.
	HasRCStyleWidget() bool
	// HasScreenWidget checks whether there is a Screen is associated with this
	// widget. All toplevel widgets have an associated screen, and all widgets
	// added into a hierarchy with a toplevel window at the top.
	HasScreenWidget() bool
	// HasVisibleFocusWidget determines if the widget should show a visible
	// indication that it has the global input focus. This is a convenience
	// function for use in ::draw handlers that takes into account whether focus
	// indication should currently be shown in the toplevel window of @widget.
	// See gtk_window_get_focus_visible() for more information about focus
	// indication.
	//
	// To find out if the widget has the global input focus, use
	// gtk_widget_has_focus().
	HasVisibleFocusWidget() bool
	// HideWidget reverses the effects of gtk_widget_show(), causing the widget
	// to be hidden (invisible to the user).
	HideWidget()
	// HideOnDeleteWidget: utility function; intended to be connected to the
	// Widget::delete-event signal on a Window. The function calls
	// gtk_widget_hide() on its argument, then returns true. If connected to
	// ::delete-event, the result is that clicking the close button for a window
	// (on the window frame, top right corner usually) will hide but not destroy
	// the window. By default, GTK+ destroys windows when ::delete-event is
	// received.
	HideOnDeleteWidget() bool
	// InDestructionWidget returns whether the widget is currently being
	// destroyed. This information can sometimes be used to avoid doing
	// unnecessary work.
	InDestructionWidget() bool
	// InitTemplateWidget creates and initializes child widgets defined in
	// templates. This function must be called in the instance initializer for
	// any class which assigned itself a template using
	// gtk_widget_class_set_template()
	//
	// It is important to call this function in the instance initializer of a
	// Widget subclass and not in #GObject.constructed() or
	// #GObject.constructor() for two reasons.
	//
	// One reason is that generally derived widgets will assume that parent
	// class composite widgets have been created in their instance initializers.
	//
	// Another reason is that when calling g_object_new() on a widget with
	// composite templates, it’s important to build the composite widgets before
	// the construct properties are set. Properties passed to g_object_new()
	// should take precedence over properties set in the private template XML.
	InitTemplateWidget()
	// InputShapeCombineRegionWidget sets an input shape for this widget’s GDK
	// window. This allows for windows which react to mouse click in a
	// nonrectangular region, see gdk_window_input_shape_combine_region() for
	// more information.
	InputShapeCombineRegionWidget(region *cairo.Region)
	// InsertActionGroupWidget inserts @group into @widget. Children of @widget
	// that implement Actionable can then be associated with actions in @group
	// by setting their “action-name” to @prefix.`action-name`.
	//
	// If @group is nil, a previously inserted group for @name is removed from
	// @widget.
	InsertActionGroupWidget(name string, group gio.ActionGroup)
	// IntersectWidget computes the intersection of a @widget’s area and @area,
	// storing the intersection in @intersection, and returns true if there was
	// an intersection. @intersection may be nil if you’re only interested in
	// whether there was an intersection.
	IntersectWidget(area *gdk.Rectangle) (gdk.Rectangle, bool)
	// IsAncestorWidget determines whether @widget is somewhere inside
	// @ancestor, possibly with intermediate containers.
	IsAncestorWidget(ancestor Widget) bool
	// IsCompositedWidget: whether @widget can rely on having its alpha channel
	// drawn correctly. On X11 this function returns whether a compositing
	// manager is running for @widget’s screen.
	//
	// Please note that the semantics of this call will change in the future if
	// used on a widget that has a composited window in its hierarchy (as set by
	// gdk_window_set_composited()).
	//
	// Deprecated: since version 3.22.
	IsCompositedWidget() bool
	// IsDrawableWidget determines whether @widget can be drawn to. A widget can
	// be drawn to if it is mapped and visible.
	IsDrawableWidget() bool
	// IsFocusWidget determines if the widget is the focus widget within its
	// toplevel. (This does not mean that the Widget:has-focus property is
	// necessarily set; Widget:has-focus will only be set if the toplevel widget
	// additionally has the global input focus.)
	IsFocusWidget() bool
	// IsSensitiveWidget returns the widget’s effective sensitivity, which means
	// it is sensitive itself and also its parent widget is sensitive
	IsSensitiveWidget() bool
	// IsToplevelWidget determines whether @widget is a toplevel widget.
	//
	// Currently only Window and Invisible (and out-of-process Plugs) are
	// toplevel widgets. Toplevel widgets have no parent widget.
	IsToplevelWidget() bool
	// IsVisibleWidget determines whether the widget and all its parents are
	// marked as visible.
	//
	// This function does not check if the widget is obscured in any way.
	//
	// See also gtk_widget_get_visible() and gtk_widget_set_visible()
	IsVisibleWidget() bool
	// KeynavFailedWidget: this function should be called whenever keyboard
	// navigation within a single widget hits a boundary. The function emits the
	// Widget::keynav-failed signal on the widget and its return value should be
	// interpreted in a way similar to the return value of
	// gtk_widget_child_focus():
	//
	// When true is returned, stay in the widget, the failed keyboard navigation
	// is OK and/or there is nowhere we can/should move the focus to.
	//
	// When false is returned, the caller should continue with keyboard
	// navigation outside the widget, e.g. by calling gtk_widget_child_focus()
	// on the widget’s toplevel.
	//
	// The default ::keynav-failed handler returns false for GTK_DIR_TAB_FORWARD
	// and GTK_DIR_TAB_BACKWARD. For the other values of DirectionType it
	// returns true.
	//
	// Whenever the default handler returns true, it also calls
	// gtk_widget_error_bell() to notify the user of the failed keyboard
	// navigation.
	//
	// A use case for providing an own implementation of ::keynav-failed (either
	// by connecting to it or by overriding it) would be a row of Entry widgets
	// where the user should be able to navigate the entire row with the cursor
	// keys, as e.g. known from user interfaces that require entering license
	// keys.
	KeynavFailedWidget(direction DirectionType) bool
	// ListActionPrefixesWidget retrieves a nil-terminated array of strings
	// containing the prefixes of Group's available to @widget.
	ListActionPrefixesWidget() []string
	// MapWidget: this function is only for use in widget implementations.
	// Causes a widget to be mapped if it isn’t already.
	MapWidget()
	// MnemonicActivateWidget emits the Widget::mnemonic-activate signal.
	MnemonicActivateWidget(groupCycling bool) bool
	// ModifyBaseWidget sets the base color for a widget in a particular state.
	// All other style values are left untouched. The base color is the
	// background color used along with the text color (see
	// gtk_widget_modify_text()) for widgets such as Entry and TextView. See
	// also gtk_widget_modify_style().
	//
	// > Note that “no window” widgets (which have the GTK_NO_WINDOW > flag set)
	// draw on their parent container’s window and thus may > not draw any
	// background themselves. This is the case for e.g. > Label. > > To modify
	// the background of such widgets, you have to set the > base color on their
	// parent; if you want to set the background > of a rectangular area around
	// a label, try placing the label in > a EventBox widget and setting the
	// base color on that.
	//
	// Deprecated: since version 3.0.
	ModifyBaseWidget(state StateType, color *gdk.Color)
	// ModifyBgWidget sets the background color for a widget in a particular
	// state.
	//
	// All other style values are left untouched. See also
	// gtk_widget_modify_style().
	//
	// > Note that “no window” widgets (which have the GTK_NO_WINDOW > flag set)
	// draw on their parent container’s window and thus may > not draw any
	// background themselves. This is the case for e.g. > Label. > > To modify
	// the background of such widgets, you have to set the > background color on
	// their parent; if you want to set the background > of a rectangular area
	// around a label, try placing the label in > a EventBox widget and setting
	// the background color on that.
	//
	// Deprecated: since version 3.0.
	ModifyBgWidget(state StateType, color *gdk.Color)
	// ModifyCursorWidget sets the cursor color to use in a widget, overriding
	// the Widget cursor-color and secondary-cursor-color style properties.
	//
	// All other style values are left untouched. See also
	// gtk_widget_modify_style().
	//
	// Deprecated: since version 3.0.
	ModifyCursorWidget(primary *gdk.Color, secondary *gdk.Color)
	// ModifyFgWidget sets the foreground color for a widget in a particular
	// state.
	//
	// All other style values are left untouched. See also
	// gtk_widget_modify_style().
	//
	// Deprecated: since version 3.0.
	ModifyFgWidget(state StateType, color *gdk.Color)
	// ModifyFontWidget sets the font to use for a widget.
	//
	// All other style values are left untouched. See also
	// gtk_widget_modify_style().
	//
	// Deprecated: since version 3.0.
	ModifyFontWidget(fontDesc *pango.FontDescription)
	// ModifyStyleWidget modifies style values on the widget.
	//
	// Modifications made using this technique take precedence over style values
	// set via an RC file, however, they will be overridden if a style is
	// explicitly set on the widget using gtk_widget_set_style(). The
	// RcStyle-struct is designed so each field can either be set or unset, so
	// it is possible, using this function, to modify some style values and
	// leave the others unchanged.
	//
	// Note that modifications made with this function are not cumulative with
	// previous calls to gtk_widget_modify_style() or with such functions as
	// gtk_widget_modify_fg(). If you wish to retain previous values, you must
	// first call gtk_widget_get_modifier_style(), make your modifications to
	// the returned style, then call gtk_widget_modify_style() with that style.
	// On the other hand, if you first call gtk_widget_modify_style(),
	// subsequent calls to such functions gtk_widget_modify_fg() will have a
	// cumulative effect with the initial modifications.
	//
	// Deprecated: since version 3.0.
	ModifyStyleWidget(style RCStyle)
	// ModifyTextWidget sets the text color for a widget in a particular state.
	//
	// All other style values are left untouched. The text color is the
	// foreground color used along with the base color (see
	// gtk_widget_modify_base()) for widgets such as Entry and TextView. See
	// also gtk_widget_modify_style().
	//
	// Deprecated: since version 3.0.
	ModifyTextWidget(state StateType, color *gdk.Color)
	// OverrideBackgroundColorWidget sets the background color to use for a
	// widget.
	//
	// All other style values are left untouched. See
	// gtk_widget_override_color().
	//
	// Deprecated: since version 3.16.
	OverrideBackgroundColorWidget(state StateFlags, color *gdk.RGBA)
	// OverrideColorWidget sets the color to use for a widget.
	//
	// All other style values are left untouched.
	//
	// This function does not act recursively. Setting the color of a container
	// does not affect its children. Note that some widgets that you may not
	// think of as containers, for instance Buttons, are actually containers.
	//
	// This API is mostly meant as a quick way for applications to change a
	// widget appearance. If you are developing a widgets library and intend
	// this change to be themeable, it is better done by setting meaningful CSS
	// classes in your widget/container implementation through
	// gtk_style_context_add_class().
	//
	// This way, your widget library can install a CssProvider with the
	// GTK_STYLE_PROVIDER_PRIORITY_FALLBACK priority in order to provide a
	// default styling for those widgets that need so, and this theming may
	// fully overridden by the user’s theme.
	//
	// Note that for complex widgets this may bring in undesired results (such
	// as uniform background color everywhere), in these cases it is better to
	// fully style such widgets through a CssProvider with the
	// GTK_STYLE_PROVIDER_PRIORITY_APPLICATION priority.
	//
	// Deprecated: since version 3.16.
	OverrideColorWidget(state StateFlags, color *gdk.RGBA)
	// OverrideCursorWidget sets the cursor color to use in a widget, overriding
	// the cursor-color and secondary-cursor-color style properties. All other
	// style values are left untouched. See also gtk_widget_modify_style().
	//
	// Note that the underlying properties have the Color type, so the alpha
	// value in @primary and @secondary will be ignored.
	//
	// Deprecated: since version 3.16.
	OverrideCursorWidget(cursor *gdk.RGBA, secondaryCursor *gdk.RGBA)
	// OverrideFontWidget sets the font to use for a widget. All other style
	// values are left untouched. See gtk_widget_override_color().
	//
	// Deprecated: since version 3.16.
	OverrideFontWidget(fontDesc *pango.FontDescription)
	// OverrideSymbolicColorWidget sets a symbolic color for a widget.
	//
	// All other style values are left untouched. See
	// gtk_widget_override_color() for overriding the foreground or background
	// color.
	//
	// Deprecated: since version 3.16.
	OverrideSymbolicColorWidget(name string, color *gdk.RGBA)
	// PathWidget obtains the full path to @widget. The path is simply the name
	// of a widget and all its parents in the container hierarchy, separated by
	// periods. The name of a widget comes from gtk_widget_get_name(). Paths are
	// used to apply styles to a widget in gtkrc configuration files. Widget
	// names are the type of the widget by default (e.g. “GtkButton”) or can be
	// set to an application-specific value with gtk_widget_set_name(). By
	// setting the name of a widget, you allow users or theme authors to apply
	// styles to that specific widget in their gtkrc file. @path_reversed_p
	// fills in the path in reverse order, i.e. starting with @widget’s name
	// instead of starting with the name of @widget’s outermost ancestor.
	//
	// Deprecated: since version 3.0.
	PathWidget() (pathLength uint, path string, pathReversed string)
	// QueueAllocateWidget: this function is only for use in widget
	// implementations.
	//
	// Flags the widget for a rerun of the GtkWidgetClass::size_allocate
	// function. Use this function instead of gtk_widget_queue_resize() when the
	// @widget's size request didn't change but it wants to reposition its
	// contents.
	//
	// An example user of this function is gtk_widget_set_halign().
	QueueAllocateWidget()
	// QueueComputeExpandWidget: mark @widget as needing to recompute its expand
	// flags. Call this function when setting legacy expand child properties on
	// the child of a container.
	//
	// See gtk_widget_compute_expand().
	QueueComputeExpandWidget()
	// QueueDrawWidget: equivalent to calling gtk_widget_queue_draw_area() for
	// the entire area of a widget.
	QueueDrawWidget()
	// QueueDrawAreaWidget: convenience function that calls
	// gtk_widget_queue_draw_region() on the region created from the given
	// coordinates.
	//
	// The region here is specified in widget coordinates. Widget coordinates
	// are a bit odd; for historical reasons, they are defined as
	// @widget->window coordinates for widgets that return true for
	// gtk_widget_get_has_window(), and are relative to @widget->allocation.x,
	// @widget->allocation.y otherwise.
	//
	// @width or @height may be 0, in this case this function does nothing.
	// Negative values for @width and @height are not allowed.
	QueueDrawAreaWidget(x int, y int, width int, height int)
	// QueueDrawRegionWidget invalidates the area of @widget defined by @region
	// by calling gdk_window_invalidate_region() on the widget’s window and all
	// its child windows. Once the main loop becomes idle (after the current
	// batch of events has been processed, roughly), the window will receive
	// expose events for the union of all regions that have been invalidated.
	//
	// Normally you would only use this function in widget implementations. You
	// might also use it to schedule a redraw of a DrawingArea or some portion
	// thereof.
	QueueDrawRegionWidget(region *cairo.Region)
	// QueueResizeWidget: this function is only for use in widget
	// implementations. Flags a widget to have its size renegotiated; should be
	// called when a widget for some reason has a new size request. For example,
	// when you change the text in a Label, Label queues a resize to ensure
	// there’s enough space for the new text.
	//
	// Note that you cannot call gtk_widget_queue_resize() on a widget from
	// inside its implementation of the GtkWidgetClass::size_allocate virtual
	// method. Calls to gtk_widget_queue_resize() from inside
	// GtkWidgetClass::size_allocate will be silently ignored.
	QueueResizeWidget()
	// QueueResizeNoRedrawWidget: this function works like
	// gtk_widget_queue_resize(), except that the widget is not invalidated.
	QueueResizeNoRedrawWidget()
	// RealizeWidget creates the GDK (windowing system) resources associated
	// with a widget. For example, @widget->window will be created when a widget
	// is realized. Normally realization happens implicitly; if you show a
	// widget and all its parent containers, then the widget will be realized
	// and mapped automatically.
	//
	// Realizing a widget requires all the widget’s parent widgets to be
	// realized; calling gtk_widget_realize() realizes the widget’s parents in
	// addition to @widget itself. If a widget is not yet inside a toplevel
	// window when you realize it, bad things will happen.
	//
	// This function is primarily used in widget implementations, and isn’t very
	// useful otherwise. Many times when you think you might need it, a better
	// approach is to connect to a signal that will be called after the widget
	// is realized automatically, such as Widget::draw. Or simply
	// g_signal_connect () to the Widget::realize signal.
	RealizeWidget()
	// RegionIntersectWidget computes the intersection of a @widget’s area and
	// @region, returning the intersection. The result may be empty, use
	// cairo_region_is_empty() to check.
	//
	// Deprecated: since version 3.14.
	RegionIntersectWidget(region *cairo.Region) *cairo.Region
	// RegisterWindowWidget registers a Window with the widget and sets it up so
	// that the widget receives events for it. Call
	// gtk_widget_unregister_window() when destroying the window.
	//
	// Before 3.8 you needed to call gdk_window_set_user_data() directly to set
	// this up. This is now deprecated and you should use
	// gtk_widget_register_window() instead. Old code will keep working as is,
	// although some new features like transparency might not work perfectly.
	RegisterWindowWidget(window gdk.Window)
	// RemoveAcceleratorWidget removes an accelerator from @widget, previously
	// installed with gtk_widget_add_accelerator().
	RemoveAcceleratorWidget(accelGroup AccelGroup, accelKey uint, accelMods gdk.ModifierType) bool
	// RemoveMnemonicLabelWidget removes a widget from the list of mnemonic
	// labels for this widget. (See gtk_widget_list_mnemonic_labels()). The
	// widget must have previously been added to the list with
	// gtk_widget_add_mnemonic_label().
	RemoveMnemonicLabelWidget(label Widget)
	// RemoveTickCallbackWidget removes a tick callback previously registered
	// with gtk_widget_add_tick_callback().
	RemoveTickCallbackWidget(id uint)
	// RenderIconWidget: convenience function that uses the theme settings for
	// @widget to look up @stock_id and render it to a pixbuf. @stock_id should
	// be a stock icon ID such as K_STOCK_OPEN or K_STOCK_OK. @size should be a
	// size such as K_ICON_SIZE_MENU. @detail should be a string that identifies
	// the widget or code doing the rendering, so that theme engines can
	// special-case rendering for that widget or code.
	//
	// The pixels in the returned Pixbuf are shared with the rest of the
	// application and should not be modified. The pixbuf should be freed after
	// use with g_object_unref().
	//
	// Deprecated: since version 3.0.
	RenderIconWidget(stockId string, size int, detail string) gdkpixbuf.Pixbuf
	// RenderIconPixbufWidget: convenience function that uses the theme engine
	// and style settings for @widget to look up @stock_id and render it to a
	// pixbuf. @stock_id should be a stock icon ID such as K_STOCK_OPEN or
	// K_STOCK_OK. @size should be a size such as K_ICON_SIZE_MENU.
	//
	// The pixels in the returned Pixbuf are shared with the rest of the
	// application and should not be modified. The pixbuf should be freed after
	// use with g_object_unref().
	//
	// Deprecated: since version 3.10.
	RenderIconPixbufWidget(stockId string, size int) gdkpixbuf.Pixbuf
	// ReparentWidget moves a widget from one Container to another, handling
	// reference count issues to avoid destroying the widget.
	//
	// Deprecated: since version 3.14.
	ReparentWidget(newParent Widget)
	// ResetRCStylesWidget: reset the styles of @widget and all descendents, so
	// when they are looked up again, they get the correct values for the
	// currently loaded RC file settings.
	//
	// This function is not useful for applications.
	//
	// Deprecated: since version 3.0.
	ResetRCStylesWidget()
	// ResetStyleWidget updates the style context of @widget and all descendants
	// by updating its widget path. Containers may want to use this on a child
	// when reordering it in a way that a different style might apply to it. See
	// also gtk_container_get_path_for_child().
	ResetStyleWidget()
	// SetAccelPathWidget: given an accelerator group, @accel_group, and an
	// accelerator path, @accel_path, sets up an accelerator in @accel_group so
	// whenever the key binding that is defined for @accel_path is pressed,
	// @widget will be activated. This removes any accelerators (for any
	// accelerator group) installed by previous calls to
	// gtk_widget_set_accel_path(). Associating accelerators with paths allows
	// them to be modified by the user and the modifications to be saved for
	// future use. (See gtk_accel_map_save().)
	//
	// This function is a low level function that would most likely be used by a
	// menu creation system like UIManager. If you use UIManager, setting up
	// accelerator paths will be done automatically.
	//
	// Even when you you aren’t using UIManager, if you only want to set up
	// accelerators on menu items gtk_menu_item_set_accel_path() provides a
	// somewhat more convenient interface.
	//
	// Note that @accel_path string will be stored in a #GQuark. Therefore, if
	// you pass a static string, you can save some memory by interning it first
	// with g_intern_static_string().
	SetAccelPathWidget(accelPath string, accelGroup AccelGroup)
	// SetAppPaintableWidget sets whether the application intends to draw on the
	// widget in an Widget::draw handler.
	//
	// This is a hint to the widget and does not affect the behavior of the GTK+
	// core; many widgets ignore this flag entirely. For widgets that do pay
	// attention to the flag, such as EventBox and Window, the effect is to
	// suppress default themed drawing of the widget's background. (Children of
	// the widget will still be drawn.) The application is then entirely
	// responsible for drawing the widget background.
	//
	// Note that the background is still drawn when the widget is mapped.
	SetAppPaintableWidget(appPaintable bool)
	// SetCanDefaultWidget specifies whether @widget can be a default widget.
	// See gtk_widget_grab_default() for details about the meaning of “default”.
	SetCanDefaultWidget(canDefault bool)
	// SetCanFocusWidget specifies whether @widget can own the input focus. See
	// gtk_widget_grab_focus() for actually setting the input focus on a widget.
	SetCanFocusWidget(canFocus bool)
	// SetChildVisibleWidget sets whether @widget should be mapped along with
	// its when its parent is mapped and @widget has been shown with
	// gtk_widget_show().
	//
	// The child visibility can be set for widget before it is added to a
	// container with gtk_widget_set_parent(), to avoid mapping children
	// unnecessary before immediately unmapping them. However it will be reset
	// to its default state of true when the widget is removed from a container.
	//
	// Note that changing the child visibility of a widget does not queue a
	// resize on the widget. Most of the time, the size of a widget is computed
	// from all visible children, whether or not they are mapped. If this is not
	// the case, the container can queue a resize itself.
	//
	// This function is only useful for container implementations and never
	// should be called by an application.
	SetChildVisibleWidget(isVisible bool)
	// SetCompositeNameWidget sets a widgets composite name. The widget must be
	// a composite child of its parent; see gtk_widget_push_composite_child().
	//
	// Deprecated: since version 3.10.
	SetCompositeNameWidget(name string)
	// SetDeviceEnabledWidget enables or disables a Device to interact with
	// @widget and all its children.
	//
	// It does so by descending through the Window hierarchy and enabling the
	// same mask that is has for core events (i.e. the one that
	// gdk_window_get_events() returns).
	SetDeviceEnabledWidget(device gdk.Device, enabled bool)
	// SetDeviceEventsWidget sets the device event mask (see EventMask) for a
	// widget. The event mask determines which events a widget will receive from
	// @device. Keep in mind that different widgets have different default event
	// masks, and by changing the event mask you may disrupt a widget’s
	// functionality, so be careful. This function must be called while a widget
	// is unrealized. Consider gtk_widget_add_device_events() for widgets that
	// are already realized, or if you want to preserve the existing event mask.
	// This function can’t be used with windowless widgets (which return false
	// from gtk_widget_get_has_window()); to get events on those widgets, place
	// them inside a EventBox and receive events on the event box.
	SetDeviceEventsWidget(device gdk.Device, events gdk.EventMask)
	// SetDirectionWidget sets the reading direction on a particular widget.
	// This direction controls the primary direction for widgets containing
	// text, and also the direction in which the children of a container are
	// packed. The ability to set the direction is present in order so that
	// correct localization into languages with right-to-left reading directions
	// can be done. Generally, applications will let the default reading
	// direction present, except for containers where the containers are
	// arranged in an order that is explicitly visual rather than logical (such
	// as buttons for text justification).
	//
	// If the direction is set to GTK_TEXT_DIR_NONE, then the value set by
	// gtk_widget_set_default_direction() will be used.
	SetDirectionWidget(dir TextDirection)
	// SetDoubleBufferedWidget widgets are double buffered by default; you can
	// use this function to turn off the buffering. “Double buffered” simply
	// means that gdk_window_begin_draw_frame() and gdk_window_end_draw_frame()
	// are called automatically around expose events sent to the widget.
	// gdk_window_begin_draw_frame() diverts all drawing to a widget's window to
	// an offscreen buffer, and gdk_window_end_draw_frame() draws the buffer to
	// the screen. The result is that users see the window update in one smooth
	// step, and don’t see individual graphics primitives being rendered.
	//
	// In very simple terms, double buffered widgets don’t flicker, so you would
	// only use this function to turn off double buffering if you had special
	// needs and really knew what you were doing.
	//
	// Note: if you turn off double-buffering, you have to handle expose events,
	// since even the clearing to the background color or pixmap will not happen
	// automatically (as it is done in gdk_window_begin_draw_frame()).
	//
	// In 3.10 GTK and GDK have been restructured for translucent drawing. Since
	// then expose events for double-buffered widgets are culled into a single
	// event to the toplevel GDK window. If you now unset double buffering, you
	// will cause a separate rendering pass for every widget. This will likely
	// cause rendering problems - in particular related to stacking - and
	// usually increases rendering times significantly.
	//
	// Deprecated: since version 3.14.
	SetDoubleBufferedWidget(doubleBuffered bool)
	// SetEventsWidget sets the event mask (see EventMask) for a widget. The
	// event mask determines which events a widget will receive. Keep in mind
	// that different widgets have different default event masks, and by
	// changing the event mask you may disrupt a widget’s functionality, so be
	// careful. This function must be called while a widget is unrealized.
	// Consider gtk_widget_add_events() for widgets that are already realized,
	// or if you want to preserve the existing event mask. This function can’t
	// be used with widgets that have no window. (See
	// gtk_widget_get_has_window()). To get events on those widgets, place them
	// inside a EventBox and receive events on the event box.
	SetEventsWidget(events int)
	// SetFocusOnClickWidget sets whether the widget should grab focus when it
	// is clicked with the mouse. Making mouse clicks not grab focus is useful
	// in places like toolbars where you don’t want the keyboard focus removed
	// from the main area of the application.
	SetFocusOnClickWidget(focusOnClick bool)
	// SetFontMapWidget sets the font map to use for Pango rendering. When not
	// set, the widget will inherit the font map from its parent.
	SetFontMapWidget(fontMap pango.FontMap)
	// SetFontOptionsWidget sets the #cairo_font_options_t used for Pango
	// rendering in this widget. When not set, the default font options for the
	// Screen will be used.
	SetFontOptionsWidget(options *cairo.FontOptions)
	// SetHalignWidget sets the horizontal alignment of @widget. See the
	// Widget:halign property.
	SetHalignWidget(align Align)
	// SetHasTooltipWidget sets the has-tooltip property on @widget to
	// @has_tooltip. See Widget:has-tooltip for more information.
	SetHasTooltipWidget(hasTooltip bool)
	// SetHasWindowWidget specifies whether @widget has a Window of its own.
	// Note that all realized widgets have a non-nil “window” pointer
	// (gtk_widget_get_window() never returns a nil window when a widget is
	// realized), but for many of them it’s actually the Window of one of its
	// parent widgets. Widgets that do not create a window for themselves in
	// Widget::realize must announce this by calling this function with
	// @has_window = false.
	//
	// This function should only be called by widget implementations, and they
	// should call it in their init() function.
	SetHasWindowWidget(hasWindow bool)
	// SetHexpandWidget sets whether the widget would like any available extra
	// horizontal space. When a user resizes a Window, widgets with expand=TRUE
	// generally receive the extra space. For example, a list or scrollable area
	// or document in your window would often be set to expand.
	//
	// Call this function to set the expand flag if you would like your widget
	// to become larger horizontally when the window has extra room.
	//
	// By default, widgets automatically expand if any of their children want to
	// expand. (To see if a widget will automatically expand given its current
	// children and state, call gtk_widget_compute_expand(). A container can
	// decide how the expandability of children affects the expansion of the
	// container by overriding the compute_expand virtual method on Widget.).
	//
	// Setting hexpand explicitly with this function will override the automatic
	// expand behavior.
	//
	// This function forces the widget to expand or not to expand, regardless of
	// children. The override occurs because gtk_widget_set_hexpand() sets the
	// hexpand-set property (see gtk_widget_set_hexpand_set()) which causes the
	// widget’s hexpand value to be used, rather than looking at children and
	// widget state.
	SetHexpandWidget(expand bool)
	// SetHexpandSetWidget sets whether the hexpand flag (see
	// gtk_widget_get_hexpand()) will be used.
	//
	// The hexpand-set property will be set automatically when you call
	// gtk_widget_set_hexpand() to set hexpand, so the most likely reason to use
	// this function would be to unset an explicit expand flag.
	//
	// If hexpand is set, then it overrides any computed expand value based on
	// child widgets. If hexpand is not set, then the expand value depends on
	// whether any children of the widget would like to expand.
	//
	// There are few reasons to use this function, but it’s here for
	// completeness and consistency.
	SetHexpandSetWidget(set bool)
	// SetMappedWidget marks the widget as being mapped.
	//
	// This function should only ever be called in a derived widget's “map” or
	// “unmap” implementation.
	SetMappedWidget(mapped bool)
	// SetMarginBottomWidget sets the bottom margin of @widget. See the
	// Widget:margin-bottom property.
	SetMarginBottomWidget(margin int)
	// SetMarginEndWidget sets the end margin of @widget. See the
	// Widget:margin-end property.
	SetMarginEndWidget(margin int)
	// SetMarginLeftWidget sets the left margin of @widget. See the
	// Widget:margin-left property.
	//
	// Deprecated: since version 3.12.
	SetMarginLeftWidget(margin int)
	// SetMarginRightWidget sets the right margin of @widget. See the
	// Widget:margin-right property.
	//
	// Deprecated: since version 3.12.
	SetMarginRightWidget(margin int)
	// SetMarginStartWidget sets the start margin of @widget. See the
	// Widget:margin-start property.
	SetMarginStartWidget(margin int)
	// SetMarginTopWidget sets the top margin of @widget. See the
	// Widget:margin-top property.
	SetMarginTopWidget(margin int)
	// SetNameWidget widgets can be named, which allows you to refer to them
	// from a CSS file. You can apply a style to widgets with a particular name
	// in the CSS file. See the documentation for the CSS syntax (on the same
	// page as the docs for StyleContext).
	//
	// Note that the CSS syntax has certain special characters to delimit and
	// represent elements in a selector (period, #, >, *...), so using these
	// will make your widget impossible to match by name. Any combination of
	// alphanumeric symbols, dashes and underscores will suffice.
	SetNameWidget(name string)
	// SetNoShowAllWidget sets the Widget:no-show-all property, which determines
	// whether calls to gtk_widget_show_all() will affect this widget.
	//
	// This is mostly for use in constructing widget hierarchies with externally
	// controlled visibility, see UIManager.
	SetNoShowAllWidget(noShowAll bool)
	// SetOpacityWidget: request the @widget to be rendered partially
	// transparent, with opacity 0 being fully transparent and 1 fully opaque.
	// (Opacity values are clamped to the [0,1] range.). This works on both
	// toplevel widget, and child widgets, although there are some limitations:
	//
	// For toplevel widgets this depends on the capabilities of the windowing
	// system. On X11 this has any effect only on X screens with a compositing
	// manager running. See gtk_widget_is_composited(). On Windows it should
	// work always, although setting a window’s opacity after the window has
	// been shown causes it to flicker once on Windows.
	//
	// For child widgets it doesn’t work if any affected widget has a native
	// window, or disables double buffering.
	SetOpacityWidget(opacity float64)
	// SetParentWidget: this function is useful only when implementing
	// subclasses of Container. Sets the container as the parent of @widget, and
	// takes care of some details such as updating the state and style of the
	// child to reflect its new location. The opposite function is
	// gtk_widget_unparent().
	SetParentWidget(parent Widget)
	// SetParentWindowWidget sets a non default parent window for @widget.
	//
	// For Window classes, setting a @parent_window effects whether the window
	// is a toplevel window or can be embedded into other widgets.
	//
	// For Window classes, this needs to be called before the window is
	// realized.
	SetParentWindowWidget(parentWindow gdk.Window)
	// SetRealizedWidget marks the widget as being realized. This function must
	// only be called after all Windows for the @widget have been created and
	// registered.
	//
	// This function should only ever be called in a derived widget's “realize”
	// or “unrealize” implementation.
	SetRealizedWidget(realized bool)
	// SetReceivesDefaultWidget specifies whether @widget will be treated as the
	// default widget within its toplevel when it has the focus, even if another
	// widget is the default.
	//
	// See gtk_widget_grab_default() for details about the meaning of “default”.
	SetReceivesDefaultWidget(receivesDefault bool)
	// SetRedrawOnAllocateWidget sets whether the entire widget is queued for
	// drawing when its size allocation changes. By default, this setting is
	// true and the entire widget is redrawn on every size change. If your
	// widget leaves the upper left unchanged when made bigger, turning this
	// setting off will improve performance.
	//
	// Note that for widgets where gtk_widget_get_has_window() is false setting
	// this flag to false turns off all allocation on resizing: the widget will
	// not even redraw if its position changes; this is to allow containers that
	// don’t draw anything to avoid excess invalidations. If you set this flag
	// on a widget with no window that does draw on @widget->window, you are
	// responsible for invalidating both the old and new allocation of the
	// widget when the widget is moved and responsible for invalidating regions
	// newly when the widget increases size.
	SetRedrawOnAllocateWidget(redrawOnAllocate bool)
	// SetSensitiveWidget sets the sensitivity of a widget. A widget is
	// sensitive if the user can interact with it. Insensitive widgets are
	// “grayed out” and the user can’t interact with them. Insensitive widgets
	// are known as “inactive”, “disabled”, or “ghosted” in some other toolkits.
	SetSensitiveWidget(sensitive bool)
	// SetSizeRequestWidget sets the minimum size of a widget; that is, the
	// widget’s size request will be at least @width by @height. You can use
	// this function to force a widget to be larger than it normally would be.
	//
	// In most cases, gtk_window_set_default_size() is a better choice for
	// toplevel windows than this function; setting the default size will still
	// allow users to shrink the window. Setting the size request will force
	// them to leave the window at least as large as the size request. When
	// dealing with window sizes, gtk_window_set_geometry_hints() can be a
	// useful function as well.
	//
	// Note the inherent danger of setting any fixed size - themes, translations
	// into other languages, different fonts, and user action can all change the
	// appropriate size for a given widget. So, it's basically impossible to
	// hardcode a size that will always be correct.
	//
	// The size request of a widget is the smallest size a widget can accept
	// while still functioning well and drawing itself correctly. However in
	// some strange cases a widget may be allocated less than its requested
	// size, and in many cases a widget may be allocated more space than it
	// requested.
	//
	// If the size request in a given direction is -1 (unset), then the
	// “natural” size request of the widget will be used instead.
	//
	// The size request set here does not include any margin from the Widget
	// properties margin-left, margin-right, margin-top, and margin-bottom, but
	// it does include pretty much all other padding or border properties set by
	// any subclass of Widget.
	SetSizeRequestWidget(width int, height int)
	// SetStateWidget: this function is for use in widget implementations. Sets
	// the state of a widget (insensitive, prelighted, etc.) Usually you should
	// set the state using wrapper functions such as gtk_widget_set_sensitive().
	//
	// Deprecated: since version 3.0.
	SetStateWidget(state StateType)
	// SetStateFlagsWidget: this function is for use in widget implementations.
	// Turns on flag values in the current widget state (insensitive,
	// prelighted, etc.).
	//
	// This function accepts the values GTK_STATE_FLAG_DIR_LTR and
	// GTK_STATE_FLAG_DIR_RTL but ignores them. If you want to set the widget's
	// direction, use gtk_widget_set_direction().
	//
	// It is worth mentioning that any other state than
	// GTK_STATE_FLAG_INSENSITIVE, will be propagated down to all non-internal
	// children if @widget is a Container, while GTK_STATE_FLAG_INSENSITIVE
	// itself will be propagated down to all Container children by different
	// means than turning on the state flag down the hierarchy, both
	// gtk_widget_get_state_flags() and gtk_widget_is_sensitive() will make use
	// of these.
	SetStateFlagsWidget(flags StateFlags, clear bool)
	// SetStyleWidget: used to set the Style for a widget (@widget->style).
	// Since GTK 3, this function does nothing, the passed in style is ignored.
	//
	// Deprecated: since version 3.0.
	SetStyleWidget(style Style)
	// SetSupportMultideviceWidget enables or disables multiple pointer
	// awareness. If this setting is true, @widget will start receiving
	// multiple, per device enter/leave events. Note that if custom Windows are
	// created in Widget::realize, gdk_window_set_support_multidevice() will
	// have to be called manually on them.
	SetSupportMultideviceWidget(supportMultidevice bool)
	// SetTooltipMarkupWidget sets @markup as the contents of the tooltip, which
	// is marked up with the [Pango text markup language][PangoMarkupFormat].
	//
	// This function will take care of setting Widget:has-tooltip to true and of
	// the default handler for the Widget::query-tooltip signal.
	//
	// See also the Widget:tooltip-markup property and gtk_tooltip_set_markup().
	SetTooltipMarkupWidget(markup string)
	// SetTooltipTextWidget sets @text as the contents of the tooltip. This
	// function will take care of setting Widget:has-tooltip to true and of the
	// default handler for the Widget::query-tooltip signal.
	//
	// See also the Widget:tooltip-text property and gtk_tooltip_set_text().
	SetTooltipTextWidget(text string)
	// SetTooltipWindowWidget replaces the default window used for displaying
	// tooltips with @custom_window. GTK+ will take care of showing and hiding
	// @custom_window at the right moment, to behave likewise as the default
	// tooltip window. If @custom_window is nil, the default tooltip window will
	// be used.
	SetTooltipWindowWidget(customWindow Window)
	// SetValignWidget sets the vertical alignment of @widget. See the
	// Widget:valign property.
	SetValignWidget(align Align)
	// SetVexpandWidget sets whether the widget would like any available extra
	// vertical space.
	//
	// See gtk_widget_set_hexpand() for more detail.
	SetVexpandWidget(expand bool)
	// SetVexpandSetWidget sets whether the vexpand flag (see
	// gtk_widget_get_vexpand()) will be used.
	//
	// See gtk_widget_set_hexpand_set() for more detail.
	SetVexpandSetWidget(set bool)
	// SetVisibleWidget sets the visibility state of @widget. Note that setting
	// this to true doesn’t mean the widget is actually viewable, see
	// gtk_widget_get_visible().
	//
	// This function simply calls gtk_widget_show() or gtk_widget_hide() but is
	// nicer to use when the visibility of the widget depends on some condition.
	SetVisibleWidget(visible bool)
	// SetVisualWidget sets the visual that should be used for by widget and its
	// children for creating Windows. The visual must be on the same Screen as
	// returned by gtk_widget_get_screen(), so handling the
	// Widget::screen-changed signal is necessary.
	//
	// Setting a new @visual will not cause @widget to recreate its windows, so
	// you should call this function before @widget is realized.
	SetVisualWidget(visual gdk.Visual)
	// SetWindowWidget sets a widget’s window. This function should only be used
	// in a widget’s Widget::realize implementation. The window passed is
	// usually either new window created with gdk_window_new(), or the window of
	// its parent widget as returned by gtk_widget_get_parent_window().
	//
	// Widgets must indicate whether they will create their own Window by
	// calling gtk_widget_set_has_window(). This is usually done in the widget’s
	// init() function.
	//
	// Note that this function does not add any reference to @window.
	SetWindowWidget(window gdk.Window)
	// ShapeCombineRegionWidget sets a shape for this widget’s GDK window. This
	// allows for transparent windows etc., see
	// gdk_window_shape_combine_region() for more information.
	ShapeCombineRegionWidget(region *cairo.Region)
	// ShowWidget flags a widget to be displayed. Any widget that isn’t shown
	// will not appear on the screen. If you want to show all the widgets in a
	// container, it’s easier to call gtk_widget_show_all() on the container,
	// instead of individually showing the widgets.
	//
	// Remember that you have to show the containers containing a widget, in
	// addition to the widget itself, before it will appear onscreen.
	//
	// When a toplevel container is shown, it is immediately realized and
	// mapped; other shown widgets are realized and mapped when their toplevel
	// container is realized and mapped.
	ShowWidget()
	// ShowAllWidget: recursively shows a widget, and any child widgets (if the
	// widget is a container).
	ShowAllWidget()
	// ShowNowWidget shows a widget. If the widget is an unmapped toplevel
	// widget (i.e. a Window that has not yet been shown), enter the main loop
	// and wait for the window to actually be mapped. Be careful; because the
	// main loop is running, anything can happen during this function.
	ShowNowWidget()
	// SizeRequestWidget: this function is typically used when implementing a
	// Container subclass. Obtains the preferred size of a widget. The container
	// uses this information to arrange its child widgets and decide what size
	// allocations to give them with gtk_widget_size_allocate().
	//
	// You can also call this function from an application, with some caveats.
	// Most notably, getting a size request requires the widget to be associated
	// with a screen, because font information may be needed. Multihead-aware
	// applications should keep this in mind.
	//
	// Also remember that the size request is not necessarily the size a widget
	// will actually be allocated.
	//
	// Deprecated: since version 3.0.
	SizeRequestWidget() Requisition
	// StyleAttachWidget: this function attaches the widget’s Style to the
	// widget's Window. It is a replacement for
	//
	//    widget->style = gtk_style_attach (widget->style, widget->window);
	//
	// and should only ever be called in a derived widget’s “realize”
	// implementation which does not chain up to its parent class' “realize”
	// implementation, because one of the parent classes (finally Widget) would
	// attach the style itself.
	//
	// Deprecated: since version 3.0.
	StyleAttachWidget()
	// StyleGetPropertyWidget gets the value of a style property of @widget.
	StyleGetPropertyWidget(propertyName string, value externglib.Value)
	// ThawChildNotifyWidget reverts the effect of a previous call to
	// gtk_widget_freeze_child_notify(). This causes all queued
	// Widget::child-notify signals on @widget to be emitted.
	ThawChildNotifyWidget()
	// TranslateCoordinatesWidget: translate coordinates relative to
	// @src_widget’s allocation to coordinates relative to @dest_widget’s
	// allocations. In order to perform this operation, both widgets must be
	// realized, and must share a common toplevel.
	TranslateCoordinatesWidget(destWidget Widget, srcX int, srcY int) (destX int, destY int, ok bool)
	// TriggerTooltipQueryWidget triggers a tooltip query on the display where
	// the toplevel of @widget is located. See
	// gtk_tooltip_trigger_tooltip_query() for more information.
	TriggerTooltipQueryWidget()
	// UnmapWidget: this function is only for use in widget implementations.
	// Causes a widget to be unmapped if it’s currently mapped.
	UnmapWidget()
	// UnparentWidget: this function is only for use in widget implementations.
	// Should be called by implementations of the remove method on Container, to
	// dissociate a child from the container.
	UnparentWidget()
	// UnrealizeWidget: this function is only useful in widget implementations.
	// Causes a widget to be unrealized (frees all GDK resources associated with
	// the widget, such as @widget->window).
	UnrealizeWidget()
	// UnregisterWindowWidget unregisters a Window from the widget that was
	// previously set up with gtk_widget_register_window(). You need to call
	// this when the window is no longer used by the widget, such as when you
	// destroy it.
	UnregisterWindowWidget(window gdk.Window)
	// UnsetStateFlagsWidget: this function is for use in widget
	// implementations. Turns off flag values for the current widget state
	// (insensitive, prelighted, etc.). See gtk_widget_set_state_flags().
	UnsetStateFlagsWidget(flags StateFlags)
}

// widget implements the Widget class.
type widget struct {
	gextras.Objector
}

// WrapWidget wraps a GObject to the right type. It is
// primarily used internally.
func WrapWidget(obj *externglib.Object) Widget {
	return widget{
		Objector: obj,
	}
}

func marshalWidget(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapWidget(obj), nil
}

func (w widget) ActivateWidget() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_activate(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) AddAcceleratorWidget(accelSignal string, accelGroup AccelGroup, accelKey uint, accelMods gdk.ModifierType, accelFlags AccelFlags) {
	var _arg0 *C.GtkWidget      // out
	var _arg1 *C.gchar          // out
	var _arg2 *C.GtkAccelGroup  // out
	var _arg3 C.guint           // out
	var _arg4 C.GdkModifierType // out
	var _arg5 C.GtkAccelFlags   // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.gchar)(C.CString(accelSignal))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.GtkAccelGroup)(unsafe.Pointer(accelGroup.Native()))
	_arg3 = C.guint(accelKey)
	_arg4 = C.GdkModifierType(accelMods)
	_arg5 = C.GtkAccelFlags(accelFlags)

	C.gtk_widget_add_accelerator(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
}

func (w widget) AddDeviceEventsWidget(device gdk.Device, events gdk.EventMask) {
	var _arg0 *C.GtkWidget   // out
	var _arg1 *C.GdkDevice   // out
	var _arg2 C.GdkEventMask // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GdkDevice)(unsafe.Pointer(device.Native()))
	_arg2 = C.GdkEventMask(events)

	C.gtk_widget_add_device_events(_arg0, _arg1, _arg2)
}

func (w widget) AddEventsWidget(events int) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gint       // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.gint(events)

	C.gtk_widget_add_events(_arg0, _arg1)
}

func (w widget) AddMnemonicLabelWidget(label Widget) {
	var _arg0 *C.GtkWidget // out
	var _arg1 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(label.Native()))

	C.gtk_widget_add_mnemonic_label(_arg0, _arg1)
}

func (w widget) CanActivateAccelWidget(signalId uint) bool {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.guint      // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.guint(signalId)

	_cret = C.gtk_widget_can_activate_accel(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) ChildFocusWidget(direction DirectionType) bool {
	var _arg0 *C.GtkWidget       // out
	var _arg1 C.GtkDirectionType // out
	var _cret C.gboolean         // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.GtkDirectionType(direction)

	_cret = C.gtk_widget_child_focus(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) ChildNotifyWidget(childProperty string) {
	var _arg0 *C.GtkWidget // out
	var _arg1 *C.gchar     // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.gchar)(C.CString(childProperty))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_widget_child_notify(_arg0, _arg1)
}

func (w widget) ClassPathWidget() (pathLength uint, path string, pathReversed string) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.guint      // in
	var _arg2 *C.gchar     // in
	var _arg3 *C.gchar     // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_class_path(_arg0, &_arg1, &_arg2, &_arg3)

	var _pathLength uint     // out
	var _path string         // out
	var _pathReversed string // out

	_pathLength = uint(_arg1)
	_path = C.GoString(_arg2)
	defer C.free(unsafe.Pointer(_arg2))
	_pathReversed = C.GoString(_arg3)
	defer C.free(unsafe.Pointer(_arg3))

	return _pathLength, _path, _pathReversed
}

func (w widget) ComputeExpandWidget(orientation Orientation) bool {
	var _arg0 *C.GtkWidget     // out
	var _arg1 C.GtkOrientation // out
	var _cret C.gboolean       // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.GtkOrientation(orientation)

	_cret = C.gtk_widget_compute_expand(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) CreatePangoContextWidget() pango.Context {
	var _arg0 *C.GtkWidget    // out
	var _cret *C.PangoContext // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_create_pango_context(_arg0)

	var _context pango.Context // out

	_context = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(pango.Context)

	return _context
}

func (w widget) CreatePangoLayoutWidget(text string) pango.Layout {
	var _arg0 *C.GtkWidget   // out
	var _arg1 *C.gchar       // out
	var _cret *C.PangoLayout // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.gchar)(C.CString(text))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_widget_create_pango_layout(_arg0, _arg1)

	var _layout pango.Layout // out

	_layout = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(pango.Layout)

	return _layout
}

func (w widget) DestroyWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_destroy(_arg0)
}

func (w widget) DeviceIsShadowedWidget(device gdk.Device) bool {
	var _arg0 *C.GtkWidget // out
	var _arg1 *C.GdkDevice // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GdkDevice)(unsafe.Pointer(device.Native()))

	_cret = C.gtk_widget_device_is_shadowed(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) DragCheckThresholdWidget(startX int, startY int, currentX int, currentY int) bool {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gint       // out
	var _arg2 C.gint       // out
	var _arg3 C.gint       // out
	var _arg4 C.gint       // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.gint(startX)
	_arg2 = C.gint(startY)
	_arg3 = C.gint(currentX)
	_arg4 = C.gint(currentY)

	_cret = C.gtk_drag_check_threshold(_arg0, _arg1, _arg2, _arg3, _arg4)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) DragDestAddImageTargetsWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_drag_dest_add_image_targets(_arg0)
}

func (w widget) DragDestAddTextTargetsWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_drag_dest_add_text_targets(_arg0)
}

func (w widget) DragDestAddURITargetsWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_drag_dest_add_uri_targets(_arg0)
}

func (w widget) DragDestGetTargetListWidget() *TargetList {
	var _arg0 *C.GtkWidget     // out
	var _cret *C.GtkTargetList // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_drag_dest_get_target_list(_arg0)

	var _targetList *TargetList // out

	_targetList = (*TargetList)(unsafe.Pointer(_cret))
	C.gtk_target_list_ref(_cret)

	return _targetList
}

func (w widget) DragDestGetTrackMotionWidget() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_drag_dest_get_track_motion(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) DragDestSetWidget(flags DestDefaults, targets []TargetEntry, actions gdk.DragAction) {
	var _arg0 *C.GtkWidget      // out
	var _arg1 C.GtkDestDefaults // out
	var _arg2 *C.GtkTargetEntry
	var _arg3 C.gint
	var _arg4 C.GdkDragAction // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.GtkDestDefaults(flags)
	_arg3 = C.gint(len(targets))
	_arg2 = (*C.GtkTargetEntry)(unsafe.Pointer(&targets[0]))
	_arg4 = C.GdkDragAction(actions)

	C.gtk_drag_dest_set(_arg0, _arg1, _arg2, _arg3, _arg4)
}

func (w widget) DragDestSetProxyWidget(proxyWindow gdk.Window, protocol gdk.DragProtocol, useCoordinates bool) {
	var _arg0 *C.GtkWidget      // out
	var _arg1 *C.GdkWindow      // out
	var _arg2 C.GdkDragProtocol // out
	var _arg3 C.gboolean        // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GdkWindow)(unsafe.Pointer(proxyWindow.Native()))
	_arg2 = C.GdkDragProtocol(protocol)
	if useCoordinates {
		_arg3 = C.TRUE
	}

	C.gtk_drag_dest_set_proxy(_arg0, _arg1, _arg2, _arg3)
}

func (w widget) DragDestSetTargetListWidget(targetList *TargetList) {
	var _arg0 *C.GtkWidget     // out
	var _arg1 *C.GtkTargetList // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GtkTargetList)(unsafe.Pointer(targetList))

	C.gtk_drag_dest_set_target_list(_arg0, _arg1)
}

func (w widget) DragDestSetTrackMotionWidget(trackMotion bool) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	if trackMotion {
		_arg1 = C.TRUE
	}

	C.gtk_drag_dest_set_track_motion(_arg0, _arg1)
}

func (w widget) DragDestUnsetWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_drag_dest_unset(_arg0)
}

func (w widget) DragHighlightWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_drag_highlight(_arg0)
}

func (w widget) DragSourceAddImageTargetsWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_drag_source_add_image_targets(_arg0)
}

func (w widget) DragSourceAddTextTargetsWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_drag_source_add_text_targets(_arg0)
}

func (w widget) DragSourceAddURITargetsWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_drag_source_add_uri_targets(_arg0)
}

func (w widget) DragSourceGetTargetListWidget() *TargetList {
	var _arg0 *C.GtkWidget     // out
	var _cret *C.GtkTargetList // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_drag_source_get_target_list(_arg0)

	var _targetList *TargetList // out

	_targetList = (*TargetList)(unsafe.Pointer(_cret))
	C.gtk_target_list_ref(_cret)

	return _targetList
}

func (w widget) DragSourceSetWidget(startButtonMask gdk.ModifierType, targets []TargetEntry, actions gdk.DragAction) {
	var _arg0 *C.GtkWidget      // out
	var _arg1 C.GdkModifierType // out
	var _arg2 *C.GtkTargetEntry
	var _arg3 C.gint
	var _arg4 C.GdkDragAction // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.GdkModifierType(startButtonMask)
	_arg3 = C.gint(len(targets))
	_arg2 = (*C.GtkTargetEntry)(unsafe.Pointer(&targets[0]))
	_arg4 = C.GdkDragAction(actions)

	C.gtk_drag_source_set(_arg0, _arg1, _arg2, _arg3, _arg4)
}

func (w widget) DragSourceSetIconNameWidget(iconName string) {
	var _arg0 *C.GtkWidget // out
	var _arg1 *C.gchar     // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.gchar)(C.CString(iconName))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_drag_source_set_icon_name(_arg0, _arg1)
}

func (w widget) DragSourceSetIconPixbufWidget(pixbuf gdkpixbuf.Pixbuf) {
	var _arg0 *C.GtkWidget // out
	var _arg1 *C.GdkPixbuf // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GdkPixbuf)(unsafe.Pointer(pixbuf.Native()))

	C.gtk_drag_source_set_icon_pixbuf(_arg0, _arg1)
}

func (w widget) DragSourceSetIconStockWidget(stockId string) {
	var _arg0 *C.GtkWidget // out
	var _arg1 *C.gchar     // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.gchar)(C.CString(stockId))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_drag_source_set_icon_stock(_arg0, _arg1)
}

func (w widget) DragSourceSetTargetListWidget(targetList *TargetList) {
	var _arg0 *C.GtkWidget     // out
	var _arg1 *C.GtkTargetList // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GtkTargetList)(unsafe.Pointer(targetList))

	C.gtk_drag_source_set_target_list(_arg0, _arg1)
}

func (w widget) DragSourceUnsetWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_drag_source_unset(_arg0)
}

func (w widget) DragUnhighlightWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_drag_unhighlight(_arg0)
}

func (w widget) DrawWidget(cr *cairo.Context) {
	var _arg0 *C.GtkWidget // out
	var _arg1 *C.cairo_t   // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.cairo_t)(unsafe.Pointer(cr))

	C.gtk_widget_draw(_arg0, _arg1)
}

func (w widget) EnsureStyleWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_ensure_style(_arg0)
}

func (w widget) ErrorBellWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_error_bell(_arg0)
}

func (w widget) FreezeChildNotifyWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_freeze_child_notify(_arg0)
}

func (w widget) Accessible() atk.Object {
	var _arg0 *C.GtkWidget // out
	var _cret *C.AtkObject // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_accessible(_arg0)

	var _object atk.Object // out

	_object = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(atk.Object)

	return _object
}

func (w widget) ActionGroup(prefix string) gio.ActionGroup {
	var _arg0 *C.GtkWidget    // out
	var _arg1 *C.gchar        // out
	var _cret *C.GActionGroup // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.gchar)(C.CString(prefix))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_widget_get_action_group(_arg0, _arg1)

	var _actionGroup gio.ActionGroup // out

	_actionGroup = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(gio.ActionGroup)

	return _actionGroup
}

func (w widget) AllocatedBaseline() int {
	var _arg0 *C.GtkWidget // out
	var _cret C.int        // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_allocated_baseline(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (w widget) AllocatedHeight() int {
	var _arg0 *C.GtkWidget // out
	var _cret C.int        // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_allocated_height(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (w widget) AllocatedWidth() int {
	var _arg0 *C.GtkWidget // out
	var _cret C.int        // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_allocated_width(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (w widget) Ancestor(widgetType externglib.Type) Widget {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.GType      // out
	var _cret *C.GtkWidget // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (C.GType)(widgetType)

	_cret = C.gtk_widget_get_ancestor(_arg0, _arg1)

	var _ret Widget // out

	_ret = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Widget)

	return _ret
}

func (w widget) AppPaintable() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_app_paintable(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) CanDefault() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_can_default(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) CanFocus() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_can_focus(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) ChildRequisition() Requisition {
	var _arg0 *C.GtkWidget     // out
	var _arg1 C.GtkRequisition // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_get_child_requisition(_arg0, &_arg1)

	var _requisition Requisition // out

	{
		var refTmpIn *C.GtkRequisition
		var refTmpOut *Requisition

		in0 := &_arg1
		refTmpIn = in0

		refTmpOut = (*Requisition)(unsafe.Pointer(refTmpIn))

		_requisition = *refTmpOut
	}

	return _requisition
}

func (w widget) ChildVisible() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_child_visible(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) CompositeName() string {
	var _arg0 *C.GtkWidget // out
	var _cret *C.gchar     // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_composite_name(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

func (w widget) DeviceEnabled(device gdk.Device) bool {
	var _arg0 *C.GtkWidget // out
	var _arg1 *C.GdkDevice // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GdkDevice)(unsafe.Pointer(device.Native()))

	_cret = C.gtk_widget_get_device_enabled(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) DeviceEvents(device gdk.Device) gdk.EventMask {
	var _arg0 *C.GtkWidget   // out
	var _arg1 *C.GdkDevice   // out
	var _cret C.GdkEventMask // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GdkDevice)(unsafe.Pointer(device.Native()))

	_cret = C.gtk_widget_get_device_events(_arg0, _arg1)

	var _eventMask gdk.EventMask // out

	_eventMask = gdk.EventMask(_cret)

	return _eventMask
}

func (w widget) Direction() TextDirection {
	var _arg0 *C.GtkWidget       // out
	var _cret C.GtkTextDirection // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_direction(_arg0)

	var _textDirection TextDirection // out

	_textDirection = TextDirection(_cret)

	return _textDirection
}

func (w widget) Display() gdk.Display {
	var _arg0 *C.GtkWidget  // out
	var _cret *C.GdkDisplay // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_display(_arg0)

	var _display gdk.Display // out

	_display = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(gdk.Display)

	return _display
}

func (w widget) DoubleBuffered() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_double_buffered(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) Events() int {
	var _arg0 *C.GtkWidget // out
	var _cret C.gint       // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_events(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (w widget) FocusOnClick() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_focus_on_click(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) FontMap() pango.FontMap {
	var _arg0 *C.GtkWidget    // out
	var _cret *C.PangoFontMap // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_font_map(_arg0)

	var _fontMap pango.FontMap // out

	_fontMap = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(pango.FontMap)

	return _fontMap
}

func (w widget) FontOptions() *cairo.FontOptions {
	var _arg0 *C.GtkWidget            // out
	var _cret *C.cairo_font_options_t // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_font_options(_arg0)

	var _fontOptions *cairo.FontOptions // out

	_fontOptions = (*cairo.FontOptions)(unsafe.Pointer(_cret))

	return _fontOptions
}

func (w widget) FrameClock() gdk.FrameClock {
	var _arg0 *C.GtkWidget     // out
	var _cret *C.GdkFrameClock // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_frame_clock(_arg0)

	var _frameClock gdk.FrameClock // out

	_frameClock = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(gdk.FrameClock)

	return _frameClock
}

func (w widget) Halign() Align {
	var _arg0 *C.GtkWidget // out
	var _cret C.GtkAlign   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_halign(_arg0)

	var _align Align // out

	_align = Align(_cret)

	return _align
}

func (w widget) HasTooltip() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_has_tooltip(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) HasWindow() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_has_window(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) Hexpand() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_hexpand(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) HexpandSet() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_hexpand_set(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) Mapped() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_mapped(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) MarginBottom() int {
	var _arg0 *C.GtkWidget // out
	var _cret C.gint       // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_margin_bottom(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (w widget) MarginEnd() int {
	var _arg0 *C.GtkWidget // out
	var _cret C.gint       // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_margin_end(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (w widget) MarginLeft() int {
	var _arg0 *C.GtkWidget // out
	var _cret C.gint       // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_margin_left(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (w widget) MarginRight() int {
	var _arg0 *C.GtkWidget // out
	var _cret C.gint       // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_margin_right(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (w widget) MarginStart() int {
	var _arg0 *C.GtkWidget // out
	var _cret C.gint       // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_margin_start(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (w widget) MarginTop() int {
	var _arg0 *C.GtkWidget // out
	var _cret C.gint       // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_margin_top(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (w widget) ModifierMask(intent gdk.ModifierIntent) gdk.ModifierType {
	var _arg0 *C.GtkWidget        // out
	var _arg1 C.GdkModifierIntent // out
	var _cret C.GdkModifierType   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.GdkModifierIntent(intent)

	_cret = C.gtk_widget_get_modifier_mask(_arg0, _arg1)

	var _modifierType gdk.ModifierType // out

	_modifierType = gdk.ModifierType(_cret)

	return _modifierType
}

func (w widget) ModifierStyle() RCStyle {
	var _arg0 *C.GtkWidget  // out
	var _cret *C.GtkRcStyle // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_modifier_style(_arg0)

	var _rcStyle RCStyle // out

	_rcStyle = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(RCStyle)

	return _rcStyle
}

func (w widget) Name() string {
	var _arg0 *C.GtkWidget // out
	var _cret *C.gchar     // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_name(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

func (w widget) NoShowAll() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_no_show_all(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) Opacity() float64 {
	var _arg0 *C.GtkWidget // out
	var _cret C.double     // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_opacity(_arg0)

	var _gdouble float64 // out

	_gdouble = float64(_cret)

	return _gdouble
}

func (w widget) PangoContext() pango.Context {
	var _arg0 *C.GtkWidget    // out
	var _cret *C.PangoContext // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_pango_context(_arg0)

	var _context pango.Context // out

	_context = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(pango.Context)

	return _context
}

func (w widget) Parent() Widget {
	var _arg0 *C.GtkWidget // out
	var _cret *C.GtkWidget // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_parent(_arg0)

	var _ret Widget // out

	_ret = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Widget)

	return _ret
}

func (w widget) ParentWindow() gdk.Window {
	var _arg0 *C.GtkWidget // out
	var _cret *C.GdkWindow // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_parent_window(_arg0)

	var _window gdk.Window // out

	_window = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(gdk.Window)

	return _window
}

func (w widget) GetPath() *WidgetPath {
	var _arg0 *C.GtkWidget     // out
	var _cret *C.GtkWidgetPath // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_path(_arg0)

	var _widgetPath *WidgetPath // out

	_widgetPath = (*WidgetPath)(unsafe.Pointer(_cret))
	C.gtk_widget_path_ref(_cret)

	return _widgetPath
}

func (w widget) Pointer() (x int, y int) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gint       // in
	var _arg2 C.gint       // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_get_pointer(_arg0, &_arg1, &_arg2)

	var _x int // out
	var _y int // out

	_x = int(_arg1)
	_y = int(_arg2)

	return _x, _y
}

func (w widget) PreferredHeight() (minimumHeight int, naturalHeight int) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gint       // in
	var _arg2 C.gint       // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_get_preferred_height(_arg0, &_arg1, &_arg2)

	var _minimumHeight int // out
	var _naturalHeight int // out

	_minimumHeight = int(_arg1)
	_naturalHeight = int(_arg2)

	return _minimumHeight, _naturalHeight
}

func (w widget) PreferredHeightAndBaselineForWidth(width int) (minimumHeight int, naturalHeight int, minimumBaseline int, naturalBaseline int) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gint       // out
	var _arg2 C.gint       // in
	var _arg3 C.gint       // in
	var _arg4 C.gint       // in
	var _arg5 C.gint       // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.gint(width)

	C.gtk_widget_get_preferred_height_and_baseline_for_width(_arg0, _arg1, &_arg2, &_arg3, &_arg4, &_arg5)

	var _minimumHeight int   // out
	var _naturalHeight int   // out
	var _minimumBaseline int // out
	var _naturalBaseline int // out

	_minimumHeight = int(_arg2)
	_naturalHeight = int(_arg3)
	_minimumBaseline = int(_arg4)
	_naturalBaseline = int(_arg5)

	return _minimumHeight, _naturalHeight, _minimumBaseline, _naturalBaseline
}

func (w widget) PreferredHeightForWidth(width int) (minimumHeight int, naturalHeight int) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gint       // out
	var _arg2 C.gint       // in
	var _arg3 C.gint       // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.gint(width)

	C.gtk_widget_get_preferred_height_for_width(_arg0, _arg1, &_arg2, &_arg3)

	var _minimumHeight int // out
	var _naturalHeight int // out

	_minimumHeight = int(_arg2)
	_naturalHeight = int(_arg3)

	return _minimumHeight, _naturalHeight
}

func (w widget) PreferredSize() (minimumSize Requisition, naturalSize Requisition) {
	var _arg0 *C.GtkWidget     // out
	var _arg1 C.GtkRequisition // in
	var _arg2 C.GtkRequisition // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_get_preferred_size(_arg0, &_arg1, &_arg2)

	var _minimumSize Requisition // out
	var _naturalSize Requisition // out

	{
		var refTmpIn *C.GtkRequisition
		var refTmpOut *Requisition

		in0 := &_arg1
		refTmpIn = in0

		refTmpOut = (*Requisition)(unsafe.Pointer(refTmpIn))

		_minimumSize = *refTmpOut
	}
	{
		var refTmpIn *C.GtkRequisition
		var refTmpOut *Requisition

		in0 := &_arg2
		refTmpIn = in0

		refTmpOut = (*Requisition)(unsafe.Pointer(refTmpIn))

		_naturalSize = *refTmpOut
	}

	return _minimumSize, _naturalSize
}

func (w widget) PreferredWidth() (minimumWidth int, naturalWidth int) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gint       // in
	var _arg2 C.gint       // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_get_preferred_width(_arg0, &_arg1, &_arg2)

	var _minimumWidth int // out
	var _naturalWidth int // out

	_minimumWidth = int(_arg1)
	_naturalWidth = int(_arg2)

	return _minimumWidth, _naturalWidth
}

func (w widget) PreferredWidthForHeight(height int) (minimumWidth int, naturalWidth int) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gint       // out
	var _arg2 C.gint       // in
	var _arg3 C.gint       // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.gint(height)

	C.gtk_widget_get_preferred_width_for_height(_arg0, _arg1, &_arg2, &_arg3)

	var _minimumWidth int // out
	var _naturalWidth int // out

	_minimumWidth = int(_arg2)
	_naturalWidth = int(_arg3)

	return _minimumWidth, _naturalWidth
}

func (w widget) Realized() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_realized(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) ReceivesDefault() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_receives_default(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) RequestMode() SizeRequestMode {
	var _arg0 *C.GtkWidget         // out
	var _cret C.GtkSizeRequestMode // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_request_mode(_arg0)

	var _sizeRequestMode SizeRequestMode // out

	_sizeRequestMode = SizeRequestMode(_cret)

	return _sizeRequestMode
}

func (w widget) Requisition() Requisition {
	var _arg0 *C.GtkWidget     // out
	var _arg1 C.GtkRequisition // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_get_requisition(_arg0, &_arg1)

	var _requisition Requisition // out

	{
		var refTmpIn *C.GtkRequisition
		var refTmpOut *Requisition

		in0 := &_arg1
		refTmpIn = in0

		refTmpOut = (*Requisition)(unsafe.Pointer(refTmpIn))

		_requisition = *refTmpOut
	}

	return _requisition
}

func (w widget) RootWindow() gdk.Window {
	var _arg0 *C.GtkWidget // out
	var _cret *C.GdkWindow // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_root_window(_arg0)

	var _window gdk.Window // out

	_window = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(gdk.Window)

	return _window
}

func (w widget) ScaleFactor() int {
	var _arg0 *C.GtkWidget // out
	var _cret C.gint       // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_scale_factor(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (w widget) Screen() gdk.Screen {
	var _arg0 *C.GtkWidget // out
	var _cret *C.GdkScreen // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_screen(_arg0)

	var _screen gdk.Screen // out

	_screen = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(gdk.Screen)

	return _screen
}

func (w widget) Sensitive() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_sensitive(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) Settings() Settings {
	var _arg0 *C.GtkWidget   // out
	var _cret *C.GtkSettings // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_settings(_arg0)

	var _settings Settings // out

	_settings = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Settings)

	return _settings
}

func (w widget) GetSizeRequest() (width int, height int) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gint       // in
	var _arg2 C.gint       // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_get_size_request(_arg0, &_arg1, &_arg2)

	var _width int  // out
	var _height int // out

	_width = int(_arg1)
	_height = int(_arg2)

	return _width, _height
}

func (w widget) State() StateType {
	var _arg0 *C.GtkWidget   // out
	var _cret C.GtkStateType // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_state(_arg0)

	var _stateType StateType // out

	_stateType = StateType(_cret)

	return _stateType
}

func (w widget) StateFlags() StateFlags {
	var _arg0 *C.GtkWidget    // out
	var _cret C.GtkStateFlags // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_state_flags(_arg0)

	var _stateFlags StateFlags // out

	_stateFlags = StateFlags(_cret)

	return _stateFlags
}

func (w widget) Style() Style {
	var _arg0 *C.GtkWidget // out
	var _cret *C.GtkStyle  // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_style(_arg0)

	var _style Style // out

	_style = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Style)

	return _style
}

func (w widget) StyleContext() StyleContext {
	var _arg0 *C.GtkWidget       // out
	var _cret *C.GtkStyleContext // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_style_context(_arg0)

	var _styleContext StyleContext // out

	_styleContext = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(StyleContext)

	return _styleContext
}

func (w widget) SupportMultidevice() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_support_multidevice(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) TemplateChild(widgetType externglib.Type, name string) gextras.Objector {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.GType      // out
	var _arg2 *C.gchar     // out
	var _cret *C.GObject   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (C.GType)(widgetType)
	_arg2 = (*C.gchar)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.gtk_widget_get_template_child(_arg0, _arg1, _arg2)

	var _object gextras.Objector // out

	_object = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(gextras.Objector)

	return _object
}

func (w widget) TooltipMarkup() string {
	var _arg0 *C.GtkWidget // out
	var _cret *C.gchar     // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_tooltip_markup(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

func (w widget) TooltipText() string {
	var _arg0 *C.GtkWidget // out
	var _cret *C.gchar     // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_tooltip_text(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

func (w widget) TooltipWindow() Window {
	var _arg0 *C.GtkWidget // out
	var _cret *C.GtkWindow // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_tooltip_window(_arg0)

	var _window Window // out

	_window = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Window)

	return _window
}

func (w widget) Toplevel() Widget {
	var _arg0 *C.GtkWidget // out
	var _cret *C.GtkWidget // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_toplevel(_arg0)

	var _ret Widget // out

	_ret = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Widget)

	return _ret
}

func (w widget) Valign() Align {
	var _arg0 *C.GtkWidget // out
	var _cret C.GtkAlign   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_valign(_arg0)

	var _align Align // out

	_align = Align(_cret)

	return _align
}

func (w widget) ValignWithBaseline() Align {
	var _arg0 *C.GtkWidget // out
	var _cret C.GtkAlign   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_valign_with_baseline(_arg0)

	var _align Align // out

	_align = Align(_cret)

	return _align
}

func (w widget) Vexpand() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_vexpand(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) VexpandSet() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_vexpand_set(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) Visible() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_visible(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) Visual() gdk.Visual {
	var _arg0 *C.GtkWidget // out
	var _cret *C.GdkVisual // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_visual(_arg0)

	var _visual gdk.Visual // out

	_visual = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(gdk.Visual)

	return _visual
}

func (w widget) Window() gdk.Window {
	var _arg0 *C.GtkWidget // out
	var _cret *C.GdkWindow // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_get_window(_arg0)

	var _window gdk.Window // out

	_window = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(gdk.Window)

	return _window
}

func (w widget) GrabAddWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_grab_add(_arg0)
}

func (w widget) GrabDefaultWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_grab_default(_arg0)
}

func (w widget) GrabFocusWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_grab_focus(_arg0)
}

func (w widget) GrabRemoveWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_grab_remove(_arg0)
}

func (w widget) HasDefaultWidget() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_has_default(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) HasFocusWidget() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_has_focus(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) HasGrabWidget() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_has_grab(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) HasRCStyleWidget() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_has_rc_style(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) HasScreenWidget() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_has_screen(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) HasVisibleFocusWidget() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_has_visible_focus(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) HideWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_hide(_arg0)
}

func (w widget) HideOnDeleteWidget() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_hide_on_delete(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) InDestructionWidget() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_in_destruction(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) InitTemplateWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_init_template(_arg0)
}

func (w widget) InputShapeCombineRegionWidget(region *cairo.Region) {
	var _arg0 *C.GtkWidget      // out
	var _arg1 *C.cairo_region_t // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.cairo_region_t)(unsafe.Pointer(region))

	C.gtk_widget_input_shape_combine_region(_arg0, _arg1)
}

func (w widget) InsertActionGroupWidget(name string, group gio.ActionGroup) {
	var _arg0 *C.GtkWidget    // out
	var _arg1 *C.gchar        // out
	var _arg2 *C.GActionGroup // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.gchar)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.GActionGroup)(unsafe.Pointer(group.Native()))

	C.gtk_widget_insert_action_group(_arg0, _arg1, _arg2)
}

func (w widget) IntersectWidget(area *gdk.Rectangle) (gdk.Rectangle, bool) {
	var _arg0 *C.GtkWidget    // out
	var _arg1 *C.GdkRectangle // out
	var _arg2 C.GdkRectangle  // in
	var _cret C.gboolean      // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GdkRectangle)(unsafe.Pointer(area))

	_cret = C.gtk_widget_intersect(_arg0, _arg1, &_arg2)

	var _intersection gdk.Rectangle // out
	var _ok bool                    // out

	{
		var refTmpIn *C.GdkRectangle
		var refTmpOut *gdk.Rectangle

		in0 := &_arg2
		refTmpIn = in0

		refTmpOut = (*gdk.Rectangle)(unsafe.Pointer(refTmpIn))

		_intersection = *refTmpOut
	}
	if _cret != 0 {
		_ok = true
	}

	return _intersection, _ok
}

func (w widget) IsAncestorWidget(ancestor Widget) bool {
	var _arg0 *C.GtkWidget // out
	var _arg1 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(ancestor.Native()))

	_cret = C.gtk_widget_is_ancestor(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) IsCompositedWidget() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_is_composited(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) IsDrawableWidget() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_is_drawable(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) IsFocusWidget() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_is_focus(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) IsSensitiveWidget() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_is_sensitive(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) IsToplevelWidget() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_is_toplevel(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) IsVisibleWidget() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_is_visible(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) KeynavFailedWidget(direction DirectionType) bool {
	var _arg0 *C.GtkWidget       // out
	var _arg1 C.GtkDirectionType // out
	var _cret C.gboolean         // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.GtkDirectionType(direction)

	_cret = C.gtk_widget_keynav_failed(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) ListActionPrefixesWidget() []string {
	var _arg0 *C.GtkWidget // out
	var _cret **C.gchar

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	_cret = C.gtk_widget_list_action_prefixes(_arg0)

	var _utf8s []string

	{
		var i int
		var z *C.gchar
		for p := _cret; *p != z; p = &unsafe.Slice(p, i+1)[i] {
			i++
		}

		src := unsafe.Slice(_cret, i)
		_utf8s = make([]string, i)
		for i := range src {
			_utf8s[i] = C.GoString(src[i])
		}
	}

	return _utf8s
}

func (w widget) MapWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_map(_arg0)
}

func (w widget) MnemonicActivateWidget(groupCycling bool) bool {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gboolean   // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	if groupCycling {
		_arg1 = C.TRUE
	}

	_cret = C.gtk_widget_mnemonic_activate(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) ModifyBaseWidget(state StateType, color *gdk.Color) {
	var _arg0 *C.GtkWidget   // out
	var _arg1 C.GtkStateType // out
	var _arg2 *C.GdkColor    // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.GtkStateType(state)
	_arg2 = (*C.GdkColor)(unsafe.Pointer(color))

	C.gtk_widget_modify_base(_arg0, _arg1, _arg2)
}

func (w widget) ModifyBgWidget(state StateType, color *gdk.Color) {
	var _arg0 *C.GtkWidget   // out
	var _arg1 C.GtkStateType // out
	var _arg2 *C.GdkColor    // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.GtkStateType(state)
	_arg2 = (*C.GdkColor)(unsafe.Pointer(color))

	C.gtk_widget_modify_bg(_arg0, _arg1, _arg2)
}

func (w widget) ModifyCursorWidget(primary *gdk.Color, secondary *gdk.Color) {
	var _arg0 *C.GtkWidget // out
	var _arg1 *C.GdkColor  // out
	var _arg2 *C.GdkColor  // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GdkColor)(unsafe.Pointer(primary))
	_arg2 = (*C.GdkColor)(unsafe.Pointer(secondary))

	C.gtk_widget_modify_cursor(_arg0, _arg1, _arg2)
}

func (w widget) ModifyFgWidget(state StateType, color *gdk.Color) {
	var _arg0 *C.GtkWidget   // out
	var _arg1 C.GtkStateType // out
	var _arg2 *C.GdkColor    // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.GtkStateType(state)
	_arg2 = (*C.GdkColor)(unsafe.Pointer(color))

	C.gtk_widget_modify_fg(_arg0, _arg1, _arg2)
}

func (w widget) ModifyFontWidget(fontDesc *pango.FontDescription) {
	var _arg0 *C.GtkWidget            // out
	var _arg1 *C.PangoFontDescription // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.PangoFontDescription)(unsafe.Pointer(fontDesc))

	C.gtk_widget_modify_font(_arg0, _arg1)
}

func (w widget) ModifyStyleWidget(style RCStyle) {
	var _arg0 *C.GtkWidget  // out
	var _arg1 *C.GtkRcStyle // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GtkRcStyle)(unsafe.Pointer(style.Native()))

	C.gtk_widget_modify_style(_arg0, _arg1)
}

func (w widget) ModifyTextWidget(state StateType, color *gdk.Color) {
	var _arg0 *C.GtkWidget   // out
	var _arg1 C.GtkStateType // out
	var _arg2 *C.GdkColor    // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.GtkStateType(state)
	_arg2 = (*C.GdkColor)(unsafe.Pointer(color))

	C.gtk_widget_modify_text(_arg0, _arg1, _arg2)
}

func (w widget) OverrideBackgroundColorWidget(state StateFlags, color *gdk.RGBA) {
	var _arg0 *C.GtkWidget    // out
	var _arg1 C.GtkStateFlags // out
	var _arg2 *C.GdkRGBA      // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.GtkStateFlags(state)
	_arg2 = (*C.GdkRGBA)(unsafe.Pointer(color))

	C.gtk_widget_override_background_color(_arg0, _arg1, _arg2)
}

func (w widget) OverrideColorWidget(state StateFlags, color *gdk.RGBA) {
	var _arg0 *C.GtkWidget    // out
	var _arg1 C.GtkStateFlags // out
	var _arg2 *C.GdkRGBA      // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.GtkStateFlags(state)
	_arg2 = (*C.GdkRGBA)(unsafe.Pointer(color))

	C.gtk_widget_override_color(_arg0, _arg1, _arg2)
}

func (w widget) OverrideCursorWidget(cursor *gdk.RGBA, secondaryCursor *gdk.RGBA) {
	var _arg0 *C.GtkWidget // out
	var _arg1 *C.GdkRGBA   // out
	var _arg2 *C.GdkRGBA   // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GdkRGBA)(unsafe.Pointer(cursor))
	_arg2 = (*C.GdkRGBA)(unsafe.Pointer(secondaryCursor))

	C.gtk_widget_override_cursor(_arg0, _arg1, _arg2)
}

func (w widget) OverrideFontWidget(fontDesc *pango.FontDescription) {
	var _arg0 *C.GtkWidget            // out
	var _arg1 *C.PangoFontDescription // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.PangoFontDescription)(unsafe.Pointer(fontDesc))

	C.gtk_widget_override_font(_arg0, _arg1)
}

func (w widget) OverrideSymbolicColorWidget(name string, color *gdk.RGBA) {
	var _arg0 *C.GtkWidget // out
	var _arg1 *C.gchar     // out
	var _arg2 *C.GdkRGBA   // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.gchar)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.GdkRGBA)(unsafe.Pointer(color))

	C.gtk_widget_override_symbolic_color(_arg0, _arg1, _arg2)
}

func (w widget) PathWidget() (pathLength uint, path string, pathReversed string) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.guint      // in
	var _arg2 *C.gchar     // in
	var _arg3 *C.gchar     // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_path(_arg0, &_arg1, &_arg2, &_arg3)

	var _pathLength uint     // out
	var _path string         // out
	var _pathReversed string // out

	_pathLength = uint(_arg1)
	_path = C.GoString(_arg2)
	defer C.free(unsafe.Pointer(_arg2))
	_pathReversed = C.GoString(_arg3)
	defer C.free(unsafe.Pointer(_arg3))

	return _pathLength, _path, _pathReversed
}

func (w widget) QueueAllocateWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_queue_allocate(_arg0)
}

func (w widget) QueueComputeExpandWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_queue_compute_expand(_arg0)
}

func (w widget) QueueDrawWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_queue_draw(_arg0)
}

func (w widget) QueueDrawAreaWidget(x int, y int, width int, height int) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gint       // out
	var _arg2 C.gint       // out
	var _arg3 C.gint       // out
	var _arg4 C.gint       // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.gint(x)
	_arg2 = C.gint(y)
	_arg3 = C.gint(width)
	_arg4 = C.gint(height)

	C.gtk_widget_queue_draw_area(_arg0, _arg1, _arg2, _arg3, _arg4)
}

func (w widget) QueueDrawRegionWidget(region *cairo.Region) {
	var _arg0 *C.GtkWidget      // out
	var _arg1 *C.cairo_region_t // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.cairo_region_t)(unsafe.Pointer(region))

	C.gtk_widget_queue_draw_region(_arg0, _arg1)
}

func (w widget) QueueResizeWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_queue_resize(_arg0)
}

func (w widget) QueueResizeNoRedrawWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_queue_resize_no_redraw(_arg0)
}

func (w widget) RealizeWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_realize(_arg0)
}

func (w widget) RegionIntersectWidget(region *cairo.Region) *cairo.Region {
	var _arg0 *C.GtkWidget      // out
	var _arg1 *C.cairo_region_t // out
	var _cret *C.cairo_region_t // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.cairo_region_t)(unsafe.Pointer(region))

	_cret = C.gtk_widget_region_intersect(_arg0, _arg1)

	var _ret *cairo.Region // out

	_ret = (*cairo.Region)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(_ret, func(v *cairo.Region) {
		C.free(unsafe.Pointer(v))
	})

	return _ret
}

func (w widget) RegisterWindowWidget(window gdk.Window) {
	var _arg0 *C.GtkWidget // out
	var _arg1 *C.GdkWindow // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GdkWindow)(unsafe.Pointer(window.Native()))

	C.gtk_widget_register_window(_arg0, _arg1)
}

func (w widget) RemoveAcceleratorWidget(accelGroup AccelGroup, accelKey uint, accelMods gdk.ModifierType) bool {
	var _arg0 *C.GtkWidget      // out
	var _arg1 *C.GtkAccelGroup  // out
	var _arg2 C.guint           // out
	var _arg3 C.GdkModifierType // out
	var _cret C.gboolean        // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GtkAccelGroup)(unsafe.Pointer(accelGroup.Native()))
	_arg2 = C.guint(accelKey)
	_arg3 = C.GdkModifierType(accelMods)

	_cret = C.gtk_widget_remove_accelerator(_arg0, _arg1, _arg2, _arg3)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (w widget) RemoveMnemonicLabelWidget(label Widget) {
	var _arg0 *C.GtkWidget // out
	var _arg1 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(label.Native()))

	C.gtk_widget_remove_mnemonic_label(_arg0, _arg1)
}

func (w widget) RemoveTickCallbackWidget(id uint) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.guint      // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.guint(id)

	C.gtk_widget_remove_tick_callback(_arg0, _arg1)
}

func (w widget) RenderIconWidget(stockId string, size int, detail string) gdkpixbuf.Pixbuf {
	var _arg0 *C.GtkWidget  // out
	var _arg1 *C.gchar      // out
	var _arg2 C.GtkIconSize // out
	var _arg3 *C.gchar      // out
	var _cret *C.GdkPixbuf  // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.gchar)(C.CString(stockId))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.GtkIconSize(size)
	_arg3 = (*C.gchar)(C.CString(detail))
	defer C.free(unsafe.Pointer(_arg3))

	_cret = C.gtk_widget_render_icon(_arg0, _arg1, _arg2, _arg3)

	var _pixbuf gdkpixbuf.Pixbuf // out

	_pixbuf = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(gdkpixbuf.Pixbuf)

	return _pixbuf
}

func (w widget) RenderIconPixbufWidget(stockId string, size int) gdkpixbuf.Pixbuf {
	var _arg0 *C.GtkWidget  // out
	var _arg1 *C.gchar      // out
	var _arg2 C.GtkIconSize // out
	var _cret *C.GdkPixbuf  // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.gchar)(C.CString(stockId))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.GtkIconSize(size)

	_cret = C.gtk_widget_render_icon_pixbuf(_arg0, _arg1, _arg2)

	var _pixbuf gdkpixbuf.Pixbuf // out

	_pixbuf = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(gdkpixbuf.Pixbuf)

	return _pixbuf
}

func (w widget) ReparentWidget(newParent Widget) {
	var _arg0 *C.GtkWidget // out
	var _arg1 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(newParent.Native()))

	C.gtk_widget_reparent(_arg0, _arg1)
}

func (w widget) ResetRCStylesWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_reset_rc_styles(_arg0)
}

func (w widget) ResetStyleWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_reset_style(_arg0)
}

func (w widget) SetAccelPathWidget(accelPath string, accelGroup AccelGroup) {
	var _arg0 *C.GtkWidget     // out
	var _arg1 *C.gchar         // out
	var _arg2 *C.GtkAccelGroup // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.gchar)(C.CString(accelPath))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.GtkAccelGroup)(unsafe.Pointer(accelGroup.Native()))

	C.gtk_widget_set_accel_path(_arg0, _arg1, _arg2)
}

func (w widget) SetAppPaintableWidget(appPaintable bool) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	if appPaintable {
		_arg1 = C.TRUE
	}

	C.gtk_widget_set_app_paintable(_arg0, _arg1)
}

func (w widget) SetCanDefaultWidget(canDefault bool) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	if canDefault {
		_arg1 = C.TRUE
	}

	C.gtk_widget_set_can_default(_arg0, _arg1)
}

func (w widget) SetCanFocusWidget(canFocus bool) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	if canFocus {
		_arg1 = C.TRUE
	}

	C.gtk_widget_set_can_focus(_arg0, _arg1)
}

func (w widget) SetChildVisibleWidget(isVisible bool) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	if isVisible {
		_arg1 = C.TRUE
	}

	C.gtk_widget_set_child_visible(_arg0, _arg1)
}

func (w widget) SetCompositeNameWidget(name string) {
	var _arg0 *C.GtkWidget // out
	var _arg1 *C.gchar     // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.gchar)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_widget_set_composite_name(_arg0, _arg1)
}

func (w widget) SetDeviceEnabledWidget(device gdk.Device, enabled bool) {
	var _arg0 *C.GtkWidget // out
	var _arg1 *C.GdkDevice // out
	var _arg2 C.gboolean   // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GdkDevice)(unsafe.Pointer(device.Native()))
	if enabled {
		_arg2 = C.TRUE
	}

	C.gtk_widget_set_device_enabled(_arg0, _arg1, _arg2)
}

func (w widget) SetDeviceEventsWidget(device gdk.Device, events gdk.EventMask) {
	var _arg0 *C.GtkWidget   // out
	var _arg1 *C.GdkDevice   // out
	var _arg2 C.GdkEventMask // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GdkDevice)(unsafe.Pointer(device.Native()))
	_arg2 = C.GdkEventMask(events)

	C.gtk_widget_set_device_events(_arg0, _arg1, _arg2)
}

func (w widget) SetDirectionWidget(dir TextDirection) {
	var _arg0 *C.GtkWidget       // out
	var _arg1 C.GtkTextDirection // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.GtkTextDirection(dir)

	C.gtk_widget_set_direction(_arg0, _arg1)
}

func (w widget) SetDoubleBufferedWidget(doubleBuffered bool) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	if doubleBuffered {
		_arg1 = C.TRUE
	}

	C.gtk_widget_set_double_buffered(_arg0, _arg1)
}

func (w widget) SetEventsWidget(events int) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gint       // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.gint(events)

	C.gtk_widget_set_events(_arg0, _arg1)
}

func (w widget) SetFocusOnClickWidget(focusOnClick bool) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	if focusOnClick {
		_arg1 = C.TRUE
	}

	C.gtk_widget_set_focus_on_click(_arg0, _arg1)
}

func (w widget) SetFontMapWidget(fontMap pango.FontMap) {
	var _arg0 *C.GtkWidget    // out
	var _arg1 *C.PangoFontMap // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.PangoFontMap)(unsafe.Pointer(fontMap.Native()))

	C.gtk_widget_set_font_map(_arg0, _arg1)
}

func (w widget) SetFontOptionsWidget(options *cairo.FontOptions) {
	var _arg0 *C.GtkWidget            // out
	var _arg1 *C.cairo_font_options_t // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.cairo_font_options_t)(unsafe.Pointer(options))

	C.gtk_widget_set_font_options(_arg0, _arg1)
}

func (w widget) SetHalignWidget(align Align) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.GtkAlign   // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.GtkAlign(align)

	C.gtk_widget_set_halign(_arg0, _arg1)
}

func (w widget) SetHasTooltipWidget(hasTooltip bool) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	if hasTooltip {
		_arg1 = C.TRUE
	}

	C.gtk_widget_set_has_tooltip(_arg0, _arg1)
}

func (w widget) SetHasWindowWidget(hasWindow bool) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	if hasWindow {
		_arg1 = C.TRUE
	}

	C.gtk_widget_set_has_window(_arg0, _arg1)
}

func (w widget) SetHexpandWidget(expand bool) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	if expand {
		_arg1 = C.TRUE
	}

	C.gtk_widget_set_hexpand(_arg0, _arg1)
}

func (w widget) SetHexpandSetWidget(set bool) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	if set {
		_arg1 = C.TRUE
	}

	C.gtk_widget_set_hexpand_set(_arg0, _arg1)
}

func (w widget) SetMappedWidget(mapped bool) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	if mapped {
		_arg1 = C.TRUE
	}

	C.gtk_widget_set_mapped(_arg0, _arg1)
}

func (w widget) SetMarginBottomWidget(margin int) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gint       // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.gint(margin)

	C.gtk_widget_set_margin_bottom(_arg0, _arg1)
}

func (w widget) SetMarginEndWidget(margin int) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gint       // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.gint(margin)

	C.gtk_widget_set_margin_end(_arg0, _arg1)
}

func (w widget) SetMarginLeftWidget(margin int) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gint       // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.gint(margin)

	C.gtk_widget_set_margin_left(_arg0, _arg1)
}

func (w widget) SetMarginRightWidget(margin int) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gint       // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.gint(margin)

	C.gtk_widget_set_margin_right(_arg0, _arg1)
}

func (w widget) SetMarginStartWidget(margin int) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gint       // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.gint(margin)

	C.gtk_widget_set_margin_start(_arg0, _arg1)
}

func (w widget) SetMarginTopWidget(margin int) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gint       // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.gint(margin)

	C.gtk_widget_set_margin_top(_arg0, _arg1)
}

func (w widget) SetNameWidget(name string) {
	var _arg0 *C.GtkWidget // out
	var _arg1 *C.gchar     // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.gchar)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_widget_set_name(_arg0, _arg1)
}

func (w widget) SetNoShowAllWidget(noShowAll bool) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	if noShowAll {
		_arg1 = C.TRUE
	}

	C.gtk_widget_set_no_show_all(_arg0, _arg1)
}

func (w widget) SetOpacityWidget(opacity float64) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.double     // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.double(opacity)

	C.gtk_widget_set_opacity(_arg0, _arg1)
}

func (w widget) SetParentWidget(parent Widget) {
	var _arg0 *C.GtkWidget // out
	var _arg1 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(parent.Native()))

	C.gtk_widget_set_parent(_arg0, _arg1)
}

func (w widget) SetParentWindowWidget(parentWindow gdk.Window) {
	var _arg0 *C.GtkWidget // out
	var _arg1 *C.GdkWindow // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GdkWindow)(unsafe.Pointer(parentWindow.Native()))

	C.gtk_widget_set_parent_window(_arg0, _arg1)
}

func (w widget) SetRealizedWidget(realized bool) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	if realized {
		_arg1 = C.TRUE
	}

	C.gtk_widget_set_realized(_arg0, _arg1)
}

func (w widget) SetReceivesDefaultWidget(receivesDefault bool) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	if receivesDefault {
		_arg1 = C.TRUE
	}

	C.gtk_widget_set_receives_default(_arg0, _arg1)
}

func (w widget) SetRedrawOnAllocateWidget(redrawOnAllocate bool) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	if redrawOnAllocate {
		_arg1 = C.TRUE
	}

	C.gtk_widget_set_redraw_on_allocate(_arg0, _arg1)
}

func (w widget) SetSensitiveWidget(sensitive bool) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	if sensitive {
		_arg1 = C.TRUE
	}

	C.gtk_widget_set_sensitive(_arg0, _arg1)
}

func (w widget) SetSizeRequestWidget(width int, height int) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gint       // out
	var _arg2 C.gint       // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.gint(width)
	_arg2 = C.gint(height)

	C.gtk_widget_set_size_request(_arg0, _arg1, _arg2)
}

func (w widget) SetStateWidget(state StateType) {
	var _arg0 *C.GtkWidget   // out
	var _arg1 C.GtkStateType // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.GtkStateType(state)

	C.gtk_widget_set_state(_arg0, _arg1)
}

func (w widget) SetStateFlagsWidget(flags StateFlags, clear bool) {
	var _arg0 *C.GtkWidget    // out
	var _arg1 C.GtkStateFlags // out
	var _arg2 C.gboolean      // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.GtkStateFlags(flags)
	if clear {
		_arg2 = C.TRUE
	}

	C.gtk_widget_set_state_flags(_arg0, _arg1, _arg2)
}

func (w widget) SetStyleWidget(style Style) {
	var _arg0 *C.GtkWidget // out
	var _arg1 *C.GtkStyle  // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GtkStyle)(unsafe.Pointer(style.Native()))

	C.gtk_widget_set_style(_arg0, _arg1)
}

func (w widget) SetSupportMultideviceWidget(supportMultidevice bool) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	if supportMultidevice {
		_arg1 = C.TRUE
	}

	C.gtk_widget_set_support_multidevice(_arg0, _arg1)
}

func (w widget) SetTooltipMarkupWidget(markup string) {
	var _arg0 *C.GtkWidget // out
	var _arg1 *C.gchar     // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.gchar)(C.CString(markup))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_widget_set_tooltip_markup(_arg0, _arg1)
}

func (w widget) SetTooltipTextWidget(text string) {
	var _arg0 *C.GtkWidget // out
	var _arg1 *C.gchar     // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.gchar)(C.CString(text))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_widget_set_tooltip_text(_arg0, _arg1)
}

func (w widget) SetTooltipWindowWidget(customWindow Window) {
	var _arg0 *C.GtkWidget // out
	var _arg1 *C.GtkWindow // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GtkWindow)(unsafe.Pointer(customWindow.Native()))

	C.gtk_widget_set_tooltip_window(_arg0, _arg1)
}

func (w widget) SetValignWidget(align Align) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.GtkAlign   // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.GtkAlign(align)

	C.gtk_widget_set_valign(_arg0, _arg1)
}

func (w widget) SetVexpandWidget(expand bool) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	if expand {
		_arg1 = C.TRUE
	}

	C.gtk_widget_set_vexpand(_arg0, _arg1)
}

func (w widget) SetVexpandSetWidget(set bool) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	if set {
		_arg1 = C.TRUE
	}

	C.gtk_widget_set_vexpand_set(_arg0, _arg1)
}

func (w widget) SetVisibleWidget(visible bool) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	if visible {
		_arg1 = C.TRUE
	}

	C.gtk_widget_set_visible(_arg0, _arg1)
}

func (w widget) SetVisualWidget(visual gdk.Visual) {
	var _arg0 *C.GtkWidget // out
	var _arg1 *C.GdkVisual // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GdkVisual)(unsafe.Pointer(visual.Native()))

	C.gtk_widget_set_visual(_arg0, _arg1)
}

func (w widget) SetWindowWidget(window gdk.Window) {
	var _arg0 *C.GtkWidget // out
	var _arg1 *C.GdkWindow // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GdkWindow)(unsafe.Pointer(window.Native()))

	C.gtk_widget_set_window(_arg0, _arg1)
}

func (w widget) ShapeCombineRegionWidget(region *cairo.Region) {
	var _arg0 *C.GtkWidget      // out
	var _arg1 *C.cairo_region_t // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.cairo_region_t)(unsafe.Pointer(region))

	C.gtk_widget_shape_combine_region(_arg0, _arg1)
}

func (w widget) ShowWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_show(_arg0)
}

func (w widget) ShowAllWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_show_all(_arg0)
}

func (w widget) ShowNowWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_show_now(_arg0)
}

func (w widget) SizeRequestWidget() Requisition {
	var _arg0 *C.GtkWidget     // out
	var _arg1 C.GtkRequisition // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_size_request(_arg0, &_arg1)

	var _requisition Requisition // out

	{
		var refTmpIn *C.GtkRequisition
		var refTmpOut *Requisition

		in0 := &_arg1
		refTmpIn = in0

		refTmpOut = (*Requisition)(unsafe.Pointer(refTmpIn))

		_requisition = *refTmpOut
	}

	return _requisition
}

func (w widget) StyleAttachWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_style_attach(_arg0)
}

func (w widget) StyleGetPropertyWidget(propertyName string, value externglib.Value) {
	var _arg0 *C.GtkWidget // out
	var _arg1 *C.gchar     // out
	var _arg2 *C.GValue    // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.gchar)(C.CString(propertyName))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.GValue)(unsafe.Pointer(&value.GValue))

	C.gtk_widget_style_get_property(_arg0, _arg1, _arg2)
}

func (w widget) ThawChildNotifyWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_thaw_child_notify(_arg0)
}

func (s widget) TranslateCoordinatesWidget(destWidget Widget, srcX int, srcY int) (destX int, destY int, ok bool) {
	var _arg0 *C.GtkWidget // out
	var _arg1 *C.GtkWidget // out
	var _arg2 C.gint       // out
	var _arg3 C.gint       // out
	var _arg4 C.gint       // in
	var _arg5 C.gint       // in
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(destWidget.Native()))
	_arg2 = C.gint(srcX)
	_arg3 = C.gint(srcY)

	_cret = C.gtk_widget_translate_coordinates(_arg0, _arg1, _arg2, _arg3, &_arg4, &_arg5)

	var _destX int // out
	var _destY int // out
	var _ok bool   // out

	_destX = int(_arg4)
	_destY = int(_arg5)
	if _cret != 0 {
		_ok = true
	}

	return _destX, _destY, _ok
}

func (w widget) TriggerTooltipQueryWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_trigger_tooltip_query(_arg0)
}

func (w widget) UnmapWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_unmap(_arg0)
}

func (w widget) UnparentWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_unparent(_arg0)
}

func (w widget) UnrealizeWidget() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))

	C.gtk_widget_unrealize(_arg0)
}

func (w widget) UnregisterWindowWidget(window gdk.Window) {
	var _arg0 *C.GtkWidget // out
	var _arg1 *C.GdkWindow // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = (*C.GdkWindow)(unsafe.Pointer(window.Native()))

	C.gtk_widget_unregister_window(_arg0, _arg1)
}

func (w widget) UnsetStateFlagsWidget(flags StateFlags) {
	var _arg0 *C.GtkWidget    // out
	var _arg1 C.GtkStateFlags // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(w.Native()))
	_arg1 = C.GtkStateFlags(flags)

	C.gtk_widget_unset_state_flags(_arg0, _arg1)
}

func (w widget) AsBuildable() Buildable {
	return WrapBuildable(gextras.InternObject(w))
}

// Requisition represents the desired size of a widget. See [GtkWidget’s
// geometry management section][geometry-management] for more information.
type Requisition struct {
	native C.GtkRequisition
}

// WrapRequisition wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapRequisition(ptr unsafe.Pointer) *Requisition {
	return (*Requisition)(ptr)
}

func marshalRequisition(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return (*Requisition)(unsafe.Pointer(b)), nil
}

// NewRequisition constructs a struct Requisition.
func NewRequisition() *Requisition {
	var _cret *C.GtkRequisition // in

	_cret = C.gtk_requisition_new()

	var _requisition *Requisition // out

	_requisition = (*Requisition)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(_requisition, func(v *Requisition) {
		C.gtk_requisition_free((*C.GtkRequisition)(unsafe.Pointer(v)))
	})

	return _requisition
}

// Native returns the underlying C source pointer.
func (r *Requisition) Native() unsafe.Pointer {
	return unsafe.Pointer(&r.native)
}

// Copy copies a Requisition.
func (r *Requisition) Copy() *Requisition {
	var _arg0 *C.GtkRequisition // out
	var _cret *C.GtkRequisition // in

	_arg0 = (*C.GtkRequisition)(unsafe.Pointer(r))

	_cret = C.gtk_requisition_copy(_arg0)

	var _ret *Requisition // out

	_ret = (*Requisition)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(_ret, func(v *Requisition) {
		C.gtk_requisition_free((*C.GtkRequisition)(unsafe.Pointer(v)))
	})

	return _ret
}

// Free frees a Requisition.
func (r *Requisition) Free() {
	var _arg0 *C.GtkRequisition // out

	_arg0 = (*C.GtkRequisition)(unsafe.Pointer(r))

	C.gtk_requisition_free(_arg0)
}
