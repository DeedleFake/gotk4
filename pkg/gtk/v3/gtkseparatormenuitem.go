// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_separator_menu_item_get_type()), F: marshalSeparatorMenuItem},
	})
}

// SeparatorMenuItem: the SeparatorMenuItem is a separator used to group items
// within a menu. It displays a horizontal line with a shadow to make it appear
// sunken into the interface.
//
//
// CSS nodes
//
// GtkSeparatorMenuItem has a single CSS node with name separator.
type SeparatorMenuItem interface {
	MenuItem

	// AsActionable casts the class to the Actionable interface.
	AsActionable() Actionable
	// AsActivatable casts the class to the Activatable interface.
	AsActivatable() Activatable
	// AsBuildable casts the class to the Buildable interface.
	AsBuildable() Buildable
}

// separatorMenuItem implements the SeparatorMenuItem class.
type separatorMenuItem struct {
	MenuItem
}

// WrapSeparatorMenuItem wraps a GObject to the right type. It is
// primarily used internally.
func WrapSeparatorMenuItem(obj *externglib.Object) SeparatorMenuItem {
	return separatorMenuItem{
		MenuItem: WrapMenuItem(obj),
	}
}

func marshalSeparatorMenuItem(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapSeparatorMenuItem(obj), nil
}

// NewSeparatorMenuItem creates a new SeparatorMenuItem.
func NewSeparatorMenuItem() SeparatorMenuItem {
	var _cret *C.GtkWidget // in

	_cret = C.gtk_separator_menu_item_new()

	var _separatorMenuItem SeparatorMenuItem // out

	_separatorMenuItem = WrapSeparatorMenuItem(externglib.Take(unsafe.Pointer(_cret)))

	return _separatorMenuItem
}

func (s separatorMenuItem) AsActionable() Actionable {
	return WrapActionable(gextras.InternObject(s))
}

func (s separatorMenuItem) AsActivatable() Activatable {
	return WrapActivatable(gextras.InternObject(s))
}

func (s separatorMenuItem) AsBuildable() Buildable {
	return WrapBuildable(gextras.InternObject(s))
}
