// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
	"github.com/diamondburned/gotk4/pkg/pango"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_im_context_simple_get_type()), F: marshalIMContextSimple},
	})
}

// IMContextSimple is a simple input method context supporting table-based input
// methods. It has a built-in table of compose sequences that is derived from
// the X11 Compose files.
//
// GtkIMContextSimple reads additional compose sequences from the first of the
// following files that is found: ~/.config/gtk-3.0/Compose, ~/.XCompose,
// /usr/share/X11/locale/$locale/Compose (for locales that have a nontrivial
// Compose file). The syntax of these files is described in the Compose(5)
// manual page.
//
//
// Unicode characters
//
// GtkIMContextSimple also supports numeric entry of Unicode characters by
// typing Ctrl-Shift-u, followed by a hexadecimal Unicode codepoint. For
// example, Ctrl-Shift-u 1 2 3 Enter yields U+0123 LATIN SMALL LETTER G WITH
// CEDILLA, i.e. Ä£.
type IMContextSimple interface {
	gextras.Objector

	// AsIMContext casts the class to the IMContext interface.
	AsIMContext() IMContext

	// DeleteSurrounding asks the widget that the input context is attached to
	// to delete characters around the cursor position by emitting the
	// GtkIMContext::delete_surrounding signal. Note that @offset and @n_chars
	// are in characters not in bytes which differs from the usage other places
	// in IMContext.
	//
	// In order to use this function, you should first call
	// gtk_im_context_get_surrounding() to get the current context, and call
	// this function immediately afterwards to make sure that you know what you
	// are deleting. You should also account for the fact that even if the
	// signal was handled, the input context might not have deleted all the
	// characters that were requested to be deleted.
	//
	// This function is used by an input method that wants to make subsitutions
	// in the existing text in response to new input. It is not useful for
	// applications.
	//
	// This method is inherited from IMContext
	DeleteSurrounding(offset int, nChars int) bool
	// FilterKeypress: allow an input method to internally handle key press and
	// release events. If this function returns true, then no further processing
	// should be done for this key event.
	//
	// This method is inherited from IMContext
	FilterKeypress(event *gdk.EventKey) bool
	// FocusIn: notify the input method that the widget to which this input
	// context corresponds has gained focus. The input method may, for example,
	// change the displayed feedback to reflect this change.
	//
	// This method is inherited from IMContext
	FocusIn()
	// FocusOut: notify the input method that the widget to which this input
	// context corresponds has lost focus. The input method may, for example,
	// change the displayed feedback or reset the contexts state to reflect this
	// change.
	//
	// This method is inherited from IMContext
	FocusOut()
	// GetPreeditString: retrieve the current preedit string for the input
	// context, and a list of attributes to apply to the string. This string
	// should be displayed inserted at the insertion point.
	//
	// This method is inherited from IMContext
	GetPreeditString() (string, *pango.AttrList, int)
	// GetSurrounding retrieves context around the insertion point. Input
	// methods typically want context in order to constrain input text based on
	// existing text; this is important for languages such as Thai where only
	// some sequences of characters are allowed.
	//
	// This function is implemented by emitting the
	// GtkIMContext::retrieve_surrounding signal on the input method; in
	// response to this signal, a widget should provide as much context as is
	// available, up to an entire paragraph, by calling
	// gtk_im_context_set_surrounding(). Note that there is no obligation for a
	// widget to respond to the ::retrieve_surrounding signal, so input methods
	// must be prepared to function without context.
	//
	// This method is inherited from IMContext
	GetSurrounding() (string, int, bool)
	// Reset: notify the input method that a change such as a change in cursor
	// position has been made. This will typically cause the input method to
	// clear the preedit state.
	//
	// This method is inherited from IMContext
	Reset()
	// SetClientWindow: set the client window for the input context; this is the
	// Window in which the input appears. This window is used in order to
	// correctly position status windows, and may also be used for purposes
	// internal to the input method.
	//
	// This method is inherited from IMContext
	SetClientWindow(window gdk.Window)
	// SetCursorLocation: notify the input method that a change in cursor
	// position has been made. The location is relative to the client window.
	//
	// This method is inherited from IMContext
	SetCursorLocation(area *gdk.Rectangle)
	// SetSurrounding sets surrounding context around the insertion point and
	// preedit string. This function is expected to be called in response to the
	// GtkIMContext::retrieve_surrounding signal, and will likely have no effect
	// if called at other times.
	//
	// This method is inherited from IMContext
	SetSurrounding(text string, len int, cursorIndex int)
	// SetUsePreedit sets whether the IM context should use the preedit string
	// to display feedback. If @use_preedit is FALSE (default is TRUE), then the
	// IM context may use some other method to display feedback, such as
	// displaying it in a child of the root window.
	//
	// This method is inherited from IMContext
	SetUsePreedit(usePreedit bool)

	// AddComposeFile adds an additional table from the X11 compose file.
	AddComposeFile(composeFile string)
}

// imContextSimple implements the IMContextSimple interface.
type imContextSimple struct {
	*externglib.Object
}

var _ IMContextSimple = (*imContextSimple)(nil)

// WrapIMContextSimple wraps a GObject to a type that implements
// interface IMContextSimple. It is primarily used internally.
func WrapIMContextSimple(obj *externglib.Object) IMContextSimple {
	return imContextSimple{obj}
}

func marshalIMContextSimple(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapIMContextSimple(obj), nil
}

// NewIMContextSimple creates a new IMContextSimple.
func NewIMContextSimple() IMContextSimple {
	var _cret *C.GtkIMContext // in

	_cret = C.gtk_im_context_simple_new()

	var _imContextSimple IMContextSimple // out

	_imContextSimple = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(IMContextSimple)

	return _imContextSimple
}

func (i imContextSimple) AsIMContext() IMContext {
	return WrapIMContext(gextras.InternObject(i))
}

func (c imContextSimple) DeleteSurrounding(offset int, nChars int) bool {
	return WrapIMContext(gextras.InternObject(c)).DeleteSurrounding(offset, nChars)
}

func (c imContextSimple) FilterKeypress(event *gdk.EventKey) bool {
	return WrapIMContext(gextras.InternObject(c)).FilterKeypress(event)
}

func (c imContextSimple) FocusIn() {
	WrapIMContext(gextras.InternObject(c)).FocusIn()
}

func (c imContextSimple) FocusOut() {
	WrapIMContext(gextras.InternObject(c)).FocusOut()
}

func (c imContextSimple) GetPreeditString() (string, *pango.AttrList, int) {
	return WrapIMContext(gextras.InternObject(c)).GetPreeditString()
}

func (c imContextSimple) GetSurrounding() (string, int, bool) {
	return WrapIMContext(gextras.InternObject(c)).GetSurrounding()
}

func (c imContextSimple) Reset() {
	WrapIMContext(gextras.InternObject(c)).Reset()
}

func (c imContextSimple) SetClientWindow(window gdk.Window) {
	WrapIMContext(gextras.InternObject(c)).SetClientWindow(window)
}

func (c imContextSimple) SetCursorLocation(area *gdk.Rectangle) {
	WrapIMContext(gextras.InternObject(c)).SetCursorLocation(area)
}

func (c imContextSimple) SetSurrounding(text string, len int, cursorIndex int) {
	WrapIMContext(gextras.InternObject(c)).SetSurrounding(text, len, cursorIndex)
}

func (c imContextSimple) SetUsePreedit(usePreedit bool) {
	WrapIMContext(gextras.InternObject(c)).SetUsePreedit(usePreedit)
}

func (c imContextSimple) AddComposeFile(composeFile string) {
	var _arg0 *C.GtkIMContextSimple // out
	var _arg1 *C.gchar              // out

	_arg0 = (*C.GtkIMContextSimple)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.gchar)(C.CString(composeFile))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_im_context_simple_add_compose_file(_arg0, _arg1)
}
