// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_path_priority_type_get_type()), F: marshalPathPriorityType},
		{T: externglib.Type(C.gtk_path_type_get_type()), F: marshalPathType},
		{T: externglib.Type(C.gtk_rc_token_type_get_type()), F: marshalRCTokenType},
		{T: externglib.Type(C.gtk_rc_flags_get_type()), F: marshalRCFlags},
		{T: externglib.Type(C.gtk_rc_style_get_type()), F: marshalRCStyle},
	})
}

// PathPriorityType priorities for path lookups. See also
// gtk_binding_set_add_path().
//
// Deprecated: since version 3.0.
type PathPriorityType int

const (
	// lowest: deprecated
	PathPriorityTypeLowest PathPriorityType = 0
	// gtk: deprecated
	PathPriorityTypeGTK PathPriorityType = 4
	// application: deprecated
	PathPriorityTypeApplication PathPriorityType = 8
	// theme: deprecated
	PathPriorityTypeTheme PathPriorityType = 10
	// rc: deprecated
	PathPriorityTypeRC PathPriorityType = 12
	// highest: deprecated
	PathPriorityTypeHighest PathPriorityType = 15
)

func marshalPathPriorityType(p uintptr) (interface{}, error) {
	return PathPriorityType(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// PathType: widget path types. See also gtk_binding_set_add_path().
//
// Deprecated: since version 3.0.
type PathType int

const (
	// widget: deprecated
	PathTypeWidget PathType = 0
	// WidgetClass: deprecated
	PathTypeWidgetClass PathType = 1
	// class: deprecated
	PathTypeClass PathType = 2
)

func marshalPathType(p uintptr) (interface{}, error) {
	return PathType(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// RCTokenType: the RcTokenType enumeration represents the tokens in the RC
// file. It is exposed so that theme engines can reuse these tokens when parsing
// the theme-engine specific portions of a RC file.
//
// Deprecated: since version 3.0.
type RCTokenType int

const (
	// invalid: deprecated
	RCTokenTypeInvalid RCTokenType = 270
	// include: deprecated
	RCTokenTypeInclude RCTokenType = 271
	// normal: deprecated
	RCTokenTypeNormal RCTokenType = 272
	// active: deprecated
	RCTokenTypeActive RCTokenType = 273
	// prelight: deprecated
	RCTokenTypePrelight RCTokenType = 274
	// selected: deprecated
	RCTokenTypeSelected RCTokenType = 275
	// insensitive: deprecated
	RCTokenTypeInsensitive RCTokenType = 276
	// fg: deprecated
	RCTokenTypeFg RCTokenType = 277
	// bg: deprecated
	RCTokenTypeBg RCTokenType = 278
	// text: deprecated
	RCTokenTypeText RCTokenType = 279
	// base: deprecated
	RCTokenTypeBase RCTokenType = 280
	// xthickness: deprecated
	RCTokenTypeXthickness RCTokenType = 281
	// ythickness: deprecated
	RCTokenTypeYthickness RCTokenType = 282
	// font: deprecated
	RCTokenTypeFont RCTokenType = 283
	// fontset: deprecated
	RCTokenTypeFontset RCTokenType = 284
	// FontName: deprecated
	RCTokenTypeFontName RCTokenType = 285
	// BgPixmap: deprecated
	RCTokenTypeBgPixmap RCTokenType = 286
	// PixmapPath: deprecated
	RCTokenTypePixmapPath RCTokenType = 287
	// style: deprecated
	RCTokenTypeStyle RCTokenType = 288
	// binding: deprecated
	RCTokenTypeBinding RCTokenType = 289
	// bind: deprecated
	RCTokenTypeBind RCTokenType = 290
	// widget: deprecated
	RCTokenTypeWidget RCTokenType = 291
	// WidgetClass: deprecated
	RCTokenTypeWidgetClass RCTokenType = 292
	// class: deprecated
	RCTokenTypeClass RCTokenType = 293
	// lowest: deprecated
	RCTokenTypeLowest RCTokenType = 294
	// gtk: deprecated
	RCTokenTypeGTK RCTokenType = 295
	// application: deprecated
	RCTokenTypeApplication RCTokenType = 296
	// theme: deprecated
	RCTokenTypeTheme RCTokenType = 297
	// rc: deprecated
	RCTokenTypeRC RCTokenType = 298
	// highest: deprecated
	RCTokenTypeHighest RCTokenType = 299
	// engine: deprecated
	RCTokenTypeEngine RCTokenType = 300
	// ModulePath: deprecated
	RCTokenTypeModulePath RCTokenType = 301
	// ImModulePath: deprecated
	RCTokenTypeImModulePath RCTokenType = 302
	// ImModuleFile: deprecated
	RCTokenTypeImModuleFile RCTokenType = 303
	// stock: deprecated
	RCTokenTypeStock RCTokenType = 304
	// ltr: deprecated
	RCTokenTypeLTR RCTokenType = 305
	// rtl: deprecated
	RCTokenTypeRTL RCTokenType = 306
	// color: deprecated
	RCTokenTypeColor RCTokenType = 307
	// unbind: deprecated
	RCTokenTypeUnbind RCTokenType = 308
	// last: deprecated
	RCTokenTypeLast RCTokenType = 309
)

func marshalRCTokenType(p uintptr) (interface{}, error) {
	return RCTokenType(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// RCFlags: deprecated
type RCFlags int

const (
	// RCFlagsFg: deprecated
	RCFlagsFg RCFlags = 0b1
	// RCFlagsBg: deprecated
	RCFlagsBg RCFlags = 0b10
	// RCFlagsText: deprecated
	RCFlagsText RCFlags = 0b100
	// RCFlagsBase: deprecated
	RCFlagsBase RCFlags = 0b1000
)

func marshalRCFlags(p uintptr) (interface{}, error) {
	return RCFlags(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// RCAddDefaultFile adds a file to the list of files to be parsed at the end of
// gtk_init().
//
// Deprecated: since version 3.0.
func RCAddDefaultFile(filename string) {
	var _arg1 *C.gchar // out

	_arg1 = (*C.gchar)(C.CString(filename))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_rc_add_default_file(_arg1)
}

// RCFindModuleInPath searches for a theme engine in the GTK+ search path. This
// function is not useful for applications and should not be used.
//
// Deprecated: since version 3.0.
func RCFindModuleInPath(moduleFile string) string {
	var _arg1 *C.gchar // out
	var _cret *C.gchar // in

	_arg1 = (*C.gchar)(C.CString(moduleFile))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_rc_find_module_in_path(_arg1)

	var _filename string // out

	_filename = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _filename
}

// RCFindPixmapInPath looks up a file in pixmap path for the specified Settings.
// If the file is not found, it outputs a warning message using g_warning() and
// returns nil.
//
// Deprecated: since version 3.0.
func RCFindPixmapInPath(settings Settings, scanner *glib.Scanner, pixmapFile string) string {
	var _arg1 *C.GtkSettings // out
	var _arg2 *C.GScanner    // out
	var _arg3 *C.gchar       // out
	var _cret *C.gchar       // in

	_arg1 = (*C.GtkSettings)(unsafe.Pointer(settings.Native()))
	_arg2 = (*C.GScanner)(unsafe.Pointer(scanner.Native()))
	_arg3 = (*C.gchar)(C.CString(pixmapFile))
	defer C.free(unsafe.Pointer(_arg3))

	_cret = C.gtk_rc_find_pixmap_in_path(_arg1, _arg2, _arg3)

	var _filename string // out

	_filename = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _filename
}

// RCGetDefaultFiles retrieves the current list of RC files that will be parsed
// at the end of gtk_init().
//
// Deprecated: since version 3.0.
func RCGetDefaultFiles() []string {
	var _cret **C.gchar

	_cret = C.gtk_rc_get_default_files()

	var _filenames []string

	{
		var i int
		var z *C.gchar
		for p := _cret; *p != z; p = &unsafe.Slice(p, i+1)[i] {
			i++
		}

		src := unsafe.Slice(_cret, i)
		_filenames = make([]string, i)
		for i := range src {
			_filenames[i] = C.GoString(src[i])
		}
	}

	return _filenames
}

// RCGetImModuleFile obtains the path to the IM modules file. See the
// documentation of the `GTK_IM_MODULE_FILE` environment variable for more
// details.
//
// Deprecated: since version 3.0.
func RCGetImModuleFile() string {
	var _cret *C.gchar // in

	_cret = C.gtk_rc_get_im_module_file()

	var _filename string // out

	_filename = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _filename
}

// RCGetImModulePath obtains the path in which to look for IM modules. See the
// documentation of the `GTK_PATH` environment variable for more details about
// looking up modules. This function is useful solely for utilities supplied
// with GTK+ and should not be used by applications under normal circumstances.
//
// Deprecated: since version 3.0.
func RCGetImModulePath() string {
	var _cret *C.gchar // in

	_cret = C.gtk_rc_get_im_module_path()

	var _filename string // out

	_filename = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _filename
}

// RCGetModuleDir returns a directory in which GTK+ looks for theme engines. For
// full information about the search for theme engines, see the docs for
// `GTK_PATH` in [Running GTK+ Applications][gtk-running].
//
// Deprecated: since version 3.0.
func RCGetModuleDir() string {
	var _cret *C.gchar // in

	_cret = C.gtk_rc_get_module_dir()

	var _filename string // out

	_filename = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _filename
}

// RCGetStyle finds all matching RC styles for a given widget, composites them
// together, and then creates a Style representing the composite appearance.
// (GTK+ actually keeps a cache of previously created styles, so a new style may
// not be created.)
//
// Deprecated: since version 3.0.
func RCGetStyle(widget Widget) Style {
	var _arg1 *C.GtkWidget // out
	var _cret *C.GtkStyle  // in

	_arg1 = (*C.GtkWidget)(unsafe.Pointer(widget.Native()))

	_cret = C.gtk_rc_get_style(_arg1)

	var _style Style // out

	_style = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Style)

	return _style
}

// RCGetStyleByPaths creates up a Style from styles defined in a RC file by
// providing the raw components used in matching. This function may be useful
// when creating pseudo-widgets that should be themed like widgets but donâ€™t
// actually have corresponding GTK+ widgets. An example of this would be items
// inside a GNOME canvas widget.
//
// The action of gtk_rc_get_style() is similar to:
//
//    gtk_widget_path (widget, NULL, &path, NULL);
//    gtk_widget_class_path (widget, NULL, &class_path, NULL);
//    gtk_rc_get_style_by_paths (gtk_widget_get_settings (widget),
//                               path, class_path,
//                               G_OBJECT_TYPE (widget));
//
// Deprecated: since version 3.0.
func RCGetStyleByPaths(settings Settings, widgetPath string, classPath string, typ externglib.Type) Style {
	var _arg1 *C.GtkSettings // out
	var _arg2 *C.char        // out
	var _arg3 *C.char        // out
	var _arg4 C.GType        // out
	var _cret *C.GtkStyle    // in

	_arg1 = (*C.GtkSettings)(unsafe.Pointer(settings.Native()))
	_arg2 = (*C.char)(C.CString(widgetPath))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = (*C.char)(C.CString(classPath))
	defer C.free(unsafe.Pointer(_arg3))
	_arg4 = (C.GType)(typ)

	_cret = C.gtk_rc_get_style_by_paths(_arg1, _arg2, _arg3, _arg4)

	var _style Style // out

	_style = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Style)

	return _style
}

// RCGetThemeDir returns the standard directory in which themes should be
// installed. (GTK+ does not actually use this directory itself.)
//
// Deprecated: since version 3.0.
func RCGetThemeDir() string {
	var _cret *C.gchar // in

	_cret = C.gtk_rc_get_theme_dir()

	var _utf8 string // out

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// RCParse parses a given resource file.
//
// Deprecated: since version 3.0.
func RCParse(filename string) {
	var _arg1 *C.gchar // out

	_arg1 = (*C.gchar)(C.CString(filename))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_rc_parse(_arg1)
}

// RCParseColor parses a color in the format expected in a RC file.
//
// Note that theme engines should use gtk_rc_parse_color_full() in order to
// support symbolic colors.
//
// Deprecated: since version 3.0.
func RCParseColor(scanner *glib.Scanner) (gdk.Color, uint) {
	var _arg1 *C.GScanner // out
	var _arg2 C.GdkColor  // in
	var _cret C.guint     // in

	_arg1 = (*C.GScanner)(unsafe.Pointer(scanner.Native()))

	_cret = C.gtk_rc_parse_color(_arg1, &_arg2)

	var _color gdk.Color // out
	var _guint uint      // out

	{
		var refTmpIn *C.GdkColor
		var refTmpOut *gdk.Color

		in0 := &_arg2
		refTmpIn = in0

		refTmpOut = (*gdk.Color)(unsafe.Pointer(refTmpIn))

		_color = *refTmpOut
	}
	_guint = uint(_cret)

	return _color, _guint
}

// RCParseColorFull parses a color in the format expected in a RC file. If
// @style is not nil, it will be consulted to resolve references to symbolic
// colors.
//
// Deprecated: since version 3.0.
func RCParseColorFull(scanner *glib.Scanner, style RCStyle) (gdk.Color, uint) {
	var _arg1 *C.GScanner   // out
	var _arg2 *C.GtkRcStyle // out
	var _arg3 C.GdkColor    // in
	var _cret C.guint       // in

	_arg1 = (*C.GScanner)(unsafe.Pointer(scanner.Native()))
	_arg2 = (*C.GtkRcStyle)(unsafe.Pointer(style.Native()))

	_cret = C.gtk_rc_parse_color_full(_arg1, _arg2, &_arg3)

	var _color gdk.Color // out
	var _guint uint      // out

	{
		var refTmpIn *C.GdkColor
		var refTmpOut *gdk.Color

		in0 := &_arg3
		refTmpIn = in0

		refTmpOut = (*gdk.Color)(unsafe.Pointer(refTmpIn))

		_color = *refTmpOut
	}
	_guint = uint(_cret)

	return _color, _guint
}

// RCParsePriority parses a PathPriorityType variable from the format expected
// in a RC file.
//
// Deprecated: since version 3.0.
func RCParsePriority(scanner *glib.Scanner, priority *PathPriorityType) uint {
	var _arg1 *C.GScanner            // out
	var _arg2 *C.GtkPathPriorityType // out
	var _cret C.guint                // in

	_arg1 = (*C.GScanner)(unsafe.Pointer(scanner.Native()))
	{
		var refTmpIn PathPriorityType
		var refTmpOut C.GtkPathPriorityType

		refTmpIn = *priority

		refTmpOut = C.GtkPathPriorityType(refTmpIn)

		out0 := &refTmpOut
		_arg2 = out0
	}

	_cret = C.gtk_rc_parse_priority(_arg1, _arg2)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// RCParseState parses a StateType variable from the format expected in a RC
// file.
//
// Deprecated: since version 3.0.
func RCParseState(scanner *glib.Scanner) (StateType, uint) {
	var _arg1 *C.GScanner    // out
	var _arg2 C.GtkStateType // in
	var _cret C.guint        // in

	_arg1 = (*C.GScanner)(unsafe.Pointer(scanner.Native()))

	_cret = C.gtk_rc_parse_state(_arg1, &_arg2)

	var _state StateType // out
	var _guint uint      // out

	_state = StateType(_arg2)
	_guint = uint(_cret)

	return _state, _guint
}

// RCParseString parses resource information directly from a string.
//
// Deprecated: since version 3.0.
func RCParseString(rcString string) {
	var _arg1 *C.gchar // out

	_arg1 = (*C.gchar)(C.CString(rcString))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_rc_parse_string(_arg1)
}

// RCReparseAll: if the modification time on any previously read file for the
// default Settings has changed, discard all style information and then reread
// all previously read RC files.
//
// Deprecated: since version 3.0.
func RCReparseAll() bool {
	var _cret C.gboolean // in

	_cret = C.gtk_rc_reparse_all()

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// RCReparseAllForSettings: if the modification time on any previously read file
// for the given Settings has changed, discard all style information and then
// reread all previously read RC files.
//
// Deprecated: since version 3.0.
func RCReparseAllForSettings(settings Settings, forceLoad bool) bool {
	var _arg1 *C.GtkSettings // out
	var _arg2 C.gboolean     // out
	var _cret C.gboolean     // in

	_arg1 = (*C.GtkSettings)(unsafe.Pointer(settings.Native()))
	if forceLoad {
		_arg2 = C.TRUE
	}

	_cret = C.gtk_rc_reparse_all_for_settings(_arg1, _arg2)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// RCResetStyles: this function recomputes the styles for all widgets that use a
// particular Settings object. (There is one Settings object per Screen, see
// gtk_settings_get_for_screen()); It is useful when some global parameter has
// changed that affects the appearance of all widgets, because when a widget
// gets a new style, it will both redraw and recompute any cached information
// about its appearance. As an example, it is used when the default font size
// set by the operating system changes. Note that this function doesnâ€™t affect
// widgets that have a style set explicitly on them with gtk_widget_set_style().
//
// Deprecated: since version 3.0.
func RCResetStyles(settings Settings) {
	var _arg1 *C.GtkSettings // out

	_arg1 = (*C.GtkSettings)(unsafe.Pointer(settings.Native()))

	C.gtk_rc_reset_styles(_arg1)
}

// RCSetDefaultFiles sets the list of files that GTK+ will read at the end of
// gtk_init().
//
// Deprecated: since version 3.0.
func RCSetDefaultFiles(filenames []string) {
	var _arg1 **C.gchar

	_arg1 = (**C.gchar)(C.malloc(C.ulong(len(filenames)+1) * C.ulong(unsafe.Sizeof(uint(0)))))
	defer C.free(unsafe.Pointer(_arg1))
	{
		out := unsafe.Slice(_arg1, len(filenames))
		for i := range filenames {
			out[i] = (*C.gchar)(C.CString(filenames[i]))
			defer C.free(unsafe.Pointer(out[i]))
		}
	}

	C.gtk_rc_set_default_files(_arg1)
}

// RCStyle: the RcStyle-struct is used to represent a set of information about
// the appearance of a widget. This can later be composited together with other
// RcStyle-struct<!-- -->s to form a Style.
type RCStyle interface {
	gextras.Objector

	CopyRCStyle() RCStyle
}

// rcStyle implements the RCStyle class.
type rcStyle struct {
	gextras.Objector
}

// WrapRCStyle wraps a GObject to the right type. It is
// primarily used internally.
func WrapRCStyle(obj *externglib.Object) RCStyle {
	return rcStyle{
		Objector: obj,
	}
}

func marshalRCStyle(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapRCStyle(obj), nil
}

func NewRCStyle() RCStyle {
	var _cret *C.GtkRcStyle // in

	_cret = C.gtk_rc_style_new()

	var _rcStyle RCStyle // out

	_rcStyle = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(RCStyle)

	return _rcStyle
}

func (o rcStyle) CopyRCStyle() RCStyle {
	var _arg0 *C.GtkRcStyle // out
	var _cret *C.GtkRcStyle // in

	_arg0 = (*C.GtkRcStyle)(unsafe.Pointer(o.Native()))

	_cret = C.gtk_rc_style_copy(_arg0)

	var _rcStyle RCStyle // out

	_rcStyle = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(RCStyle)

	return _rcStyle
}

type RCContext C.GtkRcContext

// WrapRCContext wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapRCContext(ptr unsafe.Pointer) *RCContext {
	return (*RCContext)(ptr)
}

// Native returns the underlying C source pointer.
func (r *RCContext) Native() unsafe.Pointer {
	return unsafe.Pointer(r)
}
