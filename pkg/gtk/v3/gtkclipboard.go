// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/core/gextras"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
	"github.com/diamondburned/gotk4/pkg/gdkpixbuf/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_clipboard_get_type()), F: marshalClipboard},
	})
}

// Clipboard: the Clipboard object represents a clipboard of data shared between
// different processes or between different widgets in the same process. Each
// clipboard is identified by a name encoded as a Atom. (Conversion to and from
// strings can be done with gdk_atom_intern() and gdk_atom_name().) The default
// clipboard corresponds to the “CLIPBOARD” atom; another commonly used
// clipboard is the “PRIMARY” clipboard, which, in X, traditionally contains the
// currently selected text.
//
// To support having a number of different formats on the clipboard at the same
// time, the clipboard mechanism allows providing callbacks instead of the
// actual data. When you set the contents of the clipboard, you can either
// supply the data directly (via functions like gtk_clipboard_set_text()), or
// you can supply a callback to be called at a later time when the data is
// needed (via gtk_clipboard_set_with_data() or gtk_clipboard_set_with_owner().)
// Providing a callback also avoids having to make copies of the data when it is
// not needed.
//
// gtk_clipboard_set_with_data() and gtk_clipboard_set_with_owner() are quite
// similar; the choice between the two depends mostly on which is more
// convenient in a particular situation. The former is most useful when you want
// to have a blob of data with callbacks to convert it into the various data
// types that you advertise. When the @clear_func you provided is called, you
// simply free the data blob. The latter is more useful when the contents of
// clipboard reflect the internal state of a #GObject (As an example, for the
// PRIMARY clipboard, when an entry widget provides the clipboard’s contents the
// contents are simply the text within the selected region.) If the contents
// change, the entry widget can call gtk_clipboard_set_with_owner() to update
// the timestamp for clipboard ownership, without having to worry about
// @clear_func being called.
//
// Requesting the data from the clipboard is essentially asynchronous. If the
// contents of the clipboard are provided within the same process, then a direct
// function call will be made to retrieve the data, but if they are provided by
// another process, then the data needs to be retrieved from the other process,
// which may take some time. To avoid blocking the user interface, the call to
// request the selection, gtk_clipboard_request_contents() takes a callback that
// will be called when the contents are received (or when the request fails.) If
// you don’t want to deal with providing a separate callback, you can also use
// gtk_clipboard_wait_for_contents(). What this does is run the GLib main loop
// recursively waiting for the contents. This can simplify the code flow, but
// you still have to be aware that other callbacks in your program can be called
// while this recursive mainloop is running.
//
// Along with the functions to get the clipboard contents as an arbitrary data
// chunk, there are also functions to retrieve it as text,
// gtk_clipboard_request_text() and gtk_clipboard_wait_for_text(). These
// functions take care of determining which formats are advertised by the
// clipboard provider, asking for the clipboard in the best available format and
// converting the results into the UTF-8 encoding. (The standard form for
// representing strings in GTK+.)
type Clipboard interface {
	gextras.Objector

	// ClearClipboard:
	ClearClipboard()
	// Display:
	Display() gdk.Display
	// Owner:
	Owner() gextras.Objector
	// SetCanStoreClipboard:
	SetCanStoreClipboard(targets []TargetEntry)
	// SetImageClipboard:
	SetImageClipboard(pixbuf gdkpixbuf.Pixbuf)
	// SetTextClipboard:
	SetTextClipboard(text string, len int)
	// StoreClipboard:
	StoreClipboard()
	// WaitForContentsClipboard:
	WaitForContentsClipboard(target *gdk.Atom) *SelectionData
	// WaitForImageClipboard:
	WaitForImageClipboard() gdkpixbuf.Pixbuf
	// WaitForTargetsClipboard:
	WaitForTargetsClipboard() ([]gdk.Atom, bool)
	// WaitForTextClipboard:
	WaitForTextClipboard() string
	// WaitForUrisClipboard:
	WaitForUrisClipboard() []string
	// WaitIsImageAvailableClipboard:
	WaitIsImageAvailableClipboard() bool
	// WaitIsRichTextAvailableClipboard:
	WaitIsRichTextAvailableClipboard(buffer TextBuffer) bool
	// WaitIsTargetAvailableClipboard:
	WaitIsTargetAvailableClipboard(target *gdk.Atom) bool
	// WaitIsTextAvailableClipboard:
	WaitIsTextAvailableClipboard() bool
	// WaitIsUrisAvailableClipboard:
	WaitIsUrisAvailableClipboard() bool
}

// clipboard implements the Clipboard class.
type clipboard struct {
	gextras.Objector
}

// WrapClipboard wraps a GObject to the right type. It is
// primarily used internally.
func WrapClipboard(obj *externglib.Object) Clipboard {
	return clipboard{
		Objector: obj,
	}
}

func marshalClipboard(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapClipboard(obj), nil
}

func (c clipboard) ClearClipboard() {
	var _arg0 *C.GtkClipboard // out

	_arg0 = (*C.GtkClipboard)(unsafe.Pointer(c.Native()))

	C.gtk_clipboard_clear(_arg0)
}

func (c clipboard) Display() gdk.Display {
	var _arg0 *C.GtkClipboard // out
	var _cret *C.GdkDisplay   // in

	_arg0 = (*C.GtkClipboard)(unsafe.Pointer(c.Native()))

	_cret = C.gtk_clipboard_get_display(_arg0)

	var _display gdk.Display // out

	_display = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(gdk.Display)

	return _display
}

func (c clipboard) Owner() gextras.Objector {
	var _arg0 *C.GtkClipboard // out
	var _cret *C.GObject      // in

	_arg0 = (*C.GtkClipboard)(unsafe.Pointer(c.Native()))

	_cret = C.gtk_clipboard_get_owner(_arg0)

	var _object gextras.Objector // out

	_object = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(gextras.Objector)

	return _object
}

func (c clipboard) SetCanStoreClipboard(targets []TargetEntry) {
	var _arg0 *C.GtkClipboard // out
	var _arg1 *C.GtkTargetEntry
	var _arg2 C.gint

	_arg0 = (*C.GtkClipboard)(unsafe.Pointer(c.Native()))
	_arg2 = C.gint(len(targets))
	_arg1 = (*C.GtkTargetEntry)(unsafe.Pointer(&targets[0]))

	C.gtk_clipboard_set_can_store(_arg0, _arg1, _arg2)
}

func (c clipboard) SetImageClipboard(pixbuf gdkpixbuf.Pixbuf) {
	var _arg0 *C.GtkClipboard // out
	var _arg1 *C.GdkPixbuf    // out

	_arg0 = (*C.GtkClipboard)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.GdkPixbuf)(unsafe.Pointer(pixbuf.Native()))

	C.gtk_clipboard_set_image(_arg0, _arg1)
}

func (c clipboard) SetTextClipboard(text string, len int) {
	var _arg0 *C.GtkClipboard // out
	var _arg1 *C.gchar        // out
	var _arg2 C.gint          // out

	_arg0 = (*C.GtkClipboard)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.gchar)(C.CString(text))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.gint(len)

	C.gtk_clipboard_set_text(_arg0, _arg1, _arg2)
}

func (c clipboard) StoreClipboard() {
	var _arg0 *C.GtkClipboard // out

	_arg0 = (*C.GtkClipboard)(unsafe.Pointer(c.Native()))

	C.gtk_clipboard_store(_arg0)
}

func (c clipboard) WaitForContentsClipboard(target *gdk.Atom) *SelectionData {
	var _arg0 *C.GtkClipboard     // out
	var _arg1 C.GdkAtom           // out
	var _cret *C.GtkSelectionData // in

	_arg0 = (*C.GtkClipboard)(unsafe.Pointer(c.Native()))
	{
		var refTmpIn *gdk.Atom
		var refTmpOut *C.GdkAtom

		refTmpIn = target

		refTmpOut = (*C.GdkAtom)(unsafe.Pointer(refTmpIn.Native()))

		_arg1 = *refTmpOut
	}

	_cret = C.gtk_clipboard_wait_for_contents(_arg0, _arg1)

	var _selectionData *SelectionData // out

	_selectionData = (*SelectionData)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(&_selectionData, func(v **SelectionData) {
		C.free(unsafe.Pointer(v))
	})

	return _selectionData
}

func (c clipboard) WaitForImageClipboard() gdkpixbuf.Pixbuf {
	var _arg0 *C.GtkClipboard // out
	var _cret *C.GdkPixbuf    // in

	_arg0 = (*C.GtkClipboard)(unsafe.Pointer(c.Native()))

	_cret = C.gtk_clipboard_wait_for_image(_arg0)

	var _pixbuf gdkpixbuf.Pixbuf // out

	_pixbuf = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(gdkpixbuf.Pixbuf)

	return _pixbuf
}

func (c clipboard) WaitForTargetsClipboard() ([]gdk.Atom, bool) {
	var _arg0 *C.GtkClipboard // out
	var _arg1 *C.GdkAtom
	var _arg2 C.gint     // in
	var _cret C.gboolean // in

	_arg0 = (*C.GtkClipboard)(unsafe.Pointer(c.Native()))

	_cret = C.gtk_clipboard_wait_for_targets(_arg0, &_arg1, &_arg2)

	var _targets []gdk.Atom
	var _ok bool // out

	_targets = unsafe.Slice((*gdk.Atom)(unsafe.Pointer(_arg1)), _arg2)
	runtime.SetFinalizer(&_targets, func(v *[]gdk.Atom) {
		C.free(unsafe.Pointer(&(*v)[0]))
	})
	if _cret != 0 {
		_ok = true
	}

	return _targets, _ok
}

func (c clipboard) WaitForTextClipboard() string {
	var _arg0 *C.GtkClipboard // out
	var _cret *C.gchar        // in

	_arg0 = (*C.GtkClipboard)(unsafe.Pointer(c.Native()))

	_cret = C.gtk_clipboard_wait_for_text(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

func (c clipboard) WaitForUrisClipboard() []string {
	var _arg0 *C.GtkClipboard // out
	var _cret **C.gchar

	_arg0 = (*C.GtkClipboard)(unsafe.Pointer(c.Native()))

	_cret = C.gtk_clipboard_wait_for_uris(_arg0)

	var _utf8s []string

	{
		var i int
		var z *C.gchar
		for p := _cret; *p != z; p = &unsafe.Slice(p, i+1)[i] {
			i++
		}

		src := unsafe.Slice(_cret, i)
		_utf8s = make([]string, i)
		for i := range src {
			_utf8s[i] = C.GoString(src[i])
			defer C.free(unsafe.Pointer(src[i]))
		}
	}

	return _utf8s
}

func (c clipboard) WaitIsImageAvailableClipboard() bool {
	var _arg0 *C.GtkClipboard // out
	var _cret C.gboolean      // in

	_arg0 = (*C.GtkClipboard)(unsafe.Pointer(c.Native()))

	_cret = C.gtk_clipboard_wait_is_image_available(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (c clipboard) WaitIsRichTextAvailableClipboard(buffer TextBuffer) bool {
	var _arg0 *C.GtkClipboard  // out
	var _arg1 *C.GtkTextBuffer // out
	var _cret C.gboolean       // in

	_arg0 = (*C.GtkClipboard)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.GtkTextBuffer)(unsafe.Pointer(buffer.Native()))

	_cret = C.gtk_clipboard_wait_is_rich_text_available(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (c clipboard) WaitIsTargetAvailableClipboard(target *gdk.Atom) bool {
	var _arg0 *C.GtkClipboard // out
	var _arg1 C.GdkAtom       // out
	var _cret C.gboolean      // in

	_arg0 = (*C.GtkClipboard)(unsafe.Pointer(c.Native()))
	{
		var refTmpIn *gdk.Atom
		var refTmpOut *C.GdkAtom

		refTmpIn = target

		refTmpOut = (*C.GdkAtom)(unsafe.Pointer(refTmpIn.Native()))

		_arg1 = *refTmpOut
	}

	_cret = C.gtk_clipboard_wait_is_target_available(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (c clipboard) WaitIsTextAvailableClipboard() bool {
	var _arg0 *C.GtkClipboard // out
	var _cret C.gboolean      // in

	_arg0 = (*C.GtkClipboard)(unsafe.Pointer(c.Native()))

	_cret = C.gtk_clipboard_wait_is_text_available(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (c clipboard) WaitIsUrisAvailableClipboard() bool {
	var _arg0 *C.GtkClipboard // out
	var _cret C.gboolean      // in

	_arg0 = (*C.GtkClipboard)(unsafe.Pointer(c.Native()))

	_cret = C.gtk_clipboard_wait_is_uris_available(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}
