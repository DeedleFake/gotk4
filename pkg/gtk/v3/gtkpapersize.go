// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_paper_size_get_type()), F: marshalPaperSize},
	})
}

// PaperSize handles paper sizes. It uses the standard called PWG 5101.1-2002
// PWG: Standard for Media Standardized Names
// (http://www.pwg.org/standards.html) to name the paper sizes (and to get the
// data for the page sizes). In addition to standard paper sizes, GtkPaperSize
// allows to construct custom paper sizes with arbitrary dimensions.
//
// The PaperSize object stores not only the dimensions (width and height) of a
// paper size and its name, it also provides default [print
// margins][print-margins].
//
// Printing support has been added in GTK+ 2.10.
type PaperSize struct {
	native C.GtkPaperSize
}

func marshalPaperSize(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return (*PaperSize)(unsafe.Pointer(b)), nil
}

// NewPaperSize constructs a struct PaperSize.
func NewPaperSize(name string) *PaperSize {
	var _arg1 *C.gchar        // out
	var _cret *C.GtkPaperSize // in

	_arg1 = (*C.gchar)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_paper_size_new(_arg1)

	var _paperSize *PaperSize // out

	_paperSize = (*PaperSize)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(_paperSize, func(v *PaperSize) {
		C.gtk_paper_size_free((*C.GtkPaperSize)(unsafe.Pointer(v)))
	})

	return _paperSize
}

// NewPaperSizeFromGVariant constructs a struct PaperSize.
func NewPaperSizeFromGVariant(variant *glib.Variant) *PaperSize {
	var _arg1 *C.GVariant     // out
	var _cret *C.GtkPaperSize // in

	_arg1 = (*C.GVariant)(unsafe.Pointer(variant))

	_cret = C.gtk_paper_size_new_from_gvariant(_arg1)

	var _paperSize *PaperSize // out

	_paperSize = (*PaperSize)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(_paperSize, func(v *PaperSize) {
		C.gtk_paper_size_free((*C.GtkPaperSize)(unsafe.Pointer(v)))
	})

	return _paperSize
}

// NewPaperSizeFromIpp constructs a struct PaperSize.
func NewPaperSizeFromIpp(ippName string, width float64, height float64) *PaperSize {
	var _arg1 *C.gchar        // out
	var _arg2 C.gdouble       // out
	var _arg3 C.gdouble       // out
	var _cret *C.GtkPaperSize // in

	_arg1 = (*C.gchar)(C.CString(ippName))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.gdouble(width)
	_arg3 = C.gdouble(height)

	_cret = C.gtk_paper_size_new_from_ipp(_arg1, _arg2, _arg3)

	var _paperSize *PaperSize // out

	_paperSize = (*PaperSize)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(_paperSize, func(v *PaperSize) {
		C.gtk_paper_size_free((*C.GtkPaperSize)(unsafe.Pointer(v)))
	})

	return _paperSize
}

// NewPaperSizeFromKeyFile constructs a struct PaperSize.
func NewPaperSizeFromKeyFile(keyFile *glib.KeyFile, groupName string) (*PaperSize, error) {
	var _arg1 *C.GKeyFile     // out
	var _arg2 *C.gchar        // out
	var _cret *C.GtkPaperSize // in
	var _cerr *C.GError       // in

	_arg1 = (*C.GKeyFile)(unsafe.Pointer(keyFile))
	_arg2 = (*C.gchar)(C.CString(groupName))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.gtk_paper_size_new_from_key_file(_arg1, _arg2, &_cerr)

	var _paperSize *PaperSize // out
	var _goerr error          // out

	_paperSize = (*PaperSize)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(_paperSize, func(v *PaperSize) {
		C.gtk_paper_size_free((*C.GtkPaperSize)(unsafe.Pointer(v)))
	})
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _paperSize, _goerr
}

// NewPaperSizeFromPpd constructs a struct PaperSize.
func NewPaperSizeFromPpd(ppdName string, ppdDisplayName string, width float64, height float64) *PaperSize {
	var _arg1 *C.gchar        // out
	var _arg2 *C.gchar        // out
	var _arg3 C.gdouble       // out
	var _arg4 C.gdouble       // out
	var _cret *C.GtkPaperSize // in

	_arg1 = (*C.gchar)(C.CString(ppdName))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(ppdDisplayName))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = C.gdouble(width)
	_arg4 = C.gdouble(height)

	_cret = C.gtk_paper_size_new_from_ppd(_arg1, _arg2, _arg3, _arg4)

	var _paperSize *PaperSize // out

	_paperSize = (*PaperSize)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(_paperSize, func(v *PaperSize) {
		C.gtk_paper_size_free((*C.GtkPaperSize)(unsafe.Pointer(v)))
	})

	return _paperSize
}

// Native returns the underlying C source pointer.
func (p *PaperSize) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

// Copy copies an existing PaperSize.
func (other *PaperSize) Copy() *PaperSize {
	var _arg0 *C.GtkPaperSize // out
	var _cret *C.GtkPaperSize // in

	_arg0 = (*C.GtkPaperSize)(unsafe.Pointer(other))

	_cret = C.gtk_paper_size_copy(_arg0)

	var _paperSize *PaperSize // out

	_paperSize = (*PaperSize)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(_paperSize, func(v *PaperSize) {
		C.gtk_paper_size_free((*C.GtkPaperSize)(unsafe.Pointer(v)))
	})

	return _paperSize
}

// Free: free the given PaperSize object.
func (size *PaperSize) free() {
	var _arg0 *C.GtkPaperSize // out

	_arg0 = (*C.GtkPaperSize)(unsafe.Pointer(size))

	C.gtk_paper_size_free(_arg0)
}

// DisplayName gets the human-readable name of the PaperSize.
func (size *PaperSize) DisplayName() string {
	var _arg0 *C.GtkPaperSize // out
	var _cret *C.gchar        // in

	_arg0 = (*C.GtkPaperSize)(unsafe.Pointer(size))

	_cret = C.gtk_paper_size_get_display_name(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(_cret))

	return _utf8
}

// Name gets the name of the PaperSize.
func (size *PaperSize) Name() string {
	var _arg0 *C.GtkPaperSize // out
	var _cret *C.gchar        // in

	_arg0 = (*C.GtkPaperSize)(unsafe.Pointer(size))

	_cret = C.gtk_paper_size_get_name(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(_cret))

	return _utf8
}

// PpdName gets the PPD name of the PaperSize, which may be nil.
func (size *PaperSize) PpdName() string {
	var _arg0 *C.GtkPaperSize // out
	var _cret *C.gchar        // in

	_arg0 = (*C.GtkPaperSize)(unsafe.Pointer(size))

	_cret = C.gtk_paper_size_get_ppd_name(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(_cret))

	return _utf8
}

// IsCustom returns true if @size is not a standard paper size.
func (size *PaperSize) IsCustom() bool {
	var _arg0 *C.GtkPaperSize // out
	var _cret C.gboolean      // in

	_arg0 = (*C.GtkPaperSize)(unsafe.Pointer(size))

	_cret = C.gtk_paper_size_is_custom(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// IsEqual compares two PaperSize objects.
func (size1 *PaperSize) IsEqual(size2 *PaperSize) bool {
	var _arg0 *C.GtkPaperSize // out
	var _arg1 *C.GtkPaperSize // out
	var _cret C.gboolean      // in

	_arg0 = (*C.GtkPaperSize)(unsafe.Pointer(size1))
	_arg1 = (*C.GtkPaperSize)(unsafe.Pointer(size2))

	_cret = C.gtk_paper_size_is_equal(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// IsIpp returns true if @size is an IPP standard paper size.
func (size *PaperSize) IsIpp() bool {
	var _arg0 *C.GtkPaperSize // out
	var _cret C.gboolean      // in

	_arg0 = (*C.GtkPaperSize)(unsafe.Pointer(size))

	_cret = C.gtk_paper_size_is_ipp(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// ToGVariant: serialize a paper size to an a{sv} variant.
func (paperSize *PaperSize) ToGVariant() *glib.Variant {
	var _arg0 *C.GtkPaperSize // out
	var _cret *C.GVariant     // in

	_arg0 = (*C.GtkPaperSize)(unsafe.Pointer(paperSize))

	_cret = C.gtk_paper_size_to_gvariant(_arg0)

	var _variant *glib.Variant // out

	_variant = (*glib.Variant)(unsafe.Pointer(_cret))
	C.g_variant_ref(_cret)
	runtime.SetFinalizer(_variant, func(v *glib.Variant) {
		C.g_variant_unref((*C.GVariant)(unsafe.Pointer(v)))
	})

	return _variant
}

// ToKeyFile: this function adds the paper size from @size to @key_file.
func (size *PaperSize) ToKeyFile(keyFile *glib.KeyFile, groupName string) {
	var _arg0 *C.GtkPaperSize // out
	var _arg1 *C.GKeyFile     // out
	var _arg2 *C.gchar        // out

	_arg0 = (*C.GtkPaperSize)(unsafe.Pointer(size))
	_arg1 = (*C.GKeyFile)(unsafe.Pointer(keyFile))
	_arg2 = (*C.gchar)(C.CString(groupName))
	defer C.free(unsafe.Pointer(_arg2))

	C.gtk_paper_size_to_key_file(_arg0, _arg1, _arg2)
}
