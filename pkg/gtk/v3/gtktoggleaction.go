// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_toggle_action_get_type()), F: marshalToggleAction},
	})
}

// ToggleAction: a ToggleAction corresponds roughly to a CheckMenuItem. It has
// an “active” state specifying whether the action has been checked or not.
type ToggleAction interface {
	Action
	Buildable

	// Active returns the checked state of the toggle action.
	Active() bool
	// DrawAsRadio returns whether the action should have proxies like a radio
	// action.
	DrawAsRadio() bool
	// SetActive sets the checked state on the toggle action.
	SetActive(isActive bool)
	// SetDrawAsRadio sets whether the action should have proxies like a radio
	// action.
	SetDrawAsRadio(drawAsRadio bool)
	// Toggled emits the “toggled” signal on the toggle action.
	Toggled()
}

// toggleAction implements the ToggleAction interface.
type toggleAction struct {
	Action
	Buildable
}

var _ ToggleAction = (*toggleAction)(nil)

// WrapToggleAction wraps a GObject to the right type. It is
// primarily used internally.
func WrapToggleAction(obj *externglib.Object) ToggleAction {
	return ToggleAction{
		Action:    WrapAction(obj),
		Buildable: WrapBuildable(obj),
	}
}

func marshalToggleAction(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapToggleAction(obj), nil
}

// NewToggleAction constructs a class ToggleAction.
func NewToggleAction(name string, label string, tooltip string, stockId string) ToggleAction {
	var arg1 *C.gchar
	var arg2 *C.gchar
	var arg3 *C.gchar
	var arg4 *C.gchar

	arg1 = (*C.gchar)(C.CString(name))
	defer C.free(unsafe.Pointer(arg1))
	arg2 = (*C.gchar)(C.CString(label))
	defer C.free(unsafe.Pointer(arg2))
	arg3 = (*C.gchar)(C.CString(tooltip))
	defer C.free(unsafe.Pointer(arg3))
	arg4 = (*C.gchar)(C.CString(stockId))
	defer C.free(unsafe.Pointer(arg4))

	var cret C.GtkToggleAction

	cret = C.gtk_toggle_action_new(arg1, arg2, arg3, arg4)

	var toggleAction ToggleAction

	toggleAction = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(cret.Native()))).(ToggleAction)

	return toggleAction
}

// Active returns the checked state of the toggle action.
func (a toggleAction) Active() bool {
	var arg0 *C.GtkToggleAction

	arg0 = (*C.GtkToggleAction)(unsafe.Pointer(a.Native()))

	var cret C.gboolean

	cret = C.gtk_toggle_action_get_active(arg0)

	var ok bool

	if cret {
		ok = true
	}

	return ok
}

// DrawAsRadio returns whether the action should have proxies like a radio
// action.
func (a toggleAction) DrawAsRadio() bool {
	var arg0 *C.GtkToggleAction

	arg0 = (*C.GtkToggleAction)(unsafe.Pointer(a.Native()))

	var cret C.gboolean

	cret = C.gtk_toggle_action_get_draw_as_radio(arg0)

	var ok bool

	if cret {
		ok = true
	}

	return ok
}

// SetActive sets the checked state on the toggle action.
func (a toggleAction) SetActive(isActive bool) {
	var arg0 *C.GtkToggleAction
	var arg1 C.gboolean

	arg0 = (*C.GtkToggleAction)(unsafe.Pointer(a.Native()))
	if isActive {
		arg1 = C.gboolean(1)
	}

	C.gtk_toggle_action_set_active(arg0, arg1)
}

// SetDrawAsRadio sets whether the action should have proxies like a radio
// action.
func (a toggleAction) SetDrawAsRadio(drawAsRadio bool) {
	var arg0 *C.GtkToggleAction
	var arg1 C.gboolean

	arg0 = (*C.GtkToggleAction)(unsafe.Pointer(a.Native()))
	if drawAsRadio {
		arg1 = C.gboolean(1)
	}

	C.gtk_toggle_action_set_draw_as_radio(arg0, arg1)
}

// Toggled emits the “toggled” signal on the toggle action.
func (a toggleAction) Toggled() {
	var arg0 *C.GtkToggleAction

	arg0 = (*C.GtkToggleAction)(unsafe.Pointer(a.Native()))

	C.gtk_toggle_action_toggled(arg0)
}
