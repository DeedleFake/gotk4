// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/cairo"
	"github.com/diamondburned/gotk4/pkg/core/box"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
	"github.com/diamondburned/gotk4/pkg/gdkpixbuf/v2"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
	"github.com/diamondburned/gotk4/pkg/pango"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_app_chooser_get_type()), F: marshalAppChooser},
	})
}

// AppChooser is an interface that can be implemented by widgets which allow the
// user to choose an application (typically for the purpose of opening a file).
// The main objects that implement this interface are AppChooserWidget,
// AppChooserDialog and AppChooserButton.
//
// Applications are represented by GIO Info objects here. GIO has a concept of
// recommended and fallback applications for a given content type. Recommended
// applications are those that claim to handle the content type itself, while
// fallback also includes applications that handle a more generic content type.
// GIO also knows the default and last-used application for a given content
// type. The AppChooserWidget provides detailed control over whether the shown
// list of applications should include default, recommended or fallback
// applications.
//
// To obtain the application that has been selected in a AppChooser, use
// gtk_app_chooser_get_app_info().
type AppChooser interface {
	gextras.Objector

	// AsWidget casts the class to the Widget interface.
	AsWidget() Widget

	// Activate: for widgets that can be “activated” (buttons, menu items, etc.)
	// this function activates them. Activation is what happens when you press
	// Enter on a widget during key navigation. If @widget isn't activatable,
	// the function returns false.
	//
	// This method is inherited from Widget
	Activate() bool
	// AddAccelerator installs an accelerator for this @widget in @accel_group
	// that causes @accel_signal to be emitted if the accelerator is activated.
	// The @accel_group needs to be added to the widget’s toplevel via
	// gtk_window_add_accel_group(), and the signal must be of type
	// G_SIGNAL_ACTION. Accelerators added through this function are not user
	// changeable during runtime. If you want to support accelerators that can
	// be changed by the user, use gtk_accel_map_add_entry() and
	// gtk_widget_set_accel_path() or gtk_menu_item_set_accel_path() instead.
	//
	// This method is inherited from Widget
	AddAccelerator(accelSignal string, accelGroup AccelGroup, accelKey uint, accelMods gdk.ModifierType, accelFlags AccelFlags)
	// AddDeviceEvents adds the device events in the bitfield @events to the
	// event mask for @widget. See gtk_widget_set_device_events() for details.
	//
	// This method is inherited from Widget
	AddDeviceEvents(device gdk.Device, events gdk.EventMask)
	// AddEvents adds the events in the bitfield @events to the event mask for
	// @widget. See gtk_widget_set_events() and the [input handling
	// overview][event-masks] for details.
	//
	// This method is inherited from Widget
	AddEvents(events int)
	// AddMnemonicLabel adds a widget to the list of mnemonic labels for this
	// widget. (See gtk_widget_list_mnemonic_labels()). Note the list of
	// mnemonic labels for the widget is cleared when the widget is destroyed,
	// so the caller must make sure to update its internal state at this point
	// as well, by using a connection to the Widget::destroy signal or a weak
	// notifier.
	//
	// This method is inherited from Widget
	AddMnemonicLabel(label Widget)
	// CanActivateAccel determines whether an accelerator that activates the
	// signal identified by @signal_id can currently be activated. This is done
	// by emitting the Widget::can-activate-accel signal on @widget; if the
	// signal isn’t overridden by a handler or in a derived widget, then the
	// default check is that the widget must be sensitive, and the widget and
	// all its ancestors mapped.
	//
	// This method is inherited from Widget
	CanActivateAccel(signalId uint) bool
	// ChildFocus: this function is used by custom widget implementations; if
	// you're writing an app, you’d use gtk_widget_grab_focus() to move the
	// focus to a particular widget, and gtk_container_set_focus_chain() to
	// change the focus tab order. So you may want to investigate those
	// functions instead.
	//
	// gtk_widget_child_focus() is called by containers as the user moves around
	// the window using keyboard shortcuts. @direction indicates what kind of
	// motion is taking place (up, down, left, right, tab forward, tab
	// backward). gtk_widget_child_focus() emits the Widget::focus signal;
	// widgets override the default handler for this signal in order to
	// implement appropriate focus behavior.
	//
	// The default ::focus handler for a widget should return true if moving in
	// @direction left the focus on a focusable location inside that widget, and
	// false if moving in @direction moved the focus outside the widget. If
	// returning true, widgets normally call gtk_widget_grab_focus() to place
	// the focus accordingly; if returning false, they don’t modify the current
	// focus location.
	//
	// This method is inherited from Widget
	ChildFocus(direction DirectionType) bool
	// ChildNotify emits a Widget::child-notify signal for the [child
	// property][child-properties] @child_property on @widget.
	//
	// This is the analogue of g_object_notify() for child properties.
	//
	// Also see gtk_container_child_notify().
	//
	// This method is inherited from Widget
	ChildNotify(childProperty string)
	// ClassPath: same as gtk_widget_path(), but always uses the name of a
	// widget’s type, never uses a custom name set with gtk_widget_set_name().
	//
	// Deprecated: since version 3.0.
	//
	// This method is inherited from Widget
	ClassPath() (pathLength uint, path string, pathReversed string)
	// ComputeExpand computes whether a container should give this widget extra
	// space when possible. Containers should check this, rather than looking at
	// gtk_widget_get_hexpand() or gtk_widget_get_vexpand().
	//
	// This function already checks whether the widget is visible, so visibility
	// does not need to be checked separately. Non-visible widgets are not
	// expanded.
	//
	// The computed expand value uses either the expand setting explicitly set
	// on the widget itself, or, if none has been explicitly set, the widget may
	// expand if some of its children do.
	//
	// This method is inherited from Widget
	ComputeExpand(orientation Orientation) bool
	// CreatePangoContext creates a new Context with the appropriate font map,
	// font options, font description, and base direction for drawing text for
	// this widget. See also gtk_widget_get_pango_context().
	//
	// This method is inherited from Widget
	CreatePangoContext() pango.Context
	// CreatePangoLayout creates a new Layout with the appropriate font map,
	// font description, and base direction for drawing text for this widget.
	//
	// If you keep a Layout created in this way around, you need to re-create it
	// when the widget Context is replaced. This can be tracked by using the
	// Widget::screen-changed signal on the widget.
	//
	// This method is inherited from Widget
	CreatePangoLayout(text string) pango.Layout
	// Destroy destroys a widget.
	//
	// When a widget is destroyed all references it holds on other objects will
	// be released:
	//
	//    - if the widget is inside a container, it will be removed from its
	//    parent
	//    - if the widget is a container, all its children will be destroyed,
	//    recursively
	//    - if the widget is a top level, it will be removed from the list
	//    of top level widgets that GTK+ maintains internally
	//
	// It's expected that all references held on the widget will also be
	// released; you should connect to the Widget::destroy signal if you hold a
	// reference to @widget and you wish to remove it when this function is
	// called. It is not necessary to do so if you are implementing a Container,
	// as you'll be able to use the ContainerClass.remove() virtual function for
	// that.
	//
	// It's important to notice that gtk_widget_destroy() will only cause the
	// @widget to be finalized if no additional references, acquired using
	// g_object_ref(), are held on it. In case additional references are in
	// place, the @widget will be in an "inert" state after calling this
	// function; @widget will still point to valid memory, allowing you to
	// release the references you hold, but you may not query the widget's own
	// state.
	//
	// You should typically call this function on top level widgets, and rarely
	// on child widgets.
	//
	// See also: gtk_container_remove()
	//
	// This method is inherited from Widget
	Destroy()
	// DeviceIsShadowed returns true if @device has been shadowed by a GTK+
	// device grab on another widget, so it would stop sending events to
	// @widget. This may be used in the Widget::grab-notify signal to check for
	// specific devices. See gtk_device_grab_add().
	//
	// This method is inherited from Widget
	DeviceIsShadowed(device gdk.Device) bool
	// DragCheckThreshold checks to see if a mouse drag starting at (@start_x,
	// @start_y) and ending at (@current_x, @current_y) has passed the GTK+ drag
	// threshold, and thus should trigger the beginning of a drag-and-drop
	// operation.
	//
	// This method is inherited from Widget
	DragCheckThreshold(startX int, startY int, currentX int, currentY int) bool
	// DragDestAddImageTargets: add the image targets supported by SelectionData
	// to the target list of the drag destination. The targets are added with
	// @info = 0. If you need another value, use
	// gtk_target_list_add_image_targets() and gtk_drag_dest_set_target_list().
	//
	// This method is inherited from Widget
	DragDestAddImageTargets()
	// DragDestAddTextTargets: add the text targets supported by SelectionData
	// to the target list of the drag destination. The targets are added with
	// @info = 0. If you need another value, use
	// gtk_target_list_add_text_targets() and gtk_drag_dest_set_target_list().
	//
	// This method is inherited from Widget
	DragDestAddTextTargets()
	// DragDestAddURITargets: add the URI targets supported by SelectionData to
	// the target list of the drag destination. The targets are added with @info
	// = 0. If you need another value, use gtk_target_list_add_uri_targets() and
	// gtk_drag_dest_set_target_list().
	//
	// This method is inherited from Widget
	DragDestAddURITargets()
	// DragDestGetTargetList returns the list of targets this widget can accept
	// from drag-and-drop.
	//
	// This method is inherited from Widget
	DragDestGetTargetList() *TargetList
	// DragDestGetTrackMotion returns whether the widget has been configured to
	// always emit Widget::drag-motion signals.
	//
	// This method is inherited from Widget
	DragDestGetTrackMotion() bool
	// DragDestSet sets a widget as a potential drop destination, and adds
	// default behaviors.
	//
	// The default behaviors listed in @flags have an effect similar to
	// installing default handlers for the widget’s drag-and-drop signals
	// (Widget::drag-motion, Widget::drag-drop, ...). They all exist for
	// convenience. When passing K_DEST_DEFAULT_ALL for instance it is
	// sufficient to connect to the widget’s Widget::drag-data-received signal
	// to get primitive, but consistent drag-and-drop support.
	//
	// Things become more complicated when you try to preview the dragged data,
	// as described in the documentation for Widget::drag-motion. The default
	// behaviors described by @flags make some assumptions, that can conflict
	// with your own signal handlers. For instance K_DEST_DEFAULT_DROP causes
	// invokations of gdk_drag_status() in the context of Widget::drag-motion,
	// and invokations of gtk_drag_finish() in Widget::drag-data-received.
	// Especially the later is dramatic, when your own Widget::drag-motion
	// handler calls gtk_drag_get_data() to inspect the dragged data.
	//
	// There’s no way to set a default action here, you can use the
	// Widget::drag-motion callback for that. Here’s an example which selects
	// the action to use depending on whether the control key is pressed or not:
	//
	//    static void
	//    drag_motion (GtkWidget *widget,
	//                 GdkDragContext *context,
	//                 gint x,
	//                 gint y,
	//                 guint time)
	//    {
	//      GdkModifierType mask;
	//
	//      gdk_window_get_pointer (gtk_widget_get_window (widget),
	//                              NULL, NULL, &mask);
	//      if (mask & GDK_CONTROL_MASK)
	//        gdk_drag_status (context, GDK_ACTION_COPY, time);
	//      else
	//        gdk_drag_status (context, GDK_ACTION_MOVE, time);
	//    }
	//
	// This method is inherited from Widget
	DragDestSet(flags DestDefaults, targets []TargetEntry, actions gdk.DragAction)
	// DragDestSetProxy sets this widget as a proxy for drops to another window.
	//
	// Deprecated: since version 3.22.
	//
	// This method is inherited from Widget
	DragDestSetProxy(proxyWindow gdk.Window, protocol gdk.DragProtocol, useCoordinates bool)
	// DragDestSetTargetList sets the target types that this widget can accept
	// from drag-and-drop. The widget must first be made into a drag destination
	// with gtk_drag_dest_set().
	//
	// This method is inherited from Widget
	DragDestSetTargetList(targetList *TargetList)
	// DragDestSetTrackMotion tells the widget to emit Widget::drag-motion and
	// Widget::drag-leave events regardless of the targets and the
	// GTK_DEST_DEFAULT_MOTION flag.
	//
	// This may be used when a widget wants to do generic actions regardless of
	// the targets that the source offers.
	//
	// This method is inherited from Widget
	DragDestSetTrackMotion(trackMotion bool)
	// DragDestUnset clears information about a drop destination set with
	// gtk_drag_dest_set(). The widget will no longer receive notification of
	// drags.
	//
	// This method is inherited from Widget
	DragDestUnset()
	// DragHighlight highlights a widget as a currently hovered drop target. To
	// end the highlight, call gtk_drag_unhighlight(). GTK+ calls this
	// automatically if GTK_DEST_DEFAULT_HIGHLIGHT is set.
	//
	// This method is inherited from Widget
	DragHighlight()
	// DragSourceAddImageTargets: add the writable image targets supported by
	// SelectionData to the target list of the drag source. The targets are
	// added with @info = 0. If you need another value, use
	// gtk_target_list_add_image_targets() and
	// gtk_drag_source_set_target_list().
	//
	// This method is inherited from Widget
	DragSourceAddImageTargets()
	// DragSourceAddTextTargets: add the text targets supported by SelectionData
	// to the target list of the drag source. The targets are added with @info =
	// 0. If you need another value, use gtk_target_list_add_text_targets() and
	// gtk_drag_source_set_target_list().
	//
	// This method is inherited from Widget
	DragSourceAddTextTargets()
	// DragSourceAddURITargets: add the URI targets supported by SelectionData
	// to the target list of the drag source. The targets are added with @info =
	// 0. If you need another value, use gtk_target_list_add_uri_targets() and
	// gtk_drag_source_set_target_list().
	//
	// This method is inherited from Widget
	DragSourceAddURITargets()
	// DragSourceGetTargetList gets the list of targets this widget can provide
	// for drag-and-drop.
	//
	// This method is inherited from Widget
	DragSourceGetTargetList() *TargetList
	// DragSourceSet sets up a widget so that GTK+ will start a drag operation
	// when the user clicks and drags on the widget. The widget must have a
	// window.
	//
	// This method is inherited from Widget
	DragSourceSet(startButtonMask gdk.ModifierType, targets []TargetEntry, actions gdk.DragAction)
	// DragSourceSetIconName sets the icon that will be used for drags from a
	// particular source to a themed icon. See the docs for IconTheme for more
	// details.
	//
	// This method is inherited from Widget
	DragSourceSetIconName(iconName string)
	// DragSourceSetIconPixbuf sets the icon that will be used for drags from a
	// particular widget from a Pixbuf. GTK+ retains a reference for @pixbuf and
	// will release it when it is no longer needed.
	//
	// This method is inherited from Widget
	DragSourceSetIconPixbuf(pixbuf gdkpixbuf.Pixbuf)
	// DragSourceSetIconStock sets the icon that will be used for drags from a
	// particular source to a stock icon.
	//
	// Deprecated: since version 3.10.
	//
	// This method is inherited from Widget
	DragSourceSetIconStock(stockId string)
	// DragSourceSetTargetList changes the target types that this widget offers
	// for drag-and-drop. The widget must first be made into a drag source with
	// gtk_drag_source_set().
	//
	// This method is inherited from Widget
	DragSourceSetTargetList(targetList *TargetList)
	// DragSourceUnset undoes the effects of gtk_drag_source_set().
	//
	// This method is inherited from Widget
	DragSourceUnset()
	// DragUnhighlight removes a highlight set by gtk_drag_highlight() from a
	// widget.
	//
	// This method is inherited from Widget
	DragUnhighlight()
	// Draw draws @widget to @cr. The top left corner of the widget will be
	// drawn to the currently set origin point of @cr.
	//
	// You should pass a cairo context as @cr argument that is in an original
	// state. Otherwise the resulting drawing is undefined. For example changing
	// the operator using cairo_set_operator() or the line width using
	// cairo_set_line_width() might have unwanted side effects. You may however
	// change the context’s transform matrix - like with cairo_scale(),
	// cairo_translate() or cairo_set_matrix() and clip region with cairo_clip()
	// prior to calling this function. Also, it is fine to modify the context
	// with cairo_save() and cairo_push_group() prior to calling this function.
	//
	// Note that special-purpose widgets may contain special code for rendering
	// to the screen and might appear differently on screen and when rendered
	// using gtk_widget_draw().
	//
	// This method is inherited from Widget
	Draw(cr *cairo.Context)
	// EnsureStyle ensures that @widget has a style (@widget->style).
	//
	// Not a very useful function; most of the time, if you want the style, the
	// widget is realized, and realized widgets are guaranteed to have a style
	// already.
	//
	// Deprecated: since version 3.0.
	//
	// This method is inherited from Widget
	EnsureStyle()
	// ErrorBell notifies the user about an input-related error on this widget.
	// If the Settings:gtk-error-bell setting is true, it calls
	// gdk_window_beep(), otherwise it does nothing.
	//
	// Note that the effect of gdk_window_beep() can be configured in many ways,
	// depending on the windowing backend and the desktop environment or window
	// manager that is used.
	//
	// This method is inherited from Widget
	ErrorBell()
	// FreezeChildNotify stops emission of Widget::child-notify signals on
	// @widget. The signals are queued until gtk_widget_thaw_child_notify() is
	// called on @widget.
	//
	// This is the analogue of g_object_freeze_notify() for child properties.
	//
	// This method is inherited from Widget
	FreezeChildNotify()
	// GetAccessible returns the accessible object that describes the widget to
	// an assistive technology.
	//
	// If accessibility support is not available, this Object instance may be a
	// no-op. Likewise, if no class-specific Object implementation is available
	// for the widget instance in question, it will inherit an Object
	// implementation from the first ancestor class for which such an
	// implementation is defined.
	//
	// The documentation of the ATK (http://developer.gnome.org/atk/stable/)
	// library contains more information about accessible objects and their
	// uses.
	//
	// This method is inherited from Widget
	GetAccessible() atk.Object
	// GetActionGroup retrieves the Group that was registered using @prefix. The
	// resulting Group may have been registered to @widget or any Widget in its
	// ancestry.
	//
	// If no action group was found matching @prefix, then nil is returned.
	//
	// This method is inherited from Widget
	GetActionGroup(prefix string) gio.ActionGroup
	// GetAllocatedBaseline returns the baseline that has currently been
	// allocated to @widget. This function is intended to be used when
	// implementing handlers for the Widget::draw function, and when allocating
	// child widgets in Widget::size_allocate.
	//
	// This method is inherited from Widget
	GetAllocatedBaseline() int
	// GetAllocatedHeight returns the height that has currently been allocated
	// to @widget. This function is intended to be used when implementing
	// handlers for the Widget::draw function.
	//
	// This method is inherited from Widget
	GetAllocatedHeight() int
	// GetAllocatedWidth returns the width that has currently been allocated to
	// @widget. This function is intended to be used when implementing handlers
	// for the Widget::draw function.
	//
	// This method is inherited from Widget
	GetAllocatedWidth() int
	// GetAncestor gets the first ancestor of @widget with type @widget_type.
	// For example, `gtk_widget_get_ancestor (widget, GTK_TYPE_BOX)` gets the
	// first Box that’s an ancestor of @widget. No reference will be added to
	// the returned widget; it should not be unreferenced. See note about
	// checking for a toplevel Window in the docs for gtk_widget_get_toplevel().
	//
	// Note that unlike gtk_widget_is_ancestor(), gtk_widget_get_ancestor()
	// considers @widget to be an ancestor of itself.
	//
	// This method is inherited from Widget
	GetAncestor(widgetType externglib.Type) Widget
	// GetAppPaintable determines whether the application intends to draw on the
	// widget in an Widget::draw handler.
	//
	// See gtk_widget_set_app_paintable()
	//
	// This method is inherited from Widget
	GetAppPaintable() bool
	// GetCanDefault determines whether @widget can be a default widget. See
	// gtk_widget_set_can_default().
	//
	// This method is inherited from Widget
	GetCanDefault() bool
	// GetCanFocus determines whether @widget can own the input focus. See
	// gtk_widget_set_can_focus().
	//
	// This method is inherited from Widget
	GetCanFocus() bool
	// GetChildRequisition: this function is only for use in widget
	// implementations. Obtains @widget->requisition, unless someone has forced
	// a particular geometry on the widget (e.g. with
	// gtk_widget_set_size_request()), in which case it returns that geometry
	// instead of the widget's requisition.
	//
	// This function differs from gtk_widget_size_request() in that it retrieves
	// the last size request value from @widget->requisition, while
	// gtk_widget_size_request() actually calls the "size_request" method on
	// @widget to compute the size request and fill in @widget->requisition, and
	// only then returns @widget->requisition.
	//
	// Because this function does not call the “size_request” method, it can
	// only be used when you know that @widget->requisition is up-to-date, that
	// is, gtk_widget_size_request() has been called since the last time a
	// resize was queued. In general, only container implementations have this
	// information; applications should use gtk_widget_size_request().
	//
	// Deprecated: since version 3.0.
	//
	// This method is inherited from Widget
	GetChildRequisition() Requisition
	// GetChildVisible gets the value set with gtk_widget_set_child_visible().
	// If you feel a need to use this function, your code probably needs
	// reorganization.
	//
	// This function is only useful for container implementations and never
	// should be called by an application.
	//
	// This method is inherited from Widget
	GetChildVisible() bool
	// GetCompositeName obtains the composite name of a widget.
	//
	// Deprecated: since version 3.10.
	//
	// This method is inherited from Widget
	GetCompositeName() string
	// GetDeviceEnabled returns whether @device can interact with @widget and
	// its children. See gtk_widget_set_device_enabled().
	//
	// This method is inherited from Widget
	GetDeviceEnabled(device gdk.Device) bool
	// GetDeviceEvents returns the events mask for the widget corresponding to
	// an specific device. These are the events that the widget will receive
	// when @device operates on it.
	//
	// This method is inherited from Widget
	GetDeviceEvents(device gdk.Device) gdk.EventMask
	// GetDirection gets the reading direction for a particular widget. See
	// gtk_widget_set_direction().
	//
	// This method is inherited from Widget
	GetDirection() TextDirection
	// GetDisplay: get the Display for the toplevel window associated with this
	// widget. This function can only be called after the widget has been added
	// to a widget hierarchy with a Window at the top.
	//
	// In general, you should only create display specific resources when a
	// widget has been realized, and you should free those resources when the
	// widget is unrealized.
	//
	// This method is inherited from Widget
	GetDisplay() gdk.Display
	// GetDoubleBuffered determines whether the widget is double buffered.
	//
	// See gtk_widget_set_double_buffered()
	//
	// This method is inherited from Widget
	GetDoubleBuffered() bool
	// GetEvents returns the event mask (see EventMask) for the widget. These
	// are the events that the widget will receive.
	//
	// Note: Internally, the widget event mask will be the logical OR of the
	// event mask set through gtk_widget_set_events() or
	// gtk_widget_add_events(), and the event mask necessary to cater for every
	// EventController created for the widget.
	//
	// This method is inherited from Widget
	GetEvents() int
	// GetFocusOnClick returns whether the widget should grab focus when it is
	// clicked with the mouse. See gtk_widget_set_focus_on_click().
	//
	// This method is inherited from Widget
	GetFocusOnClick() bool
	// GetFontMap gets the font map that has been set with
	// gtk_widget_set_font_map().
	//
	// This method is inherited from Widget
	GetFontMap() pango.FontMap
	// GetFontOptions returns the #cairo_font_options_t used for Pango
	// rendering. When not set, the defaults font options for the Screen will be
	// used.
	//
	// This method is inherited from Widget
	GetFontOptions() *cairo.FontOptions
	// GetFrameClock obtains the frame clock for a widget. The frame clock is a
	// global “ticker” that can be used to drive animations and repaints. The
	// most common reason to get the frame clock is to call
	// gdk_frame_clock_get_frame_time(), in order to get a time to use for
	// animating. For example you might record the start of the animation with
	// an initial value from gdk_frame_clock_get_frame_time(), and then update
	// the animation by calling gdk_frame_clock_get_frame_time() again during
	// each repaint.
	//
	// gdk_frame_clock_request_phase() will result in a new frame on the clock,
	// but won’t necessarily repaint any widgets. To repaint a widget, you have
	// to use gtk_widget_queue_draw() which invalidates the widget (thus
	// scheduling it to receive a draw on the next frame).
	// gtk_widget_queue_draw() will also end up requesting a frame on the
	// appropriate frame clock.
	//
	// A widget’s frame clock will not change while the widget is mapped.
	// Reparenting a widget (which implies a temporary unmap) can change the
	// widget’s frame clock.
	//
	// Unrealized widgets do not have a frame clock.
	//
	// This method is inherited from Widget
	GetFrameClock() gdk.FrameClock
	// GetHAlign gets the value of the Widget:halign property.
	//
	// For backwards compatibility reasons this method will never return
	// GTK_ALIGN_BASELINE, but instead it will convert it to GTK_ALIGN_FILL.
	// Baselines are not supported for horizontal alignment.
	//
	// This method is inherited from Widget
	GetHAlign() Align
	// GetHasTooltip returns the current value of the has-tooltip property. See
	// Widget:has-tooltip for more information.
	//
	// This method is inherited from Widget
	GetHasTooltip() bool
	// GetHasWindow determines whether @widget has a Window of its own. See
	// gtk_widget_set_has_window().
	//
	// This method is inherited from Widget
	GetHasWindow() bool
	// GetHExpand gets whether the widget would like any available extra
	// horizontal space. When a user resizes a Window, widgets with expand=TRUE
	// generally receive the extra space. For example, a list or scrollable area
	// or document in your window would often be set to expand.
	//
	// Containers should use gtk_widget_compute_expand() rather than this
	// function, to see whether a widget, or any of its children, has the expand
	// flag set. If any child of a widget wants to expand, the parent may ask to
	// expand also.
	//
	// This function only looks at the widget’s own hexpand flag, rather than
	// computing whether the entire widget tree rooted at this widget wants to
	// expand.
	//
	// This method is inherited from Widget
	GetHExpand() bool
	// GetHExpandSet gets whether gtk_widget_set_hexpand() has been used to
	// explicitly set the expand flag on this widget.
	//
	// If hexpand is set, then it overrides any computed expand value based on
	// child widgets. If hexpand is not set, then the expand value depends on
	// whether any children of the widget would like to expand.
	//
	// There are few reasons to use this function, but it’s here for
	// completeness and consistency.
	//
	// This method is inherited from Widget
	GetHExpandSet() bool
	// GetMapped: whether the widget is mapped.
	//
	// This method is inherited from Widget
	GetMapped() bool
	// GetMarginBottom gets the value of the Widget:margin-bottom property.
	//
	// This method is inherited from Widget
	GetMarginBottom() int
	// GetMarginEnd gets the value of the Widget:margin-end property.
	//
	// This method is inherited from Widget
	GetMarginEnd() int
	// GetMarginLeft gets the value of the Widget:margin-left property.
	//
	// Deprecated: since version 3.12.
	//
	// This method is inherited from Widget
	GetMarginLeft() int
	// GetMarginRight gets the value of the Widget:margin-right property.
	//
	// Deprecated: since version 3.12.
	//
	// This method is inherited from Widget
	GetMarginRight() int
	// GetMarginStart gets the value of the Widget:margin-start property.
	//
	// This method is inherited from Widget
	GetMarginStart() int
	// GetMarginTop gets the value of the Widget:margin-top property.
	//
	// This method is inherited from Widget
	GetMarginTop() int
	// GetModifierMask returns the modifier mask the @widget’s windowing system
	// backend uses for a particular purpose.
	//
	// See gdk_keymap_get_modifier_mask().
	//
	// This method is inherited from Widget
	GetModifierMask(intent gdk.ModifierIntent) gdk.ModifierType
	// GetModifierStyle returns the current modifier style for the widget. (As
	// set by gtk_widget_modify_style().) If no style has previously set, a new
	// RcStyle will be created with all values unset, and set as the modifier
	// style for the widget. If you make changes to this rc style, you must call
	// gtk_widget_modify_style(), passing in the returned rc style, to make sure
	// that your changes take effect.
	//
	// Caution: passing the style back to gtk_widget_modify_style() will
	// normally end up destroying it, because gtk_widget_modify_style() copies
	// the passed-in style and sets the copy as the new modifier style, thus
	// dropping any reference to the old modifier style. Add a reference to the
	// modifier style if you want to keep it alive.
	//
	// Deprecated: since version 3.0.
	//
	// This method is inherited from Widget
	GetModifierStyle() RCStyle
	// GetName retrieves the name of a widget. See gtk_widget_set_name() for the
	// significance of widget names.
	//
	// This method is inherited from Widget
	GetName() string
	// GetNoShowAll returns the current value of the Widget:no-show-all
	// property, which determines whether calls to gtk_widget_show_all() will
	// affect this widget.
	//
	// This method is inherited from Widget
	GetNoShowAll() bool
	// GetOpacity fetches the requested opacity for this widget. See
	// gtk_widget_set_opacity().
	//
	// This method is inherited from Widget
	GetOpacity() float64
	// GetPangoContext gets a Context with the appropriate font map, font
	// description, and base direction for this widget. Unlike the context
	// returned by gtk_widget_create_pango_context(), this context is owned by
	// the widget (it can be used until the screen for the widget changes or the
	// widget is removed from its toplevel), and will be updated to match any
	// changes to the widget’s attributes. This can be tracked by using the
	// Widget::screen-changed signal on the widget.
	//
	// This method is inherited from Widget
	GetPangoContext() pango.Context
	// GetParent returns the parent container of @widget.
	//
	// This method is inherited from Widget
	GetParent() Widget
	// GetParentWindow gets @widget’s parent window, or nil if it does not have
	// one.
	//
	// This method is inherited from Widget
	GetParentWindow() gdk.Window
	// GetPath returns the WidgetPath representing @widget, if the widget is not
	// connected to a toplevel widget, a partial path will be created.
	//
	// This method is inherited from Widget
	GetPath() *WidgetPath
	// GetPointer obtains the location of the mouse pointer in widget
	// coordinates. Widget coordinates are a bit odd; for historical reasons,
	// they are defined as @widget->window coordinates for widgets that return
	// true for gtk_widget_get_has_window(); and are relative to
	// @widget->allocation.x, @widget->allocation.y otherwise.
	//
	// Deprecated: since version 3.4.
	//
	// This method is inherited from Widget
	GetPointer() (x int, y int)
	// GetPreferredHeight retrieves a widget’s initial minimum and natural
	// height.
	//
	// This call is specific to width-for-height requests.
	//
	// The returned request will be modified by the
	// GtkWidgetClass::adjust_size_request virtual method and by any SizeGroups
	// that have been applied. That is, the returned request is the one that
	// should be used for layout, not necessarily the one returned by the widget
	// itself.
	//
	// This method is inherited from Widget
	GetPreferredHeight() (minimumHeight int, naturalHeight int)
	// GetPreferredHeightAndBaselineForWidth retrieves a widget’s minimum and
	// natural height and the corresponding baselines if it would be given the
	// specified @width, or the default height if @width is -1. The baselines
	// may be -1 which means that no baseline is requested for this widget.
	//
	// The returned request will be modified by the
	// GtkWidgetClass::adjust_size_request and
	// GtkWidgetClass::adjust_baseline_request virtual methods and by any
	// SizeGroups that have been applied. That is, the returned request is the
	// one that should be used for layout, not necessarily the one returned by
	// the widget itself.
	//
	// This method is inherited from Widget
	GetPreferredHeightAndBaselineForWidth(width int) (minimumHeight int, naturalHeight int, minimumBaseline int, naturalBaseline int)
	// GetPreferredHeightForWidth retrieves a widget’s minimum and natural
	// height if it would be given the specified @width.
	//
	// The returned request will be modified by the
	// GtkWidgetClass::adjust_size_request virtual method and by any SizeGroups
	// that have been applied. That is, the returned request is the one that
	// should be used for layout, not necessarily the one returned by the widget
	// itself.
	//
	// This method is inherited from Widget
	GetPreferredHeightForWidth(width int) (minimumHeight int, naturalHeight int)
	// GetPreferredSize retrieves the minimum and natural size of a widget,
	// taking into account the widget’s preference for height-for-width
	// management.
	//
	// This is used to retrieve a suitable size by container widgets which do
	// not impose any restrictions on the child placement. It can be used to
	// deduce toplevel window and menu sizes as well as child widgets in
	// free-form containers such as GtkLayout.
	//
	// Handle with care. Note that the natural height of a height-for-width
	// widget will generally be a smaller size than the minimum height, since
	// the required height for the natural width is generally smaller than the
	// required height for the minimum width.
	//
	// Use gtk_widget_get_preferred_height_and_baseline_for_width() if you want
	// to support baseline alignment.
	//
	// This method is inherited from Widget
	GetPreferredSize() (minimumSize Requisition, naturalSize Requisition)
	// GetPreferredWidth retrieves a widget’s initial minimum and natural width.
	//
	// This call is specific to height-for-width requests.
	//
	// The returned request will be modified by the
	// GtkWidgetClass::adjust_size_request virtual method and by any SizeGroups
	// that have been applied. That is, the returned request is the one that
	// should be used for layout, not necessarily the one returned by the widget
	// itself.
	//
	// This method is inherited from Widget
	GetPreferredWidth() (minimumWidth int, naturalWidth int)
	// GetPreferredWidthForHeight retrieves a widget’s minimum and natural width
	// if it would be given the specified @height.
	//
	// The returned request will be modified by the
	// GtkWidgetClass::adjust_size_request virtual method and by any SizeGroups
	// that have been applied. That is, the returned request is the one that
	// should be used for layout, not necessarily the one returned by the widget
	// itself.
	//
	// This method is inherited from Widget
	GetPreferredWidthForHeight(height int) (minimumWidth int, naturalWidth int)
	// GetRealized determines whether @widget is realized.
	//
	// This method is inherited from Widget
	GetRealized() bool
	// GetReceivesDefault determines whether @widget is always treated as the
	// default widget within its toplevel when it has the focus, even if another
	// widget is the default.
	//
	// See gtk_widget_set_receives_default().
	//
	// This method is inherited from Widget
	GetReceivesDefault() bool
	// GetRequestMode gets whether the widget prefers a height-for-width layout
	// or a width-for-height layout.
	//
	// Bin widgets generally propagate the preference of their child, container
	// widgets need to request something either in context of their children or
	// in context of their allocation capabilities.
	//
	// This method is inherited from Widget
	GetRequestMode() SizeRequestMode
	// GetRequisition retrieves the widget’s requisition.
	//
	// This function should only be used by widget implementations in order to
	// figure whether the widget’s requisition has actually changed after some
	// internal state change (so that they can call gtk_widget_queue_resize()
	// instead of gtk_widget_queue_draw()).
	//
	// Normally, gtk_widget_size_request() should be used.
	//
	// Deprecated: since version 3.0.
	//
	// This method is inherited from Widget
	GetRequisition() Requisition
	// GetRootWindow: get the root window where this widget is located. This
	// function can only be called after the widget has been added to a widget
	// hierarchy with Window at the top.
	//
	// The root window is useful for such purposes as creating a popup Window
	// associated with the window. In general, you should only create display
	// specific resources when a widget has been realized, and you should free
	// those resources when the widget is unrealized.
	//
	// Deprecated: since version 3.12.
	//
	// This method is inherited from Widget
	GetRootWindow() gdk.Window
	// GetScaleFactor retrieves the internal scale factor that maps from window
	// coordinates to the actual device pixels. On traditional systems this is
	// 1, on high density outputs, it can be a higher value (typically 2).
	//
	// See gdk_window_get_scale_factor().
	//
	// This method is inherited from Widget
	GetScaleFactor() int
	// GetScreen: get the Screen from the toplevel window associated with this
	// widget. This function can only be called after the widget has been added
	// to a widget hierarchy with a Window at the top.
	//
	// In general, you should only create screen specific resources when a
	// widget has been realized, and you should free those resources when the
	// widget is unrealized.
	//
	// This method is inherited from Widget
	GetScreen() gdk.Screen
	// GetSensitive returns the widget’s sensitivity (in the sense of returning
	// the value that has been set using gtk_widget_set_sensitive()).
	//
	// The effective sensitivity of a widget is however determined by both its
	// own and its parent widget’s sensitivity. See gtk_widget_is_sensitive().
	//
	// This method is inherited from Widget
	GetSensitive() bool
	// GetSettings gets the settings object holding the settings used for this
	// widget.
	//
	// Note that this function can only be called when the Widget is attached to
	// a toplevel, since the settings object is specific to a particular Screen.
	//
	// This method is inherited from Widget
	GetSettings() Settings
	// GetSizeRequest gets the size request that was explicitly set for the
	// widget using gtk_widget_set_size_request(). A value of -1 stored in
	// @width or @height indicates that that dimension has not been set
	// explicitly and the natural requisition of the widget will be used
	// instead. See gtk_widget_set_size_request(). To get the size a widget will
	// actually request, call gtk_widget_get_preferred_size() instead of this
	// function.
	//
	// This method is inherited from Widget
	GetSizeRequest() (width int, height int)
	// GetState returns the widget’s state. See gtk_widget_set_state().
	//
	// Deprecated: since version 3.0.
	//
	// This method is inherited from Widget
	GetState() StateType
	// GetStateFlags returns the widget state as a flag set. It is worth
	// mentioning that the effective GTK_STATE_FLAG_INSENSITIVE state will be
	// returned, that is, also based on parent insensitivity, even if @widget
	// itself is sensitive.
	//
	// Also note that if you are looking for a way to obtain the StateFlags to
	// pass to a StyleContext method, you should look at
	// gtk_style_context_get_state().
	//
	// This method is inherited from Widget
	GetStateFlags() StateFlags
	// GetStyle: simply an accessor function that returns @widget->style.
	//
	// Deprecated: since version 3.0.
	//
	// This method is inherited from Widget
	GetStyle() Style
	// GetStyleContext returns the style context associated to @widget. The
	// returned object is guaranteed to be the same for the lifetime of @widget.
	//
	// This method is inherited from Widget
	GetStyleContext() StyleContext
	// GetSupportMultidevice returns true if @widget is multiple pointer aware.
	// See gtk_widget_set_support_multidevice() for more information.
	//
	// This method is inherited from Widget
	GetSupportMultidevice() bool
	// GetTemplateChild: fetch an object build from the template XML for
	// @widget_type in this @widget instance.
	//
	// This will only report children which were previously declared with
	// gtk_widget_class_bind_template_child_full() or one of its variants.
	//
	// This function is only meant to be called for code which is private to the
	// @widget_type which declared the child and is meant for language bindings
	// which cannot easily make use of the GObject structure offsets.
	//
	// This method is inherited from Widget
	GetTemplateChild(widgetType externglib.Type, name string) gextras.Objector
	// GetTooltipMarkup gets the contents of the tooltip for @widget.
	//
	// This method is inherited from Widget
	GetTooltipMarkup() string
	// GetTooltipText gets the contents of the tooltip for @widget.
	//
	// This method is inherited from Widget
	GetTooltipText() string
	// GetTooltipWindow returns the Window of the current tooltip. This can be
	// the GtkWindow created by default, or the custom tooltip window set using
	// gtk_widget_set_tooltip_window().
	//
	// This method is inherited from Widget
	GetTooltipWindow() Window
	// GetToplevel: this function returns the topmost widget in the container
	// hierarchy @widget is a part of. If @widget has no parent widgets, it will
	// be returned as the topmost widget. No reference will be added to the
	// returned widget; it should not be unreferenced.
	//
	// Note the difference in behavior vs. gtk_widget_get_ancestor();
	// `gtk_widget_get_ancestor (widget, GTK_TYPE_WINDOW)` would return nil if
	// @widget wasn’t inside a toplevel window, and if the window was inside a
	// Window-derived widget which was in turn inside the toplevel Window. While
	// the second case may seem unlikely, it actually happens when a Plug is
	// embedded inside a Socket within the same application.
	//
	// To reliably find the toplevel Window, use gtk_widget_get_toplevel() and
	// call GTK_IS_WINDOW() on the result. For instance, to get the title of a
	// widget's toplevel window, one might use:
	//
	//    static const char *
	//    get_widget_toplevel_title (GtkWidget *widget)
	//    {
	//      GtkWidget *toplevel = gtk_widget_get_toplevel (widget);
	//      if (GTK_IS_WINDOW (toplevel))
	//        {
	//          return gtk_window_get_title (GTK_WINDOW (toplevel));
	//        }
	//
	//      return NULL;
	//    }
	//
	// This method is inherited from Widget
	GetToplevel() Widget
	// GetVAlign gets the value of the Widget:valign property.
	//
	// For backwards compatibility reasons this method will never return
	// GTK_ALIGN_BASELINE, but instead it will convert it to GTK_ALIGN_FILL. If
	// your widget want to support baseline aligned children it must use
	// gtk_widget_get_valign_with_baseline(), or `g_object_get (widget,
	// "valign", &value, NULL)`, which will also report the true value.
	//
	// This method is inherited from Widget
	GetVAlign() Align
	// GetVAlignWithBaseline gets the value of the Widget:valign property,
	// including GTK_ALIGN_BASELINE.
	//
	// This method is inherited from Widget
	GetVAlignWithBaseline() Align
	// GetVExpand gets whether the widget would like any available extra
	// vertical space.
	//
	// See gtk_widget_get_hexpand() for more detail.
	//
	// This method is inherited from Widget
	GetVExpand() bool
	// GetVExpandSet gets whether gtk_widget_set_vexpand() has been used to
	// explicitly set the expand flag on this widget.
	//
	// See gtk_widget_get_hexpand_set() for more detail.
	//
	// This method is inherited from Widget
	GetVExpandSet() bool
	// GetVisible determines whether the widget is visible. If you want to take
	// into account whether the widget’s parent is also marked as visible, use
	// gtk_widget_is_visible() instead.
	//
	// This function does not check if the widget is obscured in any way.
	//
	// See gtk_widget_set_visible().
	//
	// This method is inherited from Widget
	GetVisible() bool
	// GetVisual gets the visual that will be used to render @widget.
	//
	// This method is inherited from Widget
	GetVisual() gdk.Visual
	// GetWindow returns the widget’s window if it is realized, nil otherwise
	//
	// This method is inherited from Widget
	GetWindow() gdk.Window
	// GrabAdd makes @widget the current grabbed widget.
	//
	// This means that interaction with other widgets in the same application is
	// blocked and mouse as well as keyboard events are delivered to this
	// widget.
	//
	// If @widget is not sensitive, it is not set as the current grabbed widget
	// and this function does nothing.
	//
	// This method is inherited from Widget
	GrabAdd()
	// GrabDefault causes @widget to become the default widget. @widget must be
	// able to be a default widget; typically you would ensure this yourself by
	// calling gtk_widget_set_can_default() with a true value. The default
	// widget is activated when the user presses Enter in a window. Default
	// widgets must be activatable, that is, gtk_widget_activate() should affect
	// them. Note that Entry widgets require the “activates-default” property
	// set to true before they activate the default widget when Enter is pressed
	// and the Entry is focused.
	//
	// This method is inherited from Widget
	GrabDefault()
	// GrabFocus causes @widget to have the keyboard focus for the Window it's
	// inside. @widget must be a focusable widget, such as a Entry; something
	// like Frame won’t work.
	//
	// More precisely, it must have the GTK_CAN_FOCUS flag set. Use
	// gtk_widget_set_can_focus() to modify that flag.
	//
	// The widget also needs to be realized and mapped. This is indicated by the
	// related signals. Grabbing the focus immediately after creating the widget
	// will likely fail and cause critical warnings.
	//
	// This method is inherited from Widget
	GrabFocus()
	// GrabRemove removes the grab from the given widget.
	//
	// You have to pair calls to gtk_grab_add() and gtk_grab_remove().
	//
	// If @widget does not have the grab, this function does nothing.
	//
	// This method is inherited from Widget
	GrabRemove()
	// HasDefault determines whether @widget is the current default widget
	// within its toplevel. See gtk_widget_set_can_default().
	//
	// This method is inherited from Widget
	HasDefault() bool
	// HasFocus determines if the widget has the global input focus. See
	// gtk_widget_is_focus() for the difference between having the global input
	// focus, and only having the focus within a toplevel.
	//
	// This method is inherited from Widget
	HasFocus() bool
	// HasGrab determines whether the widget is currently grabbing events, so it
	// is the only widget receiving input events (keyboard and mouse).
	//
	// See also gtk_grab_add().
	//
	// This method is inherited from Widget
	HasGrab() bool
	// HasRCStyle determines if the widget style has been looked up through the
	// rc mechanism.
	//
	// Deprecated: since version 3.0.
	//
	// This method is inherited from Widget
	HasRCStyle() bool
	// HasScreen checks whether there is a Screen is associated with this
	// widget. All toplevel widgets have an associated screen, and all widgets
	// added into a hierarchy with a toplevel window at the top.
	//
	// This method is inherited from Widget
	HasScreen() bool
	// HasVisibleFocus determines if the widget should show a visible indication
	// that it has the global input focus. This is a convenience function for
	// use in ::draw handlers that takes into account whether focus indication
	// should currently be shown in the toplevel window of @widget. See
	// gtk_window_get_focus_visible() for more information about focus
	// indication.
	//
	// To find out if the widget has the global input focus, use
	// gtk_widget_has_focus().
	//
	// This method is inherited from Widget
	HasVisibleFocus() bool
	// Hide reverses the effects of gtk_widget_show(), causing the widget to be
	// hidden (invisible to the user).
	//
	// This method is inherited from Widget
	Hide()
	// HideOnDelete: utility function; intended to be connected to the
	// Widget::delete-event signal on a Window. The function calls
	// gtk_widget_hide() on its argument, then returns true. If connected to
	// ::delete-event, the result is that clicking the close button for a window
	// (on the window frame, top right corner usually) will hide but not destroy
	// the window. By default, GTK+ destroys windows when ::delete-event is
	// received.
	//
	// This method is inherited from Widget
	HideOnDelete() bool
	// InDestruction returns whether the widget is currently being destroyed.
	// This information can sometimes be used to avoid doing unnecessary work.
	//
	// This method is inherited from Widget
	InDestruction() bool
	// InitTemplate creates and initializes child widgets defined in templates.
	// This function must be called in the instance initializer for any class
	// which assigned itself a template using gtk_widget_class_set_template()
	//
	// It is important to call this function in the instance initializer of a
	// Widget subclass and not in #GObject.constructed() or
	// #GObject.constructor() for two reasons.
	//
	// One reason is that generally derived widgets will assume that parent
	// class composite widgets have been created in their instance initializers.
	//
	// Another reason is that when calling g_object_new() on a widget with
	// composite templates, it’s important to build the composite widgets before
	// the construct properties are set. Properties passed to g_object_new()
	// should take precedence over properties set in the private template XML.
	//
	// This method is inherited from Widget
	InitTemplate()
	// InputShapeCombineRegion sets an input shape for this widget’s GDK window.
	// This allows for windows which react to mouse click in a nonrectangular
	// region, see gdk_window_input_shape_combine_region() for more information.
	//
	// This method is inherited from Widget
	InputShapeCombineRegion(region *cairo.Region)
	// InsertActionGroup inserts @group into @widget. Children of @widget that
	// implement Actionable can then be associated with actions in @group by
	// setting their “action-name” to @prefix.`action-name`.
	//
	// If @group is nil, a previously inserted group for @name is removed from
	// @widget.
	//
	// This method is inherited from Widget
	InsertActionGroup(name string, group gio.ActionGroup)
	// Intersect computes the intersection of a @widget’s area and @area,
	// storing the intersection in @intersection, and returns true if there was
	// an intersection. @intersection may be nil if you’re only interested in
	// whether there was an intersection.
	//
	// This method is inherited from Widget
	Intersect(area *gdk.Rectangle) (gdk.Rectangle, bool)
	// IsAncestor determines whether @widget is somewhere inside @ancestor,
	// possibly with intermediate containers.
	//
	// This method is inherited from Widget
	IsAncestor(ancestor Widget) bool
	// IsComposited: whether @widget can rely on having its alpha channel drawn
	// correctly. On X11 this function returns whether a compositing manager is
	// running for @widget’s screen.
	//
	// Please note that the semantics of this call will change in the future if
	// used on a widget that has a composited window in its hierarchy (as set by
	// gdk_window_set_composited()).
	//
	// Deprecated: since version 3.22.
	//
	// This method is inherited from Widget
	IsComposited() bool
	// IsDrawable determines whether @widget can be drawn to. A widget can be
	// drawn to if it is mapped and visible.
	//
	// This method is inherited from Widget
	IsDrawable() bool
	// IsFocus determines if the widget is the focus widget within its toplevel.
	// (This does not mean that the Widget:has-focus property is necessarily
	// set; Widget:has-focus will only be set if the toplevel widget
	// additionally has the global input focus.)
	//
	// This method is inherited from Widget
	IsFocus() bool
	// IsSensitive returns the widget’s effective sensitivity, which means it is
	// sensitive itself and also its parent widget is sensitive
	//
	// This method is inherited from Widget
	IsSensitive() bool
	// IsToplevel determines whether @widget is a toplevel widget.
	//
	// Currently only Window and Invisible (and out-of-process Plugs) are
	// toplevel widgets. Toplevel widgets have no parent widget.
	//
	// This method is inherited from Widget
	IsToplevel() bool
	// IsVisible determines whether the widget and all its parents are marked as
	// visible.
	//
	// This function does not check if the widget is obscured in any way.
	//
	// See also gtk_widget_get_visible() and gtk_widget_set_visible()
	//
	// This method is inherited from Widget
	IsVisible() bool
	// KeynavFailed: this function should be called whenever keyboard navigation
	// within a single widget hits a boundary. The function emits the
	// Widget::keynav-failed signal on the widget and its return value should be
	// interpreted in a way similar to the return value of
	// gtk_widget_child_focus():
	//
	// When true is returned, stay in the widget, the failed keyboard navigation
	// is OK and/or there is nowhere we can/should move the focus to.
	//
	// When false is returned, the caller should continue with keyboard
	// navigation outside the widget, e.g. by calling gtk_widget_child_focus()
	// on the widget’s toplevel.
	//
	// The default ::keynav-failed handler returns false for GTK_DIR_TAB_FORWARD
	// and GTK_DIR_TAB_BACKWARD. For the other values of DirectionType it
	// returns true.
	//
	// Whenever the default handler returns true, it also calls
	// gtk_widget_error_bell() to notify the user of the failed keyboard
	// navigation.
	//
	// A use case for providing an own implementation of ::keynav-failed (either
	// by connecting to it or by overriding it) would be a row of Entry widgets
	// where the user should be able to navigate the entire row with the cursor
	// keys, as e.g. known from user interfaces that require entering license
	// keys.
	//
	// This method is inherited from Widget
	KeynavFailed(direction DirectionType) bool
	// ListActionPrefixes retrieves a nil-terminated array of strings containing
	// the prefixes of Group's available to @widget.
	//
	// This method is inherited from Widget
	ListActionPrefixes() []string
	// Map: this function is only for use in widget implementations. Causes a
	// widget to be mapped if it isn’t already.
	//
	// This method is inherited from Widget
	Map()
	// MnemonicActivate emits the Widget::mnemonic-activate signal.
	//
	// This method is inherited from Widget
	MnemonicActivate(groupCycling bool) bool
	// ModifyBase sets the base color for a widget in a particular state. All
	// other style values are left untouched. The base color is the background
	// color used along with the text color (see gtk_widget_modify_text()) for
	// widgets such as Entry and TextView. See also gtk_widget_modify_style().
	//
	// > Note that “no window” widgets (which have the GTK_NO_WINDOW > flag set)
	// draw on their parent container’s window and thus may > not draw any
	// background themselves. This is the case for e.g. > Label. > > To modify
	// the background of such widgets, you have to set the > base color on their
	// parent; if you want to set the background > of a rectangular area around
	// a label, try placing the label in > a EventBox widget and setting the
	// base color on that.
	//
	// Deprecated: since version 3.0.
	//
	// This method is inherited from Widget
	ModifyBase(state StateType, color *gdk.Color)
	// ModifyBg sets the background color for a widget in a particular state.
	//
	// All other style values are left untouched. See also
	// gtk_widget_modify_style().
	//
	// > Note that “no window” widgets (which have the GTK_NO_WINDOW > flag set)
	// draw on their parent container’s window and thus may > not draw any
	// background themselves. This is the case for e.g. > Label. > > To modify
	// the background of such widgets, you have to set the > background color on
	// their parent; if you want to set the background > of a rectangular area
	// around a label, try placing the label in > a EventBox widget and setting
	// the background color on that.
	//
	// Deprecated: since version 3.0.
	//
	// This method is inherited from Widget
	ModifyBg(state StateType, color *gdk.Color)
	// ModifyCursor sets the cursor color to use in a widget, overriding the
	// Widget cursor-color and secondary-cursor-color style properties.
	//
	// All other style values are left untouched. See also
	// gtk_widget_modify_style().
	//
	// Deprecated: since version 3.0.
	//
	// This method is inherited from Widget
	ModifyCursor(primary *gdk.Color, secondary *gdk.Color)
	// ModifyFg sets the foreground color for a widget in a particular state.
	//
	// All other style values are left untouched. See also
	// gtk_widget_modify_style().
	//
	// Deprecated: since version 3.0.
	//
	// This method is inherited from Widget
	ModifyFg(state StateType, color *gdk.Color)
	// ModifyFont sets the font to use for a widget.
	//
	// All other style values are left untouched. See also
	// gtk_widget_modify_style().
	//
	// Deprecated: since version 3.0.
	//
	// This method is inherited from Widget
	ModifyFont(fontDesc *pango.FontDescription)
	// ModifyStyle modifies style values on the widget.
	//
	// Modifications made using this technique take precedence over style values
	// set via an RC file, however, they will be overridden if a style is
	// explicitly set on the widget using gtk_widget_set_style(). The
	// RcStyle-struct is designed so each field can either be set or unset, so
	// it is possible, using this function, to modify some style values and
	// leave the others unchanged.
	//
	// Note that modifications made with this function are not cumulative with
	// previous calls to gtk_widget_modify_style() or with such functions as
	// gtk_widget_modify_fg(). If you wish to retain previous values, you must
	// first call gtk_widget_get_modifier_style(), make your modifications to
	// the returned style, then call gtk_widget_modify_style() with that style.
	// On the other hand, if you first call gtk_widget_modify_style(),
	// subsequent calls to such functions gtk_widget_modify_fg() will have a
	// cumulative effect with the initial modifications.
	//
	// Deprecated: since version 3.0.
	//
	// This method is inherited from Widget
	ModifyStyle(style RCStyle)
	// ModifyText sets the text color for a widget in a particular state.
	//
	// All other style values are left untouched. The text color is the
	// foreground color used along with the base color (see
	// gtk_widget_modify_base()) for widgets such as Entry and TextView. See
	// also gtk_widget_modify_style().
	//
	// Deprecated: since version 3.0.
	//
	// This method is inherited from Widget
	ModifyText(state StateType, color *gdk.Color)
	// OverrideBackgroundColor sets the background color to use for a widget.
	//
	// All other style values are left untouched. See
	// gtk_widget_override_color().
	//
	// Deprecated: since version 3.16.
	//
	// This method is inherited from Widget
	OverrideBackgroundColor(state StateFlags, color *gdk.RGBA)
	// OverrideColor sets the color to use for a widget.
	//
	// All other style values are left untouched.
	//
	// This function does not act recursively. Setting the color of a container
	// does not affect its children. Note that some widgets that you may not
	// think of as containers, for instance Buttons, are actually containers.
	//
	// This API is mostly meant as a quick way for applications to change a
	// widget appearance. If you are developing a widgets library and intend
	// this change to be themeable, it is better done by setting meaningful CSS
	// classes in your widget/container implementation through
	// gtk_style_context_add_class().
	//
	// This way, your widget library can install a CssProvider with the
	// GTK_STYLE_PROVIDER_PRIORITY_FALLBACK priority in order to provide a
	// default styling for those widgets that need so, and this theming may
	// fully overridden by the user’s theme.
	//
	// Note that for complex widgets this may bring in undesired results (such
	// as uniform background color everywhere), in these cases it is better to
	// fully style such widgets through a CssProvider with the
	// GTK_STYLE_PROVIDER_PRIORITY_APPLICATION priority.
	//
	// Deprecated: since version 3.16.
	//
	// This method is inherited from Widget
	OverrideColor(state StateFlags, color *gdk.RGBA)
	// OverrideCursor sets the cursor color to use in a widget, overriding the
	// cursor-color and secondary-cursor-color style properties. All other style
	// values are left untouched. See also gtk_widget_modify_style().
	//
	// Note that the underlying properties have the Color type, so the alpha
	// value in @primary and @secondary will be ignored.
	//
	// Deprecated: since version 3.16.
	//
	// This method is inherited from Widget
	OverrideCursor(cursor *gdk.RGBA, secondaryCursor *gdk.RGBA)
	// OverrideFont sets the font to use for a widget. All other style values
	// are left untouched. See gtk_widget_override_color().
	//
	// Deprecated: since version 3.16.
	//
	// This method is inherited from Widget
	OverrideFont(fontDesc *pango.FontDescription)
	// OverrideSymbolicColor sets a symbolic color for a widget.
	//
	// All other style values are left untouched. See
	// gtk_widget_override_color() for overriding the foreground or background
	// color.
	//
	// Deprecated: since version 3.16.
	//
	// This method is inherited from Widget
	OverrideSymbolicColor(name string, color *gdk.RGBA)
	// Path obtains the full path to @widget. The path is simply the name of a
	// widget and all its parents in the container hierarchy, separated by
	// periods. The name of a widget comes from gtk_widget_get_name(). Paths are
	// used to apply styles to a widget in gtkrc configuration files. Widget
	// names are the type of the widget by default (e.g. “GtkButton”) or can be
	// set to an application-specific value with gtk_widget_set_name(). By
	// setting the name of a widget, you allow users or theme authors to apply
	// styles to that specific widget in their gtkrc file. @path_reversed_p
	// fills in the path in reverse order, i.e. starting with @widget’s name
	// instead of starting with the name of @widget’s outermost ancestor.
	//
	// Deprecated: since version 3.0.
	//
	// This method is inherited from Widget
	Path() (pathLength uint, path string, pathReversed string)
	// QueueAllocate: this function is only for use in widget implementations.
	//
	// Flags the widget for a rerun of the GtkWidgetClass::size_allocate
	// function. Use this function instead of gtk_widget_queue_resize() when the
	// @widget's size request didn't change but it wants to reposition its
	// contents.
	//
	// An example user of this function is gtk_widget_set_halign().
	//
	// This method is inherited from Widget
	QueueAllocate()
	// QueueComputeExpand: mark @widget as needing to recompute its expand
	// flags. Call this function when setting legacy expand child properties on
	// the child of a container.
	//
	// See gtk_widget_compute_expand().
	//
	// This method is inherited from Widget
	QueueComputeExpand()
	// QueueDraw: equivalent to calling gtk_widget_queue_draw_area() for the
	// entire area of a widget.
	//
	// This method is inherited from Widget
	QueueDraw()
	// QueueDrawArea: convenience function that calls
	// gtk_widget_queue_draw_region() on the region created from the given
	// coordinates.
	//
	// The region here is specified in widget coordinates. Widget coordinates
	// are a bit odd; for historical reasons, they are defined as
	// @widget->window coordinates for widgets that return true for
	// gtk_widget_get_has_window(), and are relative to @widget->allocation.x,
	// @widget->allocation.y otherwise.
	//
	// @width or @height may be 0, in this case this function does nothing.
	// Negative values for @width and @height are not allowed.
	//
	// This method is inherited from Widget
	QueueDrawArea(x int, y int, width int, height int)
	// QueueDrawRegion invalidates the area of @widget defined by @region by
	// calling gdk_window_invalidate_region() on the widget’s window and all its
	// child windows. Once the main loop becomes idle (after the current batch
	// of events has been processed, roughly), the window will receive expose
	// events for the union of all regions that have been invalidated.
	//
	// Normally you would only use this function in widget implementations. You
	// might also use it to schedule a redraw of a DrawingArea or some portion
	// thereof.
	//
	// This method is inherited from Widget
	QueueDrawRegion(region *cairo.Region)
	// QueueResize: this function is only for use in widget implementations.
	// Flags a widget to have its size renegotiated; should be called when a
	// widget for some reason has a new size request. For example, when you
	// change the text in a Label, Label queues a resize to ensure there’s
	// enough space for the new text.
	//
	// Note that you cannot call gtk_widget_queue_resize() on a widget from
	// inside its implementation of the GtkWidgetClass::size_allocate virtual
	// method. Calls to gtk_widget_queue_resize() from inside
	// GtkWidgetClass::size_allocate will be silently ignored.
	//
	// This method is inherited from Widget
	QueueResize()
	// QueueResizeNoRedraw: this function works like gtk_widget_queue_resize(),
	// except that the widget is not invalidated.
	//
	// This method is inherited from Widget
	QueueResizeNoRedraw()
	// Realize creates the GDK (windowing system) resources associated with a
	// widget. For example, @widget->window will be created when a widget is
	// realized. Normally realization happens implicitly; if you show a widget
	// and all its parent containers, then the widget will be realized and
	// mapped automatically.
	//
	// Realizing a widget requires all the widget’s parent widgets to be
	// realized; calling gtk_widget_realize() realizes the widget’s parents in
	// addition to @widget itself. If a widget is not yet inside a toplevel
	// window when you realize it, bad things will happen.
	//
	// This function is primarily used in widget implementations, and isn’t very
	// useful otherwise. Many times when you think you might need it, a better
	// approach is to connect to a signal that will be called after the widget
	// is realized automatically, such as Widget::draw. Or simply
	// g_signal_connect () to the Widget::realize signal.
	//
	// This method is inherited from Widget
	Realize()
	// RegionIntersect computes the intersection of a @widget’s area and
	// @region, returning the intersection. The result may be empty, use
	// cairo_region_is_empty() to check.
	//
	// Deprecated: since version 3.14.
	//
	// This method is inherited from Widget
	RegionIntersect(region *cairo.Region) *cairo.Region
	// RegisterWindow registers a Window with the widget and sets it up so that
	// the widget receives events for it. Call gtk_widget_unregister_window()
	// when destroying the window.
	//
	// Before 3.8 you needed to call gdk_window_set_user_data() directly to set
	// this up. This is now deprecated and you should use
	// gtk_widget_register_window() instead. Old code will keep working as is,
	// although some new features like transparency might not work perfectly.
	//
	// This method is inherited from Widget
	RegisterWindow(window gdk.Window)
	// RemoveAccelerator removes an accelerator from @widget, previously
	// installed with gtk_widget_add_accelerator().
	//
	// This method is inherited from Widget
	RemoveAccelerator(accelGroup AccelGroup, accelKey uint, accelMods gdk.ModifierType) bool
	// RemoveMnemonicLabel removes a widget from the list of mnemonic labels for
	// this widget. (See gtk_widget_list_mnemonic_labels()). The widget must
	// have previously been added to the list with
	// gtk_widget_add_mnemonic_label().
	//
	// This method is inherited from Widget
	RemoveMnemonicLabel(label Widget)
	// RemoveTickCallback removes a tick callback previously registered with
	// gtk_widget_add_tick_callback().
	//
	// This method is inherited from Widget
	RemoveTickCallback(id uint)
	// RenderIcon: convenience function that uses the theme settings for @widget
	// to look up @stock_id and render it to a pixbuf. @stock_id should be a
	// stock icon ID such as K_STOCK_OPEN or K_STOCK_OK. @size should be a size
	// such as K_ICON_SIZE_MENU. @detail should be a string that identifies the
	// widget or code doing the rendering, so that theme engines can
	// special-case rendering for that widget or code.
	//
	// The pixels in the returned Pixbuf are shared with the rest of the
	// application and should not be modified. The pixbuf should be freed after
	// use with g_object_unref().
	//
	// Deprecated: since version 3.0.
	//
	// This method is inherited from Widget
	RenderIcon(stockId string, size int, detail string) gdkpixbuf.Pixbuf
	// RenderIconPixbuf: convenience function that uses the theme engine and
	// style settings for @widget to look up @stock_id and render it to a
	// pixbuf. @stock_id should be a stock icon ID such as K_STOCK_OPEN or
	// K_STOCK_OK. @size should be a size such as K_ICON_SIZE_MENU.
	//
	// The pixels in the returned Pixbuf are shared with the rest of the
	// application and should not be modified. The pixbuf should be freed after
	// use with g_object_unref().
	//
	// Deprecated: since version 3.10.
	//
	// This method is inherited from Widget
	RenderIconPixbuf(stockId string, size int) gdkpixbuf.Pixbuf
	// Reparent moves a widget from one Container to another, handling reference
	// count issues to avoid destroying the widget.
	//
	// Deprecated: since version 3.14.
	//
	// This method is inherited from Widget
	Reparent(newParent Widget)
	// ResetRCStyles: reset the styles of @widget and all descendents, so when
	// they are looked up again, they get the correct values for the currently
	// loaded RC file settings.
	//
	// This function is not useful for applications.
	//
	// Deprecated: since version 3.0.
	//
	// This method is inherited from Widget
	ResetRCStyles()
	// ResetStyle updates the style context of @widget and all descendants by
	// updating its widget path. Containers may want to use this on a child when
	// reordering it in a way that a different style might apply to it. See also
	// gtk_container_get_path_for_child().
	//
	// This method is inherited from Widget
	ResetStyle()
	// SetAccelPath: given an accelerator group, @accel_group, and an
	// accelerator path, @accel_path, sets up an accelerator in @accel_group so
	// whenever the key binding that is defined for @accel_path is pressed,
	// @widget will be activated. This removes any accelerators (for any
	// accelerator group) installed by previous calls to
	// gtk_widget_set_accel_path(). Associating accelerators with paths allows
	// them to be modified by the user and the modifications to be saved for
	// future use. (See gtk_accel_map_save().)
	//
	// This function is a low level function that would most likely be used by a
	// menu creation system like UIManager. If you use UIManager, setting up
	// accelerator paths will be done automatically.
	//
	// Even when you you aren’t using UIManager, if you only want to set up
	// accelerators on menu items gtk_menu_item_set_accel_path() provides a
	// somewhat more convenient interface.
	//
	// Note that @accel_path string will be stored in a #GQuark. Therefore, if
	// you pass a static string, you can save some memory by interning it first
	// with g_intern_static_string().
	//
	// This method is inherited from Widget
	SetAccelPath(accelPath string, accelGroup AccelGroup)
	// SetAppPaintable sets whether the application intends to draw on the
	// widget in an Widget::draw handler.
	//
	// This is a hint to the widget and does not affect the behavior of the GTK+
	// core; many widgets ignore this flag entirely. For widgets that do pay
	// attention to the flag, such as EventBox and Window, the effect is to
	// suppress default themed drawing of the widget's background. (Children of
	// the widget will still be drawn.) The application is then entirely
	// responsible for drawing the widget background.
	//
	// Note that the background is still drawn when the widget is mapped.
	//
	// This method is inherited from Widget
	SetAppPaintable(appPaintable bool)
	// SetCanDefault specifies whether @widget can be a default widget. See
	// gtk_widget_grab_default() for details about the meaning of “default”.
	//
	// This method is inherited from Widget
	SetCanDefault(canDefault bool)
	// SetCanFocus specifies whether @widget can own the input focus. See
	// gtk_widget_grab_focus() for actually setting the input focus on a widget.
	//
	// This method is inherited from Widget
	SetCanFocus(canFocus bool)
	// SetChildVisible sets whether @widget should be mapped along with its when
	// its parent is mapped and @widget has been shown with gtk_widget_show().
	//
	// The child visibility can be set for widget before it is added to a
	// container with gtk_widget_set_parent(), to avoid mapping children
	// unnecessary before immediately unmapping them. However it will be reset
	// to its default state of true when the widget is removed from a container.
	//
	// Note that changing the child visibility of a widget does not queue a
	// resize on the widget. Most of the time, the size of a widget is computed
	// from all visible children, whether or not they are mapped. If this is not
	// the case, the container can queue a resize itself.
	//
	// This function is only useful for container implementations and never
	// should be called by an application.
	//
	// This method is inherited from Widget
	SetChildVisible(isVisible bool)
	// SetCompositeName sets a widgets composite name. The widget must be a
	// composite child of its parent; see gtk_widget_push_composite_child().
	//
	// Deprecated: since version 3.10.
	//
	// This method is inherited from Widget
	SetCompositeName(name string)
	// SetDeviceEnabled enables or disables a Device to interact with @widget
	// and all its children.
	//
	// It does so by descending through the Window hierarchy and enabling the
	// same mask that is has for core events (i.e. the one that
	// gdk_window_get_events() returns).
	//
	// This method is inherited from Widget
	SetDeviceEnabled(device gdk.Device, enabled bool)
	// SetDeviceEvents sets the device event mask (see EventMask) for a widget.
	// The event mask determines which events a widget will receive from
	// @device. Keep in mind that different widgets have different default event
	// masks, and by changing the event mask you may disrupt a widget’s
	// functionality, so be careful. This function must be called while a widget
	// is unrealized. Consider gtk_widget_add_device_events() for widgets that
	// are already realized, or if you want to preserve the existing event mask.
	// This function can’t be used with windowless widgets (which return false
	// from gtk_widget_get_has_window()); to get events on those widgets, place
	// them inside a EventBox and receive events on the event box.
	//
	// This method is inherited from Widget
	SetDeviceEvents(device gdk.Device, events gdk.EventMask)
	// SetDirection sets the reading direction on a particular widget. This
	// direction controls the primary direction for widgets containing text, and
	// also the direction in which the children of a container are packed. The
	// ability to set the direction is present in order so that correct
	// localization into languages with right-to-left reading directions can be
	// done. Generally, applications will let the default reading direction
	// present, except for containers where the containers are arranged in an
	// order that is explicitly visual rather than logical (such as buttons for
	// text justification).
	//
	// If the direction is set to GTK_TEXT_DIR_NONE, then the value set by
	// gtk_widget_set_default_direction() will be used.
	//
	// This method is inherited from Widget
	SetDirection(dir TextDirection)
	// SetDoubleBuffered widgets are double buffered by default; you can use
	// this function to turn off the buffering. “Double buffered” simply means
	// that gdk_window_begin_draw_frame() and gdk_window_end_draw_frame() are
	// called automatically around expose events sent to the widget.
	// gdk_window_begin_draw_frame() diverts all drawing to a widget's window to
	// an offscreen buffer, and gdk_window_end_draw_frame() draws the buffer to
	// the screen. The result is that users see the window update in one smooth
	// step, and don’t see individual graphics primitives being rendered.
	//
	// In very simple terms, double buffered widgets don’t flicker, so you would
	// only use this function to turn off double buffering if you had special
	// needs and really knew what you were doing.
	//
	// Note: if you turn off double-buffering, you have to handle expose events,
	// since even the clearing to the background color or pixmap will not happen
	// automatically (as it is done in gdk_window_begin_draw_frame()).
	//
	// In 3.10 GTK and GDK have been restructured for translucent drawing. Since
	// then expose events for double-buffered widgets are culled into a single
	// event to the toplevel GDK window. If you now unset double buffering, you
	// will cause a separate rendering pass for every widget. This will likely
	// cause rendering problems - in particular related to stacking - and
	// usually increases rendering times significantly.
	//
	// Deprecated: since version 3.14.
	//
	// This method is inherited from Widget
	SetDoubleBuffered(doubleBuffered bool)
	// SetEvents sets the event mask (see EventMask) for a widget. The event
	// mask determines which events a widget will receive. Keep in mind that
	// different widgets have different default event masks, and by changing the
	// event mask you may disrupt a widget’s functionality, so be careful. This
	// function must be called while a widget is unrealized. Consider
	// gtk_widget_add_events() for widgets that are already realized, or if you
	// want to preserve the existing event mask. This function can’t be used
	// with widgets that have no window. (See gtk_widget_get_has_window()). To
	// get events on those widgets, place them inside a EventBox and receive
	// events on the event box.
	//
	// This method is inherited from Widget
	SetEvents(events int)
	// SetFocusOnClick sets whether the widget should grab focus when it is
	// clicked with the mouse. Making mouse clicks not grab focus is useful in
	// places like toolbars where you don’t want the keyboard focus removed from
	// the main area of the application.
	//
	// This method is inherited from Widget
	SetFocusOnClick(focusOnClick bool)
	// SetFontMap sets the font map to use for Pango rendering. When not set,
	// the widget will inherit the font map from its parent.
	//
	// This method is inherited from Widget
	SetFontMap(fontMap pango.FontMap)
	// SetFontOptions sets the #cairo_font_options_t used for Pango rendering in
	// this widget. When not set, the default font options for the Screen will
	// be used.
	//
	// This method is inherited from Widget
	SetFontOptions(options *cairo.FontOptions)
	// SetHAlign sets the horizontal alignment of @widget. See the Widget:halign
	// property.
	//
	// This method is inherited from Widget
	SetHAlign(align Align)
	// SetHasTooltip sets the has-tooltip property on @widget to @has_tooltip.
	// See Widget:has-tooltip for more information.
	//
	// This method is inherited from Widget
	SetHasTooltip(hasTooltip bool)
	// SetHasWindow specifies whether @widget has a Window of its own. Note that
	// all realized widgets have a non-nil “window” pointer
	// (gtk_widget_get_window() never returns a nil window when a widget is
	// realized), but for many of them it’s actually the Window of one of its
	// parent widgets. Widgets that do not create a window for themselves in
	// Widget::realize must announce this by calling this function with
	// @has_window = false.
	//
	// This function should only be called by widget implementations, and they
	// should call it in their init() function.
	//
	// This method is inherited from Widget
	SetHasWindow(hasWindow bool)
	// SetHExpand sets whether the widget would like any available extra
	// horizontal space. When a user resizes a Window, widgets with expand=TRUE
	// generally receive the extra space. For example, a list or scrollable area
	// or document in your window would often be set to expand.
	//
	// Call this function to set the expand flag if you would like your widget
	// to become larger horizontally when the window has extra room.
	//
	// By default, widgets automatically expand if any of their children want to
	// expand. (To see if a widget will automatically expand given its current
	// children and state, call gtk_widget_compute_expand(). A container can
	// decide how the expandability of children affects the expansion of the
	// container by overriding the compute_expand virtual method on Widget.).
	//
	// Setting hexpand explicitly with this function will override the automatic
	// expand behavior.
	//
	// This function forces the widget to expand or not to expand, regardless of
	// children. The override occurs because gtk_widget_set_hexpand() sets the
	// hexpand-set property (see gtk_widget_set_hexpand_set()) which causes the
	// widget’s hexpand value to be used, rather than looking at children and
	// widget state.
	//
	// This method is inherited from Widget
	SetHExpand(expand bool)
	// SetHExpandSet sets whether the hexpand flag (see
	// gtk_widget_get_hexpand()) will be used.
	//
	// The hexpand-set property will be set automatically when you call
	// gtk_widget_set_hexpand() to set hexpand, so the most likely reason to use
	// this function would be to unset an explicit expand flag.
	//
	// If hexpand is set, then it overrides any computed expand value based on
	// child widgets. If hexpand is not set, then the expand value depends on
	// whether any children of the widget would like to expand.
	//
	// There are few reasons to use this function, but it’s here for
	// completeness and consistency.
	//
	// This method is inherited from Widget
	SetHExpandSet(set bool)
	// SetMapped marks the widget as being mapped.
	//
	// This function should only ever be called in a derived widget's “map” or
	// “unmap” implementation.
	//
	// This method is inherited from Widget
	SetMapped(mapped bool)
	// SetMarginBottom sets the bottom margin of @widget. See the
	// Widget:margin-bottom property.
	//
	// This method is inherited from Widget
	SetMarginBottom(margin int)
	// SetMarginEnd sets the end margin of @widget. See the Widget:margin-end
	// property.
	//
	// This method is inherited from Widget
	SetMarginEnd(margin int)
	// SetMarginLeft sets the left margin of @widget. See the Widget:margin-left
	// property.
	//
	// Deprecated: since version 3.12.
	//
	// This method is inherited from Widget
	SetMarginLeft(margin int)
	// SetMarginRight sets the right margin of @widget. See the
	// Widget:margin-right property.
	//
	// Deprecated: since version 3.12.
	//
	// This method is inherited from Widget
	SetMarginRight(margin int)
	// SetMarginStart sets the start margin of @widget. See the
	// Widget:margin-start property.
	//
	// This method is inherited from Widget
	SetMarginStart(margin int)
	// SetMarginTop sets the top margin of @widget. See the Widget:margin-top
	// property.
	//
	// This method is inherited from Widget
	SetMarginTop(margin int)
	// SetName widgets can be named, which allows you to refer to them from a
	// CSS file. You can apply a style to widgets with a particular name in the
	// CSS file. See the documentation for the CSS syntax (on the same page as
	// the docs for StyleContext).
	//
	// Note that the CSS syntax has certain special characters to delimit and
	// represent elements in a selector (period, #, >, *...), so using these
	// will make your widget impossible to match by name. Any combination of
	// alphanumeric symbols, dashes and underscores will suffice.
	//
	// This method is inherited from Widget
	SetName(name string)
	// SetNoShowAll sets the Widget:no-show-all property, which determines
	// whether calls to gtk_widget_show_all() will affect this widget.
	//
	// This is mostly for use in constructing widget hierarchies with externally
	// controlled visibility, see UIManager.
	//
	// This method is inherited from Widget
	SetNoShowAll(noShowAll bool)
	// SetOpacity: request the @widget to be rendered partially transparent,
	// with opacity 0 being fully transparent and 1 fully opaque. (Opacity
	// values are clamped to the [0,1] range.). This works on both toplevel
	// widget, and child widgets, although there are some limitations:
	//
	// For toplevel widgets this depends on the capabilities of the windowing
	// system. On X11 this has any effect only on X screens with a compositing
	// manager running. See gtk_widget_is_composited(). On Windows it should
	// work always, although setting a window’s opacity after the window has
	// been shown causes it to flicker once on Windows.
	//
	// For child widgets it doesn’t work if any affected widget has a native
	// window, or disables double buffering.
	//
	// This method is inherited from Widget
	SetOpacity(opacity float64)
	// SetParent: this function is useful only when implementing subclasses of
	// Container. Sets the container as the parent of @widget, and takes care of
	// some details such as updating the state and style of the child to reflect
	// its new location. The opposite function is gtk_widget_unparent().
	//
	// This method is inherited from Widget
	SetParent(parent Widget)
	// SetParentWindow sets a non default parent window for @widget.
	//
	// For Window classes, setting a @parent_window effects whether the window
	// is a toplevel window or can be embedded into other widgets.
	//
	// For Window classes, this needs to be called before the window is
	// realized.
	//
	// This method is inherited from Widget
	SetParentWindow(parentWindow gdk.Window)
	// SetRealized marks the widget as being realized. This function must only
	// be called after all Windows for the @widget have been created and
	// registered.
	//
	// This function should only ever be called in a derived widget's “realize”
	// or “unrealize” implementation.
	//
	// This method is inherited from Widget
	SetRealized(realized bool)
	// SetReceivesDefault specifies whether @widget will be treated as the
	// default widget within its toplevel when it has the focus, even if another
	// widget is the default.
	//
	// See gtk_widget_grab_default() for details about the meaning of “default”.
	//
	// This method is inherited from Widget
	SetReceivesDefault(receivesDefault bool)
	// SetRedrawOnAllocate sets whether the entire widget is queued for drawing
	// when its size allocation changes. By default, this setting is true and
	// the entire widget is redrawn on every size change. If your widget leaves
	// the upper left unchanged when made bigger, turning this setting off will
	// improve performance.
	//
	// Note that for widgets where gtk_widget_get_has_window() is false setting
	// this flag to false turns off all allocation on resizing: the widget will
	// not even redraw if its position changes; this is to allow containers that
	// don’t draw anything to avoid excess invalidations. If you set this flag
	// on a widget with no window that does draw on @widget->window, you are
	// responsible for invalidating both the old and new allocation of the
	// widget when the widget is moved and responsible for invalidating regions
	// newly when the widget increases size.
	//
	// This method is inherited from Widget
	SetRedrawOnAllocate(redrawOnAllocate bool)
	// SetSensitive sets the sensitivity of a widget. A widget is sensitive if
	// the user can interact with it. Insensitive widgets are “grayed out” and
	// the user can’t interact with them. Insensitive widgets are known as
	// “inactive”, “disabled”, or “ghosted” in some other toolkits.
	//
	// This method is inherited from Widget
	SetSensitive(sensitive bool)
	// SetSizeRequest sets the minimum size of a widget; that is, the widget’s
	// size request will be at least @width by @height. You can use this
	// function to force a widget to be larger than it normally would be.
	//
	// In most cases, gtk_window_set_default_size() is a better choice for
	// toplevel windows than this function; setting the default size will still
	// allow users to shrink the window. Setting the size request will force
	// them to leave the window at least as large as the size request. When
	// dealing with window sizes, gtk_window_set_geometry_hints() can be a
	// useful function as well.
	//
	// Note the inherent danger of setting any fixed size - themes, translations
	// into other languages, different fonts, and user action can all change the
	// appropriate size for a given widget. So, it's basically impossible to
	// hardcode a size that will always be correct.
	//
	// The size request of a widget is the smallest size a widget can accept
	// while still functioning well and drawing itself correctly. However in
	// some strange cases a widget may be allocated less than its requested
	// size, and in many cases a widget may be allocated more space than it
	// requested.
	//
	// If the size request in a given direction is -1 (unset), then the
	// “natural” size request of the widget will be used instead.
	//
	// The size request set here does not include any margin from the Widget
	// properties margin-left, margin-right, margin-top, and margin-bottom, but
	// it does include pretty much all other padding or border properties set by
	// any subclass of Widget.
	//
	// This method is inherited from Widget
	SetSizeRequest(width int, height int)
	// SetState: this function is for use in widget implementations. Sets the
	// state of a widget (insensitive, prelighted, etc.) Usually you should set
	// the state using wrapper functions such as gtk_widget_set_sensitive().
	//
	// Deprecated: since version 3.0.
	//
	// This method is inherited from Widget
	SetState(state StateType)
	// SetStateFlags: this function is for use in widget implementations. Turns
	// on flag values in the current widget state (insensitive, prelighted,
	// etc.).
	//
	// This function accepts the values GTK_STATE_FLAG_DIR_LTR and
	// GTK_STATE_FLAG_DIR_RTL but ignores them. If you want to set the widget's
	// direction, use gtk_widget_set_direction().
	//
	// It is worth mentioning that any other state than
	// GTK_STATE_FLAG_INSENSITIVE, will be propagated down to all non-internal
	// children if @widget is a Container, while GTK_STATE_FLAG_INSENSITIVE
	// itself will be propagated down to all Container children by different
	// means than turning on the state flag down the hierarchy, both
	// gtk_widget_get_state_flags() and gtk_widget_is_sensitive() will make use
	// of these.
	//
	// This method is inherited from Widget
	SetStateFlags(flags StateFlags, clear bool)
	// SetStyle: used to set the Style for a widget (@widget->style). Since GTK
	// 3, this function does nothing, the passed in style is ignored.
	//
	// Deprecated: since version 3.0.
	//
	// This method is inherited from Widget
	SetStyle(style Style)
	// SetSupportMultidevice enables or disables multiple pointer awareness. If
	// this setting is true, @widget will start receiving multiple, per device
	// enter/leave events. Note that if custom Windows are created in
	// Widget::realize, gdk_window_set_support_multidevice() will have to be
	// called manually on them.
	//
	// This method is inherited from Widget
	SetSupportMultidevice(supportMultidevice bool)
	// SetTooltipMarkup sets @markup as the contents of the tooltip, which is
	// marked up with the [Pango text markup language][PangoMarkupFormat].
	//
	// This function will take care of setting Widget:has-tooltip to true and of
	// the default handler for the Widget::query-tooltip signal.
	//
	// See also the Widget:tooltip-markup property and gtk_tooltip_set_markup().
	//
	// This method is inherited from Widget
	SetTooltipMarkup(markup string)
	// SetTooltipText sets @text as the contents of the tooltip. This function
	// will take care of setting Widget:has-tooltip to true and of the default
	// handler for the Widget::query-tooltip signal.
	//
	// See also the Widget:tooltip-text property and gtk_tooltip_set_text().
	//
	// This method is inherited from Widget
	SetTooltipText(text string)
	// SetTooltipWindow replaces the default window used for displaying tooltips
	// with @custom_window. GTK+ will take care of showing and hiding
	// @custom_window at the right moment, to behave likewise as the default
	// tooltip window. If @custom_window is nil, the default tooltip window will
	// be used.
	//
	// This method is inherited from Widget
	SetTooltipWindow(customWindow Window)
	// SetVAlign sets the vertical alignment of @widget. See the Widget:valign
	// property.
	//
	// This method is inherited from Widget
	SetVAlign(align Align)
	// SetVExpand sets whether the widget would like any available extra
	// vertical space.
	//
	// See gtk_widget_set_hexpand() for more detail.
	//
	// This method is inherited from Widget
	SetVExpand(expand bool)
	// SetVExpandSet sets whether the vexpand flag (see
	// gtk_widget_get_vexpand()) will be used.
	//
	// See gtk_widget_set_hexpand_set() for more detail.
	//
	// This method is inherited from Widget
	SetVExpandSet(set bool)
	// SetVisible sets the visibility state of @widget. Note that setting this
	// to true doesn’t mean the widget is actually viewable, see
	// gtk_widget_get_visible().
	//
	// This function simply calls gtk_widget_show() or gtk_widget_hide() but is
	// nicer to use when the visibility of the widget depends on some condition.
	//
	// This method is inherited from Widget
	SetVisible(visible bool)
	// SetVisual sets the visual that should be used for by widget and its
	// children for creating Windows. The visual must be on the same Screen as
	// returned by gtk_widget_get_screen(), so handling the
	// Widget::screen-changed signal is necessary.
	//
	// Setting a new @visual will not cause @widget to recreate its windows, so
	// you should call this function before @widget is realized.
	//
	// This method is inherited from Widget
	SetVisual(visual gdk.Visual)
	// SetWindow sets a widget’s window. This function should only be used in a
	// widget’s Widget::realize implementation. The window passed is usually
	// either new window created with gdk_window_new(), or the window of its
	// parent widget as returned by gtk_widget_get_parent_window().
	//
	// Widgets must indicate whether they will create their own Window by
	// calling gtk_widget_set_has_window(). This is usually done in the widget’s
	// init() function.
	//
	// Note that this function does not add any reference to @window.
	//
	// This method is inherited from Widget
	SetWindow(window gdk.Window)
	// ShapeCombineRegion sets a shape for this widget’s GDK window. This allows
	// for transparent windows etc., see gdk_window_shape_combine_region() for
	// more information.
	//
	// This method is inherited from Widget
	ShapeCombineRegion(region *cairo.Region)
	// Show flags a widget to be displayed. Any widget that isn’t shown will not
	// appear on the screen. If you want to show all the widgets in a container,
	// it’s easier to call gtk_widget_show_all() on the container, instead of
	// individually showing the widgets.
	//
	// Remember that you have to show the containers containing a widget, in
	// addition to the widget itself, before it will appear onscreen.
	//
	// When a toplevel container is shown, it is immediately realized and
	// mapped; other shown widgets are realized and mapped when their toplevel
	// container is realized and mapped.
	//
	// This method is inherited from Widget
	Show()
	// ShowAll: recursively shows a widget, and any child widgets (if the widget
	// is a container).
	//
	// This method is inherited from Widget
	ShowAll()
	// ShowNow shows a widget. If the widget is an unmapped toplevel widget
	// (i.e. a Window that has not yet been shown), enter the main loop and wait
	// for the window to actually be mapped. Be careful; because the main loop
	// is running, anything can happen during this function.
	//
	// This method is inherited from Widget
	ShowNow()
	// SizeRequest: this function is typically used when implementing a
	// Container subclass. Obtains the preferred size of a widget. The container
	// uses this information to arrange its child widgets and decide what size
	// allocations to give them with gtk_widget_size_allocate().
	//
	// You can also call this function from an application, with some caveats.
	// Most notably, getting a size request requires the widget to be associated
	// with a screen, because font information may be needed. Multihead-aware
	// applications should keep this in mind.
	//
	// Also remember that the size request is not necessarily the size a widget
	// will actually be allocated.
	//
	// Deprecated: since version 3.0.
	//
	// This method is inherited from Widget
	SizeRequest() Requisition
	// StyleAttach: this function attaches the widget’s Style to the widget's
	// Window. It is a replacement for
	//
	//    widget->style = gtk_style_attach (widget->style, widget->window);
	//
	// and should only ever be called in a derived widget’s “realize”
	// implementation which does not chain up to its parent class' “realize”
	// implementation, because one of the parent classes (finally Widget) would
	// attach the style itself.
	//
	// Deprecated: since version 3.0.
	//
	// This method is inherited from Widget
	StyleAttach()
	// StyleGetProperty gets the value of a style property of @widget.
	//
	// This method is inherited from Widget
	StyleGetProperty(propertyName string, value externglib.Value)
	// ThawChildNotify reverts the effect of a previous call to
	// gtk_widget_freeze_child_notify(). This causes all queued
	// Widget::child-notify signals on @widget to be emitted.
	//
	// This method is inherited from Widget
	ThawChildNotify()
	// TranslateCoordinates: translate coordinates relative to @src_widget’s
	// allocation to coordinates relative to @dest_widget’s allocations. In
	// order to perform this operation, both widgets must be realized, and must
	// share a common toplevel.
	//
	// This method is inherited from Widget
	TranslateCoordinates(destWidget Widget, srcX int, srcY int) (destX int, destY int, ok bool)
	// TriggerTooltipQuery triggers a tooltip query on the display where the
	// toplevel of @widget is located. See gtk_tooltip_trigger_tooltip_query()
	// for more information.
	//
	// This method is inherited from Widget
	TriggerTooltipQuery()
	// Unmap: this function is only for use in widget implementations. Causes a
	// widget to be unmapped if it’s currently mapped.
	//
	// This method is inherited from Widget
	Unmap()
	// Unparent: this function is only for use in widget implementations. Should
	// be called by implementations of the remove method on Container, to
	// dissociate a child from the container.
	//
	// This method is inherited from Widget
	Unparent()
	// Unrealize: this function is only useful in widget implementations. Causes
	// a widget to be unrealized (frees all GDK resources associated with the
	// widget, such as @widget->window).
	//
	// This method is inherited from Widget
	Unrealize()
	// UnregisterWindow unregisters a Window from the widget that was previously
	// set up with gtk_widget_register_window(). You need to call this when the
	// window is no longer used by the widget, such as when you destroy it.
	//
	// This method is inherited from Widget
	UnregisterWindow(window gdk.Window)
	// UnsetStateFlags: this function is for use in widget implementations.
	// Turns off flag values for the current widget state (insensitive,
	// prelighted, etc.). See gtk_widget_set_state_flags().
	//
	// This method is inherited from Widget
	UnsetStateFlags(flags StateFlags)
	// AddChild adds a child to @buildable. @type is an optional string
	// describing how the child should be added.
	//
	// This method is inherited from Buildable
	AddChild(builder Builder, child gextras.Objector, typ string)
	// ConstructChild constructs a child of @buildable with the name @name.
	//
	// Builder calls this function if a “constructor” has been specified in the
	// UI definition.
	//
	// This method is inherited from Buildable
	ConstructChild(builder Builder, name string) gextras.Objector
	// CustomFinished: this is similar to gtk_buildable_parser_finished() but is
	// called once for each custom tag handled by the @buildable.
	//
	// This method is inherited from Buildable
	CustomFinished(builder Builder, child gextras.Objector, tagname string, data interface{})
	// CustomTagEnd: this is called at the end of each custom element handled by
	// the buildable.
	//
	// This method is inherited from Buildable
	CustomTagEnd(builder Builder, child gextras.Objector, tagname string, data interface{})
	// CustomTagStart: this is called for each unknown element under <child>.
	//
	// This method is inherited from Buildable
	CustomTagStart(builder Builder, child gextras.Objector, tagname string) (glib.MarkupParser, interface{}, bool)
	// GetInternalChild: get the internal child called @childname of the
	// @buildable object.
	//
	// This method is inherited from Buildable
	GetInternalChild(builder Builder, childname string) gextras.Objector
	// GetName gets the name of the @buildable object.
	//
	// Builder sets the name based on the [GtkBuilder UI definition][BUILDER-UI]
	// used to construct the @buildable.
	//
	// This method is inherited from Buildable
	GetName() string
	// ParserFinished: called when the builder finishes the parsing of a
	// [GtkBuilder UI definition][BUILDER-UI]. Note that this will be called
	// once for each time gtk_builder_add_from_file() or
	// gtk_builder_add_from_string() is called on a builder.
	//
	// This method is inherited from Buildable
	ParserFinished(builder Builder)
	// SetBuildableProperty sets the property name @name to @value on the
	// @buildable object.
	//
	// This method is inherited from Buildable
	SetBuildableProperty(builder Builder, name string, value externglib.Value)
	// SetName sets the name of the @buildable object.
	//
	// This method is inherited from Buildable
	SetName(name string)

	// ContentType returns the current value of the AppChooser:content-type
	// property.
	ContentType() string
	// Refresh reloads the list of applications.
	Refresh()
}

// appChooser implements the AppChooser interface.
type appChooser struct {
	*externglib.Object
}

var _ AppChooser = (*appChooser)(nil)

// WrapAppChooser wraps a GObject to a type that implements
// interface AppChooser. It is primarily used internally.
func WrapAppChooser(obj *externglib.Object) AppChooser {
	return appChooser{obj}
}

func marshalAppChooser(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapAppChooser(obj), nil
}

func (a appChooser) AsWidget() Widget {
	return WrapWidget(gextras.InternObject(a))
}

func (w appChooser) Activate() bool {
	return WrapWidget(gextras.InternObject(w)).Activate()
}

func (w appChooser) AddAccelerator(accelSignal string, accelGroup AccelGroup, accelKey uint, accelMods gdk.ModifierType, accelFlags AccelFlags) {
	WrapWidget(gextras.InternObject(w)).AddAccelerator(accelSignal, accelGroup, accelKey, accelMods, accelFlags)
}

func (w appChooser) AddDeviceEvents(device gdk.Device, events gdk.EventMask) {
	WrapWidget(gextras.InternObject(w)).AddDeviceEvents(device, events)
}

func (w appChooser) AddEvents(events int) {
	WrapWidget(gextras.InternObject(w)).AddEvents(events)
}

func (w appChooser) AddMnemonicLabel(label Widget) {
	WrapWidget(gextras.InternObject(w)).AddMnemonicLabel(label)
}

func (w appChooser) CanActivateAccel(signalId uint) bool {
	return WrapWidget(gextras.InternObject(w)).CanActivateAccel(signalId)
}

func (w appChooser) ChildFocus(direction DirectionType) bool {
	return WrapWidget(gextras.InternObject(w)).ChildFocus(direction)
}

func (w appChooser) ChildNotify(childProperty string) {
	WrapWidget(gextras.InternObject(w)).ChildNotify(childProperty)
}

func (w appChooser) ClassPath() (pathLength uint, path string, pathReversed string) {
	return WrapWidget(gextras.InternObject(w)).ClassPath()
}

func (w appChooser) ComputeExpand(orientation Orientation) bool {
	return WrapWidget(gextras.InternObject(w)).ComputeExpand(orientation)
}

func (w appChooser) CreatePangoContext() pango.Context {
	return WrapWidget(gextras.InternObject(w)).CreatePangoContext()
}

func (w appChooser) CreatePangoLayout(text string) pango.Layout {
	return WrapWidget(gextras.InternObject(w)).CreatePangoLayout(text)
}

func (w appChooser) Destroy() {
	WrapWidget(gextras.InternObject(w)).Destroy()
}

func (w appChooser) DeviceIsShadowed(device gdk.Device) bool {
	return WrapWidget(gextras.InternObject(w)).DeviceIsShadowed(device)
}

func (w appChooser) DragCheckThreshold(startX int, startY int, currentX int, currentY int) bool {
	return WrapWidget(gextras.InternObject(w)).DragCheckThreshold(startX, startY, currentX, currentY)
}

func (w appChooser) DragDestAddImageTargets() {
	WrapWidget(gextras.InternObject(w)).DragDestAddImageTargets()
}

func (w appChooser) DragDestAddTextTargets() {
	WrapWidget(gextras.InternObject(w)).DragDestAddTextTargets()
}

func (w appChooser) DragDestAddURITargets() {
	WrapWidget(gextras.InternObject(w)).DragDestAddURITargets()
}

func (w appChooser) DragDestGetTargetList() *TargetList {
	return WrapWidget(gextras.InternObject(w)).DragDestGetTargetList()
}

func (w appChooser) DragDestGetTrackMotion() bool {
	return WrapWidget(gextras.InternObject(w)).DragDestGetTrackMotion()
}

func (w appChooser) DragDestSet(flags DestDefaults, targets []TargetEntry, actions gdk.DragAction) {
	WrapWidget(gextras.InternObject(w)).DragDestSet(flags, targets, actions)
}

func (w appChooser) DragDestSetProxy(proxyWindow gdk.Window, protocol gdk.DragProtocol, useCoordinates bool) {
	WrapWidget(gextras.InternObject(w)).DragDestSetProxy(proxyWindow, protocol, useCoordinates)
}

func (w appChooser) DragDestSetTargetList(targetList *TargetList) {
	WrapWidget(gextras.InternObject(w)).DragDestSetTargetList(targetList)
}

func (w appChooser) DragDestSetTrackMotion(trackMotion bool) {
	WrapWidget(gextras.InternObject(w)).DragDestSetTrackMotion(trackMotion)
}

func (w appChooser) DragDestUnset() {
	WrapWidget(gextras.InternObject(w)).DragDestUnset()
}

func (w appChooser) DragHighlight() {
	WrapWidget(gextras.InternObject(w)).DragHighlight()
}

func (w appChooser) DragSourceAddImageTargets() {
	WrapWidget(gextras.InternObject(w)).DragSourceAddImageTargets()
}

func (w appChooser) DragSourceAddTextTargets() {
	WrapWidget(gextras.InternObject(w)).DragSourceAddTextTargets()
}

func (w appChooser) DragSourceAddURITargets() {
	WrapWidget(gextras.InternObject(w)).DragSourceAddURITargets()
}

func (w appChooser) DragSourceGetTargetList() *TargetList {
	return WrapWidget(gextras.InternObject(w)).DragSourceGetTargetList()
}

func (w appChooser) DragSourceSet(startButtonMask gdk.ModifierType, targets []TargetEntry, actions gdk.DragAction) {
	WrapWidget(gextras.InternObject(w)).DragSourceSet(startButtonMask, targets, actions)
}

func (w appChooser) DragSourceSetIconName(iconName string) {
	WrapWidget(gextras.InternObject(w)).DragSourceSetIconName(iconName)
}

func (w appChooser) DragSourceSetIconPixbuf(pixbuf gdkpixbuf.Pixbuf) {
	WrapWidget(gextras.InternObject(w)).DragSourceSetIconPixbuf(pixbuf)
}

func (w appChooser) DragSourceSetIconStock(stockId string) {
	WrapWidget(gextras.InternObject(w)).DragSourceSetIconStock(stockId)
}

func (w appChooser) DragSourceSetTargetList(targetList *TargetList) {
	WrapWidget(gextras.InternObject(w)).DragSourceSetTargetList(targetList)
}

func (w appChooser) DragSourceUnset() {
	WrapWidget(gextras.InternObject(w)).DragSourceUnset()
}

func (w appChooser) DragUnhighlight() {
	WrapWidget(gextras.InternObject(w)).DragUnhighlight()
}

func (w appChooser) Draw(cr *cairo.Context) {
	WrapWidget(gextras.InternObject(w)).Draw(cr)
}

func (w appChooser) EnsureStyle() {
	WrapWidget(gextras.InternObject(w)).EnsureStyle()
}

func (w appChooser) ErrorBell() {
	WrapWidget(gextras.InternObject(w)).ErrorBell()
}

func (w appChooser) FreezeChildNotify() {
	WrapWidget(gextras.InternObject(w)).FreezeChildNotify()
}

func (w appChooser) GetAccessible() atk.Object {
	return WrapWidget(gextras.InternObject(w)).GetAccessible()
}

func (w appChooser) GetActionGroup(prefix string) gio.ActionGroup {
	return WrapWidget(gextras.InternObject(w)).GetActionGroup(prefix)
}

func (w appChooser) GetAllocatedBaseline() int {
	return WrapWidget(gextras.InternObject(w)).GetAllocatedBaseline()
}

func (w appChooser) GetAllocatedHeight() int {
	return WrapWidget(gextras.InternObject(w)).GetAllocatedHeight()
}

func (w appChooser) GetAllocatedWidth() int {
	return WrapWidget(gextras.InternObject(w)).GetAllocatedWidth()
}

func (w appChooser) GetAncestor(widgetType externglib.Type) Widget {
	return WrapWidget(gextras.InternObject(w)).GetAncestor(widgetType)
}

func (w appChooser) GetAppPaintable() bool {
	return WrapWidget(gextras.InternObject(w)).GetAppPaintable()
}

func (w appChooser) GetCanDefault() bool {
	return WrapWidget(gextras.InternObject(w)).GetCanDefault()
}

func (w appChooser) GetCanFocus() bool {
	return WrapWidget(gextras.InternObject(w)).GetCanFocus()
}

func (w appChooser) GetChildRequisition() Requisition {
	return WrapWidget(gextras.InternObject(w)).GetChildRequisition()
}

func (w appChooser) GetChildVisible() bool {
	return WrapWidget(gextras.InternObject(w)).GetChildVisible()
}

func (w appChooser) GetCompositeName() string {
	return WrapWidget(gextras.InternObject(w)).GetCompositeName()
}

func (w appChooser) GetDeviceEnabled(device gdk.Device) bool {
	return WrapWidget(gextras.InternObject(w)).GetDeviceEnabled(device)
}

func (w appChooser) GetDeviceEvents(device gdk.Device) gdk.EventMask {
	return WrapWidget(gextras.InternObject(w)).GetDeviceEvents(device)
}

func (w appChooser) GetDirection() TextDirection {
	return WrapWidget(gextras.InternObject(w)).GetDirection()
}

func (w appChooser) GetDisplay() gdk.Display {
	return WrapWidget(gextras.InternObject(w)).GetDisplay()
}

func (w appChooser) GetDoubleBuffered() bool {
	return WrapWidget(gextras.InternObject(w)).GetDoubleBuffered()
}

func (w appChooser) GetEvents() int {
	return WrapWidget(gextras.InternObject(w)).GetEvents()
}

func (w appChooser) GetFocusOnClick() bool {
	return WrapWidget(gextras.InternObject(w)).GetFocusOnClick()
}

func (w appChooser) GetFontMap() pango.FontMap {
	return WrapWidget(gextras.InternObject(w)).GetFontMap()
}

func (w appChooser) GetFontOptions() *cairo.FontOptions {
	return WrapWidget(gextras.InternObject(w)).GetFontOptions()
}

func (w appChooser) GetFrameClock() gdk.FrameClock {
	return WrapWidget(gextras.InternObject(w)).GetFrameClock()
}

func (w appChooser) GetHAlign() Align {
	return WrapWidget(gextras.InternObject(w)).GetHAlign()
}

func (w appChooser) GetHasTooltip() bool {
	return WrapWidget(gextras.InternObject(w)).GetHasTooltip()
}

func (w appChooser) GetHasWindow() bool {
	return WrapWidget(gextras.InternObject(w)).GetHasWindow()
}

func (w appChooser) GetHExpand() bool {
	return WrapWidget(gextras.InternObject(w)).GetHExpand()
}

func (w appChooser) GetHExpandSet() bool {
	return WrapWidget(gextras.InternObject(w)).GetHExpandSet()
}

func (w appChooser) GetMapped() bool {
	return WrapWidget(gextras.InternObject(w)).GetMapped()
}

func (w appChooser) GetMarginBottom() int {
	return WrapWidget(gextras.InternObject(w)).GetMarginBottom()
}

func (w appChooser) GetMarginEnd() int {
	return WrapWidget(gextras.InternObject(w)).GetMarginEnd()
}

func (w appChooser) GetMarginLeft() int {
	return WrapWidget(gextras.InternObject(w)).GetMarginLeft()
}

func (w appChooser) GetMarginRight() int {
	return WrapWidget(gextras.InternObject(w)).GetMarginRight()
}

func (w appChooser) GetMarginStart() int {
	return WrapWidget(gextras.InternObject(w)).GetMarginStart()
}

func (w appChooser) GetMarginTop() int {
	return WrapWidget(gextras.InternObject(w)).GetMarginTop()
}

func (w appChooser) GetModifierMask(intent gdk.ModifierIntent) gdk.ModifierType {
	return WrapWidget(gextras.InternObject(w)).GetModifierMask(intent)
}

func (w appChooser) GetModifierStyle() RCStyle {
	return WrapWidget(gextras.InternObject(w)).GetModifierStyle()
}

func (w appChooser) GetName() string {
	return WrapWidget(gextras.InternObject(w)).GetName()
}

func (w appChooser) GetNoShowAll() bool {
	return WrapWidget(gextras.InternObject(w)).GetNoShowAll()
}

func (w appChooser) GetOpacity() float64 {
	return WrapWidget(gextras.InternObject(w)).GetOpacity()
}

func (w appChooser) GetPangoContext() pango.Context {
	return WrapWidget(gextras.InternObject(w)).GetPangoContext()
}

func (w appChooser) GetParent() Widget {
	return WrapWidget(gextras.InternObject(w)).GetParent()
}

func (w appChooser) GetParentWindow() gdk.Window {
	return WrapWidget(gextras.InternObject(w)).GetParentWindow()
}

func (w appChooser) GetPath() *WidgetPath {
	return WrapWidget(gextras.InternObject(w)).GetPath()
}

func (w appChooser) GetPointer() (x int, y int) {
	return WrapWidget(gextras.InternObject(w)).GetPointer()
}

func (w appChooser) GetPreferredHeight() (minimumHeight int, naturalHeight int) {
	return WrapWidget(gextras.InternObject(w)).GetPreferredHeight()
}

func (w appChooser) GetPreferredHeightAndBaselineForWidth(width int) (minimumHeight int, naturalHeight int, minimumBaseline int, naturalBaseline int) {
	return WrapWidget(gextras.InternObject(w)).GetPreferredHeightAndBaselineForWidth(width)
}

func (w appChooser) GetPreferredHeightForWidth(width int) (minimumHeight int, naturalHeight int) {
	return WrapWidget(gextras.InternObject(w)).GetPreferredHeightForWidth(width)
}

func (w appChooser) GetPreferredSize() (minimumSize Requisition, naturalSize Requisition) {
	return WrapWidget(gextras.InternObject(w)).GetPreferredSize()
}

func (w appChooser) GetPreferredWidth() (minimumWidth int, naturalWidth int) {
	return WrapWidget(gextras.InternObject(w)).GetPreferredWidth()
}

func (w appChooser) GetPreferredWidthForHeight(height int) (minimumWidth int, naturalWidth int) {
	return WrapWidget(gextras.InternObject(w)).GetPreferredWidthForHeight(height)
}

func (w appChooser) GetRealized() bool {
	return WrapWidget(gextras.InternObject(w)).GetRealized()
}

func (w appChooser) GetReceivesDefault() bool {
	return WrapWidget(gextras.InternObject(w)).GetReceivesDefault()
}

func (w appChooser) GetRequestMode() SizeRequestMode {
	return WrapWidget(gextras.InternObject(w)).GetRequestMode()
}

func (w appChooser) GetRequisition() Requisition {
	return WrapWidget(gextras.InternObject(w)).GetRequisition()
}

func (w appChooser) GetRootWindow() gdk.Window {
	return WrapWidget(gextras.InternObject(w)).GetRootWindow()
}

func (w appChooser) GetScaleFactor() int {
	return WrapWidget(gextras.InternObject(w)).GetScaleFactor()
}

func (w appChooser) GetScreen() gdk.Screen {
	return WrapWidget(gextras.InternObject(w)).GetScreen()
}

func (w appChooser) GetSensitive() bool {
	return WrapWidget(gextras.InternObject(w)).GetSensitive()
}

func (w appChooser) GetSettings() Settings {
	return WrapWidget(gextras.InternObject(w)).GetSettings()
}

func (w appChooser) GetSizeRequest() (width int, height int) {
	return WrapWidget(gextras.InternObject(w)).GetSizeRequest()
}

func (w appChooser) GetState() StateType {
	return WrapWidget(gextras.InternObject(w)).GetState()
}

func (w appChooser) GetStateFlags() StateFlags {
	return WrapWidget(gextras.InternObject(w)).GetStateFlags()
}

func (w appChooser) GetStyle() Style {
	return WrapWidget(gextras.InternObject(w)).GetStyle()
}

func (w appChooser) GetStyleContext() StyleContext {
	return WrapWidget(gextras.InternObject(w)).GetStyleContext()
}

func (w appChooser) GetSupportMultidevice() bool {
	return WrapWidget(gextras.InternObject(w)).GetSupportMultidevice()
}

func (w appChooser) GetTemplateChild(widgetType externglib.Type, name string) gextras.Objector {
	return WrapWidget(gextras.InternObject(w)).GetTemplateChild(widgetType, name)
}

func (w appChooser) GetTooltipMarkup() string {
	return WrapWidget(gextras.InternObject(w)).GetTooltipMarkup()
}

func (w appChooser) GetTooltipText() string {
	return WrapWidget(gextras.InternObject(w)).GetTooltipText()
}

func (w appChooser) GetTooltipWindow() Window {
	return WrapWidget(gextras.InternObject(w)).GetTooltipWindow()
}

func (w appChooser) GetToplevel() Widget {
	return WrapWidget(gextras.InternObject(w)).GetToplevel()
}

func (w appChooser) GetVAlign() Align {
	return WrapWidget(gextras.InternObject(w)).GetVAlign()
}

func (w appChooser) GetVAlignWithBaseline() Align {
	return WrapWidget(gextras.InternObject(w)).GetVAlignWithBaseline()
}

func (w appChooser) GetVExpand() bool {
	return WrapWidget(gextras.InternObject(w)).GetVExpand()
}

func (w appChooser) GetVExpandSet() bool {
	return WrapWidget(gextras.InternObject(w)).GetVExpandSet()
}

func (w appChooser) GetVisible() bool {
	return WrapWidget(gextras.InternObject(w)).GetVisible()
}

func (w appChooser) GetVisual() gdk.Visual {
	return WrapWidget(gextras.InternObject(w)).GetVisual()
}

func (w appChooser) GetWindow() gdk.Window {
	return WrapWidget(gextras.InternObject(w)).GetWindow()
}

func (w appChooser) GrabAdd() {
	WrapWidget(gextras.InternObject(w)).GrabAdd()
}

func (w appChooser) GrabDefault() {
	WrapWidget(gextras.InternObject(w)).GrabDefault()
}

func (w appChooser) GrabFocus() {
	WrapWidget(gextras.InternObject(w)).GrabFocus()
}

func (w appChooser) GrabRemove() {
	WrapWidget(gextras.InternObject(w)).GrabRemove()
}

func (w appChooser) HasDefault() bool {
	return WrapWidget(gextras.InternObject(w)).HasDefault()
}

func (w appChooser) HasFocus() bool {
	return WrapWidget(gextras.InternObject(w)).HasFocus()
}

func (w appChooser) HasGrab() bool {
	return WrapWidget(gextras.InternObject(w)).HasGrab()
}

func (w appChooser) HasRCStyle() bool {
	return WrapWidget(gextras.InternObject(w)).HasRCStyle()
}

func (w appChooser) HasScreen() bool {
	return WrapWidget(gextras.InternObject(w)).HasScreen()
}

func (w appChooser) HasVisibleFocus() bool {
	return WrapWidget(gextras.InternObject(w)).HasVisibleFocus()
}

func (w appChooser) Hide() {
	WrapWidget(gextras.InternObject(w)).Hide()
}

func (w appChooser) HideOnDelete() bool {
	return WrapWidget(gextras.InternObject(w)).HideOnDelete()
}

func (w appChooser) InDestruction() bool {
	return WrapWidget(gextras.InternObject(w)).InDestruction()
}

func (w appChooser) InitTemplate() {
	WrapWidget(gextras.InternObject(w)).InitTemplate()
}

func (w appChooser) InputShapeCombineRegion(region *cairo.Region) {
	WrapWidget(gextras.InternObject(w)).InputShapeCombineRegion(region)
}

func (w appChooser) InsertActionGroup(name string, group gio.ActionGroup) {
	WrapWidget(gextras.InternObject(w)).InsertActionGroup(name, group)
}

func (w appChooser) Intersect(area *gdk.Rectangle) (gdk.Rectangle, bool) {
	return WrapWidget(gextras.InternObject(w)).Intersect(area)
}

func (w appChooser) IsAncestor(ancestor Widget) bool {
	return WrapWidget(gextras.InternObject(w)).IsAncestor(ancestor)
}

func (w appChooser) IsComposited() bool {
	return WrapWidget(gextras.InternObject(w)).IsComposited()
}

func (w appChooser) IsDrawable() bool {
	return WrapWidget(gextras.InternObject(w)).IsDrawable()
}

func (w appChooser) IsFocus() bool {
	return WrapWidget(gextras.InternObject(w)).IsFocus()
}

func (w appChooser) IsSensitive() bool {
	return WrapWidget(gextras.InternObject(w)).IsSensitive()
}

func (w appChooser) IsToplevel() bool {
	return WrapWidget(gextras.InternObject(w)).IsToplevel()
}

func (w appChooser) IsVisible() bool {
	return WrapWidget(gextras.InternObject(w)).IsVisible()
}

func (w appChooser) KeynavFailed(direction DirectionType) bool {
	return WrapWidget(gextras.InternObject(w)).KeynavFailed(direction)
}

func (w appChooser) ListActionPrefixes() []string {
	return WrapWidget(gextras.InternObject(w)).ListActionPrefixes()
}

func (w appChooser) Map() {
	WrapWidget(gextras.InternObject(w)).Map()
}

func (w appChooser) MnemonicActivate(groupCycling bool) bool {
	return WrapWidget(gextras.InternObject(w)).MnemonicActivate(groupCycling)
}

func (w appChooser) ModifyBase(state StateType, color *gdk.Color) {
	WrapWidget(gextras.InternObject(w)).ModifyBase(state, color)
}

func (w appChooser) ModifyBg(state StateType, color *gdk.Color) {
	WrapWidget(gextras.InternObject(w)).ModifyBg(state, color)
}

func (w appChooser) ModifyCursor(primary *gdk.Color, secondary *gdk.Color) {
	WrapWidget(gextras.InternObject(w)).ModifyCursor(primary, secondary)
}

func (w appChooser) ModifyFg(state StateType, color *gdk.Color) {
	WrapWidget(gextras.InternObject(w)).ModifyFg(state, color)
}

func (w appChooser) ModifyFont(fontDesc *pango.FontDescription) {
	WrapWidget(gextras.InternObject(w)).ModifyFont(fontDesc)
}

func (w appChooser) ModifyStyle(style RCStyle) {
	WrapWidget(gextras.InternObject(w)).ModifyStyle(style)
}

func (w appChooser) ModifyText(state StateType, color *gdk.Color) {
	WrapWidget(gextras.InternObject(w)).ModifyText(state, color)
}

func (w appChooser) OverrideBackgroundColor(state StateFlags, color *gdk.RGBA) {
	WrapWidget(gextras.InternObject(w)).OverrideBackgroundColor(state, color)
}

func (w appChooser) OverrideColor(state StateFlags, color *gdk.RGBA) {
	WrapWidget(gextras.InternObject(w)).OverrideColor(state, color)
}

func (w appChooser) OverrideCursor(cursor *gdk.RGBA, secondaryCursor *gdk.RGBA) {
	WrapWidget(gextras.InternObject(w)).OverrideCursor(cursor, secondaryCursor)
}

func (w appChooser) OverrideFont(fontDesc *pango.FontDescription) {
	WrapWidget(gextras.InternObject(w)).OverrideFont(fontDesc)
}

func (w appChooser) OverrideSymbolicColor(name string, color *gdk.RGBA) {
	WrapWidget(gextras.InternObject(w)).OverrideSymbolicColor(name, color)
}

func (w appChooser) Path() (pathLength uint, path string, pathReversed string) {
	return WrapWidget(gextras.InternObject(w)).Path()
}

func (w appChooser) QueueAllocate() {
	WrapWidget(gextras.InternObject(w)).QueueAllocate()
}

func (w appChooser) QueueComputeExpand() {
	WrapWidget(gextras.InternObject(w)).QueueComputeExpand()
}

func (w appChooser) QueueDraw() {
	WrapWidget(gextras.InternObject(w)).QueueDraw()
}

func (w appChooser) QueueDrawArea(x int, y int, width int, height int) {
	WrapWidget(gextras.InternObject(w)).QueueDrawArea(x, y, width, height)
}

func (w appChooser) QueueDrawRegion(region *cairo.Region) {
	WrapWidget(gextras.InternObject(w)).QueueDrawRegion(region)
}

func (w appChooser) QueueResize() {
	WrapWidget(gextras.InternObject(w)).QueueResize()
}

func (w appChooser) QueueResizeNoRedraw() {
	WrapWidget(gextras.InternObject(w)).QueueResizeNoRedraw()
}

func (w appChooser) Realize() {
	WrapWidget(gextras.InternObject(w)).Realize()
}

func (w appChooser) RegionIntersect(region *cairo.Region) *cairo.Region {
	return WrapWidget(gextras.InternObject(w)).RegionIntersect(region)
}

func (w appChooser) RegisterWindow(window gdk.Window) {
	WrapWidget(gextras.InternObject(w)).RegisterWindow(window)
}

func (w appChooser) RemoveAccelerator(accelGroup AccelGroup, accelKey uint, accelMods gdk.ModifierType) bool {
	return WrapWidget(gextras.InternObject(w)).RemoveAccelerator(accelGroup, accelKey, accelMods)
}

func (w appChooser) RemoveMnemonicLabel(label Widget) {
	WrapWidget(gextras.InternObject(w)).RemoveMnemonicLabel(label)
}

func (w appChooser) RemoveTickCallback(id uint) {
	WrapWidget(gextras.InternObject(w)).RemoveTickCallback(id)
}

func (w appChooser) RenderIcon(stockId string, size int, detail string) gdkpixbuf.Pixbuf {
	return WrapWidget(gextras.InternObject(w)).RenderIcon(stockId, size, detail)
}

func (w appChooser) RenderIconPixbuf(stockId string, size int) gdkpixbuf.Pixbuf {
	return WrapWidget(gextras.InternObject(w)).RenderIconPixbuf(stockId, size)
}

func (w appChooser) Reparent(newParent Widget) {
	WrapWidget(gextras.InternObject(w)).Reparent(newParent)
}

func (w appChooser) ResetRCStyles() {
	WrapWidget(gextras.InternObject(w)).ResetRCStyles()
}

func (w appChooser) ResetStyle() {
	WrapWidget(gextras.InternObject(w)).ResetStyle()
}

func (w appChooser) SetAccelPath(accelPath string, accelGroup AccelGroup) {
	WrapWidget(gextras.InternObject(w)).SetAccelPath(accelPath, accelGroup)
}

func (w appChooser) SetAppPaintable(appPaintable bool) {
	WrapWidget(gextras.InternObject(w)).SetAppPaintable(appPaintable)
}

func (w appChooser) SetCanDefault(canDefault bool) {
	WrapWidget(gextras.InternObject(w)).SetCanDefault(canDefault)
}

func (w appChooser) SetCanFocus(canFocus bool) {
	WrapWidget(gextras.InternObject(w)).SetCanFocus(canFocus)
}

func (w appChooser) SetChildVisible(isVisible bool) {
	WrapWidget(gextras.InternObject(w)).SetChildVisible(isVisible)
}

func (w appChooser) SetCompositeName(name string) {
	WrapWidget(gextras.InternObject(w)).SetCompositeName(name)
}

func (w appChooser) SetDeviceEnabled(device gdk.Device, enabled bool) {
	WrapWidget(gextras.InternObject(w)).SetDeviceEnabled(device, enabled)
}

func (w appChooser) SetDeviceEvents(device gdk.Device, events gdk.EventMask) {
	WrapWidget(gextras.InternObject(w)).SetDeviceEvents(device, events)
}

func (w appChooser) SetDirection(dir TextDirection) {
	WrapWidget(gextras.InternObject(w)).SetDirection(dir)
}

func (w appChooser) SetDoubleBuffered(doubleBuffered bool) {
	WrapWidget(gextras.InternObject(w)).SetDoubleBuffered(doubleBuffered)
}

func (w appChooser) SetEvents(events int) {
	WrapWidget(gextras.InternObject(w)).SetEvents(events)
}

func (w appChooser) SetFocusOnClick(focusOnClick bool) {
	WrapWidget(gextras.InternObject(w)).SetFocusOnClick(focusOnClick)
}

func (w appChooser) SetFontMap(fontMap pango.FontMap) {
	WrapWidget(gextras.InternObject(w)).SetFontMap(fontMap)
}

func (w appChooser) SetFontOptions(options *cairo.FontOptions) {
	WrapWidget(gextras.InternObject(w)).SetFontOptions(options)
}

func (w appChooser) SetHAlign(align Align) {
	WrapWidget(gextras.InternObject(w)).SetHAlign(align)
}

func (w appChooser) SetHasTooltip(hasTooltip bool) {
	WrapWidget(gextras.InternObject(w)).SetHasTooltip(hasTooltip)
}

func (w appChooser) SetHasWindow(hasWindow bool) {
	WrapWidget(gextras.InternObject(w)).SetHasWindow(hasWindow)
}

func (w appChooser) SetHExpand(expand bool) {
	WrapWidget(gextras.InternObject(w)).SetHExpand(expand)
}

func (w appChooser) SetHExpandSet(set bool) {
	WrapWidget(gextras.InternObject(w)).SetHExpandSet(set)
}

func (w appChooser) SetMapped(mapped bool) {
	WrapWidget(gextras.InternObject(w)).SetMapped(mapped)
}

func (w appChooser) SetMarginBottom(margin int) {
	WrapWidget(gextras.InternObject(w)).SetMarginBottom(margin)
}

func (w appChooser) SetMarginEnd(margin int) {
	WrapWidget(gextras.InternObject(w)).SetMarginEnd(margin)
}

func (w appChooser) SetMarginLeft(margin int) {
	WrapWidget(gextras.InternObject(w)).SetMarginLeft(margin)
}

func (w appChooser) SetMarginRight(margin int) {
	WrapWidget(gextras.InternObject(w)).SetMarginRight(margin)
}

func (w appChooser) SetMarginStart(margin int) {
	WrapWidget(gextras.InternObject(w)).SetMarginStart(margin)
}

func (w appChooser) SetMarginTop(margin int) {
	WrapWidget(gextras.InternObject(w)).SetMarginTop(margin)
}

func (w appChooser) SetName(name string) {
	WrapWidget(gextras.InternObject(w)).SetName(name)
}

func (w appChooser) SetNoShowAll(noShowAll bool) {
	WrapWidget(gextras.InternObject(w)).SetNoShowAll(noShowAll)
}

func (w appChooser) SetOpacity(opacity float64) {
	WrapWidget(gextras.InternObject(w)).SetOpacity(opacity)
}

func (w appChooser) SetParent(parent Widget) {
	WrapWidget(gextras.InternObject(w)).SetParent(parent)
}

func (w appChooser) SetParentWindow(parentWindow gdk.Window) {
	WrapWidget(gextras.InternObject(w)).SetParentWindow(parentWindow)
}

func (w appChooser) SetRealized(realized bool) {
	WrapWidget(gextras.InternObject(w)).SetRealized(realized)
}

func (w appChooser) SetReceivesDefault(receivesDefault bool) {
	WrapWidget(gextras.InternObject(w)).SetReceivesDefault(receivesDefault)
}

func (w appChooser) SetRedrawOnAllocate(redrawOnAllocate bool) {
	WrapWidget(gextras.InternObject(w)).SetRedrawOnAllocate(redrawOnAllocate)
}

func (w appChooser) SetSensitive(sensitive bool) {
	WrapWidget(gextras.InternObject(w)).SetSensitive(sensitive)
}

func (w appChooser) SetSizeRequest(width int, height int) {
	WrapWidget(gextras.InternObject(w)).SetSizeRequest(width, height)
}

func (w appChooser) SetState(state StateType) {
	WrapWidget(gextras.InternObject(w)).SetState(state)
}

func (w appChooser) SetStateFlags(flags StateFlags, clear bool) {
	WrapWidget(gextras.InternObject(w)).SetStateFlags(flags, clear)
}

func (w appChooser) SetStyle(style Style) {
	WrapWidget(gextras.InternObject(w)).SetStyle(style)
}

func (w appChooser) SetSupportMultidevice(supportMultidevice bool) {
	WrapWidget(gextras.InternObject(w)).SetSupportMultidevice(supportMultidevice)
}

func (w appChooser) SetTooltipMarkup(markup string) {
	WrapWidget(gextras.InternObject(w)).SetTooltipMarkup(markup)
}

func (w appChooser) SetTooltipText(text string) {
	WrapWidget(gextras.InternObject(w)).SetTooltipText(text)
}

func (w appChooser) SetTooltipWindow(customWindow Window) {
	WrapWidget(gextras.InternObject(w)).SetTooltipWindow(customWindow)
}

func (w appChooser) SetVAlign(align Align) {
	WrapWidget(gextras.InternObject(w)).SetVAlign(align)
}

func (w appChooser) SetVExpand(expand bool) {
	WrapWidget(gextras.InternObject(w)).SetVExpand(expand)
}

func (w appChooser) SetVExpandSet(set bool) {
	WrapWidget(gextras.InternObject(w)).SetVExpandSet(set)
}

func (w appChooser) SetVisible(visible bool) {
	WrapWidget(gextras.InternObject(w)).SetVisible(visible)
}

func (w appChooser) SetVisual(visual gdk.Visual) {
	WrapWidget(gextras.InternObject(w)).SetVisual(visual)
}

func (w appChooser) SetWindow(window gdk.Window) {
	WrapWidget(gextras.InternObject(w)).SetWindow(window)
}

func (w appChooser) ShapeCombineRegion(region *cairo.Region) {
	WrapWidget(gextras.InternObject(w)).ShapeCombineRegion(region)
}

func (w appChooser) Show() {
	WrapWidget(gextras.InternObject(w)).Show()
}

func (w appChooser) ShowAll() {
	WrapWidget(gextras.InternObject(w)).ShowAll()
}

func (w appChooser) ShowNow() {
	WrapWidget(gextras.InternObject(w)).ShowNow()
}

func (w appChooser) SizeRequest() Requisition {
	return WrapWidget(gextras.InternObject(w)).SizeRequest()
}

func (w appChooser) StyleAttach() {
	WrapWidget(gextras.InternObject(w)).StyleAttach()
}

func (w appChooser) StyleGetProperty(propertyName string, value externglib.Value) {
	WrapWidget(gextras.InternObject(w)).StyleGetProperty(propertyName, value)
}

func (w appChooser) ThawChildNotify() {
	WrapWidget(gextras.InternObject(w)).ThawChildNotify()
}

func (s appChooser) TranslateCoordinates(destWidget Widget, srcX int, srcY int) (destX int, destY int, ok bool) {
	return WrapWidget(gextras.InternObject(s)).TranslateCoordinates(destWidget, srcX, srcY)
}

func (w appChooser) TriggerTooltipQuery() {
	WrapWidget(gextras.InternObject(w)).TriggerTooltipQuery()
}

func (w appChooser) Unmap() {
	WrapWidget(gextras.InternObject(w)).Unmap()
}

func (w appChooser) Unparent() {
	WrapWidget(gextras.InternObject(w)).Unparent()
}

func (w appChooser) Unrealize() {
	WrapWidget(gextras.InternObject(w)).Unrealize()
}

func (w appChooser) UnregisterWindow(window gdk.Window) {
	WrapWidget(gextras.InternObject(w)).UnregisterWindow(window)
}

func (w appChooser) UnsetStateFlags(flags StateFlags) {
	WrapWidget(gextras.InternObject(w)).UnsetStateFlags(flags)
}

func (b appChooser) AddChild(builder Builder, child gextras.Objector, typ string) {
	WrapBuildable(gextras.InternObject(b)).AddChild(builder, child, typ)
}

func (b appChooser) ConstructChild(builder Builder, name string) gextras.Objector {
	return WrapBuildable(gextras.InternObject(b)).ConstructChild(builder, name)
}

func (b appChooser) CustomFinished(builder Builder, child gextras.Objector, tagname string, data interface{}) {
	WrapBuildable(gextras.InternObject(b)).CustomFinished(builder, child, tagname, data)
}

func (b appChooser) CustomTagEnd(builder Builder, child gextras.Objector, tagname string, data interface{}) {
	WrapBuildable(gextras.InternObject(b)).CustomTagEnd(builder, child, tagname, data)
}

func (b appChooser) CustomTagStart(builder Builder, child gextras.Objector, tagname string) (glib.MarkupParser, interface{}, bool) {
	return WrapBuildable(gextras.InternObject(b)).CustomTagStart(builder, child, tagname)
}

func (b appChooser) GetInternalChild(builder Builder, childname string) gextras.Objector {
	return WrapBuildable(gextras.InternObject(b)).GetInternalChild(builder, childname)
}

func (b appChooser) GetName() string {
	return WrapBuildable(gextras.InternObject(b)).GetName()
}

func (b appChooser) ParserFinished(builder Builder) {
	WrapBuildable(gextras.InternObject(b)).ParserFinished(builder)
}

func (b appChooser) SetBuildableProperty(builder Builder, name string, value externglib.Value) {
	WrapBuildable(gextras.InternObject(b)).SetBuildableProperty(builder, name, value)
}

func (b appChooser) SetName(name string) {
	WrapBuildable(gextras.InternObject(b)).SetName(name)
}

func (s appChooser) ContentType() string {
	var _arg0 *C.GtkAppChooser // out
	var _cret *C.gchar         // in

	_arg0 = (*C.GtkAppChooser)(unsafe.Pointer(s.Native()))

	_cret = C.gtk_app_chooser_get_content_type(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

func (s appChooser) Refresh() {
	var _arg0 *C.GtkAppChooser // out

	_arg0 = (*C.GtkAppChooser)(unsafe.Pointer(s.Native()))

	C.gtk_app_chooser_refresh(_arg0)
}
