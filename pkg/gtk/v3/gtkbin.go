// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: glib-2.0 gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_bin_get_type()), F: marshalBin},
	})
}

// Bin: the Bin widget is a container with just one child. It is not very useful
// itself, but it is useful for deriving subclasses, since it provides common
// code needed for handling a single child widget.
//
// Many GTK+ widgets are subclasses of Bin, including Window, Button, Frame,
// HandleBox or ScrolledWindow.
type Bin interface {
	Container
	Buildable

	// Child gets the child of the Bin, or nil if the bin contains no child
	// widget. The returned widget does not have a reference added, so you do
	// not need to unref it.
	Child() Widget
}

// bin implements the Bin class.
type bin struct {
	Container
	Buildable
}

var _ Bin = (*bin)(nil)

// WrapBin wraps a GObject to the right type. It is
// primarily used internally.
func WrapBin(obj *externglib.Object) Bin {
	return bin{
		Container: WrapContainer(obj),
		Buildable: WrapBuildable(obj),
	}
}

func marshalBin(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapBin(obj), nil
}

// Child gets the child of the Bin, or nil if the bin contains no child
// widget. The returned widget does not have a reference added, so you do
// not need to unref it.
func (b bin) Child() Widget {
	var _arg0 *C.GtkBin    // out
	var _cret *C.GtkWidget // in

	_arg0 = (*C.GtkBin)(unsafe.Pointer(b.Native()))

	_cret = C.gtk_bin_get_child(_arg0)

	var _widget Widget // out

	_widget = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Widget)

	return _widget
}
