// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_box_get_type()), F: marshalBox},
	})
}

// Box: the GtkBox widget arranges child widgets into a single row or column,
// depending upon the value of its Orientable:orientation property. Within the
// other dimension, all children are allocated the same size. Of course, the
// Widget:halign and Widget:valign properties can be used on the children to
// influence their allocation.
//
// GtkBox uses a notion of packing. Packing refers to adding widgets with
// reference to a particular position in a Container. For a GtkBox, there are
// two reference positions: the start and the end of the box. For a vertical
// Box, the start is defined as the top of the box and the end is defined as the
// bottom. For a horizontal Box the start is defined as the left side and the
// end is defined as the right side.
//
// Use repeated calls to gtk_box_pack_start() to pack widgets into a GtkBox from
// start to end. Use gtk_box_pack_end() to add widgets from end to start. You
// may intersperse these calls and add widgets from both ends of the same
// GtkBox.
//
// Because GtkBox is a Container, you may also use gtk_container_add() to insert
// widgets into the box, and they will be packed with the default values for
// expand and fill child properties. Use gtk_container_remove() to remove
// widgets from the GtkBox.
//
// Use gtk_box_set_homogeneous() to specify whether or not all children of the
// GtkBox are forced to get the same amount of space.
//
// Use gtk_box_set_spacing() to determine how much space will be minimally
// placed between all children in the GtkBox. Note that spacing is added between
// the children, while padding added by gtk_box_pack_start() or
// gtk_box_pack_end() is added on either side of the widget it belongs to.
//
// Use gtk_box_reorder_child() to move a GtkBox child to a different place in
// the box.
//
// Use gtk_box_set_child_packing() to reset the expand, fill and padding child
// properties. Use gtk_box_query_child_packing() to query these fields.
//
//
// CSS nodes
//
// GtkBox uses a single CSS node with name box.
//
// In horizontal orientation, the nodes of the children are always arranged from
// left to right. So :first-child will always select the leftmost child,
// regardless of text direction.
type Box interface {
	Container
	Buildable
	Orientable

	// BaselinePosition gets the value set by gtk_box_set_baseline_position().
	BaselinePosition() BaselinePosition
	// CenterWidget retrieves the center widget of the box.
	CenterWidget() Widget
	// Homogeneous returns whether the box is homogeneous (all children are the
	// same size). See gtk_box_set_homogeneous().
	Homogeneous() bool
	// Spacing gets the value set by gtk_box_set_spacing().
	Spacing() int
	// PackEnd adds @child to @box, packed with reference to the end of @box.
	// The @child is packed after (away from end of) any other child packed with
	// reference to the end of @box.
	PackEnd(child Widget, expand bool, fill bool, padding uint)
	// PackStart adds @child to @box, packed with reference to the start of
	// @box. The @child is packed after any other child packed with reference to
	// the start of @box.
	PackStart(child Widget, expand bool, fill bool, padding uint)
	// QueryChildPacking obtains information about how @child is packed into
	// @box.
	QueryChildPacking(child Widget) (expand bool, fill bool, padding uint, packType PackType)
	// ReorderChild moves @child to a new @position in the list of @box
	// children. The list contains widgets packed K_PACK_START as well as
	// widgets packed K_PACK_END, in the order that these widgets were added to
	// @box.
	//
	// A widget’s position in the @box children list determines where the widget
	// is packed into @box. A child widget at some position in the list will be
	// packed just after all other widgets of the same packing type that appear
	// earlier in the list.
	ReorderChild(child Widget, position int)
	// SetBaselinePosition sets the baseline position of a box. This affects
	// only horizontal boxes with at least one baseline aligned child. If there
	// is more vertical space available than requested, and the baseline is not
	// allocated by the parent then @position is used to allocate the baseline
	// wrt the extra space available.
	SetBaselinePosition(position BaselinePosition)
	// SetCenterWidget sets a center widget; that is a child widget that will be
	// centered with respect to the full width of the box, even if the children
	// at either side take up different amounts of space.
	SetCenterWidget(widget Widget)
	// SetChildPacking sets the way @child is packed into @box.
	SetChildPacking(child Widget, expand bool, fill bool, padding uint, packType PackType)
	// SetHomogeneous sets the Box:homogeneous property of @box, controlling
	// whether or not all children of @box are given equal space in the box.
	SetHomogeneous(homogeneous bool)
	// SetSpacing sets the Box:spacing property of @box, which is the number of
	// pixels to place between children of @box.
	SetSpacing(spacing int)
}

// box implements the Box interface.
type box struct {
	Container
	Buildable
	Orientable
}

var _ Box = (*box)(nil)

// WrapBox wraps a GObject to the right type. It is
// primarily used internally.
func WrapBox(obj *externglib.Object) Box {
	return Box{
		Container:  WrapContainer(obj),
		Buildable:  WrapBuildable(obj),
		Orientable: WrapOrientable(obj),
	}
}

func marshalBox(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapBox(obj), nil
}

// NewBox constructs a class Box.
func NewBox(orientation Orientation, spacing int) Box {
	var arg1 C.GtkOrientation
	var arg2 C.gint

	arg1 = (C.GtkOrientation)(orientation)
	arg2 = C.gint(spacing)

	var cret C.GtkBox

	cret = C.gtk_box_new(arg1, arg2)

	var box Box

	box = gextras.CastObject(externglib.Take(unsafe.Pointer(cret.Native()))).(Box)

	return box
}

// BaselinePosition gets the value set by gtk_box_set_baseline_position().
func (b box) BaselinePosition() BaselinePosition {
	var arg0 *C.GtkBox

	arg0 = (*C.GtkBox)(unsafe.Pointer(b.Native()))

	var cret C.GtkBaselinePosition

	cret = C.gtk_box_get_baseline_position(arg0)

	var baselinePosition BaselinePosition

	baselinePosition = BaselinePosition(cret)

	return baselinePosition
}

// CenterWidget retrieves the center widget of the box.
func (b box) CenterWidget() Widget {
	var arg0 *C.GtkBox

	arg0 = (*C.GtkBox)(unsafe.Pointer(b.Native()))

	var cret *C.GtkWidget

	cret = C.gtk_box_get_center_widget(arg0)

	var widget Widget

	widget = gextras.CastObject(externglib.Take(unsafe.Pointer(cret.Native()))).(Widget)

	return widget
}

// Homogeneous returns whether the box is homogeneous (all children are the
// same size). See gtk_box_set_homogeneous().
func (b box) Homogeneous() bool {
	var arg0 *C.GtkBox

	arg0 = (*C.GtkBox)(unsafe.Pointer(b.Native()))

	var cret C.gboolean

	cret = C.gtk_box_get_homogeneous(arg0)

	var ok bool

	if cret {
		ok = true
	}

	return ok
}

// Spacing gets the value set by gtk_box_set_spacing().
func (b box) Spacing() int {
	var arg0 *C.GtkBox

	arg0 = (*C.GtkBox)(unsafe.Pointer(b.Native()))

	var cret C.gint

	cret = C.gtk_box_get_spacing(arg0)

	var gint int

	gint = (int)(cret)

	return gint
}

// PackEnd adds @child to @box, packed with reference to the end of @box.
// The @child is packed after (away from end of) any other child packed with
// reference to the end of @box.
func (b box) PackEnd(child Widget, expand bool, fill bool, padding uint) {
	var arg0 *C.GtkBox
	var arg1 *C.GtkWidget
	var arg2 C.gboolean
	var arg3 C.gboolean
	var arg4 C.guint

	arg0 = (*C.GtkBox)(unsafe.Pointer(b.Native()))
	arg1 = (*C.GtkWidget)(unsafe.Pointer(child.Native()))
	if expand {
		arg2 = C.gboolean(1)
	}
	if fill {
		arg3 = C.gboolean(1)
	}
	arg4 = C.guint(padding)

	C.gtk_box_pack_end(arg0, arg1, arg2, arg3, arg4)
}

// PackStart adds @child to @box, packed with reference to the start of
// @box. The @child is packed after any other child packed with reference to
// the start of @box.
func (b box) PackStart(child Widget, expand bool, fill bool, padding uint) {
	var arg0 *C.GtkBox
	var arg1 *C.GtkWidget
	var arg2 C.gboolean
	var arg3 C.gboolean
	var arg4 C.guint

	arg0 = (*C.GtkBox)(unsafe.Pointer(b.Native()))
	arg1 = (*C.GtkWidget)(unsafe.Pointer(child.Native()))
	if expand {
		arg2 = C.gboolean(1)
	}
	if fill {
		arg3 = C.gboolean(1)
	}
	arg4 = C.guint(padding)

	C.gtk_box_pack_start(arg0, arg1, arg2, arg3, arg4)
}

// QueryChildPacking obtains information about how @child is packed into
// @box.
func (b box) QueryChildPacking(child Widget) (expand bool, fill bool, padding uint, packType PackType) {
	var arg0 *C.GtkBox
	var arg1 *C.GtkWidget

	arg0 = (*C.GtkBox)(unsafe.Pointer(b.Native()))
	arg1 = (*C.GtkWidget)(unsafe.Pointer(child.Native()))

	var arg2 C.gboolean
	var arg3 C.gboolean
	var arg4 C.guint
	var arg5 C.GtkPackType

	C.gtk_box_query_child_packing(arg0, arg1, &arg2, &arg3, &arg4, &arg5)

	var expand bool
	var fill bool
	var padding uint
	var packType PackType

	if arg2 {
		expand = true
	}
	if arg3 {
		fill = true
	}
	padding = (uint)(arg4)
	packType = PackType(arg5)

	return expand, fill, padding, packType
}

// ReorderChild moves @child to a new @position in the list of @box
// children. The list contains widgets packed K_PACK_START as well as
// widgets packed K_PACK_END, in the order that these widgets were added to
// @box.
//
// A widget’s position in the @box children list determines where the widget
// is packed into @box. A child widget at some position in the list will be
// packed just after all other widgets of the same packing type that appear
// earlier in the list.
func (b box) ReorderChild(child Widget, position int) {
	var arg0 *C.GtkBox
	var arg1 *C.GtkWidget
	var arg2 C.gint

	arg0 = (*C.GtkBox)(unsafe.Pointer(b.Native()))
	arg1 = (*C.GtkWidget)(unsafe.Pointer(child.Native()))
	arg2 = C.gint(position)

	C.gtk_box_reorder_child(arg0, arg1, arg2)
}

// SetBaselinePosition sets the baseline position of a box. This affects
// only horizontal boxes with at least one baseline aligned child. If there
// is more vertical space available than requested, and the baseline is not
// allocated by the parent then @position is used to allocate the baseline
// wrt the extra space available.
func (b box) SetBaselinePosition(position BaselinePosition) {
	var arg0 *C.GtkBox
	var arg1 C.GtkBaselinePosition

	arg0 = (*C.GtkBox)(unsafe.Pointer(b.Native()))
	arg1 = (C.GtkBaselinePosition)(position)

	C.gtk_box_set_baseline_position(arg0, arg1)
}

// SetCenterWidget sets a center widget; that is a child widget that will be
// centered with respect to the full width of the box, even if the children
// at either side take up different amounts of space.
func (b box) SetCenterWidget(widget Widget) {
	var arg0 *C.GtkBox
	var arg1 *C.GtkWidget

	arg0 = (*C.GtkBox)(unsafe.Pointer(b.Native()))
	arg1 = (*C.GtkWidget)(unsafe.Pointer(widget.Native()))

	C.gtk_box_set_center_widget(arg0, arg1)
}

// SetChildPacking sets the way @child is packed into @box.
func (b box) SetChildPacking(child Widget, expand bool, fill bool, padding uint, packType PackType) {
	var arg0 *C.GtkBox
	var arg1 *C.GtkWidget
	var arg2 C.gboolean
	var arg3 C.gboolean
	var arg4 C.guint
	var arg5 C.GtkPackType

	arg0 = (*C.GtkBox)(unsafe.Pointer(b.Native()))
	arg1 = (*C.GtkWidget)(unsafe.Pointer(child.Native()))
	if expand {
		arg2 = C.gboolean(1)
	}
	if fill {
		arg3 = C.gboolean(1)
	}
	arg4 = C.guint(padding)
	arg5 = (C.GtkPackType)(packType)

	C.gtk_box_set_child_packing(arg0, arg1, arg2, arg3, arg4, arg5)
}

// SetHomogeneous sets the Box:homogeneous property of @box, controlling
// whether or not all children of @box are given equal space in the box.
func (b box) SetHomogeneous(homogeneous bool) {
	var arg0 *C.GtkBox
	var arg1 C.gboolean

	arg0 = (*C.GtkBox)(unsafe.Pointer(b.Native()))
	if homogeneous {
		arg1 = C.gboolean(1)
	}

	C.gtk_box_set_homogeneous(arg0, arg1)
}

// SetSpacing sets the Box:spacing property of @box, which is the number of
// pixels to place between children of @box.
func (b box) SetSpacing(spacing int) {
	var arg0 *C.GtkBox
	var arg1 C.gint

	arg0 = (*C.GtkBox)(unsafe.Pointer(b.Native()))
	arg1 = C.gint(spacing)

	C.gtk_box_set_spacing(arg0, arg1)
}
