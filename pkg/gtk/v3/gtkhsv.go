// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <stdbool.h>
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_hsv_get_type()), F: marshalHSV},
	})
}

// HSV is the “color wheel” part of a complete color selector widget. It allows
// to select a color by determining its HSV components in an intuitive way.
// Moving the selection around the outer ring changes the hue, and moving the
// selection point inside the inner triangle changes value and saturation.
//
// HSV has been deprecated together with ColorSelection, where it was used.
type HSV interface {
	Widget
	Buildable

	// Color queries the current color in an HSV color selector. Returned values
	// will be in the [0.0, 1.0] range.
	Color() (h float64, s float64, v float64)
	// Metrics queries the size and ring width of an HSV color selector.
	Metrics() (size int, ringWidth int)
	// IsAdjusting: an HSV color selector can be said to be adjusting if
	// multiple rapid changes are being made to its value, for example, when the
	// user is adjusting the value with the mouse. This function queries whether
	// the HSV color selector is being adjusted or not.
	IsAdjusting() bool
	// SetColor sets the current color in an HSV color selector. Color component
	// values must be in the [0.0, 1.0] range.
	SetColor(h float64, s float64, v float64)
	// SetMetrics sets the size and ring width of an HSV color selector.
	SetMetrics(size int, ringWidth int)
}

// hsV implements the HSV interface.
type hsV struct {
	Widget
	Buildable
}

var _ HSV = (*hsV)(nil)

// WrapHSV wraps a GObject to the right type. It is
// primarily used internally.
func WrapHSV(obj *externglib.Object) HSV {
	return HSV{
		Widget:    WrapWidget(obj),
		Buildable: WrapBuildable(obj),
	}
}

func marshalHSV(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapHSV(obj), nil
}

// NewHSV constructs a class HSV.
func NewHSV() HSV {
	var cret C.GtkHSV
	var goret1 HSV

	cret = C.gtk_hsv_new()

	goret1 = gextras.CastObject(externglib.Take(unsafe.Pointer(cret.Native()))).(HSV)

	return goret1
}

// Color queries the current color in an HSV color selector. Returned values
// will be in the [0.0, 1.0] range.
func (h hsV) Color() (h float64, s float64, v float64) {
	var arg0 *C.GtkHSV

	arg0 = (*C.GtkHSV)(unsafe.Pointer(h.Native()))

	var arg1 *C.gdouble
	var ret1 float64
	var arg2 *C.gdouble
	var ret2 float64
	var arg3 *C.gdouble
	var ret3 float64

	C.gtk_hsv_get_color(arg0, &arg1, &arg2, &arg3)

	ret1 = *C.gdouble(arg1)
	ret2 = *C.gdouble(arg2)
	ret3 = *C.gdouble(arg3)

	return ret1, ret2, ret3
}

// Metrics queries the size and ring width of an HSV color selector.
func (h hsV) Metrics() (size int, ringWidth int) {
	var arg0 *C.GtkHSV

	arg0 = (*C.GtkHSV)(unsafe.Pointer(h.Native()))

	var arg1 *C.gint
	var ret1 int
	var arg2 *C.gint
	var ret2 int

	C.gtk_hsv_get_metrics(arg0, &arg1, &arg2)

	ret1 = *C.gint(arg1)
	ret2 = *C.gint(arg2)

	return ret1, ret2
}

// IsAdjusting: an HSV color selector can be said to be adjusting if
// multiple rapid changes are being made to its value, for example, when the
// user is adjusting the value with the mouse. This function queries whether
// the HSV color selector is being adjusted or not.
func (h hsV) IsAdjusting() bool {
	var arg0 *C.GtkHSV

	arg0 = (*C.GtkHSV)(unsafe.Pointer(h.Native()))

	var cret C.gboolean
	var goret1 bool

	cret = C.gtk_hsv_is_adjusting(arg0)

	goret1 = C.bool(cret) != C.false

	return goret1
}

// SetColor sets the current color in an HSV color selector. Color component
// values must be in the [0.0, 1.0] range.
func (h hsV) SetColor(h float64, s float64, v float64) {
	var arg0 *C.GtkHSV
	var arg1 C.double
	var arg2 C.double
	var arg3 C.double

	arg0 = (*C.GtkHSV)(unsafe.Pointer(h.Native()))
	arg1 = C.double(h)
	arg2 = C.double(s)
	arg3 = C.double(v)

	C.gtk_hsv_set_color(arg0, h, s, v)
}

// SetMetrics sets the size and ring width of an HSV color selector.
func (h hsV) SetMetrics(size int, ringWidth int) {
	var arg0 *C.GtkHSV
	var arg1 C.gint
	var arg2 C.gint

	arg0 = (*C.GtkHSV)(unsafe.Pointer(h.Native()))
	arg1 = C.gint(size)
	arg2 = C.gint(ringWidth)

	C.gtk_hsv_set_metrics(arg0, size, ringWidth)
}

type HSVPrivate struct {
	native C.GtkHSVPrivate
}

// WrapHSVPrivate wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapHSVPrivate(ptr unsafe.Pointer) *HSVPrivate {
	if ptr == nil {
		return nil
	}

	return (*HSVPrivate)(ptr)
}

func marshalHSVPrivate(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapHSVPrivate(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (h *HSVPrivate) Native() unsafe.Pointer {
	return unsafe.Pointer(&h.native)
}
