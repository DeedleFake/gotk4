// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/core/box"
	"github.com/diamondburned/gotk4/core/gextras"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_hsv_get_type()), F: marshalHSV},
	})
}

// HSV is the “color wheel” part of a complete color selector widget. It allows
// to select a color by determining its HSV components in an intuitive way.
// Moving the selection around the outer ring changes the hue, and moving the
// selection point inside the inner triangle changes value and saturation.
//
// HSV has been deprecated together with ColorSelection, where it was used.
type HSV interface {
	Widget

	Color() (h float64, s float64, v float64)

	Metrics() (size int, ringWidth int)

	IsAdjustingHSV() bool

	SetColorHSV(h float64, s float64, v float64)

	SetMetricsHSV(size int, ringWidth int)
}

// hsV implements the HSV class.
type hsV struct {
	Widget
}

// WrapHSV wraps a GObject to the right type. It is
// primarily used internally.
func WrapHSV(obj *externglib.Object) HSV {
	return hsV{
		Widget: WrapWidget(obj),
	}
}

func marshalHSV(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapHSV(obj), nil
}

func NewHSV() HSV {
	var _cret *C.GtkWidget // in

	_cret = C.gtk_hsv_new()

	var _hsV HSV // out

	_hsV = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(HSV)

	return _hsV
}

func (h hsV) Color() (h float64, s float64, v float64) {
	var _arg0 *C.GtkHSV // out
	var _arg1 C.gdouble // in
	var _arg2 C.gdouble // in
	var _arg3 C.gdouble // in

	_arg0 = (*C.GtkHSV)(unsafe.Pointer(h.Native()))

	C.gtk_hsv_get_color(_arg0, &_arg1, &_arg2, &_arg3)

	var _h float64 // out
	var _s float64 // out
	var _v float64 // out

	_h = float64(_arg1)
	_s = float64(_arg2)
	_v = float64(_arg3)

	return _h, _s, _v
}

func (h hsV) Metrics() (size int, ringWidth int) {
	var _arg0 *C.GtkHSV // out
	var _arg1 C.gint    // in
	var _arg2 C.gint    // in

	_arg0 = (*C.GtkHSV)(unsafe.Pointer(h.Native()))

	C.gtk_hsv_get_metrics(_arg0, &_arg1, &_arg2)

	var _size int      // out
	var _ringWidth int // out

	_size = int(_arg1)
	_ringWidth = int(_arg2)

	return _size, _ringWidth
}

func (h hsV) IsAdjustingHSV() bool {
	var _arg0 *C.GtkHSV  // out
	var _cret C.gboolean // in

	_arg0 = (*C.GtkHSV)(unsafe.Pointer(h.Native()))

	_cret = C.gtk_hsv_is_adjusting(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (h hsV) SetColorHSV(h float64, s float64, v float64) {
	var _arg0 *C.GtkHSV // out
	var _arg1 C.double  // out
	var _arg2 C.double  // out
	var _arg3 C.double  // out

	_arg0 = (*C.GtkHSV)(unsafe.Pointer(h.Native()))
	_arg1 = C.double(h)
	_arg2 = C.double(s)
	_arg3 = C.double(v)

	C.gtk_hsv_set_color(_arg0, _arg1, _arg2, _arg3)
}

func (h hsV) SetMetricsHSV(size int, ringWidth int) {
	var _arg0 *C.GtkHSV // out
	var _arg1 C.gint    // out
	var _arg2 C.gint    // out

	_arg0 = (*C.GtkHSV)(unsafe.Pointer(h.Native()))
	_arg1 = C.gint(size)
	_arg2 = C.gint(ringWidth)

	C.gtk_hsv_set_metrics(_arg0, _arg1, _arg2)
}

func (b hsV) AddChild(builder Builder, child gextras.Objector, typ string) {
	WrapBuildable(gextras.InternObject(b)).AddChild(builder, child, typ)
}

func (b hsV) ConstructChild(builder Builder, name string) gextras.Objector {
	return WrapBuildable(gextras.InternObject(b)).ConstructChild(builder, name)
}

func (b hsV) CustomFinished(builder Builder, child gextras.Objector, tagname string, data interface{}) {
	WrapBuildable(gextras.InternObject(b)).CustomFinished(builder, child, tagname, data)
}

func (b hsV) CustomTagEnd(builder Builder, child gextras.Objector, tagname string, data *interface{}) {
	WrapBuildable(gextras.InternObject(b)).CustomTagEnd(builder, child, tagname, data)
}

func (b hsV) CustomTagStart(builder Builder, child gextras.Objector, tagname string) (glib.MarkupParser, interface{}, bool) {
	return WrapBuildable(gextras.InternObject(b)).CustomTagStart(builder, child, tagname)
}

func (b hsV) InternalChild(builder Builder, childname string) gextras.Objector {
	return WrapBuildable(gextras.InternObject(b)).InternalChild(builder, childname)
}

func (b hsV) Name() string {
	return WrapBuildable(gextras.InternObject(b)).Name()
}

func (b hsV) ParserFinished(builder Builder) {
	WrapBuildable(gextras.InternObject(b)).ParserFinished(builder)
}

func (b hsV) SetBuildableProperty(builder Builder, name string, value externglib.Value) {
	WrapBuildable(gextras.InternObject(b)).SetBuildableProperty(builder, name, value)
}

func (b hsV) SetName(name string) {
	WrapBuildable(gextras.InternObject(b)).SetName(name)
}
