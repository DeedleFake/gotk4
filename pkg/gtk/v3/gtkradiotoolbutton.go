// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_radio_tool_button_get_type()), F: marshalRadioToolButtonner},
	})
}

// RadioToolButtonner describes RadioToolButton's methods.
type RadioToolButtonner interface {
	gextras.Objector

	privateRadioToolButton()
}

// RadioToolButton is a ToolItem that contains a radio button, that is, a button
// that is part of a group of toggle buttons where only one button can be active
// at a time.
//
// Use gtk_radio_tool_button_new() to create a new GtkRadioToolButton. Use
// gtk_radio_tool_button_new_from_widget() to create a new GtkRadioToolButton
// that is part of the same group as an existing GtkRadioToolButton.
//
//
// CSS nodes
//
// GtkRadioToolButton has a single CSS node with name toolbutton.
type RadioToolButton struct {
	*externglib.Object
	ToggleToolButton
	Actionable
	Activatable
	Buildable
}

var _ RadioToolButtonner = (*RadioToolButton)(nil)

func wrapRadioToolButtonner(obj *externglib.Object) RadioToolButtonner {
	return &RadioToolButton{
		Object: obj,
		ToggleToolButton: ToggleToolButton{
			Object: obj,
			ToolButton: ToolButton{
				Object: obj,
				ToolItem: ToolItem{
					Object: obj,
					Bin: Bin{
						Object: obj,
						Container: Container{
							Object: obj,
							Widget: Widget{
								Object: obj,
								InitiallyUnowned: externglib.InitiallyUnowned{
									Object: obj,
								},
								Buildable: Buildable{
									Object: obj,
								},
							},
							Buildable: Buildable{
								Object: obj,
							},
						},
						Buildable: Buildable{
							Object: obj,
						},
					},
					Activatable: Activatable{
						Object: obj,
					},
					Buildable: Buildable{
						Object: obj,
					},
				},
				Actionable: Actionable{
					Object: obj,
					Widget: Widget{
						Object: obj,
						InitiallyUnowned: externglib.InitiallyUnowned{
							Object: obj,
						},
						Buildable: Buildable{
							Object: obj,
						},
					},
				},
				Activatable: Activatable{
					Object: obj,
				},
				Buildable: Buildable{
					Object: obj,
				},
			},
			Actionable: Actionable{
				Object: obj,
				Widget: Widget{
					Object: obj,
					InitiallyUnowned: externglib.InitiallyUnowned{
						Object: obj,
					},
					Buildable: Buildable{
						Object: obj,
					},
				},
			},
			Activatable: Activatable{
				Object: obj,
			},
			Buildable: Buildable{
				Object: obj,
			},
		},
		Actionable: Actionable{
			Object: obj,
			Widget: Widget{
				Object: obj,
				InitiallyUnowned: externglib.InitiallyUnowned{
					Object: obj,
				},
				Buildable: Buildable{
					Object: obj,
				},
			},
		},
		Activatable: Activatable{
			Object: obj,
		},
		Buildable: Buildable{
			Object: obj,
		},
	}
}

func marshalRadioToolButtonner(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapRadioToolButtonner(obj), nil
}

// NewRadioToolButtonFromWidget creates a new RadioToolButton adding it to the
// same group as @gruup
func NewRadioToolButtonFromWidget(group RadioToolButtonner) *RadioToolButton {
	var _arg1 *C.GtkRadioToolButton // out
	var _cret *C.GtkToolItem        // in

	_arg1 = (*C.GtkRadioToolButton)(unsafe.Pointer(group.Native()))

	_cret = C.gtk_radio_tool_button_new_from_widget(_arg1)

	var _radioToolButton *RadioToolButton // out

	_radioToolButton = (gextras.CastObject(externglib.Take(unsafe.Pointer(_cret)))).(*RadioToolButton)

	return _radioToolButton
}

// NewRadioToolButtonWithStockFromWidget creates a new RadioToolButton adding it
// to the same group as @group. The new RadioToolButton will contain an icon and
// label from the stock item indicated by @stock_id.
//
// Deprecated: gtk_radio_tool_button_new_from_widget.
func NewRadioToolButtonWithStockFromWidget(group RadioToolButtonner, stockId string) *RadioToolButton {
	var _arg1 *C.GtkRadioToolButton // out
	var _arg2 *C.gchar              // out
	var _cret *C.GtkToolItem        // in

	_arg1 = (*C.GtkRadioToolButton)(unsafe.Pointer(group.Native()))
	_arg2 = (*C.gchar)(C.CString(stockId))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.gtk_radio_tool_button_new_with_stock_from_widget(_arg1, _arg2)

	var _radioToolButton *RadioToolButton // out

	_radioToolButton = (gextras.CastObject(externglib.Take(unsafe.Pointer(_cret)))).(*RadioToolButton)

	return _radioToolButton
}

func (*RadioToolButton) privateRadioToolButton() {}
