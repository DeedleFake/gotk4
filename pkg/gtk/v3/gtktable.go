// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
)

// #cgo pkg-config: gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

type TableChild struct {
	native C.GtkTableChild
}

// WrapTableChild wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapTableChild(ptr unsafe.Pointer) *TableChild {
	if ptr == nil {
		return nil
	}

	return (*TableChild)(ptr)
}

func marshalTableChild(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapTableChild(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (t *TableChild) Native() unsafe.Pointer {
	return unsafe.Pointer(&t.native)
}

// Widget gets the field inside the struct.
func (t *TableChild) Widget() Widget {
	var ret Widget
	ret = gextras.CastObject(externglib.Take(unsafe.Pointer(t.native.widget.Native()))).(Widget)
	return ret
}

// LeftAttach gets the field inside the struct.
func (t *TableChild) LeftAttach() uint16 {
	var ret uint16
	ret = uint16(t.native.left_attach)
	return ret
}

// RightAttach gets the field inside the struct.
func (t *TableChild) RightAttach() uint16 {
	var ret uint16
	ret = uint16(t.native.right_attach)
	return ret
}

// TopAttach gets the field inside the struct.
func (t *TableChild) TopAttach() uint16 {
	var ret uint16
	ret = uint16(t.native.top_attach)
	return ret
}

// BottomAttach gets the field inside the struct.
func (t *TableChild) BottomAttach() uint16 {
	var ret uint16
	ret = uint16(t.native.bottom_attach)
	return ret
}

// Xpadding gets the field inside the struct.
func (t *TableChild) Xpadding() uint16 {
	var ret uint16
	ret = uint16(t.native.xpadding)
	return ret
}

// Ypadding gets the field inside the struct.
func (t *TableChild) Ypadding() uint16 {
	var ret uint16
	ret = uint16(t.native.ypadding)
	return ret
}

type TablePrivate struct {
	native C.GtkTablePrivate
}

// WrapTablePrivate wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapTablePrivate(ptr unsafe.Pointer) *TablePrivate {
	if ptr == nil {
		return nil
	}

	return (*TablePrivate)(ptr)
}

func marshalTablePrivate(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapTablePrivate(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (t *TablePrivate) Native() unsafe.Pointer {
	return unsafe.Pointer(&t.native)
}

type TableRowCol struct {
	native C.GtkTableRowCol
}

// WrapTableRowCol wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapTableRowCol(ptr unsafe.Pointer) *TableRowCol {
	if ptr == nil {
		return nil
	}

	return (*TableRowCol)(ptr)
}

func marshalTableRowCol(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapTableRowCol(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (t *TableRowCol) Native() unsafe.Pointer {
	return unsafe.Pointer(&t.native)
}

// Requisition gets the field inside the struct.
func (t *TableRowCol) Requisition() uint16 {
	var ret uint16
	ret = uint16(t.native.requisition)
	return ret
}

// Allocation gets the field inside the struct.
func (t *TableRowCol) Allocation() uint16 {
	var ret uint16
	ret = uint16(t.native.allocation)
	return ret
}

// Spacing gets the field inside the struct.
func (t *TableRowCol) Spacing() uint16 {
	var ret uint16
	ret = uint16(t.native.spacing)
	return ret
}
