// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <stdbool.h>
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_handle_box_get_type()), F: marshalHandleBox},
	})
}

// HandleBox: the HandleBox widget allows a portion of a window to be "torn
// off". It is a bin widget which displays its child and a handle that the user
// can drag to tear off a separate window (the “float window”) containing the
// child widget. A thin “ghost” is drawn in the original location of the
// handlebox. By dragging the separate window back to its original location, it
// can be reattached.
//
// When reattaching, the ghost and float window, must be aligned along one of
// the edges, the “snap edge”. This either can be specified by the application
// programmer explicitly, or GTK+ will pick a reasonable default based on the
// handle position.
//
// To make detaching and reattaching the handlebox as minimally confusing as
// possible to the user, it is important to set the snap edge so that the snap
// edge does not move when the handlebox is deattached. For instance, if the
// handlebox is packed at the bottom of a VBox, then when the handlebox is
// detached, the bottom edge of the handlebox's allocation will remain fixed as
// the height of the handlebox shrinks, so the snap edge should be set to
// GTK_POS_BOTTOM.
//
// > HandleBox has been deprecated. It is very specialized, lacks features > to
// make it useful and most importantly does not fit well into modern >
// application design. Do not use it. There is no replacement.
type HandleBox interface {
	Bin
	Buildable

	// ChildDetached: whether the handlebox’s child is currently detached.
	ChildDetached() bool
	// HandlePosition gets the handle position of the handle box. See
	// gtk_handle_box_set_handle_position().
	HandlePosition() PositionType
	// ShadowType gets the type of shadow drawn around the handle box. See
	// gtk_handle_box_set_shadow_type().
	ShadowType() ShadowType
	// SnapEdge gets the edge used for determining reattachment of the handle
	// box. See gtk_handle_box_set_snap_edge().
	SnapEdge() PositionType
	// SetHandlePosition sets the side of the handlebox where the handle is
	// drawn.
	SetHandlePosition(position PositionType)
	// SetShadowType sets the type of shadow to be drawn around the border of
	// the handle box.
	SetShadowType(typ ShadowType)
	// SetSnapEdge sets the snap edge of a handlebox. The snap edge is the edge
	// of the detached child that must be aligned with the corresponding edge of
	// the “ghost” left behind when the child was detached to reattach the
	// torn-off window. Usually, the snap edge should be chosen so that it stays
	// in the same place on the screen when the handlebox is torn off.
	//
	// If the snap edge is not set, then an appropriate value will be guessed
	// from the handle position. If the handle position is GTK_POS_RIGHT or
	// GTK_POS_LEFT, then the snap edge will be GTK_POS_TOP, otherwise it will
	// be GTK_POS_LEFT.
	SetSnapEdge(edge PositionType)
}

// handleBox implements the HandleBox interface.
type handleBox struct {
	Bin
	Buildable
}

var _ HandleBox = (*handleBox)(nil)

// WrapHandleBox wraps a GObject to the right type. It is
// primarily used internally.
func WrapHandleBox(obj *externglib.Object) HandleBox {
	return HandleBox{
		Bin:       WrapBin(obj),
		Buildable: WrapBuildable(obj),
	}
}

func marshalHandleBox(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapHandleBox(obj), nil
}

// NewHandleBox constructs a class HandleBox.
func NewHandleBox() HandleBox {
	var cret C.GtkHandleBox
	var ret1 HandleBox

	cret = C.gtk_handle_box_new()

	ret1 = gextras.CastObject(externglib.Take(unsafe.Pointer(cret.Native()))).(HandleBox)

	return ret1
}

// ChildDetached: whether the handlebox’s child is currently detached.
func (h handleBox) ChildDetached() bool {
	var arg0 *C.GtkHandleBox

	arg0 = (*C.GtkHandleBox)(unsafe.Pointer(h.Native()))

	var cret C.gboolean
	var ret1 bool

	cret = C.gtk_handle_box_get_child_detached(arg0)

	ret1 = C.bool(cret) != C.false

	return ret1
}

// HandlePosition gets the handle position of the handle box. See
// gtk_handle_box_set_handle_position().
func (h handleBox) HandlePosition() PositionType {
	var arg0 *C.GtkHandleBox

	arg0 = (*C.GtkHandleBox)(unsafe.Pointer(h.Native()))

	var cret C.GtkPositionType
	var ret1 PositionType

	cret = C.gtk_handle_box_get_handle_position(arg0)

	ret1 = PositionType(cret)

	return ret1
}

// ShadowType gets the type of shadow drawn around the handle box. See
// gtk_handle_box_set_shadow_type().
func (h handleBox) ShadowType() ShadowType {
	var arg0 *C.GtkHandleBox

	arg0 = (*C.GtkHandleBox)(unsafe.Pointer(h.Native()))

	var cret C.GtkShadowType
	var ret1 ShadowType

	cret = C.gtk_handle_box_get_shadow_type(arg0)

	ret1 = ShadowType(cret)

	return ret1
}

// SnapEdge gets the edge used for determining reattachment of the handle
// box. See gtk_handle_box_set_snap_edge().
func (h handleBox) SnapEdge() PositionType {
	var arg0 *C.GtkHandleBox

	arg0 = (*C.GtkHandleBox)(unsafe.Pointer(h.Native()))

	var cret C.GtkPositionType
	var ret1 PositionType

	cret = C.gtk_handle_box_get_snap_edge(arg0)

	ret1 = PositionType(cret)

	return ret1
}

// SetHandlePosition sets the side of the handlebox where the handle is
// drawn.
func (h handleBox) SetHandlePosition(position PositionType) {
	var arg0 *C.GtkHandleBox
	var arg1 C.GtkPositionType

	arg0 = (*C.GtkHandleBox)(unsafe.Pointer(h.Native()))
	arg1 = (C.GtkPositionType)(position)

	C.gtk_handle_box_set_handle_position(arg0, position)
}

// SetShadowType sets the type of shadow to be drawn around the border of
// the handle box.
func (h handleBox) SetShadowType(typ ShadowType) {
	var arg0 *C.GtkHandleBox
	var arg1 C.GtkShadowType

	arg0 = (*C.GtkHandleBox)(unsafe.Pointer(h.Native()))
	arg1 = (C.GtkShadowType)(typ)

	C.gtk_handle_box_set_shadow_type(arg0, typ)
}

// SetSnapEdge sets the snap edge of a handlebox. The snap edge is the edge
// of the detached child that must be aligned with the corresponding edge of
// the “ghost” left behind when the child was detached to reattach the
// torn-off window. Usually, the snap edge should be chosen so that it stays
// in the same place on the screen when the handlebox is torn off.
//
// If the snap edge is not set, then an appropriate value will be guessed
// from the handle position. If the handle position is GTK_POS_RIGHT or
// GTK_POS_LEFT, then the snap edge will be GTK_POS_TOP, otherwise it will
// be GTK_POS_LEFT.
func (h handleBox) SetSnapEdge(edge PositionType) {
	var arg0 *C.GtkHandleBox
	var arg1 C.GtkPositionType

	arg0 = (*C.GtkHandleBox)(unsafe.Pointer(h.Native()))
	arg1 = (C.GtkPositionType)(edge)

	C.gtk_handle_box_set_snap_edge(arg0, edge)
}
