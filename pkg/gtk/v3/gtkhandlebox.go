// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_handle_box_get_type()), F: marshalHandleBoxxer},
	})
}

// HandleBoxxerOverrider contains methods that are overridable.
//
// As of right now, interface overriding and subclassing is not supported
// yet, so the interface currently has no use.
type HandleBoxxerOverrider interface {
	ChildAttached(child Widgetter)
	ChildDetached(child Widgetter)
}

// HandleBoxxer describes HandleBox's methods.
type HandleBoxxer interface {
	gextras.Objector

	ChildDetached() bool
	HandlePosition() PositionType
	ShadowType() ShadowType
	SnapEdge() PositionType
}

// HandleBox: the HandleBox widget allows a portion of a window to be "torn
// off". It is a bin widget which displays its child and a handle that the user
// can drag to tear off a separate window (the “float window”) containing the
// child widget. A thin “ghost” is drawn in the original location of the
// handlebox. By dragging the separate window back to its original location, it
// can be reattached.
//
// When reattaching, the ghost and float window, must be aligned along one of
// the edges, the “snap edge”. This either can be specified by the application
// programmer explicitly, or GTK+ will pick a reasonable default based on the
// handle position.
//
// To make detaching and reattaching the handlebox as minimally confusing as
// possible to the user, it is important to set the snap edge so that the snap
// edge does not move when the handlebox is deattached. For instance, if the
// handlebox is packed at the bottom of a VBox, then when the handlebox is
// detached, the bottom edge of the handlebox's allocation will remain fixed as
// the height of the handlebox shrinks, so the snap edge should be set to
// GTK_POS_BOTTOM.
//
// > HandleBox has been deprecated. It is very specialized, lacks features > to
// make it useful and most importantly does not fit well into modern >
// application design. Do not use it. There is no replacement.
type HandleBox struct {
	*externglib.Object

	Bin
	atk.ImplementorIface
	Buildable
}

var _ HandleBoxxer = (*HandleBox)(nil)

func wrapHandleBoxxer(obj *externglib.Object) HandleBoxxer {
	return &HandleBox{
		Object: obj,
		Bin: Bin{
			Object: obj,
			Container: Container{
				Object: obj,
				Widget: Widget{
					Object: obj,
					InitiallyUnowned: externglib.InitiallyUnowned{
						Object: obj,
					},
					ImplementorIface: atk.ImplementorIface{
						Object: obj,
					},
					Buildable: Buildable{
						Object: obj,
					},
				},
				ImplementorIface: atk.ImplementorIface{
					Object: obj,
				},
				Buildable: Buildable{
					Object: obj,
				},
			},
			ImplementorIface: atk.ImplementorIface{
				Object: obj,
			},
			Buildable: Buildable{
				Object: obj,
			},
		},
		ImplementorIface: atk.ImplementorIface{
			Object: obj,
		},
		Buildable: Buildable{
			Object: obj,
		},
	}
}

func marshalHandleBoxxer(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapHandleBoxxer(obj), nil
}

// NewHandleBox: create a new handle box.
//
// Deprecated: HandleBox has been deprecated.
func NewHandleBox() *HandleBox {
	var _cret *C.GtkWidget // in

	_cret = C.gtk_handle_box_new()

	var _handleBox *HandleBox // out

	_handleBox = (gextras.CastObject(externglib.Take(unsafe.Pointer(_cret)))).(*HandleBox)

	return _handleBox
}

// ChildDetached: whether the handlebox’s child is currently detached.
//
// Deprecated: HandleBox has been deprecated.
func (handleBox *HandleBox) ChildDetached() bool {
	var _arg0 *C.GtkHandleBox // out
	var _cret C.gboolean      // in

	_arg0 = (*C.GtkHandleBox)(unsafe.Pointer(handleBox.Native()))

	_cret = C.gtk_handle_box_get_child_detached(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// HandlePosition gets the handle position of the handle box. See
// gtk_handle_box_set_handle_position().
//
// Deprecated: HandleBox has been deprecated.
func (handleBox *HandleBox) HandlePosition() PositionType {
	var _arg0 *C.GtkHandleBox   // out
	var _cret C.GtkPositionType // in

	_arg0 = (*C.GtkHandleBox)(unsafe.Pointer(handleBox.Native()))

	_cret = C.gtk_handle_box_get_handle_position(_arg0)

	var _positionType PositionType // out

	_positionType = (PositionType)(_cret)

	return _positionType
}

// ShadowType gets the type of shadow drawn around the handle box. See
// gtk_handle_box_set_shadow_type().
//
// Deprecated: HandleBox has been deprecated.
func (handleBox *HandleBox) ShadowType() ShadowType {
	var _arg0 *C.GtkHandleBox // out
	var _cret C.GtkShadowType // in

	_arg0 = (*C.GtkHandleBox)(unsafe.Pointer(handleBox.Native()))

	_cret = C.gtk_handle_box_get_shadow_type(_arg0)

	var _shadowType ShadowType // out

	_shadowType = (ShadowType)(_cret)

	return _shadowType
}

// SnapEdge gets the edge used for determining reattachment of the handle box.
// See gtk_handle_box_set_snap_edge().
//
// Deprecated: HandleBox has been deprecated.
func (handleBox *HandleBox) SnapEdge() PositionType {
	var _arg0 *C.GtkHandleBox   // out
	var _cret C.GtkPositionType // in

	_arg0 = (*C.GtkHandleBox)(unsafe.Pointer(handleBox.Native()))

	_cret = C.gtk_handle_box_get_snap_edge(_arg0)

	var _positionType PositionType // out

	_positionType = (PositionType)(_cret)

	return _positionType
}
