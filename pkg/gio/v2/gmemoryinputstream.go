// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"reflect"
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gio-2.0 gio-unix-2.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gio/gdesktopappinfo.h>
// #include <gio/gfiledescriptorbased.h>
// #include <gio/gio.h>
// #include <gio/gunixconnection.h>
// #include <gio/gunixcredentialsmessage.h>
// #include <gio/gunixfdlist.h>
// #include <gio/gunixfdmessage.h>
// #include <gio/gunixinputstream.h>
// #include <gio/gunixmounts.h>
// #include <gio/gunixoutputstream.h>
// #include <gio/gunixsocketaddress.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_memory_input_stream_get_type()), F: marshalMemoryInputStream},
	})
}

type MemoryInputStreamPrivate struct {
	native C.GMemoryInputStreamPrivate
}

// WrapMemoryInputStreamPrivate wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapMemoryInputStreamPrivate(ptr unsafe.Pointer) *MemoryInputStreamPrivate {
	if ptr == nil {
		return nil
	}

	return (*MemoryInputStreamPrivate)(ptr)
}

func marshalMemoryInputStreamPrivate(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapMemoryInputStreamPrivate(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (m *MemoryInputStreamPrivate) Native() unsafe.Pointer {
	return unsafe.Pointer(&m.native)
}

// MemoryInputStream is a class for using arbitrary memory chunks as input for
// GIO streaming input operations.
//
// As of GLib 2.34, InputStream implements InputStream.
type MemoryInputStream interface {
	InputStream
	PollableInputStream
	Seekable

	// AddBytes appends @bytes to data that can be read from the input stream.
	AddBytes(bytes *glib.Bytes)
	// AddData appends @data to data that can be read from the input stream
	AddData(data []byte)
}

// memoryInputStream implements the MemoryInputStream interface.
type memoryInputStream struct {
	InputStream
	PollableInputStream
	Seekable
}

var _ MemoryInputStream = (*memoryInputStream)(nil)

// WrapMemoryInputStream wraps a GObject to the right type. It is
// primarily used internally.
func WrapMemoryInputStream(obj *externglib.Object) MemoryInputStream {
	return MemoryInputStream{
		InputStream:         WrapInputStream(obj),
		PollableInputStream: WrapPollableInputStream(obj),
		Seekable:            WrapSeekable(obj),
	}
}

func marshalMemoryInputStream(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapMemoryInputStream(obj), nil
}

// NewMemoryInputStream constructs a class MemoryInputStream.
func NewMemoryInputStream() MemoryInputStream {
	ret := C.g_memory_input_stream_new()

	var ret0 MemoryInputStream

	ret0 = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(ret.Native()))).(MemoryInputStream)

	return ret0
}

// NewMemoryInputStreamFromBytes constructs a class MemoryInputStream.
func NewMemoryInputStreamFromBytes(bytes *glib.Bytes) MemoryInputStream {
	var arg1 *C.GBytes

	arg1 = (*C.GBytes)(bytes.Native())

	ret := C.g_memory_input_stream_new_from_bytes(arg1)

	var ret0 MemoryInputStream

	ret0 = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(ret.Native()))).(MemoryInputStream)

	return ret0
}

// NewMemoryInputStreamFromData constructs a class MemoryInputStream.
func NewMemoryInputStreamFromData(data []byte) MemoryInputStream {
	var arg1 *C.void
	var arg2 C.gssize
	var arg3 C.GDestroyNotify

	{
		var dst []C.guint8
		ptr := C.malloc(C.sizeof_guint8 * len(data))
		sliceHeader := (*reflect.SliceHeader)(unsafe.Pointer(&dst))
		sliceHeader.Data = uintptr(unsafe.Pointer(ptr))
		sliceHeader.Len = len(data)
		sliceHeader.Cap = len(data)

		for i := 0; i < len(data); i++ {
			src := data[i]
			dst[i] = C.guint8(src)
		}

		arg1 = (*C.void)(unsafe.Pointer(ptr))
		arg2 = len(data)
	}

	ret := C.g_memory_input_stream_new_from_data(arg1, arg2, arg3)

	var ret0 MemoryInputStream

	ret0 = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(ret.Native()))).(MemoryInputStream)

	return ret0
}

// AddBytes appends @bytes to data that can be read from the input stream.
func (s memoryInputStream) AddBytes(bytes *glib.Bytes) {
	var arg0 *C.GMemoryInputStream
	var arg1 *C.GBytes

	arg0 = (*C.GMemoryInputStream)(s.Native())
	arg1 = (*C.GBytes)(bytes.Native())

	C.g_memory_input_stream_add_bytes(arg0, arg1)
}

// AddData appends @data to data that can be read from the input stream
func (s memoryInputStream) AddData(data []byte) {
	var arg0 *C.GMemoryInputStream
	var arg1 *C.void
	var arg2 C.gssize
	var arg3 C.GDestroyNotify

	arg0 = (*C.GMemoryInputStream)(s.Native())
	{
		var dst []C.guint8
		ptr := C.malloc(C.sizeof_guint8 * len(data))
		sliceHeader := (*reflect.SliceHeader)(unsafe.Pointer(&dst))
		sliceHeader.Data = uintptr(unsafe.Pointer(ptr))
		sliceHeader.Len = len(data)
		sliceHeader.Cap = len(data)

		for i := 0; i < len(data); i++ {
			src := data[i]
			dst[i] = C.guint8(src)
		}

		arg1 = (*C.void)(unsafe.Pointer(ptr))
		arg2 = len(data)
	}

	C.g_memory_input_stream_add_data(arg0, arg1, arg2, arg3)
}
