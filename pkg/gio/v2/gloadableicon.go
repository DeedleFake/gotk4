// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/box"
	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gio-2.0 gio-unix-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <gio/gdesktopappinfo.h>
// #include <gio/gfiledescriptorbased.h>
// #include <gio/gio.h>
// #include <gio/gunixconnection.h>
// #include <gio/gunixcredentialsmessage.h>
// #include <gio/gunixfdlist.h>
// #include <gio/gunixfdmessage.h>
// #include <gio/gunixinputstream.h>
// #include <gio/gunixmounts.h>
// #include <gio/gunixoutputstream.h>
// #include <gio/gunixsocketaddress.h>
// #include <glib-object.h>
//
// void gotk4_AsyncReadyCallback(GObject*, GAsyncResult*, gpointer);
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_loadable_icon_get_type()), F: marshalLoadableIcon},
	})
}

// LoadableIcon extends the #GIcon interface and adds the ability to load icons
// from streams.
type LoadableIcon interface {
	gextras.Objector

	// AsIcon casts the class to the Icon interface.
	AsIcon() Icon

	// Equal checks if two icons are equal.
	//
	// This method is inherited from Icon
	Equal(icon2 Icon) bool
	// Serialize serializes a #GIcon into a #GVariant. An equivalent #GIcon can
	// be retrieved back by calling g_icon_deserialize() on the returned value.
	// As serialization will avoid using raw icon data when possible, it only
	// makes sense to transfer the #GVariant between processes on the same
	// machine, (as opposed to over the network), and within the same file
	// system namespace.
	//
	// This method is inherited from Icon
	Serialize() *glib.Variant
	// ToString generates a textual representation of @icon that can be used for
	// serialization such as when passing @icon to a different process or saving
	// it to persistent storage. Use g_icon_new_for_string() to get @icon back
	// from the returned string.
	//
	// The encoding of the returned string is proprietary to #GIcon except in
	// the following two cases
	//
	// - If @icon is a Icon, the returned string is a native path (such as
	// `/path/to/my icon.png`) without escaping if the #GFile for @icon is a
	// native file. If the file is not native, the returned string is the result
	// of g_file_get_uri() (such as `sftp://path/to/my20icon.png`).
	//
	// - If @icon is a Icon with exactly one name and no fallbacks, the encoding
	// is simply the name (such as `network-server`).
	//
	// This method is inherited from Icon
	ToString() string

	// Load loads a loadable icon. For the asynchronous version of this
	// function, see g_loadable_icon_load_async().
	Load(size int, cancellable Cancellable) (string, InputStream, error)
	// LoadAsync loads an icon asynchronously. To finish this function, see
	// g_loadable_icon_load_finish(). For the synchronous, blocking version of
	// this function, see g_loadable_icon_load().
	LoadAsync(size int, cancellable Cancellable, callback AsyncReadyCallback)
	// LoadFinish finishes an asynchronous icon load started in
	// g_loadable_icon_load_async().
	LoadFinish(res AsyncResult) (string, InputStream, error)
}

// loadableIcon implements the LoadableIcon interface.
type loadableIcon struct {
	*externglib.Object
}

var _ LoadableIcon = (*loadableIcon)(nil)

// WrapLoadableIcon wraps a GObject to a type that implements
// interface LoadableIcon. It is primarily used internally.
func WrapLoadableIcon(obj *externglib.Object) LoadableIcon {
	return loadableIcon{obj}
}

func marshalLoadableIcon(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapLoadableIcon(obj), nil
}

func (l loadableIcon) AsIcon() Icon {
	return WrapIcon(gextras.InternObject(l))
}

func (i loadableIcon) Equal(icon2 Icon) bool {
	return WrapIcon(gextras.InternObject(i)).Equal(icon2)
}

func (i loadableIcon) Serialize() *glib.Variant {
	return WrapIcon(gextras.InternObject(i)).Serialize()
}

func (i loadableIcon) ToString() string {
	return WrapIcon(gextras.InternObject(i)).ToString()
}

func (i loadableIcon) Load(size int, cancellable Cancellable) (string, InputStream, error) {
	var _arg0 *C.GLoadableIcon // out
	var _arg1 C.int            // out
	var _arg2 *C.char          // in
	var _arg3 *C.GCancellable  // out
	var _cret *C.GInputStream  // in
	var _cerr *C.GError        // in

	_arg0 = (*C.GLoadableIcon)(unsafe.Pointer(i.Native()))
	_arg1 = C.int(size)
	_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	_cret = C.g_loadable_icon_load(_arg0, _arg1, &_arg2, _arg3, &_cerr)

	var _typ string              // out
	var _inputStream InputStream // out
	var _goerr error             // out

	_typ = C.GoString(_arg2)
	defer C.free(unsafe.Pointer(_arg2))
	_inputStream = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(InputStream)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _typ, _inputStream, _goerr
}

func (i loadableIcon) LoadAsync(size int, cancellable Cancellable, callback AsyncReadyCallback) {
	var _arg0 *C.GLoadableIcon      // out
	var _arg1 C.int                 // out
	var _arg2 *C.GCancellable       // out
	var _arg3 C.GAsyncReadyCallback // out
	var _arg4 C.gpointer

	_arg0 = (*C.GLoadableIcon)(unsafe.Pointer(i.Native()))
	_arg1 = C.int(size)
	_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg3 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg4 = C.gpointer(box.Assign(callback))

	C.g_loadable_icon_load_async(_arg0, _arg1, _arg2, _arg3, _arg4)
}

func (i loadableIcon) LoadFinish(res AsyncResult) (string, InputStream, error) {
	var _arg0 *C.GLoadableIcon // out
	var _arg1 *C.GAsyncResult  // out
	var _arg2 *C.char          // in
	var _cret *C.GInputStream  // in
	var _cerr *C.GError        // in

	_arg0 = (*C.GLoadableIcon)(unsafe.Pointer(i.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(res.Native()))

	_cret = C.g_loadable_icon_load_finish(_arg0, _arg1, &_arg2, &_cerr)

	var _typ string              // out
	var _inputStream InputStream // out
	var _goerr error             // out

	_typ = C.GoString(_arg2)
	defer C.free(unsafe.Pointer(_arg2))
	_inputStream = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(InputStream)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _typ, _inputStream, _goerr
}
