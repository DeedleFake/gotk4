// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gerror"
	"github.com/diamondburned/gotk4/internal/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gio-2.0 gio-unix-2.0 glib-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <gio/gdesktopappinfo.h>
// #include <gio/gfiledescriptorbased.h>
// #include <gio/gio.h>
// #include <gio/gunixconnection.h>
// #include <gio/gunixcredentialsmessage.h>
// #include <gio/gunixfdlist.h>
// #include <gio/gunixfdmessage.h>
// #include <gio/gunixinputstream.h>
// #include <gio/gunixmounts.h>
// #include <gio/gunixoutputstream.h>
// #include <gio/gunixsocketaddress.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_loadable_icon_get_type()), F: marshalLoadableIcon},
	})
}

// LoadableIconOverrider contains methods that are overridable. This
// interface is a subset of the interface LoadableIcon.
type LoadableIconOverrider interface {
	// Load loads a loadable icon. For the asynchronous version of this
	// function, see g_loadable_icon_load_async().
	Load(size int, cancellable Cancellable) (string, InputStream, error)
	// LoadFinish finishes an asynchronous icon load started in
	// g_loadable_icon_load_async().
	LoadFinish(res AsyncResult) (string, InputStream, error)
}

// LoadableIcon extends the #GIcon interface and adds the ability to load icons
// from streams.
type LoadableIcon interface {
	Icon
	LoadableIconOverrider
}

// loadableIcon implements the LoadableIcon interface.
type loadableIcon struct {
	Icon
}

var _ LoadableIcon = (*loadableIcon)(nil)

// WrapLoadableIcon wraps a GObject to a type that implements interface
// LoadableIcon. It is primarily used internally.
func WrapLoadableIcon(obj *externglib.Object) LoadableIcon {
	return LoadableIcon{
		Icon: WrapIcon(obj),
	}
}

func marshalLoadableIcon(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapLoadableIcon(obj), nil
}

// Load loads a loadable icon. For the asynchronous version of this
// function, see g_loadable_icon_load_async().
func (i loadableIcon) Load(size int, cancellable Cancellable) (string, InputStream, error) {
	var _arg0 *C.GLoadableIcon // out
	var _arg1 C.int            // out
	var _arg2 *C.char          // in
	var _arg3 *C.GCancellable  // out
	var _cret *C.GInputStream  // in
	var _cerr *C.GError        // in

	_arg0 = (*C.GLoadableIcon)(unsafe.Pointer(i.Native()))
	_arg1 = (C.int)(size)
	_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	_cret = C.g_loadable_icon_load(_arg0, _arg1, &_arg2, _arg3, &_cerr)

	var _typ string              // out
	var _inputStream InputStream // out
	var _goerr error             // out

	_typ = C.GoString(_arg2)
	defer C.free(unsafe.Pointer(_arg2))
	_inputStream = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(InputStream)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _typ, _inputStream, _goerr
}

// LoadFinish finishes an asynchronous icon load started in
// g_loadable_icon_load_async().
func (i loadableIcon) LoadFinish(res AsyncResult) (string, InputStream, error) {
	var _arg0 *C.GLoadableIcon // out
	var _arg1 *C.GAsyncResult  // out
	var _arg2 *C.char          // in
	var _cret *C.GInputStream  // in
	var _cerr *C.GError        // in

	_arg0 = (*C.GLoadableIcon)(unsafe.Pointer(i.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(res.Native()))

	_cret = C.g_loadable_icon_load_finish(_arg0, _arg1, &_arg2, &_cerr)

	var _typ string              // out
	var _inputStream InputStream // out
	var _goerr error             // out

	_typ = C.GoString(_arg2)
	defer C.free(unsafe.Pointer(_arg2))
	_inputStream = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(InputStream)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _typ, _inputStream, _goerr
}
