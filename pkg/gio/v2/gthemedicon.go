// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	"github.com/diamondburned/gotk4/internal/ptr"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gio-2.0 gio-unix-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gio/gdesktopappinfo.h>
// #include <gio/gfiledescriptorbased.h>
// #include <gio/gio.h>
// #include <gio/gunixconnection.h>
// #include <gio/gunixcredentialsmessage.h>
// #include <gio/gunixfdlist.h>
// #include <gio/gunixfdmessage.h>
// #include <gio/gunixinputstream.h>
// #include <gio/gunixmounts.h>
// #include <gio/gunixoutputstream.h>
// #include <gio/gunixsocketaddress.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_themed_icon_get_type()), F: marshalThemedIcon},
	})
}

// ThemedIcon is an implementation of #GIcon that supports icon themes. Icon
// contains a list of all of the icons present in an icon theme, so that icons
// can be looked up quickly. Icon does not provide actual pixmaps for icons,
// just the icon names. Ideally something like gtk_icon_theme_choose_icon()
// should be used to resolve the list of names so that fallback icons work
// nicely with themes that inherit other themes.
type ThemedIcon interface {
	gextras.Objector
	Icon

	// AppendName: append a name to the list of icons from within @icon.
	//
	// Note that doing so invalidates the hash computed by prior calls to
	// g_icon_hash().
	AppendName(iconname string)
	// Names gets the names of icons from within @icon.
	Names() []string
	// PrependName: prepend a name to the list of icons from within @icon.
	//
	// Note that doing so invalidates the hash computed by prior calls to
	// g_icon_hash().
	PrependName(iconname string)
}

// themedIcon implements the ThemedIcon interface.
type themedIcon struct {
	gextras.Objector
	Icon
}

var _ ThemedIcon = (*themedIcon)(nil)

// WrapThemedIcon wraps a GObject to the right type. It is
// primarily used internally.
func WrapThemedIcon(obj *externglib.Object) ThemedIcon {
	return ThemedIcon{
		Objector: obj,
		Icon:     WrapIcon(obj),
	}
}

func marshalThemedIcon(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapThemedIcon(obj), nil
}

// NewThemedIcon constructs a class ThemedIcon.
func NewThemedIcon(iconname string) ThemedIcon {
	var arg1 *C.char

	arg1 = (*C.char)(C.CString(iconname))
	defer C.free(unsafe.Pointer(arg1))

	var cret C.GThemedIcon
	var goret1 ThemedIcon

	cret = C.g_themed_icon_new(iconname)

	goret1 = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(cret.Native()))).(ThemedIcon)

	return goret1
}

// NewThemedIconFromNames constructs a class ThemedIcon.
func NewThemedIconFromNames(iconnames []string) ThemedIcon {

	var cret C.GThemedIcon
	var goret1 ThemedIcon

	cret = C.g_themed_icon_new_from_names(iconnames, len)

	goret1 = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(cret.Native()))).(ThemedIcon)

	return goret1
}

// NewThemedIconWithDefaultFallbacks constructs a class ThemedIcon.
func NewThemedIconWithDefaultFallbacks(iconname string) ThemedIcon {
	var arg1 *C.char

	arg1 = (*C.char)(C.CString(iconname))
	defer C.free(unsafe.Pointer(arg1))

	var cret C.GThemedIcon
	var goret1 ThemedIcon

	cret = C.g_themed_icon_new_with_default_fallbacks(iconname)

	goret1 = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(cret.Native()))).(ThemedIcon)

	return goret1
}

// AppendName: append a name to the list of icons from within @icon.
//
// Note that doing so invalidates the hash computed by prior calls to
// g_icon_hash().
func (i themedIcon) AppendName(iconname string) {
	var arg0 *C.GThemedIcon
	var arg1 *C.char

	arg0 = (*C.GThemedIcon)(unsafe.Pointer(i.Native()))
	arg1 = (*C.char)(C.CString(iconname))
	defer C.free(unsafe.Pointer(arg1))

	C.g_themed_icon_append_name(arg0, iconname)
}

// Names gets the names of icons from within @icon.
func (i themedIcon) Names() []string {
	var arg0 *C.GThemedIcon

	arg0 = (*C.GThemedIcon)(unsafe.Pointer(i.Native()))

	var cret **C.gchar
	var goret1 []string

	cret = C.g_themed_icon_get_names(arg0)

	{
		var length int
		for p := cret; *p != 0; p = (**C.gchar)(ptr.Add(unsafe.Pointer(p), unsafe.Sizeof(int(0)))) {
			length++
			if length < 0 {
				panic(`length overflow`)
			}
		}

		goret1 = make([]string, length)
		for i := uintptr(0); i < uintptr(length); i += unsafe.Sizeof(int(0)) {
			src := (*C.gchar)(ptr.Add(unsafe.Pointer(cret), i))
			goret1[i] = C.GoString(src)
		}
	}

	return goret1
}

// PrependName: prepend a name to the list of icons from within @icon.
//
// Note that doing so invalidates the hash computed by prior calls to
// g_icon_hash().
func (i themedIcon) PrependName(iconname string) {
	var arg0 *C.GThemedIcon
	var arg1 *C.char

	arg0 = (*C.GThemedIcon)(unsafe.Pointer(i.Native()))
	arg1 = (*C.char)(C.CString(iconname))
	defer C.free(unsafe.Pointer(arg1))

	C.g_themed_icon_prepend_name(arg0, iconname)
}
