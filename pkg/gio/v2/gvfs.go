// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/ptr"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gio-2.0 gio-unix-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gio/gdesktopappinfo.h>
// #include <gio/gfiledescriptorbased.h>
// #include <gio/gio.h>
// #include <gio/gunixconnection.h>
// #include <gio/gunixcredentialsmessage.h>
// #include <gio/gunixfdlist.h>
// #include <gio/gunixfdmessage.h>
// #include <gio/gunixinputstream.h>
// #include <gio/gunixmounts.h>
// #include <gio/gunixoutputstream.h>
// #include <gio/gunixsocketaddress.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_vfs_get_type()), F: marshalVFS},
	})
}

// VFS: entry point for using GIO functionality.
type VFS interface {
	gextras.Objector

	// SupportedURISchemes gets a list of URI schemes supported by @vfs.
	SupportedURISchemes() []string
	// IsActive checks if the VFS is active.
	IsActive() bool
	// UnregisterURIScheme unregisters the URI handler for @scheme previously
	// registered with g_vfs_register_uri_scheme().
	UnregisterURIScheme(scheme string) bool
}

// vfS implements the VFS interface.
type vfS struct {
	gextras.Objector
}

var _ VFS = (*vfS)(nil)

// WrapVFS wraps a GObject to the right type. It is
// primarily used internally.
func WrapVFS(obj *externglib.Object) VFS {
	return VFS{
		Objector: obj,
	}
}

func marshalVFS(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapVFS(obj), nil
}

// SupportedURISchemes gets a list of URI schemes supported by @vfs.
func (v vfS) SupportedURISchemes() []string {
	var _arg0 *C.GVfs

	_arg0 = (*C.GVfs)(unsafe.Pointer(v.Native()))

	var _cret **C.gchar

	_cret = C.g_vfs_get_supported_uri_schemes(_arg0)

	var _utf8s []string

	{
		var length int
		for p := _cret; *p != 0; p = (**C.gchar)(ptr.Add(unsafe.Pointer(p), unsafe.Sizeof(int(0)))) {
			length++
			if length < 0 {
				panic(`length overflow`)
			}
		}

		var src []*C.gchar
		ptr.SetSlice(unsafe.Pointer(&src), unsafe.Pointer(_cret), int(length))

		_utf8s = make([]string, length)
		for i := range src {
			_utf8s = C.GoString(_cret)
		}
	}

	return _utf8s
}

// IsActive checks if the VFS is active.
func (v vfS) IsActive() bool {
	var _arg0 *C.GVfs

	_arg0 = (*C.GVfs)(unsafe.Pointer(v.Native()))

	var _cret C.gboolean

	_cret = C.g_vfs_is_active(_arg0)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// UnregisterURIScheme unregisters the URI handler for @scheme previously
// registered with g_vfs_register_uri_scheme().
func (v vfS) UnregisterURIScheme(scheme string) bool {
	var _arg0 *C.GVfs
	var _arg1 *C.char

	_arg0 = (*C.GVfs)(unsafe.Pointer(v.Native()))
	_arg1 = (*C.char)(C.CString(scheme))
	defer C.free(unsafe.Pointer(_arg1))

	var _cret C.gboolean

	_cret = C.g_vfs_unregister_uri_scheme(_arg0, _arg1)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}
