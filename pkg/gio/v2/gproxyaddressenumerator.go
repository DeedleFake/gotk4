// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/box"
	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gio-2.0 gio-unix-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <gio/gdesktopappinfo.h>
// #include <gio/gfiledescriptorbased.h>
// #include <gio/gio.h>
// #include <gio/gunixconnection.h>
// #include <gio/gunixcredentialsmessage.h>
// #include <gio/gunixfdlist.h>
// #include <gio/gunixfdmessage.h>
// #include <gio/gunixinputstream.h>
// #include <gio/gunixmounts.h>
// #include <gio/gunixoutputstream.h>
// #include <gio/gunixsocketaddress.h>
// #include <glib-object.h>
//
// void gotk4_AsyncReadyCallback(GObject*, GAsyncResult*, gpointer);
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_proxy_address_enumerator_get_type()), F: marshalProxyAddressEnumerator},
	})
}

// ProxyAddressEnumerator is a wrapper around AddressEnumerator which takes the
// Address instances returned by the AddressEnumerator and wraps them in Address
// instances, using the given AddressEnumerator:proxy-resolver.
//
// This enumerator will be returned (for example, by
// g_socket_connectable_enumerate()) as appropriate when a proxy is configured;
// there should be no need to manually wrap a AddressEnumerator instance with
// one.
type ProxyAddressEnumerator interface {
	SocketAddressEnumerator

	// AsSocketAddressEnumerator casts the class to the SocketAddressEnumerator interface.
	AsSocketAddressEnumerator() SocketAddressEnumerator

	// Next retrieves the next Address from @enumerator. Note that this may
	// block for some amount of time. (Eg, a Address may need to do a DNS lookup
	// before it can return an address.) Use
	// g_socket_address_enumerator_next_async() if you need to avoid blocking.
	//
	// If @enumerator is expected to yield addresses, but for some reason is
	// unable to (eg, because of a DNS error), then the first call to
	// g_socket_address_enumerator_next() will return an appropriate error in
	// *@error. However, if the first call to g_socket_address_enumerator_next()
	// succeeds, then any further internal errors (other than @cancellable being
	// triggered) will be ignored.
	//
	// This method is inherited from SocketAddressEnumerator
	Next(cancellable Cancellable) (SocketAddress, error)
	// NextAsync: asynchronously retrieves the next Address from @enumerator and
	// then calls @callback, which must call
	// g_socket_address_enumerator_next_finish() to get the result.
	//
	// It is an error to call this multiple times before the previous callback
	// has finished.
	//
	// This method is inherited from SocketAddressEnumerator
	NextAsync(cancellable Cancellable, callback AsyncReadyCallback)
	// NextFinish retrieves the result of a completed call to
	// g_socket_address_enumerator_next_async(). See
	// g_socket_address_enumerator_next() for more information about error
	// handling.
	//
	// This method is inherited from SocketAddressEnumerator
	NextFinish(result AsyncResult) (SocketAddress, error)
}

// proxyAddressEnumerator implements the ProxyAddressEnumerator interface.
type proxyAddressEnumerator struct {
	*externglib.Object
}

var _ ProxyAddressEnumerator = (*proxyAddressEnumerator)(nil)

// WrapProxyAddressEnumerator wraps a GObject to a type that implements
// interface ProxyAddressEnumerator. It is primarily used internally.
func WrapProxyAddressEnumerator(obj *externglib.Object) ProxyAddressEnumerator {
	return proxyAddressEnumerator{obj}
}

func marshalProxyAddressEnumerator(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapProxyAddressEnumerator(obj), nil
}

func (p proxyAddressEnumerator) AsSocketAddressEnumerator() SocketAddressEnumerator {
	return WrapSocketAddressEnumerator(gextras.InternObject(p))
}

func (e proxyAddressEnumerator) Next(cancellable Cancellable) (SocketAddress, error) {
	return WrapSocketAddressEnumerator(gextras.InternObject(e)).Next(cancellable)
}

func (e proxyAddressEnumerator) NextAsync(cancellable Cancellable, callback AsyncReadyCallback) {
	WrapSocketAddressEnumerator(gextras.InternObject(e)).NextAsync(cancellable, callback)
}

func (e proxyAddressEnumerator) NextFinish(result AsyncResult) (SocketAddress, error) {
	return WrapSocketAddressEnumerator(gextras.InternObject(e)).NextFinish(result)
}
