// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/box"
	"github.com/diamondburned/gotk4/internal/gerror"
	"github.com/diamondburned/gotk4/internal/ptr"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gio-2.0 gio-unix-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gio/gdesktopappinfo.h>
// #include <gio/gfiledescriptorbased.h>
// #include <gio/gio.h>
// #include <gio/gunixconnection.h>
// #include <gio/gunixcredentialsmessage.h>
// #include <gio/gunixfdlist.h>
// #include <gio/gunixfdmessage.h>
// #include <gio/gunixinputstream.h>
// #include <gio/gunixmounts.h>
// #include <gio/gunixoutputstream.h>
// #include <gio/gunixsocketaddress.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_proxy_resolver_get_type()), F: marshalProXYResolver},
	})
}

// ProXYResolverOverrider contains methods that are overridable. This
// interface is a subset of the interface ProXYResolver.
type ProXYResolverOverrider interface {
	// IsSupported checks if @resolver can be used on this system. (This is used
	// internally; g_proxy_resolver_get_default() will only return a proxy
	// resolver that returns true for this method.)
	IsSupported() bool
	// Lookup looks into the system proxy configuration to determine what proxy,
	// if any, to use to connect to @uri. The returned proxy URIs are of the
	// form `<protocol>://[user[:password]@]host:port` or `direct://`, where
	// <protocol> could be http, rtsp, socks or other proxying protocol.
	//
	// If you don't know what network protocol is being used on the socket, you
	// should use `none` as the URI protocol. In this case, the resolver might
	// still return a generic proxy type (such as SOCKS), but would not return
	// protocol-specific proxy types (such as http).
	//
	// `direct://` is used when no proxy is needed. Direct connection should not
	// be attempted unless it is part of the returned array of proxies.
	Lookup(uri string, cancellable Cancellable) ([]string, error)
	// LookupAsync asynchronous lookup of proxy. See g_proxy_resolver_lookup()
	// for more details.
	LookupAsync(uri string, cancellable Cancellable, callback AsyncReadyCallback)
	// LookupFinish: call this function to obtain the array of proxy URIs when
	// g_proxy_resolver_lookup_async() is complete. See
	// g_proxy_resolver_lookup() for more details.
	LookupFinish(result AsyncResult) ([]string, error)
}

// ProXYResolver provides synchronous and asynchronous network proxy resolution.
// Resolver is used within Client through the method
// g_socket_connectable_proxy_enumerate().
//
// Implementations of Resolver based on libproxy and GNOME settings can be found
// in glib-networking. GIO comes with an implementation for use inside Flatpak
// portals.
type ProXYResolver interface {
	gextras.Objector
	ProXYResolverOverrider
}

// proXYResolver implements the ProXYResolver interface.
type proXYResolver struct {
	gextras.Objector
}

var _ ProXYResolver = (*proXYResolver)(nil)

// WrapProXYResolver wraps a GObject to a type that implements interface
// ProXYResolver. It is primarily used internally.
func WrapProXYResolver(obj *externglib.Object) ProXYResolver {
	return ProXYResolver{
		Objector: obj,
	}
}

func marshalProXYResolver(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapProXYResolver(obj), nil
}

// IsSupported checks if @resolver can be used on this system. (This is used
// internally; g_proxy_resolver_get_default() will only return a proxy
// resolver that returns true for this method.)
func (r proXYResolver) IsSupported() bool {
	var _arg0 *C.GProxyResolver

	_arg0 = (*C.GProxyResolver)(unsafe.Pointer(r.Native()))

	var _cret C.gboolean

	_cret = C.g_proxy_resolver_is_supported(_arg0)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// Lookup looks into the system proxy configuration to determine what proxy,
// if any, to use to connect to @uri. The returned proxy URIs are of the
// form `<protocol>://[user[:password]@]host:port` or `direct://`, where
// <protocol> could be http, rtsp, socks or other proxying protocol.
//
// If you don't know what network protocol is being used on the socket, you
// should use `none` as the URI protocol. In this case, the resolver might
// still return a generic proxy type (such as SOCKS), but would not return
// protocol-specific proxy types (such as http).
//
// `direct://` is used when no proxy is needed. Direct connection should not
// be attempted unless it is part of the returned array of proxies.
func (r proXYResolver) Lookup(uri string, cancellable Cancellable) ([]string, error) {
	var _arg0 *C.GProxyResolver
	var _arg1 *C.gchar
	var _arg2 *C.GCancellable

	_arg0 = (*C.GProxyResolver)(unsafe.Pointer(r.Native()))
	_arg1 = (*C.gchar)(C.CString(uri))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	var _cret **C.gchar
	var _cerr *C.GError

	_cret = C.g_proxy_resolver_lookup(_arg0, _arg1, _arg2, _cerr)

	var _utf8s []string
	var _goerr error

	{
		var length int
		for p := _cret; *p != 0; p = (**C.gchar)(ptr.Add(unsafe.Pointer(p), unsafe.Sizeof(int(0)))) {
			length++
			if length < 0 {
				panic(`length overflow`)
			}
		}

		var src []*C.gchar
		ptr.SetSlice(unsafe.Pointer(&src), unsafe.Pointer(_cret), int(length))

		_utf8s = make([]string, length)
		for i := range src {
			_utf8s = C.GoString(_cret)
			defer C.free(unsafe.Pointer(_cret))
		}
	}
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _utf8s, _goerr
}

// LookupAsync asynchronous lookup of proxy. See g_proxy_resolver_lookup()
// for more details.
func (r proXYResolver) LookupAsync(uri string, cancellable Cancellable, callback AsyncReadyCallback) {
	var _arg0 *C.GProxyResolver
	var _arg1 *C.gchar
	var _arg2 *C.GCancellable
	var _arg3 C.GAsyncReadyCallback
	var _arg4 C.gpointer

	_arg0 = (*C.GProxyResolver)(unsafe.Pointer(r.Native()))
	_arg1 = (*C.gchar)(C.CString(uri))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg3 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg4 = C.gpointer(box.Assign(callback))

	C.g_proxy_resolver_lookup_async(_arg0, _arg1, _arg2, _arg3, _arg4)
}

// LookupFinish: call this function to obtain the array of proxy URIs when
// g_proxy_resolver_lookup_async() is complete. See
// g_proxy_resolver_lookup() for more details.
func (r proXYResolver) LookupFinish(result AsyncResult) ([]string, error) {
	var _arg0 *C.GProxyResolver
	var _arg1 *C.GAsyncResult

	_arg0 = (*C.GProxyResolver)(unsafe.Pointer(r.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(result.Native()))

	var _cret **C.gchar
	var _cerr *C.GError

	_cret = C.g_proxy_resolver_lookup_finish(_arg0, _arg1, _cerr)

	var _utf8s []string
	var _goerr error

	{
		var length int
		for p := _cret; *p != 0; p = (**C.gchar)(ptr.Add(unsafe.Pointer(p), unsafe.Sizeof(int(0)))) {
			length++
			if length < 0 {
				panic(`length overflow`)
			}
		}

		var src []*C.gchar
		ptr.SetSlice(unsafe.Pointer(&src), unsafe.Pointer(_cret), int(length))

		_utf8s = make([]string, length)
		for i := range src {
			_utf8s = C.GoString(_cret)
			defer C.free(unsafe.Pointer(_cret))
		}
	}
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _utf8s, _goerr
}
