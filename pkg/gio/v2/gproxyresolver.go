// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gio-2.0 gio-unix-2.0 glib-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <gio/gdesktopappinfo.h>
// #include <gio/gfiledescriptorbased.h>
// #include <gio/gio.h>
// #include <gio/gunixconnection.h>
// #include <gio/gunixcredentialsmessage.h>
// #include <gio/gunixfdlist.h>
// #include <gio/gunixfdmessage.h>
// #include <gio/gunixinputstream.h>
// #include <gio/gunixmounts.h>
// #include <gio/gunixoutputstream.h>
// #include <gio/gunixsocketaddress.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_proxy_resolver_get_type()), F: marshalProXYResolver},
	})
}

// ProXYResolverOverrider contains methods that are overridable. This
// interface is a subset of the interface ProXYResolver.
type ProXYResolverOverrider interface {
	// IsSupported checks if @resolver can be used on this system. (This is used
	// internally; g_proxy_resolver_get_default() will only return a proxy
	// resolver that returns true for this method.)
	IsSupported() bool
}

// ProXYResolver provides synchronous and asynchronous network proxy resolution.
// Resolver is used within Client through the method
// g_socket_connectable_proxy_enumerate().
//
// Implementations of Resolver based on libproxy and GNOME settings can be found
// in glib-networking. GIO comes with an implementation for use inside Flatpak
// portals.
type ProXYResolver interface {
	gextras.Objector
	ProXYResolverOverrider
}

// proXYResolver implements the ProXYResolver interface.
type proXYResolver struct {
	gextras.Objector
}

var _ ProXYResolver = (*proXYResolver)(nil)

// WrapProXYResolver wraps a GObject to a type that implements interface
// ProXYResolver. It is primarily used internally.
func WrapProXYResolver(obj *externglib.Object) ProXYResolver {
	return ProXYResolver{
		Objector: obj,
	}
}

func marshalProXYResolver(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapProXYResolver(obj), nil
}

// IsSupported checks if @resolver can be used on this system. (This is used
// internally; g_proxy_resolver_get_default() will only return a proxy
// resolver that returns true for this method.)
func (r proXYResolver) IsSupported() bool {
	var _arg0 *C.GProxyResolver // out

	_arg0 = (*C.GProxyResolver)(unsafe.Pointer(r.Native()))

	var _cret C.gboolean // in

	_cret = C.g_proxy_resolver_is_supported(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}
