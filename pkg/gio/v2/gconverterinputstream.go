// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/core/gerror"
	"github.com/diamondburned/gotk4/core/gextras"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gio-2.0 gio-unix-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <gio/gdesktopappinfo.h>
// #include <gio/gfiledescriptorbased.h>
// #include <gio/gio.h>
// #include <gio/gunixconnection.h>
// #include <gio/gunixcredentialsmessage.h>
// #include <gio/gunixfdlist.h>
// #include <gio/gunixfdmessage.h>
// #include <gio/gunixinputstream.h>
// #include <gio/gunixmounts.h>
// #include <gio/gunixoutputstream.h>
// #include <gio/gunixsocketaddress.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_converter_input_stream_get_type()), F: marshalConverterInputStream},
	})
}

// ConverterInputStream: converter input stream implements Stream and allows
// conversion of data of various types during reading.
//
// As of GLib 2.34, InputStream implements InputStream.
type ConverterInputStream interface {
	FilterInputStream
	PollableInputStream

	Converter() Converter
}

// converterInputStream implements the ConverterInputStream class.
type converterInputStream struct {
	FilterInputStream
}

// WrapConverterInputStream wraps a GObject to the right type. It is
// primarily used internally.
func WrapConverterInputStream(obj *externglib.Object) ConverterInputStream {
	return converterInputStream{
		FilterInputStream: WrapFilterInputStream(obj),
	}
}

func marshalConverterInputStream(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapConverterInputStream(obj), nil
}

func NewConverterInputStream(baseStream InputStream, converter Converter) ConverterInputStream {
	var _arg1 *C.GInputStream // out
	var _arg2 *C.GConverter   // out
	var _cret *C.GInputStream // in

	_arg1 = (*C.GInputStream)(unsafe.Pointer(baseStream.Native()))
	_arg2 = (*C.GConverter)(unsafe.Pointer(converter.Native()))

	_cret = C.g_converter_input_stream_new(_arg1, _arg2)

	var _converterInputStream ConverterInputStream // out

	_converterInputStream = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(ConverterInputStream)

	return _converterInputStream
}

func (c converterInputStream) Converter() Converter {
	var _arg0 *C.GConverterInputStream // out
	var _cret *C.GConverter            // in

	_arg0 = (*C.GConverterInputStream)(unsafe.Pointer(c.Native()))

	_cret = C.g_converter_input_stream_get_converter(_arg0)

	var _converter Converter // out

	_converter = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Converter)

	return _converter
}

func (s converterInputStream) CanPoll() bool {
	return WrapPollableInputStream(gextras.InternObject(s)).CanPoll()
}

func (s converterInputStream) CreateSource(cancellable Cancellable) *glib.Source {
	return WrapPollableInputStream(gextras.InternObject(s)).CreateSource(cancellable)
}

func (s converterInputStream) IsReadable() bool {
	return WrapPollableInputStream(gextras.InternObject(s)).IsReadable()
}

func (s converterInputStream) ReadNonblocking(buffer []byte, cancellable Cancellable) (int, error) {
	return WrapPollableInputStream(gextras.InternObject(s)).ReadNonblocking(buffer, cancellable)
}
