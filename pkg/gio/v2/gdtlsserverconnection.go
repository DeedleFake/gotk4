// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gio-2.0 gio-unix-2.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gio/gdesktopappinfo.h>
// #include <gio/gfiledescriptorbased.h>
// #include <gio/gio.h>
// #include <gio/gunixconnection.h>
// #include <gio/gunixcredentialsmessage.h>
// #include <gio/gunixfdlist.h>
// #include <gio/gunixfdmessage.h>
// #include <gio/gunixinputstream.h>
// #include <gio/gunixmounts.h>
// #include <gio/gunixoutputstream.h>
// #include <gio/gunixsocketaddress.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_dtls_server_connection_get_type()), F: marshalDTLSServerConnection},
	})
}

// NewDTLSServerConnection creates a new ServerConnection wrapping @base_socket.
func NewDTLSServerConnection(baseSocket DatagramBased, certificate TLSCertificate) (dtlsServerConnection DTLSServerConnection, err error) {
	var arg1 *C.GDatagramBased
	var arg2 *C.GTlsCertificate
	var gError *C.GError

	arg1 = (*C.GDatagramBased)(baseSocket.Native())
	arg2 = (*C.GTlsCertificate)(certificate.Native())

	ret := C.g_dtls_server_connection_new(arg1, arg2, &gError)

	var ret0 DTLSServerConnection
	var goError error

	ret0 = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(ret.Native()))).(DTLSServerConnection)

	if gError != nil {
		goError = fmt.Errorf("%d: %s", gError.code, C.GoString(gError.message))
		C.g_error_free(gError)
	}

	return ret0, goError
}

// DTLSServerConnection is the server-side subclass of Connection, representing
// a server-side DTLS connection.
type DTLSServerConnection interface {
	DatagramBasedDTLSConnection
}

// dtlsServerConnection implements the DTLSServerConnection interface.
type dtlsServerConnection struct {
	DatagramBased
	DTLSConnection
}

var _ DTLSServerConnection = (*dtlsServerConnection)(nil)

// WrapDTLSServerConnection wraps a GObject to a type that implements interface
// DTLSServerConnection. It is primarily used internally.
func WrapDTLSServerConnection(obj *externglib.Object) DTLSServerConnection {
	return DTLSServerConnection{
		DatagramBased:  WrapDatagramBased(obj),
		DTLSConnection: WrapDTLSConnection(obj),
	}
}

func marshalDTLSServerConnection(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapDTLSServerConnection(obj), nil
}
