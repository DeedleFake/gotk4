// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/core/gerror"
	"github.com/diamondburned/gotk4/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gio-2.0 gio-unix-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <gio/gdesktopappinfo.h>
// #include <gio/gfiledescriptorbased.h>
// #include <gio/gio.h>
// #include <gio/gunixconnection.h>
// #include <gio/gunixcredentialsmessage.h>
// #include <gio/gunixfdlist.h>
// #include <gio/gunixfdmessage.h>
// #include <gio/gunixinputstream.h>
// #include <gio/gunixmounts.h>
// #include <gio/gunixoutputstream.h>
// #include <gio/gunixsocketaddress.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_desktop_app_info_lookup_get_type()), F: marshalDesktopAppInfoLookup},
		{T: externglib.Type(C.g_desktop_app_info_get_type()), F: marshalDesktopAppInfo},
	})
}

// DesktopAppInfoLookup is an opaque data structure and can only be accessed
// using the following functions.
//
// Deprecated: since version 2.28.
type DesktopAppInfoLookup interface {
	gextras.Objector

	// DefaultForURIScheme gets the default application for launching
	// applications using this URI scheme for a particular AppInfoLookup
	// implementation.
	//
	// The AppInfoLookup interface and this function is used to implement
	// g_app_info_get_default_for_uri_scheme() backends in a GIO module. There
	// is no reason for applications to use it directly. Applications should use
	// g_app_info_get_default_for_uri_scheme().
	//
	// Deprecated: since version 2.28.
	DefaultForURIScheme(uriScheme string) AppInfo
}

// desktopAppInfoLookup implements the DesktopAppInfoLookup interface.
type desktopAppInfoLookup struct {
	gextras.Objector
}

var _ DesktopAppInfoLookup = (*desktopAppInfoLookup)(nil)

// WrapDesktopAppInfoLookup wraps a GObject to a type that implements
// interface DesktopAppInfoLookup. It is primarily used internally.
func WrapDesktopAppInfoLookup(obj *externglib.Object) DesktopAppInfoLookup {
	return desktopAppInfoLookup{
		Objector: obj,
	}
}

func marshalDesktopAppInfoLookup(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapDesktopAppInfoLookup(obj), nil
}

func (l desktopAppInfoLookup) DefaultForURIScheme(uriScheme string) AppInfo {
	var _arg0 *C.GDesktopAppInfoLookup // out
	var _arg1 *C.char                  // out
	var _cret *C.GAppInfo              // in

	_arg0 = (*C.GDesktopAppInfoLookup)(unsafe.Pointer(l.Native()))
	_arg1 = (*C.char)(C.CString(uriScheme))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.g_desktop_app_info_lookup_get_default_for_uri_scheme(_arg0, _arg1)

	var _appInfo AppInfo // out

	_appInfo = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(AppInfo)

	return _appInfo
}

// DesktopAppInfo is an implementation of Info based on desktop files.
//
// Note that `<gio/gdesktopappinfo.h>` belongs to the UNIX-specific GIO
// interfaces, thus you have to use the `gio-unix-2.0.pc` pkg-config file when
// using it.
type DesktopAppInfo interface {
	AppInfo

	// ActionName:
	ActionName(actionName string) string
	// Boolean:
	Boolean(key string) bool
	// Categories:
	Categories() string
	// Filename:
	Filename() string
	// GenericName:
	GenericName() string
	// IsHidden:
	IsHidden() bool
	// Keywords:
	Keywords() []string
	// LocaleString:
	LocaleString(key string) string
	// Nodisplay:
	Nodisplay() bool
	// ShowIn:
	ShowIn(desktopEnv string) bool
	// StartupWmClass:
	StartupWmClass() string
	// String:
	String(key string) string
	// HasKeyDesktopAppInfo:
	HasKeyDesktopAppInfo(key string) bool
	// LaunchActionDesktopAppInfo:
	LaunchActionDesktopAppInfo(actionName string, launchContext AppLaunchContext)
	// ListActionsDesktopAppInfo:
	ListActionsDesktopAppInfo() []string
}

// desktopAppInfo implements the DesktopAppInfo class.
type desktopAppInfo struct {
	gextras.Objector
}

// WrapDesktopAppInfo wraps a GObject to the right type. It is
// primarily used internally.
func WrapDesktopAppInfo(obj *externglib.Object) DesktopAppInfo {
	return desktopAppInfo{
		Objector: obj,
	}
}

func marshalDesktopAppInfo(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapDesktopAppInfo(obj), nil
}

// NewDesktopAppInfo:
func NewDesktopAppInfo(desktopId string) DesktopAppInfo {
	var _arg1 *C.char            // out
	var _cret *C.GDesktopAppInfo // in

	_arg1 = (*C.char)(C.CString(desktopId))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.g_desktop_app_info_new(_arg1)

	var _desktopAppInfo DesktopAppInfo // out

	_desktopAppInfo = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(DesktopAppInfo)

	return _desktopAppInfo
}

// NewDesktopAppInfoFromFilename:
func NewDesktopAppInfoFromFilename(filename string) DesktopAppInfo {
	var _arg1 *C.char            // out
	var _cret *C.GDesktopAppInfo // in

	_arg1 = (*C.char)(C.CString(filename))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.g_desktop_app_info_new_from_filename(_arg1)

	var _desktopAppInfo DesktopAppInfo // out

	_desktopAppInfo = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(DesktopAppInfo)

	return _desktopAppInfo
}

// NewDesktopAppInfoFromKeyfile:
func NewDesktopAppInfoFromKeyfile(keyFile *glib.KeyFile) DesktopAppInfo {
	var _arg1 *C.GKeyFile        // out
	var _cret *C.GDesktopAppInfo // in

	_arg1 = (*C.GKeyFile)(unsafe.Pointer(keyFile.Native()))

	_cret = C.g_desktop_app_info_new_from_keyfile(_arg1)

	var _desktopAppInfo DesktopAppInfo // out

	_desktopAppInfo = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(DesktopAppInfo)

	return _desktopAppInfo
}

func (i desktopAppInfo) ActionName(actionName string) string {
	var _arg0 *C.GDesktopAppInfo // out
	var _arg1 *C.gchar           // out
	var _cret *C.gchar           // in

	_arg0 = (*C.GDesktopAppInfo)(unsafe.Pointer(i.Native()))
	_arg1 = (*C.gchar)(C.CString(actionName))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.g_desktop_app_info_get_action_name(_arg0, _arg1)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

func (i desktopAppInfo) Boolean(key string) bool {
	var _arg0 *C.GDesktopAppInfo // out
	var _arg1 *C.char            // out
	var _cret C.gboolean         // in

	_arg0 = (*C.GDesktopAppInfo)(unsafe.Pointer(i.Native()))
	_arg1 = (*C.char)(C.CString(key))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.g_desktop_app_info_get_boolean(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (i desktopAppInfo) Categories() string {
	var _arg0 *C.GDesktopAppInfo // out
	var _cret *C.char            // in

	_arg0 = (*C.GDesktopAppInfo)(unsafe.Pointer(i.Native()))

	_cret = C.g_desktop_app_info_get_categories(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

func (i desktopAppInfo) Filename() string {
	var _arg0 *C.GDesktopAppInfo // out
	var _cret *C.char            // in

	_arg0 = (*C.GDesktopAppInfo)(unsafe.Pointer(i.Native()))

	_cret = C.g_desktop_app_info_get_filename(_arg0)

	var _filename string // out

	_filename = C.GoString(_cret)

	return _filename
}

func (i desktopAppInfo) GenericName() string {
	var _arg0 *C.GDesktopAppInfo // out
	var _cret *C.char            // in

	_arg0 = (*C.GDesktopAppInfo)(unsafe.Pointer(i.Native()))

	_cret = C.g_desktop_app_info_get_generic_name(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

func (i desktopAppInfo) IsHidden() bool {
	var _arg0 *C.GDesktopAppInfo // out
	var _cret C.gboolean         // in

	_arg0 = (*C.GDesktopAppInfo)(unsafe.Pointer(i.Native()))

	_cret = C.g_desktop_app_info_get_is_hidden(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (i desktopAppInfo) Keywords() []string {
	var _arg0 *C.GDesktopAppInfo // out
	var _cret **C.char

	_arg0 = (*C.GDesktopAppInfo)(unsafe.Pointer(i.Native()))

	_cret = C.g_desktop_app_info_get_keywords(_arg0)

	var _utf8s []string

	{
		var i int
		var z *C.char
		for p := _cret; *p != z; p = &unsafe.Slice(p, i+1)[i] {
			i++
		}

		src := unsafe.Slice(_cret, i)
		_utf8s = make([]string, i)
		for i := range src {
			_utf8s[i] = C.GoString(src[i])
		}
	}

	return _utf8s
}

func (i desktopAppInfo) LocaleString(key string) string {
	var _arg0 *C.GDesktopAppInfo // out
	var _arg1 *C.char            // out
	var _cret *C.char            // in

	_arg0 = (*C.GDesktopAppInfo)(unsafe.Pointer(i.Native()))
	_arg1 = (*C.char)(C.CString(key))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.g_desktop_app_info_get_locale_string(_arg0, _arg1)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

func (i desktopAppInfo) Nodisplay() bool {
	var _arg0 *C.GDesktopAppInfo // out
	var _cret C.gboolean         // in

	_arg0 = (*C.GDesktopAppInfo)(unsafe.Pointer(i.Native()))

	_cret = C.g_desktop_app_info_get_nodisplay(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (i desktopAppInfo) ShowIn(desktopEnv string) bool {
	var _arg0 *C.GDesktopAppInfo // out
	var _arg1 *C.gchar           // out
	var _cret C.gboolean         // in

	_arg0 = (*C.GDesktopAppInfo)(unsafe.Pointer(i.Native()))
	_arg1 = (*C.gchar)(C.CString(desktopEnv))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.g_desktop_app_info_get_show_in(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (i desktopAppInfo) StartupWmClass() string {
	var _arg0 *C.GDesktopAppInfo // out
	var _cret *C.char            // in

	_arg0 = (*C.GDesktopAppInfo)(unsafe.Pointer(i.Native()))

	_cret = C.g_desktop_app_info_get_startup_wm_class(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

func (i desktopAppInfo) String(key string) string {
	var _arg0 *C.GDesktopAppInfo // out
	var _arg1 *C.char            // out
	var _cret *C.char            // in

	_arg0 = (*C.GDesktopAppInfo)(unsafe.Pointer(i.Native()))
	_arg1 = (*C.char)(C.CString(key))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.g_desktop_app_info_get_string(_arg0, _arg1)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

func (i desktopAppInfo) HasKeyDesktopAppInfo(key string) bool {
	var _arg0 *C.GDesktopAppInfo // out
	var _arg1 *C.char            // out
	var _cret C.gboolean         // in

	_arg0 = (*C.GDesktopAppInfo)(unsafe.Pointer(i.Native()))
	_arg1 = (*C.char)(C.CString(key))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.g_desktop_app_info_has_key(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (i desktopAppInfo) LaunchActionDesktopAppInfo(actionName string, launchContext AppLaunchContext) {
	var _arg0 *C.GDesktopAppInfo   // out
	var _arg1 *C.gchar             // out
	var _arg2 *C.GAppLaunchContext // out

	_arg0 = (*C.GDesktopAppInfo)(unsafe.Pointer(i.Native()))
	_arg1 = (*C.gchar)(C.CString(actionName))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.GAppLaunchContext)(unsafe.Pointer(launchContext.Native()))

	C.g_desktop_app_info_launch_action(_arg0, _arg1, _arg2)
}

func (i desktopAppInfo) ListActionsDesktopAppInfo() []string {
	var _arg0 *C.GDesktopAppInfo // out
	var _cret **C.gchar

	_arg0 = (*C.GDesktopAppInfo)(unsafe.Pointer(i.Native()))

	_cret = C.g_desktop_app_info_list_actions(_arg0)

	var _utf8s []string

	{
		var i int
		var z *C.gchar
		for p := _cret; *p != z; p = &unsafe.Slice(p, i+1)[i] {
			i++
		}

		src := unsafe.Slice(_cret, i)
		_utf8s = make([]string, i)
		for i := range src {
			_utf8s[i] = C.GoString(src[i])
		}
	}

	return _utf8s
}

func (a desktopAppInfo) AddSupportsType(contentType string) error {
	return WrapAppInfo(gextras.InternObject(a)).AddSupportsType(contentType)
}

func (a desktopAppInfo) CanDelete() bool {
	return WrapAppInfo(gextras.InternObject(a)).CanDelete()
}

func (a desktopAppInfo) CanRemoveSupportsType() bool {
	return WrapAppInfo(gextras.InternObject(a)).CanRemoveSupportsType()
}

func (a desktopAppInfo) Delete() bool {
	return WrapAppInfo(gextras.InternObject(a)).Delete()
}

func (a desktopAppInfo) Dup() AppInfo {
	return WrapAppInfo(gextras.InternObject(a)).Dup()
}

func (a desktopAppInfo) Equal(appinfo2 AppInfo) bool {
	return WrapAppInfo(gextras.InternObject(a)).Equal(appinfo2)
}

func (a desktopAppInfo) Commandline() string {
	return WrapAppInfo(gextras.InternObject(a)).Commandline()
}

func (a desktopAppInfo) Description() string {
	return WrapAppInfo(gextras.InternObject(a)).Description()
}

func (a desktopAppInfo) DisplayName() string {
	return WrapAppInfo(gextras.InternObject(a)).DisplayName()
}

func (a desktopAppInfo) Executable() string {
	return WrapAppInfo(gextras.InternObject(a)).Executable()
}

func (a desktopAppInfo) Icon() Icon {
	return WrapAppInfo(gextras.InternObject(a)).Icon()
}

func (a desktopAppInfo) ID() string {
	return WrapAppInfo(gextras.InternObject(a)).ID()
}

func (a desktopAppInfo) Name() string {
	return WrapAppInfo(gextras.InternObject(a)).Name()
}

func (a desktopAppInfo) SupportedTypes() []string {
	return WrapAppInfo(gextras.InternObject(a)).SupportedTypes()
}

func (a desktopAppInfo) LaunchUrisFinish(result AsyncResult) error {
	return WrapAppInfo(gextras.InternObject(a)).LaunchUrisFinish(result)
}

func (a desktopAppInfo) RemoveSupportsType(contentType string) error {
	return WrapAppInfo(gextras.InternObject(a)).RemoveSupportsType(contentType)
}

func (a desktopAppInfo) SetAsDefaultForExtension(extension string) error {
	return WrapAppInfo(gextras.InternObject(a)).SetAsDefaultForExtension(extension)
}

func (a desktopAppInfo) SetAsDefaultForType(contentType string) error {
	return WrapAppInfo(gextras.InternObject(a)).SetAsDefaultForType(contentType)
}

func (a desktopAppInfo) SetAsLastUsedForType(contentType string) error {
	return WrapAppInfo(gextras.InternObject(a)).SetAsLastUsedForType(contentType)
}

func (a desktopAppInfo) ShouldShow() bool {
	return WrapAppInfo(gextras.InternObject(a)).ShouldShow()
}

func (a desktopAppInfo) SupportsFiles() bool {
	return WrapAppInfo(gextras.InternObject(a)).SupportsFiles()
}

func (a desktopAppInfo) SupportsUris() bool {
	return WrapAppInfo(gextras.InternObject(a)).SupportsUris()
}
