// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/box"
	"github.com/diamondburned/gotk4/internal/gextras"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gio-2.0 gio-unix-2.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <stdbool.h>
// #include <gio/gdesktopappinfo.h>
// #include <gio/gfiledescriptorbased.h>
// #include <gio/gio.h>
// #include <gio/gunixconnection.h>
// #include <gio/gunixcredentialsmessage.h>
// #include <gio/gunixfdlist.h>
// #include <gio/gunixfdmessage.h>
// #include <gio/gunixinputstream.h>
// #include <gio/gunixmounts.h>
// #include <gio/gunixoutputstream.h>
// #include <gio/gunixsocketaddress.h>
//
// extern void gotk4_DesktopAppLaunchCallback(GDesktopAppInfo* _0, GPid _1, gpointer _2);
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_desktop_app_info_lookup_get_type()), F: marshalDesktopAppInfoLookup},
		{T: externglib.Type(C.g_desktop_app_info_get_type()), F: marshalDesktopAppInfo},
	})
}

// DesktopAppLaunchCallback: during invocation,
// g_desktop_app_info_launch_uris_as_manager() may create one or more child
// processes. This callback is invoked once for each, providing the process ID.
type DesktopAppLaunchCallback func(appinfo DesktopAppInfo, pid glib.Pid)

//export gotk4_DesktopAppLaunchCallback
func gotk4_DesktopAppLaunchCallback(arg0 *C.GDesktopAppInfo, arg1 C.GPid, arg2 C.gpointer) {
	v := box.Get(uintptr(arg2))
	if v == nil {
		panic(`callback not found`)
	}

	var appinfo DesktopAppInfo
	var pid glib.Pid

	appinfo = gextras.CastObject(externglib.Take(unsafe.Pointer(arg0.Native()))).(DesktopAppInfo)

	{
		var tmp int
		tmp = int(arg1)
		pid = glib.Pid(tmp)
	}

	v.(DesktopAppLaunchCallback)(appinfo, pid)
}

// DesktopAppInfoLookupOverrider contains methods that are overridable. This
// interface is a subset of the interface DesktopAppInfoLookup.
type DesktopAppInfoLookupOverrider interface {
	// DefaultForURIScheme gets the default application for launching
	// applications using this URI scheme for a particular AppInfoLookup
	// implementation.
	//
	// The AppInfoLookup interface and this function is used to implement
	// g_app_info_get_default_for_uri_scheme() backends in a GIO module. There
	// is no reason for applications to use it directly. Applications should use
	// g_app_info_get_default_for_uri_scheme().
	DefaultForURIScheme(uriScheme string) AppInfo
}

// DesktopAppInfoLookup is an opaque data structure and can only be accessed
// using the following functions.
type DesktopAppInfoLookup interface {
	gextras.Objector
	DesktopAppInfoLookupOverrider
}

// desktopAppInfoLookup implements the DesktopAppInfoLookup interface.
type desktopAppInfoLookup struct {
	gextras.Objector
}

var _ DesktopAppInfoLookup = (*desktopAppInfoLookup)(nil)

// WrapDesktopAppInfoLookup wraps a GObject to a type that implements interface
// DesktopAppInfoLookup. It is primarily used internally.
func WrapDesktopAppInfoLookup(obj *externglib.Object) DesktopAppInfoLookup {
	return DesktopAppInfoLookup{
		Objector: obj,
	}
}

func marshalDesktopAppInfoLookup(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapDesktopAppInfoLookup(obj), nil
}

// DefaultForURIScheme gets the default application for launching
// applications using this URI scheme for a particular AppInfoLookup
// implementation.
//
// The AppInfoLookup interface and this function is used to implement
// g_app_info_get_default_for_uri_scheme() backends in a GIO module. There
// is no reason for applications to use it directly. Applications should use
// g_app_info_get_default_for_uri_scheme().
func (l desktopAppInfoLookup) DefaultForURIScheme(uriScheme string) AppInfo {
	var arg0 *C.GDesktopAppInfoLookup
	var arg1 *C.char

	arg0 = (*C.GDesktopAppInfoLookup)(l.Native())
	arg1 = (*C.gchar)(C.CString(uriScheme))
	defer C.free(unsafe.Pointer(arg1))

	ret := C.g_desktop_app_info_lookup_get_default_for_uri_scheme(arg0, arg1)

	var ret0 AppInfo

	ret0 = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(ret.Native()))).(AppInfo)

	return ret0
}

// DesktopAppInfo is an implementation of Info based on desktop files.
//
// Note that `<gio/gdesktopappinfo.h>` belongs to the UNIX-specific GIO
// interfaces, thus you have to use the `gio-unix-2.0.pc` pkg-config file when
// using it.
type DesktopAppInfo interface {
	gextras.Objector
	AppInfo

	// ActionName gets the user-visible display name of the "additional
	// application action" specified by @action_name.
	//
	// This corresponds to the "Name" key within the keyfile group for the
	// action.
	ActionName(actionName string) string
	// Boolean looks up a boolean value in the keyfile backing @info.
	//
	// The @key is looked up in the "Desktop Entry" group.
	Boolean(key string) bool
	// Categories gets the categories from the desktop file.
	Categories() string
	// Filename: when @info was created from a known filename, return it. In
	// some situations such as the AppInfo returned from
	// g_desktop_app_info_new_from_keyfile(), this function will return nil.
	Filename() string
	// GenericName gets the generic name from the desktop file.
	GenericName() string
	// IsHidden: a desktop file is hidden if the Hidden key in it is set to
	// True.
	IsHidden() bool
	// Keywords gets the keywords from the desktop file.
	Keywords() []string
	// LocaleString looks up a localized string value in the keyfile backing
	// @info translated to the current locale.
	//
	// The @key is looked up in the "Desktop Entry" group.
	LocaleString(key string) string
	// Nodisplay gets the value of the NoDisplay key, which helps determine if
	// the application info should be shown in menus. See
	// KEY_FILE_DESKTOP_KEY_NO_DISPLAY and g_app_info_should_show().
	Nodisplay() bool
	// ShowIn checks if the application info should be shown in menus that list
	// available applications for a specific name of the desktop, based on the
	// `OnlyShowIn` and `NotShowIn` keys.
	//
	// @desktop_env should typically be given as nil, in which case the
	// `XDG_CURRENT_DESKTOP` environment variable is consulted. If you want to
	// override the default mechanism then you may specify @desktop_env, but
	// this is not recommended.
	//
	// Note that g_app_info_should_show() for @info will include this check
	// (with nil for @desktop_env) as well as additional checks.
	ShowIn(desktopEnv string) bool
	// StartupWmClass retrieves the StartupWMClass field from @info. This
	// represents the WM_CLASS property of the main window of the application,
	// if launched through @info.
	StartupWmClass() string
	// String looks up a string value in the keyfile backing @info.
	//
	// The @key is looked up in the "Desktop Entry" group.
	String(key string) string
	// StringList looks up a string list value in the keyfile backing @info.
	//
	// The @key is looked up in the "Desktop Entry" group.
	StringList(key string) (length uint, utf8s []string)
	// HasKey returns whether @key exists in the "Desktop Entry" group of the
	// keyfile backing @info.
	HasKey(key string) bool
	// LaunchAction activates the named application action.
	//
	// You may only call this function on action names that were returned from
	// g_desktop_app_info_list_actions().
	//
	// Note that if the main entry of the desktop file indicates that the
	// application supports startup notification, and @launch_context is
	// non-nil, then startup notification will be used when activating the
	// action (and as such, invocation of the action on the receiving side must
	// signal the end of startup notification when it is completed). This is the
	// expected behaviour of applications declaring additional actions, as per
	// the desktop file specification.
	//
	// As with g_app_info_launch() there is no way to detect failures that occur
	// while using this function.
	LaunchAction(actionName string, launchContext AppLaunchContext)
	// LaunchUrisAsManager: this function performs the equivalent of
	// g_app_info_launch_uris(), but is intended primarily for operating system
	// components that launch applications. Ordinary applications should use
	// g_app_info_launch_uris().
	//
	// If the application is launched via GSpawn, then @spawn_flags, @user_setup
	// and @user_setup_data are used for the call to g_spawn_async().
	// Additionally, @pid_callback (with @pid_callback_data) will be called to
	// inform about the PID of the created process. See
	// g_spawn_async_with_pipes() for information on certain parameter
	// conditions that can enable an optimized posix_spawn() codepath to be
	// used.
	//
	// If application launching occurs via some other mechanism (eg: D-Bus
	// activation) then @spawn_flags, @user_setup, @user_setup_data,
	// @pid_callback and @pid_callback_data are ignored.
	LaunchUrisAsManager(uris *glib.List, launchContext AppLaunchContext, spawnFlags glib.SpawnFlags, userSetup glib.SpawnChildSetupFunc, pidCallback DesktopAppLaunchCallback) error
	// LaunchUrisAsManagerWithFds: equivalent to
	// g_desktop_app_info_launch_uris_as_manager() but allows you to pass in
	// file descriptors for the stdin, stdout and stderr streams of the launched
	// process.
	//
	// If application launching occurs via some non-spawn mechanism (e.g. D-Bus
	// activation) then @stdin_fd, @stdout_fd and @stderr_fd are ignored.
	LaunchUrisAsManagerWithFds(uris *glib.List, launchContext AppLaunchContext, spawnFlags glib.SpawnFlags, userSetup glib.SpawnChildSetupFunc, pidCallback DesktopAppLaunchCallback, stdinFd int, stdoutFd int, stderrFd int) error
	// ListActions returns the list of "additional application actions"
	// supported on the desktop file, as per the desktop file specification.
	//
	// As per the specification, this is the list of actions that are explicitly
	// listed in the "Actions" key of the [Desktop Entry] group.
	ListActions() []string
}

// desktopAppInfo implements the DesktopAppInfo interface.
type desktopAppInfo struct {
	gextras.Objector
	AppInfo
}

var _ DesktopAppInfo = (*desktopAppInfo)(nil)

// WrapDesktopAppInfo wraps a GObject to the right type. It is
// primarily used internally.
func WrapDesktopAppInfo(obj *externglib.Object) DesktopAppInfo {
	return DesktopAppInfo{
		Objector: obj,
		AppInfo:  WrapAppInfo(obj),
	}
}

func marshalDesktopAppInfo(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapDesktopAppInfo(obj), nil
}

// NewDesktopAppInfo constructs a class DesktopAppInfo.
func NewDesktopAppInfo(desktopID string) DesktopAppInfo {
	var arg1 *C.char

	arg1 = (*C.gchar)(C.CString(desktopID))
	defer C.free(unsafe.Pointer(arg1))

	ret := C.g_desktop_app_info_new(arg1)

	var ret0 DesktopAppInfo

	ret0 = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(ret.Native()))).(DesktopAppInfo)

	return ret0
}

// NewDesktopAppInfoFromFilename constructs a class DesktopAppInfo.
func NewDesktopAppInfoFromFilename(filename string) DesktopAppInfo {
	var arg1 *C.char

	arg1 = (*C.gchar)(C.CString(filename))
	defer C.free(unsafe.Pointer(arg1))

	ret := C.g_desktop_app_info_new_from_filename(arg1)

	var ret0 DesktopAppInfo

	ret0 = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(ret.Native()))).(DesktopAppInfo)

	return ret0
}

// NewDesktopAppInfoFromKeyfile constructs a class DesktopAppInfo.
func NewDesktopAppInfoFromKeyfile(keyFile *glib.KeyFile) DesktopAppInfo {
	var arg1 *C.GKeyFile

	arg1 = (*C.GKeyFile)(keyFile.Native())

	ret := C.g_desktop_app_info_new_from_keyfile(arg1)

	var ret0 DesktopAppInfo

	ret0 = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(ret.Native()))).(DesktopAppInfo)

	return ret0
}

// ActionName gets the user-visible display name of the "additional
// application action" specified by @action_name.
//
// This corresponds to the "Name" key within the keyfile group for the
// action.
func (i desktopAppInfo) ActionName(actionName string) string {
	var arg0 *C.GDesktopAppInfo
	var arg1 *C.gchar

	arg0 = (*C.GDesktopAppInfo)(i.Native())
	arg1 = (*C.gchar)(C.CString(actionName))
	defer C.free(unsafe.Pointer(arg1))

	ret := C.g_desktop_app_info_get_action_name(arg0, arg1)

	var ret0 string

	ret0 = C.GoString(ret)
	C.free(unsafe.Pointer(ret))

	return ret0
}

// Boolean looks up a boolean value in the keyfile backing @info.
//
// The @key is looked up in the "Desktop Entry" group.
func (i desktopAppInfo) Boolean(key string) bool {
	var arg0 *C.GDesktopAppInfo
	var arg1 *C.char

	arg0 = (*C.GDesktopAppInfo)(i.Native())
	arg1 = (*C.gchar)(C.CString(key))
	defer C.free(unsafe.Pointer(arg1))

	ret := C.g_desktop_app_info_get_boolean(arg0, arg1)

	var ret0 bool

	ret0 = C.bool(ret) != 0

	return ret0
}

// Categories gets the categories from the desktop file.
func (i desktopAppInfo) Categories() string {
	var arg0 *C.GDesktopAppInfo

	arg0 = (*C.GDesktopAppInfo)(i.Native())

	ret := C.g_desktop_app_info_get_categories(arg0)

	var ret0 string

	ret0 = C.GoString(ret)

	return ret0
}

// Filename: when @info was created from a known filename, return it. In
// some situations such as the AppInfo returned from
// g_desktop_app_info_new_from_keyfile(), this function will return nil.
func (i desktopAppInfo) Filename() string {
	var arg0 *C.GDesktopAppInfo

	arg0 = (*C.GDesktopAppInfo)(i.Native())

	ret := C.g_desktop_app_info_get_filename(arg0)

	var ret0 string

	ret0 = C.GoString(ret)

	return ret0
}

// GenericName gets the generic name from the desktop file.
func (i desktopAppInfo) GenericName() string {
	var arg0 *C.GDesktopAppInfo

	arg0 = (*C.GDesktopAppInfo)(i.Native())

	ret := C.g_desktop_app_info_get_generic_name(arg0)

	var ret0 string

	ret0 = C.GoString(ret)

	return ret0
}

// IsHidden: a desktop file is hidden if the Hidden key in it is set to
// True.
func (i desktopAppInfo) IsHidden() bool {
	var arg0 *C.GDesktopAppInfo

	arg0 = (*C.GDesktopAppInfo)(i.Native())

	ret := C.g_desktop_app_info_get_is_hidden(arg0)

	var ret0 bool

	ret0 = C.bool(ret) != 0

	return ret0
}

// Keywords gets the keywords from the desktop file.
func (i desktopAppInfo) Keywords() []string {
	var arg0 *C.GDesktopAppInfo

	arg0 = (*C.GDesktopAppInfo)(i.Native())

	ret := C.g_desktop_app_info_get_keywords(arg0)

	var ret0 []string

	{
		var length uint
		for p := unsafe.Pointer(ret); *p != 0; p = unsafe.Pointer(uintptr(p) + 1) {
			length++
		}

		ret0 = make([]string, length)
		for i := 0; i < length; i++ {
			src := (*C.gchar)(unsafe.Pointer(uintptr(unsafe.Pointer(ret)) + i))
			ret0[i] = C.GoString(src)
		}
	}

	return ret0
}

// LocaleString looks up a localized string value in the keyfile backing
// @info translated to the current locale.
//
// The @key is looked up in the "Desktop Entry" group.
func (i desktopAppInfo) LocaleString(key string) string {
	var arg0 *C.GDesktopAppInfo
	var arg1 *C.char

	arg0 = (*C.GDesktopAppInfo)(i.Native())
	arg1 = (*C.gchar)(C.CString(key))
	defer C.free(unsafe.Pointer(arg1))

	ret := C.g_desktop_app_info_get_locale_string(arg0, arg1)

	var ret0 string

	ret0 = C.GoString(ret)
	C.free(unsafe.Pointer(ret))

	return ret0
}

// Nodisplay gets the value of the NoDisplay key, which helps determine if
// the application info should be shown in menus. See
// KEY_FILE_DESKTOP_KEY_NO_DISPLAY and g_app_info_should_show().
func (i desktopAppInfo) Nodisplay() bool {
	var arg0 *C.GDesktopAppInfo

	arg0 = (*C.GDesktopAppInfo)(i.Native())

	ret := C.g_desktop_app_info_get_nodisplay(arg0)

	var ret0 bool

	ret0 = C.bool(ret) != 0

	return ret0
}

// ShowIn checks if the application info should be shown in menus that list
// available applications for a specific name of the desktop, based on the
// `OnlyShowIn` and `NotShowIn` keys.
//
// @desktop_env should typically be given as nil, in which case the
// `XDG_CURRENT_DESKTOP` environment variable is consulted. If you want to
// override the default mechanism then you may specify @desktop_env, but
// this is not recommended.
//
// Note that g_app_info_should_show() for @info will include this check
// (with nil for @desktop_env) as well as additional checks.
func (i desktopAppInfo) ShowIn(desktopEnv string) bool {
	var arg0 *C.GDesktopAppInfo
	var arg1 *C.gchar

	arg0 = (*C.GDesktopAppInfo)(i.Native())
	arg1 = (*C.gchar)(C.CString(desktopEnv))
	defer C.free(unsafe.Pointer(arg1))

	ret := C.g_desktop_app_info_get_show_in(arg0, arg1)

	var ret0 bool

	ret0 = C.bool(ret) != 0

	return ret0
}

// StartupWmClass retrieves the StartupWMClass field from @info. This
// represents the WM_CLASS property of the main window of the application,
// if launched through @info.
func (i desktopAppInfo) StartupWmClass() string {
	var arg0 *C.GDesktopAppInfo

	arg0 = (*C.GDesktopAppInfo)(i.Native())

	ret := C.g_desktop_app_info_get_startup_wm_class(arg0)

	var ret0 string

	ret0 = C.GoString(ret)

	return ret0
}

// String looks up a string value in the keyfile backing @info.
//
// The @key is looked up in the "Desktop Entry" group.
func (i desktopAppInfo) String(key string) string {
	var arg0 *C.GDesktopAppInfo
	var arg1 *C.char

	arg0 = (*C.GDesktopAppInfo)(i.Native())
	arg1 = (*C.gchar)(C.CString(key))
	defer C.free(unsafe.Pointer(arg1))

	ret := C.g_desktop_app_info_get_string(arg0, arg1)

	var ret0 string

	ret0 = C.GoString(ret)
	C.free(unsafe.Pointer(ret))

	return ret0
}

// StringList looks up a string list value in the keyfile backing @info.
//
// The @key is looked up in the "Desktop Entry" group.
func (i desktopAppInfo) StringList(key string) (length uint, utf8s []string) {
	var arg0 *C.GDesktopAppInfo
	var arg1 *C.char
	var arg2 *C.gsize // out

	arg0 = (*C.GDesktopAppInfo)(i.Native())
	arg1 = (*C.gchar)(C.CString(key))
	defer C.free(unsafe.Pointer(arg1))

	ret := C.g_desktop_app_info_get_string_list(arg0, arg1, &arg2)

	var ret0 uint
	var ret1 []string

	ret0 = uint(arg2)

	{
		ret1 = make([]string, arg2)
		for i := 0; i < uintptr(arg2); i++ {
			src := (*C.gchar)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + i))
			ret1[i] = C.GoString(src)
			C.free(unsafe.Pointer(src))
		}
	}

	return ret0, ret1
}

// HasKey returns whether @key exists in the "Desktop Entry" group of the
// keyfile backing @info.
func (i desktopAppInfo) HasKey(key string) bool {
	var arg0 *C.GDesktopAppInfo
	var arg1 *C.char

	arg0 = (*C.GDesktopAppInfo)(i.Native())
	arg1 = (*C.gchar)(C.CString(key))
	defer C.free(unsafe.Pointer(arg1))

	ret := C.g_desktop_app_info_has_key(arg0, arg1)

	var ret0 bool

	ret0 = C.bool(ret) != 0

	return ret0
}

// LaunchAction activates the named application action.
//
// You may only call this function on action names that were returned from
// g_desktop_app_info_list_actions().
//
// Note that if the main entry of the desktop file indicates that the
// application supports startup notification, and @launch_context is
// non-nil, then startup notification will be used when activating the
// action (and as such, invocation of the action on the receiving side must
// signal the end of startup notification when it is completed). This is the
// expected behaviour of applications declaring additional actions, as per
// the desktop file specification.
//
// As with g_app_info_launch() there is no way to detect failures that occur
// while using this function.
func (i desktopAppInfo) LaunchAction(actionName string, launchContext AppLaunchContext) {
	var arg0 *C.GDesktopAppInfo
	var arg1 *C.gchar
	var arg2 *C.GAppLaunchContext

	arg0 = (*C.GDesktopAppInfo)(i.Native())
	arg1 = (*C.gchar)(C.CString(actionName))
	defer C.free(unsafe.Pointer(arg1))
	arg2 = (*C.GAppLaunchContext)(launchContext.Native())

	C.g_desktop_app_info_launch_action(arg0, arg1, arg2)
}

// LaunchUrisAsManager: this function performs the equivalent of
// g_app_info_launch_uris(), but is intended primarily for operating system
// components that launch applications. Ordinary applications should use
// g_app_info_launch_uris().
//
// If the application is launched via GSpawn, then @spawn_flags, @user_setup
// and @user_setup_data are used for the call to g_spawn_async().
// Additionally, @pid_callback (with @pid_callback_data) will be called to
// inform about the PID of the created process. See
// g_spawn_async_with_pipes() for information on certain parameter
// conditions that can enable an optimized posix_spawn() codepath to be
// used.
//
// If application launching occurs via some other mechanism (eg: D-Bus
// activation) then @spawn_flags, @user_setup, @user_setup_data,
// @pid_callback and @pid_callback_data are ignored.
func (a desktopAppInfo) LaunchUrisAsManager(uris *glib.List, launchContext AppLaunchContext, spawnFlags glib.SpawnFlags, userSetup glib.SpawnChildSetupFunc, pidCallback DesktopAppLaunchCallback) error {
	var arg0 *C.GDesktopAppInfo
	var arg1 *C.GList
	var arg2 *C.GAppLaunchContext
	var arg3 C.GSpawnFlags
	var arg4 C.GSpawnChildSetupFunc
	var arg5 C.gpointer
	var arg6 C.GDesktopAppLaunchCallback
	var arg7 C.gpointer
	var gError *C.GError

	arg0 = (*C.GDesktopAppInfo)(a.Native())
	arg1 = (*C.GList)(uris.Native())
	arg2 = (*C.GAppLaunchContext)(launchContext.Native())
	arg3 = (C.GSpawnFlags)(spawnFlags)

	ret := C.g_desktop_app_info_launch_uris_as_manager(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, &gError)

	var goError error

	if gError != nil {
		goError = fmt.Errorf("%d: %s", gError.code, C.GoString(gError.message))
		C.g_error_free(gError)
	}

	return goError
}

// LaunchUrisAsManagerWithFds: equivalent to
// g_desktop_app_info_launch_uris_as_manager() but allows you to pass in
// file descriptors for the stdin, stdout and stderr streams of the launched
// process.
//
// If application launching occurs via some non-spawn mechanism (e.g. D-Bus
// activation) then @stdin_fd, @stdout_fd and @stderr_fd are ignored.
func (a desktopAppInfo) LaunchUrisAsManagerWithFds(uris *glib.List, launchContext AppLaunchContext, spawnFlags glib.SpawnFlags, userSetup glib.SpawnChildSetupFunc, pidCallback DesktopAppLaunchCallback, stdinFd int, stdoutFd int, stderrFd int) error {
	var arg0 *C.GDesktopAppInfo
	var arg1 *C.GList
	var arg2 *C.GAppLaunchContext
	var arg3 C.GSpawnFlags
	var arg4 C.GSpawnChildSetupFunc
	var arg5 C.gpointer
	var arg6 C.GDesktopAppLaunchCallback
	var arg7 C.gpointer
	var arg8 C.gint
	var arg9 C.gint
	var arg10 C.gint
	var gError *C.GError

	arg0 = (*C.GDesktopAppInfo)(a.Native())
	arg1 = (*C.GList)(uris.Native())
	arg2 = (*C.GAppLaunchContext)(launchContext.Native())
	arg3 = (C.GSpawnFlags)(spawnFlags)
	arg8 = C.gint(stdinFd)
	arg9 = C.gint(stdoutFd)
	arg10 = C.gint(stderrFd)

	ret := C.g_desktop_app_info_launch_uris_as_manager_with_fds(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, &gError)

	var goError error

	if gError != nil {
		goError = fmt.Errorf("%d: %s", gError.code, C.GoString(gError.message))
		C.g_error_free(gError)
	}

	return goError
}

// ListActions returns the list of "additional application actions"
// supported on the desktop file, as per the desktop file specification.
//
// As per the specification, this is the list of actions that are explicitly
// listed in the "Actions" key of the [Desktop Entry] group.
func (i desktopAppInfo) ListActions() []string {
	var arg0 *C.GDesktopAppInfo

	arg0 = (*C.GDesktopAppInfo)(i.Native())

	ret := C.g_desktop_app_info_list_actions(arg0)

	var ret0 []string

	{
		var length uint
		for p := unsafe.Pointer(ret); *p != 0; p = unsafe.Pointer(uintptr(p) + 1) {
			length++
		}

		ret0 = make([]string, length)
		for i := 0; i < length; i++ {
			src := (*C.gchar)(unsafe.Pointer(uintptr(unsafe.Pointer(ret)) + i))
			ret0[i] = C.GoString(src)
		}
	}

	return ret0
}
