// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gio-2.0 gio-unix-2.0 glib-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <gio/gdesktopappinfo.h>
// #include <gio/gfiledescriptorbased.h>
// #include <gio/gio.h>
// #include <gio/gunixconnection.h>
// #include <gio/gunixcredentialsmessage.h>
// #include <gio/gunixfdlist.h>
// #include <gio/gunixfdmessage.h>
// #include <gio/gunixinputstream.h>
// #include <gio/gunixmounts.h>
// #include <gio/gunixoutputstream.h>
// #include <gio/gunixsocketaddress.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_dbus_interface_skeleton_get_type()), F: marshalDBusInterfaceSkeleton},
	})
}

// DBusInterfaceSkeleton: abstract base class for D-Bus interfaces on the
// service side.
type DBusInterfaceSkeleton interface {
	gextras.Objector
	DBusInterface

	// Flush: if @interface_ has outstanding changes, request for these changes
	// to be emitted immediately.
	//
	// For example, an exported D-Bus interface may queue up property changes
	// and emit the `org.freedesktop.DBus.Properties.PropertiesChanged` signal
	// later (e.g. in an idle handler). This technique is useful for collapsing
	// multiple property changes into one.
	Flush()
	// ObjectPath gets the object path that @interface_ is exported on, if any.
	ObjectPath() string
	// HasConnection checks if @interface_ is exported on @connection.
	HasConnection(connection DBusConnection) bool
	// SetFlags sets flags describing what the behavior of @skeleton should be.
	SetFlags(flags DBusInterfaceSkeletonFlags)
	// Unexport stops exporting @interface_ on all connections it is exported
	// on.
	//
	// To unexport @interface_ from only a single connection, use
	// g_dbus_interface_skeleton_unexport_from_connection()
	Unexport()
	// UnexportFromConnection stops exporting @interface_ on @connection.
	//
	// To stop exporting on all connections the interface is exported on, use
	// g_dbus_interface_skeleton_unexport().
	UnexportFromConnection(connection DBusConnection)
}

// dBusInterfaceSkeleton implements the DBusInterfaceSkeleton class.
type dBusInterfaceSkeleton struct {
	gextras.Objector
	DBusInterface
}

var _ DBusInterfaceSkeleton = (*dBusInterfaceSkeleton)(nil)

// WrapDBusInterfaceSkeleton wraps a GObject to the right type. It is
// primarily used internally.
func WrapDBusInterfaceSkeleton(obj *externglib.Object) DBusInterfaceSkeleton {
	return dBusInterfaceSkeleton{
		Objector:      obj,
		DBusInterface: WrapDBusInterface(obj),
	}
}

func marshalDBusInterfaceSkeleton(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapDBusInterfaceSkeleton(obj), nil
}

// Flush: if @interface_ has outstanding changes, request for these changes
// to be emitted immediately.
//
// For example, an exported D-Bus interface may queue up property changes
// and emit the `org.freedesktop.DBus.Properties.PropertiesChanged` signal
// later (e.g. in an idle handler). This technique is useful for collapsing
// multiple property changes into one.
func (i dBusInterfaceSkeleton) Flush() {
	var _arg0 *C.GDBusInterfaceSkeleton // out

	_arg0 = (*C.GDBusInterfaceSkeleton)(unsafe.Pointer(i.Native()))

	C.g_dbus_interface_skeleton_flush(_arg0)
}

// ObjectPath gets the object path that @interface_ is exported on, if any.
func (i dBusInterfaceSkeleton) ObjectPath() string {
	var _arg0 *C.GDBusInterfaceSkeleton // out

	_arg0 = (*C.GDBusInterfaceSkeleton)(unsafe.Pointer(i.Native()))

	var _cret *C.gchar // in

	_cret = C.g_dbus_interface_skeleton_get_object_path(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

// HasConnection checks if @interface_ is exported on @connection.
func (i dBusInterfaceSkeleton) HasConnection(connection DBusConnection) bool {
	var _arg0 *C.GDBusInterfaceSkeleton // out
	var _arg1 *C.GDBusConnection        // out

	_arg0 = (*C.GDBusInterfaceSkeleton)(unsafe.Pointer(i.Native()))
	_arg1 = (*C.GDBusConnection)(unsafe.Pointer(connection.Native()))

	var _cret C.gboolean // in

	_cret = C.g_dbus_interface_skeleton_has_connection(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetFlags sets flags describing what the behavior of @skeleton should be.
func (i dBusInterfaceSkeleton) SetFlags(flags DBusInterfaceSkeletonFlags) {
	var _arg0 *C.GDBusInterfaceSkeleton     // out
	var _arg1 C.GDBusInterfaceSkeletonFlags // out

	_arg0 = (*C.GDBusInterfaceSkeleton)(unsafe.Pointer(i.Native()))
	_arg1 = (C.GDBusInterfaceSkeletonFlags)(flags)

	C.g_dbus_interface_skeleton_set_flags(_arg0, _arg1)
}

// Unexport stops exporting @interface_ on all connections it is exported
// on.
//
// To unexport @interface_ from only a single connection, use
// g_dbus_interface_skeleton_unexport_from_connection()
func (i dBusInterfaceSkeleton) Unexport() {
	var _arg0 *C.GDBusInterfaceSkeleton // out

	_arg0 = (*C.GDBusInterfaceSkeleton)(unsafe.Pointer(i.Native()))

	C.g_dbus_interface_skeleton_unexport(_arg0)
}

// UnexportFromConnection stops exporting @interface_ on @connection.
//
// To stop exporting on all connections the interface is exported on, use
// g_dbus_interface_skeleton_unexport().
func (i dBusInterfaceSkeleton) UnexportFromConnection(connection DBusConnection) {
	var _arg0 *C.GDBusInterfaceSkeleton // out
	var _arg1 *C.GDBusConnection        // out

	_arg0 = (*C.GDBusInterfaceSkeleton)(unsafe.Pointer(i.Native()))
	_arg1 = (*C.GDBusConnection)(unsafe.Pointer(connection.Native()))

	C.g_dbus_interface_skeleton_unexport_from_connection(_arg0, _arg1)
}
