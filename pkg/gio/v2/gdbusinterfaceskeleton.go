// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gerror"
	"github.com/diamondburned/gotk4/internal/gextras"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gio-2.0 gio-unix-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gio/gdesktopappinfo.h>
// #include <gio/gfiledescriptorbased.h>
// #include <gio/gio.h>
// #include <gio/gunixconnection.h>
// #include <gio/gunixcredentialsmessage.h>
// #include <gio/gunixfdlist.h>
// #include <gio/gunixfdmessage.h>
// #include <gio/gunixinputstream.h>
// #include <gio/gunixmounts.h>
// #include <gio/gunixoutputstream.h>
// #include <gio/gunixsocketaddress.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_dbus_interface_skeleton_get_type()), F: marshalDBusInterfaceSkeleton},
	})
}

// DBusInterfaceSkeleton: abstract base class for D-Bus interfaces on the
// service side.
type DBusInterfaceSkeleton interface {
	gextras.Objector
	DBusInterface

	// Export exports @interface_ at @object_path on @connection.
	//
	// This can be called multiple times to export the same @interface_ onto
	// multiple connections however the @object_path provided must be the same
	// for all connections.
	//
	// Use g_dbus_interface_skeleton_unexport() to unexport the object.
	Export(connection DBusConnection, objectPath string) error
	// Flush: if @interface_ has outstanding changes, request for these changes
	// to be emitted immediately.
	//
	// For example, an exported D-Bus interface may queue up property changes
	// and emit the `org.freedesktop.DBus.Properties.PropertiesChanged` signal
	// later (e.g. in an idle handler). This technique is useful for collapsing
	// multiple property changes into one.
	Flush()
	// Connection gets the first connection that @interface_ is exported on, if
	// any.
	Connection() DBusConnection
	// Connections gets a list of the connections that @interface_ is exported
	// on.
	Connections() *glib.List
	// Flags gets the BusInterfaceSkeletonFlags that describes what the behavior
	// of @interface_
	Flags() DBusInterfaceSkeletonFlags
	// Info gets D-Bus introspection information for the D-Bus interface
	// implemented by @interface_.
	Info() *DBusInterfaceInfo
	// ObjectPath gets the object path that @interface_ is exported on, if any.
	ObjectPath() string
	// Properties gets all D-Bus properties for @interface_.
	Properties() *glib.Variant
	// Vtable gets the interface vtable for the D-Bus interface implemented by
	// @interface_. The returned function pointers should expect @interface_
	// itself to be passed as @user_data.
	Vtable() *DBusInterfaceVTable
	// HasConnection checks if @interface_ is exported on @connection.
	HasConnection(connection DBusConnection) bool
	// SetFlags sets flags describing what the behavior of @skeleton should be.
	SetFlags(flags DBusInterfaceSkeletonFlags)
	// Unexport stops exporting @interface_ on all connections it is exported
	// on.
	//
	// To unexport @interface_ from only a single connection, use
	// g_dbus_interface_skeleton_unexport_from_connection()
	Unexport()
	// UnexportFromConnection stops exporting @interface_ on @connection.
	//
	// To stop exporting on all connections the interface is exported on, use
	// g_dbus_interface_skeleton_unexport().
	UnexportFromConnection(connection DBusConnection)
}

// dBusInterfaceSkeleton implements the DBusInterfaceSkeleton interface.
type dBusInterfaceSkeleton struct {
	gextras.Objector
	DBusInterface
}

var _ DBusInterfaceSkeleton = (*dBusInterfaceSkeleton)(nil)

// WrapDBusInterfaceSkeleton wraps a GObject to the right type. It is
// primarily used internally.
func WrapDBusInterfaceSkeleton(obj *externglib.Object) DBusInterfaceSkeleton {
	return DBusInterfaceSkeleton{
		Objector:      obj,
		DBusInterface: WrapDBusInterface(obj),
	}
}

func marshalDBusInterfaceSkeleton(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapDBusInterfaceSkeleton(obj), nil
}

// Export exports @interface_ at @object_path on @connection.
//
// This can be called multiple times to export the same @interface_ onto
// multiple connections however the @object_path provided must be the same
// for all connections.
//
// Use g_dbus_interface_skeleton_unexport() to unexport the object.
func (i dBusInterfaceSkeleton) Export(connection DBusConnection, objectPath string) error {
	var arg0 *C.GDBusInterfaceSkeleton
	var arg1 *C.GDBusConnection
	var arg2 *C.gchar

	arg0 = (*C.GDBusInterfaceSkeleton)(unsafe.Pointer(i.Native()))
	arg1 = (*C.GDBusConnection)(unsafe.Pointer(connection.Native()))
	arg2 = (*C.gchar)(C.CString(objectPath))
	defer C.free(unsafe.Pointer(arg2))

	var cerr *C.GError
	var goerr error

	C.g_dbus_interface_skeleton_export(arg0, arg1, arg2, &cerr)

	goerr = gerror.Take(unsafe.Pointer(cerr))

	return goerr
}

// Flush: if @interface_ has outstanding changes, request for these changes
// to be emitted immediately.
//
// For example, an exported D-Bus interface may queue up property changes
// and emit the `org.freedesktop.DBus.Properties.PropertiesChanged` signal
// later (e.g. in an idle handler). This technique is useful for collapsing
// multiple property changes into one.
func (i dBusInterfaceSkeleton) Flush() {
	var arg0 *C.GDBusInterfaceSkeleton

	arg0 = (*C.GDBusInterfaceSkeleton)(unsafe.Pointer(i.Native()))

	C.g_dbus_interface_skeleton_flush(arg0)
}

// Connection gets the first connection that @interface_ is exported on, if
// any.
func (i dBusInterfaceSkeleton) Connection() DBusConnection {
	var arg0 *C.GDBusInterfaceSkeleton

	arg0 = (*C.GDBusInterfaceSkeleton)(unsafe.Pointer(i.Native()))

	var cret *C.GDBusConnection
	var goret DBusConnection

	cret = C.g_dbus_interface_skeleton_get_connection(arg0)

	goret = gextras.CastObject(externglib.Take(unsafe.Pointer(cret.Native()))).(DBusConnection)

	return goret
}

// Connections gets a list of the connections that @interface_ is exported
// on.
func (i dBusInterfaceSkeleton) Connections() *glib.List {
	var arg0 *C.GDBusInterfaceSkeleton

	arg0 = (*C.GDBusInterfaceSkeleton)(unsafe.Pointer(i.Native()))

	cret := new(C.GList)
	var goret *glib.List

	cret = C.g_dbus_interface_skeleton_get_connections(arg0)

	goret = glib.WrapList(unsafe.Pointer(cret))
	runtime.SetFinalizer(goret, func(v *glib.List) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return goret
}

// Flags gets the BusInterfaceSkeletonFlags that describes what the behavior
// of @interface_
func (i dBusInterfaceSkeleton) Flags() DBusInterfaceSkeletonFlags {
	var arg0 *C.GDBusInterfaceSkeleton

	arg0 = (*C.GDBusInterfaceSkeleton)(unsafe.Pointer(i.Native()))

	var cret C.GDBusInterfaceSkeletonFlags
	var goret DBusInterfaceSkeletonFlags

	cret = C.g_dbus_interface_skeleton_get_flags(arg0)

	goret = DBusInterfaceSkeletonFlags(cret)

	return goret
}

// Info gets D-Bus introspection information for the D-Bus interface
// implemented by @interface_.
func (i dBusInterfaceSkeleton) Info() *DBusInterfaceInfo {
	var arg0 *C.GDBusInterfaceSkeleton

	arg0 = (*C.GDBusInterfaceSkeleton)(unsafe.Pointer(i.Native()))

	var cret *C.GDBusInterfaceInfo
	var goret *DBusInterfaceInfo

	cret = C.g_dbus_interface_skeleton_get_info(arg0)

	goret = WrapDBusInterfaceInfo(unsafe.Pointer(cret))

	return goret
}

// ObjectPath gets the object path that @interface_ is exported on, if any.
func (i dBusInterfaceSkeleton) ObjectPath() string {
	var arg0 *C.GDBusInterfaceSkeleton

	arg0 = (*C.GDBusInterfaceSkeleton)(unsafe.Pointer(i.Native()))

	var cret *C.gchar
	var goret string

	cret = C.g_dbus_interface_skeleton_get_object_path(arg0)

	goret = C.GoString(cret)

	return goret
}

// Properties gets all D-Bus properties for @interface_.
func (i dBusInterfaceSkeleton) Properties() *glib.Variant {
	var arg0 *C.GDBusInterfaceSkeleton

	arg0 = (*C.GDBusInterfaceSkeleton)(unsafe.Pointer(i.Native()))

	cret := new(C.GVariant)
	var goret *glib.Variant

	cret = C.g_dbus_interface_skeleton_get_properties(arg0)

	goret = glib.WrapVariant(unsafe.Pointer(cret))
	runtime.SetFinalizer(goret, func(v *glib.Variant) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return goret
}

// Vtable gets the interface vtable for the D-Bus interface implemented by
// @interface_. The returned function pointers should expect @interface_
// itself to be passed as @user_data.
func (i dBusInterfaceSkeleton) Vtable() *DBusInterfaceVTable {
	var arg0 *C.GDBusInterfaceSkeleton

	arg0 = (*C.GDBusInterfaceSkeleton)(unsafe.Pointer(i.Native()))

	var cret *C.GDBusInterfaceVTable
	var goret *DBusInterfaceVTable

	cret = C.g_dbus_interface_skeleton_get_vtable(arg0)

	goret = WrapDBusInterfaceVTable(unsafe.Pointer(cret))

	return goret
}

// HasConnection checks if @interface_ is exported on @connection.
func (i dBusInterfaceSkeleton) HasConnection(connection DBusConnection) bool {
	var arg0 *C.GDBusInterfaceSkeleton
	var arg1 *C.GDBusConnection

	arg0 = (*C.GDBusInterfaceSkeleton)(unsafe.Pointer(i.Native()))
	arg1 = (*C.GDBusConnection)(unsafe.Pointer(connection.Native()))

	var cret C.gboolean
	var goret bool

	cret = C.g_dbus_interface_skeleton_has_connection(arg0, arg1)

	if cret {
		goret = true
	}

	return goret
}

// SetFlags sets flags describing what the behavior of @skeleton should be.
func (i dBusInterfaceSkeleton) SetFlags(flags DBusInterfaceSkeletonFlags) {
	var arg0 *C.GDBusInterfaceSkeleton
	var arg1 C.GDBusInterfaceSkeletonFlags

	arg0 = (*C.GDBusInterfaceSkeleton)(unsafe.Pointer(i.Native()))
	arg1 = (C.GDBusInterfaceSkeletonFlags)(flags)

	C.g_dbus_interface_skeleton_set_flags(arg0, arg1)
}

// Unexport stops exporting @interface_ on all connections it is exported
// on.
//
// To unexport @interface_ from only a single connection, use
// g_dbus_interface_skeleton_unexport_from_connection()
func (i dBusInterfaceSkeleton) Unexport() {
	var arg0 *C.GDBusInterfaceSkeleton

	arg0 = (*C.GDBusInterfaceSkeleton)(unsafe.Pointer(i.Native()))

	C.g_dbus_interface_skeleton_unexport(arg0)
}

// UnexportFromConnection stops exporting @interface_ on @connection.
//
// To stop exporting on all connections the interface is exported on, use
// g_dbus_interface_skeleton_unexport().
func (i dBusInterfaceSkeleton) UnexportFromConnection(connection DBusConnection) {
	var arg0 *C.GDBusInterfaceSkeleton
	var arg1 *C.GDBusConnection

	arg0 = (*C.GDBusInterfaceSkeleton)(unsafe.Pointer(i.Native()))
	arg1 = (*C.GDBusConnection)(unsafe.Pointer(connection.Native()))

	C.g_dbus_interface_skeleton_unexport_from_connection(arg0, arg1)
}
