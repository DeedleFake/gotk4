// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gio-2.0 gio-unix-2.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gio/gdesktopappinfo.h>
// #include <gio/gfiledescriptorbased.h>
// #include <gio/gio.h>
// #include <gio/gunixconnection.h>
// #include <gio/gunixcredentialsmessage.h>
// #include <gio/gunixfdlist.h>
// #include <gio/gunixfdmessage.h>
// #include <gio/gunixinputstream.h>
// #include <gio/gunixmounts.h>
// #include <gio/gunixoutputstream.h>
// #include <gio/gunixsocketaddress.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_emblem_get_type()), F: marshalEmblem},
	})
}

// Emblem is an implementation of #GIcon that supports having an emblem, which
// is an icon with additional properties. It can than be added to a Icon.
//
// Currently, only metainformation about the emblem's origin is supported. More
// may be added in the future.
type Emblem interface {
	gextras.Objector
	Icon

	// Icon gives back the icon from @emblem.
	Icon() Icon
	// Origin gets the origin of the emblem.
	Origin() EmblemOrigin
}

// emblem implements the Emblem interface.
type emblem struct {
	gextras.Objector
	Icon
}

var _ Emblem = (*emblem)(nil)

// WrapEmblem wraps a GObject to the right type. It is
// primarily used internally.
func WrapEmblem(obj *externglib.Object) Emblem {
	return Emblem{
		Objector: obj,
		Icon:     WrapIcon(obj),
	}
}

func marshalEmblem(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapEmblem(obj), nil
}

// NewEmblem constructs a class Emblem.
func NewEmblem(icon Icon) Emblem {
	var arg1 *C.GIcon

	arg1 = (*C.GIcon)(icon.Native())

	ret := C.g_emblem_new(arg1)

	var ret0 Emblem

	ret0 = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(ret.Native()))).(Emblem)

	return ret0
}

// NewEmblemWithOrigin constructs a class Emblem.
func NewEmblemWithOrigin(icon Icon, origin EmblemOrigin) Emblem {
	var arg1 *C.GIcon
	var arg2 C.GEmblemOrigin

	arg1 = (*C.GIcon)(icon.Native())
	arg2 = (C.GEmblemOrigin)(origin)

	ret := C.g_emblem_new_with_origin(arg1, arg2)

	var ret0 Emblem

	ret0 = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(ret.Native()))).(Emblem)

	return ret0
}

// Icon gives back the icon from @emblem.
func (e emblem) Icon() Icon {
	var arg0 *C.GEmblem

	arg0 = (*C.GEmblem)(e.Native())

	ret := C.g_emblem_get_icon(arg0)

	var ret0 Icon

	ret0 = gextras.CastObject(externglib.Take(unsafe.Pointer(ret.Native()))).(Icon)

	return ret0
}

// Origin gets the origin of the emblem.
func (e emblem) Origin() EmblemOrigin {
	var arg0 *C.GEmblem

	arg0 = (*C.GEmblem)(e.Native())

	ret := C.g_emblem_get_origin(arg0)

	var ret0 EmblemOrigin

	ret0 = EmblemOrigin(ret)

	return ret0
}
