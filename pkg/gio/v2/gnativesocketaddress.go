// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/box"
	"github.com/diamondburned/gotk4/internal/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gio-2.0 gio-unix-2.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gio/gdesktopappinfo.h>
// #include <gio/gfiledescriptorbased.h>
// #include <gio/gio.h>
// #include <gio/gunixconnection.h>
// #include <gio/gunixcredentialsmessage.h>
// #include <gio/gunixfdlist.h>
// #include <gio/gunixfdmessage.h>
// #include <gio/gunixinputstream.h>
// #include <gio/gunixmounts.h>
// #include <gio/gunixoutputstream.h>
// #include <gio/gunixsocketaddress.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_native_socket_address_get_type()), F: marshalNativeSocketAddress},
	})
}

type NativeSocketAddressPrivate struct {
	native C.GNativeSocketAddressPrivate
}

// WrapNativeSocketAddressPrivate wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapNativeSocketAddressPrivate(ptr unsafe.Pointer) *NativeSocketAddressPrivate {
	if ptr == nil {
		return nil
	}

	return (*NativeSocketAddressPrivate)(ptr)
}

func marshalNativeSocketAddressPrivate(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapNativeSocketAddressPrivate(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (n *NativeSocketAddressPrivate) Native() unsafe.Pointer {
	return unsafe.Pointer(&n.native)
}

// NativeSocketAddress: a socket address of some unknown native type.
type NativeSocketAddress interface {
	SocketAddress
	SocketConnectable
}

// nativeSocketAddress implements the NativeSocketAddress interface.
type nativeSocketAddress struct {
	SocketAddress
	SocketConnectable
}

var _ NativeSocketAddress = (*nativeSocketAddress)(nil)

// WrapNativeSocketAddress wraps a GObject to the right type. It is
// primarily used internally.
func WrapNativeSocketAddress(obj *externglib.Object) NativeSocketAddress {
	return NativeSocketAddress{
		SocketAddress:     WrapSocketAddress(obj),
		SocketConnectable: WrapSocketConnectable(obj),
	}
}

func marshalNativeSocketAddress(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapNativeSocketAddress(obj), nil
}

// NewNativeSocketAddress constructs a class NativeSocketAddress.
func NewNativeSocketAddress(native interface{}, len uint) NativeSocketAddress {
	var arg1 C.gpointer
	var arg2 C.gsize

	arg1 = C.gpointer(box.Assign(native))
	arg2 = C.gsize(len)

	ret := C.g_native_socket_address_new(arg1, arg2)

	var ret0 NativeSocketAddress

	ret0 = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(ret.Native()))).(NativeSocketAddress)

	return ret0
}
