// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/glib/v2"
)

// #cgo pkg-config: gio-2.0 gio-unix-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <gio/gdesktopappinfo.h>
// #include <gio/gfiledescriptorbased.h>
// #include <gio/gio.h>
// #include <gio/gunixconnection.h>
// #include <gio/gunixcredentialsmessage.h>
// #include <gio/gunixfdlist.h>
// #include <gio/gunixfdmessage.h>
// #include <gio/gunixinputstream.h>
// #include <gio/gunixmounts.h>
// #include <gio/gunixoutputstream.h>
// #include <gio/gunixsocketaddress.h>
import "C"

// SettingsBackendFlattenTree: calculate the longest common prefix of all keys
// in a tree and write out an array of the key names relative to that prefix
// and, optionally, the value to store at each of those keys.
//
// You must free the value returned in @path, @keys and @values using g_free().
// You should not attempt to free or unref the contents of @keys or @values.
func SettingsBackendFlattenTree(tree *glib.Tree) (string, []string, []*glib.Variant) {
	var _arg1 *C.GTree // out
	var _arg2 *C.gchar // in
	var _arg3 **C.gchar
	var _arg4 **C.GVariant

	_arg1 = (*C.GTree)(unsafe.Pointer(tree))

	C.g_settings_backend_flatten_tree(_arg1, &_arg2, &_arg3, &_arg4)

	var _path string // out
	var _keys []string
	var _values []*glib.Variant

	_path = C.GoString((*C.gchar)(unsafe.Pointer(_arg2)))
	defer C.free(unsafe.Pointer(_arg2))
	{
		var i int
		var z *C.gchar
		for p := _arg3; *p != z; p = &unsafe.Slice(p, i+1)[i] {
			i++
		}

		src := unsafe.Slice(_arg3, i)
		_keys = make([]string, i)
		for i := range src {
			_keys[i] = C.GoString((*C.gchar)(unsafe.Pointer(src[i])))
		}
	}
	{
		var i int
		var z *C.GVariant
		for p := _arg4; *p != z; p = &unsafe.Slice(p, i+1)[i] {
			i++
		}

		src := unsafe.Slice(_arg4, i)
		_values = make([]*glib.Variant, i)
		for i := range src {
			_values[i] = (*glib.Variant)(unsafe.Pointer(src[i]))
			C.g_variant_ref(src[i])
			runtime.SetFinalizer(_values[i], func(v *glib.Variant) {
				C.g_variant_unref((*C.GVariant)(unsafe.Pointer(v)))
			})
		}
	}

	return _path, _keys, _values
}
