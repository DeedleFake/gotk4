// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/core/box"
	"github.com/diamondburned/gotk4/core/gerror"
	"github.com/diamondburned/gotk4/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gio-2.0 gio-unix-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <gio/gdesktopappinfo.h>
// #include <gio/gfiledescriptorbased.h>
// #include <gio/gio.h>
// #include <gio/gunixconnection.h>
// #include <gio/gunixcredentialsmessage.h>
// #include <gio/gunixfdlist.h>
// #include <gio/gunixfdmessage.h>
// #include <gio/gunixinputstream.h>
// #include <gio/gunixmounts.h>
// #include <gio/gunixoutputstream.h>
// #include <gio/gunixsocketaddress.h>
// #include <glib-object.h>
//
// void gotk4_AsyncReadyCallback(GObject*, GAsyncResult*, gpointer);
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_proxy_get_type()), F: marshalProxy},
	})
}

// Proxy: a #GProxy handles connecting to a remote host via a given type of
// proxy server. It is implemented by the 'gio-proxy' extension point. The
// extensions are named after their proxy protocol name. As an example, a SOCKS5
// proxy implementation can be retrieved with the name 'socks5' using the
// function g_io_extension_point_get_extension_by_name().
type Proxy interface {
	gextras.Objector

	// ConnectProxy: some proxy protocols expect to be passed a hostname, which
	// they will resolve to an IP address themselves. Others, like SOCKS4, do
	// not allow this. This function will return false if @proxy is implementing
	// such a protocol. When false is returned, the caller should resolve the
	// destination hostname first, and then pass a Address containing the
	// stringified IP address to g_proxy_connect() or g_proxy_connect_async().
	ConnectProxy(connection IOStream, proxyAddress ProxyAddress, cancellable Cancellable) (IOStream, error)
	// ConnectAsync: some proxy protocols expect to be passed a hostname, which
	// they will resolve to an IP address themselves. Others, like SOCKS4, do
	// not allow this. This function will return false if @proxy is implementing
	// such a protocol. When false is returned, the caller should resolve the
	// destination hostname first, and then pass a Address containing the
	// stringified IP address to g_proxy_connect() or g_proxy_connect_async().
	ConnectAsync(connection IOStream, proxyAddress ProxyAddress, cancellable Cancellable, callback AsyncReadyCallback)
	// ConnectFinish: some proxy protocols expect to be passed a hostname, which
	// they will resolve to an IP address themselves. Others, like SOCKS4, do
	// not allow this. This function will return false if @proxy is implementing
	// such a protocol. When false is returned, the caller should resolve the
	// destination hostname first, and then pass a Address containing the
	// stringified IP address to g_proxy_connect() or g_proxy_connect_async().
	ConnectFinish(result AsyncResult) (IOStream, error)
	// SupportsHostname: some proxy protocols expect to be passed a hostname,
	// which they will resolve to an IP address themselves. Others, like SOCKS4,
	// do not allow this. This function will return false if @proxy is
	// implementing such a protocol. When false is returned, the caller should
	// resolve the destination hostname first, and then pass a Address
	// containing the stringified IP address to g_proxy_connect() or
	// g_proxy_connect_async().
	SupportsHostname() bool
}

// proxy implements the Proxy interface.
type proxy struct {
	gextras.Objector
}

var _ Proxy = (*proxy)(nil)

// WrapProxy wraps a GObject to a type that implements
// interface Proxy. It is primarily used internally.
func WrapProxy(obj *externglib.Object) Proxy {
	return proxy{
		Objector: obj,
	}
}

func marshalProxy(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapProxy(obj), nil
}

func (p proxy) ConnectProxy(connection IOStream, proxyAddress ProxyAddress, cancellable Cancellable) (IOStream, error) {
	var _arg0 *C.GProxy        // out
	var _arg1 *C.GIOStream     // out
	var _arg2 *C.GProxyAddress // out
	var _arg3 *C.GCancellable  // out
	var _cret *C.GIOStream     // in
	var _cerr *C.GError        // in

	_arg0 = (*C.GProxy)(unsafe.Pointer(p.Native()))
	_arg1 = (*C.GIOStream)(unsafe.Pointer(connection.Native()))
	_arg2 = (*C.GProxyAddress)(unsafe.Pointer(proxyAddress.Native()))
	_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	_cret = C.g_proxy_connect(_arg0, _arg1, _arg2, _arg3, &_cerr)

	var _ioStream IOStream // out
	var _goerr error       // out

	_ioStream = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(IOStream)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _ioStream, _goerr
}

func (p proxy) ConnectAsync(connection IOStream, proxyAddress ProxyAddress, cancellable Cancellable, callback AsyncReadyCallback) {
	var _arg0 *C.GProxy             // out
	var _arg1 *C.GIOStream          // out
	var _arg2 *C.GProxyAddress      // out
	var _arg3 *C.GCancellable       // out
	var _arg4 C.GAsyncReadyCallback // out
	var _arg5 C.gpointer

	_arg0 = (*C.GProxy)(unsafe.Pointer(p.Native()))
	_arg1 = (*C.GIOStream)(unsafe.Pointer(connection.Native()))
	_arg2 = (*C.GProxyAddress)(unsafe.Pointer(proxyAddress.Native()))
	_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg4 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg5 = C.gpointer(box.Assign(callback))

	C.g_proxy_connect_async(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
}

func (p proxy) ConnectFinish(result AsyncResult) (IOStream, error) {
	var _arg0 *C.GProxy       // out
	var _arg1 *C.GAsyncResult // out
	var _cret *C.GIOStream    // in
	var _cerr *C.GError       // in

	_arg0 = (*C.GProxy)(unsafe.Pointer(p.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(result.Native()))

	_cret = C.g_proxy_connect_finish(_arg0, _arg1, &_cerr)

	var _ioStream IOStream // out
	var _goerr error       // out

	_ioStream = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(IOStream)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _ioStream, _goerr
}

func (p proxy) SupportsHostname() bool {
	var _arg0 *C.GProxy  // out
	var _cret C.gboolean // in

	_arg0 = (*C.GProxy)(unsafe.Pointer(p.Native()))

	_cret = C.g_proxy_supports_hostname(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}
