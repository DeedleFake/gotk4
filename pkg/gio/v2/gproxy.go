// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gio-2.0 gio-unix-2.0 glib-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <gio/gdesktopappinfo.h>
// #include <gio/gfiledescriptorbased.h>
// #include <gio/gio.h>
// #include <gio/gunixconnection.h>
// #include <gio/gunixcredentialsmessage.h>
// #include <gio/gunixfdlist.h>
// #include <gio/gunixfdmessage.h>
// #include <gio/gunixinputstream.h>
// #include <gio/gunixmounts.h>
// #include <gio/gunixoutputstream.h>
// #include <gio/gunixsocketaddress.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_proxy_get_type()), F: marshalProXY},
	})
}

// ProXYOverrider contains methods that are overridable. This
// interface is a subset of the interface ProXY.
type ProXYOverrider interface {
	// SupportsHostname: some proxy protocols expect to be passed a hostname,
	// which they will resolve to an IP address themselves. Others, like SOCKS4,
	// do not allow this. This function will return false if @proxy is
	// implementing such a protocol. When false is returned, the caller should
	// resolve the destination hostname first, and then pass a Address
	// containing the stringified IP address to g_proxy_connect() or
	// g_proxy_connect_async().
	SupportsHostname() bool
}

// ProXY: a #GProxy handles connecting to a remote host via a given type of
// proxy server. It is implemented by the 'gio-proxy' extension point. The
// extensions are named after their proxy protocol name. As an example, a SOCKS5
// proxy implementation can be retrieved with the name 'socks5' using the
// function g_io_extension_point_get_extension_by_name().
type ProXY interface {
	gextras.Objector
	ProXYOverrider
}

// proXY implements the ProXY interface.
type proXY struct {
	gextras.Objector
}

var _ ProXY = (*proXY)(nil)

// WrapProXY wraps a GObject to a type that implements interface
// ProXY. It is primarily used internally.
func WrapProXY(obj *externglib.Object) ProXY {
	return ProXY{
		Objector: obj,
	}
}

func marshalProXY(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapProXY(obj), nil
}

// SupportsHostname: some proxy protocols expect to be passed a hostname,
// which they will resolve to an IP address themselves. Others, like SOCKS4,
// do not allow this. This function will return false if @proxy is
// implementing such a protocol. When false is returned, the caller should
// resolve the destination hostname first, and then pass a Address
// containing the stringified IP address to g_proxy_connect() or
// g_proxy_connect_async().
func (p proXY) SupportsHostname() bool {
	var _arg0 *C.GProxy // out

	_arg0 = (*C.GProxy)(unsafe.Pointer(p.Native()))

	var _cret C.gboolean // in

	_cret = C.g_proxy_supports_hostname(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}
