// Code generated by girgen. DO NOT EDIT.

package gio

import (
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gio-2.0 gio-unix-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gio/gdesktopappinfo.h>
// #include <gio/gfiledescriptorbased.h>
// #include <gio/gio.h>
// #include <gio/gunixconnection.h>
// #include <gio/gunixcredentialsmessage.h>
// #include <gio/gunixfdlist.h>
// #include <gio/gunixfdmessage.h>
// #include <gio/gunixinputstream.h>
// #include <gio/gunixmounts.h>
// #include <gio/gunixoutputstream.h>
// #include <gio/gunixsocketaddress.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_socket_client_get_type()), F: marshalSocketClient},
	})
}

// SocketClient is a lightweight high-level utility class for connecting to a
// network host using a connection oriented socket type.
//
// You create a Client object, set any options you want, and then call a sync or
// async connect operation, which returns a Connection subclass on success.
//
// The type of the Connection object returned depends on the type of the
// underlying socket that is in use. For instance, for a TCP/IP connection it
// will be a Connection.
//
// As Client is a lightweight object, you don't need to cache it. You can just
// create a new one any time you need one.
type SocketClient interface {
	gextras.Objector

	// AddApplicationProxy: enable proxy protocols to be handled by the
	// application. When the indicated proxy protocol is returned by the
	// Resolver, Client will consider this protocol as supported but will not
	// try to find a #GProxy instance to handle handshaking. The application
	// must check for this case by calling
	// g_socket_connection_get_remote_address() on the returned Connection, and
	// seeing if it's a Address of the appropriate type, to determine whether or
	// not it needs to handle the proxy handshaking itself.
	//
	// This should be used for proxy protocols that are dialects of another
	// protocol such as HTTP proxy. It also allows cohabitation of proxy
	// protocols that are reused between protocols. A good example is HTTP. It
	// can be used to proxy HTTP, FTP and Gopher and can also be use as generic
	// socket proxy through the HTTP CONNECT method.
	//
	// When the proxy is detected as being an application proxy, TLS handshake
	// will be skipped. This is required to let the application do the proxy
	// specific handshake.
	AddApplicationProxy(c SocketClient, protocol string)
	// Connect tries to resolve the @connectable and make a network connection
	// to it.
	//
	// Upon a successful connection, a new Connection is constructed and
	// returned. The caller owns this new object and must drop their reference
	// to it when finished with it.
	//
	// The type of the Connection object returned depends on the type of the
	// underlying socket that is used. For instance, for a TCP/IP connection it
	// will be a Connection.
	//
	// The socket created will be the same family as the address that the
	// @connectable resolves to, unless family is set with
	// g_socket_client_set_family() or indirectly via
	// g_socket_client_set_local_address(). The socket type defaults to
	// G_SOCKET_TYPE_STREAM but can be set with
	// g_socket_client_set_socket_type().
	//
	// If a local address is specified with g_socket_client_set_local_address()
	// the socket will be bound to this address before connecting.
	Connect(c SocketClient, connectable SocketConnectable, cancellable Cancellable) error
	// ConnectAsync: this is the asynchronous version of
	// g_socket_client_connect().
	//
	// When the operation is finished @callback will be called. You can then
	// call g_socket_client_connect_finish() to get the result of the operation.
	ConnectAsync(c SocketClient)
	// ConnectFinish finishes an async connect operation. See
	// g_socket_client_connect_async()
	ConnectFinish(c SocketClient, result AsyncResult) error
	// ConnectToHost: this is a helper function for g_socket_client_connect().
	//
	// Attempts to create a TCP connection to the named host.
	//
	// @host_and_port may be in any of a number of recognized formats; an IPv6
	// address, an IPv4 address, or a domain name (in which case a DNS lookup is
	// performed). Quoting with [] is supported for all address types. A port
	// override may be specified in the usual way with a colon. Ports may be
	// given as decimal numbers or symbolic names (in which case an
	// /etc/services lookup is performed).
	//
	// If no port override is given in @host_and_port then @default_port will be
	// used as the port number to connect to.
	//
	// In general, @host_and_port is expected to be provided by the user
	// (allowing them to give the hostname, and a port override if necessary)
	// and @default_port is expected to be provided by the application.
	//
	// In the case that an IP address is given, a single connection attempt is
	// made. In the case that a name is given, multiple connection attempts may
	// be made, in turn and according to the number of address records in DNS,
	// until a connection succeeds.
	//
	// Upon a successful connection, a new Connection is constructed and
	// returned. The caller owns this new object and must drop their reference
	// to it when finished with it.
	//
	// In the event of any failure (DNS error, service not found, no hosts
	// connectable) nil is returned and @error (if non-nil) is set accordingly.
	ConnectToHost(c SocketClient, hostAndPort string, defaultPort uint16, cancellable Cancellable) error
	// ConnectToHostAsync: this is the asynchronous version of
	// g_socket_client_connect_to_host().
	//
	// When the operation is finished @callback will be called. You can then
	// call g_socket_client_connect_to_host_finish() to get the result of the
	// operation.
	ConnectToHostAsync(c SocketClient)
	// ConnectToHostFinish finishes an async connect operation. See
	// g_socket_client_connect_to_host_async()
	ConnectToHostFinish(c SocketClient, result AsyncResult) error
	// ConnectToService attempts to create a TCP connection to a service.
	//
	// This call looks up the SRV record for @service at @domain for the "tcp"
	// protocol. It then attempts to connect, in turn, to each of the hosts
	// providing the service until either a connection succeeds or there are no
	// hosts remaining.
	//
	// Upon a successful connection, a new Connection is constructed and
	// returned. The caller owns this new object and must drop their reference
	// to it when finished with it.
	//
	// In the event of any failure (DNS error, service not found, no hosts
	// connectable) nil is returned and @error (if non-nil) is set accordingly.
	ConnectToService(c SocketClient, domain string, service string, cancellable Cancellable) error
	// ConnectToServiceAsync: this is the asynchronous version of
	// g_socket_client_connect_to_service().
	ConnectToServiceAsync(c SocketClient)
	// ConnectToServiceFinish finishes an async connect operation. See
	// g_socket_client_connect_to_service_async()
	ConnectToServiceFinish(c SocketClient, result AsyncResult) error
	// ConnectToURI: this is a helper function for g_socket_client_connect().
	//
	// Attempts to create a TCP connection with a network URI.
	//
	// @uri may be any valid URI containing an "authority" (hostname/port)
	// component. If a port is not specified in the URI, @default_port will be
	// used. TLS will be negotiated if Client:tls is true. (Client does not know
	// to automatically assume TLS for certain URI schemes.)
	//
	// Using this rather than g_socket_client_connect() or
	// g_socket_client_connect_to_host() allows Client to determine when to use
	// application-specific proxy protocols.
	//
	// Upon a successful connection, a new Connection is constructed and
	// returned. The caller owns this new object and must drop their reference
	// to it when finished with it.
	//
	// In the event of any failure (DNS error, service not found, no hosts
	// connectable) nil is returned and @error (if non-nil) is set accordingly.
	ConnectToURI(c SocketClient, uri string, defaultPort uint16, cancellable Cancellable) error
	// ConnectToURIAsync: this is the asynchronous version of
	// g_socket_client_connect_to_uri().
	//
	// When the operation is finished @callback will be called. You can then
	// call g_socket_client_connect_to_uri_finish() to get the result of the
	// operation.
	ConnectToURIAsync(c SocketClient)
	// ConnectToURIFinish finishes an async connect operation. See
	// g_socket_client_connect_to_uri_async()
	ConnectToURIFinish(c SocketClient, result AsyncResult) error
	// EnableProxy gets the proxy enable state; see
	// g_socket_client_set_enable_proxy()
	EnableProxy(c SocketClient) bool
	// Family gets the socket family of the socket client.
	//
	// See g_socket_client_set_family() for details.
	Family(c SocketClient)
	// LocalAddress gets the local address of the socket client.
	//
	// See g_socket_client_set_local_address() for details.
	LocalAddress(c SocketClient)
	// Protocol gets the protocol name type of the socket client.
	//
	// See g_socket_client_set_protocol() for details.
	Protocol(c SocketClient)
	// ProxyResolver gets the Resolver being used by @client. Normally, this
	// will be the resolver returned by g_proxy_resolver_get_default(), but you
	// can override it with g_socket_client_set_proxy_resolver().
	ProxyResolver(c SocketClient)
	// SocketType gets the socket type of the socket client.
	//
	// See g_socket_client_set_socket_type() for details.
	SocketType(c SocketClient)
	// Timeout gets the I/O timeout time for sockets created by @client.
	//
	// See g_socket_client_set_timeout() for details.
	Timeout(c SocketClient)
	// TLS gets whether @client creates TLS connections. See
	// g_socket_client_set_tls() for details.
	TLS(c SocketClient) bool
	// TLSValidationFlags gets the TLS validation flags used creating TLS
	// connections via @client.
	TLSValidationFlags(c SocketClient)
	// SetEnableProxy sets whether or not @client attempts to make connections
	// via a proxy server. When enabled (the default), Client will use a
	// Resolver to determine if a proxy protocol such as SOCKS is needed, and
	// automatically do the necessary proxy negotiation.
	//
	// See also g_socket_client_set_proxy_resolver().
	SetEnableProxy(c SocketClient, enable bool)
	// SetFamily sets the socket family of the socket client. If this is set to
	// something other than G_SOCKET_FAMILY_INVALID then the sockets created by
	// this object will be of the specified family.
	//
	// This might be useful for instance if you want to force the local
	// connection to be an ipv4 socket, even though the address might be an ipv6
	// mapped to ipv4 address.
	SetFamily(c SocketClient, family SocketFamily)
	// SetLocalAddress sets the local address of the socket client. The sockets
	// created by this object will bound to the specified address (if not nil)
	// before connecting.
	//
	// This is useful if you want to ensure that the local side of the
	// connection is on a specific port, or on a specific interface.
	SetLocalAddress(c SocketClient, address SocketAddress)
	// SetProtocol sets the protocol of the socket client. The sockets created
	// by this object will use of the specified protocol.
	//
	// If @protocol is G_SOCKET_PROTOCOL_DEFAULT that means to use the default
	// protocol for the socket family and type.
	SetProtocol(c SocketClient, protocol SocketProtocol)
	// SetProxyResolver overrides the Resolver used by @client. You can call
	// this if you want to use specific proxies, rather than using the system
	// default proxy settings.
	//
	// Note that whether or not the proxy resolver is actually used depends on
	// the setting of Client:enable-proxy, which is not changed by this function
	// (but which is true by default)
	SetProxyResolver(c SocketClient, proxyResolver ProxyResolver)
	// SetSocketType sets the socket type of the socket client. The sockets
	// created by this object will be of the specified type.
	//
	// It doesn't make sense to specify a type of G_SOCKET_TYPE_DATAGRAM, as
	// GSocketClient is used for connection oriented services.
	SetSocketType(c SocketClient, typ SocketType)
	// SetTimeout sets the I/O timeout for sockets created by @client. @timeout
	// is a time in seconds, or 0 for no timeout (the default).
	//
	// The timeout value affects the initial connection attempt as well, so
	// setting this may cause calls to g_socket_client_connect(), etc, to fail
	// with G_IO_ERROR_TIMED_OUT.
	SetTimeout(c SocketClient, timeout uint)
	// SetTLS sets whether @client creates TLS (aka SSL) connections. If @tls is
	// true, @client will wrap its connections in a ClientConnection and perform
	// a TLS handshake when connecting.
	//
	// Note that since Client must return a Connection, but ClientConnection is
	// not a Connection, this actually wraps the resulting ClientConnection in a
	// WrapperConnection when returning it. You can use
	// g_tcp_wrapper_connection_get_base_io_stream() on the return value to
	// extract the ClientConnection.
	//
	// If you need to modify the behavior of the TLS handshake (eg, by setting a
	// client-side certificate to use, or connecting to the
	// Connection::accept-certificate signal), you can connect to @client's
	// Client::event signal and wait for it to be emitted with
	// G_SOCKET_CLIENT_TLS_HANDSHAKING, which will give you a chance to see the
	// ClientConnection before the handshake starts.
	SetTLS(c SocketClient, tls bool)
	// SetTLSValidationFlags sets the TLS validation flags used when creating
	// TLS connections via @client. The default value is
	// G_TLS_CERTIFICATE_VALIDATE_ALL.
	SetTLSValidationFlags(c SocketClient, flags TLSCertificateFlags)
}

// socketClient implements the SocketClient interface.
type socketClient struct {
	gextras.Objector
}

var _ SocketClient = (*socketClient)(nil)

// WrapSocketClient wraps a GObject to the right type. It is
// primarily used internally.
func WrapSocketClient(obj *externglib.Object) SocketClient {
	return SocketClient{
		Objector: obj,
	}
}

func marshalSocketClient(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapSocketClient(obj), nil
}

// NewSocketClient constructs a class SocketClient.
func NewSocketClient() {
	C.g_socket_client_new()
}

// AddApplicationProxy: enable proxy protocols to be handled by the
// application. When the indicated proxy protocol is returned by the
// Resolver, Client will consider this protocol as supported but will not
// try to find a #GProxy instance to handle handshaking. The application
// must check for this case by calling
// g_socket_connection_get_remote_address() on the returned Connection, and
// seeing if it's a Address of the appropriate type, to determine whether or
// not it needs to handle the proxy handshaking itself.
//
// This should be used for proxy protocols that are dialects of another
// protocol such as HTTP proxy. It also allows cohabitation of proxy
// protocols that are reused between protocols. A good example is HTTP. It
// can be used to proxy HTTP, FTP and Gopher and can also be use as generic
// socket proxy through the HTTP CONNECT method.
//
// When the proxy is detected as being an application proxy, TLS handshake
// will be skipped. This is required to let the application do the proxy
// specific handshake.
func (c socketClient) AddApplicationProxy(c SocketClient, protocol string) {
	var arg0 *C.GSocketClient
	var arg1 *C.gchar

	arg0 = (*C.GSocketClient)(unsafe.Pointer(c.Native()))
	arg1 = (*C.gchar)(C.CString(protocol))
	defer C.free(unsafe.Pointer(arg1))

	C.g_socket_client_add_application_proxy(arg0, arg1)
}

// Connect tries to resolve the @connectable and make a network connection
// to it.
//
// Upon a successful connection, a new Connection is constructed and
// returned. The caller owns this new object and must drop their reference
// to it when finished with it.
//
// The type of the Connection object returned depends on the type of the
// underlying socket that is used. For instance, for a TCP/IP connection it
// will be a Connection.
//
// The socket created will be the same family as the address that the
// @connectable resolves to, unless family is set with
// g_socket_client_set_family() or indirectly via
// g_socket_client_set_local_address(). The socket type defaults to
// G_SOCKET_TYPE_STREAM but can be set with
// g_socket_client_set_socket_type().
//
// If a local address is specified with g_socket_client_set_local_address()
// the socket will be bound to this address before connecting.
func (c socketClient) Connect(c SocketClient, connectable SocketConnectable, cancellable Cancellable) error {
	var arg0 *C.GSocketClient
	var arg1 *C.GSocketConnectable
	var arg2 *C.GCancellable

	arg0 = (*C.GSocketClient)(unsafe.Pointer(c.Native()))
	arg1 = (*C.GSocketConnectable)(unsafe.Pointer(connectable.Native()))
	arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	var errout *C.GError
	var err error

	C.g_socket_client_connect(arg0, arg1, arg2, &errout)

	err = gerror.Take(unsafe.Pointer(errout))

	return err
}

// ConnectAsync: this is the asynchronous version of
// g_socket_client_connect().
//
// When the operation is finished @callback will be called. You can then
// call g_socket_client_connect_finish() to get the result of the operation.
func (c socketClient) ConnectAsync(c SocketClient) {
	var arg0 *C.GSocketClient

	arg0 = (*C.GSocketClient)(unsafe.Pointer(c.Native()))

	C.g_socket_client_connect_async(arg0, arg1, arg2, arg3, arg4)
}

// ConnectFinish finishes an async connect operation. See
// g_socket_client_connect_async()
func (c socketClient) ConnectFinish(c SocketClient, result AsyncResult) error {
	var arg0 *C.GSocketClient
	var arg1 *C.GAsyncResult

	arg0 = (*C.GSocketClient)(unsafe.Pointer(c.Native()))
	arg1 = (*C.GAsyncResult)(unsafe.Pointer(result.Native()))

	var errout *C.GError
	var err error

	C.g_socket_client_connect_finish(arg0, arg1, &errout)

	err = gerror.Take(unsafe.Pointer(errout))

	return err
}

// ConnectToHost: this is a helper function for g_socket_client_connect().
//
// Attempts to create a TCP connection to the named host.
//
// @host_and_port may be in any of a number of recognized formats; an IPv6
// address, an IPv4 address, or a domain name (in which case a DNS lookup is
// performed). Quoting with [] is supported for all address types. A port
// override may be specified in the usual way with a colon. Ports may be
// given as decimal numbers or symbolic names (in which case an
// /etc/services lookup is performed).
//
// If no port override is given in @host_and_port then @default_port will be
// used as the port number to connect to.
//
// In general, @host_and_port is expected to be provided by the user
// (allowing them to give the hostname, and a port override if necessary)
// and @default_port is expected to be provided by the application.
//
// In the case that an IP address is given, a single connection attempt is
// made. In the case that a name is given, multiple connection attempts may
// be made, in turn and according to the number of address records in DNS,
// until a connection succeeds.
//
// Upon a successful connection, a new Connection is constructed and
// returned. The caller owns this new object and must drop their reference
// to it when finished with it.
//
// In the event of any failure (DNS error, service not found, no hosts
// connectable) nil is returned and @error (if non-nil) is set accordingly.
func (c socketClient) ConnectToHost(c SocketClient, hostAndPort string, defaultPort uint16, cancellable Cancellable) error {
	var arg0 *C.GSocketClient
	var arg1 *C.gchar
	var arg2 C.guint16
	var arg3 *C.GCancellable

	arg0 = (*C.GSocketClient)(unsafe.Pointer(c.Native()))
	arg1 = (*C.gchar)(C.CString(hostAndPort))
	defer C.free(unsafe.Pointer(arg1))
	arg2 = C.guint16(defaultPort)
	arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	var errout *C.GError
	var err error

	C.g_socket_client_connect_to_host(arg0, arg1, arg2, arg3, &errout)

	err = gerror.Take(unsafe.Pointer(errout))

	return err
}

// ConnectToHostAsync: this is the asynchronous version of
// g_socket_client_connect_to_host().
//
// When the operation is finished @callback will be called. You can then
// call g_socket_client_connect_to_host_finish() to get the result of the
// operation.
func (c socketClient) ConnectToHostAsync(c SocketClient) {
	var arg0 *C.GSocketClient

	arg0 = (*C.GSocketClient)(unsafe.Pointer(c.Native()))

	C.g_socket_client_connect_to_host_async(arg0, arg1, arg2, arg3, arg4, arg5)
}

// ConnectToHostFinish finishes an async connect operation. See
// g_socket_client_connect_to_host_async()
func (c socketClient) ConnectToHostFinish(c SocketClient, result AsyncResult) error {
	var arg0 *C.GSocketClient
	var arg1 *C.GAsyncResult

	arg0 = (*C.GSocketClient)(unsafe.Pointer(c.Native()))
	arg1 = (*C.GAsyncResult)(unsafe.Pointer(result.Native()))

	var errout *C.GError
	var err error

	C.g_socket_client_connect_to_host_finish(arg0, arg1, &errout)

	err = gerror.Take(unsafe.Pointer(errout))

	return err
}

// ConnectToService attempts to create a TCP connection to a service.
//
// This call looks up the SRV record for @service at @domain for the "tcp"
// protocol. It then attempts to connect, in turn, to each of the hosts
// providing the service until either a connection succeeds or there are no
// hosts remaining.
//
// Upon a successful connection, a new Connection is constructed and
// returned. The caller owns this new object and must drop their reference
// to it when finished with it.
//
// In the event of any failure (DNS error, service not found, no hosts
// connectable) nil is returned and @error (if non-nil) is set accordingly.
func (c socketClient) ConnectToService(c SocketClient, domain string, service string, cancellable Cancellable) error {
	var arg0 *C.GSocketClient
	var arg1 *C.gchar
	var arg2 *C.gchar
	var arg3 *C.GCancellable

	arg0 = (*C.GSocketClient)(unsafe.Pointer(c.Native()))
	arg1 = (*C.gchar)(C.CString(domain))
	defer C.free(unsafe.Pointer(arg1))
	arg2 = (*C.gchar)(C.CString(service))
	defer C.free(unsafe.Pointer(arg2))
	arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	var errout *C.GError
	var err error

	C.g_socket_client_connect_to_service(arg0, arg1, arg2, arg3, &errout)

	err = gerror.Take(unsafe.Pointer(errout))

	return err
}

// ConnectToServiceAsync: this is the asynchronous version of
// g_socket_client_connect_to_service().
func (c socketClient) ConnectToServiceAsync(c SocketClient) {
	var arg0 *C.GSocketClient

	arg0 = (*C.GSocketClient)(unsafe.Pointer(c.Native()))

	C.g_socket_client_connect_to_service_async(arg0, arg1, arg2, arg3, arg4, arg5)
}

// ConnectToServiceFinish finishes an async connect operation. See
// g_socket_client_connect_to_service_async()
func (c socketClient) ConnectToServiceFinish(c SocketClient, result AsyncResult) error {
	var arg0 *C.GSocketClient
	var arg1 *C.GAsyncResult

	arg0 = (*C.GSocketClient)(unsafe.Pointer(c.Native()))
	arg1 = (*C.GAsyncResult)(unsafe.Pointer(result.Native()))

	var errout *C.GError
	var err error

	C.g_socket_client_connect_to_service_finish(arg0, arg1, &errout)

	err = gerror.Take(unsafe.Pointer(errout))

	return err
}

// ConnectToURI: this is a helper function for g_socket_client_connect().
//
// Attempts to create a TCP connection with a network URI.
//
// @uri may be any valid URI containing an "authority" (hostname/port)
// component. If a port is not specified in the URI, @default_port will be
// used. TLS will be negotiated if Client:tls is true. (Client does not know
// to automatically assume TLS for certain URI schemes.)
//
// Using this rather than g_socket_client_connect() or
// g_socket_client_connect_to_host() allows Client to determine when to use
// application-specific proxy protocols.
//
// Upon a successful connection, a new Connection is constructed and
// returned. The caller owns this new object and must drop their reference
// to it when finished with it.
//
// In the event of any failure (DNS error, service not found, no hosts
// connectable) nil is returned and @error (if non-nil) is set accordingly.
func (c socketClient) ConnectToURI(c SocketClient, uri string, defaultPort uint16, cancellable Cancellable) error {
	var arg0 *C.GSocketClient
	var arg1 *C.gchar
	var arg2 C.guint16
	var arg3 *C.GCancellable

	arg0 = (*C.GSocketClient)(unsafe.Pointer(c.Native()))
	arg1 = (*C.gchar)(C.CString(uri))
	defer C.free(unsafe.Pointer(arg1))
	arg2 = C.guint16(defaultPort)
	arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	var errout *C.GError
	var err error

	C.g_socket_client_connect_to_uri(arg0, arg1, arg2, arg3, &errout)

	err = gerror.Take(unsafe.Pointer(errout))

	return err
}

// ConnectToURIAsync: this is the asynchronous version of
// g_socket_client_connect_to_uri().
//
// When the operation is finished @callback will be called. You can then
// call g_socket_client_connect_to_uri_finish() to get the result of the
// operation.
func (c socketClient) ConnectToURIAsync(c SocketClient) {
	var arg0 *C.GSocketClient

	arg0 = (*C.GSocketClient)(unsafe.Pointer(c.Native()))

	C.g_socket_client_connect_to_uri_async(arg0, arg1, arg2, arg3, arg4, arg5)
}

// ConnectToURIFinish finishes an async connect operation. See
// g_socket_client_connect_to_uri_async()
func (c socketClient) ConnectToURIFinish(c SocketClient, result AsyncResult) error {
	var arg0 *C.GSocketClient
	var arg1 *C.GAsyncResult

	arg0 = (*C.GSocketClient)(unsafe.Pointer(c.Native()))
	arg1 = (*C.GAsyncResult)(unsafe.Pointer(result.Native()))

	var errout *C.GError
	var err error

	C.g_socket_client_connect_to_uri_finish(arg0, arg1, &errout)

	err = gerror.Take(unsafe.Pointer(errout))

	return err
}

// EnableProxy gets the proxy enable state; see
// g_socket_client_set_enable_proxy()
func (c socketClient) EnableProxy(c SocketClient) bool {
	var arg0 *C.GSocketClient

	arg0 = (*C.GSocketClient)(unsafe.Pointer(c.Native()))

	var cret C.gboolean
	var ok bool

	cret = C.g_socket_client_get_enable_proxy(arg0)

	if cret {
		ok = true
	}

	return ok
}

// Family gets the socket family of the socket client.
//
// See g_socket_client_set_family() for details.
func (c socketClient) Family(c SocketClient) {
	var arg0 *C.GSocketClient

	arg0 = (*C.GSocketClient)(unsafe.Pointer(c.Native()))

	C.g_socket_client_get_family(arg0)
}

// LocalAddress gets the local address of the socket client.
//
// See g_socket_client_set_local_address() for details.
func (c socketClient) LocalAddress(c SocketClient) {
	var arg0 *C.GSocketClient

	arg0 = (*C.GSocketClient)(unsafe.Pointer(c.Native()))

	C.g_socket_client_get_local_address(arg0)
}

// Protocol gets the protocol name type of the socket client.
//
// See g_socket_client_set_protocol() for details.
func (c socketClient) Protocol(c SocketClient) {
	var arg0 *C.GSocketClient

	arg0 = (*C.GSocketClient)(unsafe.Pointer(c.Native()))

	C.g_socket_client_get_protocol(arg0)
}

// ProxyResolver gets the Resolver being used by @client. Normally, this
// will be the resolver returned by g_proxy_resolver_get_default(), but you
// can override it with g_socket_client_set_proxy_resolver().
func (c socketClient) ProxyResolver(c SocketClient) {
	var arg0 *C.GSocketClient

	arg0 = (*C.GSocketClient)(unsafe.Pointer(c.Native()))

	C.g_socket_client_get_proxy_resolver(arg0)
}

// SocketType gets the socket type of the socket client.
//
// See g_socket_client_set_socket_type() for details.
func (c socketClient) SocketType(c SocketClient) {
	var arg0 *C.GSocketClient

	arg0 = (*C.GSocketClient)(unsafe.Pointer(c.Native()))

	C.g_socket_client_get_socket_type(arg0)
}

// Timeout gets the I/O timeout time for sockets created by @client.
//
// See g_socket_client_set_timeout() for details.
func (c socketClient) Timeout(c SocketClient) {
	var arg0 *C.GSocketClient

	arg0 = (*C.GSocketClient)(unsafe.Pointer(c.Native()))

	C.g_socket_client_get_timeout(arg0)
}

// TLS gets whether @client creates TLS connections. See
// g_socket_client_set_tls() for details.
func (c socketClient) TLS(c SocketClient) bool {
	var arg0 *C.GSocketClient

	arg0 = (*C.GSocketClient)(unsafe.Pointer(c.Native()))

	var cret C.gboolean
	var ok bool

	cret = C.g_socket_client_get_tls(arg0)

	if cret {
		ok = true
	}

	return ok
}

// TLSValidationFlags gets the TLS validation flags used creating TLS
// connections via @client.
func (c socketClient) TLSValidationFlags(c SocketClient) {
	var arg0 *C.GSocketClient

	arg0 = (*C.GSocketClient)(unsafe.Pointer(c.Native()))

	C.g_socket_client_get_tls_validation_flags(arg0)
}

// SetEnableProxy sets whether or not @client attempts to make connections
// via a proxy server. When enabled (the default), Client will use a
// Resolver to determine if a proxy protocol such as SOCKS is needed, and
// automatically do the necessary proxy negotiation.
//
// See also g_socket_client_set_proxy_resolver().
func (c socketClient) SetEnableProxy(c SocketClient, enable bool) {
	var arg0 *C.GSocketClient
	var arg1 C.gboolean

	arg0 = (*C.GSocketClient)(unsafe.Pointer(c.Native()))
	if enable {
		arg1 = C.gboolean(1)
	}

	C.g_socket_client_set_enable_proxy(arg0, arg1)
}

// SetFamily sets the socket family of the socket client. If this is set to
// something other than G_SOCKET_FAMILY_INVALID then the sockets created by
// this object will be of the specified family.
//
// This might be useful for instance if you want to force the local
// connection to be an ipv4 socket, even though the address might be an ipv6
// mapped to ipv4 address.
func (c socketClient) SetFamily(c SocketClient, family SocketFamily) {
	var arg0 *C.GSocketClient
	var arg1 C.GSocketFamily

	arg0 = (*C.GSocketClient)(unsafe.Pointer(c.Native()))
	arg1 = (C.GSocketFamily)(family)

	C.g_socket_client_set_family(arg0, arg1)
}

// SetLocalAddress sets the local address of the socket client. The sockets
// created by this object will bound to the specified address (if not nil)
// before connecting.
//
// This is useful if you want to ensure that the local side of the
// connection is on a specific port, or on a specific interface.
func (c socketClient) SetLocalAddress(c SocketClient, address SocketAddress) {
	var arg0 *C.GSocketClient
	var arg1 *C.GSocketAddress

	arg0 = (*C.GSocketClient)(unsafe.Pointer(c.Native()))
	arg1 = (*C.GSocketAddress)(unsafe.Pointer(address.Native()))

	C.g_socket_client_set_local_address(arg0, arg1)
}

// SetProtocol sets the protocol of the socket client. The sockets created
// by this object will use of the specified protocol.
//
// If @protocol is G_SOCKET_PROTOCOL_DEFAULT that means to use the default
// protocol for the socket family and type.
func (c socketClient) SetProtocol(c SocketClient, protocol SocketProtocol) {
	var arg0 *C.GSocketClient
	var arg1 C.GSocketProtocol

	arg0 = (*C.GSocketClient)(unsafe.Pointer(c.Native()))
	arg1 = (C.GSocketProtocol)(protocol)

	C.g_socket_client_set_protocol(arg0, arg1)
}

// SetProxyResolver overrides the Resolver used by @client. You can call
// this if you want to use specific proxies, rather than using the system
// default proxy settings.
//
// Note that whether or not the proxy resolver is actually used depends on
// the setting of Client:enable-proxy, which is not changed by this function
// (but which is true by default)
func (c socketClient) SetProxyResolver(c SocketClient, proxyResolver ProxyResolver) {
	var arg0 *C.GSocketClient
	var arg1 *C.GProxyResolver

	arg0 = (*C.GSocketClient)(unsafe.Pointer(c.Native()))
	arg1 = (*C.GProxyResolver)(unsafe.Pointer(proxyResolver.Native()))

	C.g_socket_client_set_proxy_resolver(arg0, arg1)
}

// SetSocketType sets the socket type of the socket client. The sockets
// created by this object will be of the specified type.
//
// It doesn't make sense to specify a type of G_SOCKET_TYPE_DATAGRAM, as
// GSocketClient is used for connection oriented services.
func (c socketClient) SetSocketType(c SocketClient, typ SocketType) {
	var arg0 *C.GSocketClient
	var arg1 C.GSocketType

	arg0 = (*C.GSocketClient)(unsafe.Pointer(c.Native()))
	arg1 = (C.GSocketType)(typ)

	C.g_socket_client_set_socket_type(arg0, arg1)
}

// SetTimeout sets the I/O timeout for sockets created by @client. @timeout
// is a time in seconds, or 0 for no timeout (the default).
//
// The timeout value affects the initial connection attempt as well, so
// setting this may cause calls to g_socket_client_connect(), etc, to fail
// with G_IO_ERROR_TIMED_OUT.
func (c socketClient) SetTimeout(c SocketClient, timeout uint) {
	var arg0 *C.GSocketClient
	var arg1 C.guint

	arg0 = (*C.GSocketClient)(unsafe.Pointer(c.Native()))
	arg1 = C.guint(timeout)

	C.g_socket_client_set_timeout(arg0, arg1)
}

// SetTLS sets whether @client creates TLS (aka SSL) connections. If @tls is
// true, @client will wrap its connections in a ClientConnection and perform
// a TLS handshake when connecting.
//
// Note that since Client must return a Connection, but ClientConnection is
// not a Connection, this actually wraps the resulting ClientConnection in a
// WrapperConnection when returning it. You can use
// g_tcp_wrapper_connection_get_base_io_stream() on the return value to
// extract the ClientConnection.
//
// If you need to modify the behavior of the TLS handshake (eg, by setting a
// client-side certificate to use, or connecting to the
// Connection::accept-certificate signal), you can connect to @client's
// Client::event signal and wait for it to be emitted with
// G_SOCKET_CLIENT_TLS_HANDSHAKING, which will give you a chance to see the
// ClientConnection before the handshake starts.
func (c socketClient) SetTLS(c SocketClient, tls bool) {
	var arg0 *C.GSocketClient
	var arg1 C.gboolean

	arg0 = (*C.GSocketClient)(unsafe.Pointer(c.Native()))
	if tls {
		arg1 = C.gboolean(1)
	}

	C.g_socket_client_set_tls(arg0, arg1)
}

// SetTLSValidationFlags sets the TLS validation flags used when creating
// TLS connections via @client. The default value is
// G_TLS_CERTIFICATE_VALIDATE_ALL.
func (c socketClient) SetTLSValidationFlags(c SocketClient, flags TLSCertificateFlags) {
	var arg0 *C.GSocketClient
	var arg1 C.GTlsCertificateFlags

	arg0 = (*C.GSocketClient)(unsafe.Pointer(c.Native()))
	arg1 = (C.GTlsCertificateFlags)(flags)

	C.g_socket_client_set_tls_validation_flags(arg0, arg1)
}
