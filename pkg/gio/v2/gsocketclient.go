// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/box"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gio-2.0 gio-unix-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gio/gdesktopappinfo.h>
// #include <gio/gfiledescriptorbased.h>
// #include <gio/gio.h>
// #include <gio/gunixconnection.h>
// #include <gio/gunixcredentialsmessage.h>
// #include <gio/gunixfdlist.h>
// #include <gio/gunixfdmessage.h>
// #include <gio/gunixinputstream.h>
// #include <gio/gunixmounts.h>
// #include <gio/gunixoutputstream.h>
// #include <gio/gunixsocketaddress.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_socket_client_get_type()), F: marshalSocketClient},
	})
}

// SocketClient is a lightweight high-level utility class for connecting to a
// network host using a connection oriented socket type.
//
// You create a Client object, set any options you want, and then call a sync or
// async connect operation, which returns a Connection subclass on success.
//
// The type of the Connection object returned depends on the type of the
// underlying socket that is in use. For instance, for a TCP/IP connection it
// will be a Connection.
//
// As Client is a lightweight object, you don't need to cache it. You can just
// create a new one any time you need one.
type SocketClient interface {
	gextras.Objector

	// AddApplicationProXY: enable proxy protocols to be handled by the
	// application. When the indicated proxy protocol is returned by the
	// Resolver, Client will consider this protocol as supported but will not
	// try to find a #GProxy instance to handle handshaking. The application
	// must check for this case by calling
	// g_socket_connection_get_remote_address() on the returned Connection, and
	// seeing if it's a Address of the appropriate type, to determine whether or
	// not it needs to handle the proxy handshaking itself.
	//
	// This should be used for proxy protocols that are dialects of another
	// protocol such as HTTP proxy. It also allows cohabitation of proxy
	// protocols that are reused between protocols. A good example is HTTP. It
	// can be used to proxy HTTP, FTP and Gopher and can also be use as generic
	// socket proxy through the HTTP CONNECT method.
	//
	// When the proxy is detected as being an application proxy, TLS handshake
	// will be skipped. This is required to let the application do the proxy
	// specific handshake.
	AddApplicationProXY(protocol string)
	// ConnectAsync: this is the asynchronous version of
	// g_socket_client_connect().
	//
	// You may wish to prefer the asynchronous version even in synchronous
	// command line programs because, since 2.60, it implements RFC 8305
	// (https://tools.ietf.org/html/rfc8305) "Happy Eyeballs" recommendations to
	// work around long connection timeouts in networks where IPv6 is broken by
	// performing an IPv4 connection simultaneously without waiting for IPv6 to
	// time out, which is not supported by the synchronous call. (This is not an
	// API guarantee, and may change in the future.)
	//
	// When the operation is finished @callback will be called. You can then
	// call g_socket_client_connect_finish() to get the result of the operation.
	ConnectAsync(connectable SocketConnectable, cancellable Cancellable, callback AsyncReadyCallback)
	// ConnectToHostAsync: this is the asynchronous version of
	// g_socket_client_connect_to_host().
	//
	// When the operation is finished @callback will be called. You can then
	// call g_socket_client_connect_to_host_finish() to get the result of the
	// operation.
	ConnectToHostAsync(hostAndPort string, defaultPort uint16, cancellable Cancellable, callback AsyncReadyCallback)
	// ConnectToServiceAsync: this is the asynchronous version of
	// g_socket_client_connect_to_service().
	ConnectToServiceAsync(domain string, service string, cancellable Cancellable, callback AsyncReadyCallback)
	// ConnectToURIAsync: this is the asynchronous version of
	// g_socket_client_connect_to_uri().
	//
	// When the operation is finished @callback will be called. You can then
	// call g_socket_client_connect_to_uri_finish() to get the result of the
	// operation.
	ConnectToURIAsync(uri string, defaultPort uint16, cancellable Cancellable, callback AsyncReadyCallback)
	// EnableProXY gets the proxy enable state; see
	// g_socket_client_set_enable_proxy()
	EnableProXY() bool
	// Timeout gets the I/O timeout time for sockets created by @client.
	//
	// See g_socket_client_set_timeout() for details.
	Timeout() uint
	// TLS gets whether @client creates TLS connections. See
	// g_socket_client_set_tls() for details.
	TLS() bool
	// SetEnableProXY sets whether or not @client attempts to make connections
	// via a proxy server. When enabled (the default), Client will use a
	// Resolver to determine if a proxy protocol such as SOCKS is needed, and
	// automatically do the necessary proxy negotiation.
	//
	// See also g_socket_client_set_proxy_resolver().
	SetEnableProXY(enable bool)
	// SetFamily sets the socket family of the socket client. If this is set to
	// something other than G_SOCKET_FAMILY_INVALID then the sockets created by
	// this object will be of the specified family.
	//
	// This might be useful for instance if you want to force the local
	// connection to be an ipv4 socket, even though the address might be an ipv6
	// mapped to ipv4 address.
	SetFamily(family SocketFamily)
	// SetLocalAddress sets the local address of the socket client. The sockets
	// created by this object will bound to the specified address (if not nil)
	// before connecting.
	//
	// This is useful if you want to ensure that the local side of the
	// connection is on a specific port, or on a specific interface.
	SetLocalAddress(address SocketAddress)
	// SetProtocol sets the protocol of the socket client. The sockets created
	// by this object will use of the specified protocol.
	//
	// If @protocol is G_SOCKET_PROTOCOL_DEFAULT that means to use the default
	// protocol for the socket family and type.
	SetProtocol(protocol SocketProtocol)
	// SetProXYResolver overrides the Resolver used by @client. You can call
	// this if you want to use specific proxies, rather than using the system
	// default proxy settings.
	//
	// Note that whether or not the proxy resolver is actually used depends on
	// the setting of Client:enable-proxy, which is not changed by this function
	// (but which is true by default)
	SetProXYResolver(proxyResolver ProXYResolver)
	// SetSocketType sets the socket type of the socket client. The sockets
	// created by this object will be of the specified type.
	//
	// It doesn't make sense to specify a type of G_SOCKET_TYPE_DATAGRAM, as
	// GSocketClient is used for connection oriented services.
	SetSocketType(typ SocketType)
	// SetTimeout sets the I/O timeout for sockets created by @client. @timeout
	// is a time in seconds, or 0 for no timeout (the default).
	//
	// The timeout value affects the initial connection attempt as well, so
	// setting this may cause calls to g_socket_client_connect(), etc, to fail
	// with G_IO_ERROR_TIMED_OUT.
	SetTimeout(timeout uint)
	// SetTLS sets whether @client creates TLS (aka SSL) connections. If @tls is
	// true, @client will wrap its connections in a ClientConnection and perform
	// a TLS handshake when connecting.
	//
	// Note that since Client must return a Connection, but ClientConnection is
	// not a Connection, this actually wraps the resulting ClientConnection in a
	// WrapperConnection when returning it. You can use
	// g_tcp_wrapper_connection_get_base_io_stream() on the return value to
	// extract the ClientConnection.
	//
	// If you need to modify the behavior of the TLS handshake (eg, by setting a
	// client-side certificate to use, or connecting to the
	// Connection::accept-certificate signal), you can connect to @client's
	// Client::event signal and wait for it to be emitted with
	// G_SOCKET_CLIENT_TLS_HANDSHAKING, which will give you a chance to see the
	// ClientConnection before the handshake starts.
	SetTLS(tls bool)
	// SetTLSValidationFlags sets the TLS validation flags used when creating
	// TLS connections via @client. The default value is
	// G_TLS_CERTIFICATE_VALIDATE_ALL.
	SetTLSValidationFlags(flags TLSCertificateFlags)
}

// socketClient implements the SocketClient interface.
type socketClient struct {
	gextras.Objector
}

var _ SocketClient = (*socketClient)(nil)

// WrapSocketClient wraps a GObject to the right type. It is
// primarily used internally.
func WrapSocketClient(obj *externglib.Object) SocketClient {
	return SocketClient{
		Objector: obj,
	}
}

func marshalSocketClient(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapSocketClient(obj), nil
}

// AddApplicationProXY: enable proxy protocols to be handled by the
// application. When the indicated proxy protocol is returned by the
// Resolver, Client will consider this protocol as supported but will not
// try to find a #GProxy instance to handle handshaking. The application
// must check for this case by calling
// g_socket_connection_get_remote_address() on the returned Connection, and
// seeing if it's a Address of the appropriate type, to determine whether or
// not it needs to handle the proxy handshaking itself.
//
// This should be used for proxy protocols that are dialects of another
// protocol such as HTTP proxy. It also allows cohabitation of proxy
// protocols that are reused between protocols. A good example is HTTP. It
// can be used to proxy HTTP, FTP and Gopher and can also be use as generic
// socket proxy through the HTTP CONNECT method.
//
// When the proxy is detected as being an application proxy, TLS handshake
// will be skipped. This is required to let the application do the proxy
// specific handshake.
func (c socketClient) AddApplicationProXY(protocol string) {
	var _arg0 *C.GSocketClient
	var _arg1 *C.gchar

	_arg0 = (*C.GSocketClient)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.gchar)(C.CString(protocol))
	defer C.free(unsafe.Pointer(_arg1))

	C.g_socket_client_add_application_proxy(_arg0, _arg1)
}

// ConnectAsync: this is the asynchronous version of
// g_socket_client_connect().
//
// You may wish to prefer the asynchronous version even in synchronous
// command line programs because, since 2.60, it implements RFC 8305
// (https://tools.ietf.org/html/rfc8305) "Happy Eyeballs" recommendations to
// work around long connection timeouts in networks where IPv6 is broken by
// performing an IPv4 connection simultaneously without waiting for IPv6 to
// time out, which is not supported by the synchronous call. (This is not an
// API guarantee, and may change in the future.)
//
// When the operation is finished @callback will be called. You can then
// call g_socket_client_connect_finish() to get the result of the operation.
func (c socketClient) ConnectAsync(connectable SocketConnectable, cancellable Cancellable, callback AsyncReadyCallback) {
	var _arg0 *C.GSocketClient
	var _arg1 *C.GSocketConnectable
	var _arg2 *C.GCancellable
	var _arg3 C.GAsyncReadyCallback
	var _arg4 C.gpointer

	_arg0 = (*C.GSocketClient)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.GSocketConnectable)(unsafe.Pointer(connectable.Native()))
	_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg3 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg4 = C.gpointer(box.Assign(callback))

	C.g_socket_client_connect_async(_arg0, _arg1, _arg2, _arg3, _arg4)
}

// ConnectToHostAsync: this is the asynchronous version of
// g_socket_client_connect_to_host().
//
// When the operation is finished @callback will be called. You can then
// call g_socket_client_connect_to_host_finish() to get the result of the
// operation.
func (c socketClient) ConnectToHostAsync(hostAndPort string, defaultPort uint16, cancellable Cancellable, callback AsyncReadyCallback) {
	var _arg0 *C.GSocketClient
	var _arg1 *C.gchar
	var _arg2 C.guint16
	var _arg3 *C.GCancellable
	var _arg4 C.GAsyncReadyCallback
	var _arg5 C.gpointer

	_arg0 = (*C.GSocketClient)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.gchar)(C.CString(hostAndPort))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.guint16(defaultPort)
	_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg4 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg5 = C.gpointer(box.Assign(callback))

	C.g_socket_client_connect_to_host_async(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
}

// ConnectToServiceAsync: this is the asynchronous version of
// g_socket_client_connect_to_service().
func (c socketClient) ConnectToServiceAsync(domain string, service string, cancellable Cancellable, callback AsyncReadyCallback) {
	var _arg0 *C.GSocketClient
	var _arg1 *C.gchar
	var _arg2 *C.gchar
	var _arg3 *C.GCancellable
	var _arg4 C.GAsyncReadyCallback
	var _arg5 C.gpointer

	_arg0 = (*C.GSocketClient)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.gchar)(C.CString(domain))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(service))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg4 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg5 = C.gpointer(box.Assign(callback))

	C.g_socket_client_connect_to_service_async(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
}

// ConnectToURIAsync: this is the asynchronous version of
// g_socket_client_connect_to_uri().
//
// When the operation is finished @callback will be called. You can then
// call g_socket_client_connect_to_uri_finish() to get the result of the
// operation.
func (c socketClient) ConnectToURIAsync(uri string, defaultPort uint16, cancellable Cancellable, callback AsyncReadyCallback) {
	var _arg0 *C.GSocketClient
	var _arg1 *C.gchar
	var _arg2 C.guint16
	var _arg3 *C.GCancellable
	var _arg4 C.GAsyncReadyCallback
	var _arg5 C.gpointer

	_arg0 = (*C.GSocketClient)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.gchar)(C.CString(uri))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.guint16(defaultPort)
	_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg4 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg5 = C.gpointer(box.Assign(callback))

	C.g_socket_client_connect_to_uri_async(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
}

// EnableProXY gets the proxy enable state; see
// g_socket_client_set_enable_proxy()
func (c socketClient) EnableProXY() bool {
	var _arg0 *C.GSocketClient

	_arg0 = (*C.GSocketClient)(unsafe.Pointer(c.Native()))

	var _cret C.gboolean

	_cret = C.g_socket_client_get_enable_proxy(_arg0)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// Timeout gets the I/O timeout time for sockets created by @client.
//
// See g_socket_client_set_timeout() for details.
func (c socketClient) Timeout() uint {
	var _arg0 *C.GSocketClient

	_arg0 = (*C.GSocketClient)(unsafe.Pointer(c.Native()))

	var _cret C.guint

	_cret = C.g_socket_client_get_timeout(_arg0)

	var _guint uint

	_guint = (uint)(_cret)

	return _guint
}

// TLS gets whether @client creates TLS connections. See
// g_socket_client_set_tls() for details.
func (c socketClient) TLS() bool {
	var _arg0 *C.GSocketClient

	_arg0 = (*C.GSocketClient)(unsafe.Pointer(c.Native()))

	var _cret C.gboolean

	_cret = C.g_socket_client_get_tls(_arg0)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// SetEnableProXY sets whether or not @client attempts to make connections
// via a proxy server. When enabled (the default), Client will use a
// Resolver to determine if a proxy protocol such as SOCKS is needed, and
// automatically do the necessary proxy negotiation.
//
// See also g_socket_client_set_proxy_resolver().
func (c socketClient) SetEnableProXY(enable bool) {
	var _arg0 *C.GSocketClient
	var _arg1 C.gboolean

	_arg0 = (*C.GSocketClient)(unsafe.Pointer(c.Native()))
	if enable {
		_arg1 = C.gboolean(1)
	}

	C.g_socket_client_set_enable_proxy(_arg0, _arg1)
}

// SetFamily sets the socket family of the socket client. If this is set to
// something other than G_SOCKET_FAMILY_INVALID then the sockets created by
// this object will be of the specified family.
//
// This might be useful for instance if you want to force the local
// connection to be an ipv4 socket, even though the address might be an ipv6
// mapped to ipv4 address.
func (c socketClient) SetFamily(family SocketFamily) {
	var _arg0 *C.GSocketClient
	var _arg1 C.GSocketFamily

	_arg0 = (*C.GSocketClient)(unsafe.Pointer(c.Native()))
	_arg1 = (C.GSocketFamily)(family)

	C.g_socket_client_set_family(_arg0, _arg1)
}

// SetLocalAddress sets the local address of the socket client. The sockets
// created by this object will bound to the specified address (if not nil)
// before connecting.
//
// This is useful if you want to ensure that the local side of the
// connection is on a specific port, or on a specific interface.
func (c socketClient) SetLocalAddress(address SocketAddress) {
	var _arg0 *C.GSocketClient
	var _arg1 *C.GSocketAddress

	_arg0 = (*C.GSocketClient)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.GSocketAddress)(unsafe.Pointer(address.Native()))

	C.g_socket_client_set_local_address(_arg0, _arg1)
}

// SetProtocol sets the protocol of the socket client. The sockets created
// by this object will use of the specified protocol.
//
// If @protocol is G_SOCKET_PROTOCOL_DEFAULT that means to use the default
// protocol for the socket family and type.
func (c socketClient) SetProtocol(protocol SocketProtocol) {
	var _arg0 *C.GSocketClient
	var _arg1 C.GSocketProtocol

	_arg0 = (*C.GSocketClient)(unsafe.Pointer(c.Native()))
	_arg1 = (C.GSocketProtocol)(protocol)

	C.g_socket_client_set_protocol(_arg0, _arg1)
}

// SetProXYResolver overrides the Resolver used by @client. You can call
// this if you want to use specific proxies, rather than using the system
// default proxy settings.
//
// Note that whether or not the proxy resolver is actually used depends on
// the setting of Client:enable-proxy, which is not changed by this function
// (but which is true by default)
func (c socketClient) SetProXYResolver(proxyResolver ProXYResolver) {
	var _arg0 *C.GSocketClient
	var _arg1 *C.GProxyResolver

	_arg0 = (*C.GSocketClient)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.GProxyResolver)(unsafe.Pointer(proxyResolver.Native()))

	C.g_socket_client_set_proxy_resolver(_arg0, _arg1)
}

// SetSocketType sets the socket type of the socket client. The sockets
// created by this object will be of the specified type.
//
// It doesn't make sense to specify a type of G_SOCKET_TYPE_DATAGRAM, as
// GSocketClient is used for connection oriented services.
func (c socketClient) SetSocketType(typ SocketType) {
	var _arg0 *C.GSocketClient
	var _arg1 C.GSocketType

	_arg0 = (*C.GSocketClient)(unsafe.Pointer(c.Native()))
	_arg1 = (C.GSocketType)(typ)

	C.g_socket_client_set_socket_type(_arg0, _arg1)
}

// SetTimeout sets the I/O timeout for sockets created by @client. @timeout
// is a time in seconds, or 0 for no timeout (the default).
//
// The timeout value affects the initial connection attempt as well, so
// setting this may cause calls to g_socket_client_connect(), etc, to fail
// with G_IO_ERROR_TIMED_OUT.
func (c socketClient) SetTimeout(timeout uint) {
	var _arg0 *C.GSocketClient
	var _arg1 C.guint

	_arg0 = (*C.GSocketClient)(unsafe.Pointer(c.Native()))
	_arg1 = C.guint(timeout)

	C.g_socket_client_set_timeout(_arg0, _arg1)
}

// SetTLS sets whether @client creates TLS (aka SSL) connections. If @tls is
// true, @client will wrap its connections in a ClientConnection and perform
// a TLS handshake when connecting.
//
// Note that since Client must return a Connection, but ClientConnection is
// not a Connection, this actually wraps the resulting ClientConnection in a
// WrapperConnection when returning it. You can use
// g_tcp_wrapper_connection_get_base_io_stream() on the return value to
// extract the ClientConnection.
//
// If you need to modify the behavior of the TLS handshake (eg, by setting a
// client-side certificate to use, or connecting to the
// Connection::accept-certificate signal), you can connect to @client's
// Client::event signal and wait for it to be emitted with
// G_SOCKET_CLIENT_TLS_HANDSHAKING, which will give you a chance to see the
// ClientConnection before the handshake starts.
func (c socketClient) SetTLS(tls bool) {
	var _arg0 *C.GSocketClient
	var _arg1 C.gboolean

	_arg0 = (*C.GSocketClient)(unsafe.Pointer(c.Native()))
	if tls {
		_arg1 = C.gboolean(1)
	}

	C.g_socket_client_set_tls(_arg0, _arg1)
}

// SetTLSValidationFlags sets the TLS validation flags used when creating
// TLS connections via @client. The default value is
// G_TLS_CERTIFICATE_VALIDATE_ALL.
func (c socketClient) SetTLSValidationFlags(flags TLSCertificateFlags) {
	var _arg0 *C.GSocketClient
	var _arg1 C.GTlsCertificateFlags

	_arg0 = (*C.GSocketClient)(unsafe.Pointer(c.Native()))
	_arg1 = (C.GTlsCertificateFlags)(flags)

	C.g_socket_client_set_tls_validation_flags(_arg0, _arg1)
}
