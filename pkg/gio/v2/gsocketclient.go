// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/core/box"
	"github.com/diamondburned/gotk4/core/gerror"
	"github.com/diamondburned/gotk4/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gio-2.0 gio-unix-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <gio/gdesktopappinfo.h>
// #include <gio/gfiledescriptorbased.h>
// #include <gio/gio.h>
// #include <gio/gunixconnection.h>
// #include <gio/gunixcredentialsmessage.h>
// #include <gio/gunixfdlist.h>
// #include <gio/gunixfdmessage.h>
// #include <gio/gunixinputstream.h>
// #include <gio/gunixmounts.h>
// #include <gio/gunixoutputstream.h>
// #include <gio/gunixsocketaddress.h>
// #include <glib-object.h>
//
// void gotk4_AsyncReadyCallback(GObject*, GAsyncResult*, gpointer);
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_socket_client_get_type()), F: marshalSocketClient},
	})
}

// SocketClient is a lightweight high-level utility class for connecting to a
// network host using a connection oriented socket type.
//
// You create a Client object, set any options you want, and then call a sync or
// async connect operation, which returns a Connection subclass on success.
//
// The type of the Connection object returned depends on the type of the
// underlying socket that is in use. For instance, for a TCP/IP connection it
// will be a Connection.
//
// As Client is a lightweight object, you don't need to cache it. You can just
// create a new one any time you need one.
type SocketClient interface {
	gextras.Objector

	AddApplicationProxySocketClient(protocol string)

	ConnectSocketClient(connectable SocketConnectable, cancellable Cancellable) (SocketConnection, error)

	ConnectAsyncSocketClient(connectable SocketConnectable, cancellable Cancellable, callback AsyncReadyCallback)

	ConnectFinishSocketClient(result AsyncResult) (SocketConnection, error)

	ConnectToHostSocketClient(hostAndPort string, defaultPort uint16, cancellable Cancellable) (SocketConnection, error)

	ConnectToHostAsyncSocketClient(hostAndPort string, defaultPort uint16, cancellable Cancellable, callback AsyncReadyCallback)

	ConnectToHostFinishSocketClient(result AsyncResult) (SocketConnection, error)

	ConnectToServiceSocketClient(domain string, service string, cancellable Cancellable) (SocketConnection, error)

	ConnectToServiceAsyncSocketClient(domain string, service string, cancellable Cancellable, callback AsyncReadyCallback)

	ConnectToServiceFinishSocketClient(result AsyncResult) (SocketConnection, error)

	ConnectToURISocketClient(uri string, defaultPort uint16, cancellable Cancellable) (SocketConnection, error)

	ConnectToURIAsyncSocketClient(uri string, defaultPort uint16, cancellable Cancellable, callback AsyncReadyCallback)

	ConnectToURIFinishSocketClient(result AsyncResult) (SocketConnection, error)

	EnableProxy() bool

	Family() SocketFamily

	LocalAddress() SocketAddress

	Protocol() SocketProtocol

	ProxyResolver() ProxyResolver

	SocketType() SocketType

	Timeout() uint

	TLS() bool

	TLSValidationFlags() TLSCertificateFlags

	SetEnableProxySocketClient(enable bool)

	SetFamilySocketClient(family SocketFamily)

	SetLocalAddressSocketClient(address SocketAddress)

	SetProtocolSocketClient(protocol SocketProtocol)

	SetProxyResolverSocketClient(proxyResolver ProxyResolver)

	SetSocketTypeSocketClient(typ SocketType)

	SetTimeoutSocketClient(timeout uint)

	SetTLSSocketClient(tls bool)

	SetTLSValidationFlagsSocketClient(flags TLSCertificateFlags)
}

// socketClient implements the SocketClient class.
type socketClient struct {
	gextras.Objector
}

// WrapSocketClient wraps a GObject to the right type. It is
// primarily used internally.
func WrapSocketClient(obj *externglib.Object) SocketClient {
	return socketClient{
		Objector: obj,
	}
}

func marshalSocketClient(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapSocketClient(obj), nil
}

func NewSocketClient() SocketClient {
	var _cret *C.GSocketClient // in

	_cret = C.g_socket_client_new()

	var _socketClient SocketClient // out

	_socketClient = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(SocketClient)

	return _socketClient
}

func (c socketClient) AddApplicationProxySocketClient(protocol string) {
	var _arg0 *C.GSocketClient // out
	var _arg1 *C.gchar         // out

	_arg0 = (*C.GSocketClient)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.gchar)(C.CString(protocol))
	defer C.free(unsafe.Pointer(_arg1))

	C.g_socket_client_add_application_proxy(_arg0, _arg1)
}

func (c socketClient) ConnectSocketClient(connectable SocketConnectable, cancellable Cancellable) (SocketConnection, error) {
	var _arg0 *C.GSocketClient      // out
	var _arg1 *C.GSocketConnectable // out
	var _arg2 *C.GCancellable       // out
	var _cret *C.GSocketConnection  // in
	var _cerr *C.GError             // in

	_arg0 = (*C.GSocketClient)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.GSocketConnectable)(unsafe.Pointer(connectable.Native()))
	_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	_cret = C.g_socket_client_connect(_arg0, _arg1, _arg2, &_cerr)

	var _socketConnection SocketConnection // out
	var _goerr error                       // out

	_socketConnection = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(SocketConnection)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _socketConnection, _goerr
}

func (c socketClient) ConnectAsyncSocketClient(connectable SocketConnectable, cancellable Cancellable, callback AsyncReadyCallback) {
	var _arg0 *C.GSocketClient      // out
	var _arg1 *C.GSocketConnectable // out
	var _arg2 *C.GCancellable       // out
	var _arg3 C.GAsyncReadyCallback // out
	var _arg4 C.gpointer

	_arg0 = (*C.GSocketClient)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.GSocketConnectable)(unsafe.Pointer(connectable.Native()))
	_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg3 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg4 = C.gpointer(box.Assign(callback))

	C.g_socket_client_connect_async(_arg0, _arg1, _arg2, _arg3, _arg4)
}

func (c socketClient) ConnectFinishSocketClient(result AsyncResult) (SocketConnection, error) {
	var _arg0 *C.GSocketClient     // out
	var _arg1 *C.GAsyncResult      // out
	var _cret *C.GSocketConnection // in
	var _cerr *C.GError            // in

	_arg0 = (*C.GSocketClient)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(result.Native()))

	_cret = C.g_socket_client_connect_finish(_arg0, _arg1, &_cerr)

	var _socketConnection SocketConnection // out
	var _goerr error                       // out

	_socketConnection = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(SocketConnection)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _socketConnection, _goerr
}

func (c socketClient) ConnectToHostSocketClient(hostAndPort string, defaultPort uint16, cancellable Cancellable) (SocketConnection, error) {
	var _arg0 *C.GSocketClient     // out
	var _arg1 *C.gchar             // out
	var _arg2 C.guint16            // out
	var _arg3 *C.GCancellable      // out
	var _cret *C.GSocketConnection // in
	var _cerr *C.GError            // in

	_arg0 = (*C.GSocketClient)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.gchar)(C.CString(hostAndPort))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.guint16(defaultPort)
	_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	_cret = C.g_socket_client_connect_to_host(_arg0, _arg1, _arg2, _arg3, &_cerr)

	var _socketConnection SocketConnection // out
	var _goerr error                       // out

	_socketConnection = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(SocketConnection)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _socketConnection, _goerr
}

func (c socketClient) ConnectToHostAsyncSocketClient(hostAndPort string, defaultPort uint16, cancellable Cancellable, callback AsyncReadyCallback) {
	var _arg0 *C.GSocketClient      // out
	var _arg1 *C.gchar              // out
	var _arg2 C.guint16             // out
	var _arg3 *C.GCancellable       // out
	var _arg4 C.GAsyncReadyCallback // out
	var _arg5 C.gpointer

	_arg0 = (*C.GSocketClient)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.gchar)(C.CString(hostAndPort))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.guint16(defaultPort)
	_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg4 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg5 = C.gpointer(box.Assign(callback))

	C.g_socket_client_connect_to_host_async(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
}

func (c socketClient) ConnectToHostFinishSocketClient(result AsyncResult) (SocketConnection, error) {
	var _arg0 *C.GSocketClient     // out
	var _arg1 *C.GAsyncResult      // out
	var _cret *C.GSocketConnection // in
	var _cerr *C.GError            // in

	_arg0 = (*C.GSocketClient)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(result.Native()))

	_cret = C.g_socket_client_connect_to_host_finish(_arg0, _arg1, &_cerr)

	var _socketConnection SocketConnection // out
	var _goerr error                       // out

	_socketConnection = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(SocketConnection)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _socketConnection, _goerr
}

func (c socketClient) ConnectToServiceSocketClient(domain string, service string, cancellable Cancellable) (SocketConnection, error) {
	var _arg0 *C.GSocketClient     // out
	var _arg1 *C.gchar             // out
	var _arg2 *C.gchar             // out
	var _arg3 *C.GCancellable      // out
	var _cret *C.GSocketConnection // in
	var _cerr *C.GError            // in

	_arg0 = (*C.GSocketClient)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.gchar)(C.CString(domain))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(service))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	_cret = C.g_socket_client_connect_to_service(_arg0, _arg1, _arg2, _arg3, &_cerr)

	var _socketConnection SocketConnection // out
	var _goerr error                       // out

	_socketConnection = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(SocketConnection)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _socketConnection, _goerr
}

func (c socketClient) ConnectToServiceAsyncSocketClient(domain string, service string, cancellable Cancellable, callback AsyncReadyCallback) {
	var _arg0 *C.GSocketClient      // out
	var _arg1 *C.gchar              // out
	var _arg2 *C.gchar              // out
	var _arg3 *C.GCancellable       // out
	var _arg4 C.GAsyncReadyCallback // out
	var _arg5 C.gpointer

	_arg0 = (*C.GSocketClient)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.gchar)(C.CString(domain))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(service))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg4 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg5 = C.gpointer(box.Assign(callback))

	C.g_socket_client_connect_to_service_async(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
}

func (c socketClient) ConnectToServiceFinishSocketClient(result AsyncResult) (SocketConnection, error) {
	var _arg0 *C.GSocketClient     // out
	var _arg1 *C.GAsyncResult      // out
	var _cret *C.GSocketConnection // in
	var _cerr *C.GError            // in

	_arg0 = (*C.GSocketClient)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(result.Native()))

	_cret = C.g_socket_client_connect_to_service_finish(_arg0, _arg1, &_cerr)

	var _socketConnection SocketConnection // out
	var _goerr error                       // out

	_socketConnection = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(SocketConnection)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _socketConnection, _goerr
}

func (c socketClient) ConnectToURISocketClient(uri string, defaultPort uint16, cancellable Cancellable) (SocketConnection, error) {
	var _arg0 *C.GSocketClient     // out
	var _arg1 *C.gchar             // out
	var _arg2 C.guint16            // out
	var _arg3 *C.GCancellable      // out
	var _cret *C.GSocketConnection // in
	var _cerr *C.GError            // in

	_arg0 = (*C.GSocketClient)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.gchar)(C.CString(uri))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.guint16(defaultPort)
	_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	_cret = C.g_socket_client_connect_to_uri(_arg0, _arg1, _arg2, _arg3, &_cerr)

	var _socketConnection SocketConnection // out
	var _goerr error                       // out

	_socketConnection = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(SocketConnection)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _socketConnection, _goerr
}

func (c socketClient) ConnectToURIAsyncSocketClient(uri string, defaultPort uint16, cancellable Cancellable, callback AsyncReadyCallback) {
	var _arg0 *C.GSocketClient      // out
	var _arg1 *C.gchar              // out
	var _arg2 C.guint16             // out
	var _arg3 *C.GCancellable       // out
	var _arg4 C.GAsyncReadyCallback // out
	var _arg5 C.gpointer

	_arg0 = (*C.GSocketClient)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.gchar)(C.CString(uri))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.guint16(defaultPort)
	_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg4 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg5 = C.gpointer(box.Assign(callback))

	C.g_socket_client_connect_to_uri_async(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
}

func (c socketClient) ConnectToURIFinishSocketClient(result AsyncResult) (SocketConnection, error) {
	var _arg0 *C.GSocketClient     // out
	var _arg1 *C.GAsyncResult      // out
	var _cret *C.GSocketConnection // in
	var _cerr *C.GError            // in

	_arg0 = (*C.GSocketClient)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(result.Native()))

	_cret = C.g_socket_client_connect_to_uri_finish(_arg0, _arg1, &_cerr)

	var _socketConnection SocketConnection // out
	var _goerr error                       // out

	_socketConnection = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(SocketConnection)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _socketConnection, _goerr
}

func (c socketClient) EnableProxy() bool {
	var _arg0 *C.GSocketClient // out
	var _cret C.gboolean       // in

	_arg0 = (*C.GSocketClient)(unsafe.Pointer(c.Native()))

	_cret = C.g_socket_client_get_enable_proxy(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (c socketClient) Family() SocketFamily {
	var _arg0 *C.GSocketClient // out
	var _cret C.GSocketFamily  // in

	_arg0 = (*C.GSocketClient)(unsafe.Pointer(c.Native()))

	_cret = C.g_socket_client_get_family(_arg0)

	var _socketFamily SocketFamily // out

	_socketFamily = SocketFamily(_cret)

	return _socketFamily
}

func (c socketClient) LocalAddress() SocketAddress {
	var _arg0 *C.GSocketClient  // out
	var _cret *C.GSocketAddress // in

	_arg0 = (*C.GSocketClient)(unsafe.Pointer(c.Native()))

	_cret = C.g_socket_client_get_local_address(_arg0)

	var _socketAddress SocketAddress // out

	_socketAddress = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(SocketAddress)

	return _socketAddress
}

func (c socketClient) Protocol() SocketProtocol {
	var _arg0 *C.GSocketClient  // out
	var _cret C.GSocketProtocol // in

	_arg0 = (*C.GSocketClient)(unsafe.Pointer(c.Native()))

	_cret = C.g_socket_client_get_protocol(_arg0)

	var _socketProtocol SocketProtocol // out

	_socketProtocol = SocketProtocol(_cret)

	return _socketProtocol
}

func (c socketClient) ProxyResolver() ProxyResolver {
	var _arg0 *C.GSocketClient  // out
	var _cret *C.GProxyResolver // in

	_arg0 = (*C.GSocketClient)(unsafe.Pointer(c.Native()))

	_cret = C.g_socket_client_get_proxy_resolver(_arg0)

	var _proxyResolver ProxyResolver // out

	_proxyResolver = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(ProxyResolver)

	return _proxyResolver
}

func (c socketClient) SocketType() SocketType {
	var _arg0 *C.GSocketClient // out
	var _cret C.GSocketType    // in

	_arg0 = (*C.GSocketClient)(unsafe.Pointer(c.Native()))

	_cret = C.g_socket_client_get_socket_type(_arg0)

	var _socketType SocketType // out

	_socketType = SocketType(_cret)

	return _socketType
}

func (c socketClient) Timeout() uint {
	var _arg0 *C.GSocketClient // out
	var _cret C.guint          // in

	_arg0 = (*C.GSocketClient)(unsafe.Pointer(c.Native()))

	_cret = C.g_socket_client_get_timeout(_arg0)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

func (c socketClient) TLS() bool {
	var _arg0 *C.GSocketClient // out
	var _cret C.gboolean       // in

	_arg0 = (*C.GSocketClient)(unsafe.Pointer(c.Native()))

	_cret = C.g_socket_client_get_tls(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (c socketClient) TLSValidationFlags() TLSCertificateFlags {
	var _arg0 *C.GSocketClient       // out
	var _cret C.GTlsCertificateFlags // in

	_arg0 = (*C.GSocketClient)(unsafe.Pointer(c.Native()))

	_cret = C.g_socket_client_get_tls_validation_flags(_arg0)

	var _tlsCertificateFlags TLSCertificateFlags // out

	_tlsCertificateFlags = TLSCertificateFlags(_cret)

	return _tlsCertificateFlags
}

func (c socketClient) SetEnableProxySocketClient(enable bool) {
	var _arg0 *C.GSocketClient // out
	var _arg1 C.gboolean       // out

	_arg0 = (*C.GSocketClient)(unsafe.Pointer(c.Native()))
	if enable {
		_arg1 = C.TRUE
	}

	C.g_socket_client_set_enable_proxy(_arg0, _arg1)
}

func (c socketClient) SetFamilySocketClient(family SocketFamily) {
	var _arg0 *C.GSocketClient // out
	var _arg1 C.GSocketFamily  // out

	_arg0 = (*C.GSocketClient)(unsafe.Pointer(c.Native()))
	_arg1 = C.GSocketFamily(family)

	C.g_socket_client_set_family(_arg0, _arg1)
}

func (c socketClient) SetLocalAddressSocketClient(address SocketAddress) {
	var _arg0 *C.GSocketClient  // out
	var _arg1 *C.GSocketAddress // out

	_arg0 = (*C.GSocketClient)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.GSocketAddress)(unsafe.Pointer(address.Native()))

	C.g_socket_client_set_local_address(_arg0, _arg1)
}

func (c socketClient) SetProtocolSocketClient(protocol SocketProtocol) {
	var _arg0 *C.GSocketClient  // out
	var _arg1 C.GSocketProtocol // out

	_arg0 = (*C.GSocketClient)(unsafe.Pointer(c.Native()))
	_arg1 = C.GSocketProtocol(protocol)

	C.g_socket_client_set_protocol(_arg0, _arg1)
}

func (c socketClient) SetProxyResolverSocketClient(proxyResolver ProxyResolver) {
	var _arg0 *C.GSocketClient  // out
	var _arg1 *C.GProxyResolver // out

	_arg0 = (*C.GSocketClient)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.GProxyResolver)(unsafe.Pointer(proxyResolver.Native()))

	C.g_socket_client_set_proxy_resolver(_arg0, _arg1)
}

func (c socketClient) SetSocketTypeSocketClient(typ SocketType) {
	var _arg0 *C.GSocketClient // out
	var _arg1 C.GSocketType    // out

	_arg0 = (*C.GSocketClient)(unsafe.Pointer(c.Native()))
	_arg1 = C.GSocketType(typ)

	C.g_socket_client_set_socket_type(_arg0, _arg1)
}

func (c socketClient) SetTimeoutSocketClient(timeout uint) {
	var _arg0 *C.GSocketClient // out
	var _arg1 C.guint          // out

	_arg0 = (*C.GSocketClient)(unsafe.Pointer(c.Native()))
	_arg1 = C.guint(timeout)

	C.g_socket_client_set_timeout(_arg0, _arg1)
}

func (c socketClient) SetTLSSocketClient(tls bool) {
	var _arg0 *C.GSocketClient // out
	var _arg1 C.gboolean       // out

	_arg0 = (*C.GSocketClient)(unsafe.Pointer(c.Native()))
	if tls {
		_arg1 = C.TRUE
	}

	C.g_socket_client_set_tls(_arg0, _arg1)
}

func (c socketClient) SetTLSValidationFlagsSocketClient(flags TLSCertificateFlags) {
	var _arg0 *C.GSocketClient       // out
	var _arg1 C.GTlsCertificateFlags // out

	_arg0 = (*C.GSocketClient)(unsafe.Pointer(c.Native()))
	_arg1 = C.GTlsCertificateFlags(flags)

	C.g_socket_client_set_tls_validation_flags(_arg0, _arg1)
}
