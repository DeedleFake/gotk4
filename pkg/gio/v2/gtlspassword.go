// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gio-2.0 gio-unix-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gio/gdesktopappinfo.h>
// #include <gio/gfiledescriptorbased.h>
// #include <gio/gio.h>
// #include <gio/gunixconnection.h>
// #include <gio/gunixcredentialsmessage.h>
// #include <gio/gunixfdlist.h>
// #include <gio/gunixfdmessage.h>
// #include <gio/gunixinputstream.h>
// #include <gio/gunixmounts.h>
// #include <gio/gunixoutputstream.h>
// #include <gio/gunixsocketaddress.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_tls_password_get_type()), F: marshalTLSPassword},
	})
}

// TLSPassword holds a password used in TLS.
type TLSPassword interface {
	gextras.Objector

	// Description: get a description string about what the password will be
	// used for.
	Description() string
	// Flags: get flags about the password.
	Flags() TLSPasswordFlags
	// Value: get the password value. If @length is not nil then it will be
	// filled in with the length of the password value. (Note that the password
	// value is not nul-terminated, so you can only pass nil for @length in
	// contexts where you know the password will have a certain fixed length.)
	Value(length uint) byte
	// Warning: get a user readable translated warning. Usually this warning is
	// a representation of the password flags returned from
	// g_tls_password_get_flags().
	Warning() string
	// SetDescription: set a description string about what the password will be
	// used for.
	SetDescription(description string)
	// SetFlags: set flags about the password.
	SetFlags(flags TLSPasswordFlags)
	// SetValue: set the value for this password. The @value will be copied by
	// the password object.
	//
	// Specify the @length, for a non-nul-terminated password. Pass -1 as
	// @length if using a nul-terminated password, and @length will be
	// calculated automatically. (Note that the terminating nul is not
	// considered part of the password in this case.)
	SetValue()
	// SetWarning: set a user readable translated warning. Usually this warning
	// is a representation of the password flags returned from
	// g_tls_password_get_flags().
	SetWarning(warning string)
}

// tlsPassword implements the TLSPassword interface.
type tlsPassword struct {
	gextras.Objector
}

var _ TLSPassword = (*tlsPassword)(nil)

// WrapTLSPassword wraps a GObject to the right type. It is
// primarily used internally.
func WrapTLSPassword(obj *externglib.Object) TLSPassword {
	return TLSPassword{
		Objector: obj,
	}
}

func marshalTLSPassword(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapTLSPassword(obj), nil
}

// NewTLSPassword constructs a class TLSPassword.
func NewTLSPassword(flags TLSPasswordFlags, description string) TLSPassword {
	var arg1 C.GTlsPasswordFlags
	var arg2 *C.gchar

	arg1 = (C.GTlsPasswordFlags)(flags)
	arg2 = (*C.gchar)(C.CString(description))
	defer C.free(unsafe.Pointer(arg2))

	cret := new(C.GTlsPassword)
	var goret TLSPassword

	cret = C.g_tls_password_new(arg1, arg2)

	goret = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(cret.Native()))).(TLSPassword)

	return goret
}

// Description: get a description string about what the password will be
// used for.
func (p tlsPassword) Description() string {
	var arg0 *C.GTlsPassword

	arg0 = (*C.GTlsPassword)(unsafe.Pointer(p.Native()))

	var cret *C.gchar
	var goret string

	cret = C.g_tls_password_get_description(arg0)

	goret = C.GoString(cret)

	return goret
}

// Flags: get flags about the password.
func (p tlsPassword) Flags() TLSPasswordFlags {
	var arg0 *C.GTlsPassword

	arg0 = (*C.GTlsPassword)(unsafe.Pointer(p.Native()))

	var cret C.GTlsPasswordFlags
	var goret TLSPasswordFlags

	cret = C.g_tls_password_get_flags(arg0)

	goret = TLSPasswordFlags(cret)

	return goret
}

// Value: get the password value. If @length is not nil then it will be
// filled in with the length of the password value. (Note that the password
// value is not nul-terminated, so you can only pass nil for @length in
// contexts where you know the password will have a certain fixed length.)
func (p tlsPassword) Value(length uint) byte {
	var arg0 *C.GTlsPassword
	var arg1 *C.gsize

	arg0 = (*C.GTlsPassword)(unsafe.Pointer(p.Native()))
	arg1 = *C.gsize(length)

	var cret *C.guchar
	var goret byte

	cret = C.g_tls_password_get_value(arg0, arg1)

	goret = byte(cret)

	return goret
}

// Warning: get a user readable translated warning. Usually this warning is
// a representation of the password flags returned from
// g_tls_password_get_flags().
func (p tlsPassword) Warning() string {
	var arg0 *C.GTlsPassword

	arg0 = (*C.GTlsPassword)(unsafe.Pointer(p.Native()))

	var cret *C.gchar
	var goret string

	cret = C.g_tls_password_get_warning(arg0)

	goret = C.GoString(cret)

	return goret
}

// SetDescription: set a description string about what the password will be
// used for.
func (p tlsPassword) SetDescription(description string) {
	var arg0 *C.GTlsPassword
	var arg1 *C.gchar

	arg0 = (*C.GTlsPassword)(unsafe.Pointer(p.Native()))
	arg1 = (*C.gchar)(C.CString(description))
	defer C.free(unsafe.Pointer(arg1))

	C.g_tls_password_set_description(arg0, arg1)
}

// SetFlags: set flags about the password.
func (p tlsPassword) SetFlags(flags TLSPasswordFlags) {
	var arg0 *C.GTlsPassword
	var arg1 C.GTlsPasswordFlags

	arg0 = (*C.GTlsPassword)(unsafe.Pointer(p.Native()))
	arg1 = (C.GTlsPasswordFlags)(flags)

	C.g_tls_password_set_flags(arg0, arg1)
}

// SetValue: set the value for this password. The @value will be copied by
// the password object.
//
// Specify the @length, for a non-nul-terminated password. Pass -1 as
// @length if using a nul-terminated password, and @length will be
// calculated automatically. (Note that the terminating nul is not
// considered part of the password in this case.)
func (p tlsPassword) SetValue() {
	var arg0 *C.GTlsPassword

	arg0 = (*C.GTlsPassword)(unsafe.Pointer(p.Native()))

	C.g_tls_password_set_value(arg0, arg1, arg2)
}

// SetWarning: set a user readable translated warning. Usually this warning
// is a representation of the password flags returned from
// g_tls_password_get_flags().
func (p tlsPassword) SetWarning(warning string) {
	var arg0 *C.GTlsPassword
	var arg1 *C.gchar

	arg0 = (*C.GTlsPassword)(unsafe.Pointer(p.Native()))
	arg1 = (*C.gchar)(C.CString(warning))
	defer C.free(unsafe.Pointer(arg1))

	C.g_tls_password_set_warning(arg0, arg1)
}
