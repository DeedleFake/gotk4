// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"github.com/diamondburned/gotk4/internal/box"
	"github.com/diamondburned/gotk4/internal/gerror"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gio-2.0 gio-unix-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gio/gdesktopappinfo.h>
// #include <gio/gfiledescriptorbased.h>
// #include <gio/gio.h>
// #include <gio/gunixconnection.h>
// #include <gio/gunixcredentialsmessage.h>
// #include <gio/gunixfdlist.h>
// #include <gio/gunixfdmessage.h>
// #include <gio/gunixinputstream.h>
// #include <gio/gunixmounts.h>
// #include <gio/gunixoutputstream.h>
// #include <gio/gunixsocketaddress.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_network_monitor_get_type()), F: marshalNetworkMonitor},
	})
}

// NetworkMonitorOverrider contains methods that are overridable. This
// interface is a subset of the interface NetworkMonitor.
type NetworkMonitorOverrider interface {
	// CanReach attempts to determine whether or not the host pointed to by
	// @connectable can be reached, without actually trying to connect to it.
	//
	// This may return true even when Monitor:network-available is false, if,
	// for example, @monitor can determine that @connectable refers to a host on
	// a local network.
	//
	// If @monitor believes that an attempt to connect to @connectable will
	// succeed, it will return true. Otherwise, it will return false and set
	// @error to an appropriate error (such as G_IO_ERROR_HOST_UNREACHABLE).
	//
	// Note that although this does not attempt to connect to @connectable, it
	// may still block for a brief period of time (eg, trying to do multicast
	// DNS on the local network), so if you do not want to block, you should use
	// g_network_monitor_can_reach_async().
	CanReach(connectable SocketConnectable, cancellable Cancellable) error
	// CanReachAsync: asynchronously attempts to determine whether or not the
	// host pointed to by @connectable can be reached, without actually trying
	// to connect to it.
	//
	// For more details, see g_network_monitor_can_reach().
	//
	// When the operation is finished, @callback will be called. You can then
	// call g_network_monitor_can_reach_finish() to get the result of the
	// operation.
	CanReachAsync(connectable SocketConnectable, cancellable Cancellable, callback AsyncReadyCallback)
	// CanReachFinish finishes an async network connectivity test. See
	// g_network_monitor_can_reach_async().
	CanReachFinish(result AsyncResult) error

	NetworkChanged(networkAvailable bool)
}

// NetworkMonitor provides an easy-to-use cross-platform API for monitoring
// network connectivity. On Linux, the available implementations are based on
// the kernel's netlink interface and on NetworkManager.
//
// There is also an implementation for use inside Flatpak sandboxes.
type NetworkMonitor interface {
	Initable
	NetworkMonitorOverrider

	// NetworkAvailable checks if the network is available. "Available" here
	// means that the system has a default route available for at least one of
	// IPv4 or IPv6. It does not necessarily imply that the public Internet is
	// reachable. See Monitor:network-available for more details.
	NetworkAvailable() bool
	// NetworkMetered checks if the network is metered. See
	// Monitor:network-metered for more details.
	NetworkMetered() bool
}

// networkMonitor implements the NetworkMonitor interface.
type networkMonitor struct {
	Initable
}

var _ NetworkMonitor = (*networkMonitor)(nil)

// WrapNetworkMonitor wraps a GObject to a type that implements interface
// NetworkMonitor. It is primarily used internally.
func WrapNetworkMonitor(obj *externglib.Object) NetworkMonitor {
	return NetworkMonitor{
		Initable: WrapInitable(obj),
	}
}

func marshalNetworkMonitor(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapNetworkMonitor(obj), nil
}

// CanReach attempts to determine whether or not the host pointed to by
// @connectable can be reached, without actually trying to connect to it.
//
// This may return true even when Monitor:network-available is false, if,
// for example, @monitor can determine that @connectable refers to a host on
// a local network.
//
// If @monitor believes that an attempt to connect to @connectable will
// succeed, it will return true. Otherwise, it will return false and set
// @error to an appropriate error (such as G_IO_ERROR_HOST_UNREACHABLE).
//
// Note that although this does not attempt to connect to @connectable, it
// may still block for a brief period of time (eg, trying to do multicast
// DNS on the local network), so if you do not want to block, you should use
// g_network_monitor_can_reach_async().
func (m networkMonitor) CanReach(connectable SocketConnectable, cancellable Cancellable) error {
	var _arg0 *C.GNetworkMonitor
	var _arg1 *C.GSocketConnectable
	var _arg2 *C.GCancellable

	_arg0 = (*C.GNetworkMonitor)(unsafe.Pointer(m.Native()))
	_arg1 = (*C.GSocketConnectable)(unsafe.Pointer(connectable.Native()))
	_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	var _cerr *C.GError

	C.g_network_monitor_can_reach(_arg0, _arg1, _arg2, _cerr)

	var _goerr error

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

// CanReachAsync: asynchronously attempts to determine whether or not the
// host pointed to by @connectable can be reached, without actually trying
// to connect to it.
//
// For more details, see g_network_monitor_can_reach().
//
// When the operation is finished, @callback will be called. You can then
// call g_network_monitor_can_reach_finish() to get the result of the
// operation.
func (m networkMonitor) CanReachAsync(connectable SocketConnectable, cancellable Cancellable, callback AsyncReadyCallback) {
	var _arg0 *C.GNetworkMonitor
	var _arg1 *C.GSocketConnectable
	var _arg2 *C.GCancellable
	var _arg3 C.GAsyncReadyCallback
	var _arg4 C.gpointer

	_arg0 = (*C.GNetworkMonitor)(unsafe.Pointer(m.Native()))
	_arg1 = (*C.GSocketConnectable)(unsafe.Pointer(connectable.Native()))
	_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg3 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg4 = C.gpointer(box.Assign(callback))

	C.g_network_monitor_can_reach_async(_arg0, _arg1, _arg2, _arg3, _arg4)
}

// CanReachFinish finishes an async network connectivity test. See
// g_network_monitor_can_reach_async().
func (m networkMonitor) CanReachFinish(result AsyncResult) error {
	var _arg0 *C.GNetworkMonitor
	var _arg1 *C.GAsyncResult

	_arg0 = (*C.GNetworkMonitor)(unsafe.Pointer(m.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(result.Native()))

	var _cerr *C.GError

	C.g_network_monitor_can_reach_finish(_arg0, _arg1, _cerr)

	var _goerr error

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

// NetworkAvailable checks if the network is available. "Available" here
// means that the system has a default route available for at least one of
// IPv4 or IPv6. It does not necessarily imply that the public Internet is
// reachable. See Monitor:network-available for more details.
func (m networkMonitor) NetworkAvailable() bool {
	var _arg0 *C.GNetworkMonitor

	_arg0 = (*C.GNetworkMonitor)(unsafe.Pointer(m.Native()))

	var _cret C.gboolean

	_cret = C.g_network_monitor_get_network_available(_arg0)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// NetworkMetered checks if the network is metered. See
// Monitor:network-metered for more details.
func (m networkMonitor) NetworkMetered() bool {
	var _arg0 *C.GNetworkMonitor

	_arg0 = (*C.GNetworkMonitor)(unsafe.Pointer(m.Native()))

	var _cret C.gboolean

	_cret = C.g_network_monitor_get_network_metered(_arg0)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}
