// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/core/gerror"
	"github.com/diamondburned/gotk4/core/gextras"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gio-2.0 gio-unix-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <gio/gdesktopappinfo.h>
// #include <gio/gfiledescriptorbased.h>
// #include <gio/gio.h>
// #include <gio/gunixconnection.h>
// #include <gio/gunixcredentialsmessage.h>
// #include <gio/gunixfdlist.h>
// #include <gio/gunixfdmessage.h>
// #include <gio/gunixinputstream.h>
// #include <gio/gunixmounts.h>
// #include <gio/gunixoutputstream.h>
// #include <gio/gunixsocketaddress.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_cancellable_get_type()), F: marshalCancellable},
	})
}

// Cancellable: GCancellable is a thread-safe operation cancellation stack used
// throughout GIO to allow for cancellation of synchronous and asynchronous
// operations.
type Cancellable interface {
	gextras.Objector

	CancelCancellable()

	DisconnectCancellable(handlerId uint32)

	Fd() int

	IsCancelledCancellable() bool

	MakePollfdCancellable(pollfd *glib.PollFD) bool

	PopCurrentCancellable()

	PushCurrentCancellable()

	ReleaseFdCancellable()

	ResetCancellable()

	SetErrorIfCancelledCancellable() error

	NewSourceCancellable() *glib.Source
}

// cancellable implements the Cancellable class.
type cancellable struct {
	gextras.Objector
}

// WrapCancellable wraps a GObject to the right type. It is
// primarily used internally.
func WrapCancellable(obj *externglib.Object) Cancellable {
	return cancellable{
		Objector: obj,
	}
}

func marshalCancellable(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapCancellable(obj), nil
}

func NewCancellable() Cancellable {
	var _cret *C.GCancellable // in

	_cret = C.g_cancellable_new()

	var _cancellable Cancellable // out

	_cancellable = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(Cancellable)

	return _cancellable
}

func (c cancellable) CancelCancellable() {
	var _arg0 *C.GCancellable // out

	_arg0 = (*C.GCancellable)(unsafe.Pointer(c.Native()))

	C.g_cancellable_cancel(_arg0)
}

func (c cancellable) DisconnectCancellable(handlerId uint32) {
	var _arg0 *C.GCancellable // out
	var _arg1 C.gulong        // out

	_arg0 = (*C.GCancellable)(unsafe.Pointer(c.Native()))
	_arg1 = C.gulong(handlerId)

	C.g_cancellable_disconnect(_arg0, _arg1)
}

func (c cancellable) Fd() int {
	var _arg0 *C.GCancellable // out
	var _cret C.int           // in

	_arg0 = (*C.GCancellable)(unsafe.Pointer(c.Native()))

	_cret = C.g_cancellable_get_fd(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (c cancellable) IsCancelledCancellable() bool {
	var _arg0 *C.GCancellable // out
	var _cret C.gboolean      // in

	_arg0 = (*C.GCancellable)(unsafe.Pointer(c.Native()))

	_cret = C.g_cancellable_is_cancelled(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (c cancellable) MakePollfdCancellable(pollfd *glib.PollFD) bool {
	var _arg0 *C.GCancellable // out
	var _arg1 *C.GPollFD      // out
	var _cret C.gboolean      // in

	_arg0 = (*C.GCancellable)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.GPollFD)(unsafe.Pointer(pollfd.Native()))

	_cret = C.g_cancellable_make_pollfd(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (c cancellable) PopCurrentCancellable() {
	var _arg0 *C.GCancellable // out

	_arg0 = (*C.GCancellable)(unsafe.Pointer(c.Native()))

	C.g_cancellable_pop_current(_arg0)
}

func (c cancellable) PushCurrentCancellable() {
	var _arg0 *C.GCancellable // out

	_arg0 = (*C.GCancellable)(unsafe.Pointer(c.Native()))

	C.g_cancellable_push_current(_arg0)
}

func (c cancellable) ReleaseFdCancellable() {
	var _arg0 *C.GCancellable // out

	_arg0 = (*C.GCancellable)(unsafe.Pointer(c.Native()))

	C.g_cancellable_release_fd(_arg0)
}

func (c cancellable) ResetCancellable() {
	var _arg0 *C.GCancellable // out

	_arg0 = (*C.GCancellable)(unsafe.Pointer(c.Native()))

	C.g_cancellable_reset(_arg0)
}

func (c cancellable) SetErrorIfCancelledCancellable() error {
	var _arg0 *C.GCancellable // out
	var _cerr *C.GError       // in

	_arg0 = (*C.GCancellable)(unsafe.Pointer(c.Native()))

	C.g_cancellable_set_error_if_cancelled(_arg0, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

func (c cancellable) NewSourceCancellable() *glib.Source {
	var _arg0 *C.GCancellable // out
	var _cret *C.GSource      // in

	_arg0 = (*C.GCancellable)(unsafe.Pointer(c.Native()))

	_cret = C.g_cancellable_source_new(_arg0)

	var _source *glib.Source // out

	_source = (*glib.Source)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(&_source, func(v **glib.Source) {
		C.free(unsafe.Pointer(v))
	})

	return _source
}
