// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/box"
	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gio-2.0 gio-unix-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <gio/gdesktopappinfo.h>
// #include <gio/gfiledescriptorbased.h>
// #include <gio/gio.h>
// #include <gio/gunixconnection.h>
// #include <gio/gunixcredentialsmessage.h>
// #include <gio/gunixfdlist.h>
// #include <gio/gunixfdmessage.h>
// #include <gio/gunixinputstream.h>
// #include <gio/gunixmounts.h>
// #include <gio/gunixoutputstream.h>
// #include <gio/gunixsocketaddress.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_application_get_type()), F: marshalApplication},
	})
}

// ApplicationOverrider contains methods that are overridable .
//
// As of right now, interface overriding and subclassing is not supported
// yet, so the interface currently has no use.
type ApplicationOverrider interface {
	// Activate activates the application.
	//
	// In essence, this results in the #GApplication::activate signal being
	// emitted in the primary instance.
	//
	// The application must be registered before calling this function.
	Activate()
	AddPlatformData(builder *glib.VariantBuilder)
	AfterEmit(platformData *glib.Variant)
	BeforeEmit(platformData *glib.Variant)
	CommandLine(commandLine ApplicationCommandLine) int
	DBusRegister(connection DBusConnection, objectPath string) error
	DBusUnregister(connection DBusConnection, objectPath string)
	HandleLocalOptions(options *glib.VariantDict) int
	NameLost() bool
	// Open opens the given files.
	//
	// In essence, this results in the #GApplication::open signal being emitted
	// in the primary instance.
	//
	// @n_files must be greater than zero.
	//
	// @hint is simply passed through to the ::open signal. It is intended to be
	// used by applications that have multiple modes for opening files (eg:
	// "view" vs "edit", etc). Unless you have a need for this functionality,
	// you should use "".
	//
	// The application must be registered before calling this function and it
	// must have the G_APPLICATION_HANDLES_OPEN flag set.
	Open(files []File, hint string)
	QuitMainloop()
	RunMainloop()
	Shutdown()
	Startup()
}

// Application is the foundation of an application. It wraps some low-level
// platform-specific services and is intended to act as the foundation for
// higher-level application classes such as Application or Application. In
// general, you should not use this class outside of a higher level framework.
//
// GApplication provides convenient life cycle management by maintaining a "use
// count" for the primary application instance. The use count can be changed
// using g_application_hold() and g_application_release(). If it drops to zero,
// the application exits. Higher-level classes such as Application employ the
// use count to ensure that the application stays alive as long as it has any
// opened windows.
//
// Another feature that GApplication (optionally) provides is process
// uniqueness. Applications can make use of this functionality by providing a
// unique application ID. If given, only one application with this ID can be
// running at a time per session. The session concept is platform-dependent, but
// corresponds roughly to a graphical desktop login. When your application is
// launched again, its arguments are passed through platform communication to
// the already running program. The already running instance of the program is
// called the "primary instance"; for non-unique applications this is always the
// current instance. On Linux, the D-Bus session bus is used for communication.
//
// The use of #GApplication differs from some other commonly-used uniqueness
// libraries (such as libunique) in important ways. The application is not
// expected to manually register itself and check if it is the primary instance.
// Instead, the main() function of a #GApplication should do very little more
// than instantiating the application instance, possibly connecting signal
// handlers, then calling g_application_run(). All checks for uniqueness are
// done internally. If the application is the primary instance then the startup
// signal is emitted and the mainloop runs. If the application is not the
// primary instance then a signal is sent to the primary instance and
// g_application_run() promptly returns. See the code examples below.
//
// If used, the expected form of an application identifier is the same as that
// of of a D-Bus well-known bus name
// (https://dbus.freedesktop.org/doc/dbus-specification.html#message-protocol-names-bus).
// Examples include: `com.example.MyApp`,
// `org.example.internal_apps.Calculator`, `org._7_zip.Archiver`. For details on
// valid application identifiers, see g_application_id_is_valid().
//
// On Linux, the application identifier is claimed as a well-known bus name on
// the user's session bus. This means that the uniqueness of your application is
// scoped to the current session. It also means that your application may
// provide additional services (through registration of other object paths) at
// that bus name. The registration of these object paths should be done with the
// shared GDBus session bus. Note that due to the internal architecture of
// GDBus, method calls can be dispatched at any time (even if a main loop is not
// running). For this reason, you must ensure that any object paths that you
// wish to register are registered before #GApplication attempts to acquire the
// bus name of your application (which happens in g_application_register()).
// Unfortunately, this means that you cannot use g_application_get_is_remote()
// to decide if you want to register object paths.
//
// GApplication also implements the Group and Map interfaces and lets you easily
// export actions by adding them with g_action_map_add_action(). When invoking
// an action by calling g_action_group_activate_action() on the application, it
// is always invoked in the primary instance. The actions are also exported on
// the session bus, and GIO provides the BusActionGroup wrapper to conveniently
// access them remotely. GIO provides a BusMenuModel wrapper for remote access
// to exported Models.
//
// There is a number of different entry points into a GApplication:
//
// - via 'Activate' (i.e. just starting the application)
//
// - via 'Open' (i.e. opening some files)
//
// - by handling a command-line
//
// - via activating an action
//
// The #GApplication::startup signal lets you handle the application
// initialization for all of these in a single place.
//
// Regardless of which of these entry points is used to start the application,
// GApplication passes some ‘platform data’ from the launching instance to the
// primary instance, in the form of a #GVariant dictionary mapping strings to
// variants. To use platform data, override the @before_emit or @after_emit
// virtual functions in your #GApplication subclass. When dealing with
// CommandLine objects, the platform data is directly available via
// g_application_command_line_get_cwd(),
// g_application_command_line_get_environ() and
// g_application_command_line_get_platform_data().
//
// As the name indicates, the platform data may vary depending on the operating
// system, but it always includes the current directory (key "cwd"), and
// optionally the environment (ie the set of environment variables and their
// values) of the calling process (key "environ"). The environment is only added
// to the platform data if the G_APPLICATION_SEND_ENVIRONMENT flag is set.
// #GApplication subclasses can add their own platform data by overriding the
// @add_platform_data virtual function. For instance, Application adds startup
// notification data in this way.
//
// To parse commandline arguments you may handle the #GApplication::command-line
// signal or override the local_command_line() vfunc, to parse them in either
// the primary instance or the local instance, respectively.
//
// For an example of opening files with a GApplication, see
// gapplication-example-open.c
// (https://git.gnome.org/browse/glib/tree/gio/tests/gapplication-example-open.c).
//
// For an example of using actions with GApplication, see
// gapplication-example-actions.c
// (https://git.gnome.org/browse/glib/tree/gio/tests/gapplication-example-actions.c).
//
// For an example of using extra D-Bus hooks with GApplication, see
// gapplication-example-dbushooks.c
// (https://git.gnome.org/browse/glib/tree/gio/tests/gapplication-example-dbushooks.c).
type Application interface {
	gextras.Objector

	// AsActionGroup casts the class to the ActionGroup interface.
	AsActionGroup() ActionGroup
	// AsActionMap casts the class to the ActionMap interface.
	AsActionMap() ActionMap

	// ActionAdded emits the Group::action-added signal on @action_group.
	//
	// This function should only be called by Group implementations.
	//
	// This method is inherited from ActionGroup
	ActionAdded(actionName string)
	// ActionEnabledChanged emits the Group::action-enabled-changed signal on
	// @action_group.
	//
	// This function should only be called by Group implementations.
	//
	// This method is inherited from ActionGroup
	ActionEnabledChanged(actionName string, enabled bool)
	// ActionRemoved emits the Group::action-removed signal on @action_group.
	//
	// This function should only be called by Group implementations.
	//
	// This method is inherited from ActionGroup
	ActionRemoved(actionName string)
	// ActionStateChanged emits the Group::action-state-changed signal on
	// @action_group.
	//
	// This function should only be called by Group implementations.
	//
	// This method is inherited from ActionGroup
	ActionStateChanged(actionName string, state *glib.Variant)
	// ActivateAction: activate the named action within @action_group.
	//
	// If the action is expecting a parameter, then the correct type of
	// parameter must be given as @parameter. If the action is expecting no
	// parameters then @parameter must be nil. See
	// g_action_group_get_action_parameter_type().
	//
	// If the Group implementation supports asynchronous remote activation over
	// D-Bus, this call may return before the relevant D-Bus traffic has been
	// sent, or any replies have been received. In order to block on such
	// asynchronous activation calls, g_dbus_connection_flush() should be called
	// prior to the code, which depends on the result of the action activation.
	// Without flushing the D-Bus connection, there is no guarantee that the
	// action would have been activated.
	//
	// The following code which runs in a remote app instance, shows an example
	// of a "quit" action being activated on the primary app instance over
	// D-Bus. Here g_dbus_connection_flush() is called before `exit()`. Without
	// g_dbus_connection_flush(), the "quit" action may fail to be activated on
	// the primary instance.
	//
	//    // call "quit" action on primary instance
	//    g_action_group_activate_action (G_ACTION_GROUP (app), "quit", NULL);
	//
	//    // make sure the action is activated now
	//    g_dbus_connection_flush (...);
	//
	//    g_debug ("application has been terminated. exiting.");
	//
	//    exit (0);
	//
	// This method is inherited from ActionGroup
	ActivateAction(actionName string, parameter *glib.Variant)
	// ChangeActionState: request for the state of the named action within
	// @action_group to be changed to @value.
	//
	// The action must be stateful and @value must be of the correct type. See
	// g_action_group_get_action_state_type().
	//
	// This call merely requests a change. The action may refuse to change its
	// state or may change its state to something other than @value. See
	// g_action_group_get_action_state_hint().
	//
	// If the @value GVariant is floating, it is consumed.
	//
	// This method is inherited from ActionGroup
	ChangeActionState(actionName string, value *glib.Variant)
	// GetActionEnabled checks if the named action within @action_group is
	// currently enabled.
	//
	// An action must be enabled in order to be activated or in order to have
	// its state changed from outside callers.
	//
	// This method is inherited from ActionGroup
	GetActionEnabled(actionName string) bool
	// GetActionParameterType queries the type of the parameter that must be
	// given when activating the named action within @action_group.
	//
	// When activating the action using g_action_group_activate_action(), the
	// #GVariant given to that function must be of the type returned by this
	// function.
	//
	// In the case that this function returns nil, you must not give any
	// #GVariant, but nil instead.
	//
	// The parameter type of a particular action will never change but it is
	// possible for an action to be removed and for a new action to be added
	// with the same name but a different parameter type.
	//
	// This method is inherited from ActionGroup
	GetActionParameterType(actionName string) *glib.VariantType
	// GetActionState queries the current state of the named action within
	// @action_group.
	//
	// If the action is not stateful then nil will be returned. If the action is
	// stateful then the type of the return value is the type given by
	// g_action_group_get_action_state_type().
	//
	// The return value (if non-nil) should be freed with g_variant_unref() when
	// it is no longer required.
	//
	// This method is inherited from ActionGroup
	GetActionState(actionName string) *glib.Variant
	// GetActionStateHint requests a hint about the valid range of values for
	// the state of the named action within @action_group.
	//
	// If nil is returned it either means that the action is not stateful or
	// that there is no hint about the valid range of values for the state of
	// the action.
	//
	// If a #GVariant array is returned then each item in the array is a
	// possible value for the state. If a #GVariant pair (ie: two-tuple) is
	// returned then the tuple specifies the inclusive lower and upper bound of
	// valid values for the state.
	//
	// In any case, the information is merely a hint. It may be possible to have
	// a state value outside of the hinted range and setting a value within the
	// range may fail.
	//
	// The return value (if non-nil) should be freed with g_variant_unref() when
	// it is no longer required.
	//
	// This method is inherited from ActionGroup
	GetActionStateHint(actionName string) *glib.Variant
	// GetActionStateType queries the type of the state of the named action
	// within @action_group.
	//
	// If the action is stateful then this function returns the Type of the
	// state. All calls to g_action_group_change_action_state() must give a
	// #GVariant of this type and g_action_group_get_action_state() will return
	// a #GVariant of the same type.
	//
	// If the action is not stateful then this function will return nil. In that
	// case, g_action_group_get_action_state() will return nil and you must not
	// call g_action_group_change_action_state().
	//
	// The state type of a particular action will never change but it is
	// possible for an action to be removed and for a new action to be added
	// with the same name but a different state type.
	//
	// This method is inherited from ActionGroup
	GetActionStateType(actionName string) *glib.VariantType
	// HasAction checks if the named action exists within @action_group.
	//
	// This method is inherited from ActionGroup
	HasAction(actionName string) bool
	// ListActions lists the actions contained within @action_group.
	//
	// The caller is responsible for freeing the list with g_strfreev() when it
	// is no longer required.
	//
	// This method is inherited from ActionGroup
	ListActions() []string
	// QueryAction queries all aspects of the named action within an
	// @action_group.
	//
	// This function acquires the information available from
	// g_action_group_has_action(), g_action_group_get_action_enabled(),
	// g_action_group_get_action_parameter_type(),
	// g_action_group_get_action_state_type(),
	// g_action_group_get_action_state_hint() and
	// g_action_group_get_action_state() with a single function call.
	//
	// This provides two main benefits.
	//
	// The first is the improvement in efficiency that comes with not having to
	// perform repeated lookups of the action in order to discover different
	// things about it. The second is that implementing Group can now be done by
	// only overriding this one virtual function.
	//
	// The interface provides a default implementation of this function that
	// calls the individual functions, as required, to fetch the information.
	// The interface also provides default implementations of those functions
	// that call this function. All implementations, therefore, must override
	// either this function or all of the others.
	//
	// If the action exists, true is returned and any of the requested fields
	// (as indicated by having a non-nil reference passed in) are filled. If the
	// action doesn't exist, false is returned and the fields may or may not
	// have been modified.
	//
	// This method is inherited from ActionGroup
	QueryAction(actionName string) (enabled bool, parameterType *glib.VariantType, stateType *glib.VariantType, stateHint *glib.Variant, state *glib.Variant, ok bool)
	// AddAction adds an action to the @action_map.
	//
	// If the action map already contains an action with the same name as
	// @action then the old action is dropped from the action map.
	//
	// The action map takes its own reference on @action.
	//
	// This method is inherited from ActionMap
	AddAction(action Action)
	// AddActionEntries: convenience function for creating multiple Action
	// instances and adding them to a Map.
	//
	// Each action is constructed as per one Entry.
	//
	//    static void
	//    activate_quit (GSimpleAction *simple,
	//                   GVariant      *parameter,
	//                   gpointer       user_data)
	//    {
	//      exit (0);
	//    }
	//
	//    static void
	//    activate_print_string (GSimpleAction *simple,
	//                           GVariant      *parameter,
	//                           gpointer       user_data)
	//    {
	//      g_print ("s\n", g_variant_get_string (parameter, NULL));
	//    }
	//
	//    static GActionGroup *
	//    create_action_group (void)
	//    {
	//      const GActionEntry entries[] = {
	//        { "quit",         activate_quit              },
	//        { "print-string", activate_print_string, "s" }
	//      };
	//      GSimpleActionGroup *group;
	//
	//      group = g_simple_action_group_new ();
	//      g_action_map_add_action_entries (G_ACTION_MAP (group), entries, G_N_ELEMENTS (entries), NULL);
	//
	//      return G_ACTION_GROUP (group);
	//    }
	//
	// This method is inherited from ActionMap
	AddActionEntries(entries []ActionEntry, userData interface{})
	// LookupAction looks up the action with the name @action_name in
	// @action_map.
	//
	// If no such action exists, returns nil.
	//
	// This method is inherited from ActionMap
	LookupAction(actionName string) Action
	// RemoveAction removes the named action from the action map.
	//
	// If no action of this name is in the map then nothing happens.
	//
	// This method is inherited from ActionMap
	RemoveAction(actionName string)

	// Activate activates the application.
	//
	// In essence, this results in the #GApplication::activate signal being
	// emitted in the primary instance.
	//
	// The application must be registered before calling this function.
	Activate()
	// AddMainOption: add an option to be handled by @application.
	//
	// Calling this function is the equivalent of calling
	// g_application_add_main_option_entries() with a single Entry that has its
	// arg_data member set to nil.
	//
	// The parsed arguments will be packed into a Dict which is passed to
	// #GApplication::handle-local-options. If
	// G_APPLICATION_HANDLES_COMMAND_LINE is set, then it will also be sent to
	// the primary instance. See g_application_add_main_option_entries() for
	// more details.
	//
	// See Entry for more documentation of the arguments.
	AddMainOption(longName string, shortName byte, flags glib.OptionFlags, arg glib.OptionArg, description string, argDescription string)
	// AddMainOptionEntries adds main option entries to be handled by
	// @application.
	//
	// This function is comparable to g_option_context_add_main_entries().
	//
	// After the commandline arguments are parsed, the
	// #GApplication::handle-local-options signal will be emitted. At this
	// point, the application can inspect the values pointed to by @arg_data in
	// the given Entrys.
	//
	// Unlike Context, #GApplication supports giving a nil @arg_data for a
	// non-callback Entry. This results in the argument in question being packed
	// into a Dict which is also passed to #GApplication::handle-local-options,
	// where it can be inspected and modified. If
	// G_APPLICATION_HANDLES_COMMAND_LINE is set, then the resulting dictionary
	// is sent to the primary instance, where
	// g_application_command_line_get_options_dict() will return it. This
	// "packing" is done according to the type of the argument -- booleans for
	// normal flags, strings for strings, bytestrings for filenames, etc. The
	// packing only occurs if the flag is given (ie: we do not pack a "false"
	// #GVariant in the case that a flag is missing).
	//
	// In general, it is recommended that all commandline arguments are parsed
	// locally. The options dictionary should then be used to transmit the
	// result of the parsing to the primary instance, where
	// g_variant_dict_lookup() can be used. For local options, it is possible to
	// either use @arg_data in the usual way, or to consult (and potentially
	// remove) the option from the options dictionary.
	//
	// This function is new in GLib 2.40. Before then, the only real choice was
	// to send all of the commandline arguments (options and all) to the primary
	// instance for handling. #GApplication ignored them completely on the local
	// side. Calling this function "opts in" to the new behaviour, and in
	// particular, means that unrecognised options will be treated as errors.
	// Unrecognised options have never been ignored when
	// G_APPLICATION_HANDLES_COMMAND_LINE is unset.
	//
	// If #GApplication::handle-local-options needs to see the list of
	// filenames, then the use of G_OPTION_REMAINING is recommended. If
	// @arg_data is nil then G_OPTION_REMAINING can be used as a key into the
	// options dictionary. If you do use G_OPTION_REMAINING then you need to
	// handle these arguments for yourself because once they are consumed, they
	// will no longer be visible to the default handling (which treats them as
	// filenames to be opened).
	//
	// It is important to use the proper GVariant format when retrieving the
	// options with g_variant_dict_lookup(): - for G_OPTION_ARG_NONE, use `b` -
	// for G_OPTION_ARG_STRING, use `&s` - for G_OPTION_ARG_INT, use `i` - for
	// G_OPTION_ARG_INT64, use `x` - for G_OPTION_ARG_DOUBLE, use `d` - for
	// G_OPTION_ARG_FILENAME, use `^&ay` - for G_OPTION_ARG_STRING_ARRAY, use
	// `^a&s` - for G_OPTION_ARG_FILENAME_ARRAY, use `^a&ay`
	AddMainOptionEntries(entries []glib.OptionEntry)
	// AddOptionGroup adds a Group to the commandline handling of @application.
	//
	// This function is comparable to g_option_context_add_group().
	//
	// Unlike g_application_add_main_option_entries(), this function does not
	// deal with nil @arg_data and never transmits options to the primary
	// instance.
	//
	// The reason for that is because, by the time the options arrive at the
	// primary instance, it is typically too late to do anything with them.
	// Taking the GTK option group as an example: GTK will already have been
	// initialised by the time the #GApplication::command-line handler runs. In
	// the case that this is not the first-running instance of the application,
	// the existing instance may already have been running for a very long time.
	//
	// This means that the options from Group are only really usable in the case
	// that the instance of the application being run is the first instance.
	// Passing options like `--display=` or `--gdk-debug=` on future runs will
	// have no effect on the existing primary instance.
	//
	// Calling this function will cause the options in the supplied option group
	// to be parsed, but it does not cause you to be "opted in" to the new
	// functionality whereby unrecognised options are rejected even if
	// G_APPLICATION_HANDLES_COMMAND_LINE was given.
	AddOptionGroup(group *glib.OptionGroup)
	// BindBusyProperty marks @application as busy (see
	// g_application_mark_busy()) while @property on @object is true.
	//
	// The binding holds a reference to @application while it is active, but not
	// to @object. Instead, the binding is destroyed when @object is finalized.
	BindBusyProperty(object gextras.Objector, property string)
	// ApplicationID gets the unique identifier for @application.
	ApplicationID() string
	// DBusConnection gets the BusConnection being used by the application, or
	// nil.
	//
	// If #GApplication is using its D-Bus backend then this function will
	// return the BusConnection being used for uniqueness and communication with
	// the desktop environment and other instances of the application.
	//
	// If #GApplication is not using D-Bus then this function will return nil.
	// This includes the situation where the D-Bus backend would normally be in
	// use but we were unable to connect to the bus.
	//
	// This function must not be called before the application has been
	// registered. See g_application_get_is_registered().
	DBusConnection() DBusConnection
	// DBusObjectPath gets the D-Bus object path being used by the application,
	// or nil.
	//
	// If #GApplication is using its D-Bus backend then this function will
	// return the D-Bus object path that #GApplication is using. If the
	// application is the primary instance then there is an object published at
	// this path. If the application is not the primary instance then the result
	// of this function is undefined.
	//
	// If #GApplication is not using D-Bus then this function will return nil.
	// This includes the situation where the D-Bus backend would normally be in
	// use but we were unable to connect to the bus.
	//
	// This function must not be called before the application has been
	// registered. See g_application_get_is_registered().
	DBusObjectPath() string
	// Flags gets the flags for @application.
	//
	// See Flags.
	Flags() ApplicationFlags
	// InactivityTimeout gets the current inactivity timeout for the
	// application.
	//
	// This is the amount of time (in milliseconds) after the last call to
	// g_application_release() before the application stops running.
	InactivityTimeout() uint
	// IsBusy gets the application's current busy state, as set through
	// g_application_mark_busy() or g_application_bind_busy_property().
	IsBusy() bool
	// IsRegistered checks if @application is registered.
	//
	// An application is registered if g_application_register() has been
	// successfully called.
	IsRegistered() bool
	// IsRemote checks if @application is remote.
	//
	// If @application is remote then it means that another instance of
	// application already exists (the 'primary' instance). Calls to perform
	// actions on @application will result in the actions being performed by the
	// primary instance.
	//
	// The value of this property cannot be accessed before
	// g_application_register() has been called. See
	// g_application_get_is_registered().
	IsRemote() bool
	// ResourceBasePath gets the resource base path of @application.
	//
	// See g_application_set_resource_base_path() for more information.
	ResourceBasePath() string
	// Hold increases the use count of @application.
	//
	// Use this function to indicate that the application has a reason to
	// continue to run. For example, g_application_hold() is called by GTK+ when
	// a toplevel window is on the screen.
	//
	// To cancel the hold, call g_application_release().
	Hold()
	// MarkBusy increases the busy count of @application.
	//
	// Use this function to indicate that the application is busy, for instance
	// while a long running operation is pending.
	//
	// The busy state will be exposed to other processes, so a session shell
	// will use that information to indicate the state to the user (e.g. with a
	// spinner).
	//
	// To cancel the busy indication, use g_application_unmark_busy().
	MarkBusy()
	// Open opens the given files.
	//
	// In essence, this results in the #GApplication::open signal being emitted
	// in the primary instance.
	//
	// @n_files must be greater than zero.
	//
	// @hint is simply passed through to the ::open signal. It is intended to be
	// used by applications that have multiple modes for opening files (eg:
	// "view" vs "edit", etc). Unless you have a need for this functionality,
	// you should use "".
	//
	// The application must be registered before calling this function and it
	// must have the G_APPLICATION_HANDLES_OPEN flag set.
	Open(files []File, hint string)
	// Quit: immediately quits the application.
	//
	// Upon return to the mainloop, g_application_run() will return, calling
	// only the 'shutdown' function before doing so.
	//
	// The hold count is ignored. Take care if your code has called
	// g_application_hold() on the application and is therefore still expecting
	// it to exist. (Note that you may have called g_application_hold()
	// indirectly, for example through gtk_application_add_window().)
	//
	// The result of calling g_application_run() again after it returns is
	// unspecified.
	Quit()
	// Register attempts registration of the application.
	//
	// This is the point at which the application discovers if it is the primary
	// instance or merely acting as a remote for an already-existing primary
	// instance. This is implemented by attempting to acquire the application
	// identifier as a unique bus name on the session bus using GDBus.
	//
	// If there is no application ID or if G_APPLICATION_NON_UNIQUE was given,
	// then this process will always become the primary instance.
	//
	// Due to the internal architecture of GDBus, method calls can be dispatched
	// at any time (even if a main loop is not running). For this reason, you
	// must ensure that any object paths that you wish to register are
	// registered before calling this function.
	//
	// If the application has already been registered then true is returned with
	// no work performed.
	//
	// The #GApplication::startup signal is emitted if registration succeeds and
	// @application is the primary instance (including the non-unique case).
	//
	// In the event of an error (such as @cancellable being cancelled, or a
	// failure to connect to the session bus), false is returned and @error is
	// set appropriately.
	//
	// Note: the return value of this function is not an indicator that this
	// instance is or is not the primary instance of the application. See
	// g_application_get_is_remote() for that.
	Register(cancellable Cancellable) error
	// Release: decrease the use count of @application.
	//
	// When the use count reaches zero, the application will stop running.
	//
	// Never call this function except to cancel the effect of a previous call
	// to g_application_hold().
	Release()
	// Run runs the application.
	//
	// This function is intended to be run from main() and its return value is
	// intended to be returned by main(). Although you are expected to pass the
	// @argc, @argv parameters from main() to this function, it is possible to
	// pass nil if @argv is not available or commandline handling is not
	// required. Note that on Windows, @argc and @argv are ignored, and
	// g_win32_get_command_line() is called internally (for proper support of
	// Unicode commandline arguments).
	//
	// #GApplication will attempt to parse the commandline arguments. You can
	// add commandline flags to the list of recognised options by way of
	// g_application_add_main_option_entries(). After this, the
	// #GApplication::handle-local-options signal is emitted, from which the
	// application can inspect the values of its Entrys.
	//
	// #GApplication::handle-local-options is a good place to handle options
	// such as `--version`, where an immediate reply from the local process is
	// desired (instead of communicating with an already-running instance). A
	// #GApplication::handle-local-options handler can stop further processing
	// by returning a non-negative value, which then becomes the exit status of
	// the process.
	//
	// What happens next depends on the flags: if
	// G_APPLICATION_HANDLES_COMMAND_LINE was specified then the remaining
	// commandline arguments are sent to the primary instance, where a
	// #GApplication::command-line signal is emitted. Otherwise, the remaining
	// commandline arguments are assumed to be a list of files. If there are no
	// files listed, the application is activated via the
	// #GApplication::activate signal. If there are one or more files, and
	// G_APPLICATION_HANDLES_OPEN was specified then the files are opened via
	// the #GApplication::open signal.
	//
	// If you are interested in doing more complicated local handling of the
	// commandline then you should implement your own #GApplication subclass and
	// override local_command_line(). In this case, you most likely want to
	// return true from your local_command_line() implementation to suppress the
	// default handling. See
	// [gapplication-example-cmdline2.c][gapplication-example-cmdline2] for an
	// example.
	//
	// If, after the above is done, the use count of the application is zero
	// then the exit status is returned immediately. If the use count is
	// non-zero then the default main context is iterated until the use count
	// falls to zero, at which point 0 is returned.
	//
	// If the G_APPLICATION_IS_SERVICE flag is set, then the service will run
	// for as much as 10 seconds with a use count of zero while waiting for the
	// message that caused the activation to arrive. After that, if the use
	// count falls to zero the application will exit immediately, except in the
	// case that g_application_set_inactivity_timeout() is in use.
	//
	// This function sets the prgname (g_set_prgname()), if not already set, to
	// the basename of argv[0].
	//
	// Much like g_main_loop_run(), this function will acquire the main context
	// for the duration that the application is running.
	//
	// Since 2.40, applications that are not explicitly flagged as services or
	// launchers (ie: neither G_APPLICATION_IS_SERVICE or
	// G_APPLICATION_IS_LAUNCHER are given as flags) will check (from the
	// default handler for local_command_line) if "--gapplication-service" was
	// given in the command line. If this flag is present then normal
	// commandline processing is interrupted and the G_APPLICATION_IS_SERVICE
	// flag is set. This provides a "compromise" solution whereby running an
	// application directly from the commandline will invoke it in the normal
	// way (which can be useful for debugging) while still allowing applications
	// to be D-Bus activated in service mode. The D-Bus service file should
	// invoke the executable with "--gapplication-service" as the sole
	// commandline argument. This approach is suitable for use by most graphical
	// applications but should not be used from applications like editors that
	// need precise control over when processes invoked via the commandline will
	// exit and what their exit status will be.
	Run(argv []string) int
	// SendNotification sends a notification on behalf of @application to the
	// desktop shell. There is no guarantee that the notification is displayed
	// immediately, or even at all.
	//
	// Notifications may persist after the application exits. It will be
	// D-Bus-activated when the notification or one of its actions is activated.
	//
	// Modifying @notification after this call has no effect. However, the
	// object can be reused for a later call to this function.
	//
	// @id may be any string that uniquely identifies the event for the
	// application. It does not need to be in any special format. For example,
	// "new-message" might be appropriate for a notification about new messages.
	//
	// If a previous notification was sent with the same @id, it will be
	// replaced with @notification and shown again as if it was a new
	// notification. This works even for notifications sent from a previous
	// execution of the application, as long as @id is the same string.
	//
	// @id may be nil, but it is impossible to replace or withdraw notifications
	// without an id.
	//
	// If @notification is no longer relevant, it can be withdrawn with
	// g_application_withdraw_notification().
	SendNotification(id string, notification Notification)
	// SetActionGroup: this used to be how actions were associated with a
	// #GApplication. Now there is Map for that.
	//
	// Deprecated: since version 2.32.
	SetActionGroup(actionGroup ActionGroup)
	// SetApplicationID sets the unique identifier for @application.
	//
	// The application id can only be modified if @application has not yet been
	// registered.
	//
	// If non-nil, the application id must be valid. See
	// g_application_id_is_valid().
	SetApplicationID(applicationId string)
	// SetDefault sets or unsets the default application for the process, as
	// returned by g_application_get_default().
	//
	// This function does not take its own reference on @application. If
	// @application is destroyed then the default application will revert back
	// to nil.
	SetDefault()
	// SetFlags sets the flags for @application.
	//
	// The flags can only be modified if @application has not yet been
	// registered.
	//
	// See Flags.
	SetFlags(flags ApplicationFlags)
	// SetInactivityTimeout sets the current inactivity timeout for the
	// application.
	//
	// This is the amount of time (in milliseconds) after the last call to
	// g_application_release() before the application stops running.
	//
	// This call has no side effects of its own. The value set here is only used
	// for next time g_application_release() drops the use count to zero. Any
	// timeouts currently in progress are not impacted.
	SetInactivityTimeout(inactivityTimeout uint)
	// SetOptionContextDescription adds a description to the @application option
	// context.
	//
	// See g_option_context_set_description() for more information.
	SetOptionContextDescription(description string)
	// SetOptionContextParameterString sets the parameter string to be used by
	// the commandline handling of @application.
	//
	// This function registers the argument to be passed to
	// g_option_context_new() when the internal Context of @application is
	// created.
	//
	// See g_option_context_new() for more information about @parameter_string.
	SetOptionContextParameterString(parameterString string)
	// SetOptionContextSummary adds a summary to the @application option
	// context.
	//
	// See g_option_context_set_summary() for more information.
	SetOptionContextSummary(summary string)
	// SetResourceBasePath sets (or unsets) the base resource path of
	// @application.
	//
	// The path is used to automatically load various [application
	// resources][gresource] such as menu layouts and action descriptions. The
	// various types of resources will be found at fixed names relative to the
	// given base path.
	//
	// By default, the resource base path is determined from the application ID
	// by prefixing '/' and replacing each '.' with '/'. This is done at the
	// time that the #GApplication object is constructed. Changes to the
	// application ID after that point will not have an impact on the resource
	// base path.
	//
	// As an example, if the application has an ID of "org.example.app" then the
	// default resource base path will be "/org/example/app". If this is a
	// Application (and you have not manually changed the path) then Gtk will
	// then search for the menus of the application at
	// "/org/example/app/gtk/menus.ui".
	//
	// See #GResource for more information about adding resources to your
	// application.
	//
	// You can disable automatic resource loading functionality by setting the
	// path to nil.
	//
	// Changing the resource base path once the application is running is not
	// recommended. The point at which the resource path is consulted for
	// forming paths for various purposes is unspecified. When writing a
	// sub-class of #GApplication you should either set the
	// #GApplication:resource-base-path property at construction time, or call
	// this function during the instance initialization. Alternatively, you can
	// call this function in the Class.startup virtual function, before chaining
	// up to the parent implementation.
	SetResourceBasePath(resourcePath string)
	// UnbindBusyProperty destroys a binding between @property and the busy
	// state of @application that was previously created with
	// g_application_bind_busy_property().
	UnbindBusyProperty(object gextras.Objector, property string)
	// UnmarkBusy decreases the busy count of @application.
	//
	// When the busy count reaches zero, the new state will be propagated to
	// other processes.
	//
	// This function must only be called to cancel the effect of a previous call
	// to g_application_mark_busy().
	UnmarkBusy()
	// WithdrawNotification withdraws a notification that was sent with
	// g_application_send_notification().
	//
	// This call does nothing if a notification with @id doesn't exist or the
	// notification was never sent.
	//
	// This function works even for notifications sent in previous executions of
	// this application, as long @id is the same as it was for the sent
	// notification.
	//
	// Note that notifications are dismissed when the user clicks on one of the
	// buttons in a notification or triggers its default action, so there is no
	// need to explicitly withdraw the notification in that case.
	WithdrawNotification(id string)
}

// application implements the Application interface.
type application struct {
	*externglib.Object
}

var _ Application = (*application)(nil)

// WrapApplication wraps a GObject to a type that implements
// interface Application. It is primarily used internally.
func WrapApplication(obj *externglib.Object) Application {
	return application{obj}
}

func marshalApplication(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapApplication(obj), nil
}

// NewApplication creates a new #GApplication instance.
//
// If non-nil, the application id must be valid. See
// g_application_id_is_valid().
//
// If no application ID is given then some features of #GApplication (most
// notably application uniqueness) will be disabled.
func NewApplication(applicationId string, flags ApplicationFlags) Application {
	var _arg1 *C.gchar            // out
	var _arg2 C.GApplicationFlags // out
	var _cret *C.GApplication     // in

	_arg1 = (*C.gchar)(C.CString(applicationId))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.GApplicationFlags(flags)

	_cret = C.g_application_new(_arg1, _arg2)

	var _application Application // out

	_application = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(Application)

	return _application
}

func (a application) AsActionGroup() ActionGroup {
	return WrapActionGroup(gextras.InternObject(a))
}

func (a application) AsActionMap() ActionMap {
	return WrapActionMap(gextras.InternObject(a))
}

func (a application) ActionAdded(actionName string) {
	WrapActionGroup(gextras.InternObject(a)).ActionAdded(actionName)
}

func (a application) ActionEnabledChanged(actionName string, enabled bool) {
	WrapActionGroup(gextras.InternObject(a)).ActionEnabledChanged(actionName, enabled)
}

func (a application) ActionRemoved(actionName string) {
	WrapActionGroup(gextras.InternObject(a)).ActionRemoved(actionName)
}

func (a application) ActionStateChanged(actionName string, state *glib.Variant) {
	WrapActionGroup(gextras.InternObject(a)).ActionStateChanged(actionName, state)
}

func (a application) ActivateAction(actionName string, parameter *glib.Variant) {
	WrapActionGroup(gextras.InternObject(a)).ActivateAction(actionName, parameter)
}

func (a application) ChangeActionState(actionName string, value *glib.Variant) {
	WrapActionGroup(gextras.InternObject(a)).ChangeActionState(actionName, value)
}

func (a application) GetActionEnabled(actionName string) bool {
	return WrapActionGroup(gextras.InternObject(a)).GetActionEnabled(actionName)
}

func (a application) GetActionParameterType(actionName string) *glib.VariantType {
	return WrapActionGroup(gextras.InternObject(a)).GetActionParameterType(actionName)
}

func (a application) GetActionState(actionName string) *glib.Variant {
	return WrapActionGroup(gextras.InternObject(a)).GetActionState(actionName)
}

func (a application) GetActionStateHint(actionName string) *glib.Variant {
	return WrapActionGroup(gextras.InternObject(a)).GetActionStateHint(actionName)
}

func (a application) GetActionStateType(actionName string) *glib.VariantType {
	return WrapActionGroup(gextras.InternObject(a)).GetActionStateType(actionName)
}

func (a application) HasAction(actionName string) bool {
	return WrapActionGroup(gextras.InternObject(a)).HasAction(actionName)
}

func (a application) ListActions() []string {
	return WrapActionGroup(gextras.InternObject(a)).ListActions()
}

func (a application) QueryAction(actionName string) (enabled bool, parameterType *glib.VariantType, stateType *glib.VariantType, stateHint *glib.Variant, state *glib.Variant, ok bool) {
	return WrapActionGroup(gextras.InternObject(a)).QueryAction(actionName)
}

func (a application) AddAction(action Action) {
	WrapActionMap(gextras.InternObject(a)).AddAction(action)
}

func (a application) AddActionEntries(entries []ActionEntry, userData interface{}) {
	WrapActionMap(gextras.InternObject(a)).AddActionEntries(entries, userData)
}

func (a application) LookupAction(actionName string) Action {
	return WrapActionMap(gextras.InternObject(a)).LookupAction(actionName)
}

func (a application) RemoveAction(actionName string) {
	WrapActionMap(gextras.InternObject(a)).RemoveAction(actionName)
}

func (a application) Activate() {
	var _arg0 *C.GApplication // out

	_arg0 = (*C.GApplication)(unsafe.Pointer(a.Native()))

	C.g_application_activate(_arg0)
}

func (a application) AddMainOption(longName string, shortName byte, flags glib.OptionFlags, arg glib.OptionArg, description string, argDescription string) {
	var _arg0 *C.GApplication // out
	var _arg1 *C.char         // out
	var _arg2 C.char          // out
	var _arg3 C.GOptionFlags  // out
	var _arg4 C.GOptionArg    // out
	var _arg5 *C.char         // out
	var _arg6 *C.char         // out

	_arg0 = (*C.GApplication)(unsafe.Pointer(a.Native()))
	_arg1 = (*C.char)(C.CString(longName))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.char(shortName)
	_arg3 = C.GOptionFlags(flags)
	_arg4 = C.GOptionArg(arg)
	_arg5 = (*C.char)(C.CString(description))
	defer C.free(unsafe.Pointer(_arg5))
	_arg6 = (*C.char)(C.CString(argDescription))
	defer C.free(unsafe.Pointer(_arg6))

	C.g_application_add_main_option(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6)
}

func (a application) AddMainOptionEntries(entries []glib.OptionEntry) {
	var _arg0 *C.GApplication // out
	var _arg1 *C.GOptionEntry

	_arg0 = (*C.GApplication)(unsafe.Pointer(a.Native()))
	{
		var zero glib.OptionEntry
		entries = append(entries, zero)
	}
	_arg1 = (*C.GOptionEntry)(unsafe.Pointer(&entries[0]))

	C.g_application_add_main_option_entries(_arg0, _arg1)
}

func (a application) AddOptionGroup(group *glib.OptionGroup) {
	var _arg0 *C.GApplication // out
	var _arg1 *C.GOptionGroup // out

	_arg0 = (*C.GApplication)(unsafe.Pointer(a.Native()))
	_arg1 = (*C.GOptionGroup)(unsafe.Pointer(group))

	C.g_application_add_option_group(_arg0, _arg1)
}

func (a application) BindBusyProperty(object gextras.Objector, property string) {
	var _arg0 *C.GApplication // out
	var _arg1 C.gpointer      // out
	var _arg2 *C.gchar        // out

	_arg0 = (*C.GApplication)(unsafe.Pointer(a.Native()))
	_arg1 = (C.gpointer)(unsafe.Pointer(object.Native()))
	_arg2 = (*C.gchar)(C.CString(property))
	defer C.free(unsafe.Pointer(_arg2))

	C.g_application_bind_busy_property(_arg0, _arg1, _arg2)
}

func (a application) ApplicationID() string {
	var _arg0 *C.GApplication // out
	var _cret *C.gchar        // in

	_arg0 = (*C.GApplication)(unsafe.Pointer(a.Native()))

	_cret = C.g_application_get_application_id(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

func (a application) DBusConnection() DBusConnection {
	var _arg0 *C.GApplication    // out
	var _cret *C.GDBusConnection // in

	_arg0 = (*C.GApplication)(unsafe.Pointer(a.Native()))

	_cret = C.g_application_get_dbus_connection(_arg0)

	var _dBusConnection DBusConnection // out

	_dBusConnection = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(DBusConnection)

	return _dBusConnection
}

func (a application) DBusObjectPath() string {
	var _arg0 *C.GApplication // out
	var _cret *C.gchar        // in

	_arg0 = (*C.GApplication)(unsafe.Pointer(a.Native()))

	_cret = C.g_application_get_dbus_object_path(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

func (a application) Flags() ApplicationFlags {
	var _arg0 *C.GApplication     // out
	var _cret C.GApplicationFlags // in

	_arg0 = (*C.GApplication)(unsafe.Pointer(a.Native()))

	_cret = C.g_application_get_flags(_arg0)

	var _applicationFlags ApplicationFlags // out

	_applicationFlags = ApplicationFlags(_cret)

	return _applicationFlags
}

func (a application) InactivityTimeout() uint {
	var _arg0 *C.GApplication // out
	var _cret C.guint         // in

	_arg0 = (*C.GApplication)(unsafe.Pointer(a.Native()))

	_cret = C.g_application_get_inactivity_timeout(_arg0)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

func (a application) IsBusy() bool {
	var _arg0 *C.GApplication // out
	var _cret C.gboolean      // in

	_arg0 = (*C.GApplication)(unsafe.Pointer(a.Native()))

	_cret = C.g_application_get_is_busy(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (a application) IsRegistered() bool {
	var _arg0 *C.GApplication // out
	var _cret C.gboolean      // in

	_arg0 = (*C.GApplication)(unsafe.Pointer(a.Native()))

	_cret = C.g_application_get_is_registered(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (a application) IsRemote() bool {
	var _arg0 *C.GApplication // out
	var _cret C.gboolean      // in

	_arg0 = (*C.GApplication)(unsafe.Pointer(a.Native()))

	_cret = C.g_application_get_is_remote(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (a application) ResourceBasePath() string {
	var _arg0 *C.GApplication // out
	var _cret *C.gchar        // in

	_arg0 = (*C.GApplication)(unsafe.Pointer(a.Native()))

	_cret = C.g_application_get_resource_base_path(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

func (a application) Hold() {
	var _arg0 *C.GApplication // out

	_arg0 = (*C.GApplication)(unsafe.Pointer(a.Native()))

	C.g_application_hold(_arg0)
}

func (a application) MarkBusy() {
	var _arg0 *C.GApplication // out

	_arg0 = (*C.GApplication)(unsafe.Pointer(a.Native()))

	C.g_application_mark_busy(_arg0)
}

func (a application) Open(files []File, hint string) {
	var _arg0 *C.GApplication // out
	var _arg1 **C.GFile
	var _arg2 C.gint
	var _arg3 *C.gchar // out

	_arg0 = (*C.GApplication)(unsafe.Pointer(a.Native()))
	_arg2 = C.gint(len(files))
	_arg1 = (**C.GFile)(C.malloc(C.ulong(len(files)) * C.ulong(unsafe.Sizeof(uint(0)))))
	defer C.free(unsafe.Pointer(_arg1))
	{
		out := unsafe.Slice(_arg1, len(files))
		for i := range files {
			out[i] = (*C.GFile)(unsafe.Pointer(files[i].Native()))
		}
	}
	_arg3 = (*C.gchar)(C.CString(hint))
	defer C.free(unsafe.Pointer(_arg3))

	C.g_application_open(_arg0, _arg1, _arg2, _arg3)
}

func (a application) Quit() {
	var _arg0 *C.GApplication // out

	_arg0 = (*C.GApplication)(unsafe.Pointer(a.Native()))

	C.g_application_quit(_arg0)
}

func (a application) Register(cancellable Cancellable) error {
	var _arg0 *C.GApplication // out
	var _arg1 *C.GCancellable // out
	var _cerr *C.GError       // in

	_arg0 = (*C.GApplication)(unsafe.Pointer(a.Native()))
	_arg1 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	C.g_application_register(_arg0, _arg1, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

func (a application) Release() {
	var _arg0 *C.GApplication // out

	_arg0 = (*C.GApplication)(unsafe.Pointer(a.Native()))

	C.g_application_release(_arg0)
}

func (a application) Run(argv []string) int {
	var _arg0 *C.GApplication // out
	var _arg2 **C.char
	var _arg1 C.int
	var _cret C.int // in

	_arg0 = (*C.GApplication)(unsafe.Pointer(a.Native()))
	_arg1 = C.int(len(argv))
	_arg2 = (**C.char)(C.malloc(C.ulong(len(argv)) * C.ulong(unsafe.Sizeof(uint(0)))))
	defer C.free(unsafe.Pointer(_arg2))
	{
		out := unsafe.Slice(_arg2, len(argv))
		for i := range argv {
			out[i] = (*C.char)(C.CString(argv[i]))
			defer C.free(unsafe.Pointer(out[i]))
		}
	}

	_cret = C.g_application_run(_arg0, _arg1, _arg2)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (a application) SendNotification(id string, notification Notification) {
	var _arg0 *C.GApplication  // out
	var _arg1 *C.gchar         // out
	var _arg2 *C.GNotification // out

	_arg0 = (*C.GApplication)(unsafe.Pointer(a.Native()))
	_arg1 = (*C.gchar)(C.CString(id))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.GNotification)(unsafe.Pointer(notification.Native()))

	C.g_application_send_notification(_arg0, _arg1, _arg2)
}

func (a application) SetActionGroup(actionGroup ActionGroup) {
	var _arg0 *C.GApplication // out
	var _arg1 *C.GActionGroup // out

	_arg0 = (*C.GApplication)(unsafe.Pointer(a.Native()))
	_arg1 = (*C.GActionGroup)(unsafe.Pointer(actionGroup.Native()))

	C.g_application_set_action_group(_arg0, _arg1)
}

func (a application) SetApplicationID(applicationId string) {
	var _arg0 *C.GApplication // out
	var _arg1 *C.gchar        // out

	_arg0 = (*C.GApplication)(unsafe.Pointer(a.Native()))
	_arg1 = (*C.gchar)(C.CString(applicationId))
	defer C.free(unsafe.Pointer(_arg1))

	C.g_application_set_application_id(_arg0, _arg1)
}

func (a application) SetDefault() {
	var _arg0 *C.GApplication // out

	_arg0 = (*C.GApplication)(unsafe.Pointer(a.Native()))

	C.g_application_set_default(_arg0)
}

func (a application) SetFlags(flags ApplicationFlags) {
	var _arg0 *C.GApplication     // out
	var _arg1 C.GApplicationFlags // out

	_arg0 = (*C.GApplication)(unsafe.Pointer(a.Native()))
	_arg1 = C.GApplicationFlags(flags)

	C.g_application_set_flags(_arg0, _arg1)
}

func (a application) SetInactivityTimeout(inactivityTimeout uint) {
	var _arg0 *C.GApplication // out
	var _arg1 C.guint         // out

	_arg0 = (*C.GApplication)(unsafe.Pointer(a.Native()))
	_arg1 = C.guint(inactivityTimeout)

	C.g_application_set_inactivity_timeout(_arg0, _arg1)
}

func (a application) SetOptionContextDescription(description string) {
	var _arg0 *C.GApplication // out
	var _arg1 *C.gchar        // out

	_arg0 = (*C.GApplication)(unsafe.Pointer(a.Native()))
	_arg1 = (*C.gchar)(C.CString(description))
	defer C.free(unsafe.Pointer(_arg1))

	C.g_application_set_option_context_description(_arg0, _arg1)
}

func (a application) SetOptionContextParameterString(parameterString string) {
	var _arg0 *C.GApplication // out
	var _arg1 *C.gchar        // out

	_arg0 = (*C.GApplication)(unsafe.Pointer(a.Native()))
	_arg1 = (*C.gchar)(C.CString(parameterString))
	defer C.free(unsafe.Pointer(_arg1))

	C.g_application_set_option_context_parameter_string(_arg0, _arg1)
}

func (a application) SetOptionContextSummary(summary string) {
	var _arg0 *C.GApplication // out
	var _arg1 *C.gchar        // out

	_arg0 = (*C.GApplication)(unsafe.Pointer(a.Native()))
	_arg1 = (*C.gchar)(C.CString(summary))
	defer C.free(unsafe.Pointer(_arg1))

	C.g_application_set_option_context_summary(_arg0, _arg1)
}

func (a application) SetResourceBasePath(resourcePath string) {
	var _arg0 *C.GApplication // out
	var _arg1 *C.gchar        // out

	_arg0 = (*C.GApplication)(unsafe.Pointer(a.Native()))
	_arg1 = (*C.gchar)(C.CString(resourcePath))
	defer C.free(unsafe.Pointer(_arg1))

	C.g_application_set_resource_base_path(_arg0, _arg1)
}

func (a application) UnbindBusyProperty(object gextras.Objector, property string) {
	var _arg0 *C.GApplication // out
	var _arg1 C.gpointer      // out
	var _arg2 *C.gchar        // out

	_arg0 = (*C.GApplication)(unsafe.Pointer(a.Native()))
	_arg1 = (C.gpointer)(unsafe.Pointer(object.Native()))
	_arg2 = (*C.gchar)(C.CString(property))
	defer C.free(unsafe.Pointer(_arg2))

	C.g_application_unbind_busy_property(_arg0, _arg1, _arg2)
}

func (a application) UnmarkBusy() {
	var _arg0 *C.GApplication // out

	_arg0 = (*C.GApplication)(unsafe.Pointer(a.Native()))

	C.g_application_unmark_busy(_arg0)
}

func (a application) WithdrawNotification(id string) {
	var _arg0 *C.GApplication // out
	var _arg1 *C.gchar        // out

	_arg0 = (*C.GApplication)(unsafe.Pointer(a.Native()))
	_arg1 = (*C.gchar)(C.CString(id))
	defer C.free(unsafe.Pointer(_arg1))

	C.g_application_withdraw_notification(_arg0, _arg1)
}
