// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/box"
	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gio-2.0 gio-unix-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <gio/gdesktopappinfo.h>
// #include <gio/gfiledescriptorbased.h>
// #include <gio/gio.h>
// #include <gio/gunixconnection.h>
// #include <gio/gunixcredentialsmessage.h>
// #include <gio/gunixfdlist.h>
// #include <gio/gunixfdmessage.h>
// #include <gio/gunixinputstream.h>
// #include <gio/gunixmounts.h>
// #include <gio/gunixoutputstream.h>
// #include <gio/gunixsocketaddress.h>
// #include <glib-object.h>
//
// void gotk4_AsyncReadyCallback(GObject*, GAsyncResult*, gpointer);
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_simple_async_result_get_type()), F: marshalSimpleAsyncResult},
	})
}

// SimpleAsyncReportGerrorInIdle reports an error in an idle function. Similar
// to g_simple_async_report_error_in_idle(), but takes a #GError rather than
// building a new one.
//
// Deprecated: since version 2.46.
func SimpleAsyncReportGerrorInIdle(object gextras.Objector, callback AsyncReadyCallback, err error) {
	var _arg1 *C.GObject            // out
	var _arg2 C.GAsyncReadyCallback // out
	var _arg3 C.gpointer
	var _arg4 *C.GError // out

	_arg1 = (*C.GObject)(unsafe.Pointer((&object).Native()))
	_arg2 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg3 = C.gpointer(box.Assign(callback))
	_arg4 = (*C.GError)(gerror.New(err))

	C.g_simple_async_report_gerror_in_idle(_arg1, _arg2, _arg3, _arg4)
}

// SimpleAsyncResult as of GLib 2.46, AsyncResult is deprecated in favor of
// #GTask, which provides a simpler API.
//
// AsyncResult implements Result.
//
// GSimpleAsyncResult handles ReadyCallbacks, error reporting, operation
// cancellation and the final state of an operation, completely transparent to
// the application. Results can be returned as a pointer e.g. for functions that
// return data that is collected asynchronously, a boolean value for checking
// the success or failure of an operation, or a #gssize for operations which
// return the number of bytes modified by the operation; all of the simple
// return cases are covered.
//
// Most of the time, an application will not need to know of the details of this
// API; it is handled transparently, and any necessary operations are handled by
// Result's interface. However, if implementing a new GIO module, for writing
// language bindings, or for complex applications that need better control of
// how asynchronous operations are completed, it is important to understand this
// functionality.
//
// GSimpleAsyncResults are tagged with the calling function to ensure that
// asynchronous functions and their finishing functions are used together
// correctly.
//
// To create a new AsyncResult, call g_simple_async_result_new(). If the result
// needs to be created for a #GError, use g_simple_async_result_new_from_error()
// or g_simple_async_result_new_take_error(). If a #GError is not available
// (e.g. the asynchronous operation's doesn't take a #GError argument), but the
// result still needs to be created for an error condition, use
// g_simple_async_result_new_error() (or g_simple_async_result_set_error_va() if
// your application or binding requires passing a variable argument list
// directly), and the error can then be propagated through the use of
// g_simple_async_result_propagate_error().
//
// An asynchronous operation can be made to ignore a cancellation event by
// calling g_simple_async_result_set_handle_cancellation() with a AsyncResult
// for the operation and false. This is useful for operations that are dangerous
// to cancel, such as close (which would cause a leak if cancelled before being
// run).
//
// GSimpleAsyncResult can integrate into GLib's event loop, Loop, or it can use
// #GThreads. g_simple_async_result_complete() will finish an I/O task directly
// from the point where it is called. g_simple_async_result_complete_in_idle()
// will finish it from an idle handler in the [thread-default main
// context][g-main-context-push-thread-default] where the AsyncResult was
// created. g_simple_async_result_run_in_thread() will run the job in a separate
// thread and then use g_simple_async_result_complete_in_idle() to deliver the
// result.
//
// To set the results of an asynchronous function,
// g_simple_async_result_set_op_res_gpointer(),
// g_simple_async_result_set_op_res_gboolean(), and
// g_simple_async_result_set_op_res_gssize() are provided, setting the
// operation's result to a gpointer, gboolean, or gssize, respectively.
//
// Likewise, to get the result of an asynchronous function,
// g_simple_async_result_get_op_res_gpointer(),
// g_simple_async_result_get_op_res_gboolean(), and
// g_simple_async_result_get_op_res_gssize() are provided, getting the
// operation's result as a gpointer, gboolean, and gssize, respectively.
//
// For the details of the requirements implementations must respect, see Result.
// A typical implementation of an asynchronous operation using
// GSimpleAsyncResult looks something like this:
//
//    static void
//    baked_cb (Cake    *cake,
//              gpointer user_data)
//    {
//      // In this example, this callback is not given a reference to the cake,
//      // so the GSimpleAsyncResult has to take a reference to it.
//      GSimpleAsyncResult *result = user_data;
//
//      if (cake == NULL)
//        g_simple_async_result_set_error (result,
//                                         BAKER_ERRORS,
//                                         BAKER_ERROR_NO_FLOUR,
//                                         "Go to the supermarket");
//      else
//        g_simple_async_result_set_op_res_gpointer (result,
//                                                   g_object_ref (cake),
//                                                   g_object_unref);
//
//
//      // In this example, we assume that baked_cb is called as a callback from
//      // the mainloop, so it's safe to complete the operation synchronously here.
//      // If, however, _baker_prepare_cake () might call its callback without
//      // first returning to the mainloop — inadvisable, but some APIs do so —
//      // we would need to use g_simple_async_result_complete_in_idle().
//      g_simple_async_result_complete (result);
//      g_object_unref (result);
//    }
//
//    void
//    baker_bake_cake_async (Baker              *self,
//                           guint               radius,
//                           GAsyncReadyCallback callback,
//                           gpointer            user_data)
//    {
//      GSimpleAsyncResult *simple;
//      Cake               *cake;
//
//      if (radius < 3)
//        {
//          g_simple_async_report_error_in_idle (G_OBJECT (self),
//                                               callback,
//                                               user_data,
//                                               BAKER_ERRORS,
//                                               BAKER_ERROR_TOO_SMALL,
//                                               "ucm radius cakes are silly",
//                                               radius);
//          return;
//        }
//
//      simple = g_simple_async_result_new (G_OBJECT (self),
//                                          callback,
//                                          user_data,
//                                          baker_bake_cake_async);
//      cake = _baker_get_cached_cake (self, radius);
//
//      if (cake != NULL)
//        {
//          g_simple_async_result_set_op_res_gpointer (simple,
//                                                     g_object_ref (cake),
//                                                     g_object_unref);
//          g_simple_async_result_complete_in_idle (simple);
//          g_object_unref (simple);
//          // Drop the reference returned by _baker_get_cached_cake();
//          // the GSimpleAsyncResult has taken its own reference.
//          g_object_unref (cake);
//          return;
//        }
//
//      _baker_prepare_cake (self, radius, baked_cb, simple);
//    }
//
//    Cake *
//    baker_bake_cake_finish (Baker        *self,
//                            GAsyncResult *result,
//                            GError      **error)
//    {
//      GSimpleAsyncResult *simple;
//      Cake               *cake;
//
//      g_return_val_if_fail (g_simple_async_result_is_valid (result,
//                                                            G_OBJECT (self),
//                                                            baker_bake_cake_async),
//                            NULL);
//
//      simple = (GSimpleAsyncResult *) result;
//
//      if (g_simple_async_result_propagate_error (simple, error))
//        return NULL;
//
//      cake = CAKE (g_simple_async_result_get_op_res_gpointer (simple));
//      return g_object_ref (cake);
//    }
type SimpleAsyncResult interface {
	gextras.Objector

	// Complete completes an asynchronous I/O job immediately. Must be called in
	// the thread where the asynchronous result was to be delivered, as it
	// invokes the callback directly. If you are in a different thread use
	// g_simple_async_result_complete_in_idle().
	//
	// Calling this function takes a reference to @simple for as long as is
	// needed to complete the call.
	//
	// Deprecated: since version 2.46.
	Complete()
	// CompleteInIdle completes an asynchronous function in an idle handler in
	// the [thread-default main context][g-main-context-push-thread-default] of
	// the thread that @simple was initially created in (and re-pushes that
	// context around the invocation of the callback).
	//
	// Calling this function takes a reference to @simple for as long as is
	// needed to complete the call.
	//
	// Deprecated: since version 2.46.
	CompleteInIdle()
	// OpResGboolean gets the operation result boolean from within the
	// asynchronous result.
	//
	// Deprecated: since version 2.46.
	OpResGboolean() bool
	// OpResGssize gets a gssize from the asynchronous result.
	//
	// Deprecated: since version 2.46.
	OpResGssize() int
	// PropagateError propagates an error from within the simple asynchronous
	// result to a given destination.
	//
	// If the #GCancellable given to a prior call to
	// g_simple_async_result_set_check_cancellable() is cancelled then this
	// function will return true with @dest set appropriately.
	//
	// Deprecated: since version 2.46.
	PropagateError() error
	// SetCheckCancellable sets a #GCancellable to check before dispatching
	// results.
	//
	// This function has one very specific purpose: the provided cancellable is
	// checked at the time of g_simple_async_result_propagate_error() If it is
	// cancelled, these functions will return an "Operation was cancelled" error
	// (G_IO_ERROR_CANCELLED).
	//
	// Implementors of cancellable asynchronous functions should use this in
	// order to provide a guarantee to their callers that cancelling an async
	// operation will reliably result in an error being returned for that
	// operation (even if a positive result for the operation has already been
	// sent as an idle to the main context to be dispatched).
	//
	// The checking described above is done regardless of any call to the
	// unrelated g_simple_async_result_set_handle_cancellation() function.
	//
	// Deprecated: since version 2.46.
	SetCheckCancellable(checkCancellable Cancellable)
	// SetFromError sets the result from a #GError.
	//
	// Deprecated: since version 2.46.
	SetFromError(err error)
	// SetHandleCancellation sets whether to handle cancellation within the
	// asynchronous operation.
	//
	// This function has nothing to do with
	// g_simple_async_result_set_check_cancellable(). It only refers to the
	// #GCancellable passed to g_simple_async_result_run_in_thread().
	//
	// Deprecated: since version 2.46.
	SetHandleCancellation(handleCancellation bool)
	// SetOpResGboolean sets the operation result to a boolean within the
	// asynchronous result.
	//
	// Deprecated: since version 2.46.
	SetOpResGboolean(opRes bool)
	// SetOpResGssize sets the operation result within the asynchronous result
	// to the given @op_res.
	//
	// Deprecated: since version 2.46.
	SetOpResGssize(opRes int)
}

// SimpleAsyncResultClass implements the SimpleAsyncResult interface.
type SimpleAsyncResultClass struct {
	*externglib.Object
	AsyncResultInterface
}

var _ SimpleAsyncResult = (*SimpleAsyncResultClass)(nil)

func wrapSimpleAsyncResult(obj *externglib.Object) SimpleAsyncResult {
	return &SimpleAsyncResultClass{
		Object: obj,
		AsyncResultInterface: AsyncResultInterface{
			Object: obj,
		},
	}
}

func marshalSimpleAsyncResult(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapSimpleAsyncResult(obj), nil
}

// NewSimpleAsyncResult creates a AsyncResult.
//
// The common convention is to create the AsyncResult in the function that
// starts the asynchronous operation and use that same function as the
// @source_tag.
//
// If your operation supports cancellation with #GCancellable (which it probably
// should) then you should provide the user's cancellable to
// g_simple_async_result_set_check_cancellable() immediately after this function
// returns.
//
// Deprecated: since version 2.46.
func NewSimpleAsyncResult(sourceObject gextras.Objector, callback AsyncReadyCallback, sourceTag interface{}) *SimpleAsyncResultClass {
	var _arg1 *C.GObject            // out
	var _arg2 C.GAsyncReadyCallback // out
	var _arg3 C.gpointer
	var _arg4 C.gpointer            // out
	var _cret *C.GSimpleAsyncResult // in

	_arg1 = (*C.GObject)(unsafe.Pointer((&sourceObject).Native()))
	_arg2 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg3 = C.gpointer(box.Assign(callback))
	_arg4 = (C.gpointer)(box.Assign(sourceTag))

	_cret = C.g_simple_async_result_new(_arg1, _arg2, _arg3, _arg4)

	var _simpleAsyncResult *SimpleAsyncResultClass // out

	_simpleAsyncResult = gextras.CastObject(
		externglib.AssumeOwnership(unsafe.Pointer(_cret))).(*SimpleAsyncResultClass)

	return _simpleAsyncResult
}

// NewSimpleAsyncResultFromError creates a AsyncResult from an error condition.
//
// Deprecated: since version 2.46.
func NewSimpleAsyncResultFromError(sourceObject gextras.Objector, callback AsyncReadyCallback, err error) *SimpleAsyncResultClass {
	var _arg1 *C.GObject            // out
	var _arg2 C.GAsyncReadyCallback // out
	var _arg3 C.gpointer
	var _arg4 *C.GError             // out
	var _cret *C.GSimpleAsyncResult // in

	_arg1 = (*C.GObject)(unsafe.Pointer((&sourceObject).Native()))
	_arg2 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg3 = C.gpointer(box.Assign(callback))
	_arg4 = (*C.GError)(gerror.New(err))

	_cret = C.g_simple_async_result_new_from_error(_arg1, _arg2, _arg3, _arg4)

	var _simpleAsyncResult *SimpleAsyncResultClass // out

	_simpleAsyncResult = gextras.CastObject(
		externglib.AssumeOwnership(unsafe.Pointer(_cret))).(*SimpleAsyncResultClass)

	return _simpleAsyncResult
}

// Complete completes an asynchronous I/O job immediately. Must be called in the
// thread where the asynchronous result was to be delivered, as it invokes the
// callback directly. If you are in a different thread use
// g_simple_async_result_complete_in_idle().
//
// Calling this function takes a reference to @simple for as long as is needed
// to complete the call.
//
// Deprecated: since version 2.46.
func (s *SimpleAsyncResultClass) Complete() {
	var _arg0 *C.GSimpleAsyncResult // out

	_arg0 = (*C.GSimpleAsyncResult)(unsafe.Pointer((&s).Native()))

	C.g_simple_async_result_complete(_arg0)
}

// CompleteInIdle completes an asynchronous function in an idle handler in the
// [thread-default main context][g-main-context-push-thread-default] of the
// thread that @simple was initially created in (and re-pushes that context
// around the invocation of the callback).
//
// Calling this function takes a reference to @simple for as long as is needed
// to complete the call.
//
// Deprecated: since version 2.46.
func (s *SimpleAsyncResultClass) CompleteInIdle() {
	var _arg0 *C.GSimpleAsyncResult // out

	_arg0 = (*C.GSimpleAsyncResult)(unsafe.Pointer((&s).Native()))

	C.g_simple_async_result_complete_in_idle(_arg0)
}

// OpResGboolean gets the operation result boolean from within the asynchronous
// result.
//
// Deprecated: since version 2.46.
func (s *SimpleAsyncResultClass) OpResGboolean() bool {
	var _arg0 *C.GSimpleAsyncResult // out
	var _cret C.gboolean            // in

	_arg0 = (*C.GSimpleAsyncResult)(unsafe.Pointer((&s).Native()))

	_cret = C.g_simple_async_result_get_op_res_gboolean(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// OpResGssize gets a gssize from the asynchronous result.
//
// Deprecated: since version 2.46.
func (s *SimpleAsyncResultClass) OpResGssize() int {
	var _arg0 *C.GSimpleAsyncResult // out
	var _cret C.gssize              // in

	_arg0 = (*C.GSimpleAsyncResult)(unsafe.Pointer((&s).Native()))

	_cret = C.g_simple_async_result_get_op_res_gssize(_arg0)

	var _gssize int // out

	_gssize = int(_cret)

	return _gssize
}

// PropagateError propagates an error from within the simple asynchronous result
// to a given destination.
//
// If the #GCancellable given to a prior call to
// g_simple_async_result_set_check_cancellable() is cancelled then this function
// will return true with @dest set appropriately.
//
// Deprecated: since version 2.46.
func (s *SimpleAsyncResultClass) PropagateError() error {
	var _arg0 *C.GSimpleAsyncResult // out
	var _cerr *C.GError             // in

	_arg0 = (*C.GSimpleAsyncResult)(unsafe.Pointer((&s).Native()))

	C.g_simple_async_result_propagate_error(_arg0, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

// SetCheckCancellable sets a #GCancellable to check before dispatching results.
//
// This function has one very specific purpose: the provided cancellable is
// checked at the time of g_simple_async_result_propagate_error() If it is
// cancelled, these functions will return an "Operation was cancelled" error
// (G_IO_ERROR_CANCELLED).
//
// Implementors of cancellable asynchronous functions should use this in order
// to provide a guarantee to their callers that cancelling an async operation
// will reliably result in an error being returned for that operation (even if a
// positive result for the operation has already been sent as an idle to the
// main context to be dispatched).
//
// The checking described above is done regardless of any call to the unrelated
// g_simple_async_result_set_handle_cancellation() function.
//
// Deprecated: since version 2.46.
func (s *SimpleAsyncResultClass) SetCheckCancellable(checkCancellable Cancellable) {
	var _arg0 *C.GSimpleAsyncResult // out
	var _arg1 *C.GCancellable       // out

	_arg0 = (*C.GSimpleAsyncResult)(unsafe.Pointer((&s).Native()))
	_arg1 = (*C.GCancellable)(unsafe.Pointer((&checkCancellable).Native()))

	C.g_simple_async_result_set_check_cancellable(_arg0, _arg1)
}

// SetFromError sets the result from a #GError.
//
// Deprecated: since version 2.46.
func (s *SimpleAsyncResultClass) SetFromError(err error) {
	var _arg0 *C.GSimpleAsyncResult // out
	var _arg1 *C.GError             // out

	_arg0 = (*C.GSimpleAsyncResult)(unsafe.Pointer((&s).Native()))
	_arg1 = (*C.GError)(gerror.New(err))

	C.g_simple_async_result_set_from_error(_arg0, _arg1)
}

// SetHandleCancellation sets whether to handle cancellation within the
// asynchronous operation.
//
// This function has nothing to do with
// g_simple_async_result_set_check_cancellable(). It only refers to the
// #GCancellable passed to g_simple_async_result_run_in_thread().
//
// Deprecated: since version 2.46.
func (s *SimpleAsyncResultClass) SetHandleCancellation(handleCancellation bool) {
	var _arg0 *C.GSimpleAsyncResult // out
	var _arg1 C.gboolean            // out

	_arg0 = (*C.GSimpleAsyncResult)(unsafe.Pointer((&s).Native()))
	if handleCancellation {
		_arg1 = C.TRUE
	}

	C.g_simple_async_result_set_handle_cancellation(_arg0, _arg1)
}

// SetOpResGboolean sets the operation result to a boolean within the
// asynchronous result.
//
// Deprecated: since version 2.46.
func (s *SimpleAsyncResultClass) SetOpResGboolean(opRes bool) {
	var _arg0 *C.GSimpleAsyncResult // out
	var _arg1 C.gboolean            // out

	_arg0 = (*C.GSimpleAsyncResult)(unsafe.Pointer((&s).Native()))
	if opRes {
		_arg1 = C.TRUE
	}

	C.g_simple_async_result_set_op_res_gboolean(_arg0, _arg1)
}

// SetOpResGssize sets the operation result within the asynchronous result to
// the given @op_res.
//
// Deprecated: since version 2.46.
func (s *SimpleAsyncResultClass) SetOpResGssize(opRes int) {
	var _arg0 *C.GSimpleAsyncResult // out
	var _arg1 C.gssize              // out

	_arg0 = (*C.GSimpleAsyncResult)(unsafe.Pointer((&s).Native()))
	_arg1 = C.gssize(opRes)

	C.g_simple_async_result_set_op_res_gssize(_arg0, _arg1)
}
