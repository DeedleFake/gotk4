// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gio-2.0 gio-unix-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <stdbool.h>
// #include <glib-object.h>
// #include <gio/gdesktopappinfo.h>
// #include <gio/gfiledescriptorbased.h>
// #include <gio/gio.h>
// #include <gio/gunixconnection.h>
// #include <gio/gunixcredentialsmessage.h>
// #include <gio/gunixfdlist.h>
// #include <gio/gunixfdmessage.h>
// #include <gio/gunixinputstream.h>
// #include <gio/gunixmounts.h>
// #include <gio/gunixoutputstream.h>
// #include <gio/gunixsocketaddress.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_filter_output_stream_get_type()), F: marshalFilterOutputStream},
	})
}

// FilterOutputStream: base class for output stream implementations that perform
// some kind of filtering operation on a base stream. Typical examples of
// filtering operations are character set conversion, compression and byte order
// flipping.
type FilterOutputStream interface {
	OutputStream

	// BaseStream gets the base stream for the filter stream.
	BaseStream() OutputStream
	// CloseBaseStream returns whether the base stream will be closed when
	// @stream is closed.
	CloseBaseStream() bool
	// SetCloseBaseStream sets whether the base stream will be closed when
	// @stream is closed.
	SetCloseBaseStream(closeBase bool)
}

// filterOutputStream implements the FilterOutputStream interface.
type filterOutputStream struct {
	OutputStream
}

var _ FilterOutputStream = (*filterOutputStream)(nil)

// WrapFilterOutputStream wraps a GObject to the right type. It is
// primarily used internally.
func WrapFilterOutputStream(obj *externglib.Object) FilterOutputStream {
	return FilterOutputStream{
		OutputStream: WrapOutputStream(obj),
	}
}

func marshalFilterOutputStream(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapFilterOutputStream(obj), nil
}

// BaseStream gets the base stream for the filter stream.
func (s filterOutputStream) BaseStream() OutputStream {
	var arg0 *C.GFilterOutputStream

	arg0 = (*C.GFilterOutputStream)(unsafe.Pointer(s.Native()))

	var cret *C.GOutputStream
	var goret1 OutputStream

	cret = C.g_filter_output_stream_get_base_stream(arg0)

	goret1 = gextras.CastObject(externglib.Take(unsafe.Pointer(cret.Native()))).(OutputStream)

	return goret1
}

// CloseBaseStream returns whether the base stream will be closed when
// @stream is closed.
func (s filterOutputStream) CloseBaseStream() bool {
	var arg0 *C.GFilterOutputStream

	arg0 = (*C.GFilterOutputStream)(unsafe.Pointer(s.Native()))

	var cret C.gboolean
	var goret1 bool

	cret = C.g_filter_output_stream_get_close_base_stream(arg0)

	goret1 = C.bool(cret) != C.false

	return goret1
}

// SetCloseBaseStream sets whether the base stream will be closed when
// @stream is closed.
func (s filterOutputStream) SetCloseBaseStream(closeBase bool) {
	var arg0 *C.GFilterOutputStream
	var arg1 C.gboolean

	arg0 = (*C.GFilterOutputStream)(unsafe.Pointer(s.Native()))
	if closeBase {
		arg1 = C.gboolean(1)
	}

	C.g_filter_output_stream_set_close_base_stream(arg0, closeBase)
}
