// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gio-2.0 gio-unix-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gio/gdesktopappinfo.h>
// #include <gio/gfiledescriptorbased.h>
// #include <gio/gio.h>
// #include <gio/gunixconnection.h>
// #include <gio/gunixcredentialsmessage.h>
// #include <gio/gunixfdlist.h>
// #include <gio/gunixfdmessage.h>
// #include <gio/gunixinputstream.h>
// #include <gio/gunixmounts.h>
// #include <gio/gunixoutputstream.h>
// #include <gio/gunixsocketaddress.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_dtls_client_connection_get_type()), F: marshalDTLSClientConnection},
	})
}

// NewDTLSClientConnection creates a new ClientConnection wrapping @base_socket
// which is assumed to communicate with the server identified by
// @server_identity.
func NewDTLSClientConnection(baseSocket DatagramBased, serverIdentity SocketConnectable) (dtlsClientConnection DTLSClientConnection, err error) {
	var arg1 *C.GDatagramBased
	var arg2 *C.GSocketConnectable
	var errout *C.GError

	arg1 = (*C.GDatagramBased)(unsafe.Pointer(baseSocket.Native()))
	arg2 = (*C.GSocketConnectable)(unsafe.Pointer(serverIdentity.Native()))

	var cret *C.GDatagramBased
	var goret1 DTLSClientConnection
	var goerr error

	cret = C.g_dtls_client_connection_new(baseSocket, serverIdentity, &errout)

	goret1 = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(cret.Native()))).(DTLSClientConnection)
	if errout != nil {
		goerr = fmt.Errorf("%d: %s", errout.code, C.GoString(errout.message))
		C.g_error_free(errout)
	}

	return goret1, goerr
}

// DTLSClientConnection is the client-side subclass of Connection, representing
// a client-side DTLS connection.
type DTLSClientConnection interface {
	DatagramBasedDTLSConnection

	// AcceptedCAS gets the list of distinguished names of the Certificate
	// Authorities that the server will accept certificates from. This will be
	// set during the TLS handshake if the server requests a certificate.
	// Otherwise, it will be nil.
	//
	// Each item in the list is a Array which contains the complete subject DN
	// of the certificate authority.
	AcceptedCAS() *glib.List
	// ServerIdentity gets @conn's expected server identity
	ServerIdentity() SocketConnectable
	// ValidationFlags gets @conn's validation flags
	ValidationFlags() TLSCertificateFlags
	// SetServerIdentity sets @conn's expected server identity, which is used
	// both to tell servers on virtual hosts which certificate to present, and
	// also to let @conn know what name to look for in the certificate when
	// performing G_TLS_CERTIFICATE_BAD_IDENTITY validation, if enabled.
	SetServerIdentity(identity SocketConnectable)
	// SetValidationFlags sets @conn's validation flags, to override the default
	// set of checks performed when validating a server certificate. By default,
	// G_TLS_CERTIFICATE_VALIDATE_ALL is used.
	SetValidationFlags(flags TLSCertificateFlags)
}

// dtlsClientConnection implements the DTLSClientConnection interface.
type dtlsClientConnection struct {
	DatagramBased
	DTLSConnection
}

var _ DTLSClientConnection = (*dtlsClientConnection)(nil)

// WrapDTLSClientConnection wraps a GObject to a type that implements interface
// DTLSClientConnection. It is primarily used internally.
func WrapDTLSClientConnection(obj *externglib.Object) DTLSClientConnection {
	return DTLSClientConnection{
		DatagramBased:  WrapDatagramBased(obj),
		DTLSConnection: WrapDTLSConnection(obj),
	}
}

func marshalDTLSClientConnection(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapDTLSClientConnection(obj), nil
}

// AcceptedCAS gets the list of distinguished names of the Certificate
// Authorities that the server will accept certificates from. This will be
// set during the TLS handshake if the server requests a certificate.
// Otherwise, it will be nil.
//
// Each item in the list is a Array which contains the complete subject DN
// of the certificate authority.
func (c dtlsClientConnection) AcceptedCAS() *glib.List {
	var arg0 *C.GDtlsClientConnection

	arg0 = (*C.GDtlsClientConnection)(unsafe.Pointer(c.Native()))

	var cret *C.GList
	var goret1 *glib.List

	cret = C.g_dtls_client_connection_get_accepted_cas(arg0)

	goret1 = glib.WrapList(unsafe.Pointer(cret))
	runtime.SetFinalizer(goret1, func(v *glib.List) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return goret1
}

// ServerIdentity gets @conn's expected server identity
func (c dtlsClientConnection) ServerIdentity() SocketConnectable {
	var arg0 *C.GDtlsClientConnection

	arg0 = (*C.GDtlsClientConnection)(unsafe.Pointer(c.Native()))

	var cret *C.GSocketConnectable
	var goret1 SocketConnectable

	cret = C.g_dtls_client_connection_get_server_identity(arg0)

	goret1 = gextras.CastObject(externglib.Take(unsafe.Pointer(cret.Native()))).(SocketConnectable)

	return goret1
}

// ValidationFlags gets @conn's validation flags
func (c dtlsClientConnection) ValidationFlags() TLSCertificateFlags {
	var arg0 *C.GDtlsClientConnection

	arg0 = (*C.GDtlsClientConnection)(unsafe.Pointer(c.Native()))

	var cret C.GTlsCertificateFlags
	var goret1 TLSCertificateFlags

	cret = C.g_dtls_client_connection_get_validation_flags(arg0)

	goret1 = TLSCertificateFlags(cret)

	return goret1
}

// SetServerIdentity sets @conn's expected server identity, which is used
// both to tell servers on virtual hosts which certificate to present, and
// also to let @conn know what name to look for in the certificate when
// performing G_TLS_CERTIFICATE_BAD_IDENTITY validation, if enabled.
func (c dtlsClientConnection) SetServerIdentity(identity SocketConnectable) {
	var arg0 *C.GDtlsClientConnection
	var arg1 *C.GSocketConnectable

	arg0 = (*C.GDtlsClientConnection)(unsafe.Pointer(c.Native()))
	arg1 = (*C.GSocketConnectable)(unsafe.Pointer(identity.Native()))

	C.g_dtls_client_connection_set_server_identity(arg0, identity)
}

// SetValidationFlags sets @conn's validation flags, to override the default
// set of checks performed when validating a server certificate. By default,
// G_TLS_CERTIFICATE_VALIDATE_ALL is used.
func (c dtlsClientConnection) SetValidationFlags(flags TLSCertificateFlags) {
	var arg0 *C.GDtlsClientConnection
	var arg1 C.GTlsCertificateFlags

	arg0 = (*C.GDtlsClientConnection)(unsafe.Pointer(c.Native()))
	arg1 = (C.GTlsCertificateFlags)(flags)

	C.g_dtls_client_connection_set_validation_flags(arg0, flags)
}
