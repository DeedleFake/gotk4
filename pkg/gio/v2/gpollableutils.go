// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/glib/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gio-2.0 gio-unix-2.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <gio/gdesktopappinfo.h>
// #include <gio/gfiledescriptorbased.h>
// #include <gio/gio.h>
// #include <gio/gunixconnection.h>
// #include <gio/gunixcredentialsmessage.h>
// #include <gio/gunixfdlist.h>
// #include <gio/gunixfdmessage.h>
// #include <gio/gunixinputstream.h>
// #include <gio/gunixmounts.h>
// #include <gio/gunixoutputstream.h>
// #include <gio/gunixsocketaddress.h>
import "C"

// NewPollableSource: utility method for InputStream and OutputStream
// implementations. Creates a new #GSource that expects a callback of type
// SourceFunc. The new source does not actually do anything on its own; use
// g_source_add_child_source() to add other sources to it to cause it to
// trigger.
func NewPollableSource(pollableStream gextras.Objector) *glib.Source {
	var arg1 *C.GObject

	arg1 = (*C.GObject)(pollableStream.Native())

	ret := C.g_pollable_source_new(arg1)

	var ret0 *glib.Source

	{
		ret0 = glib.WrapSource(unsafe.Pointer(ret))
		runtime.SetFinalizer(ret0, func(v *glib.Source) {
			C.free(unsafe.Pointer(v.Native()))
		})
	}

	return ret0
}

// PollableSourceNewFull: utility method for InputStream and OutputStream
// implementations. Creates a new #GSource, as with g_pollable_source_new(), but
// also attaching @child_source (with a dummy callback), and @cancellable, if
// they are non-nil.
func PollableSourceNewFull(pollableStream gextras.Objector, childSource *glib.Source, cancellable Cancellable) *glib.Source {
	var arg1 C.gpointer
	var arg2 *C.GSource
	var arg3 *C.GCancellable

	arg1 = (*C.GObject)(pollableStream.Native())
	arg2 = (*C.GSource)(childSource.Native())
	arg3 = (*C.GCancellable)(cancellable.Native())

	ret := C.g_pollable_source_new_full(arg1, arg2, arg3)

	var ret0 *glib.Source

	{
		ret0 = glib.WrapSource(unsafe.Pointer(ret))
		runtime.SetFinalizer(ret0, func(v *glib.Source) {
			C.free(unsafe.Pointer(v.Native()))
		})
	}

	return ret0
}

// PollableStreamRead tries to read from @stream, as with g_input_stream_read()
// (if @blocking is true) or g_pollable_input_stream_read_nonblocking() (if
// @blocking is false). This can be used to more easily share code between
// blocking and non-blocking implementations of a method.
//
// If @blocking is false, then @stream must be a InputStream for which
// g_pollable_input_stream_can_poll() returns true, or else the behavior is
// undefined. If @blocking is true, then @stream does not need to be a
// InputStream.
func PollableStreamRead(stream InputStream, buffer []byte, blocking bool, cancellable Cancellable) (gssize int, err error) {
	var arg1 *C.GInputStream
	var arg2 *C.void
	var arg3 C.gsize
	var arg4 C.gboolean
	var arg5 *C.GCancellable
	var gError *C.GError

	arg1 = (*C.GInputStream)(stream.Native())
	arg2 = (*C.void)(unsafe.Pointer(&buffer[0]))
	arg3 = len(buffer)
	defer runtime.KeepAlive(buffer)
	if blocking {
		arg4 = C.TRUE
	}
	arg5 = (*C.GCancellable)(cancellable.Native())

	ret := C.g_pollable_stream_read(arg1, arg2, arg3, arg4, arg5, &gError)

	var ret0 int
	var goError error

	ret0 = int(ret)

	if gError != nil {
		goError = fmt.Errorf("%d: %s", gError.code, C.GoString(gError.message))
		C.g_error_free(gError)
	}

	return ret0, goError
}

// PollableStreamWrite tries to write to @stream, as with
// g_output_stream_write() (if @blocking is true) or
// g_pollable_output_stream_write_nonblocking() (if @blocking is false). This
// can be used to more easily share code between blocking and non-blocking
// implementations of a method.
//
// If @blocking is false, then @stream must be a OutputStream for which
// g_pollable_output_stream_can_poll() returns true or else the behavior is
// undefined. If @blocking is true, then @stream does not need to be a
// OutputStream.
func PollableStreamWrite(stream OutputStream, buffer []byte, blocking bool, cancellable Cancellable) (gssize int, err error) {
	var arg1 *C.GOutputStream
	var arg2 *C.void
	var arg3 C.gsize
	var arg4 C.gboolean
	var arg5 *C.GCancellable
	var gError *C.GError

	arg1 = (*C.GOutputStream)(stream.Native())
	arg2 = (*C.void)(unsafe.Pointer(&buffer[0]))
	arg3 = len(buffer)
	defer runtime.KeepAlive(buffer)
	if blocking {
		arg4 = C.TRUE
	}
	arg5 = (*C.GCancellable)(cancellable.Native())

	ret := C.g_pollable_stream_write(arg1, arg2, arg3, arg4, arg5, &gError)

	var ret0 int
	var goError error

	ret0 = int(ret)

	if gError != nil {
		goError = fmt.Errorf("%d: %s", gError.code, C.GoString(gError.message))
		C.g_error_free(gError)
	}

	return ret0, goError
}

// PollableStreamWriteAll tries to write @count bytes to @stream, as with
// g_output_stream_write_all(), but using g_pollable_stream_write() rather than
// g_output_stream_write().
//
// On a successful write of @count bytes, true is returned, and @bytes_written
// is set to @count.
//
// If there is an error during the operation (including G_IO_ERROR_WOULD_BLOCK
// in the non-blocking case), false is returned and @error is set to indicate
// the error status, @bytes_written is updated to contain the number of bytes
// written into the stream before the error occurred.
//
// As with g_pollable_stream_write(), if @blocking is false, then @stream must
// be a OutputStream for which g_pollable_output_stream_can_poll() returns true
// or else the behavior is undefined. If @blocking is true, then @stream does
// not need to be a OutputStream.
func PollableStreamWriteAll(stream OutputStream, buffer []byte, blocking bool, cancellable Cancellable) (bytesWritten uint, err error) {
	var arg1 *C.GOutputStream
	var arg2 *C.void
	var arg3 C.gsize
	var arg4 C.gboolean
	var arg5 *C.gsize // out
	var arg6 *C.GCancellable
	var gError *C.GError

	arg1 = (*C.GOutputStream)(stream.Native())
	arg2 = (*C.void)(unsafe.Pointer(&buffer[0]))
	arg3 = len(buffer)
	defer runtime.KeepAlive(buffer)
	if blocking {
		arg4 = C.TRUE
	}
	arg6 = (*C.GCancellable)(cancellable.Native())

	ret := C.g_pollable_stream_write_all(arg1, arg2, arg3, arg4, &arg5, arg6, &gError)

	var ret0 uint
	var goError error

	ret0 = uint(arg5)

	if gError != nil {
		goError = fmt.Errorf("%d: %s", gError.code, C.GoString(gError.message))
		C.g_error_free(gError)
	}

	return ret0, goError
}
