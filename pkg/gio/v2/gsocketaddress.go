// Code generated by girgen. DO NOT EDIT.

package gio

import (
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gio-2.0 gio-unix-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gio/gdesktopappinfo.h>
// #include <gio/gfiledescriptorbased.h>
// #include <gio/gio.h>
// #include <gio/gunixconnection.h>
// #include <gio/gunixcredentialsmessage.h>
// #include <gio/gunixfdlist.h>
// #include <gio/gunixfdmessage.h>
// #include <gio/gunixinputstream.h>
// #include <gio/gunixmounts.h>
// #include <gio/gunixoutputstream.h>
// #include <gio/gunixsocketaddress.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_socket_address_get_type()), F: marshalSocketAddress},
	})
}

// SocketAddress is the equivalent of struct sockaddr in the BSD sockets API.
// This is an abstract class; use SocketAddress for internet sockets, or
// SocketAddress for UNIX domain sockets.
type SocketAddress interface {
	gextras.Objector
	SocketConnectable

	// Family gets the socket family type of @address.
	Family(a SocketAddress)
	// NativeSize gets the size of @address's native struct sockaddr. You can
	// use this to allocate memory to pass to g_socket_address_to_native().
	NativeSize(a SocketAddress)
	// ToNative converts a Address to a native struct sockaddr, which can be
	// passed to low-level functions like connect() or bind().
	//
	// If not enough space is available, a G_IO_ERROR_NO_SPACE error is
	// returned. If the address type is not known on the system then a
	// G_IO_ERROR_NOT_SUPPORTED error is returned.
	ToNative(a SocketAddress, dest interface{}, destlen uint) error
}

// socketAddress implements the SocketAddress interface.
type socketAddress struct {
	gextras.Objector
	SocketConnectable
}

var _ SocketAddress = (*socketAddress)(nil)

// WrapSocketAddress wraps a GObject to the right type. It is
// primarily used internally.
func WrapSocketAddress(obj *externglib.Object) SocketAddress {
	return SocketAddress{
		Objector:          obj,
		SocketConnectable: WrapSocketConnectable(obj),
	}
}

func marshalSocketAddress(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapSocketAddress(obj), nil
}

// NewSocketAddressFromNative constructs a class SocketAddress.
func NewSocketAddressFromNative(native interface{}, len uint) {
	var arg1 C.gpointer
	var arg2 C.gsize

	arg1 = C.gpointer(native)
	arg2 = C.gsize(len)

	C.g_socket_address_new_from_native(arg1, arg2)
}

// Family gets the socket family type of @address.
func (a socketAddress) Family(a SocketAddress) {
	var arg0 *C.GSocketAddress

	arg0 = (*C.GSocketAddress)(unsafe.Pointer(a.Native()))

	C.g_socket_address_get_family(arg0)
}

// NativeSize gets the size of @address's native struct sockaddr. You can
// use this to allocate memory to pass to g_socket_address_to_native().
func (a socketAddress) NativeSize(a SocketAddress) {
	var arg0 *C.GSocketAddress

	arg0 = (*C.GSocketAddress)(unsafe.Pointer(a.Native()))

	C.g_socket_address_get_native_size(arg0)
}

// ToNative converts a Address to a native struct sockaddr, which can be
// passed to low-level functions like connect() or bind().
//
// If not enough space is available, a G_IO_ERROR_NO_SPACE error is
// returned. If the address type is not known on the system then a
// G_IO_ERROR_NOT_SUPPORTED error is returned.
func (a socketAddress) ToNative(a SocketAddress, dest interface{}, destlen uint) error {
	var arg0 *C.GSocketAddress
	var arg1 C.gpointer
	var arg2 C.gsize

	arg0 = (*C.GSocketAddress)(unsafe.Pointer(a.Native()))
	arg1 = C.gpointer(dest)
	arg2 = C.gsize(destlen)

	var errout *C.GError
	var err error

	C.g_socket_address_to_native(arg0, arg1, arg2, &errout)

	err = gerror.Take(unsafe.Pointer(errout))

	return err
}
