// Code generated by girgen. DO NOT EDIT.

package gio

import (
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gio-2.0 gio-unix-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gio/gdesktopappinfo.h>
// #include <gio/gfiledescriptorbased.h>
// #include <gio/gio.h>
// #include <gio/gunixconnection.h>
// #include <gio/gunixcredentialsmessage.h>
// #include <gio/gunixfdlist.h>
// #include <gio/gunixfdmessage.h>
// #include <gio/gunixinputstream.h>
// #include <gio/gunixmounts.h>
// #include <gio/gunixoutputstream.h>
// #include <gio/gunixsocketaddress.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_mount_operation_get_type()), F: marshalMountOperation},
	})
}

// MountOperation provides a mechanism for interacting with the user. It can be
// used for authenticating mountable operations, such as loop mounting files,
// hard drive partitions or server locations. It can also be used to ask the
// user questions or show a list of applications preventing unmount or eject
// operations from completing.
//
// Note that Operation is used for more than just #GMount objects – for example
// it is also used in g_drive_start() and g_drive_stop().
//
// Users should instantiate a subclass of this that implements all the various
// callbacks to show the required dialogs, such as MountOperation. If no user
// interaction is desired (for example when automounting filesystems at login
// time), usually nil can be passed, see each method taking a Operation for
// details.
//
// The term ‘TCRYPT’ is used to mean ‘compatible with TrueCrypt and VeraCrypt’.
// TrueCrypt (https://en.wikipedia.org/wiki/TrueCrypt) is a discontinued system
// for encrypting file containers, partitions or whole disks, typically used
// with Windows. VeraCrypt (https://www.veracrypt.fr/) is a maintained fork of
// TrueCrypt with various improvements and auditing fixes.
type MountOperation interface {
	gextras.Objector

	// Anonymous: check to see whether the mount operation is being used for an
	// anonymous user.
	Anonymous(o MountOperation) bool
	// Choice gets a choice from the mount operation.
	Choice(o MountOperation)
	// Domain gets the domain of the mount operation.
	Domain(o MountOperation)
	// IsTcryptHiddenVolume: check to see whether the mount operation is being
	// used for a TCRYPT hidden volume.
	IsTcryptHiddenVolume(o MountOperation) bool
	// IsTcryptSystemVolume: check to see whether the mount operation is being
	// used for a TCRYPT system volume.
	IsTcryptSystemVolume(o MountOperation) bool
	// Password gets a password from the mount operation.
	Password(o MountOperation)
	// PasswordSave gets the state of saving passwords for the mount operation.
	PasswordSave(o MountOperation)
	// Pim gets a PIM from the mount operation.
	Pim(o MountOperation)
	// Username: get the user name from the mount operation.
	Username(o MountOperation)
	// Reply emits the Operation::reply signal.
	Reply(o MountOperation, result MountOperationResult)
	// SetAnonymous sets the mount operation to use an anonymous user if
	// @anonymous is true.
	SetAnonymous(o MountOperation, anonymous bool)
	// SetChoice sets a default choice for the mount operation.
	SetChoice(o MountOperation, choice int)
	// SetDomain sets the mount operation's domain.
	SetDomain(o MountOperation, domain string)
	// SetIsTcryptHiddenVolume sets the mount operation to use a hidden volume
	// if @hidden_volume is true.
	SetIsTcryptHiddenVolume(o MountOperation, hiddenVolume bool)
	// SetIsTcryptSystemVolume sets the mount operation to use a system volume
	// if @system_volume is true.
	SetIsTcryptSystemVolume(o MountOperation, systemVolume bool)
	// SetPassword sets the mount operation's password to @password.
	SetPassword(o MountOperation, password string)
	// SetPasswordSave sets the state of saving passwords for the mount
	// operation.
	SetPasswordSave(o MountOperation, save PasswordSave)
	// SetPim sets the mount operation's PIM to @pim.
	SetPim(o MountOperation, pim uint)
	// SetUsername sets the user name within @op to @username.
	SetUsername(o MountOperation, username string)
}

// mountOperation implements the MountOperation interface.
type mountOperation struct {
	gextras.Objector
}

var _ MountOperation = (*mountOperation)(nil)

// WrapMountOperation wraps a GObject to the right type. It is
// primarily used internally.
func WrapMountOperation(obj *externglib.Object) MountOperation {
	return MountOperation{
		Objector: obj,
	}
}

func marshalMountOperation(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapMountOperation(obj), nil
}

// NewMountOperation constructs a class MountOperation.
func NewMountOperation() {
	C.g_mount_operation_new()
}

// Anonymous: check to see whether the mount operation is being used for an
// anonymous user.
func (o mountOperation) Anonymous(o MountOperation) bool {
	var arg0 *C.GMountOperation

	arg0 = (*C.GMountOperation)(unsafe.Pointer(o.Native()))

	var cret C.gboolean
	var ok bool

	cret = C.g_mount_operation_get_anonymous(arg0)

	if cret {
		ok = true
	}

	return ok
}

// Choice gets a choice from the mount operation.
func (o mountOperation) Choice(o MountOperation) {
	var arg0 *C.GMountOperation

	arg0 = (*C.GMountOperation)(unsafe.Pointer(o.Native()))

	C.g_mount_operation_get_choice(arg0)
}

// Domain gets the domain of the mount operation.
func (o mountOperation) Domain(o MountOperation) {
	var arg0 *C.GMountOperation

	arg0 = (*C.GMountOperation)(unsafe.Pointer(o.Native()))

	C.g_mount_operation_get_domain(arg0)
}

// IsTcryptHiddenVolume: check to see whether the mount operation is being
// used for a TCRYPT hidden volume.
func (o mountOperation) IsTcryptHiddenVolume(o MountOperation) bool {
	var arg0 *C.GMountOperation

	arg0 = (*C.GMountOperation)(unsafe.Pointer(o.Native()))

	var cret C.gboolean
	var ok bool

	cret = C.g_mount_operation_get_is_tcrypt_hidden_volume(arg0)

	if cret {
		ok = true
	}

	return ok
}

// IsTcryptSystemVolume: check to see whether the mount operation is being
// used for a TCRYPT system volume.
func (o mountOperation) IsTcryptSystemVolume(o MountOperation) bool {
	var arg0 *C.GMountOperation

	arg0 = (*C.GMountOperation)(unsafe.Pointer(o.Native()))

	var cret C.gboolean
	var ok bool

	cret = C.g_mount_operation_get_is_tcrypt_system_volume(arg0)

	if cret {
		ok = true
	}

	return ok
}

// Password gets a password from the mount operation.
func (o mountOperation) Password(o MountOperation) {
	var arg0 *C.GMountOperation

	arg0 = (*C.GMountOperation)(unsafe.Pointer(o.Native()))

	C.g_mount_operation_get_password(arg0)
}

// PasswordSave gets the state of saving passwords for the mount operation.
func (o mountOperation) PasswordSave(o MountOperation) {
	var arg0 *C.GMountOperation

	arg0 = (*C.GMountOperation)(unsafe.Pointer(o.Native()))

	C.g_mount_operation_get_password_save(arg0)
}

// Pim gets a PIM from the mount operation.
func (o mountOperation) Pim(o MountOperation) {
	var arg0 *C.GMountOperation

	arg0 = (*C.GMountOperation)(unsafe.Pointer(o.Native()))

	C.g_mount_operation_get_pim(arg0)
}

// Username: get the user name from the mount operation.
func (o mountOperation) Username(o MountOperation) {
	var arg0 *C.GMountOperation

	arg0 = (*C.GMountOperation)(unsafe.Pointer(o.Native()))

	C.g_mount_operation_get_username(arg0)
}

// Reply emits the Operation::reply signal.
func (o mountOperation) Reply(o MountOperation, result MountOperationResult) {
	var arg0 *C.GMountOperation
	var arg1 C.GMountOperationResult

	arg0 = (*C.GMountOperation)(unsafe.Pointer(o.Native()))
	arg1 = (C.GMountOperationResult)(result)

	C.g_mount_operation_reply(arg0, arg1)
}

// SetAnonymous sets the mount operation to use an anonymous user if
// @anonymous is true.
func (o mountOperation) SetAnonymous(o MountOperation, anonymous bool) {
	var arg0 *C.GMountOperation
	var arg1 C.gboolean

	arg0 = (*C.GMountOperation)(unsafe.Pointer(o.Native()))
	if anonymous {
		arg1 = C.gboolean(1)
	}

	C.g_mount_operation_set_anonymous(arg0, arg1)
}

// SetChoice sets a default choice for the mount operation.
func (o mountOperation) SetChoice(o MountOperation, choice int) {
	var arg0 *C.GMountOperation
	var arg1 C.int

	arg0 = (*C.GMountOperation)(unsafe.Pointer(o.Native()))
	arg1 = C.int(choice)

	C.g_mount_operation_set_choice(arg0, arg1)
}

// SetDomain sets the mount operation's domain.
func (o mountOperation) SetDomain(o MountOperation, domain string) {
	var arg0 *C.GMountOperation
	var arg1 *C.char

	arg0 = (*C.GMountOperation)(unsafe.Pointer(o.Native()))
	arg1 = (*C.char)(C.CString(domain))
	defer C.free(unsafe.Pointer(arg1))

	C.g_mount_operation_set_domain(arg0, arg1)
}

// SetIsTcryptHiddenVolume sets the mount operation to use a hidden volume
// if @hidden_volume is true.
func (o mountOperation) SetIsTcryptHiddenVolume(o MountOperation, hiddenVolume bool) {
	var arg0 *C.GMountOperation
	var arg1 C.gboolean

	arg0 = (*C.GMountOperation)(unsafe.Pointer(o.Native()))
	if hiddenVolume {
		arg1 = C.gboolean(1)
	}

	C.g_mount_operation_set_is_tcrypt_hidden_volume(arg0, arg1)
}

// SetIsTcryptSystemVolume sets the mount operation to use a system volume
// if @system_volume is true.
func (o mountOperation) SetIsTcryptSystemVolume(o MountOperation, systemVolume bool) {
	var arg0 *C.GMountOperation
	var arg1 C.gboolean

	arg0 = (*C.GMountOperation)(unsafe.Pointer(o.Native()))
	if systemVolume {
		arg1 = C.gboolean(1)
	}

	C.g_mount_operation_set_is_tcrypt_system_volume(arg0, arg1)
}

// SetPassword sets the mount operation's password to @password.
func (o mountOperation) SetPassword(o MountOperation, password string) {
	var arg0 *C.GMountOperation
	var arg1 *C.char

	arg0 = (*C.GMountOperation)(unsafe.Pointer(o.Native()))
	arg1 = (*C.char)(C.CString(password))
	defer C.free(unsafe.Pointer(arg1))

	C.g_mount_operation_set_password(arg0, arg1)
}

// SetPasswordSave sets the state of saving passwords for the mount
// operation.
func (o mountOperation) SetPasswordSave(o MountOperation, save PasswordSave) {
	var arg0 *C.GMountOperation
	var arg1 C.GPasswordSave

	arg0 = (*C.GMountOperation)(unsafe.Pointer(o.Native()))
	arg1 = (C.GPasswordSave)(save)

	C.g_mount_operation_set_password_save(arg0, arg1)
}

// SetPim sets the mount operation's PIM to @pim.
func (o mountOperation) SetPim(o MountOperation, pim uint) {
	var arg0 *C.GMountOperation
	var arg1 C.guint

	arg0 = (*C.GMountOperation)(unsafe.Pointer(o.Native()))
	arg1 = C.guint(pim)

	C.g_mount_operation_set_pim(arg0, arg1)
}

// SetUsername sets the user name within @op to @username.
func (o mountOperation) SetUsername(o MountOperation, username string) {
	var arg0 *C.GMountOperation
	var arg1 *C.char

	arg0 = (*C.GMountOperation)(unsafe.Pointer(o.Native()))
	arg1 = (*C.char)(C.CString(username))
	defer C.free(unsafe.Pointer(arg1))

	C.g_mount_operation_set_username(arg0, arg1)
}
