// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/core/box"
	"github.com/diamondburned/gotk4/core/gerror"
	"github.com/diamondburned/gotk4/core/gextras"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gio-2.0 gio-unix-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <gio/gdesktopappinfo.h>
// #include <gio/gfiledescriptorbased.h>
// #include <gio/gio.h>
// #include <gio/gunixconnection.h>
// #include <gio/gunixcredentialsmessage.h>
// #include <gio/gunixfdlist.h>
// #include <gio/gunixfdmessage.h>
// #include <gio/gunixinputstream.h>
// #include <gio/gunixmounts.h>
// #include <gio/gunixoutputstream.h>
// #include <gio/gunixsocketaddress.h>
// #include <glib-object.h>
//
// void gotk4_AsyncReadyCallback(GObject*, GAsyncResult*, gpointer);
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_data_input_stream_get_type()), F: marshalDataInputStream},
	})
}

// DataInputStream: data input stream implements Stream and includes functions
// for reading structured data directly from a binary input stream.
type DataInputStream interface {
	BufferedInputStream

	ByteOrder() DataStreamByteOrder

	NewlineType() DataStreamNewlineType

	ReadByteDataInputStream(cancellable Cancellable) (byte, error)

	ReadInt16DataInputStream(cancellable Cancellable) (int16, error)

	ReadInt32DataInputStream(cancellable Cancellable) (int32, error)

	ReadInt64DataInputStream(cancellable Cancellable) (int64, error)

	ReadLineDataInputStream(cancellable Cancellable) (uint, []byte, error)

	ReadLineAsyncDataInputStream(ioPriority int, cancellable Cancellable, callback AsyncReadyCallback)

	ReadLineFinishDataInputStream(result AsyncResult) (uint, []byte, error)

	ReadLineFinishUTF8DataInputStream(result AsyncResult) (uint, string, error)

	ReadLineUTF8DataInputStream(cancellable Cancellable) (uint, string, error)

	ReadUint16DataInputStream(cancellable Cancellable) (uint16, error)

	ReadUint32DataInputStream(cancellable Cancellable) (uint32, error)

	ReadUint64DataInputStream(cancellable Cancellable) (uint64, error)

	ReadUntilDataInputStream(stopChars string, cancellable Cancellable) (uint, string, error)

	ReadUntilAsyncDataInputStream(stopChars string, ioPriority int, cancellable Cancellable, callback AsyncReadyCallback)

	ReadUntilFinishDataInputStream(result AsyncResult) (uint, string, error)

	ReadUptoDataInputStream(stopChars string, stopCharsLen int, cancellable Cancellable) (uint, string, error)

	ReadUptoAsyncDataInputStream(stopChars string, stopCharsLen int, ioPriority int, cancellable Cancellable, callback AsyncReadyCallback)

	ReadUptoFinishDataInputStream(result AsyncResult) (uint, string, error)

	SetByteOrderDataInputStream(order DataStreamByteOrder)

	SetNewlineTypeDataInputStream(typ DataStreamNewlineType)
}

// dataInputStream implements the DataInputStream class.
type dataInputStream struct {
	BufferedInputStream
}

// WrapDataInputStream wraps a GObject to the right type. It is
// primarily used internally.
func WrapDataInputStream(obj *externglib.Object) DataInputStream {
	return dataInputStream{
		BufferedInputStream: WrapBufferedInputStream(obj),
	}
}

func marshalDataInputStream(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapDataInputStream(obj), nil
}

func NewDataInputStream(baseStream InputStream) DataInputStream {
	var _arg1 *C.GInputStream     // out
	var _cret *C.GDataInputStream // in

	_arg1 = (*C.GInputStream)(unsafe.Pointer(baseStream.Native()))

	_cret = C.g_data_input_stream_new(_arg1)

	var _dataInputStream DataInputStream // out

	_dataInputStream = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(DataInputStream)

	return _dataInputStream
}

func (s dataInputStream) ByteOrder() DataStreamByteOrder {
	var _arg0 *C.GDataInputStream    // out
	var _cret C.GDataStreamByteOrder // in

	_arg0 = (*C.GDataInputStream)(unsafe.Pointer(s.Native()))

	_cret = C.g_data_input_stream_get_byte_order(_arg0)

	var _dataStreamByteOrder DataStreamByteOrder // out

	_dataStreamByteOrder = DataStreamByteOrder(_cret)

	return _dataStreamByteOrder
}

func (s dataInputStream) NewlineType() DataStreamNewlineType {
	var _arg0 *C.GDataInputStream      // out
	var _cret C.GDataStreamNewlineType // in

	_arg0 = (*C.GDataInputStream)(unsafe.Pointer(s.Native()))

	_cret = C.g_data_input_stream_get_newline_type(_arg0)

	var _dataStreamNewlineType DataStreamNewlineType // out

	_dataStreamNewlineType = DataStreamNewlineType(_cret)

	return _dataStreamNewlineType
}

func (s dataInputStream) ReadByteDataInputStream(cancellable Cancellable) (byte, error) {
	var _arg0 *C.GDataInputStream // out
	var _arg1 *C.GCancellable     // out
	var _cret C.guchar            // in
	var _cerr *C.GError           // in

	_arg0 = (*C.GDataInputStream)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	_cret = C.g_data_input_stream_read_byte(_arg0, _arg1, &_cerr)

	var _guint8 byte // out
	var _goerr error // out

	_guint8 = byte(_cret)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _guint8, _goerr
}

func (s dataInputStream) ReadInt16DataInputStream(cancellable Cancellable) (int16, error) {
	var _arg0 *C.GDataInputStream // out
	var _arg1 *C.GCancellable     // out
	var _cret C.gint16            // in
	var _cerr *C.GError           // in

	_arg0 = (*C.GDataInputStream)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	_cret = C.g_data_input_stream_read_int16(_arg0, _arg1, &_cerr)

	var _gint16 int16 // out
	var _goerr error  // out

	_gint16 = int16(_cret)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _gint16, _goerr
}

func (s dataInputStream) ReadInt32DataInputStream(cancellable Cancellable) (int32, error) {
	var _arg0 *C.GDataInputStream // out
	var _arg1 *C.GCancellable     // out
	var _cret C.gint32            // in
	var _cerr *C.GError           // in

	_arg0 = (*C.GDataInputStream)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	_cret = C.g_data_input_stream_read_int32(_arg0, _arg1, &_cerr)

	var _gint32 int32 // out
	var _goerr error  // out

	_gint32 = int32(_cret)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _gint32, _goerr
}

func (s dataInputStream) ReadInt64DataInputStream(cancellable Cancellable) (int64, error) {
	var _arg0 *C.GDataInputStream // out
	var _arg1 *C.GCancellable     // out
	var _cret C.gint64            // in
	var _cerr *C.GError           // in

	_arg0 = (*C.GDataInputStream)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	_cret = C.g_data_input_stream_read_int64(_arg0, _arg1, &_cerr)

	var _gint64 int64 // out
	var _goerr error  // out

	_gint64 = int64(_cret)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _gint64, _goerr
}

func (s dataInputStream) ReadLineDataInputStream(cancellable Cancellable) (uint, []byte, error) {
	var _arg0 *C.GDataInputStream // out
	var _arg1 C.gsize             // in
	var _arg2 *C.GCancellable     // out
	var _cret *C.char
	var _cerr *C.GError // in

	_arg0 = (*C.GDataInputStream)(unsafe.Pointer(s.Native()))
	_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	_cret = C.g_data_input_stream_read_line(_arg0, &_arg1, _arg2, &_cerr)

	var _length uint // out
	var _guint8s []byte
	var _goerr error // out

	_length = uint(_arg1)
	{
		var i int
		var z C.char
		for p := _cret; *p != z; p = &unsafe.Slice(p, i+1)[i] {
			i++
		}

		src := unsafe.Slice(_cret, i)
		_guint8s = make([]byte, i)
		for i := range src {
			_guint8s[i] = byte(src[i])
		}
	}
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _length, _guint8s, _goerr
}

func (s dataInputStream) ReadLineAsyncDataInputStream(ioPriority int, cancellable Cancellable, callback AsyncReadyCallback) {
	var _arg0 *C.GDataInputStream   // out
	var _arg1 C.gint                // out
	var _arg2 *C.GCancellable       // out
	var _arg3 C.GAsyncReadyCallback // out
	var _arg4 C.gpointer

	_arg0 = (*C.GDataInputStream)(unsafe.Pointer(s.Native()))
	_arg1 = C.gint(ioPriority)
	_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg3 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg4 = C.gpointer(box.Assign(callback))

	C.g_data_input_stream_read_line_async(_arg0, _arg1, _arg2, _arg3, _arg4)
}

func (s dataInputStream) ReadLineFinishDataInputStream(result AsyncResult) (uint, []byte, error) {
	var _arg0 *C.GDataInputStream // out
	var _arg1 *C.GAsyncResult     // out
	var _arg2 C.gsize             // in
	var _cret *C.char
	var _cerr *C.GError // in

	_arg0 = (*C.GDataInputStream)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(result.Native()))

	_cret = C.g_data_input_stream_read_line_finish(_arg0, _arg1, &_arg2, &_cerr)

	var _length uint // out
	var _guint8s []byte
	var _goerr error // out

	_length = uint(_arg2)
	{
		var i int
		var z C.char
		for p := _cret; *p != z; p = &unsafe.Slice(p, i+1)[i] {
			i++
		}

		src := unsafe.Slice(_cret, i)
		_guint8s = make([]byte, i)
		for i := range src {
			_guint8s[i] = byte(src[i])
		}
	}
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _length, _guint8s, _goerr
}

func (s dataInputStream) ReadLineFinishUTF8DataInputStream(result AsyncResult) (uint, string, error) {
	var _arg0 *C.GDataInputStream // out
	var _arg1 *C.GAsyncResult     // out
	var _arg2 C.gsize             // in
	var _cret *C.char             // in
	var _cerr *C.GError           // in

	_arg0 = (*C.GDataInputStream)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(result.Native()))

	_cret = C.g_data_input_stream_read_line_finish_utf8(_arg0, _arg1, &_arg2, &_cerr)

	var _length uint // out
	var _utf8 string // out
	var _goerr error // out

	_length = uint(_arg2)
	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _length, _utf8, _goerr
}

func (s dataInputStream) ReadLineUTF8DataInputStream(cancellable Cancellable) (uint, string, error) {
	var _arg0 *C.GDataInputStream // out
	var _arg1 C.gsize             // in
	var _arg2 *C.GCancellable     // out
	var _cret *C.char             // in
	var _cerr *C.GError           // in

	_arg0 = (*C.GDataInputStream)(unsafe.Pointer(s.Native()))
	_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	_cret = C.g_data_input_stream_read_line_utf8(_arg0, &_arg1, _arg2, &_cerr)

	var _length uint // out
	var _utf8 string // out
	var _goerr error // out

	_length = uint(_arg1)
	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _length, _utf8, _goerr
}

func (s dataInputStream) ReadUint16DataInputStream(cancellable Cancellable) (uint16, error) {
	var _arg0 *C.GDataInputStream // out
	var _arg1 *C.GCancellable     // out
	var _cret C.guint16           // in
	var _cerr *C.GError           // in

	_arg0 = (*C.GDataInputStream)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	_cret = C.g_data_input_stream_read_uint16(_arg0, _arg1, &_cerr)

	var _guint16 uint16 // out
	var _goerr error    // out

	_guint16 = uint16(_cret)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _guint16, _goerr
}

func (s dataInputStream) ReadUint32DataInputStream(cancellable Cancellable) (uint32, error) {
	var _arg0 *C.GDataInputStream // out
	var _arg1 *C.GCancellable     // out
	var _cret C.guint32           // in
	var _cerr *C.GError           // in

	_arg0 = (*C.GDataInputStream)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	_cret = C.g_data_input_stream_read_uint32(_arg0, _arg1, &_cerr)

	var _guint32 uint32 // out
	var _goerr error    // out

	_guint32 = uint32(_cret)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _guint32, _goerr
}

func (s dataInputStream) ReadUint64DataInputStream(cancellable Cancellable) (uint64, error) {
	var _arg0 *C.GDataInputStream // out
	var _arg1 *C.GCancellable     // out
	var _cret C.guint64           // in
	var _cerr *C.GError           // in

	_arg0 = (*C.GDataInputStream)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	_cret = C.g_data_input_stream_read_uint64(_arg0, _arg1, &_cerr)

	var _guint64 uint64 // out
	var _goerr error    // out

	_guint64 = uint64(_cret)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _guint64, _goerr
}

func (s dataInputStream) ReadUntilDataInputStream(stopChars string, cancellable Cancellable) (uint, string, error) {
	var _arg0 *C.GDataInputStream // out
	var _arg1 *C.gchar            // out
	var _arg2 C.gsize             // in
	var _arg3 *C.GCancellable     // out
	var _cret *C.char             // in
	var _cerr *C.GError           // in

	_arg0 = (*C.GDataInputStream)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.gchar)(C.CString(stopChars))
	defer C.free(unsafe.Pointer(_arg1))
	_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	_cret = C.g_data_input_stream_read_until(_arg0, _arg1, &_arg2, _arg3, &_cerr)

	var _length uint // out
	var _utf8 string // out
	var _goerr error // out

	_length = uint(_arg2)
	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _length, _utf8, _goerr
}

func (s dataInputStream) ReadUntilAsyncDataInputStream(stopChars string, ioPriority int, cancellable Cancellable, callback AsyncReadyCallback) {
	var _arg0 *C.GDataInputStream   // out
	var _arg1 *C.gchar              // out
	var _arg2 C.gint                // out
	var _arg3 *C.GCancellable       // out
	var _arg4 C.GAsyncReadyCallback // out
	var _arg5 C.gpointer

	_arg0 = (*C.GDataInputStream)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.gchar)(C.CString(stopChars))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.gint(ioPriority)
	_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg4 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg5 = C.gpointer(box.Assign(callback))

	C.g_data_input_stream_read_until_async(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
}

func (s dataInputStream) ReadUntilFinishDataInputStream(result AsyncResult) (uint, string, error) {
	var _arg0 *C.GDataInputStream // out
	var _arg1 *C.GAsyncResult     // out
	var _arg2 C.gsize             // in
	var _cret *C.char             // in
	var _cerr *C.GError           // in

	_arg0 = (*C.GDataInputStream)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(result.Native()))

	_cret = C.g_data_input_stream_read_until_finish(_arg0, _arg1, &_arg2, &_cerr)

	var _length uint // out
	var _utf8 string // out
	var _goerr error // out

	_length = uint(_arg2)
	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _length, _utf8, _goerr
}

func (s dataInputStream) ReadUptoDataInputStream(stopChars string, stopCharsLen int, cancellable Cancellable) (uint, string, error) {
	var _arg0 *C.GDataInputStream // out
	var _arg1 *C.gchar            // out
	var _arg2 C.gssize            // out
	var _arg3 C.gsize             // in
	var _arg4 *C.GCancellable     // out
	var _cret *C.char             // in
	var _cerr *C.GError           // in

	_arg0 = (*C.GDataInputStream)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.gchar)(C.CString(stopChars))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.gssize(stopCharsLen)
	_arg4 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	_cret = C.g_data_input_stream_read_upto(_arg0, _arg1, _arg2, &_arg3, _arg4, &_cerr)

	var _length uint // out
	var _utf8 string // out
	var _goerr error // out

	_length = uint(_arg3)
	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _length, _utf8, _goerr
}

func (s dataInputStream) ReadUptoAsyncDataInputStream(stopChars string, stopCharsLen int, ioPriority int, cancellable Cancellable, callback AsyncReadyCallback) {
	var _arg0 *C.GDataInputStream   // out
	var _arg1 *C.gchar              // out
	var _arg2 C.gssize              // out
	var _arg3 C.gint                // out
	var _arg4 *C.GCancellable       // out
	var _arg5 C.GAsyncReadyCallback // out
	var _arg6 C.gpointer

	_arg0 = (*C.GDataInputStream)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.gchar)(C.CString(stopChars))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.gssize(stopCharsLen)
	_arg3 = C.gint(ioPriority)
	_arg4 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg5 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg6 = C.gpointer(box.Assign(callback))

	C.g_data_input_stream_read_upto_async(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6)
}

func (s dataInputStream) ReadUptoFinishDataInputStream(result AsyncResult) (uint, string, error) {
	var _arg0 *C.GDataInputStream // out
	var _arg1 *C.GAsyncResult     // out
	var _arg2 C.gsize             // in
	var _cret *C.char             // in
	var _cerr *C.GError           // in

	_arg0 = (*C.GDataInputStream)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(result.Native()))

	_cret = C.g_data_input_stream_read_upto_finish(_arg0, _arg1, &_arg2, &_cerr)

	var _length uint // out
	var _utf8 string // out
	var _goerr error // out

	_length = uint(_arg2)
	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _length, _utf8, _goerr
}

func (s dataInputStream) SetByteOrderDataInputStream(order DataStreamByteOrder) {
	var _arg0 *C.GDataInputStream    // out
	var _arg1 C.GDataStreamByteOrder // out

	_arg0 = (*C.GDataInputStream)(unsafe.Pointer(s.Native()))
	_arg1 = C.GDataStreamByteOrder(order)

	C.g_data_input_stream_set_byte_order(_arg0, _arg1)
}

func (s dataInputStream) SetNewlineTypeDataInputStream(typ DataStreamNewlineType) {
	var _arg0 *C.GDataInputStream      // out
	var _arg1 C.GDataStreamNewlineType // out

	_arg0 = (*C.GDataInputStream)(unsafe.Pointer(s.Native()))
	_arg1 = C.GDataStreamNewlineType(typ)

	C.g_data_input_stream_set_newline_type(_arg0, _arg1)
}

func (s dataInputStream) CanSeek() bool {
	return WrapSeekable(gextras.InternObject(s)).CanSeek()
}

func (s dataInputStream) CanTruncate() bool {
	return WrapSeekable(gextras.InternObject(s)).CanTruncate()
}

func (s dataInputStream) Seek(offset int64, typ glib.SeekType, cancellable Cancellable) error {
	return WrapSeekable(gextras.InternObject(s)).Seek(offset, typ, cancellable)
}

func (s dataInputStream) Tell() int64 {
	return WrapSeekable(gextras.InternObject(s)).Tell()
}

func (s dataInputStream) Truncate(offset int64, cancellable Cancellable) error {
	return WrapSeekable(gextras.InternObject(s)).Truncate(offset, cancellable)
}
