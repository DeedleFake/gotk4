// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gio-2.0 gio-unix-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <gio/gdesktopappinfo.h>
// #include <gio/gfiledescriptorbased.h>
// #include <gio/gio.h>
// #include <gio/gunixconnection.h>
// #include <gio/gunixcredentialsmessage.h>
// #include <gio/gunixfdlist.h>
// #include <gio/gunixfdmessage.h>
// #include <gio/gunixinputstream.h>
// #include <gio/gunixmounts.h>
// #include <gio/gunixoutputstream.h>
// #include <gio/gunixsocketaddress.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_dbus_object_get_type()), F: marshalDBusObjector},
	})
}

// DBusObjectOverrider contains methods that are overridable.
//
// As of right now, interface overriding and subclassing is not supported
// yet, so the interface currently has no use.
type DBusObjectOverrider interface {
	// Interface gets the D-Bus interface with name @interface_name associated
	// with @object, if any.
	Interface(interfaceName string) *DBusInterface
	// ObjectPath gets the object path for @object.
	ObjectPath() string
	InterfaceAdded(interface_ DBusInterfacer)
	InterfaceRemoved(interface_ DBusInterfacer)
}

// DBusObjector describes DBusObject's methods.
type DBusObjector interface {
	// Interface gets the D-Bus interface with name @interface_name associated
	// with @object, if any.
	Interface(interfaceName string) *DBusInterface
	// ObjectPath gets the object path for @object.
	ObjectPath() string
}

// DBusObject type is the base type for D-Bus objects on both the service side
// (see BusObjectSkeleton) and the client side (see BusObjectProxy). It is
// essentially just a container of interfaces.
type DBusObject struct {
	*externglib.Object
}

var (
	_ DBusObjector    = (*DBusObject)(nil)
	_ gextras.Nativer = (*DBusObject)(nil)
)

func wrapDBusObject(obj *externglib.Object) *DBusObject {
	return &DBusObject{
		Object: obj,
	}
}

func marshalDBusObjector(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapDBusObject(obj), nil
}

// Interface gets the D-Bus interface with name @interface_name associated with
// @object, if any.
func (object *DBusObject) Interface(interfaceName string) *DBusInterface {
	var _arg0 *C.GDBusObject    // out
	var _arg1 *C.gchar          // out
	var _cret *C.GDBusInterface // in

	_arg0 = (*C.GDBusObject)(unsafe.Pointer(object.Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(interfaceName)))

	_cret = C.g_dbus_object_get_interface(_arg0, _arg1)

	var _dBusInterface *DBusInterface // out

	_dBusInterface = wrapDBusInterface(externglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _dBusInterface
}

// ObjectPath gets the object path for @object.
func (object *DBusObject) ObjectPath() string {
	var _arg0 *C.GDBusObject // out
	var _cret *C.gchar       // in

	_arg0 = (*C.GDBusObject)(unsafe.Pointer(object.Native()))

	_cret = C.g_dbus_object_get_object_path(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}
