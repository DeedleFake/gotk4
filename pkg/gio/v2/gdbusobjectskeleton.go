// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gio-2.0 gio-unix-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <gio/gdesktopappinfo.h>
// #include <gio/gfiledescriptorbased.h>
// #include <gio/gio.h>
// #include <gio/gunixconnection.h>
// #include <gio/gunixcredentialsmessage.h>
// #include <gio/gunixfdlist.h>
// #include <gio/gunixfdmessage.h>
// #include <gio/gunixinputstream.h>
// #include <gio/gunixmounts.h>
// #include <gio/gunixoutputstream.h>
// #include <gio/gunixsocketaddress.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_dbus_object_skeleton_get_type()), F: marshalDBusObjectSkeleton},
	})
}

// DBusObjectSkeleton: a BusObjectSkeleton instance is essentially a group of
// D-Bus interfaces. The set of exported interfaces on the object may be dynamic
// and change at runtime.
//
// This type is intended to be used with BusObjectManager.
type DBusObjectSkeleton interface {
	DBusObject

	AddInterfaceDBusObjectSkeleton(interface_ DBusInterfaceSkeleton)

	FlushDBusObjectSkeleton()

	RemoveInterfaceDBusObjectSkeleton(interface_ DBusInterfaceSkeleton)

	RemoveInterfaceByNameDBusObjectSkeleton(interfaceName string)

	SetObjectPathDBusObjectSkeleton(objectPath string)
}

// dBusObjectSkeleton implements the DBusObjectSkeleton class.
type dBusObjectSkeleton struct {
	gextras.Objector
}

// WrapDBusObjectSkeleton wraps a GObject to the right type. It is
// primarily used internally.
func WrapDBusObjectSkeleton(obj *externglib.Object) DBusObjectSkeleton {
	return dBusObjectSkeleton{
		Objector: obj,
	}
}

func marshalDBusObjectSkeleton(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapDBusObjectSkeleton(obj), nil
}

func NewDBusObjectSkeleton(objectPath string) DBusObjectSkeleton {
	var _arg1 *C.gchar               // out
	var _cret *C.GDBusObjectSkeleton // in

	_arg1 = (*C.gchar)(C.CString(objectPath))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.g_dbus_object_skeleton_new(_arg1)

	var _dBusObjectSkeleton DBusObjectSkeleton // out

	_dBusObjectSkeleton = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(DBusObjectSkeleton)

	return _dBusObjectSkeleton
}

func (o dBusObjectSkeleton) AddInterfaceDBusObjectSkeleton(interface_ DBusInterfaceSkeleton) {
	var _arg0 *C.GDBusObjectSkeleton    // out
	var _arg1 *C.GDBusInterfaceSkeleton // out

	_arg0 = (*C.GDBusObjectSkeleton)(unsafe.Pointer(o.Native()))
	_arg1 = (*C.GDBusInterfaceSkeleton)(unsafe.Pointer(interface_.Native()))

	C.g_dbus_object_skeleton_add_interface(_arg0, _arg1)
}

func (o dBusObjectSkeleton) FlushDBusObjectSkeleton() {
	var _arg0 *C.GDBusObjectSkeleton // out

	_arg0 = (*C.GDBusObjectSkeleton)(unsafe.Pointer(o.Native()))

	C.g_dbus_object_skeleton_flush(_arg0)
}

func (o dBusObjectSkeleton) RemoveInterfaceDBusObjectSkeleton(interface_ DBusInterfaceSkeleton) {
	var _arg0 *C.GDBusObjectSkeleton    // out
	var _arg1 *C.GDBusInterfaceSkeleton // out

	_arg0 = (*C.GDBusObjectSkeleton)(unsafe.Pointer(o.Native()))
	_arg1 = (*C.GDBusInterfaceSkeleton)(unsafe.Pointer(interface_.Native()))

	C.g_dbus_object_skeleton_remove_interface(_arg0, _arg1)
}

func (o dBusObjectSkeleton) RemoveInterfaceByNameDBusObjectSkeleton(interfaceName string) {
	var _arg0 *C.GDBusObjectSkeleton // out
	var _arg1 *C.gchar               // out

	_arg0 = (*C.GDBusObjectSkeleton)(unsafe.Pointer(o.Native()))
	_arg1 = (*C.gchar)(C.CString(interfaceName))
	defer C.free(unsafe.Pointer(_arg1))

	C.g_dbus_object_skeleton_remove_interface_by_name(_arg0, _arg1)
}

func (o dBusObjectSkeleton) SetObjectPathDBusObjectSkeleton(objectPath string) {
	var _arg0 *C.GDBusObjectSkeleton // out
	var _arg1 *C.gchar               // out

	_arg0 = (*C.GDBusObjectSkeleton)(unsafe.Pointer(o.Native()))
	_arg1 = (*C.gchar)(C.CString(objectPath))
	defer C.free(unsafe.Pointer(_arg1))

	C.g_dbus_object_skeleton_set_object_path(_arg0, _arg1)
}

func (o dBusObjectSkeleton) Interface(interfaceName string) DBusInterface {
	return WrapDBusObject(gextras.InternObject(o)).Interface(interfaceName)
}

func (o dBusObjectSkeleton) ObjectPath() string {
	return WrapDBusObject(gextras.InternObject(o)).ObjectPath()
}
