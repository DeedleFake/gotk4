// Code generated by girgen. DO NOT EDIT.

package gio

import (
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gio-2.0 gio-unix-2.0 gobject-introspection-1.0 glib-2.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gio/gdesktopappinfo.h>
// #include <gio/gfiledescriptorbased.h>
// #include <gio/gio.h>
// #include <gio/gunixconnection.h>
// #include <gio/gunixcredentialsmessage.h>
// #include <gio/gunixfdlist.h>
// #include <gio/gunixfdmessage.h>
// #include <gio/gunixinputstream.h>
// #include <gio/gunixmounts.h>
// #include <gio/gunixoutputstream.h>
// #include <gio/gunixsocketaddress.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_unix_socket_address_get_type()), F: marshalUnixSocketAddress},
	})
}

// UnixSocketAddress: support for UNIX-domain (also known as local) sockets.
//
// UNIX domain sockets are generally visible in the filesystem. However, some
// systems support abstract socket names which are not visible in the filesystem
// and not affected by the filesystem permissions, visibility, etc. Currently
// this is only supported under Linux. If you attempt to use abstract sockets on
// other systems, function calls may return G_IO_ERROR_NOT_SUPPORTED errors. You
// can use g_unix_socket_address_abstract_names_supported() to see if abstract
// names are supported.
//
// Note that `<gio/gunixsocketaddress.h>` belongs to the UNIX-specific GIO
// interfaces, thus you have to use the `gio-unix-2.0.pc` pkg-config file when
// using it.
type UnixSocketAddress interface {
	SocketAddress
	SocketConnectable

	// IsAbstract tests if @address is abstract.
	IsAbstract() bool
	// Path gets @address's path, or for abstract sockets the "name".
	//
	// Guaranteed to be zero-terminated, but an abstract socket may contain
	// embedded zeros, and thus you should use
	// g_unix_socket_address_get_path_len() to get the true length of this
	// string.
	Path() string
	// PathLen gets the length of @address's path.
	//
	// For details, see g_unix_socket_address_get_path().
	PathLen() uint
}

// unixSocketAddress implements the UnixSocketAddress interface.
type unixSocketAddress struct {
	SocketAddress
	SocketConnectable
}

var _ UnixSocketAddress = (*unixSocketAddress)(nil)

// WrapUnixSocketAddress wraps a GObject to the right type. It is
// primarily used internally.
func WrapUnixSocketAddress(obj *externglib.Object) UnixSocketAddress {
	return UnixSocketAddress{
		SocketAddress:     WrapSocketAddress(obj),
		SocketConnectable: WrapSocketConnectable(obj),
	}
}

func marshalUnixSocketAddress(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapUnixSocketAddress(obj), nil
}

// IsAbstract tests if @address is abstract.
func (a unixSocketAddress) IsAbstract() bool {
	var _arg0 *C.GUnixSocketAddress // out

	_arg0 = (*C.GUnixSocketAddress)(unsafe.Pointer(a.Native()))

	var _cret C.gboolean // in

	_cret = C.g_unix_socket_address_get_is_abstract(_arg0)

	var _ok bool // out

	if _cret {
		_ok = true
	}

	return _ok
}

// Path gets @address's path, or for abstract sockets the "name".
//
// Guaranteed to be zero-terminated, but an abstract socket may contain
// embedded zeros, and thus you should use
// g_unix_socket_address_get_path_len() to get the true length of this
// string.
func (a unixSocketAddress) Path() string {
	var _arg0 *C.GUnixSocketAddress // out

	_arg0 = (*C.GUnixSocketAddress)(unsafe.Pointer(a.Native()))

	var _cret *C.char // in

	_cret = C.g_unix_socket_address_get_path(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

// PathLen gets the length of @address's path.
//
// For details, see g_unix_socket_address_get_path().
func (a unixSocketAddress) PathLen() uint {
	var _arg0 *C.GUnixSocketAddress // out

	_arg0 = (*C.GUnixSocketAddress)(unsafe.Pointer(a.Native()))

	var _cret C.gsize // in

	_cret = C.g_unix_socket_address_get_path_len(_arg0)

	var _gsize uint // out

	_gsize = (uint)(_cret)

	return _gsize
}
