// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gio-2.0 gio-unix-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <gio/gdesktopappinfo.h>
// #include <gio/gfiledescriptorbased.h>
// #include <gio/gio.h>
// #include <gio/gunixconnection.h>
// #include <gio/gunixcredentialsmessage.h>
// #include <gio/gunixfdlist.h>
// #include <gio/gunixfdmessage.h>
// #include <gio/gunixinputstream.h>
// #include <gio/gunixmounts.h>
// #include <gio/gunixoutputstream.h>
// #include <gio/gunixsocketaddress.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_unix_socket_address_get_type()), F: marshalUnixSocketAddress},
	})
}

// UnixSocketAddress: support for UNIX-domain (also known as local) sockets.
//
// UNIX domain sockets are generally visible in the filesystem. However, some
// systems support abstract socket names which are not visible in the filesystem
// and not affected by the filesystem permissions, visibility, etc. Currently
// this is only supported under Linux. If you attempt to use abstract sockets on
// other systems, function calls may return G_IO_ERROR_NOT_SUPPORTED errors. You
// can use g_unix_socket_address_abstract_names_supported() to see if abstract
// names are supported.
//
// Note that `<gio/gunixsocketaddress.h>` belongs to the UNIX-specific GIO
// interfaces, thus you have to use the `gio-unix-2.0.pc` pkg-config file when
// using it.
type UnixSocketAddress interface {
	SocketAddress

	// AddressType:
	AddressType() UnixSocketAddressType
	// IsAbstract:
	IsAbstract() bool
	// Path:
	Path() string
	// PathLen:
	PathLen() uint
}

// unixSocketAddress implements the UnixSocketAddress class.
type unixSocketAddress struct {
	SocketAddress
}

// WrapUnixSocketAddress wraps a GObject to the right type. It is
// primarily used internally.
func WrapUnixSocketAddress(obj *externglib.Object) UnixSocketAddress {
	return unixSocketAddress{
		SocketAddress: WrapSocketAddress(obj),
	}
}

func marshalUnixSocketAddress(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapUnixSocketAddress(obj), nil
}

// NewUnixSocketAddress:
func NewUnixSocketAddress(path string) UnixSocketAddress {
	var _arg1 *C.gchar          // out
	var _cret *C.GSocketAddress // in

	_arg1 = (*C.gchar)(C.CString(path))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.g_unix_socket_address_new(_arg1)

	var _unixSocketAddress UnixSocketAddress // out

	_unixSocketAddress = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(UnixSocketAddress)

	return _unixSocketAddress
}

// NewUnixSocketAddressAbstract:
func NewUnixSocketAddressAbstract(path []byte) UnixSocketAddress {
	var _arg1 *C.gchar
	var _arg2 C.gint
	var _cret *C.GSocketAddress // in

	_arg2 = C.gint(len(path))
	_arg1 = (*C.gchar)(unsafe.Pointer(&path[0]))

	_cret = C.g_unix_socket_address_new_abstract(_arg1, _arg2)

	var _unixSocketAddress UnixSocketAddress // out

	_unixSocketAddress = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(UnixSocketAddress)

	return _unixSocketAddress
}

// NewUnixSocketAddressWithType:
func NewUnixSocketAddressWithType(path []byte, typ UnixSocketAddressType) UnixSocketAddress {
	var _arg1 *C.gchar
	var _arg2 C.gint
	var _arg3 C.GUnixSocketAddressType // out
	var _cret *C.GSocketAddress        // in

	_arg2 = C.gint(len(path))
	_arg1 = (*C.gchar)(unsafe.Pointer(&path[0]))
	_arg3 = C.GUnixSocketAddressType(typ)

	_cret = C.g_unix_socket_address_new_with_type(_arg1, _arg2, _arg3)

	var _unixSocketAddress UnixSocketAddress // out

	_unixSocketAddress = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(UnixSocketAddress)

	return _unixSocketAddress
}

func (a unixSocketAddress) AddressType() UnixSocketAddressType {
	var _arg0 *C.GUnixSocketAddress    // out
	var _cret C.GUnixSocketAddressType // in

	_arg0 = (*C.GUnixSocketAddress)(unsafe.Pointer(a.Native()))

	_cret = C.g_unix_socket_address_get_address_type(_arg0)

	var _unixSocketAddressType UnixSocketAddressType // out

	_unixSocketAddressType = UnixSocketAddressType(_cret)

	return _unixSocketAddressType
}

func (a unixSocketAddress) IsAbstract() bool {
	var _arg0 *C.GUnixSocketAddress // out
	var _cret C.gboolean            // in

	_arg0 = (*C.GUnixSocketAddress)(unsafe.Pointer(a.Native()))

	_cret = C.g_unix_socket_address_get_is_abstract(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (a unixSocketAddress) Path() string {
	var _arg0 *C.GUnixSocketAddress // out
	var _cret *C.char               // in

	_arg0 = (*C.GUnixSocketAddress)(unsafe.Pointer(a.Native()))

	_cret = C.g_unix_socket_address_get_path(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

func (a unixSocketAddress) PathLen() uint {
	var _arg0 *C.GUnixSocketAddress // out
	var _cret C.gsize               // in

	_arg0 = (*C.GUnixSocketAddress)(unsafe.Pointer(a.Native()))

	_cret = C.g_unix_socket_address_get_path_len(_arg0)

	var _gsize uint // out

	_gsize = uint(_cret)

	return _gsize
}

func (c unixSocketAddress) Enumerate() SocketAddressEnumerator {
	return WrapSocketConnectable(gextras.InternObject(c)).Enumerate()
}

func (c unixSocketAddress) ProxyEnumerate() SocketAddressEnumerator {
	return WrapSocketConnectable(gextras.InternObject(c)).ProxyEnumerate()
}

func (c unixSocketAddress) String() string {
	return WrapSocketConnectable(gextras.InternObject(c)).String()
}
