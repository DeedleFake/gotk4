// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"runtime"
	"unsafe"

	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gio-2.0 gio-unix-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <gio/gdesktopappinfo.h>
// #include <gio/gfiledescriptorbased.h>
// #include <gio/gio.h>
// #include <gio/gunixconnection.h>
// #include <gio/gunixcredentialsmessage.h>
// #include <gio/gunixfdlist.h>
// #include <gio/gunixfdmessage.h>
// #include <gio/gunixinputstream.h>
// #include <gio/gunixmounts.h>
// #include <gio/gunixoutputstream.h>
// #include <gio/gunixsocketaddress.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_file_attribute_info_list_get_type()), F: marshalFileAttributeInfoList},
	})
}

// FileAttributeInfo: information about a specific attribute.
type FileAttributeInfo struct {
	native C.GFileAttributeInfo
}

// WrapFileAttributeInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapFileAttributeInfo(ptr unsafe.Pointer) *FileAttributeInfo {
	return (*FileAttributeInfo)(ptr)
}

// Native returns the underlying C source pointer.
func (f *FileAttributeInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(&f.native)
}

// FileAttributeInfoList acts as a lightweight registry for possible valid file
// attributes. The registry stores Key-Value pair formats as AttributeInfos.
type FileAttributeInfoList struct {
	native C.GFileAttributeInfoList
}

// WrapFileAttributeInfoList wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapFileAttributeInfoList(ptr unsafe.Pointer) *FileAttributeInfoList {
	return (*FileAttributeInfoList)(ptr)
}

func marshalFileAttributeInfoList(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return (*FileAttributeInfoList)(unsafe.Pointer(b)), nil
}

// NewFileAttributeInfoList constructs a struct FileAttributeInfoList.
func NewFileAttributeInfoList() FileAttributeInfoList {
	var _cret *C.GFileAttributeInfoList // in

	_cret = C.g_file_attribute_info_list_new()

	var _fileAttributeInfoList FileAttributeInfoList // out

	_fileAttributeInfoList = (FileAttributeInfoList)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(_fileAttributeInfoList, func(v FileAttributeInfoList) {
		C.g_file_attribute_info_list_unref((*C.GFileAttributeInfoList)(unsafe.Pointer(v)))
	})

	return _fileAttributeInfoList
}

// Native returns the underlying C source pointer.
func (f *FileAttributeInfoList) Native() unsafe.Pointer {
	return unsafe.Pointer(&f.native)
}

// Add adds a new attribute with @name to the @list, setting its @type and
// @flags.
func (l *FileAttributeInfoList) Add(name string, typ FileAttributeType, flags FileAttributeInfoFlags) {
	var _arg0 *C.GFileAttributeInfoList // out
	var _arg1 *C.char                   // out
	var _arg2 C.GFileAttributeType      // out
	var _arg3 C.GFileAttributeInfoFlags // out

	_arg0 = (*C.GFileAttributeInfoList)(unsafe.Pointer(l))
	_arg1 = (*C.char)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.GFileAttributeType(typ)
	_arg3 = C.GFileAttributeInfoFlags(flags)

	C.g_file_attribute_info_list_add(_arg0, _arg1, _arg2, _arg3)
}

// Dup makes a duplicate of a file attribute info list.
func (l *FileAttributeInfoList) Dup() FileAttributeInfoList {
	var _arg0 *C.GFileAttributeInfoList // out
	var _cret *C.GFileAttributeInfoList // in

	_arg0 = (*C.GFileAttributeInfoList)(unsafe.Pointer(l))

	_cret = C.g_file_attribute_info_list_dup(_arg0)

	var _fileAttributeInfoList FileAttributeInfoList // out

	_fileAttributeInfoList = (FileAttributeInfoList)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(_fileAttributeInfoList, func(v FileAttributeInfoList) {
		C.g_file_attribute_info_list_unref((*C.GFileAttributeInfoList)(unsafe.Pointer(v)))
	})

	return _fileAttributeInfoList
}

// Lookup gets the file attribute with the name @name from @list.
func (l *FileAttributeInfoList) Lookup(name string) FileAttributeInfo {
	var _arg0 *C.GFileAttributeInfoList // out
	var _arg1 *C.char                   // out
	var _cret *C.GFileAttributeInfo     // in

	_arg0 = (*C.GFileAttributeInfoList)(unsafe.Pointer(l))
	_arg1 = (*C.char)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.g_file_attribute_info_list_lookup(_arg0, _arg1)

	var _fileAttributeInfo FileAttributeInfo // out

	_fileAttributeInfo = (FileAttributeInfo)(unsafe.Pointer(_cret))

	return _fileAttributeInfo
}

// Ref references a file attribute info list.
func (l *FileAttributeInfoList) Ref() FileAttributeInfoList {
	var _arg0 *C.GFileAttributeInfoList // out
	var _cret *C.GFileAttributeInfoList // in

	_arg0 = (*C.GFileAttributeInfoList)(unsafe.Pointer(l))

	_cret = C.g_file_attribute_info_list_ref(_arg0)

	var _fileAttributeInfoList FileAttributeInfoList // out

	_fileAttributeInfoList = (FileAttributeInfoList)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(_fileAttributeInfoList, func(v FileAttributeInfoList) {
		C.g_file_attribute_info_list_unref((*C.GFileAttributeInfoList)(unsafe.Pointer(v)))
	})

	return _fileAttributeInfoList
}

// Unref removes a reference from the given @list. If the reference count falls
// to zero, the @list is deleted.
func (l *FileAttributeInfoList) Unref() {
	var _arg0 *C.GFileAttributeInfoList // out

	_arg0 = (*C.GFileAttributeInfoList)(unsafe.Pointer(l))

	C.g_file_attribute_info_list_unref(_arg0)
}
