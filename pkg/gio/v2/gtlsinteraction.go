// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"github.com/diamondburned/gotk4/internal/gerror"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gio-2.0 gio-unix-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gio/gdesktopappinfo.h>
// #include <gio/gfiledescriptorbased.h>
// #include <gio/gio.h>
// #include <gio/gunixconnection.h>
// #include <gio/gunixcredentialsmessage.h>
// #include <gio/gunixfdlist.h>
// #include <gio/gunixfdmessage.h>
// #include <gio/gunixinputstream.h>
// #include <gio/gunixmounts.h>
// #include <gio/gunixoutputstream.h>
// #include <gio/gunixsocketaddress.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_tls_interaction_get_type()), F: marshalTLSInteraction},
	})
}

// TLSInteraction provides a mechanism for the TLS connection and database code
// to interact with the user. It can be used to ask the user for passwords.
//
// To use a Interaction with a TLS connection use
// g_tls_connection_set_interaction().
//
// Callers should instantiate a derived class that implements the various
// interaction methods to show the required dialogs.
//
// Callers should use the 'invoke' functions like
// g_tls_interaction_invoke_ask_password() to run interaction methods. These
// functions make sure that the interaction is invoked in the main loop and not
// in the current thread, if the current thread is not running the main loop.
//
// Derived classes can choose to implement whichever interactions methods they'd
// like to support by overriding those virtual methods in their class
// initialization function. Any interactions not implemented will return
// G_TLS_INTERACTION_UNHANDLED. If a derived class implements an async method,
// it must also implement the corresponding finish method.
type TLSInteraction interface {
	gextras.Objector

	// AskPassword: run synchronous interaction to ask the user for a password.
	// In general, g_tls_interaction_invoke_ask_password() should be used
	// instead of this function.
	//
	// Derived subclasses usually implement a password prompt, although they may
	// also choose to provide a password from elsewhere. The @password value
	// will be filled in and then @callback will be called. Alternatively the
	// user may abort this password request, which will usually abort the TLS
	// connection.
	//
	// If the interaction is cancelled by the cancellation object, or by the
	// user then G_TLS_INTERACTION_FAILED will be returned with an error that
	// contains a G_IO_ERROR_CANCELLED error code. Certain implementations may
	// not support immediate cancellation.
	AskPassword(password TLSPassword, cancellable Cancellable) (tlsInteractionResult TLSInteractionResult, err error)
	// AskPasswordAsync: run asynchronous interaction to ask the user for a
	// password. In general, g_tls_interaction_invoke_ask_password() should be
	// used instead of this function.
	//
	// Derived subclasses usually implement a password prompt, although they may
	// also choose to provide a password from elsewhere. The @password value
	// will be filled in and then @callback will be called. Alternatively the
	// user may abort this password request, which will usually abort the TLS
	// connection.
	//
	// If the interaction is cancelled by the cancellation object, or by the
	// user then G_TLS_INTERACTION_FAILED will be returned with an error that
	// contains a G_IO_ERROR_CANCELLED error code. Certain implementations may
	// not support immediate cancellation.
	//
	// Certain implementations may not support immediate cancellation.
	AskPasswordAsync(password TLSPassword, cancellable Cancellable, callback AsyncReadyCallback)
	// AskPasswordFinish: complete an ask password user interaction request.
	// This should be once the g_tls_interaction_ask_password_async() completion
	// callback is called.
	//
	// If G_TLS_INTERACTION_HANDLED is returned, then the Password passed to
	// g_tls_interaction_ask_password() will have its password filled in.
	//
	// If the interaction is cancelled by the cancellation object, or by the
	// user then G_TLS_INTERACTION_FAILED will be returned with an error that
	// contains a G_IO_ERROR_CANCELLED error code.
	AskPasswordFinish(result AsyncResult) (tlsInteractionResult TLSInteractionResult, err error)
	// InvokeAskPassword: invoke the interaction to ask the user for a password.
	// It invokes this interaction in the main loop, specifically the Context
	// returned by g_main_context_get_thread_default() when the interaction is
	// created. This is called by called by Connection or Database to ask the
	// user for a password.
	//
	// Derived subclasses usually implement a password prompt, although they may
	// also choose to provide a password from elsewhere. The @password value
	// will be filled in and then @callback will be called. Alternatively the
	// user may abort this password request, which will usually abort the TLS
	// connection.
	//
	// The implementation can either be a synchronous (eg: modal dialog) or an
	// asynchronous one (eg: modeless dialog). This function will take care of
	// calling which ever one correctly.
	//
	// If the interaction is cancelled by the cancellation object, or by the
	// user then G_TLS_INTERACTION_FAILED will be returned with an error that
	// contains a G_IO_ERROR_CANCELLED error code. Certain implementations may
	// not support immediate cancellation.
	InvokeAskPassword(password TLSPassword, cancellable Cancellable) (tlsInteractionResult TLSInteractionResult, err error)
	// InvokeRequestCertificate: invoke the interaction to ask the user to
	// choose a certificate to use with the connection. It invokes this
	// interaction in the main loop, specifically the Context returned by
	// g_main_context_get_thread_default() when the interaction is created. This
	// is called by called by Connection when the peer requests a certificate
	// during the handshake.
	//
	// Derived subclasses usually implement a certificate selector, although
	// they may also choose to provide a certificate from elsewhere.
	// Alternatively the user may abort this certificate request, which may or
	// may not abort the TLS connection.
	//
	// The implementation can either be a synchronous (eg: modal dialog) or an
	// asynchronous one (eg: modeless dialog). This function will take care of
	// calling which ever one correctly.
	//
	// If the interaction is cancelled by the cancellation object, or by the
	// user then G_TLS_INTERACTION_FAILED will be returned with an error that
	// contains a G_IO_ERROR_CANCELLED error code. Certain implementations may
	// not support immediate cancellation.
	InvokeRequestCertificate(connection TLSConnection, flags TLSCertificateRequestFlags, cancellable Cancellable) (tlsInteractionResult TLSInteractionResult, err error)
	// RequestCertificate: run synchronous interaction to ask the user to choose
	// a certificate to use with the connection. In general,
	// g_tls_interaction_invoke_request_certificate() should be used instead of
	// this function.
	//
	// Derived subclasses usually implement a certificate selector, although
	// they may also choose to provide a certificate from elsewhere.
	// Alternatively the user may abort this certificate request, which will
	// usually abort the TLS connection.
	//
	// If G_TLS_INTERACTION_HANDLED is returned, then the Connection passed to
	// g_tls_interaction_request_certificate() will have had its
	// Connection:certificate filled in.
	//
	// If the interaction is cancelled by the cancellation object, or by the
	// user then G_TLS_INTERACTION_FAILED will be returned with an error that
	// contains a G_IO_ERROR_CANCELLED error code. Certain implementations may
	// not support immediate cancellation.
	RequestCertificate(connection TLSConnection, flags TLSCertificateRequestFlags, cancellable Cancellable) (tlsInteractionResult TLSInteractionResult, err error)
	// RequestCertificateAsync: run asynchronous interaction to ask the user for
	// a certificate to use with the connection. In general,
	// g_tls_interaction_invoke_request_certificate() should be used instead of
	// this function.
	//
	// Derived subclasses usually implement a certificate selector, although
	// they may also choose to provide a certificate from elsewhere. @callback
	// will be called when the operation completes. Alternatively the user may
	// abort this certificate request, which will usually abort the TLS
	// connection.
	RequestCertificateAsync(connection TLSConnection, flags TLSCertificateRequestFlags, cancellable Cancellable, callback AsyncReadyCallback)
	// RequestCertificateFinish: complete a request certificate user interaction
	// request. This should be once the
	// g_tls_interaction_request_certificate_async() completion callback is
	// called.
	//
	// If G_TLS_INTERACTION_HANDLED is returned, then the Connection passed to
	// g_tls_interaction_request_certificate_async() will have had its
	// Connection:certificate filled in.
	//
	// If the interaction is cancelled by the cancellation object, or by the
	// user then G_TLS_INTERACTION_FAILED will be returned with an error that
	// contains a G_IO_ERROR_CANCELLED error code.
	RequestCertificateFinish(result AsyncResult) (tlsInteractionResult TLSInteractionResult, err error)
}

// tlsInteraction implements the TLSInteraction interface.
type tlsInteraction struct {
	gextras.Objector
}

var _ TLSInteraction = (*tlsInteraction)(nil)

// WrapTLSInteraction wraps a GObject to the right type. It is
// primarily used internally.
func WrapTLSInteraction(obj *externglib.Object) TLSInteraction {
	return TLSInteraction{
		Objector: obj,
	}
}

func marshalTLSInteraction(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapTLSInteraction(obj), nil
}

// AskPassword: run synchronous interaction to ask the user for a password.
// In general, g_tls_interaction_invoke_ask_password() should be used
// instead of this function.
//
// Derived subclasses usually implement a password prompt, although they may
// also choose to provide a password from elsewhere. The @password value
// will be filled in and then @callback will be called. Alternatively the
// user may abort this password request, which will usually abort the TLS
// connection.
//
// If the interaction is cancelled by the cancellation object, or by the
// user then G_TLS_INTERACTION_FAILED will be returned with an error that
// contains a G_IO_ERROR_CANCELLED error code. Certain implementations may
// not support immediate cancellation.
func (i tlsInteraction) AskPassword(password TLSPassword, cancellable Cancellable) (tlsInteractionResult TLSInteractionResult, err error) {
	var arg0 *C.GTlsInteraction
	var arg1 *C.GTlsPassword
	var arg2 *C.GCancellable

	arg0 = (*C.GTlsInteraction)(unsafe.Pointer(i.Native()))
	arg1 = (*C.GTlsPassword)(unsafe.Pointer(password.Native()))
	arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	var errout *C.GError
	var goerr error
	var cret C.GTlsInteractionResult
	var ret2 TLSInteractionResult

	cret = C.g_tls_interaction_ask_password(arg0, password, cancellable, &errout)

	goerr = gerror.Take(unsafe.Pointer(errout))
	ret2 = TLSInteractionResult(cret)

	return goerr, ret2
}

// AskPasswordAsync: run asynchronous interaction to ask the user for a
// password. In general, g_tls_interaction_invoke_ask_password() should be
// used instead of this function.
//
// Derived subclasses usually implement a password prompt, although they may
// also choose to provide a password from elsewhere. The @password value
// will be filled in and then @callback will be called. Alternatively the
// user may abort this password request, which will usually abort the TLS
// connection.
//
// If the interaction is cancelled by the cancellation object, or by the
// user then G_TLS_INTERACTION_FAILED will be returned with an error that
// contains a G_IO_ERROR_CANCELLED error code. Certain implementations may
// not support immediate cancellation.
//
// Certain implementations may not support immediate cancellation.
func (i tlsInteraction) AskPasswordAsync(password TLSPassword, cancellable Cancellable, callback AsyncReadyCallback) {
	var arg0 *C.GTlsInteraction

	arg0 = (*C.GTlsInteraction)(unsafe.Pointer(i.Native()))

	C.g_tls_interaction_ask_password_async(arg0, password, cancellable, callback, userData)
}

// AskPasswordFinish: complete an ask password user interaction request.
// This should be once the g_tls_interaction_ask_password_async() completion
// callback is called.
//
// If G_TLS_INTERACTION_HANDLED is returned, then the Password passed to
// g_tls_interaction_ask_password() will have its password filled in.
//
// If the interaction is cancelled by the cancellation object, or by the
// user then G_TLS_INTERACTION_FAILED will be returned with an error that
// contains a G_IO_ERROR_CANCELLED error code.
func (i tlsInteraction) AskPasswordFinish(result AsyncResult) (tlsInteractionResult TLSInteractionResult, err error) {
	var arg0 *C.GTlsInteraction
	var arg1 *C.GAsyncResult

	arg0 = (*C.GTlsInteraction)(unsafe.Pointer(i.Native()))
	arg1 = (*C.GAsyncResult)(unsafe.Pointer(result.Native()))

	var errout *C.GError
	var goerr error
	var cret C.GTlsInteractionResult
	var ret2 TLSInteractionResult

	cret = C.g_tls_interaction_ask_password_finish(arg0, result, &errout)

	goerr = gerror.Take(unsafe.Pointer(errout))
	ret2 = TLSInteractionResult(cret)

	return goerr, ret2
}

// InvokeAskPassword: invoke the interaction to ask the user for a password.
// It invokes this interaction in the main loop, specifically the Context
// returned by g_main_context_get_thread_default() when the interaction is
// created. This is called by called by Connection or Database to ask the
// user for a password.
//
// Derived subclasses usually implement a password prompt, although they may
// also choose to provide a password from elsewhere. The @password value
// will be filled in and then @callback will be called. Alternatively the
// user may abort this password request, which will usually abort the TLS
// connection.
//
// The implementation can either be a synchronous (eg: modal dialog) or an
// asynchronous one (eg: modeless dialog). This function will take care of
// calling which ever one correctly.
//
// If the interaction is cancelled by the cancellation object, or by the
// user then G_TLS_INTERACTION_FAILED will be returned with an error that
// contains a G_IO_ERROR_CANCELLED error code. Certain implementations may
// not support immediate cancellation.
func (i tlsInteraction) InvokeAskPassword(password TLSPassword, cancellable Cancellable) (tlsInteractionResult TLSInteractionResult, err error) {
	var arg0 *C.GTlsInteraction
	var arg1 *C.GTlsPassword
	var arg2 *C.GCancellable

	arg0 = (*C.GTlsInteraction)(unsafe.Pointer(i.Native()))
	arg1 = (*C.GTlsPassword)(unsafe.Pointer(password.Native()))
	arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	var errout *C.GError
	var goerr error
	var cret C.GTlsInteractionResult
	var ret2 TLSInteractionResult

	cret = C.g_tls_interaction_invoke_ask_password(arg0, password, cancellable, &errout)

	goerr = gerror.Take(unsafe.Pointer(errout))
	ret2 = TLSInteractionResult(cret)

	return goerr, ret2
}

// InvokeRequestCertificate: invoke the interaction to ask the user to
// choose a certificate to use with the connection. It invokes this
// interaction in the main loop, specifically the Context returned by
// g_main_context_get_thread_default() when the interaction is created. This
// is called by called by Connection when the peer requests a certificate
// during the handshake.
//
// Derived subclasses usually implement a certificate selector, although
// they may also choose to provide a certificate from elsewhere.
// Alternatively the user may abort this certificate request, which may or
// may not abort the TLS connection.
//
// The implementation can either be a synchronous (eg: modal dialog) or an
// asynchronous one (eg: modeless dialog). This function will take care of
// calling which ever one correctly.
//
// If the interaction is cancelled by the cancellation object, or by the
// user then G_TLS_INTERACTION_FAILED will be returned with an error that
// contains a G_IO_ERROR_CANCELLED error code. Certain implementations may
// not support immediate cancellation.
func (i tlsInteraction) InvokeRequestCertificate(connection TLSConnection, flags TLSCertificateRequestFlags, cancellable Cancellable) (tlsInteractionResult TLSInteractionResult, err error) {
	var arg0 *C.GTlsInteraction
	var arg1 *C.GTlsConnection
	var arg2 C.GTlsCertificateRequestFlags
	var arg3 *C.GCancellable

	arg0 = (*C.GTlsInteraction)(unsafe.Pointer(i.Native()))
	arg1 = (*C.GTlsConnection)(unsafe.Pointer(connection.Native()))
	arg2 = (C.GTlsCertificateRequestFlags)(flags)
	arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	var errout *C.GError
	var goerr error
	var cret C.GTlsInteractionResult
	var ret2 TLSInteractionResult

	cret = C.g_tls_interaction_invoke_request_certificate(arg0, connection, flags, cancellable, &errout)

	goerr = gerror.Take(unsafe.Pointer(errout))
	ret2 = TLSInteractionResult(cret)

	return goerr, ret2
}

// RequestCertificate: run synchronous interaction to ask the user to choose
// a certificate to use with the connection. In general,
// g_tls_interaction_invoke_request_certificate() should be used instead of
// this function.
//
// Derived subclasses usually implement a certificate selector, although
// they may also choose to provide a certificate from elsewhere.
// Alternatively the user may abort this certificate request, which will
// usually abort the TLS connection.
//
// If G_TLS_INTERACTION_HANDLED is returned, then the Connection passed to
// g_tls_interaction_request_certificate() will have had its
// Connection:certificate filled in.
//
// If the interaction is cancelled by the cancellation object, or by the
// user then G_TLS_INTERACTION_FAILED will be returned with an error that
// contains a G_IO_ERROR_CANCELLED error code. Certain implementations may
// not support immediate cancellation.
func (i tlsInteraction) RequestCertificate(connection TLSConnection, flags TLSCertificateRequestFlags, cancellable Cancellable) (tlsInteractionResult TLSInteractionResult, err error) {
	var arg0 *C.GTlsInteraction
	var arg1 *C.GTlsConnection
	var arg2 C.GTlsCertificateRequestFlags
	var arg3 *C.GCancellable

	arg0 = (*C.GTlsInteraction)(unsafe.Pointer(i.Native()))
	arg1 = (*C.GTlsConnection)(unsafe.Pointer(connection.Native()))
	arg2 = (C.GTlsCertificateRequestFlags)(flags)
	arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	var errout *C.GError
	var goerr error
	var cret C.GTlsInteractionResult
	var ret2 TLSInteractionResult

	cret = C.g_tls_interaction_request_certificate(arg0, connection, flags, cancellable, &errout)

	goerr = gerror.Take(unsafe.Pointer(errout))
	ret2 = TLSInteractionResult(cret)

	return goerr, ret2
}

// RequestCertificateAsync: run asynchronous interaction to ask the user for
// a certificate to use with the connection. In general,
// g_tls_interaction_invoke_request_certificate() should be used instead of
// this function.
//
// Derived subclasses usually implement a certificate selector, although
// they may also choose to provide a certificate from elsewhere. @callback
// will be called when the operation completes. Alternatively the user may
// abort this certificate request, which will usually abort the TLS
// connection.
func (i tlsInteraction) RequestCertificateAsync(connection TLSConnection, flags TLSCertificateRequestFlags, cancellable Cancellable, callback AsyncReadyCallback) {
	var arg0 *C.GTlsInteraction

	arg0 = (*C.GTlsInteraction)(unsafe.Pointer(i.Native()))

	C.g_tls_interaction_request_certificate_async(arg0, connection, flags, cancellable, callback, userData)
}

// RequestCertificateFinish: complete a request certificate user interaction
// request. This should be once the
// g_tls_interaction_request_certificate_async() completion callback is
// called.
//
// If G_TLS_INTERACTION_HANDLED is returned, then the Connection passed to
// g_tls_interaction_request_certificate_async() will have had its
// Connection:certificate filled in.
//
// If the interaction is cancelled by the cancellation object, or by the
// user then G_TLS_INTERACTION_FAILED will be returned with an error that
// contains a G_IO_ERROR_CANCELLED error code.
func (i tlsInteraction) RequestCertificateFinish(result AsyncResult) (tlsInteractionResult TLSInteractionResult, err error) {
	var arg0 *C.GTlsInteraction
	var arg1 *C.GAsyncResult

	arg0 = (*C.GTlsInteraction)(unsafe.Pointer(i.Native()))
	arg1 = (*C.GAsyncResult)(unsafe.Pointer(result.Native()))

	var errout *C.GError
	var goerr error
	var cret C.GTlsInteractionResult
	var ret2 TLSInteractionResult

	cret = C.g_tls_interaction_request_certificate_finish(arg0, result, &errout)

	goerr = gerror.Take(unsafe.Pointer(errout))
	ret2 = TLSInteractionResult(cret)

	return goerr, ret2
}
