// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/box"
	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gio-2.0 gio-unix-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <gio/gdesktopappinfo.h>
// #include <gio/gfiledescriptorbased.h>
// #include <gio/gio.h>
// #include <gio/gunixconnection.h>
// #include <gio/gunixcredentialsmessage.h>
// #include <gio/gunixfdlist.h>
// #include <gio/gunixfdmessage.h>
// #include <gio/gunixinputstream.h>
// #include <gio/gunixmounts.h>
// #include <gio/gunixoutputstream.h>
// #include <gio/gunixsocketaddress.h>
// #include <glib-object.h>
//
// void gotk4_AsyncReadyCallback(GObject*, GAsyncResult*, gpointer);
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_tls_interaction_get_type()), F: marshalTLSInteraction},
	})
}

// TLSInteraction provides a mechanism for the TLS connection and database code
// to interact with the user. It can be used to ask the user for passwords.
//
// To use a Interaction with a TLS connection use
// g_tls_connection_set_interaction().
//
// Callers should instantiate a derived class that implements the various
// interaction methods to show the required dialogs.
//
// Callers should use the 'invoke' functions like
// g_tls_interaction_invoke_ask_password() to run interaction methods. These
// functions make sure that the interaction is invoked in the main loop and not
// in the current thread, if the current thread is not running the main loop.
//
// Derived classes can choose to implement whichever interactions methods they'd
// like to support by overriding those virtual methods in their class
// initialization function. Any interactions not implemented will return
// G_TLS_INTERACTION_UNHANDLED. If a derived class implements an async method,
// it must also implement the corresponding finish method.
type TLSInteraction interface {
	gextras.Objector

	AskPasswordTLSInteraction(password TLSPassword, cancellable Cancellable) (TLSInteractionResult, error)

	AskPasswordAsyncTLSInteraction(password TLSPassword, cancellable Cancellable, callback AsyncReadyCallback)

	AskPasswordFinishTLSInteraction(result AsyncResult) (TLSInteractionResult, error)

	InvokeAskPasswordTLSInteraction(password TLSPassword, cancellable Cancellable) (TLSInteractionResult, error)

	InvokeRequestCertificateTLSInteraction(connection TLSConnection, flags TLSCertificateRequestFlags, cancellable Cancellable) (TLSInteractionResult, error)

	RequestCertificateTLSInteraction(connection TLSConnection, flags TLSCertificateRequestFlags, cancellable Cancellable) (TLSInteractionResult, error)

	RequestCertificateAsyncTLSInteraction(connection TLSConnection, flags TLSCertificateRequestFlags, cancellable Cancellable, callback AsyncReadyCallback)

	RequestCertificateFinishTLSInteraction(result AsyncResult) (TLSInteractionResult, error)
}

// tlsInteraction implements the TLSInteraction class.
type tlsInteraction struct {
	gextras.Objector
}

// WrapTLSInteraction wraps a GObject to the right type. It is
// primarily used internally.
func WrapTLSInteraction(obj *externglib.Object) TLSInteraction {
	return tlsInteraction{
		Objector: obj,
	}
}

func marshalTLSInteraction(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapTLSInteraction(obj), nil
}

func (i tlsInteraction) AskPasswordTLSInteraction(password TLSPassword, cancellable Cancellable) (TLSInteractionResult, error) {
	var _arg0 *C.GTlsInteraction      // out
	var _arg1 *C.GTlsPassword         // out
	var _arg2 *C.GCancellable         // out
	var _cret C.GTlsInteractionResult // in
	var _cerr *C.GError               // in

	_arg0 = (*C.GTlsInteraction)(unsafe.Pointer(i.Native()))
	_arg1 = (*C.GTlsPassword)(unsafe.Pointer(password.Native()))
	_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	_cret = C.g_tls_interaction_ask_password(_arg0, _arg1, _arg2, &_cerr)

	var _tlsInteractionResult TLSInteractionResult // out
	var _goerr error                               // out

	_tlsInteractionResult = TLSInteractionResult(_cret)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _tlsInteractionResult, _goerr
}

func (i tlsInteraction) AskPasswordAsyncTLSInteraction(password TLSPassword, cancellable Cancellable, callback AsyncReadyCallback) {
	var _arg0 *C.GTlsInteraction    // out
	var _arg1 *C.GTlsPassword       // out
	var _arg2 *C.GCancellable       // out
	var _arg3 C.GAsyncReadyCallback // out
	var _arg4 C.gpointer

	_arg0 = (*C.GTlsInteraction)(unsafe.Pointer(i.Native()))
	_arg1 = (*C.GTlsPassword)(unsafe.Pointer(password.Native()))
	_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg3 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg4 = C.gpointer(box.Assign(callback))

	C.g_tls_interaction_ask_password_async(_arg0, _arg1, _arg2, _arg3, _arg4)
}

func (i tlsInteraction) AskPasswordFinishTLSInteraction(result AsyncResult) (TLSInteractionResult, error) {
	var _arg0 *C.GTlsInteraction      // out
	var _arg1 *C.GAsyncResult         // out
	var _cret C.GTlsInteractionResult // in
	var _cerr *C.GError               // in

	_arg0 = (*C.GTlsInteraction)(unsafe.Pointer(i.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(result.Native()))

	_cret = C.g_tls_interaction_ask_password_finish(_arg0, _arg1, &_cerr)

	var _tlsInteractionResult TLSInteractionResult // out
	var _goerr error                               // out

	_tlsInteractionResult = TLSInteractionResult(_cret)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _tlsInteractionResult, _goerr
}

func (i tlsInteraction) InvokeAskPasswordTLSInteraction(password TLSPassword, cancellable Cancellable) (TLSInteractionResult, error) {
	var _arg0 *C.GTlsInteraction      // out
	var _arg1 *C.GTlsPassword         // out
	var _arg2 *C.GCancellable         // out
	var _cret C.GTlsInteractionResult // in
	var _cerr *C.GError               // in

	_arg0 = (*C.GTlsInteraction)(unsafe.Pointer(i.Native()))
	_arg1 = (*C.GTlsPassword)(unsafe.Pointer(password.Native()))
	_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	_cret = C.g_tls_interaction_invoke_ask_password(_arg0, _arg1, _arg2, &_cerr)

	var _tlsInteractionResult TLSInteractionResult // out
	var _goerr error                               // out

	_tlsInteractionResult = TLSInteractionResult(_cret)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _tlsInteractionResult, _goerr
}

func (i tlsInteraction) InvokeRequestCertificateTLSInteraction(connection TLSConnection, flags TLSCertificateRequestFlags, cancellable Cancellable) (TLSInteractionResult, error) {
	var _arg0 *C.GTlsInteraction            // out
	var _arg1 *C.GTlsConnection             // out
	var _arg2 C.GTlsCertificateRequestFlags // out
	var _arg3 *C.GCancellable               // out
	var _cret C.GTlsInteractionResult       // in
	var _cerr *C.GError                     // in

	_arg0 = (*C.GTlsInteraction)(unsafe.Pointer(i.Native()))
	_arg1 = (*C.GTlsConnection)(unsafe.Pointer(connection.Native()))
	_arg2 = C.GTlsCertificateRequestFlags(flags)
	_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	_cret = C.g_tls_interaction_invoke_request_certificate(_arg0, _arg1, _arg2, _arg3, &_cerr)

	var _tlsInteractionResult TLSInteractionResult // out
	var _goerr error                               // out

	_tlsInteractionResult = TLSInteractionResult(_cret)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _tlsInteractionResult, _goerr
}

func (i tlsInteraction) RequestCertificateTLSInteraction(connection TLSConnection, flags TLSCertificateRequestFlags, cancellable Cancellable) (TLSInteractionResult, error) {
	var _arg0 *C.GTlsInteraction            // out
	var _arg1 *C.GTlsConnection             // out
	var _arg2 C.GTlsCertificateRequestFlags // out
	var _arg3 *C.GCancellable               // out
	var _cret C.GTlsInteractionResult       // in
	var _cerr *C.GError                     // in

	_arg0 = (*C.GTlsInteraction)(unsafe.Pointer(i.Native()))
	_arg1 = (*C.GTlsConnection)(unsafe.Pointer(connection.Native()))
	_arg2 = C.GTlsCertificateRequestFlags(flags)
	_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	_cret = C.g_tls_interaction_request_certificate(_arg0, _arg1, _arg2, _arg3, &_cerr)

	var _tlsInteractionResult TLSInteractionResult // out
	var _goerr error                               // out

	_tlsInteractionResult = TLSInteractionResult(_cret)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _tlsInteractionResult, _goerr
}

func (i tlsInteraction) RequestCertificateAsyncTLSInteraction(connection TLSConnection, flags TLSCertificateRequestFlags, cancellable Cancellable, callback AsyncReadyCallback) {
	var _arg0 *C.GTlsInteraction            // out
	var _arg1 *C.GTlsConnection             // out
	var _arg2 C.GTlsCertificateRequestFlags // out
	var _arg3 *C.GCancellable               // out
	var _arg4 C.GAsyncReadyCallback         // out
	var _arg5 C.gpointer

	_arg0 = (*C.GTlsInteraction)(unsafe.Pointer(i.Native()))
	_arg1 = (*C.GTlsConnection)(unsafe.Pointer(connection.Native()))
	_arg2 = C.GTlsCertificateRequestFlags(flags)
	_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg4 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg5 = C.gpointer(box.Assign(callback))

	C.g_tls_interaction_request_certificate_async(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
}

func (i tlsInteraction) RequestCertificateFinishTLSInteraction(result AsyncResult) (TLSInteractionResult, error) {
	var _arg0 *C.GTlsInteraction      // out
	var _arg1 *C.GAsyncResult         // out
	var _cret C.GTlsInteractionResult // in
	var _cerr *C.GError               // in

	_arg0 = (*C.GTlsInteraction)(unsafe.Pointer(i.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(result.Native()))

	_cret = C.g_tls_interaction_request_certificate_finish(_arg0, _arg1, &_cerr)

	var _tlsInteractionResult TLSInteractionResult // out
	var _goerr error                               // out

	_tlsInteractionResult = TLSInteractionResult(_cret)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _tlsInteractionResult, _goerr
}
