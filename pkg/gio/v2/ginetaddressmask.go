// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gio-2.0 gio-unix-2.0 glib-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <gio/gdesktopappinfo.h>
// #include <gio/gfiledescriptorbased.h>
// #include <gio/gio.h>
// #include <gio/gunixconnection.h>
// #include <gio/gunixcredentialsmessage.h>
// #include <gio/gunixfdlist.h>
// #include <gio/gunixfdmessage.h>
// #include <gio/gunixinputstream.h>
// #include <gio/gunixmounts.h>
// #include <gio/gunixoutputstream.h>
// #include <gio/gunixsocketaddress.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_inet_address_mask_get_type()), F: marshalInetAddressMask},
	})
}

// InetAddressMask represents a range of IPv4 or IPv6 addresses described by a
// base address and a length indicating how many bits of the base address are
// relevant for matching purposes. These are often given in string form. Eg,
// "10.0.0.0/8", or "fe80::/10".
type InetAddressMask interface {
	gextras.Objector
	Initable

	// Equal tests if @mask and @mask2 are the same mask.
	Equal(mask2 InetAddressMask) bool
	// Length gets @mask's length
	Length() uint
	// Matches tests if @address falls within the range described by @mask.
	Matches(address InetAddress) bool
	// String converts @mask back to its corresponding string form.
	String() string
}

// inetAddressMask implements the InetAddressMask class.
type inetAddressMask struct {
	gextras.Objector
	Initable
}

var _ InetAddressMask = (*inetAddressMask)(nil)

// WrapInetAddressMask wraps a GObject to the right type. It is
// primarily used internally.
func WrapInetAddressMask(obj *externglib.Object) InetAddressMask {
	return inetAddressMask{
		Objector: obj,
		Initable: WrapInitable(obj),
	}
}

func marshalInetAddressMask(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapInetAddressMask(obj), nil
}

// Equal tests if @mask and @mask2 are the same mask.
func (m inetAddressMask) Equal(mask2 InetAddressMask) bool {
	var _arg0 *C.GInetAddressMask // out
	var _arg1 *C.GInetAddressMask // out

	_arg0 = (*C.GInetAddressMask)(unsafe.Pointer(m.Native()))
	_arg1 = (*C.GInetAddressMask)(unsafe.Pointer(mask2.Native()))

	var _cret C.gboolean // in

	_cret = C.g_inet_address_mask_equal(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Length gets @mask's length
func (m inetAddressMask) Length() uint {
	var _arg0 *C.GInetAddressMask // out

	_arg0 = (*C.GInetAddressMask)(unsafe.Pointer(m.Native()))

	var _cret C.guint // in

	_cret = C.g_inet_address_mask_get_length(_arg0)

	var _guint uint // out

	_guint = (uint)(_cret)

	return _guint
}

// Matches tests if @address falls within the range described by @mask.
func (m inetAddressMask) Matches(address InetAddress) bool {
	var _arg0 *C.GInetAddressMask // out
	var _arg1 *C.GInetAddress     // out

	_arg0 = (*C.GInetAddressMask)(unsafe.Pointer(m.Native()))
	_arg1 = (*C.GInetAddress)(unsafe.Pointer(address.Native()))

	var _cret C.gboolean // in

	_cret = C.g_inet_address_mask_matches(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// String converts @mask back to its corresponding string form.
func (m inetAddressMask) String() string {
	var _arg0 *C.GInetAddressMask // out

	_arg0 = (*C.GInetAddressMask)(unsafe.Pointer(m.Native()))

	var _cret *C.gchar // in

	_cret = C.g_inet_address_mask_to_string(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}
