// Code generated by girgen. DO NOT EDIT.

package gio

import (
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gio-2.0 gio-unix-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gio/gdesktopappinfo.h>
// #include <gio/gfiledescriptorbased.h>
// #include <gio/gio.h>
// #include <gio/gunixconnection.h>
// #include <gio/gunixcredentialsmessage.h>
// #include <gio/gunixfdlist.h>
// #include <gio/gunixfdmessage.h>
// #include <gio/gunixinputstream.h>
// #include <gio/gunixmounts.h>
// #include <gio/gunixoutputstream.h>
// #include <gio/gunixsocketaddress.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_inet_address_mask_get_type()), F: marshalInetAddressMask},
	})
}

// InetAddressMask represents a range of IPv4 or IPv6 addresses described by a
// base address and a length indicating how many bits of the base address are
// relevant for matching purposes. These are often given in string form. Eg,
// "10.0.0.0/8", or "fe80::/10".
type InetAddressMask interface {
	gextras.Objector
	Initable

	// Equal tests if @mask and @mask2 are the same mask.
	Equal(m InetAddressMask, mask2 InetAddressMask) bool
	// Address gets @mask's base address
	Address(m InetAddressMask)
	// Family gets the Family of @mask's address
	Family(m InetAddressMask)
	// Length gets @mask's length
	Length(m InetAddressMask)
	// Matches tests if @address falls within the range described by @mask.
	Matches(m InetAddressMask, address InetAddress) bool
	// String converts @mask back to its corresponding string form.
	String(m InetAddressMask)
}

// inetAddressMask implements the InetAddressMask interface.
type inetAddressMask struct {
	gextras.Objector
	Initable
}

var _ InetAddressMask = (*inetAddressMask)(nil)

// WrapInetAddressMask wraps a GObject to the right type. It is
// primarily used internally.
func WrapInetAddressMask(obj *externglib.Object) InetAddressMask {
	return InetAddressMask{
		Objector: obj,
		Initable: WrapInitable(obj),
	}
}

func marshalInetAddressMask(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapInetAddressMask(obj), nil
}

// NewInetAddressMask constructs a class InetAddressMask.
func NewInetAddressMask(addr InetAddress, length uint) error {
	var arg1 *C.GInetAddress
	var arg2 C.guint

	arg1 = (*C.GInetAddress)(unsafe.Pointer(addr.Native()))
	arg2 = C.guint(length)

	var errout *C.GError
	var err error

	C.g_inet_address_mask_new(arg1, arg2, &errout)

	err = gerror.Take(unsafe.Pointer(errout))

	return err
}

// NewInetAddressMaskFromString constructs a class InetAddressMask.
func NewInetAddressMaskFromString(maskString string) error {
	var arg1 *C.gchar

	arg1 = (*C.gchar)(C.CString(maskString))
	defer C.free(unsafe.Pointer(arg1))

	var errout *C.GError
	var err error

	C.g_inet_address_mask_new_from_string(arg1, &errout)

	err = gerror.Take(unsafe.Pointer(errout))

	return err
}

// Equal tests if @mask and @mask2 are the same mask.
func (m inetAddressMask) Equal(m InetAddressMask, mask2 InetAddressMask) bool {
	var arg0 *C.GInetAddressMask
	var arg1 *C.GInetAddressMask

	arg0 = (*C.GInetAddressMask)(unsafe.Pointer(m.Native()))
	arg1 = (*C.GInetAddressMask)(unsafe.Pointer(mask2.Native()))

	var cret C.gboolean
	var ok bool

	cret = C.g_inet_address_mask_equal(arg0, arg1)

	if cret {
		ok = true
	}

	return ok
}

// Address gets @mask's base address
func (m inetAddressMask) Address(m InetAddressMask) {
	var arg0 *C.GInetAddressMask

	arg0 = (*C.GInetAddressMask)(unsafe.Pointer(m.Native()))

	C.g_inet_address_mask_get_address(arg0)
}

// Family gets the Family of @mask's address
func (m inetAddressMask) Family(m InetAddressMask) {
	var arg0 *C.GInetAddressMask

	arg0 = (*C.GInetAddressMask)(unsafe.Pointer(m.Native()))

	C.g_inet_address_mask_get_family(arg0)
}

// Length gets @mask's length
func (m inetAddressMask) Length(m InetAddressMask) {
	var arg0 *C.GInetAddressMask

	arg0 = (*C.GInetAddressMask)(unsafe.Pointer(m.Native()))

	C.g_inet_address_mask_get_length(arg0)
}

// Matches tests if @address falls within the range described by @mask.
func (m inetAddressMask) Matches(m InetAddressMask, address InetAddress) bool {
	var arg0 *C.GInetAddressMask
	var arg1 *C.GInetAddress

	arg0 = (*C.GInetAddressMask)(unsafe.Pointer(m.Native()))
	arg1 = (*C.GInetAddress)(unsafe.Pointer(address.Native()))

	var cret C.gboolean
	var ok bool

	cret = C.g_inet_address_mask_matches(arg0, arg1)

	if cret {
		ok = true
	}

	return ok
}

// String converts @mask back to its corresponding string form.
func (m inetAddressMask) String(m InetAddressMask) {
	var arg0 *C.GInetAddressMask

	arg0 = (*C.GInetAddressMask)(unsafe.Pointer(m.Native()))

	C.g_inet_address_mask_to_string(arg0)
}
