// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/box"
	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gio-2.0 gio-unix-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <gio/gdesktopappinfo.h>
// #include <gio/gfiledescriptorbased.h>
// #include <gio/gio.h>
// #include <gio/gunixconnection.h>
// #include <gio/gunixcredentialsmessage.h>
// #include <gio/gunixfdlist.h>
// #include <gio/gunixfdmessage.h>
// #include <gio/gunixinputstream.h>
// #include <gio/gunixmounts.h>
// #include <gio/gunixoutputstream.h>
// #include <gio/gunixsocketaddress.h>
// #include <glib-object.h>
//
// void gotk4_AsyncReadyCallback(GObject*, GAsyncResult*, gpointer);
// void gotk4_FileProgressCallback(goffset, goffset, gpointer);
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_file_get_type()), F: marshalFile},
	})
}

// File is a high level abstraction for manipulating files on a virtual file
// system. #GFiles are lightweight, immutable objects that do no I/O upon
// creation. It is necessary to understand that #GFile objects do not represent
// files, merely an identifier for a file. All file content I/O is implemented
// as streaming operations (see Stream and Stream).
//
// To construct a #GFile, you can use: - g_file_new_for_path() if you have a
// path. - g_file_new_for_uri() if you have a URI. -
// g_file_new_for_commandline_arg() for a command line argument. -
// g_file_new_tmp() to create a temporary file from a template. -
// g_file_parse_name() from a UTF-8 string gotten from g_file_get_parse_name().
// - g_file_new_build_filename() to create a file from path elements.
//
// One way to think of a #GFile is as an abstraction of a pathname. For normal
// files the system pathname is what is stored internally, but as #GFiles are
// extensible it could also be something else that corresponds to a pathname in
// a userspace implementation of a filesystem.
//
// #GFiles make up hierarchies of directories and files that correspond to the
// files on a filesystem. You can move through the file system with #GFile using
// g_file_get_parent() to get an identifier for the parent directory,
// g_file_get_child() to get a child within a directory,
// g_file_resolve_relative_path() to resolve a relative path between two
// #GFiles. There can be multiple hierarchies, so you may not end up at the same
// root if you repeatedly call g_file_get_parent() on two different files.
//
// All #GFiles have a basename (get with g_file_get_basename()). These names are
// byte strings that are used to identify the file on the filesystem (relative
// to its parent directory) and there is no guarantees that they have any
// particular charset encoding or even make any sense at all. If you want to use
// filenames in a user interface you should use the display name that you can
// get by requesting the G_FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME attribute with
// g_file_query_info(). This is guaranteed to be in UTF-8 and can be used in a
// user interface. But always store the real basename or the #GFile to use to
// actually access the file, because there is no way to go from a display name
// to the actual name.
//
// Using #GFile as an identifier has the same weaknesses as using a path in that
// there may be multiple aliases for the same file. For instance, hard or soft
// links may cause two different #GFiles to refer to the same file. Other
// possible causes for aliases are: case insensitive filesystems, short and long
// names on FAT/NTFS, or bind mounts in Linux. If you want to check if two
// #GFiles point to the same file you can query for the G_FILE_ATTRIBUTE_ID_FILE
// attribute. Note that #GFile does some trivial canonicalization of pathnames
// passed in, so that trivial differences in the path string used at creation
// (duplicated slashes, slash at end of path, "." or ".." path segments, etc)
// does not create different #GFiles.
//
// Many #GFile operations have both synchronous and asynchronous versions to
// suit your application. Asynchronous versions of synchronous functions simply
// have _async() appended to their function names. The asynchronous I/O
// functions call a ReadyCallback which is then used to finalize the operation,
// producing a GAsyncResult which is then passed to the function's matching
// _finish() operation.
//
// It is highly recommended to use asynchronous calls when running within a
// shared main loop, such as in the main thread of an application. This avoids
// I/O operations blocking other sources on the main loop from being dispatched.
// Synchronous I/O operations should be performed from worker threads. See the
// [introduction to asynchronous programming section][async-programming] for
// more.
//
// Some #GFile operations almost always take a noticeable amount of time, and so
// do not have synchronous analogs. Notable cases include: -
// g_file_mount_mountable() to mount a mountable file. -
// g_file_unmount_mountable_with_operation() to unmount a mountable file. -
// g_file_eject_mountable_with_operation() to eject a mountable file.
//
//
// Entity Tags
//
// One notable feature of #GFiles are entity tags, or "etags" for short. Entity
// tags are somewhat like a more abstract version of the traditional mtime, and
// can be used to quickly determine if the file has been modified from the
// version on the file system. See the HTTP 1.1 specification
// (http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html) for HTTP Etag
// headers, which are a very similar concept.
type File interface {
	gextras.Objector

	// AppendTo finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	AppendTo(flags FileCreateFlags, cancellable Cancellable) (FileOutputStream, error)
	// AppendToAsync finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	AppendToAsync(flags FileCreateFlags, ioPriority int, cancellable Cancellable, callback AsyncReadyCallback)
	// AppendToFinish finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	AppendToFinish(res AsyncResult) (FileOutputStream, error)
	// BuildAttributeListForCopy finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	BuildAttributeListForCopy(flags FileCopyFlags, cancellable Cancellable) (string, error)
	// Copy finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	Copy(destination File, flags FileCopyFlags, cancellable Cancellable, progressCallback FileProgressCallback) error
	// CopyAsync finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	CopyAsync(destination File, flags FileCopyFlags, ioPriority int, cancellable Cancellable)
	// CopyAttributes finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	CopyAttributes(destination File, flags FileCopyFlags, cancellable Cancellable) error
	// CopyFinish finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	CopyFinish(res AsyncResult) error
	// Create finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	Create(flags FileCreateFlags, cancellable Cancellable) (FileOutputStream, error)
	// CreateAsync finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	CreateAsync(flags FileCreateFlags, ioPriority int, cancellable Cancellable, callback AsyncReadyCallback)
	// CreateFinish finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	CreateFinish(res AsyncResult) (FileOutputStream, error)
	// CreateReadwrite finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	CreateReadwrite(flags FileCreateFlags, cancellable Cancellable) (FileIOStream, error)
	// CreateReadwriteAsync finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	CreateReadwriteAsync(flags FileCreateFlags, ioPriority int, cancellable Cancellable, callback AsyncReadyCallback)
	// CreateReadwriteFinish finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	CreateReadwriteFinish(res AsyncResult) (FileIOStream, error)
	// Delete finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	Delete(cancellable Cancellable) error
	// DeleteAsync finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	DeleteAsync(ioPriority int, cancellable Cancellable, callback AsyncReadyCallback)
	// DeleteFinish finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	DeleteFinish(result AsyncResult) error
	// Dup finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	Dup() File
	// EjectMountable finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	EjectMountable(flags MountUnmountFlags, cancellable Cancellable, callback AsyncReadyCallback)
	// EjectMountableFinish finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	EjectMountableFinish(result AsyncResult) error
	// EjectMountableWithOperation finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	EjectMountableWithOperation(flags MountUnmountFlags, mountOperation MountOperation, cancellable Cancellable, callback AsyncReadyCallback)
	// EjectMountableWithOperationFinish finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	EjectMountableWithOperationFinish(result AsyncResult) error
	// EnumerateChildren finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	EnumerateChildren(attributes string, flags FileQueryInfoFlags, cancellable Cancellable) (FileEnumerator, error)
	// EnumerateChildrenAsync finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	EnumerateChildrenAsync(attributes string, flags FileQueryInfoFlags, ioPriority int, cancellable Cancellable, callback AsyncReadyCallback)
	// EnumerateChildrenFinish finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	EnumerateChildrenFinish(res AsyncResult) (FileEnumerator, error)
	// Equal finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	Equal(file2 File) bool
	// FindEnclosingMount finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	FindEnclosingMount(cancellable Cancellable) (Mount, error)
	// FindEnclosingMountAsync finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	FindEnclosingMountAsync(ioPriority int, cancellable Cancellable, callback AsyncReadyCallback)
	// FindEnclosingMountFinish finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	FindEnclosingMountFinish(res AsyncResult) (Mount, error)
	// Basename finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	Basename() string
	// Child finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	Child(name string) File
	// ChildForDisplayName finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	ChildForDisplayName(displayName string) (File, error)
	// Parent finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	Parent() File
	// ParseName finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	ParseName() string
	// Path finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	Path() string
	// RelativePath finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	RelativePath(descendant File) string
	// URI finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	URI() string
	// URIScheme finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	URIScheme() string
	// HasParent finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	HasParent(parent File) bool
	// HasPrefix finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	HasPrefix(prefix File) bool
	// HasURIScheme finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	HasURIScheme(uriScheme string) bool
	// Hash finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	Hash() uint
	// IsNative finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	IsNative() bool
	// LoadBytesAsync finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	LoadBytesAsync(cancellable Cancellable, callback AsyncReadyCallback)
	// LoadContents finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	LoadContents(cancellable Cancellable) ([]byte, string, error)
	// LoadContentsAsync finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	LoadContentsAsync(cancellable Cancellable, callback AsyncReadyCallback)
	// LoadContentsFinish finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	LoadContentsFinish(res AsyncResult) ([]byte, string, error)
	// LoadPartialContentsFinish finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	LoadPartialContentsFinish(res AsyncResult) ([]byte, string, error)
	// MakeDirectory finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	MakeDirectory(cancellable Cancellable) error
	// MakeDirectoryAsync finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	MakeDirectoryAsync(ioPriority int, cancellable Cancellable, callback AsyncReadyCallback)
	// MakeDirectoryFinish finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	MakeDirectoryFinish(result AsyncResult) error
	// MakeDirectoryWithParents finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	MakeDirectoryWithParents(cancellable Cancellable) error
	// MakeSymbolicLink finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	MakeSymbolicLink(symlinkValue string, cancellable Cancellable) error
	// MeasureDiskUsageFinish finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	MeasureDiskUsageFinish(result AsyncResult) (diskUsage uint64, numDirs uint64, numFiles uint64, goerr error)
	// Monitor finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	Monitor(flags FileMonitorFlags, cancellable Cancellable) (FileMonitor, error)
	// MonitorDirectory finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	MonitorDirectory(flags FileMonitorFlags, cancellable Cancellable) (FileMonitor, error)
	// MonitorFile finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	MonitorFile(flags FileMonitorFlags, cancellable Cancellable) (FileMonitor, error)
	// MountEnclosingVolume finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	MountEnclosingVolume(flags MountMountFlags, mountOperation MountOperation, cancellable Cancellable, callback AsyncReadyCallback)
	// MountEnclosingVolumeFinish finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	MountEnclosingVolumeFinish(result AsyncResult) error
	// MountMountable finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	MountMountable(flags MountMountFlags, mountOperation MountOperation, cancellable Cancellable, callback AsyncReadyCallback)
	// MountMountableFinish finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	MountMountableFinish(result AsyncResult) (File, error)
	// Move finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	Move(destination File, flags FileCopyFlags, cancellable Cancellable, progressCallback FileProgressCallback) error
	// OpenReadwrite finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	OpenReadwrite(cancellable Cancellable) (FileIOStream, error)
	// OpenReadwriteAsync finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	OpenReadwriteAsync(ioPriority int, cancellable Cancellable, callback AsyncReadyCallback)
	// OpenReadwriteFinish finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	OpenReadwriteFinish(res AsyncResult) (FileIOStream, error)
	// PeekPath finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	PeekPath() string
	// PollMountable finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	PollMountable(cancellable Cancellable, callback AsyncReadyCallback)
	// PollMountableFinish finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	PollMountableFinish(result AsyncResult) error
	// QueryDefaultHandler finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	QueryDefaultHandler(cancellable Cancellable) (AppInfo, error)
	// QueryDefaultHandlerAsync finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	QueryDefaultHandlerAsync(ioPriority int, cancellable Cancellable, callback AsyncReadyCallback)
	// QueryDefaultHandlerFinish finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	QueryDefaultHandlerFinish(result AsyncResult) (AppInfo, error)
	// QueryExists finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	QueryExists(cancellable Cancellable) bool
	// QueryFileType finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	QueryFileType(flags FileQueryInfoFlags, cancellable Cancellable) FileType
	// QueryFilesystemInfo finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	QueryFilesystemInfo(attributes string, cancellable Cancellable) (FileInfo, error)
	// QueryFilesystemInfoAsync finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	QueryFilesystemInfoAsync(attributes string, ioPriority int, cancellable Cancellable, callback AsyncReadyCallback)
	// QueryFilesystemInfoFinish finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	QueryFilesystemInfoFinish(res AsyncResult) (FileInfo, error)
	// QueryInfo finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	QueryInfo(attributes string, flags FileQueryInfoFlags, cancellable Cancellable) (FileInfo, error)
	// QueryInfoAsync finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	QueryInfoAsync(attributes string, flags FileQueryInfoFlags, ioPriority int, cancellable Cancellable, callback AsyncReadyCallback)
	// QueryInfoFinish finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	QueryInfoFinish(res AsyncResult) (FileInfo, error)
	// QuerySettableAttributes finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	QuerySettableAttributes(cancellable Cancellable) (*FileAttributeInfoList, error)
	// QueryWritableNamespaces finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	QueryWritableNamespaces(cancellable Cancellable) (*FileAttributeInfoList, error)
	// Read finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	Read(cancellable Cancellable) (FileInputStream, error)
	// ReadAsync finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	ReadAsync(ioPriority int, cancellable Cancellable, callback AsyncReadyCallback)
	// ReadFinish finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	ReadFinish(res AsyncResult) (FileInputStream, error)
	// Replace finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	Replace(etag string, makeBackup bool, flags FileCreateFlags, cancellable Cancellable) (FileOutputStream, error)
	// ReplaceAsync finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	ReplaceAsync(etag string, makeBackup bool, flags FileCreateFlags, ioPriority int, cancellable Cancellable, callback AsyncReadyCallback)
	// ReplaceContents finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	ReplaceContents(contents []byte, etag string, makeBackup bool, flags FileCreateFlags, cancellable Cancellable) (string, error)
	// ReplaceContentsAsync finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	ReplaceContentsAsync(contents []byte, etag string, makeBackup bool, flags FileCreateFlags, cancellable Cancellable, callback AsyncReadyCallback)
	// ReplaceContentsFinish finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	ReplaceContentsFinish(res AsyncResult) (string, error)
	// ReplaceFinish finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	ReplaceFinish(res AsyncResult) (FileOutputStream, error)
	// ReplaceReadwrite finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	ReplaceReadwrite(etag string, makeBackup bool, flags FileCreateFlags, cancellable Cancellable) (FileIOStream, error)
	// ReplaceReadwriteAsync finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	ReplaceReadwriteAsync(etag string, makeBackup bool, flags FileCreateFlags, ioPriority int, cancellable Cancellable, callback AsyncReadyCallback)
	// ReplaceReadwriteFinish finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	ReplaceReadwriteFinish(res AsyncResult) (FileIOStream, error)
	// ResolveRelativePath finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	ResolveRelativePath(relativePath string) File
	// SetAttribute finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	SetAttribute(attribute string, typ FileAttributeType, valueP interface{}, flags FileQueryInfoFlags, cancellable Cancellable) error
	// SetAttributeByteString finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	SetAttributeByteString(attribute string, value string, flags FileQueryInfoFlags, cancellable Cancellable) error
	// SetAttributeInt32 finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	SetAttributeInt32(attribute string, value int32, flags FileQueryInfoFlags, cancellable Cancellable) error
	// SetAttributeInt64 finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	SetAttributeInt64(attribute string, value int64, flags FileQueryInfoFlags, cancellable Cancellable) error
	// SetAttributeString finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	SetAttributeString(attribute string, value string, flags FileQueryInfoFlags, cancellable Cancellable) error
	// SetAttributeUint32 finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	SetAttributeUint32(attribute string, value uint32, flags FileQueryInfoFlags, cancellable Cancellable) error
	// SetAttributeUint64 finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	SetAttributeUint64(attribute string, value uint64, flags FileQueryInfoFlags, cancellable Cancellable) error
	// SetAttributesAsync finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	SetAttributesAsync(info FileInfo, flags FileQueryInfoFlags, ioPriority int, cancellable Cancellable, callback AsyncReadyCallback)
	// SetAttributesFinish finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	SetAttributesFinish(result AsyncResult) (FileInfo, error)
	// SetAttributesFromInfo finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	SetAttributesFromInfo(info FileInfo, flags FileQueryInfoFlags, cancellable Cancellable) error
	// SetDisplayName finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	SetDisplayName(displayName string, cancellable Cancellable) (File, error)
	// SetDisplayNameAsync finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	SetDisplayNameAsync(displayName string, ioPriority int, cancellable Cancellable, callback AsyncReadyCallback)
	// SetDisplayNameFinish finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	SetDisplayNameFinish(res AsyncResult) (File, error)
	// StartMountable finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	StartMountable(flags DriveStartFlags, startOperation MountOperation, cancellable Cancellable, callback AsyncReadyCallback)
	// StartMountableFinish finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	StartMountableFinish(result AsyncResult) error
	// StopMountable finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	StopMountable(flags MountUnmountFlags, mountOperation MountOperation, cancellable Cancellable, callback AsyncReadyCallback)
	// StopMountableFinish finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	StopMountableFinish(result AsyncResult) error
	// SupportsThreadContexts finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	SupportsThreadContexts() bool
	// Trash finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	Trash(cancellable Cancellable) error
	// TrashAsync finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	TrashAsync(ioPriority int, cancellable Cancellable, callback AsyncReadyCallback)
	// TrashFinish finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	TrashFinish(result AsyncResult) error
	// UnmountMountable finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	UnmountMountable(flags MountUnmountFlags, cancellable Cancellable, callback AsyncReadyCallback)
	// UnmountMountableFinish finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	UnmountMountableFinish(result AsyncResult) error
	// UnmountMountableWithOperation finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	UnmountMountableWithOperation(flags MountUnmountFlags, mountOperation MountOperation, cancellable Cancellable, callback AsyncReadyCallback)
	// UnmountMountableWithOperationFinish finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	UnmountMountableWithOperationFinish(result AsyncResult) error
}

// file implements the File interface.
type file struct {
	gextras.Objector
}

var _ File = (*file)(nil)

// WrapFile wraps a GObject to a type that implements
// interface File. It is primarily used internally.
func WrapFile(obj *externglib.Object) File {
	return file{
		Objector: obj,
	}
}

func marshalFile(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapFile(obj), nil
}

func (f file) AppendTo(flags FileCreateFlags, cancellable Cancellable) (FileOutputStream, error) {
	var _arg0 *C.GFile             // out
	var _arg1 C.GFileCreateFlags   // out
	var _arg2 *C.GCancellable      // out
	var _cret *C.GFileOutputStream // in
	var _cerr *C.GError            // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = C.GFileCreateFlags(flags)
	_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	_cret = C.g_file_append_to(_arg0, _arg1, _arg2, &_cerr)

	var _fileOutputStream FileOutputStream // out
	var _goerr error                       // out

	_fileOutputStream = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(FileOutputStream)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _fileOutputStream, _goerr
}

func (f file) AppendToAsync(flags FileCreateFlags, ioPriority int, cancellable Cancellable, callback AsyncReadyCallback) {
	var _arg0 *C.GFile              // out
	var _arg1 C.GFileCreateFlags    // out
	var _arg2 C.int                 // out
	var _arg3 *C.GCancellable       // out
	var _arg4 C.GAsyncReadyCallback // out
	var _arg5 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = C.GFileCreateFlags(flags)
	_arg2 = C.int(ioPriority)
	_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg4 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg5 = C.gpointer(box.Assign(callback))

	C.g_file_append_to_async(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
}

func (f file) AppendToFinish(res AsyncResult) (FileOutputStream, error) {
	var _arg0 *C.GFile             // out
	var _arg1 *C.GAsyncResult      // out
	var _cret *C.GFileOutputStream // in
	var _cerr *C.GError            // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(res.Native()))

	_cret = C.g_file_append_to_finish(_arg0, _arg1, &_cerr)

	var _fileOutputStream FileOutputStream // out
	var _goerr error                       // out

	_fileOutputStream = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(FileOutputStream)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _fileOutputStream, _goerr
}

func (f file) BuildAttributeListForCopy(flags FileCopyFlags, cancellable Cancellable) (string, error) {
	var _arg0 *C.GFile         // out
	var _arg1 C.GFileCopyFlags // out
	var _arg2 *C.GCancellable  // out
	var _cret *C.char          // in
	var _cerr *C.GError        // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = C.GFileCopyFlags(flags)
	_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	_cret = C.g_file_build_attribute_list_for_copy(_arg0, _arg1, _arg2, &_cerr)

	var _utf8 string // out
	var _goerr error // out

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _utf8, _goerr
}

func (f file) Copy(destination File, flags FileCopyFlags, cancellable Cancellable, progressCallback FileProgressCallback) error {
	var _arg0 *C.GFile                // out
	var _arg1 *C.GFile                // out
	var _arg2 C.GFileCopyFlags        // out
	var _arg3 *C.GCancellable         // out
	var _arg4 C.GFileProgressCallback // out
	var _arg5 C.gpointer
	var _cerr *C.GError // in

	_arg0 = (*C.GFile)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GFile)(unsafe.Pointer(destination.Native()))
	_arg2 = C.GFileCopyFlags(flags)
	_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg4 = (*[0]byte)(C.gotk4_FileProgressCallback)
	_arg5 = C.gpointer(box.Assign(progressCallback))

	C.g_file_copy(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

func (f file) CopyAsync(destination File, flags FileCopyFlags, ioPriority int, cancellable Cancellable) {
	var _arg0 *C.GFile         // out
	var _arg1 *C.GFile         // out
	var _arg2 C.GFileCopyFlags // out
	var _arg3 C.int            // out
	var _arg4 *C.GCancellable  // out

	_arg0 = (*C.GFile)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GFile)(unsafe.Pointer(destination.Native()))
	_arg2 = C.GFileCopyFlags(flags)
	_arg3 = C.int(ioPriority)
	_arg4 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	C.g_file_copy_async(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7, _arg8)
}

func (f file) CopyAttributes(destination File, flags FileCopyFlags, cancellable Cancellable) error {
	var _arg0 *C.GFile         // out
	var _arg1 *C.GFile         // out
	var _arg2 C.GFileCopyFlags // out
	var _arg3 *C.GCancellable  // out
	var _cerr *C.GError        // in

	_arg0 = (*C.GFile)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GFile)(unsafe.Pointer(destination.Native()))
	_arg2 = C.GFileCopyFlags(flags)
	_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	C.g_file_copy_attributes(_arg0, _arg1, _arg2, _arg3, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

func (f file) CopyFinish(res AsyncResult) error {
	var _arg0 *C.GFile        // out
	var _arg1 *C.GAsyncResult // out
	var _cerr *C.GError       // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(res.Native()))

	C.g_file_copy_finish(_arg0, _arg1, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

func (f file) Create(flags FileCreateFlags, cancellable Cancellable) (FileOutputStream, error) {
	var _arg0 *C.GFile             // out
	var _arg1 C.GFileCreateFlags   // out
	var _arg2 *C.GCancellable      // out
	var _cret *C.GFileOutputStream // in
	var _cerr *C.GError            // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = C.GFileCreateFlags(flags)
	_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	_cret = C.g_file_create(_arg0, _arg1, _arg2, &_cerr)

	var _fileOutputStream FileOutputStream // out
	var _goerr error                       // out

	_fileOutputStream = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(FileOutputStream)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _fileOutputStream, _goerr
}

func (f file) CreateAsync(flags FileCreateFlags, ioPriority int, cancellable Cancellable, callback AsyncReadyCallback) {
	var _arg0 *C.GFile              // out
	var _arg1 C.GFileCreateFlags    // out
	var _arg2 C.int                 // out
	var _arg3 *C.GCancellable       // out
	var _arg4 C.GAsyncReadyCallback // out
	var _arg5 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = C.GFileCreateFlags(flags)
	_arg2 = C.int(ioPriority)
	_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg4 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg5 = C.gpointer(box.Assign(callback))

	C.g_file_create_async(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
}

func (f file) CreateFinish(res AsyncResult) (FileOutputStream, error) {
	var _arg0 *C.GFile             // out
	var _arg1 *C.GAsyncResult      // out
	var _cret *C.GFileOutputStream // in
	var _cerr *C.GError            // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(res.Native()))

	_cret = C.g_file_create_finish(_arg0, _arg1, &_cerr)

	var _fileOutputStream FileOutputStream // out
	var _goerr error                       // out

	_fileOutputStream = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(FileOutputStream)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _fileOutputStream, _goerr
}

func (f file) CreateReadwrite(flags FileCreateFlags, cancellable Cancellable) (FileIOStream, error) {
	var _arg0 *C.GFile           // out
	var _arg1 C.GFileCreateFlags // out
	var _arg2 *C.GCancellable    // out
	var _cret *C.GFileIOStream   // in
	var _cerr *C.GError          // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = C.GFileCreateFlags(flags)
	_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	_cret = C.g_file_create_readwrite(_arg0, _arg1, _arg2, &_cerr)

	var _fileIOStream FileIOStream // out
	var _goerr error               // out

	_fileIOStream = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(FileIOStream)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _fileIOStream, _goerr
}

func (f file) CreateReadwriteAsync(flags FileCreateFlags, ioPriority int, cancellable Cancellable, callback AsyncReadyCallback) {
	var _arg0 *C.GFile              // out
	var _arg1 C.GFileCreateFlags    // out
	var _arg2 C.int                 // out
	var _arg3 *C.GCancellable       // out
	var _arg4 C.GAsyncReadyCallback // out
	var _arg5 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = C.GFileCreateFlags(flags)
	_arg2 = C.int(ioPriority)
	_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg4 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg5 = C.gpointer(box.Assign(callback))

	C.g_file_create_readwrite_async(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
}

func (f file) CreateReadwriteFinish(res AsyncResult) (FileIOStream, error) {
	var _arg0 *C.GFile         // out
	var _arg1 *C.GAsyncResult  // out
	var _cret *C.GFileIOStream // in
	var _cerr *C.GError        // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(res.Native()))

	_cret = C.g_file_create_readwrite_finish(_arg0, _arg1, &_cerr)

	var _fileIOStream FileIOStream // out
	var _goerr error               // out

	_fileIOStream = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(FileIOStream)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _fileIOStream, _goerr
}

func (f file) Delete(cancellable Cancellable) error {
	var _arg0 *C.GFile        // out
	var _arg1 *C.GCancellable // out
	var _cerr *C.GError       // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	C.g_file_delete(_arg0, _arg1, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

func (f file) DeleteAsync(ioPriority int, cancellable Cancellable, callback AsyncReadyCallback) {
	var _arg0 *C.GFile              // out
	var _arg1 C.int                 // out
	var _arg2 *C.GCancellable       // out
	var _arg3 C.GAsyncReadyCallback // out
	var _arg4 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = C.int(ioPriority)
	_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg3 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg4 = C.gpointer(box.Assign(callback))

	C.g_file_delete_async(_arg0, _arg1, _arg2, _arg3, _arg4)
}

func (f file) DeleteFinish(result AsyncResult) error {
	var _arg0 *C.GFile        // out
	var _arg1 *C.GAsyncResult // out
	var _cerr *C.GError       // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(result.Native()))

	C.g_file_delete_finish(_arg0, _arg1, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

func (f file) Dup() File {
	var _arg0 *C.GFile // out
	var _cret *C.GFile // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))

	_cret = C.g_file_dup(_arg0)

	var _ret File // out

	_ret = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(File)

	return _ret
}

func (f file) EjectMountable(flags MountUnmountFlags, cancellable Cancellable, callback AsyncReadyCallback) {
	var _arg0 *C.GFile              // out
	var _arg1 C.GMountUnmountFlags  // out
	var _arg2 *C.GCancellable       // out
	var _arg3 C.GAsyncReadyCallback // out
	var _arg4 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = C.GMountUnmountFlags(flags)
	_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg3 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg4 = C.gpointer(box.Assign(callback))

	C.g_file_eject_mountable(_arg0, _arg1, _arg2, _arg3, _arg4)
}

func (f file) EjectMountableFinish(result AsyncResult) error {
	var _arg0 *C.GFile        // out
	var _arg1 *C.GAsyncResult // out
	var _cerr *C.GError       // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(result.Native()))

	C.g_file_eject_mountable_finish(_arg0, _arg1, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

func (f file) EjectMountableWithOperation(flags MountUnmountFlags, mountOperation MountOperation, cancellable Cancellable, callback AsyncReadyCallback) {
	var _arg0 *C.GFile              // out
	var _arg1 C.GMountUnmountFlags  // out
	var _arg2 *C.GMountOperation    // out
	var _arg3 *C.GCancellable       // out
	var _arg4 C.GAsyncReadyCallback // out
	var _arg5 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = C.GMountUnmountFlags(flags)
	_arg2 = (*C.GMountOperation)(unsafe.Pointer(mountOperation.Native()))
	_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg4 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg5 = C.gpointer(box.Assign(callback))

	C.g_file_eject_mountable_with_operation(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
}

func (f file) EjectMountableWithOperationFinish(result AsyncResult) error {
	var _arg0 *C.GFile        // out
	var _arg1 *C.GAsyncResult // out
	var _cerr *C.GError       // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(result.Native()))

	C.g_file_eject_mountable_with_operation_finish(_arg0, _arg1, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

func (f file) EnumerateChildren(attributes string, flags FileQueryInfoFlags, cancellable Cancellable) (FileEnumerator, error) {
	var _arg0 *C.GFile              // out
	var _arg1 *C.char               // out
	var _arg2 C.GFileQueryInfoFlags // out
	var _arg3 *C.GCancellable       // out
	var _cret *C.GFileEnumerator    // in
	var _cerr *C.GError             // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.char)(C.CString(attributes))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.GFileQueryInfoFlags(flags)
	_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	_cret = C.g_file_enumerate_children(_arg0, _arg1, _arg2, _arg3, &_cerr)

	var _fileEnumerator FileEnumerator // out
	var _goerr error                   // out

	_fileEnumerator = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(FileEnumerator)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _fileEnumerator, _goerr
}

func (f file) EnumerateChildrenAsync(attributes string, flags FileQueryInfoFlags, ioPriority int, cancellable Cancellable, callback AsyncReadyCallback) {
	var _arg0 *C.GFile              // out
	var _arg1 *C.char               // out
	var _arg2 C.GFileQueryInfoFlags // out
	var _arg3 C.int                 // out
	var _arg4 *C.GCancellable       // out
	var _arg5 C.GAsyncReadyCallback // out
	var _arg6 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.char)(C.CString(attributes))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.GFileQueryInfoFlags(flags)
	_arg3 = C.int(ioPriority)
	_arg4 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg5 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg6 = C.gpointer(box.Assign(callback))

	C.g_file_enumerate_children_async(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6)
}

func (f file) EnumerateChildrenFinish(res AsyncResult) (FileEnumerator, error) {
	var _arg0 *C.GFile           // out
	var _arg1 *C.GAsyncResult    // out
	var _cret *C.GFileEnumerator // in
	var _cerr *C.GError          // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(res.Native()))

	_cret = C.g_file_enumerate_children_finish(_arg0, _arg1, &_cerr)

	var _fileEnumerator FileEnumerator // out
	var _goerr error                   // out

	_fileEnumerator = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(FileEnumerator)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _fileEnumerator, _goerr
}

func (f file) Equal(file2 File) bool {
	var _arg0 *C.GFile   // out
	var _arg1 *C.GFile   // out
	var _cret C.gboolean // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GFile)(unsafe.Pointer(file2.Native()))

	_cret = C.g_file_equal(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (f file) FindEnclosingMount(cancellable Cancellable) (Mount, error) {
	var _arg0 *C.GFile        // out
	var _arg1 *C.GCancellable // out
	var _cret *C.GMount       // in
	var _cerr *C.GError       // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	_cret = C.g_file_find_enclosing_mount(_arg0, _arg1, &_cerr)

	var _mount Mount // out
	var _goerr error // out

	_mount = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(Mount)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _mount, _goerr
}

func (f file) FindEnclosingMountAsync(ioPriority int, cancellable Cancellable, callback AsyncReadyCallback) {
	var _arg0 *C.GFile              // out
	var _arg1 C.int                 // out
	var _arg2 *C.GCancellable       // out
	var _arg3 C.GAsyncReadyCallback // out
	var _arg4 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = C.int(ioPriority)
	_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg3 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg4 = C.gpointer(box.Assign(callback))

	C.g_file_find_enclosing_mount_async(_arg0, _arg1, _arg2, _arg3, _arg4)
}

func (f file) FindEnclosingMountFinish(res AsyncResult) (Mount, error) {
	var _arg0 *C.GFile        // out
	var _arg1 *C.GAsyncResult // out
	var _cret *C.GMount       // in
	var _cerr *C.GError       // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(res.Native()))

	_cret = C.g_file_find_enclosing_mount_finish(_arg0, _arg1, &_cerr)

	var _mount Mount // out
	var _goerr error // out

	_mount = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(Mount)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _mount, _goerr
}

func (f file) Basename() string {
	var _arg0 *C.GFile // out
	var _cret *C.char  // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))

	_cret = C.g_file_get_basename(_arg0)

	var _filename string // out

	_filename = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _filename
}

func (f file) Child(name string) File {
	var _arg0 *C.GFile // out
	var _arg1 *C.char  // out
	var _cret *C.GFile // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.char)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.g_file_get_child(_arg0, _arg1)

	var _ret File // out

	_ret = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(File)

	return _ret
}

func (f file) ChildForDisplayName(displayName string) (File, error) {
	var _arg0 *C.GFile  // out
	var _arg1 *C.char   // out
	var _cret *C.GFile  // in
	var _cerr *C.GError // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.char)(C.CString(displayName))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.g_file_get_child_for_display_name(_arg0, _arg1, &_cerr)

	var _ret File    // out
	var _goerr error // out

	_ret = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(File)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _ret, _goerr
}

func (f file) Parent() File {
	var _arg0 *C.GFile // out
	var _cret *C.GFile // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))

	_cret = C.g_file_get_parent(_arg0)

	var _ret File // out

	_ret = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(File)

	return _ret
}

func (f file) ParseName() string {
	var _arg0 *C.GFile // out
	var _cret *C.char  // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))

	_cret = C.g_file_get_parse_name(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

func (f file) Path() string {
	var _arg0 *C.GFile // out
	var _cret *C.char  // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))

	_cret = C.g_file_get_path(_arg0)

	var _filename string // out

	_filename = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _filename
}

func (f file) RelativePath(descendant File) string {
	var _arg0 *C.GFile // out
	var _arg1 *C.GFile // out
	var _cret *C.char  // in

	_arg0 = (*C.GFile)(unsafe.Pointer(p.Native()))
	_arg1 = (*C.GFile)(unsafe.Pointer(descendant.Native()))

	_cret = C.g_file_get_relative_path(_arg0, _arg1)

	var _filename string // out

	_filename = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _filename
}

func (f file) URI() string {
	var _arg0 *C.GFile // out
	var _cret *C.char  // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))

	_cret = C.g_file_get_uri(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

func (f file) URIScheme() string {
	var _arg0 *C.GFile // out
	var _cret *C.char  // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))

	_cret = C.g_file_get_uri_scheme(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

func (f file) HasParent(parent File) bool {
	var _arg0 *C.GFile   // out
	var _arg1 *C.GFile   // out
	var _cret C.gboolean // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GFile)(unsafe.Pointer(parent.Native()))

	_cret = C.g_file_has_parent(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (f file) HasPrefix(prefix File) bool {
	var _arg0 *C.GFile   // out
	var _arg1 *C.GFile   // out
	var _cret C.gboolean // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GFile)(unsafe.Pointer(prefix.Native()))

	_cret = C.g_file_has_prefix(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (f file) HasURIScheme(uriScheme string) bool {
	var _arg0 *C.GFile   // out
	var _arg1 *C.char    // out
	var _cret C.gboolean // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.char)(C.CString(uriScheme))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.g_file_has_uri_scheme(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (f file) Hash() uint {
	var _arg0 C.gconstpointer // out
	var _cret C.guint         // in

	_arg0 = (C.gconstpointer)(unsafe.Pointer(f.Native()))

	_cret = C.g_file_hash(_arg0)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

func (f file) IsNative() bool {
	var _arg0 *C.GFile   // out
	var _cret C.gboolean // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))

	_cret = C.g_file_is_native(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (f file) LoadBytesAsync(cancellable Cancellable, callback AsyncReadyCallback) {
	var _arg0 *C.GFile              // out
	var _arg1 *C.GCancellable       // out
	var _arg2 C.GAsyncReadyCallback // out
	var _arg3 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg2 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg3 = C.gpointer(box.Assign(callback))

	C.g_file_load_bytes_async(_arg0, _arg1, _arg2, _arg3)
}

func (f file) LoadContents(cancellable Cancellable) ([]byte, string, error) {
	var _arg0 *C.GFile        // out
	var _arg1 *C.GCancellable // out
	var _arg2 *C.char
	var _arg3 C.gsize   // in
	var _arg4 *C.char   // in
	var _cerr *C.GError // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	C.g_file_load_contents(_arg0, _arg1, &_arg2, &_arg3, &_arg4, &_cerr)

	var _contents []byte
	var _etagOut string // out
	var _goerr error    // out

	_contents = unsafe.Slice((*byte)(unsafe.Pointer(_arg2)), _arg3)
	runtime.SetFinalizer(&_contents, func(v *[]byte) {
		C.free(unsafe.Pointer(&(*v)[0]))
	})
	_etagOut = C.GoString(_arg4)
	defer C.free(unsafe.Pointer(_arg4))
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _contents, _etagOut, _goerr
}

func (f file) LoadContentsAsync(cancellable Cancellable, callback AsyncReadyCallback) {
	var _arg0 *C.GFile              // out
	var _arg1 *C.GCancellable       // out
	var _arg2 C.GAsyncReadyCallback // out
	var _arg3 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg2 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg3 = C.gpointer(box.Assign(callback))

	C.g_file_load_contents_async(_arg0, _arg1, _arg2, _arg3)
}

func (f file) LoadContentsFinish(res AsyncResult) ([]byte, string, error) {
	var _arg0 *C.GFile        // out
	var _arg1 *C.GAsyncResult // out
	var _arg2 *C.char
	var _arg3 C.gsize   // in
	var _arg4 *C.char   // in
	var _cerr *C.GError // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(res.Native()))

	C.g_file_load_contents_finish(_arg0, _arg1, &_arg2, &_arg3, &_arg4, &_cerr)

	var _contents []byte
	var _etagOut string // out
	var _goerr error    // out

	_contents = unsafe.Slice((*byte)(unsafe.Pointer(_arg2)), _arg3)
	runtime.SetFinalizer(&_contents, func(v *[]byte) {
		C.free(unsafe.Pointer(&(*v)[0]))
	})
	_etagOut = C.GoString(_arg4)
	defer C.free(unsafe.Pointer(_arg4))
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _contents, _etagOut, _goerr
}

func (f file) LoadPartialContentsFinish(res AsyncResult) ([]byte, string, error) {
	var _arg0 *C.GFile        // out
	var _arg1 *C.GAsyncResult // out
	var _arg2 *C.char
	var _arg3 C.gsize   // in
	var _arg4 *C.char   // in
	var _cerr *C.GError // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(res.Native()))

	C.g_file_load_partial_contents_finish(_arg0, _arg1, &_arg2, &_arg3, &_arg4, &_cerr)

	var _contents []byte
	var _etagOut string // out
	var _goerr error    // out

	_contents = unsafe.Slice((*byte)(unsafe.Pointer(_arg2)), _arg3)
	runtime.SetFinalizer(&_contents, func(v *[]byte) {
		C.free(unsafe.Pointer(&(*v)[0]))
	})
	_etagOut = C.GoString(_arg4)
	defer C.free(unsafe.Pointer(_arg4))
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _contents, _etagOut, _goerr
}

func (f file) MakeDirectory(cancellable Cancellable) error {
	var _arg0 *C.GFile        // out
	var _arg1 *C.GCancellable // out
	var _cerr *C.GError       // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	C.g_file_make_directory(_arg0, _arg1, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

func (f file) MakeDirectoryAsync(ioPriority int, cancellable Cancellable, callback AsyncReadyCallback) {
	var _arg0 *C.GFile              // out
	var _arg1 C.int                 // out
	var _arg2 *C.GCancellable       // out
	var _arg3 C.GAsyncReadyCallback // out
	var _arg4 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = C.int(ioPriority)
	_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg3 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg4 = C.gpointer(box.Assign(callback))

	C.g_file_make_directory_async(_arg0, _arg1, _arg2, _arg3, _arg4)
}

func (f file) MakeDirectoryFinish(result AsyncResult) error {
	var _arg0 *C.GFile        // out
	var _arg1 *C.GAsyncResult // out
	var _cerr *C.GError       // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(result.Native()))

	C.g_file_make_directory_finish(_arg0, _arg1, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

func (f file) MakeDirectoryWithParents(cancellable Cancellable) error {
	var _arg0 *C.GFile        // out
	var _arg1 *C.GCancellable // out
	var _cerr *C.GError       // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	C.g_file_make_directory_with_parents(_arg0, _arg1, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

func (f file) MakeSymbolicLink(symlinkValue string, cancellable Cancellable) error {
	var _arg0 *C.GFile        // out
	var _arg1 *C.char         // out
	var _arg2 *C.GCancellable // out
	var _cerr *C.GError       // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.char)(C.CString(symlinkValue))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	C.g_file_make_symbolic_link(_arg0, _arg1, _arg2, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

func (f file) MeasureDiskUsageFinish(result AsyncResult) (diskUsage uint64, numDirs uint64, numFiles uint64, goerr error) {
	var _arg0 *C.GFile        // out
	var _arg1 *C.GAsyncResult // out
	var _arg2 C.guint64       // in
	var _arg3 C.guint64       // in
	var _arg4 C.guint64       // in
	var _cerr *C.GError       // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(result.Native()))

	C.g_file_measure_disk_usage_finish(_arg0, _arg1, &_arg2, &_arg3, &_arg4, &_cerr)

	var _diskUsage uint64 // out
	var _numDirs uint64   // out
	var _numFiles uint64  // out
	var _goerr error      // out

	_diskUsage = uint64(_arg2)
	_numDirs = uint64(_arg3)
	_numFiles = uint64(_arg4)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _diskUsage, _numDirs, _numFiles, _goerr
}

func (f file) Monitor(flags FileMonitorFlags, cancellable Cancellable) (FileMonitor, error) {
	var _arg0 *C.GFile            // out
	var _arg1 C.GFileMonitorFlags // out
	var _arg2 *C.GCancellable     // out
	var _cret *C.GFileMonitor     // in
	var _cerr *C.GError           // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = C.GFileMonitorFlags(flags)
	_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	_cret = C.g_file_monitor(_arg0, _arg1, _arg2, &_cerr)

	var _fileMonitor FileMonitor // out
	var _goerr error             // out

	_fileMonitor = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(FileMonitor)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _fileMonitor, _goerr
}

func (f file) MonitorDirectory(flags FileMonitorFlags, cancellable Cancellable) (FileMonitor, error) {
	var _arg0 *C.GFile            // out
	var _arg1 C.GFileMonitorFlags // out
	var _arg2 *C.GCancellable     // out
	var _cret *C.GFileMonitor     // in
	var _cerr *C.GError           // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = C.GFileMonitorFlags(flags)
	_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	_cret = C.g_file_monitor_directory(_arg0, _arg1, _arg2, &_cerr)

	var _fileMonitor FileMonitor // out
	var _goerr error             // out

	_fileMonitor = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(FileMonitor)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _fileMonitor, _goerr
}

func (f file) MonitorFile(flags FileMonitorFlags, cancellable Cancellable) (FileMonitor, error) {
	var _arg0 *C.GFile            // out
	var _arg1 C.GFileMonitorFlags // out
	var _arg2 *C.GCancellable     // out
	var _cret *C.GFileMonitor     // in
	var _cerr *C.GError           // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = C.GFileMonitorFlags(flags)
	_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	_cret = C.g_file_monitor_file(_arg0, _arg1, _arg2, &_cerr)

	var _fileMonitor FileMonitor // out
	var _goerr error             // out

	_fileMonitor = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(FileMonitor)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _fileMonitor, _goerr
}

func (f file) MountEnclosingVolume(flags MountMountFlags, mountOperation MountOperation, cancellable Cancellable, callback AsyncReadyCallback) {
	var _arg0 *C.GFile              // out
	var _arg1 C.GMountMountFlags    // out
	var _arg2 *C.GMountOperation    // out
	var _arg3 *C.GCancellable       // out
	var _arg4 C.GAsyncReadyCallback // out
	var _arg5 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(l.Native()))
	_arg1 = C.GMountMountFlags(flags)
	_arg2 = (*C.GMountOperation)(unsafe.Pointer(mountOperation.Native()))
	_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg4 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg5 = C.gpointer(box.Assign(callback))

	C.g_file_mount_enclosing_volume(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
}

func (f file) MountEnclosingVolumeFinish(result AsyncResult) error {
	var _arg0 *C.GFile        // out
	var _arg1 *C.GAsyncResult // out
	var _cerr *C.GError       // in

	_arg0 = (*C.GFile)(unsafe.Pointer(l.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(result.Native()))

	C.g_file_mount_enclosing_volume_finish(_arg0, _arg1, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

func (f file) MountMountable(flags MountMountFlags, mountOperation MountOperation, cancellable Cancellable, callback AsyncReadyCallback) {
	var _arg0 *C.GFile              // out
	var _arg1 C.GMountMountFlags    // out
	var _arg2 *C.GMountOperation    // out
	var _arg3 *C.GCancellable       // out
	var _arg4 C.GAsyncReadyCallback // out
	var _arg5 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = C.GMountMountFlags(flags)
	_arg2 = (*C.GMountOperation)(unsafe.Pointer(mountOperation.Native()))
	_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg4 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg5 = C.gpointer(box.Assign(callback))

	C.g_file_mount_mountable(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
}

func (f file) MountMountableFinish(result AsyncResult) (File, error) {
	var _arg0 *C.GFile        // out
	var _arg1 *C.GAsyncResult // out
	var _cret *C.GFile        // in
	var _cerr *C.GError       // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(result.Native()))

	_cret = C.g_file_mount_mountable_finish(_arg0, _arg1, &_cerr)

	var _ret File    // out
	var _goerr error // out

	_ret = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(File)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _ret, _goerr
}

func (f file) Move(destination File, flags FileCopyFlags, cancellable Cancellable, progressCallback FileProgressCallback) error {
	var _arg0 *C.GFile                // out
	var _arg1 *C.GFile                // out
	var _arg2 C.GFileCopyFlags        // out
	var _arg3 *C.GCancellable         // out
	var _arg4 C.GFileProgressCallback // out
	var _arg5 C.gpointer
	var _cerr *C.GError // in

	_arg0 = (*C.GFile)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GFile)(unsafe.Pointer(destination.Native()))
	_arg2 = C.GFileCopyFlags(flags)
	_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg4 = (*[0]byte)(C.gotk4_FileProgressCallback)
	_arg5 = C.gpointer(box.Assign(progressCallback))

	C.g_file_move(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

func (f file) OpenReadwrite(cancellable Cancellable) (FileIOStream, error) {
	var _arg0 *C.GFile         // out
	var _arg1 *C.GCancellable  // out
	var _cret *C.GFileIOStream // in
	var _cerr *C.GError        // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	_cret = C.g_file_open_readwrite(_arg0, _arg1, &_cerr)

	var _fileIOStream FileIOStream // out
	var _goerr error               // out

	_fileIOStream = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(FileIOStream)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _fileIOStream, _goerr
}

func (f file) OpenReadwriteAsync(ioPriority int, cancellable Cancellable, callback AsyncReadyCallback) {
	var _arg0 *C.GFile              // out
	var _arg1 C.int                 // out
	var _arg2 *C.GCancellable       // out
	var _arg3 C.GAsyncReadyCallback // out
	var _arg4 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = C.int(ioPriority)
	_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg3 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg4 = C.gpointer(box.Assign(callback))

	C.g_file_open_readwrite_async(_arg0, _arg1, _arg2, _arg3, _arg4)
}

func (f file) OpenReadwriteFinish(res AsyncResult) (FileIOStream, error) {
	var _arg0 *C.GFile         // out
	var _arg1 *C.GAsyncResult  // out
	var _cret *C.GFileIOStream // in
	var _cerr *C.GError        // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(res.Native()))

	_cret = C.g_file_open_readwrite_finish(_arg0, _arg1, &_cerr)

	var _fileIOStream FileIOStream // out
	var _goerr error               // out

	_fileIOStream = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(FileIOStream)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _fileIOStream, _goerr
}

func (f file) PeekPath() string {
	var _arg0 *C.GFile // out
	var _cret *C.char  // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))

	_cret = C.g_file_peek_path(_arg0)

	var _filename string // out

	_filename = C.GoString(_cret)

	return _filename
}

func (f file) PollMountable(cancellable Cancellable, callback AsyncReadyCallback) {
	var _arg0 *C.GFile              // out
	var _arg1 *C.GCancellable       // out
	var _arg2 C.GAsyncReadyCallback // out
	var _arg3 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg2 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg3 = C.gpointer(box.Assign(callback))

	C.g_file_poll_mountable(_arg0, _arg1, _arg2, _arg3)
}

func (f file) PollMountableFinish(result AsyncResult) error {
	var _arg0 *C.GFile        // out
	var _arg1 *C.GAsyncResult // out
	var _cerr *C.GError       // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(result.Native()))

	C.g_file_poll_mountable_finish(_arg0, _arg1, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

func (f file) QueryDefaultHandler(cancellable Cancellable) (AppInfo, error) {
	var _arg0 *C.GFile        // out
	var _arg1 *C.GCancellable // out
	var _cret *C.GAppInfo     // in
	var _cerr *C.GError       // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	_cret = C.g_file_query_default_handler(_arg0, _arg1, &_cerr)

	var _appInfo AppInfo // out
	var _goerr error     // out

	_appInfo = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(AppInfo)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _appInfo, _goerr
}

func (f file) QueryDefaultHandlerAsync(ioPriority int, cancellable Cancellable, callback AsyncReadyCallback) {
	var _arg0 *C.GFile              // out
	var _arg1 C.int                 // out
	var _arg2 *C.GCancellable       // out
	var _arg3 C.GAsyncReadyCallback // out
	var _arg4 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = C.int(ioPriority)
	_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg3 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg4 = C.gpointer(box.Assign(callback))

	C.g_file_query_default_handler_async(_arg0, _arg1, _arg2, _arg3, _arg4)
}

func (f file) QueryDefaultHandlerFinish(result AsyncResult) (AppInfo, error) {
	var _arg0 *C.GFile        // out
	var _arg1 *C.GAsyncResult // out
	var _cret *C.GAppInfo     // in
	var _cerr *C.GError       // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(result.Native()))

	_cret = C.g_file_query_default_handler_finish(_arg0, _arg1, &_cerr)

	var _appInfo AppInfo // out
	var _goerr error     // out

	_appInfo = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(AppInfo)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _appInfo, _goerr
}

func (f file) QueryExists(cancellable Cancellable) bool {
	var _arg0 *C.GFile        // out
	var _arg1 *C.GCancellable // out
	var _cret C.gboolean      // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	_cret = C.g_file_query_exists(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (f file) QueryFileType(flags FileQueryInfoFlags, cancellable Cancellable) FileType {
	var _arg0 *C.GFile              // out
	var _arg1 C.GFileQueryInfoFlags // out
	var _arg2 *C.GCancellable       // out
	var _cret C.GFileType           // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = C.GFileQueryInfoFlags(flags)
	_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	_cret = C.g_file_query_file_type(_arg0, _arg1, _arg2)

	var _fileType FileType // out

	_fileType = FileType(_cret)

	return _fileType
}

func (f file) QueryFilesystemInfo(attributes string, cancellable Cancellable) (FileInfo, error) {
	var _arg0 *C.GFile        // out
	var _arg1 *C.char         // out
	var _arg2 *C.GCancellable // out
	var _cret *C.GFileInfo    // in
	var _cerr *C.GError       // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.char)(C.CString(attributes))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	_cret = C.g_file_query_filesystem_info(_arg0, _arg1, _arg2, &_cerr)

	var _fileInfo FileInfo // out
	var _goerr error       // out

	_fileInfo = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(FileInfo)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _fileInfo, _goerr
}

func (f file) QueryFilesystemInfoAsync(attributes string, ioPriority int, cancellable Cancellable, callback AsyncReadyCallback) {
	var _arg0 *C.GFile              // out
	var _arg1 *C.char               // out
	var _arg2 C.int                 // out
	var _arg3 *C.GCancellable       // out
	var _arg4 C.GAsyncReadyCallback // out
	var _arg5 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.char)(C.CString(attributes))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.int(ioPriority)
	_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg4 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg5 = C.gpointer(box.Assign(callback))

	C.g_file_query_filesystem_info_async(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
}

func (f file) QueryFilesystemInfoFinish(res AsyncResult) (FileInfo, error) {
	var _arg0 *C.GFile        // out
	var _arg1 *C.GAsyncResult // out
	var _cret *C.GFileInfo    // in
	var _cerr *C.GError       // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(res.Native()))

	_cret = C.g_file_query_filesystem_info_finish(_arg0, _arg1, &_cerr)

	var _fileInfo FileInfo // out
	var _goerr error       // out

	_fileInfo = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(FileInfo)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _fileInfo, _goerr
}

func (f file) QueryInfo(attributes string, flags FileQueryInfoFlags, cancellable Cancellable) (FileInfo, error) {
	var _arg0 *C.GFile              // out
	var _arg1 *C.char               // out
	var _arg2 C.GFileQueryInfoFlags // out
	var _arg3 *C.GCancellable       // out
	var _cret *C.GFileInfo          // in
	var _cerr *C.GError             // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.char)(C.CString(attributes))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.GFileQueryInfoFlags(flags)
	_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	_cret = C.g_file_query_info(_arg0, _arg1, _arg2, _arg3, &_cerr)

	var _fileInfo FileInfo // out
	var _goerr error       // out

	_fileInfo = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(FileInfo)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _fileInfo, _goerr
}

func (f file) QueryInfoAsync(attributes string, flags FileQueryInfoFlags, ioPriority int, cancellable Cancellable, callback AsyncReadyCallback) {
	var _arg0 *C.GFile              // out
	var _arg1 *C.char               // out
	var _arg2 C.GFileQueryInfoFlags // out
	var _arg3 C.int                 // out
	var _arg4 *C.GCancellable       // out
	var _arg5 C.GAsyncReadyCallback // out
	var _arg6 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.char)(C.CString(attributes))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.GFileQueryInfoFlags(flags)
	_arg3 = C.int(ioPriority)
	_arg4 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg5 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg6 = C.gpointer(box.Assign(callback))

	C.g_file_query_info_async(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6)
}

func (f file) QueryInfoFinish(res AsyncResult) (FileInfo, error) {
	var _arg0 *C.GFile        // out
	var _arg1 *C.GAsyncResult // out
	var _cret *C.GFileInfo    // in
	var _cerr *C.GError       // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(res.Native()))

	_cret = C.g_file_query_info_finish(_arg0, _arg1, &_cerr)

	var _fileInfo FileInfo // out
	var _goerr error       // out

	_fileInfo = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(FileInfo)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _fileInfo, _goerr
}

func (f file) QuerySettableAttributes(cancellable Cancellable) (*FileAttributeInfoList, error) {
	var _arg0 *C.GFile                  // out
	var _arg1 *C.GCancellable           // out
	var _cret *C.GFileAttributeInfoList // in
	var _cerr *C.GError                 // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	_cret = C.g_file_query_settable_attributes(_arg0, _arg1, &_cerr)

	var _fileAttributeInfoList *FileAttributeInfoList // out
	var _goerr error                                  // out

	_fileAttributeInfoList = (*FileAttributeInfoList)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(&_fileAttributeInfoList, func(v **FileAttributeInfoList) {
		C.free(unsafe.Pointer(v))
	})
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _fileAttributeInfoList, _goerr
}

func (f file) QueryWritableNamespaces(cancellable Cancellable) (*FileAttributeInfoList, error) {
	var _arg0 *C.GFile                  // out
	var _arg1 *C.GCancellable           // out
	var _cret *C.GFileAttributeInfoList // in
	var _cerr *C.GError                 // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	_cret = C.g_file_query_writable_namespaces(_arg0, _arg1, &_cerr)

	var _fileAttributeInfoList *FileAttributeInfoList // out
	var _goerr error                                  // out

	_fileAttributeInfoList = (*FileAttributeInfoList)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(&_fileAttributeInfoList, func(v **FileAttributeInfoList) {
		C.free(unsafe.Pointer(v))
	})
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _fileAttributeInfoList, _goerr
}

func (f file) Read(cancellable Cancellable) (FileInputStream, error) {
	var _arg0 *C.GFile            // out
	var _arg1 *C.GCancellable     // out
	var _cret *C.GFileInputStream // in
	var _cerr *C.GError           // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	_cret = C.g_file_read(_arg0, _arg1, &_cerr)

	var _fileInputStream FileInputStream // out
	var _goerr error                     // out

	_fileInputStream = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(FileInputStream)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _fileInputStream, _goerr
}

func (f file) ReadAsync(ioPriority int, cancellable Cancellable, callback AsyncReadyCallback) {
	var _arg0 *C.GFile              // out
	var _arg1 C.int                 // out
	var _arg2 *C.GCancellable       // out
	var _arg3 C.GAsyncReadyCallback // out
	var _arg4 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = C.int(ioPriority)
	_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg3 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg4 = C.gpointer(box.Assign(callback))

	C.g_file_read_async(_arg0, _arg1, _arg2, _arg3, _arg4)
}

func (f file) ReadFinish(res AsyncResult) (FileInputStream, error) {
	var _arg0 *C.GFile            // out
	var _arg1 *C.GAsyncResult     // out
	var _cret *C.GFileInputStream // in
	var _cerr *C.GError           // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(res.Native()))

	_cret = C.g_file_read_finish(_arg0, _arg1, &_cerr)

	var _fileInputStream FileInputStream // out
	var _goerr error                     // out

	_fileInputStream = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(FileInputStream)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _fileInputStream, _goerr
}

func (f file) Replace(etag string, makeBackup bool, flags FileCreateFlags, cancellable Cancellable) (FileOutputStream, error) {
	var _arg0 *C.GFile             // out
	var _arg1 *C.char              // out
	var _arg2 C.gboolean           // out
	var _arg3 C.GFileCreateFlags   // out
	var _arg4 *C.GCancellable      // out
	var _cret *C.GFileOutputStream // in
	var _cerr *C.GError            // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.char)(C.CString(etag))
	defer C.free(unsafe.Pointer(_arg1))
	if makeBackup {
		_arg2 = C.TRUE
	}
	_arg3 = C.GFileCreateFlags(flags)
	_arg4 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	_cret = C.g_file_replace(_arg0, _arg1, _arg2, _arg3, _arg4, &_cerr)

	var _fileOutputStream FileOutputStream // out
	var _goerr error                       // out

	_fileOutputStream = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(FileOutputStream)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _fileOutputStream, _goerr
}

func (f file) ReplaceAsync(etag string, makeBackup bool, flags FileCreateFlags, ioPriority int, cancellable Cancellable, callback AsyncReadyCallback) {
	var _arg0 *C.GFile              // out
	var _arg1 *C.char               // out
	var _arg2 C.gboolean            // out
	var _arg3 C.GFileCreateFlags    // out
	var _arg4 C.int                 // out
	var _arg5 *C.GCancellable       // out
	var _arg6 C.GAsyncReadyCallback // out
	var _arg7 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.char)(C.CString(etag))
	defer C.free(unsafe.Pointer(_arg1))
	if makeBackup {
		_arg2 = C.TRUE
	}
	_arg3 = C.GFileCreateFlags(flags)
	_arg4 = C.int(ioPriority)
	_arg5 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg6 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg7 = C.gpointer(box.Assign(callback))

	C.g_file_replace_async(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7)
}

func (f file) ReplaceContents(contents []byte, etag string, makeBackup bool, flags FileCreateFlags, cancellable Cancellable) (string, error) {
	var _arg0 *C.GFile // out
	var _arg1 *C.char
	var _arg2 C.gsize
	var _arg3 *C.char            // out
	var _arg4 C.gboolean         // out
	var _arg5 C.GFileCreateFlags // out
	var _arg6 *C.char            // in
	var _arg7 *C.GCancellable    // out
	var _cerr *C.GError          // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg2 = C.gsize(len(contents))
	_arg1 = (*C.char)(unsafe.Pointer(&contents[0]))
	_arg3 = (*C.char)(C.CString(etag))
	defer C.free(unsafe.Pointer(_arg3))
	if makeBackup {
		_arg4 = C.TRUE
	}
	_arg5 = C.GFileCreateFlags(flags)
	_arg7 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	C.g_file_replace_contents(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, &_arg6, _arg7, &_cerr)

	var _newEtag string // out
	var _goerr error    // out

	_newEtag = C.GoString(_arg6)
	defer C.free(unsafe.Pointer(_arg6))
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _newEtag, _goerr
}

func (f file) ReplaceContentsAsync(contents []byte, etag string, makeBackup bool, flags FileCreateFlags, cancellable Cancellable, callback AsyncReadyCallback) {
	var _arg0 *C.GFile // out
	var _arg1 *C.char
	var _arg2 C.gsize
	var _arg3 *C.char               // out
	var _arg4 C.gboolean            // out
	var _arg5 C.GFileCreateFlags    // out
	var _arg6 *C.GCancellable       // out
	var _arg7 C.GAsyncReadyCallback // out
	var _arg8 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg2 = C.gsize(len(contents))
	_arg1 = (*C.char)(unsafe.Pointer(&contents[0]))
	_arg3 = (*C.char)(C.CString(etag))
	defer C.free(unsafe.Pointer(_arg3))
	if makeBackup {
		_arg4 = C.TRUE
	}
	_arg5 = C.GFileCreateFlags(flags)
	_arg6 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg7 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg8 = C.gpointer(box.Assign(callback))

	C.g_file_replace_contents_async(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7, _arg8)
}

func (f file) ReplaceContentsFinish(res AsyncResult) (string, error) {
	var _arg0 *C.GFile        // out
	var _arg1 *C.GAsyncResult // out
	var _arg2 *C.char         // in
	var _cerr *C.GError       // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(res.Native()))

	C.g_file_replace_contents_finish(_arg0, _arg1, &_arg2, &_cerr)

	var _newEtag string // out
	var _goerr error    // out

	_newEtag = C.GoString(_arg2)
	defer C.free(unsafe.Pointer(_arg2))
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _newEtag, _goerr
}

func (f file) ReplaceFinish(res AsyncResult) (FileOutputStream, error) {
	var _arg0 *C.GFile             // out
	var _arg1 *C.GAsyncResult      // out
	var _cret *C.GFileOutputStream // in
	var _cerr *C.GError            // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(res.Native()))

	_cret = C.g_file_replace_finish(_arg0, _arg1, &_cerr)

	var _fileOutputStream FileOutputStream // out
	var _goerr error                       // out

	_fileOutputStream = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(FileOutputStream)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _fileOutputStream, _goerr
}

func (f file) ReplaceReadwrite(etag string, makeBackup bool, flags FileCreateFlags, cancellable Cancellable) (FileIOStream, error) {
	var _arg0 *C.GFile           // out
	var _arg1 *C.char            // out
	var _arg2 C.gboolean         // out
	var _arg3 C.GFileCreateFlags // out
	var _arg4 *C.GCancellable    // out
	var _cret *C.GFileIOStream   // in
	var _cerr *C.GError          // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.char)(C.CString(etag))
	defer C.free(unsafe.Pointer(_arg1))
	if makeBackup {
		_arg2 = C.TRUE
	}
	_arg3 = C.GFileCreateFlags(flags)
	_arg4 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	_cret = C.g_file_replace_readwrite(_arg0, _arg1, _arg2, _arg3, _arg4, &_cerr)

	var _fileIOStream FileIOStream // out
	var _goerr error               // out

	_fileIOStream = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(FileIOStream)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _fileIOStream, _goerr
}

func (f file) ReplaceReadwriteAsync(etag string, makeBackup bool, flags FileCreateFlags, ioPriority int, cancellable Cancellable, callback AsyncReadyCallback) {
	var _arg0 *C.GFile              // out
	var _arg1 *C.char               // out
	var _arg2 C.gboolean            // out
	var _arg3 C.GFileCreateFlags    // out
	var _arg4 C.int                 // out
	var _arg5 *C.GCancellable       // out
	var _arg6 C.GAsyncReadyCallback // out
	var _arg7 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.char)(C.CString(etag))
	defer C.free(unsafe.Pointer(_arg1))
	if makeBackup {
		_arg2 = C.TRUE
	}
	_arg3 = C.GFileCreateFlags(flags)
	_arg4 = C.int(ioPriority)
	_arg5 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg6 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg7 = C.gpointer(box.Assign(callback))

	C.g_file_replace_readwrite_async(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7)
}

func (f file) ReplaceReadwriteFinish(res AsyncResult) (FileIOStream, error) {
	var _arg0 *C.GFile         // out
	var _arg1 *C.GAsyncResult  // out
	var _cret *C.GFileIOStream // in
	var _cerr *C.GError        // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(res.Native()))

	_cret = C.g_file_replace_readwrite_finish(_arg0, _arg1, &_cerr)

	var _fileIOStream FileIOStream // out
	var _goerr error               // out

	_fileIOStream = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(FileIOStream)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _fileIOStream, _goerr
}

func (f file) ResolveRelativePath(relativePath string) File {
	var _arg0 *C.GFile // out
	var _arg1 *C.char  // out
	var _cret *C.GFile // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.char)(C.CString(relativePath))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.g_file_resolve_relative_path(_arg0, _arg1)

	var _ret File // out

	_ret = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(File)

	return _ret
}

func (f file) SetAttribute(attribute string, typ FileAttributeType, valueP interface{}, flags FileQueryInfoFlags, cancellable Cancellable) error {
	var _arg0 *C.GFile              // out
	var _arg1 *C.char               // out
	var _arg2 C.GFileAttributeType  // out
	var _arg3 C.gpointer            // out
	var _arg4 C.GFileQueryInfoFlags // out
	var _arg5 *C.GCancellable       // out
	var _cerr *C.GError             // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.char)(C.CString(attribute))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.GFileAttributeType(typ)
	_arg3 = C.gpointer(box.Assign(unsafe.Pointer(valueP)))
	_arg4 = C.GFileQueryInfoFlags(flags)
	_arg5 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	C.g_file_set_attribute(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

func (f file) SetAttributeByteString(attribute string, value string, flags FileQueryInfoFlags, cancellable Cancellable) error {
	var _arg0 *C.GFile              // out
	var _arg1 *C.char               // out
	var _arg2 *C.char               // out
	var _arg3 C.GFileQueryInfoFlags // out
	var _arg4 *C.GCancellable       // out
	var _cerr *C.GError             // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.char)(C.CString(attribute))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.char)(C.CString(value))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = C.GFileQueryInfoFlags(flags)
	_arg4 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	C.g_file_set_attribute_byte_string(_arg0, _arg1, _arg2, _arg3, _arg4, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

func (f file) SetAttributeInt32(attribute string, value int32, flags FileQueryInfoFlags, cancellable Cancellable) error {
	var _arg0 *C.GFile              // out
	var _arg1 *C.char               // out
	var _arg2 C.gint32              // out
	var _arg3 C.GFileQueryInfoFlags // out
	var _arg4 *C.GCancellable       // out
	var _cerr *C.GError             // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.char)(C.CString(attribute))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.gint32(value)
	_arg3 = C.GFileQueryInfoFlags(flags)
	_arg4 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	C.g_file_set_attribute_int32(_arg0, _arg1, _arg2, _arg3, _arg4, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

func (f file) SetAttributeInt64(attribute string, value int64, flags FileQueryInfoFlags, cancellable Cancellable) error {
	var _arg0 *C.GFile              // out
	var _arg1 *C.char               // out
	var _arg2 C.gint64              // out
	var _arg3 C.GFileQueryInfoFlags // out
	var _arg4 *C.GCancellable       // out
	var _cerr *C.GError             // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.char)(C.CString(attribute))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.gint64(value)
	_arg3 = C.GFileQueryInfoFlags(flags)
	_arg4 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	C.g_file_set_attribute_int64(_arg0, _arg1, _arg2, _arg3, _arg4, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

func (f file) SetAttributeString(attribute string, value string, flags FileQueryInfoFlags, cancellable Cancellable) error {
	var _arg0 *C.GFile              // out
	var _arg1 *C.char               // out
	var _arg2 *C.char               // out
	var _arg3 C.GFileQueryInfoFlags // out
	var _arg4 *C.GCancellable       // out
	var _cerr *C.GError             // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.char)(C.CString(attribute))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.char)(C.CString(value))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = C.GFileQueryInfoFlags(flags)
	_arg4 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	C.g_file_set_attribute_string(_arg0, _arg1, _arg2, _arg3, _arg4, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

func (f file) SetAttributeUint32(attribute string, value uint32, flags FileQueryInfoFlags, cancellable Cancellable) error {
	var _arg0 *C.GFile              // out
	var _arg1 *C.char               // out
	var _arg2 C.guint32             // out
	var _arg3 C.GFileQueryInfoFlags // out
	var _arg4 *C.GCancellable       // out
	var _cerr *C.GError             // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.char)(C.CString(attribute))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.guint32(value)
	_arg3 = C.GFileQueryInfoFlags(flags)
	_arg4 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	C.g_file_set_attribute_uint32(_arg0, _arg1, _arg2, _arg3, _arg4, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

func (f file) SetAttributeUint64(attribute string, value uint64, flags FileQueryInfoFlags, cancellable Cancellable) error {
	var _arg0 *C.GFile              // out
	var _arg1 *C.char               // out
	var _arg2 C.guint64             // out
	var _arg3 C.GFileQueryInfoFlags // out
	var _arg4 *C.GCancellable       // out
	var _cerr *C.GError             // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.char)(C.CString(attribute))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.guint64(value)
	_arg3 = C.GFileQueryInfoFlags(flags)
	_arg4 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	C.g_file_set_attribute_uint64(_arg0, _arg1, _arg2, _arg3, _arg4, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

func (f file) SetAttributesAsync(info FileInfo, flags FileQueryInfoFlags, ioPriority int, cancellable Cancellable, callback AsyncReadyCallback) {
	var _arg0 *C.GFile              // out
	var _arg1 *C.GFileInfo          // out
	var _arg2 C.GFileQueryInfoFlags // out
	var _arg3 C.int                 // out
	var _arg4 *C.GCancellable       // out
	var _arg5 C.GAsyncReadyCallback // out
	var _arg6 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GFileInfo)(unsafe.Pointer(info.Native()))
	_arg2 = C.GFileQueryInfoFlags(flags)
	_arg3 = C.int(ioPriority)
	_arg4 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg5 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg6 = C.gpointer(box.Assign(callback))

	C.g_file_set_attributes_async(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6)
}

func (f file) SetAttributesFinish(result AsyncResult) (FileInfo, error) {
	var _arg0 *C.GFile        // out
	var _arg1 *C.GAsyncResult // out
	var _arg2 *C.GFileInfo    // in
	var _cerr *C.GError       // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(result.Native()))

	C.g_file_set_attributes_finish(_arg0, _arg1, &_arg2, &_cerr)

	var _info FileInfo // out
	var _goerr error   // out

	_info = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_arg2))).(FileInfo)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _info, _goerr
}

func (f file) SetAttributesFromInfo(info FileInfo, flags FileQueryInfoFlags, cancellable Cancellable) error {
	var _arg0 *C.GFile              // out
	var _arg1 *C.GFileInfo          // out
	var _arg2 C.GFileQueryInfoFlags // out
	var _arg3 *C.GCancellable       // out
	var _cerr *C.GError             // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GFileInfo)(unsafe.Pointer(info.Native()))
	_arg2 = C.GFileQueryInfoFlags(flags)
	_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	C.g_file_set_attributes_from_info(_arg0, _arg1, _arg2, _arg3, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

func (f file) SetDisplayName(displayName string, cancellable Cancellable) (File, error) {
	var _arg0 *C.GFile        // out
	var _arg1 *C.char         // out
	var _arg2 *C.GCancellable // out
	var _cret *C.GFile        // in
	var _cerr *C.GError       // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.char)(C.CString(displayName))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	_cret = C.g_file_set_display_name(_arg0, _arg1, _arg2, &_cerr)

	var _ret File    // out
	var _goerr error // out

	_ret = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(File)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _ret, _goerr
}

func (f file) SetDisplayNameAsync(displayName string, ioPriority int, cancellable Cancellable, callback AsyncReadyCallback) {
	var _arg0 *C.GFile              // out
	var _arg1 *C.char               // out
	var _arg2 C.int                 // out
	var _arg3 *C.GCancellable       // out
	var _arg4 C.GAsyncReadyCallback // out
	var _arg5 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.char)(C.CString(displayName))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.int(ioPriority)
	_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg4 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg5 = C.gpointer(box.Assign(callback))

	C.g_file_set_display_name_async(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
}

func (f file) SetDisplayNameFinish(res AsyncResult) (File, error) {
	var _arg0 *C.GFile        // out
	var _arg1 *C.GAsyncResult // out
	var _cret *C.GFile        // in
	var _cerr *C.GError       // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(res.Native()))

	_cret = C.g_file_set_display_name_finish(_arg0, _arg1, &_cerr)

	var _ret File    // out
	var _goerr error // out

	_ret = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(File)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _ret, _goerr
}

func (f file) StartMountable(flags DriveStartFlags, startOperation MountOperation, cancellable Cancellable, callback AsyncReadyCallback) {
	var _arg0 *C.GFile              // out
	var _arg1 C.GDriveStartFlags    // out
	var _arg2 *C.GMountOperation    // out
	var _arg3 *C.GCancellable       // out
	var _arg4 C.GAsyncReadyCallback // out
	var _arg5 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = C.GDriveStartFlags(flags)
	_arg2 = (*C.GMountOperation)(unsafe.Pointer(startOperation.Native()))
	_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg4 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg5 = C.gpointer(box.Assign(callback))

	C.g_file_start_mountable(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
}

func (f file) StartMountableFinish(result AsyncResult) error {
	var _arg0 *C.GFile        // out
	var _arg1 *C.GAsyncResult // out
	var _cerr *C.GError       // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(result.Native()))

	C.g_file_start_mountable_finish(_arg0, _arg1, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

func (f file) StopMountable(flags MountUnmountFlags, mountOperation MountOperation, cancellable Cancellable, callback AsyncReadyCallback) {
	var _arg0 *C.GFile              // out
	var _arg1 C.GMountUnmountFlags  // out
	var _arg2 *C.GMountOperation    // out
	var _arg3 *C.GCancellable       // out
	var _arg4 C.GAsyncReadyCallback // out
	var _arg5 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = C.GMountUnmountFlags(flags)
	_arg2 = (*C.GMountOperation)(unsafe.Pointer(mountOperation.Native()))
	_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg4 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg5 = C.gpointer(box.Assign(callback))

	C.g_file_stop_mountable(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
}

func (f file) StopMountableFinish(result AsyncResult) error {
	var _arg0 *C.GFile        // out
	var _arg1 *C.GAsyncResult // out
	var _cerr *C.GError       // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(result.Native()))

	C.g_file_stop_mountable_finish(_arg0, _arg1, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

func (f file) SupportsThreadContexts() bool {
	var _arg0 *C.GFile   // out
	var _cret C.gboolean // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))

	_cret = C.g_file_supports_thread_contexts(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (f file) Trash(cancellable Cancellable) error {
	var _arg0 *C.GFile        // out
	var _arg1 *C.GCancellable // out
	var _cerr *C.GError       // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	C.g_file_trash(_arg0, _arg1, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

func (f file) TrashAsync(ioPriority int, cancellable Cancellable, callback AsyncReadyCallback) {
	var _arg0 *C.GFile              // out
	var _arg1 C.int                 // out
	var _arg2 *C.GCancellable       // out
	var _arg3 C.GAsyncReadyCallback // out
	var _arg4 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = C.int(ioPriority)
	_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg3 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg4 = C.gpointer(box.Assign(callback))

	C.g_file_trash_async(_arg0, _arg1, _arg2, _arg3, _arg4)
}

func (f file) TrashFinish(result AsyncResult) error {
	var _arg0 *C.GFile        // out
	var _arg1 *C.GAsyncResult // out
	var _cerr *C.GError       // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(result.Native()))

	C.g_file_trash_finish(_arg0, _arg1, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

func (f file) UnmountMountable(flags MountUnmountFlags, cancellable Cancellable, callback AsyncReadyCallback) {
	var _arg0 *C.GFile              // out
	var _arg1 C.GMountUnmountFlags  // out
	var _arg2 *C.GCancellable       // out
	var _arg3 C.GAsyncReadyCallback // out
	var _arg4 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = C.GMountUnmountFlags(flags)
	_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg3 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg4 = C.gpointer(box.Assign(callback))

	C.g_file_unmount_mountable(_arg0, _arg1, _arg2, _arg3, _arg4)
}

func (f file) UnmountMountableFinish(result AsyncResult) error {
	var _arg0 *C.GFile        // out
	var _arg1 *C.GAsyncResult // out
	var _cerr *C.GError       // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(result.Native()))

	C.g_file_unmount_mountable_finish(_arg0, _arg1, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

func (f file) UnmountMountableWithOperation(flags MountUnmountFlags, mountOperation MountOperation, cancellable Cancellable, callback AsyncReadyCallback) {
	var _arg0 *C.GFile              // out
	var _arg1 C.GMountUnmountFlags  // out
	var _arg2 *C.GMountOperation    // out
	var _arg3 *C.GCancellable       // out
	var _arg4 C.GAsyncReadyCallback // out
	var _arg5 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = C.GMountUnmountFlags(flags)
	_arg2 = (*C.GMountOperation)(unsafe.Pointer(mountOperation.Native()))
	_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg4 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg5 = C.gpointer(box.Assign(callback))

	C.g_file_unmount_mountable_with_operation(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
}

func (f file) UnmountMountableWithOperationFinish(result AsyncResult) error {
	var _arg0 *C.GFile        // out
	var _arg1 *C.GAsyncResult // out
	var _cerr *C.GError       // in

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(result.Native()))

	C.g_file_unmount_mountable_with_operation_finish(_arg0, _arg1, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}
