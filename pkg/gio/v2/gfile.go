// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/internal/box"
	"github.com/diamondburned/gotk4/internal/gerror"
	"github.com/diamondburned/gotk4/internal/ptr"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gio-2.0 gio-unix-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gio/gdesktopappinfo.h>
// #include <gio/gfiledescriptorbased.h>
// #include <gio/gio.h>
// #include <gio/gunixconnection.h>
// #include <gio/gunixcredentialsmessage.h>
// #include <gio/gunixfdlist.h>
// #include <gio/gunixfdmessage.h>
// #include <gio/gunixinputstream.h>
// #include <gio/gunixmounts.h>
// #include <gio/gunixoutputstream.h>
// #include <gio/gunixsocketaddress.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_file_get_type()), F: marshalFile},
	})
}

// FileOverrider contains methods that are overridable. This
// interface is a subset of the interface File.
type FileOverrider interface {
	// AppendToAsync: asynchronously opens @file for appending.
	//
	// For more details, see g_file_append_to() which is the synchronous version
	// of this call.
	//
	// When the operation is finished, @callback will be called. You can then
	// call g_file_append_to_finish() to get the result of the operation.
	AppendToAsync(flags FileCreateFlags, ioPriority int, cancellable Cancellable, callback AsyncReadyCallback)
	// Copy copies the file @source to the location specified by @destination.
	// Can not handle recursive copies of directories.
	//
	// If the flag FILE_COPY_OVERWRITE is specified an already existing
	// @destination file is overwritten.
	//
	// If the flag FILE_COPY_NOFOLLOW_SYMLINKS is specified then symlinks will
	// be copied as symlinks, otherwise the target of the @source symlink will
	// be copied.
	//
	// If the flag FILE_COPY_ALL_METADATA is specified then all the metadata
	// that is possible to copy is copied, not just the default subset (which,
	// for instance, does not include the owner, see Info).
	//
	// If @cancellable is not nil, then the operation can be cancelled by
	// triggering the cancellable object from another thread. If the operation
	// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
	//
	// If @progress_callback is not nil, then the operation can be monitored by
	// setting this to a ProgressCallback function. @progress_callback_data will
	// be passed to this function. It is guaranteed that this callback will be
	// called after all data has been transferred with the total number of bytes
	// copied during the operation.
	//
	// If the @source file does not exist, then the G_IO_ERROR_NOT_FOUND error
	// is returned, independent on the status of the @destination.
	//
	// If FILE_COPY_OVERWRITE is not specified and the target exists, then the
	// error G_IO_ERROR_EXISTS is returned.
	//
	// If trying to overwrite a file over a directory, the
	// G_IO_ERROR_IS_DIRECTORY error is returned. If trying to overwrite a
	// directory with a directory the G_IO_ERROR_WOULD_MERGE error is returned.
	//
	// If the source is a directory and the target does not exist, or
	// FILE_COPY_OVERWRITE is specified and the target is a file, then the
	// G_IO_ERROR_WOULD_RECURSE error is returned.
	//
	// If you are interested in copying the #GFile object itself (not the
	// on-disk file), see g_file_dup().
	Copy(destination File, flags FileCopyFlags, cancellable Cancellable, progressCallback FileProgressCallback) error
	// CopyAsync copies the file @source to the location specified by
	// @destination asynchronously. For details of the behaviour, see
	// g_file_copy().
	//
	// If @progress_callback is not nil, then that function that will be called
	// just like in g_file_copy(). The callback will run in the default main
	// context of the thread calling g_file_copy_async() — the same context as
	// @callback is run in.
	//
	// When the operation is finished, @callback will be called. You can then
	// call g_file_copy_finish() to get the result of the operation.
	CopyAsync(destination File, flags FileCopyFlags, ioPriority int, cancellable Cancellable)
	// CopyFinish finishes copying the file started with g_file_copy_async().
	CopyFinish(res AsyncResult) error
	// CreateAsync: asynchronously creates a new file and returns an output
	// stream for writing to it. The file must not already exist.
	//
	// For more details, see g_file_create() which is the synchronous version of
	// this call.
	//
	// When the operation is finished, @callback will be called. You can then
	// call g_file_create_finish() to get the result of the operation.
	CreateAsync(flags FileCreateFlags, ioPriority int, cancellable Cancellable, callback AsyncReadyCallback)
	// CreateReadwriteAsync: asynchronously creates a new file and returns a
	// stream for reading and writing to it. The file must not already exist.
	//
	// For more details, see g_file_create_readwrite() which is the synchronous
	// version of this call.
	//
	// When the operation is finished, @callback will be called. You can then
	// call g_file_create_readwrite_finish() to get the result of the operation.
	CreateReadwriteAsync(flags FileCreateFlags, ioPriority int, cancellable Cancellable, callback AsyncReadyCallback)
	// DeleteFile deletes a file. If the @file is a directory, it will only be
	// deleted if it is empty. This has the same semantics as g_unlink().
	//
	// If @file doesn’t exist, G_IO_ERROR_NOT_FOUND will be returned. This
	// allows for deletion to be implemented avoiding time-of-check to
	// time-of-use races
	// (https://en.wikipedia.org/wiki/Time-of-check_to_time-of-use):
	//
	//    g_autoptr(GError) local_error = NULL;
	//    if (!g_file_delete (my_file, my_cancellable, &local_error) &&
	//        !g_error_matches (local_error, G_IO_ERROR, G_IO_ERROR_NOT_FOUND))
	//      {
	//        // deletion failed for some reason other than the file not existing:
	//        // so report the error
	//        g_warning ("Failed to delete s: s",
	//                   g_file_peek_path (my_file), local_error->message);
	//      }
	//
	// If @cancellable is not nil, then the operation can be cancelled by
	// triggering the cancellable object from another thread. If the operation
	// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
	DeleteFile(cancellable Cancellable) error
	// DeleteFileAsync: asynchronously delete a file. If the @file is a
	// directory, it will only be deleted if it is empty. This has the same
	// semantics as g_unlink().
	DeleteFileAsync(ioPriority int, cancellable Cancellable, callback AsyncReadyCallback)
	// DeleteFileFinish finishes deleting a file started with
	// g_file_delete_async().
	DeleteFileFinish(result AsyncResult) error
	// EjectMountable starts an asynchronous eject on a mountable. When this
	// operation has completed, @callback will be called with @user_user data,
	// and the operation can be finalized with g_file_eject_mountable_finish().
	//
	// If @cancellable is not nil, then the operation can be cancelled by
	// triggering the cancellable object from another thread. If the operation
	// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
	EjectMountable(flags MountUnmountFlags, cancellable Cancellable, callback AsyncReadyCallback)
	// EjectMountableFinish finishes an asynchronous eject operation started by
	// g_file_eject_mountable().
	EjectMountableFinish(result AsyncResult) error
	// EjectMountableWithOperation starts an asynchronous eject on a mountable.
	// When this operation has completed, @callback will be called with
	// @user_user data, and the operation can be finalized with
	// g_file_eject_mountable_with_operation_finish().
	//
	// If @cancellable is not nil, then the operation can be cancelled by
	// triggering the cancellable object from another thread. If the operation
	// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
	EjectMountableWithOperation(flags MountUnmountFlags, mountOperation MountOperation, cancellable Cancellable, callback AsyncReadyCallback)
	// EjectMountableWithOperationFinish finishes an asynchronous eject
	// operation started by g_file_eject_mountable_with_operation().
	EjectMountableWithOperationFinish(result AsyncResult) error
	// EnumerateChildrenAsync: asynchronously gets the requested information
	// about the files in a directory. The result is a Enumerator object that
	// will give out Info objects for all the files in the directory.
	//
	// For more details, see g_file_enumerate_children() which is the
	// synchronous version of this call.
	//
	// When the operation is finished, @callback will be called. You can then
	// call g_file_enumerate_children_finish() to get the result of the
	// operation.
	EnumerateChildrenAsync(attributes string, flags FileQueryInfoFlags, ioPriority int, cancellable Cancellable, callback AsyncReadyCallback)
	// Equal checks if the two given #GFiles refer to the same file.
	//
	// Note that two #GFiles that differ can still refer to the same file on the
	// filesystem due to various forms of filename aliasing.
	//
	// This call does no blocking I/O.
	Equal(file2 File) bool
	// FindEnclosingMountAsync: asynchronously gets the mount for the file.
	//
	// For more details, see g_file_find_enclosing_mount() which is the
	// synchronous version of this call.
	//
	// When the operation is finished, @callback will be called. You can then
	// call g_file_find_enclosing_mount_finish() to get the result of the
	// operation.
	FindEnclosingMountAsync(ioPriority int, cancellable Cancellable, callback AsyncReadyCallback)
	// Basename gets the base name (the last component of the path) for a given
	// #GFile.
	//
	// If called for the top level of a system (such as the filesystem root or a
	// uri like sftp://host/) it will return a single directory separator (and
	// on Windows, possibly a drive letter).
	//
	// The base name is a byte string (not UTF-8). It has no defined encoding or
	// rules other than it may not contain zero bytes. If you want to use
	// filenames in a user interface you should use the display name that you
	// can get by requesting the G_FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME
	// attribute with g_file_query_info().
	//
	// This call does no blocking I/O.
	Basename() *string
	// ParseName gets the parse name of the @file. A parse name is a UTF-8
	// string that describes the file such that one can get the #GFile back
	// using g_file_parse_name().
	//
	// This is generally used to show the #GFile as a nice full-pathname kind of
	// string in a user interface, like in a location entry.
	//
	// For local files with names that can safely be converted to UTF-8 the
	// pathname is used, otherwise the IRI is used (a form of URI that allows
	// UTF-8 characters unescaped).
	//
	// This call does no blocking I/O.
	ParseName() string
	// Path gets the local pathname for #GFile, if one exists. If non-nil, this
	// is guaranteed to be an absolute, canonical path. It might contain
	// symlinks.
	//
	// This call does no blocking I/O.
	Path() *string
	// RelativePath gets the path for @descendant relative to @parent.
	//
	// This call does no blocking I/O.
	RelativePath(descendant File) *string
	// URI gets the URI for the @file.
	//
	// This call does no blocking I/O.
	URI() string
	// URIScheme gets the URI scheme for a #GFile. RFC 3986 decodes the scheme
	// as:
	//
	//    URI = scheme ":" hier-part [ "?" query ] [ "#" fragment ]
	//
	// Common schemes include "file", "http", "ftp", etc.
	//
	// The scheme can be different from the one used to construct the #GFile, in
	// that it might be replaced with one that is logically equivalent to the
	// #GFile.
	//
	// This call does no blocking I/O.
	URIScheme() string
	// HasURIScheme checks to see if a #GFile has a given URI scheme.
	//
	// This call does no blocking I/O.
	HasURIScheme(uriScheme string) bool
	// Hash creates a hash value for a #GFile.
	//
	// This call does no blocking I/O.
	Hash() uint
	// IsNative checks to see if a file is native to the platform.
	//
	// A native file is one expressed in the platform-native filename format,
	// e.g. "C:\Windows" or "/usr/bin/". This does not mean the file is local,
	// as it might be on a locally mounted remote filesystem.
	//
	// On some systems non-native files may be available using the native
	// filesystem via a userspace filesystem (FUSE), in these cases this call
	// will return false, but g_file_get_path() will still return a native path.
	//
	// This call does no blocking I/O.
	IsNative() bool
	// MakeDirectory creates a directory. Note that this will only create a
	// child directory of the immediate parent directory of the path or URI
	// given by the #GFile. To recursively create directories, see
	// g_file_make_directory_with_parents(). This function will fail if the
	// parent directory does not exist, setting @error to G_IO_ERROR_NOT_FOUND.
	// If the file system doesn't support creating directories, this function
	// will fail, setting @error to G_IO_ERROR_NOT_SUPPORTED.
	//
	// For a local #GFile the newly created directory will have the default
	// (current) ownership and permissions of the current process.
	//
	// If @cancellable is not nil, then the operation can be cancelled by
	// triggering the cancellable object from another thread. If the operation
	// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
	MakeDirectory(cancellable Cancellable) error
	// MakeDirectoryAsync: asynchronously creates a directory.
	MakeDirectoryAsync(ioPriority int, cancellable Cancellable, callback AsyncReadyCallback)
	// MakeDirectoryFinish finishes an asynchronous directory creation, started
	// with g_file_make_directory_async().
	MakeDirectoryFinish(result AsyncResult) error
	// MakeSymbolicLink creates a symbolic link named @file which contains the
	// string @symlink_value.
	//
	// If @cancellable is not nil, then the operation can be cancelled by
	// triggering the cancellable object from another thread. If the operation
	// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
	MakeSymbolicLink(symlinkValue *string, cancellable Cancellable) error
	// MeasureDiskUsage: recursively measures the disk usage of @file.
	//
	// This is essentially an analog of the 'du' command, but it also reports
	// the number of directories and non-directory files encountered (including
	// things like symbolic links).
	//
	// By default, errors are only reported against the toplevel file itself.
	// Errors found while recursing are silently ignored, unless
	// G_FILE_MEASURE_REPORT_ANY_ERROR is given in @flags.
	//
	// The returned size, @disk_usage, is in bytes and should be formatted with
	// g_format_size() in order to get something reasonable for showing in a
	// user interface.
	//
	// @progress_callback and @progress_data can be given to request periodic
	// progress updates while scanning. See the documentation for
	// MeasureProgressCallback for information about when and how the callback
	// will be invoked.
	MeasureDiskUsage(flags FileMeasureFlags, cancellable Cancellable, progressCallback FileMeasureProgressCallback) (diskUsage uint64, numDirs uint64, numFiles uint64, goerr error)
	// MeasureDiskUsageAsync: recursively measures the disk usage of @file.
	//
	// This is the asynchronous version of g_file_measure_disk_usage(). See
	// there for more information.
	MeasureDiskUsageAsync(flags FileMeasureFlags, ioPriority int, cancellable Cancellable, progressCallback FileMeasureProgressCallback, callback AsyncReadyCallback)
	// MeasureDiskUsageFinish collects the results from an earlier call to
	// g_file_measure_disk_usage_async(). See g_file_measure_disk_usage() for
	// more information.
	MeasureDiskUsageFinish(result AsyncResult) (diskUsage uint64, numDirs uint64, numFiles uint64, goerr error)
	// MountEnclosingVolume starts a @mount_operation, mounting the volume that
	// contains the file @location.
	//
	// When this operation has completed, @callback will be called with
	// @user_user data, and the operation can be finalized with
	// g_file_mount_enclosing_volume_finish().
	//
	// If @cancellable is not nil, then the operation can be cancelled by
	// triggering the cancellable object from another thread. If the operation
	// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
	MountEnclosingVolume(flags MountMountFlags, mountOperation MountOperation, cancellable Cancellable, callback AsyncReadyCallback)
	// MountEnclosingVolumeFinish finishes a mount operation started by
	// g_file_mount_enclosing_volume().
	MountEnclosingVolumeFinish(result AsyncResult) error
	// MountMountable mounts a file of type G_FILE_TYPE_MOUNTABLE. Using
	// @mount_operation, you can request callbacks when, for instance, passwords
	// are needed during authentication.
	//
	// If @cancellable is not nil, then the operation can be cancelled by
	// triggering the cancellable object from another thread. If the operation
	// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
	//
	// When the operation is finished, @callback will be called. You can then
	// call g_file_mount_mountable_finish() to get the result of the operation.
	MountMountable(flags MountMountFlags, mountOperation MountOperation, cancellable Cancellable, callback AsyncReadyCallback)
	// Move tries to move the file or directory @source to the location
	// specified by @destination. If native move operations are supported then
	// this is used, otherwise a copy + delete fallback is used. The native
	// implementation may support moving directories (for instance on moves
	// inside the same filesystem), but the fallback code does not.
	//
	// If the flag FILE_COPY_OVERWRITE is specified an already existing
	// @destination file is overwritten.
	//
	// If @cancellable is not nil, then the operation can be cancelled by
	// triggering the cancellable object from another thread. If the operation
	// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
	//
	// If @progress_callback is not nil, then the operation can be monitored by
	// setting this to a ProgressCallback function. @progress_callback_data will
	// be passed to this function. It is guaranteed that this callback will be
	// called after all data has been transferred with the total number of bytes
	// copied during the operation.
	//
	// If the @source file does not exist, then the G_IO_ERROR_NOT_FOUND error
	// is returned, independent on the status of the @destination.
	//
	// If FILE_COPY_OVERWRITE is not specified and the target exists, then the
	// error G_IO_ERROR_EXISTS is returned.
	//
	// If trying to overwrite a file over a directory, the
	// G_IO_ERROR_IS_DIRECTORY error is returned. If trying to overwrite a
	// directory with a directory the G_IO_ERROR_WOULD_MERGE error is returned.
	//
	// If the source is a directory and the target does not exist, or
	// FILE_COPY_OVERWRITE is specified and the target is a file, then the
	// G_IO_ERROR_WOULD_RECURSE error may be returned (if the native move
	// operation isn't available).
	Move(destination File, flags FileCopyFlags, cancellable Cancellable, progressCallback FileProgressCallback) error
	// OpenReadwriteAsync: asynchronously opens @file for reading and writing.
	//
	// For more details, see g_file_open_readwrite() which is the synchronous
	// version of this call.
	//
	// When the operation is finished, @callback will be called. You can then
	// call g_file_open_readwrite_finish() to get the result of the operation.
	OpenReadwriteAsync(ioPriority int, cancellable Cancellable, callback AsyncReadyCallback)
	// PollMountable polls a file of type FILE_TYPE_MOUNTABLE.
	//
	// If @cancellable is not nil, then the operation can be cancelled by
	// triggering the cancellable object from another thread. If the operation
	// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
	//
	// When the operation is finished, @callback will be called. You can then
	// call g_file_mount_mountable_finish() to get the result of the operation.
	PollMountable(cancellable Cancellable, callback AsyncReadyCallback)
	// PollMountableFinish finishes a poll operation. See
	// g_file_poll_mountable() for details.
	//
	// Finish an asynchronous poll operation that was polled with
	// g_file_poll_mountable().
	PollMountableFinish(result AsyncResult) error
	// PrefixMatches checks whether @file has the prefix specified by @prefix.
	//
	// In other words, if the names of initial elements of @file's pathname
	// match @prefix. Only full pathname elements are matched, so a path like
	// /foo is not considered a prefix of /foobar, only of /foo/bar.
	//
	// A #GFile is not a prefix of itself. If you want to check for equality,
	// use g_file_equal().
	//
	// This call does no I/O, as it works purely on names. As such it can
	// sometimes return false even if @file is inside a @prefix (from a
	// filesystem point of view), because the prefix of @file is an alias of
	// @prefix.
	PrefixMatches(file File) bool
	// QueryFilesystemInfoAsync: asynchronously gets the requested information
	// about the filesystem that the specified @file is on. The result is a Info
	// object that contains key-value attributes (such as type or size for the
	// file).
	//
	// For more details, see g_file_query_filesystem_info() which is the
	// synchronous version of this call.
	//
	// When the operation is finished, @callback will be called. You can then
	// call g_file_query_info_finish() to get the result of the operation.
	QueryFilesystemInfoAsync(attributes string, ioPriority int, cancellable Cancellable, callback AsyncReadyCallback)
	// QueryInfoAsync: asynchronously gets the requested information about
	// specified @file. The result is a Info object that contains key-value
	// attributes (such as type or size for the file).
	//
	// For more details, see g_file_query_info() which is the synchronous
	// version of this call.
	//
	// When the operation is finished, @callback will be called. You can then
	// call g_file_query_info_finish() to get the result of the operation.
	QueryInfoAsync(attributes string, flags FileQueryInfoFlags, ioPriority int, cancellable Cancellable, callback AsyncReadyCallback)
	// ReadAsync: asynchronously opens @file for reading.
	//
	// For more details, see g_file_read() which is the synchronous version of
	// this call.
	//
	// When the operation is finished, @callback will be called. You can then
	// call g_file_read_finish() to get the result of the operation.
	ReadAsync(ioPriority int, cancellable Cancellable, callback AsyncReadyCallback)
	// ReplaceAsync: asynchronously overwrites the file, replacing the contents,
	// possibly creating a backup copy of the file first.
	//
	// For more details, see g_file_replace() which is the synchronous version
	// of this call.
	//
	// When the operation is finished, @callback will be called. You can then
	// call g_file_replace_finish() to get the result of the operation.
	ReplaceAsync(etag string, makeBackup bool, flags FileCreateFlags, ioPriority int, cancellable Cancellable, callback AsyncReadyCallback)
	// ReplaceReadwriteAsync: asynchronously overwrites the file in read-write
	// mode, replacing the contents, possibly creating a backup copy of the file
	// first.
	//
	// For more details, see g_file_replace_readwrite() which is the synchronous
	// version of this call.
	//
	// When the operation is finished, @callback will be called. You can then
	// call g_file_replace_readwrite_finish() to get the result of the
	// operation.
	ReplaceReadwriteAsync(etag string, makeBackup bool, flags FileCreateFlags, ioPriority int, cancellable Cancellable, callback AsyncReadyCallback)
	// SetAttribute sets an attribute in the file with attribute name @attribute
	// to @value_p.
	//
	// Some attributes can be unset by setting @type to
	// G_FILE_ATTRIBUTE_TYPE_INVALID and @value_p to nil.
	//
	// If @cancellable is not nil, then the operation can be cancelled by
	// triggering the cancellable object from another thread. If the operation
	// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
	SetAttribute(attribute string, typ FileAttributeType, valueP interface{}, flags FileQueryInfoFlags, cancellable Cancellable) error
	// SetAttributesAsync: asynchronously sets the attributes of @file with
	// @info.
	//
	// For more details, see g_file_set_attributes_from_info(), which is the
	// synchronous version of this call.
	//
	// When the operation is finished, @callback will be called. You can then
	// call g_file_set_attributes_finish() to get the result of the operation.
	SetAttributesAsync(info FileInfo, flags FileQueryInfoFlags, ioPriority int, cancellable Cancellable, callback AsyncReadyCallback)
	// SetAttributesFromInfo tries to set all attributes in the Info on the
	// target values, not stopping on the first error.
	//
	// If there is any error during this operation then @error will be set to
	// the first error. Error on particular fields are flagged by setting the
	// "status" field in the attribute value to
	// G_FILE_ATTRIBUTE_STATUS_ERROR_SETTING, which means you can also detect
	// further errors.
	//
	// If @cancellable is not nil, then the operation can be cancelled by
	// triggering the cancellable object from another thread. If the operation
	// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
	SetAttributesFromInfo(info FileInfo, flags FileQueryInfoFlags, cancellable Cancellable) error
	// SetDisplayNameAsync: asynchronously sets the display name for a given
	// #GFile.
	//
	// For more details, see g_file_set_display_name() which is the synchronous
	// version of this call.
	//
	// When the operation is finished, @callback will be called. You can then
	// call g_file_set_display_name_finish() to get the result of the operation.
	SetDisplayNameAsync(displayName string, ioPriority int, cancellable Cancellable, callback AsyncReadyCallback)
	// StartMountable starts a file of type FILE_TYPE_MOUNTABLE. Using
	// @start_operation, you can request callbacks when, for instance, passwords
	// are needed during authentication.
	//
	// If @cancellable is not nil, then the operation can be cancelled by
	// triggering the cancellable object from another thread. If the operation
	// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
	//
	// When the operation is finished, @callback will be called. You can then
	// call g_file_mount_mountable_finish() to get the result of the operation.
	StartMountable(flags DriveStartFlags, startOperation MountOperation, cancellable Cancellable, callback AsyncReadyCallback)
	// StartMountableFinish finishes a start operation. See
	// g_file_start_mountable() for details.
	//
	// Finish an asynchronous start operation that was started with
	// g_file_start_mountable().
	StartMountableFinish(result AsyncResult) error
	// StopMountable stops a file of type FILE_TYPE_MOUNTABLE.
	//
	// If @cancellable is not nil, then the operation can be cancelled by
	// triggering the cancellable object from another thread. If the operation
	// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
	//
	// When the operation is finished, @callback will be called. You can then
	// call g_file_stop_mountable_finish() to get the result of the operation.
	StopMountable(flags MountUnmountFlags, mountOperation MountOperation, cancellable Cancellable, callback AsyncReadyCallback)
	// StopMountableFinish finishes a stop operation, see
	// g_file_stop_mountable() for details.
	//
	// Finish an asynchronous stop operation that was started with
	// g_file_stop_mountable().
	StopMountableFinish(result AsyncResult) error
	// Trash sends @file to the "Trashcan", if possible. This is similar to
	// deleting it, but the user can recover it before emptying the trashcan.
	// Not all file systems support trashing, so this call can return the
	// G_IO_ERROR_NOT_SUPPORTED error. Since GLib 2.66, the `x-gvfs-notrash`
	// unix mount option can be used to disable g_file_trash() support for
	// certain mounts, the G_IO_ERROR_NOT_SUPPORTED error will be returned in
	// that case.
	//
	// If @cancellable is not nil, then the operation can be cancelled by
	// triggering the cancellable object from another thread. If the operation
	// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
	Trash(cancellable Cancellable) error
	// TrashAsync: asynchronously sends @file to the Trash location, if
	// possible.
	TrashAsync(ioPriority int, cancellable Cancellable, callback AsyncReadyCallback)
	// TrashFinish finishes an asynchronous file trashing operation, started
	// with g_file_trash_async().
	TrashFinish(result AsyncResult) error
	// UnmountMountable unmounts a file of type G_FILE_TYPE_MOUNTABLE.
	//
	// If @cancellable is not nil, then the operation can be cancelled by
	// triggering the cancellable object from another thread. If the operation
	// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
	//
	// When the operation is finished, @callback will be called. You can then
	// call g_file_unmount_mountable_finish() to get the result of the
	// operation.
	UnmountMountable(flags MountUnmountFlags, cancellable Cancellable, callback AsyncReadyCallback)
	// UnmountMountableFinish finishes an unmount operation, see
	// g_file_unmount_mountable() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable().
	UnmountMountableFinish(result AsyncResult) error
	// UnmountMountableWithOperation unmounts a file of type
	// FILE_TYPE_MOUNTABLE.
	//
	// If @cancellable is not nil, then the operation can be cancelled by
	// triggering the cancellable object from another thread. If the operation
	// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
	//
	// When the operation is finished, @callback will be called. You can then
	// call g_file_unmount_mountable_finish() to get the result of the
	// operation.
	UnmountMountableWithOperation(flags MountUnmountFlags, mountOperation MountOperation, cancellable Cancellable, callback AsyncReadyCallback)
	// UnmountMountableWithOperationFinish finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	UnmountMountableWithOperationFinish(result AsyncResult) error
}

// File is a high level abstraction for manipulating files on a virtual file
// system. #GFiles are lightweight, immutable objects that do no I/O upon
// creation. It is necessary to understand that #GFile objects do not represent
// files, merely an identifier for a file. All file content I/O is implemented
// as streaming operations (see Stream and Stream).
//
// To construct a #GFile, you can use: - g_file_new_for_path() if you have a
// path. - g_file_new_for_uri() if you have a URI. -
// g_file_new_for_commandline_arg() for a command line argument. -
// g_file_new_tmp() to create a temporary file from a template. -
// g_file_parse_name() from a UTF-8 string gotten from g_file_get_parse_name().
// - g_file_new_build_filename() to create a file from path elements.
//
// One way to think of a #GFile is as an abstraction of a pathname. For normal
// files the system pathname is what is stored internally, but as #GFiles are
// extensible it could also be something else that corresponds to a pathname in
// a userspace implementation of a filesystem.
//
// #GFiles make up hierarchies of directories and files that correspond to the
// files on a filesystem. You can move through the file system with #GFile using
// g_file_get_parent() to get an identifier for the parent directory,
// g_file_get_child() to get a child within a directory,
// g_file_resolve_relative_path() to resolve a relative path between two
// #GFiles. There can be multiple hierarchies, so you may not end up at the same
// root if you repeatedly call g_file_get_parent() on two different files.
//
// All #GFiles have a basename (get with g_file_get_basename()). These names are
// byte strings that are used to identify the file on the filesystem (relative
// to its parent directory) and there is no guarantees that they have any
// particular charset encoding or even make any sense at all. If you want to use
// filenames in a user interface you should use the display name that you can
// get by requesting the G_FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME attribute with
// g_file_query_info(). This is guaranteed to be in UTF-8 and can be used in a
// user interface. But always store the real basename or the #GFile to use to
// actually access the file, because there is no way to go from a display name
// to the actual name.
//
// Using #GFile as an identifier has the same weaknesses as using a path in that
// there may be multiple aliases for the same file. For instance, hard or soft
// links may cause two different #GFiles to refer to the same file. Other
// possible causes for aliases are: case insensitive filesystems, short and long
// names on FAT/NTFS, or bind mounts in Linux. If you want to check if two
// #GFiles point to the same file you can query for the G_FILE_ATTRIBUTE_ID_FILE
// attribute. Note that #GFile does some trivial canonicalization of pathnames
// passed in, so that trivial differences in the path string used at creation
// (duplicated slashes, slash at end of path, "." or ".." path segments, etc)
// does not create different #GFiles.
//
// Many #GFile operations have both synchronous and asynchronous versions to
// suit your application. Asynchronous versions of synchronous functions simply
// have _async() appended to their function names. The asynchronous I/O
// functions call a ReadyCallback which is then used to finalize the operation,
// producing a GAsyncResult which is then passed to the function's matching
// _finish() operation.
//
// It is highly recommended to use asynchronous calls when running within a
// shared main loop, such as in the main thread of an application. This avoids
// I/O operations blocking other sources on the main loop from being dispatched.
// Synchronous I/O operations should be performed from worker threads. See the
// [introduction to asynchronous programming section][async-programming] for
// more.
//
// Some #GFile operations almost always take a noticeable amount of time, and so
// do not have synchronous analogs. Notable cases include: -
// g_file_mount_mountable() to mount a mountable file. -
// g_file_unmount_mountable_with_operation() to unmount a mountable file. -
// g_file_eject_mountable_with_operation() to eject a mountable file.
//
//
// Entity Tags
//
// One notable feature of #GFiles are entity tags, or "etags" for short. Entity
// tags are somewhat like a more abstract version of the traditional mtime, and
// can be used to quickly determine if the file has been modified from the
// version on the file system. See the HTTP 1.1 specification
// (http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html) for HTTP Etag
// headers, which are a very similar concept.
type File interface {
	gextras.Objector
	FileOverrider

	// BuildAttributeListForCopy prepares the file attribute query string for
	// copying to @file.
	//
	// This function prepares an attribute query string to be passed to
	// g_file_query_info() to get a list of attributes normally copied with the
	// file (see g_file_copy_attributes() for the detailed description). This
	// function is used by the implementation of g_file_copy_attributes() and is
	// useful when one needs to query and set the attributes in two stages
	// (e.g., for recursive move of a directory).
	BuildAttributeListForCopy(flags FileCopyFlags, cancellable Cancellable) (string, error)
	// CopyAttributes copies the file attributes from @source to @destination.
	//
	// Normally only a subset of the file attributes are copied, those that are
	// copies in a normal file copy operation (which for instance does not
	// include e.g. owner). However if FILE_COPY_ALL_METADATA is specified in
	// @flags, then all the metadata that is possible to copy is copied. This is
	// useful when implementing move by copy + delete source.
	CopyAttributes(destination File, flags FileCopyFlags, cancellable Cancellable) error
	// Delete deletes a file. If the @file is a directory, it will only be
	// deleted if it is empty. This has the same semantics as g_unlink().
	//
	// If @file doesn’t exist, G_IO_ERROR_NOT_FOUND will be returned. This
	// allows for deletion to be implemented avoiding time-of-check to
	// time-of-use races
	// (https://en.wikipedia.org/wiki/Time-of-check_to_time-of-use):
	//
	//    g_autoptr(GError) local_error = NULL;
	//    if (!g_file_delete (my_file, my_cancellable, &local_error) &&
	//        !g_error_matches (local_error, G_IO_ERROR, G_IO_ERROR_NOT_FOUND))
	//      {
	//        // deletion failed for some reason other than the file not existing:
	//        // so report the error
	//        g_warning ("Failed to delete s: s",
	//                   g_file_peek_path (my_file), local_error->message);
	//      }
	//
	// If @cancellable is not nil, then the operation can be cancelled by
	// triggering the cancellable object from another thread. If the operation
	// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
	Delete(cancellable Cancellable) error
	// DeleteAsync: asynchronously delete a file. If the @file is a directory,
	// it will only be deleted if it is empty. This has the same semantics as
	// g_unlink().
	DeleteAsync(ioPriority int, cancellable Cancellable, callback AsyncReadyCallback)
	// DeleteFinish finishes deleting a file started with g_file_delete_async().
	DeleteFinish(result AsyncResult) error
	// HasParent checks if @file has a parent, and optionally, if it is @parent.
	//
	// If @parent is nil then this function returns true if @file has any parent
	// at all. If @parent is non-nil then true is only returned if @file is an
	// immediate child of @parent.
	HasParent(parent File) bool
	// HasPrefix checks whether @file has the prefix specified by @prefix.
	//
	// In other words, if the names of initial elements of @file's pathname
	// match @prefix. Only full pathname elements are matched, so a path like
	// /foo is not considered a prefix of /foobar, only of /foo/bar.
	//
	// A #GFile is not a prefix of itself. If you want to check for equality,
	// use g_file_equal().
	//
	// This call does no I/O, as it works purely on names. As such it can
	// sometimes return false even if @file is inside a @prefix (from a
	// filesystem point of view), because the prefix of @file is an alias of
	// @prefix.
	HasPrefix(prefix File) bool
	// LoadBytesAsync: asynchronously loads the contents of @file as #GBytes.
	//
	// If @file is a resource:// based URI, the resulting bytes will reference
	// the embedded resource instead of a copy. Otherwise, this is equivalent to
	// calling g_file_load_contents_async() and g_bytes_new_take().
	//
	// @callback should call g_file_load_bytes_finish() to get the result of
	// this asynchronous operation.
	//
	// See g_file_load_bytes() for more information.
	LoadBytesAsync(cancellable Cancellable, callback AsyncReadyCallback)
	// LoadContents loads the content of the file into memory. The data is
	// always zero-terminated, but this is not included in the resultant
	// @length. The returned @contents should be freed with g_free() when no
	// longer needed.
	//
	// If @cancellable is not nil, then the operation can be cancelled by
	// triggering the cancellable object from another thread. If the operation
	// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
	LoadContents(cancellable Cancellable) ([]byte, string, error)
	// LoadContentsAsync starts an asynchronous load of the @file's contents.
	//
	// For more details, see g_file_load_contents() which is the synchronous
	// version of this call.
	//
	// When the load operation has completed, @callback will be called with
	// @user data. To finish the operation, call g_file_load_contents_finish()
	// with the Result returned by the @callback.
	//
	// If @cancellable is not nil, then the operation can be cancelled by
	// triggering the cancellable object from another thread. If the operation
	// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
	LoadContentsAsync(cancellable Cancellable, callback AsyncReadyCallback)
	// LoadContentsFinish finishes an asynchronous load of the @file's contents.
	// The contents are placed in @contents, and @length is set to the size of
	// the @contents string. The @contents should be freed with g_free() when no
	// longer needed. If @etag_out is present, it will be set to the new entity
	// tag for the @file.
	LoadContentsFinish(res AsyncResult) ([]byte, string, error)
	// LoadPartialContentsAsync reads the partial contents of a file. A
	// ReadMoreCallback should be used to stop reading from the file when
	// appropriate, else this function will behave exactly as
	// g_file_load_contents_async(). This operation can be finished by
	// g_file_load_partial_contents_finish().
	//
	// Users of this function should be aware that @user_data is passed to both
	// the @read_more_callback and the @callback.
	//
	// If @cancellable is not nil, then the operation can be cancelled by
	// triggering the cancellable object from another thread. If the operation
	// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
	LoadPartialContentsAsync(cancellable Cancellable, readMoreCallback FileReadMoreCallback, callback AsyncReadyCallback)
	// LoadPartialContentsFinish finishes an asynchronous partial load operation
	// that was started with g_file_load_partial_contents_async(). The data is
	// always zero-terminated, but this is not included in the resultant
	// @length. The returned @contents should be freed with g_free() when no
	// longer needed.
	LoadPartialContentsFinish(res AsyncResult) ([]byte, string, error)
	// MakeDirectoryWithParents creates a directory and any parent directories
	// that may not exist similar to 'mkdir -p'. If the file system does not
	// support creating directories, this function will fail, setting @error to
	// G_IO_ERROR_NOT_SUPPORTED. If the directory itself already exists, this
	// function will fail setting @error to G_IO_ERROR_EXISTS, unlike the
	// similar g_mkdir_with_parents().
	//
	// For a local #GFile the newly created directories will have the default
	// (current) ownership and permissions of the current process.
	//
	// If @cancellable is not nil, then the operation can be cancelled by
	// triggering the cancellable object from another thread. If the operation
	// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
	MakeDirectoryWithParents(cancellable Cancellable) error
	// PeekPath: exactly like g_file_get_path(), but caches the result via
	// g_object_set_qdata_full(). This is useful for example in C applications
	// which mix `g_file_*` APIs with native ones. It also avoids an extra
	// duplicated string when possible, so will be generally more efficient.
	//
	// This call does no blocking I/O.
	PeekPath() *string
	// QueryDefaultHandlerAsync: async version of
	// g_file_query_default_handler().
	QueryDefaultHandlerAsync(ioPriority int, cancellable Cancellable, callback AsyncReadyCallback)
	// QueryExists: utility function to check if a particular file exists. This
	// is implemented using g_file_query_info() and as such does blocking I/O.
	//
	// Note that in many cases it is racy to first check for file existence
	// (https://en.wikipedia.org/wiki/Time_of_check_to_time_of_use) and then
	// execute something based on the outcome of that, because the file might
	// have been created or removed in between the operations. The general
	// approach to handling that is to not check, but just do the operation and
	// handle the errors as they come.
	//
	// As an example of race-free checking, take the case of reading a file, and
	// if it doesn't exist, creating it. There are two racy versions: read it,
	// and on error create it; and: check if it exists, if not create it. These
	// can both result in two processes creating the file (with perhaps a
	// partially written file as the result). The correct approach is to always
	// try to create the file with g_file_create() which will either atomically
	// create the file or fail with a G_IO_ERROR_EXISTS error.
	//
	// However, in many cases an existence check is useful in a user interface,
	// for instance to make a menu item sensitive/insensitive, so that you don't
	// have to fool users that something is possible and then just show an error
	// dialog. If you do this, you should make sure to also handle the errors
	// that can happen due to races when you execute the operation.
	QueryExists(cancellable Cancellable) bool
	// ReplaceContents replaces the contents of @file with @contents of @length
	// bytes.
	//
	// If @etag is specified (not nil), any existing file must have that etag,
	// or the error G_IO_ERROR_WRONG_ETAG will be returned.
	//
	// If @make_backup is true, this function will attempt to make a backup of
	// @file. Internally, it uses g_file_replace(), so will try to replace the
	// file contents in the safest way possible. For example, atomic renames are
	// used when replacing local files’ contents.
	//
	// If @cancellable is not nil, then the operation can be cancelled by
	// triggering the cancellable object from another thread. If the operation
	// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
	//
	// The returned @new_etag can be used to verify that the file hasn't changed
	// the next time it is saved over.
	ReplaceContents(contents []byte, etag string, makeBackup bool, flags FileCreateFlags, cancellable Cancellable) (string, error)
	// ReplaceContentsAsync starts an asynchronous replacement of @file with the
	// given @contents of @length bytes. @etag will replace the document's
	// current entity tag.
	//
	// When this operation has completed, @callback will be called with
	// @user_user data, and the operation can be finalized with
	// g_file_replace_contents_finish().
	//
	// If @cancellable is not nil, then the operation can be cancelled by
	// triggering the cancellable object from another thread. If the operation
	// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
	//
	// If @make_backup is true, this function will attempt to make a backup of
	// @file.
	//
	// Note that no copy of @contents will be made, so it must stay valid until
	// @callback is called. See g_file_replace_contents_bytes_async() for a
	// #GBytes version that will automatically hold a reference to the contents
	// (without copying) for the duration of the call.
	ReplaceContentsAsync(contents []byte, etag string, makeBackup bool, flags FileCreateFlags, cancellable Cancellable, callback AsyncReadyCallback)
	// ReplaceContentsFinish finishes an asynchronous replace of the given
	// @file. See g_file_replace_contents_async(). Sets @new_etag to the new
	// entity tag for the document, if present.
	ReplaceContentsFinish(res AsyncResult) (string, error)
	// SetAttributeByteString sets @attribute of type
	// G_FILE_ATTRIBUTE_TYPE_BYTE_STRING to @value. If @attribute is of a
	// different type, this operation will fail, returning false.
	//
	// If @cancellable is not nil, then the operation can be cancelled by
	// triggering the cancellable object from another thread. If the operation
	// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
	SetAttributeByteString(attribute string, value string, flags FileQueryInfoFlags, cancellable Cancellable) error
	// SetAttributeInt32 sets @attribute of type G_FILE_ATTRIBUTE_TYPE_INT32 to
	// @value. If @attribute is of a different type, this operation will fail.
	//
	// If @cancellable is not nil, then the operation can be cancelled by
	// triggering the cancellable object from another thread. If the operation
	// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
	SetAttributeInt32(attribute string, value int32, flags FileQueryInfoFlags, cancellable Cancellable) error
	// SetAttributeInt64 sets @attribute of type G_FILE_ATTRIBUTE_TYPE_INT64 to
	// @value. If @attribute is of a different type, this operation will fail.
	//
	// If @cancellable is not nil, then the operation can be cancelled by
	// triggering the cancellable object from another thread. If the operation
	// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
	SetAttributeInt64(attribute string, value int64, flags FileQueryInfoFlags, cancellable Cancellable) error
	// SetAttributeString sets @attribute of type G_FILE_ATTRIBUTE_TYPE_STRING
	// to @value. If @attribute is of a different type, this operation will
	// fail.
	//
	// If @cancellable is not nil, then the operation can be cancelled by
	// triggering the cancellable object from another thread. If the operation
	// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
	SetAttributeString(attribute string, value string, flags FileQueryInfoFlags, cancellable Cancellable) error
	// SetAttributeUint32 sets @attribute of type G_FILE_ATTRIBUTE_TYPE_UINT32
	// to @value. If @attribute is of a different type, this operation will
	// fail.
	//
	// If @cancellable is not nil, then the operation can be cancelled by
	// triggering the cancellable object from another thread. If the operation
	// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
	SetAttributeUint32(attribute string, value uint32, flags FileQueryInfoFlags, cancellable Cancellable) error
	// SetAttributeUint64 sets @attribute of type G_FILE_ATTRIBUTE_TYPE_UINT64
	// to @value. If @attribute is of a different type, this operation will
	// fail.
	//
	// If @cancellable is not nil, then the operation can be cancelled by
	// triggering the cancellable object from another thread. If the operation
	// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
	SetAttributeUint64(attribute string, value uint64, flags FileQueryInfoFlags, cancellable Cancellable) error
	// SupportsThreadContexts checks if @file supports [thread-default
	// contexts][g-main-context-push-thread-default-context]. If this returns
	// false, you cannot perform asynchronous operations on @file in a thread
	// that has a thread-default context.
	SupportsThreadContexts() bool
}

// file implements the File interface.
type file struct {
	gextras.Objector
}

var _ File = (*file)(nil)

// WrapFile wraps a GObject to a type that implements interface
// File. It is primarily used internally.
func WrapFile(obj *externglib.Object) File {
	return File{
		Objector: obj,
	}
}

func marshalFile(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapFile(obj), nil
}

// AppendToAsync: asynchronously opens @file for appending.
//
// For more details, see g_file_append_to() which is the synchronous version
// of this call.
//
// When the operation is finished, @callback will be called. You can then
// call g_file_append_to_finish() to get the result of the operation.
func (f file) AppendToAsync(flags FileCreateFlags, ioPriority int, cancellable Cancellable, callback AsyncReadyCallback) {
	var _arg0 *C.GFile
	var _arg1 C.GFileCreateFlags
	var _arg2 C.int
	var _arg3 *C.GCancellable
	var _arg4 C.GAsyncReadyCallback
	var _arg5 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (C.GFileCreateFlags)(flags)
	_arg2 = C.int(ioPriority)
	_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg4 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg5 = C.gpointer(box.Assign(callback))

	C.g_file_append_to_async(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
}

// BuildAttributeListForCopy prepares the file attribute query string for
// copying to @file.
//
// This function prepares an attribute query string to be passed to
// g_file_query_info() to get a list of attributes normally copied with the
// file (see g_file_copy_attributes() for the detailed description). This
// function is used by the implementation of g_file_copy_attributes() and is
// useful when one needs to query and set the attributes in two stages
// (e.g., for recursive move of a directory).
func (f file) BuildAttributeListForCopy(flags FileCopyFlags, cancellable Cancellable) (string, error) {
	var _arg0 *C.GFile
	var _arg1 C.GFileCopyFlags
	var _arg2 *C.GCancellable

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (C.GFileCopyFlags)(flags)
	_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	var _cret *C.char
	var _cerr *C.GError

	_cret = C.g_file_build_attribute_list_for_copy(_arg0, _arg1, _arg2, _cerr)

	var _utf8 string
	var _goerr error

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _utf8, _goerr
}

// Copy copies the file @source to the location specified by @destination.
// Can not handle recursive copies of directories.
//
// If the flag FILE_COPY_OVERWRITE is specified an already existing
// @destination file is overwritten.
//
// If the flag FILE_COPY_NOFOLLOW_SYMLINKS is specified then symlinks will
// be copied as symlinks, otherwise the target of the @source symlink will
// be copied.
//
// If the flag FILE_COPY_ALL_METADATA is specified then all the metadata
// that is possible to copy is copied, not just the default subset (which,
// for instance, does not include the owner, see Info).
//
// If @cancellable is not nil, then the operation can be cancelled by
// triggering the cancellable object from another thread. If the operation
// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
//
// If @progress_callback is not nil, then the operation can be monitored by
// setting this to a ProgressCallback function. @progress_callback_data will
// be passed to this function. It is guaranteed that this callback will be
// called after all data has been transferred with the total number of bytes
// copied during the operation.
//
// If the @source file does not exist, then the G_IO_ERROR_NOT_FOUND error
// is returned, independent on the status of the @destination.
//
// If FILE_COPY_OVERWRITE is not specified and the target exists, then the
// error G_IO_ERROR_EXISTS is returned.
//
// If trying to overwrite a file over a directory, the
// G_IO_ERROR_IS_DIRECTORY error is returned. If trying to overwrite a
// directory with a directory the G_IO_ERROR_WOULD_MERGE error is returned.
//
// If the source is a directory and the target does not exist, or
// FILE_COPY_OVERWRITE is specified and the target is a file, then the
// G_IO_ERROR_WOULD_RECURSE error is returned.
//
// If you are interested in copying the #GFile object itself (not the
// on-disk file), see g_file_dup().
func (s file) Copy(destination File, flags FileCopyFlags, cancellable Cancellable, progressCallback FileProgressCallback) error {
	var _arg0 *C.GFile
	var _arg1 *C.GFile
	var _arg2 C.GFileCopyFlags
	var _arg3 *C.GCancellable
	var _arg4 C.GFileProgressCallback
	var _arg5 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GFile)(unsafe.Pointer(destination.Native()))
	_arg2 = (C.GFileCopyFlags)(flags)
	_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg4 = (*[0]byte)(C.gotk4_FileProgressCallback)
	_arg5 = C.gpointer(box.Assign(progressCallback))

	var _cerr *C.GError

	C.g_file_copy(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _cerr)

	var _goerr error

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

// CopyAsync copies the file @source to the location specified by
// @destination asynchronously. For details of the behaviour, see
// g_file_copy().
//
// If @progress_callback is not nil, then that function that will be called
// just like in g_file_copy(). The callback will run in the default main
// context of the thread calling g_file_copy_async() — the same context as
// @callback is run in.
//
// When the operation is finished, @callback will be called. You can then
// call g_file_copy_finish() to get the result of the operation.
func (s file) CopyAsync(destination File, flags FileCopyFlags, ioPriority int, cancellable Cancellable) {
	var _arg0 *C.GFile
	var _arg1 *C.GFile
	var _arg2 C.GFileCopyFlags
	var _arg3 C.int
	var _arg4 *C.GCancellable

	_arg0 = (*C.GFile)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GFile)(unsafe.Pointer(destination.Native()))
	_arg2 = (C.GFileCopyFlags)(flags)
	_arg3 = C.int(ioPriority)
	_arg4 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	C.g_file_copy_async(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7, _arg8)
}

// CopyAttributes copies the file attributes from @source to @destination.
//
// Normally only a subset of the file attributes are copied, those that are
// copies in a normal file copy operation (which for instance does not
// include e.g. owner). However if FILE_COPY_ALL_METADATA is specified in
// @flags, then all the metadata that is possible to copy is copied. This is
// useful when implementing move by copy + delete source.
func (s file) CopyAttributes(destination File, flags FileCopyFlags, cancellable Cancellable) error {
	var _arg0 *C.GFile
	var _arg1 *C.GFile
	var _arg2 C.GFileCopyFlags
	var _arg3 *C.GCancellable

	_arg0 = (*C.GFile)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GFile)(unsafe.Pointer(destination.Native()))
	_arg2 = (C.GFileCopyFlags)(flags)
	_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	var _cerr *C.GError

	C.g_file_copy_attributes(_arg0, _arg1, _arg2, _arg3, _cerr)

	var _goerr error

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

// CopyFinish finishes copying the file started with g_file_copy_async().
func (f file) CopyFinish(res AsyncResult) error {
	var _arg0 *C.GFile
	var _arg1 *C.GAsyncResult

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(res.Native()))

	var _cerr *C.GError

	C.g_file_copy_finish(_arg0, _arg1, _cerr)

	var _goerr error

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

// CreateAsync: asynchronously creates a new file and returns an output
// stream for writing to it. The file must not already exist.
//
// For more details, see g_file_create() which is the synchronous version of
// this call.
//
// When the operation is finished, @callback will be called. You can then
// call g_file_create_finish() to get the result of the operation.
func (f file) CreateAsync(flags FileCreateFlags, ioPriority int, cancellable Cancellable, callback AsyncReadyCallback) {
	var _arg0 *C.GFile
	var _arg1 C.GFileCreateFlags
	var _arg2 C.int
	var _arg3 *C.GCancellable
	var _arg4 C.GAsyncReadyCallback
	var _arg5 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (C.GFileCreateFlags)(flags)
	_arg2 = C.int(ioPriority)
	_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg4 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg5 = C.gpointer(box.Assign(callback))

	C.g_file_create_async(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
}

// CreateReadwriteAsync: asynchronously creates a new file and returns a
// stream for reading and writing to it. The file must not already exist.
//
// For more details, see g_file_create_readwrite() which is the synchronous
// version of this call.
//
// When the operation is finished, @callback will be called. You can then
// call g_file_create_readwrite_finish() to get the result of the operation.
func (f file) CreateReadwriteAsync(flags FileCreateFlags, ioPriority int, cancellable Cancellable, callback AsyncReadyCallback) {
	var _arg0 *C.GFile
	var _arg1 C.GFileCreateFlags
	var _arg2 C.int
	var _arg3 *C.GCancellable
	var _arg4 C.GAsyncReadyCallback
	var _arg5 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (C.GFileCreateFlags)(flags)
	_arg2 = C.int(ioPriority)
	_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg4 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg5 = C.gpointer(box.Assign(callback))

	C.g_file_create_readwrite_async(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
}

// Delete deletes a file. If the @file is a directory, it will only be
// deleted if it is empty. This has the same semantics as g_unlink().
//
// If @file doesn’t exist, G_IO_ERROR_NOT_FOUND will be returned. This
// allows for deletion to be implemented avoiding time-of-check to
// time-of-use races
// (https://en.wikipedia.org/wiki/Time-of-check_to_time-of-use):
//
//    g_autoptr(GError) local_error = NULL;
//    if (!g_file_delete (my_file, my_cancellable, &local_error) &&
//        !g_error_matches (local_error, G_IO_ERROR, G_IO_ERROR_NOT_FOUND))
//      {
//        // deletion failed for some reason other than the file not existing:
//        // so report the error
//        g_warning ("Failed to delete s: s",
//                   g_file_peek_path (my_file), local_error->message);
//      }
//
// If @cancellable is not nil, then the operation can be cancelled by
// triggering the cancellable object from another thread. If the operation
// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
func (f file) Delete(cancellable Cancellable) error {
	var _arg0 *C.GFile
	var _arg1 *C.GCancellable

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	var _cerr *C.GError

	C.g_file_delete(_arg0, _arg1, _cerr)

	var _goerr error

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

// DeleteAsync: asynchronously delete a file. If the @file is a directory,
// it will only be deleted if it is empty. This has the same semantics as
// g_unlink().
func (f file) DeleteAsync(ioPriority int, cancellable Cancellable, callback AsyncReadyCallback) {
	var _arg0 *C.GFile
	var _arg1 C.int
	var _arg2 *C.GCancellable
	var _arg3 C.GAsyncReadyCallback
	var _arg4 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = C.int(ioPriority)
	_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg3 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg4 = C.gpointer(box.Assign(callback))

	C.g_file_delete_async(_arg0, _arg1, _arg2, _arg3, _arg4)
}

// DeleteFinish finishes deleting a file started with g_file_delete_async().
func (f file) DeleteFinish(result AsyncResult) error {
	var _arg0 *C.GFile
	var _arg1 *C.GAsyncResult

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(result.Native()))

	var _cerr *C.GError

	C.g_file_delete_finish(_arg0, _arg1, _cerr)

	var _goerr error

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

// EjectMountable starts an asynchronous eject on a mountable. When this
// operation has completed, @callback will be called with @user_user data,
// and the operation can be finalized with g_file_eject_mountable_finish().
//
// If @cancellable is not nil, then the operation can be cancelled by
// triggering the cancellable object from another thread. If the operation
// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
func (f file) EjectMountable(flags MountUnmountFlags, cancellable Cancellable, callback AsyncReadyCallback) {
	var _arg0 *C.GFile
	var _arg1 C.GMountUnmountFlags
	var _arg2 *C.GCancellable
	var _arg3 C.GAsyncReadyCallback
	var _arg4 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (C.GMountUnmountFlags)(flags)
	_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg3 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg4 = C.gpointer(box.Assign(callback))

	C.g_file_eject_mountable(_arg0, _arg1, _arg2, _arg3, _arg4)
}

// EjectMountableFinish finishes an asynchronous eject operation started by
// g_file_eject_mountable().
func (f file) EjectMountableFinish(result AsyncResult) error {
	var _arg0 *C.GFile
	var _arg1 *C.GAsyncResult

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(result.Native()))

	var _cerr *C.GError

	C.g_file_eject_mountable_finish(_arg0, _arg1, _cerr)

	var _goerr error

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

// EjectMountableWithOperation starts an asynchronous eject on a mountable.
// When this operation has completed, @callback will be called with
// @user_user data, and the operation can be finalized with
// g_file_eject_mountable_with_operation_finish().
//
// If @cancellable is not nil, then the operation can be cancelled by
// triggering the cancellable object from another thread. If the operation
// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
func (f file) EjectMountableWithOperation(flags MountUnmountFlags, mountOperation MountOperation, cancellable Cancellable, callback AsyncReadyCallback) {
	var _arg0 *C.GFile
	var _arg1 C.GMountUnmountFlags
	var _arg2 *C.GMountOperation
	var _arg3 *C.GCancellable
	var _arg4 C.GAsyncReadyCallback
	var _arg5 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (C.GMountUnmountFlags)(flags)
	_arg2 = (*C.GMountOperation)(unsafe.Pointer(mountOperation.Native()))
	_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg4 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg5 = C.gpointer(box.Assign(callback))

	C.g_file_eject_mountable_with_operation(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
}

// EjectMountableWithOperationFinish finishes an asynchronous eject
// operation started by g_file_eject_mountable_with_operation().
func (f file) EjectMountableWithOperationFinish(result AsyncResult) error {
	var _arg0 *C.GFile
	var _arg1 *C.GAsyncResult

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(result.Native()))

	var _cerr *C.GError

	C.g_file_eject_mountable_with_operation_finish(_arg0, _arg1, _cerr)

	var _goerr error

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

// EnumerateChildrenAsync: asynchronously gets the requested information
// about the files in a directory. The result is a Enumerator object that
// will give out Info objects for all the files in the directory.
//
// For more details, see g_file_enumerate_children() which is the
// synchronous version of this call.
//
// When the operation is finished, @callback will be called. You can then
// call g_file_enumerate_children_finish() to get the result of the
// operation.
func (f file) EnumerateChildrenAsync(attributes string, flags FileQueryInfoFlags, ioPriority int, cancellable Cancellable, callback AsyncReadyCallback) {
	var _arg0 *C.GFile
	var _arg1 *C.char
	var _arg2 C.GFileQueryInfoFlags
	var _arg3 C.int
	var _arg4 *C.GCancellable
	var _arg5 C.GAsyncReadyCallback
	var _arg6 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.char)(C.CString(attributes))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (C.GFileQueryInfoFlags)(flags)
	_arg3 = C.int(ioPriority)
	_arg4 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg5 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg6 = C.gpointer(box.Assign(callback))

	C.g_file_enumerate_children_async(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6)
}

// Equal checks if the two given #GFiles refer to the same file.
//
// Note that two #GFiles that differ can still refer to the same file on the
// filesystem due to various forms of filename aliasing.
//
// This call does no blocking I/O.
func (f file) Equal(file2 File) bool {
	var _arg0 *C.GFile
	var _arg1 *C.GFile

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GFile)(unsafe.Pointer(file2.Native()))

	var _cret C.gboolean

	_cret = C.g_file_equal(_arg0, _arg1)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// FindEnclosingMountAsync: asynchronously gets the mount for the file.
//
// For more details, see g_file_find_enclosing_mount() which is the
// synchronous version of this call.
//
// When the operation is finished, @callback will be called. You can then
// call g_file_find_enclosing_mount_finish() to get the result of the
// operation.
func (f file) FindEnclosingMountAsync(ioPriority int, cancellable Cancellable, callback AsyncReadyCallback) {
	var _arg0 *C.GFile
	var _arg1 C.int
	var _arg2 *C.GCancellable
	var _arg3 C.GAsyncReadyCallback
	var _arg4 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = C.int(ioPriority)
	_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg3 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg4 = C.gpointer(box.Assign(callback))

	C.g_file_find_enclosing_mount_async(_arg0, _arg1, _arg2, _arg3, _arg4)
}

// Basename gets the base name (the last component of the path) for a given
// #GFile.
//
// If called for the top level of a system (such as the filesystem root or a
// uri like sftp://host/) it will return a single directory separator (and
// on Windows, possibly a drive letter).
//
// The base name is a byte string (not UTF-8). It has no defined encoding or
// rules other than it may not contain zero bytes. If you want to use
// filenames in a user interface you should use the display name that you
// can get by requesting the G_FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME
// attribute with g_file_query_info().
//
// This call does no blocking I/O.
func (f file) Basename() *string {
	var _arg0 *C.GFile

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))

	var _cret *C.char

	_cret = C.g_file_get_basename(_arg0)

	var _filename *string

	_filename = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _filename
}

// ParseName gets the parse name of the @file. A parse name is a UTF-8
// string that describes the file such that one can get the #GFile back
// using g_file_parse_name().
//
// This is generally used to show the #GFile as a nice full-pathname kind of
// string in a user interface, like in a location entry.
//
// For local files with names that can safely be converted to UTF-8 the
// pathname is used, otherwise the IRI is used (a form of URI that allows
// UTF-8 characters unescaped).
//
// This call does no blocking I/O.
func (f file) ParseName() string {
	var _arg0 *C.GFile

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))

	var _cret *C.char

	_cret = C.g_file_get_parse_name(_arg0)

	var _utf8 string

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Path gets the local pathname for #GFile, if one exists. If non-nil, this
// is guaranteed to be an absolute, canonical path. It might contain
// symlinks.
//
// This call does no blocking I/O.
func (f file) Path() *string {
	var _arg0 *C.GFile

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))

	var _cret *C.char

	_cret = C.g_file_get_path(_arg0)

	var _filename *string

	_filename = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _filename
}

// RelativePath gets the path for @descendant relative to @parent.
//
// This call does no blocking I/O.
func (p file) RelativePath(descendant File) *string {
	var _arg0 *C.GFile
	var _arg1 *C.GFile

	_arg0 = (*C.GFile)(unsafe.Pointer(p.Native()))
	_arg1 = (*C.GFile)(unsafe.Pointer(descendant.Native()))

	var _cret *C.char

	_cret = C.g_file_get_relative_path(_arg0, _arg1)

	var _filename *string

	_filename = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _filename
}

// URI gets the URI for the @file.
//
// This call does no blocking I/O.
func (f file) URI() string {
	var _arg0 *C.GFile

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))

	var _cret *C.char

	_cret = C.g_file_get_uri(_arg0)

	var _utf8 string

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// URIScheme gets the URI scheme for a #GFile. RFC 3986 decodes the scheme
// as:
//
//    URI = scheme ":" hier-part [ "?" query ] [ "#" fragment ]
//
// Common schemes include "file", "http", "ftp", etc.
//
// The scheme can be different from the one used to construct the #GFile, in
// that it might be replaced with one that is logically equivalent to the
// #GFile.
//
// This call does no blocking I/O.
func (f file) URIScheme() string {
	var _arg0 *C.GFile

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))

	var _cret *C.char

	_cret = C.g_file_get_uri_scheme(_arg0)

	var _utf8 string

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// HasParent checks if @file has a parent, and optionally, if it is @parent.
//
// If @parent is nil then this function returns true if @file has any parent
// at all. If @parent is non-nil then true is only returned if @file is an
// immediate child of @parent.
func (f file) HasParent(parent File) bool {
	var _arg0 *C.GFile
	var _arg1 *C.GFile

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GFile)(unsafe.Pointer(parent.Native()))

	var _cret C.gboolean

	_cret = C.g_file_has_parent(_arg0, _arg1)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// HasPrefix checks whether @file has the prefix specified by @prefix.
//
// In other words, if the names of initial elements of @file's pathname
// match @prefix. Only full pathname elements are matched, so a path like
// /foo is not considered a prefix of /foobar, only of /foo/bar.
//
// A #GFile is not a prefix of itself. If you want to check for equality,
// use g_file_equal().
//
// This call does no I/O, as it works purely on names. As such it can
// sometimes return false even if @file is inside a @prefix (from a
// filesystem point of view), because the prefix of @file is an alias of
// @prefix.
func (f file) HasPrefix(prefix File) bool {
	var _arg0 *C.GFile
	var _arg1 *C.GFile

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GFile)(unsafe.Pointer(prefix.Native()))

	var _cret C.gboolean

	_cret = C.g_file_has_prefix(_arg0, _arg1)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// HasURIScheme checks to see if a #GFile has a given URI scheme.
//
// This call does no blocking I/O.
func (f file) HasURIScheme(uriScheme string) bool {
	var _arg0 *C.GFile
	var _arg1 *C.char

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.char)(C.CString(uriScheme))
	defer C.free(unsafe.Pointer(_arg1))

	var _cret C.gboolean

	_cret = C.g_file_has_uri_scheme(_arg0, _arg1)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// Hash creates a hash value for a #GFile.
//
// This call does no blocking I/O.
func (f file) Hash() uint {
	var _arg0 C.gpointer

	_arg0 = (C.gpointer)(unsafe.Pointer(f.Native()))

	var _cret C.guint

	_cret = C.g_file_hash(_arg0)

	var _guint uint

	_guint = (uint)(_cret)

	return _guint
}

// IsNative checks to see if a file is native to the platform.
//
// A native file is one expressed in the platform-native filename format,
// e.g. "C:\Windows" or "/usr/bin/". This does not mean the file is local,
// as it might be on a locally mounted remote filesystem.
//
// On some systems non-native files may be available using the native
// filesystem via a userspace filesystem (FUSE), in these cases this call
// will return false, but g_file_get_path() will still return a native path.
//
// This call does no blocking I/O.
func (f file) IsNative() bool {
	var _arg0 *C.GFile

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))

	var _cret C.gboolean

	_cret = C.g_file_is_native(_arg0)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// LoadBytesAsync: asynchronously loads the contents of @file as #GBytes.
//
// If @file is a resource:// based URI, the resulting bytes will reference
// the embedded resource instead of a copy. Otherwise, this is equivalent to
// calling g_file_load_contents_async() and g_bytes_new_take().
//
// @callback should call g_file_load_bytes_finish() to get the result of
// this asynchronous operation.
//
// See g_file_load_bytes() for more information.
func (f file) LoadBytesAsync(cancellable Cancellable, callback AsyncReadyCallback) {
	var _arg0 *C.GFile
	var _arg1 *C.GCancellable
	var _arg2 C.GAsyncReadyCallback
	var _arg3 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg2 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg3 = C.gpointer(box.Assign(callback))

	C.g_file_load_bytes_async(_arg0, _arg1, _arg2, _arg3)
}

// LoadContents loads the content of the file into memory. The data is
// always zero-terminated, but this is not included in the resultant
// @length. The returned @contents should be freed with g_free() when no
// longer needed.
//
// If @cancellable is not nil, then the operation can be cancelled by
// triggering the cancellable object from another thread. If the operation
// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
func (f file) LoadContents(cancellable Cancellable) ([]byte, string, error) {
	var _arg0 *C.GFile
	var _arg1 *C.GCancellable

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	var _arg2 *C.char
	var _arg3 *C.gsize
	var _arg4 *C.char
	var _cerr *C.GError

	C.g_file_load_contents(_arg0, _arg1, &_arg2, &_arg3, &_arg4, _cerr)

	var _contents []byte
	var _etagOut string
	var _goerr error

	ptr.SetSlice(unsafe.Pointer(&_contents), unsafe.Pointer(_arg2), int(_arg3))
	runtime.SetFinalizer(&_contents, func(v *[]byte) {
		C.free(ptr.Slice(unsafe.Pointer(v)))
	})
	_etagOut = C.GoString(_arg4)
	defer C.free(unsafe.Pointer(_arg4))
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _contents, _etagOut, _goerr
}

// LoadContentsAsync starts an asynchronous load of the @file's contents.
//
// For more details, see g_file_load_contents() which is the synchronous
// version of this call.
//
// When the load operation has completed, @callback will be called with
// @user data. To finish the operation, call g_file_load_contents_finish()
// with the Result returned by the @callback.
//
// If @cancellable is not nil, then the operation can be cancelled by
// triggering the cancellable object from another thread. If the operation
// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
func (f file) LoadContentsAsync(cancellable Cancellable, callback AsyncReadyCallback) {
	var _arg0 *C.GFile
	var _arg1 *C.GCancellable
	var _arg2 C.GAsyncReadyCallback
	var _arg3 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg2 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg3 = C.gpointer(box.Assign(callback))

	C.g_file_load_contents_async(_arg0, _arg1, _arg2, _arg3)
}

// LoadContentsFinish finishes an asynchronous load of the @file's contents.
// The contents are placed in @contents, and @length is set to the size of
// the @contents string. The @contents should be freed with g_free() when no
// longer needed. If @etag_out is present, it will be set to the new entity
// tag for the @file.
func (f file) LoadContentsFinish(res AsyncResult) ([]byte, string, error) {
	var _arg0 *C.GFile
	var _arg1 *C.GAsyncResult

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(res.Native()))

	var _arg2 *C.char
	var _arg3 *C.gsize
	var _arg4 *C.char
	var _cerr *C.GError

	C.g_file_load_contents_finish(_arg0, _arg1, &_arg2, &_arg3, &_arg4, _cerr)

	var _contents []byte
	var _etagOut string
	var _goerr error

	ptr.SetSlice(unsafe.Pointer(&_contents), unsafe.Pointer(_arg2), int(_arg3))
	runtime.SetFinalizer(&_contents, func(v *[]byte) {
		C.free(ptr.Slice(unsafe.Pointer(v)))
	})
	_etagOut = C.GoString(_arg4)
	defer C.free(unsafe.Pointer(_arg4))
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _contents, _etagOut, _goerr
}

// LoadPartialContentsAsync reads the partial contents of a file. A
// ReadMoreCallback should be used to stop reading from the file when
// appropriate, else this function will behave exactly as
// g_file_load_contents_async(). This operation can be finished by
// g_file_load_partial_contents_finish().
//
// Users of this function should be aware that @user_data is passed to both
// the @read_more_callback and the @callback.
//
// If @cancellable is not nil, then the operation can be cancelled by
// triggering the cancellable object from another thread. If the operation
// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
func (f file) LoadPartialContentsAsync(cancellable Cancellable, readMoreCallback FileReadMoreCallback, callback AsyncReadyCallback) {
	var _arg0 *C.GFile
	var _arg1 *C.GCancellable
	var _arg2 C.GFileReadMoreCallback
	var _arg4 C.gpointer
	var _arg3 C.GAsyncReadyCallback
	var _arg4 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg2 = (*[0]byte)(C.gotk4_FileReadMoreCallback)
	_arg4 = C.gpointer(box.Assign(readMoreCallback))
	_arg3 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg4 = C.gpointer(box.Assign(callback))

	C.g_file_load_partial_contents_async(_arg0, _arg1, _arg2, _arg3, _arg4)
}

// LoadPartialContentsFinish finishes an asynchronous partial load operation
// that was started with g_file_load_partial_contents_async(). The data is
// always zero-terminated, but this is not included in the resultant
// @length. The returned @contents should be freed with g_free() when no
// longer needed.
func (f file) LoadPartialContentsFinish(res AsyncResult) ([]byte, string, error) {
	var _arg0 *C.GFile
	var _arg1 *C.GAsyncResult

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(res.Native()))

	var _arg2 *C.char
	var _arg3 *C.gsize
	var _arg4 *C.char
	var _cerr *C.GError

	C.g_file_load_partial_contents_finish(_arg0, _arg1, &_arg2, &_arg3, &_arg4, _cerr)

	var _contents []byte
	var _etagOut string
	var _goerr error

	ptr.SetSlice(unsafe.Pointer(&_contents), unsafe.Pointer(_arg2), int(_arg3))
	runtime.SetFinalizer(&_contents, func(v *[]byte) {
		C.free(ptr.Slice(unsafe.Pointer(v)))
	})
	_etagOut = C.GoString(_arg4)
	defer C.free(unsafe.Pointer(_arg4))
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _contents, _etagOut, _goerr
}

// MakeDirectory creates a directory. Note that this will only create a
// child directory of the immediate parent directory of the path or URI
// given by the #GFile. To recursively create directories, see
// g_file_make_directory_with_parents(). This function will fail if the
// parent directory does not exist, setting @error to G_IO_ERROR_NOT_FOUND.
// If the file system doesn't support creating directories, this function
// will fail, setting @error to G_IO_ERROR_NOT_SUPPORTED.
//
// For a local #GFile the newly created directory will have the default
// (current) ownership and permissions of the current process.
//
// If @cancellable is not nil, then the operation can be cancelled by
// triggering the cancellable object from another thread. If the operation
// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
func (f file) MakeDirectory(cancellable Cancellable) error {
	var _arg0 *C.GFile
	var _arg1 *C.GCancellable

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	var _cerr *C.GError

	C.g_file_make_directory(_arg0, _arg1, _cerr)

	var _goerr error

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

// MakeDirectoryAsync: asynchronously creates a directory.
func (f file) MakeDirectoryAsync(ioPriority int, cancellable Cancellable, callback AsyncReadyCallback) {
	var _arg0 *C.GFile
	var _arg1 C.int
	var _arg2 *C.GCancellable
	var _arg3 C.GAsyncReadyCallback
	var _arg4 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = C.int(ioPriority)
	_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg3 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg4 = C.gpointer(box.Assign(callback))

	C.g_file_make_directory_async(_arg0, _arg1, _arg2, _arg3, _arg4)
}

// MakeDirectoryFinish finishes an asynchronous directory creation, started
// with g_file_make_directory_async().
func (f file) MakeDirectoryFinish(result AsyncResult) error {
	var _arg0 *C.GFile
	var _arg1 *C.GAsyncResult

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(result.Native()))

	var _cerr *C.GError

	C.g_file_make_directory_finish(_arg0, _arg1, _cerr)

	var _goerr error

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

// MakeDirectoryWithParents creates a directory and any parent directories
// that may not exist similar to 'mkdir -p'. If the file system does not
// support creating directories, this function will fail, setting @error to
// G_IO_ERROR_NOT_SUPPORTED. If the directory itself already exists, this
// function will fail setting @error to G_IO_ERROR_EXISTS, unlike the
// similar g_mkdir_with_parents().
//
// For a local #GFile the newly created directories will have the default
// (current) ownership and permissions of the current process.
//
// If @cancellable is not nil, then the operation can be cancelled by
// triggering the cancellable object from another thread. If the operation
// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
func (f file) MakeDirectoryWithParents(cancellable Cancellable) error {
	var _arg0 *C.GFile
	var _arg1 *C.GCancellable

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	var _cerr *C.GError

	C.g_file_make_directory_with_parents(_arg0, _arg1, _cerr)

	var _goerr error

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

// MakeSymbolicLink creates a symbolic link named @file which contains the
// string @symlink_value.
//
// If @cancellable is not nil, then the operation can be cancelled by
// triggering the cancellable object from another thread. If the operation
// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
func (f file) MakeSymbolicLink(symlinkValue *string, cancellable Cancellable) error {
	var _arg0 *C.GFile
	var _arg1 *C.char
	var _arg2 *C.GCancellable

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.char)(C.CString(symlinkValue))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	var _cerr *C.GError

	C.g_file_make_symbolic_link(_arg0, _arg1, _arg2, _cerr)

	var _goerr error

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

// MeasureDiskUsage: recursively measures the disk usage of @file.
//
// This is essentially an analog of the 'du' command, but it also reports
// the number of directories and non-directory files encountered (including
// things like symbolic links).
//
// By default, errors are only reported against the toplevel file itself.
// Errors found while recursing are silently ignored, unless
// G_FILE_MEASURE_REPORT_ANY_ERROR is given in @flags.
//
// The returned size, @disk_usage, is in bytes and should be formatted with
// g_format_size() in order to get something reasonable for showing in a
// user interface.
//
// @progress_callback and @progress_data can be given to request periodic
// progress updates while scanning. See the documentation for
// MeasureProgressCallback for information about when and how the callback
// will be invoked.
func (f file) MeasureDiskUsage(flags FileMeasureFlags, cancellable Cancellable, progressCallback FileMeasureProgressCallback) (diskUsage uint64, numDirs uint64, numFiles uint64, goerr error) {
	var _arg0 *C.GFile
	var _arg1 C.GFileMeasureFlags
	var _arg2 *C.GCancellable
	var _arg3 C.GFileMeasureProgressCallback
	var _arg4 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (C.GFileMeasureFlags)(flags)
	_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg3 = (*[0]byte)(C.gotk4_FileMeasureProgressCallback)
	_arg4 = C.gpointer(box.Assign(progressCallback))

	var _arg5 C.guint64
	var _arg6 C.guint64
	var _arg7 C.guint64
	var _cerr *C.GError

	C.g_file_measure_disk_usage(_arg0, _arg1, _arg2, _arg3, _arg4, &_arg5, &_arg6, &_arg7, _cerr)

	var _diskUsage uint64
	var _numDirs uint64
	var _numFiles uint64
	var _goerr error

	_diskUsage = (uint64)(_arg5)
	_numDirs = (uint64)(_arg6)
	_numFiles = (uint64)(_arg7)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _diskUsage, _numDirs, _numFiles, _goerr
}

// MeasureDiskUsageAsync: recursively measures the disk usage of @file.
//
// This is the asynchronous version of g_file_measure_disk_usage(). See
// there for more information.
func (f file) MeasureDiskUsageAsync(flags FileMeasureFlags, ioPriority int, cancellable Cancellable, progressCallback FileMeasureProgressCallback, callback AsyncReadyCallback) {
	var _arg0 *C.GFile
	var _arg1 C.GFileMeasureFlags
	var _arg2 C.gint
	var _arg3 *C.GCancellable
	var _arg4 C.GFileMeasureProgressCallback
	var _arg5 C.gpointer
	var _arg6 C.GAsyncReadyCallback
	var _arg7 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (C.GFileMeasureFlags)(flags)
	_arg2 = C.gint(ioPriority)
	_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg4 = (*[0]byte)(C.gotk4_FileMeasureProgressCallback)
	_arg5 = C.gpointer(box.Assign(progressCallback))
	_arg6 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg7 = C.gpointer(box.Assign(callback))

	C.g_file_measure_disk_usage_async(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7)
}

// MeasureDiskUsageFinish collects the results from an earlier call to
// g_file_measure_disk_usage_async(). See g_file_measure_disk_usage() for
// more information.
func (f file) MeasureDiskUsageFinish(result AsyncResult) (diskUsage uint64, numDirs uint64, numFiles uint64, goerr error) {
	var _arg0 *C.GFile
	var _arg1 *C.GAsyncResult

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(result.Native()))

	var _arg2 C.guint64
	var _arg3 C.guint64
	var _arg4 C.guint64
	var _cerr *C.GError

	C.g_file_measure_disk_usage_finish(_arg0, _arg1, &_arg2, &_arg3, &_arg4, _cerr)

	var _diskUsage uint64
	var _numDirs uint64
	var _numFiles uint64
	var _goerr error

	_diskUsage = (uint64)(_arg2)
	_numDirs = (uint64)(_arg3)
	_numFiles = (uint64)(_arg4)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _diskUsage, _numDirs, _numFiles, _goerr
}

// MountEnclosingVolume starts a @mount_operation, mounting the volume that
// contains the file @location.
//
// When this operation has completed, @callback will be called with
// @user_user data, and the operation can be finalized with
// g_file_mount_enclosing_volume_finish().
//
// If @cancellable is not nil, then the operation can be cancelled by
// triggering the cancellable object from another thread. If the operation
// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
func (l file) MountEnclosingVolume(flags MountMountFlags, mountOperation MountOperation, cancellable Cancellable, callback AsyncReadyCallback) {
	var _arg0 *C.GFile
	var _arg1 C.GMountMountFlags
	var _arg2 *C.GMountOperation
	var _arg3 *C.GCancellable
	var _arg4 C.GAsyncReadyCallback
	var _arg5 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(l.Native()))
	_arg1 = (C.GMountMountFlags)(flags)
	_arg2 = (*C.GMountOperation)(unsafe.Pointer(mountOperation.Native()))
	_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg4 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg5 = C.gpointer(box.Assign(callback))

	C.g_file_mount_enclosing_volume(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
}

// MountEnclosingVolumeFinish finishes a mount operation started by
// g_file_mount_enclosing_volume().
func (l file) MountEnclosingVolumeFinish(result AsyncResult) error {
	var _arg0 *C.GFile
	var _arg1 *C.GAsyncResult

	_arg0 = (*C.GFile)(unsafe.Pointer(l.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(result.Native()))

	var _cerr *C.GError

	C.g_file_mount_enclosing_volume_finish(_arg0, _arg1, _cerr)

	var _goerr error

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

// MountMountable mounts a file of type G_FILE_TYPE_MOUNTABLE. Using
// @mount_operation, you can request callbacks when, for instance, passwords
// are needed during authentication.
//
// If @cancellable is not nil, then the operation can be cancelled by
// triggering the cancellable object from another thread. If the operation
// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
//
// When the operation is finished, @callback will be called. You can then
// call g_file_mount_mountable_finish() to get the result of the operation.
func (f file) MountMountable(flags MountMountFlags, mountOperation MountOperation, cancellable Cancellable, callback AsyncReadyCallback) {
	var _arg0 *C.GFile
	var _arg1 C.GMountMountFlags
	var _arg2 *C.GMountOperation
	var _arg3 *C.GCancellable
	var _arg4 C.GAsyncReadyCallback
	var _arg5 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (C.GMountMountFlags)(flags)
	_arg2 = (*C.GMountOperation)(unsafe.Pointer(mountOperation.Native()))
	_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg4 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg5 = C.gpointer(box.Assign(callback))

	C.g_file_mount_mountable(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
}

// Move tries to move the file or directory @source to the location
// specified by @destination. If native move operations are supported then
// this is used, otherwise a copy + delete fallback is used. The native
// implementation may support moving directories (for instance on moves
// inside the same filesystem), but the fallback code does not.
//
// If the flag FILE_COPY_OVERWRITE is specified an already existing
// @destination file is overwritten.
//
// If @cancellable is not nil, then the operation can be cancelled by
// triggering the cancellable object from another thread. If the operation
// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
//
// If @progress_callback is not nil, then the operation can be monitored by
// setting this to a ProgressCallback function. @progress_callback_data will
// be passed to this function. It is guaranteed that this callback will be
// called after all data has been transferred with the total number of bytes
// copied during the operation.
//
// If the @source file does not exist, then the G_IO_ERROR_NOT_FOUND error
// is returned, independent on the status of the @destination.
//
// If FILE_COPY_OVERWRITE is not specified and the target exists, then the
// error G_IO_ERROR_EXISTS is returned.
//
// If trying to overwrite a file over a directory, the
// G_IO_ERROR_IS_DIRECTORY error is returned. If trying to overwrite a
// directory with a directory the G_IO_ERROR_WOULD_MERGE error is returned.
//
// If the source is a directory and the target does not exist, or
// FILE_COPY_OVERWRITE is specified and the target is a file, then the
// G_IO_ERROR_WOULD_RECURSE error may be returned (if the native move
// operation isn't available).
func (s file) Move(destination File, flags FileCopyFlags, cancellable Cancellable, progressCallback FileProgressCallback) error {
	var _arg0 *C.GFile
	var _arg1 *C.GFile
	var _arg2 C.GFileCopyFlags
	var _arg3 *C.GCancellable
	var _arg4 C.GFileProgressCallback
	var _arg5 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GFile)(unsafe.Pointer(destination.Native()))
	_arg2 = (C.GFileCopyFlags)(flags)
	_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg4 = (*[0]byte)(C.gotk4_FileProgressCallback)
	_arg5 = C.gpointer(box.Assign(progressCallback))

	var _cerr *C.GError

	C.g_file_move(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _cerr)

	var _goerr error

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

// OpenReadwriteAsync: asynchronously opens @file for reading and writing.
//
// For more details, see g_file_open_readwrite() which is the synchronous
// version of this call.
//
// When the operation is finished, @callback will be called. You can then
// call g_file_open_readwrite_finish() to get the result of the operation.
func (f file) OpenReadwriteAsync(ioPriority int, cancellable Cancellable, callback AsyncReadyCallback) {
	var _arg0 *C.GFile
	var _arg1 C.int
	var _arg2 *C.GCancellable
	var _arg3 C.GAsyncReadyCallback
	var _arg4 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = C.int(ioPriority)
	_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg3 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg4 = C.gpointer(box.Assign(callback))

	C.g_file_open_readwrite_async(_arg0, _arg1, _arg2, _arg3, _arg4)
}

// PeekPath: exactly like g_file_get_path(), but caches the result via
// g_object_set_qdata_full(). This is useful for example in C applications
// which mix `g_file_*` APIs with native ones. It also avoids an extra
// duplicated string when possible, so will be generally more efficient.
//
// This call does no blocking I/O.
func (f file) PeekPath() *string {
	var _arg0 *C.GFile

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))

	var _cret *C.char

	_cret = C.g_file_peek_path(_arg0)

	var _filename *string

	_filename = C.GoString(_cret)

	return _filename
}

// PollMountable polls a file of type FILE_TYPE_MOUNTABLE.
//
// If @cancellable is not nil, then the operation can be cancelled by
// triggering the cancellable object from another thread. If the operation
// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
//
// When the operation is finished, @callback will be called. You can then
// call g_file_mount_mountable_finish() to get the result of the operation.
func (f file) PollMountable(cancellable Cancellable, callback AsyncReadyCallback) {
	var _arg0 *C.GFile
	var _arg1 *C.GCancellable
	var _arg2 C.GAsyncReadyCallback
	var _arg3 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg2 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg3 = C.gpointer(box.Assign(callback))

	C.g_file_poll_mountable(_arg0, _arg1, _arg2, _arg3)
}

// PollMountableFinish finishes a poll operation. See
// g_file_poll_mountable() for details.
//
// Finish an asynchronous poll operation that was polled with
// g_file_poll_mountable().
func (f file) PollMountableFinish(result AsyncResult) error {
	var _arg0 *C.GFile
	var _arg1 *C.GAsyncResult

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(result.Native()))

	var _cerr *C.GError

	C.g_file_poll_mountable_finish(_arg0, _arg1, _cerr)

	var _goerr error

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

// QueryDefaultHandlerAsync: async version of
// g_file_query_default_handler().
func (f file) QueryDefaultHandlerAsync(ioPriority int, cancellable Cancellable, callback AsyncReadyCallback) {
	var _arg0 *C.GFile
	var _arg1 C.int
	var _arg2 *C.GCancellable
	var _arg3 C.GAsyncReadyCallback
	var _arg4 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = C.int(ioPriority)
	_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg3 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg4 = C.gpointer(box.Assign(callback))

	C.g_file_query_default_handler_async(_arg0, _arg1, _arg2, _arg3, _arg4)
}

// QueryExists: utility function to check if a particular file exists. This
// is implemented using g_file_query_info() and as such does blocking I/O.
//
// Note that in many cases it is racy to first check for file existence
// (https://en.wikipedia.org/wiki/Time_of_check_to_time_of_use) and then
// execute something based on the outcome of that, because the file might
// have been created or removed in between the operations. The general
// approach to handling that is to not check, but just do the operation and
// handle the errors as they come.
//
// As an example of race-free checking, take the case of reading a file, and
// if it doesn't exist, creating it. There are two racy versions: read it,
// and on error create it; and: check if it exists, if not create it. These
// can both result in two processes creating the file (with perhaps a
// partially written file as the result). The correct approach is to always
// try to create the file with g_file_create() which will either atomically
// create the file or fail with a G_IO_ERROR_EXISTS error.
//
// However, in many cases an existence check is useful in a user interface,
// for instance to make a menu item sensitive/insensitive, so that you don't
// have to fool users that something is possible and then just show an error
// dialog. If you do this, you should make sure to also handle the errors
// that can happen due to races when you execute the operation.
func (f file) QueryExists(cancellable Cancellable) bool {
	var _arg0 *C.GFile
	var _arg1 *C.GCancellable

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	var _cret C.gboolean

	_cret = C.g_file_query_exists(_arg0, _arg1)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// QueryFilesystemInfoAsync: asynchronously gets the requested information
// about the filesystem that the specified @file is on. The result is a Info
// object that contains key-value attributes (such as type or size for the
// file).
//
// For more details, see g_file_query_filesystem_info() which is the
// synchronous version of this call.
//
// When the operation is finished, @callback will be called. You can then
// call g_file_query_info_finish() to get the result of the operation.
func (f file) QueryFilesystemInfoAsync(attributes string, ioPriority int, cancellable Cancellable, callback AsyncReadyCallback) {
	var _arg0 *C.GFile
	var _arg1 *C.char
	var _arg2 C.int
	var _arg3 *C.GCancellable
	var _arg4 C.GAsyncReadyCallback
	var _arg5 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.char)(C.CString(attributes))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.int(ioPriority)
	_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg4 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg5 = C.gpointer(box.Assign(callback))

	C.g_file_query_filesystem_info_async(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
}

// QueryInfoAsync: asynchronously gets the requested information about
// specified @file. The result is a Info object that contains key-value
// attributes (such as type or size for the file).
//
// For more details, see g_file_query_info() which is the synchronous
// version of this call.
//
// When the operation is finished, @callback will be called. You can then
// call g_file_query_info_finish() to get the result of the operation.
func (f file) QueryInfoAsync(attributes string, flags FileQueryInfoFlags, ioPriority int, cancellable Cancellable, callback AsyncReadyCallback) {
	var _arg0 *C.GFile
	var _arg1 *C.char
	var _arg2 C.GFileQueryInfoFlags
	var _arg3 C.int
	var _arg4 *C.GCancellable
	var _arg5 C.GAsyncReadyCallback
	var _arg6 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.char)(C.CString(attributes))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (C.GFileQueryInfoFlags)(flags)
	_arg3 = C.int(ioPriority)
	_arg4 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg5 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg6 = C.gpointer(box.Assign(callback))

	C.g_file_query_info_async(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6)
}

// ReadAsync: asynchronously opens @file for reading.
//
// For more details, see g_file_read() which is the synchronous version of
// this call.
//
// When the operation is finished, @callback will be called. You can then
// call g_file_read_finish() to get the result of the operation.
func (f file) ReadAsync(ioPriority int, cancellable Cancellable, callback AsyncReadyCallback) {
	var _arg0 *C.GFile
	var _arg1 C.int
	var _arg2 *C.GCancellable
	var _arg3 C.GAsyncReadyCallback
	var _arg4 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = C.int(ioPriority)
	_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg3 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg4 = C.gpointer(box.Assign(callback))

	C.g_file_read_async(_arg0, _arg1, _arg2, _arg3, _arg4)
}

// ReplaceAsync: asynchronously overwrites the file, replacing the contents,
// possibly creating a backup copy of the file first.
//
// For more details, see g_file_replace() which is the synchronous version
// of this call.
//
// When the operation is finished, @callback will be called. You can then
// call g_file_replace_finish() to get the result of the operation.
func (f file) ReplaceAsync(etag string, makeBackup bool, flags FileCreateFlags, ioPriority int, cancellable Cancellable, callback AsyncReadyCallback) {
	var _arg0 *C.GFile
	var _arg1 *C.char
	var _arg2 C.gboolean
	var _arg3 C.GFileCreateFlags
	var _arg4 C.int
	var _arg5 *C.GCancellable
	var _arg6 C.GAsyncReadyCallback
	var _arg7 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.char)(C.CString(etag))
	defer C.free(unsafe.Pointer(_arg1))
	if makeBackup {
		_arg2 = C.gboolean(1)
	}
	_arg3 = (C.GFileCreateFlags)(flags)
	_arg4 = C.int(ioPriority)
	_arg5 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg6 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg7 = C.gpointer(box.Assign(callback))

	C.g_file_replace_async(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7)
}

// ReplaceContents replaces the contents of @file with @contents of @length
// bytes.
//
// If @etag is specified (not nil), any existing file must have that etag,
// or the error G_IO_ERROR_WRONG_ETAG will be returned.
//
// If @make_backup is true, this function will attempt to make a backup of
// @file. Internally, it uses g_file_replace(), so will try to replace the
// file contents in the safest way possible. For example, atomic renames are
// used when replacing local files’ contents.
//
// If @cancellable is not nil, then the operation can be cancelled by
// triggering the cancellable object from another thread. If the operation
// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
//
// The returned @new_etag can be used to verify that the file hasn't changed
// the next time it is saved over.
func (f file) ReplaceContents(contents []byte, etag string, makeBackup bool, flags FileCreateFlags, cancellable Cancellable) (string, error) {
	var _arg0 *C.GFile
	var _arg1 *C.char
	var _arg2 C.gsize
	var _arg3 *C.char
	var _arg4 C.gboolean
	var _arg5 C.GFileCreateFlags
	var _arg7 *C.GCancellable

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg2 = C.gsize(len(contents))
	_arg1 = (*C.char)(unsafe.Pointer(&contents[0]))
	_arg3 = (*C.char)(C.CString(etag))
	defer C.free(unsafe.Pointer(_arg3))
	if makeBackup {
		_arg4 = C.gboolean(1)
	}
	_arg5 = (C.GFileCreateFlags)(flags)
	_arg7 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	var _arg6 *C.char
	var _cerr *C.GError

	C.g_file_replace_contents(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg7, &_arg6, _cerr)

	var _newEtag string
	var _goerr error

	_newEtag = C.GoString(_arg6)
	defer C.free(unsafe.Pointer(_arg6))
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _newEtag, _goerr
}

// ReplaceContentsAsync starts an asynchronous replacement of @file with the
// given @contents of @length bytes. @etag will replace the document's
// current entity tag.
//
// When this operation has completed, @callback will be called with
// @user_user data, and the operation can be finalized with
// g_file_replace_contents_finish().
//
// If @cancellable is not nil, then the operation can be cancelled by
// triggering the cancellable object from another thread. If the operation
// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
//
// If @make_backup is true, this function will attempt to make a backup of
// @file.
//
// Note that no copy of @contents will be made, so it must stay valid until
// @callback is called. See g_file_replace_contents_bytes_async() for a
// #GBytes version that will automatically hold a reference to the contents
// (without copying) for the duration of the call.
func (f file) ReplaceContentsAsync(contents []byte, etag string, makeBackup bool, flags FileCreateFlags, cancellable Cancellable, callback AsyncReadyCallback) {
	var _arg0 *C.GFile
	var _arg1 *C.char
	var _arg2 C.gsize
	var _arg3 *C.char
	var _arg4 C.gboolean
	var _arg5 C.GFileCreateFlags
	var _arg6 *C.GCancellable
	var _arg7 C.GAsyncReadyCallback
	var _arg8 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg2 = C.gsize(len(contents))
	_arg1 = (*C.char)(unsafe.Pointer(&contents[0]))
	_arg3 = (*C.char)(C.CString(etag))
	defer C.free(unsafe.Pointer(_arg3))
	if makeBackup {
		_arg4 = C.gboolean(1)
	}
	_arg5 = (C.GFileCreateFlags)(flags)
	_arg6 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg7 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg8 = C.gpointer(box.Assign(callback))

	C.g_file_replace_contents_async(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7, _arg8)
}

// ReplaceContentsFinish finishes an asynchronous replace of the given
// @file. See g_file_replace_contents_async(). Sets @new_etag to the new
// entity tag for the document, if present.
func (f file) ReplaceContentsFinish(res AsyncResult) (string, error) {
	var _arg0 *C.GFile
	var _arg1 *C.GAsyncResult

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(res.Native()))

	var _arg2 *C.char
	var _cerr *C.GError

	C.g_file_replace_contents_finish(_arg0, _arg1, &_arg2, _cerr)

	var _newEtag string
	var _goerr error

	_newEtag = C.GoString(_arg2)
	defer C.free(unsafe.Pointer(_arg2))
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _newEtag, _goerr
}

// ReplaceReadwriteAsync: asynchronously overwrites the file in read-write
// mode, replacing the contents, possibly creating a backup copy of the file
// first.
//
// For more details, see g_file_replace_readwrite() which is the synchronous
// version of this call.
//
// When the operation is finished, @callback will be called. You can then
// call g_file_replace_readwrite_finish() to get the result of the
// operation.
func (f file) ReplaceReadwriteAsync(etag string, makeBackup bool, flags FileCreateFlags, ioPriority int, cancellable Cancellable, callback AsyncReadyCallback) {
	var _arg0 *C.GFile
	var _arg1 *C.char
	var _arg2 C.gboolean
	var _arg3 C.GFileCreateFlags
	var _arg4 C.int
	var _arg5 *C.GCancellable
	var _arg6 C.GAsyncReadyCallback
	var _arg7 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.char)(C.CString(etag))
	defer C.free(unsafe.Pointer(_arg1))
	if makeBackup {
		_arg2 = C.gboolean(1)
	}
	_arg3 = (C.GFileCreateFlags)(flags)
	_arg4 = C.int(ioPriority)
	_arg5 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg6 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg7 = C.gpointer(box.Assign(callback))

	C.g_file_replace_readwrite_async(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7)
}

// SetAttribute sets an attribute in the file with attribute name @attribute
// to @value_p.
//
// Some attributes can be unset by setting @type to
// G_FILE_ATTRIBUTE_TYPE_INVALID and @value_p to nil.
//
// If @cancellable is not nil, then the operation can be cancelled by
// triggering the cancellable object from another thread. If the operation
// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
func (f file) SetAttribute(attribute string, typ FileAttributeType, valueP interface{}, flags FileQueryInfoFlags, cancellable Cancellable) error {
	var _arg0 *C.GFile
	var _arg1 *C.char
	var _arg2 C.GFileAttributeType
	var _arg3 C.gpointer
	var _arg4 C.GFileQueryInfoFlags
	var _arg5 *C.GCancellable

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.char)(C.CString(attribute))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (C.GFileAttributeType)(typ)
	_arg3 = C.gpointer(valueP)
	_arg4 = (C.GFileQueryInfoFlags)(flags)
	_arg5 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	var _cerr *C.GError

	C.g_file_set_attribute(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _cerr)

	var _goerr error

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

// SetAttributeByteString sets @attribute of type
// G_FILE_ATTRIBUTE_TYPE_BYTE_STRING to @value. If @attribute is of a
// different type, this operation will fail, returning false.
//
// If @cancellable is not nil, then the operation can be cancelled by
// triggering the cancellable object from another thread. If the operation
// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
func (f file) SetAttributeByteString(attribute string, value string, flags FileQueryInfoFlags, cancellable Cancellable) error {
	var _arg0 *C.GFile
	var _arg1 *C.char
	var _arg2 *C.char
	var _arg3 C.GFileQueryInfoFlags
	var _arg4 *C.GCancellable

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.char)(C.CString(attribute))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.char)(C.CString(value))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = (C.GFileQueryInfoFlags)(flags)
	_arg4 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	var _cerr *C.GError

	C.g_file_set_attribute_byte_string(_arg0, _arg1, _arg2, _arg3, _arg4, _cerr)

	var _goerr error

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

// SetAttributeInt32 sets @attribute of type G_FILE_ATTRIBUTE_TYPE_INT32 to
// @value. If @attribute is of a different type, this operation will fail.
//
// If @cancellable is not nil, then the operation can be cancelled by
// triggering the cancellable object from another thread. If the operation
// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
func (f file) SetAttributeInt32(attribute string, value int32, flags FileQueryInfoFlags, cancellable Cancellable) error {
	var _arg0 *C.GFile
	var _arg1 *C.char
	var _arg2 C.gint32
	var _arg3 C.GFileQueryInfoFlags
	var _arg4 *C.GCancellable

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.char)(C.CString(attribute))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.gint32(value)
	_arg3 = (C.GFileQueryInfoFlags)(flags)
	_arg4 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	var _cerr *C.GError

	C.g_file_set_attribute_int32(_arg0, _arg1, _arg2, _arg3, _arg4, _cerr)

	var _goerr error

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

// SetAttributeInt64 sets @attribute of type G_FILE_ATTRIBUTE_TYPE_INT64 to
// @value. If @attribute is of a different type, this operation will fail.
//
// If @cancellable is not nil, then the operation can be cancelled by
// triggering the cancellable object from another thread. If the operation
// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
func (f file) SetAttributeInt64(attribute string, value int64, flags FileQueryInfoFlags, cancellable Cancellable) error {
	var _arg0 *C.GFile
	var _arg1 *C.char
	var _arg2 C.gint64
	var _arg3 C.GFileQueryInfoFlags
	var _arg4 *C.GCancellable

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.char)(C.CString(attribute))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.gint64(value)
	_arg3 = (C.GFileQueryInfoFlags)(flags)
	_arg4 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	var _cerr *C.GError

	C.g_file_set_attribute_int64(_arg0, _arg1, _arg2, _arg3, _arg4, _cerr)

	var _goerr error

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

// SetAttributeString sets @attribute of type G_FILE_ATTRIBUTE_TYPE_STRING
// to @value. If @attribute is of a different type, this operation will
// fail.
//
// If @cancellable is not nil, then the operation can be cancelled by
// triggering the cancellable object from another thread. If the operation
// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
func (f file) SetAttributeString(attribute string, value string, flags FileQueryInfoFlags, cancellable Cancellable) error {
	var _arg0 *C.GFile
	var _arg1 *C.char
	var _arg2 *C.char
	var _arg3 C.GFileQueryInfoFlags
	var _arg4 *C.GCancellable

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.char)(C.CString(attribute))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.char)(C.CString(value))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = (C.GFileQueryInfoFlags)(flags)
	_arg4 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	var _cerr *C.GError

	C.g_file_set_attribute_string(_arg0, _arg1, _arg2, _arg3, _arg4, _cerr)

	var _goerr error

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

// SetAttributeUint32 sets @attribute of type G_FILE_ATTRIBUTE_TYPE_UINT32
// to @value. If @attribute is of a different type, this operation will
// fail.
//
// If @cancellable is not nil, then the operation can be cancelled by
// triggering the cancellable object from another thread. If the operation
// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
func (f file) SetAttributeUint32(attribute string, value uint32, flags FileQueryInfoFlags, cancellable Cancellable) error {
	var _arg0 *C.GFile
	var _arg1 *C.char
	var _arg2 C.guint32
	var _arg3 C.GFileQueryInfoFlags
	var _arg4 *C.GCancellable

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.char)(C.CString(attribute))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.guint32(value)
	_arg3 = (C.GFileQueryInfoFlags)(flags)
	_arg4 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	var _cerr *C.GError

	C.g_file_set_attribute_uint32(_arg0, _arg1, _arg2, _arg3, _arg4, _cerr)

	var _goerr error

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

// SetAttributeUint64 sets @attribute of type G_FILE_ATTRIBUTE_TYPE_UINT64
// to @value. If @attribute is of a different type, this operation will
// fail.
//
// If @cancellable is not nil, then the operation can be cancelled by
// triggering the cancellable object from another thread. If the operation
// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
func (f file) SetAttributeUint64(attribute string, value uint64, flags FileQueryInfoFlags, cancellable Cancellable) error {
	var _arg0 *C.GFile
	var _arg1 *C.char
	var _arg2 C.guint64
	var _arg3 C.GFileQueryInfoFlags
	var _arg4 *C.GCancellable

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.char)(C.CString(attribute))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.guint64(value)
	_arg3 = (C.GFileQueryInfoFlags)(flags)
	_arg4 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	var _cerr *C.GError

	C.g_file_set_attribute_uint64(_arg0, _arg1, _arg2, _arg3, _arg4, _cerr)

	var _goerr error

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

// SetAttributesAsync: asynchronously sets the attributes of @file with
// @info.
//
// For more details, see g_file_set_attributes_from_info(), which is the
// synchronous version of this call.
//
// When the operation is finished, @callback will be called. You can then
// call g_file_set_attributes_finish() to get the result of the operation.
func (f file) SetAttributesAsync(info FileInfo, flags FileQueryInfoFlags, ioPriority int, cancellable Cancellable, callback AsyncReadyCallback) {
	var _arg0 *C.GFile
	var _arg1 *C.GFileInfo
	var _arg2 C.GFileQueryInfoFlags
	var _arg3 C.int
	var _arg4 *C.GCancellable
	var _arg5 C.GAsyncReadyCallback
	var _arg6 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GFileInfo)(unsafe.Pointer(info.Native()))
	_arg2 = (C.GFileQueryInfoFlags)(flags)
	_arg3 = C.int(ioPriority)
	_arg4 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg5 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg6 = C.gpointer(box.Assign(callback))

	C.g_file_set_attributes_async(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6)
}

// SetAttributesFromInfo tries to set all attributes in the Info on the
// target values, not stopping on the first error.
//
// If there is any error during this operation then @error will be set to
// the first error. Error on particular fields are flagged by setting the
// "status" field in the attribute value to
// G_FILE_ATTRIBUTE_STATUS_ERROR_SETTING, which means you can also detect
// further errors.
//
// If @cancellable is not nil, then the operation can be cancelled by
// triggering the cancellable object from another thread. If the operation
// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
func (f file) SetAttributesFromInfo(info FileInfo, flags FileQueryInfoFlags, cancellable Cancellable) error {
	var _arg0 *C.GFile
	var _arg1 *C.GFileInfo
	var _arg2 C.GFileQueryInfoFlags
	var _arg3 *C.GCancellable

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GFileInfo)(unsafe.Pointer(info.Native()))
	_arg2 = (C.GFileQueryInfoFlags)(flags)
	_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	var _cerr *C.GError

	C.g_file_set_attributes_from_info(_arg0, _arg1, _arg2, _arg3, _cerr)

	var _goerr error

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

// SetDisplayNameAsync: asynchronously sets the display name for a given
// #GFile.
//
// For more details, see g_file_set_display_name() which is the synchronous
// version of this call.
//
// When the operation is finished, @callback will be called. You can then
// call g_file_set_display_name_finish() to get the result of the operation.
func (f file) SetDisplayNameAsync(displayName string, ioPriority int, cancellable Cancellable, callback AsyncReadyCallback) {
	var _arg0 *C.GFile
	var _arg1 *C.char
	var _arg2 C.int
	var _arg3 *C.GCancellable
	var _arg4 C.GAsyncReadyCallback
	var _arg5 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.char)(C.CString(displayName))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.int(ioPriority)
	_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg4 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg5 = C.gpointer(box.Assign(callback))

	C.g_file_set_display_name_async(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
}

// StartMountable starts a file of type FILE_TYPE_MOUNTABLE. Using
// @start_operation, you can request callbacks when, for instance, passwords
// are needed during authentication.
//
// If @cancellable is not nil, then the operation can be cancelled by
// triggering the cancellable object from another thread. If the operation
// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
//
// When the operation is finished, @callback will be called. You can then
// call g_file_mount_mountable_finish() to get the result of the operation.
func (f file) StartMountable(flags DriveStartFlags, startOperation MountOperation, cancellable Cancellable, callback AsyncReadyCallback) {
	var _arg0 *C.GFile
	var _arg1 C.GDriveStartFlags
	var _arg2 *C.GMountOperation
	var _arg3 *C.GCancellable
	var _arg4 C.GAsyncReadyCallback
	var _arg5 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (C.GDriveStartFlags)(flags)
	_arg2 = (*C.GMountOperation)(unsafe.Pointer(startOperation.Native()))
	_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg4 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg5 = C.gpointer(box.Assign(callback))

	C.g_file_start_mountable(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
}

// StartMountableFinish finishes a start operation. See
// g_file_start_mountable() for details.
//
// Finish an asynchronous start operation that was started with
// g_file_start_mountable().
func (f file) StartMountableFinish(result AsyncResult) error {
	var _arg0 *C.GFile
	var _arg1 *C.GAsyncResult

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(result.Native()))

	var _cerr *C.GError

	C.g_file_start_mountable_finish(_arg0, _arg1, _cerr)

	var _goerr error

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

// StopMountable stops a file of type FILE_TYPE_MOUNTABLE.
//
// If @cancellable is not nil, then the operation can be cancelled by
// triggering the cancellable object from another thread. If the operation
// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
//
// When the operation is finished, @callback will be called. You can then
// call g_file_stop_mountable_finish() to get the result of the operation.
func (f file) StopMountable(flags MountUnmountFlags, mountOperation MountOperation, cancellable Cancellable, callback AsyncReadyCallback) {
	var _arg0 *C.GFile
	var _arg1 C.GMountUnmountFlags
	var _arg2 *C.GMountOperation
	var _arg3 *C.GCancellable
	var _arg4 C.GAsyncReadyCallback
	var _arg5 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (C.GMountUnmountFlags)(flags)
	_arg2 = (*C.GMountOperation)(unsafe.Pointer(mountOperation.Native()))
	_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg4 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg5 = C.gpointer(box.Assign(callback))

	C.g_file_stop_mountable(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
}

// StopMountableFinish finishes a stop operation, see
// g_file_stop_mountable() for details.
//
// Finish an asynchronous stop operation that was started with
// g_file_stop_mountable().
func (f file) StopMountableFinish(result AsyncResult) error {
	var _arg0 *C.GFile
	var _arg1 *C.GAsyncResult

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(result.Native()))

	var _cerr *C.GError

	C.g_file_stop_mountable_finish(_arg0, _arg1, _cerr)

	var _goerr error

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

// SupportsThreadContexts checks if @file supports [thread-default
// contexts][g-main-context-push-thread-default-context]. If this returns
// false, you cannot perform asynchronous operations on @file in a thread
// that has a thread-default context.
func (f file) SupportsThreadContexts() bool {
	var _arg0 *C.GFile

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))

	var _cret C.gboolean

	_cret = C.g_file_supports_thread_contexts(_arg0)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// Trash sends @file to the "Trashcan", if possible. This is similar to
// deleting it, but the user can recover it before emptying the trashcan.
// Not all file systems support trashing, so this call can return the
// G_IO_ERROR_NOT_SUPPORTED error. Since GLib 2.66, the `x-gvfs-notrash`
// unix mount option can be used to disable g_file_trash() support for
// certain mounts, the G_IO_ERROR_NOT_SUPPORTED error will be returned in
// that case.
//
// If @cancellable is not nil, then the operation can be cancelled by
// triggering the cancellable object from another thread. If the operation
// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
func (f file) Trash(cancellable Cancellable) error {
	var _arg0 *C.GFile
	var _arg1 *C.GCancellable

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	var _cerr *C.GError

	C.g_file_trash(_arg0, _arg1, _cerr)

	var _goerr error

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

// TrashAsync: asynchronously sends @file to the Trash location, if
// possible.
func (f file) TrashAsync(ioPriority int, cancellable Cancellable, callback AsyncReadyCallback) {
	var _arg0 *C.GFile
	var _arg1 C.int
	var _arg2 *C.GCancellable
	var _arg3 C.GAsyncReadyCallback
	var _arg4 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = C.int(ioPriority)
	_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg3 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg4 = C.gpointer(box.Assign(callback))

	C.g_file_trash_async(_arg0, _arg1, _arg2, _arg3, _arg4)
}

// TrashFinish finishes an asynchronous file trashing operation, started
// with g_file_trash_async().
func (f file) TrashFinish(result AsyncResult) error {
	var _arg0 *C.GFile
	var _arg1 *C.GAsyncResult

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(result.Native()))

	var _cerr *C.GError

	C.g_file_trash_finish(_arg0, _arg1, _cerr)

	var _goerr error

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

// UnmountMountable unmounts a file of type G_FILE_TYPE_MOUNTABLE.
//
// If @cancellable is not nil, then the operation can be cancelled by
// triggering the cancellable object from another thread. If the operation
// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
//
// When the operation is finished, @callback will be called. You can then
// call g_file_unmount_mountable_finish() to get the result of the
// operation.
func (f file) UnmountMountable(flags MountUnmountFlags, cancellable Cancellable, callback AsyncReadyCallback) {
	var _arg0 *C.GFile
	var _arg1 C.GMountUnmountFlags
	var _arg2 *C.GCancellable
	var _arg3 C.GAsyncReadyCallback
	var _arg4 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (C.GMountUnmountFlags)(flags)
	_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg3 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg4 = C.gpointer(box.Assign(callback))

	C.g_file_unmount_mountable(_arg0, _arg1, _arg2, _arg3, _arg4)
}

// UnmountMountableFinish finishes an unmount operation, see
// g_file_unmount_mountable() for details.
//
// Finish an asynchronous unmount operation that was started with
// g_file_unmount_mountable().
func (f file) UnmountMountableFinish(result AsyncResult) error {
	var _arg0 *C.GFile
	var _arg1 *C.GAsyncResult

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(result.Native()))

	var _cerr *C.GError

	C.g_file_unmount_mountable_finish(_arg0, _arg1, _cerr)

	var _goerr error

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

// UnmountMountableWithOperation unmounts a file of type
// FILE_TYPE_MOUNTABLE.
//
// If @cancellable is not nil, then the operation can be cancelled by
// triggering the cancellable object from another thread. If the operation
// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
//
// When the operation is finished, @callback will be called. You can then
// call g_file_unmount_mountable_finish() to get the result of the
// operation.
func (f file) UnmountMountableWithOperation(flags MountUnmountFlags, mountOperation MountOperation, cancellable Cancellable, callback AsyncReadyCallback) {
	var _arg0 *C.GFile
	var _arg1 C.GMountUnmountFlags
	var _arg2 *C.GMountOperation
	var _arg3 *C.GCancellable
	var _arg4 C.GAsyncReadyCallback
	var _arg5 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (C.GMountUnmountFlags)(flags)
	_arg2 = (*C.GMountOperation)(unsafe.Pointer(mountOperation.Native()))
	_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	_arg4 = (*[0]byte)(C.gotk4_AsyncReadyCallback)
	_arg5 = C.gpointer(box.Assign(callback))

	C.g_file_unmount_mountable_with_operation(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
}

// UnmountMountableWithOperationFinish finishes an unmount operation, see
// g_file_unmount_mountable_with_operation() for details.
//
// Finish an asynchronous unmount operation that was started with
// g_file_unmount_mountable_with_operation().
func (f file) UnmountMountableWithOperationFinish(result AsyncResult) error {
	var _arg0 *C.GFile
	var _arg1 *C.GAsyncResult

	_arg0 = (*C.GFile)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(result.Native()))

	var _cerr *C.GError

	C.g_file_unmount_mountable_with_operation_finish(_arg0, _arg1, _cerr)

	var _goerr error

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}
