// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gio-2.0 gio-unix-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gio/gdesktopappinfo.h>
// #include <gio/gfiledescriptorbased.h>
// #include <gio/gio.h>
// #include <gio/gunixconnection.h>
// #include <gio/gunixcredentialsmessage.h>
// #include <gio/gunixfdlist.h>
// #include <gio/gunixfdmessage.h>
// #include <gio/gunixinputstream.h>
// #include <gio/gunixmounts.h>
// #include <gio/gunixoutputstream.h>
// #include <gio/gunixsocketaddress.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_simple_proxy_resolver_get_type()), F: marshalSimpleProxyResolver},
	})
}

// SimpleProxyResolver is a simple Resolver implementation that handles a single
// default proxy, multiple URI-scheme-specific proxies, and a list of hosts that
// proxies should not be used for.
//
// ProxyResolver is never the default proxy resolver, but it can be used as the
// base class for another proxy resolver implementation, or it can be created
// and used manually, such as with g_socket_client_set_proxy_resolver().
type SimpleProxyResolver interface {
	gextras.Objector
	ProxyResolver

	// SetDefaultProxy sets the default proxy on @resolver, to be used for any
	// URIs that don't match ProxyResolver:ignore-hosts or a proxy set via
	// g_simple_proxy_resolver_set_uri_proxy().
	//
	// If @default_proxy starts with "socks://", ProxyResolver will treat it as
	// referring to all three of the socks5, socks4a, and socks4 proxy types.
	SetDefaultProxy(defaultProxy string)
	// SetIgnoreHosts sets the list of ignored hosts.
	//
	// See ProxyResolver:ignore-hosts for more details on how the @ignore_hosts
	// argument is interpreted.
	SetIgnoreHosts(ignoreHosts string)
	// SetURIProxy adds a URI-scheme-specific proxy to @resolver; URIs whose
	// scheme matches @uri_scheme (and which don't match
	// ProxyResolver:ignore-hosts) will be proxied via @proxy.
	//
	// As with ProxyResolver:default-proxy, if @proxy starts with "socks://",
	// ProxyResolver will treat it as referring to all three of the socks5,
	// socks4a, and socks4 proxy types.
	SetURIProxy(uriScheme string, proxy string)
}

// simpleProxyResolver implements the SimpleProxyResolver interface.
type simpleProxyResolver struct {
	gextras.Objector
	ProxyResolver
}

var _ SimpleProxyResolver = (*simpleProxyResolver)(nil)

// WrapSimpleProxyResolver wraps a GObject to the right type. It is
// primarily used internally.
func WrapSimpleProxyResolver(obj *externglib.Object) SimpleProxyResolver {
	return SimpleProxyResolver{
		Objector:      obj,
		ProxyResolver: WrapProxyResolver(obj),
	}
}

func marshalSimpleProxyResolver(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapSimpleProxyResolver(obj), nil
}

// SetDefaultProxy sets the default proxy on @resolver, to be used for any
// URIs that don't match ProxyResolver:ignore-hosts or a proxy set via
// g_simple_proxy_resolver_set_uri_proxy().
//
// If @default_proxy starts with "socks://", ProxyResolver will treat it as
// referring to all three of the socks5, socks4a, and socks4 proxy types.
func (r simpleProxyResolver) SetDefaultProxy(defaultProxy string) {
	var arg0 *C.GSimpleProxyResolver
	var arg1 *C.gchar

	arg0 = (*C.GSimpleProxyResolver)(unsafe.Pointer(r.Native()))
	arg1 = (*C.gchar)(C.CString(defaultProxy))
	defer C.free(unsafe.Pointer(arg1))

	C.g_simple_proxy_resolver_set_default_proxy(arg0, defaultProxy)
}

// SetIgnoreHosts sets the list of ignored hosts.
//
// See ProxyResolver:ignore-hosts for more details on how the @ignore_hosts
// argument is interpreted.
func (r simpleProxyResolver) SetIgnoreHosts(ignoreHosts string) {
	var arg0 *C.GSimpleProxyResolver
	var arg1 **C.gchar

	arg0 = (*C.GSimpleProxyResolver)(unsafe.Pointer(r.Native()))
	arg1 = (**C.gchar)(C.CString(ignoreHosts))
	defer C.free(unsafe.Pointer(arg1))

	C.g_simple_proxy_resolver_set_ignore_hosts(arg0, ignoreHosts)
}

// SetURIProxy adds a URI-scheme-specific proxy to @resolver; URIs whose
// scheme matches @uri_scheme (and which don't match
// ProxyResolver:ignore-hosts) will be proxied via @proxy.
//
// As with ProxyResolver:default-proxy, if @proxy starts with "socks://",
// ProxyResolver will treat it as referring to all three of the socks5,
// socks4a, and socks4 proxy types.
func (r simpleProxyResolver) SetURIProxy(uriScheme string, proxy string) {
	var arg0 *C.GSimpleProxyResolver
	var arg1 *C.gchar
	var arg2 *C.gchar

	arg0 = (*C.GSimpleProxyResolver)(unsafe.Pointer(r.Native()))
	arg1 = (*C.gchar)(C.CString(uriScheme))
	defer C.free(unsafe.Pointer(arg1))
	arg2 = (*C.gchar)(C.CString(proxy))
	defer C.free(unsafe.Pointer(arg2))

	C.g_simple_proxy_resolver_set_uri_proxy(arg0, uriScheme, proxy)
}

type SimpleProxyResolverPrivate struct {
	native C.GSimpleProxyResolverPrivate
}

// WrapSimpleProxyResolverPrivate wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSimpleProxyResolverPrivate(ptr unsafe.Pointer) *SimpleProxyResolverPrivate {
	if ptr == nil {
		return nil
	}

	return (*SimpleProxyResolverPrivate)(ptr)
}

func marshalSimpleProxyResolverPrivate(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSimpleProxyResolverPrivate(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (s *SimpleProxyResolverPrivate) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}
