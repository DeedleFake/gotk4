// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gerror"
	"github.com/diamondburned/gotk4/internal/gextras"
	"github.com/diamondburned/gotk4/internal/ptr"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gio-2.0 gio-unix-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gio/gdesktopappinfo.h>
// #include <gio/gfiledescriptorbased.h>
// #include <gio/gio.h>
// #include <gio/gunixconnection.h>
// #include <gio/gunixcredentialsmessage.h>
// #include <gio/gunixfdlist.h>
// #include <gio/gunixfdmessage.h>
// #include <gio/gunixinputstream.h>
// #include <gio/gunixmounts.h>
// #include <gio/gunixoutputstream.h>
// #include <gio/gunixsocketaddress.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_drive_get_type()), F: marshalDrive},
	})
}

// DriveOverrider contains methods that are overridable. This
// interface is a subset of the interface Drive.
type DriveOverrider interface {
	// CanEject checks if a drive can be ejected.
	CanEject() bool
	// CanPollForMedia checks if a drive can be polled for media changes.
	CanPollForMedia() bool
	// CanStart checks if a drive can be started.
	CanStart() bool
	// CanStartDegraded checks if a drive can be started degraded.
	CanStartDegraded() bool
	// CanStop checks if a drive can be stopped.
	CanStop() bool

	Changed()

	Disconnected()
	// Eject: asynchronously ejects a drive.
	//
	// When the operation is finished, @callback will be called. You can then
	// call g_drive_eject_finish() to obtain the result of the operation.
	Eject()

	EjectButton()
	// EjectFinish finishes ejecting a drive.
	EjectFinish(result AsyncResult) error
	// EjectWithOperation ejects a drive. This is an asynchronous operation, and
	// is finished by calling g_drive_eject_with_operation_finish() with the
	// @drive and Result data returned in the @callback.
	EjectWithOperation()
	// EjectWithOperationFinish finishes ejecting a drive. If any errors
	// occurred during the operation, @error will be set to contain the errors
	// and false will be returned.
	EjectWithOperationFinish(result AsyncResult) error
	// EnumerateIdentifiers gets the kinds of identifiers that @drive has. Use
	// g_drive_get_identifier() to obtain the identifiers themselves.
	EnumerateIdentifiers() []string
	// Icon gets the icon for @drive.
	Icon() Icon
	// Identifier gets the identifier of the given kind for @drive. The only
	// identifier currently available is DRIVE_IDENTIFIER_KIND_UNIX_DEVICE.
	Identifier(kind string) string
	// Name gets the name of @drive.
	Name() string
	// SortKey gets the sort key for @drive, if any.
	SortKey() string
	// StartStopType gets a hint about how a drive can be started/stopped.
	StartStopType() DriveStartStopType
	// SymbolicIcon gets the icon for @drive.
	SymbolicIcon() Icon
	// Volumes: get a list of mountable volumes for @drive.
	//
	// The returned list should be freed with g_list_free(), after its elements
	// have been unreffed with g_object_unref().
	Volumes() *glib.List
	// HasMedia checks if the @drive has media. Note that the OS may not be
	// polling the drive for media changes; see
	// g_drive_is_media_check_automatic() for more details.
	HasMedia() bool
	// HasVolumes: check if @drive has any mountable volumes.
	HasVolumes() bool
	// IsMediaCheckAutomatic checks if @drive is capable of automatically
	// detecting media changes.
	IsMediaCheckAutomatic() bool
	// IsMediaRemovable checks if the @drive supports removable media.
	IsMediaRemovable() bool
	// IsRemovable checks if the #GDrive and/or its media is considered
	// removable by the user. See g_drive_is_media_removable().
	IsRemovable() bool
	// PollForMedia: asynchronously polls @drive to see if media has been
	// inserted or removed.
	//
	// When the operation is finished, @callback will be called. You can then
	// call g_drive_poll_for_media_finish() to obtain the result of the
	// operation.
	PollForMedia()
	// PollForMediaFinish finishes an operation started with
	// g_drive_poll_for_media() on a drive.
	PollForMediaFinish(result AsyncResult) error
	// Start: asynchronously starts a drive.
	//
	// When the operation is finished, @callback will be called. You can then
	// call g_drive_start_finish() to obtain the result of the operation.
	Start()
	// StartFinish finishes starting a drive.
	StartFinish(result AsyncResult) error
	// Stop: asynchronously stops a drive.
	//
	// When the operation is finished, @callback will be called. You can then
	// call g_drive_stop_finish() to obtain the result of the operation.
	Stop()

	StopButton()
	// StopFinish finishes stopping a drive.
	StopFinish(result AsyncResult) error
}

// Drive: #GDrive - this represent a piece of hardware connected to the machine.
// It's generally only created for removable hardware or hardware with removable
// media.
//
// #GDrive is a container class for #GVolume objects that stem from the same
// piece of media. As such, #GDrive abstracts a drive with (or without)
// removable media and provides operations for querying whether media is
// available, determining whether media change is automatically detected and
// ejecting the media.
//
// If the #GDrive reports that media isn't automatically detected, one can poll
// for media; typically one should not do this periodically as a poll for media
// operation is potentially expensive and may spin up the drive creating noise.
//
// #GDrive supports starting and stopping drives with authentication support for
// the former. This can be used to support a diverse set of use cases including
// connecting/disconnecting iSCSI devices, powering down external disk
// enclosures and starting/stopping multi-disk devices such as RAID devices.
// Note that the actual semantics and side-effects of starting/stopping a
// #GDrive may vary according to implementation. To choose the correct verbs in
// e.g. a file manager, use g_drive_get_start_stop_type().
//
// For porting from GnomeVFS note that there is no equivalent of #GDrive in that
// API.
type Drive interface {
	gextras.Objector
	DriveOverrider
}

// drive implements the Drive interface.
type drive struct {
	gextras.Objector
}

var _ Drive = (*drive)(nil)

// WrapDrive wraps a GObject to a type that implements interface
// Drive. It is primarily used internally.
func WrapDrive(obj *externglib.Object) Drive {
	return Drive{
		Objector: obj,
	}
}

func marshalDrive(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapDrive(obj), nil
}

// CanEject checks if a drive can be ejected.
func (d drive) CanEject() bool {
	var arg0 *C.GDrive

	arg0 = (*C.GDrive)(unsafe.Pointer(d.Native()))

	var cret C.gboolean

	cret = C.g_drive_can_eject(arg0)

	var ok bool

	if cret {
		ok = true
	}

	return ok
}

// CanPollForMedia checks if a drive can be polled for media changes.
func (d drive) CanPollForMedia() bool {
	var arg0 *C.GDrive

	arg0 = (*C.GDrive)(unsafe.Pointer(d.Native()))

	var cret C.gboolean

	cret = C.g_drive_can_poll_for_media(arg0)

	var ok bool

	if cret {
		ok = true
	}

	return ok
}

// CanStart checks if a drive can be started.
func (d drive) CanStart() bool {
	var arg0 *C.GDrive

	arg0 = (*C.GDrive)(unsafe.Pointer(d.Native()))

	var cret C.gboolean

	cret = C.g_drive_can_start(arg0)

	var ok bool

	if cret {
		ok = true
	}

	return ok
}

// CanStartDegraded checks if a drive can be started degraded.
func (d drive) CanStartDegraded() bool {
	var arg0 *C.GDrive

	arg0 = (*C.GDrive)(unsafe.Pointer(d.Native()))

	var cret C.gboolean

	cret = C.g_drive_can_start_degraded(arg0)

	var ok bool

	if cret {
		ok = true
	}

	return ok
}

// CanStop checks if a drive can be stopped.
func (d drive) CanStop() bool {
	var arg0 *C.GDrive

	arg0 = (*C.GDrive)(unsafe.Pointer(d.Native()))

	var cret C.gboolean

	cret = C.g_drive_can_stop(arg0)

	var ok bool

	if cret {
		ok = true
	}

	return ok
}

// Eject: asynchronously ejects a drive.
//
// When the operation is finished, @callback will be called. You can then
// call g_drive_eject_finish() to obtain the result of the operation.
func (d drive) Eject() {
	var arg0 *C.GDrive

	arg0 = (*C.GDrive)(unsafe.Pointer(d.Native()))

	C.g_drive_eject(arg0)
}

// EjectFinish finishes ejecting a drive.
func (d drive) EjectFinish(result AsyncResult) error {
	var arg0 *C.GDrive
	var arg1 *C.GAsyncResult

	arg0 = (*C.GDrive)(unsafe.Pointer(d.Native()))
	arg1 = (*C.GAsyncResult)(unsafe.Pointer(result.Native()))

	var cerr *C.GError

	C.g_drive_eject_finish(arg0, arg1, cerr)

	var goerr error

	goerr = gerror.Take(unsafe.Pointer(cerr))

	return goerr
}

// EjectWithOperation ejects a drive. This is an asynchronous operation, and
// is finished by calling g_drive_eject_with_operation_finish() with the
// @drive and Result data returned in the @callback.
func (d drive) EjectWithOperation() {
	var arg0 *C.GDrive

	arg0 = (*C.GDrive)(unsafe.Pointer(d.Native()))

	C.g_drive_eject_with_operation(arg0)
}

// EjectWithOperationFinish finishes ejecting a drive. If any errors
// occurred during the operation, @error will be set to contain the errors
// and false will be returned.
func (d drive) EjectWithOperationFinish(result AsyncResult) error {
	var arg0 *C.GDrive
	var arg1 *C.GAsyncResult

	arg0 = (*C.GDrive)(unsafe.Pointer(d.Native()))
	arg1 = (*C.GAsyncResult)(unsafe.Pointer(result.Native()))

	var cerr *C.GError

	C.g_drive_eject_with_operation_finish(arg0, arg1, cerr)

	var goerr error

	goerr = gerror.Take(unsafe.Pointer(cerr))

	return goerr
}

// EnumerateIdentifiers gets the kinds of identifiers that @drive has. Use
// g_drive_get_identifier() to obtain the identifiers themselves.
func (d drive) EnumerateIdentifiers() []string {
	var arg0 *C.GDrive

	arg0 = (*C.GDrive)(unsafe.Pointer(d.Native()))

	var cret **C.char

	cret = C.g_drive_enumerate_identifiers(arg0)

	var utf8s []string

	{
		var length int
		for p := cret; *p != 0; p = (**C.char)(ptr.Add(unsafe.Pointer(p), unsafe.Sizeof(int(0)))) {
			length++
			if length < 0 {
				panic(`length overflow`)
			}
		}

		var src []*C.gchar
		ptr.SetSlice(unsafe.Pointer(&src), unsafe.Pointer(cret), int(length))

		utf8s = make([]string, length)
		for i := uintptr(0); i < uintptr(length); i += unsafe.Sizeof(int(0)) {
			utf8s = C.GoString(cret)
			defer C.free(unsafe.Pointer(cret))
		}
	}

	return utf8s
}

// Icon gets the icon for @drive.
func (d drive) Icon() Icon {
	var arg0 *C.GDrive

	arg0 = (*C.GDrive)(unsafe.Pointer(d.Native()))

	var cret *C.GIcon

	cret = C.g_drive_get_icon(arg0)

	var icon Icon

	icon = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(cret.Native()))).(Icon)

	return icon
}

// Identifier gets the identifier of the given kind for @drive. The only
// identifier currently available is DRIVE_IDENTIFIER_KIND_UNIX_DEVICE.
func (d drive) Identifier(kind string) string {
	var arg0 *C.GDrive
	var arg1 *C.char

	arg0 = (*C.GDrive)(unsafe.Pointer(d.Native()))
	arg1 = (*C.char)(C.CString(kind))
	defer C.free(unsafe.Pointer(arg1))

	var cret *C.char

	cret = C.g_drive_get_identifier(arg0, arg1)

	var utf8 string

	utf8 = C.GoString(cret)
	defer C.free(unsafe.Pointer(cret))

	return utf8
}

// Name gets the name of @drive.
func (d drive) Name() string {
	var arg0 *C.GDrive

	arg0 = (*C.GDrive)(unsafe.Pointer(d.Native()))

	var cret *C.char

	cret = C.g_drive_get_name(arg0)

	var utf8 string

	utf8 = C.GoString(cret)
	defer C.free(unsafe.Pointer(cret))

	return utf8
}

// SortKey gets the sort key for @drive, if any.
func (d drive) SortKey() string {
	var arg0 *C.GDrive

	arg0 = (*C.GDrive)(unsafe.Pointer(d.Native()))

	var cret *C.gchar

	cret = C.g_drive_get_sort_key(arg0)

	var utf8 string

	utf8 = C.GoString(cret)

	return utf8
}

// StartStopType gets a hint about how a drive can be started/stopped.
func (d drive) StartStopType() DriveStartStopType {
	var arg0 *C.GDrive

	arg0 = (*C.GDrive)(unsafe.Pointer(d.Native()))

	var cret C.GDriveStartStopType

	cret = C.g_drive_get_start_stop_type(arg0)

	var driveStartStopType DriveStartStopType

	driveStartStopType = DriveStartStopType(cret)

	return driveStartStopType
}

// SymbolicIcon gets the icon for @drive.
func (d drive) SymbolicIcon() Icon {
	var arg0 *C.GDrive

	arg0 = (*C.GDrive)(unsafe.Pointer(d.Native()))

	var cret *C.GIcon

	cret = C.g_drive_get_symbolic_icon(arg0)

	var icon Icon

	icon = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(cret.Native()))).(Icon)

	return icon
}

// Volumes: get a list of mountable volumes for @drive.
//
// The returned list should be freed with g_list_free(), after its elements
// have been unreffed with g_object_unref().
func (d drive) Volumes() *glib.List {
	var arg0 *C.GDrive

	arg0 = (*C.GDrive)(unsafe.Pointer(d.Native()))

	var cret *C.GList

	cret = C.g_drive_get_volumes(arg0)

	var list *glib.List

	list = glib.WrapList(unsafe.Pointer(cret))
	runtime.SetFinalizer(list, func(v *glib.List) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return list
}

// HasMedia checks if the @drive has media. Note that the OS may not be
// polling the drive for media changes; see
// g_drive_is_media_check_automatic() for more details.
func (d drive) HasMedia() bool {
	var arg0 *C.GDrive

	arg0 = (*C.GDrive)(unsafe.Pointer(d.Native()))

	var cret C.gboolean

	cret = C.g_drive_has_media(arg0)

	var ok bool

	if cret {
		ok = true
	}

	return ok
}

// HasVolumes: check if @drive has any mountable volumes.
func (d drive) HasVolumes() bool {
	var arg0 *C.GDrive

	arg0 = (*C.GDrive)(unsafe.Pointer(d.Native()))

	var cret C.gboolean

	cret = C.g_drive_has_volumes(arg0)

	var ok bool

	if cret {
		ok = true
	}

	return ok
}

// IsMediaCheckAutomatic checks if @drive is capable of automatically
// detecting media changes.
func (d drive) IsMediaCheckAutomatic() bool {
	var arg0 *C.GDrive

	arg0 = (*C.GDrive)(unsafe.Pointer(d.Native()))

	var cret C.gboolean

	cret = C.g_drive_is_media_check_automatic(arg0)

	var ok bool

	if cret {
		ok = true
	}

	return ok
}

// IsMediaRemovable checks if the @drive supports removable media.
func (d drive) IsMediaRemovable() bool {
	var arg0 *C.GDrive

	arg0 = (*C.GDrive)(unsafe.Pointer(d.Native()))

	var cret C.gboolean

	cret = C.g_drive_is_media_removable(arg0)

	var ok bool

	if cret {
		ok = true
	}

	return ok
}

// IsRemovable checks if the #GDrive and/or its media is considered
// removable by the user. See g_drive_is_media_removable().
func (d drive) IsRemovable() bool {
	var arg0 *C.GDrive

	arg0 = (*C.GDrive)(unsafe.Pointer(d.Native()))

	var cret C.gboolean

	cret = C.g_drive_is_removable(arg0)

	var ok bool

	if cret {
		ok = true
	}

	return ok
}

// PollForMedia: asynchronously polls @drive to see if media has been
// inserted or removed.
//
// When the operation is finished, @callback will be called. You can then
// call g_drive_poll_for_media_finish() to obtain the result of the
// operation.
func (d drive) PollForMedia() {
	var arg0 *C.GDrive

	arg0 = (*C.GDrive)(unsafe.Pointer(d.Native()))

	C.g_drive_poll_for_media(arg0)
}

// PollForMediaFinish finishes an operation started with
// g_drive_poll_for_media() on a drive.
func (d drive) PollForMediaFinish(result AsyncResult) error {
	var arg0 *C.GDrive
	var arg1 *C.GAsyncResult

	arg0 = (*C.GDrive)(unsafe.Pointer(d.Native()))
	arg1 = (*C.GAsyncResult)(unsafe.Pointer(result.Native()))

	var cerr *C.GError

	C.g_drive_poll_for_media_finish(arg0, arg1, cerr)

	var goerr error

	goerr = gerror.Take(unsafe.Pointer(cerr))

	return goerr
}

// Start: asynchronously starts a drive.
//
// When the operation is finished, @callback will be called. You can then
// call g_drive_start_finish() to obtain the result of the operation.
func (d drive) Start() {
	var arg0 *C.GDrive

	arg0 = (*C.GDrive)(unsafe.Pointer(d.Native()))

	C.g_drive_start(arg0)
}

// StartFinish finishes starting a drive.
func (d drive) StartFinish(result AsyncResult) error {
	var arg0 *C.GDrive
	var arg1 *C.GAsyncResult

	arg0 = (*C.GDrive)(unsafe.Pointer(d.Native()))
	arg1 = (*C.GAsyncResult)(unsafe.Pointer(result.Native()))

	var cerr *C.GError

	C.g_drive_start_finish(arg0, arg1, cerr)

	var goerr error

	goerr = gerror.Take(unsafe.Pointer(cerr))

	return goerr
}

// Stop: asynchronously stops a drive.
//
// When the operation is finished, @callback will be called. You can then
// call g_drive_stop_finish() to obtain the result of the operation.
func (d drive) Stop() {
	var arg0 *C.GDrive

	arg0 = (*C.GDrive)(unsafe.Pointer(d.Native()))

	C.g_drive_stop(arg0)
}

// StopFinish finishes stopping a drive.
func (d drive) StopFinish(result AsyncResult) error {
	var arg0 *C.GDrive
	var arg1 *C.GAsyncResult

	arg0 = (*C.GDrive)(unsafe.Pointer(d.Native()))
	arg1 = (*C.GAsyncResult)(unsafe.Pointer(result.Native()))

	var cerr *C.GError

	C.g_drive_stop_finish(arg0, arg1, cerr)

	var goerr error

	goerr = gerror.Take(unsafe.Pointer(cerr))

	return goerr
}
