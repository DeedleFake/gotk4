// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/core/gextras"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gio-2.0 gio-unix-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <gio/gdesktopappinfo.h>
// #include <gio/gfiledescriptorbased.h>
// #include <gio/gio.h>
// #include <gio/gunixconnection.h>
// #include <gio/gunixcredentialsmessage.h>
// #include <gio/gunixfdlist.h>
// #include <gio/gunixfdmessage.h>
// #include <gio/gunixinputstream.h>
// #include <gio/gunixmounts.h>
// #include <gio/gunixoutputstream.h>
// #include <gio/gunixsocketaddress.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_simple_action_group_get_type()), F: marshalSimpleActionGroup},
	})
}

// SimpleActionGroup is a hash table filled with #GAction objects, implementing
// the Group and Map interfaces.
type SimpleActionGroup interface {
	ActionGroup
	ActionMap

	// InsertSimpleActionGroup:
	InsertSimpleActionGroup(action Action)
	// LookupSimpleActionGroup:
	LookupSimpleActionGroup(actionName string) Action
	// RemoveSimpleActionGroup:
	RemoveSimpleActionGroup(actionName string)
}

// simpleActionGroup implements the SimpleActionGroup class.
type simpleActionGroup struct {
	gextras.Objector
}

// WrapSimpleActionGroup wraps a GObject to the right type. It is
// primarily used internally.
func WrapSimpleActionGroup(obj *externglib.Object) SimpleActionGroup {
	return simpleActionGroup{
		Objector: obj,
	}
}

func marshalSimpleActionGroup(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapSimpleActionGroup(obj), nil
}

// NewSimpleActionGroup:
func NewSimpleActionGroup() SimpleActionGroup {
	var _cret *C.GSimpleActionGroup // in

	_cret = C.g_simple_action_group_new()

	var _simpleActionGroup SimpleActionGroup // out

	_simpleActionGroup = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(SimpleActionGroup)

	return _simpleActionGroup
}

func (s simpleActionGroup) InsertSimpleActionGroup(action Action) {
	var _arg0 *C.GSimpleActionGroup // out
	var _arg1 *C.GAction            // out

	_arg0 = (*C.GSimpleActionGroup)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.GAction)(unsafe.Pointer(action.Native()))

	C.g_simple_action_group_insert(_arg0, _arg1)
}

func (s simpleActionGroup) LookupSimpleActionGroup(actionName string) Action {
	var _arg0 *C.GSimpleActionGroup // out
	var _arg1 *C.gchar              // out
	var _cret *C.GAction            // in

	_arg0 = (*C.GSimpleActionGroup)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.gchar)(C.CString(actionName))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.g_simple_action_group_lookup(_arg0, _arg1)

	var _action Action // out

	_action = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Action)

	return _action
}

func (s simpleActionGroup) RemoveSimpleActionGroup(actionName string) {
	var _arg0 *C.GSimpleActionGroup // out
	var _arg1 *C.gchar              // out

	_arg0 = (*C.GSimpleActionGroup)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.gchar)(C.CString(actionName))
	defer C.free(unsafe.Pointer(_arg1))

	C.g_simple_action_group_remove(_arg0, _arg1)
}

func (a simpleActionGroup) ActionAdded(actionName string) {
	WrapActionGroup(gextras.InternObject(a)).ActionAdded(actionName)
}

func (a simpleActionGroup) ActionEnabledChanged(actionName string, enabled bool) {
	WrapActionGroup(gextras.InternObject(a)).ActionEnabledChanged(actionName, enabled)
}

func (a simpleActionGroup) ActionRemoved(actionName string) {
	WrapActionGroup(gextras.InternObject(a)).ActionRemoved(actionName)
}

func (a simpleActionGroup) ActionStateChanged(actionName string, state *glib.Variant) {
	WrapActionGroup(gextras.InternObject(a)).ActionStateChanged(actionName, state)
}

func (a simpleActionGroup) ActivateAction(actionName string, parameter *glib.Variant) {
	WrapActionGroup(gextras.InternObject(a)).ActivateAction(actionName, parameter)
}

func (a simpleActionGroup) ChangeActionState(actionName string, value *glib.Variant) {
	WrapActionGroup(gextras.InternObject(a)).ChangeActionState(actionName, value)
}

func (a simpleActionGroup) ActionEnabled(actionName string) bool {
	return WrapActionGroup(gextras.InternObject(a)).ActionEnabled(actionName)
}

func (a simpleActionGroup) ActionParameterType(actionName string) *glib.VariantType {
	return WrapActionGroup(gextras.InternObject(a)).ActionParameterType(actionName)
}

func (a simpleActionGroup) ActionState(actionName string) *glib.Variant {
	return WrapActionGroup(gextras.InternObject(a)).ActionState(actionName)
}

func (a simpleActionGroup) ActionStateHint(actionName string) *glib.Variant {
	return WrapActionGroup(gextras.InternObject(a)).ActionStateHint(actionName)
}

func (a simpleActionGroup) ActionStateType(actionName string) *glib.VariantType {
	return WrapActionGroup(gextras.InternObject(a)).ActionStateType(actionName)
}

func (a simpleActionGroup) HasAction(actionName string) bool {
	return WrapActionGroup(gextras.InternObject(a)).HasAction(actionName)
}

func (a simpleActionGroup) ListActions() []string {
	return WrapActionGroup(gextras.InternObject(a)).ListActions()
}

func (a simpleActionGroup) QueryAction(actionName string) (enabled bool, parameterType *glib.VariantType, stateType *glib.VariantType, stateHint *glib.Variant, state *glib.Variant, ok bool) {
	return WrapActionGroup(gextras.InternObject(a)).QueryAction(actionName)
}

func (a simpleActionGroup) AddAction(action Action) {
	WrapActionMap(gextras.InternObject(a)).AddAction(action)
}

func (a simpleActionGroup) LookupAction(actionName string) Action {
	return WrapActionMap(gextras.InternObject(a)).LookupAction(actionName)
}

func (a simpleActionGroup) RemoveAction(actionName string) {
	WrapActionMap(gextras.InternObject(a)).RemoveAction(actionName)
}
