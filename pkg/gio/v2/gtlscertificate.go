// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gerror"
	"github.com/diamondburned/gotk4/internal/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gio-2.0 gio-unix-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <stdbool.h>
// #include <glib-object.h>
// #include <gio/gdesktopappinfo.h>
// #include <gio/gfiledescriptorbased.h>
// #include <gio/gio.h>
// #include <gio/gunixconnection.h>
// #include <gio/gunixcredentialsmessage.h>
// #include <gio/gunixfdlist.h>
// #include <gio/gunixfdmessage.h>
// #include <gio/gunixinputstream.h>
// #include <gio/gunixmounts.h>
// #include <gio/gunixoutputstream.h>
// #include <gio/gunixsocketaddress.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_tls_certificate_get_type()), F: marshalTLSCertificate},
	})
}

// TLSCertificate: a certificate used for TLS authentication and encryption.
// This can represent either a certificate only (eg, the certificate received by
// a client from a server), or the combination of a certificate and a private
// key (which is needed when acting as a ServerConnection).
type TLSCertificate interface {
	gextras.Objector

	// Issuer gets the Certificate representing @cert's issuer, if known
	Issuer() TLSCertificate
	// IsSame: check if two Certificate objects represent the same certificate.
	// The raw DER byte data of the two certificates are checked for equality.
	// This has the effect that two certificates may compare equal even if their
	// Certificate:issuer, Certificate:private-key, or
	// Certificate:private-key-pem properties differ.
	IsSame(certTwo TLSCertificate) bool
	// Verify: this verifies @cert and returns a set of CertificateFlags
	// indicating any problems found with it. This can be used to verify a
	// certificate outside the context of making a connection, or to check a
	// certificate against a CA that is not part of the system CA database.
	//
	// If @identity is not nil, @cert's name(s) will be compared against it, and
	// G_TLS_CERTIFICATE_BAD_IDENTITY will be set in the return value if it does
	// not match. If @identity is nil, that bit will never be set in the return
	// value.
	//
	// If @trusted_ca is not nil, then @cert (or one of the certificates in its
	// chain) must be signed by it, or else G_TLS_CERTIFICATE_UNKNOWN_CA will be
	// set in the return value. If @trusted_ca is nil, that bit will never be
	// set in the return value.
	//
	// (All other CertificateFlags values will always be set or unset as
	// appropriate.)
	Verify(identity SocketConnectable, trustedCa TLSCertificate) TLSCertificateFlags
}

// tlsCertificate implements the TLSCertificate interface.
type tlsCertificate struct {
	gextras.Objector
}

var _ TLSCertificate = (*tlsCertificate)(nil)

// WrapTLSCertificate wraps a GObject to the right type. It is
// primarily used internally.
func WrapTLSCertificate(obj *externglib.Object) TLSCertificate {
	return TLSCertificate{
		Objector: obj,
	}
}

func marshalTLSCertificate(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapTLSCertificate(obj), nil
}

// NewTLSCertificateFromFile constructs a class TLSCertificate.
func NewTLSCertificateFromFile(file string) (tlsCertificate TLSCertificate, err error) {
	var arg1 *C.gchar

	arg1 = (*C.gchar)(C.CString(file))
	defer C.free(unsafe.Pointer(arg1))

	var errout *C.GError
	var goerr error
	var cret C.GTlsCertificate
	var ret2 TLSCertificate

	cret = C.g_tls_certificate_new_from_file(file, &errout)

	goerr = gerror.Take(unsafe.Pointer(errout))
	ret2 = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(cret.Native()))).(TLSCertificate)

	return goerr, ret2
}

// NewTLSCertificateFromFiles constructs a class TLSCertificate.
func NewTLSCertificateFromFiles(certFile string, keyFile string) (tlsCertificate TLSCertificate, err error) {
	var arg1 *C.gchar
	var arg2 *C.gchar

	arg1 = (*C.gchar)(C.CString(certFile))
	defer C.free(unsafe.Pointer(arg1))
	arg2 = (*C.gchar)(C.CString(keyFile))
	defer C.free(unsafe.Pointer(arg2))

	var errout *C.GError
	var goerr error
	var cret C.GTlsCertificate
	var ret2 TLSCertificate

	cret = C.g_tls_certificate_new_from_files(certFile, keyFile, &errout)

	goerr = gerror.Take(unsafe.Pointer(errout))
	ret2 = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(cret.Native()))).(TLSCertificate)

	return goerr, ret2
}

// NewTLSCertificateFromPem constructs a class TLSCertificate.
func NewTLSCertificateFromPem(data string, length int) (tlsCertificate TLSCertificate, err error) {
	var arg1 *C.gchar
	var arg2 C.gssize

	arg1 = (*C.gchar)(C.CString(data))
	defer C.free(unsafe.Pointer(arg1))
	arg2 = C.gssize(length)

	var errout *C.GError
	var goerr error
	var cret C.GTlsCertificate
	var ret2 TLSCertificate

	cret = C.g_tls_certificate_new_from_pem(data, length, &errout)

	goerr = gerror.Take(unsafe.Pointer(errout))
	ret2 = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(cret.Native()))).(TLSCertificate)

	return goerr, ret2
}

// Issuer gets the Certificate representing @cert's issuer, if known
func (c tlsCertificate) Issuer() TLSCertificate {
	var arg0 *C.GTlsCertificate

	arg0 = (*C.GTlsCertificate)(unsafe.Pointer(c.Native()))

	var cret *C.GTlsCertificate
	var ret1 TLSCertificate

	cret = C.g_tls_certificate_get_issuer(arg0)

	ret1 = gextras.CastObject(externglib.Take(unsafe.Pointer(cret.Native()))).(TLSCertificate)

	return ret1
}

// IsSame: check if two Certificate objects represent the same certificate.
// The raw DER byte data of the two certificates are checked for equality.
// This has the effect that two certificates may compare equal even if their
// Certificate:issuer, Certificate:private-key, or
// Certificate:private-key-pem properties differ.
func (c tlsCertificate) IsSame(certTwo TLSCertificate) bool {
	var arg0 *C.GTlsCertificate
	var arg1 *C.GTlsCertificate

	arg0 = (*C.GTlsCertificate)(unsafe.Pointer(c.Native()))
	arg1 = (*C.GTlsCertificate)(unsafe.Pointer(certTwo.Native()))

	var cret C.gboolean
	var ret1 bool

	cret = C.g_tls_certificate_is_same(arg0, certTwo)

	ret1 = C.bool(cret) != C.false

	return ret1
}

// Verify: this verifies @cert and returns a set of CertificateFlags
// indicating any problems found with it. This can be used to verify a
// certificate outside the context of making a connection, or to check a
// certificate against a CA that is not part of the system CA database.
//
// If @identity is not nil, @cert's name(s) will be compared against it, and
// G_TLS_CERTIFICATE_BAD_IDENTITY will be set in the return value if it does
// not match. If @identity is nil, that bit will never be set in the return
// value.
//
// If @trusted_ca is not nil, then @cert (or one of the certificates in its
// chain) must be signed by it, or else G_TLS_CERTIFICATE_UNKNOWN_CA will be
// set in the return value. If @trusted_ca is nil, that bit will never be
// set in the return value.
//
// (All other CertificateFlags values will always be set or unset as
// appropriate.)
func (c tlsCertificate) Verify(identity SocketConnectable, trustedCa TLSCertificate) TLSCertificateFlags {
	var arg0 *C.GTlsCertificate
	var arg1 *C.GSocketConnectable
	var arg2 *C.GTlsCertificate

	arg0 = (*C.GTlsCertificate)(unsafe.Pointer(c.Native()))
	arg1 = (*C.GSocketConnectable)(unsafe.Pointer(identity.Native()))
	arg2 = (*C.GTlsCertificate)(unsafe.Pointer(trustedCa.Native()))

	var cret C.GTlsCertificateFlags
	var ret1 TLSCertificateFlags

	cret = C.g_tls_certificate_verify(arg0, identity, trustedCa)

	ret1 = TLSCertificateFlags(cret)

	return ret1
}
