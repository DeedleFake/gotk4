// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/box"
	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gio-2.0 gio-unix-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <gio/gdesktopappinfo.h>
// #include <gio/gfiledescriptorbased.h>
// #include <gio/gio.h>
// #include <gio/gunixconnection.h>
// #include <gio/gunixcredentialsmessage.h>
// #include <gio/gunixfdlist.h>
// #include <gio/gunixfdmessage.h>
// #include <gio/gunixinputstream.h>
// #include <gio/gunixmounts.h>
// #include <gio/gunixoutputstream.h>
// #include <gio/gunixsocketaddress.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_proxy_address_get_type()), F: marshalProxyAddress},
	})
}

// ProxyAddress: support for proxied SocketAddress.
type ProxyAddress interface {
	InetSocketAddress

	// AsInetSocketAddress casts the class to the InetSocketAddress interface.
	AsInetSocketAddress() InetSocketAddress
	// AsSocketConnectable casts the class to the SocketConnectable interface.
	AsSocketConnectable() SocketConnectable

	// GetAddress gets @address's Address.
	//
	// This method is inherited from InetSocketAddress
	GetAddress() InetAddress
	// GetFlowinfo gets the `sin6_flowinfo` field from @address, which must be
	// an IPv6 address.
	//
	// This method is inherited from InetSocketAddress
	GetFlowinfo() uint32
	// GetPort gets @address's port.
	//
	// This method is inherited from InetSocketAddress
	GetPort() uint16
	// GetScopeID gets the `sin6_scope_id` field from @address, which must be an
	// IPv6 address.
	//
	// This method is inherited from InetSocketAddress
	GetScopeID() uint32
	// GetFamily gets the socket family type of @address.
	//
	// This method is inherited from SocketAddress
	GetFamily() SocketFamily
	// GetNativeSize gets the size of @address's native struct sockaddr. You can
	// use this to allocate memory to pass to g_socket_address_to_native().
	//
	// This method is inherited from SocketAddress
	GetNativeSize() int
	// ToNative converts a Address to a native struct sockaddr, which can be
	// passed to low-level functions like connect() or bind().
	//
	// If not enough space is available, a G_IO_ERROR_NO_SPACE error is
	// returned. If the address type is not known on the system then a
	// G_IO_ERROR_NOT_SUPPORTED error is returned.
	//
	// This method is inherited from SocketAddress
	ToNative(dest interface{}, destlen uint) error
	// Enumerate creates a AddressEnumerator for @connectable.
	//
	// This method is inherited from SocketConnectable
	Enumerate() SocketAddressEnumerator
	// ProxyEnumerate creates a AddressEnumerator for @connectable that will
	// return a Address for each of its addresses that you must connect to via a
	// proxy.
	//
	// If @connectable does not implement
	// g_socket_connectable_proxy_enumerate(), this will fall back to calling
	// g_socket_connectable_enumerate().
	//
	// This method is inherited from SocketConnectable
	ProxyEnumerate() SocketAddressEnumerator
	// ToString: format a Connectable as a string. This is a human-readable
	// format for use in debugging output, and is not a stable serialization
	// format. It is not suitable for use in user interfaces as it exposes too
	// much information for a user.
	//
	// If the Connectable implementation does not support string formatting, the
	// implementation’s type name will be returned as a fallback.
	//
	// This method is inherited from SocketConnectable
	ToString() string
	// Enumerate creates a AddressEnumerator for @connectable.
	//
	// This method is inherited from SocketConnectable
	Enumerate() SocketAddressEnumerator
	// ProxyEnumerate creates a AddressEnumerator for @connectable that will
	// return a Address for each of its addresses that you must connect to via a
	// proxy.
	//
	// If @connectable does not implement
	// g_socket_connectable_proxy_enumerate(), this will fall back to calling
	// g_socket_connectable_enumerate().
	//
	// This method is inherited from SocketConnectable
	ProxyEnumerate() SocketAddressEnumerator
	// ToString: format a Connectable as a string. This is a human-readable
	// format for use in debugging output, and is not a stable serialization
	// format. It is not suitable for use in user interfaces as it exposes too
	// much information for a user.
	//
	// If the Connectable implementation does not support string formatting, the
	// implementation’s type name will be returned as a fallback.
	//
	// This method is inherited from SocketConnectable
	ToString() string
	// Enumerate creates a AddressEnumerator for @connectable.
	//
	// This method is inherited from SocketConnectable
	Enumerate() SocketAddressEnumerator
	// ProxyEnumerate creates a AddressEnumerator for @connectable that will
	// return a Address for each of its addresses that you must connect to via a
	// proxy.
	//
	// If @connectable does not implement
	// g_socket_connectable_proxy_enumerate(), this will fall back to calling
	// g_socket_connectable_enumerate().
	//
	// This method is inherited from SocketConnectable
	ProxyEnumerate() SocketAddressEnumerator
	// ToString: format a Connectable as a string. This is a human-readable
	// format for use in debugging output, and is not a stable serialization
	// format. It is not suitable for use in user interfaces as it exposes too
	// much information for a user.
	//
	// If the Connectable implementation does not support string formatting, the
	// implementation’s type name will be returned as a fallback.
	//
	// This method is inherited from SocketConnectable
	ToString() string

	// DestinationHostname gets @proxy's destination hostname; that is, the name
	// of the host that will be connected to via the proxy, not the name of the
	// proxy itself.
	DestinationHostname() string
	// DestinationPort gets @proxy's destination port; that is, the port on the
	// destination host that will be connected to via the proxy, not the port
	// number of the proxy itself.
	DestinationPort() uint16
	// DestinationProtocol gets the protocol that is being spoken to the
	// destination server; eg, "http" or "ftp".
	DestinationProtocol() string
	// Password gets @proxy's password.
	Password() string
	// Protocol gets @proxy's protocol. eg, "socks" or "http"
	Protocol() string
	// URI gets the proxy URI that @proxy was constructed from.
	URI() string
	// Username gets @proxy's username.
	Username() string
}

// proxyAddress implements the ProxyAddress interface.
type proxyAddress struct {
	*externglib.Object
}

var _ ProxyAddress = (*proxyAddress)(nil)

// WrapProxyAddress wraps a GObject to a type that implements
// interface ProxyAddress. It is primarily used internally.
func WrapProxyAddress(obj *externglib.Object) ProxyAddress {
	return proxyAddress{obj}
}

func marshalProxyAddress(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapProxyAddress(obj), nil
}

// NewProxyAddress creates a new Address for @inetaddr with @protocol that
// should tunnel through @dest_hostname and @dest_port.
//
// (Note that this method doesn't set the Address:uri or
// Address:destination-protocol fields; use g_object_new() directly if you want
// to set those.)
func NewProxyAddress(inetaddr InetAddress, port uint16, protocol string, destHostname string, destPort uint16, username string, password string) ProxyAddress {
	var _arg1 *C.GInetAddress   // out
	var _arg2 C.guint16         // out
	var _arg3 *C.gchar          // out
	var _arg4 *C.gchar          // out
	var _arg5 C.guint16         // out
	var _arg6 *C.gchar          // out
	var _arg7 *C.gchar          // out
	var _cret *C.GSocketAddress // in

	_arg1 = (*C.GInetAddress)(unsafe.Pointer(inetaddr.Native()))
	_arg2 = C.guint16(port)
	_arg3 = (*C.gchar)(C.CString(protocol))
	defer C.free(unsafe.Pointer(_arg3))
	_arg4 = (*C.gchar)(C.CString(destHostname))
	defer C.free(unsafe.Pointer(_arg4))
	_arg5 = C.guint16(destPort)
	_arg6 = (*C.gchar)(C.CString(username))
	defer C.free(unsafe.Pointer(_arg6))
	_arg7 = (*C.gchar)(C.CString(password))
	defer C.free(unsafe.Pointer(_arg7))

	_cret = C.g_proxy_address_new(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7)

	var _proxyAddress ProxyAddress // out

	_proxyAddress = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(ProxyAddress)

	return _proxyAddress
}

func (p proxyAddress) AsInetSocketAddress() InetSocketAddress {
	return WrapInetSocketAddress(gextras.InternObject(p))
}

func (p proxyAddress) AsSocketConnectable() SocketConnectable {
	return WrapSocketConnectable(gextras.InternObject(p))
}

func (a proxyAddress) GetAddress() InetAddress {
	return WrapInetSocketAddress(gextras.InternObject(a)).GetAddress()
}

func (a proxyAddress) GetFlowinfo() uint32 {
	return WrapInetSocketAddress(gextras.InternObject(a)).GetFlowinfo()
}

func (a proxyAddress) GetPort() uint16 {
	return WrapInetSocketAddress(gextras.InternObject(a)).GetPort()
}

func (a proxyAddress) GetScopeID() uint32 {
	return WrapInetSocketAddress(gextras.InternObject(a)).GetScopeID()
}

func (a proxyAddress) GetFamily() SocketFamily {
	return WrapSocketAddress(gextras.InternObject(a)).GetFamily()
}

func (a proxyAddress) GetNativeSize() int {
	return WrapSocketAddress(gextras.InternObject(a)).GetNativeSize()
}

func (a proxyAddress) ToNative(dest interface{}, destlen uint) error {
	return WrapSocketAddress(gextras.InternObject(a)).ToNative(dest, destlen)
}

func (c proxyAddress) Enumerate() SocketAddressEnumerator {
	return WrapSocketConnectable(gextras.InternObject(c)).Enumerate()
}

func (c proxyAddress) ProxyEnumerate() SocketAddressEnumerator {
	return WrapSocketConnectable(gextras.InternObject(c)).ProxyEnumerate()
}

func (c proxyAddress) ToString() string {
	return WrapSocketConnectable(gextras.InternObject(c)).ToString()
}

func (c proxyAddress) Enumerate() SocketAddressEnumerator {
	return WrapSocketConnectable(gextras.InternObject(c)).Enumerate()
}

func (c proxyAddress) ProxyEnumerate() SocketAddressEnumerator {
	return WrapSocketConnectable(gextras.InternObject(c)).ProxyEnumerate()
}

func (c proxyAddress) ToString() string {
	return WrapSocketConnectable(gextras.InternObject(c)).ToString()
}

func (c proxyAddress) Enumerate() SocketAddressEnumerator {
	return WrapSocketConnectable(gextras.InternObject(c)).Enumerate()
}

func (c proxyAddress) ProxyEnumerate() SocketAddressEnumerator {
	return WrapSocketConnectable(gextras.InternObject(c)).ProxyEnumerate()
}

func (c proxyAddress) ToString() string {
	return WrapSocketConnectable(gextras.InternObject(c)).ToString()
}

func (p proxyAddress) DestinationHostname() string {
	var _arg0 *C.GProxyAddress // out
	var _cret *C.gchar         // in

	_arg0 = (*C.GProxyAddress)(unsafe.Pointer(p.Native()))

	_cret = C.g_proxy_address_get_destination_hostname(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

func (p proxyAddress) DestinationPort() uint16 {
	var _arg0 *C.GProxyAddress // out
	var _cret C.guint16        // in

	_arg0 = (*C.GProxyAddress)(unsafe.Pointer(p.Native()))

	_cret = C.g_proxy_address_get_destination_port(_arg0)

	var _guint16 uint16 // out

	_guint16 = uint16(_cret)

	return _guint16
}

func (p proxyAddress) DestinationProtocol() string {
	var _arg0 *C.GProxyAddress // out
	var _cret *C.gchar         // in

	_arg0 = (*C.GProxyAddress)(unsafe.Pointer(p.Native()))

	_cret = C.g_proxy_address_get_destination_protocol(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

func (p proxyAddress) Password() string {
	var _arg0 *C.GProxyAddress // out
	var _cret *C.gchar         // in

	_arg0 = (*C.GProxyAddress)(unsafe.Pointer(p.Native()))

	_cret = C.g_proxy_address_get_password(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

func (p proxyAddress) Protocol() string {
	var _arg0 *C.GProxyAddress // out
	var _cret *C.gchar         // in

	_arg0 = (*C.GProxyAddress)(unsafe.Pointer(p.Native()))

	_cret = C.g_proxy_address_get_protocol(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

func (p proxyAddress) URI() string {
	var _arg0 *C.GProxyAddress // out
	var _cret *C.gchar         // in

	_arg0 = (*C.GProxyAddress)(unsafe.Pointer(p.Native()))

	_cret = C.g_proxy_address_get_uri(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

func (p proxyAddress) Username() string {
	var _arg0 *C.GProxyAddress // out
	var _cret *C.gchar         // in

	_arg0 = (*C.GProxyAddress)(unsafe.Pointer(p.Native()))

	_cret = C.g_proxy_address_get_username(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}
