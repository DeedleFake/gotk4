// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gio-2.0 gio-unix-2.0 glib-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <gio/gdesktopappinfo.h>
// #include <gio/gfiledescriptorbased.h>
// #include <gio/gio.h>
// #include <gio/gunixconnection.h>
// #include <gio/gunixcredentialsmessage.h>
// #include <gio/gunixfdlist.h>
// #include <gio/gunixfdmessage.h>
// #include <gio/gunixinputstream.h>
// #include <gio/gunixmounts.h>
// #include <gio/gunixoutputstream.h>
// #include <gio/gunixsocketaddress.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_list_store_get_type()), F: marshalListStore},
	})
}

// ListStore is a simple implementation of Model that stores all items in
// memory.
//
// It provides insertions, deletions, and lookups in logarithmic time with a
// fast path for the common case of iterating the list linearly.
type ListStore interface {
	gextras.Objector
	ListModel

	// Remove removes the item from @store that is at @position. @position must
	// be smaller than the current length of the list.
	//
	// Use g_list_store_splice() to remove multiple items at the same time
	// efficiently.
	Remove(position uint)
	// RemoveAll removes all items from @store.
	RemoveAll()
}

// listStore implements the ListStore class.
type listStore struct {
	gextras.Objector
	ListModel
}

var _ ListStore = (*listStore)(nil)

// WrapListStore wraps a GObject to the right type. It is
// primarily used internally.
func WrapListStore(obj *externglib.Object) ListStore {
	return listStore{
		Objector:  obj,
		ListModel: WrapListModel(obj),
	}
}

func marshalListStore(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapListStore(obj), nil
}

// NewListStore constructs a class ListStore.
func NewListStore(itemType externglib.Type) ListStore {
	var _arg1 C.GType // out

	_arg1 = C.GType(itemType)

	var _cret C.GListStore // in

	_cret = C.g_list_store_new(_arg1)

	var _listStore ListStore // out

	_listStore = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret.Native()))).(ListStore)

	return _listStore
}

// Remove removes the item from @store that is at @position. @position must
// be smaller than the current length of the list.
//
// Use g_list_store_splice() to remove multiple items at the same time
// efficiently.
func (s listStore) Remove(position uint) {
	var _arg0 *C.GListStore // out
	var _arg1 C.guint       // out

	_arg0 = (*C.GListStore)(unsafe.Pointer(s.Native()))
	_arg1 = C.guint(position)

	C.g_list_store_remove(_arg0, _arg1)
}

// RemoveAll removes all items from @store.
func (s listStore) RemoveAll() {
	var _arg0 *C.GListStore // out

	_arg0 = (*C.GListStore)(unsafe.Pointer(s.Native()))

	C.g_list_store_remove_all(_arg0)
}
