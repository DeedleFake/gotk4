// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/box"
	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gio-2.0 gio-unix-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <gio/gdesktopappinfo.h>
// #include <gio/gfiledescriptorbased.h>
// #include <gio/gio.h>
// #include <gio/gunixconnection.h>
// #include <gio/gunixcredentialsmessage.h>
// #include <gio/gunixfdlist.h>
// #include <gio/gunixfdmessage.h>
// #include <gio/gunixinputstream.h>
// #include <gio/gunixmounts.h>
// #include <gio/gunixoutputstream.h>
// #include <gio/gunixsocketaddress.h>
// #include <glib-object.h>
//
// void gotk4_AsyncReadyCallback(GObject*, GAsyncResult*, gpointer);
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_dbus_object_manager_client_get_type()), F: marshalDBusObjectManagerClient},
	})
}

// DBusObjectManagerClient is used to create, monitor and delete object proxies
// for remote objects exported by a BusObjectManagerServer (or any code
// implementing the org.freedesktop.DBus.ObjectManager
// (http://dbus.freedesktop.org/doc/dbus-specification.html#standard-interfaces-objectmanager)
// interface).
//
// Once an instance of this type has been created, you can connect to the
// BusObjectManager::object-added and BusObjectManager::object-removed signals
// and inspect the BusObjectProxy objects returned by
// g_dbus_object_manager_get_objects().
//
// If the name for a BusObjectManagerClient is not owned by anyone at object
// construction time, the default behavior is to request the message bus to
// launch an owner for the name. This behavior can be disabled using the
// G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_DO_NOT_AUTO_START flag. It's also worth
// noting that this only works if the name of interest is activatable in the
// first place. E.g. in some cases it is not possible to launch an owner for the
// requested name. In this case, BusObjectManagerClient object construction
// still succeeds but there will be no object proxies (e.g.
// g_dbus_object_manager_get_objects() returns the empty list) and the
// BusObjectManagerClient:name-owner property is nil.
//
// The owner of the requested name can come and go (for example consider a
// system service being restarted) – BusObjectManagerClient handles this case
// too; simply connect to the #GObject::notify signal to watch for changes on
// the BusObjectManagerClient:name-owner property. When the name owner vanishes,
// the behavior is that BusObjectManagerClient:name-owner is set to nil (this
// includes emission of the #GObject::notify signal) and then
// BusObjectManager::object-removed signals are synthesized for all currently
// existing object proxies. Since BusObjectManagerClient:name-owner is nil when
// this happens, you can use this information to disambiguate a synthesized
// signal from a genuine signal caused by object removal on the remote
// BusObjectManager. Similarly, when a new name owner appears,
// BusObjectManager::object-added signals are synthesized while
// BusObjectManagerClient:name-owner is still nil. Only when all object proxies
// have been added, the BusObjectManagerClient:name-owner is set to the new name
// owner (this includes emission of the #GObject::notify signal). Furthermore,
// you are guaranteed that BusObjectManagerClient:name-owner will alternate
// between a name owner (e.g. `:1.42`) and nil even in the case where the name
// of interest is atomically replaced
//
// Ultimately, BusObjectManagerClient is used to obtain BusProxy instances. All
// signals (including the org.freedesktop.DBus.Properties::PropertiesChanged
// signal) delivered to BusProxy instances are guaranteed to originate from the
// name owner. This guarantee along with the behavior described above, means
// that certain race conditions including the "half the proxy is from the old
// owner and the other half is from the new owner" problem cannot happen.
//
// To avoid having the application connect to signals on the returned
// BusObjectProxy and BusProxy objects, the BusObject::interface-added,
// BusObject::interface-removed, BusProxy::g-properties-changed and
// BusProxy::g-signal signals are also emitted on the BusObjectManagerClient
// instance managing these objects. The signals emitted are
// BusObjectManager::interface-added, BusObjectManager::interface-removed,
// BusObjectManagerClient::interface-proxy-properties-changed and
// BusObjectManagerClient::interface-proxy-signal.
//
// Note that all callbacks and signals are emitted in the [thread-default main
// context][g-main-context-push-thread-default] that the BusObjectManagerClient
// object was constructed in. Additionally, the BusObjectProxy and BusProxy
// objects originating from the BusObjectManagerClient object will be created in
// the same context and, consequently, will deliver signals in the same main
// loop.
type DBusObjectManagerClient interface {
	gextras.Objector

	// AsAsyncInitable casts the class to the AsyncInitable interface.
	AsAsyncInitable() AsyncInitable
	// AsDBusObjectManager casts the class to the DBusObjectManager interface.
	AsDBusObjectManager() DBusObjectManager
	// AsInitable casts the class to the Initable interface.
	AsInitable() Initable

	// InitAsync starts asynchronous initialization of the object implementing
	// the interface. This must be done before any real use of the object after
	// initial construction. If the object also implements #GInitable you can
	// optionally call g_initable_init() instead.
	//
	// This method is intended for language bindings. If writing in C,
	// g_async_initable_new_async() should typically be used instead.
	//
	// When the initialization is finished, @callback will be called. You can
	// then call g_async_initable_init_finish() to get the result of the
	// initialization.
	//
	// Implementations may also support cancellation. If @cancellable is not
	// nil, then initialization can be cancelled by triggering the cancellable
	// object from another thread. If the operation was cancelled, the error
	// G_IO_ERROR_CANCELLED will be returned. If @cancellable is not nil, and
	// the object doesn't support cancellable initialization, the error
	// G_IO_ERROR_NOT_SUPPORTED will be returned.
	//
	// As with #GInitable, if the object is not initialized, or initialization
	// returns with an error, then all operations on the object except
	// g_object_ref() and g_object_unref() are considered to be invalid, and
	// have undefined behaviour. They will often fail with g_critical() or
	// g_warning(), but this must not be relied on.
	//
	// Callers should not assume that a class which implements Initable can be
	// initialized multiple times; for more information, see g_initable_init().
	// If a class explicitly supports being initialized multiple times,
	// implementation requires yielding all subsequent calls to init_async() on
	// the results of the first call.
	//
	// For classes that also support the #GInitable interface, the default
	// implementation of this method will run the g_initable_init() function in
	// a thread, so if you want to support asynchronous initialization via
	// threads, just implement the Initable interface without overriding any
	// interface methods.
	//
	// This method is inherited from AsyncInitable
	InitAsync(ioPriority int, cancellable Cancellable, callback AsyncReadyCallback)
	// InitFinish finishes asynchronous initialization and returns the result.
	// See g_async_initable_init_async().
	//
	// This method is inherited from AsyncInitable
	InitFinish(res AsyncResult) error
	// NewFinish finishes the async construction for the various
	// g_async_initable_new calls, returning the created object or nil on error.
	//
	// This method is inherited from AsyncInitable
	NewFinish(res AsyncResult) (gextras.Objector, error)
	// GetInterface gets the interface proxy for @interface_name at
	// @object_path, if any.
	//
	// This method is inherited from DBusObjectManager
	GetInterface(objectPath string, interfaceName string) DBusInterface
	// GetObject gets the BusObjectProxy at @object_path, if any.
	//
	// This method is inherited from DBusObjectManager
	GetObject(objectPath string) DBusObject
	// GetObjectPath gets the object path that @manager is for.
	//
	// This method is inherited from DBusObjectManager
	GetObjectPath() string
	// Init initializes the object implementing the interface.
	//
	// This method is intended for language bindings. If writing in C,
	// g_initable_new() should typically be used instead.
	//
	// The object must be initialized before any real use after initial
	// construction, either with this function or g_async_initable_init_async().
	//
	// Implementations may also support cancellation. If @cancellable is not
	// nil, then initialization can be cancelled by triggering the cancellable
	// object from another thread. If the operation was cancelled, the error
	// G_IO_ERROR_CANCELLED will be returned. If @cancellable is not nil and the
	// object doesn't support cancellable initialization the error
	// G_IO_ERROR_NOT_SUPPORTED will be returned.
	//
	// If the object is not initialized, or initialization returns with an
	// error, then all operations on the object except g_object_ref() and
	// g_object_unref() are considered to be invalid, and have undefined
	// behaviour. See the [introduction][ginitable] for more details.
	//
	// Callers should not assume that a class which implements #GInitable can be
	// initialized multiple times, unless the class explicitly documents itself
	// as supporting this. Generally, a class’ implementation of init() can
	// assume (and assert) that it will only be called once. Previously, this
	// documentation recommended all #GInitable implementations should be
	// idempotent; that recommendation was relaxed in GLib 2.54.
	//
	// If a class explicitly supports being initialized multiple times, it is
	// recommended that the method is idempotent: multiple calls with the same
	// arguments should return the same results. Only the first call initializes
	// the object; further calls return the result of the first call.
	//
	// One reason why a class might need to support idempotent initialization is
	// if it is designed to be used via the singleton pattern, with a
	// Class.constructor that sometimes returns an existing instance. In this
	// pattern, a caller would expect to be able to call g_initable_init() on
	// the result of g_object_new(), regardless of whether it is in fact a new
	// instance.
	//
	// This method is inherited from Initable
	Init(cancellable Cancellable) error

	// Connection gets the BusConnection used by @manager.
	Connection() DBusConnection
	// Flags gets the flags that @manager was constructed with.
	Flags() DBusObjectManagerClientFlags
	// Name gets the name that @manager is for, or nil if not a message bus
	// connection.
	Name() string
	// NameOwner: the unique name that owns the name that @manager is for or nil
	// if no-one currently owns that name. You can connect to the
	// #GObject::notify signal to track changes to the
	// BusObjectManagerClient:name-owner property.
	NameOwner() string
}

// dBusObjectManagerClient implements the DBusObjectManagerClient interface.
type dBusObjectManagerClient struct {
	*externglib.Object
}

var _ DBusObjectManagerClient = (*dBusObjectManagerClient)(nil)

// WrapDBusObjectManagerClient wraps a GObject to a type that implements
// interface DBusObjectManagerClient. It is primarily used internally.
func WrapDBusObjectManagerClient(obj *externglib.Object) DBusObjectManagerClient {
	return dBusObjectManagerClient{obj}
}

func marshalDBusObjectManagerClient(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapDBusObjectManagerClient(obj), nil
}

// NewDBusObjectManagerClientFinish finishes an operation started with
// g_dbus_object_manager_client_new().
func NewDBusObjectManagerClientFinish(res AsyncResult) (DBusObjectManagerClient, error) {
	var _arg1 *C.GAsyncResult       // out
	var _cret *C.GDBusObjectManager // in
	var _cerr *C.GError             // in

	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(res.Native()))

	_cret = C.g_dbus_object_manager_client_new_finish(_arg1, &_cerr)

	var _dBusObjectManagerClient DBusObjectManagerClient // out
	var _goerr error                                     // out

	_dBusObjectManagerClient = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(DBusObjectManagerClient)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _dBusObjectManagerClient, _goerr
}

// NewDBusObjectManagerClientForBusFinish finishes an operation started with
// g_dbus_object_manager_client_new_for_bus().
func NewDBusObjectManagerClientForBusFinish(res AsyncResult) (DBusObjectManagerClient, error) {
	var _arg1 *C.GAsyncResult       // out
	var _cret *C.GDBusObjectManager // in
	var _cerr *C.GError             // in

	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(res.Native()))

	_cret = C.g_dbus_object_manager_client_new_for_bus_finish(_arg1, &_cerr)

	var _dBusObjectManagerClient DBusObjectManagerClient // out
	var _goerr error                                     // out

	_dBusObjectManagerClient = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(DBusObjectManagerClient)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _dBusObjectManagerClient, _goerr
}

func (d dBusObjectManagerClient) AsAsyncInitable() AsyncInitable {
	return WrapAsyncInitable(gextras.InternObject(d))
}

func (d dBusObjectManagerClient) AsDBusObjectManager() DBusObjectManager {
	return WrapDBusObjectManager(gextras.InternObject(d))
}

func (d dBusObjectManagerClient) AsInitable() Initable {
	return WrapInitable(gextras.InternObject(d))
}

func (i dBusObjectManagerClient) InitAsync(ioPriority int, cancellable Cancellable, callback AsyncReadyCallback) {
	WrapAsyncInitable(gextras.InternObject(i)).InitAsync(ioPriority, cancellable, callback)
}

func (i dBusObjectManagerClient) InitFinish(res AsyncResult) error {
	return WrapAsyncInitable(gextras.InternObject(i)).InitFinish(res)
}

func (i dBusObjectManagerClient) NewFinish(res AsyncResult) (gextras.Objector, error) {
	return WrapAsyncInitable(gextras.InternObject(i)).NewFinish(res)
}

func (m dBusObjectManagerClient) GetInterface(objectPath string, interfaceName string) DBusInterface {
	return WrapDBusObjectManager(gextras.InternObject(m)).GetInterface(objectPath, interfaceName)
}

func (m dBusObjectManagerClient) GetObject(objectPath string) DBusObject {
	return WrapDBusObjectManager(gextras.InternObject(m)).GetObject(objectPath)
}

func (m dBusObjectManagerClient) GetObjectPath() string {
	return WrapDBusObjectManager(gextras.InternObject(m)).GetObjectPath()
}

func (i dBusObjectManagerClient) Init(cancellable Cancellable) error {
	return WrapInitable(gextras.InternObject(i)).Init(cancellable)
}

func (m dBusObjectManagerClient) Connection() DBusConnection {
	var _arg0 *C.GDBusObjectManagerClient // out
	var _cret *C.GDBusConnection          // in

	_arg0 = (*C.GDBusObjectManagerClient)(unsafe.Pointer(m.Native()))

	_cret = C.g_dbus_object_manager_client_get_connection(_arg0)

	var _dBusConnection DBusConnection // out

	_dBusConnection = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(DBusConnection)

	return _dBusConnection
}

func (m dBusObjectManagerClient) Flags() DBusObjectManagerClientFlags {
	var _arg0 *C.GDBusObjectManagerClient     // out
	var _cret C.GDBusObjectManagerClientFlags // in

	_arg0 = (*C.GDBusObjectManagerClient)(unsafe.Pointer(m.Native()))

	_cret = C.g_dbus_object_manager_client_get_flags(_arg0)

	var _dBusObjectManagerClientFlags DBusObjectManagerClientFlags // out

	_dBusObjectManagerClientFlags = DBusObjectManagerClientFlags(_cret)

	return _dBusObjectManagerClientFlags
}

func (m dBusObjectManagerClient) Name() string {
	var _arg0 *C.GDBusObjectManagerClient // out
	var _cret *C.gchar                    // in

	_arg0 = (*C.GDBusObjectManagerClient)(unsafe.Pointer(m.Native()))

	_cret = C.g_dbus_object_manager_client_get_name(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

func (m dBusObjectManagerClient) NameOwner() string {
	var _arg0 *C.GDBusObjectManagerClient // out
	var _cret *C.gchar                    // in

	_arg0 = (*C.GDBusObjectManagerClient)(unsafe.Pointer(m.Native()))

	_cret = C.g_dbus_object_manager_client_get_name_owner(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}
