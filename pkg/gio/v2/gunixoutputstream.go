// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/box"
	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gio-2.0 gio-unix-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <gio/gdesktopappinfo.h>
// #include <gio/gfiledescriptorbased.h>
// #include <gio/gio.h>
// #include <gio/gunixconnection.h>
// #include <gio/gunixcredentialsmessage.h>
// #include <gio/gunixfdlist.h>
// #include <gio/gunixfdmessage.h>
// #include <gio/gunixinputstream.h>
// #include <gio/gunixmounts.h>
// #include <gio/gunixoutputstream.h>
// #include <gio/gunixsocketaddress.h>
// #include <glib-object.h>
//
// void gotk4_AsyncReadyCallback(GObject*, GAsyncResult*, gpointer);
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_unix_output_stream_get_type()), F: marshalUnixOutputStream},
	})
}

// UnixOutputStream implements Stream for writing to a UNIX file descriptor,
// including asynchronous operations. (If the file descriptor refers to a socket
// or pipe, this will use poll() to do asynchronous I/O. If it refers to a
// regular file, it will fall back to doing asynchronous I/O in another thread.)
//
// Note that `<gio/gunixoutputstream.h>` belongs to the UNIX-specific GIO
// interfaces, thus you have to use the `gio-unix-2.0.pc` pkg-config file when
// using it.
type UnixOutputStream interface {
	gextras.Objector

	// AsOutputStream casts the class to the OutputStream interface.
	AsOutputStream() OutputStream
	// AsFileDescriptorBased casts the class to the FileDescriptorBased interface.
	AsFileDescriptorBased() FileDescriptorBased
	// AsPollableOutputStream casts the class to the PollableOutputStream interface.
	AsPollableOutputStream() PollableOutputStream

	// ClearPending clears the pending flag on @stream.
	//
	// This method is inherited from OutputStream
	ClearPending()
	// Close closes the stream, releasing resources related to it.
	//
	// Once the stream is closed, all other operations will return
	// G_IO_ERROR_CLOSED. Closing a stream multiple times will not return an
	// error.
	//
	// Closing a stream will automatically flush any outstanding buffers in the
	// stream.
	//
	// Streams will be automatically closed when the last reference is dropped,
	// but you might want to call this function to make sure resources are
	// released as early as possible.
	//
	// Some streams might keep the backing store of the stream (e.g. a file
	// descriptor) open after the stream is closed. See the documentation for
	// the individual stream for details.
	//
	// On failure the first error that happened will be reported, but the close
	// operation will finish as much as possible. A stream that failed to close
	// will still return G_IO_ERROR_CLOSED for all operations. Still, it is
	// important to check and report the error to the user, otherwise there
	// might be a loss of data as all data might not be written.
	//
	// If @cancellable is not nil, then the operation can be cancelled by
	// triggering the cancellable object from another thread. If the operation
	// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
	// Cancelling a close will still leave the stream closed, but there some
	// streams can use a faster close that doesn't block to e.g. check errors.
	// On cancellation (as with any error) there is no guarantee that all
	// written data will reach the target.
	//
	// This method is inherited from OutputStream
	Close(cancellable Cancellable) error
	// CloseAsync requests an asynchronous close of the stream, releasing
	// resources related to it. When the operation is finished @callback will be
	// called. You can then call g_output_stream_close_finish() to get the
	// result of the operation.
	//
	// For behaviour details see g_output_stream_close().
	//
	// The asynchronous methods have a default fallback that uses threads to
	// implement asynchronicity, so they are optional for inheriting classes.
	// However, if you override one you must override all.
	//
	// This method is inherited from OutputStream
	CloseAsync(ioPriority int, cancellable Cancellable, callback AsyncReadyCallback)
	// CloseFinish closes an output stream.
	//
	// This method is inherited from OutputStream
	CloseFinish(result AsyncResult) error
	// Flush forces a write of all user-space buffered data for the given
	// @stream. Will block during the operation. Closing the stream will
	// implicitly cause a flush.
	//
	// This function is optional for inherited classes.
	//
	// If @cancellable is not nil, then the operation can be cancelled by
	// triggering the cancellable object from another thread. If the operation
	// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
	//
	// This method is inherited from OutputStream
	Flush(cancellable Cancellable) error
	// FlushAsync forces an asynchronous write of all user-space buffered data
	// for the given @stream. For behaviour details see g_output_stream_flush().
	//
	// When the operation is finished @callback will be called. You can then
	// call g_output_stream_flush_finish() to get the result of the operation.
	//
	// This method is inherited from OutputStream
	FlushAsync(ioPriority int, cancellable Cancellable, callback AsyncReadyCallback)
	// FlushFinish finishes flushing an output stream.
	//
	// This method is inherited from OutputStream
	FlushFinish(result AsyncResult) error
	// HasPending checks if an output stream has pending actions.
	//
	// This method is inherited from OutputStream
	HasPending() bool
	// IsClosed checks if an output stream has already been closed.
	//
	// This method is inherited from OutputStream
	IsClosed() bool
	// IsClosing checks if an output stream is being closed. This can be used
	// inside e.g. a flush implementation to see if the flush (or other i/o
	// operation) is called from within the closing operation.
	//
	// This method is inherited from OutputStream
	IsClosing() bool
	// SetPending sets @stream to have actions pending. If the pending flag is
	// already set or @stream is closed, it will return false and set @error.
	//
	// This method is inherited from OutputStream
	SetPending() error
	// Splice splices an input stream into an output stream.
	//
	// This method is inherited from OutputStream
	Splice(source InputStream, flags OutputStreamSpliceFlags, cancellable Cancellable) (int, error)
	// SpliceAsync splices a stream asynchronously. When the operation is
	// finished @callback will be called. You can then call
	// g_output_stream_splice_finish() to get the result of the operation.
	//
	// For the synchronous, blocking version of this function, see
	// g_output_stream_splice().
	//
	// This method is inherited from OutputStream
	SpliceAsync(source InputStream, flags OutputStreamSpliceFlags, ioPriority int, cancellable Cancellable, callback AsyncReadyCallback)
	// SpliceFinish finishes an asynchronous stream splice operation.
	//
	// This method is inherited from OutputStream
	SpliceFinish(result AsyncResult) (int, error)
	// Write tries to write @count bytes from @buffer into the stream. Will
	// block during the operation.
	//
	// If count is 0, returns 0 and does nothing. A value of @count larger than
	// G_MAXSSIZE will cause a G_IO_ERROR_INVALID_ARGUMENT error.
	//
	// On success, the number of bytes written to the stream is returned. It is
	// not an error if this is not the same as the requested size, as it can
	// happen e.g. on a partial I/O error, or if there is not enough storage in
	// the stream. All writes block until at least one byte is written or an
	// error occurs; 0 is never returned (unless @count is 0).
	//
	// If @cancellable is not nil, then the operation can be cancelled by
	// triggering the cancellable object from another thread. If the operation
	// was cancelled, the error G_IO_ERROR_CANCELLED will be returned. If an
	// operation was partially finished when the operation was cancelled the
	// partial result will be returned, without an error.
	//
	// On error -1 is returned and @error is set accordingly.
	//
	// This method is inherited from OutputStream
	Write(buffer []byte, cancellable Cancellable) (int, error)
	// WriteAll tries to write @count bytes from @buffer into the stream. Will
	// block during the operation.
	//
	// This function is similar to g_output_stream_write(), except it tries to
	// write as many bytes as requested, only stopping on an error.
	//
	// On a successful write of @count bytes, true is returned, and
	// @bytes_written is set to @count.
	//
	// If there is an error during the operation false is returned and @error is
	// set to indicate the error status.
	//
	// As a special exception to the normal conventions for functions that use
	// #GError, if this function returns false (and sets @error) then
	// @bytes_written will be set to the number of bytes that were successfully
	// written before the error was encountered. This functionality is only
	// available from C. If you need it from another language then you must
	// write your own loop around g_output_stream_write().
	//
	// This method is inherited from OutputStream
	WriteAll(buffer []byte, cancellable Cancellable) (uint, error)
	// WriteAllAsync: request an asynchronous write of @count bytes from @buffer
	// into the stream. When the operation is finished @callback will be called.
	// You can then call g_output_stream_write_all_finish() to get the result of
	// the operation.
	//
	// This is the asynchronous version of g_output_stream_write_all().
	//
	// Call g_output_stream_write_all_finish() to collect the result.
	//
	// Any outstanding I/O request with higher priority (lower numerical value)
	// will be executed before an outstanding request with lower priority.
	// Default priority is G_PRIORITY_DEFAULT.
	//
	// Note that no copy of @buffer will be made, so it must stay valid until
	// @callback is called.
	//
	// This method is inherited from OutputStream
	WriteAllAsync(buffer []byte, ioPriority int, cancellable Cancellable, callback AsyncReadyCallback)
	// WriteAllFinish finishes an asynchronous stream write operation started
	// with g_output_stream_write_all_async().
	//
	// As a special exception to the normal conventions for functions that use
	// #GError, if this function returns false (and sets @error) then
	// @bytes_written will be set to the number of bytes that were successfully
	// written before the error was encountered. This functionality is only
	// available from C. If you need it from another language then you must
	// write your own loop around g_output_stream_write_async().
	//
	// This method is inherited from OutputStream
	WriteAllFinish(result AsyncResult) (uint, error)
	// WriteAsync: request an asynchronous write of @count bytes from @buffer
	// into the stream. When the operation is finished @callback will be called.
	// You can then call g_output_stream_write_finish() to get the result of the
	// operation.
	//
	// During an async request no other sync and async calls are allowed, and
	// will result in G_IO_ERROR_PENDING errors.
	//
	// A value of @count larger than G_MAXSSIZE will cause a
	// G_IO_ERROR_INVALID_ARGUMENT error.
	//
	// On success, the number of bytes written will be passed to the @callback.
	// It is not an error if this is not the same as the requested size, as it
	// can happen e.g. on a partial I/O error, but generally we try to write as
	// many bytes as requested.
	//
	// You are guaranteed that this method will never fail with
	// G_IO_ERROR_WOULD_BLOCK - if @stream can't accept more data, the method
	// will just wait until this changes.
	//
	// Any outstanding I/O request with higher priority (lower numerical value)
	// will be executed before an outstanding request with lower priority.
	// Default priority is G_PRIORITY_DEFAULT.
	//
	// The asynchronous methods have a default fallback that uses threads to
	// implement asynchronicity, so they are optional for inheriting classes.
	// However, if you override one you must override all.
	//
	// For the synchronous, blocking version of this function, see
	// g_output_stream_write().
	//
	// Note that no copy of @buffer will be made, so it must stay valid until
	// @callback is called. See g_output_stream_write_bytes_async() for a
	// #GBytes version that will automatically hold a reference to the contents
	// (without copying) for the duration of the call.
	//
	// This method is inherited from OutputStream
	WriteAsync(buffer []byte, ioPriority int, cancellable Cancellable, callback AsyncReadyCallback)
	// WriteBytesFinish finishes a stream write-from-#GBytes operation.
	//
	// This method is inherited from OutputStream
	WriteBytesFinish(result AsyncResult) (int, error)
	// WriteFinish finishes a stream write operation.
	//
	// This method is inherited from OutputStream
	WriteFinish(result AsyncResult) (int, error)
	// Writev tries to write the bytes contained in the @n_vectors @vectors into
	// the stream. Will block during the operation.
	//
	// If @n_vectors is 0 or the sum of all bytes in @vectors is 0, returns 0
	// and does nothing.
	//
	// On success, the number of bytes written to the stream is returned. It is
	// not an error if this is not the same as the requested size, as it can
	// happen e.g. on a partial I/O error, or if there is not enough storage in
	// the stream. All writes block until at least one byte is written or an
	// error occurs; 0 is never returned (unless @n_vectors is 0 or the sum of
	// all bytes in @vectors is 0).
	//
	// If @cancellable is not nil, then the operation can be cancelled by
	// triggering the cancellable object from another thread. If the operation
	// was cancelled, the error G_IO_ERROR_CANCELLED will be returned. If an
	// operation was partially finished when the operation was cancelled the
	// partial result will be returned, without an error.
	//
	// Some implementations of g_output_stream_writev() may have limitations on
	// the aggregate buffer size, and will return G_IO_ERROR_INVALID_ARGUMENT if
	// these are exceeded. For example, when writing to a local file on UNIX
	// platforms, the aggregate buffer size must not exceed G_MAXSSIZE bytes.
	//
	// This method is inherited from OutputStream
	Writev(vectors []OutputVector, cancellable Cancellable) (uint, error)
	// WritevAll tries to write the bytes contained in the @n_vectors @vectors
	// into the stream. Will block during the operation.
	//
	// This function is similar to g_output_stream_writev(), except it tries to
	// write as many bytes as requested, only stopping on an error.
	//
	// On a successful write of all @n_vectors vectors, true is returned, and
	// @bytes_written is set to the sum of all the sizes of @vectors.
	//
	// If there is an error during the operation false is returned and @error is
	// set to indicate the error status.
	//
	// As a special exception to the normal conventions for functions that use
	// #GError, if this function returns false (and sets @error) then
	// @bytes_written will be set to the number of bytes that were successfully
	// written before the error was encountered. This functionality is only
	// available from C. If you need it from another language then you must
	// write your own loop around g_output_stream_write().
	//
	// The content of the individual elements of @vectors might be changed by
	// this function.
	//
	// This method is inherited from OutputStream
	WritevAll(vectors []OutputVector, cancellable Cancellable) (uint, error)
	// WritevAllAsync: request an asynchronous write of the bytes contained in
	// the @n_vectors @vectors into the stream. When the operation is finished
	// @callback will be called. You can then call
	// g_output_stream_writev_all_finish() to get the result of the operation.
	//
	// This is the asynchronous version of g_output_stream_writev_all().
	//
	// Call g_output_stream_writev_all_finish() to collect the result.
	//
	// Any outstanding I/O request with higher priority (lower numerical value)
	// will be executed before an outstanding request with lower priority.
	// Default priority is G_PRIORITY_DEFAULT.
	//
	// Note that no copy of @vectors will be made, so it must stay valid until
	// @callback is called. The content of the individual elements of @vectors
	// might be changed by this function.
	//
	// This method is inherited from OutputStream
	WritevAllAsync(vectors []OutputVector, ioPriority int, cancellable Cancellable, callback AsyncReadyCallback)
	// WritevAllFinish finishes an asynchronous stream write operation started
	// with g_output_stream_writev_all_async().
	//
	// As a special exception to the normal conventions for functions that use
	// #GError, if this function returns false (and sets @error) then
	// @bytes_written will be set to the number of bytes that were successfully
	// written before the error was encountered. This functionality is only
	// available from C. If you need it from another language then you must
	// write your own loop around g_output_stream_writev_async().
	//
	// This method is inherited from OutputStream
	WritevAllFinish(result AsyncResult) (uint, error)
	// WritevAsync: request an asynchronous write of the bytes contained in
	// @n_vectors @vectors into the stream. When the operation is finished
	// @callback will be called. You can then call
	// g_output_stream_writev_finish() to get the result of the operation.
	//
	// During an async request no other sync and async calls are allowed, and
	// will result in G_IO_ERROR_PENDING errors.
	//
	// On success, the number of bytes written will be passed to the @callback.
	// It is not an error if this is not the same as the requested size, as it
	// can happen e.g. on a partial I/O error, but generally we try to write as
	// many bytes as requested.
	//
	// You are guaranteed that this method will never fail with
	// G_IO_ERROR_WOULD_BLOCK — if @stream can't accept more data, the method
	// will just wait until this changes.
	//
	// Any outstanding I/O request with higher priority (lower numerical value)
	// will be executed before an outstanding request with lower priority.
	// Default priority is G_PRIORITY_DEFAULT.
	//
	// The asynchronous methods have a default fallback that uses threads to
	// implement asynchronicity, so they are optional for inheriting classes.
	// However, if you override one you must override all.
	//
	// For the synchronous, blocking version of this function, see
	// g_output_stream_writev().
	//
	// Note that no copy of @vectors will be made, so it must stay valid until
	// @callback is called.
	//
	// This method is inherited from OutputStream
	WritevAsync(vectors []OutputVector, ioPriority int, cancellable Cancellable, callback AsyncReadyCallback)
	// WritevFinish finishes a stream writev operation.
	//
	// This method is inherited from OutputStream
	WritevFinish(result AsyncResult) (uint, error)
	// GetFd gets the underlying file descriptor.
	//
	// This method is inherited from FileDescriptorBased
	GetFd() int
	// CanPoll checks if @stream is actually pollable. Some classes may
	// implement OutputStream but have only certain instances of that class be
	// pollable. If this method returns false, then the behavior of other
	// OutputStream methods is undefined.
	//
	// For any given stream, the value returned by this method is constant; a
	// stream cannot switch from pollable to non-pollable or vice versa.
	//
	// This method is inherited from PollableOutputStream
	CanPoll() bool
	// CreateSource creates a #GSource that triggers when @stream can be
	// written, or @cancellable is triggered or an error occurs. The callback on
	// the source is of the SourceFunc type.
	//
	// As with g_pollable_output_stream_is_writable(), it is possible that the
	// stream may not actually be writable even after the source triggers, so
	// you should use g_pollable_output_stream_write_nonblocking() rather than
	// g_output_stream_write() from the callback.
	//
	// This method is inherited from PollableOutputStream
	CreateSource(cancellable Cancellable) *glib.Source
	// IsWritable checks if @stream can be written.
	//
	// Note that some stream types may not be able to implement this 100%
	// reliably, and it is possible that a call to g_output_stream_write() after
	// this returns true would still block. To guarantee non-blocking behavior,
	// you should always use g_pollable_output_stream_write_nonblocking(), which
	// will return a G_IO_ERROR_WOULD_BLOCK error rather than blocking.
	//
	// This method is inherited from PollableOutputStream
	IsWritable() bool
	// WriteNonblocking attempts to write up to @count bytes from @buffer to
	// @stream, as with g_output_stream_write(). If @stream is not currently
	// writable, this will immediately return G_IO_ERROR_WOULD_BLOCK, and you
	// can use g_pollable_output_stream_create_source() to create a #GSource
	// that will be triggered when @stream is writable.
	//
	// Note that since this method never blocks, you cannot actually use
	// @cancellable to cancel it. However, it will return an error if
	// @cancellable has already been cancelled when you call, which may happen
	// if you call this method after a source triggers due to having been
	// cancelled.
	//
	// Also note that if G_IO_ERROR_WOULD_BLOCK is returned some underlying
	// transports like D/TLS require that you re-send the same @buffer and
	// @count in the next write call.
	//
	// This method is inherited from PollableOutputStream
	WriteNonblocking(buffer []byte, cancellable Cancellable) (int, error)
	// WritevNonblocking attempts to write the bytes contained in the @n_vectors
	// @vectors to @stream, as with g_output_stream_writev(). If @stream is not
	// currently writable, this will immediately return
	// %@G_POLLABLE_RETURN_WOULD_BLOCK, and you can use
	// g_pollable_output_stream_create_source() to create a #GSource that will
	// be triggered when @stream is writable. @error will *not* be set in that
	// case.
	//
	// Note that since this method never blocks, you cannot actually use
	// @cancellable to cancel it. However, it will return an error if
	// @cancellable has already been cancelled when you call, which may happen
	// if you call this method after a source triggers due to having been
	// cancelled.
	//
	// Also note that if G_POLLABLE_RETURN_WOULD_BLOCK is returned some
	// underlying transports like D/TLS require that you re-send the same
	// @vectors and @n_vectors in the next write call.
	//
	// This method is inherited from PollableOutputStream
	WritevNonblocking(vectors []OutputVector, cancellable Cancellable) (uint, PollableReturn, error)
	// ClearPending clears the pending flag on @stream.
	//
	// This method is inherited from OutputStream
	ClearPending()
	// Close closes the stream, releasing resources related to it.
	//
	// Once the stream is closed, all other operations will return
	// G_IO_ERROR_CLOSED. Closing a stream multiple times will not return an
	// error.
	//
	// Closing a stream will automatically flush any outstanding buffers in the
	// stream.
	//
	// Streams will be automatically closed when the last reference is dropped,
	// but you might want to call this function to make sure resources are
	// released as early as possible.
	//
	// Some streams might keep the backing store of the stream (e.g. a file
	// descriptor) open after the stream is closed. See the documentation for
	// the individual stream for details.
	//
	// On failure the first error that happened will be reported, but the close
	// operation will finish as much as possible. A stream that failed to close
	// will still return G_IO_ERROR_CLOSED for all operations. Still, it is
	// important to check and report the error to the user, otherwise there
	// might be a loss of data as all data might not be written.
	//
	// If @cancellable is not nil, then the operation can be cancelled by
	// triggering the cancellable object from another thread. If the operation
	// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
	// Cancelling a close will still leave the stream closed, but there some
	// streams can use a faster close that doesn't block to e.g. check errors.
	// On cancellation (as with any error) there is no guarantee that all
	// written data will reach the target.
	//
	// This method is inherited from OutputStream
	Close(cancellable Cancellable) error
	// CloseAsync requests an asynchronous close of the stream, releasing
	// resources related to it. When the operation is finished @callback will be
	// called. You can then call g_output_stream_close_finish() to get the
	// result of the operation.
	//
	// For behaviour details see g_output_stream_close().
	//
	// The asynchronous methods have a default fallback that uses threads to
	// implement asynchronicity, so they are optional for inheriting classes.
	// However, if you override one you must override all.
	//
	// This method is inherited from OutputStream
	CloseAsync(ioPriority int, cancellable Cancellable, callback AsyncReadyCallback)
	// CloseFinish closes an output stream.
	//
	// This method is inherited from OutputStream
	CloseFinish(result AsyncResult) error
	// Flush forces a write of all user-space buffered data for the given
	// @stream. Will block during the operation. Closing the stream will
	// implicitly cause a flush.
	//
	// This function is optional for inherited classes.
	//
	// If @cancellable is not nil, then the operation can be cancelled by
	// triggering the cancellable object from another thread. If the operation
	// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
	//
	// This method is inherited from OutputStream
	Flush(cancellable Cancellable) error
	// FlushAsync forces an asynchronous write of all user-space buffered data
	// for the given @stream. For behaviour details see g_output_stream_flush().
	//
	// When the operation is finished @callback will be called. You can then
	// call g_output_stream_flush_finish() to get the result of the operation.
	//
	// This method is inherited from OutputStream
	FlushAsync(ioPriority int, cancellable Cancellable, callback AsyncReadyCallback)
	// FlushFinish finishes flushing an output stream.
	//
	// This method is inherited from OutputStream
	FlushFinish(result AsyncResult) error
	// HasPending checks if an output stream has pending actions.
	//
	// This method is inherited from OutputStream
	HasPending() bool
	// IsClosed checks if an output stream has already been closed.
	//
	// This method is inherited from OutputStream
	IsClosed() bool
	// IsClosing checks if an output stream is being closed. This can be used
	// inside e.g. a flush implementation to see if the flush (or other i/o
	// operation) is called from within the closing operation.
	//
	// This method is inherited from OutputStream
	IsClosing() bool
	// SetPending sets @stream to have actions pending. If the pending flag is
	// already set or @stream is closed, it will return false and set @error.
	//
	// This method is inherited from OutputStream
	SetPending() error
	// Splice splices an input stream into an output stream.
	//
	// This method is inherited from OutputStream
	Splice(source InputStream, flags OutputStreamSpliceFlags, cancellable Cancellable) (int, error)
	// SpliceAsync splices a stream asynchronously. When the operation is
	// finished @callback will be called. You can then call
	// g_output_stream_splice_finish() to get the result of the operation.
	//
	// For the synchronous, blocking version of this function, see
	// g_output_stream_splice().
	//
	// This method is inherited from OutputStream
	SpliceAsync(source InputStream, flags OutputStreamSpliceFlags, ioPriority int, cancellable Cancellable, callback AsyncReadyCallback)
	// SpliceFinish finishes an asynchronous stream splice operation.
	//
	// This method is inherited from OutputStream
	SpliceFinish(result AsyncResult) (int, error)
	// Write tries to write @count bytes from @buffer into the stream. Will
	// block during the operation.
	//
	// If count is 0, returns 0 and does nothing. A value of @count larger than
	// G_MAXSSIZE will cause a G_IO_ERROR_INVALID_ARGUMENT error.
	//
	// On success, the number of bytes written to the stream is returned. It is
	// not an error if this is not the same as the requested size, as it can
	// happen e.g. on a partial I/O error, or if there is not enough storage in
	// the stream. All writes block until at least one byte is written or an
	// error occurs; 0 is never returned (unless @count is 0).
	//
	// If @cancellable is not nil, then the operation can be cancelled by
	// triggering the cancellable object from another thread. If the operation
	// was cancelled, the error G_IO_ERROR_CANCELLED will be returned. If an
	// operation was partially finished when the operation was cancelled the
	// partial result will be returned, without an error.
	//
	// On error -1 is returned and @error is set accordingly.
	//
	// This method is inherited from OutputStream
	Write(buffer []byte, cancellable Cancellable) (int, error)
	// WriteAll tries to write @count bytes from @buffer into the stream. Will
	// block during the operation.
	//
	// This function is similar to g_output_stream_write(), except it tries to
	// write as many bytes as requested, only stopping on an error.
	//
	// On a successful write of @count bytes, true is returned, and
	// @bytes_written is set to @count.
	//
	// If there is an error during the operation false is returned and @error is
	// set to indicate the error status.
	//
	// As a special exception to the normal conventions for functions that use
	// #GError, if this function returns false (and sets @error) then
	// @bytes_written will be set to the number of bytes that were successfully
	// written before the error was encountered. This functionality is only
	// available from C. If you need it from another language then you must
	// write your own loop around g_output_stream_write().
	//
	// This method is inherited from OutputStream
	WriteAll(buffer []byte, cancellable Cancellable) (uint, error)
	// WriteAllAsync: request an asynchronous write of @count bytes from @buffer
	// into the stream. When the operation is finished @callback will be called.
	// You can then call g_output_stream_write_all_finish() to get the result of
	// the operation.
	//
	// This is the asynchronous version of g_output_stream_write_all().
	//
	// Call g_output_stream_write_all_finish() to collect the result.
	//
	// Any outstanding I/O request with higher priority (lower numerical value)
	// will be executed before an outstanding request with lower priority.
	// Default priority is G_PRIORITY_DEFAULT.
	//
	// Note that no copy of @buffer will be made, so it must stay valid until
	// @callback is called.
	//
	// This method is inherited from OutputStream
	WriteAllAsync(buffer []byte, ioPriority int, cancellable Cancellable, callback AsyncReadyCallback)
	// WriteAllFinish finishes an asynchronous stream write operation started
	// with g_output_stream_write_all_async().
	//
	// As a special exception to the normal conventions for functions that use
	// #GError, if this function returns false (and sets @error) then
	// @bytes_written will be set to the number of bytes that were successfully
	// written before the error was encountered. This functionality is only
	// available from C. If you need it from another language then you must
	// write your own loop around g_output_stream_write_async().
	//
	// This method is inherited from OutputStream
	WriteAllFinish(result AsyncResult) (uint, error)
	// WriteAsync: request an asynchronous write of @count bytes from @buffer
	// into the stream. When the operation is finished @callback will be called.
	// You can then call g_output_stream_write_finish() to get the result of the
	// operation.
	//
	// During an async request no other sync and async calls are allowed, and
	// will result in G_IO_ERROR_PENDING errors.
	//
	// A value of @count larger than G_MAXSSIZE will cause a
	// G_IO_ERROR_INVALID_ARGUMENT error.
	//
	// On success, the number of bytes written will be passed to the @callback.
	// It is not an error if this is not the same as the requested size, as it
	// can happen e.g. on a partial I/O error, but generally we try to write as
	// many bytes as requested.
	//
	// You are guaranteed that this method will never fail with
	// G_IO_ERROR_WOULD_BLOCK - if @stream can't accept more data, the method
	// will just wait until this changes.
	//
	// Any outstanding I/O request with higher priority (lower numerical value)
	// will be executed before an outstanding request with lower priority.
	// Default priority is G_PRIORITY_DEFAULT.
	//
	// The asynchronous methods have a default fallback that uses threads to
	// implement asynchronicity, so they are optional for inheriting classes.
	// However, if you override one you must override all.
	//
	// For the synchronous, blocking version of this function, see
	// g_output_stream_write().
	//
	// Note that no copy of @buffer will be made, so it must stay valid until
	// @callback is called. See g_output_stream_write_bytes_async() for a
	// #GBytes version that will automatically hold a reference to the contents
	// (without copying) for the duration of the call.
	//
	// This method is inherited from OutputStream
	WriteAsync(buffer []byte, ioPriority int, cancellable Cancellable, callback AsyncReadyCallback)
	// WriteBytesFinish finishes a stream write-from-#GBytes operation.
	//
	// This method is inherited from OutputStream
	WriteBytesFinish(result AsyncResult) (int, error)
	// WriteFinish finishes a stream write operation.
	//
	// This method is inherited from OutputStream
	WriteFinish(result AsyncResult) (int, error)
	// Writev tries to write the bytes contained in the @n_vectors @vectors into
	// the stream. Will block during the operation.
	//
	// If @n_vectors is 0 or the sum of all bytes in @vectors is 0, returns 0
	// and does nothing.
	//
	// On success, the number of bytes written to the stream is returned. It is
	// not an error if this is not the same as the requested size, as it can
	// happen e.g. on a partial I/O error, or if there is not enough storage in
	// the stream. All writes block until at least one byte is written or an
	// error occurs; 0 is never returned (unless @n_vectors is 0 or the sum of
	// all bytes in @vectors is 0).
	//
	// If @cancellable is not nil, then the operation can be cancelled by
	// triggering the cancellable object from another thread. If the operation
	// was cancelled, the error G_IO_ERROR_CANCELLED will be returned. If an
	// operation was partially finished when the operation was cancelled the
	// partial result will be returned, without an error.
	//
	// Some implementations of g_output_stream_writev() may have limitations on
	// the aggregate buffer size, and will return G_IO_ERROR_INVALID_ARGUMENT if
	// these are exceeded. For example, when writing to a local file on UNIX
	// platforms, the aggregate buffer size must not exceed G_MAXSSIZE bytes.
	//
	// This method is inherited from OutputStream
	Writev(vectors []OutputVector, cancellable Cancellable) (uint, error)
	// WritevAll tries to write the bytes contained in the @n_vectors @vectors
	// into the stream. Will block during the operation.
	//
	// This function is similar to g_output_stream_writev(), except it tries to
	// write as many bytes as requested, only stopping on an error.
	//
	// On a successful write of all @n_vectors vectors, true is returned, and
	// @bytes_written is set to the sum of all the sizes of @vectors.
	//
	// If there is an error during the operation false is returned and @error is
	// set to indicate the error status.
	//
	// As a special exception to the normal conventions for functions that use
	// #GError, if this function returns false (and sets @error) then
	// @bytes_written will be set to the number of bytes that were successfully
	// written before the error was encountered. This functionality is only
	// available from C. If you need it from another language then you must
	// write your own loop around g_output_stream_write().
	//
	// The content of the individual elements of @vectors might be changed by
	// this function.
	//
	// This method is inherited from OutputStream
	WritevAll(vectors []OutputVector, cancellable Cancellable) (uint, error)
	// WritevAllAsync: request an asynchronous write of the bytes contained in
	// the @n_vectors @vectors into the stream. When the operation is finished
	// @callback will be called. You can then call
	// g_output_stream_writev_all_finish() to get the result of the operation.
	//
	// This is the asynchronous version of g_output_stream_writev_all().
	//
	// Call g_output_stream_writev_all_finish() to collect the result.
	//
	// Any outstanding I/O request with higher priority (lower numerical value)
	// will be executed before an outstanding request with lower priority.
	// Default priority is G_PRIORITY_DEFAULT.
	//
	// Note that no copy of @vectors will be made, so it must stay valid until
	// @callback is called. The content of the individual elements of @vectors
	// might be changed by this function.
	//
	// This method is inherited from OutputStream
	WritevAllAsync(vectors []OutputVector, ioPriority int, cancellable Cancellable, callback AsyncReadyCallback)
	// WritevAllFinish finishes an asynchronous stream write operation started
	// with g_output_stream_writev_all_async().
	//
	// As a special exception to the normal conventions for functions that use
	// #GError, if this function returns false (and sets @error) then
	// @bytes_written will be set to the number of bytes that were successfully
	// written before the error was encountered. This functionality is only
	// available from C. If you need it from another language then you must
	// write your own loop around g_output_stream_writev_async().
	//
	// This method is inherited from OutputStream
	WritevAllFinish(result AsyncResult) (uint, error)
	// WritevAsync: request an asynchronous write of the bytes contained in
	// @n_vectors @vectors into the stream. When the operation is finished
	// @callback will be called. You can then call
	// g_output_stream_writev_finish() to get the result of the operation.
	//
	// During an async request no other sync and async calls are allowed, and
	// will result in G_IO_ERROR_PENDING errors.
	//
	// On success, the number of bytes written will be passed to the @callback.
	// It is not an error if this is not the same as the requested size, as it
	// can happen e.g. on a partial I/O error, but generally we try to write as
	// many bytes as requested.
	//
	// You are guaranteed that this method will never fail with
	// G_IO_ERROR_WOULD_BLOCK — if @stream can't accept more data, the method
	// will just wait until this changes.
	//
	// Any outstanding I/O request with higher priority (lower numerical value)
	// will be executed before an outstanding request with lower priority.
	// Default priority is G_PRIORITY_DEFAULT.
	//
	// The asynchronous methods have a default fallback that uses threads to
	// implement asynchronicity, so they are optional for inheriting classes.
	// However, if you override one you must override all.
	//
	// For the synchronous, blocking version of this function, see
	// g_output_stream_writev().
	//
	// Note that no copy of @vectors will be made, so it must stay valid until
	// @callback is called.
	//
	// This method is inherited from OutputStream
	WritevAsync(vectors []OutputVector, ioPriority int, cancellable Cancellable, callback AsyncReadyCallback)
	// WritevFinish finishes a stream writev operation.
	//
	// This method is inherited from OutputStream
	WritevFinish(result AsyncResult) (uint, error)

	// CloseFd returns whether the file descriptor of @stream will be closed
	// when the stream is closed.
	CloseFd() bool
	// Fd: return the UNIX file descriptor that the stream writes to.
	Fd() int
	// SetCloseFd sets whether the file descriptor of @stream shall be closed
	// when the stream is closed.
	SetCloseFd(closeFd bool)
}

// unixOutputStream implements the UnixOutputStream interface.
type unixOutputStream struct {
	*externglib.Object
}

var _ UnixOutputStream = (*unixOutputStream)(nil)

// WrapUnixOutputStream wraps a GObject to a type that implements
// interface UnixOutputStream. It is primarily used internally.
func WrapUnixOutputStream(obj *externglib.Object) UnixOutputStream {
	return unixOutputStream{obj}
}

func marshalUnixOutputStream(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapUnixOutputStream(obj), nil
}

// NewUnixOutputStream creates a new OutputStream for the given @fd.
//
// If @close_fd, is true, the file descriptor will be closed when the output
// stream is destroyed.
func NewUnixOutputStream(fd int, closeFd bool) UnixOutputStream {
	var _arg1 C.gint           // out
	var _arg2 C.gboolean       // out
	var _cret *C.GOutputStream // in

	_arg1 = C.gint(fd)
	if closeFd {
		_arg2 = C.TRUE
	}

	_cret = C.g_unix_output_stream_new(_arg1, _arg2)

	var _unixOutputStream UnixOutputStream // out

	_unixOutputStream = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(UnixOutputStream)

	return _unixOutputStream
}

func (u unixOutputStream) AsOutputStream() OutputStream {
	return WrapOutputStream(gextras.InternObject(u))
}

func (u unixOutputStream) AsFileDescriptorBased() FileDescriptorBased {
	return WrapFileDescriptorBased(gextras.InternObject(u))
}

func (u unixOutputStream) AsPollableOutputStream() PollableOutputStream {
	return WrapPollableOutputStream(gextras.InternObject(u))
}

func (s unixOutputStream) ClearPending() {
	WrapOutputStream(gextras.InternObject(s)).ClearPending()
}

func (s unixOutputStream) Close(cancellable Cancellable) error {
	return WrapOutputStream(gextras.InternObject(s)).Close(cancellable)
}

func (s unixOutputStream) CloseAsync(ioPriority int, cancellable Cancellable, callback AsyncReadyCallback) {
	WrapOutputStream(gextras.InternObject(s)).CloseAsync(ioPriority, cancellable, callback)
}

func (s unixOutputStream) CloseFinish(result AsyncResult) error {
	return WrapOutputStream(gextras.InternObject(s)).CloseFinish(result)
}

func (s unixOutputStream) Flush(cancellable Cancellable) error {
	return WrapOutputStream(gextras.InternObject(s)).Flush(cancellable)
}

func (s unixOutputStream) FlushAsync(ioPriority int, cancellable Cancellable, callback AsyncReadyCallback) {
	WrapOutputStream(gextras.InternObject(s)).FlushAsync(ioPriority, cancellable, callback)
}

func (s unixOutputStream) FlushFinish(result AsyncResult) error {
	return WrapOutputStream(gextras.InternObject(s)).FlushFinish(result)
}

func (s unixOutputStream) HasPending() bool {
	return WrapOutputStream(gextras.InternObject(s)).HasPending()
}

func (s unixOutputStream) IsClosed() bool {
	return WrapOutputStream(gextras.InternObject(s)).IsClosed()
}

func (s unixOutputStream) IsClosing() bool {
	return WrapOutputStream(gextras.InternObject(s)).IsClosing()
}

func (s unixOutputStream) SetPending() error {
	return WrapOutputStream(gextras.InternObject(s)).SetPending()
}

func (s unixOutputStream) Splice(source InputStream, flags OutputStreamSpliceFlags, cancellable Cancellable) (int, error) {
	return WrapOutputStream(gextras.InternObject(s)).Splice(source, flags, cancellable)
}

func (s unixOutputStream) SpliceAsync(source InputStream, flags OutputStreamSpliceFlags, ioPriority int, cancellable Cancellable, callback AsyncReadyCallback) {
	WrapOutputStream(gextras.InternObject(s)).SpliceAsync(source, flags, ioPriority, cancellable, callback)
}

func (s unixOutputStream) SpliceFinish(result AsyncResult) (int, error) {
	return WrapOutputStream(gextras.InternObject(s)).SpliceFinish(result)
}

func (s unixOutputStream) Write(buffer []byte, cancellable Cancellable) (int, error) {
	return WrapOutputStream(gextras.InternObject(s)).Write(buffer, cancellable)
}

func (s unixOutputStream) WriteAll(buffer []byte, cancellable Cancellable) (uint, error) {
	return WrapOutputStream(gextras.InternObject(s)).WriteAll(buffer, cancellable)
}

func (s unixOutputStream) WriteAllAsync(buffer []byte, ioPriority int, cancellable Cancellable, callback AsyncReadyCallback) {
	WrapOutputStream(gextras.InternObject(s)).WriteAllAsync(buffer, ioPriority, cancellable, callback)
}

func (s unixOutputStream) WriteAllFinish(result AsyncResult) (uint, error) {
	return WrapOutputStream(gextras.InternObject(s)).WriteAllFinish(result)
}

func (s unixOutputStream) WriteAsync(buffer []byte, ioPriority int, cancellable Cancellable, callback AsyncReadyCallback) {
	WrapOutputStream(gextras.InternObject(s)).WriteAsync(buffer, ioPriority, cancellable, callback)
}

func (s unixOutputStream) WriteBytesFinish(result AsyncResult) (int, error) {
	return WrapOutputStream(gextras.InternObject(s)).WriteBytesFinish(result)
}

func (s unixOutputStream) WriteFinish(result AsyncResult) (int, error) {
	return WrapOutputStream(gextras.InternObject(s)).WriteFinish(result)
}

func (s unixOutputStream) Writev(vectors []OutputVector, cancellable Cancellable) (uint, error) {
	return WrapOutputStream(gextras.InternObject(s)).Writev(vectors, cancellable)
}

func (s unixOutputStream) WritevAll(vectors []OutputVector, cancellable Cancellable) (uint, error) {
	return WrapOutputStream(gextras.InternObject(s)).WritevAll(vectors, cancellable)
}

func (s unixOutputStream) WritevAllAsync(vectors []OutputVector, ioPriority int, cancellable Cancellable, callback AsyncReadyCallback) {
	WrapOutputStream(gextras.InternObject(s)).WritevAllAsync(vectors, ioPriority, cancellable, callback)
}

func (s unixOutputStream) WritevAllFinish(result AsyncResult) (uint, error) {
	return WrapOutputStream(gextras.InternObject(s)).WritevAllFinish(result)
}

func (s unixOutputStream) WritevAsync(vectors []OutputVector, ioPriority int, cancellable Cancellable, callback AsyncReadyCallback) {
	WrapOutputStream(gextras.InternObject(s)).WritevAsync(vectors, ioPriority, cancellable, callback)
}

func (s unixOutputStream) WritevFinish(result AsyncResult) (uint, error) {
	return WrapOutputStream(gextras.InternObject(s)).WritevFinish(result)
}

func (f unixOutputStream) GetFd() int {
	return WrapFileDescriptorBased(gextras.InternObject(f)).GetFd()
}

func (s unixOutputStream) CanPoll() bool {
	return WrapPollableOutputStream(gextras.InternObject(s)).CanPoll()
}

func (s unixOutputStream) CreateSource(cancellable Cancellable) *glib.Source {
	return WrapPollableOutputStream(gextras.InternObject(s)).CreateSource(cancellable)
}

func (s unixOutputStream) IsWritable() bool {
	return WrapPollableOutputStream(gextras.InternObject(s)).IsWritable()
}

func (s unixOutputStream) WriteNonblocking(buffer []byte, cancellable Cancellable) (int, error) {
	return WrapPollableOutputStream(gextras.InternObject(s)).WriteNonblocking(buffer, cancellable)
}

func (s unixOutputStream) WritevNonblocking(vectors []OutputVector, cancellable Cancellable) (uint, PollableReturn, error) {
	return WrapPollableOutputStream(gextras.InternObject(s)).WritevNonblocking(vectors, cancellable)
}

func (s unixOutputStream) ClearPending() {
	WrapOutputStream(gextras.InternObject(s)).ClearPending()
}

func (s unixOutputStream) Close(cancellable Cancellable) error {
	return WrapOutputStream(gextras.InternObject(s)).Close(cancellable)
}

func (s unixOutputStream) CloseAsync(ioPriority int, cancellable Cancellable, callback AsyncReadyCallback) {
	WrapOutputStream(gextras.InternObject(s)).CloseAsync(ioPriority, cancellable, callback)
}

func (s unixOutputStream) CloseFinish(result AsyncResult) error {
	return WrapOutputStream(gextras.InternObject(s)).CloseFinish(result)
}

func (s unixOutputStream) Flush(cancellable Cancellable) error {
	return WrapOutputStream(gextras.InternObject(s)).Flush(cancellable)
}

func (s unixOutputStream) FlushAsync(ioPriority int, cancellable Cancellable, callback AsyncReadyCallback) {
	WrapOutputStream(gextras.InternObject(s)).FlushAsync(ioPriority, cancellable, callback)
}

func (s unixOutputStream) FlushFinish(result AsyncResult) error {
	return WrapOutputStream(gextras.InternObject(s)).FlushFinish(result)
}

func (s unixOutputStream) HasPending() bool {
	return WrapOutputStream(gextras.InternObject(s)).HasPending()
}

func (s unixOutputStream) IsClosed() bool {
	return WrapOutputStream(gextras.InternObject(s)).IsClosed()
}

func (s unixOutputStream) IsClosing() bool {
	return WrapOutputStream(gextras.InternObject(s)).IsClosing()
}

func (s unixOutputStream) SetPending() error {
	return WrapOutputStream(gextras.InternObject(s)).SetPending()
}

func (s unixOutputStream) Splice(source InputStream, flags OutputStreamSpliceFlags, cancellable Cancellable) (int, error) {
	return WrapOutputStream(gextras.InternObject(s)).Splice(source, flags, cancellable)
}

func (s unixOutputStream) SpliceAsync(source InputStream, flags OutputStreamSpliceFlags, ioPriority int, cancellable Cancellable, callback AsyncReadyCallback) {
	WrapOutputStream(gextras.InternObject(s)).SpliceAsync(source, flags, ioPriority, cancellable, callback)
}

func (s unixOutputStream) SpliceFinish(result AsyncResult) (int, error) {
	return WrapOutputStream(gextras.InternObject(s)).SpliceFinish(result)
}

func (s unixOutputStream) Write(buffer []byte, cancellable Cancellable) (int, error) {
	return WrapOutputStream(gextras.InternObject(s)).Write(buffer, cancellable)
}

func (s unixOutputStream) WriteAll(buffer []byte, cancellable Cancellable) (uint, error) {
	return WrapOutputStream(gextras.InternObject(s)).WriteAll(buffer, cancellable)
}

func (s unixOutputStream) WriteAllAsync(buffer []byte, ioPriority int, cancellable Cancellable, callback AsyncReadyCallback) {
	WrapOutputStream(gextras.InternObject(s)).WriteAllAsync(buffer, ioPriority, cancellable, callback)
}

func (s unixOutputStream) WriteAllFinish(result AsyncResult) (uint, error) {
	return WrapOutputStream(gextras.InternObject(s)).WriteAllFinish(result)
}

func (s unixOutputStream) WriteAsync(buffer []byte, ioPriority int, cancellable Cancellable, callback AsyncReadyCallback) {
	WrapOutputStream(gextras.InternObject(s)).WriteAsync(buffer, ioPriority, cancellable, callback)
}

func (s unixOutputStream) WriteBytesFinish(result AsyncResult) (int, error) {
	return WrapOutputStream(gextras.InternObject(s)).WriteBytesFinish(result)
}

func (s unixOutputStream) WriteFinish(result AsyncResult) (int, error) {
	return WrapOutputStream(gextras.InternObject(s)).WriteFinish(result)
}

func (s unixOutputStream) Writev(vectors []OutputVector, cancellable Cancellable) (uint, error) {
	return WrapOutputStream(gextras.InternObject(s)).Writev(vectors, cancellable)
}

func (s unixOutputStream) WritevAll(vectors []OutputVector, cancellable Cancellable) (uint, error) {
	return WrapOutputStream(gextras.InternObject(s)).WritevAll(vectors, cancellable)
}

func (s unixOutputStream) WritevAllAsync(vectors []OutputVector, ioPriority int, cancellable Cancellable, callback AsyncReadyCallback) {
	WrapOutputStream(gextras.InternObject(s)).WritevAllAsync(vectors, ioPriority, cancellable, callback)
}

func (s unixOutputStream) WritevAllFinish(result AsyncResult) (uint, error) {
	return WrapOutputStream(gextras.InternObject(s)).WritevAllFinish(result)
}

func (s unixOutputStream) WritevAsync(vectors []OutputVector, ioPriority int, cancellable Cancellable, callback AsyncReadyCallback) {
	WrapOutputStream(gextras.InternObject(s)).WritevAsync(vectors, ioPriority, cancellable, callback)
}

func (s unixOutputStream) WritevFinish(result AsyncResult) (uint, error) {
	return WrapOutputStream(gextras.InternObject(s)).WritevFinish(result)
}

func (s unixOutputStream) CloseFd() bool {
	var _arg0 *C.GUnixOutputStream // out
	var _cret C.gboolean           // in

	_arg0 = (*C.GUnixOutputStream)(unsafe.Pointer(s.Native()))

	_cret = C.g_unix_output_stream_get_close_fd(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (s unixOutputStream) Fd() int {
	var _arg0 *C.GUnixOutputStream // out
	var _cret C.gint               // in

	_arg0 = (*C.GUnixOutputStream)(unsafe.Pointer(s.Native()))

	_cret = C.g_unix_output_stream_get_fd(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (s unixOutputStream) SetCloseFd(closeFd bool) {
	var _arg0 *C.GUnixOutputStream // out
	var _arg1 C.gboolean           // out

	_arg0 = (*C.GUnixOutputStream)(unsafe.Pointer(s.Native()))
	if closeFd {
		_arg1 = C.TRUE
	}

	C.g_unix_output_stream_set_close_fd(_arg0, _arg1)
}
