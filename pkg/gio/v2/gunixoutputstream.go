// Code generated by girgen. DO NOT EDIT.

package gio

import (
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gio-2.0 gio-unix-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gio/gdesktopappinfo.h>
// #include <gio/gfiledescriptorbased.h>
// #include <gio/gio.h>
// #include <gio/gunixconnection.h>
// #include <gio/gunixcredentialsmessage.h>
// #include <gio/gunixfdlist.h>
// #include <gio/gunixfdmessage.h>
// #include <gio/gunixinputstream.h>
// #include <gio/gunixmounts.h>
// #include <gio/gunixoutputstream.h>
// #include <gio/gunixsocketaddress.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_unix_output_stream_get_type()), F: marshalUnixOutputStream},
	})
}

// UnixOutputStream implements Stream for writing to a UNIX file descriptor,
// including asynchronous operations. (If the file descriptor refers to a socket
// or pipe, this will use poll() to do asynchronous I/O. If it refers to a
// regular file, it will fall back to doing asynchronous I/O in another thread.)
//
// Note that `<gio/gunixoutputstream.h>` belongs to the UNIX-specific GIO
// interfaces, thus you have to use the `gio-unix-2.0.pc` pkg-config file when
// using it.
type UnixOutputStream interface {
	OutputStream
	FileDescriptorBased
	PollableOutputStream

	// CloseFd returns whether the file descriptor of @stream will be closed
	// when the stream is closed.
	CloseFd() bool
	// Fd: return the UNIX file descriptor that the stream writes to.
	Fd() int
	// SetCloseFd sets whether the file descriptor of @stream shall be closed
	// when the stream is closed.
	SetCloseFd(closeFd bool)
}

// unixOutputStream implements the UnixOutputStream interface.
type unixOutputStream struct {
	OutputStream
	FileDescriptorBased
	PollableOutputStream
}

var _ UnixOutputStream = (*unixOutputStream)(nil)

// WrapUnixOutputStream wraps a GObject to the right type. It is
// primarily used internally.
func WrapUnixOutputStream(obj *externglib.Object) UnixOutputStream {
	return UnixOutputStream{
		OutputStream:         WrapOutputStream(obj),
		FileDescriptorBased:  WrapFileDescriptorBased(obj),
		PollableOutputStream: WrapPollableOutputStream(obj),
	}
}

func marshalUnixOutputStream(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapUnixOutputStream(obj), nil
}

// CloseFd returns whether the file descriptor of @stream will be closed
// when the stream is closed.
func (s unixOutputStream) CloseFd() bool {
	var _arg0 *C.GUnixOutputStream

	_arg0 = (*C.GUnixOutputStream)(unsafe.Pointer(s.Native()))

	var _cret C.gboolean

	_cret = C.g_unix_output_stream_get_close_fd(_arg0)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// Fd: return the UNIX file descriptor that the stream writes to.
func (s unixOutputStream) Fd() int {
	var _arg0 *C.GUnixOutputStream

	_arg0 = (*C.GUnixOutputStream)(unsafe.Pointer(s.Native()))

	var _cret C.gint

	_cret = C.g_unix_output_stream_get_fd(_arg0)

	var _gint int

	_gint = (int)(_cret)

	return _gint
}

// SetCloseFd sets whether the file descriptor of @stream shall be closed
// when the stream is closed.
func (s unixOutputStream) SetCloseFd(closeFd bool) {
	var _arg0 *C.GUnixOutputStream
	var _arg1 C.gboolean

	_arg0 = (*C.GUnixOutputStream)(unsafe.Pointer(s.Native()))
	if closeFd {
		_arg1 = C.gboolean(1)
	}

	C.g_unix_output_stream_set_close_fd(_arg0, _arg1)
}
