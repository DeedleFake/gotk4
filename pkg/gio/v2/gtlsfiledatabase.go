// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gio-2.0 gio-unix-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <gio/gdesktopappinfo.h>
// #include <gio/gfiledescriptorbased.h>
// #include <gio/gio.h>
// #include <gio/gunixconnection.h>
// #include <gio/gunixcredentialsmessage.h>
// #include <gio/gunixfdlist.h>
// #include <gio/gunixfdmessage.h>
// #include <gio/gunixinputstream.h>
// #include <gio/gunixmounts.h>
// #include <gio/gunixoutputstream.h>
// #include <gio/gunixsocketaddress.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_tls_file_database_get_type()), F: marshalTLSFileDatabaser},
	})
}

// TLSFileDatabaser describes TLSFileDatabase's methods.
type TLSFileDatabaser interface {
	privateTLSFileDatabase()
}

// TLSFileDatabase is implemented by Database objects which load their
// certificate information from a file. It is an interface which TLS library
// specific subtypes implement.
type TLSFileDatabase struct {
	TLSDatabase
}

var (
	_ TLSFileDatabaser = (*TLSFileDatabase)(nil)
	_ gextras.Nativer  = (*TLSFileDatabase)(nil)
)

func wrapTLSFileDatabase(obj *externglib.Object) *TLSFileDatabase {
	return &TLSFileDatabase{
		TLSDatabase: TLSDatabase{
			Object: obj,
		},
	}
}

func marshalTLSFileDatabaser(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapTLSFileDatabase(obj), nil
}

func (*TLSFileDatabase) privateTLSFileDatabase() {}

// NewTLSFileDatabase creates a new FileDatabase which uses anchor certificate
// authorities in @anchors to verify certificate chains.
//
// The certificates in @anchors must be PEM encoded.
func TlsFileDatabaseNew(anchors string) (*TLSFileDatabase, error) {
	var _arg1 *C.gchar        // out
	var _cret *C.GTlsDatabase // in
	var _cerr *C.GError       // in

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(anchors)))

	_cret = C.g_tls_file_database_new(_arg1, &_cerr)

	var _tlsFileDatabase *TLSFileDatabase // out
	var _goerr error                      // out

	_tlsFileDatabase = wrapTLSFileDatabase(externglib.AssumeOwnership(unsafe.Pointer(_cret)))
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _tlsFileDatabase, _goerr
}
