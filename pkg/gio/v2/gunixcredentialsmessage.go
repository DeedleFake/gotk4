// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/box"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gio-2.0 gio-unix-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <gio/gdesktopappinfo.h>
// #include <gio/gfiledescriptorbased.h>
// #include <gio/gio.h>
// #include <gio/gunixconnection.h>
// #include <gio/gunixcredentialsmessage.h>
// #include <gio/gunixfdlist.h>
// #include <gio/gunixfdmessage.h>
// #include <gio/gunixinputstream.h>
// #include <gio/gunixmounts.h>
// #include <gio/gunixoutputstream.h>
// #include <gio/gunixsocketaddress.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_unix_credentials_message_get_type()), F: marshalUnixCredentialsMessage},
	})
}

// UnixCredentialsMessage: this ControlMessage contains a #GCredentials
// instance. It may be sent using g_socket_send_message() and received using
// g_socket_receive_message() over UNIX sockets (ie: sockets in the
// G_SOCKET_FAMILY_UNIX family).
//
// For an easier way to send and receive credentials over stream-oriented UNIX
// sockets, see g_unix_connection_send_credentials() and
// g_unix_connection_receive_credentials(). To receive credentials of a foreign
// process connected to a socket, use g_socket_get_credentials().
type UnixCredentialsMessage interface {
	gextras.Objector

	// AsSocketControlMessage casts the class to the SocketControlMessage interface.
	AsSocketControlMessage() SocketControlMessage

	// GetLevel returns the "level" (i.e. the originating protocol) of the
	// control message. This is often SOL_SOCKET.
	//
	// This method is inherited from SocketControlMessage
	GetLevel() int
	// GetMsgType returns the protocol specific type of the control message. For
	// instance, for UNIX fd passing this would be SCM_RIGHTS.
	//
	// This method is inherited from SocketControlMessage
	GetMsgType() int
	// GetSize returns the space required for the control message, not including
	// headers or alignment.
	//
	// This method is inherited from SocketControlMessage
	GetSize() uint
	// Serialize converts the data in the message to bytes placed in the
	// message.
	//
	// @data is guaranteed to have enough space to fit the size returned by
	// g_socket_control_message_get_size() on this object.
	//
	// This method is inherited from SocketControlMessage
	Serialize(data interface{})

	// Credentials gets the credentials stored in @message.
	Credentials() Credentials
}

// unixCredentialsMessage implements the UnixCredentialsMessage interface.
type unixCredentialsMessage struct {
	*externglib.Object
}

var _ UnixCredentialsMessage = (*unixCredentialsMessage)(nil)

// WrapUnixCredentialsMessage wraps a GObject to a type that implements
// interface UnixCredentialsMessage. It is primarily used internally.
func WrapUnixCredentialsMessage(obj *externglib.Object) UnixCredentialsMessage {
	return unixCredentialsMessage{obj}
}

func marshalUnixCredentialsMessage(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapUnixCredentialsMessage(obj), nil
}

// NewUnixCredentialsMessage creates a new CredentialsMessage with credentials
// matching the current processes.
func NewUnixCredentialsMessage() UnixCredentialsMessage {
	var _cret *C.GSocketControlMessage // in

	_cret = C.g_unix_credentials_message_new()

	var _unixCredentialsMessage UnixCredentialsMessage // out

	_unixCredentialsMessage = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(UnixCredentialsMessage)

	return _unixCredentialsMessage
}

// NewUnixCredentialsMessageWithCredentials creates a new CredentialsMessage
// holding @credentials.
func NewUnixCredentialsMessageWithCredentials(credentials Credentials) UnixCredentialsMessage {
	var _arg1 *C.GCredentials          // out
	var _cret *C.GSocketControlMessage // in

	_arg1 = (*C.GCredentials)(unsafe.Pointer(credentials.Native()))

	_cret = C.g_unix_credentials_message_new_with_credentials(_arg1)

	var _unixCredentialsMessage UnixCredentialsMessage // out

	_unixCredentialsMessage = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(UnixCredentialsMessage)

	return _unixCredentialsMessage
}

func (u unixCredentialsMessage) AsSocketControlMessage() SocketControlMessage {
	return WrapSocketControlMessage(gextras.InternObject(u))
}

func (m unixCredentialsMessage) GetLevel() int {
	return WrapSocketControlMessage(gextras.InternObject(m)).GetLevel()
}

func (m unixCredentialsMessage) GetMsgType() int {
	return WrapSocketControlMessage(gextras.InternObject(m)).GetMsgType()
}

func (m unixCredentialsMessage) GetSize() uint {
	return WrapSocketControlMessage(gextras.InternObject(m)).GetSize()
}

func (m unixCredentialsMessage) Serialize(data interface{}) {
	WrapSocketControlMessage(gextras.InternObject(m)).Serialize(data)
}

func (m unixCredentialsMessage) Credentials() Credentials {
	var _arg0 *C.GUnixCredentialsMessage // out
	var _cret *C.GCredentials            // in

	_arg0 = (*C.GUnixCredentialsMessage)(unsafe.Pointer(m.Native()))

	_cret = C.g_unix_credentials_message_get_credentials(_arg0)

	var _credentials Credentials // out

	_credentials = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Credentials)

	return _credentials
}
