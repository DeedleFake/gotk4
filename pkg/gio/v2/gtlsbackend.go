// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gio-2.0 gio-unix-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <stdbool.h>
// #include <glib-object.h>
// #include <gio/gdesktopappinfo.h>
// #include <gio/gfiledescriptorbased.h>
// #include <gio/gio.h>
// #include <gio/gunixconnection.h>
// #include <gio/gunixcredentialsmessage.h>
// #include <gio/gunixfdlist.h>
// #include <gio/gunixfdmessage.h>
// #include <gio/gunixinputstream.h>
// #include <gio/gunixmounts.h>
// #include <gio/gunixoutputstream.h>
// #include <gio/gunixsocketaddress.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_tls_backend_get_type()), F: marshalTLSBackend},
	})
}

// TLSBackendGetDefault gets the default Backend for the system.
func TLSBackendGetDefault() TLSBackend {
	var cret *C.GTlsBackend
	var goret1 TLSBackend

	cret = C.g_tls_backend_get_default()

	goret1 = gextras.CastObject(externglib.Take(unsafe.Pointer(cret.Native()))).(TLSBackend)

	return goret1
}

// TLSBackendOverrider contains methods that are overridable. This
// interface is a subset of the interface TLSBackend.
type TLSBackendOverrider interface {
	// DefaultDatabase gets the default Database used to verify TLS connections.
	DefaultDatabase() TLSDatabase
	// SupportsDTLS checks if DTLS is supported. DTLS support may not be
	// available even if TLS support is available, and vice-versa.
	SupportsDTLS() bool
	// SupportsTLS checks if TLS is supported; if this returns false for the
	// default Backend, it means no "real" TLS backend is available.
	SupportsTLS() bool
}

// TLSBackend: TLS (Transport Layer Security, aka SSL) and DTLS backend.
type TLSBackend interface {
	gextras.Objector
	TLSBackendOverrider

	// CertificateType gets the #GType of @backend's Certificate implementation.
	CertificateType() externglib.Type
	// ClientConnectionType gets the #GType of @backend's ClientConnection
	// implementation.
	ClientConnectionType() externglib.Type
	// DTLSClientConnectionType gets the #GType of @backend’s ClientConnection
	// implementation.
	DTLSClientConnectionType() externglib.Type
	// DTLSServerConnectionType gets the #GType of @backend’s ServerConnection
	// implementation.
	DTLSServerConnectionType() externglib.Type
	// FileDatabaseType gets the #GType of @backend's FileDatabase
	// implementation.
	FileDatabaseType() externglib.Type
	// ServerConnectionType gets the #GType of @backend's ServerConnection
	// implementation.
	ServerConnectionType() externglib.Type
	// SetDefaultDatabase: set the default Database used to verify TLS
	// connections
	//
	// Any subsequent call to g_tls_backend_get_default_database() will return
	// the database set in this call. Existing databases and connections are not
	// modified.
	//
	// Setting a nil default database will reset to using the system default
	// database as if g_tls_backend_set_default_database() had never been
	// called.
	SetDefaultDatabase(database TLSDatabase)
}

// tlsBackend implements the TLSBackend interface.
type tlsBackend struct {
	gextras.Objector
}

var _ TLSBackend = (*tlsBackend)(nil)

// WrapTLSBackend wraps a GObject to a type that implements interface
// TLSBackend. It is primarily used internally.
func WrapTLSBackend(obj *externglib.Object) TLSBackend {
	return TLSBackend{
		Objector: obj,
	}
}

func marshalTLSBackend(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapTLSBackend(obj), nil
}

// CertificateType gets the #GType of @backend's Certificate implementation.
func (b tlsBackend) CertificateType() externglib.Type {
	var arg0 *C.GTlsBackend

	arg0 = (*C.GTlsBackend)(unsafe.Pointer(b.Native()))

	var cret C.GType
	var goret1 externglib.Type

	cret = C.g_tls_backend_get_certificate_type(arg0)

	goret1 = externglib.Type(cret)

	return goret1
}

// ClientConnectionType gets the #GType of @backend's ClientConnection
// implementation.
func (b tlsBackend) ClientConnectionType() externglib.Type {
	var arg0 *C.GTlsBackend

	arg0 = (*C.GTlsBackend)(unsafe.Pointer(b.Native()))

	var cret C.GType
	var goret1 externglib.Type

	cret = C.g_tls_backend_get_client_connection_type(arg0)

	goret1 = externglib.Type(cret)

	return goret1
}

// DefaultDatabase gets the default Database used to verify TLS connections.
func (b tlsBackend) DefaultDatabase() TLSDatabase {
	var arg0 *C.GTlsBackend

	arg0 = (*C.GTlsBackend)(unsafe.Pointer(b.Native()))

	var cret *C.GTlsDatabase
	var goret1 TLSDatabase

	cret = C.g_tls_backend_get_default_database(arg0)

	goret1 = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(cret.Native()))).(TLSDatabase)

	return goret1
}

// DTLSClientConnectionType gets the #GType of @backend’s ClientConnection
// implementation.
func (b tlsBackend) DTLSClientConnectionType() externglib.Type {
	var arg0 *C.GTlsBackend

	arg0 = (*C.GTlsBackend)(unsafe.Pointer(b.Native()))

	var cret C.GType
	var goret1 externglib.Type

	cret = C.g_tls_backend_get_dtls_client_connection_type(arg0)

	goret1 = externglib.Type(cret)

	return goret1
}

// DTLSServerConnectionType gets the #GType of @backend’s ServerConnection
// implementation.
func (b tlsBackend) DTLSServerConnectionType() externglib.Type {
	var arg0 *C.GTlsBackend

	arg0 = (*C.GTlsBackend)(unsafe.Pointer(b.Native()))

	var cret C.GType
	var goret1 externglib.Type

	cret = C.g_tls_backend_get_dtls_server_connection_type(arg0)

	goret1 = externglib.Type(cret)

	return goret1
}

// FileDatabaseType gets the #GType of @backend's FileDatabase
// implementation.
func (b tlsBackend) FileDatabaseType() externglib.Type {
	var arg0 *C.GTlsBackend

	arg0 = (*C.GTlsBackend)(unsafe.Pointer(b.Native()))

	var cret C.GType
	var goret1 externglib.Type

	cret = C.g_tls_backend_get_file_database_type(arg0)

	goret1 = externglib.Type(cret)

	return goret1
}

// ServerConnectionType gets the #GType of @backend's ServerConnection
// implementation.
func (b tlsBackend) ServerConnectionType() externglib.Type {
	var arg0 *C.GTlsBackend

	arg0 = (*C.GTlsBackend)(unsafe.Pointer(b.Native()))

	var cret C.GType
	var goret1 externglib.Type

	cret = C.g_tls_backend_get_server_connection_type(arg0)

	goret1 = externglib.Type(cret)

	return goret1
}

// SetDefaultDatabase: set the default Database used to verify TLS
// connections
//
// Any subsequent call to g_tls_backend_get_default_database() will return
// the database set in this call. Existing databases and connections are not
// modified.
//
// Setting a nil default database will reset to using the system default
// database as if g_tls_backend_set_default_database() had never been
// called.
func (b tlsBackend) SetDefaultDatabase(database TLSDatabase) {
	var arg0 *C.GTlsBackend
	var arg1 *C.GTlsDatabase

	arg0 = (*C.GTlsBackend)(unsafe.Pointer(b.Native()))
	arg1 = (*C.GTlsDatabase)(unsafe.Pointer(database.Native()))

	C.g_tls_backend_set_default_database(arg0, database)
}

// SupportsDTLS checks if DTLS is supported. DTLS support may not be
// available even if TLS support is available, and vice-versa.
func (b tlsBackend) SupportsDTLS() bool {
	var arg0 *C.GTlsBackend

	arg0 = (*C.GTlsBackend)(unsafe.Pointer(b.Native()))

	var cret C.gboolean
	var goret1 bool

	cret = C.g_tls_backend_supports_dtls(arg0)

	goret1 = C.bool(cret) != C.false

	return goret1
}

// SupportsTLS checks if TLS is supported; if this returns false for the
// default Backend, it means no "real" TLS backend is available.
func (b tlsBackend) SupportsTLS() bool {
	var arg0 *C.GTlsBackend

	arg0 = (*C.GTlsBackend)(unsafe.Pointer(b.Native()))

	var cret C.gboolean
	var goret1 bool

	cret = C.g_tls_backend_supports_tls(arg0)

	goret1 = C.bool(cret) != C.false

	return goret1
}
