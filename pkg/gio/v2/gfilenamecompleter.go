// Code generated by girgen. DO NOT EDIT.

package gio

import (
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gio-2.0 gio-unix-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gio/gdesktopappinfo.h>
// #include <gio/gfiledescriptorbased.h>
// #include <gio/gio.h>
// #include <gio/gunixconnection.h>
// #include <gio/gunixcredentialsmessage.h>
// #include <gio/gunixfdlist.h>
// #include <gio/gunixfdmessage.h>
// #include <gio/gunixinputstream.h>
// #include <gio/gunixmounts.h>
// #include <gio/gunixoutputstream.h>
// #include <gio/gunixsocketaddress.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_filename_completer_get_type()), F: marshalFilenameCompleter},
	})
}

// FilenameCompleter completes partial file and directory names given a partial
// string by looking in the file system for clues. Can return a list of possible
// completion strings for widget implementations.
type FilenameCompleter interface {
	gextras.Objector

	// CompletionSuffix obtains a completion for @initial_text from @completer.
	CompletionSuffix(c FilenameCompleter, initialText string)
	// Completions gets an array of completion strings for a given initial text.
	Completions(c FilenameCompleter, initialText string)
	// SetDirsOnly: if @dirs_only is true, @completer will only complete
	// directory names, and not file names.
	SetDirsOnly(c FilenameCompleter, dirsOnly bool)
}

// filenameCompleter implements the FilenameCompleter interface.
type filenameCompleter struct {
	gextras.Objector
}

var _ FilenameCompleter = (*filenameCompleter)(nil)

// WrapFilenameCompleter wraps a GObject to the right type. It is
// primarily used internally.
func WrapFilenameCompleter(obj *externglib.Object) FilenameCompleter {
	return FilenameCompleter{
		Objector: obj,
	}
}

func marshalFilenameCompleter(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapFilenameCompleter(obj), nil
}

// NewFilenameCompleter constructs a class FilenameCompleter.
func NewFilenameCompleter() {
	C.g_filename_completer_new()
}

// CompletionSuffix obtains a completion for @initial_text from @completer.
func (c filenameCompleter) CompletionSuffix(c FilenameCompleter, initialText string) {
	var arg0 *C.GFilenameCompleter
	var arg1 *C.char

	arg0 = (*C.GFilenameCompleter)(unsafe.Pointer(c.Native()))
	arg1 = (*C.char)(C.CString(initialText))
	defer C.free(unsafe.Pointer(arg1))

	C.g_filename_completer_get_completion_suffix(arg0, arg1)
}

// Completions gets an array of completion strings for a given initial text.
func (c filenameCompleter) Completions(c FilenameCompleter, initialText string) {
	var arg0 *C.GFilenameCompleter
	var arg1 *C.char

	arg0 = (*C.GFilenameCompleter)(unsafe.Pointer(c.Native()))
	arg1 = (*C.char)(C.CString(initialText))
	defer C.free(unsafe.Pointer(arg1))

	C.g_filename_completer_get_completions(arg0, arg1)
}

// SetDirsOnly: if @dirs_only is true, @completer will only complete
// directory names, and not file names.
func (c filenameCompleter) SetDirsOnly(c FilenameCompleter, dirsOnly bool) {
	var arg0 *C.GFilenameCompleter
	var arg1 C.gboolean

	arg0 = (*C.GFilenameCompleter)(unsafe.Pointer(c.Native()))
	if dirsOnly {
		arg1 = C.gboolean(1)
	}

	C.g_filename_completer_set_dirs_only(arg0, arg1)
}
