// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gio-2.0 gio-unix-2.0 glib-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <gio/gdesktopappinfo.h>
// #include <gio/gfiledescriptorbased.h>
// #include <gio/gio.h>
// #include <gio/gunixconnection.h>
// #include <gio/gunixcredentialsmessage.h>
// #include <gio/gunixfdlist.h>
// #include <gio/gunixfdmessage.h>
// #include <gio/gunixinputstream.h>
// #include <gio/gunixmounts.h>
// #include <gio/gunixoutputstream.h>
// #include <gio/gunixsocketaddress.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_seekable_get_type()), F: marshalSeekable},
	})
}

// SeekableOverrider contains methods that are overridable. This
// interface is a subset of the interface Seekable.
type SeekableOverrider interface {
	// CanSeek tests if the stream supports the Iface.
	CanSeek() bool
	// CanTruncate tests if the length of the stream can be adjusted with
	// g_seekable_truncate().
	CanTruncate() bool
	// Tell tells the current position within the stream.
	Tell() int64
}

// Seekable is implemented by streams (implementations of Stream or Stream) that
// support seeking.
//
// Seekable streams largely fall into two categories: resizable and fixed-size.
//
// #GSeekable on fixed-sized streams is approximately the same as POSIX lseek()
// on a block device (for example: attempting to seek past the end of the device
// is an error). Fixed streams typically cannot be truncated.
//
// #GSeekable on resizable streams is approximately the same as POSIX lseek() on
// a normal file. Seeking past the end and writing data will usually cause the
// stream to resize by introducing zero bytes.
type Seekable interface {
	gextras.Objector
	SeekableOverrider
}

// seekable implements the Seekable interface.
type seekable struct {
	gextras.Objector
}

var _ Seekable = (*seekable)(nil)

// WrapSeekable wraps a GObject to a type that implements interface
// Seekable. It is primarily used internally.
func WrapSeekable(obj *externglib.Object) Seekable {
	return Seekable{
		Objector: obj,
	}
}

func marshalSeekable(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapSeekable(obj), nil
}

// CanSeek tests if the stream supports the Iface.
func (s seekable) CanSeek() bool {
	var _arg0 *C.GSeekable // out

	_arg0 = (*C.GSeekable)(unsafe.Pointer(s.Native()))

	var _cret C.gboolean // in

	_cret = C.g_seekable_can_seek(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// CanTruncate tests if the length of the stream can be adjusted with
// g_seekable_truncate().
func (s seekable) CanTruncate() bool {
	var _arg0 *C.GSeekable // out

	_arg0 = (*C.GSeekable)(unsafe.Pointer(s.Native()))

	var _cret C.gboolean // in

	_cret = C.g_seekable_can_truncate(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Tell tells the current position within the stream.
func (s seekable) Tell() int64 {
	var _arg0 *C.GSeekable // out

	_arg0 = (*C.GSeekable)(unsafe.Pointer(s.Native()))

	var _cret C.goffset // in

	_cret = C.g_seekable_tell(_arg0)

	var _gint64 int64 // out

	_gint64 = (int64)(_cret)

	return _gint64
}
