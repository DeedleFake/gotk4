// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"github.com/diamondburned/gotk4/pkg/glib/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gio-2.0 gio-unix-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <stdbool.h>
// #include <glib-object.h>
// #include <gio/gdesktopappinfo.h>
// #include <gio/gfiledescriptorbased.h>
// #include <gio/gio.h>
// #include <gio/gunixconnection.h>
// #include <gio/gunixcredentialsmessage.h>
// #include <gio/gunixfdlist.h>
// #include <gio/gunixfdmessage.h>
// #include <gio/gunixinputstream.h>
// #include <gio/gunixmounts.h>
// #include <gio/gunixoutputstream.h>
// #include <gio/gunixsocketaddress.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_seekable_get_type()), F: marshalSeekable},
	})
}

// SeekableOverrider contains methods that are overridable. This
// interface is a subset of the interface Seekable.
type SeekableOverrider interface {
	// CanSeek tests if the stream supports the Iface.
	CanSeek() bool
	// CanTruncate tests if the length of the stream can be adjusted with
	// g_seekable_truncate().
	CanTruncate() bool
	// Seek seeks in the stream by the given @offset, modified by @type.
	//
	// Attempting to seek past the end of the stream will have different results
	// depending on if the stream is fixed-sized or resizable. If the stream is
	// resizable then seeking past the end and then writing will result in zeros
	// filling the empty space. Seeking past the end of a resizable stream and
	// reading will result in EOF. Seeking past the end of a fixed-sized stream
	// will fail.
	//
	// Any operation that would result in a negative offset will fail.
	//
	// If @cancellable is not nil, then the operation can be cancelled by
	// triggering the cancellable object from another thread. If the operation
	// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
	Seek(offset int64, typ glib.SeekType, cancellable Cancellable) error
	// Tell tells the current position within the stream.
	Tell() int64
	// TruncateFn sets the length of the stream to @offset. If the stream was
	// previously larger than @offset, the extra data is discarded. If the
	// stream was previously shorter than @offset, it is extended with NUL
	// ('\0') bytes.
	//
	// If @cancellable is not nil, then the operation can be cancelled by
	// triggering the cancellable object from another thread. If the operation
	// was cancelled, the error G_IO_ERROR_CANCELLED will be returned. If an
	// operation was partially finished when the operation was cancelled the
	// partial result will be returned, without an error.
	TruncateFn(offset int64, cancellable Cancellable) error
}

// Seekable is implemented by streams (implementations of Stream or Stream) that
// support seeking.
//
// Seekable streams largely fall into two categories: resizable and fixed-size.
//
// #GSeekable on fixed-sized streams is approximately the same as POSIX lseek()
// on a block device (for example: attempting to seek past the end of the device
// is an error). Fixed streams typically cannot be truncated.
//
// #GSeekable on resizable streams is approximately the same as POSIX lseek() on
// a normal file. Seeking past the end and writing data will usually cause the
// stream to resize by introducing zero bytes.
type Seekable interface {
	gextras.Objector
	SeekableOverrider

	// Truncate sets the length of the stream to @offset. If the stream was
	// previously larger than @offset, the extra data is discarded. If the
	// stream was previously shorter than @offset, it is extended with NUL
	// ('\0') bytes.
	//
	// If @cancellable is not nil, then the operation can be cancelled by
	// triggering the cancellable object from another thread. If the operation
	// was cancelled, the error G_IO_ERROR_CANCELLED will be returned. If an
	// operation was partially finished when the operation was cancelled the
	// partial result will be returned, without an error.
	Truncate(offset int64, cancellable Cancellable) error
}

// seekable implements the Seekable interface.
type seekable struct {
	gextras.Objector
}

var _ Seekable = (*seekable)(nil)

// WrapSeekable wraps a GObject to a type that implements interface
// Seekable. It is primarily used internally.
func WrapSeekable(obj *externglib.Object) Seekable {
	return Seekable{
		Objector: obj,
	}
}

func marshalSeekable(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapSeekable(obj), nil
}

// CanSeek tests if the stream supports the Iface.
func (s seekable) CanSeek() bool {
	var arg0 *C.GSeekable

	arg0 = (*C.GSeekable)(unsafe.Pointer(s.Native()))

	var cret C.gboolean
	var ret1 bool

	cret = C.g_seekable_can_seek(arg0)

	ret1 = C.bool(cret) != C.false

	return ret1
}

// CanTruncate tests if the length of the stream can be adjusted with
// g_seekable_truncate().
func (s seekable) CanTruncate() bool {
	var arg0 *C.GSeekable

	arg0 = (*C.GSeekable)(unsafe.Pointer(s.Native()))

	var cret C.gboolean
	var ret1 bool

	cret = C.g_seekable_can_truncate(arg0)

	ret1 = C.bool(cret) != C.false

	return ret1
}

// Seek seeks in the stream by the given @offset, modified by @type.
//
// Attempting to seek past the end of the stream will have different results
// depending on if the stream is fixed-sized or resizable. If the stream is
// resizable then seeking past the end and then writing will result in zeros
// filling the empty space. Seeking past the end of a resizable stream and
// reading will result in EOF. Seeking past the end of a fixed-sized stream
// will fail.
//
// Any operation that would result in a negative offset will fail.
//
// If @cancellable is not nil, then the operation can be cancelled by
// triggering the cancellable object from another thread. If the operation
// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
func (s seekable) Seek(offset int64, typ glib.SeekType, cancellable Cancellable) error {
	var arg0 *C.GSeekable
	var arg1 C.goffset
	var arg2 C.GSeekType
	var arg3 *C.GCancellable
	var errout *C.GError

	arg0 = (*C.GSeekable)(unsafe.Pointer(s.Native()))
	arg1 = C.goffset(offset)
	arg2 = (C.GSeekType)(typ)
	arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	var goerr error

	C.g_seekable_seek(arg0, offset, typ, cancellable, &errout)

	if errout != nil {
		goerr = fmt.Errorf("%d: %s", errout.code, C.GoString(errout.message))
		C.g_error_free(errout)
	}

}

// Tell tells the current position within the stream.
func (s seekable) Tell() int64 {
	var arg0 *C.GSeekable

	arg0 = (*C.GSeekable)(unsafe.Pointer(s.Native()))

	var cret C.goffset
	var ret1 int64

	cret = C.g_seekable_tell(arg0)

	ret1 = C.goffset(cret)

	return ret1
}

// Truncate sets the length of the stream to @offset. If the stream was
// previously larger than @offset, the extra data is discarded. If the
// stream was previously shorter than @offset, it is extended with NUL
// ('\0') bytes.
//
// If @cancellable is not nil, then the operation can be cancelled by
// triggering the cancellable object from another thread. If the operation
// was cancelled, the error G_IO_ERROR_CANCELLED will be returned. If an
// operation was partially finished when the operation was cancelled the
// partial result will be returned, without an error.
func (s seekable) Truncate(offset int64, cancellable Cancellable) error {
	var arg0 *C.GSeekable
	var arg1 C.goffset
	var arg2 *C.GCancellable
	var errout *C.GError

	arg0 = (*C.GSeekable)(unsafe.Pointer(s.Native()))
	arg1 = C.goffset(offset)
	arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	var goerr error

	C.g_seekable_truncate(arg0, offset, cancellable, &errout)

	if errout != nil {
		goerr = fmt.Errorf("%d: %s", errout.code, C.GoString(errout.message))
		C.g_error_free(errout)
	}

}
