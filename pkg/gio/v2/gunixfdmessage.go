// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gerror"
	"github.com/diamondburned/gotk4/internal/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gio-2.0 gio-unix-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gio/gdesktopappinfo.h>
// #include <gio/gfiledescriptorbased.h>
// #include <gio/gio.h>
// #include <gio/gunixconnection.h>
// #include <gio/gunixcredentialsmessage.h>
// #include <gio/gunixfdlist.h>
// #include <gio/gunixfdmessage.h>
// #include <gio/gunixinputstream.h>
// #include <gio/gunixmounts.h>
// #include <gio/gunixoutputstream.h>
// #include <gio/gunixsocketaddress.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_unix_fd_message_get_type()), F: marshalUnixFDMessage},
	})
}

// UnixFDMessage: this ControlMessage contains a FDList. It may be sent using
// g_socket_send_message() and received using g_socket_receive_message() over
// UNIX sockets (ie: sockets in the G_SOCKET_FAMILY_UNIX family). The file
// descriptors are copied between processes by the kernel.
//
// For an easier way to send and receive file descriptors over stream-oriented
// UNIX sockets, see g_unix_connection_send_fd() and
// g_unix_connection_receive_fd().
//
// Note that `<gio/gunixfdmessage.h>` belongs to the UNIX-specific GIO
// interfaces, thus you have to use the `gio-unix-2.0.pc` pkg-config file when
// using it.
type UnixFDMessage interface {
	SocketControlMessage

	// AppendFd adds a file descriptor to @message.
	//
	// The file descriptor is duplicated using dup(). You keep your copy of the
	// descriptor and the copy contained in @message will be closed when
	// @message is finalized.
	//
	// A possible cause of failure is exceeding the per-process or system-wide
	// file descriptor limit.
	AppendFd(fd int) error
	// FdList gets the FDList contained in @message. This function does not
	// return a reference to the caller, but the returned list is valid for the
	// lifetime of @message.
	FdList() UnixFDList
	// StealFds returns the array of file descriptors that is contained in this
	// object.
	//
	// After this call, the descriptors are no longer contained in @message.
	// Further calls will return an empty list (unless more descriptors have
	// been added).
	//
	// The return result of this function must be freed with g_free(). The
	// caller is also responsible for closing all of the file descriptors.
	//
	// If @length is non-nil then it is set to the number of file descriptors in
	// the returned array. The returned array is also terminated with -1.
	//
	// This function never returns nil. In case there are no file descriptors
	// contained in @message, an empty array is returned.
	StealFds() []int
}

// unixFDMessage implements the UnixFDMessage interface.
type unixFDMessage struct {
	SocketControlMessage
}

var _ UnixFDMessage = (*unixFDMessage)(nil)

// WrapUnixFDMessage wraps a GObject to the right type. It is
// primarily used internally.
func WrapUnixFDMessage(obj *externglib.Object) UnixFDMessage {
	return UnixFDMessage{
		SocketControlMessage: WrapSocketControlMessage(obj),
	}
}

func marshalUnixFDMessage(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapUnixFDMessage(obj), nil
}

// NewUnixFDMessage constructs a class UnixFDMessage.
func NewUnixFDMessage() UnixFDMessage {
	cret := new(C.GUnixFDMessage)
	var goret UnixFDMessage

	cret = C.g_unix_fd_message_new()

	goret = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(cret.Native()))).(UnixFDMessage)

	return goret
}

// NewUnixFDMessageWithFdList constructs a class UnixFDMessage.
func NewUnixFDMessageWithFdList(fdList UnixFDList) UnixFDMessage {
	var arg1 *C.GUnixFDList

	arg1 = (*C.GUnixFDList)(unsafe.Pointer(fdList.Native()))

	cret := new(C.GUnixFDMessage)
	var goret UnixFDMessage

	cret = C.g_unix_fd_message_new_with_fd_list(arg1)

	goret = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(cret.Native()))).(UnixFDMessage)

	return goret
}

// AppendFd adds a file descriptor to @message.
//
// The file descriptor is duplicated using dup(). You keep your copy of the
// descriptor and the copy contained in @message will be closed when
// @message is finalized.
//
// A possible cause of failure is exceeding the per-process or system-wide
// file descriptor limit.
func (m unixFDMessage) AppendFd(fd int) error {
	var arg0 *C.GUnixFDMessage
	var arg1 C.gint

	arg0 = (*C.GUnixFDMessage)(unsafe.Pointer(m.Native()))
	arg1 = C.gint(fd)

	var cerr *C.GError
	var goerr error

	C.g_unix_fd_message_append_fd(arg0, arg1, &cerr)

	goerr = gerror.Take(unsafe.Pointer(cerr))

	return goerr
}

// FdList gets the FDList contained in @message. This function does not
// return a reference to the caller, but the returned list is valid for the
// lifetime of @message.
func (m unixFDMessage) FdList() UnixFDList {
	var arg0 *C.GUnixFDMessage

	arg0 = (*C.GUnixFDMessage)(unsafe.Pointer(m.Native()))

	var cret *C.GUnixFDList
	var goret UnixFDList

	cret = C.g_unix_fd_message_get_fd_list(arg0)

	goret = gextras.CastObject(externglib.Take(unsafe.Pointer(cret.Native()))).(UnixFDList)

	return goret
}

// StealFds returns the array of file descriptors that is contained in this
// object.
//
// After this call, the descriptors are no longer contained in @message.
// Further calls will return an empty list (unless more descriptors have
// been added).
//
// The return result of this function must be freed with g_free(). The
// caller is also responsible for closing all of the file descriptors.
//
// If @length is non-nil then it is set to the number of file descriptors in
// the returned array. The returned array is also terminated with -1.
//
// This function never returns nil. In case there are no file descriptors
// contained in @message, an empty array is returned.
func (m unixFDMessage) StealFds() []int {
	var arg0 *C.GUnixFDMessage

	arg0 = (*C.GUnixFDMessage)(unsafe.Pointer(m.Native()))

	var cret *C.gint
	var arg1 *C.gint
	var goret []int

	cret = C.g_unix_fd_message_steal_fds(arg0, arg1)

	ptr.SetSlice(unsafe.Pointer(&goret), unsafe.Pointer(cret), int(arg1))
	runtime.SetFinalizer(&goret, func(v *[]int) {
		C.free(ptr.Slice(unsafe.Pointer(v)))
	})

	return ret1, goret
}
