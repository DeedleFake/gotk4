// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gio-2.0 gio-unix-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <gio/gdesktopappinfo.h>
// #include <gio/gfiledescriptorbased.h>
// #include <gio/gio.h>
// #include <gio/gunixconnection.h>
// #include <gio/gunixcredentialsmessage.h>
// #include <gio/gunixfdlist.h>
// #include <gio/gunixfdmessage.h>
// #include <gio/gunixinputstream.h>
// #include <gio/gunixmounts.h>
// #include <gio/gunixoutputstream.h>
// #include <gio/gunixsocketaddress.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_file_icon_get_type()), F: marshalFileIcon},
	})
}

// FileIcon specifies an icon by pointing to an image file to be used as icon.
type FileIcon interface {
	gextras.Objector

	// File gets the #GFile associated with the given @icon.
	File() *FileIface
}

// FileIconClass implements the FileIcon interface.
type FileIconClass struct {
	*externglib.Object
	IconIface
	LoadableIconIface
}

var _ FileIcon = (*FileIconClass)(nil)

func wrapFileIcon(obj *externglib.Object) FileIcon {
	return &FileIconClass{
		Object: obj,
		IconIface: IconIface{
			Object: obj,
		},
		LoadableIconIface: LoadableIconIface{
			IconIface: IconIface{
				Object: obj,
			},
		},
	}
}

func marshalFileIcon(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapFileIcon(obj), nil
}

// NewFileIcon creates a new icon for a file.
func NewFileIcon(file File) *FileIconClass {
	var _arg1 *C.GFile // out
	var _cret *C.GIcon // in

	_arg1 = (*C.GFile)(unsafe.Pointer(file.Native()))

	_cret = C.g_file_icon_new(_arg1)

	var _fileIcon *FileIconClass // out

	_fileIcon = (gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret)))).(*FileIconClass)

	return _fileIcon
}

// File gets the #GFile associated with the given @icon.
func (icon *FileIconClass) File() *FileIface {
	var _arg0 *C.GFileIcon // out
	var _cret *C.GFile     // in

	_arg0 = (*C.GFileIcon)(unsafe.Pointer(icon.Native()))

	_cret = C.g_file_icon_get_file(_arg0)

	var _file *FileIface // out

	_file = (gextras.CastObject(externglib.Take(unsafe.Pointer(_cret)))).(*FileIface)

	return _file
}
