// Code generated by girgen. DO NOT EDIT.

package gio

import (
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gio-2.0 gio-unix-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gio/gdesktopappinfo.h>
// #include <gio/gfiledescriptorbased.h>
// #include <gio/gio.h>
// #include <gio/gunixconnection.h>
// #include <gio/gunixcredentialsmessage.h>
// #include <gio/gunixfdlist.h>
// #include <gio/gunixfdmessage.h>
// #include <gio/gunixinputstream.h>
// #include <gio/gunixmounts.h>
// #include <gio/gunixoutputstream.h>
// #include <gio/gunixsocketaddress.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_file_icon_get_type()), F: marshalFileIcon},
	})
}

// FileIcon specifies an icon by pointing to an image file to be used as icon.
type FileIcon interface {
	gextras.Objector
	Icon
	LoadableIcon

	// File gets the #GFile associated with the given @icon.
	File(i FileIcon)
}

// fileIcon implements the FileIcon interface.
type fileIcon struct {
	gextras.Objector
	Icon
	LoadableIcon
}

var _ FileIcon = (*fileIcon)(nil)

// WrapFileIcon wraps a GObject to the right type. It is
// primarily used internally.
func WrapFileIcon(obj *externglib.Object) FileIcon {
	return FileIcon{
		Objector:     obj,
		Icon:         WrapIcon(obj),
		LoadableIcon: WrapLoadableIcon(obj),
	}
}

func marshalFileIcon(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapFileIcon(obj), nil
}

// NewFileIcon constructs a class FileIcon.
func NewFileIcon(file File) {
	var arg1 *C.GFile

	arg1 = (*C.GFile)(unsafe.Pointer(file.Native()))

	C.g_file_icon_new(arg1)
}

// File gets the #GFile associated with the given @icon.
func (i fileIcon) File(i FileIcon) {
	var arg0 *C.GFileIcon

	arg0 = (*C.GFileIcon)(unsafe.Pointer(i.Native()))

	C.g_file_icon_get_file(arg0)
}
