// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gio-2.0 gio-unix-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gio/gdesktopappinfo.h>
// #include <gio/gfiledescriptorbased.h>
// #include <gio/gio.h>
// #include <gio/gunixconnection.h>
// #include <gio/gunixcredentialsmessage.h>
// #include <gio/gunixfdlist.h>
// #include <gio/gunixfdmessage.h>
// #include <gio/gunixinputstream.h>
// #include <gio/gunixmounts.h>
// #include <gio/gunixoutputstream.h>
// #include <gio/gunixsocketaddress.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_network_address_get_type()), F: marshalNetworkAddress},
	})
}

// NetworkAddress provides an easy way to resolve a hostname and then attempt to
// connect to that host, handling the possibility of multiple IP addresses and
// multiple address families.
//
// The enumeration results of resolved addresses *may* be cached as long as this
// object is kept alive which may have unexpected results if alive for too long.
//
// See Connectable for an example of using the connectable interface.
type NetworkAddress interface {
	gextras.Objector
	SocketConnectable

	// Hostname gets @addr's hostname. This might be either UTF-8 or
	// ASCII-encoded, depending on what @addr was created with.
	Hostname() string
	// Port gets @addr's port number
	Port() uint16
	// Scheme gets @addr's scheme
	Scheme() string
}

// networkAddress implements the NetworkAddress interface.
type networkAddress struct {
	gextras.Objector
	SocketConnectable
}

var _ NetworkAddress = (*networkAddress)(nil)

// WrapNetworkAddress wraps a GObject to the right type. It is
// primarily used internally.
func WrapNetworkAddress(obj *externglib.Object) NetworkAddress {
	return NetworkAddress{
		Objector:          obj,
		SocketConnectable: WrapSocketConnectable(obj),
	}
}

func marshalNetworkAddress(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapNetworkAddress(obj), nil
}

// NewNetworkAddress constructs a class NetworkAddress.
func NewNetworkAddress(hostname string, port uint16) NetworkAddress {
	var arg1 *C.gchar
	var arg2 C.guint16

	arg1 = (*C.gchar)(C.CString(hostname))
	defer C.free(unsafe.Pointer(arg1))
	arg2 = C.guint16(port)

	var cret C.GNetworkAddress
	var goret1 NetworkAddress

	cret = C.g_network_address_new(hostname, port)

	goret1 = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(cret.Native()))).(NetworkAddress)

	return goret1
}

// NewNetworkAddressLoopback constructs a class NetworkAddress.
func NewNetworkAddressLoopback(port uint16) NetworkAddress {
	var arg1 C.guint16

	arg1 = C.guint16(port)

	var cret C.GNetworkAddress
	var goret1 NetworkAddress

	cret = C.g_network_address_new_loopback(port)

	goret1 = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(cret.Native()))).(NetworkAddress)

	return goret1
}

// Hostname gets @addr's hostname. This might be either UTF-8 or
// ASCII-encoded, depending on what @addr was created with.
func (a networkAddress) Hostname() string {
	var arg0 *C.GNetworkAddress

	arg0 = (*C.GNetworkAddress)(unsafe.Pointer(a.Native()))

	var cret *C.gchar
	var goret1 string

	cret = C.g_network_address_get_hostname(arg0)

	goret1 = C.GoString(cret)

	return goret1
}

// Port gets @addr's port number
func (a networkAddress) Port() uint16 {
	var arg0 *C.GNetworkAddress

	arg0 = (*C.GNetworkAddress)(unsafe.Pointer(a.Native()))

	var cret C.guint16
	var goret1 uint16

	cret = C.g_network_address_get_port(arg0)

	goret1 = C.guint16(cret)

	return goret1
}

// Scheme gets @addr's scheme
func (a networkAddress) Scheme() string {
	var arg0 *C.GNetworkAddress

	arg0 = (*C.GNetworkAddress)(unsafe.Pointer(a.Native()))

	var cret *C.gchar
	var goret1 string

	cret = C.g_network_address_get_scheme(arg0)

	goret1 = C.GoString(cret)

	return goret1
}

type NetworkAddressPrivate struct {
	native C.GNetworkAddressPrivate
}

// WrapNetworkAddressPrivate wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapNetworkAddressPrivate(ptr unsafe.Pointer) *NetworkAddressPrivate {
	if ptr == nil {
		return nil
	}

	return (*NetworkAddressPrivate)(ptr)
}

func marshalNetworkAddressPrivate(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapNetworkAddressPrivate(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (n *NetworkAddressPrivate) Native() unsafe.Pointer {
	return unsafe.Pointer(&n.native)
}
