// Code generated by girgen. DO NOT EDIT.

package gio

import (
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gio-2.0 gio-unix-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gio/gdesktopappinfo.h>
// #include <gio/gfiledescriptorbased.h>
// #include <gio/gio.h>
// #include <gio/gunixconnection.h>
// #include <gio/gunixcredentialsmessage.h>
// #include <gio/gunixfdlist.h>
// #include <gio/gunixfdmessage.h>
// #include <gio/gunixinputstream.h>
// #include <gio/gunixmounts.h>
// #include <gio/gunixoutputstream.h>
// #include <gio/gunixsocketaddress.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_memory_monitor_get_type()), F: marshalMemoryMonitor},
	})
}

// MemoryMonitorDupDefault gets a reference to the default Monitor for the
// system.
func MemoryMonitorDupDefault() {
	C.g_memory_monitor_dup_default()
}

// MemoryMonitorOverrider contains methods that are overridable. This
// interface is a subset of the interface MemoryMonitor.
type MemoryMonitorOverrider interface {
	LowMemoryWarning(m MemoryMonitor, level MemoryMonitorWarningLevel)
}

// MemoryMonitor: Monitor will monitor system memory and suggest to the
// application when to free memory so as to leave more room for other
// applications. It is implemented on Linux using the Low Memory Monitor
// (https://gitlab.freedesktop.org/hadess/low-memory-monitor/) (API
// documentation (https://hadess.pages.freedesktop.org/low-memory-monitor/)).
//
// There is also an implementation for use inside Flatpak sandboxes.
//
// Possible actions to take when the signal is received are: - Free caches -
// Save files that haven't been looked at in a while to disk, ready to be
// reopened when needed - Run a garbage collection cycle - Try and compress
// fragmented allocations - Exit on idle if the process has no reason to stay
// around - Call `malloc_trim(3)` (man:malloc_trim) to return cached heap pages
// to the kernel (if supported by your libc)
//
// Note that some actions may not always improve system performance, and so
// should be profiled for your application. `malloc_trim()`, for example, may
// make future heap allocations slower (due to releasing cached heap pages back
// to the kernel).
//
// See MonitorWarningLevel for details on the various warning levels.
//
//    static void
//    warning_cb (GMemoryMonitor *m, GMemoryMonitorWarningLevel level)
//    {
//      g_debug ("Warning level: d", level);
//      if (warning_level > G_MEMORY_MONITOR_WARNING_LEVEL_LOW)
//        drop_caches ();
//    }
//
//    static GMemoryMonitor *
//    monitor_low_memory (void)
//    {
//      GMemoryMonitor *m;
//      m = g_memory_monitor_dup_default ();
//      g_signal_connect (G_OBJECT (m), "low-memory-warning",
//                        G_CALLBACK (warning_cb), NULL);
//      return m;
//    }
//
// Don't forget to disconnect the Monitor::low-memory-warning signal, and unref
// the Monitor itself when exiting.
type MemoryMonitor interface {
	Initable
	MemoryMonitorOverrider
}

// memoryMonitor implements the MemoryMonitor interface.
type memoryMonitor struct {
	Initable
}

var _ MemoryMonitor = (*memoryMonitor)(nil)

// WrapMemoryMonitor wraps a GObject to a type that implements interface
// MemoryMonitor. It is primarily used internally.
func WrapMemoryMonitor(obj *externglib.Object) MemoryMonitor {
	return MemoryMonitor{
		Initable: WrapInitable(obj),
	}
}

func marshalMemoryMonitor(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapMemoryMonitor(obj), nil
}
