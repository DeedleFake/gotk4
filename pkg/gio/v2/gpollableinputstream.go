// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"context"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gcancel"
	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gio-2.0 gio-unix-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <gio/gdesktopappinfo.h>
// #include <gio/gfiledescriptorbased.h>
// #include <gio/gio.h>
// #include <gio/gunixconnection.h>
// #include <gio/gunixcredentialsmessage.h>
// #include <gio/gunixfdlist.h>
// #include <gio/gunixfdmessage.h>
// #include <gio/gunixinputstream.h>
// #include <gio/gunixmounts.h>
// #include <gio/gunixoutputstream.h>
// #include <gio/gunixsocketaddress.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_pollable_input_stream_get_type()), F: marshalPollableInputStreamer},
	})
}

// PollableInputStreamOverrider contains methods that are overridable.
//
// As of right now, interface overriding and subclassing is not supported
// yet, so the interface currently has no use.
type PollableInputStreamOverrider interface {
	// CanPoll checks if stream is actually pollable. Some classes may implement
	// InputStream but have only certain instances of that class be pollable. If
	// this method returns FALSE, then the behavior of other InputStream methods
	// is undefined.
	//
	// For any given stream, the value returned by this method is constant; a
	// stream cannot switch from pollable to non-pollable or vice versa.
	CanPoll() bool
	// CreateSource creates a #GSource that triggers when stream can be read, or
	// cancellable is triggered or an error occurs. The callback on the source
	// is of the SourceFunc type.
	//
	// As with g_pollable_input_stream_is_readable(), it is possible that the
	// stream may not actually be readable even after the source triggers, so
	// you should use g_pollable_input_stream_read_nonblocking() rather than
	// g_input_stream_read() from the callback.
	CreateSource(ctx context.Context) *glib.Source
	// IsReadable checks if stream can be read.
	//
	// Note that some stream types may not be able to implement this 100%
	// reliably, and it is possible that a call to g_input_stream_read() after
	// this returns TRUE would still block. To guarantee non-blocking behavior,
	// you should always use g_pollable_input_stream_read_nonblocking(), which
	// will return a G_IO_ERROR_WOULD_BLOCK error rather than blocking.
	IsReadable() bool
	// ReadNonblocking attempts to read up to count bytes from stream into
	// buffer, as with g_input_stream_read(). If stream is not currently
	// readable, this will immediately return G_IO_ERROR_WOULD_BLOCK, and you
	// can use g_pollable_input_stream_create_source() to create a #GSource that
	// will be triggered when stream is readable.
	//
	// Note that since this method never blocks, you cannot actually use
	// cancellable to cancel it. However, it will return an error if cancellable
	// has already been cancelled when you call, which may happen if you call
	// this method after a source triggers due to having been cancelled.
	ReadNonblocking(buffer []byte) (int, error)
}

// PollableInputStream is implemented by Streams that can be polled for
// readiness to read. This can be used when interfacing with a non-GIO API that
// expects UNIX-file-descriptor-style asynchronous I/O rather than GIO-style.
type PollableInputStream struct {
	InputStream
}

// PollableInputStreamer describes PollableInputStream's abstract methods.
type PollableInputStreamer interface {
	gextras.Objector

	// CanPoll checks if stream is actually pollable.
	CanPoll() bool
	// CreateSource creates a #GSource that triggers when stream can be read, or
	// cancellable is triggered or an error occurs.
	CreateSource(ctx context.Context) *glib.Source
	// IsReadable checks if stream can be read.
	IsReadable() bool
	// ReadNonblocking attempts to read up to count bytes from stream into
	// buffer, as with g_input_stream_read().
	ReadNonblocking(ctx context.Context, buffer []byte) (int, error)
}

var _ PollableInputStreamer = (*PollableInputStream)(nil)

func wrapPollableInputStream(obj *externglib.Object) *PollableInputStream {
	return &PollableInputStream{
		InputStream: InputStream{
			Object: obj,
		},
	}
}

func marshalPollableInputStreamer(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapPollableInputStream(obj), nil
}

// CanPoll checks if stream is actually pollable. Some classes may implement
// InputStream but have only certain instances of that class be pollable. If
// this method returns FALSE, then the behavior of other InputStream methods is
// undefined.
//
// For any given stream, the value returned by this method is constant; a stream
// cannot switch from pollable to non-pollable or vice versa.
func (stream *PollableInputStream) CanPoll() bool {
	var _arg0 *C.GPollableInputStream // out
	var _cret C.gboolean              // in

	_arg0 = (*C.GPollableInputStream)(unsafe.Pointer(stream.Native()))

	_cret = C.g_pollable_input_stream_can_poll(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// CreateSource creates a #GSource that triggers when stream can be read, or
// cancellable is triggered or an error occurs. The callback on the source is of
// the SourceFunc type.
//
// As with g_pollable_input_stream_is_readable(), it is possible that the stream
// may not actually be readable even after the source triggers, so you should
// use g_pollable_input_stream_read_nonblocking() rather than
// g_input_stream_read() from the callback.
func (stream *PollableInputStream) CreateSource(ctx context.Context) *glib.Source {
	var _arg0 *C.GPollableInputStream // out
	var _arg1 *C.GCancellable         // out
	var _cret *C.GSource              // in

	_arg0 = (*C.GPollableInputStream)(unsafe.Pointer(stream.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg1 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}

	_cret = C.g_pollable_input_stream_create_source(_arg0, _arg1)

	var _source *glib.Source // out

	_source = (*glib.Source)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	C.g_source_ref(_cret)
	runtime.SetFinalizer(_source, func(v *glib.Source) {
		C.g_source_unref((*C.GSource)(gextras.StructNative(unsafe.Pointer(v))))
	})

	return _source
}

// IsReadable checks if stream can be read.
//
// Note that some stream types may not be able to implement this 100% reliably,
// and it is possible that a call to g_input_stream_read() after this returns
// TRUE would still block. To guarantee non-blocking behavior, you should always
// use g_pollable_input_stream_read_nonblocking(), which will return a
// G_IO_ERROR_WOULD_BLOCK error rather than blocking.
func (stream *PollableInputStream) IsReadable() bool {
	var _arg0 *C.GPollableInputStream // out
	var _cret C.gboolean              // in

	_arg0 = (*C.GPollableInputStream)(unsafe.Pointer(stream.Native()))

	_cret = C.g_pollable_input_stream_is_readable(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// ReadNonblocking attempts to read up to count bytes from stream into buffer,
// as with g_input_stream_read(). If stream is not currently readable, this will
// immediately return G_IO_ERROR_WOULD_BLOCK, and you can use
// g_pollable_input_stream_create_source() to create a #GSource that will be
// triggered when stream is readable.
//
// Note that since this method never blocks, you cannot actually use cancellable
// to cancel it. However, it will return an error if cancellable has already
// been cancelled when you call, which may happen if you call this method after
// a source triggers due to having been cancelled.
func (stream *PollableInputStream) ReadNonblocking(ctx context.Context, buffer []byte) (int, error) {
	var _arg0 *C.GPollableInputStream // out
	var _arg3 *C.GCancellable         // out
	var _arg1 *C.void                 // out
	var _arg2 C.gsize
	var _cret C.gssize  // in
	var _cerr *C.GError // in

	_arg0 = (*C.GPollableInputStream)(unsafe.Pointer(stream.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg2 = (C.gsize)(len(buffer))
	if len(buffer) > 0 {
		_arg1 = (*C.void)(unsafe.Pointer(&buffer[0]))
	}

	_cret = C.g_pollable_input_stream_read_nonblocking(_arg0, unsafe.Pointer(_arg1), _arg2, _arg3, &_cerr)

	var _gssize int  // out
	var _goerr error // out

	_gssize = int(_cret)
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _gssize, _goerr
}
