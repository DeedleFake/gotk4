// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/core/gerror"
	"github.com/diamondburned/gotk4/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gio-2.0 gio-unix-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <gio/gdesktopappinfo.h>
// #include <gio/gfiledescriptorbased.h>
// #include <gio/gio.h>
// #include <gio/gunixconnection.h>
// #include <gio/gunixcredentialsmessage.h>
// #include <gio/gunixfdlist.h>
// #include <gio/gunixfdmessage.h>
// #include <gio/gunixinputstream.h>
// #include <gio/gunixmounts.h>
// #include <gio/gunixoutputstream.h>
// #include <gio/gunixsocketaddress.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_zlib_compressor_get_type()), F: marshalZlibCompressor},
	})
}

// ZlibCompressor: zlib decompression
type ZlibCompressor interface {
	Converter

	// FileInfo:
	FileInfo() FileInfo
	// SetFileInfoZlibCompressor:
	SetFileInfoZlibCompressor(fileInfo FileInfo)
}

// zlibCompressor implements the ZlibCompressor class.
type zlibCompressor struct {
	gextras.Objector
}

// WrapZlibCompressor wraps a GObject to the right type. It is
// primarily used internally.
func WrapZlibCompressor(obj *externglib.Object) ZlibCompressor {
	return zlibCompressor{
		Objector: obj,
	}
}

func marshalZlibCompressor(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapZlibCompressor(obj), nil
}

// NewZlibCompressor:
func NewZlibCompressor(format ZlibCompressorFormat, level int) ZlibCompressor {
	var _arg1 C.GZlibCompressorFormat // out
	var _arg2 C.int                   // out
	var _cret *C.GZlibCompressor      // in

	_arg1 = C.GZlibCompressorFormat(format)
	_arg2 = C.int(level)

	_cret = C.g_zlib_compressor_new(_arg1, _arg2)

	var _zlibCompressor ZlibCompressor // out

	_zlibCompressor = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(ZlibCompressor)

	return _zlibCompressor
}

func (c zlibCompressor) FileInfo() FileInfo {
	var _arg0 *C.GZlibCompressor // out
	var _cret *C.GFileInfo       // in

	_arg0 = (*C.GZlibCompressor)(unsafe.Pointer(c.Native()))

	_cret = C.g_zlib_compressor_get_file_info(_arg0)

	var _fileInfo FileInfo // out

	_fileInfo = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(FileInfo)

	return _fileInfo
}

func (c zlibCompressor) SetFileInfoZlibCompressor(fileInfo FileInfo) {
	var _arg0 *C.GZlibCompressor // out
	var _arg1 *C.GFileInfo       // out

	_arg0 = (*C.GZlibCompressor)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.GFileInfo)(unsafe.Pointer(fileInfo.Native()))

	C.g_zlib_compressor_set_file_info(_arg0, _arg1)
}

func (c zlibCompressor) Convert(inbuf []byte, outbuf []byte, flags ConverterFlags) (bytesRead uint, bytesWritten uint, converterResult ConverterResult, goerr error) {
	return WrapConverter(gextras.InternObject(c)).Convert(inbuf, outbuf, flags)
}

func (c zlibCompressor) Reset() {
	WrapConverter(gextras.InternObject(c)).Reset()
}
