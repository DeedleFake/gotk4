// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gio-2.0 gio-unix-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <gio/gdesktopappinfo.h>
// #include <gio/gfiledescriptorbased.h>
// #include <gio/gio.h>
// #include <gio/gunixconnection.h>
// #include <gio/gunixcredentialsmessage.h>
// #include <gio/gunixfdlist.h>
// #include <gio/gunixfdmessage.h>
// #include <gio/gunixinputstream.h>
// #include <gio/gunixmounts.h>
// #include <gio/gunixoutputstream.h>
// #include <gio/gunixsocketaddress.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_data_output_stream_get_type()), F: marshalDataOutputStream},
	})
}

// DataOutputStream: data output stream implements Stream and includes functions
// for writing data directly to an output stream.
type DataOutputStream interface {
	FilterOutputStream

	// AsSeekable casts the class to the Seekable interface.
	AsSeekable() Seekable

	// ByteOrder gets the byte order for the stream.
	ByteOrder() DataStreamByteOrder
	// PutByteDataOutputStream puts a byte into the output stream.
	PutByteDataOutputStream(data byte, cancellable Cancellable) error
	// PutInt16DataOutputStream puts a signed 16-bit integer into the output
	// stream.
	PutInt16DataOutputStream(data int16, cancellable Cancellable) error
	// PutInt32DataOutputStream puts a signed 32-bit integer into the output
	// stream.
	PutInt32DataOutputStream(data int32, cancellable Cancellable) error
	// PutInt64DataOutputStream puts a signed 64-bit integer into the stream.
	PutInt64DataOutputStream(data int64, cancellable Cancellable) error
	// PutStringDataOutputStream puts a string into the output stream.
	PutStringDataOutputStream(str string, cancellable Cancellable) error
	// PutUint16DataOutputStream puts an unsigned 16-bit integer into the output
	// stream.
	PutUint16DataOutputStream(data uint16, cancellable Cancellable) error
	// PutUint32DataOutputStream puts an unsigned 32-bit integer into the
	// stream.
	PutUint32DataOutputStream(data uint32, cancellable Cancellable) error
	// PutUint64DataOutputStream puts an unsigned 64-bit integer into the
	// stream.
	PutUint64DataOutputStream(data uint64, cancellable Cancellable) error
	// SetByteOrderDataOutputStream sets the byte order of the data output
	// stream to @order.
	SetByteOrderDataOutputStream(order DataStreamByteOrder)
}

// dataOutputStream implements the DataOutputStream class.
type dataOutputStream struct {
	FilterOutputStream
}

// WrapDataOutputStream wraps a GObject to the right type. It is
// primarily used internally.
func WrapDataOutputStream(obj *externglib.Object) DataOutputStream {
	return dataOutputStream{
		FilterOutputStream: WrapFilterOutputStream(obj),
	}
}

func marshalDataOutputStream(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapDataOutputStream(obj), nil
}

// NewDataOutputStream creates a new data output stream for @base_stream.
func NewDataOutputStream(baseStream OutputStream) DataOutputStream {
	var _arg1 *C.GOutputStream     // out
	var _cret *C.GDataOutputStream // in

	_arg1 = (*C.GOutputStream)(unsafe.Pointer(baseStream.Native()))

	_cret = C.g_data_output_stream_new(_arg1)

	var _dataOutputStream DataOutputStream // out

	_dataOutputStream = WrapDataOutputStream(externglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _dataOutputStream
}

func (s dataOutputStream) ByteOrder() DataStreamByteOrder {
	var _arg0 *C.GDataOutputStream   // out
	var _cret C.GDataStreamByteOrder // in

	_arg0 = (*C.GDataOutputStream)(unsafe.Pointer(s.Native()))

	_cret = C.g_data_output_stream_get_byte_order(_arg0)

	var _dataStreamByteOrder DataStreamByteOrder // out

	_dataStreamByteOrder = DataStreamByteOrder(_cret)

	return _dataStreamByteOrder
}

func (s dataOutputStream) PutByteDataOutputStream(data byte, cancellable Cancellable) error {
	var _arg0 *C.GDataOutputStream // out
	var _arg1 C.guchar             // out
	var _arg2 *C.GCancellable      // out
	var _cerr *C.GError            // in

	_arg0 = (*C.GDataOutputStream)(unsafe.Pointer(s.Native()))
	_arg1 = C.guchar(data)
	_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	C.g_data_output_stream_put_byte(_arg0, _arg1, _arg2, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

func (s dataOutputStream) PutInt16DataOutputStream(data int16, cancellable Cancellable) error {
	var _arg0 *C.GDataOutputStream // out
	var _arg1 C.gint16             // out
	var _arg2 *C.GCancellable      // out
	var _cerr *C.GError            // in

	_arg0 = (*C.GDataOutputStream)(unsafe.Pointer(s.Native()))
	_arg1 = C.gint16(data)
	_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	C.g_data_output_stream_put_int16(_arg0, _arg1, _arg2, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

func (s dataOutputStream) PutInt32DataOutputStream(data int32, cancellable Cancellable) error {
	var _arg0 *C.GDataOutputStream // out
	var _arg1 C.gint32             // out
	var _arg2 *C.GCancellable      // out
	var _cerr *C.GError            // in

	_arg0 = (*C.GDataOutputStream)(unsafe.Pointer(s.Native()))
	_arg1 = C.gint32(data)
	_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	C.g_data_output_stream_put_int32(_arg0, _arg1, _arg2, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

func (s dataOutputStream) PutInt64DataOutputStream(data int64, cancellable Cancellable) error {
	var _arg0 *C.GDataOutputStream // out
	var _arg1 C.gint64             // out
	var _arg2 *C.GCancellable      // out
	var _cerr *C.GError            // in

	_arg0 = (*C.GDataOutputStream)(unsafe.Pointer(s.Native()))
	_arg1 = C.gint64(data)
	_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	C.g_data_output_stream_put_int64(_arg0, _arg1, _arg2, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

func (s dataOutputStream) PutStringDataOutputStream(str string, cancellable Cancellable) error {
	var _arg0 *C.GDataOutputStream // out
	var _arg1 *C.char              // out
	var _arg2 *C.GCancellable      // out
	var _cerr *C.GError            // in

	_arg0 = (*C.GDataOutputStream)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.char)(C.CString(str))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	C.g_data_output_stream_put_string(_arg0, _arg1, _arg2, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

func (s dataOutputStream) PutUint16DataOutputStream(data uint16, cancellable Cancellable) error {
	var _arg0 *C.GDataOutputStream // out
	var _arg1 C.guint16            // out
	var _arg2 *C.GCancellable      // out
	var _cerr *C.GError            // in

	_arg0 = (*C.GDataOutputStream)(unsafe.Pointer(s.Native()))
	_arg1 = C.guint16(data)
	_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	C.g_data_output_stream_put_uint16(_arg0, _arg1, _arg2, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

func (s dataOutputStream) PutUint32DataOutputStream(data uint32, cancellable Cancellable) error {
	var _arg0 *C.GDataOutputStream // out
	var _arg1 C.guint32            // out
	var _arg2 *C.GCancellable      // out
	var _cerr *C.GError            // in

	_arg0 = (*C.GDataOutputStream)(unsafe.Pointer(s.Native()))
	_arg1 = C.guint32(data)
	_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	C.g_data_output_stream_put_uint32(_arg0, _arg1, _arg2, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

func (s dataOutputStream) PutUint64DataOutputStream(data uint64, cancellable Cancellable) error {
	var _arg0 *C.GDataOutputStream // out
	var _arg1 C.guint64            // out
	var _arg2 *C.GCancellable      // out
	var _cerr *C.GError            // in

	_arg0 = (*C.GDataOutputStream)(unsafe.Pointer(s.Native()))
	_arg1 = C.guint64(data)
	_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	C.g_data_output_stream_put_uint64(_arg0, _arg1, _arg2, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

func (s dataOutputStream) SetByteOrderDataOutputStream(order DataStreamByteOrder) {
	var _arg0 *C.GDataOutputStream   // out
	var _arg1 C.GDataStreamByteOrder // out

	_arg0 = (*C.GDataOutputStream)(unsafe.Pointer(s.Native()))
	_arg1 = C.GDataStreamByteOrder(order)

	C.g_data_output_stream_set_byte_order(_arg0, _arg1)
}

func (d dataOutputStream) AsSeekable() Seekable {
	return WrapSeekable(gextras.InternObject(d))
}
