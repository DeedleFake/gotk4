// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/box"
	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gio-2.0 gio-unix-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <gio/gdesktopappinfo.h>
// #include <gio/gfiledescriptorbased.h>
// #include <gio/gio.h>
// #include <gio/gunixconnection.h>
// #include <gio/gunixcredentialsmessage.h>
// #include <gio/gunixfdlist.h>
// #include <gio/gunixfdmessage.h>
// #include <gio/gunixinputstream.h>
// #include <gio/gunixmounts.h>
// #include <gio/gunixoutputstream.h>
// #include <gio/gunixsocketaddress.h>
// #include <glib-object.h>
//
// void gotk4_AsyncReadyCallback(GObject*, GAsyncResult*, gpointer);
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_data_output_stream_get_type()), F: marshalDataOutputStream},
	})
}

// DataOutputStream: data output stream implements Stream and includes functions
// for writing data directly to an output stream.
type DataOutputStream interface {
	gextras.Objector

	// AsFilterOutputStream casts the class to the FilterOutputStream interface.
	AsFilterOutputStream() FilterOutputStream
	// AsSeekable casts the class to the Seekable interface.
	AsSeekable() Seekable

	// GetBaseStream gets the base stream for the filter stream.
	//
	// This method is inherited from FilterOutputStream
	GetBaseStream() OutputStream
	// GetCloseBaseStream returns whether the base stream will be closed when
	// @stream is closed.
	//
	// This method is inherited from FilterOutputStream
	GetCloseBaseStream() bool
	// SetCloseBaseStream sets whether the base stream will be closed when
	// @stream is closed.
	//
	// This method is inherited from FilterOutputStream
	SetCloseBaseStream(closeBase bool)
	// ClearPending clears the pending flag on @stream.
	//
	// This method is inherited from OutputStream
	ClearPending()
	// Close closes the stream, releasing resources related to it.
	//
	// Once the stream is closed, all other operations will return
	// G_IO_ERROR_CLOSED. Closing a stream multiple times will not return an
	// error.
	//
	// Closing a stream will automatically flush any outstanding buffers in the
	// stream.
	//
	// Streams will be automatically closed when the last reference is dropped,
	// but you might want to call this function to make sure resources are
	// released as early as possible.
	//
	// Some streams might keep the backing store of the stream (e.g. a file
	// descriptor) open after the stream is closed. See the documentation for
	// the individual stream for details.
	//
	// On failure the first error that happened will be reported, but the close
	// operation will finish as much as possible. A stream that failed to close
	// will still return G_IO_ERROR_CLOSED for all operations. Still, it is
	// important to check and report the error to the user, otherwise there
	// might be a loss of data as all data might not be written.
	//
	// If @cancellable is not nil, then the operation can be cancelled by
	// triggering the cancellable object from another thread. If the operation
	// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
	// Cancelling a close will still leave the stream closed, but there some
	// streams can use a faster close that doesn't block to e.g. check errors.
	// On cancellation (as with any error) there is no guarantee that all
	// written data will reach the target.
	//
	// This method is inherited from OutputStream
	Close(cancellable Cancellable) error
	// CloseAsync requests an asynchronous close of the stream, releasing
	// resources related to it. When the operation is finished @callback will be
	// called. You can then call g_output_stream_close_finish() to get the
	// result of the operation.
	//
	// For behaviour details see g_output_stream_close().
	//
	// The asynchronous methods have a default fallback that uses threads to
	// implement asynchronicity, so they are optional for inheriting classes.
	// However, if you override one you must override all.
	//
	// This method is inherited from OutputStream
	CloseAsync(ioPriority int, cancellable Cancellable, callback AsyncReadyCallback)
	// CloseFinish closes an output stream.
	//
	// This method is inherited from OutputStream
	CloseFinish(result AsyncResult) error
	// Flush forces a write of all user-space buffered data for the given
	// @stream. Will block during the operation. Closing the stream will
	// implicitly cause a flush.
	//
	// This function is optional for inherited classes.
	//
	// If @cancellable is not nil, then the operation can be cancelled by
	// triggering the cancellable object from another thread. If the operation
	// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
	//
	// This method is inherited from OutputStream
	Flush(cancellable Cancellable) error
	// FlushAsync forces an asynchronous write of all user-space buffered data
	// for the given @stream. For behaviour details see g_output_stream_flush().
	//
	// When the operation is finished @callback will be called. You can then
	// call g_output_stream_flush_finish() to get the result of the operation.
	//
	// This method is inherited from OutputStream
	FlushAsync(ioPriority int, cancellable Cancellable, callback AsyncReadyCallback)
	// FlushFinish finishes flushing an output stream.
	//
	// This method is inherited from OutputStream
	FlushFinish(result AsyncResult) error
	// HasPending checks if an output stream has pending actions.
	//
	// This method is inherited from OutputStream
	HasPending() bool
	// IsClosed checks if an output stream has already been closed.
	//
	// This method is inherited from OutputStream
	IsClosed() bool
	// IsClosing checks if an output stream is being closed. This can be used
	// inside e.g. a flush implementation to see if the flush (or other i/o
	// operation) is called from within the closing operation.
	//
	// This method is inherited from OutputStream
	IsClosing() bool
	// SetPending sets @stream to have actions pending. If the pending flag is
	// already set or @stream is closed, it will return false and set @error.
	//
	// This method is inherited from OutputStream
	SetPending() error
	// Splice splices an input stream into an output stream.
	//
	// This method is inherited from OutputStream
	Splice(source InputStream, flags OutputStreamSpliceFlags, cancellable Cancellable) (int, error)
	// SpliceAsync splices a stream asynchronously. When the operation is
	// finished @callback will be called. You can then call
	// g_output_stream_splice_finish() to get the result of the operation.
	//
	// For the synchronous, blocking version of this function, see
	// g_output_stream_splice().
	//
	// This method is inherited from OutputStream
	SpliceAsync(source InputStream, flags OutputStreamSpliceFlags, ioPriority int, cancellable Cancellable, callback AsyncReadyCallback)
	// SpliceFinish finishes an asynchronous stream splice operation.
	//
	// This method is inherited from OutputStream
	SpliceFinish(result AsyncResult) (int, error)
	// Write tries to write @count bytes from @buffer into the stream. Will
	// block during the operation.
	//
	// If count is 0, returns 0 and does nothing. A value of @count larger than
	// G_MAXSSIZE will cause a G_IO_ERROR_INVALID_ARGUMENT error.
	//
	// On success, the number of bytes written to the stream is returned. It is
	// not an error if this is not the same as the requested size, as it can
	// happen e.g. on a partial I/O error, or if there is not enough storage in
	// the stream. All writes block until at least one byte is written or an
	// error occurs; 0 is never returned (unless @count is 0).
	//
	// If @cancellable is not nil, then the operation can be cancelled by
	// triggering the cancellable object from another thread. If the operation
	// was cancelled, the error G_IO_ERROR_CANCELLED will be returned. If an
	// operation was partially finished when the operation was cancelled the
	// partial result will be returned, without an error.
	//
	// On error -1 is returned and @error is set accordingly.
	//
	// This method is inherited from OutputStream
	Write(buffer []byte, cancellable Cancellable) (int, error)
	// WriteAll tries to write @count bytes from @buffer into the stream. Will
	// block during the operation.
	//
	// This function is similar to g_output_stream_write(), except it tries to
	// write as many bytes as requested, only stopping on an error.
	//
	// On a successful write of @count bytes, true is returned, and
	// @bytes_written is set to @count.
	//
	// If there is an error during the operation false is returned and @error is
	// set to indicate the error status.
	//
	// As a special exception to the normal conventions for functions that use
	// #GError, if this function returns false (and sets @error) then
	// @bytes_written will be set to the number of bytes that were successfully
	// written before the error was encountered. This functionality is only
	// available from C. If you need it from another language then you must
	// write your own loop around g_output_stream_write().
	//
	// This method is inherited from OutputStream
	WriteAll(buffer []byte, cancellable Cancellable) (uint, error)
	// WriteAllAsync: request an asynchronous write of @count bytes from @buffer
	// into the stream. When the operation is finished @callback will be called.
	// You can then call g_output_stream_write_all_finish() to get the result of
	// the operation.
	//
	// This is the asynchronous version of g_output_stream_write_all().
	//
	// Call g_output_stream_write_all_finish() to collect the result.
	//
	// Any outstanding I/O request with higher priority (lower numerical value)
	// will be executed before an outstanding request with lower priority.
	// Default priority is G_PRIORITY_DEFAULT.
	//
	// Note that no copy of @buffer will be made, so it must stay valid until
	// @callback is called.
	//
	// This method is inherited from OutputStream
	WriteAllAsync(buffer []byte, ioPriority int, cancellable Cancellable, callback AsyncReadyCallback)
	// WriteAllFinish finishes an asynchronous stream write operation started
	// with g_output_stream_write_all_async().
	//
	// As a special exception to the normal conventions for functions that use
	// #GError, if this function returns false (and sets @error) then
	// @bytes_written will be set to the number of bytes that were successfully
	// written before the error was encountered. This functionality is only
	// available from C. If you need it from another language then you must
	// write your own loop around g_output_stream_write_async().
	//
	// This method is inherited from OutputStream
	WriteAllFinish(result AsyncResult) (uint, error)
	// WriteAsync: request an asynchronous write of @count bytes from @buffer
	// into the stream. When the operation is finished @callback will be called.
	// You can then call g_output_stream_write_finish() to get the result of the
	// operation.
	//
	// During an async request no other sync and async calls are allowed, and
	// will result in G_IO_ERROR_PENDING errors.
	//
	// A value of @count larger than G_MAXSSIZE will cause a
	// G_IO_ERROR_INVALID_ARGUMENT error.
	//
	// On success, the number of bytes written will be passed to the @callback.
	// It is not an error if this is not the same as the requested size, as it
	// can happen e.g. on a partial I/O error, but generally we try to write as
	// many bytes as requested.
	//
	// You are guaranteed that this method will never fail with
	// G_IO_ERROR_WOULD_BLOCK - if @stream can't accept more data, the method
	// will just wait until this changes.
	//
	// Any outstanding I/O request with higher priority (lower numerical value)
	// will be executed before an outstanding request with lower priority.
	// Default priority is G_PRIORITY_DEFAULT.
	//
	// The asynchronous methods have a default fallback that uses threads to
	// implement asynchronicity, so they are optional for inheriting classes.
	// However, if you override one you must override all.
	//
	// For the synchronous, blocking version of this function, see
	// g_output_stream_write().
	//
	// Note that no copy of @buffer will be made, so it must stay valid until
	// @callback is called. See g_output_stream_write_bytes_async() for a
	// #GBytes version that will automatically hold a reference to the contents
	// (without copying) for the duration of the call.
	//
	// This method is inherited from OutputStream
	WriteAsync(buffer []byte, ioPriority int, cancellable Cancellable, callback AsyncReadyCallback)
	// WriteBytesFinish finishes a stream write-from-#GBytes operation.
	//
	// This method is inherited from OutputStream
	WriteBytesFinish(result AsyncResult) (int, error)
	// WriteFinish finishes a stream write operation.
	//
	// This method is inherited from OutputStream
	WriteFinish(result AsyncResult) (int, error)
	// Writev tries to write the bytes contained in the @n_vectors @vectors into
	// the stream. Will block during the operation.
	//
	// If @n_vectors is 0 or the sum of all bytes in @vectors is 0, returns 0
	// and does nothing.
	//
	// On success, the number of bytes written to the stream is returned. It is
	// not an error if this is not the same as the requested size, as it can
	// happen e.g. on a partial I/O error, or if there is not enough storage in
	// the stream. All writes block until at least one byte is written or an
	// error occurs; 0 is never returned (unless @n_vectors is 0 or the sum of
	// all bytes in @vectors is 0).
	//
	// If @cancellable is not nil, then the operation can be cancelled by
	// triggering the cancellable object from another thread. If the operation
	// was cancelled, the error G_IO_ERROR_CANCELLED will be returned. If an
	// operation was partially finished when the operation was cancelled the
	// partial result will be returned, without an error.
	//
	// Some implementations of g_output_stream_writev() may have limitations on
	// the aggregate buffer size, and will return G_IO_ERROR_INVALID_ARGUMENT if
	// these are exceeded. For example, when writing to a local file on UNIX
	// platforms, the aggregate buffer size must not exceed G_MAXSSIZE bytes.
	//
	// This method is inherited from OutputStream
	Writev(vectors []OutputVector, cancellable Cancellable) (uint, error)
	// WritevAll tries to write the bytes contained in the @n_vectors @vectors
	// into the stream. Will block during the operation.
	//
	// This function is similar to g_output_stream_writev(), except it tries to
	// write as many bytes as requested, only stopping on an error.
	//
	// On a successful write of all @n_vectors vectors, true is returned, and
	// @bytes_written is set to the sum of all the sizes of @vectors.
	//
	// If there is an error during the operation false is returned and @error is
	// set to indicate the error status.
	//
	// As a special exception to the normal conventions for functions that use
	// #GError, if this function returns false (and sets @error) then
	// @bytes_written will be set to the number of bytes that were successfully
	// written before the error was encountered. This functionality is only
	// available from C. If you need it from another language then you must
	// write your own loop around g_output_stream_write().
	//
	// The content of the individual elements of @vectors might be changed by
	// this function.
	//
	// This method is inherited from OutputStream
	WritevAll(vectors []OutputVector, cancellable Cancellable) (uint, error)
	// WritevAllAsync: request an asynchronous write of the bytes contained in
	// the @n_vectors @vectors into the stream. When the operation is finished
	// @callback will be called. You can then call
	// g_output_stream_writev_all_finish() to get the result of the operation.
	//
	// This is the asynchronous version of g_output_stream_writev_all().
	//
	// Call g_output_stream_writev_all_finish() to collect the result.
	//
	// Any outstanding I/O request with higher priority (lower numerical value)
	// will be executed before an outstanding request with lower priority.
	// Default priority is G_PRIORITY_DEFAULT.
	//
	// Note that no copy of @vectors will be made, so it must stay valid until
	// @callback is called. The content of the individual elements of @vectors
	// might be changed by this function.
	//
	// This method is inherited from OutputStream
	WritevAllAsync(vectors []OutputVector, ioPriority int, cancellable Cancellable, callback AsyncReadyCallback)
	// WritevAllFinish finishes an asynchronous stream write operation started
	// with g_output_stream_writev_all_async().
	//
	// As a special exception to the normal conventions for functions that use
	// #GError, if this function returns false (and sets @error) then
	// @bytes_written will be set to the number of bytes that were successfully
	// written before the error was encountered. This functionality is only
	// available from C. If you need it from another language then you must
	// write your own loop around g_output_stream_writev_async().
	//
	// This method is inherited from OutputStream
	WritevAllFinish(result AsyncResult) (uint, error)
	// WritevAsync: request an asynchronous write of the bytes contained in
	// @n_vectors @vectors into the stream. When the operation is finished
	// @callback will be called. You can then call
	// g_output_stream_writev_finish() to get the result of the operation.
	//
	// During an async request no other sync and async calls are allowed, and
	// will result in G_IO_ERROR_PENDING errors.
	//
	// On success, the number of bytes written will be passed to the @callback.
	// It is not an error if this is not the same as the requested size, as it
	// can happen e.g. on a partial I/O error, but generally we try to write as
	// many bytes as requested.
	//
	// You are guaranteed that this method will never fail with
	// G_IO_ERROR_WOULD_BLOCK — if @stream can't accept more data, the method
	// will just wait until this changes.
	//
	// Any outstanding I/O request with higher priority (lower numerical value)
	// will be executed before an outstanding request with lower priority.
	// Default priority is G_PRIORITY_DEFAULT.
	//
	// The asynchronous methods have a default fallback that uses threads to
	// implement asynchronicity, so they are optional for inheriting classes.
	// However, if you override one you must override all.
	//
	// For the synchronous, blocking version of this function, see
	// g_output_stream_writev().
	//
	// Note that no copy of @vectors will be made, so it must stay valid until
	// @callback is called.
	//
	// This method is inherited from OutputStream
	WritevAsync(vectors []OutputVector, ioPriority int, cancellable Cancellable, callback AsyncReadyCallback)
	// WritevFinish finishes a stream writev operation.
	//
	// This method is inherited from OutputStream
	WritevFinish(result AsyncResult) (uint, error)
	// CanSeek tests if the stream supports the Iface.
	//
	// This method is inherited from Seekable
	CanSeek() bool
	// CanTruncate tests if the length of the stream can be adjusted with
	// g_seekable_truncate().
	//
	// This method is inherited from Seekable
	CanTruncate() bool
	// Seek seeks in the stream by the given @offset, modified by @type.
	//
	// Attempting to seek past the end of the stream will have different results
	// depending on if the stream is fixed-sized or resizable. If the stream is
	// resizable then seeking past the end and then writing will result in zeros
	// filling the empty space. Seeking past the end of a resizable stream and
	// reading will result in EOF. Seeking past the end of a fixed-sized stream
	// will fail.
	//
	// Any operation that would result in a negative offset will fail.
	//
	// If @cancellable is not nil, then the operation can be cancelled by
	// triggering the cancellable object from another thread. If the operation
	// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
	//
	// This method is inherited from Seekable
	Seek(offset int64, typ glib.SeekType, cancellable Cancellable) error
	// Tell tells the current position within the stream.
	//
	// This method is inherited from Seekable
	Tell() int64
	// Truncate sets the length of the stream to @offset. If the stream was
	// previously larger than @offset, the extra data is discarded. If the
	// stream was previously shorter than @offset, it is extended with NUL
	// ('\0') bytes.
	//
	// If @cancellable is not nil, then the operation can be cancelled by
	// triggering the cancellable object from another thread. If the operation
	// was cancelled, the error G_IO_ERROR_CANCELLED will be returned. If an
	// operation was partially finished when the operation was cancelled the
	// partial result will be returned, without an error.
	//
	// This method is inherited from Seekable
	Truncate(offset int64, cancellable Cancellable) error

	// ByteOrder gets the byte order for the stream.
	ByteOrder() DataStreamByteOrder
	// PutByte puts a byte into the output stream.
	PutByte(data byte, cancellable Cancellable) error
	// PutInt16 puts a signed 16-bit integer into the output stream.
	PutInt16(data int16, cancellable Cancellable) error
	// PutInt32 puts a signed 32-bit integer into the output stream.
	PutInt32(data int32, cancellable Cancellable) error
	// PutInt64 puts a signed 64-bit integer into the stream.
	PutInt64(data int64, cancellable Cancellable) error
	// PutString puts a string into the output stream.
	PutString(str string, cancellable Cancellable) error
	// PutUint16 puts an unsigned 16-bit integer into the output stream.
	PutUint16(data uint16, cancellable Cancellable) error
	// PutUint32 puts an unsigned 32-bit integer into the stream.
	PutUint32(data uint32, cancellable Cancellable) error
	// PutUint64 puts an unsigned 64-bit integer into the stream.
	PutUint64(data uint64, cancellable Cancellable) error
	// SetByteOrder sets the byte order of the data output stream to @order.
	SetByteOrder(order DataStreamByteOrder)
}

// dataOutputStream implements the DataOutputStream interface.
type dataOutputStream struct {
	*externglib.Object
}

var _ DataOutputStream = (*dataOutputStream)(nil)

// WrapDataOutputStream wraps a GObject to a type that implements
// interface DataOutputStream. It is primarily used internally.
func WrapDataOutputStream(obj *externglib.Object) DataOutputStream {
	return dataOutputStream{obj}
}

func marshalDataOutputStream(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapDataOutputStream(obj), nil
}

// NewDataOutputStream creates a new data output stream for @base_stream.
func NewDataOutputStream(baseStream OutputStream) DataOutputStream {
	var _arg1 *C.GOutputStream     // out
	var _cret *C.GDataOutputStream // in

	_arg1 = (*C.GOutputStream)(unsafe.Pointer(baseStream.Native()))

	_cret = C.g_data_output_stream_new(_arg1)

	var _dataOutputStream DataOutputStream // out

	_dataOutputStream = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(DataOutputStream)

	return _dataOutputStream
}

func (d dataOutputStream) AsFilterOutputStream() FilterOutputStream {
	return WrapFilterOutputStream(gextras.InternObject(d))
}

func (d dataOutputStream) AsSeekable() Seekable {
	return WrapSeekable(gextras.InternObject(d))
}

func (s dataOutputStream) GetBaseStream() OutputStream {
	return WrapFilterOutputStream(gextras.InternObject(s)).GetBaseStream()
}

func (s dataOutputStream) GetCloseBaseStream() bool {
	return WrapFilterOutputStream(gextras.InternObject(s)).GetCloseBaseStream()
}

func (s dataOutputStream) SetCloseBaseStream(closeBase bool) {
	WrapFilterOutputStream(gextras.InternObject(s)).SetCloseBaseStream(closeBase)
}

func (s dataOutputStream) ClearPending() {
	WrapOutputStream(gextras.InternObject(s)).ClearPending()
}

func (s dataOutputStream) Close(cancellable Cancellable) error {
	return WrapOutputStream(gextras.InternObject(s)).Close(cancellable)
}

func (s dataOutputStream) CloseAsync(ioPriority int, cancellable Cancellable, callback AsyncReadyCallback) {
	WrapOutputStream(gextras.InternObject(s)).CloseAsync(ioPriority, cancellable, callback)
}

func (s dataOutputStream) CloseFinish(result AsyncResult) error {
	return WrapOutputStream(gextras.InternObject(s)).CloseFinish(result)
}

func (s dataOutputStream) Flush(cancellable Cancellable) error {
	return WrapOutputStream(gextras.InternObject(s)).Flush(cancellable)
}

func (s dataOutputStream) FlushAsync(ioPriority int, cancellable Cancellable, callback AsyncReadyCallback) {
	WrapOutputStream(gextras.InternObject(s)).FlushAsync(ioPriority, cancellable, callback)
}

func (s dataOutputStream) FlushFinish(result AsyncResult) error {
	return WrapOutputStream(gextras.InternObject(s)).FlushFinish(result)
}

func (s dataOutputStream) HasPending() bool {
	return WrapOutputStream(gextras.InternObject(s)).HasPending()
}

func (s dataOutputStream) IsClosed() bool {
	return WrapOutputStream(gextras.InternObject(s)).IsClosed()
}

func (s dataOutputStream) IsClosing() bool {
	return WrapOutputStream(gextras.InternObject(s)).IsClosing()
}

func (s dataOutputStream) SetPending() error {
	return WrapOutputStream(gextras.InternObject(s)).SetPending()
}

func (s dataOutputStream) Splice(source InputStream, flags OutputStreamSpliceFlags, cancellable Cancellable) (int, error) {
	return WrapOutputStream(gextras.InternObject(s)).Splice(source, flags, cancellable)
}

func (s dataOutputStream) SpliceAsync(source InputStream, flags OutputStreamSpliceFlags, ioPriority int, cancellable Cancellable, callback AsyncReadyCallback) {
	WrapOutputStream(gextras.InternObject(s)).SpliceAsync(source, flags, ioPriority, cancellable, callback)
}

func (s dataOutputStream) SpliceFinish(result AsyncResult) (int, error) {
	return WrapOutputStream(gextras.InternObject(s)).SpliceFinish(result)
}

func (s dataOutputStream) Write(buffer []byte, cancellable Cancellable) (int, error) {
	return WrapOutputStream(gextras.InternObject(s)).Write(buffer, cancellable)
}

func (s dataOutputStream) WriteAll(buffer []byte, cancellable Cancellable) (uint, error) {
	return WrapOutputStream(gextras.InternObject(s)).WriteAll(buffer, cancellable)
}

func (s dataOutputStream) WriteAllAsync(buffer []byte, ioPriority int, cancellable Cancellable, callback AsyncReadyCallback) {
	WrapOutputStream(gextras.InternObject(s)).WriteAllAsync(buffer, ioPriority, cancellable, callback)
}

func (s dataOutputStream) WriteAllFinish(result AsyncResult) (uint, error) {
	return WrapOutputStream(gextras.InternObject(s)).WriteAllFinish(result)
}

func (s dataOutputStream) WriteAsync(buffer []byte, ioPriority int, cancellable Cancellable, callback AsyncReadyCallback) {
	WrapOutputStream(gextras.InternObject(s)).WriteAsync(buffer, ioPriority, cancellable, callback)
}

func (s dataOutputStream) WriteBytesFinish(result AsyncResult) (int, error) {
	return WrapOutputStream(gextras.InternObject(s)).WriteBytesFinish(result)
}

func (s dataOutputStream) WriteFinish(result AsyncResult) (int, error) {
	return WrapOutputStream(gextras.InternObject(s)).WriteFinish(result)
}

func (s dataOutputStream) Writev(vectors []OutputVector, cancellable Cancellable) (uint, error) {
	return WrapOutputStream(gextras.InternObject(s)).Writev(vectors, cancellable)
}

func (s dataOutputStream) WritevAll(vectors []OutputVector, cancellable Cancellable) (uint, error) {
	return WrapOutputStream(gextras.InternObject(s)).WritevAll(vectors, cancellable)
}

func (s dataOutputStream) WritevAllAsync(vectors []OutputVector, ioPriority int, cancellable Cancellable, callback AsyncReadyCallback) {
	WrapOutputStream(gextras.InternObject(s)).WritevAllAsync(vectors, ioPriority, cancellable, callback)
}

func (s dataOutputStream) WritevAllFinish(result AsyncResult) (uint, error) {
	return WrapOutputStream(gextras.InternObject(s)).WritevAllFinish(result)
}

func (s dataOutputStream) WritevAsync(vectors []OutputVector, ioPriority int, cancellable Cancellable, callback AsyncReadyCallback) {
	WrapOutputStream(gextras.InternObject(s)).WritevAsync(vectors, ioPriority, cancellable, callback)
}

func (s dataOutputStream) WritevFinish(result AsyncResult) (uint, error) {
	return WrapOutputStream(gextras.InternObject(s)).WritevFinish(result)
}

func (s dataOutputStream) CanSeek() bool {
	return WrapSeekable(gextras.InternObject(s)).CanSeek()
}

func (s dataOutputStream) CanTruncate() bool {
	return WrapSeekable(gextras.InternObject(s)).CanTruncate()
}

func (s dataOutputStream) Seek(offset int64, typ glib.SeekType, cancellable Cancellable) error {
	return WrapSeekable(gextras.InternObject(s)).Seek(offset, typ, cancellable)
}

func (s dataOutputStream) Tell() int64 {
	return WrapSeekable(gextras.InternObject(s)).Tell()
}

func (s dataOutputStream) Truncate(offset int64, cancellable Cancellable) error {
	return WrapSeekable(gextras.InternObject(s)).Truncate(offset, cancellable)
}

func (s dataOutputStream) ByteOrder() DataStreamByteOrder {
	var _arg0 *C.GDataOutputStream   // out
	var _cret C.GDataStreamByteOrder // in

	_arg0 = (*C.GDataOutputStream)(unsafe.Pointer(s.Native()))

	_cret = C.g_data_output_stream_get_byte_order(_arg0)

	var _dataStreamByteOrder DataStreamByteOrder // out

	_dataStreamByteOrder = DataStreamByteOrder(_cret)

	return _dataStreamByteOrder
}

func (s dataOutputStream) PutByte(data byte, cancellable Cancellable) error {
	var _arg0 *C.GDataOutputStream // out
	var _arg1 C.guchar             // out
	var _arg2 *C.GCancellable      // out
	var _cerr *C.GError            // in

	_arg0 = (*C.GDataOutputStream)(unsafe.Pointer(s.Native()))
	_arg1 = C.guchar(data)
	_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	C.g_data_output_stream_put_byte(_arg0, _arg1, _arg2, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

func (s dataOutputStream) PutInt16(data int16, cancellable Cancellable) error {
	var _arg0 *C.GDataOutputStream // out
	var _arg1 C.gint16             // out
	var _arg2 *C.GCancellable      // out
	var _cerr *C.GError            // in

	_arg0 = (*C.GDataOutputStream)(unsafe.Pointer(s.Native()))
	_arg1 = C.gint16(data)
	_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	C.g_data_output_stream_put_int16(_arg0, _arg1, _arg2, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

func (s dataOutputStream) PutInt32(data int32, cancellable Cancellable) error {
	var _arg0 *C.GDataOutputStream // out
	var _arg1 C.gint32             // out
	var _arg2 *C.GCancellable      // out
	var _cerr *C.GError            // in

	_arg0 = (*C.GDataOutputStream)(unsafe.Pointer(s.Native()))
	_arg1 = C.gint32(data)
	_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	C.g_data_output_stream_put_int32(_arg0, _arg1, _arg2, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

func (s dataOutputStream) PutInt64(data int64, cancellable Cancellable) error {
	var _arg0 *C.GDataOutputStream // out
	var _arg1 C.gint64             // out
	var _arg2 *C.GCancellable      // out
	var _cerr *C.GError            // in

	_arg0 = (*C.GDataOutputStream)(unsafe.Pointer(s.Native()))
	_arg1 = C.gint64(data)
	_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	C.g_data_output_stream_put_int64(_arg0, _arg1, _arg2, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

func (s dataOutputStream) PutString(str string, cancellable Cancellable) error {
	var _arg0 *C.GDataOutputStream // out
	var _arg1 *C.char              // out
	var _arg2 *C.GCancellable      // out
	var _cerr *C.GError            // in

	_arg0 = (*C.GDataOutputStream)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.char)(C.CString(str))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	C.g_data_output_stream_put_string(_arg0, _arg1, _arg2, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

func (s dataOutputStream) PutUint16(data uint16, cancellable Cancellable) error {
	var _arg0 *C.GDataOutputStream // out
	var _arg1 C.guint16            // out
	var _arg2 *C.GCancellable      // out
	var _cerr *C.GError            // in

	_arg0 = (*C.GDataOutputStream)(unsafe.Pointer(s.Native()))
	_arg1 = C.guint16(data)
	_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	C.g_data_output_stream_put_uint16(_arg0, _arg1, _arg2, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

func (s dataOutputStream) PutUint32(data uint32, cancellable Cancellable) error {
	var _arg0 *C.GDataOutputStream // out
	var _arg1 C.guint32            // out
	var _arg2 *C.GCancellable      // out
	var _cerr *C.GError            // in

	_arg0 = (*C.GDataOutputStream)(unsafe.Pointer(s.Native()))
	_arg1 = C.guint32(data)
	_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	C.g_data_output_stream_put_uint32(_arg0, _arg1, _arg2, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

func (s dataOutputStream) PutUint64(data uint64, cancellable Cancellable) error {
	var _arg0 *C.GDataOutputStream // out
	var _arg1 C.guint64            // out
	var _arg2 *C.GCancellable      // out
	var _cerr *C.GError            // in

	_arg0 = (*C.GDataOutputStream)(unsafe.Pointer(s.Native()))
	_arg1 = C.guint64(data)
	_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	C.g_data_output_stream_put_uint64(_arg0, _arg1, _arg2, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

func (s dataOutputStream) SetByteOrder(order DataStreamByteOrder) {
	var _arg0 *C.GDataOutputStream   // out
	var _arg1 C.GDataStreamByteOrder // out

	_arg0 = (*C.GDataOutputStream)(unsafe.Pointer(s.Native()))
	_arg1 = C.GDataStreamByteOrder(order)

	C.g_data_output_stream_set_byte_order(_arg0, _arg1)
}
