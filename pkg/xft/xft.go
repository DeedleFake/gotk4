// Code generated by girgen. DO NOT EDIT.

package xft

import (
	"unsafe"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
//
import "C"

func Init() {

	C.XftInit()
}

type Color struct {
	native C.XftColor
}

// WrapColor wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapColor(ptr unsafe.Pointer) *Color {
	if ptr == nil {
		return nil
	}

	return (*Color)(ptr)
}

func marshalColor(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapColor(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (c *Color) Native() unsafe.Pointer {
	return unsafe.Pointer(&c.native)
}

type Draw struct {
	native C.XftDraw
}

// WrapDraw wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDraw(ptr unsafe.Pointer) *Draw {
	if ptr == nil {
		return nil
	}

	return (*Draw)(ptr)
}

func marshalDraw(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDraw(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (d *Draw) Native() unsafe.Pointer {
	return unsafe.Pointer(&d.native)
}

type Font struct {
	native C.XftFont
}

// WrapFont wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapFont(ptr unsafe.Pointer) *Font {
	if ptr == nil {
		return nil
	}

	return (*Font)(ptr)
}

func marshalFont(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapFont(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (f *Font) Native() unsafe.Pointer {
	return unsafe.Pointer(&f.native)
}

type GlyphSpec struct {
	native C.XftGlyphSpec
}

// WrapGlyphSpec wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapGlyphSpec(ptr unsafe.Pointer) *GlyphSpec {
	if ptr == nil {
		return nil
	}

	return (*GlyphSpec)(ptr)
}

func marshalGlyphSpec(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapGlyphSpec(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (g *GlyphSpec) Native() unsafe.Pointer {
	return unsafe.Pointer(&g.native)
}
