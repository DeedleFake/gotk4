// Code generated by girgen. DO NOT EDIT.

package xlib

import (
	"runtime"
	"unsafe"

	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
//
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{

		// Records
		// Skipped Display.
		// Skipped Screen.
		// Skipped Visual.
		// Skipped XConfigureEvent.
		// Skipped XImage.
		// Skipped XFontStruct.
		// Skipped XTrapezoid.
		// Skipped XVisualInfo.
		// Skipped XWindowAttributes.

	})
}

type Atom uint32

type Colormap uint32

type Cursor uint32

type Drawable uint32

type GC interface{}

type KeyCode uint8

type KeySym uint32

type Picture uint32

type Time uint32

type VisualID uint32

type Window uint32

type XID uint32

type Pixmap uint32

func OpenDisplay() {
	C.XOpenDisplay()
}

type Display struct {
	native *C.Display
}

// WrapDisplay wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapDisplay(ptr unsafe.Pointer) *Display {
	p := (*C.Display)(ptr)
	v := Display{native: p}

	runtime.SetFinalizer(&v, nil)
	runtime.SetFinalizer(&v, (*Display).free)

	return &v
}

func marshalDisplay(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapDisplay(unsafe.Pointer(b))
}

func (d *Display) free() {
	C.free(unsafe.Pointer(d.native))
}

// Native returns the pointer to *C.Display. The caller is expected to
// cast.
func (d *Display) Native() unsafe.Pointer {
	return unsafe.Pointer(d.native)
}

type Screen struct {
	native *C.Screen
}

// WrapScreen wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapScreen(ptr unsafe.Pointer) *Screen {
	p := (*C.Screen)(ptr)
	v := Screen{native: p}

	runtime.SetFinalizer(&v, nil)
	runtime.SetFinalizer(&v, (*Screen).free)

	return &v
}

func marshalScreen(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapScreen(unsafe.Pointer(b))
}

func (s *Screen) free() {
	C.free(unsafe.Pointer(s.native))
}

// Native returns the pointer to *C.Screen. The caller is expected to
// cast.
func (s *Screen) Native() unsafe.Pointer {
	return unsafe.Pointer(s.native)
}

type Visual struct {
	native *C.Visual
}

// WrapVisual wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapVisual(ptr unsafe.Pointer) *Visual {
	p := (*C.Visual)(ptr)
	v := Visual{native: p}

	runtime.SetFinalizer(&v, nil)
	runtime.SetFinalizer(&v, (*Visual).free)

	return &v
}

func marshalVisual(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapVisual(unsafe.Pointer(b))
}

func (v *Visual) free() {
	C.free(unsafe.Pointer(v.native))
}

// Native returns the pointer to *C.Visual. The caller is expected to
// cast.
func (v *Visual) Native() unsafe.Pointer {
	return unsafe.Pointer(v.native)
}

type XConfigureEvent struct {
	native *C.XConfigureEvent
}

// WrapXConfigureEvent wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapXConfigureEvent(ptr unsafe.Pointer) *XConfigureEvent {
	p := (*C.XConfigureEvent)(ptr)
	v := XConfigureEvent{native: p}

	runtime.SetFinalizer(&v, nil)
	runtime.SetFinalizer(&v, (*XConfigureEvent).free)

	return &v
}

func marshalXConfigureEvent(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapXConfigureEvent(unsafe.Pointer(b))
}

func (x *XConfigureEvent) free() {
	C.free(unsafe.Pointer(x.native))
}

// Native returns the pointer to *C.XConfigureEvent. The caller is expected to
// cast.
func (x *XConfigureEvent) Native() unsafe.Pointer {
	return unsafe.Pointer(x.native)
}

type XImage struct {
	native *C.XImage
}

// WrapXImage wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapXImage(ptr unsafe.Pointer) *XImage {
	p := (*C.XImage)(ptr)
	v := XImage{native: p}

	runtime.SetFinalizer(&v, nil)
	runtime.SetFinalizer(&v, (*XImage).free)

	return &v
}

func marshalXImage(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapXImage(unsafe.Pointer(b))
}

func (x *XImage) free() {
	C.free(unsafe.Pointer(x.native))
}

// Native returns the pointer to *C.XImage. The caller is expected to
// cast.
func (x *XImage) Native() unsafe.Pointer {
	return unsafe.Pointer(x.native)
}

type XFontStruct struct {
	native *C.XFontStruct
}

// WrapXFontStruct wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapXFontStruct(ptr unsafe.Pointer) *XFontStruct {
	p := (*C.XFontStruct)(ptr)
	v := XFontStruct{native: p}

	runtime.SetFinalizer(&v, nil)
	runtime.SetFinalizer(&v, (*XFontStruct).free)

	return &v
}

func marshalXFontStruct(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapXFontStruct(unsafe.Pointer(b))
}

func (x *XFontStruct) free() {
	C.free(unsafe.Pointer(x.native))
}

// Native returns the pointer to *C.XFontStruct. The caller is expected to
// cast.
func (x *XFontStruct) Native() unsafe.Pointer {
	return unsafe.Pointer(x.native)
}

type XTrapezoid struct {
	native *C.XTrapezoid
}

// WrapXTrapezoid wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapXTrapezoid(ptr unsafe.Pointer) *XTrapezoid {
	p := (*C.XTrapezoid)(ptr)
	v := XTrapezoid{native: p}

	runtime.SetFinalizer(&v, nil)
	runtime.SetFinalizer(&v, (*XTrapezoid).free)

	return &v
}

func marshalXTrapezoid(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapXTrapezoid(unsafe.Pointer(b))
}

func (x *XTrapezoid) free() {
	C.free(unsafe.Pointer(x.native))
}

// Native returns the pointer to *C.XTrapezoid. The caller is expected to
// cast.
func (x *XTrapezoid) Native() unsafe.Pointer {
	return unsafe.Pointer(x.native)
}

type XVisualInfo struct {
	native *C.XVisualInfo
}

// WrapXVisualInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapXVisualInfo(ptr unsafe.Pointer) *XVisualInfo {
	p := (*C.XVisualInfo)(ptr)
	v := XVisualInfo{native: p}

	runtime.SetFinalizer(&v, nil)
	runtime.SetFinalizer(&v, (*XVisualInfo).free)

	return &v
}

func marshalXVisualInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapXVisualInfo(unsafe.Pointer(b))
}

func (x *XVisualInfo) free() {
	C.free(unsafe.Pointer(x.native))
}

// Native returns the pointer to *C.XVisualInfo. The caller is expected to
// cast.
func (x *XVisualInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(x.native)
}

type XWindowAttributes struct {
	native *C.XWindowAttributes
}

// WrapXWindowAttributes wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapXWindowAttributes(ptr unsafe.Pointer) *XWindowAttributes {
	p := (*C.XWindowAttributes)(ptr)
	v := XWindowAttributes{native: p}

	runtime.SetFinalizer(&v, nil)
	runtime.SetFinalizer(&v, (*XWindowAttributes).free)

	return &v
}

func marshalXWindowAttributes(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapXWindowAttributes(unsafe.Pointer(b))
}

func (x *XWindowAttributes) free() {
	C.free(unsafe.Pointer(x.native))
}

// Native returns the pointer to *C.XWindowAttributes. The caller is expected to
// cast.
func (x *XWindowAttributes) Native() unsafe.Pointer {
	return unsafe.Pointer(x.native)
}
