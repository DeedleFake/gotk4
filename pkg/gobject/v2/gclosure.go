// Code generated by girgen. DO NOT EDIT.

package gobject

import (
	"unsafe"

	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gobject-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <glib-object.h>
import "C"

// CClosure: a Closure is a specialization of #GClosure for C function
// callbacks.
type CClosure struct {
	native C.GCClosure
}

// WrapCClosure wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapCClosure(ptr unsafe.Pointer) *CClosure {
	if ptr == nil {
		return nil
	}

	return (*CClosure)(ptr)
}

func marshalCClosure(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapCClosure(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (c *CClosure) Native() unsafe.Pointer {
	return unsafe.Pointer(&c.native)
}

// Callback gets the field inside the struct.
func (c *CClosure) Callback() interface{} {
	v = C.gpointer(c.native.callback)
}

type ClosureNotifyData struct {
	native C.GClosureNotifyData
}

// WrapClosureNotifyData wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapClosureNotifyData(ptr unsafe.Pointer) *ClosureNotifyData {
	if ptr == nil {
		return nil
	}

	return (*ClosureNotifyData)(ptr)
}

func marshalClosureNotifyData(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapClosureNotifyData(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (c *ClosureNotifyData) Native() unsafe.Pointer {
	return unsafe.Pointer(&c.native)
}

// Data gets the field inside the struct.
func (c *ClosureNotifyData) Data() interface{} {
	v = C.gpointer(c.native.data)
}
