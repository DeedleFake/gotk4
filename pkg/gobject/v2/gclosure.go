// Code generated by girgen. DO NOT EDIT.

package gobject

import (
	"unsafe"

	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gobject-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <glib-object.h>
import "C"

// NewSignalTypeCclosure creates a new closure which invokes the function found
// at the offset @struct_offset in the class structure of the interface or
// classed type identified by @itype.
func NewSignalTypeCclosure(itype externglib.Type, structOffset uint) *Closure {
	var _arg1 C.GType     // out
	var _arg2 C.guint     // out
	var _cret *C.GClosure // in

	_arg1 = (C.GType)(itype)
	_arg2 = C.guint(structOffset)

	_cret = C.g_signal_type_cclosure_new(_arg1, _arg2)

	var _closure *Closure // out

	_closure = (*Closure)(unsafe.Pointer(_cret))

	return _closure
}

// CClosure: a Closure is a specialization of #GClosure for C function
// callbacks.
type CClosure C.GCClosure

// WrapCClosure wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapCClosure(ptr unsafe.Pointer) *CClosure {
	return (*CClosure)(ptr)
}

// Native returns the underlying C source pointer.
func (c *CClosure) Native() unsafe.Pointer {
	return unsafe.Pointer(c)
}

// ClosureNotifyData:
type ClosureNotifyData C.GClosureNotifyData

// WrapClosureNotifyData wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapClosureNotifyData(ptr unsafe.Pointer) *ClosureNotifyData {
	return (*ClosureNotifyData)(ptr)
}

// Native returns the underlying C source pointer.
func (c *ClosureNotifyData) Native() unsafe.Pointer {
	return unsafe.Pointer(c)
}
