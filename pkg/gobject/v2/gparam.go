// Code generated by girgen. DO NOT EDIT.

package gobject

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gobject-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <glib-object.h>
import "C"

// ParamFlags: through the Flags flag values, certain aspects of parameters can
// be configured. See also PARAM_STATIC_STRINGS.
type ParamFlags int

const (
	// ParamFlagsReadable: the parameter is readable
	ParamFlagsReadable ParamFlags = 0b1
	// ParamFlagsWritable: the parameter is writable
	ParamFlagsWritable ParamFlags = 0b10
	// ParamFlagsReadwrite alias for G_PARAM_READABLE | G_PARAM_WRITABLE
	ParamFlagsReadwrite ParamFlags = 0b11
	// ParamFlagsConstruct: the parameter will be set upon object construction
	ParamFlagsConstruct ParamFlags = 0b100
	// ParamFlagsConstructOnly: the parameter can only be set upon object
	// construction
	ParamFlagsConstructOnly ParamFlags = 0b1000
	// ParamFlagsLaxValidation: upon parameter conversion (see
	// g_param_value_convert()) strict validation is not required
	ParamFlagsLaxValidation ParamFlags = 0b10000
	// ParamFlagsStaticName: the string used as name when constructing the
	// parameter is guaranteed to remain valid and unmodified for the lifetime
	// of the parameter. Since 2.8
	ParamFlagsStaticName ParamFlags = 0b100000
	// ParamFlagsPrivate: internal
	ParamFlagsPrivate ParamFlags = 0b100000
	// ParamFlagsStaticNick: the string used as nick when constructing the
	// parameter is guaranteed to remain valid and unmmodified for the lifetime
	// of the parameter. Since 2.8
	ParamFlagsStaticNick ParamFlags = 0b1000000
	// ParamFlagsStaticBlurb: the string used as blurb when constructing the
	// parameter is guaranteed to remain valid and unmodified for the lifetime
	// of the parameter. Since 2.8
	ParamFlagsStaticBlurb ParamFlags = 0b10000000
	// ParamFlagsExplicitNotify calls to g_object_set_property() for this
	// property will not automatically result in a "notify" signal being
	// emitted: the implementation must call g_object_notify() themselves in
	// case the property actually changes. Since: 2.42.
	ParamFlagsExplicitNotify ParamFlags = 0b1000000000000000000000000000000
	// ParamFlagsDeprecated: the parameter is deprecated and will be removed in
	// a future version. A warning will be generated if it is used while running
	// with G_ENABLE_DIAGNOSTIC=1. Since 2.26
	ParamFlagsDeprecated ParamFlags = 0b10000000000000000000000000000000
)

// ParamTypeRegisterStatic registers @name as the name of a new static type
// derived from TYPE_PARAM. The type system uses the information contained in
// the SpecTypeInfo structure pointed to by @info to manage the Spec type and
// its instances.
func ParamTypeRegisterStatic(name string, pspecInfo *ParamSpecTypeInfo) externglib.Type {
	var _arg1 *C.gchar              // out
	var _arg2 *C.GParamSpecTypeInfo // out
	var _cret C.GType               // in

	_arg1 = (*C.gchar)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.GParamSpecTypeInfo)(unsafe.Pointer(pspecInfo.Native()))

	_cret = C.g_param_type_register_static(_arg1, _arg2)

	var _gType externglib.Type // out

	_gType = externglib.Type(_cret)

	return _gType
}

// ParamValueConvert transforms @src_value into @dest_value if possible, and
// then validates @dest_value, in order for it to conform to @pspec. If
// @strict_validation is true this function will only succeed if the transformed
// @dest_value complied to @pspec without modifications.
//
// See also g_value_type_transformable(), g_value_transform() and
// g_param_value_validate().
func ParamValueConvert(pspec ParamSpec, srcValue externglib.Value, destValue externglib.Value, strictValidation bool) bool {
	var _arg1 *C.GParamSpec // out
	var _arg2 *C.GValue     // out
	var _arg3 *C.GValue     // out
	var _arg4 C.gboolean    // out
	var _cret C.gboolean    // in

	_arg1 = (*C.GParamSpec)(unsafe.Pointer(pspec.Native()))
	_arg2 = (*C.GValue)(unsafe.Pointer(&srcValue.GValue))
	_arg3 = (*C.GValue)(unsafe.Pointer(&destValue.GValue))
	if strictValidation {
		_arg4 = C.TRUE
	}

	_cret = C.g_param_value_convert(_arg1, _arg2, _arg3, _arg4)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// ParamValueDefaults checks whether @value contains the default value as
// specified in @pspec.
func ParamValueDefaults(pspec ParamSpec, value externglib.Value) bool {
	var _arg1 *C.GParamSpec // out
	var _arg2 *C.GValue     // out
	var _cret C.gboolean    // in

	_arg1 = (*C.GParamSpec)(unsafe.Pointer(pspec.Native()))
	_arg2 = (*C.GValue)(unsafe.Pointer(&value.GValue))

	_cret = C.g_param_value_defaults(_arg1, _arg2)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// ParamValueSetDefault sets @value to its default value as specified in @pspec.
func ParamValueSetDefault(pspec ParamSpec, value externglib.Value) {
	var _arg1 *C.GParamSpec // out
	var _arg2 *C.GValue     // out

	_arg1 = (*C.GParamSpec)(unsafe.Pointer(pspec.Native()))
	_arg2 = (*C.GValue)(unsafe.Pointer(&value.GValue))

	C.g_param_value_set_default(_arg1, _arg2)
}

// ParamValueValidate ensures that the contents of @value comply with the
// specifications set out by @pspec. For example, a SpecInt might require that
// integers stored in @value may not be smaller than -42 and not be greater than
// +42. If @value contains an integer outside of this range, it is modified
// accordingly, so the resulting value will fit into the range -42 .. +42.
func ParamValueValidate(pspec ParamSpec, value externglib.Value) bool {
	var _arg1 *C.GParamSpec // out
	var _arg2 *C.GValue     // out
	var _cret C.gboolean    // in

	_arg1 = (*C.GParamSpec)(unsafe.Pointer(pspec.Native()))
	_arg2 = (*C.GValue)(unsafe.Pointer(&value.GValue))

	_cret = C.g_param_value_validate(_arg1, _arg2)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// ParamValuesCmp compares @value1 with @value2 according to @pspec, and return
// -1, 0 or +1, if @value1 is found to be less than, equal to or greater than
// @value2, respectively.
func ParamValuesCmp(pspec ParamSpec, value1 externglib.Value, value2 externglib.Value) int {
	var _arg1 *C.GParamSpec // out
	var _arg2 *C.GValue     // out
	var _arg3 *C.GValue     // out
	var _cret C.gint        // in

	_arg1 = (*C.GParamSpec)(unsafe.Pointer(pspec.Native()))
	_arg2 = (*C.GValue)(unsafe.Pointer(&value1.GValue))
	_arg3 = (*C.GValue)(unsafe.Pointer(&value2.GValue))

	_cret = C.g_param_values_cmp(_arg1, _arg2, _arg3)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// ParamSpec is an object structure that encapsulates the metadata required to
// specify parameters, such as e.g. #GObject properties.
//
//
// Parameter names
//
// A property name consists of one or more segments consisting of ASCII letters
// and digits, separated by either the `-` or `_` character. The first character
// of a property name must be a letter. These are the same rules as for signal
// naming (see g_signal_new()).
//
// When creating and looking up a Spec, either separator can be used, but they
// cannot be mixed. Using `-` is considerably more efficient, and is the
// ‘canonical form’. Using `_` is discouraged.
type ParamSpec interface {
	gextras.Objector
}

// paramSpec implements the ParamSpec class.
type paramSpec struct {
	gextras.Objector
}

// WrapParamSpec wraps a GObject to the right type. It is
// primarily used internally.
func WrapParamSpec(obj *externglib.Object) ParamSpec {
	return paramSpec{
		Objector: obj,
	}
}

func marshalParamSpec(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapParamSpec(obj), nil
}

// ParamSpecPool: a SpecPool maintains a collection of Specs which can be
// quickly accessed by owner and name. The implementation of the #GObject
// property system uses such a pool to store the Specs of the properties all
// object types.
type ParamSpecPool C.GParamSpecPool

// WrapParamSpecPool wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapParamSpecPool(ptr unsafe.Pointer) *ParamSpecPool {
	return (*ParamSpecPool)(ptr)
}

// Native returns the underlying C source pointer.
func (p *ParamSpecPool) Native() unsafe.Pointer {
	return unsafe.Pointer(p)
}

// Insert removes a Spec from the pool.
func (p *ParamSpecPool) Insert(pspec ParamSpec, ownerType externglib.Type) {
	var _arg0 *C.GParamSpecPool // out
	var _arg1 *C.GParamSpec     // out
	var _arg2 C.GType           // out

	_arg0 = (*C.GParamSpecPool)(unsafe.Pointer(p.Native()))
	_arg1 = (*C.GParamSpec)(unsafe.Pointer(pspec.Native()))
	_arg2 = (C.GType)(ownerType)

	C.g_param_spec_pool_insert(_arg0, _arg1, _arg2)
}

// Lookup removes a Spec from the pool.
func (p *ParamSpecPool) Lookup(paramName string, ownerType externglib.Type, walkAncestors bool) ParamSpec {
	var _arg0 *C.GParamSpecPool // out
	var _arg1 *C.gchar          // out
	var _arg2 C.GType           // out
	var _arg3 C.gboolean        // out
	var _cret *C.GParamSpec     // in

	_arg0 = (*C.GParamSpecPool)(unsafe.Pointer(p.Native()))
	_arg1 = (*C.gchar)(C.CString(paramName))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (C.GType)(ownerType)
	if walkAncestors {
		_arg3 = C.TRUE
	}

	_cret = C.g_param_spec_pool_lookup(_arg0, _arg1, _arg2, _arg3)

	var _paramSpec ParamSpec // out

	_paramSpec = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(ParamSpec)

	return _paramSpec
}

// Remove removes a Spec from the pool.
func (p *ParamSpecPool) Remove(pspec ParamSpec) {
	var _arg0 *C.GParamSpecPool // out
	var _arg1 *C.GParamSpec     // out

	_arg0 = (*C.GParamSpecPool)(unsafe.Pointer(p.Native()))
	_arg1 = (*C.GParamSpec)(unsafe.Pointer(pspec.Native()))

	C.g_param_spec_pool_remove(_arg0, _arg1)
}

// ParamSpecTypeInfo: this structure is used to provide the type system with the
// information required to initialize and destruct (finalize) a parameter's
// class and instances thereof. The initialized structure is passed to the
// g_param_type_register_static() The type system will perform a deep copy of
// this structure, so its memory does not need to be persistent across
// invocation of g_param_type_register_static().
type ParamSpecTypeInfo C.GParamSpecTypeInfo

// WrapParamSpecTypeInfo wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapParamSpecTypeInfo(ptr unsafe.Pointer) *ParamSpecTypeInfo {
	return (*ParamSpecTypeInfo)(ptr)
}

// Native returns the underlying C source pointer.
func (p *ParamSpecTypeInfo) Native() unsafe.Pointer {
	return unsafe.Pointer(p)
}

// Parameter: the GParameter struct is an auxiliary structure used to hand
// parameter name/value pairs to g_object_newv().
//
// Deprecated: since version 2.54.
type Parameter C.GParameter

// WrapParameter wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapParameter(ptr unsafe.Pointer) *Parameter {
	return (*Parameter)(ptr)
}

// Native returns the underlying C source pointer.
func (p *Parameter) Native() unsafe.Pointer {
	return unsafe.Pointer(p)
}
