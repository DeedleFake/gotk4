// Code generated by girgen. DO NOT EDIT.

package gobject

import (
	"unsafe"

	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gobject-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_value_get_type()), F: marshalValue},
	})
}

// ValueTypeCompatible returns whether a #GValue of type @src_type can be copied
// into a #GValue of type @dest_type.
func ValueTypeCompatible(srcType externglib.Type, destType externglib.Type) bool {
	var arg1 C.GType
	var arg2 C.GType

	arg1 := C.GType(srcType)
	arg2 := C.GType(destType)

	var cret C.gboolean
	var ok bool

	cret = C.g_value_type_compatible(arg1, arg2)

	if cret {
		ok = true
	}

	return ok
}

// ValueTypeTransformable: check whether g_value_transform() is able to
// transform values of type @src_type into values of type @dest_type. Note that
// for the types to be transformable, they must be compatible or a
// transformation function must be registered.
func ValueTypeTransformable(srcType externglib.Type, destType externglib.Type) bool {
	var arg1 C.GType
	var arg2 C.GType

	arg1 := C.GType(srcType)
	arg2 := C.GType(destType)

	var cret C.gboolean
	var ok bool

	cret = C.g_value_type_transformable(arg1, arg2)

	if cret {
		ok = true
	}

	return ok
}

// Value: an opaque structure used to hold different types of values. The data
// within the structure has protected scope: it is accessible only to functions
// within a ValueTable structure, or implementations of the g_value_*() API.
// That is, code portions which implement new fundamental types. #GValue users
// cannot make any assumptions about how data is stored within the 2 element
// @data union, and the @g_type member should only be accessed through the
// G_VALUE_TYPE() macro.
type Value struct {
	native C.GValue
}

// WrapValue wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapValue(ptr unsafe.Pointer) *Value {
	if ptr == nil {
		return nil
	}

	return (*Value)(ptr)
}

func marshalValue(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapValue(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (v *Value) Native() unsafe.Pointer {
	return unsafe.Pointer(&v.native)
}

// Copy copies the value of @src_value into @dest_value.
func (s *Value) Copy(s *externglib.Value, destValue *externglib.Value) {
	var arg0 *C.GValue
	var arg1 *C.GValue

	arg0 = (*C.GValue)(s.GValue)
	arg1 = (*C.GValue)(destValue.GValue)

	C.g_value_copy(arg0, arg1)
}

// DupBoxed: get the contents of a G_TYPE_BOXED derived #GValue. Upon getting,
// the boxed value is duplicated and needs to be later freed with
// g_boxed_free(), e.g. like: g_boxed_free (G_VALUE_TYPE (@value),
// return_value);
func (v *Value) DupBoxed(v *externglib.Value) {
	var arg0 *C.GValue

	arg0 = (*C.GValue)(v.GValue)

	C.g_value_dup_boxed(arg0)
}

// DupObject: get the contents of a G_TYPE_OBJECT derived #GValue, increasing
// its reference count. If the contents of the #GValue are nil, then nil will be
// returned.
func (v *Value) DupObject(v *externglib.Value) {
	var arg0 *C.GValue

	arg0 = (*C.GValue)(v.GValue)

	C.g_value_dup_object(arg0)
}

// DupParam: get the contents of a G_TYPE_PARAM #GValue, increasing its
// reference count.
func (v *Value) DupParam(v *externglib.Value) {
	var arg0 *C.GValue

	arg0 = (*C.GValue)(v.GValue)

	C.g_value_dup_param(arg0)
}

// DupString: get a copy the contents of a G_TYPE_STRING #GValue.
func (v *Value) DupString(v *externglib.Value) {
	var arg0 *C.GValue

	arg0 = (*C.GValue)(v.GValue)

	C.g_value_dup_string(arg0)
}

// DupVariant: get the contents of a variant #GValue, increasing its refcount.
// The returned #GVariant is never floating.
func (v *Value) DupVariant(v *externglib.Value) {
	var arg0 *C.GValue

	arg0 = (*C.GValue)(v.GValue)

	C.g_value_dup_variant(arg0)
}

// FitsPointer determines if @value will fit inside the size of a pointer value.
// This is an internal function introduced mainly for C marshallers.
func (v *Value) FitsPointer(v *externglib.Value) bool {
	var arg0 *C.GValue

	arg0 = (*C.GValue)(v.GValue)

	var cret C.gboolean
	var ok bool

	cret = C.g_value_fits_pointer(arg0)

	if cret {
		ok = true
	}

	return ok
}

// Boolean: get the contents of a G_TYPE_BOOLEAN #GValue.
func (v *Value) Boolean(v *externglib.Value) bool {
	var arg0 *C.GValue

	arg0 = (*C.GValue)(v.GValue)

	var cret C.gboolean
	var ok bool

	cret = C.g_value_get_boolean(arg0)

	if cret {
		ok = true
	}

	return ok
}

// Boxed: get the contents of a G_TYPE_BOXED derived #GValue.
func (v *Value) Boxed(v *externglib.Value) {
	var arg0 *C.GValue

	arg0 = (*C.GValue)(v.GValue)

	C.g_value_get_boxed(arg0)
}

// Char: do not use this function; it is broken on platforms where the char type
// is unsigned, such as ARM and PowerPC. See g_value_get_schar().
//
// Get the contents of a G_TYPE_CHAR #GValue.
func (v *Value) Char(v *externglib.Value) {
	var arg0 *C.GValue

	arg0 = (*C.GValue)(v.GValue)

	C.g_value_get_char(arg0)
}

// Double: get the contents of a G_TYPE_DOUBLE #GValue.
func (v *Value) Double(v *externglib.Value) {
	var arg0 *C.GValue

	arg0 = (*C.GValue)(v.GValue)

	C.g_value_get_double(arg0)
}

// Enum: get the contents of a G_TYPE_ENUM #GValue.
func (v *Value) Enum(v *externglib.Value) {
	var arg0 *C.GValue

	arg0 = (*C.GValue)(v.GValue)

	C.g_value_get_enum(arg0)
}

// Flags: get the contents of a G_TYPE_FLAGS #GValue.
func (v *Value) Flags(v *externglib.Value) {
	var arg0 *C.GValue

	arg0 = (*C.GValue)(v.GValue)

	C.g_value_get_flags(arg0)
}

// Float: get the contents of a G_TYPE_FLOAT #GValue.
func (v *Value) Float(v *externglib.Value) {
	var arg0 *C.GValue

	arg0 = (*C.GValue)(v.GValue)

	C.g_value_get_float(arg0)
}

// GType: get the contents of a G_TYPE_GTYPE #GValue.
func (v *Value) GType(v *externglib.Value) {
	var arg0 *C.GValue

	arg0 = (*C.GValue)(v.GValue)

	C.g_value_get_gtype(arg0)
}

// Int: get the contents of a G_TYPE_INT #GValue.
func (v *Value) Int(v *externglib.Value) {
	var arg0 *C.GValue

	arg0 = (*C.GValue)(v.GValue)

	C.g_value_get_int(arg0)
}

// Int64: get the contents of a G_TYPE_INT64 #GValue.
func (v *Value) Int64(v *externglib.Value) {
	var arg0 *C.GValue

	arg0 = (*C.GValue)(v.GValue)

	C.g_value_get_int64(arg0)
}

// Long: get the contents of a G_TYPE_LONG #GValue.
func (v *Value) Long(v *externglib.Value) {
	var arg0 *C.GValue

	arg0 = (*C.GValue)(v.GValue)

	C.g_value_get_long(arg0)
}

// Object: get the contents of a G_TYPE_OBJECT derived #GValue.
func (v *Value) Object(v *externglib.Value) {
	var arg0 *C.GValue

	arg0 = (*C.GValue)(v.GValue)

	C.g_value_get_object(arg0)
}

// Param: get the contents of a G_TYPE_PARAM #GValue.
func (v *Value) Param(v *externglib.Value) {
	var arg0 *C.GValue

	arg0 = (*C.GValue)(v.GValue)

	C.g_value_get_param(arg0)
}

// Pointer: get the contents of a pointer #GValue.
func (v *Value) Pointer(v *externglib.Value) {
	var arg0 *C.GValue

	arg0 = (*C.GValue)(v.GValue)

	C.g_value_get_pointer(arg0)
}

// Schar: get the contents of a G_TYPE_CHAR #GValue.
func (v *Value) Schar(v *externglib.Value) {
	var arg0 *C.GValue

	arg0 = (*C.GValue)(v.GValue)

	C.g_value_get_schar(arg0)
}

// String: get the contents of a G_TYPE_STRING #GValue.
func (v *Value) String(v *externglib.Value) {
	var arg0 *C.GValue

	arg0 = (*C.GValue)(v.GValue)

	C.g_value_get_string(arg0)
}

// Uchar: get the contents of a G_TYPE_UCHAR #GValue.
func (v *Value) Uchar(v *externglib.Value) {
	var arg0 *C.GValue

	arg0 = (*C.GValue)(v.GValue)

	C.g_value_get_uchar(arg0)
}

// Uint: get the contents of a G_TYPE_UINT #GValue.
func (v *Value) Uint(v *externglib.Value) {
	var arg0 *C.GValue

	arg0 = (*C.GValue)(v.GValue)

	C.g_value_get_uint(arg0)
}

// Uint64: get the contents of a G_TYPE_UINT64 #GValue.
func (v *Value) Uint64(v *externglib.Value) {
	var arg0 *C.GValue

	arg0 = (*C.GValue)(v.GValue)

	C.g_value_get_uint64(arg0)
}

// Ulong: get the contents of a G_TYPE_ULONG #GValue.
func (v *Value) Ulong(v *externglib.Value) {
	var arg0 *C.GValue

	arg0 = (*C.GValue)(v.GValue)

	C.g_value_get_ulong(arg0)
}

// Variant: get the contents of a variant #GValue.
func (v *Value) Variant(v *externglib.Value) {
	var arg0 *C.GValue

	arg0 = (*C.GValue)(v.GValue)

	C.g_value_get_variant(arg0)
}

// Init initializes @value with the default value of @type.
func (v *Value) Init(v *externglib.Value, gType externglib.Type) {
	var arg0 *C.GValue
	var arg1 C.GType

	arg0 = (*C.GValue)(v.GValue)
	arg1 := C.GType(gType)

	C.g_value_init(arg0, arg1)
}

// InitFromInstance initializes and sets @value from an instantiatable type via
// the value_table's collect_value() function.
//
// Note: The @value will be initialised with the exact type of @instance. If you
// wish to set the @value's type to a different GType (such as a parent class
// GType), you need to manually call g_value_init() and g_value_set_instance().
func (v *Value) InitFromInstance(v *externglib.Value, instance TypeInstance) {
	var arg0 *C.GValue
	var arg1 C.gpointer

	arg0 = (*C.GValue)(v.GValue)
	arg1 = (C.gpointer)(unsafe.Pointer(instance.Native()))

	C.g_value_init_from_instance(arg0, arg1)
}

// PeekPointer returns the value contents as pointer. This function asserts that
// g_value_fits_pointer() returned true for the passed in value. This is an
// internal function introduced mainly for C marshallers.
func (v *Value) PeekPointer(v *externglib.Value) {
	var arg0 *C.GValue

	arg0 = (*C.GValue)(v.GValue)

	C.g_value_peek_pointer(arg0)
}

// Reset clears the current value in @value and resets it to the default value
// (as if the value had just been initialized).
func (v *Value) Reset(v *externglib.Value) {
	var arg0 *C.GValue

	arg0 = (*C.GValue)(v.GValue)

	C.g_value_reset(arg0)
}

// SetBoolean: set the contents of a G_TYPE_BOOLEAN #GValue to @v_boolean.
func (v *Value) SetBoolean(v *externglib.Value, vBoolean bool) {
	var arg0 *C.GValue
	var arg1 C.gboolean

	arg0 = (*C.GValue)(v.GValue)
	if vBoolean {
		arg1 = C.gboolean(1)
	}

	C.g_value_set_boolean(arg0, arg1)
}

// SetBoxed: set the contents of a G_TYPE_BOXED derived #GValue to @v_boxed.
func (v *Value) SetBoxed(v *externglib.Value, vBoxed interface{}) {
	var arg0 *C.GValue
	var arg1 C.gpointer

	arg0 = (*C.GValue)(v.GValue)
	arg1 = C.gpointer(vBoxed)

	C.g_value_set_boxed(arg0, arg1)
}

// SetBoxedTakeOwnership: this is an internal function introduced mainly for C
// marshallers.
func (v *Value) SetBoxedTakeOwnership(v *externglib.Value, vBoxed interface{}) {
	var arg0 *C.GValue
	var arg1 C.gpointer

	arg0 = (*C.GValue)(v.GValue)
	arg1 = C.gpointer(vBoxed)

	C.g_value_set_boxed_take_ownership(arg0, arg1)
}

// SetChar: set the contents of a G_TYPE_CHAR #GValue to @v_char.
func (v *Value) SetChar(v *externglib.Value, vChar byte) {
	var arg0 *C.GValue
	var arg1 C.gchar

	arg0 = (*C.GValue)(v.GValue)
	arg1 = C.gchar(vChar)

	C.g_value_set_char(arg0, arg1)
}

// SetDouble: set the contents of a G_TYPE_DOUBLE #GValue to @v_double.
func (v *Value) SetDouble(v *externglib.Value, vDouble float64) {
	var arg0 *C.GValue
	var arg1 C.gdouble

	arg0 = (*C.GValue)(v.GValue)
	arg1 = C.gdouble(vDouble)

	C.g_value_set_double(arg0, arg1)
}

// SetEnum: set the contents of a G_TYPE_ENUM #GValue to @v_enum.
func (v *Value) SetEnum(v *externglib.Value, vEnum int) {
	var arg0 *C.GValue
	var arg1 C.gint

	arg0 = (*C.GValue)(v.GValue)
	arg1 = C.gint(vEnum)

	C.g_value_set_enum(arg0, arg1)
}

// SetFlags: set the contents of a G_TYPE_FLAGS #GValue to @v_flags.
func (v *Value) SetFlags(v *externglib.Value, vFlags uint) {
	var arg0 *C.GValue
	var arg1 C.guint

	arg0 = (*C.GValue)(v.GValue)
	arg1 = C.guint(vFlags)

	C.g_value_set_flags(arg0, arg1)
}

// SetFloat: set the contents of a G_TYPE_FLOAT #GValue to @v_float.
func (v *Value) SetFloat(v *externglib.Value, vFloat float32) {
	var arg0 *C.GValue
	var arg1 C.gfloat

	arg0 = (*C.GValue)(v.GValue)
	arg1 = C.gfloat(vFloat)

	C.g_value_set_float(arg0, arg1)
}

// SetGType: set the contents of a G_TYPE_GTYPE #GValue to @v_gtype.
func (v *Value) SetGType(v *externglib.Value, vGType externglib.Type) {
	var arg0 *C.GValue
	var arg1 C.GType

	arg0 = (*C.GValue)(v.GValue)
	arg1 := C.GType(vGType)

	C.g_value_set_gtype(arg0, arg1)
}

// SetInstance sets @value from an instantiatable type via the value_table's
// collect_value() function.
func (v *Value) SetInstance(v *externglib.Value, instance interface{}) {
	var arg0 *C.GValue
	var arg1 C.gpointer

	arg0 = (*C.GValue)(v.GValue)
	arg1 = C.gpointer(instance)

	C.g_value_set_instance(arg0, arg1)
}

// SetInt: set the contents of a G_TYPE_INT #GValue to @v_int.
func (v *Value) SetInt(v *externglib.Value, vInt int) {
	var arg0 *C.GValue
	var arg1 C.gint

	arg0 = (*C.GValue)(v.GValue)
	arg1 = C.gint(vInt)

	C.g_value_set_int(arg0, arg1)
}

// SetInt64: set the contents of a G_TYPE_INT64 #GValue to @v_int64.
func (v *Value) SetInt64(v *externglib.Value, vInt64 int64) {
	var arg0 *C.GValue
	var arg1 C.gint64

	arg0 = (*C.GValue)(v.GValue)
	arg1 = C.gint64(vInt64)

	C.g_value_set_int64(arg0, arg1)
}

// SetInternedString: set the contents of a G_TYPE_STRING #GValue to @v_string.
// The string is assumed to be static and interned (canonical, for example from
// g_intern_string()), and is thus not duplicated when setting the #GValue.
func (v *Value) SetInternedString(v *externglib.Value, vString string) {
	var arg0 *C.GValue
	var arg1 *C.gchar

	arg0 = (*C.GValue)(v.GValue)
	arg1 = (*C.gchar)(C.CString(vString))
	defer C.free(unsafe.Pointer(arg1))

	C.g_value_set_interned_string(arg0, arg1)
}

// SetLong: set the contents of a G_TYPE_LONG #GValue to @v_long.
func (v *Value) SetLong(v *externglib.Value, vLong int32) {
	var arg0 *C.GValue
	var arg1 C.glong

	arg0 = (*C.GValue)(v.GValue)
	arg1 = C.glong(vLong)

	C.g_value_set_long(arg0, arg1)
}

// SetObject: set the contents of a G_TYPE_OBJECT derived #GValue to @v_object.
//
// g_value_set_object() increases the reference count of @v_object (the #GValue
// holds a reference to @v_object). If you do not wish to increase the reference
// count of the object (i.e. you wish to pass your current reference to the
// #GValue because you no longer need it), use g_value_take_object() instead.
//
// It is important that your #GValue holds a reference to @v_object (either its
// own, or one it has taken) to ensure that the object won't be destroyed while
// the #GValue still exists).
func (v *Value) SetObject(v *externglib.Value, vObject gextras.Objector) {
	var arg0 *C.GValue
	var arg1 C.gpointer

	arg0 = (*C.GValue)(v.GValue)
	arg1 = (*C.GObject)(unsafe.Pointer(vObject.Native()))

	C.g_value_set_object(arg0, arg1)
}

// SetObjectTakeOwnership: this is an internal function introduced mainly for C
// marshallers.
func (v *Value) SetObjectTakeOwnership(v *externglib.Value, vObject interface{}) {
	var arg0 *C.GValue
	var arg1 C.gpointer

	arg0 = (*C.GValue)(v.GValue)
	arg1 = C.gpointer(vObject)

	C.g_value_set_object_take_ownership(arg0, arg1)
}

// SetParam: set the contents of a G_TYPE_PARAM #GValue to @param.
func (v *Value) SetParam(v *externglib.Value, param ParamSpec) {
	var arg0 *C.GValue
	var arg1 *C.GParamSpec

	arg0 = (*C.GValue)(v.GValue)
	arg1 = (*C.GParamSpec)(unsafe.Pointer(param.Native()))

	C.g_value_set_param(arg0, arg1)
}

// SetParamTakeOwnership: this is an internal function introduced mainly for C
// marshallers.
func (v *Value) SetParamTakeOwnership(v *externglib.Value, param ParamSpec) {
	var arg0 *C.GValue
	var arg1 *C.GParamSpec

	arg0 = (*C.GValue)(v.GValue)
	arg1 = (*C.GParamSpec)(unsafe.Pointer(param.Native()))

	C.g_value_set_param_take_ownership(arg0, arg1)
}

// SetPointer: set the contents of a pointer #GValue to @v_pointer.
func (v *Value) SetPointer(v *externglib.Value, vPointer interface{}) {
	var arg0 *C.GValue
	var arg1 C.gpointer

	arg0 = (*C.GValue)(v.GValue)
	arg1 = C.gpointer(vPointer)

	C.g_value_set_pointer(arg0, arg1)
}

// SetSchar: set the contents of a G_TYPE_CHAR #GValue to @v_char.
func (v *Value) SetSchar(v *externglib.Value, vChar int8) {
	var arg0 *C.GValue
	var arg1 C.gint8

	arg0 = (*C.GValue)(v.GValue)
	arg1 = C.gint8(vChar)

	C.g_value_set_schar(arg0, arg1)
}

// SetStaticBoxed: set the contents of a G_TYPE_BOXED derived #GValue to
// @v_boxed. The boxed value is assumed to be static, and is thus not duplicated
// when setting the #GValue.
func (v *Value) SetStaticBoxed(v *externglib.Value, vBoxed interface{}) {
	var arg0 *C.GValue
	var arg1 C.gpointer

	arg0 = (*C.GValue)(v.GValue)
	arg1 = C.gpointer(vBoxed)

	C.g_value_set_static_boxed(arg0, arg1)
}

// SetStaticString: set the contents of a G_TYPE_STRING #GValue to @v_string.
// The string is assumed to be static, and is thus not duplicated when setting
// the #GValue.
//
// If the the string is a canonical string, using g_value_set_interned_string()
// is more appropriate.
func (v *Value) SetStaticString(v *externglib.Value, vString string) {
	var arg0 *C.GValue
	var arg1 *C.gchar

	arg0 = (*C.GValue)(v.GValue)
	arg1 = (*C.gchar)(C.CString(vString))
	defer C.free(unsafe.Pointer(arg1))

	C.g_value_set_static_string(arg0, arg1)
}

// SetString: set the contents of a G_TYPE_STRING #GValue to @v_string.
func (v *Value) SetString(v *externglib.Value, vString string) {
	var arg0 *C.GValue
	var arg1 *C.gchar

	arg0 = (*C.GValue)(v.GValue)
	arg1 = (*C.gchar)(C.CString(vString))
	defer C.free(unsafe.Pointer(arg1))

	C.g_value_set_string(arg0, arg1)
}

// SetStringTakeOwnership: this is an internal function introduced mainly for C
// marshallers.
func (v *Value) SetStringTakeOwnership(v *externglib.Value, vString string) {
	var arg0 *C.GValue
	var arg1 *C.gchar

	arg0 = (*C.GValue)(v.GValue)
	arg1 = (*C.gchar)(C.CString(vString))
	defer C.free(unsafe.Pointer(arg1))

	C.g_value_set_string_take_ownership(arg0, arg1)
}

// SetUchar: set the contents of a G_TYPE_UCHAR #GValue to @v_uchar.
func (v *Value) SetUchar(v *externglib.Value, vUchar byte) {
	var arg0 *C.GValue
	var arg1 C.guchar

	arg0 = (*C.GValue)(v.GValue)
	arg1 = C.guchar(vUchar)

	C.g_value_set_uchar(arg0, arg1)
}

// SetUint: set the contents of a G_TYPE_UINT #GValue to @v_uint.
func (v *Value) SetUint(v *externglib.Value, vUint uint) {
	var arg0 *C.GValue
	var arg1 C.guint

	arg0 = (*C.GValue)(v.GValue)
	arg1 = C.guint(vUint)

	C.g_value_set_uint(arg0, arg1)
}

// SetUint64: set the contents of a G_TYPE_UINT64 #GValue to @v_uint64.
func (v *Value) SetUint64(v *externglib.Value, vUint64 uint64) {
	var arg0 *C.GValue
	var arg1 C.guint64

	arg0 = (*C.GValue)(v.GValue)
	arg1 = C.guint64(vUint64)

	C.g_value_set_uint64(arg0, arg1)
}

// SetUlong: set the contents of a G_TYPE_ULONG #GValue to @v_ulong.
func (v *Value) SetUlong(v *externglib.Value, vUlong uint32) {
	var arg0 *C.GValue
	var arg1 C.gulong

	arg0 = (*C.GValue)(v.GValue)
	arg1 = C.gulong(vUlong)

	C.g_value_set_ulong(arg0, arg1)
}

// SetVariant: set the contents of a variant #GValue to @variant. If the variant
// is floating, it is consumed.
func (v *Value) SetVariant(v *externglib.Value, variant *glib.Variant) {
	var arg0 *C.GValue
	var arg1 *C.GVariant

	arg0 = (*C.GValue)(v.GValue)
	arg1 = (*C.GVariant)(unsafe.Pointer(variant.Native()))

	C.g_value_set_variant(arg0, arg1)
}

// TakeBoxed sets the contents of a G_TYPE_BOXED derived #GValue to @v_boxed and
// takes over the ownership of the caller’s reference to @v_boxed; the caller
// doesn’t have to unref it any more.
func (v *Value) TakeBoxed(v *externglib.Value, vBoxed interface{}) {
	var arg0 *C.GValue
	var arg1 C.gpointer

	arg0 = (*C.GValue)(v.GValue)
	arg1 = C.gpointer(vBoxed)

	C.g_value_take_boxed(arg0, arg1)
}

// TakeObject sets the contents of a G_TYPE_OBJECT derived #GValue to @v_object
// and takes over the ownership of the caller’s reference to @v_object; the
// caller doesn’t have to unref it any more (i.e. the reference count of the
// object is not increased).
//
// If you want the #GValue to hold its own reference to @v_object, use
// g_value_set_object() instead.
func (v *Value) TakeObject(v *externglib.Value, vObject interface{}) {
	var arg0 *C.GValue
	var arg1 C.gpointer

	arg0 = (*C.GValue)(v.GValue)
	arg1 = C.gpointer(vObject)

	C.g_value_take_object(arg0, arg1)
}

// TakeParam sets the contents of a G_TYPE_PARAM #GValue to @param and takes
// over the ownership of the caller’s reference to @param; the caller doesn’t
// have to unref it any more.
func (v *Value) TakeParam(v *externglib.Value, param ParamSpec) {
	var arg0 *C.GValue
	var arg1 *C.GParamSpec

	arg0 = (*C.GValue)(v.GValue)
	arg1 = (*C.GParamSpec)(unsafe.Pointer(param.Native()))

	C.g_value_take_param(arg0, arg1)
}

// TakeString sets the contents of a G_TYPE_STRING #GValue to @v_string.
func (v *Value) TakeString(v *externglib.Value, vString string) {
	var arg0 *C.GValue
	var arg1 *C.gchar

	arg0 = (*C.GValue)(v.GValue)
	arg1 = (*C.gchar)(C.CString(vString))
	defer C.free(unsafe.Pointer(arg1))

	C.g_value_take_string(arg0, arg1)
}

// TakeVariant: set the contents of a variant #GValue to @variant, and takes
// over the ownership of the caller's reference to @variant; the caller doesn't
// have to unref it any more (i.e. the reference count of the variant is not
// increased).
//
// If @variant was floating then its floating reference is converted to a hard
// reference.
//
// If you want the #GValue to hold its own reference to @variant, use
// g_value_set_variant() instead.
//
// This is an internal function introduced mainly for C marshallers.
func (v *Value) TakeVariant(v *externglib.Value, variant *glib.Variant) {
	var arg0 *C.GValue
	var arg1 *C.GVariant

	arg0 = (*C.GValue)(v.GValue)
	arg1 = (*C.GVariant)(unsafe.Pointer(variant.Native()))

	C.g_value_take_variant(arg0, arg1)
}

// Transform tries to cast the contents of @src_value into a type appropriate to
// store in @dest_value, e.g. to transform a G_TYPE_INT value into a
// G_TYPE_FLOAT value. Performing transformations between value types might
// incur precision lossage. Especially transformations into strings might reveal
// seemingly arbitrary results and shouldn't be relied upon for production code
// (such as rcfile value or object property serialization).
func (s *Value) Transform(s *externglib.Value, destValue *externglib.Value) bool {
	var arg0 *C.GValue
	var arg1 *C.GValue

	arg0 = (*C.GValue)(s.GValue)
	arg1 = (*C.GValue)(destValue.GValue)

	var cret C.gboolean
	var ok bool

	cret = C.g_value_transform(arg0, arg1)

	if cret {
		ok = true
	}

	return ok
}

// Unset clears the current value in @value (if any) and "unsets" the type, this
// releases all resources associated with this GValue. An unset value is the
// same as an uninitialized (zero-filled) #GValue structure.
func (v *Value) Unset(v *externglib.Value) {
	var arg0 *C.GValue

	arg0 = (*C.GValue)(v.GValue)

	C.g_value_unset(arg0)
}
