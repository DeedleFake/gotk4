// Code generated by girgen. DO NOT EDIT.

package gobject

import (
	"unsafe"

	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gobject-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_value_get_type()), F: marshalValue},
	})
}

// Value: an opaque structure used to hold different types of values. The data
// within the structure has protected scope: it is accessible only to functions
// within a ValueTable structure, or implementations of the g_value_*() API.
// That is, code portions which implement new fundamental types. #GValue users
// cannot make any assumptions about how data is stored within the 2 element
// @data union, and the @g_type member should only be accessed through the
// G_VALUE_TYPE() macro.
type Value C.GValue

// WrapValue wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapValue(ptr unsafe.Pointer) *Value {
	return (*Value)(ptr)
}

func marshalValue(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return (*Value)(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (v *Value) Native() unsafe.Pointer {
	return unsafe.Pointer(v)
}

// Copy clears the current value in @value (if any) and "unsets" the type, this
// releases all resources associated with this GValue. An unset value is the
// same as an uninitialized (zero-filled) #GValue structure.
func (v *Value) Copy(destValue externglib.Value) {
	var _arg0 *C.GValue // out
	var _arg1 *C.GValue // out

	_arg0 = (*C.GValue)(unsafe.Pointer(&s.GValue))
	_arg1 = (*C.GValue)(unsafe.Pointer(&destValue.GValue))

	C.g_value_copy(_arg0, _arg1)
}

// DupObject clears the current value in @value (if any) and "unsets" the type,
// this releases all resources associated with this GValue. An unset value is
// the same as an uninitialized (zero-filled) #GValue structure.
func (v *Value) DupObject() gextras.Objector {
	var _arg0 *C.GValue  // out
	var _cret C.gpointer // in

	_arg0 = (*C.GValue)(unsafe.Pointer(&v.GValue))

	_cret = C.g_value_dup_object(_arg0)

	var _object gextras.Objector // out

	_object = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(gextras.Objector)

	return _object
}

// DupString clears the current value in @value (if any) and "unsets" the type,
// this releases all resources associated with this GValue. An unset value is
// the same as an uninitialized (zero-filled) #GValue structure.
func (v *Value) DupString() string {
	var _arg0 *C.GValue // out
	var _cret *C.gchar  // in

	_arg0 = (*C.GValue)(unsafe.Pointer(&v.GValue))

	_cret = C.g_value_dup_string(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// DupVariant clears the current value in @value (if any) and "unsets" the type,
// this releases all resources associated with this GValue. An unset value is
// the same as an uninitialized (zero-filled) #GValue structure.
func (v *Value) DupVariant() *glib.Variant {
	var _arg0 *C.GValue   // out
	var _cret *C.GVariant // in

	_arg0 = (*C.GValue)(unsafe.Pointer(&v.GValue))

	_cret = C.g_value_dup_variant(_arg0)

	var _variant *glib.Variant // out

	_variant = (*glib.Variant)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(&_variant, func(v **glib.Variant) {
		C.free(unsafe.Pointer(v))
	})

	return _variant
}

// FitsPointer clears the current value in @value (if any) and "unsets" the
// type, this releases all resources associated with this GValue. An unset value
// is the same as an uninitialized (zero-filled) #GValue structure.
func (v *Value) FitsPointer() bool {
	var _arg0 *C.GValue  // out
	var _cret C.gboolean // in

	_arg0 = (*C.GValue)(unsafe.Pointer(&v.GValue))

	_cret = C.g_value_fits_pointer(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Boolean clears the current value in @value (if any) and "unsets" the type,
// this releases all resources associated with this GValue. An unset value is
// the same as an uninitialized (zero-filled) #GValue structure.
func (v *Value) Boolean() bool {
	var _arg0 *C.GValue  // out
	var _cret C.gboolean // in

	_arg0 = (*C.GValue)(unsafe.Pointer(&v.GValue))

	_cret = C.g_value_get_boolean(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Boxed clears the current value in @value (if any) and "unsets" the type, this
// releases all resources associated with this GValue. An unset value is the
// same as an uninitialized (zero-filled) #GValue structure.
func (v *Value) Boxed() interface{} {
	var _arg0 *C.GValue  // out
	var _cret C.gpointer // in

	_arg0 = (*C.GValue)(unsafe.Pointer(&v.GValue))

	_cret = C.g_value_get_boxed(_arg0)

	var _gpointer interface{} // out

	_gpointer = box.Get(uintptr(_cret))

	return _gpointer
}

// Char clears the current value in @value (if any) and "unsets" the type, this
// releases all resources associated with this GValue. An unset value is the
// same as an uninitialized (zero-filled) #GValue structure.
func (v *Value) Char() byte {
	var _arg0 *C.GValue // out
	var _cret C.gchar   // in

	_arg0 = (*C.GValue)(unsafe.Pointer(&v.GValue))

	_cret = C.g_value_get_char(_arg0)

	var _gchar byte // out

	_gchar = byte(_cret)

	return _gchar
}

// Double clears the current value in @value (if any) and "unsets" the type,
// this releases all resources associated with this GValue. An unset value is
// the same as an uninitialized (zero-filled) #GValue structure.
func (v *Value) Double() float64 {
	var _arg0 *C.GValue // out
	var _cret C.gdouble // in

	_arg0 = (*C.GValue)(unsafe.Pointer(&v.GValue))

	_cret = C.g_value_get_double(_arg0)

	var _gdouble float64 // out

	_gdouble = float64(_cret)

	return _gdouble
}

// Enum clears the current value in @value (if any) and "unsets" the type, this
// releases all resources associated with this GValue. An unset value is the
// same as an uninitialized (zero-filled) #GValue structure.
func (v *Value) Enum() int {
	var _arg0 *C.GValue // out
	var _cret C.gint    // in

	_arg0 = (*C.GValue)(unsafe.Pointer(&v.GValue))

	_cret = C.g_value_get_enum(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// Flags clears the current value in @value (if any) and "unsets" the type, this
// releases all resources associated with this GValue. An unset value is the
// same as an uninitialized (zero-filled) #GValue structure.
func (v *Value) Flags() uint {
	var _arg0 *C.GValue // out
	var _cret C.guint   // in

	_arg0 = (*C.GValue)(unsafe.Pointer(&v.GValue))

	_cret = C.g_value_get_flags(_arg0)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// Float clears the current value in @value (if any) and "unsets" the type, this
// releases all resources associated with this GValue. An unset value is the
// same as an uninitialized (zero-filled) #GValue structure.
func (v *Value) Float() float32 {
	var _arg0 *C.GValue // out
	var _cret C.gfloat  // in

	_arg0 = (*C.GValue)(unsafe.Pointer(&v.GValue))

	_cret = C.g_value_get_float(_arg0)

	var _gfloat float32 // out

	_gfloat = float32(_cret)

	return _gfloat
}

// GType clears the current value in @value (if any) and "unsets" the type, this
// releases all resources associated with this GValue. An unset value is the
// same as an uninitialized (zero-filled) #GValue structure.
func (v *Value) GType() externglib.Type {
	var _arg0 *C.GValue // out
	var _cret C.GType   // in

	_arg0 = (*C.GValue)(unsafe.Pointer(&v.GValue))

	_cret = C.g_value_get_gtype(_arg0)

	var _gType externglib.Type // out

	_gType = externglib.Type(_cret)

	return _gType
}

// Int clears the current value in @value (if any) and "unsets" the type, this
// releases all resources associated with this GValue. An unset value is the
// same as an uninitialized (zero-filled) #GValue structure.
func (v *Value) Int() int {
	var _arg0 *C.GValue // out
	var _cret C.gint    // in

	_arg0 = (*C.GValue)(unsafe.Pointer(&v.GValue))

	_cret = C.g_value_get_int(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// Int64 clears the current value in @value (if any) and "unsets" the type, this
// releases all resources associated with this GValue. An unset value is the
// same as an uninitialized (zero-filled) #GValue structure.
func (v *Value) Int64() int64 {
	var _arg0 *C.GValue // out
	var _cret C.gint64  // in

	_arg0 = (*C.GValue)(unsafe.Pointer(&v.GValue))

	_cret = C.g_value_get_int64(_arg0)

	var _gint64 int64 // out

	_gint64 = int64(_cret)

	return _gint64
}

// Long clears the current value in @value (if any) and "unsets" the type, this
// releases all resources associated with this GValue. An unset value is the
// same as an uninitialized (zero-filled) #GValue structure.
func (v *Value) Long() int32 {
	var _arg0 *C.GValue // out
	var _cret C.glong   // in

	_arg0 = (*C.GValue)(unsafe.Pointer(&v.GValue))

	_cret = C.g_value_get_long(_arg0)

	var _glong int32 // out

	_glong = int32(_cret)

	return _glong
}

// Object clears the current value in @value (if any) and "unsets" the type,
// this releases all resources associated with this GValue. An unset value is
// the same as an uninitialized (zero-filled) #GValue structure.
func (v *Value) Object() gextras.Objector {
	var _arg0 *C.GValue  // out
	var _cret C.gpointer // in

	_arg0 = (*C.GValue)(unsafe.Pointer(&v.GValue))

	_cret = C.g_value_get_object(_arg0)

	var _object gextras.Objector // out

	_object = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(gextras.Objector)

	return _object
}

// Param clears the current value in @value (if any) and "unsets" the type, this
// releases all resources associated with this GValue. An unset value is the
// same as an uninitialized (zero-filled) #GValue structure.
func (v *Value) Param() ParamSpec {
	var _arg0 *C.GValue     // out
	var _cret *C.GParamSpec // in

	_arg0 = (*C.GValue)(unsafe.Pointer(&v.GValue))

	_cret = C.g_value_get_param(_arg0)

	var _paramSpec ParamSpec // out

	_paramSpec = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(ParamSpec)

	return _paramSpec
}

// Pointer clears the current value in @value (if any) and "unsets" the type,
// this releases all resources associated with this GValue. An unset value is
// the same as an uninitialized (zero-filled) #GValue structure.
func (v *Value) Pointer() interface{} {
	var _arg0 *C.GValue  // out
	var _cret C.gpointer // in

	_arg0 = (*C.GValue)(unsafe.Pointer(&v.GValue))

	_cret = C.g_value_get_pointer(_arg0)

	var _gpointer interface{} // out

	_gpointer = box.Get(uintptr(_cret))

	return _gpointer
}

// Schar clears the current value in @value (if any) and "unsets" the type, this
// releases all resources associated with this GValue. An unset value is the
// same as an uninitialized (zero-filled) #GValue structure.
func (v *Value) Schar() int8 {
	var _arg0 *C.GValue // out
	var _cret C.gint8   // in

	_arg0 = (*C.GValue)(unsafe.Pointer(&v.GValue))

	_cret = C.g_value_get_schar(_arg0)

	var _gint8 int8 // out

	_gint8 = int8(_cret)

	return _gint8
}

// String clears the current value in @value (if any) and "unsets" the type,
// this releases all resources associated with this GValue. An unset value is
// the same as an uninitialized (zero-filled) #GValue structure.
func (v *Value) String() string {
	var _arg0 *C.GValue // out
	var _cret *C.gchar  // in

	_arg0 = (*C.GValue)(unsafe.Pointer(&v.GValue))

	_cret = C.g_value_get_string(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

// Uchar clears the current value in @value (if any) and "unsets" the type, this
// releases all resources associated with this GValue. An unset value is the
// same as an uninitialized (zero-filled) #GValue structure.
func (v *Value) Uchar() byte {
	var _arg0 *C.GValue // out
	var _cret C.guchar  // in

	_arg0 = (*C.GValue)(unsafe.Pointer(&v.GValue))

	_cret = C.g_value_get_uchar(_arg0)

	var _guint8 byte // out

	_guint8 = byte(_cret)

	return _guint8
}

// Uint clears the current value in @value (if any) and "unsets" the type, this
// releases all resources associated with this GValue. An unset value is the
// same as an uninitialized (zero-filled) #GValue structure.
func (v *Value) Uint() uint {
	var _arg0 *C.GValue // out
	var _cret C.guint   // in

	_arg0 = (*C.GValue)(unsafe.Pointer(&v.GValue))

	_cret = C.g_value_get_uint(_arg0)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// Uint64 clears the current value in @value (if any) and "unsets" the type,
// this releases all resources associated with this GValue. An unset value is
// the same as an uninitialized (zero-filled) #GValue structure.
func (v *Value) Uint64() uint64 {
	var _arg0 *C.GValue // out
	var _cret C.guint64 // in

	_arg0 = (*C.GValue)(unsafe.Pointer(&v.GValue))

	_cret = C.g_value_get_uint64(_arg0)

	var _guint64 uint64 // out

	_guint64 = uint64(_cret)

	return _guint64
}

// Ulong clears the current value in @value (if any) and "unsets" the type, this
// releases all resources associated with this GValue. An unset value is the
// same as an uninitialized (zero-filled) #GValue structure.
func (v *Value) Ulong() uint32 {
	var _arg0 *C.GValue // out
	var _cret C.gulong  // in

	_arg0 = (*C.GValue)(unsafe.Pointer(&v.GValue))

	_cret = C.g_value_get_ulong(_arg0)

	var _gulong uint32 // out

	_gulong = uint32(_cret)

	return _gulong
}

// Variant clears the current value in @value (if any) and "unsets" the type,
// this releases all resources associated with this GValue. An unset value is
// the same as an uninitialized (zero-filled) #GValue structure.
func (v *Value) Variant() *glib.Variant {
	var _arg0 *C.GValue   // out
	var _cret *C.GVariant // in

	_arg0 = (*C.GValue)(unsafe.Pointer(&v.GValue))

	_cret = C.g_value_get_variant(_arg0)

	var _variant *glib.Variant // out

	_variant = (*glib.Variant)(unsafe.Pointer(_cret))

	return _variant
}

// Init clears the current value in @value (if any) and "unsets" the type, this
// releases all resources associated with this GValue. An unset value is the
// same as an uninitialized (zero-filled) #GValue structure.
func (v *Value) Init(gType externglib.Type) externglib.Value {
	var _arg0 *C.GValue // out
	var _arg1 C.GType   // out
	var _cret *C.GValue // in

	_arg0 = (*C.GValue)(unsafe.Pointer(&v.GValue))
	_arg1 = (C.GType)(gType)

	_cret = C.g_value_init(_arg0, _arg1)

	var _ret externglib.Value // out

	_ret = externglib.ValueFromNative(unsafe.Pointer(_cret))

	return _ret
}

// InitFromInstance clears the current value in @value (if any) and "unsets" the
// type, this releases all resources associated with this GValue. An unset value
// is the same as an uninitialized (zero-filled) #GValue structure.
func (v *Value) InitFromInstance(instance TypeInstance) {
	var _arg0 *C.GValue  // out
	var _arg1 C.gpointer // out

	_arg0 = (*C.GValue)(unsafe.Pointer(&v.GValue))
	_arg1 = (C.gpointer)(unsafe.Pointer(instance.Native()))

	C.g_value_init_from_instance(_arg0, _arg1)
}

// PeekPointer clears the current value in @value (if any) and "unsets" the
// type, this releases all resources associated with this GValue. An unset value
// is the same as an uninitialized (zero-filled) #GValue structure.
func (v *Value) PeekPointer() interface{} {
	var _arg0 *C.GValue  // out
	var _cret C.gpointer // in

	_arg0 = (*C.GValue)(unsafe.Pointer(&v.GValue))

	_cret = C.g_value_peek_pointer(_arg0)

	var _gpointer interface{} // out

	_gpointer = box.Get(uintptr(_cret))

	return _gpointer
}

// Reset clears the current value in @value (if any) and "unsets" the type, this
// releases all resources associated with this GValue. An unset value is the
// same as an uninitialized (zero-filled) #GValue structure.
func (v *Value) Reset() externglib.Value {
	var _arg0 *C.GValue // out
	var _cret *C.GValue // in

	_arg0 = (*C.GValue)(unsafe.Pointer(&v.GValue))

	_cret = C.g_value_reset(_arg0)

	var _ret externglib.Value // out

	_ret = externglib.ValueFromNative(unsafe.Pointer(_cret))
	runtime.SetFinalizer(_ret, func(v *externglib.Value) {
		C.g_value_unset((*C.GValue)(v.GValue))
	})

	return _ret
}

// SetBoolean clears the current value in @value (if any) and "unsets" the type,
// this releases all resources associated with this GValue. An unset value is
// the same as an uninitialized (zero-filled) #GValue structure.
func (v *Value) SetBoolean(vBoolean bool) {
	var _arg0 *C.GValue  // out
	var _arg1 C.gboolean // out

	_arg0 = (*C.GValue)(unsafe.Pointer(&v.GValue))
	if vBoolean {
		_arg1 = C.TRUE
	}

	C.g_value_set_boolean(_arg0, _arg1)
}

// SetBoxed clears the current value in @value (if any) and "unsets" the type,
// this releases all resources associated with this GValue. An unset value is
// the same as an uninitialized (zero-filled) #GValue structure.
func (v *Value) SetBoxed(vBoxed interface{}) {
	var _arg0 *C.GValue       // out
	var _arg1 C.gconstpointer // out

	_arg0 = (*C.GValue)(unsafe.Pointer(&v.GValue))
	_arg1 = C.gconstpointer(box.Assign(unsafe.Pointer(vBoxed)))

	C.g_value_set_boxed(_arg0, _arg1)
}

// SetBoxedTakeOwnership clears the current value in @value (if any) and
// "unsets" the type, this releases all resources associated with this GValue.
// An unset value is the same as an uninitialized (zero-filled) #GValue
// structure.
func (v *Value) SetBoxedTakeOwnership(vBoxed interface{}) {
	var _arg0 *C.GValue       // out
	var _arg1 C.gconstpointer // out

	_arg0 = (*C.GValue)(unsafe.Pointer(&v.GValue))
	_arg1 = C.gconstpointer(box.Assign(unsafe.Pointer(vBoxed)))

	C.g_value_set_boxed_take_ownership(_arg0, _arg1)
}

// SetChar clears the current value in @value (if any) and "unsets" the type,
// this releases all resources associated with this GValue. An unset value is
// the same as an uninitialized (zero-filled) #GValue structure.
func (v *Value) SetChar(vChar byte) {
	var _arg0 *C.GValue // out
	var _arg1 C.gchar   // out

	_arg0 = (*C.GValue)(unsafe.Pointer(&v.GValue))
	_arg1 = C.gchar(vChar)

	C.g_value_set_char(_arg0, _arg1)
}

// SetDouble clears the current value in @value (if any) and "unsets" the type,
// this releases all resources associated with this GValue. An unset value is
// the same as an uninitialized (zero-filled) #GValue structure.
func (v *Value) SetDouble(vDouble float64) {
	var _arg0 *C.GValue // out
	var _arg1 C.gdouble // out

	_arg0 = (*C.GValue)(unsafe.Pointer(&v.GValue))
	_arg1 = C.gdouble(vDouble)

	C.g_value_set_double(_arg0, _arg1)
}

// SetEnum clears the current value in @value (if any) and "unsets" the type,
// this releases all resources associated with this GValue. An unset value is
// the same as an uninitialized (zero-filled) #GValue structure.
func (v *Value) SetEnum(vEnum int) {
	var _arg0 *C.GValue // out
	var _arg1 C.gint    // out

	_arg0 = (*C.GValue)(unsafe.Pointer(&v.GValue))
	_arg1 = C.gint(vEnum)

	C.g_value_set_enum(_arg0, _arg1)
}

// SetFlags clears the current value in @value (if any) and "unsets" the type,
// this releases all resources associated with this GValue. An unset value is
// the same as an uninitialized (zero-filled) #GValue structure.
func (v *Value) SetFlags(vFlags uint) {
	var _arg0 *C.GValue // out
	var _arg1 C.guint   // out

	_arg0 = (*C.GValue)(unsafe.Pointer(&v.GValue))
	_arg1 = C.guint(vFlags)

	C.g_value_set_flags(_arg0, _arg1)
}

// SetFloat clears the current value in @value (if any) and "unsets" the type,
// this releases all resources associated with this GValue. An unset value is
// the same as an uninitialized (zero-filled) #GValue structure.
func (v *Value) SetFloat(vFloat float32) {
	var _arg0 *C.GValue // out
	var _arg1 C.gfloat  // out

	_arg0 = (*C.GValue)(unsafe.Pointer(&v.GValue))
	_arg1 = C.gfloat(vFloat)

	C.g_value_set_float(_arg0, _arg1)
}

// SetGType clears the current value in @value (if any) and "unsets" the type,
// this releases all resources associated with this GValue. An unset value is
// the same as an uninitialized (zero-filled) #GValue structure.
func (v *Value) SetGType(vGtype externglib.Type) {
	var _arg0 *C.GValue // out
	var _arg1 C.GType   // out

	_arg0 = (*C.GValue)(unsafe.Pointer(&v.GValue))
	_arg1 = (C.GType)(vGtype)

	C.g_value_set_gtype(_arg0, _arg1)
}

// SetInstance clears the current value in @value (if any) and "unsets" the
// type, this releases all resources associated with this GValue. An unset value
// is the same as an uninitialized (zero-filled) #GValue structure.
func (v *Value) SetInstance(instance interface{}) {
	var _arg0 *C.GValue  // out
	var _arg1 C.gpointer // out

	_arg0 = (*C.GValue)(unsafe.Pointer(&v.GValue))
	_arg1 = C.gpointer(box.Assign(unsafe.Pointer(instance)))

	C.g_value_set_instance(_arg0, _arg1)
}

// SetInt clears the current value in @value (if any) and "unsets" the type,
// this releases all resources associated with this GValue. An unset value is
// the same as an uninitialized (zero-filled) #GValue structure.
func (v *Value) SetInt(vInt int) {
	var _arg0 *C.GValue // out
	var _arg1 C.gint    // out

	_arg0 = (*C.GValue)(unsafe.Pointer(&v.GValue))
	_arg1 = C.gint(vInt)

	C.g_value_set_int(_arg0, _arg1)
}

// SetInt64 clears the current value in @value (if any) and "unsets" the type,
// this releases all resources associated with this GValue. An unset value is
// the same as an uninitialized (zero-filled) #GValue structure.
func (v *Value) SetInt64(vInt64 int64) {
	var _arg0 *C.GValue // out
	var _arg1 C.gint64  // out

	_arg0 = (*C.GValue)(unsafe.Pointer(&v.GValue))
	_arg1 = C.gint64(vInt64)

	C.g_value_set_int64(_arg0, _arg1)
}

// SetInternedString clears the current value in @value (if any) and "unsets"
// the type, this releases all resources associated with this GValue. An unset
// value is the same as an uninitialized (zero-filled) #GValue structure.
func (v *Value) SetInternedString(vString string) {
	var _arg0 *C.GValue // out
	var _arg1 *C.gchar  // out

	_arg0 = (*C.GValue)(unsafe.Pointer(&v.GValue))
	_arg1 = (*C.gchar)(C.CString(vString))
	defer C.free(unsafe.Pointer(_arg1))

	C.g_value_set_interned_string(_arg0, _arg1)
}

// SetLong clears the current value in @value (if any) and "unsets" the type,
// this releases all resources associated with this GValue. An unset value is
// the same as an uninitialized (zero-filled) #GValue structure.
func (v *Value) SetLong(vLong int32) {
	var _arg0 *C.GValue // out
	var _arg1 C.glong   // out

	_arg0 = (*C.GValue)(unsafe.Pointer(&v.GValue))
	_arg1 = C.glong(vLong)

	C.g_value_set_long(_arg0, _arg1)
}

// SetObject clears the current value in @value (if any) and "unsets" the type,
// this releases all resources associated with this GValue. An unset value is
// the same as an uninitialized (zero-filled) #GValue structure.
func (v *Value) SetObject(vObject gextras.Objector) {
	var _arg0 *C.GValue  // out
	var _arg1 C.gpointer // out

	_arg0 = (*C.GValue)(unsafe.Pointer(&v.GValue))
	_arg1 = (C.gpointer)(unsafe.Pointer(vObject.Native()))

	C.g_value_set_object(_arg0, _arg1)
}

// SetParam clears the current value in @value (if any) and "unsets" the type,
// this releases all resources associated with this GValue. An unset value is
// the same as an uninitialized (zero-filled) #GValue structure.
func (v *Value) SetParam(param ParamSpec) {
	var _arg0 *C.GValue     // out
	var _arg1 *C.GParamSpec // out

	_arg0 = (*C.GValue)(unsafe.Pointer(&v.GValue))
	_arg1 = (*C.GParamSpec)(unsafe.Pointer(param.Native()))

	C.g_value_set_param(_arg0, _arg1)
}

// SetPointer clears the current value in @value (if any) and "unsets" the type,
// this releases all resources associated with this GValue. An unset value is
// the same as an uninitialized (zero-filled) #GValue structure.
func (v *Value) SetPointer(vPointer interface{}) {
	var _arg0 *C.GValue  // out
	var _arg1 C.gpointer // out

	_arg0 = (*C.GValue)(unsafe.Pointer(&v.GValue))
	_arg1 = C.gpointer(box.Assign(unsafe.Pointer(vPointer)))

	C.g_value_set_pointer(_arg0, _arg1)
}

// SetSchar clears the current value in @value (if any) and "unsets" the type,
// this releases all resources associated with this GValue. An unset value is
// the same as an uninitialized (zero-filled) #GValue structure.
func (v *Value) SetSchar(vChar int8) {
	var _arg0 *C.GValue // out
	var _arg1 C.gint8   // out

	_arg0 = (*C.GValue)(unsafe.Pointer(&v.GValue))
	_arg1 = C.gint8(vChar)

	C.g_value_set_schar(_arg0, _arg1)
}

// SetStaticBoxed clears the current value in @value (if any) and "unsets" the
// type, this releases all resources associated with this GValue. An unset value
// is the same as an uninitialized (zero-filled) #GValue structure.
func (v *Value) SetStaticBoxed(vBoxed interface{}) {
	var _arg0 *C.GValue       // out
	var _arg1 C.gconstpointer // out

	_arg0 = (*C.GValue)(unsafe.Pointer(&v.GValue))
	_arg1 = C.gconstpointer(box.Assign(unsafe.Pointer(vBoxed)))

	C.g_value_set_static_boxed(_arg0, _arg1)
}

// SetStaticString clears the current value in @value (if any) and "unsets" the
// type, this releases all resources associated with this GValue. An unset value
// is the same as an uninitialized (zero-filled) #GValue structure.
func (v *Value) SetStaticString(vString string) {
	var _arg0 *C.GValue // out
	var _arg1 *C.gchar  // out

	_arg0 = (*C.GValue)(unsafe.Pointer(&v.GValue))
	_arg1 = (*C.gchar)(C.CString(vString))
	defer C.free(unsafe.Pointer(_arg1))

	C.g_value_set_static_string(_arg0, _arg1)
}

// SetString clears the current value in @value (if any) and "unsets" the type,
// this releases all resources associated with this GValue. An unset value is
// the same as an uninitialized (zero-filled) #GValue structure.
func (v *Value) SetString(vString string) {
	var _arg0 *C.GValue // out
	var _arg1 *C.gchar  // out

	_arg0 = (*C.GValue)(unsafe.Pointer(&v.GValue))
	_arg1 = (*C.gchar)(C.CString(vString))
	defer C.free(unsafe.Pointer(_arg1))

	C.g_value_set_string(_arg0, _arg1)
}

// SetStringTakeOwnership clears the current value in @value (if any) and
// "unsets" the type, this releases all resources associated with this GValue.
// An unset value is the same as an uninitialized (zero-filled) #GValue
// structure.
func (v *Value) SetStringTakeOwnership(vString string) {
	var _arg0 *C.GValue // out
	var _arg1 *C.gchar  // out

	_arg0 = (*C.GValue)(unsafe.Pointer(&v.GValue))
	_arg1 = (*C.gchar)(C.CString(vString))
	defer C.free(unsafe.Pointer(_arg1))

	C.g_value_set_string_take_ownership(_arg0, _arg1)
}

// SetUchar clears the current value in @value (if any) and "unsets" the type,
// this releases all resources associated with this GValue. An unset value is
// the same as an uninitialized (zero-filled) #GValue structure.
func (v *Value) SetUchar(vUchar byte) {
	var _arg0 *C.GValue // out
	var _arg1 C.guchar  // out

	_arg0 = (*C.GValue)(unsafe.Pointer(&v.GValue))
	_arg1 = C.guchar(vUchar)

	C.g_value_set_uchar(_arg0, _arg1)
}

// SetUint clears the current value in @value (if any) and "unsets" the type,
// this releases all resources associated with this GValue. An unset value is
// the same as an uninitialized (zero-filled) #GValue structure.
func (v *Value) SetUint(vUint uint) {
	var _arg0 *C.GValue // out
	var _arg1 C.guint   // out

	_arg0 = (*C.GValue)(unsafe.Pointer(&v.GValue))
	_arg1 = C.guint(vUint)

	C.g_value_set_uint(_arg0, _arg1)
}

// SetUint64 clears the current value in @value (if any) and "unsets" the type,
// this releases all resources associated with this GValue. An unset value is
// the same as an uninitialized (zero-filled) #GValue structure.
func (v *Value) SetUint64(vUint64 uint64) {
	var _arg0 *C.GValue // out
	var _arg1 C.guint64 // out

	_arg0 = (*C.GValue)(unsafe.Pointer(&v.GValue))
	_arg1 = C.guint64(vUint64)

	C.g_value_set_uint64(_arg0, _arg1)
}

// SetUlong clears the current value in @value (if any) and "unsets" the type,
// this releases all resources associated with this GValue. An unset value is
// the same as an uninitialized (zero-filled) #GValue structure.
func (v *Value) SetUlong(vUlong uint32) {
	var _arg0 *C.GValue // out
	var _arg1 C.gulong  // out

	_arg0 = (*C.GValue)(unsafe.Pointer(&v.GValue))
	_arg1 = C.gulong(vUlong)

	C.g_value_set_ulong(_arg0, _arg1)
}

// SetVariant clears the current value in @value (if any) and "unsets" the type,
// this releases all resources associated with this GValue. An unset value is
// the same as an uninitialized (zero-filled) #GValue structure.
func (v *Value) SetVariant(variant *glib.Variant) {
	var _arg0 *C.GValue   // out
	var _arg1 *C.GVariant // out

	_arg0 = (*C.GValue)(unsafe.Pointer(&v.GValue))
	_arg1 = (*C.GVariant)(unsafe.Pointer(variant.Native()))

	C.g_value_set_variant(_arg0, _arg1)
}

// TakeBoxed clears the current value in @value (if any) and "unsets" the type,
// this releases all resources associated with this GValue. An unset value is
// the same as an uninitialized (zero-filled) #GValue structure.
func (v *Value) TakeBoxed(vBoxed interface{}) {
	var _arg0 *C.GValue       // out
	var _arg1 C.gconstpointer // out

	_arg0 = (*C.GValue)(unsafe.Pointer(&v.GValue))
	_arg1 = C.gconstpointer(box.Assign(unsafe.Pointer(vBoxed)))

	C.g_value_take_boxed(_arg0, _arg1)
}

// TakeString clears the current value in @value (if any) and "unsets" the type,
// this releases all resources associated with this GValue. An unset value is
// the same as an uninitialized (zero-filled) #GValue structure.
func (v *Value) TakeString(vString string) {
	var _arg0 *C.GValue // out
	var _arg1 *C.gchar  // out

	_arg0 = (*C.GValue)(unsafe.Pointer(&v.GValue))
	_arg1 = (*C.gchar)(C.CString(vString))
	defer C.free(unsafe.Pointer(_arg1))

	C.g_value_take_string(_arg0, _arg1)
}

// TakeVariant clears the current value in @value (if any) and "unsets" the
// type, this releases all resources associated with this GValue. An unset value
// is the same as an uninitialized (zero-filled) #GValue structure.
func (v *Value) TakeVariant(variant *glib.Variant) {
	var _arg0 *C.GValue   // out
	var _arg1 *C.GVariant // out

	_arg0 = (*C.GValue)(unsafe.Pointer(&v.GValue))
	_arg1 = (*C.GVariant)(unsafe.Pointer(variant.Native()))

	C.g_value_take_variant(_arg0, _arg1)
}

// Transform clears the current value in @value (if any) and "unsets" the type,
// this releases all resources associated with this GValue. An unset value is
// the same as an uninitialized (zero-filled) #GValue structure.
func (v *Value) Transform(destValue externglib.Value) bool {
	var _arg0 *C.GValue  // out
	var _arg1 *C.GValue  // out
	var _cret C.gboolean // in

	_arg0 = (*C.GValue)(unsafe.Pointer(&s.GValue))
	_arg1 = (*C.GValue)(unsafe.Pointer(&destValue.GValue))

	_cret = C.g_value_transform(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Unset clears the current value in @value (if any) and "unsets" the type, this
// releases all resources associated with this GValue. An unset value is the
// same as an uninitialized (zero-filled) #GValue structure.
func (v *Value) Unset() {
	var _arg0 *C.GValue // out

	_arg0 = (*C.GValue)(unsafe.Pointer(&v.GValue))

	C.g_value_unset(_arg0)
}
