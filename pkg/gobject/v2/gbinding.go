// Code generated by girgen. DO NOT EDIT.

package gobject

import (
	"github.com/diamondburned/gotk4/internal/box"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gobject-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
import "C"

// BindingTransformFunc: a function to be called to transform @from_value to
// @to_value. If this is the @transform_to function of a binding, then
// @from_value is the @source_property on the @source object, and @to_value is
// the @target_property on the @target object. If this is the @transform_from
// function of a G_BINDING_BIDIRECTIONAL binding, then those roles are reversed.
type BindingTransformFunc func(binding Binding, fromValue *externglib.Value, toValue *externglib.Value) bool

//export gotk4_BindingTransformFunc
func gotk4_BindingTransformFunc(arg0 *C.GBinding, arg1 *C.GValue, arg2 *C.GValue, arg3 C.gpointer) C.gboolean {
	v := box.Get(uintptr(arg3))
	if v == nil {
		panic(`callback not found`)
	}

	fn := v.(BindingTransformFunc)
	ret := fn(binding, fromValue, toValue, userData)

	if ret {
		cret = C.gboolean(1)
	}

	return cret
}
