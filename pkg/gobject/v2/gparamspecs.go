// Code generated by girgen. DO NOT EDIT.

package gobject

import (
	"unsafe"

	"github.com/diamondburned/gotk4/core/gextras"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gobject-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <glib-object.h>
import "C"

// ParamSpecBoolean creates a new SpecBoolean instance specifying a
// G_TYPE_BOOLEAN property. In many cases, it may be more appropriate to use an
// enum with g_param_spec_enum(), both to improve code clarity by using
// explicitly named values, and to allow for more values to be added in future
// without breaking API.
//
// See g_param_spec_internal() for details on property names.
func ParamSpecBoolean(name string, nick string, blurb string, defaultValue bool, flags ParamFlags) ParamSpec {
	var _arg1 *C.gchar      // out
	var _arg2 *C.gchar      // out
	var _arg3 *C.gchar      // out
	var _arg4 C.gboolean    // out
	var _arg5 C.GParamFlags // out
	var _cret *C.GParamSpec // in

	_arg1 = (*C.gchar)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(nick))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = (*C.gchar)(C.CString(blurb))
	defer C.free(unsafe.Pointer(_arg3))
	if defaultValue {
		_arg4 = C.TRUE
	}
	_arg5 = C.GParamFlags(flags)

	_cret = C.g_param_spec_boolean(_arg1, _arg2, _arg3, _arg4, _arg5)

	var _paramSpec ParamSpec // out

	_paramSpec = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(ParamSpec)

	return _paramSpec
}

// ParamSpecBoxed creates a new SpecBoxed instance specifying a G_TYPE_BOXED
// derived property.
//
// See g_param_spec_internal() for details on property names.
func ParamSpecBoxed(name string, nick string, blurb string, boxedType externglib.Type, flags ParamFlags) ParamSpec {
	var _arg1 *C.gchar      // out
	var _arg2 *C.gchar      // out
	var _arg3 *C.gchar      // out
	var _arg4 C.GType       // out
	var _arg5 C.GParamFlags // out
	var _cret *C.GParamSpec // in

	_arg1 = (*C.gchar)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(nick))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = (*C.gchar)(C.CString(blurb))
	defer C.free(unsafe.Pointer(_arg3))
	_arg4 = (C.GType)(boxedType)
	_arg5 = C.GParamFlags(flags)

	_cret = C.g_param_spec_boxed(_arg1, _arg2, _arg3, _arg4, _arg5)

	var _paramSpec ParamSpec // out

	_paramSpec = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(ParamSpec)

	return _paramSpec
}

// ParamSpecChar creates a new SpecChar instance specifying a G_TYPE_CHAR
// property.
func ParamSpecChar(name string, nick string, blurb string, minimum int8, maximum int8, defaultValue int8, flags ParamFlags) ParamSpec {
	var _arg1 *C.gchar      // out
	var _arg2 *C.gchar      // out
	var _arg3 *C.gchar      // out
	var _arg4 C.gint8       // out
	var _arg5 C.gint8       // out
	var _arg6 C.gint8       // out
	var _arg7 C.GParamFlags // out
	var _cret *C.GParamSpec // in

	_arg1 = (*C.gchar)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(nick))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = (*C.gchar)(C.CString(blurb))
	defer C.free(unsafe.Pointer(_arg3))
	_arg4 = C.gint8(minimum)
	_arg5 = C.gint8(maximum)
	_arg6 = C.gint8(defaultValue)
	_arg7 = C.GParamFlags(flags)

	_cret = C.g_param_spec_char(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7)

	var _paramSpec ParamSpec // out

	_paramSpec = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(ParamSpec)

	return _paramSpec
}

// ParamSpecDouble creates a new SpecDouble instance specifying a G_TYPE_DOUBLE
// property.
//
// See g_param_spec_internal() for details on property names.
func ParamSpecDouble(name string, nick string, blurb string, minimum float64, maximum float64, defaultValue float64, flags ParamFlags) ParamSpec {
	var _arg1 *C.gchar      // out
	var _arg2 *C.gchar      // out
	var _arg3 *C.gchar      // out
	var _arg4 C.gdouble     // out
	var _arg5 C.gdouble     // out
	var _arg6 C.gdouble     // out
	var _arg7 C.GParamFlags // out
	var _cret *C.GParamSpec // in

	_arg1 = (*C.gchar)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(nick))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = (*C.gchar)(C.CString(blurb))
	defer C.free(unsafe.Pointer(_arg3))
	_arg4 = C.gdouble(minimum)
	_arg5 = C.gdouble(maximum)
	_arg6 = C.gdouble(defaultValue)
	_arg7 = C.GParamFlags(flags)

	_cret = C.g_param_spec_double(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7)

	var _paramSpec ParamSpec // out

	_paramSpec = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(ParamSpec)

	return _paramSpec
}

// ParamSpecEnum creates a new SpecEnum instance specifying a G_TYPE_ENUM
// property.
//
// See g_param_spec_internal() for details on property names.
func ParamSpecEnum(name string, nick string, blurb string, enumType externglib.Type, defaultValue int, flags ParamFlags) ParamSpec {
	var _arg1 *C.gchar      // out
	var _arg2 *C.gchar      // out
	var _arg3 *C.gchar      // out
	var _arg4 C.GType       // out
	var _arg5 C.gint        // out
	var _arg6 C.GParamFlags // out
	var _cret *C.GParamSpec // in

	_arg1 = (*C.gchar)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(nick))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = (*C.gchar)(C.CString(blurb))
	defer C.free(unsafe.Pointer(_arg3))
	_arg4 = (C.GType)(enumType)
	_arg5 = C.gint(defaultValue)
	_arg6 = C.GParamFlags(flags)

	_cret = C.g_param_spec_enum(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6)

	var _paramSpec ParamSpec // out

	_paramSpec = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(ParamSpec)

	return _paramSpec
}

// ParamSpecFlags creates a new SpecFlags instance specifying a G_TYPE_FLAGS
// property.
//
// See g_param_spec_internal() for details on property names.
func ParamSpecFlags(name string, nick string, blurb string, flagsType externglib.Type, defaultValue uint, flags ParamFlags) ParamSpec {
	var _arg1 *C.gchar      // out
	var _arg2 *C.gchar      // out
	var _arg3 *C.gchar      // out
	var _arg4 C.GType       // out
	var _arg5 C.guint       // out
	var _arg6 C.GParamFlags // out
	var _cret *C.GParamSpec // in

	_arg1 = (*C.gchar)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(nick))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = (*C.gchar)(C.CString(blurb))
	defer C.free(unsafe.Pointer(_arg3))
	_arg4 = (C.GType)(flagsType)
	_arg5 = C.guint(defaultValue)
	_arg6 = C.GParamFlags(flags)

	_cret = C.g_param_spec_flags(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6)

	var _paramSpec ParamSpec // out

	_paramSpec = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(ParamSpec)

	return _paramSpec
}

// ParamSpecFloat creates a new SpecFloat instance specifying a G_TYPE_FLOAT
// property.
//
// See g_param_spec_internal() for details on property names.
func ParamSpecFloat(name string, nick string, blurb string, minimum float32, maximum float32, defaultValue float32, flags ParamFlags) ParamSpec {
	var _arg1 *C.gchar      // out
	var _arg2 *C.gchar      // out
	var _arg3 *C.gchar      // out
	var _arg4 C.gfloat      // out
	var _arg5 C.gfloat      // out
	var _arg6 C.gfloat      // out
	var _arg7 C.GParamFlags // out
	var _cret *C.GParamSpec // in

	_arg1 = (*C.gchar)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(nick))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = (*C.gchar)(C.CString(blurb))
	defer C.free(unsafe.Pointer(_arg3))
	_arg4 = C.gfloat(minimum)
	_arg5 = C.gfloat(maximum)
	_arg6 = C.gfloat(defaultValue)
	_arg7 = C.GParamFlags(flags)

	_cret = C.g_param_spec_float(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7)

	var _paramSpec ParamSpec // out

	_paramSpec = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(ParamSpec)

	return _paramSpec
}

// ParamSpecGType creates a new SpecGType instance specifying a G_TYPE_GTYPE
// property.
//
// See g_param_spec_internal() for details on property names.
func ParamSpecGType(name string, nick string, blurb string, isAType externglib.Type, flags ParamFlags) ParamSpec {
	var _arg1 *C.gchar      // out
	var _arg2 *C.gchar      // out
	var _arg3 *C.gchar      // out
	var _arg4 C.GType       // out
	var _arg5 C.GParamFlags // out
	var _cret *C.GParamSpec // in

	_arg1 = (*C.gchar)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(nick))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = (*C.gchar)(C.CString(blurb))
	defer C.free(unsafe.Pointer(_arg3))
	_arg4 = (C.GType)(isAType)
	_arg5 = C.GParamFlags(flags)

	_cret = C.g_param_spec_gtype(_arg1, _arg2, _arg3, _arg4, _arg5)

	var _paramSpec ParamSpec // out

	_paramSpec = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(ParamSpec)

	return _paramSpec
}

// ParamSpecInt creates a new SpecInt instance specifying a G_TYPE_INT property.
//
// See g_param_spec_internal() for details on property names.
func ParamSpecInt(name string, nick string, blurb string, minimum int, maximum int, defaultValue int, flags ParamFlags) ParamSpec {
	var _arg1 *C.gchar      // out
	var _arg2 *C.gchar      // out
	var _arg3 *C.gchar      // out
	var _arg4 C.gint        // out
	var _arg5 C.gint        // out
	var _arg6 C.gint        // out
	var _arg7 C.GParamFlags // out
	var _cret *C.GParamSpec // in

	_arg1 = (*C.gchar)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(nick))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = (*C.gchar)(C.CString(blurb))
	defer C.free(unsafe.Pointer(_arg3))
	_arg4 = C.gint(minimum)
	_arg5 = C.gint(maximum)
	_arg6 = C.gint(defaultValue)
	_arg7 = C.GParamFlags(flags)

	_cret = C.g_param_spec_int(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7)

	var _paramSpec ParamSpec // out

	_paramSpec = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(ParamSpec)

	return _paramSpec
}

// ParamSpecInt64 creates a new SpecInt64 instance specifying a G_TYPE_INT64
// property.
//
// See g_param_spec_internal() for details on property names.
func ParamSpecInt64(name string, nick string, blurb string, minimum int64, maximum int64, defaultValue int64, flags ParamFlags) ParamSpec {
	var _arg1 *C.gchar      // out
	var _arg2 *C.gchar      // out
	var _arg3 *C.gchar      // out
	var _arg4 C.gint64      // out
	var _arg5 C.gint64      // out
	var _arg6 C.gint64      // out
	var _arg7 C.GParamFlags // out
	var _cret *C.GParamSpec // in

	_arg1 = (*C.gchar)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(nick))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = (*C.gchar)(C.CString(blurb))
	defer C.free(unsafe.Pointer(_arg3))
	_arg4 = C.gint64(minimum)
	_arg5 = C.gint64(maximum)
	_arg6 = C.gint64(defaultValue)
	_arg7 = C.GParamFlags(flags)

	_cret = C.g_param_spec_int64(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7)

	var _paramSpec ParamSpec // out

	_paramSpec = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(ParamSpec)

	return _paramSpec
}

// ParamSpecLong creates a new SpecLong instance specifying a G_TYPE_LONG
// property.
//
// See g_param_spec_internal() for details on property names.
func ParamSpecLong(name string, nick string, blurb string, minimum int32, maximum int32, defaultValue int32, flags ParamFlags) ParamSpec {
	var _arg1 *C.gchar      // out
	var _arg2 *C.gchar      // out
	var _arg3 *C.gchar      // out
	var _arg4 C.glong       // out
	var _arg5 C.glong       // out
	var _arg6 C.glong       // out
	var _arg7 C.GParamFlags // out
	var _cret *C.GParamSpec // in

	_arg1 = (*C.gchar)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(nick))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = (*C.gchar)(C.CString(blurb))
	defer C.free(unsafe.Pointer(_arg3))
	_arg4 = C.glong(minimum)
	_arg5 = C.glong(maximum)
	_arg6 = C.glong(defaultValue)
	_arg7 = C.GParamFlags(flags)

	_cret = C.g_param_spec_long(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7)

	var _paramSpec ParamSpec // out

	_paramSpec = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(ParamSpec)

	return _paramSpec
}

// ParamSpecObject creates a new SpecBoxed instance specifying a G_TYPE_OBJECT
// derived property.
//
// See g_param_spec_internal() for details on property names.
func ParamSpecObject(name string, nick string, blurb string, objectType externglib.Type, flags ParamFlags) ParamSpec {
	var _arg1 *C.gchar      // out
	var _arg2 *C.gchar      // out
	var _arg3 *C.gchar      // out
	var _arg4 C.GType       // out
	var _arg5 C.GParamFlags // out
	var _cret *C.GParamSpec // in

	_arg1 = (*C.gchar)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(nick))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = (*C.gchar)(C.CString(blurb))
	defer C.free(unsafe.Pointer(_arg3))
	_arg4 = (C.GType)(objectType)
	_arg5 = C.GParamFlags(flags)

	_cret = C.g_param_spec_object(_arg1, _arg2, _arg3, _arg4, _arg5)

	var _paramSpec ParamSpec // out

	_paramSpec = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(ParamSpec)

	return _paramSpec
}

// ParamSpecParam creates a new SpecParam instance specifying a G_TYPE_PARAM
// property.
//
// See g_param_spec_internal() for details on property names.
func ParamSpecParam(name string, nick string, blurb string, paramType externglib.Type, flags ParamFlags) ParamSpec {
	var _arg1 *C.gchar      // out
	var _arg2 *C.gchar      // out
	var _arg3 *C.gchar      // out
	var _arg4 C.GType       // out
	var _arg5 C.GParamFlags // out
	var _cret *C.GParamSpec // in

	_arg1 = (*C.gchar)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(nick))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = (*C.gchar)(C.CString(blurb))
	defer C.free(unsafe.Pointer(_arg3))
	_arg4 = (C.GType)(paramType)
	_arg5 = C.GParamFlags(flags)

	_cret = C.g_param_spec_param(_arg1, _arg2, _arg3, _arg4, _arg5)

	var _paramSpec ParamSpec // out

	_paramSpec = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(ParamSpec)

	return _paramSpec
}

// ParamSpecPointer creates a new SpecPointer instance specifying a pointer
// property. Where possible, it is better to use g_param_spec_object() or
// g_param_spec_boxed() to expose memory management information.
//
// See g_param_spec_internal() for details on property names.
func ParamSpecPointer(name string, nick string, blurb string, flags ParamFlags) ParamSpec {
	var _arg1 *C.gchar      // out
	var _arg2 *C.gchar      // out
	var _arg3 *C.gchar      // out
	var _arg4 C.GParamFlags // out
	var _cret *C.GParamSpec // in

	_arg1 = (*C.gchar)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(nick))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = (*C.gchar)(C.CString(blurb))
	defer C.free(unsafe.Pointer(_arg3))
	_arg4 = C.GParamFlags(flags)

	_cret = C.g_param_spec_pointer(_arg1, _arg2, _arg3, _arg4)

	var _paramSpec ParamSpec // out

	_paramSpec = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(ParamSpec)

	return _paramSpec
}

// ParamSpecString creates a new SpecString instance.
//
// See g_param_spec_internal() for details on property names.
func ParamSpecString(name string, nick string, blurb string, defaultValue string, flags ParamFlags) ParamSpec {
	var _arg1 *C.gchar      // out
	var _arg2 *C.gchar      // out
	var _arg3 *C.gchar      // out
	var _arg4 *C.gchar      // out
	var _arg5 C.GParamFlags // out
	var _cret *C.GParamSpec // in

	_arg1 = (*C.gchar)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(nick))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = (*C.gchar)(C.CString(blurb))
	defer C.free(unsafe.Pointer(_arg3))
	_arg4 = (*C.gchar)(C.CString(defaultValue))
	defer C.free(unsafe.Pointer(_arg4))
	_arg5 = C.GParamFlags(flags)

	_cret = C.g_param_spec_string(_arg1, _arg2, _arg3, _arg4, _arg5)

	var _paramSpec ParamSpec // out

	_paramSpec = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(ParamSpec)

	return _paramSpec
}

// ParamSpecUchar creates a new SpecUChar instance specifying a G_TYPE_UCHAR
// property.
func ParamSpecUchar(name string, nick string, blurb string, minimum byte, maximum byte, defaultValue byte, flags ParamFlags) ParamSpec {
	var _arg1 *C.gchar      // out
	var _arg2 *C.gchar      // out
	var _arg3 *C.gchar      // out
	var _arg4 C.guint8      // out
	var _arg5 C.guint8      // out
	var _arg6 C.guint8      // out
	var _arg7 C.GParamFlags // out
	var _cret *C.GParamSpec // in

	_arg1 = (*C.gchar)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(nick))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = (*C.gchar)(C.CString(blurb))
	defer C.free(unsafe.Pointer(_arg3))
	_arg4 = C.guint8(minimum)
	_arg5 = C.guint8(maximum)
	_arg6 = C.guint8(defaultValue)
	_arg7 = C.GParamFlags(flags)

	_cret = C.g_param_spec_uchar(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7)

	var _paramSpec ParamSpec // out

	_paramSpec = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(ParamSpec)

	return _paramSpec
}

// ParamSpecUint creates a new SpecUInt instance specifying a G_TYPE_UINT
// property.
//
// See g_param_spec_internal() for details on property names.
func ParamSpecUint(name string, nick string, blurb string, minimum uint, maximum uint, defaultValue uint, flags ParamFlags) ParamSpec {
	var _arg1 *C.gchar      // out
	var _arg2 *C.gchar      // out
	var _arg3 *C.gchar      // out
	var _arg4 C.guint       // out
	var _arg5 C.guint       // out
	var _arg6 C.guint       // out
	var _arg7 C.GParamFlags // out
	var _cret *C.GParamSpec // in

	_arg1 = (*C.gchar)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(nick))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = (*C.gchar)(C.CString(blurb))
	defer C.free(unsafe.Pointer(_arg3))
	_arg4 = C.guint(minimum)
	_arg5 = C.guint(maximum)
	_arg6 = C.guint(defaultValue)
	_arg7 = C.GParamFlags(flags)

	_cret = C.g_param_spec_uint(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7)

	var _paramSpec ParamSpec // out

	_paramSpec = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(ParamSpec)

	return _paramSpec
}

// ParamSpecUint64 creates a new SpecUInt64 instance specifying a G_TYPE_UINT64
// property.
//
// See g_param_spec_internal() for details on property names.
func ParamSpecUint64(name string, nick string, blurb string, minimum uint64, maximum uint64, defaultValue uint64, flags ParamFlags) ParamSpec {
	var _arg1 *C.gchar      // out
	var _arg2 *C.gchar      // out
	var _arg3 *C.gchar      // out
	var _arg4 C.guint64     // out
	var _arg5 C.guint64     // out
	var _arg6 C.guint64     // out
	var _arg7 C.GParamFlags // out
	var _cret *C.GParamSpec // in

	_arg1 = (*C.gchar)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(nick))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = (*C.gchar)(C.CString(blurb))
	defer C.free(unsafe.Pointer(_arg3))
	_arg4 = C.guint64(minimum)
	_arg5 = C.guint64(maximum)
	_arg6 = C.guint64(defaultValue)
	_arg7 = C.GParamFlags(flags)

	_cret = C.g_param_spec_uint64(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7)

	var _paramSpec ParamSpec // out

	_paramSpec = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(ParamSpec)

	return _paramSpec
}

// ParamSpecUlong creates a new SpecULong instance specifying a G_TYPE_ULONG
// property.
//
// See g_param_spec_internal() for details on property names.
func ParamSpecUlong(name string, nick string, blurb string, minimum uint32, maximum uint32, defaultValue uint32, flags ParamFlags) ParamSpec {
	var _arg1 *C.gchar      // out
	var _arg2 *C.gchar      // out
	var _arg3 *C.gchar      // out
	var _arg4 C.gulong      // out
	var _arg5 C.gulong      // out
	var _arg6 C.gulong      // out
	var _arg7 C.GParamFlags // out
	var _cret *C.GParamSpec // in

	_arg1 = (*C.gchar)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(nick))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = (*C.gchar)(C.CString(blurb))
	defer C.free(unsafe.Pointer(_arg3))
	_arg4 = C.gulong(minimum)
	_arg5 = C.gulong(maximum)
	_arg6 = C.gulong(defaultValue)
	_arg7 = C.GParamFlags(flags)

	_cret = C.g_param_spec_ulong(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7)

	var _paramSpec ParamSpec // out

	_paramSpec = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(ParamSpec)

	return _paramSpec
}

// ParamSpecUnichar creates a new SpecUnichar instance specifying a G_TYPE_UINT
// property. #GValue structures for this property can be accessed with
// g_value_set_uint() and g_value_get_uint().
//
// See g_param_spec_internal() for details on property names.
func ParamSpecUnichar(name string, nick string, blurb string, defaultValue uint32, flags ParamFlags) ParamSpec {
	var _arg1 *C.gchar      // out
	var _arg2 *C.gchar      // out
	var _arg3 *C.gchar      // out
	var _arg4 C.gunichar    // out
	var _arg5 C.GParamFlags // out
	var _cret *C.GParamSpec // in

	_arg1 = (*C.gchar)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(nick))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = (*C.gchar)(C.CString(blurb))
	defer C.free(unsafe.Pointer(_arg3))
	_arg4 = C.gunichar(defaultValue)
	_arg5 = C.GParamFlags(flags)

	_cret = C.g_param_spec_unichar(_arg1, _arg2, _arg3, _arg4, _arg5)

	var _paramSpec ParamSpec // out

	_paramSpec = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(ParamSpec)

	return _paramSpec
}

// ParamSpecVariant creates a new SpecVariant instance specifying a #GVariant
// property.
//
// If @default_value is floating, it is consumed.
//
// See g_param_spec_internal() for details on property names.
func ParamSpecVariant(name string, nick string, blurb string, typ *glib.VariantType, defaultValue *glib.Variant, flags ParamFlags) ParamSpec {
	var _arg1 *C.gchar        // out
	var _arg2 *C.gchar        // out
	var _arg3 *C.gchar        // out
	var _arg4 *C.GVariantType // out
	var _arg5 *C.GVariant     // out
	var _arg6 C.GParamFlags   // out
	var _cret *C.GParamSpec   // in

	_arg1 = (*C.gchar)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(C.CString(nick))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = (*C.gchar)(C.CString(blurb))
	defer C.free(unsafe.Pointer(_arg3))
	_arg4 = (*C.GVariantType)(unsafe.Pointer(typ.Native()))
	_arg5 = (*C.GVariant)(unsafe.Pointer(defaultValue.Native()))
	_arg6 = C.GParamFlags(flags)

	_cret = C.g_param_spec_variant(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6)

	var _paramSpec ParamSpec // out

	_paramSpec = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(ParamSpec)

	return _paramSpec
}

// ParamSpecBoolean: a Spec derived structure that contains the meta data for
// boolean properties.
type ParamSpecBoolean interface {
	ParamSpec
}

// paramSpecBoolean implements the ParamSpecBoolean class.
type paramSpecBoolean struct {
	ParamSpec
}

// WrapParamSpecBoolean wraps a GObject to the right type. It is
// primarily used internally.
func WrapParamSpecBoolean(obj *externglib.Object) ParamSpecBoolean {
	return paramSpecBoolean{
		ParamSpec: WrapParamSpec(obj),
	}
}

func marshalParamSpecBoolean(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapParamSpecBoolean(obj), nil
}

// ParamSpecBoxed: a Spec derived structure that contains the meta data for
// boxed properties.
type ParamSpecBoxed interface {
	ParamSpec
}

// paramSpecBoxed implements the ParamSpecBoxed class.
type paramSpecBoxed struct {
	ParamSpec
}

// WrapParamSpecBoxed wraps a GObject to the right type. It is
// primarily used internally.
func WrapParamSpecBoxed(obj *externglib.Object) ParamSpecBoxed {
	return paramSpecBoxed{
		ParamSpec: WrapParamSpec(obj),
	}
}

func marshalParamSpecBoxed(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapParamSpecBoxed(obj), nil
}

// ParamSpecChar: a Spec derived structure that contains the meta data for
// character properties.
type ParamSpecChar interface {
	ParamSpec
}

// paramSpecChar implements the ParamSpecChar class.
type paramSpecChar struct {
	ParamSpec
}

// WrapParamSpecChar wraps a GObject to the right type. It is
// primarily used internally.
func WrapParamSpecChar(obj *externglib.Object) ParamSpecChar {
	return paramSpecChar{
		ParamSpec: WrapParamSpec(obj),
	}
}

func marshalParamSpecChar(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapParamSpecChar(obj), nil
}

// ParamSpecDouble: a Spec derived structure that contains the meta data for
// double properties.
type ParamSpecDouble interface {
	ParamSpec
}

// paramSpecDouble implements the ParamSpecDouble class.
type paramSpecDouble struct {
	ParamSpec
}

// WrapParamSpecDouble wraps a GObject to the right type. It is
// primarily used internally.
func WrapParamSpecDouble(obj *externglib.Object) ParamSpecDouble {
	return paramSpecDouble{
		ParamSpec: WrapParamSpec(obj),
	}
}

func marshalParamSpecDouble(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapParamSpecDouble(obj), nil
}

// ParamSpecEnum: a Spec derived structure that contains the meta data for enum
// properties.
type ParamSpecEnum interface {
	ParamSpec
}

// paramSpecEnum implements the ParamSpecEnum class.
type paramSpecEnum struct {
	ParamSpec
}

// WrapParamSpecEnum wraps a GObject to the right type. It is
// primarily used internally.
func WrapParamSpecEnum(obj *externglib.Object) ParamSpecEnum {
	return paramSpecEnum{
		ParamSpec: WrapParamSpec(obj),
	}
}

func marshalParamSpecEnum(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapParamSpecEnum(obj), nil
}

// ParamSpecFlags: a Spec derived structure that contains the meta data for
// flags properties.
type ParamSpecFlags interface {
	ParamSpec
}

// paramSpecFlags implements the ParamSpecFlags class.
type paramSpecFlags struct {
	ParamSpec
}

// WrapParamSpecFlags wraps a GObject to the right type. It is
// primarily used internally.
func WrapParamSpecFlags(obj *externglib.Object) ParamSpecFlags {
	return paramSpecFlags{
		ParamSpec: WrapParamSpec(obj),
	}
}

func marshalParamSpecFlags(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapParamSpecFlags(obj), nil
}

// ParamSpecFloat: a Spec derived structure that contains the meta data for
// float properties.
type ParamSpecFloat interface {
	ParamSpec
}

// paramSpecFloat implements the ParamSpecFloat class.
type paramSpecFloat struct {
	ParamSpec
}

// WrapParamSpecFloat wraps a GObject to the right type. It is
// primarily used internally.
func WrapParamSpecFloat(obj *externglib.Object) ParamSpecFloat {
	return paramSpecFloat{
		ParamSpec: WrapParamSpec(obj),
	}
}

func marshalParamSpecFloat(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapParamSpecFloat(obj), nil
}

// ParamSpecGType: a Spec derived structure that contains the meta data for
// #GType properties.
type ParamSpecGType interface {
	ParamSpec
}

// paramSpecGType implements the ParamSpecGType class.
type paramSpecGType struct {
	ParamSpec
}

// WrapParamSpecGType wraps a GObject to the right type. It is
// primarily used internally.
func WrapParamSpecGType(obj *externglib.Object) ParamSpecGType {
	return paramSpecGType{
		ParamSpec: WrapParamSpec(obj),
	}
}

func marshalParamSpecGType(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapParamSpecGType(obj), nil
}

// ParamSpecInt: a Spec derived structure that contains the meta data for
// integer properties.
type ParamSpecInt interface {
	ParamSpec
}

// paramSpecInt implements the ParamSpecInt class.
type paramSpecInt struct {
	ParamSpec
}

// WrapParamSpecInt wraps a GObject to the right type. It is
// primarily used internally.
func WrapParamSpecInt(obj *externglib.Object) ParamSpecInt {
	return paramSpecInt{
		ParamSpec: WrapParamSpec(obj),
	}
}

func marshalParamSpecInt(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapParamSpecInt(obj), nil
}

// ParamSpecInt64: a Spec derived structure that contains the meta data for
// 64bit integer properties.
type ParamSpecInt64 interface {
	ParamSpec
}

// paramSpecInt64 implements the ParamSpecInt64 class.
type paramSpecInt64 struct {
	ParamSpec
}

// WrapParamSpecInt64 wraps a GObject to the right type. It is
// primarily used internally.
func WrapParamSpecInt64(obj *externglib.Object) ParamSpecInt64 {
	return paramSpecInt64{
		ParamSpec: WrapParamSpec(obj),
	}
}

func marshalParamSpecInt64(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapParamSpecInt64(obj), nil
}

// ParamSpecLong: a Spec derived structure that contains the meta data for long
// integer properties.
type ParamSpecLong interface {
	ParamSpec
}

// paramSpecLong implements the ParamSpecLong class.
type paramSpecLong struct {
	ParamSpec
}

// WrapParamSpecLong wraps a GObject to the right type. It is
// primarily used internally.
func WrapParamSpecLong(obj *externglib.Object) ParamSpecLong {
	return paramSpecLong{
		ParamSpec: WrapParamSpec(obj),
	}
}

func marshalParamSpecLong(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapParamSpecLong(obj), nil
}

// ParamSpecObject: a Spec derived structure that contains the meta data for
// object properties.
type ParamSpecObject interface {
	ParamSpec
}

// paramSpecObject implements the ParamSpecObject class.
type paramSpecObject struct {
	ParamSpec
}

// WrapParamSpecObject wraps a GObject to the right type. It is
// primarily used internally.
func WrapParamSpecObject(obj *externglib.Object) ParamSpecObject {
	return paramSpecObject{
		ParamSpec: WrapParamSpec(obj),
	}
}

func marshalParamSpecObject(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapParamSpecObject(obj), nil
}

// ParamSpecOverride: this is a type of Spec type that simply redirects
// operations to another paramspec. All operations other than getting or setting
// the value are redirected, including accessing the nick and blurb, validating
// a value, and so forth. See g_param_spec_get_redirect_target() for retrieving
// the overridden property. SpecOverride is used in implementing
// g_object_class_override_property(), and will not be directly useful unless
// you are implementing a new base type similar to GObject.
type ParamSpecOverride interface {
	ParamSpec
}

// paramSpecOverride implements the ParamSpecOverride class.
type paramSpecOverride struct {
	ParamSpec
}

// WrapParamSpecOverride wraps a GObject to the right type. It is
// primarily used internally.
func WrapParamSpecOverride(obj *externglib.Object) ParamSpecOverride {
	return paramSpecOverride{
		ParamSpec: WrapParamSpec(obj),
	}
}

func marshalParamSpecOverride(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapParamSpecOverride(obj), nil
}

// ParamSpecParam: a Spec derived structure that contains the meta data for
// G_TYPE_PARAM properties.
type ParamSpecParam interface {
	ParamSpec
}

// paramSpecParam implements the ParamSpecParam class.
type paramSpecParam struct {
	ParamSpec
}

// WrapParamSpecParam wraps a GObject to the right type. It is
// primarily used internally.
func WrapParamSpecParam(obj *externglib.Object) ParamSpecParam {
	return paramSpecParam{
		ParamSpec: WrapParamSpec(obj),
	}
}

func marshalParamSpecParam(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapParamSpecParam(obj), nil
}

// ParamSpecPointer: a Spec derived structure that contains the meta data for
// pointer properties.
type ParamSpecPointer interface {
	ParamSpec
}

// paramSpecPointer implements the ParamSpecPointer class.
type paramSpecPointer struct {
	ParamSpec
}

// WrapParamSpecPointer wraps a GObject to the right type. It is
// primarily used internally.
func WrapParamSpecPointer(obj *externglib.Object) ParamSpecPointer {
	return paramSpecPointer{
		ParamSpec: WrapParamSpec(obj),
	}
}

func marshalParamSpecPointer(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapParamSpecPointer(obj), nil
}

// ParamSpecString: a Spec derived structure that contains the meta data for
// string properties.
type ParamSpecString interface {
	ParamSpec
}

// paramSpecString implements the ParamSpecString class.
type paramSpecString struct {
	ParamSpec
}

// WrapParamSpecString wraps a GObject to the right type. It is
// primarily used internally.
func WrapParamSpecString(obj *externglib.Object) ParamSpecString {
	return paramSpecString{
		ParamSpec: WrapParamSpec(obj),
	}
}

func marshalParamSpecString(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapParamSpecString(obj), nil
}

// ParamSpecUChar: a Spec derived structure that contains the meta data for
// unsigned character properties.
type ParamSpecUChar interface {
	ParamSpec
}

// paramSpecUChar implements the ParamSpecUChar class.
type paramSpecUChar struct {
	ParamSpec
}

// WrapParamSpecUChar wraps a GObject to the right type. It is
// primarily used internally.
func WrapParamSpecUChar(obj *externglib.Object) ParamSpecUChar {
	return paramSpecUChar{
		ParamSpec: WrapParamSpec(obj),
	}
}

func marshalParamSpecUChar(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapParamSpecUChar(obj), nil
}

// ParamSpecUInt: a Spec derived structure that contains the meta data for
// unsigned integer properties.
type ParamSpecUInt interface {
	ParamSpec
}

// paramSpecUInt implements the ParamSpecUInt class.
type paramSpecUInt struct {
	ParamSpec
}

// WrapParamSpecUInt wraps a GObject to the right type. It is
// primarily used internally.
func WrapParamSpecUInt(obj *externglib.Object) ParamSpecUInt {
	return paramSpecUInt{
		ParamSpec: WrapParamSpec(obj),
	}
}

func marshalParamSpecUInt(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapParamSpecUInt(obj), nil
}

// ParamSpecUInt64: a Spec derived structure that contains the meta data for
// unsigned 64bit integer properties.
type ParamSpecUInt64 interface {
	ParamSpec
}

// paramSpecUInt64 implements the ParamSpecUInt64 class.
type paramSpecUInt64 struct {
	ParamSpec
}

// WrapParamSpecUInt64 wraps a GObject to the right type. It is
// primarily used internally.
func WrapParamSpecUInt64(obj *externglib.Object) ParamSpecUInt64 {
	return paramSpecUInt64{
		ParamSpec: WrapParamSpec(obj),
	}
}

func marshalParamSpecUInt64(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapParamSpecUInt64(obj), nil
}

// ParamSpecULong: a Spec derived structure that contains the meta data for
// unsigned long integer properties.
type ParamSpecULong interface {
	ParamSpec
}

// paramSpecULong implements the ParamSpecULong class.
type paramSpecULong struct {
	ParamSpec
}

// WrapParamSpecULong wraps a GObject to the right type. It is
// primarily used internally.
func WrapParamSpecULong(obj *externglib.Object) ParamSpecULong {
	return paramSpecULong{
		ParamSpec: WrapParamSpec(obj),
	}
}

func marshalParamSpecULong(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapParamSpecULong(obj), nil
}

// ParamSpecUnichar: a Spec derived structure that contains the meta data for
// unichar (unsigned integer) properties.
type ParamSpecUnichar interface {
	ParamSpec
}

// paramSpecUnichar implements the ParamSpecUnichar class.
type paramSpecUnichar struct {
	ParamSpec
}

// WrapParamSpecUnichar wraps a GObject to the right type. It is
// primarily used internally.
func WrapParamSpecUnichar(obj *externglib.Object) ParamSpecUnichar {
	return paramSpecUnichar{
		ParamSpec: WrapParamSpec(obj),
	}
}

func marshalParamSpecUnichar(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapParamSpecUnichar(obj), nil
}

// ParamSpecValueArray: a Spec derived structure that contains the meta data for
// Array properties.
type ParamSpecValueArray interface {
	ParamSpec
}

// paramSpecValueArray implements the ParamSpecValueArray class.
type paramSpecValueArray struct {
	ParamSpec
}

// WrapParamSpecValueArray wraps a GObject to the right type. It is
// primarily used internally.
func WrapParamSpecValueArray(obj *externglib.Object) ParamSpecValueArray {
	return paramSpecValueArray{
		ParamSpec: WrapParamSpec(obj),
	}
}

func marshalParamSpecValueArray(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapParamSpecValueArray(obj), nil
}

// ParamSpecVariant: a Spec derived structure that contains the meta data for
// #GVariant properties.
//
// When comparing values with g_param_values_cmp(), scalar values with the same
// type will be compared with g_variant_compare(). Other non-nil variants will
// be checked for equality with g_variant_equal(), and their sort order is
// otherwise undefined. nil is ordered before non-nil variants. Two nil values
// compare equal.
type ParamSpecVariant interface {
	ParamSpec
}

// paramSpecVariant implements the ParamSpecVariant class.
type paramSpecVariant struct {
	ParamSpec
}

// WrapParamSpecVariant wraps a GObject to the right type. It is
// primarily used internally.
func WrapParamSpecVariant(obj *externglib.Object) ParamSpecVariant {
	return paramSpecVariant{
		ParamSpec: WrapParamSpec(obj),
	}
}

func marshalParamSpecVariant(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapParamSpecVariant(obj), nil
}
