// Code generated by girgen. DO NOT EDIT.

package gdkpixbuf

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/box"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
)

// #cgo pkg-config: gdk-pixbuf-2.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <gdk-pixbuf/gdk-pixbuf.h>
//
// gboolean gotk4_PixbufSaveFunc( gchar*, gsize, GError**, gpointer);
import "C"

// PixbufSaveFunc: save functions used by
// [method@GdkPixbuf.Pixbuf.save_to_callback].
//
// This function is called once for each block of bytes that is "written" by
// `gdk_pixbuf_save_to_callback()`.
//
// If successful it should return `TRUE`; if an error occurs it should set
// `error` and return `FALSE`, in which case `gdk_pixbuf_save_to_callback()`
// will fail with the same error.
type PixbufSaveFunc func(buf []byte) (err *glib.Error, ok bool)

//export gotk4_PixbufSaveFunc
func gotk4_PixbufSaveFunc(arg0 *C.gchar, arg1 C.gsize, arg2 **C.GError, arg3 C.gpointer) C.gboolean {
	v := box.Get(uintptr(arg3))
	if v == nil {
		panic(`callback not found`)
	}

	var buf []byte

	{
		buf = make([]byte, arg1)
		for i := 0; i < uintptr(arg1); i++ {
			src := (C.guint8)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + i))
			buf[i] = byte(src)
		}
	}

	err, ok := v.(PixbufSaveFunc)(buf)
}
