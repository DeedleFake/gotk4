// Code generated by girgen. DO NOT EDIT.

package gdkpixbuf

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gdk-pixbuf-2.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <gdk-pixbuf/gdk-pixbuf.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gdk_pixbuf_animation_get_type()), F: marshalPixbufAnimation},
		{T: externglib.Type(C.gdk_pixbuf_animation_iter_get_type()), F: marshalPixbufAnimationIter},
	})
}

// PixbufAnimation: an opaque object representing an animation.
//
// The GdkPixBuf library provides a simple mechanism to load and represent
// animations. An animation is conceptually a series of frames to be displayed
// over time.
//
// The animation may not be represented as a series of frames internally; for
// example, it may be stored as a sprite and instructions for moving the sprite
// around a background.
//
// To display an animation you don't need to understand its representation,
// however; you just ask `GdkPixbuf` what should be displayed at a given point
// in time.
type PixbufAnimation interface {
	gextras.Objector

	Height() int

	Iter(startTime *glib.TimeVal) PixbufAnimationIter

	StaticImage() Pixbuf

	Width() int

	IsStaticImagePixbufAnimation() bool
}

// pixbufAnimation implements the PixbufAnimation class.
type pixbufAnimation struct {
	gextras.Objector
}

// WrapPixbufAnimation wraps a GObject to the right type. It is
// primarily used internally.
func WrapPixbufAnimation(obj *externglib.Object) PixbufAnimation {
	return pixbufAnimation{
		Objector: obj,
	}
}

func marshalPixbufAnimation(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapPixbufAnimation(obj), nil
}

func NewPixbufAnimationFromFile(filename string) (PixbufAnimation, error) {
	var _arg1 *C.char               // out
	var _cret *C.GdkPixbufAnimation // in
	var _cerr *C.GError             // in

	_arg1 = (*C.char)(C.CString(filename))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gdk_pixbuf_animation_new_from_file(_arg1, &_cerr)

	var _pixbufAnimation PixbufAnimation // out
	var _goerr error                     // out

	_pixbufAnimation = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(PixbufAnimation)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _pixbufAnimation, _goerr
}

func NewPixbufAnimationFromResource(resourcePath string) (PixbufAnimation, error) {
	var _arg1 *C.char               // out
	var _cret *C.GdkPixbufAnimation // in
	var _cerr *C.GError             // in

	_arg1 = (*C.char)(C.CString(resourcePath))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gdk_pixbuf_animation_new_from_resource(_arg1, &_cerr)

	var _pixbufAnimation PixbufAnimation // out
	var _goerr error                     // out

	_pixbufAnimation = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(PixbufAnimation)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _pixbufAnimation, _goerr
}

func NewPixbufAnimationFromStream(stream gio.InputStream, cancellable gio.Cancellable) (PixbufAnimation, error) {
	var _arg1 *C.GInputStream       // out
	var _arg2 *C.GCancellable       // out
	var _cret *C.GdkPixbufAnimation // in
	var _cerr *C.GError             // in

	_arg1 = (*C.GInputStream)(unsafe.Pointer(stream.Native()))
	_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))

	_cret = C.gdk_pixbuf_animation_new_from_stream(_arg1, _arg2, &_cerr)

	var _pixbufAnimation PixbufAnimation // out
	var _goerr error                     // out

	_pixbufAnimation = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(PixbufAnimation)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _pixbufAnimation, _goerr
}

func (a pixbufAnimation) Height() int {
	var _arg0 *C.GdkPixbufAnimation // out
	var _cret C.int                 // in

	_arg0 = (*C.GdkPixbufAnimation)(unsafe.Pointer(a.Native()))

	_cret = C.gdk_pixbuf_animation_get_height(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (a pixbufAnimation) Iter(startTime *glib.TimeVal) PixbufAnimationIter {
	var _arg0 *C.GdkPixbufAnimation     // out
	var _arg1 *C.GTimeVal               // out
	var _cret *C.GdkPixbufAnimationIter // in

	_arg0 = (*C.GdkPixbufAnimation)(unsafe.Pointer(a.Native()))
	_arg1 = (*C.GTimeVal)(unsafe.Pointer(startTime.Native()))

	_cret = C.gdk_pixbuf_animation_get_iter(_arg0, _arg1)

	var _pixbufAnimationIter PixbufAnimationIter // out

	_pixbufAnimationIter = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(PixbufAnimationIter)

	return _pixbufAnimationIter
}

func (a pixbufAnimation) StaticImage() Pixbuf {
	var _arg0 *C.GdkPixbufAnimation // out
	var _cret *C.GdkPixbuf          // in

	_arg0 = (*C.GdkPixbufAnimation)(unsafe.Pointer(a.Native()))

	_cret = C.gdk_pixbuf_animation_get_static_image(_arg0)

	var _pixbuf Pixbuf // out

	_pixbuf = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Pixbuf)

	return _pixbuf
}

func (a pixbufAnimation) Width() int {
	var _arg0 *C.GdkPixbufAnimation // out
	var _cret C.int                 // in

	_arg0 = (*C.GdkPixbufAnimation)(unsafe.Pointer(a.Native()))

	_cret = C.gdk_pixbuf_animation_get_width(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (a pixbufAnimation) IsStaticImagePixbufAnimation() bool {
	var _arg0 *C.GdkPixbufAnimation // out
	var _cret C.gboolean            // in

	_arg0 = (*C.GdkPixbufAnimation)(unsafe.Pointer(a.Native()))

	_cret = C.gdk_pixbuf_animation_is_static_image(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// PixbufAnimationIter: an opaque object representing an iterator which points
// to a certain position in an animation.
type PixbufAnimationIter interface {
	gextras.Objector

	AdvancePixbufAnimationIter(currentTime *glib.TimeVal) bool

	DelayTime() int

	Pixbuf() Pixbuf

	OnCurrentlyLoadingFramePixbufAnimationIter() bool
}

// pixbufAnimationIter implements the PixbufAnimationIter class.
type pixbufAnimationIter struct {
	gextras.Objector
}

// WrapPixbufAnimationIter wraps a GObject to the right type. It is
// primarily used internally.
func WrapPixbufAnimationIter(obj *externglib.Object) PixbufAnimationIter {
	return pixbufAnimationIter{
		Objector: obj,
	}
}

func marshalPixbufAnimationIter(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapPixbufAnimationIter(obj), nil
}

func (i pixbufAnimationIter) AdvancePixbufAnimationIter(currentTime *glib.TimeVal) bool {
	var _arg0 *C.GdkPixbufAnimationIter // out
	var _arg1 *C.GTimeVal               // out
	var _cret C.gboolean                // in

	_arg0 = (*C.GdkPixbufAnimationIter)(unsafe.Pointer(i.Native()))
	_arg1 = (*C.GTimeVal)(unsafe.Pointer(currentTime.Native()))

	_cret = C.gdk_pixbuf_animation_iter_advance(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (i pixbufAnimationIter) DelayTime() int {
	var _arg0 *C.GdkPixbufAnimationIter // out
	var _cret C.int                     // in

	_arg0 = (*C.GdkPixbufAnimationIter)(unsafe.Pointer(i.Native()))

	_cret = C.gdk_pixbuf_animation_iter_get_delay_time(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (i pixbufAnimationIter) Pixbuf() Pixbuf {
	var _arg0 *C.GdkPixbufAnimationIter // out
	var _cret *C.GdkPixbuf              // in

	_arg0 = (*C.GdkPixbufAnimationIter)(unsafe.Pointer(i.Native()))

	_cret = C.gdk_pixbuf_animation_iter_get_pixbuf(_arg0)

	var _pixbuf Pixbuf // out

	_pixbuf = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Pixbuf)

	return _pixbuf
}

func (i pixbufAnimationIter) OnCurrentlyLoadingFramePixbufAnimationIter() bool {
	var _arg0 *C.GdkPixbufAnimationIter // out
	var _cret C.gboolean                // in

	_arg0 = (*C.GdkPixbufAnimationIter)(unsafe.Pointer(i.Native()))

	_cret = C.gdk_pixbuf_animation_iter_on_currently_loading_frame(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}
