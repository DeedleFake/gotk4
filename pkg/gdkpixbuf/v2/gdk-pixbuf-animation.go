// Code generated by girgen. DO NOT EDIT.

package gdkpixbuf

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gdk-pixbuf-2.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <stdbool.h>
// #include <glib-object.h>
// #include <gdk-pixbuf/gdk-pixbuf.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gdk_pixbuf_animation_get_type()), F: marshalPixbufAnimation},
		{T: externglib.Type(C.gdk_pixbuf_animation_iter_get_type()), F: marshalPixbufAnimationIter},
	})
}

// PixbufAnimation: an opaque object representing an animation.
//
// The GdkPixBuf library provides a simple mechanism to load and represent
// animations. An animation is conceptually a series of frames to be displayed
// over time.
//
// The animation may not be represented as a series of frames internally; for
// example, it may be stored as a sprite and instructions for moving the sprite
// around a background.
//
// To display an animation you don't need to understand its representation,
// however; you just ask `GdkPixbuf` what should be displayed at a given point
// in time.
type PixbufAnimation interface {
	gextras.Objector

	// Height queries the height of the bounding box of a pixbuf animation.
	Height() int
	// Iter: get an iterator for displaying an animation.
	//
	// The iterator provides the frames that should be displayed at a given
	// time.
	//
	// @start_time would normally come from g_get_current_time(), and marks the
	// beginning of animation playback. After creating an iterator, you should
	// immediately display the pixbuf returned by
	// gdk_pixbuf_animation_iter_get_pixbuf(). Then, you should install a
	// timeout (with g_timeout_add()) or by some other mechanism ensure that
	// you'll update the image after gdk_pixbuf_animation_iter_get_delay_time()
	// milliseconds. Each time the image is updated, you should reinstall the
	// timeout with the new, possibly-changed delay time.
	//
	// As a shortcut, if @start_time is `NULL`, the result of
	// g_get_current_time() will be used automatically.
	//
	// To update the image (i.e. possibly change the result of
	// gdk_pixbuf_animation_iter_get_pixbuf() to a new frame of the animation),
	// call gdk_pixbuf_animation_iter_advance().
	//
	// If you're using PixbufLoader, in addition to updating the image after the
	// delay time, you should also update it whenever you receive the
	// area_updated signal and
	// gdk_pixbuf_animation_iter_on_currently_loading_frame() returns `TRUE`. In
	// this case, the frame currently being fed into the loader has received new
	// data, so needs to be refreshed. The delay time for a frame may also be
	// modified after an area_updated signal, for example if the delay time for
	// a frame is encoded in the data after the frame itself. So your timeout
	// should be reinstalled after any area_updated signal.
	//
	// A delay time of -1 is possible, indicating "infinite".
	Iter(startTime *glib.TimeVal) PixbufAnimationIter
	// StaticImage retrieves a static image for the animation.
	//
	// If an animation is really just a plain image (has only one frame), this
	// function returns that image.
	//
	// If the animation is an animation, this function returns a reasonable
	// image to use as a static unanimated image, which might be the first
	// frame, or something more sophisticated depending on the file format.
	//
	// If an animation hasn't loaded any frames yet, this function will return
	// `NULL`.
	StaticImage() Pixbuf
	// Width queries the width of the bounding box of a pixbuf animation.
	Width() int
	// IsStaticImage checks whether the animation is a static image.
	//
	// If you load a file with gdk_pixbuf_animation_new_from_file() and it turns
	// out to be a plain, unanimated image, then this function will return
	// `TRUE`. Use gdk_pixbuf_animation_get_static_image() to retrieve the
	// image.
	IsStaticImage() bool
	// Ref adds a reference to an animation.
	Ref() PixbufAnimation
	// Unref removes a reference from an animation.
	Unref()
}

// pixbufAnimation implements the PixbufAnimation interface.
type pixbufAnimation struct {
	gextras.Objector
}

var _ PixbufAnimation = (*pixbufAnimation)(nil)

// WrapPixbufAnimation wraps a GObject to the right type. It is
// primarily used internally.
func WrapPixbufAnimation(obj *externglib.Object) PixbufAnimation {
	return PixbufAnimation{
		Objector: obj,
	}
}

func marshalPixbufAnimation(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapPixbufAnimation(obj), nil
}

// NewPixbufAnimationFromFile constructs a class PixbufAnimation.
func NewPixbufAnimationFromFile(filename string) (pixbufAnimation PixbufAnimation, err error) {
	var arg1 *C.char
	var gError *C.GError

	arg1 = (*C.gchar)(C.CString(filename))
	defer C.free(unsafe.Pointer(arg1))

	ret := C.gdk_pixbuf_animation_new_from_file(arg1, &gError)

	var ret0 PixbufAnimation
	var goError error

	ret0 = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(ret.Native()))).(PixbufAnimation)

	if gError != nil {
		goError = fmt.Errorf("%d: %s", gError.code, C.GoString(gError.message))
		C.g_error_free(gError)
	}

	return ret0, goError
}

// NewPixbufAnimationFromResource constructs a class PixbufAnimation.
func NewPixbufAnimationFromResource(resourcePath string) (pixbufAnimation PixbufAnimation, err error) {
	var arg1 *C.char
	var gError *C.GError

	arg1 = (*C.gchar)(C.CString(resourcePath))
	defer C.free(unsafe.Pointer(arg1))

	ret := C.gdk_pixbuf_animation_new_from_resource(arg1, &gError)

	var ret0 PixbufAnimation
	var goError error

	ret0 = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(ret.Native()))).(PixbufAnimation)

	if gError != nil {
		goError = fmt.Errorf("%d: %s", gError.code, C.GoString(gError.message))
		C.g_error_free(gError)
	}

	return ret0, goError
}

// NewPixbufAnimationFromStream constructs a class PixbufAnimation.
func NewPixbufAnimationFromStream(stream gio.InputStream, cancellable gio.Cancellable) (pixbufAnimation PixbufAnimation, err error) {
	var arg1 *C.GInputStream
	var arg2 *C.GCancellable
	var gError *C.GError

	arg1 = (*C.GInputStream)(stream.Native())
	arg2 = (*C.GCancellable)(cancellable.Native())

	ret := C.gdk_pixbuf_animation_new_from_stream(arg1, arg2, &gError)

	var ret0 PixbufAnimation
	var goError error

	ret0 = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(ret.Native()))).(PixbufAnimation)

	if gError != nil {
		goError = fmt.Errorf("%d: %s", gError.code, C.GoString(gError.message))
		C.g_error_free(gError)
	}

	return ret0, goError
}

// NewPixbufAnimationFromStreamFinish constructs a class PixbufAnimation.
func NewPixbufAnimationFromStreamFinish(asyncResult gio.AsyncResult) (pixbufAnimation PixbufAnimation, err error) {
	var arg1 *C.GAsyncResult
	var gError *C.GError

	arg1 = (*C.GAsyncResult)(asyncResult.Native())

	ret := C.gdk_pixbuf_animation_new_from_stream_finish(arg1, &gError)

	var ret0 PixbufAnimation
	var goError error

	ret0 = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(ret.Native()))).(PixbufAnimation)

	if gError != nil {
		goError = fmt.Errorf("%d: %s", gError.code, C.GoString(gError.message))
		C.g_error_free(gError)
	}

	return ret0, goError
}

// Height queries the height of the bounding box of a pixbuf animation.
func (a pixbufAnimation) Height() int {
	var arg0 *C.GdkPixbufAnimation

	arg0 = (*C.GdkPixbufAnimation)(a.Native())

	ret := C.gdk_pixbuf_animation_get_height(arg0)

	var ret0 int

	ret0 = int(ret)

	return ret0
}

// Iter: get an iterator for displaying an animation.
//
// The iterator provides the frames that should be displayed at a given
// time.
//
// @start_time would normally come from g_get_current_time(), and marks the
// beginning of animation playback. After creating an iterator, you should
// immediately display the pixbuf returned by
// gdk_pixbuf_animation_iter_get_pixbuf(). Then, you should install a
// timeout (with g_timeout_add()) or by some other mechanism ensure that
// you'll update the image after gdk_pixbuf_animation_iter_get_delay_time()
// milliseconds. Each time the image is updated, you should reinstall the
// timeout with the new, possibly-changed delay time.
//
// As a shortcut, if @start_time is `NULL`, the result of
// g_get_current_time() will be used automatically.
//
// To update the image (i.e. possibly change the result of
// gdk_pixbuf_animation_iter_get_pixbuf() to a new frame of the animation),
// call gdk_pixbuf_animation_iter_advance().
//
// If you're using PixbufLoader, in addition to updating the image after the
// delay time, you should also update it whenever you receive the
// area_updated signal and
// gdk_pixbuf_animation_iter_on_currently_loading_frame() returns `TRUE`. In
// this case, the frame currently being fed into the loader has received new
// data, so needs to be refreshed. The delay time for a frame may also be
// modified after an area_updated signal, for example if the delay time for
// a frame is encoded in the data after the frame itself. So your timeout
// should be reinstalled after any area_updated signal.
//
// A delay time of -1 is possible, indicating "infinite".
func (a pixbufAnimation) Iter(startTime *glib.TimeVal) PixbufAnimationIter {
	var arg0 *C.GdkPixbufAnimation
	var arg1 *C.GTimeVal

	arg0 = (*C.GdkPixbufAnimation)(a.Native())
	arg1 = (*C.GTimeVal)(startTime.Native())

	ret := C.gdk_pixbuf_animation_get_iter(arg0, arg1)

	var ret0 PixbufAnimationIter

	ret0 = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(ret.Native()))).(PixbufAnimationIter)

	return ret0
}

// StaticImage retrieves a static image for the animation.
//
// If an animation is really just a plain image (has only one frame), this
// function returns that image.
//
// If the animation is an animation, this function returns a reasonable
// image to use as a static unanimated image, which might be the first
// frame, or something more sophisticated depending on the file format.
//
// If an animation hasn't loaded any frames yet, this function will return
// `NULL`.
func (a pixbufAnimation) StaticImage() Pixbuf {
	var arg0 *C.GdkPixbufAnimation

	arg0 = (*C.GdkPixbufAnimation)(a.Native())

	ret := C.gdk_pixbuf_animation_get_static_image(arg0)

	var ret0 Pixbuf

	ret0 = gextras.CastObject(externglib.Take(unsafe.Pointer(ret.Native()))).(Pixbuf)

	return ret0
}

// Width queries the width of the bounding box of a pixbuf animation.
func (a pixbufAnimation) Width() int {
	var arg0 *C.GdkPixbufAnimation

	arg0 = (*C.GdkPixbufAnimation)(a.Native())

	ret := C.gdk_pixbuf_animation_get_width(arg0)

	var ret0 int

	ret0 = int(ret)

	return ret0
}

// IsStaticImage checks whether the animation is a static image.
//
// If you load a file with gdk_pixbuf_animation_new_from_file() and it turns
// out to be a plain, unanimated image, then this function will return
// `TRUE`. Use gdk_pixbuf_animation_get_static_image() to retrieve the
// image.
func (a pixbufAnimation) IsStaticImage() bool {
	var arg0 *C.GdkPixbufAnimation

	arg0 = (*C.GdkPixbufAnimation)(a.Native())

	ret := C.gdk_pixbuf_animation_is_static_image(arg0)

	var ret0 bool

	ret0 = C.bool(ret) != C.false

	return ret0
}

// Ref adds a reference to an animation.
func (a pixbufAnimation) Ref() PixbufAnimation {
	var arg0 *C.GdkPixbufAnimation

	arg0 = (*C.GdkPixbufAnimation)(a.Native())

	ret := C.gdk_pixbuf_animation_ref(arg0)

	var ret0 PixbufAnimation

	ret0 = gextras.CastObject(externglib.Take(unsafe.Pointer(ret.Native()))).(PixbufAnimation)

	return ret0
}

// Unref removes a reference from an animation.
func (a pixbufAnimation) Unref() {
	var arg0 *C.GdkPixbufAnimation

	arg0 = (*C.GdkPixbufAnimation)(a.Native())

	C.gdk_pixbuf_animation_unref(arg0)
}

// PixbufAnimationIter: an opaque object representing an iterator which points
// to a certain position in an animation.
type PixbufAnimationIter interface {
	gextras.Objector

	// Advance: possibly advances an animation to a new frame.
	//
	// Chooses the frame based on the start time passed to
	// gdk_pixbuf_animation_get_iter().
	//
	// @current_time would normally come from g_get_current_time(), and must be
	// greater than or equal to the time passed to
	// gdk_pixbuf_animation_get_iter(), and must increase or remain unchanged
	// each time gdk_pixbuf_animation_iter_get_pixbuf() is called. That is, you
	// can't go backward in time; animations only play forward.
	//
	// As a shortcut, pass `NULL` for the current time and g_get_current_time()
	// will be invoked on your behalf. So you only need to explicitly pass
	// @current_time if you're doing something odd like playing the animation at
	// double speed.
	//
	// If this function returns `FALSE`, there's no need to update the animation
	// display, assuming the display had been rendered prior to advancing; if
	// `TRUE`, you need to call gdk_pixbuf_animation_iter_get_pixbuf() and
	// update the display with the new pixbuf.
	Advance(currentTime *glib.TimeVal) bool
	// DelayTime gets the number of milliseconds the current pixbuf should be
	// displayed, or -1 if the current pixbuf should be displayed forever.
	//
	// The `g_timeout_add()` function conveniently takes a timeout in
	// milliseconds, so you can use a timeout to schedule the next update.
	//
	// Note that some formats, like GIF, might clamp the timeout values in the
	// image file to avoid updates that are just too quick. The minimum timeout
	// for GIF images is currently 20 milliseconds.
	DelayTime() int
	// Pixbuf gets the current pixbuf which should be displayed.
	//
	// The pixbuf might not be the same size as the animation itself
	// (gdk_pixbuf_animation_get_width(), gdk_pixbuf_animation_get_height()).
	//
	// This pixbuf should be displayed for
	// gdk_pixbuf_animation_iter_get_delay_time() milliseconds.
	//
	// The caller of this function does not own a reference to the returned
	// pixbuf; the returned pixbuf will become invalid when the iterator
	// advances to the next frame, which may happen anytime you call
	// gdk_pixbuf_animation_iter_advance().
	//
	// Copy the pixbuf to keep it (don't just add a reference), as it may get
	// recycled as you advance the iterator.
	Pixbuf() Pixbuf
	// OnCurrentlyLoadingFrame: used to determine how to respond to the
	// area_updated signal on PixbufLoader when loading an animation.
	//
	// The `::area_updated` signal is emitted for an area of the frame currently
	// streaming in to the loader. So if you're on the currently loading frame,
	// you will need to redraw the screen for the updated area.
	OnCurrentlyLoadingFrame() bool
}

// pixbufAnimationIter implements the PixbufAnimationIter interface.
type pixbufAnimationIter struct {
	gextras.Objector
}

var _ PixbufAnimationIter = (*pixbufAnimationIter)(nil)

// WrapPixbufAnimationIter wraps a GObject to the right type. It is
// primarily used internally.
func WrapPixbufAnimationIter(obj *externglib.Object) PixbufAnimationIter {
	return PixbufAnimationIter{
		Objector: obj,
	}
}

func marshalPixbufAnimationIter(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapPixbufAnimationIter(obj), nil
}

// Advance: possibly advances an animation to a new frame.
//
// Chooses the frame based on the start time passed to
// gdk_pixbuf_animation_get_iter().
//
// @current_time would normally come from g_get_current_time(), and must be
// greater than or equal to the time passed to
// gdk_pixbuf_animation_get_iter(), and must increase or remain unchanged
// each time gdk_pixbuf_animation_iter_get_pixbuf() is called. That is, you
// can't go backward in time; animations only play forward.
//
// As a shortcut, pass `NULL` for the current time and g_get_current_time()
// will be invoked on your behalf. So you only need to explicitly pass
// @current_time if you're doing something odd like playing the animation at
// double speed.
//
// If this function returns `FALSE`, there's no need to update the animation
// display, assuming the display had been rendered prior to advancing; if
// `TRUE`, you need to call gdk_pixbuf_animation_iter_get_pixbuf() and
// update the display with the new pixbuf.
func (i pixbufAnimationIter) Advance(currentTime *glib.TimeVal) bool {
	var arg0 *C.GdkPixbufAnimationIter
	var arg1 *C.GTimeVal

	arg0 = (*C.GdkPixbufAnimationIter)(i.Native())
	arg1 = (*C.GTimeVal)(currentTime.Native())

	ret := C.gdk_pixbuf_animation_iter_advance(arg0, arg1)

	var ret0 bool

	ret0 = C.bool(ret) != C.false

	return ret0
}

// DelayTime gets the number of milliseconds the current pixbuf should be
// displayed, or -1 if the current pixbuf should be displayed forever.
//
// The `g_timeout_add()` function conveniently takes a timeout in
// milliseconds, so you can use a timeout to schedule the next update.
//
// Note that some formats, like GIF, might clamp the timeout values in the
// image file to avoid updates that are just too quick. The minimum timeout
// for GIF images is currently 20 milliseconds.
func (i pixbufAnimationIter) DelayTime() int {
	var arg0 *C.GdkPixbufAnimationIter

	arg0 = (*C.GdkPixbufAnimationIter)(i.Native())

	ret := C.gdk_pixbuf_animation_iter_get_delay_time(arg0)

	var ret0 int

	ret0 = int(ret)

	return ret0
}

// Pixbuf gets the current pixbuf which should be displayed.
//
// The pixbuf might not be the same size as the animation itself
// (gdk_pixbuf_animation_get_width(), gdk_pixbuf_animation_get_height()).
//
// This pixbuf should be displayed for
// gdk_pixbuf_animation_iter_get_delay_time() milliseconds.
//
// The caller of this function does not own a reference to the returned
// pixbuf; the returned pixbuf will become invalid when the iterator
// advances to the next frame, which may happen anytime you call
// gdk_pixbuf_animation_iter_advance().
//
// Copy the pixbuf to keep it (don't just add a reference), as it may get
// recycled as you advance the iterator.
func (i pixbufAnimationIter) Pixbuf() Pixbuf {
	var arg0 *C.GdkPixbufAnimationIter

	arg0 = (*C.GdkPixbufAnimationIter)(i.Native())

	ret := C.gdk_pixbuf_animation_iter_get_pixbuf(arg0)

	var ret0 Pixbuf

	ret0 = gextras.CastObject(externglib.Take(unsafe.Pointer(ret.Native()))).(Pixbuf)

	return ret0
}

// OnCurrentlyLoadingFrame: used to determine how to respond to the
// area_updated signal on PixbufLoader when loading an animation.
//
// The `::area_updated` signal is emitted for an area of the frame currently
// streaming in to the loader. So if you're on the currently loading frame,
// you will need to redraw the screen for the updated area.
func (i pixbufAnimationIter) OnCurrentlyLoadingFrame() bool {
	var arg0 *C.GdkPixbufAnimationIter

	arg0 = (*C.GdkPixbufAnimationIter)(i.Native())

	ret := C.gdk_pixbuf_animation_iter_on_currently_loading_frame(arg0)

	var ret0 bool

	ret0 = C.bool(ret) != C.false

	return ret0
}
