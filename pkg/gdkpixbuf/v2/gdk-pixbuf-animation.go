// Code generated by girgen. DO NOT EDIT.

package gdkpixbuf

import (
	"github.com/diamondburned/gotk4/pkg/glib/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gdk-pixbuf-2.0 glib-2.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gdk-pixbuf/gdk-pixbuf.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gdk_pixbuf_animation_get_type()), F: marshalPixbufAnimation},
		{T: externglib.Type(C.gdk_pixbuf_animation_iter_get_type()), F: marshalPixbufAnimationIter},
	})
}

// PixbufAnimation: an opaque object representing an animation.
//
// The GdkPixBuf library provides a simple mechanism to load and represent
// animations. An animation is conceptually a series of frames to be displayed
// over time.
//
// The animation may not be represented as a series of frames internally; for
// example, it may be stored as a sprite and instructions for moving the sprite
// around a background.
//
// To display an animation you don't need to understand its representation,
// however; you just ask `GdkPixbuf` what should be displayed at a given point
// in time.
type PixbufAnimation interface {
	gextras.Objector

	// Height queries the height of the bounding box of a pixbuf animation.
	Height() int
	// Width queries the width of the bounding box of a pixbuf animation.
	Width() int
	// IsStaticImage checks whether the animation is a static image.
	//
	// If you load a file with gdk_pixbuf_animation_new_from_file() and it turns
	// out to be a plain, unanimated image, then this function will return
	// `TRUE`. Use gdk_pixbuf_animation_get_static_image() to retrieve the
	// image.
	IsStaticImage() bool
	// Unref removes a reference from an animation.
	Unref()
}

// pixbufAnimation implements the PixbufAnimation interface.
type pixbufAnimation struct {
	gextras.Objector
}

var _ PixbufAnimation = (*pixbufAnimation)(nil)

// WrapPixbufAnimation wraps a GObject to the right type. It is
// primarily used internally.
func WrapPixbufAnimation(obj *externglib.Object) PixbufAnimation {
	return PixbufAnimation{
		Objector: obj,
	}
}

func marshalPixbufAnimation(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapPixbufAnimation(obj), nil
}

// Height queries the height of the bounding box of a pixbuf animation.
func (a pixbufAnimation) Height() int {
	var _arg0 *C.GdkPixbufAnimation // out

	_arg0 = (*C.GdkPixbufAnimation)(unsafe.Pointer(a.Native()))

	var _cret C.int // in

	_cret = C.gdk_pixbuf_animation_get_height(_arg0)

	var _gint int // out

	_gint = (int)(_cret)

	return _gint
}

// Width queries the width of the bounding box of a pixbuf animation.
func (a pixbufAnimation) Width() int {
	var _arg0 *C.GdkPixbufAnimation // out

	_arg0 = (*C.GdkPixbufAnimation)(unsafe.Pointer(a.Native()))

	var _cret C.int // in

	_cret = C.gdk_pixbuf_animation_get_width(_arg0)

	var _gint int // out

	_gint = (int)(_cret)

	return _gint
}

// IsStaticImage checks whether the animation is a static image.
//
// If you load a file with gdk_pixbuf_animation_new_from_file() and it turns
// out to be a plain, unanimated image, then this function will return
// `TRUE`. Use gdk_pixbuf_animation_get_static_image() to retrieve the
// image.
func (a pixbufAnimation) IsStaticImage() bool {
	var _arg0 *C.GdkPixbufAnimation // out

	_arg0 = (*C.GdkPixbufAnimation)(unsafe.Pointer(a.Native()))

	var _cret C.gboolean // in

	_cret = C.gdk_pixbuf_animation_is_static_image(_arg0)

	var _ok bool // out

	if _cret {
		_ok = true
	}

	return _ok
}

// Unref removes a reference from an animation.
func (a pixbufAnimation) Unref() {
	var _arg0 *C.GdkPixbufAnimation // out

	_arg0 = (*C.GdkPixbufAnimation)(unsafe.Pointer(a.Native()))

	C.gdk_pixbuf_animation_unref(_arg0)
}

// PixbufAnimationIter: an opaque object representing an iterator which points
// to a certain position in an animation.
type PixbufAnimationIter interface {
	gextras.Objector

	// Advance: possibly advances an animation to a new frame.
	//
	// Chooses the frame based on the start time passed to
	// gdk_pixbuf_animation_get_iter().
	//
	// @current_time would normally come from g_get_current_time(), and must be
	// greater than or equal to the time passed to
	// gdk_pixbuf_animation_get_iter(), and must increase or remain unchanged
	// each time gdk_pixbuf_animation_iter_get_pixbuf() is called. That is, you
	// can't go backward in time; animations only play forward.
	//
	// As a shortcut, pass `NULL` for the current time and g_get_current_time()
	// will be invoked on your behalf. So you only need to explicitly pass
	// @current_time if you're doing something odd like playing the animation at
	// double speed.
	//
	// If this function returns `FALSE`, there's no need to update the animation
	// display, assuming the display had been rendered prior to advancing; if
	// `TRUE`, you need to call gdk_pixbuf_animation_iter_get_pixbuf() and
	// update the display with the new pixbuf.
	Advance(currentTime *glib.TimeVal) bool
	// DelayTime gets the number of milliseconds the current pixbuf should be
	// displayed, or -1 if the current pixbuf should be displayed forever.
	//
	// The `g_timeout_add()` function conveniently takes a timeout in
	// milliseconds, so you can use a timeout to schedule the next update.
	//
	// Note that some formats, like GIF, might clamp the timeout values in the
	// image file to avoid updates that are just too quick. The minimum timeout
	// for GIF images is currently 20 milliseconds.
	DelayTime() int
	// OnCurrentlyLoadingFrame: used to determine how to respond to the
	// area_updated signal on PixbufLoader when loading an animation.
	//
	// The `::area_updated` signal is emitted for an area of the frame currently
	// streaming in to the loader. So if you're on the currently loading frame,
	// you will need to redraw the screen for the updated area.
	OnCurrentlyLoadingFrame() bool
}

// pixbufAnimationIter implements the PixbufAnimationIter interface.
type pixbufAnimationIter struct {
	gextras.Objector
}

var _ PixbufAnimationIter = (*pixbufAnimationIter)(nil)

// WrapPixbufAnimationIter wraps a GObject to the right type. It is
// primarily used internally.
func WrapPixbufAnimationIter(obj *externglib.Object) PixbufAnimationIter {
	return PixbufAnimationIter{
		Objector: obj,
	}
}

func marshalPixbufAnimationIter(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapPixbufAnimationIter(obj), nil
}

// Advance: possibly advances an animation to a new frame.
//
// Chooses the frame based on the start time passed to
// gdk_pixbuf_animation_get_iter().
//
// @current_time would normally come from g_get_current_time(), and must be
// greater than or equal to the time passed to
// gdk_pixbuf_animation_get_iter(), and must increase or remain unchanged
// each time gdk_pixbuf_animation_iter_get_pixbuf() is called. That is, you
// can't go backward in time; animations only play forward.
//
// As a shortcut, pass `NULL` for the current time and g_get_current_time()
// will be invoked on your behalf. So you only need to explicitly pass
// @current_time if you're doing something odd like playing the animation at
// double speed.
//
// If this function returns `FALSE`, there's no need to update the animation
// display, assuming the display had been rendered prior to advancing; if
// `TRUE`, you need to call gdk_pixbuf_animation_iter_get_pixbuf() and
// update the display with the new pixbuf.
func (i pixbufAnimationIter) Advance(currentTime *glib.TimeVal) bool {
	var _arg0 *C.GdkPixbufAnimationIter // out
	var _arg1 *C.GTimeVal               // out

	_arg0 = (*C.GdkPixbufAnimationIter)(unsafe.Pointer(i.Native()))
	_arg1 = (*C.GTimeVal)(unsafe.Pointer(currentTime.Native()))

	var _cret C.gboolean // in

	_cret = C.gdk_pixbuf_animation_iter_advance(_arg0, _arg1)

	var _ok bool // out

	if _cret {
		_ok = true
	}

	return _ok
}

// DelayTime gets the number of milliseconds the current pixbuf should be
// displayed, or -1 if the current pixbuf should be displayed forever.
//
// The `g_timeout_add()` function conveniently takes a timeout in
// milliseconds, so you can use a timeout to schedule the next update.
//
// Note that some formats, like GIF, might clamp the timeout values in the
// image file to avoid updates that are just too quick. The minimum timeout
// for GIF images is currently 20 milliseconds.
func (i pixbufAnimationIter) DelayTime() int {
	var _arg0 *C.GdkPixbufAnimationIter // out

	_arg0 = (*C.GdkPixbufAnimationIter)(unsafe.Pointer(i.Native()))

	var _cret C.int // in

	_cret = C.gdk_pixbuf_animation_iter_get_delay_time(_arg0)

	var _gint int // out

	_gint = (int)(_cret)

	return _gint
}

// OnCurrentlyLoadingFrame: used to determine how to respond to the
// area_updated signal on PixbufLoader when loading an animation.
//
// The `::area_updated` signal is emitted for an area of the frame currently
// streaming in to the loader. So if you're on the currently loading frame,
// you will need to redraw the screen for the updated area.
func (i pixbufAnimationIter) OnCurrentlyLoadingFrame() bool {
	var _arg0 *C.GdkPixbufAnimationIter // out

	_arg0 = (*C.GdkPixbufAnimationIter)(unsafe.Pointer(i.Native()))

	var _cret C.gboolean // in

	_cret = C.gdk_pixbuf_animation_iter_on_currently_loading_frame(_arg0)

	var _ok bool // out

	if _cret {
		_ok = true
	}

	return _ok
}
