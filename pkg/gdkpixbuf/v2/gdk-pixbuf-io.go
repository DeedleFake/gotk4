// Code generated by girgen. DO NOT EDIT.

package gdkpixbuf

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/internal/box"
	"github.com/diamondburned/gotk4/internal/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gdk-pixbuf-2.0 glib-2.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <gdk-pixbuf/gdk-pixbuf.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gdk_pixbuf_format_get_type()), F: marshalPixbufFormat},
	})
}

// PixbufFormatFlags flags which allow a module to specify further details about
// the supported operations.
type PixbufFormatFlags int

const (
	// PixbufFormatFlagsWritable: the module can write out images in the format.
	PixbufFormatFlagsWritable PixbufFormatFlags = 1
	// PixbufFormatFlagsScalable: the image format is scalable
	PixbufFormatFlagsScalable PixbufFormatFlags = 2
	// PixbufFormatFlagsThreadsafe: the module is threadsafe. gdk-pixbuf ignores
	// modules that are not marked as threadsafe. (Since 2.28).
	PixbufFormatFlagsThreadsafe PixbufFormatFlags = 4
)

// PixbufModulePreparedFunc defines the type of the function that gets called
// once the initial setup of @pixbuf is done.
//
// PixbufLoader uses a function of this type to emit the "<link
// linkend="GdkPixbufLoader-area-prepared">area_prepared</link>" signal.
type PixbufModulePreparedFunc func(pixbuf Pixbuf, anim PixbufAnimation)

//export gotk4_PixbufModulePreparedFunc
func gotk4_PixbufModulePreparedFunc(arg0 *C.GdkPixbuf, arg1 *C.GdkPixbufAnimation, arg2 C.gpointer) {
	v := box.Get(uintptr(arg2))
	if v == nil {
		panic(`callback not found`)
	}

	var pixbuf Pixbuf        // out
	var anim PixbufAnimation // out

	pixbuf = gextras.CastObject(externglib.Take(unsafe.Pointer(arg0.Native()))).(Pixbuf)
	anim = gextras.CastObject(externglib.Take(unsafe.Pointer(arg1.Native()))).(PixbufAnimation)

	fn := v.(PixbufModulePreparedFunc)
	fn(pixbuf, anim)
}

// PixbufModuleSizeFunc defines the type of the function that gets called once
// the size of the loaded image is known.
//
// The function is expected to set @width and @height to the desired size to
// which the image should be scaled. If a module has no efficient way to achieve
// the desired scaling during the loading of the image, it may either ignore the
// size request, or only approximate it - gdk-pixbuf will then perform the
// required scaling on the completely loaded image.
//
// If the function sets @width or @height to zero, the module should interpret
// this as a hint that it will be closed soon and shouldn't allocate further
// resources. This convention is used to implement gdk_pixbuf_get_file_info()
// efficiently.
type PixbufModuleSizeFunc func(width *int, height *int)

//export gotk4_PixbufModuleSizeFunc
func gotk4_PixbufModuleSizeFunc(arg0 *C.gint, arg1 *C.gint, arg2 C.gpointer) {
	v := box.Get(uintptr(arg2))
	if v == nil {
		panic(`callback not found`)
	}

	var width *int  // out
	var height *int // out

	width = (*int)(arg0)
	height = (*int)(arg1)

	fn := v.(PixbufModuleSizeFunc)
	fn(width, height)
}

// PixbufModuleUpdatedFunc defines the type of the function that gets called
// every time a region of @pixbuf is updated.
//
// PixbufLoader uses a function of this type to emit the "<link
// linkend="GdkPixbufLoader-area-updated">area_updated</link>" signal.
type PixbufModuleUpdatedFunc func(pixbuf Pixbuf, x int, y int, width int, height int)

//export gotk4_PixbufModuleUpdatedFunc
func gotk4_PixbufModuleUpdatedFunc(arg0 *C.GdkPixbuf, arg1 C.int, arg2 C.int, arg3 C.int, arg4 C.int, arg5 C.gpointer) {
	v := box.Get(uintptr(arg5))
	if v == nil {
		panic(`callback not found`)
	}

	var pixbuf Pixbuf // out
	var x int         // out
	var y int         // out
	var width int     // out
	var height int    // out

	pixbuf = gextras.CastObject(externglib.Take(unsafe.Pointer(arg0.Native()))).(Pixbuf)
	x = (int)(arg1)
	y = (int)(arg2)
	width = (int)(arg3)
	height = (int)(arg4)

	fn := v.(PixbufModuleUpdatedFunc)
	fn(pixbuf, x, y, width, height)
}

// PixbufFormat: a `GdkPixbufFormat` contains information about the image format
// accepted by a module.
//
// Only modules should access the fields directly, applications should use the
// `gdk_pixbuf_format_*` family of functions.
type PixbufFormat struct {
	native C.GdkPixbufFormat
}

// WrapPixbufFormat wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPixbufFormat(ptr unsafe.Pointer) *PixbufFormat {
	if ptr == nil {
		return nil
	}

	return (*PixbufFormat)(ptr)
}

func marshalPixbufFormat(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPixbufFormat(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (p *PixbufFormat) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

// Signature gets the field inside the struct.
func (p *PixbufFormat) Signature() *PixbufModulePattern {
	var v *PixbufModulePattern // out
	v = WrapPixbufModulePattern(unsafe.Pointer(p.native.signature))
	return v
}

// Domain gets the field inside the struct.
func (p *PixbufFormat) Domain() string {
	var v string // out
	v = C.GoString(p.native.domain)
	return v
}

// Flags gets the field inside the struct.
func (p *PixbufFormat) Flags() uint32 {
	var v uint32 // out
	v = (uint32)(p.native.flags)
	return v
}

// Disabled gets the field inside the struct.
func (p *PixbufFormat) Disabled() bool {
	var v bool // out
	if p.native.disabled != 0 {
		v = true
	}
	return v
}

// Copy creates a copy of `format`.
func (f *PixbufFormat) Copy() *PixbufFormat {
	var _arg0 *C.GdkPixbufFormat // out

	_arg0 = (*C.GdkPixbufFormat)(unsafe.Pointer(f.Native()))

	var _cret *C.GdkPixbufFormat // in

	_cret = C.gdk_pixbuf_format_copy(_arg0)

	var _pixbufFormat *PixbufFormat // out

	_pixbufFormat = WrapPixbufFormat(unsafe.Pointer(_cret))
	runtime.SetFinalizer(_pixbufFormat, func(v *PixbufFormat) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return _pixbufFormat
}

// Free frees the resources allocated when copying a `GdkPixbufFormat` using
// gdk_pixbuf_format_copy()
func (f *PixbufFormat) Free() {
	var _arg0 *C.GdkPixbufFormat // out

	_arg0 = (*C.GdkPixbufFormat)(unsafe.Pointer(f.Native()))

	C.gdk_pixbuf_format_free(_arg0)
}

// Description returns a description of the format.
func (f *PixbufFormat) Description() string {
	var _arg0 *C.GdkPixbufFormat // out

	_arg0 = (*C.GdkPixbufFormat)(unsafe.Pointer(f.Native()))

	var _cret *C.gchar // in

	_cret = C.gdk_pixbuf_format_get_description(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Extensions returns the filename extensions typically used for files in the
// given format.
func (f *PixbufFormat) Extensions() []string {
	var _arg0 *C.GdkPixbufFormat // out

	_arg0 = (*C.GdkPixbufFormat)(unsafe.Pointer(f.Native()))

	var _cret **C.gchar

	_cret = C.gdk_pixbuf_format_get_extensions(_arg0)

	var _utf8s []string

	{
		var length int
		for p := _cret; *p != nil; p = (**C.gchar)(unsafe.Add(unsafe.Pointer(p), unsafe.Sizeof(uint(0)))) {
			length++
			if length < 0 {
				panic(`length overflow`)
			}
		}

		src := unsafe.Slice(_cret, length)
		_utf8s = make([]string, length)
		for i := range src {
			_utf8s[i] = C.GoString(src[i])
			defer C.free(unsafe.Pointer(src[i]))
		}
	}

	return _utf8s
}

// License returns information about the license of the image loader for the
// format.
//
// The returned string should be a shorthand for a well known license, e.g.
// "LGPL", "GPL", "QPL", "GPL/QPL", or "other" to indicate some other license.
func (f *PixbufFormat) License() string {
	var _arg0 *C.GdkPixbufFormat // out

	_arg0 = (*C.GdkPixbufFormat)(unsafe.Pointer(f.Native()))

	var _cret *C.gchar // in

	_cret = C.gdk_pixbuf_format_get_license(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// MIMETypes returns the mime types supported by the format.
func (f *PixbufFormat) MIMETypes() []string {
	var _arg0 *C.GdkPixbufFormat // out

	_arg0 = (*C.GdkPixbufFormat)(unsafe.Pointer(f.Native()))

	var _cret **C.gchar

	_cret = C.gdk_pixbuf_format_get_mime_types(_arg0)

	var _utf8s []string

	{
		var length int
		for p := _cret; *p != nil; p = (**C.gchar)(unsafe.Add(unsafe.Pointer(p), unsafe.Sizeof(uint(0)))) {
			length++
			if length < 0 {
				panic(`length overflow`)
			}
		}

		src := unsafe.Slice(_cret, length)
		_utf8s = make([]string, length)
		for i := range src {
			_utf8s[i] = C.GoString(src[i])
			defer C.free(unsafe.Pointer(src[i]))
		}
	}

	return _utf8s
}

// Name returns the name of the format.
func (f *PixbufFormat) Name() string {
	var _arg0 *C.GdkPixbufFormat // out

	_arg0 = (*C.GdkPixbufFormat)(unsafe.Pointer(f.Native()))

	var _cret *C.gchar // in

	_cret = C.gdk_pixbuf_format_get_name(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// IsDisabled returns whether this image format is disabled.
//
// See gdk_pixbuf_format_set_disabled().
func (f *PixbufFormat) IsDisabled() bool {
	var _arg0 *C.GdkPixbufFormat // out

	_arg0 = (*C.GdkPixbufFormat)(unsafe.Pointer(f.Native()))

	var _cret C.gboolean // in

	_cret = C.gdk_pixbuf_format_is_disabled(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// IsSaveOptionSupported returns `TRUE` if the save option specified by
// @option_key is supported when saving a pixbuf using the module implementing
// @format.
//
// See gdk_pixbuf_save() for more information about option keys.
func (f *PixbufFormat) IsSaveOptionSupported(optionKey string) bool {
	var _arg0 *C.GdkPixbufFormat // out
	var _arg1 *C.gchar           // out

	_arg0 = (*C.GdkPixbufFormat)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.gchar)(C.CString(optionKey))
	defer C.free(unsafe.Pointer(_arg1))

	var _cret C.gboolean // in

	_cret = C.gdk_pixbuf_format_is_save_option_supported(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// IsScalable returns whether this image format is scalable.
//
// If a file is in a scalable format, it is preferable to load it at the desired
// size, rather than loading it at the default size and scaling the resulting
// pixbuf to the desired size.
func (f *PixbufFormat) IsScalable() bool {
	var _arg0 *C.GdkPixbufFormat // out

	_arg0 = (*C.GdkPixbufFormat)(unsafe.Pointer(f.Native()))

	var _cret C.gboolean // in

	_cret = C.gdk_pixbuf_format_is_scalable(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// IsWritable returns whether pixbufs can be saved in the given format.
func (f *PixbufFormat) IsWritable() bool {
	var _arg0 *C.GdkPixbufFormat // out

	_arg0 = (*C.GdkPixbufFormat)(unsafe.Pointer(f.Native()))

	var _cret C.gboolean // in

	_cret = C.gdk_pixbuf_format_is_writable(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetDisabled disables or enables an image format.
//
// If a format is disabled, GdkPixbuf won't use the image loader for this format
// to load images.
//
// Applications can use this to avoid using image loaders with an inappropriate
// license, see gdk_pixbuf_format_get_license().
func (f *PixbufFormat) SetDisabled(disabled bool) {
	var _arg0 *C.GdkPixbufFormat // out
	var _arg1 C.gboolean         // out

	_arg0 = (*C.GdkPixbufFormat)(unsafe.Pointer(f.Native()))
	if disabled {
		_arg1 = C.TRUE
	}

	C.gdk_pixbuf_format_set_disabled(_arg0, _arg1)
}
