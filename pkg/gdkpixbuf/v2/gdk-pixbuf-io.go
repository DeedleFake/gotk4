// Code generated by girgen. DO NOT EDIT.

package gdkpixbuf

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/internal/ptr"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gdk-pixbuf/gdk-pixbuf.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gdk_pixbuf_format_get_type()), F: marshalPixbufFormat},
	})
}

type PixbufFormat struct {
	native C.GdkPixbufFormat
}

// WrapPixbufFormat wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPixbufFormat(ptr unsafe.Pointer) *PixbufFormat {
	if ptr == nil {
		return nil
	}

	return (*PixbufFormat)(ptr)
}

func marshalPixbufFormat(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPixbufFormat(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (p *PixbufFormat) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

// Copy creates a copy of @format
func (f *PixbufFormat) Copy() *PixbufFormat {
	var arg0 *C.GdkPixbufFormat

	arg0 = (*C.GdkPixbufFormat)(unsafe.Pointer(f.Native()))

	var cret *C.GdkPixbufFormat

	cret = C.gdk_pixbuf_format_copy(arg0)

	var pixbufFormat *PixbufFormat

	pixbufFormat = WrapPixbufFormat(unsafe.Pointer(cret))
	runtime.SetFinalizer(pixbufFormat, func(v *PixbufFormat) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return pixbufFormat
}

// Free frees the resources allocated when copying a PixbufFormat using
// gdk_pixbuf_format_copy()
func (f *PixbufFormat) Free() {
	var arg0 *C.GdkPixbufFormat

	arg0 = (*C.GdkPixbufFormat)(unsafe.Pointer(f.Native()))

	C.gdk_pixbuf_format_free(arg0)
}

// Description returns a description of the format.
func (f *PixbufFormat) Description() string {
	var arg0 *C.GdkPixbufFormat

	arg0 = (*C.GdkPixbufFormat)(unsafe.Pointer(f.Native()))

	var cret *C.gchar

	cret = C.gdk_pixbuf_format_get_description(arg0)

	var utf8 string

	utf8 = C.GoString(cret)
	defer C.free(unsafe.Pointer(cret))

	return utf8
}

// Extensions returns the filename extensions typically used for files in the
// given format.
func (f *PixbufFormat) Extensions() []string {
	var arg0 *C.GdkPixbufFormat

	arg0 = (*C.GdkPixbufFormat)(unsafe.Pointer(f.Native()))

	var cret **C.gchar

	cret = C.gdk_pixbuf_format_get_extensions(arg0)

	var utf8s []string

	{
		var length int
		for p := cret; *p != 0; p = (**C.gchar)(ptr.Add(unsafe.Pointer(p), unsafe.Sizeof(int(0)))) {
			length++
			if length < 0 {
				panic(`length overflow`)
			}
		}

		var src []*C.gchar
		ptr.SetSlice(unsafe.Pointer(&src), unsafe.Pointer(cret), int(length))

		utf8s = make([]string, length)
		for i := uintptr(0); i < uintptr(length); i += unsafe.Sizeof(int(0)) {
			utf8s = C.GoString(cret)
			defer C.free(unsafe.Pointer(cret))
		}
	}

	return utf8s
}

// License returns information about the license of the image loader for the
// format. The returned string should be a shorthand for a wellknown license,
// e.g. "LGPL", "GPL", "QPL", "GPL/QPL", or "other" to indicate some other
// license. This string should be freed with g_free() when it's no longer
// needed.
func (f *PixbufFormat) License() string {
	var arg0 *C.GdkPixbufFormat

	arg0 = (*C.GdkPixbufFormat)(unsafe.Pointer(f.Native()))

	var cret *C.gchar

	cret = C.gdk_pixbuf_format_get_license(arg0)

	var utf8 string

	utf8 = C.GoString(cret)
	defer C.free(unsafe.Pointer(cret))

	return utf8
}

// MIMETypes returns the mime types supported by the format.
func (f *PixbufFormat) MIMETypes() []string {
	var arg0 *C.GdkPixbufFormat

	arg0 = (*C.GdkPixbufFormat)(unsafe.Pointer(f.Native()))

	var cret **C.gchar

	cret = C.gdk_pixbuf_format_get_mime_types(arg0)

	var utf8s []string

	{
		var length int
		for p := cret; *p != 0; p = (**C.gchar)(ptr.Add(unsafe.Pointer(p), unsafe.Sizeof(int(0)))) {
			length++
			if length < 0 {
				panic(`length overflow`)
			}
		}

		var src []*C.gchar
		ptr.SetSlice(unsafe.Pointer(&src), unsafe.Pointer(cret), int(length))

		utf8s = make([]string, length)
		for i := uintptr(0); i < uintptr(length); i += unsafe.Sizeof(int(0)) {
			utf8s = C.GoString(cret)
			defer C.free(unsafe.Pointer(cret))
		}
	}

	return utf8s
}

// Name returns the name of the format.
func (f *PixbufFormat) Name() string {
	var arg0 *C.GdkPixbufFormat

	arg0 = (*C.GdkPixbufFormat)(unsafe.Pointer(f.Native()))

	var cret *C.gchar

	cret = C.gdk_pixbuf_format_get_name(arg0)

	var utf8 string

	utf8 = C.GoString(cret)
	defer C.free(unsafe.Pointer(cret))

	return utf8
}

// IsDisabled returns whether this image format is disabled. See
// gdk_pixbuf_format_set_disabled().
func (f *PixbufFormat) IsDisabled() bool {
	var arg0 *C.GdkPixbufFormat

	arg0 = (*C.GdkPixbufFormat)(unsafe.Pointer(f.Native()))

	var cret C.gboolean

	cret = C.gdk_pixbuf_format_is_disabled(arg0)

	var ok bool

	if cret {
		ok = true
	}

	return ok
}

// IsSaveOptionSupported returns true if the save option specified by
// @option_key is supported when saving a pixbuf using the module implementing
// @format. See gdk_pixbuf_save() for more information about option keys.
func (f *PixbufFormat) IsSaveOptionSupported(optionKey string) bool {
	var arg0 *C.GdkPixbufFormat
	var arg1 *C.gchar

	arg0 = (*C.GdkPixbufFormat)(unsafe.Pointer(f.Native()))
	arg1 = (*C.gchar)(C.CString(optionKey))
	defer C.free(unsafe.Pointer(arg1))

	var cret C.gboolean

	cret = C.gdk_pixbuf_format_is_save_option_supported(arg0, arg1)

	var ok bool

	if cret {
		ok = true
	}

	return ok
}

// IsScalable returns whether this image format is scalable. If a file is in a
// scalable format, it is preferable to load it at the desired size, rather than
// loading it at the default size and scaling the resulting pixbuf to the
// desired size.
func (f *PixbufFormat) IsScalable() bool {
	var arg0 *C.GdkPixbufFormat

	arg0 = (*C.GdkPixbufFormat)(unsafe.Pointer(f.Native()))

	var cret C.gboolean

	cret = C.gdk_pixbuf_format_is_scalable(arg0)

	var ok bool

	if cret {
		ok = true
	}

	return ok
}

// IsWritable returns whether pixbufs can be saved in the given format.
func (f *PixbufFormat) IsWritable() bool {
	var arg0 *C.GdkPixbufFormat

	arg0 = (*C.GdkPixbufFormat)(unsafe.Pointer(f.Native()))

	var cret C.gboolean

	cret = C.gdk_pixbuf_format_is_writable(arg0)

	var ok bool

	if cret {
		ok = true
	}

	return ok
}

// SetDisabled disables or enables an image format. If a format is disabled,
// gdk-pixbuf won't use the image loader for this format to load images.
// Applications can use this to avoid using image loaders with an inappropriate
// license, see gdk_pixbuf_format_get_license().
func (f *PixbufFormat) SetDisabled(disabled bool) {
	var arg0 *C.GdkPixbufFormat
	var arg1 C.gboolean

	arg0 = (*C.GdkPixbufFormat)(unsafe.Pointer(f.Native()))
	if disabled {
		arg1 = C.gboolean(1)
	}

	C.gdk_pixbuf_format_set_disabled(arg0, arg1)
}
