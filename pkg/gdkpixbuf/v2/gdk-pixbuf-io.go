// Code generated by girgen. DO NOT EDIT.

package gdkpixbuf

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/box"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gdk-pixbuf-2.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <gdk-pixbuf/gdk-pixbuf.h>
// #include <glib-object.h>
import "C"

// PixbufFormatFlags flags which allow a module to specify further details about
// the supported operations.
type PixbufFormatFlags int

const (
	// PixbufFormatFlagsWritable: the module can write out images in the format.
	PixbufFormatFlagsWritable PixbufFormatFlags = 0b1
	// PixbufFormatFlagsScalable: the image format is scalable
	PixbufFormatFlagsScalable PixbufFormatFlags = 0b10
	// PixbufFormatFlagsThreadsafe: the module is threadsafe. gdk-pixbuf ignores
	// modules that are not marked as threadsafe. (Since 2.28).
	PixbufFormatFlagsThreadsafe PixbufFormatFlags = 0b100
)

// PixbufModulePreparedFunc defines the type of the function that gets called
// once the initial setup of @pixbuf is done.
//
// PixbufLoader uses a function of this type to emit the "<link
// linkend="GdkPixbufLoader-area-prepared">area_prepared</link>" signal.
type PixbufModulePreparedFunc func(pixbuf Pixbuf, anim PixbufAnimation)

//export gotk4_PixbufModulePreparedFunc
func gotk4_PixbufModulePreparedFunc(arg0 *C.GdkPixbuf, arg1 *C.GdkPixbufAnimation, arg2 C.gpointer) {
	v := box.Get(uintptr(arg2))
	if v == nil {
		panic(`callback not found`)
	}

	var pixbuf Pixbuf        // out
	var anim PixbufAnimation // out

	pixbuf = gextras.CastObject(externglib.Take(unsafe.Pointer(arg0))).(Pixbuf)
	anim = gextras.CastObject(externglib.Take(unsafe.Pointer(arg1))).(PixbufAnimation)

	fn := v.(PixbufModulePreparedFunc)
	fn(pixbuf, anim)
}

// PixbufModuleSizeFunc defines the type of the function that gets called once
// the size of the loaded image is known.
//
// The function is expected to set @width and @height to the desired size to
// which the image should be scaled. If a module has no efficient way to achieve
// the desired scaling during the loading of the image, it may either ignore the
// size request, or only approximate it - gdk-pixbuf will then perform the
// required scaling on the completely loaded image.
//
// If the function sets @width or @height to zero, the module should interpret
// this as a hint that it will be closed soon and shouldn't allocate further
// resources. This convention is used to implement gdk_pixbuf_get_file_info()
// efficiently.
type PixbufModuleSizeFunc func(width *int, height *int)

//export gotk4_PixbufModuleSizeFunc
func gotk4_PixbufModuleSizeFunc(arg0 *C.gint, arg1 *C.gint, arg2 C.gpointer) {
	v := box.Get(uintptr(arg2))
	if v == nil {
		panic(`callback not found`)
	}

	var width *int  // out
	var height *int // out

	width = (*int)(unsafe.Pointer(arg0))
	height = (*int)(unsafe.Pointer(arg1))

	fn := v.(PixbufModuleSizeFunc)
	fn(width, height)
}

// PixbufModuleUpdatedFunc defines the type of the function that gets called
// every time a region of @pixbuf is updated.
//
// PixbufLoader uses a function of this type to emit the "<link
// linkend="GdkPixbufLoader-area-updated">area_updated</link>" signal.
type PixbufModuleUpdatedFunc func(pixbuf Pixbuf, x int, y int, width int, height int)

//export gotk4_PixbufModuleUpdatedFunc
func gotk4_PixbufModuleUpdatedFunc(arg0 *C.GdkPixbuf, arg1 C.int, arg2 C.int, arg3 C.int, arg4 C.int, arg5 C.gpointer) {
	v := box.Get(uintptr(arg5))
	if v == nil {
		panic(`callback not found`)
	}

	var pixbuf Pixbuf // out
	var x int         // out
	var y int         // out
	var width int     // out
	var height int    // out

	pixbuf = gextras.CastObject(externglib.Take(unsafe.Pointer(arg0))).(Pixbuf)
	x = int(arg1)
	y = int(arg2)
	width = int(arg3)
	height = int(arg4)

	fn := v.(PixbufModuleUpdatedFunc)
	fn(pixbuf, x, y, width, height)
}

// PixbufModule: `GdkPixbufModule` contains the necessary functions to load and
// save images in a certain file format.
//
// If `GdkPixbuf` has been compiled with `GModule` support, it can be extended
// by modules which can load (and perhaps also save) new image and animation
// formats.
//
//
// Implementing modules
//
// The `GdkPixbuf` interfaces needed for implementing modules are contained in
// `gdk-pixbuf-io.h` (and `gdk-pixbuf-animation.h` if the module supports
// animations). They are not covered by the same stability guarantees as the
// regular GdkPixbuf API. To underline this fact, they are protected by the
// `GDK_PIXBUF_ENABLE_BACKEND` pre-processor symbol.
//
// Each loadable module must contain a `GdkPixbufModuleFillVtableFunc` function
// named `fill_vtable`, which will get called when the module is loaded and must
// set the function pointers of the `GdkPixbufModule`.
//
// In order to make format-checking work before actually loading the modules
// (which may require calling `dlopen` to load image libraries), modules export
// their signatures (and other information) via the `fill_info` function. An
// external utility, `gdk-pixbuf-query-loaders`, uses this to create a text file
// containing a list of all available loaders and their signatures. This file is
// then read at runtime by `GdkPixbuf` to obtain the list of available loaders
// and their signatures.
//
// Modules may only implement a subset of the functionality available via
// `GdkPixbufModule`. If a particular functionality is not implemented, the
// `fill_vtable` function will simply not set the corresponding function
// pointers of the `GdkPixbufModule` structure. If a module supports incremental
// loading (i.e. provides `begin_load`, `stop_load` and `load_increment`), it
// doesn't have to implement `load`, since `GdkPixbuf` can supply a generic
// `load` implementation wrapping the incremental loading.
//
//
// Installing modules
//
// Installing a module is a two-step process:
//
//    - copy the module file(s) to the loader directory (normally
//      `$libdir/gdk-pixbuf-2.0/$version/loaders`, unless overridden by the
//      environment variable `GDK_PIXBUF_MODULEDIR`)
//    - call `gdk-pixbuf-query-loaders` to update the module file (normally
//      `$libdir/gdk-pixbuf-2.0/$version/loaders.cache`, unless overridden
//      by the environment variable `GDK_PIXBUF_MODULE_FILE`)
type PixbufModule struct {
	native C.GdkPixbufModule
}

// WrapPixbufModule wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPixbufModule(ptr unsafe.Pointer) *PixbufModule {
	return (*PixbufModule)(ptr)
}

// Native returns the underlying C source pointer.
func (p *PixbufModule) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

// ModuleName: the name of the module, usually the same as the usual file
// extension for images of this type, eg. "xpm", "jpeg" or "png".
func (p *PixbufModule) ModuleName() string {
	var v string // out
	v = C.GoString(p.native.module_name)
	return v
}

// ModulePath: the path from which the module is loaded.
func (p *PixbufModule) ModulePath() string {
	var v string // out
	v = C.GoString(p.native.module_path)
	return v
}
