// Code generated by girgen. DO NOT EDIT.

package gdkpixbuf

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gerror"
	"github.com/diamondburned/gotk4/internal/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gdk-pixbuf/gdk-pixbuf.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gdk_pixbuf_loader_get_type()), F: marshalPixbufLoader},
	})
}

// PixbufLoader: the GdkPixbufLoader struct contains only private fields.
type PixbufLoader interface {
	gextras.Objector

	// Close informs a pixbuf loader that no further writes with
	// gdk_pixbuf_loader_write() will occur, so that it can free its internal
	// loading structures. Also, tries to parse any data that hasn't yet been
	// parsed; if the remaining data is partial or corrupt, an error will be
	// returned. If false is returned, @error will be set to an error from the
	// K_PIXBUF_ERROR or FILE_ERROR domains. If you're just cancelling a load
	// rather than expecting it to be finished, passing nil for @error to ignore
	// it is reasonable.
	//
	// Remember that this does not unref the loader, so if you plan not to use
	// it anymore, please g_object_unref() it.
	Close() error
	// Animation queries the PixbufAnimation that a pixbuf loader is currently
	// creating. In general it only makes sense to call this function after the
	// "area-prepared" signal has been emitted by the loader. If the loader
	// doesn't have enough bytes yet (hasn't emitted the "area-prepared" signal)
	// this function will return nil.
	Animation() PixbufAnimation
	// Format obtains the available information about the format of the
	// currently loading image file.
	Format() *PixbufFormat
	// Pixbuf queries the Pixbuf that a pixbuf loader is currently creating. In
	// general it only makes sense to call this function after the
	// "area-prepared" signal has been emitted by the loader; this means that
	// enough data has been read to know the size of the image that will be
	// allocated. If the loader has not received enough data via
	// gdk_pixbuf_loader_write(), then this function returns nil. The returned
	// pixbuf will be the same in all future calls to the loader, so simply
	// calling g_object_ref() should be sufficient to continue using it.
	// Additionally, if the loader is an animation, it will return the "static
	// image" of the animation (see gdk_pixbuf_animation_get_static_image()).
	Pixbuf() Pixbuf
	// SetSize causes the image to be scaled while it is loaded. The desired
	// image size can be determined relative to the original size of the image
	// by calling gdk_pixbuf_loader_set_size() from a signal handler for the
	// ::size-prepared signal.
	//
	// Attempts to set the desired image size are ignored after the emission of
	// the ::size-prepared signal.
	SetSize(width int, height int)
	// Write: this will cause a pixbuf loader to parse the next @count bytes of
	// an image. It will return true if the data was loaded successfully, and
	// false if an error occurred. In the latter case, the loader will be
	// closed, and will not accept further writes. If false is returned, @error
	// will be set to an error from the K_PIXBUF_ERROR or FILE_ERROR domains.
	Write() error
}

// pixbufLoader implements the PixbufLoader interface.
type pixbufLoader struct {
	gextras.Objector
}

var _ PixbufLoader = (*pixbufLoader)(nil)

// WrapPixbufLoader wraps a GObject to the right type. It is
// primarily used internally.
func WrapPixbufLoader(obj *externglib.Object) PixbufLoader {
	return PixbufLoader{
		Objector: obj,
	}
}

func marshalPixbufLoader(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapPixbufLoader(obj), nil
}

// NewPixbufLoader constructs a class PixbufLoader.
func NewPixbufLoader() PixbufLoader {
	var _cret C.GdkPixbufLoader

	cret = C.gdk_pixbuf_loader_new()

	var _pixbufLoader PixbufLoader

	_pixbufLoader = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret.Native()))).(PixbufLoader)

	return _pixbufLoader
}

// NewPixbufLoaderWithMIMEType constructs a class PixbufLoader.
func NewPixbufLoaderWithMIMEType(mimeType string) (PixbufLoader, error) {
	var _arg1 *C.char

	_arg1 = (*C.char)(C.CString(mimeType))
	defer C.free(unsafe.Pointer(_arg1))

	var _cret C.GdkPixbufLoader
	var _cerr *C.GError

	cret = C.gdk_pixbuf_loader_new_with_mime_type(_arg1, _cerr)

	var _pixbufLoader PixbufLoader
	var _goerr error

	_pixbufLoader = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret.Native()))).(PixbufLoader)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _pixbufLoader, _goerr
}

// NewPixbufLoaderWithType constructs a class PixbufLoader.
func NewPixbufLoaderWithType(imageType string) (PixbufLoader, error) {
	var _arg1 *C.char

	_arg1 = (*C.char)(C.CString(imageType))
	defer C.free(unsafe.Pointer(_arg1))

	var _cret C.GdkPixbufLoader
	var _cerr *C.GError

	cret = C.gdk_pixbuf_loader_new_with_type(_arg1, _cerr)

	var _pixbufLoader PixbufLoader
	var _goerr error

	_pixbufLoader = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret.Native()))).(PixbufLoader)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _pixbufLoader, _goerr
}

// Close informs a pixbuf loader that no further writes with
// gdk_pixbuf_loader_write() will occur, so that it can free its internal
// loading structures. Also, tries to parse any data that hasn't yet been
// parsed; if the remaining data is partial or corrupt, an error will be
// returned. If false is returned, @error will be set to an error from the
// K_PIXBUF_ERROR or FILE_ERROR domains. If you're just cancelling a load
// rather than expecting it to be finished, passing nil for @error to ignore
// it is reasonable.
//
// Remember that this does not unref the loader, so if you plan not to use
// it anymore, please g_object_unref() it.
func (l pixbufLoader) Close() error {
	var _arg0 *C.GdkPixbufLoader

	_arg0 = (*C.GdkPixbufLoader)(unsafe.Pointer(l.Native()))

	var _cerr *C.GError

	C.gdk_pixbuf_loader_close(_arg0, _cerr)

	var _goerr error

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

// Animation queries the PixbufAnimation that a pixbuf loader is currently
// creating. In general it only makes sense to call this function after the
// "area-prepared" signal has been emitted by the loader. If the loader
// doesn't have enough bytes yet (hasn't emitted the "area-prepared" signal)
// this function will return nil.
func (l pixbufLoader) Animation() PixbufAnimation {
	var _arg0 *C.GdkPixbufLoader

	_arg0 = (*C.GdkPixbufLoader)(unsafe.Pointer(l.Native()))

	var _cret *C.GdkPixbufAnimation

	cret = C.gdk_pixbuf_loader_get_animation(_arg0)

	var _pixbufAnimation PixbufAnimation

	_pixbufAnimation = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret.Native()))).(PixbufAnimation)

	return _pixbufAnimation
}

// Format obtains the available information about the format of the
// currently loading image file.
func (l pixbufLoader) Format() *PixbufFormat {
	var _arg0 *C.GdkPixbufLoader

	_arg0 = (*C.GdkPixbufLoader)(unsafe.Pointer(l.Native()))

	var _cret *C.GdkPixbufFormat

	cret = C.gdk_pixbuf_loader_get_format(_arg0)

	var _pixbufFormat *PixbufFormat

	_pixbufFormat = WrapPixbufFormat(unsafe.Pointer(_cret))

	return _pixbufFormat
}

// Pixbuf queries the Pixbuf that a pixbuf loader is currently creating. In
// general it only makes sense to call this function after the
// "area-prepared" signal has been emitted by the loader; this means that
// enough data has been read to know the size of the image that will be
// allocated. If the loader has not received enough data via
// gdk_pixbuf_loader_write(), then this function returns nil. The returned
// pixbuf will be the same in all future calls to the loader, so simply
// calling g_object_ref() should be sufficient to continue using it.
// Additionally, if the loader is an animation, it will return the "static
// image" of the animation (see gdk_pixbuf_animation_get_static_image()).
func (l pixbufLoader) Pixbuf() Pixbuf {
	var _arg0 *C.GdkPixbufLoader

	_arg0 = (*C.GdkPixbufLoader)(unsafe.Pointer(l.Native()))

	var _cret *C.GdkPixbuf

	cret = C.gdk_pixbuf_loader_get_pixbuf(_arg0)

	var _pixbuf Pixbuf

	_pixbuf = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret.Native()))).(Pixbuf)

	return _pixbuf
}

// SetSize causes the image to be scaled while it is loaded. The desired
// image size can be determined relative to the original size of the image
// by calling gdk_pixbuf_loader_set_size() from a signal handler for the
// ::size-prepared signal.
//
// Attempts to set the desired image size are ignored after the emission of
// the ::size-prepared signal.
func (l pixbufLoader) SetSize(width int, height int) {
	var _arg0 *C.GdkPixbufLoader
	var _arg1 C.int
	var _arg2 C.int

	_arg0 = (*C.GdkPixbufLoader)(unsafe.Pointer(l.Native()))
	_arg1 = C.int(width)
	_arg2 = C.int(height)

	C.gdk_pixbuf_loader_set_size(_arg0, _arg1, _arg2)
}

// Write: this will cause a pixbuf loader to parse the next @count bytes of
// an image. It will return true if the data was loaded successfully, and
// false if an error occurred. In the latter case, the loader will be
// closed, and will not accept further writes. If false is returned, @error
// will be set to an error from the K_PIXBUF_ERROR or FILE_ERROR domains.
func (l pixbufLoader) Write() error {
	var _arg0 *C.GdkPixbufLoader

	_arg0 = (*C.GdkPixbufLoader)(unsafe.Pointer(l.Native()))

	var _cerr *C.GError

	C.gdk_pixbuf_loader_write(_arg0, _cerr)

	var _goerr error

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}
