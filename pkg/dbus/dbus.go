// Code generated by girgen. DO NOT EDIT.

package dbus

import (
	"unsafe"

	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: dbus-1
// #cgo CFLAGS: -Wno-deprecated-declarations
//
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.dbus_connection_get_type()), F: marshalConnection},
	})
}

type BusType int

const (
	BusTypeSession BusType = 0

	BusTypeSystem BusType = 1

	BusTypeStarter BusType = 2
)

type Connection struct {
	native C.DBusConnection
}

// WrapConnection wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapConnection(ptr unsafe.Pointer) *Connection {
	if ptr == nil {
		return nil
	}

	return (*Connection)(ptr)
}

func marshalConnection(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapConnection(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (c *Connection) Native() unsafe.Pointer {
	return unsafe.Pointer(&c.native)
}

type Error struct {
	native C.DBusError
}

// WrapError wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapError(ptr unsafe.Pointer) *Error {
	if ptr == nil {
		return nil
	}

	return (*Error)(ptr)
}

func marshalError(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapError(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (e *Error) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

type Message struct {
	native C.DBusMessage
}

// WrapMessage wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapMessage(ptr unsafe.Pointer) *Message {
	if ptr == nil {
		return nil
	}

	return (*Message)(ptr)
}

func marshalMessage(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapMessage(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (m *Message) Native() unsafe.Pointer {
	return unsafe.Pointer(&m.native)
}

type MessageIter struct {
	native C.DBusMessageIter
}

// WrapMessageIter wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapMessageIter(ptr unsafe.Pointer) *MessageIter {
	if ptr == nil {
		return nil
	}

	return (*MessageIter)(ptr)
}

func marshalMessageIter(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapMessageIter(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (m *MessageIter) Native() unsafe.Pointer {
	return unsafe.Pointer(&m.native)
}

type PendingCall struct {
	native C.DBusPendingCall
}

// WrapPendingCall wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPendingCall(ptr unsafe.Pointer) *PendingCall {
	if ptr == nil {
		return nil
	}

	return (*PendingCall)(ptr)
}

func marshalPendingCall(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPendingCall(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (p *PendingCall) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}
