// Code generated by girgen. DO NOT EDIT.

package gsk

import (
	"github.com/diamondburned/gotk4/internal/gerror"
	"github.com/diamondburned/gotk4/pkg/cairo"
	"github.com/diamondburned/gotk4/pkg/gdk/v4"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4 glib-2.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gsk/gsk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gsk_renderer_get_type()), F: marshalRenderer},
	})
}

// Renderer: `GskRenderer` is a class that renders a scene graph defined via a
// tree of [class@Gsk.RenderNode] instances.
//
// Typically you will use a `GskRenderer` instance to repeatedly call
// [method@Gsk.Renderer.render] to update the contents of its associated
// [class@Gdk.Surface].
//
// It is necessary to realize a `GskRenderer` instance using
// [method@Gsk.Renderer.realize] before calling [method@Gsk.Renderer.render], in
// order to create the appropriate windowing system resources needed to render
// the scene.
type Renderer interface {
	gextras.Objector

	// IsRealized checks whether the @renderer is realized or not.
	IsRealized() bool
	// Realize creates the resources needed by the @renderer to render the scene
	// graph.
	Realize(surface gdk.Surface) error
	// Render renders the scene graph, described by a tree of `GskRenderNode`
	// instances, ensuring that the given @region gets redrawn.
	//
	// Renderers must ensure that changes of the contents given by the @root
	// node as well as the area given by @region are redrawn. They are however
	// free to not redraw any pixel outside of @region if they can guarantee
	// that it didn't change.
	//
	// The @renderer will acquire a reference on the `GskRenderNode` tree while
	// the rendering is in progress.
	Render(root RenderNode, region *cairo.Region)
	// Unrealize releases all the resources created by gsk_renderer_realize().
	Unrealize()
}

// renderer implements the Renderer interface.
type renderer struct {
	gextras.Objector
}

var _ Renderer = (*renderer)(nil)

// WrapRenderer wraps a GObject to the right type. It is
// primarily used internally.
func WrapRenderer(obj *externglib.Object) Renderer {
	return Renderer{
		Objector: obj,
	}
}

func marshalRenderer(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapRenderer(obj), nil
}

// IsRealized checks whether the @renderer is realized or not.
func (r renderer) IsRealized() bool {
	var _arg0 *C.GskRenderer // out

	_arg0 = (*C.GskRenderer)(unsafe.Pointer(r.Native()))

	var _cret C.gboolean // in

	_cret = C.gsk_renderer_is_realized(_arg0)

	var _ok bool // out

	if _cret {
		_ok = true
	}

	return _ok
}

// Realize creates the resources needed by the @renderer to render the scene
// graph.
func (r renderer) Realize(surface gdk.Surface) error {
	var _arg0 *C.GskRenderer // out
	var _arg1 *C.GdkSurface  // out

	_arg0 = (*C.GskRenderer)(unsafe.Pointer(r.Native()))
	_arg1 = (*C.GdkSurface)(unsafe.Pointer(surface.Native()))

	var _cerr *C.GError // in

	C.gsk_renderer_realize(_arg0, _arg1, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

// Render renders the scene graph, described by a tree of `GskRenderNode`
// instances, ensuring that the given @region gets redrawn.
//
// Renderers must ensure that changes of the contents given by the @root
// node as well as the area given by @region are redrawn. They are however
// free to not redraw any pixel outside of @region if they can guarantee
// that it didn't change.
//
// The @renderer will acquire a reference on the `GskRenderNode` tree while
// the rendering is in progress.
func (r renderer) Render(root RenderNode, region *cairo.Region) {
	var _arg0 *C.GskRenderer    // out
	var _arg1 *C.GskRenderNode  // out
	var _arg2 *C.cairo_region_t // out

	_arg0 = (*C.GskRenderer)(unsafe.Pointer(r.Native()))
	_arg1 = (*C.GskRenderNode)(unsafe.Pointer(root.Native()))
	_arg2 = (*C.cairo_region_t)(unsafe.Pointer(region.Native()))

	C.gsk_renderer_render(_arg0, _arg1, _arg2)
}

// Unrealize releases all the resources created by gsk_renderer_realize().
func (r renderer) Unrealize() {
	var _arg0 *C.GskRenderer // out

	_arg0 = (*C.GskRenderer)(unsafe.Pointer(r.Native()))

	C.gsk_renderer_unrealize(_arg0)
}
