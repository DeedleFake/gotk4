// Code generated by girgen. DO NOT EDIT.

package gsk

import (
	"unsafe"

	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gsk/gsk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gsk_transform_get_type()), F: marshalTransform},
	})
}

// Transform: `GskTransform` is an object to describe transform matrices.
//
// Unlike `graphene_matrix_t`, `GskTransform` retains the steps in how a
// transform was constructed, and allows inspecting them. It is modeled after
// the way CSS describes transforms.
//
// `GskTransform` objects are immutable and cannot be changed after creation.
// This means code can safely expose them as properties of objects without
// having to worry about others changing them.
type Transform C.GskTransform

// WrapTransform wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapTransform(ptr unsafe.Pointer) *Transform {
	return (*Transform)(ptr)
}

func marshalTransform(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return (*Transform)(unsafe.Pointer(b)), nil
}

// NewTransform constructs a struct Transform.
func NewTransform() *Transform {
	var _cret *C.GskTransform // in

	_cret = C.gsk_transform_new()

	var _transform *Transform // out

	_transform = (*Transform)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(&_transform, func(v **Transform) {
		C.free(unsafe.Pointer(v))
	})

	return _transform
}

// Native returns the underlying C source pointer.
func (t *Transform) Native() unsafe.Pointer {
	return unsafe.Pointer(t)
}

// Equal releases a reference on the given `GskTransform`.
//
// If the reference was the last, the resources associated to the @self are
// freed.
func (s *Transform) Equal(second *Transform) bool {
	var _arg0 *C.GskTransform // out
	var _arg1 *C.GskTransform // out
	var _cret C.gboolean      // in

	_arg0 = (*C.GskTransform)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.GskTransform)(unsafe.Pointer(second.Native()))

	_cret = C.gsk_transform_equal(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Category releases a reference on the given `GskTransform`.
//
// If the reference was the last, the resources associated to the @self are
// freed.
func (s *Transform) Category() TransformCategory {
	var _arg0 *C.GskTransform        // out
	var _cret C.GskTransformCategory // in

	_arg0 = (*C.GskTransform)(unsafe.Pointer(s.Native()))

	_cret = C.gsk_transform_get_category(_arg0)

	var _transformCategory TransformCategory // out

	_transformCategory = TransformCategory(_cret)

	return _transformCategory
}

// Invert releases a reference on the given `GskTransform`.
//
// If the reference was the last, the resources associated to the @self are
// freed.
func (s *Transform) Invert() *Transform {
	var _arg0 *C.GskTransform // out
	var _cret *C.GskTransform // in

	_arg0 = (*C.GskTransform)(unsafe.Pointer(s.Native()))

	_cret = C.gsk_transform_invert(_arg0)

	var _transform *Transform // out

	_transform = (*Transform)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(&_transform, func(v **Transform) {
		C.free(unsafe.Pointer(v))
	})

	return _transform
}

// Matrix releases a reference on the given `GskTransform`.
//
// If the reference was the last, the resources associated to the @self are
// freed.
func (s *Transform) Matrix(matrix *graphene.Matrix) *Transform {
	var _arg0 *C.GskTransform      // out
	var _arg1 *C.graphene_matrix_t // out
	var _cret *C.GskTransform      // in

	_arg0 = (*C.GskTransform)(unsafe.Pointer(n.Native()))
	_arg1 = (*C.graphene_matrix_t)(unsafe.Pointer(matrix.Native()))

	_cret = C.gsk_transform_matrix(_arg0, _arg1)

	var _transform *Transform // out

	_transform = (*Transform)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(&_transform, func(v **Transform) {
		C.free(unsafe.Pointer(v))
	})

	return _transform
}

// Perspective releases a reference on the given `GskTransform`.
//
// If the reference was the last, the resources associated to the @self are
// freed.
func (s *Transform) Perspective(depth float32) *Transform {
	var _arg0 *C.GskTransform // out
	var _arg1 C.float         // out
	var _cret *C.GskTransform // in

	_arg0 = (*C.GskTransform)(unsafe.Pointer(n.Native()))
	_arg1 = C.float(depth)

	_cret = C.gsk_transform_perspective(_arg0, _arg1)

	var _transform *Transform // out

	_transform = (*Transform)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(&_transform, func(v **Transform) {
		C.free(unsafe.Pointer(v))
	})

	return _transform
}

// Ref releases a reference on the given `GskTransform`.
//
// If the reference was the last, the resources associated to the @self are
// freed.
func (s *Transform) Ref() *Transform {
	var _arg0 *C.GskTransform // out
	var _cret *C.GskTransform // in

	_arg0 = (*C.GskTransform)(unsafe.Pointer(s.Native()))

	_cret = C.gsk_transform_ref(_arg0)

	var _transform *Transform // out

	_transform = (*Transform)(unsafe.Pointer(_cret))

	return _transform
}

// Rotate releases a reference on the given `GskTransform`.
//
// If the reference was the last, the resources associated to the @self are
// freed.
func (s *Transform) Rotate(angle float32) *Transform {
	var _arg0 *C.GskTransform // out
	var _arg1 C.float         // out
	var _cret *C.GskTransform // in

	_arg0 = (*C.GskTransform)(unsafe.Pointer(n.Native()))
	_arg1 = C.float(angle)

	_cret = C.gsk_transform_rotate(_arg0, _arg1)

	var _transform *Transform // out

	_transform = (*Transform)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(&_transform, func(v **Transform) {
		C.free(unsafe.Pointer(v))
	})

	return _transform
}

// Rotate3D releases a reference on the given `GskTransform`.
//
// If the reference was the last, the resources associated to the @self are
// freed.
func (s *Transform) Rotate3D(angle float32, axis *graphene.Vec3) *Transform {
	var _arg0 *C.GskTransform    // out
	var _arg1 C.float            // out
	var _arg2 *C.graphene_vec3_t // out
	var _cret *C.GskTransform    // in

	_arg0 = (*C.GskTransform)(unsafe.Pointer(n.Native()))
	_arg1 = C.float(angle)
	_arg2 = (*C.graphene_vec3_t)(unsafe.Pointer(axis.Native()))

	_cret = C.gsk_transform_rotate_3d(_arg0, _arg1, _arg2)

	var _transform *Transform // out

	_transform = (*Transform)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(&_transform, func(v **Transform) {
		C.free(unsafe.Pointer(v))
	})

	return _transform
}

// Scale releases a reference on the given `GskTransform`.
//
// If the reference was the last, the resources associated to the @self are
// freed.
func (s *Transform) Scale(factorX float32, factorY float32) *Transform {
	var _arg0 *C.GskTransform // out
	var _arg1 C.float         // out
	var _arg2 C.float         // out
	var _cret *C.GskTransform // in

	_arg0 = (*C.GskTransform)(unsafe.Pointer(n.Native()))
	_arg1 = C.float(factorX)
	_arg2 = C.float(factorY)

	_cret = C.gsk_transform_scale(_arg0, _arg1, _arg2)

	var _transform *Transform // out

	_transform = (*Transform)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(&_transform, func(v **Transform) {
		C.free(unsafe.Pointer(v))
	})

	return _transform
}

// Scale3D releases a reference on the given `GskTransform`.
//
// If the reference was the last, the resources associated to the @self are
// freed.
func (s *Transform) Scale3D(factorX float32, factorY float32, factorZ float32) *Transform {
	var _arg0 *C.GskTransform // out
	var _arg1 C.float         // out
	var _arg2 C.float         // out
	var _arg3 C.float         // out
	var _cret *C.GskTransform // in

	_arg0 = (*C.GskTransform)(unsafe.Pointer(n.Native()))
	_arg1 = C.float(factorX)
	_arg2 = C.float(factorY)
	_arg3 = C.float(factorZ)

	_cret = C.gsk_transform_scale_3d(_arg0, _arg1, _arg2, _arg3)

	var _transform *Transform // out

	_transform = (*Transform)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(&_transform, func(v **Transform) {
		C.free(unsafe.Pointer(v))
	})

	return _transform
}

// To2D releases a reference on the given `GskTransform`.
//
// If the reference was the last, the resources associated to the @self are
// freed.
func (s *Transform) To2D() (outXx float32, outYx float32, outXy float32, outYy float32, outDx float32, outDy float32) {
	var _arg0 *C.GskTransform // out
	var _arg1 C.float         // in
	var _arg2 C.float         // in
	var _arg3 C.float         // in
	var _arg4 C.float         // in
	var _arg5 C.float         // in
	var _arg6 C.float         // in

	_arg0 = (*C.GskTransform)(unsafe.Pointer(s.Native()))

	C.gsk_transform_to_2d(_arg0, &_arg1, &_arg2, &_arg3, &_arg4, &_arg5, &_arg6)

	var _outXx float32 // out
	var _outYx float32 // out
	var _outXy float32 // out
	var _outYy float32 // out
	var _outDx float32 // out
	var _outDy float32 // out

	_outXx = float32(_arg1)
	_outYx = float32(_arg2)
	_outXy = float32(_arg3)
	_outYy = float32(_arg4)
	_outDx = float32(_arg5)
	_outDy = float32(_arg6)

	return _outXx, _outYx, _outXy, _outYy, _outDx, _outDy
}

// ToAffine releases a reference on the given `GskTransform`.
//
// If the reference was the last, the resources associated to the @self are
// freed.
func (s *Transform) ToAffine() (outScaleX float32, outScaleY float32, outDx float32, outDy float32) {
	var _arg0 *C.GskTransform // out
	var _arg1 C.float         // in
	var _arg2 C.float         // in
	var _arg3 C.float         // in
	var _arg4 C.float         // in

	_arg0 = (*C.GskTransform)(unsafe.Pointer(s.Native()))

	C.gsk_transform_to_affine(_arg0, &_arg1, &_arg2, &_arg3, &_arg4)

	var _outScaleX float32 // out
	var _outScaleY float32 // out
	var _outDx float32     // out
	var _outDy float32     // out

	_outScaleX = float32(_arg1)
	_outScaleY = float32(_arg2)
	_outDx = float32(_arg3)
	_outDy = float32(_arg4)

	return _outScaleX, _outScaleY, _outDx, _outDy
}

// ToMatrix releases a reference on the given `GskTransform`.
//
// If the reference was the last, the resources associated to the @self are
// freed.
func (s *Transform) ToMatrix() graphene.Matrix {
	var _arg0 *C.GskTransform     // out
	var _arg1 C.graphene_matrix_t // in

	_arg0 = (*C.GskTransform)(unsafe.Pointer(s.Native()))

	C.gsk_transform_to_matrix(_arg0, &_arg1)

	var _outMatrix graphene.Matrix // out

	{
		var refTmpIn *C.graphene_matrix_t
		var refTmpOut *graphene.Matrix

		in0 := &_arg1
		refTmpIn = in0

		refTmpOut = (*graphene.Matrix)(unsafe.Pointer(refTmpIn))

		_outMatrix = *refTmpOut
	}

	return _outMatrix
}

// String releases a reference on the given `GskTransform`.
//
// If the reference was the last, the resources associated to the @self are
// freed.
func (s *Transform) String() string {
	var _arg0 *C.GskTransform // out
	var _cret *C.char         // in

	_arg0 = (*C.GskTransform)(unsafe.Pointer(s.Native()))

	_cret = C.gsk_transform_to_string(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// ToTranslate releases a reference on the given `GskTransform`.
//
// If the reference was the last, the resources associated to the @self are
// freed.
func (s *Transform) ToTranslate() (outDx float32, outDy float32) {
	var _arg0 *C.GskTransform // out
	var _arg1 C.float         // in
	var _arg2 C.float         // in

	_arg0 = (*C.GskTransform)(unsafe.Pointer(s.Native()))

	C.gsk_transform_to_translate(_arg0, &_arg1, &_arg2)

	var _outDx float32 // out
	var _outDy float32 // out

	_outDx = float32(_arg1)
	_outDy = float32(_arg2)

	return _outDx, _outDy
}

// Transform releases a reference on the given `GskTransform`.
//
// If the reference was the last, the resources associated to the @self are
// freed.
func (s *Transform) Transform(other *Transform) *Transform {
	var _arg0 *C.GskTransform // out
	var _arg1 *C.GskTransform // out
	var _cret *C.GskTransform // in

	_arg0 = (*C.GskTransform)(unsafe.Pointer(n.Native()))
	_arg1 = (*C.GskTransform)(unsafe.Pointer(other.Native()))

	_cret = C.gsk_transform_transform(_arg0, _arg1)

	var _transform *Transform // out

	_transform = (*Transform)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(&_transform, func(v **Transform) {
		C.free(unsafe.Pointer(v))
	})

	return _transform
}

// TransformBounds releases a reference on the given `GskTransform`.
//
// If the reference was the last, the resources associated to the @self are
// freed.
func (s *Transform) TransformBounds(rect *graphene.Rect) graphene.Rect {
	var _arg0 *C.GskTransform    // out
	var _arg1 *C.graphene_rect_t // out
	var _arg2 C.graphene_rect_t  // in

	_arg0 = (*C.GskTransform)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.graphene_rect_t)(unsafe.Pointer(rect.Native()))

	C.gsk_transform_transform_bounds(_arg0, _arg1, &_arg2)

	var _outRect graphene.Rect // out

	{
		var refTmpIn *C.graphene_rect_t
		var refTmpOut *graphene.Rect

		in0 := &_arg2
		refTmpIn = in0

		refTmpOut = (*graphene.Rect)(unsafe.Pointer(refTmpIn))

		_outRect = *refTmpOut
	}

	return _outRect
}

// TransformPoint releases a reference on the given `GskTransform`.
//
// If the reference was the last, the resources associated to the @self are
// freed.
func (s *Transform) TransformPoint(point *graphene.Point) graphene.Point {
	var _arg0 *C.GskTransform     // out
	var _arg1 *C.graphene_point_t // out
	var _arg2 C.graphene_point_t  // in

	_arg0 = (*C.GskTransform)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.graphene_point_t)(unsafe.Pointer(point.Native()))

	C.gsk_transform_transform_point(_arg0, _arg1, &_arg2)

	var _outPoint graphene.Point // out

	{
		var refTmpIn *C.graphene_point_t
		var refTmpOut *graphene.Point

		in0 := &_arg2
		refTmpIn = in0

		refTmpOut = (*graphene.Point)(unsafe.Pointer(refTmpIn))

		_outPoint = *refTmpOut
	}

	return _outPoint
}

// Translate releases a reference on the given `GskTransform`.
//
// If the reference was the last, the resources associated to the @self are
// freed.
func (s *Transform) Translate(point *graphene.Point) *Transform {
	var _arg0 *C.GskTransform     // out
	var _arg1 *C.graphene_point_t // out
	var _cret *C.GskTransform     // in

	_arg0 = (*C.GskTransform)(unsafe.Pointer(n.Native()))
	_arg1 = (*C.graphene_point_t)(unsafe.Pointer(point.Native()))

	_cret = C.gsk_transform_translate(_arg0, _arg1)

	var _transform *Transform // out

	_transform = (*Transform)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(&_transform, func(v **Transform) {
		C.free(unsafe.Pointer(v))
	})

	return _transform
}

// Translate3D releases a reference on the given `GskTransform`.
//
// If the reference was the last, the resources associated to the @self are
// freed.
func (s *Transform) Translate3D(point *graphene.Point3D) *Transform {
	var _arg0 *C.GskTransform       // out
	var _arg1 *C.graphene_point3d_t // out
	var _cret *C.GskTransform       // in

	_arg0 = (*C.GskTransform)(unsafe.Pointer(n.Native()))
	_arg1 = (*C.graphene_point3d_t)(unsafe.Pointer(point.Native()))

	_cret = C.gsk_transform_translate_3d(_arg0, _arg1)

	var _transform *Transform // out

	_transform = (*Transform)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(&_transform, func(v **Transform) {
		C.free(unsafe.Pointer(v))
	})

	return _transform
}

// Unref releases a reference on the given `GskTransform`.
//
// If the reference was the last, the resources associated to the @self are
// freed.
func (s *Transform) Unref() {
	var _arg0 *C.GskTransform // out

	_arg0 = (*C.GskTransform)(unsafe.Pointer(s.Native()))

	C.gsk_transform_unref(_arg0)
}
