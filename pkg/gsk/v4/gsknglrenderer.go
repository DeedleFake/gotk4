// Code generated by girgen. DO NOT EDIT.

package gsk

import (
	"unsafe"

	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gsk/gsk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gsk_ngl_renderer_get_type()), F: marshalNglRenderer},
	})
}

type NglRenderer interface {
	Renderer
}

// nglRenderer implements the NglRenderer class.
type nglRenderer struct {
	Renderer
}

// WrapNglRenderer wraps a GObject to the right type. It is
// primarily used internally.
func WrapNglRenderer(obj *externglib.Object) NglRenderer {
	return nglRenderer{
		Renderer: WrapRenderer(obj),
	}
}

func marshalNglRenderer(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapNglRenderer(obj), nil
}

func NewNglRenderer() NglRenderer {
	var _cret *C.GskRenderer // in

	_cret = C.gsk_ngl_renderer_new()

	var _nglRenderer NglRenderer // out

	_nglRenderer = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(NglRenderer)

	return _nglRenderer
}
