// Code generated by girgen. DO NOT EDIT.

package gsk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gsk/gsk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gsk_ngl_renderer_get_type()), F: marshalNglRenderer},
	})
}

type NglRenderer interface {
	gextras.Objector

	privateNglRendererClass()
}

// NglRendererClass implements the NglRenderer interface.
type NglRendererClass struct {
	RendererClass
}

var _ NglRenderer = (*NglRendererClass)(nil)

func wrapNglRenderer(obj *externglib.Object) NglRenderer {
	return &NglRendererClass{
		RendererClass: RendererClass{
			Object: obj,
		},
	}
}

func marshalNglRenderer(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapNglRenderer(obj), nil
}

// NewNglRenderer creates a new Renderer using the new OpenGL renderer.
func NewNglRenderer() NglRenderer {
	var _cret *C.GskRenderer // in

	_cret = C.gsk_ngl_renderer_new()

	var _nglRenderer NglRenderer // out

	_nglRenderer = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(NglRenderer)

	return _nglRenderer
}

func (*NglRendererClass) privateNglRendererClass() {}
