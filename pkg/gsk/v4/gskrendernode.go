// Code generated by girgen. DO NOT EDIT.

package gsk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/box"
	"github.com/diamondburned/gotk4/internal/gerror"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <gsk/gsk.h>
import "C"

// ParseErrorFunc: type of callback that is called when an error occurs during
// node deserialization.
type ParseErrorFunc func(start *ParseLocation, end *ParseLocation, err error)

//export gotk4_ParseErrorFunc
func gotk4_ParseErrorFunc(arg0 *C.GskParseLocation, arg1 *C.GskParseLocation, arg2 *C.GError, arg3 C.gpointer) {
	v := box.Get(uintptr(arg3))
	if v == nil {
		panic(`callback not found`)
	}

	var start *ParseLocation // out
	var end *ParseLocation   // out
	var err error            // out

	start = WrapParseLocation(unsafe.Pointer(arg0))
	end = WrapParseLocation(unsafe.Pointer(arg1))
	err = gerror.Take(unsafe.Pointer(arg2))

	fn := v.(ParseErrorFunc)
	fn(start, end, err)
}

// ColorStop: a color stop in a gradient node.
type ColorStop struct {
	native C.GskColorStop
}

// WrapColorStop wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapColorStop(ptr unsafe.Pointer) *ColorStop {
	if ptr == nil {
		return nil
	}

	return (*ColorStop)(ptr)
}

// Native returns the underlying C source pointer.
func (c *ColorStop) Native() unsafe.Pointer {
	return unsafe.Pointer(&c.native)
}

// Offset gets the field inside the struct.
func (c *ColorStop) Offset() float32 {
	var v float32 // out
	v = (float32)(c.native.offset)
	return v
}

// ParseLocation: a location in a parse buffer.
type ParseLocation struct {
	native C.GskParseLocation
}

// WrapParseLocation wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapParseLocation(ptr unsafe.Pointer) *ParseLocation {
	if ptr == nil {
		return nil
	}

	return (*ParseLocation)(ptr)
}

// Native returns the underlying C source pointer.
func (p *ParseLocation) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

// Bytes gets the field inside the struct.
func (p *ParseLocation) Bytes() uint {
	var v uint // out
	v = (uint)(p.native.bytes)
	return v
}

// Chars gets the field inside the struct.
func (p *ParseLocation) Chars() uint {
	var v uint // out
	v = (uint)(p.native.chars)
	return v
}

// Lines gets the field inside the struct.
func (p *ParseLocation) Lines() uint {
	var v uint // out
	v = (uint)(p.native.lines)
	return v
}

// LineBytes gets the field inside the struct.
func (p *ParseLocation) LineBytes() uint {
	var v uint // out
	v = (uint)(p.native.line_bytes)
	return v
}

// LineChars gets the field inside the struct.
func (p *ParseLocation) LineChars() uint {
	var v uint // out
	v = (uint)(p.native.line_chars)
	return v
}

// Shadow: the shadow parameters in a shadow node.
type Shadow struct {
	native C.GskShadow
}

// WrapShadow wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapShadow(ptr unsafe.Pointer) *Shadow {
	if ptr == nil {
		return nil
	}

	return (*Shadow)(ptr)
}

// Native returns the underlying C source pointer.
func (s *Shadow) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

// Dx gets the field inside the struct.
func (s *Shadow) Dx() float32 {
	var v float32 // out
	v = (float32)(s.native.dx)
	return v
}

// Dy gets the field inside the struct.
func (s *Shadow) Dy() float32 {
	var v float32 // out
	v = (float32)(s.native.dy)
	return v
}

// Radius gets the field inside the struct.
func (s *Shadow) Radius() float32 {
	var v float32 // out
	v = (float32)(s.native.radius)
	return v
}
