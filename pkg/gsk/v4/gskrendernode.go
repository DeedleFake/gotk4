// Code generated by girgen. DO NOT EDIT.

package gsk

import (
	"runtime/cgo"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/cairo"
	"github.com/diamondburned/gotk4/pkg/core/gbox"
	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/graphene"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gsk/gsk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gsk_render_node_get_type()), F: marshalRenderNoder},
	})
}

// ParseErrorFunc: type of callback that is called when an error occurs during
// node deserialization.
type ParseErrorFunc func(start *ParseLocation, end *ParseLocation, err error, userData cgo.Handle)

//export gotk4_ParseErrorFunc
func gotk4_ParseErrorFunc(arg0 *C.GskParseLocation, arg1 *C.GskParseLocation, arg2 *C.GError, arg3 C.gpointer) {
	v := gbox.Get(uintptr(arg3))
	if v == nil {
		panic(`callback not found`)
	}

	var start *ParseLocation // out
	var end *ParseLocation   // out
	var err error            // out
	var userData cgo.Handle  // out

	start = (*ParseLocation)(unsafe.Pointer(arg0))
	end = (*ParseLocation)(unsafe.Pointer(arg1))
	err = gerror.Take(unsafe.Pointer(arg2))
	userData = (cgo.Handle)(unsafe.Pointer(arg3))

	fn := v.(ParseErrorFunc)
	fn(start, end, err, userData)
}

// RenderNoder describes RenderNode's methods.
type RenderNoder interface {
	// Draw the contents of @node to the given cairo context.
	Draw(cr *cairo.Context)
	// Bounds retrieves the boundaries of the @node.
	Bounds() graphene.Rect
	// NodeType returns the type of the @node.
	NodeType() RenderNodeType
	// Ref acquires a reference on the given `GskRenderNode`.
	ref() *RenderNode
	// Unref releases a reference on the given `GskRenderNode`.
	unref()
	// WriteToFile: this function is equivalent to calling
	// gsk_render_node_serialize() followed by g_file_set_contents().
	WriteToFile(filename string) error
}

// RenderNode: `GskRenderNode` is the basic block in a scene graph to be
// rendered using `GskRenderer`.
//
// Each node has a parent, except the top-level node; each node may have
// children nodes.
//
// Each node has an associated drawing surface, which has the size of the
// rectangle set when creating it.
//
// Render nodes are meant to be transient; once they have been associated to a
// [class@Gsk.Renderer] it's safe to release any reference you have on them. All
// [class@Gsk.RenderNode]s are immutable, you can only specify their properties
// during construction.
type RenderNode struct {
	*externglib.Object
}

var (
	_ RenderNoder     = (*RenderNode)(nil)
	_ gextras.Nativer = (*RenderNode)(nil)
)

func wrapRenderNode(obj *externglib.Object) RenderNoder {
	return &RenderNode{
		Object: obj,
	}
}

func marshalRenderNoder(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapRenderNode(obj), nil
}

// Draw the contents of @node to the given cairo context.
//
// Typically, you'll use this function to implement fallback rendering of
// `GskRenderNode`s on an intermediate Cairo context, instead of using the
// drawing context associated to a `GdkSurface`'s rendering buffer.
//
// For advanced nodes that cannot be supported using Cairo, in particular for
// nodes doing 3D operations, this function may fail.
func (node *RenderNode) Draw(cr *cairo.Context) {
	var _arg0 *C.GskRenderNode // out
	var _arg1 *C.cairo_t       // out

	_arg0 = (*C.GskRenderNode)(unsafe.Pointer(node.Native()))
	_arg1 = (*C.cairo_t)(unsafe.Pointer(cr))

	C.gsk_render_node_draw(_arg0, _arg1)
}

// Bounds retrieves the boundaries of the @node.
//
// The node will not draw outside of its boundaries.
func (node *RenderNode) Bounds() graphene.Rect {
	var _arg0 *C.GskRenderNode // out
	var _bounds graphene.Rect

	_arg0 = (*C.GskRenderNode)(unsafe.Pointer(node.Native()))

	C.gsk_render_node_get_bounds(_arg0, (*C.graphene_rect_t)(unsafe.Pointer(&_bounds)))

	return _bounds
}

// NodeType returns the type of the @node.
func (node *RenderNode) NodeType() RenderNodeType {
	var _arg0 *C.GskRenderNode    // out
	var _cret C.GskRenderNodeType // in

	_arg0 = (*C.GskRenderNode)(unsafe.Pointer(node.Native()))

	_cret = C.gsk_render_node_get_node_type(_arg0)

	var _renderNodeType RenderNodeType // out

	_renderNodeType = RenderNodeType(_cret)

	return _renderNodeType
}

// Ref acquires a reference on the given `GskRenderNode`.
func (node *RenderNode) ref() *RenderNode {
	var _arg0 *C.GskRenderNode // out
	var _cret *C.GskRenderNode // in

	_arg0 = (*C.GskRenderNode)(unsafe.Pointer(node.Native()))

	_cret = C.gsk_render_node_ref(_arg0)

	var _renderNode *RenderNode // out

	_renderNode = (gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret)))).(*RenderNode)

	return _renderNode
}

// Unref releases a reference on the given `GskRenderNode`.
//
// If the reference was the last, the resources associated to the @node are
// freed.
func (node *RenderNode) unref() {
	var _arg0 *C.GskRenderNode // out

	_arg0 = (*C.GskRenderNode)(unsafe.Pointer(node.Native()))

	C.gsk_render_node_unref(_arg0)
}

// WriteToFile: this function is equivalent to calling
// gsk_render_node_serialize() followed by g_file_set_contents().
//
// See those two functions for details on the arguments.
//
// It is mostly intended for use inside a debugger to quickly dump a render node
// to a file for later inspection.
func (node *RenderNode) WriteToFile(filename string) error {
	var _arg0 *C.GskRenderNode // out
	var _arg1 *C.char          // out
	var _cerr *C.GError        // in

	_arg0 = (*C.GskRenderNode)(unsafe.Pointer(node.Native()))
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(filename)))
	defer C.free(unsafe.Pointer(_arg1))

	C.gsk_render_node_write_to_file(_arg0, _arg1, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

// ColorStop: color stop in a gradient node.
type ColorStop struct {
	native C.GskColorStop
}

// Native returns the underlying C source pointer.
func (c *ColorStop) Native() unsafe.Pointer {
	return unsafe.Pointer(&c.native)
}

// ParseLocation: location in a parse buffer.
type ParseLocation struct {
	native C.GskParseLocation
}

// Native returns the underlying C source pointer.
func (p *ParseLocation) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

// Shadow: shadow parameters in a shadow node.
type Shadow struct {
	native C.GskShadow
}

// Native returns the underlying C source pointer.
func (s *Shadow) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}
