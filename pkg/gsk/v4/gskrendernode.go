// Code generated by girgen. DO NOT EDIT.

package gsk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/core/gerror"
	"github.com/diamondburned/gotk4/core/gextras"
	"github.com/diamondburned/gotk4/pkg/cairo"
	"github.com/diamondburned/gotk4/pkg/graphene"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <gsk/gsk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gsk_render_node_get_type()), F: marshalRenderNode},
	})
}

// RenderNode: `GskRenderNode` is the basic block in a scene graph to be
// rendered using `GskRenderer`.
//
// Each node has a parent, except the top-level node; each node may have
// children nodes.
//
// Each node has an associated drawing surface, which has the size of the
// rectangle set when creating it.
//
// Render nodes are meant to be transient; once they have been associated to a
// [class@Gsk.Renderer] it's safe to release any reference you have on them. All
// [class@Gsk.RenderNode]s are immutable, you can only specify their properties
// during construction.
type RenderNode interface {
	gextras.Objector

	// DrawRenderNode:
	DrawRenderNode(cr *cairo.Context)
	// Bounds:
	Bounds() graphene.Rect
	// NodeType:
	NodeType() RenderNodeType
	// RefRenderNode:
	RefRenderNode() RenderNode
	// UnrefRenderNode:
	UnrefRenderNode()
	// WriteToFileRenderNode:
	WriteToFileRenderNode(filename string) error
}

// renderNode implements the RenderNode class.
type renderNode struct {
	gextras.Objector
}

// WrapRenderNode wraps a GObject to the right type. It is
// primarily used internally.
func WrapRenderNode(obj *externglib.Object) RenderNode {
	return renderNode{
		Objector: obj,
	}
}

func marshalRenderNode(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapRenderNode(obj), nil
}

func (n renderNode) DrawRenderNode(cr *cairo.Context) {
	var _arg0 *C.GskRenderNode // out
	var _arg1 *C.cairo_t       // out

	_arg0 = (*C.GskRenderNode)(unsafe.Pointer(n.Native()))
	_arg1 = (*C.cairo_t)(unsafe.Pointer(cr.Native()))

	C.gsk_render_node_draw(_arg0, _arg1)
}

func (n renderNode) Bounds() graphene.Rect {
	var _arg0 *C.GskRenderNode  // out
	var _arg1 C.graphene_rect_t // in

	_arg0 = (*C.GskRenderNode)(unsafe.Pointer(n.Native()))

	C.gsk_render_node_get_bounds(_arg0, &_arg1)

	var _bounds graphene.Rect // out

	{
		var refTmpIn *C.graphene_rect_t
		var refTmpOut *graphene.Rect

		in0 := &_arg1
		refTmpIn = in0

		refTmpOut = (*graphene.Rect)(unsafe.Pointer(refTmpIn))

		_bounds = *refTmpOut
	}

	return _bounds
}

func (n renderNode) NodeType() RenderNodeType {
	var _arg0 *C.GskRenderNode    // out
	var _cret C.GskRenderNodeType // in

	_arg0 = (*C.GskRenderNode)(unsafe.Pointer(n.Native()))

	_cret = C.gsk_render_node_get_node_type(_arg0)

	var _renderNodeType RenderNodeType // out

	_renderNodeType = RenderNodeType(_cret)

	return _renderNodeType
}

func (n renderNode) RefRenderNode() RenderNode {
	var _arg0 *C.GskRenderNode // out
	var _cret *C.GskRenderNode // in

	_arg0 = (*C.GskRenderNode)(unsafe.Pointer(n.Native()))

	_cret = C.gsk_render_node_ref(_arg0)

	var _renderNode RenderNode // out

	_renderNode = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(RenderNode)

	return _renderNode
}

func (n renderNode) UnrefRenderNode() {
	var _arg0 *C.GskRenderNode // out

	_arg0 = (*C.GskRenderNode)(unsafe.Pointer(n.Native()))

	C.gsk_render_node_unref(_arg0)
}

func (n renderNode) WriteToFileRenderNode(filename string) error {
	var _arg0 *C.GskRenderNode // out
	var _arg1 *C.char          // out
	var _cerr *C.GError        // in

	_arg0 = (*C.GskRenderNode)(unsafe.Pointer(n.Native()))
	_arg1 = (*C.char)(C.CString(filename))
	defer C.free(unsafe.Pointer(_arg1))

	C.gsk_render_node_write_to_file(_arg0, _arg1, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

// ColorStop: a color stop in a gradient node.
type ColorStop C.GskColorStop

// WrapColorStop wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapColorStop(ptr unsafe.Pointer) *ColorStop {
	return (*ColorStop)(ptr)
}

// Native returns the underlying C source pointer.
func (c *ColorStop) Native() unsafe.Pointer {
	return unsafe.Pointer(c)
}

// ParseLocation: a location in a parse buffer.
type ParseLocation C.GskParseLocation

// WrapParseLocation wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapParseLocation(ptr unsafe.Pointer) *ParseLocation {
	return (*ParseLocation)(ptr)
}

// Native returns the underlying C source pointer.
func (p *ParseLocation) Native() unsafe.Pointer {
	return unsafe.Pointer(p)
}

// Shadow: the shadow parameters in a shadow node.
type Shadow C.GskShadow

// WrapShadow wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapShadow(ptr unsafe.Pointer) *Shadow {
	return (*Shadow)(ptr)
}

// Native returns the underlying C source pointer.
func (s *Shadow) Native() unsafe.Pointer {
	return unsafe.Pointer(s)
}
