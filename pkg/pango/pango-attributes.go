// Code generated by girgen. DO NOT EDIT.

package pango

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/box"
	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: pango
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <pango/pango.h>
//
// gboolean gotk4_AttrFilterFunc(PangoAttribute*, gpointer);
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.pango_attr_type_get_type()), F: marshalAttrType},
		{T: externglib.Type(C.pango_overline_get_type()), F: marshalOverline},
		{T: externglib.Type(C.pango_underline_get_type()), F: marshalUnderline},
		{T: externglib.Type(C.pango_show_flags_get_type()), F: marshalShowFlags},
		{T: externglib.Type(C.pango_attr_iterator_get_type()), F: marshalAttrIterator},
		{T: externglib.Type(C.pango_attr_list_get_type()), F: marshalAttrList},
		{T: externglib.Type(C.pango_attribute_get_type()), F: marshalAttribute},
		{T: externglib.Type(C.pango_color_get_type()), F: marshalColor},
	})
}

// AttrType: the `PangoAttrType` distinguishes between different types of
// attributes.
//
// Along with the predefined values, it is possible to allocate additional
// values for custom attributes using [type_func@attr_type_register]. The
// predefined values are given below. The type of structure used to store the
// attribute is listed in parentheses after the description.
type AttrType int

const (
	// Invalid does not happen
	AttrInvalid AttrType = iota
	// Language ([struct@Pango.AttrLanguage])
	AttrLanguage
	// Family: font family name list ([struct@Pango.AttrString])
	AttrFamily
	// Style: font slant style ([struct@Pango.AttrInt])
	AttrStyle
	// Weight: font weight ([struct@Pango.AttrInt])
	AttrWeight
	// Variant: font variant (normal or small caps) ([struct@Pango.AttrInt])
	AttrVariant
	// Stretch: font stretch ([struct@Pango.AttrInt])
	AttrStretch
	// Size: font size in points scaled by PANGO_SCALE ([struct@Pango.AttrInt])
	AttrSize
	// FontDesc: font description ([struct@Pango.AttrFontDesc])
	AttrFontDesc
	// Foreground color ([struct@Pango.AttrColor])
	AttrForeground
	// Background color ([struct@Pango.AttrColor])
	AttrBackground
	// Underline: whether the text has an underline ([struct@Pango.AttrInt])
	AttrUnderline
	// Strikethrough: whether the text is struck-through
	// ([struct@Pango.AttrInt])
	AttrStrikethrough
	// Rise: baseline displacement ([struct@Pango.AttrInt])
	AttrRise
	// Shape ([struct@Pango.AttrShape])
	AttrShape
	// Scale: font size scale factor ([struct@Pango.AttrFloat])
	AttrScale
	// Fallback: whether fallback is enabled ([struct@Pango.AttrInt])
	AttrFallback
	// LetterSpacing: letter spacing ([struct@PangoAttrInt])
	AttrLetterSpacing
	// UnderlineColor: underline color ([struct@Pango.AttrColor])
	AttrUnderlineColor
	// StrikethroughColor: strikethrough color ([struct@Pango.AttrColor])
	AttrStrikethroughColor
	// AbsoluteSize: font size in pixels scaled by PANGO_SCALE
	// ([struct@Pango.AttrInt])
	AttrAbsoluteSize
	// Gravity: base text gravity ([struct@Pango.AttrInt])
	AttrGravity
	// GravityHint: gravity hint ([struct@Pango.AttrInt])
	AttrGravityHint
	// FontFeatures: openType font features ([struct@Pango.AttrString]). Since
	// 1.38
	AttrFontFeatures
	// ForegroundAlpha: foreground alpha ([struct@Pango.AttrInt]). Since 1.38
	AttrForegroundAlpha
	// BackgroundAlpha: background alpha ([struct@Pango.AttrInt]). Since 1.38
	AttrBackgroundAlpha
	// AllowBreaks: whether breaks are allowed ([struct@Pango.AttrInt]). Since
	// 1.44
	AttrAllowBreaks
	// Show: how to render invisible characters ([struct@Pango.AttrInt]). Since
	// 1.44
	AttrShow
	// InsertHyphens: whether to insert hyphens at intra-word line breaks
	// ([struct@Pango.AttrInt]). Since 1.44
	AttrInsertHyphens
	// Overline: whether the text has an overline ([struct@Pango.AttrInt]).
	// Since 1.46
	AttrOverline
	// OverlineColor: overline color ([struct@Pango.AttrColor]). Since 1.46
	AttrOverlineColor
)

func marshalAttrType(p uintptr) (interface{}, error) {
	return AttrType(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// Overline: the `PangoOverline` enumeration is used to specify whether text
// should be overlined, and if so, the type of line.
type Overline int

const (
	// None: no overline should be drawn
	OverlineNone Overline = iota
	// Single: draw a single line above the ink extents of the text being
	// underlined.
	OverlineSingle
)

func marshalOverline(p uintptr) (interface{}, error) {
	return Overline(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// Underline: the `PangoUnderline` enumeration is used to specify whether text
// should be underlined, and if so, the type of underlining.
type Underline int

const (
	// None: no underline should be drawn
	UnderlineNone Underline = iota
	// Single underline should be drawn
	UnderlineSingle
	// Double underline should be drawn
	UnderlineDouble
	// Low: single underline should be drawn at a position beneath the ink
	// extents of the text being underlined. This should be used only for
	// underlining single characters, such as for keyboard accelerators.
	// PANGO_UNDERLINE_SINGLE should be used for extended portions of text.
	UnderlineLow
	// Error: wavy underline should be drawn below. This underline is typically
	// used to indicate an error such as a possible mispelling; in some cases a
	// contrasting color may automatically be used. This type of underlining is
	// available since Pango 1.4.
	UnderlineError
	// SingleLine: like @PANGO_UNDERLINE_SINGLE, but drawn continuously across
	// multiple runs. This type of underlining is available since Pango 1.46.
	UnderlineSingleLine
	// DoubleLine: like @PANGO_UNDERLINE_DOUBLE, but drawn continuously across
	// multiple runs. This type of underlining is available since Pango 1.46.
	UnderlineDoubleLine
	// ErrorLine: like @PANGO_UNDERLINE_ERROR, but drawn continuously across
	// multiple runs. This type of underlining is available since Pango 1.46.
	UnderlineErrorLine
)

func marshalUnderline(p uintptr) (interface{}, error) {
	return Underline(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// ShowFlags: these flags affect how Pango treats characters that are normally
// not visible in the output.
type ShowFlags int

const (
	// ShowFlagsNone: no special treatment for invisible characters
	ShowFlagsNone ShowFlags = 0b0
	// ShowFlagsSpaces: render spaces, tabs and newlines visibly
	ShowFlagsSpaces ShowFlags = 0b1
	// ShowFlagsLineBreaks: render line breaks visibly
	ShowFlagsLineBreaks ShowFlags = 0b10
	// ShowFlagsIgnorables: render default-ignorable Unicode characters visibly
	ShowFlagsIgnorables ShowFlags = 0b100
)

func marshalShowFlags(p uintptr) (interface{}, error) {
	return ShowFlags(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// AttrDataCopyFunc: type of a function that can duplicate user data for an
// attribute.
type AttrDataCopyFunc func() (gpointer interface{})

//export gotk4_AttrDataCopyFunc
func gotk4_AttrDataCopyFunc(arg0 C.gconstpointer) (cret C.gpointer) {
	v := box.Get(uintptr(arg0))
	if v == nil {
		panic(`callback not found`)
	}

	fn := v.(AttrDataCopyFunc)
	gpointer := fn()

	cret = (C.gpointer)(box.Assign(gpointer))

	return cret
}

// AttrFilterFunc: type of a function filtering a list of attributes.
type AttrFilterFunc func(attribute *Attribute) (ok bool)

//export gotk4_AttrFilterFunc
func gotk4_AttrFilterFunc(arg0 *C.PangoAttribute, arg1 C.gpointer) (cret C.gboolean) {
	v := box.Get(uintptr(arg1))
	if v == nil {
		panic(`callback not found`)
	}

	var attribute *Attribute // out

	attribute = (*Attribute)(unsafe.Pointer(arg0))

	fn := v.(AttrFilterFunc)
	ok := fn(attribute)

	if ok {
		cret = C.TRUE
	}

	return cret
}

// NewAttrAllowBreaks: create a new allow-breaks attribute.
//
// If breaks are disabled, the range will be kept in a single run, as far as
// possible.
func NewAttrAllowBreaks(allowBreaks bool) *Attribute {
	var _arg1 C.gboolean        // out
	var _cret *C.PangoAttribute // in

	if allowBreaks {
		_arg1 = C.TRUE
	}

	_cret = C.pango_attr_allow_breaks_new(_arg1)

	var _attribute *Attribute // out

	_attribute = (*Attribute)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(_attribute, func(v *Attribute) {
		C.free(unsafe.Pointer(v))
	})

	return _attribute
}

// NewAttrBackgroundAlpha: create a new background alpha attribute.
func NewAttrBackgroundAlpha(alpha uint16) *Attribute {
	var _arg1 C.guint16         // out
	var _cret *C.PangoAttribute // in

	_arg1 = C.guint16(alpha)

	_cret = C.pango_attr_background_alpha_new(_arg1)

	var _attribute *Attribute // out

	_attribute = (*Attribute)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(_attribute, func(v *Attribute) {
		C.free(unsafe.Pointer(v))
	})

	return _attribute
}

// NewAttrBackground: create a new background color attribute.
func NewAttrBackground(red uint16, green uint16, blue uint16) *Attribute {
	var _arg1 C.guint16         // out
	var _arg2 C.guint16         // out
	var _arg3 C.guint16         // out
	var _cret *C.PangoAttribute // in

	_arg1 = C.guint16(red)
	_arg2 = C.guint16(green)
	_arg3 = C.guint16(blue)

	_cret = C.pango_attr_background_new(_arg1, _arg2, _arg3)

	var _attribute *Attribute // out

	_attribute = (*Attribute)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(_attribute, func(v *Attribute) {
		C.free(unsafe.Pointer(v))
	})

	return _attribute
}

// NewAttrFallback: create a new font fallback attribute.
//
// If fallback is disabled, characters will only be used from the closest
// matching font on the system. No fallback will be done to other fonts on the
// system that might contain the characters in the text.
func NewAttrFallback(enableFallback bool) *Attribute {
	var _arg1 C.gboolean        // out
	var _cret *C.PangoAttribute // in

	if enableFallback {
		_arg1 = C.TRUE
	}

	_cret = C.pango_attr_fallback_new(_arg1)

	var _attribute *Attribute // out

	_attribute = (*Attribute)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(_attribute, func(v *Attribute) {
		C.free(unsafe.Pointer(v))
	})

	return _attribute
}

// NewAttrFamily: create a new font family attribute.
func NewAttrFamily(family string) *Attribute {
	var _arg1 *C.char           // out
	var _cret *C.PangoAttribute // in

	_arg1 = (*C.char)(C.CString(family))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.pango_attr_family_new(_arg1)

	var _attribute *Attribute // out

	_attribute = (*Attribute)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(_attribute, func(v *Attribute) {
		C.free(unsafe.Pointer(v))
	})

	return _attribute
}

// NewAttrForegroundAlpha: create a new foreground alpha attribute.
func NewAttrForegroundAlpha(alpha uint16) *Attribute {
	var _arg1 C.guint16         // out
	var _cret *C.PangoAttribute // in

	_arg1 = C.guint16(alpha)

	_cret = C.pango_attr_foreground_alpha_new(_arg1)

	var _attribute *Attribute // out

	_attribute = (*Attribute)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(_attribute, func(v *Attribute) {
		C.free(unsafe.Pointer(v))
	})

	return _attribute
}

// NewAttrForeground: create a new foreground color attribute.
func NewAttrForeground(red uint16, green uint16, blue uint16) *Attribute {
	var _arg1 C.guint16         // out
	var _arg2 C.guint16         // out
	var _arg3 C.guint16         // out
	var _cret *C.PangoAttribute // in

	_arg1 = C.guint16(red)
	_arg2 = C.guint16(green)
	_arg3 = C.guint16(blue)

	_cret = C.pango_attr_foreground_new(_arg1, _arg2, _arg3)

	var _attribute *Attribute // out

	_attribute = (*Attribute)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(_attribute, func(v *Attribute) {
		C.free(unsafe.Pointer(v))
	})

	return _attribute
}

// NewAttrGravityHint: create a new gravity hint attribute.
func NewAttrGravityHint(hint GravityHint) *Attribute {
	var _arg1 C.PangoGravityHint // out
	var _cret *C.PangoAttribute  // in

	_arg1 = C.PangoGravityHint(hint)

	_cret = C.pango_attr_gravity_hint_new(_arg1)

	var _attribute *Attribute // out

	_attribute = (*Attribute)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(_attribute, func(v *Attribute) {
		C.free(unsafe.Pointer(v))
	})

	return _attribute
}

// NewAttrGravity: create a new gravity attribute.
func NewAttrGravity(gravity Gravity) *Attribute {
	var _arg1 C.PangoGravity    // out
	var _cret *C.PangoAttribute // in

	_arg1 = C.PangoGravity(gravity)

	_cret = C.pango_attr_gravity_new(_arg1)

	var _attribute *Attribute // out

	_attribute = (*Attribute)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(_attribute, func(v *Attribute) {
		C.free(unsafe.Pointer(v))
	})

	return _attribute
}

// NewAttrInsertHyphens: create a new insert-hyphens attribute.
//
// Pango will insert hyphens when breaking lines in the middle of a word. This
// attribute can be used to suppress the hyphen.
func NewAttrInsertHyphens(insertHyphens bool) *Attribute {
	var _arg1 C.gboolean        // out
	var _cret *C.PangoAttribute // in

	if insertHyphens {
		_arg1 = C.TRUE
	}

	_cret = C.pango_attr_insert_hyphens_new(_arg1)

	var _attribute *Attribute // out

	_attribute = (*Attribute)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(_attribute, func(v *Attribute) {
		C.free(unsafe.Pointer(v))
	})

	return _attribute
}

// NewAttrLetterSpacing: create a new letter-spacing attribute.
func NewAttrLetterSpacing(letterSpacing int) *Attribute {
	var _arg1 C.int             // out
	var _cret *C.PangoAttribute // in

	_arg1 = C.int(letterSpacing)

	_cret = C.pango_attr_letter_spacing_new(_arg1)

	var _attribute *Attribute // out

	_attribute = (*Attribute)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(_attribute, func(v *Attribute) {
		C.free(unsafe.Pointer(v))
	})

	return _attribute
}

// NewAttrOverlineColor: create a new overline color attribute.
//
// This attribute modifies the color of overlines. If not set, overlines will
// use the foreground color.
func NewAttrOverlineColor(red uint16, green uint16, blue uint16) *Attribute {
	var _arg1 C.guint16         // out
	var _arg2 C.guint16         // out
	var _arg3 C.guint16         // out
	var _cret *C.PangoAttribute // in

	_arg1 = C.guint16(red)
	_arg2 = C.guint16(green)
	_arg3 = C.guint16(blue)

	_cret = C.pango_attr_overline_color_new(_arg1, _arg2, _arg3)

	var _attribute *Attribute // out

	_attribute = (*Attribute)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(_attribute, func(v *Attribute) {
		C.free(unsafe.Pointer(v))
	})

	return _attribute
}

// NewAttrOverline: create a new overline-style attribute.
func NewAttrOverline(overline Overline) *Attribute {
	var _arg1 C.PangoOverline   // out
	var _cret *C.PangoAttribute // in

	_arg1 = C.PangoOverline(overline)

	_cret = C.pango_attr_overline_new(_arg1)

	var _attribute *Attribute // out

	_attribute = (*Attribute)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(_attribute, func(v *Attribute) {
		C.free(unsafe.Pointer(v))
	})

	return _attribute
}

// NewAttrRise: create a new baseline displacement attribute.
func NewAttrRise(rise int) *Attribute {
	var _arg1 C.int             // out
	var _cret *C.PangoAttribute // in

	_arg1 = C.int(rise)

	_cret = C.pango_attr_rise_new(_arg1)

	var _attribute *Attribute // out

	_attribute = (*Attribute)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(_attribute, func(v *Attribute) {
		C.free(unsafe.Pointer(v))
	})

	return _attribute
}

// NewAttrScale: create a new font size scale attribute.
//
// The base font for the affected text will have its size multiplied by
// @scale_factor.
func NewAttrScale(scaleFactor float64) *Attribute {
	var _arg1 C.double          // out
	var _cret *C.PangoAttribute // in

	_arg1 = C.double(scaleFactor)

	_cret = C.pango_attr_scale_new(_arg1)

	var _attribute *Attribute // out

	_attribute = (*Attribute)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(_attribute, func(v *Attribute) {
		C.free(unsafe.Pointer(v))
	})

	return _attribute
}

// NewAttrShow: create a new attribute that influences how invisible characters
// are rendered.
func NewAttrShow(flags ShowFlags) *Attribute {
	var _arg1 C.PangoShowFlags  // out
	var _cret *C.PangoAttribute // in

	_arg1 = C.PangoShowFlags(flags)

	_cret = C.pango_attr_show_new(_arg1)

	var _attribute *Attribute // out

	_attribute = (*Attribute)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(_attribute, func(v *Attribute) {
		C.free(unsafe.Pointer(v))
	})

	return _attribute
}

// NewAttrStretch: create a new font stretch attribute.
func NewAttrStretch(stretch Stretch) *Attribute {
	var _arg1 C.PangoStretch    // out
	var _cret *C.PangoAttribute // in

	_arg1 = C.PangoStretch(stretch)

	_cret = C.pango_attr_stretch_new(_arg1)

	var _attribute *Attribute // out

	_attribute = (*Attribute)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(_attribute, func(v *Attribute) {
		C.free(unsafe.Pointer(v))
	})

	return _attribute
}

// NewAttrStrikethroughColor: create a new strikethrough color attribute.
//
// This attribute modifies the color of strikethrough lines. If not set,
// strikethrough lines will use the foreground color.
func NewAttrStrikethroughColor(red uint16, green uint16, blue uint16) *Attribute {
	var _arg1 C.guint16         // out
	var _arg2 C.guint16         // out
	var _arg3 C.guint16         // out
	var _cret *C.PangoAttribute // in

	_arg1 = C.guint16(red)
	_arg2 = C.guint16(green)
	_arg3 = C.guint16(blue)

	_cret = C.pango_attr_strikethrough_color_new(_arg1, _arg2, _arg3)

	var _attribute *Attribute // out

	_attribute = (*Attribute)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(_attribute, func(v *Attribute) {
		C.free(unsafe.Pointer(v))
	})

	return _attribute
}

// NewAttrStrikethrough: create a new strike-through attribute.
func NewAttrStrikethrough(strikethrough bool) *Attribute {
	var _arg1 C.gboolean        // out
	var _cret *C.PangoAttribute // in

	if strikethrough {
		_arg1 = C.TRUE
	}

	_cret = C.pango_attr_strikethrough_new(_arg1)

	var _attribute *Attribute // out

	_attribute = (*Attribute)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(_attribute, func(v *Attribute) {
		C.free(unsafe.Pointer(v))
	})

	return _attribute
}

// NewAttrStyle: create a new font slant style attribute.
func NewAttrStyle(style Style) *Attribute {
	var _arg1 C.PangoStyle      // out
	var _cret *C.PangoAttribute // in

	_arg1 = C.PangoStyle(style)

	_cret = C.pango_attr_style_new(_arg1)

	var _attribute *Attribute // out

	_attribute = (*Attribute)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(_attribute, func(v *Attribute) {
		C.free(unsafe.Pointer(v))
	})

	return _attribute
}

// NewAttrUnderlineColor: create a new underline color attribute.
//
// This attribute modifies the color of underlines. If not set, underlines will
// use the foreground color.
func NewAttrUnderlineColor(red uint16, green uint16, blue uint16) *Attribute {
	var _arg1 C.guint16         // out
	var _arg2 C.guint16         // out
	var _arg3 C.guint16         // out
	var _cret *C.PangoAttribute // in

	_arg1 = C.guint16(red)
	_arg2 = C.guint16(green)
	_arg3 = C.guint16(blue)

	_cret = C.pango_attr_underline_color_new(_arg1, _arg2, _arg3)

	var _attribute *Attribute // out

	_attribute = (*Attribute)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(_attribute, func(v *Attribute) {
		C.free(unsafe.Pointer(v))
	})

	return _attribute
}

// NewAttrUnderline: create a new underline-style attribute.
func NewAttrUnderline(underline Underline) *Attribute {
	var _arg1 C.PangoUnderline  // out
	var _cret *C.PangoAttribute // in

	_arg1 = C.PangoUnderline(underline)

	_cret = C.pango_attr_underline_new(_arg1)

	var _attribute *Attribute // out

	_attribute = (*Attribute)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(_attribute, func(v *Attribute) {
		C.free(unsafe.Pointer(v))
	})

	return _attribute
}

// NewAttrVariant: create a new font variant attribute (normal or small caps).
func NewAttrVariant(variant Variant) *Attribute {
	var _arg1 C.PangoVariant    // out
	var _cret *C.PangoAttribute // in

	_arg1 = C.PangoVariant(variant)

	_cret = C.pango_attr_variant_new(_arg1)

	var _attribute *Attribute // out

	_attribute = (*Attribute)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(_attribute, func(v *Attribute) {
		C.free(unsafe.Pointer(v))
	})

	return _attribute
}

// NewAttrWeight: create a new font weight attribute.
func NewAttrWeight(weight Weight) *Attribute {
	var _arg1 C.PangoWeight     // out
	var _cret *C.PangoAttribute // in

	_arg1 = C.PangoWeight(weight)

	_cret = C.pango_attr_weight_new(_arg1)

	var _attribute *Attribute // out

	_attribute = (*Attribute)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(_attribute, func(v *Attribute) {
		C.free(unsafe.Pointer(v))
	})

	return _attribute
}

// MarkupParserFinish finishes parsing markup.
//
// After feeding a Pango markup parser some data with
// g_markup_parse_context_parse(), use this function to get the list of
// attributes and text out of the markup. This function will not free @context,
// use g_markup_parse_context_free() to do so.
func MarkupParserFinish(context *glib.MarkupParseContext) (*AttrList, string, uint32, error) {
	var _arg1 *C.GMarkupParseContext // out
	var _arg2 *C.PangoAttrList       // in
	var _arg3 *C.char                // in
	var _arg4 C.gunichar             // in
	var _cerr *C.GError              // in

	_arg1 = (*C.GMarkupParseContext)(unsafe.Pointer(context))

	C.pango_markup_parser_finish(_arg1, &_arg2, &_arg3, &_arg4, &_cerr)

	var _attrList *AttrList // out
	var _text string        // out
	var _accelChar uint32   // out
	var _goerr error        // out

	_attrList = (*AttrList)(unsafe.Pointer(_arg2))
	C.pango_attr_list_ref(_arg2)
	runtime.SetFinalizer(_attrList, func(v *AttrList) {
		C.pango_attr_list_unref((*C.PangoAttrList)(unsafe.Pointer(v)))
	})
	_text = C.GoString(_arg3)
	defer C.free(unsafe.Pointer(_arg3))
	_accelChar = uint32(_arg4)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _attrList, _text, _accelChar, _goerr
}

// NewMarkupParser: incrementally parses marked-up text to create a plain-text
// string and an attribute list.
//
// See the Pango Markup (pango_markup.html) docs for details about the supported
// markup.
//
// If @accel_marker is nonzero, the given character will mark the character
// following it as an accelerator. For example, @accel_marker might be an
// ampersand or underscore. All characters marked as an accelerator will receive
// a PANGO_UNDERLINE_LOW attribute, and the first character so marked will be
// returned in @accel_char, when calling [func@markup_parser_finish]. Two
// @accel_marker characters following each other produce a single literal
// @accel_marker character.
//
// To feed markup to the parser, use g_markup_parse_context_parse() on the
// returned `GMarkupParseContext`. When done with feeding markup to the parser,
// use [func@markup_parser_finish] to get the data out of it, and then use
// g_markup_parse_context_free() to free it.
//
// This function is designed for applications that read Pango markup from
// streams. To simply parse a string containing Pango markup, the
// [func@parse_markup] API is recommended instead.
func NewMarkupParser(accelMarker uint32) *glib.MarkupParseContext {
	var _arg1 C.gunichar             // out
	var _cret *C.GMarkupParseContext // in

	_arg1 = C.gunichar(accelMarker)

	_cret = C.pango_markup_parser_new(_arg1)

	var _markupParseContext *glib.MarkupParseContext // out

	_markupParseContext = (*glib.MarkupParseContext)(unsafe.Pointer(_cret))
	C.g_markup_parse_context_ref(_cret)
	runtime.SetFinalizer(_markupParseContext, func(v *glib.MarkupParseContext) {
		C.g_markup_parse_context_unref((*C.GMarkupParseContext)(unsafe.Pointer(v)))
	})

	return _markupParseContext
}

// ParseMarkup parses marked-up text to create a plain-text string and an
// attribute list.
//
// See the Pango Markup (pango_markup.html) docs for details about the supported
// markup.
//
// If @accel_marker is nonzero, the given character will mark the character
// following it as an accelerator. For example, @accel_marker might be an
// ampersand or underscore. All characters marked as an accelerator will receive
// a PANGO_UNDERLINE_LOW attribute, and the first character so marked will be
// returned in @accel_char. Two @accel_marker characters following each other
// produce a single literal @accel_marker character.
//
// To parse a stream of pango markup incrementally, use
// [func@markup_parser_new].
//
// If any error happens, none of the output arguments are touched except for
// @error.
func ParseMarkup(markupText string, length int, accelMarker uint32) (*AttrList, string, uint32, error) {
	var _arg1 *C.char          // out
	var _arg2 C.int            // out
	var _arg3 C.gunichar       // out
	var _arg4 *C.PangoAttrList // in
	var _arg5 *C.char          // in
	var _arg6 C.gunichar       // in
	var _cerr *C.GError        // in

	_arg1 = (*C.char)(C.CString(markupText))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.int(length)
	_arg3 = C.gunichar(accelMarker)

	C.pango_parse_markup(_arg1, _arg2, _arg3, &_arg4, &_arg5, &_arg6, &_cerr)

	var _attrList *AttrList // out
	var _text string        // out
	var _accelChar uint32   // out
	var _goerr error        // out

	_attrList = (*AttrList)(unsafe.Pointer(_arg4))
	C.pango_attr_list_ref(_arg4)
	runtime.SetFinalizer(_attrList, func(v *AttrList) {
		C.pango_attr_list_unref((*C.PangoAttrList)(unsafe.Pointer(v)))
	})
	_text = C.GoString(_arg5)
	defer C.free(unsafe.Pointer(_arg5))
	_accelChar = uint32(_arg6)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _attrList, _text, _accelChar, _goerr
}

// AttrColor: the `PangoAttrColor` structure is used to represent attributes
// that are colors.
type AttrColor struct {
	native C.PangoAttrColor
}

// WrapAttrColor wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapAttrColor(ptr unsafe.Pointer) *AttrColor {
	return (*AttrColor)(ptr)
}

// Native returns the underlying C source pointer.
func (a *AttrColor) Native() unsafe.Pointer {
	return unsafe.Pointer(&a.native)
}

// Attr: the common portion of the attribute
func (a *AttrColor) Attr() Attribute {
	var v Attribute // out
	{
		var refTmpIn *C.PangoAttribute
		var refTmpOut *Attribute

		in0 := &a.attr
		refTmpIn = in0

		refTmpOut = (*Attribute)(unsafe.Pointer(refTmpIn))

		v = *refTmpOut
	}
	return v
}

// Color: the `PangoColor` which is the value of the attribute
func (a *AttrColor) Color() Color {
	var v Color // out
	{
		var refTmpIn *C.PangoColor
		var refTmpOut *Color

		in0 := &a.color
		refTmpIn = in0

		refTmpOut = (*Color)(unsafe.Pointer(refTmpIn))

		v = *refTmpOut
	}
	return v
}

// AttrFloat: the `PangoAttrFloat` structure is used to represent attributes
// with a float or double value.
type AttrFloat struct {
	native C.PangoAttrFloat
}

// WrapAttrFloat wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapAttrFloat(ptr unsafe.Pointer) *AttrFloat {
	return (*AttrFloat)(ptr)
}

// Native returns the underlying C source pointer.
func (a *AttrFloat) Native() unsafe.Pointer {
	return unsafe.Pointer(&a.native)
}

// Attr: the common portion of the attribute
func (a *AttrFloat) Attr() Attribute {
	var v Attribute // out
	{
		var refTmpIn *C.PangoAttribute
		var refTmpOut *Attribute

		in0 := &a.attr
		refTmpIn = in0

		refTmpOut = (*Attribute)(unsafe.Pointer(refTmpIn))

		v = *refTmpOut
	}
	return v
}

// Value: the value of the attribute
func (a *AttrFloat) Value() float64 {
	var v float64 // out
	v = float64(a.value)
	return v
}

// AttrFontDesc: the `PangoAttrFontDesc` structure is used to store an attribute
// that sets all aspects of the font description at once.
type AttrFontDesc struct {
	native C.PangoAttrFontDesc
}

// WrapAttrFontDesc wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapAttrFontDesc(ptr unsafe.Pointer) *AttrFontDesc {
	return (*AttrFontDesc)(ptr)
}

// Native returns the underlying C source pointer.
func (a *AttrFontDesc) Native() unsafe.Pointer {
	return unsafe.Pointer(&a.native)
}

// Attr: the common portion of the attribute
func (a *AttrFontDesc) Attr() Attribute {
	var v Attribute // out
	{
		var refTmpIn *C.PangoAttribute
		var refTmpOut *Attribute

		in0 := &a.attr
		refTmpIn = in0

		refTmpOut = (*Attribute)(unsafe.Pointer(refTmpIn))

		v = *refTmpOut
	}
	return v
}

// Desc: the font description which is the value of this attribute
func (a *AttrFontDesc) Desc() *FontDescription {
	var v *FontDescription // out
	v = (*FontDescription)(unsafe.Pointer(a.desc))
	return v
}

// AttrFontFeatures: the `PangoAttrFontFeatures` structure is used to represent
// OpenType font features as an attribute.
type AttrFontFeatures struct {
	native C.PangoAttrFontFeatures
}

// WrapAttrFontFeatures wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapAttrFontFeatures(ptr unsafe.Pointer) *AttrFontFeatures {
	return (*AttrFontFeatures)(ptr)
}

// Native returns the underlying C source pointer.
func (a *AttrFontFeatures) Native() unsafe.Pointer {
	return unsafe.Pointer(&a.native)
}

// Attr: the common portion of the attribute
func (a *AttrFontFeatures) Attr() Attribute {
	var v Attribute // out
	{
		var refTmpIn *C.PangoAttribute
		var refTmpOut *Attribute

		in0 := &a.attr
		refTmpIn = in0

		refTmpOut = (*Attribute)(unsafe.Pointer(refTmpIn))

		v = *refTmpOut
	}
	return v
}

// Features: the featues, as a string in CSS syntax
func (a *AttrFontFeatures) Features() string {
	var v string // out
	v = C.GoString(a.features)
	return v
}

// AttrInt: the `PangoAttrInt` structure is used to represent attributes with an
// integer or enumeration value.
type AttrInt struct {
	native C.PangoAttrInt
}

// WrapAttrInt wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapAttrInt(ptr unsafe.Pointer) *AttrInt {
	return (*AttrInt)(ptr)
}

// Native returns the underlying C source pointer.
func (a *AttrInt) Native() unsafe.Pointer {
	return unsafe.Pointer(&a.native)
}

// Attr: the common portion of the attribute
func (a *AttrInt) Attr() Attribute {
	var v Attribute // out
	{
		var refTmpIn *C.PangoAttribute
		var refTmpOut *Attribute

		in0 := &a.attr
		refTmpIn = in0

		refTmpOut = (*Attribute)(unsafe.Pointer(refTmpIn))

		v = *refTmpOut
	}
	return v
}

// Value: the value of the attribute
func (a *AttrInt) Value() int {
	var v int // out
	v = int(a.value)
	return v
}

// AttrIterator: `PangoAttrIterator` is used to iterate through a
// `PangoAttrList`.
//
// A new iterator is created with [method@Pango.AttrList.get_iterator]. Once the
// iterator is created, it can be advanced through the style changes in the text
// using [method@Pango.AttrIterator.next]. At each style change, the range of
// the current style segment and the attributes currently in effect can be
// queried.
type AttrIterator struct {
	native C.PangoAttrIterator
}

// WrapAttrIterator wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapAttrIterator(ptr unsafe.Pointer) *AttrIterator {
	return (*AttrIterator)(ptr)
}

func marshalAttrIterator(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return (*AttrIterator)(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (a *AttrIterator) Native() unsafe.Pointer {
	return unsafe.Pointer(&a.native)
}

// Copy a `PangoAttrIterator`.
func (i *AttrIterator) Copy() *AttrIterator {
	var _arg0 *C.PangoAttrIterator // out
	var _cret *C.PangoAttrIterator // in

	_arg0 = (*C.PangoAttrIterator)(unsafe.Pointer(i))

	_cret = C.pango_attr_iterator_copy(_arg0)

	var _attrIterator *AttrIterator // out

	_attrIterator = (*AttrIterator)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(_attrIterator, func(v *AttrIterator) {
		C.free(unsafe.Pointer(v))
	})

	return _attrIterator
}

// Destroy a `PangoAttrIterator` and free all associated memory.
func (i *AttrIterator) Destroy() {
	var _arg0 *C.PangoAttrIterator // out

	_arg0 = (*C.PangoAttrIterator)(unsafe.Pointer(i))

	C.pango_attr_iterator_destroy(_arg0)
}

// Get: find the current attribute of a particular type at the iterator
// location. When multiple attributes of the same type overlap, the attribute
// whose range starts closest to the current location is used.
func (i *AttrIterator) Get(typ AttrType) *Attribute {
	var _arg0 *C.PangoAttrIterator // out
	var _arg1 C.PangoAttrType      // out
	var _cret *C.PangoAttribute    // in

	_arg0 = (*C.PangoAttrIterator)(unsafe.Pointer(i))
	_arg1 = C.PangoAttrType(typ)

	_cret = C.pango_attr_iterator_get(_arg0, _arg1)

	var _attribute *Attribute // out

	_attribute = (*Attribute)(unsafe.Pointer(_cret))

	return _attribute
}

// Next: advance the iterator until the next change of style.
func (i *AttrIterator) Next() bool {
	var _arg0 *C.PangoAttrIterator // out
	var _cret C.gboolean           // in

	_arg0 = (*C.PangoAttrIterator)(unsafe.Pointer(i))

	_cret = C.pango_attr_iterator_next(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Range: get the range of the current segment. Note that the stored return
// values are signed, not unsigned like the values in `PangoAttribute`. To deal
// with this API oversight, stored return values that wouldn't fit into a signed
// integer are clamped to G_MAXINT.
func (i *AttrIterator) Range() (start int, end int) {
	var _arg0 *C.PangoAttrIterator // out
	var _arg1 C.gint               // in
	var _arg2 C.gint               // in

	_arg0 = (*C.PangoAttrIterator)(unsafe.Pointer(i))

	C.pango_attr_iterator_range(_arg0, &_arg1, &_arg2)

	var _start int // out
	var _end int   // out

	_start = int(_arg1)
	_end = int(_arg2)

	return _start, _end
}

// AttrLanguage: the `PangoAttrLanguage` structure is used to represent
// attributes that are languages.
type AttrLanguage struct {
	native C.PangoAttrLanguage
}

// WrapAttrLanguage wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapAttrLanguage(ptr unsafe.Pointer) *AttrLanguage {
	return (*AttrLanguage)(ptr)
}

// Native returns the underlying C source pointer.
func (a *AttrLanguage) Native() unsafe.Pointer {
	return unsafe.Pointer(&a.native)
}

// Attr: the common portion of the attribute
func (a *AttrLanguage) Attr() Attribute {
	var v Attribute // out
	{
		var refTmpIn *C.PangoAttribute
		var refTmpOut *Attribute

		in0 := &a.attr
		refTmpIn = in0

		refTmpOut = (*Attribute)(unsafe.Pointer(refTmpIn))

		v = *refTmpOut
	}
	return v
}

// Value: the `PangoLanguage` which is the value of the attribute
func (a *AttrLanguage) Value() *Language {
	var v *Language // out
	v = (*Language)(unsafe.Pointer(a.value))
	return v
}

// AttrList: `PangoAttrList` represents a list of attributes that apply to a
// section of text.
//
// The attributes in a `PangoAttrList` are, in general, allowed to overlap in an
// arbitrary fashion. However, if the attributes are manipulated only through
// [method@Pango.AttrList.change], the overlap between properties will meet
// stricter criteria.
//
// Since the `PangoAttrList` structure is stored as a linear list, it is not
// suitable for storing attributes for large amounts of text. In general, you
// should not use a single `PangoAttrList` for more than one paragraph of text.
type AttrList struct {
	native C.PangoAttrList
}

// WrapAttrList wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapAttrList(ptr unsafe.Pointer) *AttrList {
	return (*AttrList)(ptr)
}

func marshalAttrList(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return (*AttrList)(unsafe.Pointer(b)), nil
}

// NewAttrList constructs a struct AttrList.
func NewAttrList() *AttrList {
	var _cret *C.PangoAttrList // in

	_cret = C.pango_attr_list_new()

	var _attrList *AttrList // out

	_attrList = (*AttrList)(unsafe.Pointer(_cret))
	C.pango_attr_list_ref(_cret)
	runtime.SetFinalizer(_attrList, func(v *AttrList) {
		C.pango_attr_list_unref((*C.PangoAttrList)(unsafe.Pointer(v)))
	})

	return _attrList
}

// Native returns the underlying C source pointer.
func (a *AttrList) Native() unsafe.Pointer {
	return unsafe.Pointer(&a.native)
}

// Change: insert the given attribute into the `PangoAttrList`.
//
// It will replace any attributes of the same type on that segment and be merged
// with any adjoining attributes that are identical.
//
// This function is slower than [method@Pango.AttrList.insert] for creating an
// attribute list in order (potentially much slower for large lists). However,
// [method@Pango.AttrList.insert] is not suitable for continually changing a set
// of attributes since it never removes or combines existing attributes.
func (l *AttrList) Change(attr *Attribute) {
	var _arg0 *C.PangoAttrList  // out
	var _arg1 *C.PangoAttribute // out

	_arg0 = (*C.PangoAttrList)(unsafe.Pointer(l))
	_arg1 = (*C.PangoAttribute)(unsafe.Pointer(attr))
	runtime.SetFinalizer(attr, nil)

	C.pango_attr_list_change(_arg0, _arg1)
}

// Copy @list and return an identical new list.
func (l *AttrList) Copy() *AttrList {
	var _arg0 *C.PangoAttrList // out
	var _cret *C.PangoAttrList // in

	_arg0 = (*C.PangoAttrList)(unsafe.Pointer(l))

	_cret = C.pango_attr_list_copy(_arg0)

	var _attrList *AttrList // out

	_attrList = (*AttrList)(unsafe.Pointer(_cret))
	C.pango_attr_list_ref(_cret)
	runtime.SetFinalizer(_attrList, func(v *AttrList) {
		C.pango_attr_list_unref((*C.PangoAttrList)(unsafe.Pointer(v)))
	})

	return _attrList
}

// Equal checks whether @list and @other_list contain the same attributes and
// whether those attributes apply to the same ranges. Beware that this will
// return wrong values if any list contains duplicates.
func (l *AttrList) Equal(otherList *AttrList) bool {
	var _arg0 *C.PangoAttrList // out
	var _arg1 *C.PangoAttrList // out
	var _cret C.gboolean       // in

	_arg0 = (*C.PangoAttrList)(unsafe.Pointer(l))
	_arg1 = (*C.PangoAttrList)(unsafe.Pointer(otherList))

	_cret = C.pango_attr_list_equal(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Filter: given a `PangoAttrList` and callback function, removes any elements
// of @list for which @func returns true and inserts them into a new list.
func (l *AttrList) Filter(fn AttrFilterFunc) *AttrList {
	var _arg0 *C.PangoAttrList      // out
	var _arg1 C.PangoAttrFilterFunc // out
	var _arg2 C.gpointer
	var _cret *C.PangoAttrList // in

	_arg0 = (*C.PangoAttrList)(unsafe.Pointer(l))
	_arg1 = (*[0]byte)(C.gotk4_AttrFilterFunc)
	_arg2 = C.gpointer(box.Assign(fn))

	_cret = C.pango_attr_list_filter(_arg0, _arg1, _arg2)

	var _attrList *AttrList // out

	_attrList = (*AttrList)(unsafe.Pointer(_cret))
	C.pango_attr_list_ref(_cret)
	runtime.SetFinalizer(_attrList, func(v *AttrList) {
		C.pango_attr_list_unref((*C.PangoAttrList)(unsafe.Pointer(v)))
	})

	return _attrList
}

// Iterator: create a iterator initialized to the beginning of the list. @list
// must not be modified until this iterator is freed.
func (l *AttrList) Iterator() *AttrIterator {
	var _arg0 *C.PangoAttrList     // out
	var _cret *C.PangoAttrIterator // in

	_arg0 = (*C.PangoAttrList)(unsafe.Pointer(l))

	_cret = C.pango_attr_list_get_iterator(_arg0)

	var _attrIterator *AttrIterator // out

	_attrIterator = (*AttrIterator)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(_attrIterator, func(v *AttrIterator) {
		C.free(unsafe.Pointer(v))
	})

	return _attrIterator
}

// Insert the given attribute into the `PangoAttrList`.
//
// It will be inserted after all other attributes with a matching @start_index.
func (l *AttrList) Insert(attr *Attribute) {
	var _arg0 *C.PangoAttrList  // out
	var _arg1 *C.PangoAttribute // out

	_arg0 = (*C.PangoAttrList)(unsafe.Pointer(l))
	_arg1 = (*C.PangoAttribute)(unsafe.Pointer(attr))
	runtime.SetFinalizer(attr, nil)

	C.pango_attr_list_insert(_arg0, _arg1)
}

// InsertBefore: insert the given attribute into the `PangoAttrList`.
//
// It will be inserted before all other attributes with a matching @start_index.
func (l *AttrList) InsertBefore(attr *Attribute) {
	var _arg0 *C.PangoAttrList  // out
	var _arg1 *C.PangoAttribute // out

	_arg0 = (*C.PangoAttrList)(unsafe.Pointer(l))
	_arg1 = (*C.PangoAttribute)(unsafe.Pointer(attr))
	runtime.SetFinalizer(attr, nil)

	C.pango_attr_list_insert_before(_arg0, _arg1)
}

// Ref: increase the reference count of the given attribute list by one.
func (l *AttrList) ref() *AttrList {
	var _arg0 *C.PangoAttrList // out
	var _cret *C.PangoAttrList // in

	_arg0 = (*C.PangoAttrList)(unsafe.Pointer(l))

	_cret = C.pango_attr_list_ref(_arg0)

	var _attrList *AttrList // out

	_attrList = (*AttrList)(unsafe.Pointer(_cret))
	C.pango_attr_list_ref(_cret)
	runtime.SetFinalizer(_attrList, func(v *AttrList) {
		C.pango_attr_list_unref((*C.PangoAttrList)(unsafe.Pointer(v)))
	})

	return _attrList
}

// Splice: this function opens up a hole in @list, fills it in with attributes
// from the left, and then merges @other on top of the hole.
//
// This operation is equivalent to stretching every attribute that applies at
// position @pos in @list by an amount @len, and then calling
// [method@Pango.AttrList.change] with a copy of each attribute in @other in
// sequence (offset in position by @pos).
//
// This operation proves useful for, for instance, inserting a pre-edit string
// in the middle of an edit buffer.
func (l *AttrList) Splice(other *AttrList, pos int, len int) {
	var _arg0 *C.PangoAttrList // out
	var _arg1 *C.PangoAttrList // out
	var _arg2 C.gint           // out
	var _arg3 C.gint           // out

	_arg0 = (*C.PangoAttrList)(unsafe.Pointer(l))
	_arg1 = (*C.PangoAttrList)(unsafe.Pointer(other))
	_arg2 = C.gint(pos)
	_arg3 = C.gint(len)

	C.pango_attr_list_splice(_arg0, _arg1, _arg2, _arg3)
}

// Unref: decrease the reference count of the given attribute list by one. If
// the result is zero, free the attribute list and the attributes it contains.
func (l *AttrList) unref() {
	var _arg0 *C.PangoAttrList // out

	_arg0 = (*C.PangoAttrList)(unsafe.Pointer(l))

	C.pango_attr_list_unref(_arg0)
}

// Update indices of attributes in @list for a change in the text they refer to.
//
// The change that this function applies is removing @remove bytes at position
// @pos and inserting @add bytes instead.
//
// Attributes that fall entirely in the (@pos, @pos + @remove) range are
// removed.
//
// Attributes that start or end inside the (@pos, @pos + @remove) range are
// shortened to reflect the removal.
//
// Attributes start and end positions are updated if they are behind @pos +
// @remove.
func (l *AttrList) Update(pos int, remove int, add int) {
	var _arg0 *C.PangoAttrList // out
	var _arg1 C.int            // out
	var _arg2 C.int            // out
	var _arg3 C.int            // out

	_arg0 = (*C.PangoAttrList)(unsafe.Pointer(l))
	_arg1 = C.int(pos)
	_arg2 = C.int(remove)
	_arg3 = C.int(add)

	C.pango_attr_list_update(_arg0, _arg1, _arg2, _arg3)
}

// AttrShape: the `PangoAttrShape` structure is used to represent attributes
// which impose shape restrictions.
type AttrShape struct {
	native C.PangoAttrShape
}

// WrapAttrShape wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapAttrShape(ptr unsafe.Pointer) *AttrShape {
	return (*AttrShape)(ptr)
}

// Native returns the underlying C source pointer.
func (a *AttrShape) Native() unsafe.Pointer {
	return unsafe.Pointer(&a.native)
}

// Attr: the common portion of the attribute
func (a *AttrShape) Attr() Attribute {
	var v Attribute // out
	{
		var refTmpIn *C.PangoAttribute
		var refTmpOut *Attribute

		in0 := &a.attr
		refTmpIn = in0

		refTmpOut = (*Attribute)(unsafe.Pointer(refTmpIn))

		v = *refTmpOut
	}
	return v
}

// InkRect: the ink rectangle to restrict to
func (a *AttrShape) InkRect() Rectangle {
	var v Rectangle // out
	{
		var refTmpIn *C.PangoRectangle
		var refTmpOut *Rectangle

		in0 := &a.ink_rect
		refTmpIn = in0

		refTmpOut = (*Rectangle)(unsafe.Pointer(refTmpIn))

		v = *refTmpOut
	}
	return v
}

// LogicalRect: the logical rectangle to restrict to
func (a *AttrShape) LogicalRect() Rectangle {
	var v Rectangle // out
	{
		var refTmpIn *C.PangoRectangle
		var refTmpOut *Rectangle

		in0 := &a.logical_rect
		refTmpIn = in0

		refTmpOut = (*Rectangle)(unsafe.Pointer(refTmpIn))

		v = *refTmpOut
	}
	return v
}

// Data: user data set (see [type_func@Pango.AttrShape.new_with_data])
func (a *AttrShape) Data() interface{} {
	var v interface{} // out
	v = box.Get(uintptr(a.data))
	return v
}

// AttrSize: the `PangoAttrSize` structure is used to represent attributes which
// set font size.
type AttrSize struct {
	native C.PangoAttrSize
}

// WrapAttrSize wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapAttrSize(ptr unsafe.Pointer) *AttrSize {
	return (*AttrSize)(ptr)
}

// Native returns the underlying C source pointer.
func (a *AttrSize) Native() unsafe.Pointer {
	return unsafe.Pointer(&a.native)
}

// Attr: the common portion of the attribute
func (a *AttrSize) Attr() Attribute {
	var v Attribute // out
	{
		var refTmpIn *C.PangoAttribute
		var refTmpOut *Attribute

		in0 := &a.attr
		refTmpIn = in0

		refTmpOut = (*Attribute)(unsafe.Pointer(refTmpIn))

		v = *refTmpOut
	}
	return v
}

// Size: size of font, in units of 1/PANGO_SCALE of a point (for
// PANGO_ATTR_SIZE) or of a device unit (for PANGO_ATTR_ABSOLUTE_SIZE)
func (a *AttrSize) Size() int {
	var v int // out
	v = int(a.size)
	return v
}

// AttrString: the `PangoAttrString` structure is used to represent attributes
// with a string value.
type AttrString struct {
	native C.PangoAttrString
}

// WrapAttrString wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapAttrString(ptr unsafe.Pointer) *AttrString {
	return (*AttrString)(ptr)
}

// Native returns the underlying C source pointer.
func (a *AttrString) Native() unsafe.Pointer {
	return unsafe.Pointer(&a.native)
}

// Attr: the common portion of the attribute
func (a *AttrString) Attr() Attribute {
	var v Attribute // out
	{
		var refTmpIn *C.PangoAttribute
		var refTmpOut *Attribute

		in0 := &a.attr
		refTmpIn = in0

		refTmpOut = (*Attribute)(unsafe.Pointer(refTmpIn))

		v = *refTmpOut
	}
	return v
}

// Value: the string which is the value of the attribute
func (a *AttrString) Value() string {
	var v string // out
	v = C.GoString(a.value)
	return v
}

// Attribute: the `PangoAttribute` structure represents the common portions of
// all attributes.
//
// Particular types of attributes include this structure as their initial
// portion. The common portion of the attribute holds the range to which the
// value in the type-specific part of the attribute applies and should be
// initialized using [method@Pango.Attribute.init]. By default, an attribute
// will have an all-inclusive range of [0,G_MAXUINT].
type Attribute struct {
	native C.PangoAttribute
}

// WrapAttribute wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapAttribute(ptr unsafe.Pointer) *Attribute {
	return (*Attribute)(ptr)
}

func marshalAttribute(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return (*Attribute)(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (a *Attribute) Native() unsafe.Pointer {
	return unsafe.Pointer(&a.native)
}

// StartIndex: the start index of the range (in bytes).
func (a *Attribute) StartIndex() uint {
	var v uint // out
	v = uint(a.start_index)
	return v
}

// EndIndex: end index of the range (in bytes). The character at this index is
// not included in the range.
func (a *Attribute) EndIndex() uint {
	var v uint // out
	v = uint(a.end_index)
	return v
}

// Copy: make a copy of an attribute.
func (a *Attribute) Copy() *Attribute {
	var _arg0 *C.PangoAttribute // out
	var _cret *C.PangoAttribute // in

	_arg0 = (*C.PangoAttribute)(unsafe.Pointer(a))

	_cret = C.pango_attribute_copy(_arg0)

	var _attribute *Attribute // out

	_attribute = (*Attribute)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(_attribute, func(v *Attribute) {
		C.free(unsafe.Pointer(v))
	})

	return _attribute
}

// Destroy a `PangoAttribute` and free all associated memory.
func (a *Attribute) Destroy() {
	var _arg0 *C.PangoAttribute // out

	_arg0 = (*C.PangoAttribute)(unsafe.Pointer(a))

	C.pango_attribute_destroy(_arg0)
}

// Equal: compare two attributes for equality. This compares only the actual
// value of the two attributes and not the ranges that the attributes apply to.
func (a *Attribute) Equal(attr2 *Attribute) bool {
	var _arg0 *C.PangoAttribute // out
	var _arg1 *C.PangoAttribute // out
	var _cret C.gboolean        // in

	_arg0 = (*C.PangoAttribute)(unsafe.Pointer(a))
	_arg1 = (*C.PangoAttribute)(unsafe.Pointer(attr2))

	_cret = C.pango_attribute_equal(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Color: the `PangoColor` structure is used to represent a color in an
// uncalibrated RGB color-space.
type Color struct {
	native C.PangoColor
}

// WrapColor wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapColor(ptr unsafe.Pointer) *Color {
	return (*Color)(ptr)
}

func marshalColor(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return (*Color)(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (c *Color) Native() unsafe.Pointer {
	return unsafe.Pointer(&c.native)
}

// Red: value of red component
func (c *Color) Red() uint16 {
	var v uint16 // out
	v = uint16(c.red)
	return v
}

// Green: value of green component
func (c *Color) Green() uint16 {
	var v uint16 // out
	v = uint16(c.green)
	return v
}

// Blue: value of blue component
func (c *Color) Blue() uint16 {
	var v uint16 // out
	v = uint16(c.blue)
	return v
}

// Copy creates a copy of @src.
//
// The copy should be freed with pango_color_free(). Primarily used by language
// bindings, not that useful otherwise (since colors can just be copied by
// assignment in C).
func (s *Color) Copy() *Color {
	var _arg0 *C.PangoColor // out
	var _cret *C.PangoColor // in

	_arg0 = (*C.PangoColor)(unsafe.Pointer(s))

	_cret = C.pango_color_copy(_arg0)

	var _color *Color // out

	_color = (*Color)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(_color, func(v *Color) {
		C.free(unsafe.Pointer(v))
	})

	return _color
}

// Free frees a color allocated by pango_color_copy().
func (c *Color) free() {
	var _arg0 *C.PangoColor // out

	_arg0 = (*C.PangoColor)(unsafe.Pointer(c))

	C.pango_color_free(_arg0)
}

// Parse: fill in the fields of a color from a string specification.
//
// The string can either one of a large set of standard names. (Taken from the
// CSS Color specification (https://www.w3.org/TR/css-color-4/#named-colors), or
// it can be a value in the form `#rgb`, `#rrggbb`, `#rrrgggbbb` or
// `#rrrrggggbbbb`, where `r`, `g` and `b` are hex digits of the red, green, and
// blue components of the color, respectively. (White in the four forms is
// `#fff`, `#ffffff`, `#fffffffff` and `#ffffffffffff`.)
func (c *Color) Parse(spec string) bool {
	var _arg0 *C.PangoColor // out
	var _arg1 *C.char       // out
	var _cret C.gboolean    // in

	_arg0 = (*C.PangoColor)(unsafe.Pointer(c))
	_arg1 = (*C.char)(C.CString(spec))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.pango_color_parse(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// ParseWithAlpha: fill in the fields of a color from a string specification.
//
// The string can either one of a large set of standard names. (Taken from the
// CSS Color specification (https://www.w3.org/TR/css-color-4/#named-colors), or
// it can be a hexadecimal value in the form `#rgb`, `#rrggbb`, `#rrrgggbbb` or
// `#rrrrggggbbbb` where `r`, `g` and `b` are hex digits of the red, green, and
// blue components of the color, respectively. (White in the four forms is
// `#fff`, `#ffffff`, `#fffffffff` and `#ffffffffffff`.)
//
// Additionally, parse strings of the form `#rgba`, `#rrggbbaa`,
// `#rrrrggggbbbbaaaa`, if @alpha is not nil, and set @alpha to the value
// specified by the hex digits for `a`. If no alpha component is found in @spec,
// @alpha is set to 0xffff (for a solid color).
func (c *Color) ParseWithAlpha(spec string) (uint16, bool) {
	var _arg0 *C.PangoColor // out
	var _arg1 C.guint16     // in
	var _arg2 *C.char       // out
	var _cret C.gboolean    // in

	_arg0 = (*C.PangoColor)(unsafe.Pointer(c))
	_arg2 = (*C.char)(C.CString(spec))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.pango_color_parse_with_alpha(_arg0, &_arg1, _arg2)

	var _alpha uint16 // out
	var _ok bool      // out

	_alpha = uint16(_arg1)
	if _cret != 0 {
		_ok = true
	}

	return _alpha, _ok
}

// String returns a textual specification of @color.
//
// The string is in the hexadecimal form `#rrrrggggbbbb`, where `r`, `g` and `b`
// are hex digits representing the red, green, and blue components respectively.
func (c *Color) String() string {
	var _arg0 *C.PangoColor // out
	var _cret *C.gchar      // in

	_arg0 = (*C.PangoColor)(unsafe.Pointer(c))

	_cret = C.pango_color_to_string(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}
