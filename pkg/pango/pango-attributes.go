// Code generated by girgen. DO NOT EDIT.

package pango

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/internal/box"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <stdbool.h>
// #include <pango/pango.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.pango_attr_iterator_get_type()), F: marshalAttrIterator},
		{T: externglib.Type(C.pango_attr_list_get_type()), F: marshalAttrList},
		{T: externglib.Type(C.pango_attribute_get_type()), F: marshalAttribute},
		{T: externglib.Type(C.pango_color_get_type()), F: marshalColor},
	})
}

// AttrDataCopyFunc: type of a function that can duplicate user data for an
// attribute.
type AttrDataCopyFunc func() interface{}

//export gotk4_AttrDataCopyFunc
func gotk4_AttrDataCopyFunc(arg0 C.gpointer) C.gpointer {
	v := box.Get(uintptr(arg0))
	if v == nil {
		panic(`callback not found`)
	}

	fn := v.(AttrDataCopyFunc)
	ret := fn(userData)

	cret = C.gpointer(ret)

	return cret
}

// AttrFilterFunc: type of a function filtering a list of attributes.
type AttrFilterFunc func(attribute *Attribute) bool

//export gotk4_AttrFilterFunc
func gotk4_AttrFilterFunc(arg0 *C.PangoAttribute, arg1 C.gpointer) C.gboolean {
	v := box.Get(uintptr(arg1))
	if v == nil {
		panic(`callback not found`)
	}

	fn := v.(AttrFilterFunc)
	ret := fn(attribute, userData)

	if ret {
		cret = C.gboolean(1)
	}

	return cret
}

// NewAttrAllowBreaks: create a new allow-breaks attribute.
//
// If breaks are disabled, the range will be kept in a single run, as far as
// possible.
func NewAttrAllowBreaks(allowBreaks bool) *Attribute {
	var arg1 C.gboolean

	if allowBreaks {
		arg1 = C.gboolean(1)
	}

	var cret *C.PangoAttribute
	var ret1 *Attribute

	cret = C.pango_attr_allow_breaks_new(allowBreaks)

	ret1 = WrapAttribute(unsafe.Pointer(cret))
	runtime.SetFinalizer(ret1, func(v *Attribute) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return ret1
}

// NewAttrBackgroundAlpha: create a new background alpha attribute.
func NewAttrBackgroundAlpha(alpha uint16) *Attribute {
	var arg1 C.guint16

	arg1 = C.guint16(alpha)

	var cret *C.PangoAttribute
	var ret1 *Attribute

	cret = C.pango_attr_background_alpha_new(alpha)

	ret1 = WrapAttribute(unsafe.Pointer(cret))
	runtime.SetFinalizer(ret1, func(v *Attribute) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return ret1
}

// NewAttrBackground: create a new background color attribute.
func NewAttrBackground(red uint16, green uint16, blue uint16) *Attribute {
	var arg1 C.guint16
	var arg2 C.guint16
	var arg3 C.guint16

	arg1 = C.guint16(red)
	arg2 = C.guint16(green)
	arg3 = C.guint16(blue)

	var cret *C.PangoAttribute
	var ret1 *Attribute

	cret = C.pango_attr_background_new(red, green, blue)

	ret1 = WrapAttribute(unsafe.Pointer(cret))
	runtime.SetFinalizer(ret1, func(v *Attribute) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return ret1
}

// NewAttrFallback: create a new font fallback attribute.
//
// If fallback is disabled, characters will only be used from the closest
// matching font on the system. No fallback will be done to other fonts on the
// system that might contain the characters in the text.
func NewAttrFallback(enableFallback bool) *Attribute {
	var arg1 C.gboolean

	if enableFallback {
		arg1 = C.gboolean(1)
	}

	var cret *C.PangoAttribute
	var ret1 *Attribute

	cret = C.pango_attr_fallback_new(enableFallback)

	ret1 = WrapAttribute(unsafe.Pointer(cret))
	runtime.SetFinalizer(ret1, func(v *Attribute) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return ret1
}

// NewAttrFamily: create a new font family attribute.
func NewAttrFamily(family string) *Attribute {
	var arg1 *C.char

	arg1 = (*C.char)(C.CString(family))
	defer C.free(unsafe.Pointer(arg1))

	var cret *C.PangoAttribute
	var ret1 *Attribute

	cret = C.pango_attr_family_new(family)

	ret1 = WrapAttribute(unsafe.Pointer(cret))
	runtime.SetFinalizer(ret1, func(v *Attribute) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return ret1
}

// NewAttrFontDesc: create a new font description attribute.
//
// This attribute allows setting family, style, weight, variant, stretch, and
// size simultaneously.
func NewAttrFontDesc(desc *FontDescription) *Attribute {
	var arg1 *C.PangoFontDescription

	arg1 = (*C.PangoFontDescription)(unsafe.Pointer(desc.Native()))

	var cret *C.PangoAttribute
	var ret1 *Attribute

	cret = C.pango_attr_font_desc_new(desc)

	ret1 = WrapAttribute(unsafe.Pointer(cret))
	runtime.SetFinalizer(ret1, func(v *Attribute) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return ret1
}

// NewAttrFontFeatures: create a new font features tag attribute.
func NewAttrFontFeatures(features string) *Attribute {
	var arg1 *C.gchar

	arg1 = (*C.gchar)(C.CString(features))
	defer C.free(unsafe.Pointer(arg1))

	var cret *C.PangoAttribute
	var ret1 *Attribute

	cret = C.pango_attr_font_features_new(features)

	ret1 = WrapAttribute(unsafe.Pointer(cret))
	runtime.SetFinalizer(ret1, func(v *Attribute) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return ret1
}

// NewAttrForegroundAlpha: create a new foreground alpha attribute.
func NewAttrForegroundAlpha(alpha uint16) *Attribute {
	var arg1 C.guint16

	arg1 = C.guint16(alpha)

	var cret *C.PangoAttribute
	var ret1 *Attribute

	cret = C.pango_attr_foreground_alpha_new(alpha)

	ret1 = WrapAttribute(unsafe.Pointer(cret))
	runtime.SetFinalizer(ret1, func(v *Attribute) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return ret1
}

// NewAttrForeground: create a new foreground color attribute.
func NewAttrForeground(red uint16, green uint16, blue uint16) *Attribute {
	var arg1 C.guint16
	var arg2 C.guint16
	var arg3 C.guint16

	arg1 = C.guint16(red)
	arg2 = C.guint16(green)
	arg3 = C.guint16(blue)

	var cret *C.PangoAttribute
	var ret1 *Attribute

	cret = C.pango_attr_foreground_new(red, green, blue)

	ret1 = WrapAttribute(unsafe.Pointer(cret))
	runtime.SetFinalizer(ret1, func(v *Attribute) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return ret1
}

// NewAttrGravityHint: create a new gravity hint attribute.
func NewAttrGravityHint(hint GravityHint) *Attribute {
	var arg1 C.PangoGravityHint

	arg1 = (C.PangoGravityHint)(hint)

	var cret *C.PangoAttribute
	var ret1 *Attribute

	cret = C.pango_attr_gravity_hint_new(hint)

	ret1 = WrapAttribute(unsafe.Pointer(cret))
	runtime.SetFinalizer(ret1, func(v *Attribute) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return ret1
}

// NewAttrGravity: create a new gravity attribute.
func NewAttrGravity(gravity Gravity) *Attribute {
	var arg1 C.PangoGravity

	arg1 = (C.PangoGravity)(gravity)

	var cret *C.PangoAttribute
	var ret1 *Attribute

	cret = C.pango_attr_gravity_new(gravity)

	ret1 = WrapAttribute(unsafe.Pointer(cret))
	runtime.SetFinalizer(ret1, func(v *Attribute) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return ret1
}

// NewAttrInsertHyphens: create a new insert-hyphens attribute.
//
// Pango will insert hyphens when breaking lines in the middle of a word. This
// attribute can be used to suppress the hyphen.
func NewAttrInsertHyphens(insertHyphens bool) *Attribute {
	var arg1 C.gboolean

	if insertHyphens {
		arg1 = C.gboolean(1)
	}

	var cret *C.PangoAttribute
	var ret1 *Attribute

	cret = C.pango_attr_insert_hyphens_new(insertHyphens)

	ret1 = WrapAttribute(unsafe.Pointer(cret))
	runtime.SetFinalizer(ret1, func(v *Attribute) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return ret1
}

// NewAttrLanguage: create a new language tag attribute.
func NewAttrLanguage(language *Language) *Attribute {
	var arg1 *C.PangoLanguage

	arg1 = (*C.PangoLanguage)(unsafe.Pointer(language.Native()))

	var cret *C.PangoAttribute
	var ret1 *Attribute

	cret = C.pango_attr_language_new(language)

	ret1 = WrapAttribute(unsafe.Pointer(cret))
	runtime.SetFinalizer(ret1, func(v *Attribute) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return ret1
}

// NewAttrLetterSpacing: create a new letter-spacing attribute.
func NewAttrLetterSpacing(letterSpacing int) *Attribute {
	var arg1 C.int

	arg1 = C.int(letterSpacing)

	var cret *C.PangoAttribute
	var ret1 *Attribute

	cret = C.pango_attr_letter_spacing_new(letterSpacing)

	ret1 = WrapAttribute(unsafe.Pointer(cret))
	runtime.SetFinalizer(ret1, func(v *Attribute) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return ret1
}

// NewAttrOverlineColor: create a new overline color attribute.
//
// This attribute modifies the color of overlines. If not set, overlines will
// use the foreground color.
func NewAttrOverlineColor(red uint16, green uint16, blue uint16) *Attribute {
	var arg1 C.guint16
	var arg2 C.guint16
	var arg3 C.guint16

	arg1 = C.guint16(red)
	arg2 = C.guint16(green)
	arg3 = C.guint16(blue)

	var cret *C.PangoAttribute
	var ret1 *Attribute

	cret = C.pango_attr_overline_color_new(red, green, blue)

	ret1 = WrapAttribute(unsafe.Pointer(cret))
	runtime.SetFinalizer(ret1, func(v *Attribute) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return ret1
}

// NewAttrOverline: create a new overline-style attribute.
func NewAttrOverline(overline Overline) *Attribute {
	var arg1 C.PangoOverline

	arg1 = (C.PangoOverline)(overline)

	var cret *C.PangoAttribute
	var ret1 *Attribute

	cret = C.pango_attr_overline_new(overline)

	ret1 = WrapAttribute(unsafe.Pointer(cret))
	runtime.SetFinalizer(ret1, func(v *Attribute) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return ret1
}

// NewAttrRise: create a new baseline displacement attribute.
func NewAttrRise(rise int) *Attribute {
	var arg1 C.int

	arg1 = C.int(rise)

	var cret *C.PangoAttribute
	var ret1 *Attribute

	cret = C.pango_attr_rise_new(rise)

	ret1 = WrapAttribute(unsafe.Pointer(cret))
	runtime.SetFinalizer(ret1, func(v *Attribute) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return ret1
}

// NewAttrScale: create a new font size scale attribute.
//
// The base font for the affected text will have its size multiplied by
// @scale_factor.
func NewAttrScale(scaleFactor float64) *Attribute {
	var arg1 C.double

	arg1 = C.double(scaleFactor)

	var cret *C.PangoAttribute
	var ret1 *Attribute

	cret = C.pango_attr_scale_new(scaleFactor)

	ret1 = WrapAttribute(unsafe.Pointer(cret))
	runtime.SetFinalizer(ret1, func(v *Attribute) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return ret1
}

// NewAttrShape: create a new shape attribute.
//
// A shape is used to impose a particular ink and logical rectangle on the
// result of shaping a particular glyph. This might be used, for instance, for
// embedding a picture or a widget inside a `PangoLayout`.
func NewAttrShape(inkRect *Rectangle, logicalRect *Rectangle) *Attribute {
	var arg1 *C.PangoRectangle
	var arg2 *C.PangoRectangle

	arg1 = (*C.PangoRectangle)(unsafe.Pointer(inkRect.Native()))
	arg2 = (*C.PangoRectangle)(unsafe.Pointer(logicalRect.Native()))

	var cret *C.PangoAttribute
	var ret1 *Attribute

	cret = C.pango_attr_shape_new(inkRect, logicalRect)

	ret1 = WrapAttribute(unsafe.Pointer(cret))
	runtime.SetFinalizer(ret1, func(v *Attribute) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return ret1
}

// AttrShapeNewWithData creates a new shape attribute.
//
// Like pango_attr_shape_new(), but a user data pointer is also provided; this
// pointer can be accessed when later rendering the glyph.
func AttrShapeNewWithData(inkRect *Rectangle, logicalRect *Rectangle, data interface{}, copyFunc AttrDataCopyFunc) *Attribute {

	var cret *C.PangoAttribute
	var ret1 *Attribute

	cret = C.pango_attr_shape_new_with_data(inkRect, logicalRect, data, copyFunc, destroyFunc)

	ret1 = WrapAttribute(unsafe.Pointer(cret))
	runtime.SetFinalizer(ret1, func(v *Attribute) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return ret1
}

// NewAttrShow: create a new attribute that influences how invisible characters
// are rendered.
func NewAttrShow(flags ShowFlags) *Attribute {
	var arg1 C.PangoShowFlags

	arg1 = (C.PangoShowFlags)(flags)

	var cret *C.PangoAttribute
	var ret1 *Attribute

	cret = C.pango_attr_show_new(flags)

	ret1 = WrapAttribute(unsafe.Pointer(cret))
	runtime.SetFinalizer(ret1, func(v *Attribute) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return ret1
}

// NewAttrSize: create a new font-size attribute in fractional points.
func NewAttrSize(size int) *Attribute {
	var arg1 C.int

	arg1 = C.int(size)

	var cret *C.PangoAttribute
	var ret1 *Attribute

	cret = C.pango_attr_size_new(size)

	ret1 = WrapAttribute(unsafe.Pointer(cret))
	runtime.SetFinalizer(ret1, func(v *Attribute) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return ret1
}

// AttrSizeNewAbsolute: create a new font-size attribute in device units.
func AttrSizeNewAbsolute(size int) *Attribute {
	var arg1 C.int

	arg1 = C.int(size)

	var cret *C.PangoAttribute
	var ret1 *Attribute

	cret = C.pango_attr_size_new_absolute(size)

	ret1 = WrapAttribute(unsafe.Pointer(cret))
	runtime.SetFinalizer(ret1, func(v *Attribute) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return ret1
}

// NewAttrStretch: create a new font stretch attribute.
func NewAttrStretch(stretch Stretch) *Attribute {
	var arg1 C.PangoStretch

	arg1 = (C.PangoStretch)(stretch)

	var cret *C.PangoAttribute
	var ret1 *Attribute

	cret = C.pango_attr_stretch_new(stretch)

	ret1 = WrapAttribute(unsafe.Pointer(cret))
	runtime.SetFinalizer(ret1, func(v *Attribute) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return ret1
}

// NewAttrStrikethroughColor: create a new strikethrough color attribute.
//
// This attribute modifies the color of strikethrough lines. If not set,
// strikethrough lines will use the foreground color.
func NewAttrStrikethroughColor(red uint16, green uint16, blue uint16) *Attribute {
	var arg1 C.guint16
	var arg2 C.guint16
	var arg3 C.guint16

	arg1 = C.guint16(red)
	arg2 = C.guint16(green)
	arg3 = C.guint16(blue)

	var cret *C.PangoAttribute
	var ret1 *Attribute

	cret = C.pango_attr_strikethrough_color_new(red, green, blue)

	ret1 = WrapAttribute(unsafe.Pointer(cret))
	runtime.SetFinalizer(ret1, func(v *Attribute) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return ret1
}

// NewAttrStrikethrough: create a new strike-through attribute.
func NewAttrStrikethrough(strikethrough bool) *Attribute {
	var arg1 C.gboolean

	if strikethrough {
		arg1 = C.gboolean(1)
	}

	var cret *C.PangoAttribute
	var ret1 *Attribute

	cret = C.pango_attr_strikethrough_new(strikethrough)

	ret1 = WrapAttribute(unsafe.Pointer(cret))
	runtime.SetFinalizer(ret1, func(v *Attribute) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return ret1
}

// NewAttrStyle: create a new font slant style attribute.
func NewAttrStyle(style Style) *Attribute {
	var arg1 C.PangoStyle

	arg1 = (C.PangoStyle)(style)

	var cret *C.PangoAttribute
	var ret1 *Attribute

	cret = C.pango_attr_style_new(style)

	ret1 = WrapAttribute(unsafe.Pointer(cret))
	runtime.SetFinalizer(ret1, func(v *Attribute) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return ret1
}

// AttrTypeGetName fetches the attribute type name.
//
// The attribute type name is the string passed in when registering the type
// using [type_func@attr_type_register].
//
// The returned value is an interned string (see g_intern_string() for what that
// means) that should not be modified or freed.
func AttrTypeGetName(typ AttrType) string {
	var arg1 C.PangoAttrType

	arg1 = (C.PangoAttrType)(typ)

	var cret *C.char
	var ret1 string

	cret = C.pango_attr_type_get_name(typ)

	ret1 = C.GoString(cret)

	return ret1
}

// AttrTypeRegister: allocate a new attribute type ID.
//
// The attribute type name can be accessed later by using
// [type_func@Pango.AttrType.get_name].
func AttrTypeRegister(name string) AttrType {
	var arg1 *C.gchar

	arg1 = (*C.gchar)(C.CString(name))
	defer C.free(unsafe.Pointer(arg1))

	var cret C.PangoAttrType
	var ret1 AttrType

	cret = C.pango_attr_type_register(name)

	ret1 = AttrType(cret)

	return ret1
}

// NewAttrUnderlineColor: create a new underline color attribute.
//
// This attribute modifies the color of underlines. If not set, underlines will
// use the foreground color.
func NewAttrUnderlineColor(red uint16, green uint16, blue uint16) *Attribute {
	var arg1 C.guint16
	var arg2 C.guint16
	var arg3 C.guint16

	arg1 = C.guint16(red)
	arg2 = C.guint16(green)
	arg3 = C.guint16(blue)

	var cret *C.PangoAttribute
	var ret1 *Attribute

	cret = C.pango_attr_underline_color_new(red, green, blue)

	ret1 = WrapAttribute(unsafe.Pointer(cret))
	runtime.SetFinalizer(ret1, func(v *Attribute) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return ret1
}

// NewAttrUnderline: create a new underline-style attribute.
func NewAttrUnderline(underline Underline) *Attribute {
	var arg1 C.PangoUnderline

	arg1 = (C.PangoUnderline)(underline)

	var cret *C.PangoAttribute
	var ret1 *Attribute

	cret = C.pango_attr_underline_new(underline)

	ret1 = WrapAttribute(unsafe.Pointer(cret))
	runtime.SetFinalizer(ret1, func(v *Attribute) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return ret1
}

// NewAttrVariant: create a new font variant attribute (normal or small caps).
func NewAttrVariant(variant Variant) *Attribute {
	var arg1 C.PangoVariant

	arg1 = (C.PangoVariant)(variant)

	var cret *C.PangoAttribute
	var ret1 *Attribute

	cret = C.pango_attr_variant_new(variant)

	ret1 = WrapAttribute(unsafe.Pointer(cret))
	runtime.SetFinalizer(ret1, func(v *Attribute) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return ret1
}

// NewAttrWeight: create a new font weight attribute.
func NewAttrWeight(weight Weight) *Attribute {
	var arg1 C.PangoWeight

	arg1 = (C.PangoWeight)(weight)

	var cret *C.PangoAttribute
	var ret1 *Attribute

	cret = C.pango_attr_weight_new(weight)

	ret1 = WrapAttribute(unsafe.Pointer(cret))
	runtime.SetFinalizer(ret1, func(v *Attribute) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return ret1
}

// MarkupParserFinish finishes parsing markup.
//
// After feeding a Pango markup parser some data with
// g_markup_parse_context_parse(), use this function to get the list of
// attributes and text out of the markup. This function will not free @context,
// use g_markup_parse_context_free() to do so.
func MarkupParserFinish(context *glib.MarkupParseContext) (attrList *AttrList, text string, accelChar uint32, err error) {
	var arg1 *C.GMarkupParseContext
	var errout *C.GError

	arg1 = (*C.GMarkupParseContext)(unsafe.Pointer(context.Native()))

	var arg2 *C.PangoAttrList
	var ret2 **AttrList
	var arg3 *C.char
	var ret3 string
	var arg4 C.gunichar
	var ret4 uint32
	var goerr error

	C.pango_markup_parser_finish(context, &arg2, &arg3, &arg4, &errout)

	ret2 = WrapAttrList(unsafe.Pointer(arg2))
	runtime.SetFinalizer(ret2, func(v **AttrList) {
		C.free(unsafe.Pointer(v.Native()))
	})
	ret3 = C.GoString(arg3)
	defer C.free(unsafe.Pointer(arg3))
	ret4 = C.gunichar(arg4)
	if errout != nil {
		goerr = fmt.Errorf("%d: %s", errout.code, C.GoString(errout.message))
		C.g_error_free(errout)
	}

	return ret2, ret3, ret4, goerr
}

// NewMarkupParser: incrementally parses marked-up text to create a plain-text
// string and an attribute list.
//
// See the Pango Markup (pango_markup.html) docs for details about the supported
// markup.
//
// If @accel_marker is nonzero, the given character will mark the character
// following it as an accelerator. For example, @accel_marker might be an
// ampersand or underscore. All characters marked as an accelerator will receive
// a PANGO_UNDERLINE_LOW attribute, and the first character so marked will be
// returned in @accel_char, when calling [func@markup_parser_finish]. Two
// @accel_marker characters following each other produce a single literal
// @accel_marker character.
//
// To feed markup to the parser, use g_markup_parse_context_parse() on the
// returned `GMarkupParseContext`. When done with feeding markup to the parser,
// use [func@markup_parser_finish] to get the data out of it, and then use
// g_markup_parse_context_free() to free it.
//
// This function is designed for applications that read Pango markup from
// streams. To simply parse a string containing Pango markup, the
// [func@parse_markup] API is recommended instead.
func NewMarkupParser(accelMarker uint32) *glib.MarkupParseContext {
	var arg1 C.gunichar

	arg1 = C.gunichar(accelMarker)

	var cret *C.GMarkupParseContext
	var ret1 *glib.MarkupParseContext

	cret = C.pango_markup_parser_new(accelMarker)

	ret1 = glib.WrapMarkupParseContext(unsafe.Pointer(cret))

	return ret1
}

// ParseMarkup parses marked-up text to create a plain-text string and an
// attribute list.
//
// See the Pango Markup (pango_markup.html) docs for details about the supported
// markup.
//
// If @accel_marker is nonzero, the given character will mark the character
// following it as an accelerator. For example, @accel_marker might be an
// ampersand or underscore. All characters marked as an accelerator will receive
// a PANGO_UNDERLINE_LOW attribute, and the first character so marked will be
// returned in @accel_char. Two @accel_marker characters following each other
// produce a single literal @accel_marker character.
//
// To parse a stream of pango markup incrementally, use
// [func@markup_parser_new].
//
// If any error happens, none of the output arguments are touched except for
// @error.
func ParseMarkup(markupText string, length int, accelMarker uint32) (attrList *AttrList, text string, accelChar uint32, err error) {
	var arg1 *C.char
	var arg2 C.int
	var arg3 C.gunichar
	var errout *C.GError

	arg1 = (*C.char)(C.CString(markupText))
	defer C.free(unsafe.Pointer(arg1))
	arg2 = C.int(length)
	arg3 = C.gunichar(accelMarker)

	var arg4 *C.PangoAttrList
	var ret4 **AttrList
	var arg5 *C.char
	var ret5 string
	var arg6 C.gunichar
	var ret6 uint32
	var goerr error

	C.pango_parse_markup(markupText, length, accelMarker, &arg4, &arg5, &arg6, &errout)

	ret4 = WrapAttrList(unsafe.Pointer(arg4))
	runtime.SetFinalizer(ret4, func(v **AttrList) {
		C.free(unsafe.Pointer(v.Native()))
	})
	ret5 = C.GoString(arg5)
	defer C.free(unsafe.Pointer(arg5))
	ret6 = C.gunichar(arg6)
	if errout != nil {
		goerr = fmt.Errorf("%d: %s", errout.code, C.GoString(errout.message))
		C.g_error_free(errout)
	}

	return ret4, ret5, ret6, goerr
}

// AttrColor: the `PangoAttrColor` structure is used to represent attributes
// that are colors.
type AttrColor struct {
	native C.PangoAttrColor
}

// WrapAttrColor wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapAttrColor(ptr unsafe.Pointer) *AttrColor {
	if ptr == nil {
		return nil
	}

	return (*AttrColor)(ptr)
}

func marshalAttrColor(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapAttrColor(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (a *AttrColor) Native() unsafe.Pointer {
	return unsafe.Pointer(&a.native)
}

// Attr gets the field inside the struct.
func (a *AttrColor) Attr() Attribute {
	v = WrapAttribute(unsafe.Pointer(a.native.attr))
}

// Color gets the field inside the struct.
func (a *AttrColor) Color() Color {
	v = WrapColor(unsafe.Pointer(a.native.color))
}

// AttrFloat: the `PangoAttrFloat` structure is used to represent attributes
// with a float or double value.
type AttrFloat struct {
	native C.PangoAttrFloat
}

// WrapAttrFloat wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapAttrFloat(ptr unsafe.Pointer) *AttrFloat {
	if ptr == nil {
		return nil
	}

	return (*AttrFloat)(ptr)
}

func marshalAttrFloat(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapAttrFloat(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (a *AttrFloat) Native() unsafe.Pointer {
	return unsafe.Pointer(&a.native)
}

// Attr gets the field inside the struct.
func (a *AttrFloat) Attr() Attribute {
	v = WrapAttribute(unsafe.Pointer(a.native.attr))
}

// Value gets the field inside the struct.
func (a *AttrFloat) Value() float64 {
	v = C.double(a.native.value)
}

// AttrFontDesc: the `PangoAttrFontDesc` structure is used to store an attribute
// that sets all aspects of the font description at once.
type AttrFontDesc struct {
	native C.PangoAttrFontDesc
}

// WrapAttrFontDesc wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapAttrFontDesc(ptr unsafe.Pointer) *AttrFontDesc {
	if ptr == nil {
		return nil
	}

	return (*AttrFontDesc)(ptr)
}

func marshalAttrFontDesc(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapAttrFontDesc(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (a *AttrFontDesc) Native() unsafe.Pointer {
	return unsafe.Pointer(&a.native)
}

// Attr gets the field inside the struct.
func (a *AttrFontDesc) Attr() Attribute {
	v = WrapAttribute(unsafe.Pointer(a.native.attr))
}

// Desc gets the field inside the struct.
func (a *AttrFontDesc) Desc() *FontDescription {
	v = WrapFontDescription(unsafe.Pointer(a.native.desc))
}

// AttrFontFeatures: the `PangoAttrFontFeatures` structure is used to represent
// OpenType font features as an attribute.
type AttrFontFeatures struct {
	native C.PangoAttrFontFeatures
}

// WrapAttrFontFeatures wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapAttrFontFeatures(ptr unsafe.Pointer) *AttrFontFeatures {
	if ptr == nil {
		return nil
	}

	return (*AttrFontFeatures)(ptr)
}

func marshalAttrFontFeatures(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapAttrFontFeatures(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (a *AttrFontFeatures) Native() unsafe.Pointer {
	return unsafe.Pointer(&a.native)
}

// Attr gets the field inside the struct.
func (a *AttrFontFeatures) Attr() Attribute {
	v = WrapAttribute(unsafe.Pointer(a.native.attr))
}

// Features gets the field inside the struct.
func (a *AttrFontFeatures) Features() string {
	v = C.GoString(a.native.features)
}

// AttrInt: the `PangoAttrInt` structure is used to represent attributes with an
// integer or enumeration value.
type AttrInt struct {
	native C.PangoAttrInt
}

// WrapAttrInt wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapAttrInt(ptr unsafe.Pointer) *AttrInt {
	if ptr == nil {
		return nil
	}

	return (*AttrInt)(ptr)
}

func marshalAttrInt(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapAttrInt(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (a *AttrInt) Native() unsafe.Pointer {
	return unsafe.Pointer(&a.native)
}

// Attr gets the field inside the struct.
func (a *AttrInt) Attr() Attribute {
	v = WrapAttribute(unsafe.Pointer(a.native.attr))
}

// Value gets the field inside the struct.
func (a *AttrInt) Value() int {
	v = C.int(a.native.value)
}

// AttrIterator: a `PangoAttrIterator` is used to iterate through a
// `PangoAttrList`.
//
// A new iterator is created with [method@Pango.AttrList.get_iterator]. Once the
// iterator is created, it can be advanced through the style changes in the text
// using [method@Pango.AttrIterator.next]. At each style change, the range of
// the current style segment and the attributes currently in effect can be
// queried.
type AttrIterator struct {
	native C.PangoAttrIterator
}

// WrapAttrIterator wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapAttrIterator(ptr unsafe.Pointer) *AttrIterator {
	if ptr == nil {
		return nil
	}

	return (*AttrIterator)(ptr)
}

func marshalAttrIterator(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapAttrIterator(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (a *AttrIterator) Native() unsafe.Pointer {
	return unsafe.Pointer(&a.native)
}

// Copy: copy a `PangoAttrIterator`.
func (i *AttrIterator) Copy() *AttrIterator {
	var arg0 *C.PangoAttrIterator

	arg0 = (*C.PangoAttrIterator)(unsafe.Pointer(i.Native()))

	var cret *C.PangoAttrIterator
	var ret1 *AttrIterator

	cret = C.pango_attr_iterator_copy(arg0)

	ret1 = WrapAttrIterator(unsafe.Pointer(cret))
	runtime.SetFinalizer(ret1, func(v *AttrIterator) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return ret1
}

// Destroy: destroy a `PangoAttrIterator` and free all associated memory.
func (i *AttrIterator) Destroy() {
	var arg0 *C.PangoAttrIterator

	arg0 = (*C.PangoAttrIterator)(unsafe.Pointer(i.Native()))

	C.pango_attr_iterator_destroy(arg0)
}

// Get: find the current attribute of a particular type at the iterator
// location. When multiple attributes of the same type overlap, the attribute
// whose range starts closest to the current location is used.
func (i *AttrIterator) Get(typ AttrType) *Attribute {
	var arg0 *C.PangoAttrIterator
	var arg1 C.PangoAttrType

	arg0 = (*C.PangoAttrIterator)(unsafe.Pointer(i.Native()))
	arg1 = (C.PangoAttrType)(typ)

	var cret *C.PangoAttribute
	var ret1 *Attribute

	cret = C.pango_attr_iterator_get(arg0, typ)

	ret1 = WrapAttribute(unsafe.Pointer(cret))

	return ret1
}

// Attrs gets a list of all attributes at the current position of the iterator.
func (i *AttrIterator) Attrs() *glib.SList {
	var arg0 *C.PangoAttrIterator

	arg0 = (*C.PangoAttrIterator)(unsafe.Pointer(i.Native()))

	var cret *C.GSList
	var ret1 *glib.SList

	cret = C.pango_attr_iterator_get_attrs(arg0)

	ret1 = glib.WrapSList(unsafe.Pointer(cret))
	runtime.SetFinalizer(ret1, func(v *glib.SList) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return ret1
}

// Font: get the font and other attributes at the current iterator position.
func (i *AttrIterator) Font(desc *FontDescription, language **Language, extraAttrs **glib.SList) {
	var arg0 *C.PangoAttrIterator
	var arg1 *C.PangoFontDescription
	var arg2 **C.PangoLanguage
	var arg3 **C.GSList

	arg0 = (*C.PangoAttrIterator)(unsafe.Pointer(i.Native()))
	arg1 = (*C.PangoFontDescription)(unsafe.Pointer(desc.Native()))
	arg2 = (**C.PangoLanguage)(unsafe.Pointer(language.Native()))
	arg3 = (**C.GSList)(unsafe.Pointer(extraAttrs.Native()))

	C.pango_attr_iterator_get_font(arg0, desc, language, extraAttrs)
}

// Next: advance the iterator until the next change of style.
func (i *AttrIterator) Next() bool {
	var arg0 *C.PangoAttrIterator

	arg0 = (*C.PangoAttrIterator)(unsafe.Pointer(i.Native()))

	var cret C.gboolean
	var ret1 bool

	cret = C.pango_attr_iterator_next(arg0)

	ret1 = C.bool(cret) != C.false

	return ret1
}

// Range: get the range of the current segment. Note that the stored return
// values are signed, not unsigned like the values in `PangoAttribute`. To deal
// with this API oversight, stored return values that wouldn't fit into a signed
// integer are clamped to G_MAXINT.
func (i *AttrIterator) Range() (start int, end int) {
	var arg0 *C.PangoAttrIterator

	arg0 = (*C.PangoAttrIterator)(unsafe.Pointer(i.Native()))

	var arg1 C.gint
	var ret1 int
	var arg2 C.gint
	var ret2 int

	C.pango_attr_iterator_range(arg0, &arg1, &arg2)

	ret1 = C.gint(arg1)
	ret2 = C.gint(arg2)

	return ret1, ret2
}

// AttrLanguage: the `PangoAttrLanguage` structure is used to represent
// attributes that are languages.
type AttrLanguage struct {
	native C.PangoAttrLanguage
}

// WrapAttrLanguage wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapAttrLanguage(ptr unsafe.Pointer) *AttrLanguage {
	if ptr == nil {
		return nil
	}

	return (*AttrLanguage)(ptr)
}

func marshalAttrLanguage(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapAttrLanguage(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (a *AttrLanguage) Native() unsafe.Pointer {
	return unsafe.Pointer(&a.native)
}

// Attr gets the field inside the struct.
func (a *AttrLanguage) Attr() Attribute {
	v = WrapAttribute(unsafe.Pointer(a.native.attr))
}

// Value gets the field inside the struct.
func (a *AttrLanguage) Value() *Language {
	v = WrapLanguage(unsafe.Pointer(a.native.value))
}

// AttrList: a `PangoAttrList` represents a list of attributes that apply to a
// section of text.
//
// The attributes in a `PangoAttrList` are, in general, allowed to overlap in an
// arbitrary fashion. However, if the attributes are manipulated only through
// [method@Pango.AttrList.change], the overlap between properties will meet
// stricter criteria.
//
// Since the `PangoAttrList` structure is stored as a linear list, it is not
// suitable for storing attributes for large amounts of text. In general, you
// should not use a single `PangoAttrList` for more than one paragraph of text.
type AttrList struct {
	native C.PangoAttrList
}

// WrapAttrList wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapAttrList(ptr unsafe.Pointer) *AttrList {
	if ptr == nil {
		return nil
	}

	return (*AttrList)(ptr)
}

func marshalAttrList(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapAttrList(unsafe.Pointer(b)), nil
}

// NewAttrList constructs a struct AttrList.
func NewAttrList() *AttrList {
	var cret *C.PangoAttrList
	var ret1 *AttrList

	cret = C.pango_attr_list_new()

	ret1 = WrapAttrList(unsafe.Pointer(cret))
	runtime.SetFinalizer(ret1, func(v *AttrList) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return ret1
}

// Native returns the underlying C source pointer.
func (a *AttrList) Native() unsafe.Pointer {
	return unsafe.Pointer(&a.native)
}

// Change: insert the given attribute into the `PangoAttrList`.
//
// It will replace any attributes of the same type on that segment and be merged
// with any adjoining attributes that are identical.
//
// This function is slower than [method@Pango.AttrList.insert] for creating an
// attribute list in order (potentially much slower for large lists). However,
// [method@Pango.AttrList.insert] is not suitable for continually changing a set
// of attributes since it never removes or combines existing attributes.
func (l *AttrList) Change(attr *Attribute) {
	var arg0 *C.PangoAttrList
	var arg1 *C.PangoAttribute

	arg0 = (*C.PangoAttrList)(unsafe.Pointer(l.Native()))
	arg1 = (*C.PangoAttribute)(unsafe.Pointer(attr.Native()))

	C.pango_attr_list_change(arg0, attr)
}

// Copy: copy @list and return an identical new list.
func (l *AttrList) Copy() *AttrList {
	var arg0 *C.PangoAttrList

	arg0 = (*C.PangoAttrList)(unsafe.Pointer(l.Native()))

	var cret *C.PangoAttrList
	var ret1 *AttrList

	cret = C.pango_attr_list_copy(arg0)

	ret1 = WrapAttrList(unsafe.Pointer(cret))
	runtime.SetFinalizer(ret1, func(v *AttrList) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return ret1
}

// Equal checks whether @list and @other_list contain the same attributes and
// whether those attributes apply to the same ranges. Beware that this will
// return wrong values if any list contains duplicates.
func (l *AttrList) Equal(otherList *AttrList) bool {
	var arg0 *C.PangoAttrList
	var arg1 *C.PangoAttrList

	arg0 = (*C.PangoAttrList)(unsafe.Pointer(l.Native()))
	arg1 = (*C.PangoAttrList)(unsafe.Pointer(otherList.Native()))

	var cret C.gboolean
	var ret1 bool

	cret = C.pango_attr_list_equal(arg0, otherList)

	ret1 = C.bool(cret) != C.false

	return ret1
}

// Filter: given a `PangoAttrList` and callback function, removes any elements
// of @list for which @func returns true and inserts them into a new list.
func (l *AttrList) Filter(fn AttrFilterFunc) *AttrList {
	var arg0 *C.PangoAttrList

	arg0 = (*C.PangoAttrList)(unsafe.Pointer(l.Native()))

	var cret *C.PangoAttrList
	var ret1 *AttrList

	cret = C.pango_attr_list_filter(arg0, fn, data)

	ret1 = WrapAttrList(unsafe.Pointer(cret))
	runtime.SetFinalizer(ret1, func(v *AttrList) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return ret1
}

// Attributes gets a list of all attributes in @list.
func (l *AttrList) Attributes() *glib.SList {
	var arg0 *C.PangoAttrList

	arg0 = (*C.PangoAttrList)(unsafe.Pointer(l.Native()))

	var cret *C.GSList
	var ret1 *glib.SList

	cret = C.pango_attr_list_get_attributes(arg0)

	ret1 = glib.WrapSList(unsafe.Pointer(cret))
	runtime.SetFinalizer(ret1, func(v *glib.SList) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return ret1
}

// Iterator: create a iterator initialized to the beginning of the list. @list
// must not be modified until this iterator is freed.
func (l *AttrList) Iterator() *AttrIterator {
	var arg0 *C.PangoAttrList

	arg0 = (*C.PangoAttrList)(unsafe.Pointer(l.Native()))

	var cret *C.PangoAttrIterator
	var ret1 *AttrIterator

	cret = C.pango_attr_list_get_iterator(arg0)

	ret1 = WrapAttrIterator(unsafe.Pointer(cret))
	runtime.SetFinalizer(ret1, func(v *AttrIterator) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return ret1
}

// Insert: insert the given attribute into the `PangoAttrList`.
//
// It will be inserted after all other attributes with a matching @start_index.
func (l *AttrList) Insert(attr *Attribute) {
	var arg0 *C.PangoAttrList
	var arg1 *C.PangoAttribute

	arg0 = (*C.PangoAttrList)(unsafe.Pointer(l.Native()))
	arg1 = (*C.PangoAttribute)(unsafe.Pointer(attr.Native()))

	C.pango_attr_list_insert(arg0, attr)
}

// InsertBefore: insert the given attribute into the `PangoAttrList`.
//
// It will be inserted before all other attributes with a matching @start_index.
func (l *AttrList) InsertBefore(attr *Attribute) {
	var arg0 *C.PangoAttrList
	var arg1 *C.PangoAttribute

	arg0 = (*C.PangoAttrList)(unsafe.Pointer(l.Native()))
	arg1 = (*C.PangoAttribute)(unsafe.Pointer(attr.Native()))

	C.pango_attr_list_insert_before(arg0, attr)
}

// Ref: increase the reference count of the given attribute list by one.
func (l *AttrList) Ref() *AttrList {
	var arg0 *C.PangoAttrList

	arg0 = (*C.PangoAttrList)(unsafe.Pointer(l.Native()))

	var cret *C.PangoAttrList
	var ret1 *AttrList

	cret = C.pango_attr_list_ref(arg0)

	ret1 = WrapAttrList(unsafe.Pointer(cret))
	runtime.SetFinalizer(ret1, func(v *AttrList) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return ret1
}

// Splice: this function opens up a hole in @list, fills it in with attributes
// from the left, and then merges @other on top of the hole.
//
// This operation is equivalent to stretching every attribute that applies at
// position @pos in @list by an amount @len, and then calling
// [method@Pango.AttrList.change] with a copy of each attribute in @other in
// sequence (offset in position by @pos).
//
// This operation proves useful for, for instance, inserting a pre-edit string
// in the middle of an edit buffer.
func (l *AttrList) Splice(other *AttrList, pos int, len int) {
	var arg0 *C.PangoAttrList
	var arg1 *C.PangoAttrList
	var arg2 C.gint
	var arg3 C.gint

	arg0 = (*C.PangoAttrList)(unsafe.Pointer(l.Native()))
	arg1 = (*C.PangoAttrList)(unsafe.Pointer(other.Native()))
	arg2 = C.gint(pos)
	arg3 = C.gint(len)

	C.pango_attr_list_splice(arg0, other, pos, len)
}

// Unref: decrease the reference count of the given attribute list by one. If
// the result is zero, free the attribute list and the attributes it contains.
func (l *AttrList) Unref() {
	var arg0 *C.PangoAttrList

	arg0 = (*C.PangoAttrList)(unsafe.Pointer(l.Native()))

	C.pango_attr_list_unref(arg0)
}

// Update: update indices of attributes in @list for a change in the text they
// refer to.
//
// The change that this function applies is removing @remove bytes at position
// @pos and inserting @add bytes instead.
//
// Attributes that fall entirely in the (@pos, @pos + @remove) range are
// removed.
//
// Attributes that start or end inside the (@pos, @pos + @remove) range are
// shortened to reflect the removal.
//
// Attributes start and end positions are updated if they are behind @pos +
// @remove.
func (l *AttrList) Update(pos int, remove int, add int) {
	var arg0 *C.PangoAttrList
	var arg1 C.int
	var arg2 C.int
	var arg3 C.int

	arg0 = (*C.PangoAttrList)(unsafe.Pointer(l.Native()))
	arg1 = C.int(pos)
	arg2 = C.int(remove)
	arg3 = C.int(add)

	C.pango_attr_list_update(arg0, pos, remove, add)
}

// AttrShape: the `PangoAttrShape` structure is used to represent attributes
// which impose shape restrictions.
type AttrShape struct {
	native C.PangoAttrShape
}

// WrapAttrShape wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapAttrShape(ptr unsafe.Pointer) *AttrShape {
	if ptr == nil {
		return nil
	}

	return (*AttrShape)(ptr)
}

func marshalAttrShape(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapAttrShape(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (a *AttrShape) Native() unsafe.Pointer {
	return unsafe.Pointer(&a.native)
}

// Attr gets the field inside the struct.
func (a *AttrShape) Attr() Attribute {
	v = WrapAttribute(unsafe.Pointer(a.native.attr))
}

// InkRect gets the field inside the struct.
func (a *AttrShape) InkRect() Rectangle {
	v = WrapRectangle(unsafe.Pointer(a.native.ink_rect))
}

// LogicalRect gets the field inside the struct.
func (a *AttrShape) LogicalRect() Rectangle {
	v = WrapRectangle(unsafe.Pointer(a.native.logical_rect))
}

// Data gets the field inside the struct.
func (a *AttrShape) Data() interface{} {
	v = C.gpointer(a.native.data)
}

// AttrSize: the `PangoAttrSize` structure is used to represent attributes which
// set font size.
type AttrSize struct {
	native C.PangoAttrSize
}

// WrapAttrSize wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapAttrSize(ptr unsafe.Pointer) *AttrSize {
	if ptr == nil {
		return nil
	}

	return (*AttrSize)(ptr)
}

func marshalAttrSize(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapAttrSize(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (a *AttrSize) Native() unsafe.Pointer {
	return unsafe.Pointer(&a.native)
}

// Attr gets the field inside the struct.
func (a *AttrSize) Attr() Attribute {
	v = WrapAttribute(unsafe.Pointer(a.native.attr))
}

// Size gets the field inside the struct.
func (a *AttrSize) Size() int {
	v = C.int(a.native.size)
}

// AttrString: the `PangoAttrString` structure is used to represent attributes
// with a string value.
type AttrString struct {
	native C.PangoAttrString
}

// WrapAttrString wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapAttrString(ptr unsafe.Pointer) *AttrString {
	if ptr == nil {
		return nil
	}

	return (*AttrString)(ptr)
}

func marshalAttrString(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapAttrString(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (a *AttrString) Native() unsafe.Pointer {
	return unsafe.Pointer(&a.native)
}

// Attr gets the field inside the struct.
func (a *AttrString) Attr() Attribute {
	v = WrapAttribute(unsafe.Pointer(a.native.attr))
}

// Value gets the field inside the struct.
func (a *AttrString) Value() string {
	v = C.GoString(a.native.value)
}

// Attribute: the `PangoAttribute` structure represents the common portions of
// all attributes.
//
// Particular types of attributes include this structure as their initial
// portion. The common portion of the attribute holds the range to which the
// value in the type-specific part of the attribute applies and should be
// initialized using [method@Pango.Attribute.init]. By default, an attribute
// will have an all-inclusive range of [0,G_MAXUINT].
type Attribute struct {
	native C.PangoAttribute
}

// WrapAttribute wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapAttribute(ptr unsafe.Pointer) *Attribute {
	if ptr == nil {
		return nil
	}

	return (*Attribute)(ptr)
}

func marshalAttribute(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapAttribute(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (a *Attribute) Native() unsafe.Pointer {
	return unsafe.Pointer(&a.native)
}

// StartIndex gets the field inside the struct.
func (a *Attribute) StartIndex() uint {
	v = C.guint(a.native.start_index)
}

// EndIndex gets the field inside the struct.
func (a *Attribute) EndIndex() uint {
	v = C.guint(a.native.end_index)
}

// Copy: make a copy of an attribute.
func (a *Attribute) Copy() *Attribute {
	var arg0 *C.PangoAttribute

	arg0 = (*C.PangoAttribute)(unsafe.Pointer(a.Native()))

	var cret *C.PangoAttribute
	var ret1 *Attribute

	cret = C.pango_attribute_copy(arg0)

	ret1 = WrapAttribute(unsafe.Pointer(cret))
	runtime.SetFinalizer(ret1, func(v *Attribute) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return ret1
}

// Destroy: destroy a `PangoAttribute` and free all associated memory.
func (a *Attribute) Destroy() {
	var arg0 *C.PangoAttribute

	arg0 = (*C.PangoAttribute)(unsafe.Pointer(a.Native()))

	C.pango_attribute_destroy(arg0)
}

// Equal: compare two attributes for equality. This compares only the actual
// value of the two attributes and not the ranges that the attributes apply to.
func (a *Attribute) Equal(attr2 *Attribute) bool {
	var arg0 *C.PangoAttribute
	var arg1 *C.PangoAttribute

	arg0 = (*C.PangoAttribute)(unsafe.Pointer(a.Native()))
	arg1 = (*C.PangoAttribute)(unsafe.Pointer(attr2.Native()))

	var cret C.gboolean
	var ret1 bool

	cret = C.pango_attribute_equal(arg0, attr2)

	ret1 = C.bool(cret) != C.false

	return ret1
}

// Color: the `PangoColor` structure is used to represent a color in an
// uncalibrated RGB color-space.
type Color struct {
	native C.PangoColor
}

// WrapColor wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapColor(ptr unsafe.Pointer) *Color {
	if ptr == nil {
		return nil
	}

	return (*Color)(ptr)
}

func marshalColor(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapColor(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (c *Color) Native() unsafe.Pointer {
	return unsafe.Pointer(&c.native)
}

// Red gets the field inside the struct.
func (c *Color) Red() uint16 {
	v = C.guint16(c.native.red)
}

// Green gets the field inside the struct.
func (c *Color) Green() uint16 {
	v = C.guint16(c.native.green)
}

// Blue gets the field inside the struct.
func (c *Color) Blue() uint16 {
	v = C.guint16(c.native.blue)
}

// Copy creates a copy of @src.
//
// The copy should be freed with pango_color_free(). Primarily used by language
// bindings, not that useful otherwise (since colors can just be copied by
// assignment in C).
func (s *Color) Copy() *Color {
	var arg0 *C.PangoColor

	arg0 = (*C.PangoColor)(unsafe.Pointer(s.Native()))

	var cret *C.PangoColor
	var ret1 *Color

	cret = C.pango_color_copy(arg0)

	ret1 = WrapColor(unsafe.Pointer(cret))
	runtime.SetFinalizer(ret1, func(v *Color) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return ret1
}

// Free frees a color allocated by pango_color_copy().
func (c *Color) Free() {
	var arg0 *C.PangoColor

	arg0 = (*C.PangoColor)(unsafe.Pointer(c.Native()))

	C.pango_color_free(arg0)
}

// Parse: fill in the fields of a color from a string specification.
//
// The string can either one of a large set of standard names. (Taken from the
// CSS Color specification (https://www.w3.org/TR/css-color-4/#named-colors), or
// it can be a value in the form `#rgb`, `#rrggbb`, `#rrrgggbbb` or
// `#rrrrggggbbbb`, where `r`, `g` and `b` are hex digits of the red, green, and
// blue components of the color, respectively. (White in the four forms is
// `#fff`, `#ffffff`, `#fffffffff` and `#ffffffffffff`.)
func (c *Color) Parse(spec string) bool {
	var arg0 *C.PangoColor
	var arg1 *C.char

	arg0 = (*C.PangoColor)(unsafe.Pointer(c.Native()))
	arg1 = (*C.char)(C.CString(spec))
	defer C.free(unsafe.Pointer(arg1))

	var cret C.gboolean
	var ret1 bool

	cret = C.pango_color_parse(arg0, spec)

	ret1 = C.bool(cret) != C.false

	return ret1
}

// ParseWithAlpha: fill in the fields of a color from a string specification.
//
// The string can either one of a large set of standard names. (Taken from the
// CSS Color specification (https://www.w3.org/TR/css-color-4/#named-colors), or
// it can be a hexadecimal value in the form `#rgb`, `#rrggbb`, `#rrrgggbbb` or
// `#rrrrggggbbbb` where `r`, `g` and `b` are hex digits of the red, green, and
// blue components of the color, respectively. (White in the four forms is
// `#fff`, `#ffffff`, `#fffffffff` and `#ffffffffffff`.)
//
// Additionally, parse strings of the form `#rgba`, `#rrggbbaa`,
// `#rrrrggggbbbbaaaa`, if @alpha is not nil, and set @alpha to the value
// specified by the hex digits for `a`. If no alpha component is found in @spec,
// @alpha is set to 0xffff (for a solid color).
func (c *Color) ParseWithAlpha(spec string) (alpha uint16, ok bool) {
	var arg0 *C.PangoColor
	var arg2 *C.char

	arg0 = (*C.PangoColor)(unsafe.Pointer(c.Native()))
	arg2 = (*C.char)(C.CString(spec))
	defer C.free(unsafe.Pointer(arg2))

	var arg1 C.guint16
	var ret1 uint16
	var cret C.gboolean
	var ret2 bool

	cret = C.pango_color_parse_with_alpha(arg0, &arg1, spec)

	ret1 = C.guint16(arg1)
	ret2 = C.bool(cret) != C.false

	return ret1, ret2
}

// String returns a textual specification of @color.
//
// The string is in the hexadecimal form `#rrrrggggbbbb`, where `r`, `g` and `b`
// are hex digits representing the red, green, and blue components respectively.
func (c *Color) String() string {
	var arg0 *C.PangoColor

	arg0 = (*C.PangoColor)(unsafe.Pointer(c.Native()))

	var cret *C.gchar
	var ret1 string

	cret = C.pango_color_to_string(arg0)

	ret1 = C.GoString(cret)
	defer C.free(unsafe.Pointer(cret))

	return ret1
}
