// Code generated by girgen. DO NOT EDIT.

package pango

import (
	"runtime"
	"unsafe"

	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <pango/pango.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.pango_tab_array_get_type()), F: marshalTabArray},
	})
}

// TabArray: a `PangoTabArray` contains an array of tab stops.
//
// `PangoTabArray` can be used to set tab stops in a `PangoLayout`. Each tab
// stop has an alignment and a position.
type TabArray struct {
	native C.PangoTabArray
}

// WrapTabArray wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapTabArray(ptr unsafe.Pointer) *TabArray {
	if ptr == nil {
		return nil
	}

	return (*TabArray)(ptr)
}

func marshalTabArray(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapTabArray(unsafe.Pointer(b)), nil
}

// NewTabArray constructs a struct TabArray.
func NewTabArray(initialSize int, positionsInPixels bool) *TabArray {
	var arg1 C.gint
	var arg2 C.gboolean

	arg1 = C.gint(initialSize)
	if positionsInPixels {
		arg2 = C.gboolean(1)
	}

	cret := new(C.PangoTabArray)
	var goret *TabArray

	cret = C.pango_tab_array_new(arg1, arg2)

	goret = WrapTabArray(unsafe.Pointer(cret))
	runtime.SetFinalizer(goret, func(v *TabArray) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return goret
}

// Native returns the underlying C source pointer.
func (t *TabArray) Native() unsafe.Pointer {
	return unsafe.Pointer(&t.native)
}

// Copy copies a `PangoTabArray`.
func (s *TabArray) Copy() *TabArray {
	var arg0 *C.PangoTabArray

	arg0 = (*C.PangoTabArray)(unsafe.Pointer(s.Native()))

	cret := new(C.PangoTabArray)
	var goret *TabArray

	cret = C.pango_tab_array_copy(arg0)

	goret = WrapTabArray(unsafe.Pointer(cret))
	runtime.SetFinalizer(goret, func(v *TabArray) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return goret
}

// Free frees a tab array and associated resources.
func (t *TabArray) Free() {
	var arg0 *C.PangoTabArray

	arg0 = (*C.PangoTabArray)(unsafe.Pointer(t.Native()))

	C.pango_tab_array_free(arg0)
}

// PositionsInPixels returns true if the tab positions are in pixels, false if
// they are in Pango units.
func (t *TabArray) PositionsInPixels() bool {
	var arg0 *C.PangoTabArray

	arg0 = (*C.PangoTabArray)(unsafe.Pointer(t.Native()))

	var cret C.gboolean
	var goret bool

	cret = C.pango_tab_array_get_positions_in_pixels(arg0)

	if cret {
		goret = true
	}

	return goret
}

// Size gets the number of tab stops in @tab_array.
func (t *TabArray) Size() int {
	var arg0 *C.PangoTabArray

	arg0 = (*C.PangoTabArray)(unsafe.Pointer(t.Native()))

	var cret C.gint
	var goret int

	cret = C.pango_tab_array_get_size(arg0)

	goret = int(cret)

	return goret
}

// Tab gets the alignment and position of a tab stop.
func (t *TabArray) Tab(tabIndex int) (alignment *TabAlign, location int) {
	var arg0 *C.PangoTabArray
	var arg1 C.gint

	arg0 = (*C.PangoTabArray)(unsafe.Pointer(t.Native()))
	arg1 = C.gint(tabIndex)

	arg2 := new(C.PangoTabAlign)
	var ret2 *TabAlign
	arg3 := new(C.gint)
	var ret3 int

	C.pango_tab_array_get_tab(arg0, arg1, arg2, arg3)

	ret2 = *TabAlign(arg2)
	ret3 = int(*arg3)

	return ret2, ret3
}

// Resize resizes a tab array.
//
// You must subsequently initialize any tabs that were added as a result of
// growing the array.
func (t *TabArray) Resize(newSize int) {
	var arg0 *C.PangoTabArray
	var arg1 C.gint

	arg0 = (*C.PangoTabArray)(unsafe.Pointer(t.Native()))
	arg1 = C.gint(newSize)

	C.pango_tab_array_resize(arg0, arg1)
}

// SetTab sets the alignment and location of a tab stop.
//
// @alignment must always be PANGO_TAB_LEFT in the current implementation.
func (t *TabArray) SetTab(tabIndex int, alignment TabAlign, location int) {
	var arg0 *C.PangoTabArray
	var arg1 C.gint
	var arg2 C.PangoTabAlign
	var arg3 C.gint

	arg0 = (*C.PangoTabArray)(unsafe.Pointer(t.Native()))
	arg1 = C.gint(tabIndex)
	arg2 = (C.PangoTabAlign)(alignment)
	arg3 = C.gint(location)

	C.pango_tab_array_set_tab(arg0, arg1, arg2, arg3)
}
