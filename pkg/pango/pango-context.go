// Code generated by girgen. DO NOT EDIT.

package pango

import (
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <pango/pango.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.pango_context_get_type()), F: marshalContext},
	})
}

// Context: a `PangoContext` stores global information used to control the
// itemization process.
//
// The information stored by `PangoContext includes the fontmap used to look up
// fonts, and default values such as the default language, default gravity, or
// default font.
//
// To obtain a `PangoContext`, use [method@Pango.FontMap.create_context].
type Context interface {
	gextras.Objector

	// Changed forces a change in the context, which will cause any
	// `PangoLayout` using this context to re-layout.
	//
	// This function is only useful when implementing a new backend for Pango,
	// something applications won't do. Backends should call this function if
	// they have attached extra data to the context and such data is changed.
	Changed()
	// RoundGlyphPositions returns whether font rendering with this context
	// should round glyph positions and widths.
	RoundGlyphPositions() bool
	// Serial returns the current serial number of @context.
	//
	// The serial number is initialized to an small number larger than zero when
	// a new context is created and is increased whenever the context is changed
	// using any of the setter functions, or the `PangoFontMap` it uses to find
	// fonts has changed. The serial may wrap, but will never have the value 0.
	// Since it can wrap, never compare it with "less than", always use "not
	// equals".
	//
	// This can be used to automatically detect changes to a `PangoContext`, and
	// is only useful when implementing objects that need update when their
	// `PangoContext` changes, like `PangoLayout`.
	Serial() uint
	// SetBaseDir sets the base direction for the context.
	//
	// The base direction is used in applying the Unicode bidirectional
	// algorithm; if the @direction is PANGO_DIRECTION_LTR or
	// PANGO_DIRECTION_RTL, then the value will be used as the paragraph
	// direction in the Unicode bidirectional algorithm. A value of
	// PANGO_DIRECTION_WEAK_LTR or PANGO_DIRECTION_WEAK_RTL is used only for
	// paragraphs that do not contain any strong characters themselves.
	SetBaseDir(direction Direction)
	// SetBaseGravity sets the base gravity for the context.
	//
	// The base gravity is used in laying vertical text out.
	SetBaseGravity(gravity Gravity)
	// SetFontDescription: set the default font description for the context
	SetFontDescription(desc *FontDescription)
	// SetFontMap sets the font map to be searched when fonts are looked-up in
	// this context.
	//
	// This is only for internal use by Pango backends, a `PangoContext`
	// obtained via one of the recommended methods should already have a
	// suitable font map.
	SetFontMap(fontMap FontMap)
	// SetGravityHint sets the gravity hint for the context.
	//
	// The gravity hint is used in laying vertical text out, and is only
	// relevant if gravity of the context as returned by
	// [method@Pango.Context.get_gravity] is set to PANGO_GRAVITY_EAST or
	// PANGO_GRAVITY_WEST.
	SetGravityHint(hint GravityHint)
	// SetLanguage sets the global language tag for the context.
	//
	// The default language for the locale of the running process can be found
	// using [type_func@Pango.Language.get_default].
	SetLanguage(language *Language)
	// SetMatrix sets the transformation matrix that will be applied when
	// rendering with this context.
	//
	// Note that reported metrics are in the user space coordinates before the
	// application of the matrix, not device-space coordinates after the
	// application of the matrix. So, they don't scale with the matrix, though
	// they may change slightly for different matrices, depending on how the
	// text is fit to the pixel grid.
	SetMatrix(matrix *Matrix)
	// SetRoundGlyphPositions sets whether font rendering with this context
	// should round glyph positions and widths to integral positions, in device
	// units.
	//
	// This is useful when the renderer can't handle subpixel positioning of
	// glyphs.
	//
	// The default value is to round glyph positions, to remain compatible with
	// previous Pango behavior.
	SetRoundGlyphPositions(roundPositions bool)
}

// context implements the Context interface.
type context struct {
	gextras.Objector
}

var _ Context = (*context)(nil)

// WrapContext wraps a GObject to the right type. It is
// primarily used internally.
func WrapContext(obj *externglib.Object) Context {
	return Context{
		Objector: obj,
	}
}

func marshalContext(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapContext(obj), nil
}

// Changed forces a change in the context, which will cause any
// `PangoLayout` using this context to re-layout.
//
// This function is only useful when implementing a new backend for Pango,
// something applications won't do. Backends should call this function if
// they have attached extra data to the context and such data is changed.
func (c context) Changed() {
	var _arg0 *C.PangoContext

	_arg0 = (*C.PangoContext)(unsafe.Pointer(c.Native()))

	C.pango_context_changed(_arg0)
}

// RoundGlyphPositions returns whether font rendering with this context
// should round glyph positions and widths.
func (c context) RoundGlyphPositions() bool {
	var _arg0 *C.PangoContext

	_arg0 = (*C.PangoContext)(unsafe.Pointer(c.Native()))

	var _cret C.gboolean

	_cret = C.pango_context_get_round_glyph_positions(_arg0)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// Serial returns the current serial number of @context.
//
// The serial number is initialized to an small number larger than zero when
// a new context is created and is increased whenever the context is changed
// using any of the setter functions, or the `PangoFontMap` it uses to find
// fonts has changed. The serial may wrap, but will never have the value 0.
// Since it can wrap, never compare it with "less than", always use "not
// equals".
//
// This can be used to automatically detect changes to a `PangoContext`, and
// is only useful when implementing objects that need update when their
// `PangoContext` changes, like `PangoLayout`.
func (c context) Serial() uint {
	var _arg0 *C.PangoContext

	_arg0 = (*C.PangoContext)(unsafe.Pointer(c.Native()))

	var _cret C.guint

	_cret = C.pango_context_get_serial(_arg0)

	var _guint uint

	_guint = (uint)(_cret)

	return _guint
}

// SetBaseDir sets the base direction for the context.
//
// The base direction is used in applying the Unicode bidirectional
// algorithm; if the @direction is PANGO_DIRECTION_LTR or
// PANGO_DIRECTION_RTL, then the value will be used as the paragraph
// direction in the Unicode bidirectional algorithm. A value of
// PANGO_DIRECTION_WEAK_LTR or PANGO_DIRECTION_WEAK_RTL is used only for
// paragraphs that do not contain any strong characters themselves.
func (c context) SetBaseDir(direction Direction) {
	var _arg0 *C.PangoContext
	var _arg1 C.PangoDirection

	_arg0 = (*C.PangoContext)(unsafe.Pointer(c.Native()))
	_arg1 = (C.PangoDirection)(direction)

	C.pango_context_set_base_dir(_arg0, _arg1)
}

// SetBaseGravity sets the base gravity for the context.
//
// The base gravity is used in laying vertical text out.
func (c context) SetBaseGravity(gravity Gravity) {
	var _arg0 *C.PangoContext
	var _arg1 C.PangoGravity

	_arg0 = (*C.PangoContext)(unsafe.Pointer(c.Native()))
	_arg1 = (C.PangoGravity)(gravity)

	C.pango_context_set_base_gravity(_arg0, _arg1)
}

// SetFontDescription: set the default font description for the context
func (c context) SetFontDescription(desc *FontDescription) {
	var _arg0 *C.PangoContext
	var _arg1 *C.PangoFontDescription

	_arg0 = (*C.PangoContext)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.PangoFontDescription)(unsafe.Pointer(desc.Native()))

	C.pango_context_set_font_description(_arg0, _arg1)
}

// SetFontMap sets the font map to be searched when fonts are looked-up in
// this context.
//
// This is only for internal use by Pango backends, a `PangoContext`
// obtained via one of the recommended methods should already have a
// suitable font map.
func (c context) SetFontMap(fontMap FontMap) {
	var _arg0 *C.PangoContext
	var _arg1 *C.PangoFontMap

	_arg0 = (*C.PangoContext)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.PangoFontMap)(unsafe.Pointer(fontMap.Native()))

	C.pango_context_set_font_map(_arg0, _arg1)
}

// SetGravityHint sets the gravity hint for the context.
//
// The gravity hint is used in laying vertical text out, and is only
// relevant if gravity of the context as returned by
// [method@Pango.Context.get_gravity] is set to PANGO_GRAVITY_EAST or
// PANGO_GRAVITY_WEST.
func (c context) SetGravityHint(hint GravityHint) {
	var _arg0 *C.PangoContext
	var _arg1 C.PangoGravityHint

	_arg0 = (*C.PangoContext)(unsafe.Pointer(c.Native()))
	_arg1 = (C.PangoGravityHint)(hint)

	C.pango_context_set_gravity_hint(_arg0, _arg1)
}

// SetLanguage sets the global language tag for the context.
//
// The default language for the locale of the running process can be found
// using [type_func@Pango.Language.get_default].
func (c context) SetLanguage(language *Language) {
	var _arg0 *C.PangoContext
	var _arg1 *C.PangoLanguage

	_arg0 = (*C.PangoContext)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.PangoLanguage)(unsafe.Pointer(language.Native()))

	C.pango_context_set_language(_arg0, _arg1)
}

// SetMatrix sets the transformation matrix that will be applied when
// rendering with this context.
//
// Note that reported metrics are in the user space coordinates before the
// application of the matrix, not device-space coordinates after the
// application of the matrix. So, they don't scale with the matrix, though
// they may change slightly for different matrices, depending on how the
// text is fit to the pixel grid.
func (c context) SetMatrix(matrix *Matrix) {
	var _arg0 *C.PangoContext
	var _arg1 *C.PangoMatrix

	_arg0 = (*C.PangoContext)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.PangoMatrix)(unsafe.Pointer(matrix.Native()))

	C.pango_context_set_matrix(_arg0, _arg1)
}

// SetRoundGlyphPositions sets whether font rendering with this context
// should round glyph positions and widths to integral positions, in device
// units.
//
// This is useful when the renderer can't handle subpixel positioning of
// glyphs.
//
// The default value is to round glyph positions, to remain compatible with
// previous Pango behavior.
func (c context) SetRoundGlyphPositions(roundPositions bool) {
	var _arg0 *C.PangoContext
	var _arg1 C.gboolean

	_arg0 = (*C.PangoContext)(unsafe.Pointer(c.Native()))
	if roundPositions {
		_arg1 = C.gboolean(1)
	}

	C.pango_context_set_round_glyph_positions(_arg0, _arg1)
}
