// Code generated by girgen. DO NOT EDIT.

package pango

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: pango
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <pango/pango.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.pango_context_get_type()), F: marshalContext},
	})
}

// Context: a `PangoContext` stores global information used to control the
// itemization process.
//
// The information stored by `PangoContext includes the fontmap used to look up
// fonts, and default values such as the default language, default gravity, or
// default font.
//
// To obtain a `PangoContext`, use [method@Pango.FontMap.create_context].
type Context interface {
	gextras.Objector

	ChangedContext()

	BaseDir() Direction

	BaseGravity() Gravity

	FontDescription() *FontDescription

	FontMap() FontMap

	Gravity() Gravity

	GravityHint() GravityHint

	Language() *Language

	Matrix() *Matrix

	Metrics(desc *FontDescription, language *Language) *FontMetrics

	RoundGlyphPositions() bool

	Serial() uint

	ListFamiliesContext() []FontFamily

	LoadFontContext(desc *FontDescription) Font

	LoadFontsetContext(desc *FontDescription, language *Language) Fontset

	SetBaseDirContext(direction Direction)

	SetBaseGravityContext(gravity Gravity)

	SetFontDescriptionContext(desc *FontDescription)

	SetFontMapContext(fontMap FontMap)

	SetGravityHintContext(hint GravityHint)

	SetLanguageContext(language *Language)

	SetMatrixContext(matrix *Matrix)

	SetRoundGlyphPositionsContext(roundPositions bool)
}

// context implements the Context class.
type context struct {
	gextras.Objector
}

// WrapContext wraps a GObject to the right type. It is
// primarily used internally.
func WrapContext(obj *externglib.Object) Context {
	return context{
		Objector: obj,
	}
}

func marshalContext(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapContext(obj), nil
}

func NewContext() Context {
	var _cret *C.PangoContext // in

	_cret = C.pango_context_new()

	var _context Context // out

	_context = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(Context)

	return _context
}

func (c context) ChangedContext() {
	var _arg0 *C.PangoContext // out

	_arg0 = (*C.PangoContext)(unsafe.Pointer(c.Native()))

	C.pango_context_changed(_arg0)
}

func (c context) BaseDir() Direction {
	var _arg0 *C.PangoContext  // out
	var _cret C.PangoDirection // in

	_arg0 = (*C.PangoContext)(unsafe.Pointer(c.Native()))

	_cret = C.pango_context_get_base_dir(_arg0)

	var _direction Direction // out

	_direction = Direction(_cret)

	return _direction
}

func (c context) BaseGravity() Gravity {
	var _arg0 *C.PangoContext // out
	var _cret C.PangoGravity  // in

	_arg0 = (*C.PangoContext)(unsafe.Pointer(c.Native()))

	_cret = C.pango_context_get_base_gravity(_arg0)

	var _gravity Gravity // out

	_gravity = Gravity(_cret)

	return _gravity
}

func (c context) FontDescription() *FontDescription {
	var _arg0 *C.PangoContext         // out
	var _cret *C.PangoFontDescription // in

	_arg0 = (*C.PangoContext)(unsafe.Pointer(c.Native()))

	_cret = C.pango_context_get_font_description(_arg0)

	var _fontDescription *FontDescription // out

	_fontDescription = (*FontDescription)(unsafe.Pointer(_cret))

	return _fontDescription
}

func (c context) FontMap() FontMap {
	var _arg0 *C.PangoContext // out
	var _cret *C.PangoFontMap // in

	_arg0 = (*C.PangoContext)(unsafe.Pointer(c.Native()))

	_cret = C.pango_context_get_font_map(_arg0)

	var _fontMap FontMap // out

	_fontMap = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(FontMap)

	return _fontMap
}

func (c context) Gravity() Gravity {
	var _arg0 *C.PangoContext // out
	var _cret C.PangoGravity  // in

	_arg0 = (*C.PangoContext)(unsafe.Pointer(c.Native()))

	_cret = C.pango_context_get_gravity(_arg0)

	var _gravity Gravity // out

	_gravity = Gravity(_cret)

	return _gravity
}

func (c context) GravityHint() GravityHint {
	var _arg0 *C.PangoContext    // out
	var _cret C.PangoGravityHint // in

	_arg0 = (*C.PangoContext)(unsafe.Pointer(c.Native()))

	_cret = C.pango_context_get_gravity_hint(_arg0)

	var _gravityHint GravityHint // out

	_gravityHint = GravityHint(_cret)

	return _gravityHint
}

func (c context) Language() *Language {
	var _arg0 *C.PangoContext  // out
	var _cret *C.PangoLanguage // in

	_arg0 = (*C.PangoContext)(unsafe.Pointer(c.Native()))

	_cret = C.pango_context_get_language(_arg0)

	var _language *Language // out

	_language = (*Language)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(&_language, func(v **Language) {
		C.free(unsafe.Pointer(v))
	})

	return _language
}

func (c context) Matrix() *Matrix {
	var _arg0 *C.PangoContext // out
	var _cret *C.PangoMatrix  // in

	_arg0 = (*C.PangoContext)(unsafe.Pointer(c.Native()))

	_cret = C.pango_context_get_matrix(_arg0)

	var _matrix *Matrix // out

	_matrix = (*Matrix)(unsafe.Pointer(_cret))

	return _matrix
}

func (c context) Metrics(desc *FontDescription, language *Language) *FontMetrics {
	var _arg0 *C.PangoContext         // out
	var _arg1 *C.PangoFontDescription // out
	var _arg2 *C.PangoLanguage        // out
	var _cret *C.PangoFontMetrics     // in

	_arg0 = (*C.PangoContext)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.PangoFontDescription)(unsafe.Pointer(desc.Native()))
	_arg2 = (*C.PangoLanguage)(unsafe.Pointer(language.Native()))

	_cret = C.pango_context_get_metrics(_arg0, _arg1, _arg2)

	var _fontMetrics *FontMetrics // out

	_fontMetrics = (*FontMetrics)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(&_fontMetrics, func(v **FontMetrics) {
		C.free(unsafe.Pointer(v))
	})

	return _fontMetrics
}

func (c context) RoundGlyphPositions() bool {
	var _arg0 *C.PangoContext // out
	var _cret C.gboolean      // in

	_arg0 = (*C.PangoContext)(unsafe.Pointer(c.Native()))

	_cret = C.pango_context_get_round_glyph_positions(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (c context) Serial() uint {
	var _arg0 *C.PangoContext // out
	var _cret C.guint         // in

	_arg0 = (*C.PangoContext)(unsafe.Pointer(c.Native()))

	_cret = C.pango_context_get_serial(_arg0)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

func (c context) ListFamiliesContext() []FontFamily {
	var _arg0 *C.PangoContext // out
	var _arg1 **C.PangoFontFamily
	var _arg2 C.int // in

	_arg0 = (*C.PangoContext)(unsafe.Pointer(c.Native()))

	C.pango_context_list_families(_arg0, &_arg1, &_arg2)

	var _families []FontFamily

	defer C.free(unsafe.Pointer(_arg1))
	{
		src := unsafe.Slice(_arg1, _arg2)
		_families = make([]FontFamily, _arg2)
		for i := 0; i < int(_arg2); i++ {
			_families[i] = gextras.CastObject(externglib.Take(unsafe.Pointer(src[i]))).(FontFamily)
		}
	}

	return _families
}

func (c context) LoadFontContext(desc *FontDescription) Font {
	var _arg0 *C.PangoContext         // out
	var _arg1 *C.PangoFontDescription // out
	var _cret *C.PangoFont            // in

	_arg0 = (*C.PangoContext)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.PangoFontDescription)(unsafe.Pointer(desc.Native()))

	_cret = C.pango_context_load_font(_arg0, _arg1)

	var _font Font // out

	_font = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(Font)

	return _font
}

func (c context) LoadFontsetContext(desc *FontDescription, language *Language) Fontset {
	var _arg0 *C.PangoContext         // out
	var _arg1 *C.PangoFontDescription // out
	var _arg2 *C.PangoLanguage        // out
	var _cret *C.PangoFontset         // in

	_arg0 = (*C.PangoContext)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.PangoFontDescription)(unsafe.Pointer(desc.Native()))
	_arg2 = (*C.PangoLanguage)(unsafe.Pointer(language.Native()))

	_cret = C.pango_context_load_fontset(_arg0, _arg1, _arg2)

	var _fontset Fontset // out

	_fontset = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(Fontset)

	return _fontset
}

func (c context) SetBaseDirContext(direction Direction) {
	var _arg0 *C.PangoContext  // out
	var _arg1 C.PangoDirection // out

	_arg0 = (*C.PangoContext)(unsafe.Pointer(c.Native()))
	_arg1 = C.PangoDirection(direction)

	C.pango_context_set_base_dir(_arg0, _arg1)
}

func (c context) SetBaseGravityContext(gravity Gravity) {
	var _arg0 *C.PangoContext // out
	var _arg1 C.PangoGravity  // out

	_arg0 = (*C.PangoContext)(unsafe.Pointer(c.Native()))
	_arg1 = C.PangoGravity(gravity)

	C.pango_context_set_base_gravity(_arg0, _arg1)
}

func (c context) SetFontDescriptionContext(desc *FontDescription) {
	var _arg0 *C.PangoContext         // out
	var _arg1 *C.PangoFontDescription // out

	_arg0 = (*C.PangoContext)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.PangoFontDescription)(unsafe.Pointer(desc.Native()))

	C.pango_context_set_font_description(_arg0, _arg1)
}

func (c context) SetFontMapContext(fontMap FontMap) {
	var _arg0 *C.PangoContext // out
	var _arg1 *C.PangoFontMap // out

	_arg0 = (*C.PangoContext)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.PangoFontMap)(unsafe.Pointer(fontMap.Native()))

	C.pango_context_set_font_map(_arg0, _arg1)
}

func (c context) SetGravityHintContext(hint GravityHint) {
	var _arg0 *C.PangoContext    // out
	var _arg1 C.PangoGravityHint // out

	_arg0 = (*C.PangoContext)(unsafe.Pointer(c.Native()))
	_arg1 = C.PangoGravityHint(hint)

	C.pango_context_set_gravity_hint(_arg0, _arg1)
}

func (c context) SetLanguageContext(language *Language) {
	var _arg0 *C.PangoContext  // out
	var _arg1 *C.PangoLanguage // out

	_arg0 = (*C.PangoContext)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.PangoLanguage)(unsafe.Pointer(language.Native()))

	C.pango_context_set_language(_arg0, _arg1)
}

func (c context) SetMatrixContext(matrix *Matrix) {
	var _arg0 *C.PangoContext // out
	var _arg1 *C.PangoMatrix  // out

	_arg0 = (*C.PangoContext)(unsafe.Pointer(c.Native()))
	_arg1 = (*C.PangoMatrix)(unsafe.Pointer(matrix.Native()))

	C.pango_context_set_matrix(_arg0, _arg1)
}

func (c context) SetRoundGlyphPositionsContext(roundPositions bool) {
	var _arg0 *C.PangoContext // out
	var _arg1 C.gboolean      // out

	_arg0 = (*C.PangoContext)(unsafe.Pointer(c.Native()))
	if roundPositions {
		_arg1 = C.TRUE
	}

	C.pango_context_set_round_glyph_positions(_arg0, _arg1)
}
