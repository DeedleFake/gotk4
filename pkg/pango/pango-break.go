// Code generated by girgen. DO NOT EDIT.

package pango

import (
	"unsafe"
)

// #cgo pkg-config: pango
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <pango/pango.h>
import "C"

// FindParagraphBoundary locates a paragraph boundary in @text.
//
// A boundary is caused by delimiter characters, such as a newline, carriage
// return, carriage return-newline pair, or Unicode paragraph separator
// character. The index of the run of delimiters is returned in
// @paragraph_delimiter_index. The index of the start of the paragrap (index
// after all delimiters) is stored in @next_paragraph_start.
//
// If no delimiters are found, both @paragraph_delimiter_index and
// @next_paragraph_start are filled with the length of @text (an index one off
// the end).
func FindParagraphBoundary(text string, length int) (paragraphDelimiterIndex int, nextParagraphStart int) {
	var _arg1 *C.gchar // out
	var _arg2 C.gint   // out
	var _arg3 *C.gint  // in
	var _arg4 *C.gint  // in

	_arg1 = (*C.gchar)(C.CString(text))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.gint(length)

	C.pango_find_paragraph_boundary(_arg1, _arg2, &_arg3, &_arg4)

	var _paragraphDelimiterIndex int // out
	var _nextParagraphStart int      // out

	_paragraphDelimiterIndex = int(_arg3)
	_nextParagraphStart = int(_arg4)

	return _paragraphDelimiterIndex, _nextParagraphStart
}

// GetLogAttrs computes a `PangoLogAttr` for each character in @text.
//
// The @log_attrs array must have one `PangoLogAttr` for each position in @text;
// if @text contains N characters, it has N+1 positions, including the last
// position at the end of the text. @text should be an entire paragraph; logical
// attributes can't be computed without context (for example you need to see
// spaces on either side of a word to know the word is a word).
func GetLogAttrs(text string, length int, level int, language Language, logAttrs []LogAttr) {
	var _arg1 *C.char          // out
	var _arg2 C.int            // out
	var _arg3 C.int            // out
	var _arg4 *C.PangoLanguage // out
	var _arg5 *C.PangoLogAttr
	var _arg6 C.int

	_arg1 = (*C.char)(C.CString(text))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.int(length)
	_arg3 = C.int(level)
	_arg4 = (*C.PangoLanguage)(unsafe.Pointer(language))
	_arg6 = C.int(len(logAttrs))
	_arg5 = (*C.PangoLogAttr)(unsafe.Pointer(&logAttrs[0]))

	C.pango_get_log_attrs(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6)
}

// LogAttr: the `PangoLogAttr` structure stores information about the attributes
// of a single character.
type LogAttr struct {
	native C.PangoLogAttr
}

// WrapLogAttr wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapLogAttr(ptr unsafe.Pointer) *LogAttr {
	return (*LogAttr)(ptr)
}

// Native returns the underlying C source pointer.
func (l *LogAttr) Native() unsafe.Pointer {
	return unsafe.Pointer(&l.native)
}
