// Code generated by girgen. DO NOT EDIT.

package pango

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: pango
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <pango/pango.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.pango_stretch_get_type()), F: marshalStretch},
		{T: externglib.Type(C.pango_style_get_type()), F: marshalStyle},
		{T: externglib.Type(C.pango_variant_get_type()), F: marshalVariant},
		{T: externglib.Type(C.pango_weight_get_type()), F: marshalWeight},
		{T: externglib.Type(C.pango_font_mask_get_type()), F: marshalFontMask},
		{T: externglib.Type(C.pango_font_get_type()), F: marshalFont},
		{T: externglib.Type(C.pango_font_face_get_type()), F: marshalFontFace},
		{T: externglib.Type(C.pango_font_family_get_type()), F: marshalFontFamily},
		{T: externglib.Type(C.pango_font_description_get_type()), F: marshalFontDescription},
		{T: externglib.Type(C.pango_font_metrics_get_type()), F: marshalFontMetrics},
	})
}

// Stretch: an enumeration specifying the width of the font relative to other
// designs within a family.
type Stretch int

const (
	// UltraCondensed: ultra condensed width
	StretchUltraCondensed Stretch = 0
	// ExtraCondensed: extra condensed width
	StretchExtraCondensed Stretch = 1
	// condensed: condensed width
	StretchCondensed Stretch = 2
	// SemiCondensed: semi condensed width
	StretchSemiCondensed Stretch = 3
	// normal: the normal width
	StretchNormal Stretch = 4
	// SemiExpanded: semi expanded width
	StretchSemiExpanded Stretch = 5
	// expanded: expanded width
	StretchExpanded Stretch = 6
	// ExtraExpanded: extra expanded width
	StretchExtraExpanded Stretch = 7
	// UltraExpanded: ultra expanded width
	StretchUltraExpanded Stretch = 8
)

func marshalStretch(p uintptr) (interface{}, error) {
	return Stretch(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// Style: an enumeration specifying the various slant styles possible for a
// font.
type Style int

const (
	// normal: the font is upright.
	StyleNormal Style = 0
	// oblique: the font is slanted, but in a roman style.
	StyleOblique Style = 1
	// italic: the font is slanted in an italic style.
	StyleItalic Style = 2
)

func marshalStyle(p uintptr) (interface{}, error) {
	return Style(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// Variant: an enumeration specifying capitalization variant of the font.
type Variant int

const (
	// normal: a normal font.
	VariantNormal Variant = 0
	// SmallCaps: a font with the lower case characters replaced by smaller
	// variants of the capital characters.
	VariantSmallCaps Variant = 1
)

func marshalVariant(p uintptr) (interface{}, error) {
	return Variant(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// Weight: an enumeration specifying the weight (boldness) of a font.
//
// This is a numerical value ranging from 100 to 1000, but there are some
// predefined values.
type Weight int

const (
	// thin: the thin weight (= 100; Since: 1.24)
	WeightThin Weight = 100
	// ultralight: the ultralight weight (= 200)
	WeightUltralight Weight = 200
	// light: the light weight (= 300)
	WeightLight Weight = 300
	// semilight: the semilight weight (= 350; Since: 1.36.7)
	WeightSemilight Weight = 350
	// book: the book weight (= 380; Since: 1.24)
	WeightBook Weight = 380
	// normal: the default weight (= 400)
	WeightNormal Weight = 400
	// medium: the normal weight (= 500; Since: 1.24)
	WeightMedium Weight = 500
	// semibold: the semibold weight (= 600)
	WeightSemibold Weight = 600
	// bold: the bold weight (= 700)
	WeightBold Weight = 700
	// ultrabold: the ultrabold weight (= 800)
	WeightUltrabold Weight = 800
	// heavy: the heavy weight (= 900)
	WeightHeavy Weight = 900
	// ultraheavy: the ultraheavy weight (= 1000; Since: 1.24)
	WeightUltraheavy Weight = 1000
)

func marshalWeight(p uintptr) (interface{}, error) {
	return Weight(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// FontMask: the bits in a `PangoFontMask` correspond to the set fields in a
// `PangoFontDescription`.
type FontMask int

const (
	// FontMaskFamily: the font family is specified.
	FontMaskFamily FontMask = 0b1
	// FontMaskStyle: the font style is specified.
	FontMaskStyle FontMask = 0b10
	// FontMaskVariant: the font variant is specified.
	FontMaskVariant FontMask = 0b100
	// FontMaskWeight: the font weight is specified.
	FontMaskWeight FontMask = 0b1000
	// FontMaskStretch: the font stretch is specified.
	FontMaskStretch FontMask = 0b10000
	// FontMaskSize: the font size is specified.
	FontMaskSize FontMask = 0b100000
	// FontMaskGravity: the font gravity is specified (Since: 1.16.)
	FontMaskGravity FontMask = 0b1000000
	// FontMaskVariations: openType font variations are specified (Since: 1.42)
	FontMaskVariations FontMask = 0b10000000
)

func marshalFontMask(p uintptr) (interface{}, error) {
	return FontMask(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// Font: a `PangoFont` is used to represent a font in a
// rendering-system-independent manner.
type Font interface {
	gextras.Objector

	DescribeFont() *FontDescription

	DescribeWithAbsoluteSizeFont() *FontDescription

	Coverage(language *Language) Coverage

	Face() FontFace

	FontMap() FontMap

	Metrics(language *Language) *FontMetrics

	HasCharFont(wc uint32) bool
}

// font implements the Font class.
type font struct {
	gextras.Objector
}

// WrapFont wraps a GObject to the right type. It is
// primarily used internally.
func WrapFont(obj *externglib.Object) Font {
	return font{
		Objector: obj,
	}
}

func marshalFont(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapFont(obj), nil
}

func (f font) DescribeFont() *FontDescription {
	var _arg0 *C.PangoFont            // out
	var _cret *C.PangoFontDescription // in

	_arg0 = (*C.PangoFont)(unsafe.Pointer(f.Native()))

	_cret = C.pango_font_describe(_arg0)

	var _fontDescription *FontDescription // out

	_fontDescription = (*FontDescription)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(&_fontDescription, func(v **FontDescription) {
		C.free(unsafe.Pointer(v))
	})

	return _fontDescription
}

func (f font) DescribeWithAbsoluteSizeFont() *FontDescription {
	var _arg0 *C.PangoFont            // out
	var _cret *C.PangoFontDescription // in

	_arg0 = (*C.PangoFont)(unsafe.Pointer(f.Native()))

	_cret = C.pango_font_describe_with_absolute_size(_arg0)

	var _fontDescription *FontDescription // out

	_fontDescription = (*FontDescription)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(&_fontDescription, func(v **FontDescription) {
		C.free(unsafe.Pointer(v))
	})

	return _fontDescription
}

func (f font) Coverage(language *Language) Coverage {
	var _arg0 *C.PangoFont     // out
	var _arg1 *C.PangoLanguage // out
	var _cret *C.PangoCoverage // in

	_arg0 = (*C.PangoFont)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.PangoLanguage)(unsafe.Pointer(language.Native()))

	_cret = C.pango_font_get_coverage(_arg0, _arg1)

	var _coverage Coverage // out

	_coverage = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(Coverage)

	return _coverage
}

func (f font) Face() FontFace {
	var _arg0 *C.PangoFont     // out
	var _cret *C.PangoFontFace // in

	_arg0 = (*C.PangoFont)(unsafe.Pointer(f.Native()))

	_cret = C.pango_font_get_face(_arg0)

	var _fontFace FontFace // out

	_fontFace = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(FontFace)

	return _fontFace
}

func (f font) FontMap() FontMap {
	var _arg0 *C.PangoFont    // out
	var _cret *C.PangoFontMap // in

	_arg0 = (*C.PangoFont)(unsafe.Pointer(f.Native()))

	_cret = C.pango_font_get_font_map(_arg0)

	var _fontMap FontMap // out

	_fontMap = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(FontMap)

	return _fontMap
}

func (f font) Metrics(language *Language) *FontMetrics {
	var _arg0 *C.PangoFont        // out
	var _arg1 *C.PangoLanguage    // out
	var _cret *C.PangoFontMetrics // in

	_arg0 = (*C.PangoFont)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.PangoLanguage)(unsafe.Pointer(language.Native()))

	_cret = C.pango_font_get_metrics(_arg0, _arg1)

	var _fontMetrics *FontMetrics // out

	_fontMetrics = (*FontMetrics)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(&_fontMetrics, func(v **FontMetrics) {
		C.free(unsafe.Pointer(v))
	})

	return _fontMetrics
}

func (f font) HasCharFont(wc uint32) bool {
	var _arg0 *C.PangoFont // out
	var _arg1 C.gunichar   // out
	var _cret C.gboolean   // in

	_arg0 = (*C.PangoFont)(unsafe.Pointer(f.Native()))
	_arg1 = C.gunichar(wc)

	_cret = C.pango_font_has_char(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// FontFace: a `PangoFontFace` is used to represent a group of fonts with the
// same family, slant, weight, and width, but varying sizes.
type FontFace interface {
	gextras.Objector

	DescribeFontFace() *FontDescription

	FaceName() string

	Family() FontFamily

	IsSynthesizedFontFace() bool

	ListSizesFontFace() []int
}

// fontFace implements the FontFace class.
type fontFace struct {
	gextras.Objector
}

// WrapFontFace wraps a GObject to the right type. It is
// primarily used internally.
func WrapFontFace(obj *externglib.Object) FontFace {
	return fontFace{
		Objector: obj,
	}
}

func marshalFontFace(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapFontFace(obj), nil
}

func (f fontFace) DescribeFontFace() *FontDescription {
	var _arg0 *C.PangoFontFace        // out
	var _cret *C.PangoFontDescription // in

	_arg0 = (*C.PangoFontFace)(unsafe.Pointer(f.Native()))

	_cret = C.pango_font_face_describe(_arg0)

	var _fontDescription *FontDescription // out

	_fontDescription = (*FontDescription)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(&_fontDescription, func(v **FontDescription) {
		C.free(unsafe.Pointer(v))
	})

	return _fontDescription
}

func (f fontFace) FaceName() string {
	var _arg0 *C.PangoFontFace // out
	var _cret *C.char          // in

	_arg0 = (*C.PangoFontFace)(unsafe.Pointer(f.Native()))

	_cret = C.pango_font_face_get_face_name(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

func (f fontFace) Family() FontFamily {
	var _arg0 *C.PangoFontFace   // out
	var _cret *C.PangoFontFamily // in

	_arg0 = (*C.PangoFontFace)(unsafe.Pointer(f.Native()))

	_cret = C.pango_font_face_get_family(_arg0)

	var _fontFamily FontFamily // out

	_fontFamily = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(FontFamily)

	return _fontFamily
}

func (f fontFace) IsSynthesizedFontFace() bool {
	var _arg0 *C.PangoFontFace // out
	var _cret C.gboolean       // in

	_arg0 = (*C.PangoFontFace)(unsafe.Pointer(f.Native()))

	_cret = C.pango_font_face_is_synthesized(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (f fontFace) ListSizesFontFace() []int {
	var _arg0 *C.PangoFontFace // out
	var _arg1 *C.int
	var _arg2 C.int // in

	_arg0 = (*C.PangoFontFace)(unsafe.Pointer(f.Native()))

	C.pango_font_face_list_sizes(_arg0, &_arg1, &_arg2)

	var _sizes []int

	_sizes = unsafe.Slice((*int)(unsafe.Pointer(_arg1)), _arg2)
	runtime.SetFinalizer(&_sizes, func(v *[]int) {
		C.free(unsafe.Pointer(&(*v)[0]))
	})

	return _sizes
}

// FontFamily: a `PangoFontFamily` is used to represent a family of related font
// faces.
//
// The font faces in a family share a common design, but differ in slant,
// weight, width or other aspects.
type FontFamily interface {
	gextras.Objector

	Face(name string) FontFace

	Name() string

	IsMonospaceFontFamily() bool

	IsVariableFontFamily() bool

	ListFacesFontFamily() []FontFace
}

// fontFamily implements the FontFamily class.
type fontFamily struct {
	gextras.Objector
}

// WrapFontFamily wraps a GObject to the right type. It is
// primarily used internally.
func WrapFontFamily(obj *externglib.Object) FontFamily {
	return fontFamily{
		Objector: obj,
	}
}

func marshalFontFamily(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapFontFamily(obj), nil
}

func (f fontFamily) Face(name string) FontFace {
	var _arg0 *C.PangoFontFamily // out
	var _arg1 *C.char            // out
	var _cret *C.PangoFontFace   // in

	_arg0 = (*C.PangoFontFamily)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.char)(C.CString(name))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.pango_font_family_get_face(_arg0, _arg1)

	var _fontFace FontFace // out

	_fontFace = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(FontFace)

	return _fontFace
}

func (f fontFamily) Name() string {
	var _arg0 *C.PangoFontFamily // out
	var _cret *C.char            // in

	_arg0 = (*C.PangoFontFamily)(unsafe.Pointer(f.Native()))

	_cret = C.pango_font_family_get_name(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

func (f fontFamily) IsMonospaceFontFamily() bool {
	var _arg0 *C.PangoFontFamily // out
	var _cret C.gboolean         // in

	_arg0 = (*C.PangoFontFamily)(unsafe.Pointer(f.Native()))

	_cret = C.pango_font_family_is_monospace(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (f fontFamily) IsVariableFontFamily() bool {
	var _arg0 *C.PangoFontFamily // out
	var _cret C.gboolean         // in

	_arg0 = (*C.PangoFontFamily)(unsafe.Pointer(f.Native()))

	_cret = C.pango_font_family_is_variable(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (f fontFamily) ListFacesFontFamily() []FontFace {
	var _arg0 *C.PangoFontFamily // out
	var _arg1 **C.PangoFontFace
	var _arg2 C.int // in

	_arg0 = (*C.PangoFontFamily)(unsafe.Pointer(f.Native()))

	C.pango_font_family_list_faces(_arg0, &_arg1, &_arg2)

	var _faces []FontFace

	defer C.free(unsafe.Pointer(_arg1))
	{
		src := unsafe.Slice(_arg1, _arg2)
		_faces = make([]FontFace, _arg2)
		for i := 0; i < int(_arg2); i++ {
			_faces[i] = gextras.CastObject(externglib.Take(unsafe.Pointer(src[i]))).(FontFace)
		}
	}

	return _faces
}

// FontDescription: a `PangoFontDescription` describes a font in an
// implementation-independent manner.
//
// `PangoFontDescription` structures are used both to list what fonts are
// available on the system and also for specifying the characteristics of a font
// to load.
type FontDescription C.PangoFontDescription

// WrapFontDescription wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapFontDescription(ptr unsafe.Pointer) *FontDescription {
	return (*FontDescription)(ptr)
}

func marshalFontDescription(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return (*FontDescription)(unsafe.Pointer(b)), nil
}

// NewFontDescription constructs a struct FontDescription.
func NewFontDescription() *FontDescription {
	var _cret *C.PangoFontDescription // in

	_cret = C.pango_font_description_new()

	var _fontDescription *FontDescription // out

	_fontDescription = (*FontDescription)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(&_fontDescription, func(v **FontDescription) {
		C.free(unsafe.Pointer(v))
	})

	return _fontDescription
}

// Native returns the underlying C source pointer.
func (f *FontDescription) Native() unsafe.Pointer {
	return unsafe.Pointer(f)
}

// BetterMatch unsets some of the fields in a `PangoFontDescription`.
//
// The unset fields will get back to their default values.
func (d *FontDescription) BetterMatch(oldMatch *FontDescription, newMatch *FontDescription) bool {
	var _arg0 *C.PangoFontDescription // out
	var _arg1 *C.PangoFontDescription // out
	var _arg2 *C.PangoFontDescription // out
	var _cret C.gboolean              // in

	_arg0 = (*C.PangoFontDescription)(unsafe.Pointer(d.Native()))
	_arg1 = (*C.PangoFontDescription)(unsafe.Pointer(oldMatch.Native()))
	_arg2 = (*C.PangoFontDescription)(unsafe.Pointer(newMatch.Native()))

	_cret = C.pango_font_description_better_match(_arg0, _arg1, _arg2)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Copy unsets some of the fields in a `PangoFontDescription`.
//
// The unset fields will get back to their default values.
func (d *FontDescription) Copy() *FontDescription {
	var _arg0 *C.PangoFontDescription // out
	var _cret *C.PangoFontDescription // in

	_arg0 = (*C.PangoFontDescription)(unsafe.Pointer(d.Native()))

	_cret = C.pango_font_description_copy(_arg0)

	var _fontDescription *FontDescription // out

	_fontDescription = (*FontDescription)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(&_fontDescription, func(v **FontDescription) {
		C.free(unsafe.Pointer(v))
	})

	return _fontDescription
}

// CopyStatic unsets some of the fields in a `PangoFontDescription`.
//
// The unset fields will get back to their default values.
func (d *FontDescription) CopyStatic() *FontDescription {
	var _arg0 *C.PangoFontDescription // out
	var _cret *C.PangoFontDescription // in

	_arg0 = (*C.PangoFontDescription)(unsafe.Pointer(d.Native()))

	_cret = C.pango_font_description_copy_static(_arg0)

	var _fontDescription *FontDescription // out

	_fontDescription = (*FontDescription)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(&_fontDescription, func(v **FontDescription) {
		C.free(unsafe.Pointer(v))
	})

	return _fontDescription
}

// Equal unsets some of the fields in a `PangoFontDescription`.
//
// The unset fields will get back to their default values.
func (d *FontDescription) Equal(desc2 *FontDescription) bool {
	var _arg0 *C.PangoFontDescription // out
	var _arg1 *C.PangoFontDescription // out
	var _cret C.gboolean              // in

	_arg0 = (*C.PangoFontDescription)(unsafe.Pointer(d.Native()))
	_arg1 = (*C.PangoFontDescription)(unsafe.Pointer(desc2.Native()))

	_cret = C.pango_font_description_equal(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Free unsets some of the fields in a `PangoFontDescription`.
//
// The unset fields will get back to their default values.
func (d *FontDescription) Free() {
	var _arg0 *C.PangoFontDescription // out

	_arg0 = (*C.PangoFontDescription)(unsafe.Pointer(d.Native()))

	C.pango_font_description_free(_arg0)
}

// Family unsets some of the fields in a `PangoFontDescription`.
//
// The unset fields will get back to their default values.
func (d *FontDescription) Family() string {
	var _arg0 *C.PangoFontDescription // out
	var _cret *C.char                 // in

	_arg0 = (*C.PangoFontDescription)(unsafe.Pointer(d.Native()))

	_cret = C.pango_font_description_get_family(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

// Gravity unsets some of the fields in a `PangoFontDescription`.
//
// The unset fields will get back to their default values.
func (d *FontDescription) Gravity() Gravity {
	var _arg0 *C.PangoFontDescription // out
	var _cret C.PangoGravity          // in

	_arg0 = (*C.PangoFontDescription)(unsafe.Pointer(d.Native()))

	_cret = C.pango_font_description_get_gravity(_arg0)

	var _gravity Gravity // out

	_gravity = Gravity(_cret)

	return _gravity
}

// SetFields unsets some of the fields in a `PangoFontDescription`.
//
// The unset fields will get back to their default values.
func (d *FontDescription) SetFields() FontMask {
	var _arg0 *C.PangoFontDescription // out
	var _cret C.PangoFontMask         // in

	_arg0 = (*C.PangoFontDescription)(unsafe.Pointer(d.Native()))

	_cret = C.pango_font_description_get_set_fields(_arg0)

	var _fontMask FontMask // out

	_fontMask = FontMask(_cret)

	return _fontMask
}

// Size unsets some of the fields in a `PangoFontDescription`.
//
// The unset fields will get back to their default values.
func (d *FontDescription) Size() int {
	var _arg0 *C.PangoFontDescription // out
	var _cret C.gint                  // in

	_arg0 = (*C.PangoFontDescription)(unsafe.Pointer(d.Native()))

	_cret = C.pango_font_description_get_size(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// SizeIsAbsolute unsets some of the fields in a `PangoFontDescription`.
//
// The unset fields will get back to their default values.
func (d *FontDescription) SizeIsAbsolute() bool {
	var _arg0 *C.PangoFontDescription // out
	var _cret C.gboolean              // in

	_arg0 = (*C.PangoFontDescription)(unsafe.Pointer(d.Native()))

	_cret = C.pango_font_description_get_size_is_absolute(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Stretch unsets some of the fields in a `PangoFontDescription`.
//
// The unset fields will get back to their default values.
func (d *FontDescription) Stretch() Stretch {
	var _arg0 *C.PangoFontDescription // out
	var _cret C.PangoStretch          // in

	_arg0 = (*C.PangoFontDescription)(unsafe.Pointer(d.Native()))

	_cret = C.pango_font_description_get_stretch(_arg0)

	var _stretch Stretch // out

	_stretch = Stretch(_cret)

	return _stretch
}

// Style unsets some of the fields in a `PangoFontDescription`.
//
// The unset fields will get back to their default values.
func (d *FontDescription) Style() Style {
	var _arg0 *C.PangoFontDescription // out
	var _cret C.PangoStyle            // in

	_arg0 = (*C.PangoFontDescription)(unsafe.Pointer(d.Native()))

	_cret = C.pango_font_description_get_style(_arg0)

	var _style Style // out

	_style = Style(_cret)

	return _style
}

// Variant unsets some of the fields in a `PangoFontDescription`.
//
// The unset fields will get back to their default values.
func (d *FontDescription) Variant() Variant {
	var _arg0 *C.PangoFontDescription // out
	var _cret C.PangoVariant          // in

	_arg0 = (*C.PangoFontDescription)(unsafe.Pointer(d.Native()))

	_cret = C.pango_font_description_get_variant(_arg0)

	var _variant Variant // out

	_variant = Variant(_cret)

	return _variant
}

// Variations unsets some of the fields in a `PangoFontDescription`.
//
// The unset fields will get back to their default values.
func (d *FontDescription) Variations() string {
	var _arg0 *C.PangoFontDescription // out
	var _cret *C.char                 // in

	_arg0 = (*C.PangoFontDescription)(unsafe.Pointer(d.Native()))

	_cret = C.pango_font_description_get_variations(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

// Weight unsets some of the fields in a `PangoFontDescription`.
//
// The unset fields will get back to their default values.
func (d *FontDescription) Weight() Weight {
	var _arg0 *C.PangoFontDescription // out
	var _cret C.PangoWeight           // in

	_arg0 = (*C.PangoFontDescription)(unsafe.Pointer(d.Native()))

	_cret = C.pango_font_description_get_weight(_arg0)

	var _weight Weight // out

	_weight = Weight(_cret)

	return _weight
}

// Hash unsets some of the fields in a `PangoFontDescription`.
//
// The unset fields will get back to their default values.
func (d *FontDescription) Hash() uint {
	var _arg0 *C.PangoFontDescription // out
	var _cret C.guint                 // in

	_arg0 = (*C.PangoFontDescription)(unsafe.Pointer(d.Native()))

	_cret = C.pango_font_description_hash(_arg0)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// Merge unsets some of the fields in a `PangoFontDescription`.
//
// The unset fields will get back to their default values.
func (d *FontDescription) Merge(descToMerge *FontDescription, replaceExisting bool) {
	var _arg0 *C.PangoFontDescription // out
	var _arg1 *C.PangoFontDescription // out
	var _arg2 C.gboolean              // out

	_arg0 = (*C.PangoFontDescription)(unsafe.Pointer(d.Native()))
	_arg1 = (*C.PangoFontDescription)(unsafe.Pointer(descToMerge.Native()))
	if replaceExisting {
		_arg2 = C.TRUE
	}

	C.pango_font_description_merge(_arg0, _arg1, _arg2)
}

// MergeStatic unsets some of the fields in a `PangoFontDescription`.
//
// The unset fields will get back to their default values.
func (d *FontDescription) MergeStatic(descToMerge *FontDescription, replaceExisting bool) {
	var _arg0 *C.PangoFontDescription // out
	var _arg1 *C.PangoFontDescription // out
	var _arg2 C.gboolean              // out

	_arg0 = (*C.PangoFontDescription)(unsafe.Pointer(d.Native()))
	_arg1 = (*C.PangoFontDescription)(unsafe.Pointer(descToMerge.Native()))
	if replaceExisting {
		_arg2 = C.TRUE
	}

	C.pango_font_description_merge_static(_arg0, _arg1, _arg2)
}

// SetAbsoluteSize unsets some of the fields in a `PangoFontDescription`.
//
// The unset fields will get back to their default values.
func (d *FontDescription) SetAbsoluteSize(size float64) {
	var _arg0 *C.PangoFontDescription // out
	var _arg1 C.double                // out

	_arg0 = (*C.PangoFontDescription)(unsafe.Pointer(d.Native()))
	_arg1 = C.double(size)

	C.pango_font_description_set_absolute_size(_arg0, _arg1)
}

// SetFamily unsets some of the fields in a `PangoFontDescription`.
//
// The unset fields will get back to their default values.
func (d *FontDescription) SetFamily(family string) {
	var _arg0 *C.PangoFontDescription // out
	var _arg1 *C.char                 // out

	_arg0 = (*C.PangoFontDescription)(unsafe.Pointer(d.Native()))
	_arg1 = (*C.char)(C.CString(family))
	defer C.free(unsafe.Pointer(_arg1))

	C.pango_font_description_set_family(_arg0, _arg1)
}

// SetFamilyStatic unsets some of the fields in a `PangoFontDescription`.
//
// The unset fields will get back to their default values.
func (d *FontDescription) SetFamilyStatic(family string) {
	var _arg0 *C.PangoFontDescription // out
	var _arg1 *C.char                 // out

	_arg0 = (*C.PangoFontDescription)(unsafe.Pointer(d.Native()))
	_arg1 = (*C.char)(C.CString(family))
	defer C.free(unsafe.Pointer(_arg1))

	C.pango_font_description_set_family_static(_arg0, _arg1)
}

// SetGravity unsets some of the fields in a `PangoFontDescription`.
//
// The unset fields will get back to their default values.
func (d *FontDescription) SetGravity(gravity Gravity) {
	var _arg0 *C.PangoFontDescription // out
	var _arg1 C.PangoGravity          // out

	_arg0 = (*C.PangoFontDescription)(unsafe.Pointer(d.Native()))
	_arg1 = C.PangoGravity(gravity)

	C.pango_font_description_set_gravity(_arg0, _arg1)
}

// SetSize unsets some of the fields in a `PangoFontDescription`.
//
// The unset fields will get back to their default values.
func (d *FontDescription) SetSize(size int) {
	var _arg0 *C.PangoFontDescription // out
	var _arg1 C.gint                  // out

	_arg0 = (*C.PangoFontDescription)(unsafe.Pointer(d.Native()))
	_arg1 = C.gint(size)

	C.pango_font_description_set_size(_arg0, _arg1)
}

// SetStretch unsets some of the fields in a `PangoFontDescription`.
//
// The unset fields will get back to their default values.
func (d *FontDescription) SetStretch(stretch Stretch) {
	var _arg0 *C.PangoFontDescription // out
	var _arg1 C.PangoStretch          // out

	_arg0 = (*C.PangoFontDescription)(unsafe.Pointer(d.Native()))
	_arg1 = C.PangoStretch(stretch)

	C.pango_font_description_set_stretch(_arg0, _arg1)
}

// SetStyle unsets some of the fields in a `PangoFontDescription`.
//
// The unset fields will get back to their default values.
func (d *FontDescription) SetStyle(style Style) {
	var _arg0 *C.PangoFontDescription // out
	var _arg1 C.PangoStyle            // out

	_arg0 = (*C.PangoFontDescription)(unsafe.Pointer(d.Native()))
	_arg1 = C.PangoStyle(style)

	C.pango_font_description_set_style(_arg0, _arg1)
}

// SetVariant unsets some of the fields in a `PangoFontDescription`.
//
// The unset fields will get back to their default values.
func (d *FontDescription) SetVariant(variant Variant) {
	var _arg0 *C.PangoFontDescription // out
	var _arg1 C.PangoVariant          // out

	_arg0 = (*C.PangoFontDescription)(unsafe.Pointer(d.Native()))
	_arg1 = C.PangoVariant(variant)

	C.pango_font_description_set_variant(_arg0, _arg1)
}

// SetVariations unsets some of the fields in a `PangoFontDescription`.
//
// The unset fields will get back to their default values.
func (d *FontDescription) SetVariations(variations string) {
	var _arg0 *C.PangoFontDescription // out
	var _arg1 *C.char                 // out

	_arg0 = (*C.PangoFontDescription)(unsafe.Pointer(d.Native()))
	_arg1 = (*C.char)(C.CString(variations))
	defer C.free(unsafe.Pointer(_arg1))

	C.pango_font_description_set_variations(_arg0, _arg1)
}

// SetVariationsStatic unsets some of the fields in a `PangoFontDescription`.
//
// The unset fields will get back to their default values.
func (d *FontDescription) SetVariationsStatic(variations string) {
	var _arg0 *C.PangoFontDescription // out
	var _arg1 *C.char                 // out

	_arg0 = (*C.PangoFontDescription)(unsafe.Pointer(d.Native()))
	_arg1 = (*C.char)(C.CString(variations))
	defer C.free(unsafe.Pointer(_arg1))

	C.pango_font_description_set_variations_static(_arg0, _arg1)
}

// SetWeight unsets some of the fields in a `PangoFontDescription`.
//
// The unset fields will get back to their default values.
func (d *FontDescription) SetWeight(weight Weight) {
	var _arg0 *C.PangoFontDescription // out
	var _arg1 C.PangoWeight           // out

	_arg0 = (*C.PangoFontDescription)(unsafe.Pointer(d.Native()))
	_arg1 = C.PangoWeight(weight)

	C.pango_font_description_set_weight(_arg0, _arg1)
}

// ToFilename unsets some of the fields in a `PangoFontDescription`.
//
// The unset fields will get back to their default values.
func (d *FontDescription) ToFilename() string {
	var _arg0 *C.PangoFontDescription // out
	var _cret *C.char                 // in

	_arg0 = (*C.PangoFontDescription)(unsafe.Pointer(d.Native()))

	_cret = C.pango_font_description_to_filename(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// String unsets some of the fields in a `PangoFontDescription`.
//
// The unset fields will get back to their default values.
func (d *FontDescription) String() string {
	var _arg0 *C.PangoFontDescription // out
	var _cret *C.char                 // in

	_arg0 = (*C.PangoFontDescription)(unsafe.Pointer(d.Native()))

	_cret = C.pango_font_description_to_string(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// UnsetFields unsets some of the fields in a `PangoFontDescription`.
//
// The unset fields will get back to their default values.
func (d *FontDescription) UnsetFields(toUnset FontMask) {
	var _arg0 *C.PangoFontDescription // out
	var _arg1 C.PangoFontMask         // out

	_arg0 = (*C.PangoFontDescription)(unsafe.Pointer(d.Native()))
	_arg1 = C.PangoFontMask(toUnset)

	C.pango_font_description_unset_fields(_arg0, _arg1)
}

// FontMetrics: a `PangoFontMetrics` structure holds the overall metric
// information for a font.
//
// The information in a `PangoFontMetrics` structure may be restricted to a
// script. The fields of this structure are private to implementations of a font
// backend. See the documentation of the corresponding getters for documentation
// of their meaning.
type FontMetrics C.PangoFontMetrics

// WrapFontMetrics wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapFontMetrics(ptr unsafe.Pointer) *FontMetrics {
	return (*FontMetrics)(ptr)
}

func marshalFontMetrics(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return (*FontMetrics)(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (f *FontMetrics) Native() unsafe.Pointer {
	return unsafe.Pointer(f)
}

// ApproximateCharWidth: decrease the reference count of a font metrics
// structure by one. If the result is zero, frees the structure and any
// associated memory.
func (m *FontMetrics) ApproximateCharWidth() int {
	var _arg0 *C.PangoFontMetrics // out
	var _cret C.int               // in

	_arg0 = (*C.PangoFontMetrics)(unsafe.Pointer(m.Native()))

	_cret = C.pango_font_metrics_get_approximate_char_width(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// ApproximateDigitWidth: decrease the reference count of a font metrics
// structure by one. If the result is zero, frees the structure and any
// associated memory.
func (m *FontMetrics) ApproximateDigitWidth() int {
	var _arg0 *C.PangoFontMetrics // out
	var _cret C.int               // in

	_arg0 = (*C.PangoFontMetrics)(unsafe.Pointer(m.Native()))

	_cret = C.pango_font_metrics_get_approximate_digit_width(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// Ascent: decrease the reference count of a font metrics structure by one. If
// the result is zero, frees the structure and any associated memory.
func (m *FontMetrics) Ascent() int {
	var _arg0 *C.PangoFontMetrics // out
	var _cret C.int               // in

	_arg0 = (*C.PangoFontMetrics)(unsafe.Pointer(m.Native()))

	_cret = C.pango_font_metrics_get_ascent(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// Descent: decrease the reference count of a font metrics structure by one. If
// the result is zero, frees the structure and any associated memory.
func (m *FontMetrics) Descent() int {
	var _arg0 *C.PangoFontMetrics // out
	var _cret C.int               // in

	_arg0 = (*C.PangoFontMetrics)(unsafe.Pointer(m.Native()))

	_cret = C.pango_font_metrics_get_descent(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// Height: decrease the reference count of a font metrics structure by one. If
// the result is zero, frees the structure and any associated memory.
func (m *FontMetrics) Height() int {
	var _arg0 *C.PangoFontMetrics // out
	var _cret C.int               // in

	_arg0 = (*C.PangoFontMetrics)(unsafe.Pointer(m.Native()))

	_cret = C.pango_font_metrics_get_height(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// StrikethroughPosition: decrease the reference count of a font metrics
// structure by one. If the result is zero, frees the structure and any
// associated memory.
func (m *FontMetrics) StrikethroughPosition() int {
	var _arg0 *C.PangoFontMetrics // out
	var _cret C.int               // in

	_arg0 = (*C.PangoFontMetrics)(unsafe.Pointer(m.Native()))

	_cret = C.pango_font_metrics_get_strikethrough_position(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// StrikethroughThickness: decrease the reference count of a font metrics
// structure by one. If the result is zero, frees the structure and any
// associated memory.
func (m *FontMetrics) StrikethroughThickness() int {
	var _arg0 *C.PangoFontMetrics // out
	var _cret C.int               // in

	_arg0 = (*C.PangoFontMetrics)(unsafe.Pointer(m.Native()))

	_cret = C.pango_font_metrics_get_strikethrough_thickness(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// UnderlinePosition: decrease the reference count of a font metrics structure
// by one. If the result is zero, frees the structure and any associated memory.
func (m *FontMetrics) UnderlinePosition() int {
	var _arg0 *C.PangoFontMetrics // out
	var _cret C.int               // in

	_arg0 = (*C.PangoFontMetrics)(unsafe.Pointer(m.Native()))

	_cret = C.pango_font_metrics_get_underline_position(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// UnderlineThickness: decrease the reference count of a font metrics structure
// by one. If the result is zero, frees the structure and any associated memory.
func (m *FontMetrics) UnderlineThickness() int {
	var _arg0 *C.PangoFontMetrics // out
	var _cret C.int               // in

	_arg0 = (*C.PangoFontMetrics)(unsafe.Pointer(m.Native()))

	_cret = C.pango_font_metrics_get_underline_thickness(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// Ref: decrease the reference count of a font metrics structure by one. If the
// result is zero, frees the structure and any associated memory.
func (m *FontMetrics) Ref() *FontMetrics {
	var _arg0 *C.PangoFontMetrics // out
	var _cret *C.PangoFontMetrics // in

	_arg0 = (*C.PangoFontMetrics)(unsafe.Pointer(m.Native()))

	_cret = C.pango_font_metrics_ref(_arg0)

	var _fontMetrics *FontMetrics // out

	_fontMetrics = (*FontMetrics)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(&_fontMetrics, func(v **FontMetrics) {
		C.free(unsafe.Pointer(v))
	})

	return _fontMetrics
}

// Unref: decrease the reference count of a font metrics structure by one. If
// the result is zero, frees the structure and any associated memory.
func (m *FontMetrics) Unref() {
	var _arg0 *C.PangoFontMetrics // out

	_arg0 = (*C.PangoFontMetrics)(unsafe.Pointer(m.Native()))

	C.pango_font_metrics_unref(_arg0)
}
