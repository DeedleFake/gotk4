// Code generated by girgen. DO NOT EDIT.

package pango

import (
	"runtime"
	"unsafe"

	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: pango
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <pango/pango.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.pango_script_get_type()), F: marshalScript},
		{T: externglib.Type(C.pango_script_iter_get_type()), F: marshalScriptIter},
	})
}

// Script: the `PangoScript` enumeration identifies different writing systems.
//
// The values correspond to the names as defined in the Unicode standard. See
// Unicode Standard Annex 24: Script names
// (http://www.unicode.org/reports/tr24/)
//
// Note that this enumeration is deprecated and will not be updated to include
// values in newer versions of the Unicode standard. Applications should use the
// `GUnicodeScript` enumeration instead, whose values are interchangeable with
// `PangoScript`.
type Script int

const (
	// InvalidCode: value never returned from pango_script_for_unichar()
	InvalidCode Script = -1
	// Common: character used by multiple different scripts
	Common Script = 0
	// Inherited: mark glyph that takes its script from the base glyph to which
	// it is attached
	Inherited Script = 1
	// Arabic: arabic
	Arabic Script = 2
	// Armenian: armenian
	Armenian Script = 3
	// Bengali: bengali
	Bengali Script = 4
	// Bopomofo: bopomofo
	Bopomofo Script = 5
	// Cherokee: cherokee
	Cherokee Script = 6
	// Coptic: coptic
	Coptic Script = 7
	// Cyrillic: cyrillic
	Cyrillic Script = 8
	// Deseret: deseret
	Deseret Script = 9
	// Devanagari: devanagari
	Devanagari Script = 10
	// Ethiopic: ethiopic
	Ethiopic Script = 11
	// Georgian: georgian
	Georgian Script = 12
	// Gothic: gothic
	Gothic Script = 13
	// Greek: greek
	Greek Script = 14
	// Gujarati: gujarati
	Gujarati Script = 15
	// Gurmukhi: gurmukhi
	Gurmukhi Script = 16
	// Han: han
	Han Script = 17
	// Hangul: hangul
	Hangul Script = 18
	// Hebrew: hebrew
	Hebrew Script = 19
	// Hiragana: hiragana
	Hiragana Script = 20
	// Kannada: kannada
	Kannada Script = 21
	// Katakana: katakana
	Katakana Script = 22
	// Khmer: khmer
	Khmer Script = 23
	// Lao: lao
	Lao Script = 24
	// Latin: latin
	Latin Script = 25
	// Malayalam: malayalam
	Malayalam Script = 26
	// Mongolian: mongolian
	Mongolian Script = 27
	// Myanmar: myanmar
	Myanmar Script = 28
	// Ogham: ogham
	Ogham Script = 29
	// OldItalic: old Italic
	OldItalic Script = 30
	// Oriya: oriya
	Oriya Script = 31
	// Runic: runic
	Runic Script = 32
	// Sinhala: sinhala
	Sinhala Script = 33
	// Syriac: syriac
	Syriac Script = 34
	// Tamil: tamil
	Tamil Script = 35
	// Telugu: telugu
	Telugu Script = 36
	// Thaana: thaana
	Thaana Script = 37
	// Thai: thai
	Thai Script = 38
	// Tibetan: tibetan
	Tibetan Script = 39
	// CanadianAboriginal: canadian Aboriginal
	CanadianAboriginal Script = 40
	// Yi: yi
	Yi Script = 41
	// Tagalog: tagalog
	Tagalog Script = 42
	// Hanunoo: hanunoo
	Hanunoo Script = 43
	// Buhid: buhid
	Buhid Script = 44
	// Tagbanwa: tagbanwa
	Tagbanwa Script = 45
	// Braille: braille
	Braille Script = 46
	// Cypriot: cypriot
	Cypriot Script = 47
	// Limbu: limbu
	Limbu Script = 48
	// Osmanya: osmanya
	Osmanya Script = 49
	// Shavian: shavian
	Shavian Script = 50
	// LinearB: linear B
	LinearB Script = 51
	// TaiLe: tai Le
	TaiLe Script = 52
	// Ugaritic: ugaritic
	Ugaritic Script = 53
	// NewTaiLue: new Tai Lue. Since 1.10
	NewTaiLue Script = 54
	// Buginese: buginese. Since 1.10
	Buginese Script = 55
	// Glagolitic: glagolitic. Since 1.10
	Glagolitic Script = 56
	// Tifinagh: tifinagh. Since 1.10
	Tifinagh Script = 57
	// SylotiNagri: syloti Nagri. Since 1.10
	SylotiNagri Script = 58
	// OldPersian: old Persian. Since 1.10
	OldPersian Script = 59
	// Kharoshthi: kharoshthi. Since 1.10
	Kharoshthi Script = 60
	// Unknown: unassigned code point. Since 1.14
	Unknown Script = 61
	// Balinese: balinese. Since 1.14
	Balinese Script = 62
	// Cuneiform: cuneiform. Since 1.14
	Cuneiform Script = 63
	// Phoenician: phoenician. Since 1.14
	Phoenician Script = 64
	// PhagsPa: phags-pa. Since 1.14
	PhagsPa Script = 65
	// Nko: n'Ko. Since 1.14
	Nko Script = 66
	// KayahLi: kayah Li. Since 1.20.1
	KayahLi Script = 67
	// Lepcha: lepcha. Since 1.20.1
	Lepcha Script = 68
	// Rejang: rejang. Since 1.20.1
	Rejang Script = 69
	// Sundanese: sundanese. Since 1.20.1
	Sundanese Script = 70
	// Saurashtra: saurashtra. Since 1.20.1
	Saurashtra Script = 71
	// Cham: cham. Since 1.20.1
	Cham Script = 72
	// OlChiki: ol Chiki. Since 1.20.1
	OlChiki Script = 73
	// Vai: vai. Since 1.20.1
	Vai Script = 74
	// Carian: carian. Since 1.20.1
	Carian Script = 75
	// Lycian: lycian. Since 1.20.1
	Lycian Script = 76
	// Lydian: lydian. Since 1.20.1
	Lydian Script = 77
	// Batak: batak. Since 1.32
	Batak Script = 78
	// Brahmi: brahmi. Since 1.32
	Brahmi Script = 79
	// Mandaic: mandaic. Since 1.32
	Mandaic Script = 80
	// Chakma: chakma. Since: 1.32
	Chakma Script = 81
	// MeroiticCursive: meroitic Cursive. Since: 1.32
	MeroiticCursive Script = 82
	// MeroiticHieroglyphs: meroitic Hieroglyphs. Since: 1.32
	MeroiticHieroglyphs Script = 83
	// Miao: miao. Since: 1.32
	Miao Script = 84
	// Sharada: sharada. Since: 1.32
	Sharada Script = 85
	// SoraSompeng: sora Sompeng. Since: 1.32
	SoraSompeng Script = 86
	// Takri: takri. Since: 1.32
	Takri Script = 87
	// BassaVah: bassa. Since: 1.40
	BassaVah Script = 88
	// CaucasianAlbanian: caucasian Albanian. Since: 1.40
	CaucasianAlbanian Script = 89
	// Duployan: duployan. Since: 1.40
	Duployan Script = 90
	// Elbasan: elbasan. Since: 1.40
	Elbasan Script = 91
	// Grantha: grantha. Since: 1.40
	Grantha Script = 92
	// Khojki: kjohki. Since: 1.40
	Khojki Script = 93
	// Khudawadi: khudawadi, Sindhi. Since: 1.40
	Khudawadi Script = 94
	// LinearA: linear A. Since: 1.40
	LinearA Script = 95
	// Mahajani: mahajani. Since: 1.40
	Mahajani Script = 96
	// Manichaean: manichaean. Since: 1.40
	Manichaean Script = 97
	// MendeKikakui: mende Kikakui. Since: 1.40
	MendeKikakui Script = 98
	// Modi: modi. Since: 1.40
	Modi Script = 99
	// Mro: mro. Since: 1.40
	Mro Script = 100
	// Nabataean: nabataean. Since: 1.40
	Nabataean Script = 101
	// OldNorthArabian: old North Arabian. Since: 1.40
	OldNorthArabian Script = 102
	// OldPermic: old Permic. Since: 1.40
	OldPermic Script = 103
	// PahawhHmong: pahawh Hmong. Since: 1.40
	PahawhHmong Script = 104
	// Palmyrene: palmyrene. Since: 1.40
	Palmyrene Script = 105
	// PauCinHau: pau Cin Hau. Since: 1.40
	PauCinHau Script = 106
	// PsalterPahlavi: psalter Pahlavi. Since: 1.40
	PsalterPahlavi Script = 107
	// Siddham: siddham. Since: 1.40
	Siddham Script = 108
	// Tirhuta: tirhuta. Since: 1.40
	Tirhuta Script = 109
	// WarangCiti: warang Citi. Since: 1.40
	WarangCiti Script = 110
	// Ahom: ahom. Since: 1.40
	Ahom Script = 111
	// AnatolianHieroglyphs: anatolian Hieroglyphs. Since: 1.40
	AnatolianHieroglyphs Script = 112
	// Hatran: hatran. Since: 1.40
	Hatran Script = 113
	// Multani: multani. Since: 1.40
	Multani Script = 114
	// OldHungarian: old Hungarian. Since: 1.40
	OldHungarian Script = 115
	// Signwriting: signwriting. Since: 1.40
	Signwriting Script = 116
)

func marshalScript(p uintptr) (interface{}, error) {
	return Script(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// ScriptIter: `PangoScriptIter` is used to iterate through a string and
// identify ranges in different scripts.
type ScriptIter struct {
	native C.PangoScriptIter
}

// WrapScriptIter wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapScriptIter(ptr unsafe.Pointer) *ScriptIter {
	return (*ScriptIter)(ptr)
}

func marshalScriptIter(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return (*ScriptIter)(unsafe.Pointer(b)), nil
}

// NewScriptIter constructs a struct ScriptIter.
func NewScriptIter(text string, length int) *ScriptIter {
	var _arg1 *C.char            // out
	var _arg2 C.int              // out
	var _cret *C.PangoScriptIter // in

	_arg1 = (*C.char)(C.CString(text))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.int(length)

	_cret = C.pango_script_iter_new(_arg1, _arg2)

	var _scriptIter *ScriptIter // out

	_scriptIter = (*ScriptIter)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(_scriptIter, func(v *ScriptIter) {
		C.free(unsafe.Pointer(v))
	})

	return _scriptIter
}

// Native returns the underlying C source pointer.
func (s *ScriptIter) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

// Free frees a ScriptIter created with pango_script_iter_new().
func (i *ScriptIter) free() {
	var _arg0 *C.PangoScriptIter // out

	_arg0 = (*C.PangoScriptIter)(unsafe.Pointer(i))

	C.pango_script_iter_free(_arg0)
}

// Range gets information about the range to which @iter currently points. The
// range is the set of locations p where *start <= p < *end. (That is, it
// doesn't include the character stored at *end)
//
// Note that while the type of the @script argument is declared as PangoScript,
// as of Pango 1.18, this function simply returns GUnicodeScript values. Callers
// must be prepared to handle unknown values.
func (i *ScriptIter) Range() (start string, end string, script Script) {
	var _arg0 *C.PangoScriptIter // out
	var _arg1 *C.char            // in
	var _arg2 *C.char            // in
	var _arg3 C.PangoScript      // in

	_arg0 = (*C.PangoScriptIter)(unsafe.Pointer(i))

	C.pango_script_iter_get_range(_arg0, &_arg1, &_arg2, &_arg3)

	var _start string  // out
	var _end string    // out
	var _script Script // out

	_start = C.GoString(_arg1)
	defer C.free(unsafe.Pointer(_arg1))
	_end = C.GoString(_arg2)
	defer C.free(unsafe.Pointer(_arg2))
	_script = Script(_arg3)

	return _start, _end, _script
}

// Next advances a ScriptIter to the next range. If @iter is already at the end,
// it is left unchanged and false is returned.
func (i *ScriptIter) Next() bool {
	var _arg0 *C.PangoScriptIter // out
	var _cret C.gboolean         // in

	_arg0 = (*C.PangoScriptIter)(unsafe.Pointer(i))

	_cret = C.pango_script_iter_next(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}
