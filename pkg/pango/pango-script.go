// Code generated by girgen. DO NOT EDIT.

package pango

import (
	"runtime"
	"unsafe"

	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <pango/pango.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.pango_script_iter_get_type()), F: marshalScriptIter},
	})
}

// ScriptIter: a `PangoScriptIter` is used to iterate through a string and
// identify ranges in different scripts.
type ScriptIter struct {
	native C.PangoScriptIter
}

// WrapScriptIter wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapScriptIter(ptr unsafe.Pointer) *ScriptIter {
	if ptr == nil {
		return nil
	}

	return (*ScriptIter)(ptr)
}

func marshalScriptIter(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapScriptIter(unsafe.Pointer(b)), nil
}

// NewScriptIter constructs a struct ScriptIter.
func NewScriptIter(text string, length int) *ScriptIter {
	var arg1 *C.char
	var arg2 C.int

	arg1 = (*C.char)(C.CString(text))
	defer C.free(unsafe.Pointer(arg1))
	arg2 = C.int(length)

	var cret *C.PangoScriptIter

	cret = C.pango_script_iter_new(arg1, arg2)

	var scriptIter *ScriptIter

	scriptIter = WrapScriptIter(unsafe.Pointer(cret))
	runtime.SetFinalizer(scriptIter, func(v *ScriptIter) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return scriptIter
}

// Native returns the underlying C source pointer.
func (s *ScriptIter) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

// Free frees a ScriptIter created with pango_script_iter_new().
func (i *ScriptIter) Free() {
	var arg0 *C.PangoScriptIter

	arg0 = (*C.PangoScriptIter)(unsafe.Pointer(i.Native()))

	C.pango_script_iter_free(arg0)
}

// Range gets information about the range to which @iter currently points. The
// range is the set of locations p where *start <= p < *end. (That is, it
// doesn't include the character stored at *end)
//
// Note that while the type of the @script argument is declared as PangoScript,
// as of Pango 1.18, this function simply returns GUnicodeScript values. Callers
// must be prepared to handle unknown values.
func (i *ScriptIter) Range() (start string, end string, script Script) {
	var arg0 *C.PangoScriptIter

	arg0 = (*C.PangoScriptIter)(unsafe.Pointer(i.Native()))

	var arg1 *C.char
	var arg2 *C.char
	var arg3 C.PangoScript

	C.pango_script_iter_get_range(arg0, &arg1, &arg2, &arg3)

	var start string
	var end string
	var script Script

	start = C.GoString(arg1)
	defer C.free(unsafe.Pointer(arg1))
	end = C.GoString(arg2)
	defer C.free(unsafe.Pointer(arg2))
	script = Script(arg3)

	return start, end, script
}

// Next advances a ScriptIter to the next range. If @iter is already at the end,
// it is left unchanged and false is returned.
func (i *ScriptIter) Next() bool {
	var arg0 *C.PangoScriptIter

	arg0 = (*C.PangoScriptIter)(unsafe.Pointer(i.Native()))

	var cret C.gboolean

	cret = C.pango_script_iter_next(arg0)

	var ok bool

	if cret {
		ok = true
	}

	return ok
}
