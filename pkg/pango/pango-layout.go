// Code generated by girgen. DO NOT EDIT.

package pango

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: pango
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <pango/pango.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.pango_alignment_get_type()), F: marshalAlignment},
		{T: externglib.Type(C.pango_ellipsize_mode_get_type()), F: marshalEllipsizeMode},
		{T: externglib.Type(C.pango_wrap_mode_get_type()), F: marshalWrapMode},
		{T: externglib.Type(C.pango_layout_get_type()), F: marshalLayouter},
		{T: externglib.Type(C.pango_layout_iter_get_type()), F: marshalLayoutIter},
		{T: externglib.Type(C.pango_layout_line_get_type()), F: marshalLayoutLine},
	})
}

// LayoutRun: `PangoLayoutRun` represents a single run within a
// `PangoLayoutLine`.
//
// It is simply an alternate name for [struct@Pango.GlyphItem]. See the
// [struct@Pango.GlyphItem] docs for details on the fields.
type LayoutRun = GlyphItem

// Alignment: `PangoAlignment` describes how to align the lines of a
// `PangoLayout` within the available space.
//
// If the `PangoLayout` is set to justify using
// [method@Pango.Layout.set_justify], this only has effect for partial lines.
type Alignment int

const (
	// Left: put all available space on the right
	AlignmentLeft Alignment = iota
	// Center: center the line within the available space
	AlignmentCenter
	// Right: put all available space on the left
	AlignmentRight
)

func marshalAlignment(p uintptr) (interface{}, error) {
	return Alignment(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// EllipsizeMode: `PangoEllipsizeMode` describes what sort of ellipsization
// should be applied to text.
//
// In the ellipsization process characters are removed from the text in order to
// make it fit to a given width and replaced with an ellipsis.
type EllipsizeMode int

const (
	// None: no ellipsization
	EllipsizeModeNone EllipsizeMode = iota
	// Start: omit characters at the start of the text
	EllipsizeModeStart
	// Middle: omit characters in the middle of the text
	EllipsizeModeMiddle
	// End: omit characters at the end of the text
	EllipsizeModeEnd
)

func marshalEllipsizeMode(p uintptr) (interface{}, error) {
	return EllipsizeMode(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// WrapMode: `PangoWrapMode` describes how to wrap the lines of a `PangoLayout`
// to the desired width.
type WrapMode int

const (
	// Word: wrap lines at word boundaries.
	WrapModeWord WrapMode = iota
	// Char: wrap lines at character boundaries.
	WrapModeChar
	// WordChar: wrap lines at word boundaries, but fall back to character
	// boundaries if there is not enough space for a full word.
	WrapModeWordChar
)

func marshalWrapMode(p uintptr) (interface{}, error) {
	return WrapMode(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// Layouter describes Layout's methods.
type Layouter interface {
	// ContextChanged forces recomputation of any state in the `PangoLayout`
	// that might depend on the layout's context.
	ContextChanged()
	// Copy creates a deep copy-by-value of the layout.
	Copy() *Layout
	// Alignment gets the alignment for the layout: how partial lines are
	// positioned within the horizontal space available.
	Alignment() Alignment
	// Attributes gets the attribute list for the layout, if any.
	Attributes() *AttrList
	// AutoDir gets whether to calculate the base direction for the layout
	// according to its contents.
	AutoDir() bool
	// Baseline gets the Y position of baseline of the first line in @layout.
	Baseline() int
	// CharacterCount returns the number of Unicode characters in the the text
	// of @layout.
	CharacterCount() int
	// Context retrieves the `PangoContext` used for this layout.
	Context() *Context
	// CursorPos: given an index within a layout, determines the positions that
	// of the strong and weak cursors if the insertion point is at that index.
	CursorPos(index_ int) (strongPos Rectangle, weakPos Rectangle)
	// Direction gets the text direction at the given character position in
	// @layout.
	Direction(index int) Direction
	// Ellipsize gets the type of ellipsization being performed for @layout.
	Ellipsize() EllipsizeMode
	// Extents computes the logical and ink extents of @layout.
	Extents() (inkRect Rectangle, logicalRect Rectangle)
	// FontDescription gets the font description for the layout, if any.
	FontDescription() *FontDescription
	// Height gets the height of layout used for ellipsization.
	Height() int
	// Indent gets the paragraph indent width in Pango units.
	Indent() int
	// Iter returns an iterator to iterate over the visual extents of the
	// layout.
	Iter() *LayoutIter
	// Justify gets whether each complete line should be stretched to fill the
	// entire width of the layout.
	Justify() bool
	// Line retrieves a particular line from a `PangoLayout`.
	Line(line int) *LayoutLine
	// LineCount retrieves the count of lines for the @layout.
	LineCount() int
	// LineReadonly retrieves a particular line from a `PangoLayout`.
	LineReadonly(line int) *LayoutLine
	// LineSpacing gets the line spacing factor of @layout.
	LineSpacing() float32
	// LogAttrs retrieves an array of logical attributes for each character in
	// the @layout.
	LogAttrs() []LogAttr
	// PixelExtents computes the logical and ink extents of @layout in device
	// units.
	PixelExtents() (inkRect Rectangle, logicalRect Rectangle)
	// PixelSize determines the logical width and height of a `PangoLayout` in
	// device units.
	PixelSize() (width int, height int)
	// Serial returns the current serial number of @layout.
	Serial() uint
	// SingleParagraphMode obtains whether @layout is in single paragraph mode.
	SingleParagraphMode() bool
	// Size determines the logical width and height of a `PangoLayout` in Pango
	// units.
	Size() (width int, height int)
	// Spacing gets the amount of spacing between the lines of the layout.
	Spacing() int
	// Tabs gets the current `PangoTabArray` used by this layout.
	Tabs() *TabArray
	// Text gets the text in the layout.
	Text() string
	// UnknownGlyphsCount counts the number of unknown glyphs in @layout.
	UnknownGlyphsCount() int
	// Width gets the width to which the lines of the `PangoLayout` should wrap.
	Width() int
	// Wrap gets the wrap mode for the layout.
	Wrap() WrapMode
	// IndexToLineX converts from byte @index_ within the @layout to line and X
	// position.
	IndexToLineX(index_ int, trailing bool) (line int, xPos int)
	// IndexToPos converts from an index within a `PangoLayout` to the onscreen
	// position corresponding to the grapheme at that index.
	IndexToPos(index_ int) Rectangle
	// IsEllipsized queries whether the layout had to ellipsize any paragraphs.
	IsEllipsized() bool
	// IsWrapped queries whether the layout had to wrap any paragraphs.
	IsWrapped() bool
	// MoveCursorVisually computes a new cursor position from an old position
	// and a count of positions to move visually.
	MoveCursorVisually(strong bool, oldIndex int, oldTrailing int, direction int) (newIndex int, newTrailing int)
	// SetAlignment sets the alignment for the layout: how partial lines are
	// positioned within the horizontal space available.
	SetAlignment(alignment Alignment)
	// SetAttributes sets the text attributes for a layout object.
	SetAttributes(attrs *AttrList)
	// SetAutoDir sets whether to calculate the base direction for the layout
	// according to its contents.
	SetAutoDir(autoDir bool)
	// SetEllipsize sets the type of ellipsization being performed for @layout.
	SetEllipsize(ellipsize EllipsizeMode)
	// SetFontDescription sets the default font description for the layout.
	SetFontDescription(desc *FontDescription)
	// SetHeight sets the height to which the `PangoLayout` should be ellipsized
	// at.
	SetHeight(height int)
	// SetIndent sets the width in Pango units to indent each paragraph.
	SetIndent(indent int)
	// SetJustify sets whether each complete line should be stretched to fill
	// the entire width of the layout.
	SetJustify(justify bool)
	// SetLineSpacing sets a factor for line spacing.
	SetLineSpacing(factor float32)
	// SetMarkup sets the layout text and attribute list from marked-up text.
	SetMarkup(markup string, length int)
	// SetMarkupWithAccel sets the layout text and attribute list from marked-up
	// text.
	SetMarkupWithAccel(markup string, length int, accelMarker uint32) uint32
	// SetSingleParagraphMode sets the single paragraph mode of @layout.
	SetSingleParagraphMode(setting bool)
	// SetSpacing sets the amount of spacing in Pango unit between the lines of
	// the layout.
	SetSpacing(spacing int)
	// SetTabs sets the tabs to use for @layout, overriding the default tabs.
	SetTabs(tabs *TabArray)
	// SetText sets the text of the layout.
	SetText(text string, length int)
	// SetWidth sets the width to which the lines of the `PangoLayout` should
	// wrap or ellipsized.
	SetWidth(width int)
	// SetWrap sets the wrap mode.
	SetWrap(wrap WrapMode)
	// XYToIndex converts from X and Y position within a layout to the byte
	// index to the character at that logical position.
	XYToIndex(x int, y int) (index_ int, trailing int, ok bool)
}

// Layout: `PangoLayout` structure represents an entire paragraph of text.
//
// While complete access to the layout capabilities of Pango is provided using
// the detailed interfaces for itemization and shaping, using that functionality
// directly involves writing a fairly large amount of code. `PangoLayout`
// provides a high-level driver for formatting entire paragraphs of text at
// once. This includes paragraph-level functionality such as line breaking,
// justification, alignment and ellipsization.
//
// A `PangoLayout is initialized with a `PangoContext`, UTF-8 string and set of
// attributes for that string. Once that is done, the set of formatted lines can
// be extracted from the object, the layout can be rendered, and conversion
// between logical character positions within the layout's text, and the
// physical position of the resulting glyphs can be made.
//
// There are a number of parameters to adjust the formatting of a `PangoLayout`.
// The following image shows adjustable parameters (on the left) and font
// metrics (on the right):
//
// !Pango Layout Parameters (layout.png)
//
// It is possible, as well, to ignore the 2-D setup, and simply treat the
// results of a `PangoLayout` as a list of lines.
type Layout struct {
	*externglib.Object
}

var (
	_ Layouter        = (*Layout)(nil)
	_ gextras.Nativer = (*Layout)(nil)
)

func wrapLayout(obj *externglib.Object) *Layout {
	return &Layout{
		Object: obj,
	}
}

func marshalLayouter(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapLayout(obj), nil
}

// NewLayout: create a new `PangoLayout` object with attributes initialized to
// default values for a particular `PangoContext`.
func NewLayout(context Contexter) *Layout {
	var _arg1 *C.PangoContext // out
	var _cret *C.PangoLayout  // in

	_arg1 = (*C.PangoContext)(unsafe.Pointer((context).(gextras.Nativer).Native()))

	_cret = C.pango_layout_new(_arg1)

	var _layout *Layout // out

	_layout = wrapLayout(externglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _layout
}

// ContextChanged forces recomputation of any state in the `PangoLayout` that
// might depend on the layout's context.
//
// This function should be called if you make changes to the context subsequent
// to creating the layout.
func (layout *Layout) ContextChanged() {
	var _arg0 *C.PangoLayout // out

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(layout.Native()))

	C.pango_layout_context_changed(_arg0)
}

// Copy creates a deep copy-by-value of the layout.
//
// The attribute list, tab array, and text from the original layout are all
// copied by value.
func (src *Layout) Copy() *Layout {
	var _arg0 *C.PangoLayout // out
	var _cret *C.PangoLayout // in

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(src.Native()))

	_cret = C.pango_layout_copy(_arg0)

	var _layout *Layout // out

	_layout = wrapLayout(externglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _layout
}

// Alignment gets the alignment for the layout: how partial lines are positioned
// within the horizontal space available.
func (layout *Layout) Alignment() Alignment {
	var _arg0 *C.PangoLayout   // out
	var _cret C.PangoAlignment // in

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(layout.Native()))

	_cret = C.pango_layout_get_alignment(_arg0)

	var _alignment Alignment // out

	_alignment = Alignment(_cret)

	return _alignment
}

// Attributes gets the attribute list for the layout, if any.
func (layout *Layout) Attributes() *AttrList {
	var _arg0 *C.PangoLayout   // out
	var _cret *C.PangoAttrList // in

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(layout.Native()))

	_cret = C.pango_layout_get_attributes(_arg0)

	var _attrList *AttrList // out

	_attrList = (*AttrList)(unsafe.Pointer(_cret))
	C.pango_attr_list_ref(_cret)
	runtime.SetFinalizer(_attrList, func(v *AttrList) {
		C.pango_attr_list_unref((*C.PangoAttrList)(unsafe.Pointer(v)))
	})

	return _attrList
}

// AutoDir gets whether to calculate the base direction for the layout according
// to its contents.
//
// See [method@Pango.Layout.set_auto_dir].
func (layout *Layout) AutoDir() bool {
	var _arg0 *C.PangoLayout // out
	var _cret C.gboolean     // in

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(layout.Native()))

	_cret = C.pango_layout_get_auto_dir(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Baseline gets the Y position of baseline of the first line in @layout.
func (layout *Layout) Baseline() int {
	var _arg0 *C.PangoLayout // out
	var _cret C.int          // in

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(layout.Native()))

	_cret = C.pango_layout_get_baseline(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// CharacterCount returns the number of Unicode characters in the the text of
// @layout.
func (layout *Layout) CharacterCount() int {
	var _arg0 *C.PangoLayout // out
	var _cret C.gint         // in

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(layout.Native()))

	_cret = C.pango_layout_get_character_count(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// Context retrieves the `PangoContext` used for this layout.
func (layout *Layout) Context() *Context {
	var _arg0 *C.PangoLayout  // out
	var _cret *C.PangoContext // in

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(layout.Native()))

	_cret = C.pango_layout_get_context(_arg0)

	var _context *Context // out

	_context = wrapContext(externglib.Take(unsafe.Pointer(_cret)))

	return _context
}

// CursorPos: given an index within a layout, determines the positions that of
// the strong and weak cursors if the insertion point is at that index.
//
// The position of each cursor is stored as a zero-width rectangle. The strong
// cursor location is the location where characters of the directionality equal
// to the base direction of the layout are inserted. The weak cursor location is
// the location where characters of the directionality opposite to the base
// direction of the layout are inserted.
func (layout *Layout) CursorPos(index_ int) (strongPos Rectangle, weakPos Rectangle) {
	var _arg0 *C.PangoLayout // out
	var _arg1 C.int          // out
	var _strongPos Rectangle
	var _weakPos Rectangle

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(layout.Native()))
	_arg1 = C.int(index_)

	C.pango_layout_get_cursor_pos(_arg0, _arg1, (*C.PangoRectangle)(unsafe.Pointer(&_strongPos)), (*C.PangoRectangle)(unsafe.Pointer(&_weakPos)))

	return _strongPos, _weakPos
}

// Direction gets the text direction at the given character position in @layout.
func (layout *Layout) Direction(index int) Direction {
	var _arg0 *C.PangoLayout   // out
	var _arg1 C.int            // out
	var _cret C.PangoDirection // in

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(layout.Native()))
	_arg1 = C.int(index)

	_cret = C.pango_layout_get_direction(_arg0, _arg1)

	var _direction Direction // out

	_direction = Direction(_cret)

	return _direction
}

// Ellipsize gets the type of ellipsization being performed for @layout.
//
// See [method@Pango.Layout.set_ellipsize].
//
// Use [method@Pango.Layout.is_ellipsized] to query whether any paragraphs were
// actually ellipsized.
func (layout *Layout) Ellipsize() EllipsizeMode {
	var _arg0 *C.PangoLayout       // out
	var _cret C.PangoEllipsizeMode // in

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(layout.Native()))

	_cret = C.pango_layout_get_ellipsize(_arg0)

	var _ellipsizeMode EllipsizeMode // out

	_ellipsizeMode = EllipsizeMode(_cret)

	return _ellipsizeMode
}

// Extents computes the logical and ink extents of @layout.
//
// Logical extents are usually what you want for positioning things. Note that
// both extents may have non-zero x and y. You may want to use those to offset
// where you render the layout. Not doing that is a very typical bug that shows
// up as right-to-left layouts not being correctly positioned in a layout with a
// set width.
//
// The extents are given in layout coordinates and in Pango units; layout
// coordinates begin at the top left corner of the layout.
func (layout *Layout) Extents() (inkRect Rectangle, logicalRect Rectangle) {
	var _arg0 *C.PangoLayout // out
	var _inkRect Rectangle
	var _logicalRect Rectangle

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(layout.Native()))

	C.pango_layout_get_extents(_arg0, (*C.PangoRectangle)(unsafe.Pointer(&_inkRect)), (*C.PangoRectangle)(unsafe.Pointer(&_logicalRect)))

	return _inkRect, _logicalRect
}

// FontDescription gets the font description for the layout, if any.
func (layout *Layout) FontDescription() *FontDescription {
	var _arg0 *C.PangoLayout          // out
	var _cret *C.PangoFontDescription // in

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(layout.Native()))

	_cret = C.pango_layout_get_font_description(_arg0)

	var _fontDescription *FontDescription // out

	_fontDescription = (*FontDescription)(unsafe.Pointer(_cret))

	return _fontDescription
}

// Height gets the height of layout used for ellipsization.
//
// See [method@Pango.Layout.set_height] for details.
func (layout *Layout) Height() int {
	var _arg0 *C.PangoLayout // out
	var _cret C.int          // in

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(layout.Native()))

	_cret = C.pango_layout_get_height(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// Indent gets the paragraph indent width in Pango units.
//
// A negative value indicates a hanging indentation.
func (layout *Layout) Indent() int {
	var _arg0 *C.PangoLayout // out
	var _cret C.int          // in

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(layout.Native()))

	_cret = C.pango_layout_get_indent(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// Iter returns an iterator to iterate over the visual extents of the layout.
func (layout *Layout) Iter() *LayoutIter {
	var _arg0 *C.PangoLayout     // out
	var _cret *C.PangoLayoutIter // in

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(layout.Native()))

	_cret = C.pango_layout_get_iter(_arg0)

	var _layoutIter *LayoutIter // out

	_layoutIter = (*LayoutIter)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(_layoutIter, func(v *LayoutIter) {
		C.pango_layout_iter_free((*C.PangoLayoutIter)(unsafe.Pointer(v)))
	})

	return _layoutIter
}

// Justify gets whether each complete line should be stretched to fill the
// entire width of the layout.
func (layout *Layout) Justify() bool {
	var _arg0 *C.PangoLayout // out
	var _cret C.gboolean     // in

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(layout.Native()))

	_cret = C.pango_layout_get_justify(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Line retrieves a particular line from a `PangoLayout`.
//
// Use the faster [method@Pango.Layout.get_line_readonly] if you do not plan to
// modify the contents of the line (glyphs, glyph widths, etc.).
func (layout *Layout) Line(line int) *LayoutLine {
	var _arg0 *C.PangoLayout     // out
	var _arg1 C.int              // out
	var _cret *C.PangoLayoutLine // in

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(layout.Native()))
	_arg1 = C.int(line)

	_cret = C.pango_layout_get_line(_arg0, _arg1)

	var _layoutLine *LayoutLine // out

	_layoutLine = (*LayoutLine)(unsafe.Pointer(_cret))
	C.pango_layout_line_ref(_cret)
	runtime.SetFinalizer(_layoutLine, func(v *LayoutLine) {
		C.pango_layout_line_unref((*C.PangoLayoutLine)(unsafe.Pointer(v)))
	})

	return _layoutLine
}

// LineCount retrieves the count of lines for the @layout.
func (layout *Layout) LineCount() int {
	var _arg0 *C.PangoLayout // out
	var _cret C.int          // in

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(layout.Native()))

	_cret = C.pango_layout_get_line_count(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// LineReadonly retrieves a particular line from a `PangoLayout`.
//
// This is a faster alternative to [method@Pango.Layout.get_line], but the user
// is not expected to modify the contents of the line (glyphs, glyph widths,
// etc.).
func (layout *Layout) LineReadonly(line int) *LayoutLine {
	var _arg0 *C.PangoLayout     // out
	var _arg1 C.int              // out
	var _cret *C.PangoLayoutLine // in

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(layout.Native()))
	_arg1 = C.int(line)

	_cret = C.pango_layout_get_line_readonly(_arg0, _arg1)

	var _layoutLine *LayoutLine // out

	_layoutLine = (*LayoutLine)(unsafe.Pointer(_cret))
	C.pango_layout_line_ref(_cret)
	runtime.SetFinalizer(_layoutLine, func(v *LayoutLine) {
		C.pango_layout_line_unref((*C.PangoLayoutLine)(unsafe.Pointer(v)))
	})

	return _layoutLine
}

// LineSpacing gets the line spacing factor of @layout.
//
// See [method@Pango.Layout.set_line_spacing].
func (layout *Layout) LineSpacing() float32 {
	var _arg0 *C.PangoLayout // out
	var _cret C.float        // in

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(layout.Native()))

	_cret = C.pango_layout_get_line_spacing(_arg0)

	var _gfloat float32 // out

	_gfloat = float32(_cret)

	return _gfloat
}

// LogAttrs retrieves an array of logical attributes for each character in the
// @layout.
func (layout *Layout) LogAttrs() []LogAttr {
	var _arg0 *C.PangoLayout // out
	var _arg1 *C.PangoLogAttr
	var _arg2 C.gint // in

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(layout.Native()))

	C.pango_layout_get_log_attrs(_arg0, &_arg1, &_arg2)

	var _attrs []LogAttr

	defer C.free(unsafe.Pointer(_arg1))
	_attrs = make([]LogAttr, _arg2)
	copy(_attrs, unsafe.Slice((*LogAttr)(unsafe.Pointer(_arg1)), _arg2))

	return _attrs
}

// PixelExtents computes the logical and ink extents of @layout in device units.
//
// This function just calls [method@Pango.Layout.get_extents] followed by two
// [func@extents_to_pixels] calls, rounding @ink_rect and @logical_rect such
// that the rounded rectangles fully contain the unrounded one (that is, passes
// them as first argument to `pango_extents_to_pixels()`).
func (layout *Layout) PixelExtents() (inkRect Rectangle, logicalRect Rectangle) {
	var _arg0 *C.PangoLayout // out
	var _inkRect Rectangle
	var _logicalRect Rectangle

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(layout.Native()))

	C.pango_layout_get_pixel_extents(_arg0, (*C.PangoRectangle)(unsafe.Pointer(&_inkRect)), (*C.PangoRectangle)(unsafe.Pointer(&_logicalRect)))

	return _inkRect, _logicalRect
}

// PixelSize determines the logical width and height of a `PangoLayout` in
// device units.
//
// [method@Pango.Layout.get_size] returns the width and height scaled by
// PANGO_SCALE. This is simply a convenience function around
// [method@Pango.Layout.get_pixel_extents].
func (layout *Layout) PixelSize() (width int, height int) {
	var _arg0 *C.PangoLayout // out
	var _arg1 C.int          // in
	var _arg2 C.int          // in

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(layout.Native()))

	C.pango_layout_get_pixel_size(_arg0, &_arg1, &_arg2)

	var _width int  // out
	var _height int // out

	_width = int(_arg1)
	_height = int(_arg2)

	return _width, _height
}

// Serial returns the current serial number of @layout.
//
// The serial number is initialized to an small number larger than zero when a
// new layout is created and is increased whenever the layout is changed using
// any of the setter functions, or the `PangoContext` it uses has changed. The
// serial may wrap, but will never have the value 0. Since it can wrap, never
// compare it with "less than", always use "not equals".
//
// This can be used to automatically detect changes to a `PangoLayout`, and is
// useful for example to decide whether a layout needs redrawing. To force the
// serial to be increased, use [method@Pango.Layout.context_changed].
func (layout *Layout) Serial() uint {
	var _arg0 *C.PangoLayout // out
	var _cret C.guint        // in

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(layout.Native()))

	_cret = C.pango_layout_get_serial(_arg0)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// SingleParagraphMode obtains whether @layout is in single paragraph mode.
//
// See [method@Pango.Layout.set_single_paragraph_mode].
func (layout *Layout) SingleParagraphMode() bool {
	var _arg0 *C.PangoLayout // out
	var _cret C.gboolean     // in

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(layout.Native()))

	_cret = C.pango_layout_get_single_paragraph_mode(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Size determines the logical width and height of a `PangoLayout` in Pango
// units.
//
// This is simply a convenience function around
// [method@Pango.Layout.get_extents].
func (layout *Layout) Size() (width int, height int) {
	var _arg0 *C.PangoLayout // out
	var _arg1 C.int          // in
	var _arg2 C.int          // in

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(layout.Native()))

	C.pango_layout_get_size(_arg0, &_arg1, &_arg2)

	var _width int  // out
	var _height int // out

	_width = int(_arg1)
	_height = int(_arg2)

	return _width, _height
}

// Spacing gets the amount of spacing between the lines of the layout.
func (layout *Layout) Spacing() int {
	var _arg0 *C.PangoLayout // out
	var _cret C.int          // in

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(layout.Native()))

	_cret = C.pango_layout_get_spacing(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// Tabs gets the current `PangoTabArray` used by this layout.
//
// If no `PangoTabArray` has been set, then the default tabs are in use and nil
// is returned. Default tabs are every 8 spaces.
//
// The return value should be freed with [method@Pango.TabArray.free].
func (layout *Layout) Tabs() *TabArray {
	var _arg0 *C.PangoLayout   // out
	var _cret *C.PangoTabArray // in

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(layout.Native()))

	_cret = C.pango_layout_get_tabs(_arg0)

	var _tabArray *TabArray // out

	_tabArray = (*TabArray)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(_tabArray, func(v *TabArray) {
		C.pango_tab_array_free((*C.PangoTabArray)(unsafe.Pointer(v)))
	})

	return _tabArray
}

// Text gets the text in the layout. The returned text should not be freed or
// modified.
func (layout *Layout) Text() string {
	var _arg0 *C.PangoLayout // out
	var _cret *C.char        // in

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(layout.Native()))

	_cret = C.pango_layout_get_text(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// UnknownGlyphsCount counts the number of unknown glyphs in @layout.
//
// This function can be used to determine if there are any fonts available to
// render all characters in a certain string, or when used in combination with
// PANGO_ATTR_FALLBACK, to check if a certain font supports all the characters
// in the string.
func (layout *Layout) UnknownGlyphsCount() int {
	var _arg0 *C.PangoLayout // out
	var _cret C.int          // in

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(layout.Native()))

	_cret = C.pango_layout_get_unknown_glyphs_count(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// Width gets the width to which the lines of the `PangoLayout` should wrap.
func (layout *Layout) Width() int {
	var _arg0 *C.PangoLayout // out
	var _cret C.int          // in

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(layout.Native()))

	_cret = C.pango_layout_get_width(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// Wrap gets the wrap mode for the layout.
//
// Use [method@Pango.Layout.is_wrapped] to query whether any paragraphs were
// actually wrapped.
func (layout *Layout) Wrap() WrapMode {
	var _arg0 *C.PangoLayout  // out
	var _cret C.PangoWrapMode // in

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(layout.Native()))

	_cret = C.pango_layout_get_wrap(_arg0)

	var _wrapMode WrapMode // out

	_wrapMode = WrapMode(_cret)

	return _wrapMode
}

// IndexToLineX converts from byte @index_ within the @layout to line and X
// position.
//
// The X position is measured from the left edge of the line.
func (layout *Layout) IndexToLineX(index_ int, trailing bool) (line int, xPos int) {
	var _arg0 *C.PangoLayout // out
	var _arg1 C.int          // out
	var _arg2 C.gboolean     // out
	var _arg3 C.int          // in
	var _arg4 C.int          // in

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(layout.Native()))
	_arg1 = C.int(index_)
	if trailing {
		_arg2 = C.TRUE
	}

	C.pango_layout_index_to_line_x(_arg0, _arg1, _arg2, &_arg3, &_arg4)

	var _line int // out
	var _xPos int // out

	_line = int(_arg3)
	_xPos = int(_arg4)

	return _line, _xPos
}

// IndexToPos converts from an index within a `PangoLayout` to the onscreen
// position corresponding to the grapheme at that index.
//
// The return value is represented as rectangle. Note that `pos->x` is always
// the leading edge of the grapheme and `pos->x + pos->width` the trailing edge
// of the grapheme. If the directionality of the grapheme is right-to-left, then
// `pos->width` will be negative.
func (layout *Layout) IndexToPos(index_ int) Rectangle {
	var _arg0 *C.PangoLayout // out
	var _arg1 C.int          // out
	var _pos Rectangle

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(layout.Native()))
	_arg1 = C.int(index_)

	C.pango_layout_index_to_pos(_arg0, _arg1, (*C.PangoRectangle)(unsafe.Pointer(&_pos)))

	return _pos
}

// IsEllipsized queries whether the layout had to ellipsize any paragraphs.
//
// This returns true if the ellipsization mode for @layout is not
// PANGO_ELLIPSIZE_NONE, a positive width is set on @layout, and there are
// paragraphs exceeding that width that have to be ellipsized.
func (layout *Layout) IsEllipsized() bool {
	var _arg0 *C.PangoLayout // out
	var _cret C.gboolean     // in

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(layout.Native()))

	_cret = C.pango_layout_is_ellipsized(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// IsWrapped queries whether the layout had to wrap any paragraphs.
//
// This returns true if a positive width is set on @layout, ellipsization mode
// of @layout is set to PANGO_ELLIPSIZE_NONE, and there are paragraphs exceeding
// the layout width that have to be wrapped.
func (layout *Layout) IsWrapped() bool {
	var _arg0 *C.PangoLayout // out
	var _cret C.gboolean     // in

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(layout.Native()))

	_cret = C.pango_layout_is_wrapped(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// MoveCursorVisually computes a new cursor position from an old position and a
// count of positions to move visually.
//
// If @direction is positive, then the new strong cursor position will be one
// position to the right of the old cursor position. If @direction is negative,
// then the new strong cursor position will be one position to the left of the
// old cursor position.
//
// In the presence of bidirectional text, the correspondence between logical and
// visual order will depend on the direction of the current run, and there may
// be jumps when the cursor is moved off of the end of a run.
//
// Motion here is in cursor positions, not in characters, so a single call to
// [method@Pango.Layout.move_cursor_visually] may move the cursor over multiple
// characters when multiple characters combine to form a single grapheme.
func (layout *Layout) MoveCursorVisually(strong bool, oldIndex int, oldTrailing int, direction int) (newIndex int, newTrailing int) {
	var _arg0 *C.PangoLayout // out
	var _arg1 C.gboolean     // out
	var _arg2 C.int          // out
	var _arg3 C.int          // out
	var _arg4 C.int          // out
	var _arg5 C.int          // in
	var _arg6 C.int          // in

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(layout.Native()))
	if strong {
		_arg1 = C.TRUE
	}
	_arg2 = C.int(oldIndex)
	_arg3 = C.int(oldTrailing)
	_arg4 = C.int(direction)

	C.pango_layout_move_cursor_visually(_arg0, _arg1, _arg2, _arg3, _arg4, &_arg5, &_arg6)

	var _newIndex int    // out
	var _newTrailing int // out

	_newIndex = int(_arg5)
	_newTrailing = int(_arg6)

	return _newIndex, _newTrailing
}

// SetAlignment sets the alignment for the layout: how partial lines are
// positioned within the horizontal space available.
func (layout *Layout) SetAlignment(alignment Alignment) {
	var _arg0 *C.PangoLayout   // out
	var _arg1 C.PangoAlignment // out

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(layout.Native()))
	_arg1 = C.PangoAlignment(alignment)

	C.pango_layout_set_alignment(_arg0, _arg1)
}

// SetAttributes sets the text attributes for a layout object. References
// @attrs, so the caller can unref its reference.
func (layout *Layout) SetAttributes(attrs *AttrList) {
	var _arg0 *C.PangoLayout   // out
	var _arg1 *C.PangoAttrList // out

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(layout.Native()))
	_arg1 = (*C.PangoAttrList)(unsafe.Pointer(attrs))

	C.pango_layout_set_attributes(_arg0, _arg1)
}

// SetAutoDir sets whether to calculate the base direction for the layout
// according to its contents.
//
// When this flag is on (the default), then paragraphs in @layout that begin
// with strong right-to-left characters (Arabic and Hebrew principally), will
// have right-to-left layout, paragraphs with letters from other scripts will
// have left-to-right layout. Paragraphs with only neutral characters get their
// direction from the surrounding paragraphs.
//
// When false, the choice between left-to-right and right-to-left layout is done
// according to the base direction of the layout's `PangoContext`. (See
// [method@Pango.Context.set_base_dir]).
//
// When the auto-computed direction of a paragraph differs from the base
// direction of the context, the interpretation of PANGO_ALIGN_LEFT and
// PANGO_ALIGN_RIGHT are swapped.
func (layout *Layout) SetAutoDir(autoDir bool) {
	var _arg0 *C.PangoLayout // out
	var _arg1 C.gboolean     // out

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(layout.Native()))
	if autoDir {
		_arg1 = C.TRUE
	}

	C.pango_layout_set_auto_dir(_arg0, _arg1)
}

// SetEllipsize sets the type of ellipsization being performed for @layout.
//
// Depending on the ellipsization mode @ellipsize text is removed from the
// start, middle, or end of text so they fit within the width and height of
// layout set with [method@Pango.Layout.set_width] and
// [method@Pango.Layout.set_height].
//
// If the layout contains characters such as newlines that force it to be layed
// out in multiple paragraphs, then whether each paragraph is ellipsized
// separately or the entire layout is ellipsized as a whole depends on the set
// height of the layout. See [method@Pango.Layout.set_height] for details.
func (layout *Layout) SetEllipsize(ellipsize EllipsizeMode) {
	var _arg0 *C.PangoLayout       // out
	var _arg1 C.PangoEllipsizeMode // out

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(layout.Native()))
	_arg1 = C.PangoEllipsizeMode(ellipsize)

	C.pango_layout_set_ellipsize(_arg0, _arg1)
}

// SetFontDescription sets the default font description for the layout.
//
// If no font description is set on the layout, the font description from the
// layout's context is used.
func (layout *Layout) SetFontDescription(desc *FontDescription) {
	var _arg0 *C.PangoLayout          // out
	var _arg1 *C.PangoFontDescription // out

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(layout.Native()))
	_arg1 = (*C.PangoFontDescription)(unsafe.Pointer(desc))

	C.pango_layout_set_font_description(_arg0, _arg1)
}

// SetHeight sets the height to which the `PangoLayout` should be ellipsized at.
//
// There are two different behaviors, based on whether @height is positive or
// negative.
//
// If @height is positive, it will be the maximum height of the layout. Only
// lines would be shown that would fit, and if there is any text omitted, an
// ellipsis added. At least one line is included in each paragraph regardless of
// how small the height value is. A value of zero will render exactly one line
// for the entire layout.
//
// If @height is negative, it will be the (negative of) maximum number of lines
// per paragraph. That is, the total number of lines shown may well be more than
// this value if the layout contains multiple paragraphs of text. The default
// value of -1 means that first line of each paragraph is ellipsized. This
// behavior may be changed in the future to act per layout instead of per
// paragraph. File a bug against pango at https://gitlab.gnome.org/gnome/pango
// (https://gitlab.gnome.org/gnome/pango) if your code relies on this behavior.
//
// Height setting only has effect if a positive width is set on @layout and
// ellipsization mode of @layout is not PANGO_ELLIPSIZE_NONE. The behavior is
// undefined if a height other than -1 is set and ellipsization mode is set to
// PANGO_ELLIPSIZE_NONE, and may change in the future.
func (layout *Layout) SetHeight(height int) {
	var _arg0 *C.PangoLayout // out
	var _arg1 C.int          // out

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(layout.Native()))
	_arg1 = C.int(height)

	C.pango_layout_set_height(_arg0, _arg1)
}

// SetIndent sets the width in Pango units to indent each paragraph.
//
// A negative value of @indent will produce a hanging indentation. That is, the
// first line will have the full width, and subsequent lines will be indented by
// the absolute value of @indent.
//
// The indent setting is ignored if layout alignment is set to
// PANGO_ALIGN_CENTER.
func (layout *Layout) SetIndent(indent int) {
	var _arg0 *C.PangoLayout // out
	var _arg1 C.int          // out

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(layout.Native()))
	_arg1 = C.int(indent)

	C.pango_layout_set_indent(_arg0, _arg1)
}

// SetJustify sets whether each complete line should be stretched to fill the
// entire width of the layout.
//
// Stretching is typically done by adding whitespace, but for some scripts (such
// as Arabic), the justification may be done in more complex ways, like
// extending the characters.
//
// Note that this setting is not implemented and so is ignored in Pango older
// than 1.18.
func (layout *Layout) SetJustify(justify bool) {
	var _arg0 *C.PangoLayout // out
	var _arg1 C.gboolean     // out

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(layout.Native()))
	if justify {
		_arg1 = C.TRUE
	}

	C.pango_layout_set_justify(_arg0, _arg1)
}

// SetLineSpacing sets a factor for line spacing.
//
// Typical values are: 0, 1, 1.5, 2. The default values is 0.
//
// If @factor is non-zero, lines are placed so that
//
//    baseline2 = baseline1 + factor * height2
//
// where height2 is the line height of the second line (as determined by the
// font(s)). In this case, the spacing set with
// [method@Pango.Layout.set_spacing] is ignored.
//
// If @factor is zero, spacing is applied as before.
func (layout *Layout) SetLineSpacing(factor float32) {
	var _arg0 *C.PangoLayout // out
	var _arg1 C.float        // out

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(layout.Native()))
	_arg1 = C.float(factor)

	C.pango_layout_set_line_spacing(_arg0, _arg1)
}

// SetMarkup sets the layout text and attribute list from marked-up text.
//
// See Pango Markup (pango_markup.html)). Replaces the current text and
// attribute list.
//
// This is the Same as [method@Pango.Layout.set_markup_with_accel], but the
// markup text isn't scanned for accelerators.
func (layout *Layout) SetMarkup(markup string, length int) {
	var _arg0 *C.PangoLayout // out
	var _arg1 *C.char        // out
	var _arg2 C.int          // out

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(layout.Native()))
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(markup)))
	_arg2 = C.int(length)

	C.pango_layout_set_markup(_arg0, _arg1, _arg2)
}

// SetMarkupWithAccel sets the layout text and attribute list from marked-up
// text.
//
// See Pango Markup (pango_markup.html)). Replaces the current text and
// attribute list.
//
// If @accel_marker is nonzero, the given character will mark the character
// following it as an accelerator. For example, @accel_marker might be an
// ampersand or underscore. All characters marked as an accelerator will receive
// a PANGO_UNDERLINE_LOW attribute, and the first character so marked will be
// returned in @accel_char. Two @accel_marker characters following each other
// produce a single literal @accel_marker character.
func (layout *Layout) SetMarkupWithAccel(markup string, length int, accelMarker uint32) uint32 {
	var _arg0 *C.PangoLayout // out
	var _arg1 *C.char        // out
	var _arg2 C.int          // out
	var _arg3 C.gunichar     // out
	var _arg4 C.gunichar     // in

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(layout.Native()))
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(markup)))
	_arg2 = C.int(length)
	_arg3 = C.gunichar(accelMarker)

	C.pango_layout_set_markup_with_accel(_arg0, _arg1, _arg2, _arg3, &_arg4)

	var _accelChar uint32 // out

	_accelChar = uint32(_arg4)

	return _accelChar
}

// SetSingleParagraphMode sets the single paragraph mode of @layout.
//
// If @setting is true, do not treat newlines and similar characters as
// paragraph separators; instead, keep all text in a single paragraph, and
// display a glyph for paragraph separator characters. Used when you want to
// allow editing of newlines on a single text line.
func (layout *Layout) SetSingleParagraphMode(setting bool) {
	var _arg0 *C.PangoLayout // out
	var _arg1 C.gboolean     // out

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(layout.Native()))
	if setting {
		_arg1 = C.TRUE
	}

	C.pango_layout_set_single_paragraph_mode(_arg0, _arg1)
}

// SetSpacing sets the amount of spacing in Pango unit between the lines of the
// layout.
//
//
// When placing lines with spacing, Pango arranges things so that
//
// line2.top = line1.bottom + spacing
//
// Note: Since 1.44, Pango defaults to using the line height (as determined by
// the font) for placing lines. The @spacing set with this function is only
// taken into account when the line height factor is set to zero with
// [method@Pango.Layout.set_line_spacing].
func (layout *Layout) SetSpacing(spacing int) {
	var _arg0 *C.PangoLayout // out
	var _arg1 C.int          // out

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(layout.Native()))
	_arg1 = C.int(spacing)

	C.pango_layout_set_spacing(_arg0, _arg1)
}

// SetTabs sets the tabs to use for @layout, overriding the default tabs.
//
// By default, tabs are every 8 spaces. If @tabs is nil, the default tabs are
// reinstated. @tabs is copied into the layout; you must free your copy of @tabs
// yourself.
func (layout *Layout) SetTabs(tabs *TabArray) {
	var _arg0 *C.PangoLayout   // out
	var _arg1 *C.PangoTabArray // out

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(layout.Native()))
	_arg1 = (*C.PangoTabArray)(unsafe.Pointer(tabs))

	C.pango_layout_set_tabs(_arg0, _arg1)
}

// SetText sets the text of the layout.
//
// This function validates @text and renders invalid UTF-8 with a placeholder
// glyph.
//
// Note that if you have used [method@Pango.Layout.set_markup] or
// [method@Pango.Layout.set_markup_with_accel] on @layout before, you may want
// to call [method@Pango.Layout.set_attributes] to clear the attributes set on
// the layout from the markup as this function does not clear attributes.
func (layout *Layout) SetText(text string, length int) {
	var _arg0 *C.PangoLayout // out
	var _arg1 *C.char        // out
	var _arg2 C.int          // out

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(layout.Native()))
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(text)))
	_arg2 = C.int(length)

	C.pango_layout_set_text(_arg0, _arg1, _arg2)
}

// SetWidth sets the width to which the lines of the `PangoLayout` should wrap
// or ellipsized.
//
// The default value is -1: no width set.
func (layout *Layout) SetWidth(width int) {
	var _arg0 *C.PangoLayout // out
	var _arg1 C.int          // out

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(layout.Native()))
	_arg1 = C.int(width)

	C.pango_layout_set_width(_arg0, _arg1)
}

// SetWrap sets the wrap mode.
//
// The wrap mode only has effect if a width is set on the layout with
// [method@Pango.Layout.set_width]. To turn off wrapping, set the width to -1.
func (layout *Layout) SetWrap(wrap WrapMode) {
	var _arg0 *C.PangoLayout  // out
	var _arg1 C.PangoWrapMode // out

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(layout.Native()))
	_arg1 = C.PangoWrapMode(wrap)

	C.pango_layout_set_wrap(_arg0, _arg1)
}

// XYToIndex converts from X and Y position within a layout to the byte index to
// the character at that logical position.
//
// If the Y position is not inside the layout, the closest position is chosen
// (the position will be clamped inside the layout). If the X position is not
// within the layout, then the start or the end of the line is chosen as
// described for [method@Pango.LayoutLine.x_to_index]. If either the X or Y
// positions were not inside the layout, then the function returns false; on an
// exact hit, it returns true.
func (layout *Layout) XYToIndex(x int, y int) (index_ int, trailing int, ok bool) {
	var _arg0 *C.PangoLayout // out
	var _arg1 C.int          // out
	var _arg2 C.int          // out
	var _arg3 C.int          // in
	var _arg4 C.int          // in
	var _cret C.gboolean     // in

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(layout.Native()))
	_arg1 = C.int(x)
	_arg2 = C.int(y)

	_cret = C.pango_layout_xy_to_index(_arg0, _arg1, _arg2, &_arg3, &_arg4)

	var _index_ int   // out
	var _trailing int // out
	var _ok bool      // out

	_index_ = int(_arg3)
	_trailing = int(_arg4)
	if _cret != 0 {
		_ok = true
	}

	return _index_, _trailing, _ok
}

// LayoutIter: `PangoLayoutIter` can be used to iterate over the visual extents
// of a `PangoLayout`.
//
// To obtain a `PangoLayoutIter`, use [method@Pango.Layout.get_iter].
//
// The `PangoLayoutIter` structure is opaque, and has no user-visible fields.
type LayoutIter struct {
	native C.PangoLayoutIter
}

func marshalLayoutIter(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return (*LayoutIter)(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (l *LayoutIter) Native() unsafe.Pointer {
	return unsafe.Pointer(&l.native)
}

// AtLastLine determines whether @iter is on the last line of the layout.
func (iter *LayoutIter) AtLastLine() bool {
	var _arg0 *C.PangoLayoutIter // out
	var _cret C.gboolean         // in

	_arg0 = (*C.PangoLayoutIter)(unsafe.Pointer(iter))

	_cret = C.pango_layout_iter_at_last_line(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Copy copies a `PangoLayoutIter`.
func (iter *LayoutIter) Copy() *LayoutIter {
	var _arg0 *C.PangoLayoutIter // out
	var _cret *C.PangoLayoutIter // in

	_arg0 = (*C.PangoLayoutIter)(unsafe.Pointer(iter))

	_cret = C.pango_layout_iter_copy(_arg0)

	var _layoutIter *LayoutIter // out

	_layoutIter = (*LayoutIter)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(_layoutIter, func(v *LayoutIter) {
		C.pango_layout_iter_free((*C.PangoLayoutIter)(unsafe.Pointer(v)))
	})

	return _layoutIter
}

// Free frees an iterator that's no longer in use.
func (iter *LayoutIter) free() {
	var _arg0 *C.PangoLayoutIter // out

	_arg0 = (*C.PangoLayoutIter)(unsafe.Pointer(iter))

	C.pango_layout_iter_free(_arg0)
}

// Baseline gets the Y position of the current line's baseline, in layout
// coordinates (origin at top left of the entire layout).
func (iter *LayoutIter) Baseline() int {
	var _arg0 *C.PangoLayoutIter // out
	var _cret C.int              // in

	_arg0 = (*C.PangoLayoutIter)(unsafe.Pointer(iter))

	_cret = C.pango_layout_iter_get_baseline(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// CharExtents gets the extents of the current character, in layout coordinates
// (origin is the top left of the entire layout). Only logical extents can
// sensibly be obtained for characters; ink extents make sense only down to the
// level of clusters.
func (iter *LayoutIter) CharExtents() Rectangle {
	var _arg0 *C.PangoLayoutIter // out
	var _logicalRect Rectangle

	_arg0 = (*C.PangoLayoutIter)(unsafe.Pointer(iter))

	C.pango_layout_iter_get_char_extents(_arg0, (*C.PangoRectangle)(unsafe.Pointer(&_logicalRect)))

	return _logicalRect
}

// ClusterExtents gets the extents of the current cluster, in layout coordinates
// (origin is the top left of the entire layout).
func (iter *LayoutIter) ClusterExtents() (inkRect Rectangle, logicalRect Rectangle) {
	var _arg0 *C.PangoLayoutIter // out
	var _inkRect Rectangle
	var _logicalRect Rectangle

	_arg0 = (*C.PangoLayoutIter)(unsafe.Pointer(iter))

	C.pango_layout_iter_get_cluster_extents(_arg0, (*C.PangoRectangle)(unsafe.Pointer(&_inkRect)), (*C.PangoRectangle)(unsafe.Pointer(&_logicalRect)))

	return _inkRect, _logicalRect
}

// Index gets the current byte index. Note that iterating forward by char moves
// in visual order, not logical order, so indexes may not be sequential. Also,
// the index may be equal to the length of the text in the layout, if on the nil
// run (see [method@Pango.LayoutIter.get_run]).
func (iter *LayoutIter) Index() int {
	var _arg0 *C.PangoLayoutIter // out
	var _cret C.int              // in

	_arg0 = (*C.PangoLayoutIter)(unsafe.Pointer(iter))

	_cret = C.pango_layout_iter_get_index(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// Layout gets the layout associated with a `PangoLayoutIter`.
func (iter *LayoutIter) Layout() *Layout {
	var _arg0 *C.PangoLayoutIter // out
	var _cret *C.PangoLayout     // in

	_arg0 = (*C.PangoLayoutIter)(unsafe.Pointer(iter))

	_cret = C.pango_layout_iter_get_layout(_arg0)

	var _layout *Layout // out

	_layout = wrapLayout(externglib.Take(unsafe.Pointer(_cret)))

	return _layout
}

// LayoutExtents obtains the extents of the `PangoLayout` being iterated over.
// @ink_rect or @logical_rect can be nil if you aren't interested in them.
func (iter *LayoutIter) LayoutExtents() (inkRect Rectangle, logicalRect Rectangle) {
	var _arg0 *C.PangoLayoutIter // out
	var _inkRect Rectangle
	var _logicalRect Rectangle

	_arg0 = (*C.PangoLayoutIter)(unsafe.Pointer(iter))

	C.pango_layout_iter_get_layout_extents(_arg0, (*C.PangoRectangle)(unsafe.Pointer(&_inkRect)), (*C.PangoRectangle)(unsafe.Pointer(&_logicalRect)))

	return _inkRect, _logicalRect
}

// Line gets the current line.
//
// Use the faster [method@Pango.LayoutIter.get_line_readonly] if you do not plan
// to modify the contents of the line (glyphs, glyph widths, etc.).
func (iter *LayoutIter) Line() *LayoutLine {
	var _arg0 *C.PangoLayoutIter // out
	var _cret *C.PangoLayoutLine // in

	_arg0 = (*C.PangoLayoutIter)(unsafe.Pointer(iter))

	_cret = C.pango_layout_iter_get_line(_arg0)

	var _layoutLine *LayoutLine // out

	_layoutLine = (*LayoutLine)(unsafe.Pointer(_cret))
	C.pango_layout_line_ref(_cret)
	runtime.SetFinalizer(_layoutLine, func(v *LayoutLine) {
		C.pango_layout_line_unref((*C.PangoLayoutLine)(unsafe.Pointer(v)))
	})

	return _layoutLine
}

// LineExtents obtains the extents of the current line. @ink_rect or
// @logical_rect can be nil if you aren't interested in them. Extents are in
// layout coordinates (origin is the top-left corner of the entire
// `PangoLayout`). Thus the extents returned by this function will be the same
// width/height but not at the same x/y as the extents returned from
// [method@Pango.LayoutLine.get_extents].
func (iter *LayoutIter) LineExtents() (inkRect Rectangle, logicalRect Rectangle) {
	var _arg0 *C.PangoLayoutIter // out
	var _inkRect Rectangle
	var _logicalRect Rectangle

	_arg0 = (*C.PangoLayoutIter)(unsafe.Pointer(iter))

	C.pango_layout_iter_get_line_extents(_arg0, (*C.PangoRectangle)(unsafe.Pointer(&_inkRect)), (*C.PangoRectangle)(unsafe.Pointer(&_logicalRect)))

	return _inkRect, _logicalRect
}

// LineReadonly gets the current line for read-only access.
//
// This is a faster alternative to [method@Pango.LayoutIter.get_line], but the
// user is not expected to modify the contents of the line (glyphs, glyph
// widths, etc.).
func (iter *LayoutIter) LineReadonly() *LayoutLine {
	var _arg0 *C.PangoLayoutIter // out
	var _cret *C.PangoLayoutLine // in

	_arg0 = (*C.PangoLayoutIter)(unsafe.Pointer(iter))

	_cret = C.pango_layout_iter_get_line_readonly(_arg0)

	var _layoutLine *LayoutLine // out

	_layoutLine = (*LayoutLine)(unsafe.Pointer(_cret))
	C.pango_layout_line_ref(_cret)
	runtime.SetFinalizer(_layoutLine, func(v *LayoutLine) {
		C.pango_layout_line_unref((*C.PangoLayoutLine)(unsafe.Pointer(v)))
	})

	return _layoutLine
}

// LineYrange divides the vertical space in the `PangoLayout` being iterated
// over between the lines in the layout, and returns the space belonging to the
// current line. A line's range includes the line's logical extents, plus half
// of the spacing above and below the line, if [method@Pango.Layout.set_spacing]
// has been called to set layout spacing. The Y positions are in layout
// coordinates (origin at top left of the entire layout).
//
// Note: Since 1.44, Pango uses line heights for placing lines, and there may be
// gaps between the ranges returned by this function.
func (iter *LayoutIter) LineYrange() (y0 int, y1 int) {
	var _arg0 *C.PangoLayoutIter // out
	var _arg1 C.int              // in
	var _arg2 C.int              // in

	_arg0 = (*C.PangoLayoutIter)(unsafe.Pointer(iter))

	C.pango_layout_iter_get_line_yrange(_arg0, &_arg1, &_arg2)

	var _y0 int // out
	var _y1 int // out

	_y0 = int(_arg1)
	_y1 = int(_arg2)

	return _y0, _y1
}

// RunExtents gets the extents of the current run in layout coordinates (origin
// is the top left of the entire layout).
func (iter *LayoutIter) RunExtents() (inkRect Rectangle, logicalRect Rectangle) {
	var _arg0 *C.PangoLayoutIter // out
	var _inkRect Rectangle
	var _logicalRect Rectangle

	_arg0 = (*C.PangoLayoutIter)(unsafe.Pointer(iter))

	C.pango_layout_iter_get_run_extents(_arg0, (*C.PangoRectangle)(unsafe.Pointer(&_inkRect)), (*C.PangoRectangle)(unsafe.Pointer(&_logicalRect)))

	return _inkRect, _logicalRect
}

// NextChar moves @iter forward to the next character in visual order. If @iter
// was already at the end of the layout, returns false.
func (iter *LayoutIter) NextChar() bool {
	var _arg0 *C.PangoLayoutIter // out
	var _cret C.gboolean         // in

	_arg0 = (*C.PangoLayoutIter)(unsafe.Pointer(iter))

	_cret = C.pango_layout_iter_next_char(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// NextCluster moves @iter forward to the next cluster in visual order. If @iter
// was already at the end of the layout, returns false.
func (iter *LayoutIter) NextCluster() bool {
	var _arg0 *C.PangoLayoutIter // out
	var _cret C.gboolean         // in

	_arg0 = (*C.PangoLayoutIter)(unsafe.Pointer(iter))

	_cret = C.pango_layout_iter_next_cluster(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// NextLine moves @iter forward to the start of the next line. If @iter is
// already on the last line, returns false.
func (iter *LayoutIter) NextLine() bool {
	var _arg0 *C.PangoLayoutIter // out
	var _cret C.gboolean         // in

	_arg0 = (*C.PangoLayoutIter)(unsafe.Pointer(iter))

	_cret = C.pango_layout_iter_next_line(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// NextRun moves @iter forward to the next run in visual order. If @iter was
// already at the end of the layout, returns false.
func (iter *LayoutIter) NextRun() bool {
	var _arg0 *C.PangoLayoutIter // out
	var _cret C.gboolean         // in

	_arg0 = (*C.PangoLayoutIter)(unsafe.Pointer(iter))

	_cret = C.pango_layout_iter_next_run(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// LayoutLine: `PangoLayoutLine` represents one of the lines resulting from
// laying out a paragraph via `PangoLayout`.
//
// `PangoLayoutLine` structures are obtained by calling
// [method@Pango.Layout.get_line] and are only valid until the text, attributes,
// or settings of the parent `PangoLayout` are modified.
type LayoutLine struct {
	native C.PangoLayoutLine
}

func marshalLayoutLine(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return (*LayoutLine)(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (l *LayoutLine) Native() unsafe.Pointer {
	return unsafe.Pointer(&l.native)
}

// Extents computes the logical and ink extents of a layout line. See
// [method@Pango.Font.get_glyph_extents] for details about the interpretation of
// the rectangles.
func (line *LayoutLine) Extents() (inkRect Rectangle, logicalRect Rectangle) {
	var _arg0 *C.PangoLayoutLine // out
	var _inkRect Rectangle
	var _logicalRect Rectangle

	_arg0 = (*C.PangoLayoutLine)(unsafe.Pointer(line))

	C.pango_layout_line_get_extents(_arg0, (*C.PangoRectangle)(unsafe.Pointer(&_inkRect)), (*C.PangoRectangle)(unsafe.Pointer(&_logicalRect)))

	return _inkRect, _logicalRect
}

// Height computes the height of the line, i.e. the distance between this and
// the previous lines baseline.
func (line *LayoutLine) Height() int {
	var _arg0 *C.PangoLayoutLine // out
	var _arg1 C.int              // in

	_arg0 = (*C.PangoLayoutLine)(unsafe.Pointer(line))

	C.pango_layout_line_get_height(_arg0, &_arg1)

	var _height int // out

	_height = int(_arg1)

	return _height
}

// PixelExtents computes the logical and ink extents of @layout_line in device
// units.
//
// This function just calls [method@Pango.LayoutLine.get_extents] followed by
// two [func@extents_to_pixels] calls, rounding @ink_rect and @logical_rect such
// that the rounded rectangles fully contain the unrounded one (that is, passes
// them as first argument to [func@extents_to_pixels]).
func (layoutLine *LayoutLine) PixelExtents() (inkRect Rectangle, logicalRect Rectangle) {
	var _arg0 *C.PangoLayoutLine // out
	var _inkRect Rectangle
	var _logicalRect Rectangle

	_arg0 = (*C.PangoLayoutLine)(unsafe.Pointer(layoutLine))

	C.pango_layout_line_get_pixel_extents(_arg0, (*C.PangoRectangle)(unsafe.Pointer(&_inkRect)), (*C.PangoRectangle)(unsafe.Pointer(&_logicalRect)))

	return _inkRect, _logicalRect
}

// XRanges gets a list of visual ranges corresponding to a given logical range.
// This list is not necessarily minimal - there may be consecutive ranges which
// are adjacent. The ranges will be sorted from left to right. The ranges are
// with respect to the left edge of the entire layout, not with respect to the
// line.
func (line *LayoutLine) XRanges(startIndex int, endIndex int) []int {
	var _arg0 *C.PangoLayoutLine // out
	var _arg1 C.int              // out
	var _arg2 C.int              // out
	var _arg3 *C.int
	var _arg4 C.int // in

	_arg0 = (*C.PangoLayoutLine)(unsafe.Pointer(line))
	_arg1 = C.int(startIndex)
	_arg2 = C.int(endIndex)

	C.pango_layout_line_get_x_ranges(_arg0, _arg1, _arg2, &_arg3, &_arg4)

	var _ranges []int

	defer C.free(unsafe.Pointer(_arg3))
	_ranges = make([]int, _arg4)
	copy(_ranges, unsafe.Slice((*int)(unsafe.Pointer(_arg3)), _arg4))

	return _ranges
}

// IndexToX converts an index within a line to a X position.
func (line *LayoutLine) IndexToX(index_ int, trailing bool) int {
	var _arg0 *C.PangoLayoutLine // out
	var _arg1 C.int              // out
	var _arg2 C.gboolean         // out
	var _arg3 C.int              // in

	_arg0 = (*C.PangoLayoutLine)(unsafe.Pointer(line))
	_arg1 = C.int(index_)
	if trailing {
		_arg2 = C.TRUE
	}

	C.pango_layout_line_index_to_x(_arg0, _arg1, _arg2, &_arg3)

	var _xPos int // out

	_xPos = int(_arg3)

	return _xPos
}

// Ref: increase the reference count of a `PangoLayoutLine` by one.
func (line *LayoutLine) ref() *LayoutLine {
	var _arg0 *C.PangoLayoutLine // out
	var _cret *C.PangoLayoutLine // in

	_arg0 = (*C.PangoLayoutLine)(unsafe.Pointer(line))

	_cret = C.pango_layout_line_ref(_arg0)

	var _layoutLine *LayoutLine // out

	_layoutLine = (*LayoutLine)(unsafe.Pointer(_cret))
	C.pango_layout_line_ref(_cret)
	runtime.SetFinalizer(_layoutLine, func(v *LayoutLine) {
		C.pango_layout_line_unref((*C.PangoLayoutLine)(unsafe.Pointer(v)))
	})

	return _layoutLine
}

// Unref: decrease the reference count of a `PangoLayoutLine` by one. If the
// result is zero, the line and all associated memory will be freed.
func (line *LayoutLine) unref() {
	var _arg0 *C.PangoLayoutLine // out

	_arg0 = (*C.PangoLayoutLine)(unsafe.Pointer(line))

	C.pango_layout_line_unref(_arg0)
}

// XToIndex converts from x offset to the byte index of the corresponding
// character within the text of the layout. If @x_pos is outside the line,
// @index_ and @trailing will point to the very first or very last position in
// the line. This determination is based on the resolved direction of the
// paragraph; for example, if the resolved direction is right-to-left, then an X
// position to the right of the line (after it) results in 0 being stored in
// @index_ and @trailing. An X position to the left of the line results in
// @index_ pointing to the (logical) last grapheme in the line and @trailing
// being set to the number of characters in that grapheme. The reverse is true
// for a left-to-right line.
func (line *LayoutLine) XToIndex(xPos int) (index_ int, trailing int, ok bool) {
	var _arg0 *C.PangoLayoutLine // out
	var _arg1 C.int              // out
	var _arg2 C.int              // in
	var _arg3 C.int              // in
	var _cret C.gboolean         // in

	_arg0 = (*C.PangoLayoutLine)(unsafe.Pointer(line))
	_arg1 = C.int(xPos)

	_cret = C.pango_layout_line_x_to_index(_arg0, _arg1, &_arg2, &_arg3)

	var _index_ int   // out
	var _trailing int // out
	var _ok bool      // out

	_index_ = int(_arg2)
	_trailing = int(_arg3)
	if _cret != 0 {
		_ok = true
	}

	return _index_, _trailing, _ok
}
