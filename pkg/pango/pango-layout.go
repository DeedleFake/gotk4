// Code generated by girgen. DO NOT EDIT.

package pango

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: pango
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <pango/pango.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.pango_alignment_get_type()), F: marshalAlignment},
		{T: externglib.Type(C.pango_ellipsize_mode_get_type()), F: marshalEllipsizeMode},
		{T: externglib.Type(C.pango_wrap_mode_get_type()), F: marshalWrapMode},
		{T: externglib.Type(C.pango_layout_get_type()), F: marshalLayout},
		{T: externglib.Type(C.pango_layout_iter_get_type()), F: marshalLayoutIter},
	})
}

// LayoutRun: a `PangoLayoutRun` represents a single run within a
// `PangoLayoutLine`.
//
// It is simply an alternate name for [struct@Pango.GlyphItem]. See the
// [struct@Pango.GlyphItem] docs for details on the fields.
type LayoutRun = GlyphItem

// Alignment: `PangoAlignment` describes how to align the lines of a
// `PangoLayout` within the available space.
//
// If the `PangoLayout` is set to justify using
// [method@Pango.Layout.set_justify], this only has effect for partial lines.
type Alignment int

const (
	// left: put all available space on the right
	AlignmentLeft Alignment = 0
	// center: center the line within the available space
	AlignmentCenter Alignment = 1
	// right: put all available space on the left
	AlignmentRight Alignment = 2
)

func marshalAlignment(p uintptr) (interface{}, error) {
	return Alignment(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// EllipsizeMode: `PangoEllipsizeMode` describes what sort of ellipsization
// should be applied to text.
//
// In the ellipsization process characters are removed from the text in order to
// make it fit to a given width and replaced with an ellipsis.
type EllipsizeMode int

const (
	// none: no ellipsization
	EllipsizeModeNone EllipsizeMode = 0
	// start: omit characters at the start of the text
	EllipsizeModeStart EllipsizeMode = 1
	// middle: omit characters in the middle of the text
	EllipsizeModeMiddle EllipsizeMode = 2
	// end: omit characters at the end of the text
	EllipsizeModeEnd EllipsizeMode = 3
)

func marshalEllipsizeMode(p uintptr) (interface{}, error) {
	return EllipsizeMode(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// WrapMode: `PangoWrapMode` describes how to wrap the lines of a `PangoLayout`
// to the desired width.
type WrapMode int

const (
	// word: wrap lines at word boundaries.
	WrapModeWord WrapMode = 0
	// char: wrap lines at character boundaries.
	WrapModeChar WrapMode = 1
	// WordChar: wrap lines at word boundaries, but fall back to character
	// boundaries if there is not enough space for a full word.
	WrapModeWordChar WrapMode = 2
)

func marshalWrapMode(p uintptr) (interface{}, error) {
	return WrapMode(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// Layout: a `PangoLayout` structure represents an entire paragraph of text.
//
// While complete access to the layout capabilities of Pango is provided using
// the detailed interfaces for itemization and shaping, using that functionality
// directly involves writing a fairly large amount of code. `PangoLayout`
// provides a high-level driver for formatting entire paragraphs of text at
// once. This includes paragraph-level functionality such as line breaking,
// justification, alignment and ellipsization.
//
// A `PangoLayout is initialized with a `PangoContext`, UTF-8 string and set of
// attributes for that string. Once that is done, the set of formatted lines can
// be extracted from the object, the layout can be rendered, and conversion
// between logical character positions within the layout's text, and the
// physical position of the resulting glyphs can be made.
//
// There are a number of parameters to adjust the formatting of a `PangoLayout`.
// The following image shows adjustable parameters (on the left) and font
// metrics (on the right):
//
// !Pango Layout Parameters (layout.png)
//
// It is possible, as well, to ignore the 2-D setup, and simply treat the
// results of a `PangoLayout` as a list of lines.
type Layout interface {
	gextras.Objector

	// ContextChangedLayout:
	ContextChangedLayout()
	// CopyLayout:
	CopyLayout() Layout
	// Alignment:
	Alignment() Alignment
	// Attributes:
	Attributes() *AttrList
	// AutoDir:
	AutoDir() bool
	// Baseline:
	Baseline() int
	// CharacterCount:
	CharacterCount() int
	// Context:
	Context() Context
	// CursorPos:
	CursorPos(index_ int) (strongPos Rectangle, weakPos Rectangle)
	// Direction:
	Direction(index int) Direction
	// Ellipsize:
	Ellipsize() EllipsizeMode
	// Extents:
	Extents() (inkRect Rectangle, logicalRect Rectangle)
	// FontDescription:
	FontDescription() *FontDescription
	// Height:
	Height() int
	// Indent:
	Indent() int
	// Iter:
	Iter() *LayoutIter
	// Justify:
	Justify() bool
	// Line:
	Line(line int) *LayoutLine
	// LineCount:
	LineCount() int
	// LineReadonly:
	LineReadonly(line int) *LayoutLine
	// LineSpacing:
	LineSpacing() float32
	// LogAttrs:
	LogAttrs() []LogAttr
	// PixelExtents:
	PixelExtents() (inkRect Rectangle, logicalRect Rectangle)
	// PixelSize:
	PixelSize() (width int, height int)
	// Serial:
	Serial() uint
	// SingleParagraphMode:
	SingleParagraphMode() bool
	// Size:
	Size() (width int, height int)
	// Spacing:
	Spacing() int
	// Tabs:
	Tabs() *TabArray
	// Text:
	Text() string
	// UnknownGlyphsCount:
	UnknownGlyphsCount() int
	// Width:
	Width() int
	// Wrap:
	Wrap() WrapMode
	// IndexToLineXLayout:
	IndexToLineXLayout(index_ int, trailing bool) (line int, xPos int)
	// IndexToPosLayout:
	IndexToPosLayout(index_ int) Rectangle
	// IsEllipsizedLayout:
	IsEllipsizedLayout() bool
	// IsWrappedLayout:
	IsWrappedLayout() bool
	// MoveCursorVisuallyLayout:
	MoveCursorVisuallyLayout(strong bool, oldIndex int, oldTrailing int, direction int) (newIndex int, newTrailing int)
	// SetAlignmentLayout:
	SetAlignmentLayout(alignment Alignment)
	// SetAttributesLayout:
	SetAttributesLayout(attrs *AttrList)
	// SetAutoDirLayout:
	SetAutoDirLayout(autoDir bool)
	// SetEllipsizeLayout:
	SetEllipsizeLayout(ellipsize EllipsizeMode)
	// SetFontDescriptionLayout:
	SetFontDescriptionLayout(desc *FontDescription)
	// SetHeightLayout:
	SetHeightLayout(height int)
	// SetIndentLayout:
	SetIndentLayout(indent int)
	// SetJustifyLayout:
	SetJustifyLayout(justify bool)
	// SetLineSpacingLayout:
	SetLineSpacingLayout(factor float32)
	// SetMarkupLayout:
	SetMarkupLayout(markup string, length int)
	// SetMarkupWithAccelLayout:
	SetMarkupWithAccelLayout(markup string, length int, accelMarker uint32) uint32
	// SetSingleParagraphModeLayout:
	SetSingleParagraphModeLayout(setting bool)
	// SetSpacingLayout:
	SetSpacingLayout(spacing int)
	// SetTabsLayout:
	SetTabsLayout(tabs *TabArray)
	// SetTextLayout:
	SetTextLayout(text string, length int)
	// SetWidthLayout:
	SetWidthLayout(width int)
	// SetWrapLayout:
	SetWrapLayout(wrap WrapMode)
	// XYToIndexLayout:
	XYToIndexLayout(x int, y int) (index_ int, trailing int, ok bool)
}

// layout implements the Layout class.
type layout struct {
	gextras.Objector
}

// WrapLayout wraps a GObject to the right type. It is
// primarily used internally.
func WrapLayout(obj *externglib.Object) Layout {
	return layout{
		Objector: obj,
	}
}

func marshalLayout(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapLayout(obj), nil
}

// NewLayout:
func NewLayout(context Context) Layout {
	var _arg1 *C.PangoContext // out
	var _cret *C.PangoLayout  // in

	_arg1 = (*C.PangoContext)(unsafe.Pointer(context.Native()))

	_cret = C.pango_layout_new(_arg1)

	var _layout Layout // out

	_layout = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(Layout)

	return _layout
}

func (l layout) ContextChangedLayout() {
	var _arg0 *C.PangoLayout // out

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(l.Native()))

	C.pango_layout_context_changed(_arg0)
}

func (s layout) CopyLayout() Layout {
	var _arg0 *C.PangoLayout // out
	var _cret *C.PangoLayout // in

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(s.Native()))

	_cret = C.pango_layout_copy(_arg0)

	var _layout Layout // out

	_layout = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(Layout)

	return _layout
}

func (l layout) Alignment() Alignment {
	var _arg0 *C.PangoLayout   // out
	var _cret C.PangoAlignment // in

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(l.Native()))

	_cret = C.pango_layout_get_alignment(_arg0)

	var _alignment Alignment // out

	_alignment = Alignment(_cret)

	return _alignment
}

func (l layout) Attributes() *AttrList {
	var _arg0 *C.PangoLayout   // out
	var _cret *C.PangoAttrList // in

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(l.Native()))

	_cret = C.pango_layout_get_attributes(_arg0)

	var _attrList *AttrList // out

	_attrList = (*AttrList)(unsafe.Pointer(_cret))

	return _attrList
}

func (l layout) AutoDir() bool {
	var _arg0 *C.PangoLayout // out
	var _cret C.gboolean     // in

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(l.Native()))

	_cret = C.pango_layout_get_auto_dir(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (l layout) Baseline() int {
	var _arg0 *C.PangoLayout // out
	var _cret C.int          // in

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(l.Native()))

	_cret = C.pango_layout_get_baseline(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (l layout) CharacterCount() int {
	var _arg0 *C.PangoLayout // out
	var _cret C.gint         // in

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(l.Native()))

	_cret = C.pango_layout_get_character_count(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (l layout) Context() Context {
	var _arg0 *C.PangoLayout  // out
	var _cret *C.PangoContext // in

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(l.Native()))

	_cret = C.pango_layout_get_context(_arg0)

	var _context Context // out

	_context = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Context)

	return _context
}

func (l layout) CursorPos(index_ int) (strongPos Rectangle, weakPos Rectangle) {
	var _arg0 *C.PangoLayout   // out
	var _arg1 C.int            // out
	var _arg2 C.PangoRectangle // in
	var _arg3 C.PangoRectangle // in

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(l.Native()))
	_arg1 = C.int(index_)

	C.pango_layout_get_cursor_pos(_arg0, _arg1, &_arg2, &_arg3)

	var _strongPos Rectangle // out
	var _weakPos Rectangle   // out

	{
		var refTmpIn *C.PangoRectangle
		var refTmpOut *Rectangle

		in0 := &_arg2
		refTmpIn = in0

		refTmpOut = (*Rectangle)(unsafe.Pointer(refTmpIn))

		_strongPos = *refTmpOut
	}
	{
		var refTmpIn *C.PangoRectangle
		var refTmpOut *Rectangle

		in0 := &_arg3
		refTmpIn = in0

		refTmpOut = (*Rectangle)(unsafe.Pointer(refTmpIn))

		_weakPos = *refTmpOut
	}

	return _strongPos, _weakPos
}

func (l layout) Direction(index int) Direction {
	var _arg0 *C.PangoLayout   // out
	var _arg1 C.int            // out
	var _cret C.PangoDirection // in

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(l.Native()))
	_arg1 = C.int(index)

	_cret = C.pango_layout_get_direction(_arg0, _arg1)

	var _direction Direction // out

	_direction = Direction(_cret)

	return _direction
}

func (l layout) Ellipsize() EllipsizeMode {
	var _arg0 *C.PangoLayout       // out
	var _cret C.PangoEllipsizeMode // in

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(l.Native()))

	_cret = C.pango_layout_get_ellipsize(_arg0)

	var _ellipsizeMode EllipsizeMode // out

	_ellipsizeMode = EllipsizeMode(_cret)

	return _ellipsizeMode
}

func (l layout) Extents() (inkRect Rectangle, logicalRect Rectangle) {
	var _arg0 *C.PangoLayout   // out
	var _arg1 C.PangoRectangle // in
	var _arg2 C.PangoRectangle // in

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(l.Native()))

	C.pango_layout_get_extents(_arg0, &_arg1, &_arg2)

	var _inkRect Rectangle     // out
	var _logicalRect Rectangle // out

	{
		var refTmpIn *C.PangoRectangle
		var refTmpOut *Rectangle

		in0 := &_arg1
		refTmpIn = in0

		refTmpOut = (*Rectangle)(unsafe.Pointer(refTmpIn))

		_inkRect = *refTmpOut
	}
	{
		var refTmpIn *C.PangoRectangle
		var refTmpOut *Rectangle

		in0 := &_arg2
		refTmpIn = in0

		refTmpOut = (*Rectangle)(unsafe.Pointer(refTmpIn))

		_logicalRect = *refTmpOut
	}

	return _inkRect, _logicalRect
}

func (l layout) FontDescription() *FontDescription {
	var _arg0 *C.PangoLayout          // out
	var _cret *C.PangoFontDescription // in

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(l.Native()))

	_cret = C.pango_layout_get_font_description(_arg0)

	var _fontDescription *FontDescription // out

	_fontDescription = (*FontDescription)(unsafe.Pointer(_cret))

	return _fontDescription
}

func (l layout) Height() int {
	var _arg0 *C.PangoLayout // out
	var _cret C.int          // in

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(l.Native()))

	_cret = C.pango_layout_get_height(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (l layout) Indent() int {
	var _arg0 *C.PangoLayout // out
	var _cret C.int          // in

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(l.Native()))

	_cret = C.pango_layout_get_indent(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (l layout) Iter() *LayoutIter {
	var _arg0 *C.PangoLayout     // out
	var _cret *C.PangoLayoutIter // in

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(l.Native()))

	_cret = C.pango_layout_get_iter(_arg0)

	var _layoutIter *LayoutIter // out

	_layoutIter = (*LayoutIter)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(&_layoutIter, func(v **LayoutIter) {
		C.free(unsafe.Pointer(v))
	})

	return _layoutIter
}

func (l layout) Justify() bool {
	var _arg0 *C.PangoLayout // out
	var _cret C.gboolean     // in

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(l.Native()))

	_cret = C.pango_layout_get_justify(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (l layout) Line(line int) *LayoutLine {
	var _arg0 *C.PangoLayout     // out
	var _arg1 C.int              // out
	var _cret *C.PangoLayoutLine // in

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(l.Native()))
	_arg1 = C.int(line)

	_cret = C.pango_layout_get_line(_arg0, _arg1)

	var _layoutLine *LayoutLine // out

	_layoutLine = (*LayoutLine)(unsafe.Pointer(_cret))

	return _layoutLine
}

func (l layout) LineCount() int {
	var _arg0 *C.PangoLayout // out
	var _cret C.int          // in

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(l.Native()))

	_cret = C.pango_layout_get_line_count(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (l layout) LineReadonly(line int) *LayoutLine {
	var _arg0 *C.PangoLayout     // out
	var _arg1 C.int              // out
	var _cret *C.PangoLayoutLine // in

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(l.Native()))
	_arg1 = C.int(line)

	_cret = C.pango_layout_get_line_readonly(_arg0, _arg1)

	var _layoutLine *LayoutLine // out

	_layoutLine = (*LayoutLine)(unsafe.Pointer(_cret))

	return _layoutLine
}

func (l layout) LineSpacing() float32 {
	var _arg0 *C.PangoLayout // out
	var _cret C.float        // in

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(l.Native()))

	_cret = C.pango_layout_get_line_spacing(_arg0)

	var _gfloat float32 // out

	_gfloat = float32(_cret)

	return _gfloat
}

func (l layout) LogAttrs() []LogAttr {
	var _arg0 *C.PangoLayout // out
	var _arg1 *C.PangoLogAttr
	var _arg2 C.gint // in

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(l.Native()))

	C.pango_layout_get_log_attrs(_arg0, &_arg1, &_arg2)

	var _attrs []LogAttr

	_attrs = unsafe.Slice((*LogAttr)(unsafe.Pointer(_arg1)), _arg2)
	runtime.SetFinalizer(&_attrs, func(v *[]LogAttr) {
		C.free(unsafe.Pointer(&(*v)[0]))
	})

	return _attrs
}

func (l layout) PixelExtents() (inkRect Rectangle, logicalRect Rectangle) {
	var _arg0 *C.PangoLayout   // out
	var _arg1 C.PangoRectangle // in
	var _arg2 C.PangoRectangle // in

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(l.Native()))

	C.pango_layout_get_pixel_extents(_arg0, &_arg1, &_arg2)

	var _inkRect Rectangle     // out
	var _logicalRect Rectangle // out

	{
		var refTmpIn *C.PangoRectangle
		var refTmpOut *Rectangle

		in0 := &_arg1
		refTmpIn = in0

		refTmpOut = (*Rectangle)(unsafe.Pointer(refTmpIn))

		_inkRect = *refTmpOut
	}
	{
		var refTmpIn *C.PangoRectangle
		var refTmpOut *Rectangle

		in0 := &_arg2
		refTmpIn = in0

		refTmpOut = (*Rectangle)(unsafe.Pointer(refTmpIn))

		_logicalRect = *refTmpOut
	}

	return _inkRect, _logicalRect
}

func (l layout) PixelSize() (width int, height int) {
	var _arg0 *C.PangoLayout // out
	var _arg1 C.int          // in
	var _arg2 C.int          // in

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(l.Native()))

	C.pango_layout_get_pixel_size(_arg0, &_arg1, &_arg2)

	var _width int  // out
	var _height int // out

	_width = int(_arg1)
	_height = int(_arg2)

	return _width, _height
}

func (l layout) Serial() uint {
	var _arg0 *C.PangoLayout // out
	var _cret C.guint        // in

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(l.Native()))

	_cret = C.pango_layout_get_serial(_arg0)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

func (l layout) SingleParagraphMode() bool {
	var _arg0 *C.PangoLayout // out
	var _cret C.gboolean     // in

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(l.Native()))

	_cret = C.pango_layout_get_single_paragraph_mode(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (l layout) Size() (width int, height int) {
	var _arg0 *C.PangoLayout // out
	var _arg1 C.int          // in
	var _arg2 C.int          // in

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(l.Native()))

	C.pango_layout_get_size(_arg0, &_arg1, &_arg2)

	var _width int  // out
	var _height int // out

	_width = int(_arg1)
	_height = int(_arg2)

	return _width, _height
}

func (l layout) Spacing() int {
	var _arg0 *C.PangoLayout // out
	var _cret C.int          // in

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(l.Native()))

	_cret = C.pango_layout_get_spacing(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (l layout) Tabs() *TabArray {
	var _arg0 *C.PangoLayout   // out
	var _cret *C.PangoTabArray // in

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(l.Native()))

	_cret = C.pango_layout_get_tabs(_arg0)

	var _tabArray *TabArray // out

	_tabArray = (*TabArray)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(&_tabArray, func(v **TabArray) {
		C.free(unsafe.Pointer(v))
	})

	return _tabArray
}

func (l layout) Text() string {
	var _arg0 *C.PangoLayout // out
	var _cret *C.char        // in

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(l.Native()))

	_cret = C.pango_layout_get_text(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

func (l layout) UnknownGlyphsCount() int {
	var _arg0 *C.PangoLayout // out
	var _cret C.int          // in

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(l.Native()))

	_cret = C.pango_layout_get_unknown_glyphs_count(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (l layout) Width() int {
	var _arg0 *C.PangoLayout // out
	var _cret C.int          // in

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(l.Native()))

	_cret = C.pango_layout_get_width(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (l layout) Wrap() WrapMode {
	var _arg0 *C.PangoLayout  // out
	var _cret C.PangoWrapMode // in

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(l.Native()))

	_cret = C.pango_layout_get_wrap(_arg0)

	var _wrapMode WrapMode // out

	_wrapMode = WrapMode(_cret)

	return _wrapMode
}

func (l layout) IndexToLineXLayout(index_ int, trailing bool) (line int, xPos int) {
	var _arg0 *C.PangoLayout // out
	var _arg1 C.int          // out
	var _arg2 C.gboolean     // out
	var _arg3 C.int          // in
	var _arg4 C.int          // in

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(l.Native()))
	_arg1 = C.int(index_)
	if trailing {
		_arg2 = C.TRUE
	}

	C.pango_layout_index_to_line_x(_arg0, _arg1, _arg2, &_arg3, &_arg4)

	var _line int // out
	var _xPos int // out

	_line = int(_arg3)
	_xPos = int(_arg4)

	return _line, _xPos
}

func (l layout) IndexToPosLayout(index_ int) Rectangle {
	var _arg0 *C.PangoLayout   // out
	var _arg1 C.int            // out
	var _arg2 C.PangoRectangle // in

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(l.Native()))
	_arg1 = C.int(index_)

	C.pango_layout_index_to_pos(_arg0, _arg1, &_arg2)

	var _pos Rectangle // out

	{
		var refTmpIn *C.PangoRectangle
		var refTmpOut *Rectangle

		in0 := &_arg2
		refTmpIn = in0

		refTmpOut = (*Rectangle)(unsafe.Pointer(refTmpIn))

		_pos = *refTmpOut
	}

	return _pos
}

func (l layout) IsEllipsizedLayout() bool {
	var _arg0 *C.PangoLayout // out
	var _cret C.gboolean     // in

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(l.Native()))

	_cret = C.pango_layout_is_ellipsized(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (l layout) IsWrappedLayout() bool {
	var _arg0 *C.PangoLayout // out
	var _cret C.gboolean     // in

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(l.Native()))

	_cret = C.pango_layout_is_wrapped(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (l layout) MoveCursorVisuallyLayout(strong bool, oldIndex int, oldTrailing int, direction int) (newIndex int, newTrailing int) {
	var _arg0 *C.PangoLayout // out
	var _arg1 C.gboolean     // out
	var _arg2 C.int          // out
	var _arg3 C.int          // out
	var _arg4 C.int          // out
	var _arg5 C.int          // in
	var _arg6 C.int          // in

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(l.Native()))
	if strong {
		_arg1 = C.TRUE
	}
	_arg2 = C.int(oldIndex)
	_arg3 = C.int(oldTrailing)
	_arg4 = C.int(direction)

	C.pango_layout_move_cursor_visually(_arg0, _arg1, _arg2, _arg3, _arg4, &_arg5, &_arg6)

	var _newIndex int    // out
	var _newTrailing int // out

	_newIndex = int(_arg5)
	_newTrailing = int(_arg6)

	return _newIndex, _newTrailing
}

func (l layout) SetAlignmentLayout(alignment Alignment) {
	var _arg0 *C.PangoLayout   // out
	var _arg1 C.PangoAlignment // out

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(l.Native()))
	_arg1 = C.PangoAlignment(alignment)

	C.pango_layout_set_alignment(_arg0, _arg1)
}

func (l layout) SetAttributesLayout(attrs *AttrList) {
	var _arg0 *C.PangoLayout   // out
	var _arg1 *C.PangoAttrList // out

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(l.Native()))
	_arg1 = (*C.PangoAttrList)(unsafe.Pointer(attrs.Native()))

	C.pango_layout_set_attributes(_arg0, _arg1)
}

func (l layout) SetAutoDirLayout(autoDir bool) {
	var _arg0 *C.PangoLayout // out
	var _arg1 C.gboolean     // out

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(l.Native()))
	if autoDir {
		_arg1 = C.TRUE
	}

	C.pango_layout_set_auto_dir(_arg0, _arg1)
}

func (l layout) SetEllipsizeLayout(ellipsize EllipsizeMode) {
	var _arg0 *C.PangoLayout       // out
	var _arg1 C.PangoEllipsizeMode // out

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(l.Native()))
	_arg1 = C.PangoEllipsizeMode(ellipsize)

	C.pango_layout_set_ellipsize(_arg0, _arg1)
}

func (l layout) SetFontDescriptionLayout(desc *FontDescription) {
	var _arg0 *C.PangoLayout          // out
	var _arg1 *C.PangoFontDescription // out

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(l.Native()))
	_arg1 = (*C.PangoFontDescription)(unsafe.Pointer(desc.Native()))

	C.pango_layout_set_font_description(_arg0, _arg1)
}

func (l layout) SetHeightLayout(height int) {
	var _arg0 *C.PangoLayout // out
	var _arg1 C.int          // out

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(l.Native()))
	_arg1 = C.int(height)

	C.pango_layout_set_height(_arg0, _arg1)
}

func (l layout) SetIndentLayout(indent int) {
	var _arg0 *C.PangoLayout // out
	var _arg1 C.int          // out

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(l.Native()))
	_arg1 = C.int(indent)

	C.pango_layout_set_indent(_arg0, _arg1)
}

func (l layout) SetJustifyLayout(justify bool) {
	var _arg0 *C.PangoLayout // out
	var _arg1 C.gboolean     // out

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(l.Native()))
	if justify {
		_arg1 = C.TRUE
	}

	C.pango_layout_set_justify(_arg0, _arg1)
}

func (l layout) SetLineSpacingLayout(factor float32) {
	var _arg0 *C.PangoLayout // out
	var _arg1 C.float        // out

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(l.Native()))
	_arg1 = C.float(factor)

	C.pango_layout_set_line_spacing(_arg0, _arg1)
}

func (l layout) SetMarkupLayout(markup string, length int) {
	var _arg0 *C.PangoLayout // out
	var _arg1 *C.char        // out
	var _arg2 C.int          // out

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(l.Native()))
	_arg1 = (*C.char)(C.CString(markup))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.int(length)

	C.pango_layout_set_markup(_arg0, _arg1, _arg2)
}

func (l layout) SetMarkupWithAccelLayout(markup string, length int, accelMarker uint32) uint32 {
	var _arg0 *C.PangoLayout // out
	var _arg1 *C.char        // out
	var _arg2 C.int          // out
	var _arg3 C.gunichar     // out
	var _arg4 C.gunichar     // in

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(l.Native()))
	_arg1 = (*C.char)(C.CString(markup))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.int(length)
	_arg3 = C.gunichar(accelMarker)

	C.pango_layout_set_markup_with_accel(_arg0, _arg1, _arg2, _arg3, &_arg4)

	var _accelChar uint32 // out

	_accelChar = uint32(_arg4)

	return _accelChar
}

func (l layout) SetSingleParagraphModeLayout(setting bool) {
	var _arg0 *C.PangoLayout // out
	var _arg1 C.gboolean     // out

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(l.Native()))
	if setting {
		_arg1 = C.TRUE
	}

	C.pango_layout_set_single_paragraph_mode(_arg0, _arg1)
}

func (l layout) SetSpacingLayout(spacing int) {
	var _arg0 *C.PangoLayout // out
	var _arg1 C.int          // out

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(l.Native()))
	_arg1 = C.int(spacing)

	C.pango_layout_set_spacing(_arg0, _arg1)
}

func (l layout) SetTabsLayout(tabs *TabArray) {
	var _arg0 *C.PangoLayout   // out
	var _arg1 *C.PangoTabArray // out

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(l.Native()))
	_arg1 = (*C.PangoTabArray)(unsafe.Pointer(tabs.Native()))

	C.pango_layout_set_tabs(_arg0, _arg1)
}

func (l layout) SetTextLayout(text string, length int) {
	var _arg0 *C.PangoLayout // out
	var _arg1 *C.char        // out
	var _arg2 C.int          // out

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(l.Native()))
	_arg1 = (*C.char)(C.CString(text))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.int(length)

	C.pango_layout_set_text(_arg0, _arg1, _arg2)
}

func (l layout) SetWidthLayout(width int) {
	var _arg0 *C.PangoLayout // out
	var _arg1 C.int          // out

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(l.Native()))
	_arg1 = C.int(width)

	C.pango_layout_set_width(_arg0, _arg1)
}

func (l layout) SetWrapLayout(wrap WrapMode) {
	var _arg0 *C.PangoLayout  // out
	var _arg1 C.PangoWrapMode // out

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(l.Native()))
	_arg1 = C.PangoWrapMode(wrap)

	C.pango_layout_set_wrap(_arg0, _arg1)
}

func (l layout) XYToIndexLayout(x int, y int) (index_ int, trailing int, ok bool) {
	var _arg0 *C.PangoLayout // out
	var _arg1 C.int          // out
	var _arg2 C.int          // out
	var _arg3 C.int          // in
	var _arg4 C.int          // in
	var _cret C.gboolean     // in

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(l.Native()))
	_arg1 = C.int(x)
	_arg2 = C.int(y)

	_cret = C.pango_layout_xy_to_index(_arg0, _arg1, _arg2, &_arg3, &_arg4)

	var _index_ int   // out
	var _trailing int // out
	var _ok bool      // out

	_index_ = int(_arg3)
	_trailing = int(_arg4)
	if _cret != 0 {
		_ok = true
	}

	return _index_, _trailing, _ok
}

// LayoutIter: a `PangoLayoutIter` can be used to iterate over the visual
// extents of a `PangoLayout`.
//
// To obtain a `PangoLayoutIter`, use [method@Pango.Layout.get_iter].
//
// The `PangoLayoutIter` structure is opaque, and has no user-visible fields.
type LayoutIter C.PangoLayoutIter

// WrapLayoutIter wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapLayoutIter(ptr unsafe.Pointer) *LayoutIter {
	return (*LayoutIter)(ptr)
}

func marshalLayoutIter(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return (*LayoutIter)(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (l *LayoutIter) Native() unsafe.Pointer {
	return unsafe.Pointer(l)
}

// AtLastLine moves @iter forward to the next run in visual order. If @iter was
// already at the end of the layout, returns false.
func (i *LayoutIter) AtLastLine() bool {
	var _arg0 *C.PangoLayoutIter // out
	var _cret C.gboolean         // in

	_arg0 = (*C.PangoLayoutIter)(unsafe.Pointer(i.Native()))

	_cret = C.pango_layout_iter_at_last_line(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Copy moves @iter forward to the next run in visual order. If @iter was
// already at the end of the layout, returns false.
func (i *LayoutIter) Copy() *LayoutIter {
	var _arg0 *C.PangoLayoutIter // out
	var _cret *C.PangoLayoutIter // in

	_arg0 = (*C.PangoLayoutIter)(unsafe.Pointer(i.Native()))

	_cret = C.pango_layout_iter_copy(_arg0)

	var _layoutIter *LayoutIter // out

	_layoutIter = (*LayoutIter)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(&_layoutIter, func(v **LayoutIter) {
		C.free(unsafe.Pointer(v))
	})

	return _layoutIter
}

// Free moves @iter forward to the next run in visual order. If @iter was
// already at the end of the layout, returns false.
func (i *LayoutIter) Free() {
	var _arg0 *C.PangoLayoutIter // out

	_arg0 = (*C.PangoLayoutIter)(unsafe.Pointer(i.Native()))

	C.pango_layout_iter_free(_arg0)
}

// Baseline moves @iter forward to the next run in visual order. If @iter was
// already at the end of the layout, returns false.
func (i *LayoutIter) Baseline() int {
	var _arg0 *C.PangoLayoutIter // out
	var _cret C.int              // in

	_arg0 = (*C.PangoLayoutIter)(unsafe.Pointer(i.Native()))

	_cret = C.pango_layout_iter_get_baseline(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// CharExtents moves @iter forward to the next run in visual order. If @iter was
// already at the end of the layout, returns false.
func (i *LayoutIter) CharExtents() Rectangle {
	var _arg0 *C.PangoLayoutIter // out
	var _arg1 C.PangoRectangle   // in

	_arg0 = (*C.PangoLayoutIter)(unsafe.Pointer(i.Native()))

	C.pango_layout_iter_get_char_extents(_arg0, &_arg1)

	var _logicalRect Rectangle // out

	{
		var refTmpIn *C.PangoRectangle
		var refTmpOut *Rectangle

		in0 := &_arg1
		refTmpIn = in0

		refTmpOut = (*Rectangle)(unsafe.Pointer(refTmpIn))

		_logicalRect = *refTmpOut
	}

	return _logicalRect
}

// ClusterExtents moves @iter forward to the next run in visual order. If @iter
// was already at the end of the layout, returns false.
func (i *LayoutIter) ClusterExtents() (inkRect Rectangle, logicalRect Rectangle) {
	var _arg0 *C.PangoLayoutIter // out
	var _arg1 C.PangoRectangle   // in
	var _arg2 C.PangoRectangle   // in

	_arg0 = (*C.PangoLayoutIter)(unsafe.Pointer(i.Native()))

	C.pango_layout_iter_get_cluster_extents(_arg0, &_arg1, &_arg2)

	var _inkRect Rectangle     // out
	var _logicalRect Rectangle // out

	{
		var refTmpIn *C.PangoRectangle
		var refTmpOut *Rectangle

		in0 := &_arg1
		refTmpIn = in0

		refTmpOut = (*Rectangle)(unsafe.Pointer(refTmpIn))

		_inkRect = *refTmpOut
	}
	{
		var refTmpIn *C.PangoRectangle
		var refTmpOut *Rectangle

		in0 := &_arg2
		refTmpIn = in0

		refTmpOut = (*Rectangle)(unsafe.Pointer(refTmpIn))

		_logicalRect = *refTmpOut
	}

	return _inkRect, _logicalRect
}

// Index moves @iter forward to the next run in visual order. If @iter was
// already at the end of the layout, returns false.
func (i *LayoutIter) Index() int {
	var _arg0 *C.PangoLayoutIter // out
	var _cret C.int              // in

	_arg0 = (*C.PangoLayoutIter)(unsafe.Pointer(i.Native()))

	_cret = C.pango_layout_iter_get_index(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// Layout moves @iter forward to the next run in visual order. If @iter was
// already at the end of the layout, returns false.
func (i *LayoutIter) Layout() Layout {
	var _arg0 *C.PangoLayoutIter // out
	var _cret *C.PangoLayout     // in

	_arg0 = (*C.PangoLayoutIter)(unsafe.Pointer(i.Native()))

	_cret = C.pango_layout_iter_get_layout(_arg0)

	var _layout Layout // out

	_layout = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Layout)

	return _layout
}

// LayoutExtents moves @iter forward to the next run in visual order. If @iter
// was already at the end of the layout, returns false.
func (i *LayoutIter) LayoutExtents() (inkRect Rectangle, logicalRect Rectangle) {
	var _arg0 *C.PangoLayoutIter // out
	var _arg1 C.PangoRectangle   // in
	var _arg2 C.PangoRectangle   // in

	_arg0 = (*C.PangoLayoutIter)(unsafe.Pointer(i.Native()))

	C.pango_layout_iter_get_layout_extents(_arg0, &_arg1, &_arg2)

	var _inkRect Rectangle     // out
	var _logicalRect Rectangle // out

	{
		var refTmpIn *C.PangoRectangle
		var refTmpOut *Rectangle

		in0 := &_arg1
		refTmpIn = in0

		refTmpOut = (*Rectangle)(unsafe.Pointer(refTmpIn))

		_inkRect = *refTmpOut
	}
	{
		var refTmpIn *C.PangoRectangle
		var refTmpOut *Rectangle

		in0 := &_arg2
		refTmpIn = in0

		refTmpOut = (*Rectangle)(unsafe.Pointer(refTmpIn))

		_logicalRect = *refTmpOut
	}

	return _inkRect, _logicalRect
}

// Line moves @iter forward to the next run in visual order. If @iter was
// already at the end of the layout, returns false.
func (i *LayoutIter) Line() *LayoutLine {
	var _arg0 *C.PangoLayoutIter // out
	var _cret *C.PangoLayoutLine // in

	_arg0 = (*C.PangoLayoutIter)(unsafe.Pointer(i.Native()))

	_cret = C.pango_layout_iter_get_line(_arg0)

	var _layoutLine *LayoutLine // out

	_layoutLine = (*LayoutLine)(unsafe.Pointer(_cret))

	return _layoutLine
}

// LineExtents moves @iter forward to the next run in visual order. If @iter was
// already at the end of the layout, returns false.
func (i *LayoutIter) LineExtents() (inkRect Rectangle, logicalRect Rectangle) {
	var _arg0 *C.PangoLayoutIter // out
	var _arg1 C.PangoRectangle   // in
	var _arg2 C.PangoRectangle   // in

	_arg0 = (*C.PangoLayoutIter)(unsafe.Pointer(i.Native()))

	C.pango_layout_iter_get_line_extents(_arg0, &_arg1, &_arg2)

	var _inkRect Rectangle     // out
	var _logicalRect Rectangle // out

	{
		var refTmpIn *C.PangoRectangle
		var refTmpOut *Rectangle

		in0 := &_arg1
		refTmpIn = in0

		refTmpOut = (*Rectangle)(unsafe.Pointer(refTmpIn))

		_inkRect = *refTmpOut
	}
	{
		var refTmpIn *C.PangoRectangle
		var refTmpOut *Rectangle

		in0 := &_arg2
		refTmpIn = in0

		refTmpOut = (*Rectangle)(unsafe.Pointer(refTmpIn))

		_logicalRect = *refTmpOut
	}

	return _inkRect, _logicalRect
}

// LineReadonly moves @iter forward to the next run in visual order. If @iter
// was already at the end of the layout, returns false.
func (i *LayoutIter) LineReadonly() *LayoutLine {
	var _arg0 *C.PangoLayoutIter // out
	var _cret *C.PangoLayoutLine // in

	_arg0 = (*C.PangoLayoutIter)(unsafe.Pointer(i.Native()))

	_cret = C.pango_layout_iter_get_line_readonly(_arg0)

	var _layoutLine *LayoutLine // out

	_layoutLine = (*LayoutLine)(unsafe.Pointer(_cret))

	return _layoutLine
}

// LineYrange moves @iter forward to the next run in visual order. If @iter was
// already at the end of the layout, returns false.
func (i *LayoutIter) LineYrange() (y0 int, y1 int) {
	var _arg0 *C.PangoLayoutIter // out
	var _arg1 C.int              // in
	var _arg2 C.int              // in

	_arg0 = (*C.PangoLayoutIter)(unsafe.Pointer(i.Native()))

	C.pango_layout_iter_get_line_yrange(_arg0, &_arg1, &_arg2)

	var _y0 int // out
	var _y1 int // out

	_y0 = int(_arg1)
	_y1 = int(_arg2)

	return _y0, _y1
}

// RunExtents moves @iter forward to the next run in visual order. If @iter was
// already at the end of the layout, returns false.
func (i *LayoutIter) RunExtents() (inkRect Rectangle, logicalRect Rectangle) {
	var _arg0 *C.PangoLayoutIter // out
	var _arg1 C.PangoRectangle   // in
	var _arg2 C.PangoRectangle   // in

	_arg0 = (*C.PangoLayoutIter)(unsafe.Pointer(i.Native()))

	C.pango_layout_iter_get_run_extents(_arg0, &_arg1, &_arg2)

	var _inkRect Rectangle     // out
	var _logicalRect Rectangle // out

	{
		var refTmpIn *C.PangoRectangle
		var refTmpOut *Rectangle

		in0 := &_arg1
		refTmpIn = in0

		refTmpOut = (*Rectangle)(unsafe.Pointer(refTmpIn))

		_inkRect = *refTmpOut
	}
	{
		var refTmpIn *C.PangoRectangle
		var refTmpOut *Rectangle

		in0 := &_arg2
		refTmpIn = in0

		refTmpOut = (*Rectangle)(unsafe.Pointer(refTmpIn))

		_logicalRect = *refTmpOut
	}

	return _inkRect, _logicalRect
}

// NextChar moves @iter forward to the next run in visual order. If @iter was
// already at the end of the layout, returns false.
func (i *LayoutIter) NextChar() bool {
	var _arg0 *C.PangoLayoutIter // out
	var _cret C.gboolean         // in

	_arg0 = (*C.PangoLayoutIter)(unsafe.Pointer(i.Native()))

	_cret = C.pango_layout_iter_next_char(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// NextCluster moves @iter forward to the next run in visual order. If @iter was
// already at the end of the layout, returns false.
func (i *LayoutIter) NextCluster() bool {
	var _arg0 *C.PangoLayoutIter // out
	var _cret C.gboolean         // in

	_arg0 = (*C.PangoLayoutIter)(unsafe.Pointer(i.Native()))

	_cret = C.pango_layout_iter_next_cluster(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// NextLine moves @iter forward to the next run in visual order. If @iter was
// already at the end of the layout, returns false.
func (i *LayoutIter) NextLine() bool {
	var _arg0 *C.PangoLayoutIter // out
	var _cret C.gboolean         // in

	_arg0 = (*C.PangoLayoutIter)(unsafe.Pointer(i.Native()))

	_cret = C.pango_layout_iter_next_line(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// NextRun moves @iter forward to the next run in visual order. If @iter was
// already at the end of the layout, returns false.
func (i *LayoutIter) NextRun() bool {
	var _arg0 *C.PangoLayoutIter // out
	var _cret C.gboolean         // in

	_arg0 = (*C.PangoLayoutIter)(unsafe.Pointer(i.Native()))

	_cret = C.pango_layout_iter_next_run(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}
