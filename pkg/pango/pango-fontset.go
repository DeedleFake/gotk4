// Code generated by girgen. DO NOT EDIT.

package pango

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: glib-2.0 pango
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <pango/pango.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.pango_fontset_get_type()), F: marshalFontset},
		{T: externglib.Type(C.pango_fontset_simple_get_type()), F: marshalFontsetSimple},
	})
}

// Fontset: a `PangoFontset` represents a set of `PangoFont` to use when
// rendering text.
//
// A `PAngoFontset` is the result of resolving a `PangoFontDescription` against
// a particular `PangoContext`. It has operations for finding the component font
// for a particular Unicode character, and for finding a composite set of
// metrics for the entire fontset.
type Fontset interface {
	gextras.Objector

	// Font returns the font in the fontset that contains the best glyph for a
	// Unicode character.
	Font(wc uint) Font
	// Metrics: get overall metric information for the fonts in the fontset.
	Metrics() *FontMetrics
}

// fontset implements the Fontset class.
type fontset struct {
	gextras.Objector
}

var _ Fontset = (*fontset)(nil)

// WrapFontset wraps a GObject to the right type. It is
// primarily used internally.
func WrapFontset(obj *externglib.Object) Fontset {
	return fontset{
		Objector: obj,
	}
}

func marshalFontset(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapFontset(obj), nil
}

// Font returns the font in the fontset that contains the best glyph for a
// Unicode character.
func (f fontset) Font(wc uint) Font {
	var _arg0 *C.PangoFontset // out
	var _arg1 C.guint         // out
	var _cret *C.PangoFont    // in

	_arg0 = (*C.PangoFontset)(unsafe.Pointer(f.Native()))
	_arg1 = (C.guint)(wc)

	_cret = C.pango_fontset_get_font(_arg0, _arg1)

	var _font Font // out

	_font = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret.Native()))).(Font)

	return _font
}

// Metrics: get overall metric information for the fonts in the fontset.
func (f fontset) Metrics() *FontMetrics {
	var _arg0 *C.PangoFontset     // out
	var _cret *C.PangoFontMetrics // in

	_arg0 = (*C.PangoFontset)(unsafe.Pointer(f.Native()))

	_cret = C.pango_fontset_get_metrics(_arg0)

	var _fontMetrics *FontMetrics // out

	_fontMetrics = WrapFontMetrics(unsafe.Pointer(_cret))
	runtime.SetFinalizer(_fontMetrics, func(v *FontMetrics) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return _fontMetrics
}

// FontsetSimple: `PangoFontsetSimple` is a implementation of the abstract
// `PangoFontset` base class as an array of fonts.
//
// When creating a `PangoFontsetSimple`, you have to provide the array of fonts
// that make up the fontset.
type FontsetSimple interface {
	Fontset

	// Append adds a font to the fontset.
	Append(font Font)
	// Size returns the number of fonts in the fontset.
	Size() int
}

// fontsetSimple implements the FontsetSimple class.
type fontsetSimple struct {
	Fontset
}

var _ FontsetSimple = (*fontsetSimple)(nil)

// WrapFontsetSimple wraps a GObject to the right type. It is
// primarily used internally.
func WrapFontsetSimple(obj *externglib.Object) FontsetSimple {
	return fontsetSimple{
		Fontset: WrapFontset(obj),
	}
}

func marshalFontsetSimple(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapFontsetSimple(obj), nil
}

// NewFontsetSimple constructs a class FontsetSimple.
func NewFontsetSimple(language *Language) FontsetSimple {
	var _arg1 *C.PangoLanguage     // out
	var _cret C.PangoFontsetSimple // in

	_arg1 = (*C.PangoLanguage)(unsafe.Pointer(language.Native()))

	_cret = C.pango_fontset_simple_new(_arg1)

	var _fontsetSimple FontsetSimple // out

	_fontsetSimple = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret.Native()))).(FontsetSimple)

	return _fontsetSimple
}

// Append adds a font to the fontset.
func (f fontsetSimple) Append(font Font) {
	var _arg0 *C.PangoFontsetSimple // out
	var _arg1 *C.PangoFont          // out

	_arg0 = (*C.PangoFontsetSimple)(unsafe.Pointer(f.Native()))
	_arg1 = (*C.PangoFont)(unsafe.Pointer(font.Native()))

	C.pango_fontset_simple_append(_arg0, _arg1)
}

// Size returns the number of fonts in the fontset.
func (f fontsetSimple) Size() int {
	var _arg0 *C.PangoFontsetSimple // out
	var _cret C.int                 // in

	_arg0 = (*C.PangoFontsetSimple)(unsafe.Pointer(f.Native()))

	_cret = C.pango_fontset_simple_size(_arg0)

	var _gint int // out

	_gint = (int)(_cret)

	return _gint
}
