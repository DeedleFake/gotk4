// Code generated by girgen. DO NOT EDIT.

package pango

import (
	"unsafe"

	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: glib-2.0 pango
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <pango/pango.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.pango_glyph_item_get_type()), F: marshalGlyphItem},
		{T: externglib.Type(C.pango_glyph_item_iter_get_type()), F: marshalGlyphItemIter},
	})
}

// GlyphItem: a `PangoGlyphItem` is a pair of a `PangoItem` and the glyphs
// resulting from shaping the items text.
//
// As an example of the usage of `PangoGlyphItem`, the results of shaping text
// with `PangoLayout` is a list of `PangoLayoutLine`, each of which contains a
// list of `PangoGlyphItem`.
type GlyphItem struct {
	native C.PangoGlyphItem
}

// WrapGlyphItem wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapGlyphItem(ptr unsafe.Pointer) *GlyphItem {
	if ptr == nil {
		return nil
	}

	return (*GlyphItem)(ptr)
}

func marshalGlyphItem(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapGlyphItem(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (g *GlyphItem) Native() unsafe.Pointer {
	return unsafe.Pointer(&g.native)
}

// Free frees a `PangoGlyphItem` and resources to which it points.
func (g *GlyphItem) Free() {
	var _arg0 *C.PangoGlyphItem // out

	_arg0 = (*C.PangoGlyphItem)(unsafe.Pointer(g.Native()))

	C.pango_glyph_item_free(_arg0)
}

// GlyphItemIter: a `PangoGlyphItemIter` is an iterator over the clusters in a
// `PangoGlyphItem`.
//
// The *forward direction* of the iterator is the logical direction of text.
// That is, with increasing @start_index and @start_char values. If @glyph_item
// is right-to-left (that is, if `glyph_item->item->analysis.level` is odd),
// then @start_glyph decreases as the iterator moves forward. Moreover, in
// right-to-left cases, @start_glyph is greater than @end_glyph.
//
// An iterator should be initialized using either
// pango_glyph_item_iter_init_start() or pango_glyph_item_iter_init_end(), for
// forward and backward iteration respectively, and walked over using any
// desired mixture of pango_glyph_item_iter_next_cluster() and
// pango_glyph_item_iter_prev_cluster().
//
// A common idiom for doing a forward iteration over the clusters is:
//
// “` PangoGlyphItemIter cluster_iter; gboolean have_cluster;
//
// for (have_cluster = pango_glyph_item_iter_init_start (&cluster_iter,
// glyph_item, text); have_cluster; have_cluster =
// pango_glyph_item_iter_next_cluster (&cluster_iter)) { ... } “`
//
// Note that @text is the start of the text for layout, which is then indexed by
// `glyph_item->item->offset` to get to the text of @glyph_item. The
// @start_index and @end_index values can directly index into @text. The
// @start_glyph, @end_glyph, @start_char, and @end_char values however are
// zero-based for the @glyph_item. For each cluster, the item pointed at by the
// start variables is included in the cluster while the one pointed at by end
// variables is not.
//
// None of the members of a `PangoGlyphItemIter` should be modified manually.
type GlyphItemIter struct {
	native C.PangoGlyphItemIter
}

// WrapGlyphItemIter wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapGlyphItemIter(ptr unsafe.Pointer) *GlyphItemIter {
	if ptr == nil {
		return nil
	}

	return (*GlyphItemIter)(ptr)
}

func marshalGlyphItemIter(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapGlyphItemIter(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (g *GlyphItemIter) Native() unsafe.Pointer {
	return unsafe.Pointer(&g.native)
}

// Text gets the field inside the struct.
func (g *GlyphItemIter) Text() string {
	var v string // out
	v = C.GoString(g.native.text)
	return v
}

// StartGlyph gets the field inside the struct.
func (g *GlyphItemIter) StartGlyph() int {
	var v int // out
	v = (int)(g.native.start_glyph)
	return v
}

// StartIndex gets the field inside the struct.
func (g *GlyphItemIter) StartIndex() int {
	var v int // out
	v = (int)(g.native.start_index)
	return v
}

// StartChar gets the field inside the struct.
func (g *GlyphItemIter) StartChar() int {
	var v int // out
	v = (int)(g.native.start_char)
	return v
}

// EndGlyph gets the field inside the struct.
func (g *GlyphItemIter) EndGlyph() int {
	var v int // out
	v = (int)(g.native.end_glyph)
	return v
}

// EndIndex gets the field inside the struct.
func (g *GlyphItemIter) EndIndex() int {
	var v int // out
	v = (int)(g.native.end_index)
	return v
}

// EndChar gets the field inside the struct.
func (g *GlyphItemIter) EndChar() int {
	var v int // out
	v = (int)(g.native.end_char)
	return v
}

// Free frees a `PangoGlyphItem`Iter.
func (i *GlyphItemIter) Free() {
	var _arg0 *C.PangoGlyphItemIter // out

	_arg0 = (*C.PangoGlyphItemIter)(unsafe.Pointer(i.Native()))

	C.pango_glyph_item_iter_free(_arg0)
}

// InitEnd initializes a `PangoGlyphItemIter` structure to point to the last
// cluster in a glyph item.
//
// See `PangoGlyphItemIter` for details of cluster orders.
func (i *GlyphItemIter) InitEnd(glyphItem *GlyphItem, text string) bool {
	var _arg0 *C.PangoGlyphItemIter // out
	var _arg1 *C.PangoGlyphItem     // out
	var _arg2 *C.char               // out

	_arg0 = (*C.PangoGlyphItemIter)(unsafe.Pointer(i.Native()))
	_arg1 = (*C.PangoGlyphItem)(unsafe.Pointer(glyphItem.Native()))
	_arg2 = (*C.char)(C.CString(text))
	defer C.free(unsafe.Pointer(_arg2))

	var _cret C.gboolean // in

	_cret = C.pango_glyph_item_iter_init_end(_arg0, _arg1, _arg2)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// InitStart initializes a `PangoGlyphItemIter` structure to point to the first
// cluster in a glyph item.
//
// See `PangoGlyphItemIter` for details of cluster orders.
func (i *GlyphItemIter) InitStart(glyphItem *GlyphItem, text string) bool {
	var _arg0 *C.PangoGlyphItemIter // out
	var _arg1 *C.PangoGlyphItem     // out
	var _arg2 *C.char               // out

	_arg0 = (*C.PangoGlyphItemIter)(unsafe.Pointer(i.Native()))
	_arg1 = (*C.PangoGlyphItem)(unsafe.Pointer(glyphItem.Native()))
	_arg2 = (*C.char)(C.CString(text))
	defer C.free(unsafe.Pointer(_arg2))

	var _cret C.gboolean // in

	_cret = C.pango_glyph_item_iter_init_start(_arg0, _arg1, _arg2)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// NextCluster advances the iterator to the next cluster in the glyph item.
//
// See `PangoGlyphItemIter` for details of cluster orders.
func (i *GlyphItemIter) NextCluster() bool {
	var _arg0 *C.PangoGlyphItemIter // out

	_arg0 = (*C.PangoGlyphItemIter)(unsafe.Pointer(i.Native()))

	var _cret C.gboolean // in

	_cret = C.pango_glyph_item_iter_next_cluster(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// PrevCluster moves the iterator to the preceding cluster in the glyph item.
// See `PangoGlyphItemIter` for details of cluster orders.
func (i *GlyphItemIter) PrevCluster() bool {
	var _arg0 *C.PangoGlyphItemIter // out

	_arg0 = (*C.PangoGlyphItemIter)(unsafe.Pointer(i.Native()))

	var _cret C.gboolean // in

	_cret = C.pango_glyph_item_iter_prev_cluster(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}
