// Code generated by girgen. DO NOT EDIT.

package pango

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <pango/pango.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.pango_font_map_get_type()), F: marshalFontMap},
	})
}

// FontMap: a `PangoFontMap` represents the set of fonts available for a
// particular rendering system.
//
// This is a virtual object with implementations being specific to particular
// rendering systems.
type FontMap interface {
	gextras.Objector

	// Changed forces a change in the context, which will cause any
	// `PangoContext` using this fontmap to change.
	//
	// This function is only useful when implementing a new backend for Pango,
	// something applications won't do. Backends should call this function if
	// they have attached extra data to the context and such data is changed.
	Changed()
	// CreateContext creates a `PangoContext` connected to @fontmap.
	//
	// This is equivalent to [ctor@Pango.Context.new] followed by
	// [method@Pango.Context.set_font_map].
	//
	// If you are using Pango as part of a higher-level system, that system may
	// have it's own way of create a `PangoContext`. For instance, the GTK
	// toolkit has, among others, gtk_widget_get_pango_context(). Use those
	// instead.
	CreateContext() Context
	// Family gets a font family by name.
	Family(name string) FontFamily
	// Serial returns the current serial number of @fontmap.
	//
	// The serial number is initialized to an small number larger than zero when
	// a new fontmap is created and is increased whenever the fontmap is
	// changed. It may wrap, but will never have the value 0. Since it can wrap,
	// never compare it with "less than", always use "not equals".
	//
	// The fontmap can only be changed using backend-specific API, like changing
	// fontmap resolution.
	//
	// This can be used to automatically detect changes to a `PangoFontMap`,
	// like in `PangoContext`.
	Serial() uint
	// ListFamilies: list all families for a fontmap.
	ListFamilies()
	// LoadFont: load the font in the fontmap that is the closest match for
	// @desc.
	LoadFont(context Context, desc *FontDescription) Font
	// LoadFontset: load a set of fonts in the fontmap that can be used to
	// render a font matching @desc.
	LoadFontset(context Context, desc *FontDescription, language *Language) Fontset
}

// fontMap implements the FontMap interface.
type fontMap struct {
	gextras.Objector
}

var _ FontMap = (*fontMap)(nil)

// WrapFontMap wraps a GObject to the right type. It is
// primarily used internally.
func WrapFontMap(obj *externglib.Object) FontMap {
	return FontMap{
		Objector: obj,
	}
}

func marshalFontMap(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapFontMap(obj), nil
}

// Changed forces a change in the context, which will cause any
// `PangoContext` using this fontmap to change.
//
// This function is only useful when implementing a new backend for Pango,
// something applications won't do. Backends should call this function if
// they have attached extra data to the context and such data is changed.
func (f fontMap) Changed() {
	var arg0 *C.PangoFontMap

	arg0 = (*C.PangoFontMap)(unsafe.Pointer(f.Native()))

	C.pango_font_map_changed(arg0)
}

// CreateContext creates a `PangoContext` connected to @fontmap.
//
// This is equivalent to [ctor@Pango.Context.new] followed by
// [method@Pango.Context.set_font_map].
//
// If you are using Pango as part of a higher-level system, that system may
// have it's own way of create a `PangoContext`. For instance, the GTK
// toolkit has, among others, gtk_widget_get_pango_context(). Use those
// instead.
func (f fontMap) CreateContext() Context {
	var arg0 *C.PangoFontMap

	arg0 = (*C.PangoFontMap)(unsafe.Pointer(f.Native()))

	var cret *C.PangoContext

	cret = C.pango_font_map_create_context(arg0)

	var context Context

	context = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(cret.Native()))).(Context)

	return context
}

// Family gets a font family by name.
func (f fontMap) Family(name string) FontFamily {
	var arg0 *C.PangoFontMap
	var arg1 *C.char

	arg0 = (*C.PangoFontMap)(unsafe.Pointer(f.Native()))
	arg1 = (*C.char)(C.CString(name))
	defer C.free(unsafe.Pointer(arg1))

	var cret *C.PangoFontFamily

	cret = C.pango_font_map_get_family(arg0, arg1)

	var fontFamily FontFamily

	fontFamily = gextras.CastObject(externglib.Take(unsafe.Pointer(cret.Native()))).(FontFamily)

	return fontFamily
}

// Serial returns the current serial number of @fontmap.
//
// The serial number is initialized to an small number larger than zero when
// a new fontmap is created and is increased whenever the fontmap is
// changed. It may wrap, but will never have the value 0. Since it can wrap,
// never compare it with "less than", always use "not equals".
//
// The fontmap can only be changed using backend-specific API, like changing
// fontmap resolution.
//
// This can be used to automatically detect changes to a `PangoFontMap`,
// like in `PangoContext`.
func (f fontMap) Serial() uint {
	var arg0 *C.PangoFontMap

	arg0 = (*C.PangoFontMap)(unsafe.Pointer(f.Native()))

	var cret C.guint

	cret = C.pango_font_map_get_serial(arg0)

	var guint uint

	guint = (uint)(cret)

	return guint
}

// ListFamilies: list all families for a fontmap.
func (f fontMap) ListFamilies() {
	var arg0 *C.PangoFontMap

	arg0 = (*C.PangoFontMap)(unsafe.Pointer(f.Native()))

	C.pango_font_map_list_families(arg0)

	return
}

// LoadFont: load the font in the fontmap that is the closest match for
// @desc.
func (f fontMap) LoadFont(context Context, desc *FontDescription) Font {
	var arg0 *C.PangoFontMap
	var arg1 *C.PangoContext
	var arg2 *C.PangoFontDescription

	arg0 = (*C.PangoFontMap)(unsafe.Pointer(f.Native()))
	arg1 = (*C.PangoContext)(unsafe.Pointer(context.Native()))
	arg2 = (*C.PangoFontDescription)(unsafe.Pointer(desc.Native()))

	var cret *C.PangoFont

	cret = C.pango_font_map_load_font(arg0, arg1, arg2)

	var font Font

	font = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(cret.Native()))).(Font)

	return font
}

// LoadFontset: load a set of fonts in the fontmap that can be used to
// render a font matching @desc.
func (f fontMap) LoadFontset(context Context, desc *FontDescription, language *Language) Fontset {
	var arg0 *C.PangoFontMap
	var arg1 *C.PangoContext
	var arg2 *C.PangoFontDescription
	var arg3 *C.PangoLanguage

	arg0 = (*C.PangoFontMap)(unsafe.Pointer(f.Native()))
	arg1 = (*C.PangoContext)(unsafe.Pointer(context.Native()))
	arg2 = (*C.PangoFontDescription)(unsafe.Pointer(desc.Native()))
	arg3 = (*C.PangoLanguage)(unsafe.Pointer(language.Native()))

	var cret *C.PangoFontset

	cret = C.pango_font_map_load_fontset(arg0, arg1, arg2, arg3)

	var fontset Fontset

	fontset = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(cret.Native()))).(Fontset)

	return fontset
}
