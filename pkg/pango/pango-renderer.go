// Code generated by girgen. DO NOT EDIT.

package pango

import (
	"unsafe"

	"github.com/diamondburned/gotk4/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: pango
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <pango/pango.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.pango_render_part_get_type()), F: marshalRenderPart},
		{T: externglib.Type(C.pango_renderer_get_type()), F: marshalRenderer},
	})
}

// RenderPart defines different items to render for such purposes as setting
// colors.
type RenderPart int

const (
	// foreground: the text itself
	RenderPartForeground RenderPart = 0
	// background: the area behind the text
	RenderPartBackground RenderPart = 1
	// underline: underlines
	RenderPartUnderline RenderPart = 2
	// strikethrough: strikethrough lines
	RenderPartStrikethrough RenderPart = 3
	// overline: overlines
	RenderPartOverline RenderPart = 4
)

func marshalRenderPart(p uintptr) (interface{}, error) {
	return RenderPart(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// Renderer: `PangoRenderer` is a base class for objects that can render text
// provided as `PangoGlyphString` or `PangoLayout`.
//
// By subclassing `PangoRenderer` and overriding operations such as @draw_glyphs
// and @draw_rectangle, renderers for particular font backends and destinations
// can be created.
type Renderer interface {
	gextras.Objector

	// ActivateRenderer:
	ActivateRenderer()
	// DeactivateRenderer:
	DeactivateRenderer()
	// DrawErrorUnderlineRenderer:
	DrawErrorUnderlineRenderer(x int, y int, width int, height int)
	// DrawGlyphItemRenderer:
	DrawGlyphItemRenderer(text string, glyphItem *GlyphItem, x int, y int)
	// DrawGlyphsRenderer:
	DrawGlyphsRenderer(font Font, glyphs *GlyphString, x int, y int)
	// DrawLayoutRenderer:
	DrawLayoutRenderer(layout Layout, x int, y int)
	// DrawLayoutLineRenderer:
	DrawLayoutLineRenderer(line *LayoutLine, x int, y int)
	// DrawRectangleRenderer:
	DrawRectangleRenderer(part RenderPart, x int, y int, width int, height int)
	// DrawTrapezoidRenderer:
	DrawTrapezoidRenderer(part RenderPart, y1 float64, x11 float64, x21 float64, y2 float64, x12 float64, x22 float64)
	// Alpha:
	Alpha(part RenderPart) uint16
	// Color:
	Color(part RenderPart) *Color
	// Layout:
	Layout() Layout
	// LayoutLine:
	LayoutLine() *LayoutLine
	// Matrix:
	Matrix() *Matrix
	// PartChangedRenderer:
	PartChangedRenderer(part RenderPart)
	// SetAlphaRenderer:
	SetAlphaRenderer(part RenderPart, alpha uint16)
	// SetColorRenderer:
	SetColorRenderer(part RenderPart, color *Color)
	// SetMatrixRenderer:
	SetMatrixRenderer(matrix *Matrix)
}

// renderer implements the Renderer class.
type renderer struct {
	gextras.Objector
}

// WrapRenderer wraps a GObject to the right type. It is
// primarily used internally.
func WrapRenderer(obj *externglib.Object) Renderer {
	return renderer{
		Objector: obj,
	}
}

func marshalRenderer(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapRenderer(obj), nil
}

func (r renderer) ActivateRenderer() {
	var _arg0 *C.PangoRenderer // out

	_arg0 = (*C.PangoRenderer)(unsafe.Pointer(r.Native()))

	C.pango_renderer_activate(_arg0)
}

func (r renderer) DeactivateRenderer() {
	var _arg0 *C.PangoRenderer // out

	_arg0 = (*C.PangoRenderer)(unsafe.Pointer(r.Native()))

	C.pango_renderer_deactivate(_arg0)
}

func (r renderer) DrawErrorUnderlineRenderer(x int, y int, width int, height int) {
	var _arg0 *C.PangoRenderer // out
	var _arg1 C.int            // out
	var _arg2 C.int            // out
	var _arg3 C.int            // out
	var _arg4 C.int            // out

	_arg0 = (*C.PangoRenderer)(unsafe.Pointer(r.Native()))
	_arg1 = C.int(x)
	_arg2 = C.int(y)
	_arg3 = C.int(width)
	_arg4 = C.int(height)

	C.pango_renderer_draw_error_underline(_arg0, _arg1, _arg2, _arg3, _arg4)
}

func (r renderer) DrawGlyphItemRenderer(text string, glyphItem *GlyphItem, x int, y int) {
	var _arg0 *C.PangoRenderer  // out
	var _arg1 *C.char           // out
	var _arg2 *C.PangoGlyphItem // out
	var _arg3 C.int             // out
	var _arg4 C.int             // out

	_arg0 = (*C.PangoRenderer)(unsafe.Pointer(r.Native()))
	_arg1 = (*C.char)(C.CString(text))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.PangoGlyphItem)(unsafe.Pointer(glyphItem.Native()))
	_arg3 = C.int(x)
	_arg4 = C.int(y)

	C.pango_renderer_draw_glyph_item(_arg0, _arg1, _arg2, _arg3, _arg4)
}

func (r renderer) DrawGlyphsRenderer(font Font, glyphs *GlyphString, x int, y int) {
	var _arg0 *C.PangoRenderer    // out
	var _arg1 *C.PangoFont        // out
	var _arg2 *C.PangoGlyphString // out
	var _arg3 C.int               // out
	var _arg4 C.int               // out

	_arg0 = (*C.PangoRenderer)(unsafe.Pointer(r.Native()))
	_arg1 = (*C.PangoFont)(unsafe.Pointer(font.Native()))
	_arg2 = (*C.PangoGlyphString)(unsafe.Pointer(glyphs.Native()))
	_arg3 = C.int(x)
	_arg4 = C.int(y)

	C.pango_renderer_draw_glyphs(_arg0, _arg1, _arg2, _arg3, _arg4)
}

func (r renderer) DrawLayoutRenderer(layout Layout, x int, y int) {
	var _arg0 *C.PangoRenderer // out
	var _arg1 *C.PangoLayout   // out
	var _arg2 C.int            // out
	var _arg3 C.int            // out

	_arg0 = (*C.PangoRenderer)(unsafe.Pointer(r.Native()))
	_arg1 = (*C.PangoLayout)(unsafe.Pointer(layout.Native()))
	_arg2 = C.int(x)
	_arg3 = C.int(y)

	C.pango_renderer_draw_layout(_arg0, _arg1, _arg2, _arg3)
}

func (r renderer) DrawLayoutLineRenderer(line *LayoutLine, x int, y int) {
	var _arg0 *C.PangoRenderer   // out
	var _arg1 *C.PangoLayoutLine // out
	var _arg2 C.int              // out
	var _arg3 C.int              // out

	_arg0 = (*C.PangoRenderer)(unsafe.Pointer(r.Native()))
	_arg1 = (*C.PangoLayoutLine)(unsafe.Pointer(line.Native()))
	_arg2 = C.int(x)
	_arg3 = C.int(y)

	C.pango_renderer_draw_layout_line(_arg0, _arg1, _arg2, _arg3)
}

func (r renderer) DrawRectangleRenderer(part RenderPart, x int, y int, width int, height int) {
	var _arg0 *C.PangoRenderer  // out
	var _arg1 C.PangoRenderPart // out
	var _arg2 C.int             // out
	var _arg3 C.int             // out
	var _arg4 C.int             // out
	var _arg5 C.int             // out

	_arg0 = (*C.PangoRenderer)(unsafe.Pointer(r.Native()))
	_arg1 = C.PangoRenderPart(part)
	_arg2 = C.int(x)
	_arg3 = C.int(y)
	_arg4 = C.int(width)
	_arg5 = C.int(height)

	C.pango_renderer_draw_rectangle(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
}

func (r renderer) DrawTrapezoidRenderer(part RenderPart, y1 float64, x11 float64, x21 float64, y2 float64, x12 float64, x22 float64) {
	var _arg0 *C.PangoRenderer  // out
	var _arg1 C.PangoRenderPart // out
	var _arg2 C.double          // out
	var _arg3 C.double          // out
	var _arg4 C.double          // out
	var _arg5 C.double          // out
	var _arg6 C.double          // out
	var _arg7 C.double          // out

	_arg0 = (*C.PangoRenderer)(unsafe.Pointer(r.Native()))
	_arg1 = C.PangoRenderPart(part)
	_arg2 = C.double(y1)
	_arg3 = C.double(x11)
	_arg4 = C.double(x21)
	_arg5 = C.double(y2)
	_arg6 = C.double(x12)
	_arg7 = C.double(x22)

	C.pango_renderer_draw_trapezoid(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7)
}

func (r renderer) Alpha(part RenderPart) uint16 {
	var _arg0 *C.PangoRenderer  // out
	var _arg1 C.PangoRenderPart // out
	var _cret C.guint16         // in

	_arg0 = (*C.PangoRenderer)(unsafe.Pointer(r.Native()))
	_arg1 = C.PangoRenderPart(part)

	_cret = C.pango_renderer_get_alpha(_arg0, _arg1)

	var _guint16 uint16 // out

	_guint16 = uint16(_cret)

	return _guint16
}

func (r renderer) Color(part RenderPart) *Color {
	var _arg0 *C.PangoRenderer  // out
	var _arg1 C.PangoRenderPart // out
	var _cret *C.PangoColor     // in

	_arg0 = (*C.PangoRenderer)(unsafe.Pointer(r.Native()))
	_arg1 = C.PangoRenderPart(part)

	_cret = C.pango_renderer_get_color(_arg0, _arg1)

	var _color *Color // out

	_color = (*Color)(unsafe.Pointer(_cret))

	return _color
}

func (r renderer) Layout() Layout {
	var _arg0 *C.PangoRenderer // out
	var _cret *C.PangoLayout   // in

	_arg0 = (*C.PangoRenderer)(unsafe.Pointer(r.Native()))

	_cret = C.pango_renderer_get_layout(_arg0)

	var _layout Layout // out

	_layout = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Layout)

	return _layout
}

func (r renderer) LayoutLine() *LayoutLine {
	var _arg0 *C.PangoRenderer   // out
	var _cret *C.PangoLayoutLine // in

	_arg0 = (*C.PangoRenderer)(unsafe.Pointer(r.Native()))

	_cret = C.pango_renderer_get_layout_line(_arg0)

	var _layoutLine *LayoutLine // out

	_layoutLine = (*LayoutLine)(unsafe.Pointer(_cret))

	return _layoutLine
}

func (r renderer) Matrix() *Matrix {
	var _arg0 *C.PangoRenderer // out
	var _cret *C.PangoMatrix   // in

	_arg0 = (*C.PangoRenderer)(unsafe.Pointer(r.Native()))

	_cret = C.pango_renderer_get_matrix(_arg0)

	var _matrix *Matrix // out

	_matrix = (*Matrix)(unsafe.Pointer(_cret))

	return _matrix
}

func (r renderer) PartChangedRenderer(part RenderPart) {
	var _arg0 *C.PangoRenderer  // out
	var _arg1 C.PangoRenderPart // out

	_arg0 = (*C.PangoRenderer)(unsafe.Pointer(r.Native()))
	_arg1 = C.PangoRenderPart(part)

	C.pango_renderer_part_changed(_arg0, _arg1)
}

func (r renderer) SetAlphaRenderer(part RenderPart, alpha uint16) {
	var _arg0 *C.PangoRenderer  // out
	var _arg1 C.PangoRenderPart // out
	var _arg2 C.guint16         // out

	_arg0 = (*C.PangoRenderer)(unsafe.Pointer(r.Native()))
	_arg1 = C.PangoRenderPart(part)
	_arg2 = C.guint16(alpha)

	C.pango_renderer_set_alpha(_arg0, _arg1, _arg2)
}

func (r renderer) SetColorRenderer(part RenderPart, color *Color) {
	var _arg0 *C.PangoRenderer  // out
	var _arg1 C.PangoRenderPart // out
	var _arg2 *C.PangoColor     // out

	_arg0 = (*C.PangoRenderer)(unsafe.Pointer(r.Native()))
	_arg1 = C.PangoRenderPart(part)
	_arg2 = (*C.PangoColor)(unsafe.Pointer(color.Native()))

	C.pango_renderer_set_color(_arg0, _arg1, _arg2)
}

func (r renderer) SetMatrixRenderer(matrix *Matrix) {
	var _arg0 *C.PangoRenderer // out
	var _arg1 *C.PangoMatrix   // out

	_arg0 = (*C.PangoRenderer)(unsafe.Pointer(r.Native()))
	_arg1 = (*C.PangoMatrix)(unsafe.Pointer(matrix.Native()))

	C.pango_renderer_set_matrix(_arg0, _arg1)
}
