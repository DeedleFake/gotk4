// Code generated by girgen. DO NOT EDIT.

package pango

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
)

// #cgo pkg-config: pango
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <pango/pango.h>
import "C"

// Glyph: PangoGlyph represents a single glyph in the output form of a string.
type Glyph = uint32

// ExtentsToPixels converts extents from Pango units to device units.
//
// The conversion is done by dividing by the PANGO_SCALE factor and performing
// rounding.
//
// The inclusive rectangle is converted by flooring the x/y coordinates and
// extending width/height, such that the final rectangle completely includes the
// original rectangle.
//
// The nearest rectangle is converted by rounding the coordinates of the
// rectangle to the nearest device unit (pixel).
//
// The rule to which argument to use is: if you want the resulting device-space
// rectangle to completely contain the original rectangle, pass it in as
// inclusive. If you want two touching-but-not-overlapping rectangles stay
// touching-but-not-overlapping after rounding to device units, pass them in as
// nearest.
func ExtentsToPixels(inclusive *Rectangle, nearest *Rectangle) {
	var _arg1 *C.PangoRectangle // out
	var _arg2 *C.PangoRectangle // out

	if inclusive != nil {
		_arg1 = (*C.PangoRectangle)(gextras.StructNative(unsafe.Pointer(inclusive)))
	}
	if nearest != nil {
		_arg2 = (*C.PangoRectangle)(gextras.StructNative(unsafe.Pointer(nearest)))
	}

	C.pango_extents_to_pixels(_arg1, _arg2)
}

// UnitsFromDouble converts a floating-point number to Pango units.
//
// The conversion is done by multiplying d by PANGO_SCALE and rounding the
// result to nearest integer.
func UnitsFromDouble(d float64) int {
	var _arg1 C.double // out
	var _cret C.int    // in

	_arg1 = C.double(d)

	_cret = C.pango_units_from_double(_arg1)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// UnitsToDouble converts a number in Pango units to floating-point.
//
// The conversion is done by dividing i by PANGO_SCALE.
func UnitsToDouble(i int) float64 {
	var _arg1 C.int    // out
	var _cret C.double // in

	_arg1 = C.int(i)

	_cret = C.pango_units_to_double(_arg1)

	var _gdouble float64 // out

	_gdouble = float64(_cret)

	return _gdouble
}

// Rectangle: PangoRectangle structure represents a rectangle.
//
// PangoRectangle is frequently used to represent the logical or ink extents of
// a single glyph or section of text. (See, for instance,
// pango.Font.GetGlyphExtents().)
type Rectangle struct {
	nocopy gextras.NoCopy
	native *C.PangoRectangle
}

// X coordinate of the left side of the rectangle.
func (r *Rectangle) X() int {
	var v int // out
	v = int(r.native.x)
	return v
}

// Y coordinate of the the top side of the rectangle.
func (r *Rectangle) Y() int {
	var v int // out
	v = int(r.native.y)
	return v
}

// Width: width of the rectangle.
func (r *Rectangle) Width() int {
	var v int // out
	v = int(r.native.width)
	return v
}

// Height: height of the rectangle.
func (r *Rectangle) Height() int {
	var v int // out
	v = int(r.native.height)
	return v
}
