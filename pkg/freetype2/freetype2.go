// Code generated by girgen. DO NOT EDIT.

package freetype2

import (
	"unsafe"
)

// #cgo pkg-config:
// #cgo CFLAGS: -Wno-deprecated-declarations
//
import "C"

type Int32 int32

func LibraryVersion() {

	C.FT_Library_Version()
}

type Bitmap struct {
	native C.FT_Bitmap
}

// WrapBitmap wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapBitmap(ptr unsafe.Pointer) *Bitmap {
	if ptr == nil {
		return nil
	}

	return (*Bitmap)(ptr)
}

func marshalBitmap(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapBitmap(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (b *Bitmap) Native() unsafe.Pointer {
	return unsafe.Pointer(&b.native)
}

type Face struct {
	native C.FT_Face
}

// WrapFace wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapFace(ptr unsafe.Pointer) *Face {
	if ptr == nil {
		return nil
	}

	return (*Face)(ptr)
}

func marshalFace(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapFace(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (f *Face) Native() unsafe.Pointer {
	return unsafe.Pointer(&f.native)
}

type Library struct {
	native C.FT_Library
}

// WrapLibrary wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapLibrary(ptr unsafe.Pointer) *Library {
	if ptr == nil {
		return nil
	}

	return (*Library)(ptr)
}

func marshalLibrary(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapLibrary(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (l *Library) Native() unsafe.Pointer {
	return unsafe.Pointer(&l.native)
}
