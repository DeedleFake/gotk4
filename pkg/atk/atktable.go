// Code generated by girgen. DO NOT EDIT.

package atk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: atk
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <atk/atk.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.atk_table_get_type()), F: marshalTable},
	})
}

// Table: Table should be implemented by components which present elements
// ordered via rows and columns. It may also be used to present tree-structured
// information if the nodes of the trees can be said to contain multiple
// "columns". Individual elements of an Table are typically referred to as
// "cells". Those cells should implement the interface TableCell, but #Atk
// doesn't require them to be direct children of the current Table. They can be
// grand-children, grand-grand-children etc. Table provides the API needed to
// get a individual cell based on the row and column numbers.
//
// Children of Table are frequently "lightweight" objects, that is, they may not
// have backing widgets in the host UI toolkit. They are therefore often
// transient.
//
// Since tables are often very complex, Table includes provision for offering
// simplified summary information, as well as row and column headers and
// captions. Headers and captions are Objects which may implement other
// interfaces (Text, Image, etc.) as appropriate. Table summaries may themselves
// be (simplified) Tables, etc.
//
// Note for implementors: in the past, Table required that all the cells should
// be direct children of Table, and provided some index based methods to request
// the cells. The practice showed that that forcing made Table implementation
// complex, and hard to expose other kind of children, like rows or captions.
// Right now, index-based methods are deprecated.
type Table interface {
	gextras.Objector

	// AddColumnSelection sets the summary description of the table.
	AddColumnSelection(column int) bool
	// AddRowSelection sets the summary description of the table.
	AddRowSelection(row int) bool
	// Caption sets the summary description of the table.
	Caption() Object
	// ColumnAtIndex sets the summary description of the table.
	ColumnAtIndex(index_ int) int
	// ColumnDescription sets the summary description of the table.
	ColumnDescription(column int) string
	// ColumnExtentAt sets the summary description of the table.
	ColumnExtentAt(row int, column int) int
	// ColumnHeader sets the summary description of the table.
	ColumnHeader(column int) Object
	// IndexAt sets the summary description of the table.
	IndexAt(row int, column int) int
	// NColumns sets the summary description of the table.
	NColumns() int
	// NRows sets the summary description of the table.
	NRows() int
	// RowAtIndex sets the summary description of the table.
	RowAtIndex(index_ int) int
	// RowDescription sets the summary description of the table.
	RowDescription(row int) string
	// RowExtentAt sets the summary description of the table.
	RowExtentAt(row int, column int) int
	// RowHeader sets the summary description of the table.
	RowHeader(row int) Object
	// SelectedColumns sets the summary description of the table.
	SelectedColumns(selected **int) int
	// SelectedRows sets the summary description of the table.
	SelectedRows(selected **int) int
	// Summary sets the summary description of the table.
	Summary() Object
	// IsColumnSelected sets the summary description of the table.
	IsColumnSelected(column int) bool
	// IsRowSelected sets the summary description of the table.
	IsRowSelected(row int) bool
	// IsSelected sets the summary description of the table.
	IsSelected(row int, column int) bool
	// RefAt sets the summary description of the table.
	RefAt(row int, column int) Object
	// RemoveColumnSelection sets the summary description of the table.
	RemoveColumnSelection(column int) bool
	// RemoveRowSelection sets the summary description of the table.
	RemoveRowSelection(row int) bool
	// SetCaption sets the summary description of the table.
	SetCaption(caption Object)
	// SetColumnDescription sets the summary description of the table.
	SetColumnDescription(column int, description string)
	// SetColumnHeader sets the summary description of the table.
	SetColumnHeader(column int, header Object)
	// SetRowDescription sets the summary description of the table.
	SetRowDescription(row int, description string)
	// SetRowHeader sets the summary description of the table.
	SetRowHeader(row int, header Object)
	// SetSummary sets the summary description of the table.
	SetSummary(accessible Object)
}

// table implements the Table interface.
type table struct {
	gextras.Objector
}

var _ Table = (*table)(nil)

// WrapTable wraps a GObject to a type that implements
// interface Table. It is primarily used internally.
func WrapTable(obj *externglib.Object) Table {
	return table{
		Objector: obj,
	}
}

func marshalTable(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapTable(obj), nil
}

func (t table) AddColumnSelection(column int) bool {
	var _arg0 *C.AtkTable // out
	var _arg1 C.gint      // out
	var _cret C.gboolean  // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(t.Native()))
	_arg1 = C.gint(column)

	_cret = C.atk_table_add_column_selection(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (t table) AddRowSelection(row int) bool {
	var _arg0 *C.AtkTable // out
	var _arg1 C.gint      // out
	var _cret C.gboolean  // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(t.Native()))
	_arg1 = C.gint(row)

	_cret = C.atk_table_add_row_selection(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (t table) Caption() Object {
	var _arg0 *C.AtkTable  // out
	var _cret *C.AtkObject // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(t.Native()))

	_cret = C.atk_table_get_caption(_arg0)

	var _object Object // out

	_object = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Object)

	return _object
}

func (t table) ColumnAtIndex(index_ int) int {
	var _arg0 *C.AtkTable // out
	var _arg1 C.gint      // out
	var _cret C.gint      // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(t.Native()))
	_arg1 = C.gint(index_)

	_cret = C.atk_table_get_column_at_index(_arg0, _arg1)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (t table) ColumnDescription(column int) string {
	var _arg0 *C.AtkTable // out
	var _arg1 C.gint      // out
	var _cret *C.gchar    // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(t.Native()))
	_arg1 = C.gint(column)

	_cret = C.atk_table_get_column_description(_arg0, _arg1)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

func (t table) ColumnExtentAt(row int, column int) int {
	var _arg0 *C.AtkTable // out
	var _arg1 C.gint      // out
	var _arg2 C.gint      // out
	var _cret C.gint      // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(t.Native()))
	_arg1 = C.gint(row)
	_arg2 = C.gint(column)

	_cret = C.atk_table_get_column_extent_at(_arg0, _arg1, _arg2)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (t table) ColumnHeader(column int) Object {
	var _arg0 *C.AtkTable  // out
	var _arg1 C.gint       // out
	var _cret *C.AtkObject // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(t.Native()))
	_arg1 = C.gint(column)

	_cret = C.atk_table_get_column_header(_arg0, _arg1)

	var _object Object // out

	_object = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Object)

	return _object
}

func (t table) IndexAt(row int, column int) int {
	var _arg0 *C.AtkTable // out
	var _arg1 C.gint      // out
	var _arg2 C.gint      // out
	var _cret C.gint      // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(t.Native()))
	_arg1 = C.gint(row)
	_arg2 = C.gint(column)

	_cret = C.atk_table_get_index_at(_arg0, _arg1, _arg2)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (t table) NColumns() int {
	var _arg0 *C.AtkTable // out
	var _cret C.gint      // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(t.Native()))

	_cret = C.atk_table_get_n_columns(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (t table) NRows() int {
	var _arg0 *C.AtkTable // out
	var _cret C.gint      // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(t.Native()))

	_cret = C.atk_table_get_n_rows(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (t table) RowAtIndex(index_ int) int {
	var _arg0 *C.AtkTable // out
	var _arg1 C.gint      // out
	var _cret C.gint      // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(t.Native()))
	_arg1 = C.gint(index_)

	_cret = C.atk_table_get_row_at_index(_arg0, _arg1)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (t table) RowDescription(row int) string {
	var _arg0 *C.AtkTable // out
	var _arg1 C.gint      // out
	var _cret *C.gchar    // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(t.Native()))
	_arg1 = C.gint(row)

	_cret = C.atk_table_get_row_description(_arg0, _arg1)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

func (t table) RowExtentAt(row int, column int) int {
	var _arg0 *C.AtkTable // out
	var _arg1 C.gint      // out
	var _arg2 C.gint      // out
	var _cret C.gint      // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(t.Native()))
	_arg1 = C.gint(row)
	_arg2 = C.gint(column)

	_cret = C.atk_table_get_row_extent_at(_arg0, _arg1, _arg2)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (t table) RowHeader(row int) Object {
	var _arg0 *C.AtkTable  // out
	var _arg1 C.gint       // out
	var _cret *C.AtkObject // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(t.Native()))
	_arg1 = C.gint(row)

	_cret = C.atk_table_get_row_header(_arg0, _arg1)

	var _object Object // out

	_object = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Object)

	return _object
}

func (t table) SelectedColumns(selected **int) int {
	var _arg0 *C.AtkTable // out
	var _arg1 **C.gint    // out
	var _cret C.gint      // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(t.Native()))
	_arg1 = (**C.gint)(unsafe.Pointer(selected))

	_cret = C.atk_table_get_selected_columns(_arg0, _arg1)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (t table) SelectedRows(selected **int) int {
	var _arg0 *C.AtkTable // out
	var _arg1 **C.gint    // out
	var _cret C.gint      // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(t.Native()))
	_arg1 = (**C.gint)(unsafe.Pointer(selected))

	_cret = C.atk_table_get_selected_rows(_arg0, _arg1)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (t table) Summary() Object {
	var _arg0 *C.AtkTable  // out
	var _cret *C.AtkObject // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(t.Native()))

	_cret = C.atk_table_get_summary(_arg0)

	var _object Object // out

	_object = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(Object)

	return _object
}

func (t table) IsColumnSelected(column int) bool {
	var _arg0 *C.AtkTable // out
	var _arg1 C.gint      // out
	var _cret C.gboolean  // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(t.Native()))
	_arg1 = C.gint(column)

	_cret = C.atk_table_is_column_selected(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (t table) IsRowSelected(row int) bool {
	var _arg0 *C.AtkTable // out
	var _arg1 C.gint      // out
	var _cret C.gboolean  // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(t.Native()))
	_arg1 = C.gint(row)

	_cret = C.atk_table_is_row_selected(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (t table) IsSelected(row int, column int) bool {
	var _arg0 *C.AtkTable // out
	var _arg1 C.gint      // out
	var _arg2 C.gint      // out
	var _cret C.gboolean  // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(t.Native()))
	_arg1 = C.gint(row)
	_arg2 = C.gint(column)

	_cret = C.atk_table_is_selected(_arg0, _arg1, _arg2)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (t table) RefAt(row int, column int) Object {
	var _arg0 *C.AtkTable  // out
	var _arg1 C.gint       // out
	var _arg2 C.gint       // out
	var _cret *C.AtkObject // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(t.Native()))
	_arg1 = C.gint(row)
	_arg2 = C.gint(column)

	_cret = C.atk_table_ref_at(_arg0, _arg1, _arg2)

	var _object Object // out

	_object = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(Object)

	return _object
}

func (t table) RemoveColumnSelection(column int) bool {
	var _arg0 *C.AtkTable // out
	var _arg1 C.gint      // out
	var _cret C.gboolean  // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(t.Native()))
	_arg1 = C.gint(column)

	_cret = C.atk_table_remove_column_selection(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (t table) RemoveRowSelection(row int) bool {
	var _arg0 *C.AtkTable // out
	var _arg1 C.gint      // out
	var _cret C.gboolean  // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(t.Native()))
	_arg1 = C.gint(row)

	_cret = C.atk_table_remove_row_selection(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (t table) SetCaption(caption Object) {
	var _arg0 *C.AtkTable  // out
	var _arg1 *C.AtkObject // out

	_arg0 = (*C.AtkTable)(unsafe.Pointer(t.Native()))
	_arg1 = (*C.AtkObject)(unsafe.Pointer(caption.Native()))

	C.atk_table_set_caption(_arg0, _arg1)
}

func (t table) SetColumnDescription(column int, description string) {
	var _arg0 *C.AtkTable // out
	var _arg1 C.gint      // out
	var _arg2 *C.gchar    // out

	_arg0 = (*C.AtkTable)(unsafe.Pointer(t.Native()))
	_arg1 = C.gint(column)
	_arg2 = (*C.gchar)(C.CString(description))
	defer C.free(unsafe.Pointer(_arg2))

	C.atk_table_set_column_description(_arg0, _arg1, _arg2)
}

func (t table) SetColumnHeader(column int, header Object) {
	var _arg0 *C.AtkTable  // out
	var _arg1 C.gint       // out
	var _arg2 *C.AtkObject // out

	_arg0 = (*C.AtkTable)(unsafe.Pointer(t.Native()))
	_arg1 = C.gint(column)
	_arg2 = (*C.AtkObject)(unsafe.Pointer(header.Native()))

	C.atk_table_set_column_header(_arg0, _arg1, _arg2)
}

func (t table) SetRowDescription(row int, description string) {
	var _arg0 *C.AtkTable // out
	var _arg1 C.gint      // out
	var _arg2 *C.gchar    // out

	_arg0 = (*C.AtkTable)(unsafe.Pointer(t.Native()))
	_arg1 = C.gint(row)
	_arg2 = (*C.gchar)(C.CString(description))
	defer C.free(unsafe.Pointer(_arg2))

	C.atk_table_set_row_description(_arg0, _arg1, _arg2)
}

func (t table) SetRowHeader(row int, header Object) {
	var _arg0 *C.AtkTable  // out
	var _arg1 C.gint       // out
	var _arg2 *C.AtkObject // out

	_arg0 = (*C.AtkTable)(unsafe.Pointer(t.Native()))
	_arg1 = C.gint(row)
	_arg2 = (*C.AtkObject)(unsafe.Pointer(header.Native()))

	C.atk_table_set_row_header(_arg0, _arg1, _arg2)
}

func (t table) SetSummary(accessible Object) {
	var _arg0 *C.AtkTable  // out
	var _arg1 *C.AtkObject // out

	_arg0 = (*C.AtkTable)(unsafe.Pointer(t.Native()))
	_arg1 = (*C.AtkObject)(unsafe.Pointer(accessible.Native()))

	C.atk_table_set_summary(_arg0, _arg1)
}
