// Code generated by girgen. DO NOT EDIT.

package atk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: atk
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <atk/atk.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.atk_no_op_object_factory_get_type()), F: marshalNoOpObjectFactory},
	})
}

// NoOpObjectFactory: the AtkObjectFactory which creates an AtkNoOpObject. An
// instance of this is created by an AtkRegistry if no factory type has not been
// specified to create an accessible object of a particular type.
type NoOpObjectFactory interface {
	gextras.Objector

	// AsObjectFactory casts the class to the ObjectFactory interface.
	AsObjectFactory() ObjectFactory

	// CreateAccessible provides an Object that implements an accessibility
	// interface on behalf of @obj
	//
	// This method is inherited from ObjectFactory
	CreateAccessible(obj gextras.Objector) Object
	// GetAccessibleType gets the GType of the accessible which is created by
	// the factory.
	//
	// This method is inherited from ObjectFactory
	GetAccessibleType() externglib.Type
	// Invalidate: inform @factory that it is no longer being used to create
	// accessibles. When called, @factory may need to inform Objects which it
	// has created that they need to be re-instantiated. Note: primarily used
	// for runtime replacement of ObjectFactorys in object registries.
	//
	// This method is inherited from ObjectFactory
	Invalidate()
}

// noOpObjectFactory implements the NoOpObjectFactory interface.
type noOpObjectFactory struct {
	*externglib.Object
}

var _ NoOpObjectFactory = (*noOpObjectFactory)(nil)

// WrapNoOpObjectFactory wraps a GObject to a type that implements
// interface NoOpObjectFactory. It is primarily used internally.
func WrapNoOpObjectFactory(obj *externglib.Object) NoOpObjectFactory {
	return noOpObjectFactory{obj}
}

func marshalNoOpObjectFactory(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapNoOpObjectFactory(obj), nil
}

// NewNoOpObjectFactory creates an instance of an ObjectFactory which generates
// primitive (non-functioning) Objects.
func NewNoOpObjectFactory() NoOpObjectFactory {
	var _cret *C.AtkObjectFactory // in

	_cret = C.atk_no_op_object_factory_new()

	var _noOpObjectFactory NoOpObjectFactory // out

	_noOpObjectFactory = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(NoOpObjectFactory)

	return _noOpObjectFactory
}

func (n noOpObjectFactory) AsObjectFactory() ObjectFactory {
	return WrapObjectFactory(gextras.InternObject(n))
}

func (f noOpObjectFactory) CreateAccessible(obj gextras.Objector) Object {
	return WrapObjectFactory(gextras.InternObject(f)).CreateAccessible(obj)
}

func (f noOpObjectFactory) GetAccessibleType() externglib.Type {
	return WrapObjectFactory(gextras.InternObject(f)).GetAccessibleType()
}

func (f noOpObjectFactory) Invalidate() {
	WrapObjectFactory(gextras.InternObject(f)).Invalidate()
}
