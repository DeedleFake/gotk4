// Code generated by girgen. DO NOT EDIT.

package atk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: atk
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <atk/atk.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.atk_plug_get_type()), F: marshalPlug},
	})
}

// Plug: see Socket
type Plug interface {
	Object
	Component

	ID() string

	SetChildPlug(child Object)
}

// plug implements the Plug class.
type plug struct {
	Object
}

// WrapPlug wraps a GObject to the right type. It is
// primarily used internally.
func WrapPlug(obj *externglib.Object) Plug {
	return plug{
		Object: WrapObject(obj),
	}
}

func marshalPlug(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapPlug(obj), nil
}

func NewPlug() Plug {
	var _cret *C.AtkObject // in

	_cret = C.atk_plug_new()

	var _plug Plug // out

	_plug = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(Plug)

	return _plug
}

func (p plug) ID() string {
	var _arg0 *C.AtkPlug // out
	var _cret *C.gchar   // in

	_arg0 = (*C.AtkPlug)(unsafe.Pointer(p.Native()))

	_cret = C.atk_plug_get_id(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

func (p plug) SetChildPlug(child Object) {
	var _arg0 *C.AtkPlug   // out
	var _arg1 *C.AtkObject // out

	_arg0 = (*C.AtkPlug)(unsafe.Pointer(p.Native()))
	_arg1 = (*C.AtkObject)(unsafe.Pointer(child.Native()))

	C.atk_plug_set_child(_arg0, _arg1)
}

func (c plug) Contains(x int, y int, coordType CoordType) bool {
	return WrapComponent(gextras.InternObject(c)).Contains(x, y, coordType)
}

func (c plug) Alpha() float64 {
	return WrapComponent(gextras.InternObject(c)).Alpha()
}

func (c plug) Extents(coordType CoordType) (x int, y int, width int, height int) {
	return WrapComponent(gextras.InternObject(c)).Extents(coordType)
}

func (c plug) Layer() Layer {
	return WrapComponent(gextras.InternObject(c)).Layer()
}

func (c plug) MdiZorder() int {
	return WrapComponent(gextras.InternObject(c)).MdiZorder()
}

func (c plug) Position(coordType CoordType) (x int, y int) {
	return WrapComponent(gextras.InternObject(c)).Position(coordType)
}

func (c plug) Size() (width int, height int) {
	return WrapComponent(gextras.InternObject(c)).Size()
}

func (c plug) GrabFocus() bool {
	return WrapComponent(gextras.InternObject(c)).GrabFocus()
}

func (c plug) RefAccessibleAtPoint(x int, y int, coordType CoordType) Object {
	return WrapComponent(gextras.InternObject(c)).RefAccessibleAtPoint(x, y, coordType)
}

func (c plug) RemoveFocusHandler(handlerId uint) {
	WrapComponent(gextras.InternObject(c)).RemoveFocusHandler(handlerId)
}

func (c plug) ScrollTo(typ ScrollType) bool {
	return WrapComponent(gextras.InternObject(c)).ScrollTo(typ)
}

func (c plug) ScrollToPoint(coords CoordType, x int, y int) bool {
	return WrapComponent(gextras.InternObject(c)).ScrollToPoint(coords, x, y)
}

func (c plug) SetExtents(x int, y int, width int, height int, coordType CoordType) bool {
	return WrapComponent(gextras.InternObject(c)).SetExtents(x, y, width, height, coordType)
}

func (c plug) SetPosition(x int, y int, coordType CoordType) bool {
	return WrapComponent(gextras.InternObject(c)).SetPosition(x, y, coordType)
}

func (c plug) SetSize(width int, height int) bool {
	return WrapComponent(gextras.InternObject(c)).SetSize(width, height)
}
