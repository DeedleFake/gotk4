// Code generated by girgen. DO NOT EDIT.

package atk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: atk
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <atk/atk.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.atk_no_op_object_get_type()), F: marshalNoOpObject},
	})
}

// NoOpObject is an AtkObject which purports to implement all ATK interfaces. It
// is the type of AtkObject which is created if an accessible object is
// requested for an object type for which no factory type is specified.
type NoOpObject interface {
	Object

	// AsAction casts the class to the Action interface.
	AsAction() Action
	// AsComponent casts the class to the Component interface.
	AsComponent() Component
	// AsDocument casts the class to the Document interface.
	AsDocument() Document
	// AsEditableText casts the class to the EditableText interface.
	AsEditableText() EditableText
	// AsHypertext casts the class to the Hypertext interface.
	AsHypertext() Hypertext
	// AsImage casts the class to the Image interface.
	AsImage() Image
	// AsSelection casts the class to the Selection interface.
	AsSelection() Selection
	// AsTable casts the class to the Table interface.
	AsTable() Table
	// AsTableCell casts the class to the TableCell interface.
	AsTableCell() TableCell
	// AsText casts the class to the Text interface.
	AsText() Text
	// AsValue casts the class to the Value interface.
	AsValue() Value
	// AsWindow casts the class to the Window interface.
	AsWindow() Window
}

// noOpObject implements the NoOpObject class.
type noOpObject struct {
	Object
}

// WrapNoOpObject wraps a GObject to the right type. It is
// primarily used internally.
func WrapNoOpObject(obj *externglib.Object) NoOpObject {
	return noOpObject{
		Object: WrapObject(obj),
	}
}

func marshalNoOpObject(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapNoOpObject(obj), nil
}

// NewNoOpObject provides a default (non-functioning stub) Object. Application
// maintainers should not use this method.
func NewNoOpObject(obj gextras.Objector) NoOpObject {
	var _arg1 *C.GObject   // out
	var _cret *C.AtkObject // in

	_arg1 = (*C.GObject)(unsafe.Pointer(obj.Native()))

	_cret = C.atk_no_op_object_new(_arg1)

	var _noOpObject NoOpObject // out

	_noOpObject = WrapNoOpObject(externglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _noOpObject
}

func (n noOpObject) AsAction() Action {
	return WrapAction(gextras.InternObject(n))
}

func (n noOpObject) AsComponent() Component {
	return WrapComponent(gextras.InternObject(n))
}

func (n noOpObject) AsDocument() Document {
	return WrapDocument(gextras.InternObject(n))
}

func (n noOpObject) AsEditableText() EditableText {
	return WrapEditableText(gextras.InternObject(n))
}

func (n noOpObject) AsHypertext() Hypertext {
	return WrapHypertext(gextras.InternObject(n))
}

func (n noOpObject) AsImage() Image {
	return WrapImage(gextras.InternObject(n))
}

func (n noOpObject) AsSelection() Selection {
	return WrapSelection(gextras.InternObject(n))
}

func (n noOpObject) AsTable() Table {
	return WrapTable(gextras.InternObject(n))
}

func (n noOpObject) AsTableCell() TableCell {
	return WrapTableCell(gextras.InternObject(n))
}

func (n noOpObject) AsText() Text {
	return WrapText(gextras.InternObject(n))
}

func (n noOpObject) AsValue() Value {
	return WrapValue(gextras.InternObject(n))
}

func (n noOpObject) AsWindow() Window {
	return WrapWindow(gextras.InternObject(n))
}
