// Code generated by girgen. DO NOT EDIT.

package atk

import (
	"unsafe"

	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: atk
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <atk/atk.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.atk_window_get_type()), F: marshalWindow},
	})
}

// Window should be implemented by the UI elements that represent a top-level
// window, such as the main window of an application or dialog.
type Window interface {
	Object
}

// window implements the Window interface.
type window struct {
	Object
}

var _ Window = (*window)(nil)

// WrapWindow wraps a GObject to a type that implements
// interface Window. It is primarily used internally.
func WrapWindow(obj *externglib.Object) Window {
	return window{
		Object: WrapObject(obj),
	}
}

func marshalWindow(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapWindow(obj), nil
}
