// Code generated by girgen. DO NOT EDIT.

package atk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: atk
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <atk/atk.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.atk_misc_get_type()), F: marshalMisc},
	})
}

// MiscOverrider contains methods that are overridable.
//
// As of right now, interface overriding and subclassing is not supported
// yet, so the interface currently has no use.
type MiscOverrider interface {
	// ThreadsEnter: take the thread mutex for the GUI toolkit, if one exists.
	// (This method is implemented by the toolkit ATK implementation layer; for
	// instance, for GTK+, GAIL implements this via GDK_THREADS_ENTER).
	//
	// Deprecated.
	ThreadsEnter()
	// ThreadsLeave: release the thread mutex for the GUI toolkit, if one
	// exists. This method, and atk_misc_threads_enter, are needed in some
	// situations by threaded application code which services ATK requests,
	// since fulfilling ATK requests often requires calling into the GUI
	// toolkit. If a long-running or potentially blocking call takes place
	// inside such a block, it should be bracketed by
	// atk_misc_threads_leave/atk_misc_threads_enter calls. (This method is
	// implemented by the toolkit ATK implementation layer; for instance, for
	// GTK+, GAIL implements this via GDK_THREADS_LEAVE).
	//
	// Deprecated.
	ThreadsLeave()
}

// Misc: set of utility functions for thread locking. This interface and all his
// related methods are deprecated since 2.12.
type Misc interface {
	gextras.Objector

	// ThreadsEnter: take the thread mutex for the GUI toolkit, if one exists.
	// (This method is implemented by the toolkit ATK implementation layer; for
	// instance, for GTK+, GAIL implements this via GDK_THREADS_ENTER).
	//
	// Deprecated.
	ThreadsEnter()
	// ThreadsLeave: release the thread mutex for the GUI toolkit, if one
	// exists. This method, and atk_misc_threads_enter, are needed in some
	// situations by threaded application code which services ATK requests,
	// since fulfilling ATK requests often requires calling into the GUI
	// toolkit. If a long-running or potentially blocking call takes place
	// inside such a block, it should be bracketed by
	// atk_misc_threads_leave/atk_misc_threads_enter calls. (This method is
	// implemented by the toolkit ATK implementation layer; for instance, for
	// GTK+, GAIL implements this via GDK_THREADS_LEAVE).
	//
	// Deprecated.
	ThreadsLeave()
}

// MiscClass implements the Misc interface.
type MiscClass struct {
	*externglib.Object
}

var _ Misc = (*MiscClass)(nil)

func wrapMisc(obj *externglib.Object) Misc {
	return &MiscClass{
		Object: obj,
	}
}

func marshalMisc(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapMisc(obj), nil
}

// ThreadsEnter: take the thread mutex for the GUI toolkit, if one exists. (This
// method is implemented by the toolkit ATK implementation layer; for instance,
// for GTK+, GAIL implements this via GDK_THREADS_ENTER).
//
// Deprecated.
func (m *MiscClass) ThreadsEnter() {
	var _arg0 *C.AtkMisc // out

	_arg0 = (*C.AtkMisc)(unsafe.Pointer(m.Native()))

	C.atk_misc_threads_enter(_arg0)
}

// ThreadsLeave: release the thread mutex for the GUI toolkit, if one exists.
// This method, and atk_misc_threads_enter, are needed in some situations by
// threaded application code which services ATK requests, since fulfilling ATK
// requests often requires calling into the GUI toolkit. If a long-running or
// potentially blocking call takes place inside such a block, it should be
// bracketed by atk_misc_threads_leave/atk_misc_threads_enter calls. (This
// method is implemented by the toolkit ATK implementation layer; for instance,
// for GTK+, GAIL implements this via GDK_THREADS_LEAVE).
//
// Deprecated.
func (m *MiscClass) ThreadsLeave() {
	var _arg0 *C.AtkMisc // out

	_arg0 = (*C.AtkMisc)(unsafe.Pointer(m.Native()))

	C.atk_misc_threads_leave(_arg0)
}
