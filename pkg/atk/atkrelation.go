// Code generated by girgen. DO NOT EDIT.

package atk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: atk
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <atk/atk.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.atk_relation_get_type()), F: marshalRelation},
	})
}

// Relation describes a relation between an object and one or more other
// objects. The actual relations that an object has with other objects are
// defined as an AtkRelationSet, which is a set of AtkRelations.
type Relation interface {
	gextras.Objector

	// AddTarget adds the specified AtkObject to the target for the relation, if
	// it is not already present. See also atk_object_add_relationship().
	AddTarget(target Object)
	// RelationType gets the type of @relation
	RelationType() RelationType
	// RemoveTarget: remove the specified AtkObject from the target for the
	// relation.
	RemoveTarget(target Object) bool
}

// RelationClass implements the Relation interface.
type RelationClass struct {
	*externglib.Object
}

var _ Relation = (*RelationClass)(nil)

func wrapRelation(obj *externglib.Object) Relation {
	return &RelationClass{
		Object: obj,
	}
}

func marshalRelation(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapRelation(obj), nil
}

// NewRelation: create a new relation for the specified key and the specified
// list of targets. See also atk_object_add_relationship().
func NewRelation(targets []Object, relationship RelationType) Relation {
	var _arg1 **C.AtkObject
	var _arg2 C.gint
	var _arg3 C.AtkRelationType // out
	var _cret *C.AtkRelation    // in

	_arg2 = C.gint(len(targets))
	_arg1 = (**C.AtkObject)(C.malloc(C.ulong(len(targets)) * C.ulong(unsafe.Sizeof(uint(0)))))
	defer C.free(unsafe.Pointer(_arg1))
	{
		out := unsafe.Slice(_arg1, len(targets))
		for i := range targets {
			out[i] = (*C.AtkObject)(unsafe.Pointer(targets[i].Native()))
		}
	}
	_arg3 = C.AtkRelationType(relationship)

	_cret = C.atk_relation_new(_arg1, _arg2, _arg3)

	var _relation Relation // out

	_relation = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret))).(Relation)

	return _relation
}

// AddTarget adds the specified AtkObject to the target for the relation, if it
// is not already present. See also atk_object_add_relationship().
func (r *RelationClass) AddTarget(target Object) {
	var _arg0 *C.AtkRelation // out
	var _arg1 *C.AtkObject   // out

	_arg0 = (*C.AtkRelation)(unsafe.Pointer(r.Native()))
	_arg1 = (*C.AtkObject)(unsafe.Pointer(target.Native()))

	C.atk_relation_add_target(_arg0, _arg1)
}

// RelationType gets the type of @relation
func (r *RelationClass) RelationType() RelationType {
	var _arg0 *C.AtkRelation    // out
	var _cret C.AtkRelationType // in

	_arg0 = (*C.AtkRelation)(unsafe.Pointer(r.Native()))

	_cret = C.atk_relation_get_relation_type(_arg0)

	var _relationType RelationType // out

	_relationType = RelationType(_cret)

	return _relationType
}

// RemoveTarget: remove the specified AtkObject from the target for the
// relation.
func (r *RelationClass) RemoveTarget(target Object) bool {
	var _arg0 *C.AtkRelation // out
	var _arg1 *C.AtkObject   // out
	var _cret C.gboolean     // in

	_arg0 = (*C.AtkRelation)(unsafe.Pointer(r.Native()))
	_arg1 = (*C.AtkObject)(unsafe.Pointer(target.Native()))

	_cret = C.atk_relation_remove_target(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}
