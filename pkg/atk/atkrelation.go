// Code generated by girgen. DO NOT EDIT.

package atk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: atk
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <atk/atk.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.atk_relation_get_type()), F: marshalRelationer},
	})
}

// Relationer describes Relation's methods.
type Relationer interface {
	gextras.Objector

	AddTarget(target Objecter)
	RelationType() RelationType
	RemoveTarget(target Objecter) bool
}

// Relation describes a relation between an object and one or more other
// objects. The actual relations that an object has with other objects are
// defined as an AtkRelationSet, which is a set of AtkRelations.
type Relation struct {
	*externglib.Object
}

var _ Relationer = (*Relation)(nil)

func wrapRelationer(obj *externglib.Object) Relationer {
	return &Relation{
		Object: obj,
	}
}

func marshalRelationer(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapRelationer(obj), nil
}

// AddTarget adds the specified AtkObject to the target for the relation, if it
// is not already present. See also atk_object_add_relationship().
func (relation *Relation) AddTarget(target Objecter) {
	var _arg0 *C.AtkRelation // out
	var _arg1 *C.AtkObject   // out

	_arg0 = (*C.AtkRelation)(unsafe.Pointer(relation.Native()))
	_arg1 = (*C.AtkObject)(unsafe.Pointer(target.Native()))

	C.atk_relation_add_target(_arg0, _arg1)
}

// RelationType gets the type of @relation
func (relation *Relation) RelationType() RelationType {
	var _arg0 *C.AtkRelation    // out
	var _cret C.AtkRelationType // in

	_arg0 = (*C.AtkRelation)(unsafe.Pointer(relation.Native()))

	_cret = C.atk_relation_get_relation_type(_arg0)

	var _relationType RelationType // out

	_relationType = (RelationType)(_cret)

	return _relationType
}

// RemoveTarget: remove the specified AtkObject from the target for the
// relation.
func (relation *Relation) RemoveTarget(target Objecter) bool {
	var _arg0 *C.AtkRelation // out
	var _arg1 *C.AtkObject   // out
	var _cret C.gboolean     // in

	_arg0 = (*C.AtkRelation)(unsafe.Pointer(relation.Native()))
	_arg1 = (*C.AtkObject)(unsafe.Pointer(target.Native()))

	_cret = C.atk_relation_remove_target(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}
