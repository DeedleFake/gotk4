// Code generated by girgen. DO NOT EDIT.

package atk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: atk
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <atk/atk.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.atk_gobject_accessible_get_type()), F: marshalGObjectAccessible},
	})
}

// GObjectAccessible: this object class is derived from AtkObject. It can be
// used as a basis for implementing accessible objects for GObjects which are
// not derived from GtkWidget. One example of its use is in providing an
// accessible object for GnomeCanvasItem in the GAIL library.
type GObjectAccessible interface {
	Object

	GetObject() gextras.Objector
}

// gObjectAccessible implements the GObjectAccessible class.
type gObjectAccessible struct {
	Object
}

// WrapGObjectAccessible wraps a GObject to the right type. It is
// primarily used internally.
func WrapGObjectAccessible(obj *externglib.Object) GObjectAccessible {
	return gObjectAccessible{
		Object: WrapObject(obj),
	}
}

func marshalGObjectAccessible(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapGObjectAccessible(obj), nil
}

func (o gObjectAccessible) GetObject() gextras.Objector {
	var _arg0 *C.AtkGObjectAccessible // out
	var _cret *C.GObject              // in

	_arg0 = (*C.AtkGObjectAccessible)(unsafe.Pointer(o.Native()))

	_cret = C.atk_gobject_accessible_get_object(_arg0)

	var _object gextras.Objector // out

	_object = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(gextras.Objector)

	return _object
}
