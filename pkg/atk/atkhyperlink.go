// Code generated by girgen. DO NOT EDIT.

package atk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: atk
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <atk/atk.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.atk_hyperlink_state_flags_get_type()), F: marshalHyperlinkStateFlags},
		{T: externglib.Type(C.atk_hyperlink_get_type()), F: marshalHyperlink},
	})
}

// HyperlinkStateFlags describes the type of link
type HyperlinkStateFlags int

const (
	// HyperlinkStateFlagsInline: link is inline
	HyperlinkStateFlagsInline HyperlinkStateFlags = 0b1
)

func marshalHyperlinkStateFlags(p uintptr) (interface{}, error) {
	return HyperlinkStateFlags(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// HyperlinkOverrider contains methods that are overridable .
//
// As of right now, interface overriding and subclassing is not supported
// yet, so the interface currently has no use.
type HyperlinkOverrider interface {
	// EndIndex gets the index with the hypertext document at which this link
	// ends.
	EndIndex() int
	// NAnchors gets the number of anchors associated with this hyperlink.
	NAnchors() int
	// Object returns the item associated with this hyperlinks nth anchor. For
	// instance, the returned Object will implement Text if @link_ is a text
	// hyperlink, Image if @link_ is an image hyperlink etc.
	//
	// Multiple anchors are primarily used by client-side image maps.
	Object(i int) Object
	// StartIndex gets the index with the hypertext document at which this link
	// begins.
	StartIndex() int
	// URI: get a the URI associated with the anchor specified by @i of @link_.
	//
	// Multiple anchors are primarily used by client-side image maps.
	URI(i int) string
	// IsSelectedLink determines whether this AtkHyperlink is selected
	//
	// Deprecated: since version 1.8.
	IsSelectedLink() bool
	// IsValid: since the document that a link is associated with may have
	// changed this method returns true if the link is still valid (with respect
	// to the document it references) and false otherwise.
	IsValid() bool
	LinkActivated()
	LinkState() uint
}

// Hyperlink: ATK object which encapsulates a link or set of links (for instance
// in the case of client-side image maps) in a hypertext document. It may
// implement the AtkAction interface. AtkHyperlink may also be used to refer to
// inline embedded content, since it allows specification of a start and end
// offset within the host AtkHypertext object.
type Hyperlink interface {
	gextras.Objector

	// AsAction casts the class to the Action interface.
	AsAction() Action

	// DoAction: perform the specified action on the object.
	//
	// This method is inherited from Action
	DoAction(i int) bool
	// GetDescription returns a description of the specified action of the
	// object.
	//
	// This method is inherited from Action
	GetDescription(i int) string
	// GetKeybinding gets the keybinding which can be used to activate this
	// action, if one exists. The string returned should contain localized,
	// human-readable, key sequences as they would appear when displayed on
	// screen. It must be in the format "mnemonic;sequence;shortcut".
	//
	// - The mnemonic key activates the object if it is presently enabled
	// onscreen. This typically corresponds to the underlined letter within the
	// widget. Example: "n" in a traditional "New..." menu item or the "a" in
	// "Apply" for a button. - The sequence is the full list of keys which
	// invoke the action even if the relevant element is not currently shown on
	// screen. For instance, for a menu item the sequence is the keybindings
	// used to open the parent menus before invoking. The sequence string is
	// colon-delimited. Example: "Alt+F:N" in a traditional "New..." menu item.
	// - The shortcut, if it exists, will invoke the same action without showing
	// the component or its enclosing menus or dialogs. Example: "Ctrl+N" in a
	// traditional "New..." menu item.
	//
	// Example: For a traditional "New..." menu item, the expected return value
	// would be: "N;Alt+F:N;Ctrl+N" for the English locale and
	// "N;Alt+D:N;Strg+N" for the German locale. If, hypothetically, this menu
	// item lacked a mnemonic, it would be represented by ";;Ctrl+N" and
	// ";;Strg+N" respectively.
	//
	// This method is inherited from Action
	GetKeybinding(i int) string
	// GetLocalizedName returns the localized name of the specified action of
	// the object.
	//
	// This method is inherited from Action
	GetLocalizedName(i int) string
	// GetNActions gets the number of accessible actions available on the
	// object. If there are more than one, the first one is considered the
	// "default" action of the object.
	//
	// This method is inherited from Action
	GetNActions() int
	// GetName returns a non-localized string naming the specified action of the
	// object. This name is generally not descriptive of the end result of the
	// action, but instead names the 'interaction type' which the object
	// supports. By convention, the above strings should be used to represent
	// the actions which correspond to the common point-and-click interaction
	// techniques of the same name: i.e. "click", "press", "release", "drag",
	// "drop", "popup", etc. The "popup" action should be used to pop up a
	// context menu for the object, if one exists.
	//
	// For technical reasons, some toolkits cannot guarantee that the reported
	// action is actually 'bound' to a nontrivial user event; i.e. the result of
	// some actions via atk_action_do_action() may be NIL.
	//
	// This method is inherited from Action
	GetName(i int) string
	// SetDescription sets a description of the specified action of the object.
	//
	// This method is inherited from Action
	SetDescription(i int, desc string) bool

	// EndIndex gets the index with the hypertext document at which this link
	// ends.
	EndIndex() int
	// NAnchors gets the number of anchors associated with this hyperlink.
	NAnchors() int
	// Object returns the item associated with this hyperlinks nth anchor. For
	// instance, the returned Object will implement Text if @link_ is a text
	// hyperlink, Image if @link_ is an image hyperlink etc.
	//
	// Multiple anchors are primarily used by client-side image maps.
	Object(i int) Object
	// StartIndex gets the index with the hypertext document at which this link
	// begins.
	StartIndex() int
	// URI: get a the URI associated with the anchor specified by @i of @link_.
	//
	// Multiple anchors are primarily used by client-side image maps.
	URI(i int) string
	// IsInline indicates whether the link currently displays some or all of its
	// content inline. Ordinary HTML links will usually return false, but an
	// inline &lt;src&gt; HTML element will return true.
	IsInline() bool
	// IsSelectedLink determines whether this AtkHyperlink is selected
	//
	// Deprecated: since version 1.8.
	IsSelectedLink() bool
	// IsValid: since the document that a link is associated with may have
	// changed this method returns true if the link is still valid (with respect
	// to the document it references) and false otherwise.
	IsValid() bool
}

// hyperlink implements the Hyperlink interface.
type hyperlink struct {
	*externglib.Object
}

var _ Hyperlink = (*hyperlink)(nil)

// WrapHyperlink wraps a GObject to a type that implements
// interface Hyperlink. It is primarily used internally.
func WrapHyperlink(obj *externglib.Object) Hyperlink {
	return hyperlink{obj}
}

func marshalHyperlink(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapHyperlink(obj), nil
}

func (h hyperlink) AsAction() Action {
	return WrapAction(gextras.InternObject(h))
}

func (a hyperlink) DoAction(i int) bool {
	return WrapAction(gextras.InternObject(a)).DoAction(i)
}

func (a hyperlink) GetDescription(i int) string {
	return WrapAction(gextras.InternObject(a)).GetDescription(i)
}

func (a hyperlink) GetKeybinding(i int) string {
	return WrapAction(gextras.InternObject(a)).GetKeybinding(i)
}

func (a hyperlink) GetLocalizedName(i int) string {
	return WrapAction(gextras.InternObject(a)).GetLocalizedName(i)
}

func (a hyperlink) GetNActions() int {
	return WrapAction(gextras.InternObject(a)).GetNActions()
}

func (a hyperlink) GetName(i int) string {
	return WrapAction(gextras.InternObject(a)).GetName(i)
}

func (a hyperlink) SetDescription(i int, desc string) bool {
	return WrapAction(gextras.InternObject(a)).SetDescription(i, desc)
}

func (l hyperlink) EndIndex() int {
	var _arg0 *C.AtkHyperlink // out
	var _cret C.gint          // in

	_arg0 = (*C.AtkHyperlink)(unsafe.Pointer(l.Native()))

	_cret = C.atk_hyperlink_get_end_index(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (l hyperlink) NAnchors() int {
	var _arg0 *C.AtkHyperlink // out
	var _cret C.gint          // in

	_arg0 = (*C.AtkHyperlink)(unsafe.Pointer(l.Native()))

	_cret = C.atk_hyperlink_get_n_anchors(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (l hyperlink) Object(i int) Object {
	var _arg0 *C.AtkHyperlink // out
	var _arg1 C.gint          // out
	var _cret *C.AtkObject    // in

	_arg0 = (*C.AtkHyperlink)(unsafe.Pointer(l.Native()))
	_arg1 = C.gint(i)

	_cret = C.atk_hyperlink_get_object(_arg0, _arg1)

	var _object Object // out

	_object = gextras.CastObject(externglib.Take(unsafe.Pointer(_cret))).(Object)

	return _object
}

func (l hyperlink) StartIndex() int {
	var _arg0 *C.AtkHyperlink // out
	var _cret C.gint          // in

	_arg0 = (*C.AtkHyperlink)(unsafe.Pointer(l.Native()))

	_cret = C.atk_hyperlink_get_start_index(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (l hyperlink) URI(i int) string {
	var _arg0 *C.AtkHyperlink // out
	var _arg1 C.gint          // out
	var _cret *C.gchar        // in

	_arg0 = (*C.AtkHyperlink)(unsafe.Pointer(l.Native()))
	_arg1 = C.gint(i)

	_cret = C.atk_hyperlink_get_uri(_arg0, _arg1)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

func (l hyperlink) IsInline() bool {
	var _arg0 *C.AtkHyperlink // out
	var _cret C.gboolean      // in

	_arg0 = (*C.AtkHyperlink)(unsafe.Pointer(l.Native()))

	_cret = C.atk_hyperlink_is_inline(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (l hyperlink) IsSelectedLink() bool {
	var _arg0 *C.AtkHyperlink // out
	var _cret C.gboolean      // in

	_arg0 = (*C.AtkHyperlink)(unsafe.Pointer(l.Native()))

	_cret = C.atk_hyperlink_is_selected_link(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (l hyperlink) IsValid() bool {
	var _arg0 *C.AtkHyperlink // out
	var _cret C.gboolean      // in

	_arg0 = (*C.AtkHyperlink)(unsafe.Pointer(l.Native()))

	_cret = C.atk_hyperlink_is_valid(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}
