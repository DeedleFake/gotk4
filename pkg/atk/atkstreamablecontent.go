// Code generated by girgen. DO NOT EDIT.

package atk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: atk
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <atk/atk.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.atk_streamable_content_get_type()), F: marshalStreamableContent},
	})
}

// StreamableContent: an interface whereby an object allows its backing content
// to be streamed to clients. Typical implementors would be images or icons,
// HTML content, or multimedia display/rendering widgets.
//
// Negotiation of content type is allowed. Clients may examine the backing data
// and transform, convert, or parse the content in order to present it in an
// alternate form to end-users.
//
// The AtkStreamableContent interface is particularly useful for saving,
// printing, or post-processing entire documents, or for persisting alternate
// views of a document. If document content itself is being serialized, stored,
// or converted, then use of the AtkStreamableContent interface can help address
// performance issues. Unlike most ATK interfaces, this interface is not
// strongly tied to the current user-agent view of the a particular document,
// but may in some cases give access to the underlying model data.
type StreamableContent interface {
	gextras.Objector

	// MIMEType: get a string representing a URI in IETF standard format (see
	// http://www.ietf.org/rfc/rfc2396.txt) from which the object's content may
	// be streamed in the specified mime-type, if one is available. If mime_type
	// is NULL, the URI for the default (and possibly only) mime-type is
	// returned.
	//
	// Note that it is possible for get_uri to return NULL but for get_stream to
	// work nonetheless, since not all GIOChannels connect to URIs.
	MIMEType(i int) string
	// NMIMETypes: get a string representing a URI in IETF standard format (see
	// http://www.ietf.org/rfc/rfc2396.txt) from which the object's content may
	// be streamed in the specified mime-type, if one is available. If mime_type
	// is NULL, the URI for the default (and possibly only) mime-type is
	// returned.
	//
	// Note that it is possible for get_uri to return NULL but for get_stream to
	// work nonetheless, since not all GIOChannels connect to URIs.
	NMIMETypes() int
	// Stream: get a string representing a URI in IETF standard format (see
	// http://www.ietf.org/rfc/rfc2396.txt) from which the object's content may
	// be streamed in the specified mime-type, if one is available. If mime_type
	// is NULL, the URI for the default (and possibly only) mime-type is
	// returned.
	//
	// Note that it is possible for get_uri to return NULL but for get_stream to
	// work nonetheless, since not all GIOChannels connect to URIs.
	Stream(mimeType string) *glib.IOChannel
	// URI: get a string representing a URI in IETF standard format (see
	// http://www.ietf.org/rfc/rfc2396.txt) from which the object's content may
	// be streamed in the specified mime-type, if one is available. If mime_type
	// is NULL, the URI for the default (and possibly only) mime-type is
	// returned.
	//
	// Note that it is possible for get_uri to return NULL but for get_stream to
	// work nonetheless, since not all GIOChannels connect to URIs.
	URI(mimeType string) string
}

// streamableContent implements the StreamableContent interface.
type streamableContent struct {
	gextras.Objector
}

var _ StreamableContent = (*streamableContent)(nil)

// WrapStreamableContent wraps a GObject to a type that implements
// interface StreamableContent. It is primarily used internally.
func WrapStreamableContent(obj *externglib.Object) StreamableContent {
	return streamableContent{
		Objector: obj,
	}
}

func marshalStreamableContent(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapStreamableContent(obj), nil
}

func (s streamableContent) MIMEType(i int) string {
	var _arg0 *C.AtkStreamableContent // out
	var _arg1 C.gint                  // out
	var _cret *C.gchar                // in

	_arg0 = (*C.AtkStreamableContent)(unsafe.Pointer(s.Native()))
	_arg1 = C.gint(i)

	_cret = C.atk_streamable_content_get_mime_type(_arg0, _arg1)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}

func (s streamableContent) NMIMETypes() int {
	var _arg0 *C.AtkStreamableContent // out
	var _cret C.gint                  // in

	_arg0 = (*C.AtkStreamableContent)(unsafe.Pointer(s.Native()))

	_cret = C.atk_streamable_content_get_n_mime_types(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

func (s streamableContent) Stream(mimeType string) *glib.IOChannel {
	var _arg0 *C.AtkStreamableContent // out
	var _arg1 *C.gchar                // out
	var _cret *C.GIOChannel           // in

	_arg0 = (*C.AtkStreamableContent)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.gchar)(C.CString(mimeType))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.atk_streamable_content_get_stream(_arg0, _arg1)

	var _ioChannel *glib.IOChannel // out

	_ioChannel = (*glib.IOChannel)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(&_ioChannel, func(v **glib.IOChannel) {
		C.free(unsafe.Pointer(v))
	})

	return _ioChannel
}

func (s streamableContent) URI(mimeType string) string {
	var _arg0 *C.AtkStreamableContent // out
	var _arg1 *C.gchar                // out
	var _cret *C.gchar                // in

	_arg0 = (*C.AtkStreamableContent)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.gchar)(C.CString(mimeType))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.atk_streamable_content_get_uri(_arg0, _arg1)

	var _utf8 string // out

	_utf8 = C.GoString(_cret)

	return _utf8
}
