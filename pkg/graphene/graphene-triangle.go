// Code generated by girgen. DO NOT EDIT.

package graphene

import (
	"runtime"
	"unsafe"

	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: graphene-gobject-1.0 graphene-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <graphene-gobject.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.graphene_triangle_get_type()), F: marshalTriangle},
	})
}

// Triangle: triangle.
type Triangle struct {
	native C.graphene_triangle_t
}

// WrapTriangle wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapTriangle(ptr unsafe.Pointer) *Triangle {
	return (*Triangle)(ptr)
}

func marshalTriangle(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return (*Triangle)(unsafe.Pointer(b)), nil
}

// NewTriangleAlloc constructs a struct Triangle.
func NewTriangleAlloc() *Triangle {
	var _cret *C.graphene_triangle_t // in

	_cret = C.graphene_triangle_alloc()

	var _triangle *Triangle // out

	_triangle = (*Triangle)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(_triangle, func(v *Triangle) {
		C.free(unsafe.Pointer(v))
	})

	return _triangle
}

// Native returns the underlying C source pointer.
func (t *Triangle) Native() unsafe.Pointer {
	return unsafe.Pointer(&t.native)
}

// ContainsPoint checks whether the given triangle @t contains the point @p.
func (t *Triangle) ContainsPoint(p *Point3D) bool {
	var _arg0 *C.graphene_triangle_t // out
	var _arg1 *C.graphene_point3d_t  // out
	var _cret C._Bool                // in

	_arg0 = (*C.graphene_triangle_t)(unsafe.Pointer(t))
	_arg1 = (*C.graphene_point3d_t)(unsafe.Pointer(p))

	_cret = C.graphene_triangle_contains_point(_arg0, _arg1)

	var _ok bool // out

	if _cret {
		_ok = true
	}

	return _ok
}

// Equal checks whether the two given #graphene_triangle_t are equal.
func (a *Triangle) Equal(b *Triangle) bool {
	var _arg0 *C.graphene_triangle_t // out
	var _arg1 *C.graphene_triangle_t // out
	var _cret C._Bool                // in

	_arg0 = (*C.graphene_triangle_t)(unsafe.Pointer(a))
	_arg1 = (*C.graphene_triangle_t)(unsafe.Pointer(b))

	_cret = C.graphene_triangle_equal(_arg0, _arg1)

	var _ok bool // out

	if _cret {
		_ok = true
	}

	return _ok
}

// Free frees the resources allocated by graphene_triangle_alloc().
func (t *Triangle) Free() {
	var _arg0 *C.graphene_triangle_t // out

	_arg0 = (*C.graphene_triangle_t)(unsafe.Pointer(t))

	C.graphene_triangle_free(_arg0)
}

// Area computes the area of the given #graphene_triangle_t.
func (t *Triangle) Area() float32 {
	var _arg0 *C.graphene_triangle_t // out
	var _cret C.float                // in

	_arg0 = (*C.graphene_triangle_t)(unsafe.Pointer(t))

	_cret = C.graphene_triangle_get_area(_arg0)

	var _gfloat float32 // out

	_gfloat = float32(_cret)

	return _gfloat
}

// Barycoords computes the barycentric coordinates
// (http://en.wikipedia.org/wiki/Barycentric_coordinate_system) of the given
// point @p.
//
// The point @p must lie on the same plane as the triangle @t; if the point is
// not coplanar, the result of this function is undefined.
//
// If we place the origin in the coordinates of the triangle's A point, the
// barycentric coordinates are `u`, which is on the AC vector; and `v` which is
// on the AB vector:
//
// ! (triangle-barycentric.png)
//
// The returned #graphene_vec2_t contains the following values, in order:
//
//    - `res.x = u`
//    - `res.y = v`
func (t *Triangle) Barycoords(p *Point3D) (Vec2, bool) {
	var _arg0 *C.graphene_triangle_t // out
	var _arg1 *C.graphene_point3d_t  // out
	var _arg2 C.graphene_vec2_t      // in
	var _cret C._Bool                // in

	_arg0 = (*C.graphene_triangle_t)(unsafe.Pointer(t))
	_arg1 = (*C.graphene_point3d_t)(unsafe.Pointer(p))

	_cret = C.graphene_triangle_get_barycoords(_arg0, _arg1, &_arg2)

	var _res Vec2 // out
	var _ok bool  // out

	{
		var refTmpIn *C.graphene_vec2_t
		var refTmpOut *Vec2

		in0 := &_arg2
		refTmpIn = in0

		refTmpOut = (*Vec2)(unsafe.Pointer(refTmpIn))

		_res = *refTmpOut
	}
	if _cret {
		_ok = true
	}

	return _res, _ok
}

// BoundingBox computes the bounding box of the given #graphene_triangle_t.
func (t *Triangle) BoundingBox() Box {
	var _arg0 *C.graphene_triangle_t // out
	var _arg1 C.graphene_box_t       // in

	_arg0 = (*C.graphene_triangle_t)(unsafe.Pointer(t))

	C.graphene_triangle_get_bounding_box(_arg0, &_arg1)

	var _res Box // out

	{
		var refTmpIn *C.graphene_box_t
		var refTmpOut *Box

		in0 := &_arg1
		refTmpIn = in0

		refTmpOut = (*Box)(unsafe.Pointer(refTmpIn))

		_res = *refTmpOut
	}

	return _res
}

// Midpoint computes the coordinates of the midpoint of the given
// #graphene_triangle_t.
//
// The midpoint G is the centroid
// (https://en.wikipedia.org/wiki/Centroid#Triangle_centroid) of the triangle,
// i.e. the intersection of its medians.
func (t *Triangle) Midpoint() Point3D {
	var _arg0 *C.graphene_triangle_t // out
	var _arg1 C.graphene_point3d_t   // in

	_arg0 = (*C.graphene_triangle_t)(unsafe.Pointer(t))

	C.graphene_triangle_get_midpoint(_arg0, &_arg1)

	var _res Point3D // out

	{
		var refTmpIn *C.graphene_point3d_t
		var refTmpOut *Point3D

		in0 := &_arg1
		refTmpIn = in0

		refTmpOut = (*Point3D)(unsafe.Pointer(refTmpIn))

		_res = *refTmpOut
	}

	return _res
}

// Normal computes the normal vector of the given #graphene_triangle_t.
func (t *Triangle) Normal() Vec3 {
	var _arg0 *C.graphene_triangle_t // out
	var _arg1 C.graphene_vec3_t      // in

	_arg0 = (*C.graphene_triangle_t)(unsafe.Pointer(t))

	C.graphene_triangle_get_normal(_arg0, &_arg1)

	var _res Vec3 // out

	{
		var refTmpIn *C.graphene_vec3_t
		var refTmpOut *Vec3

		in0 := &_arg1
		refTmpIn = in0

		refTmpOut = (*Vec3)(unsafe.Pointer(refTmpIn))

		_res = *refTmpOut
	}

	return _res
}

// Plane computes the plane based on the vertices of the given
// #graphene_triangle_t.
func (t *Triangle) Plane() Plane {
	var _arg0 *C.graphene_triangle_t // out
	var _arg1 C.graphene_plane_t     // in

	_arg0 = (*C.graphene_triangle_t)(unsafe.Pointer(t))

	C.graphene_triangle_get_plane(_arg0, &_arg1)

	var _res Plane // out

	{
		var refTmpIn *C.graphene_plane_t
		var refTmpOut *Plane

		in0 := &_arg1
		refTmpIn = in0

		refTmpOut = (*Plane)(unsafe.Pointer(refTmpIn))

		_res = *refTmpOut
	}

	return _res
}

// Points retrieves the three vertices of the given #graphene_triangle_t and
// returns their coordinates as #graphene_point3d_t.
func (t *Triangle) Points() (a Point3D, b Point3D, c Point3D) {
	var _arg0 *C.graphene_triangle_t // out
	var _arg1 C.graphene_point3d_t   // in
	var _arg2 C.graphene_point3d_t   // in
	var _arg3 C.graphene_point3d_t   // in

	_arg0 = (*C.graphene_triangle_t)(unsafe.Pointer(t))

	C.graphene_triangle_get_points(_arg0, &_arg1, &_arg2, &_arg3)

	var _a Point3D // out
	var _b Point3D // out
	var _c Point3D // out

	{
		var refTmpIn *C.graphene_point3d_t
		var refTmpOut *Point3D

		in0 := &_arg1
		refTmpIn = in0

		refTmpOut = (*Point3D)(unsafe.Pointer(refTmpIn))

		_a = *refTmpOut
	}
	{
		var refTmpIn *C.graphene_point3d_t
		var refTmpOut *Point3D

		in0 := &_arg2
		refTmpIn = in0

		refTmpOut = (*Point3D)(unsafe.Pointer(refTmpIn))

		_b = *refTmpOut
	}
	{
		var refTmpIn *C.graphene_point3d_t
		var refTmpOut *Point3D

		in0 := &_arg3
		refTmpIn = in0

		refTmpOut = (*Point3D)(unsafe.Pointer(refTmpIn))

		_c = *refTmpOut
	}

	return _a, _b, _c
}

// Uv computes the UV coordinates of the given point @p.
//
// The point @p must lie on the same plane as the triangle @t; if the point is
// not coplanar, the result of this function is undefined. If @p is nil, the
// point will be set in (0, 0, 0).
//
// The UV coordinates will be placed in the @res vector:
//
//    - `res.x = u`
//    - `res.y = v`
//
// See also: graphene_triangle_get_barycoords()
func (t *Triangle) Uv(p *Point3D, uvA *Vec2, uvB *Vec2, uvC *Vec2) (Vec2, bool) {
	var _arg0 *C.graphene_triangle_t // out
	var _arg1 *C.graphene_point3d_t  // out
	var _arg2 *C.graphene_vec2_t     // out
	var _arg3 *C.graphene_vec2_t     // out
	var _arg4 *C.graphene_vec2_t     // out
	var _arg5 C.graphene_vec2_t      // in
	var _cret C._Bool                // in

	_arg0 = (*C.graphene_triangle_t)(unsafe.Pointer(t))
	_arg1 = (*C.graphene_point3d_t)(unsafe.Pointer(p))
	_arg2 = (*C.graphene_vec2_t)(unsafe.Pointer(uvA))
	_arg3 = (*C.graphene_vec2_t)(unsafe.Pointer(uvB))
	_arg4 = (*C.graphene_vec2_t)(unsafe.Pointer(uvC))

	_cret = C.graphene_triangle_get_uv(_arg0, _arg1, _arg2, _arg3, _arg4, &_arg5)

	var _res Vec2 // out
	var _ok bool  // out

	{
		var refTmpIn *C.graphene_vec2_t
		var refTmpOut *Vec2

		in0 := &_arg5
		refTmpIn = in0

		refTmpOut = (*Vec2)(unsafe.Pointer(refTmpIn))

		_res = *refTmpOut
	}
	if _cret {
		_ok = true
	}

	return _res, _ok
}

// Vertices retrieves the three vertices of the given #graphene_triangle_t.
func (t *Triangle) Vertices() (a Vec3, b Vec3, c Vec3) {
	var _arg0 *C.graphene_triangle_t // out
	var _arg1 C.graphene_vec3_t      // in
	var _arg2 C.graphene_vec3_t      // in
	var _arg3 C.graphene_vec3_t      // in

	_arg0 = (*C.graphene_triangle_t)(unsafe.Pointer(t))

	C.graphene_triangle_get_vertices(_arg0, &_arg1, &_arg2, &_arg3)

	var _a Vec3 // out
	var _b Vec3 // out
	var _c Vec3 // out

	{
		var refTmpIn *C.graphene_vec3_t
		var refTmpOut *Vec3

		in0 := &_arg1
		refTmpIn = in0

		refTmpOut = (*Vec3)(unsafe.Pointer(refTmpIn))

		_a = *refTmpOut
	}
	{
		var refTmpIn *C.graphene_vec3_t
		var refTmpOut *Vec3

		in0 := &_arg2
		refTmpIn = in0

		refTmpOut = (*Vec3)(unsafe.Pointer(refTmpIn))

		_b = *refTmpOut
	}
	{
		var refTmpIn *C.graphene_vec3_t
		var refTmpOut *Vec3

		in0 := &_arg3
		refTmpIn = in0

		refTmpOut = (*Vec3)(unsafe.Pointer(refTmpIn))

		_c = *refTmpOut
	}

	return _a, _b, _c
}

// InitFromFloat initializes a #graphene_triangle_t using the three given arrays
// of floating point values, each representing the coordinates of a point in 3D
// space.
func (t *Triangle) InitFromFloat(a [3]float32, b [3]float32, c [3]float32) *Triangle {
	var _arg0 *C.graphene_triangle_t // out
	var _arg1 *C.float
	var _arg2 *C.float
	var _arg3 *C.float
	var _cret *C.graphene_triangle_t // in

	_arg0 = (*C.graphene_triangle_t)(unsafe.Pointer(t))
	_arg1 = (*C.float)(unsafe.Pointer(&a))
	_arg2 = (*C.float)(unsafe.Pointer(&b))
	_arg3 = (*C.float)(unsafe.Pointer(&c))

	_cret = C.graphene_triangle_init_from_float(_arg0, _arg1, _arg2, _arg3)

	var _triangle *Triangle // out

	_triangle = (*Triangle)(unsafe.Pointer(_cret))

	return _triangle
}

// InitFromPoint3D initializes a #graphene_triangle_t using the three given 3D
// points.
func (t *Triangle) InitFromPoint3D(a *Point3D, b *Point3D, c *Point3D) *Triangle {
	var _arg0 *C.graphene_triangle_t // out
	var _arg1 *C.graphene_point3d_t  // out
	var _arg2 *C.graphene_point3d_t  // out
	var _arg3 *C.graphene_point3d_t  // out
	var _cret *C.graphene_triangle_t // in

	_arg0 = (*C.graphene_triangle_t)(unsafe.Pointer(t))
	_arg1 = (*C.graphene_point3d_t)(unsafe.Pointer(a))
	_arg2 = (*C.graphene_point3d_t)(unsafe.Pointer(b))
	_arg3 = (*C.graphene_point3d_t)(unsafe.Pointer(c))

	_cret = C.graphene_triangle_init_from_point3d(_arg0, _arg1, _arg2, _arg3)

	var _triangle *Triangle // out

	_triangle = (*Triangle)(unsafe.Pointer(_cret))

	return _triangle
}

// InitFromVec3 initializes a #graphene_triangle_t using the three given
// vectors.
func (t *Triangle) InitFromVec3(a *Vec3, b *Vec3, c *Vec3) *Triangle {
	var _arg0 *C.graphene_triangle_t // out
	var _arg1 *C.graphene_vec3_t     // out
	var _arg2 *C.graphene_vec3_t     // out
	var _arg3 *C.graphene_vec3_t     // out
	var _cret *C.graphene_triangle_t // in

	_arg0 = (*C.graphene_triangle_t)(unsafe.Pointer(t))
	_arg1 = (*C.graphene_vec3_t)(unsafe.Pointer(a))
	_arg2 = (*C.graphene_vec3_t)(unsafe.Pointer(b))
	_arg3 = (*C.graphene_vec3_t)(unsafe.Pointer(c))

	_cret = C.graphene_triangle_init_from_vec3(_arg0, _arg1, _arg2, _arg3)

	var _triangle *Triangle // out

	_triangle = (*Triangle)(unsafe.Pointer(_cret))

	return _triangle
}
