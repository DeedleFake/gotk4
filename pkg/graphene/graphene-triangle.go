// Code generated by girgen. DO NOT EDIT.

package graphene

import (
	"runtime"
	"unsafe"

	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: graphene-gobject-1.0 graphene-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <graphene-gobject.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.graphene_triangle_get_type()), F: marshalTriangle},
	})
}

// Triangle: triangle.
type Triangle struct {
	native C.graphene_triangle_t
}

// WrapTriangle wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapTriangle(ptr unsafe.Pointer) *Triangle {
	return (*Triangle)(ptr)
}

func marshalTriangle(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return (*Triangle)(unsafe.Pointer(b)), nil
}

// NewTriangleAlloc constructs a struct Triangle.
func NewTriangleAlloc() *Triangle {
	var _cret *C.graphene_triangle_t // in

	_cret = C.graphene_triangle_alloc()

	var _triangle *Triangle // out

	_triangle = (*Triangle)(unsafe.Pointer(*C.graphene_triangle_t))
	runtime.SetFinalizer(_triangle, func(v *Triangle) {
		C.free(unsafe.Pointer(v))
	})

	return _triangle
}

// Native returns the underlying C source pointer.
func (t *Triangle) Native() unsafe.Pointer {
	return unsafe.Pointer(&t.native)
}

// ContainsPoint checks whether the given triangle @t contains the point @p.
func (t *Triangle) ContainsPoint(p *Point3D) bool {
	var _arg0 *C.graphene_triangle_t // out
	var _arg1 *C.graphene_point3d_t  // out
	var _cret C._Bool                // in

	_arg0 = (*C.graphene_triangle_t)(unsafe.Pointer(*Triangle))
	_arg1 = (*C.graphene_point3d_t)(unsafe.Pointer(*Point3D))

	_cret = C.graphene_triangle_contains_point(_arg0, _arg1)

	var _ok bool // out

	if _cret {
		_ok = true
	}

	return _ok
}

// Equal checks whether the two given #graphene_triangle_t are equal.
func (a *Triangle) Equal(b *Triangle) bool {
	var _arg0 *C.graphene_triangle_t // out
	var _arg1 *C.graphene_triangle_t // out
	var _cret C._Bool                // in

	_arg0 = (*C.graphene_triangle_t)(unsafe.Pointer(*Triangle))
	_arg1 = (*C.graphene_triangle_t)(unsafe.Pointer(*Triangle))

	_cret = C.graphene_triangle_equal(_arg0, _arg1)

	var _ok bool // out

	if _cret {
		_ok = true
	}

	return _ok
}

// Free frees the resources allocated by graphene_triangle_alloc().
func (t *Triangle) free() {
	var _arg0 *C.graphene_triangle_t // out

	_arg0 = (*C.graphene_triangle_t)(unsafe.Pointer(*Triangle))

	C.graphene_triangle_free(_arg0)
}

// Area computes the area of the given #graphene_triangle_t.
func (t *Triangle) Area() float32 {
	var _arg0 *C.graphene_triangle_t // out
	var _cret C.float                // in

	_arg0 = (*C.graphene_triangle_t)(unsafe.Pointer(*Triangle))

	_cret = C.graphene_triangle_get_area(_arg0)

	var _gfloat float32 // out

	_gfloat = float32(_cret)

	return _gfloat
}

// InitFromFloat initializes a #graphene_triangle_t using the three given arrays
// of floating point values, each representing the coordinates of a point in 3D
// space.
func (t *Triangle) InitFromFloat(a [3]float32, b [3]float32, c [3]float32) *Triangle {
	var _arg0 *C.graphene_triangle_t // out
	var _arg1 *C.float
	var _arg2 *C.float
	var _arg3 *C.float
	var _cret *C.graphene_triangle_t // in

	_arg0 = (*C.graphene_triangle_t)(unsafe.Pointer(*Triangle))
	_arg1 = (*C.float)(unsafe.Pointer(&a))
	_arg2 = (*C.float)(unsafe.Pointer(&b))
	_arg3 = (*C.float)(unsafe.Pointer(&c))

	_cret = C.graphene_triangle_init_from_float(_arg0, _arg1, _arg2, _arg3)

	var _triangle *Triangle // out

	_triangle = (*Triangle)(unsafe.Pointer(*C.graphene_triangle_t))

	return _triangle
}

// InitFromPoint3D initializes a #graphene_triangle_t using the three given 3D
// points.
func (t *Triangle) InitFromPoint3D(a *Point3D, b *Point3D, c *Point3D) *Triangle {
	var _arg0 *C.graphene_triangle_t // out
	var _arg1 *C.graphene_point3d_t  // out
	var _arg2 *C.graphene_point3d_t  // out
	var _arg3 *C.graphene_point3d_t  // out
	var _cret *C.graphene_triangle_t // in

	_arg0 = (*C.graphene_triangle_t)(unsafe.Pointer(*Triangle))
	_arg1 = (*C.graphene_point3d_t)(unsafe.Pointer(*Point3D))
	_arg2 = (*C.graphene_point3d_t)(unsafe.Pointer(*Point3D))
	_arg3 = (*C.graphene_point3d_t)(unsafe.Pointer(*Point3D))

	_cret = C.graphene_triangle_init_from_point3d(_arg0, _arg1, _arg2, _arg3)

	var _triangle *Triangle // out

	_triangle = (*Triangle)(unsafe.Pointer(*C.graphene_triangle_t))

	return _triangle
}

// InitFromVec3 initializes a #graphene_triangle_t using the three given
// vectors.
func (t *Triangle) InitFromVec3(a *Vec3, b *Vec3, c *Vec3) *Triangle {
	var _arg0 *C.graphene_triangle_t // out
	var _arg1 *C.graphene_vec3_t     // out
	var _arg2 *C.graphene_vec3_t     // out
	var _arg3 *C.graphene_vec3_t     // out
	var _cret *C.graphene_triangle_t // in

	_arg0 = (*C.graphene_triangle_t)(unsafe.Pointer(*Triangle))
	_arg1 = (*C.graphene_vec3_t)(unsafe.Pointer(*Vec3))
	_arg2 = (*C.graphene_vec3_t)(unsafe.Pointer(*Vec3))
	_arg3 = (*C.graphene_vec3_t)(unsafe.Pointer(*Vec3))

	_cret = C.graphene_triangle_init_from_vec3(_arg0, _arg1, _arg2, _arg3)

	var _triangle *Triangle // out

	_triangle = (*Triangle)(unsafe.Pointer(*C.graphene_triangle_t))

	return _triangle
}
