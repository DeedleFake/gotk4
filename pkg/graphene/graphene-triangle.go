// Code generated by girgen. DO NOT EDIT.

package graphene

import (
	"unsafe"

	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: graphene-gobject-1.0 graphene-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <graphene-gobject.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.graphene_triangle_get_type()), F: marshalTriangle},
	})
}

// Triangle: a triangle.
type Triangle struct {
	native C.graphene_triangle_t
}

// WrapTriangle wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapTriangle(ptr unsafe.Pointer) *Triangle {
	if ptr == nil {
		return nil
	}

	return (*Triangle)(ptr)
}

func marshalTriangle(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapTriangle(unsafe.Pointer(b)), nil
}

// NewTriangleAlloc constructs a struct Triangle.
func NewTriangleAlloc() {
	C.graphene_triangle_alloc()
}

// Native returns the underlying C source pointer.
func (t *Triangle) Native() unsafe.Pointer {
	return unsafe.Pointer(&t.native)
}

// ContainsPoint checks whether the given triangle @t contains the point @p.
func (t *Triangle) ContainsPoint(t *Triangle, p *Point3D) bool {
	var arg0 *C.graphene_triangle_t
	var arg1 *C.graphene_point3d_t

	arg0 = (*C.graphene_triangle_t)(unsafe.Pointer(t.Native()))
	arg1 = (*C.graphene_point3d_t)(unsafe.Pointer(p.Native()))

	var cret C._Bool
	var ok bool

	cret = C.graphene_triangle_contains_point(arg0, arg1)

	if cret {
		ok = true
	}

	return ok
}

// Equal checks whether the two given #graphene_triangle_t are equal.
func (a *Triangle) Equal(a *Triangle, b *Triangle) bool {
	var arg0 *C.graphene_triangle_t
	var arg1 *C.graphene_triangle_t

	arg0 = (*C.graphene_triangle_t)(unsafe.Pointer(a.Native()))
	arg1 = (*C.graphene_triangle_t)(unsafe.Pointer(b.Native()))

	var cret C._Bool
	var ok bool

	cret = C.graphene_triangle_equal(arg0, arg1)

	if cret {
		ok = true
	}

	return ok
}

// Free frees the resources allocated by graphene_triangle_alloc().
func (t *Triangle) Free(t *Triangle) {
	var arg0 *C.graphene_triangle_t

	arg0 = (*C.graphene_triangle_t)(unsafe.Pointer(t.Native()))

	C.graphene_triangle_free(arg0)
}

// Area computes the area of the given #graphene_triangle_t.
func (t *Triangle) Area(t *Triangle) {
	var arg0 *C.graphene_triangle_t

	arg0 = (*C.graphene_triangle_t)(unsafe.Pointer(t.Native()))

	C.graphene_triangle_get_area(arg0)
}

// Barycoords computes the barycentric coordinates
// (http://en.wikipedia.org/wiki/Barycentric_coordinate_system) of the given
// point @p.
//
// The point @p must lie on the same plane as the triangle @t; if the point is
// not coplanar, the result of this function is undefined.
//
// If we place the origin in the coordinates of the triangle's A point, the
// barycentric coordinates are `u`, which is on the AC vector; and `v` which is
// on the AB vector:
//
// ! (triangle-barycentric.png)
//
// The returned #graphene_vec2_t contains the following values, in order:
//
//    - `res.x = u`
//    - `res.y = v`
func (t *Triangle) Barycoords(t *Triangle, p *Point3D) (res *Vec2, ok bool) {
	var arg0 *C.graphene_triangle_t
	var arg1 *C.graphene_point3d_t

	arg0 = (*C.graphene_triangle_t)(unsafe.Pointer(t.Native()))
	arg1 = (*C.graphene_point3d_t)(unsafe.Pointer(p.Native()))

	var arg2 C.graphene_vec2_t
	var res *Vec2
	var cret C._Bool
	var ok bool

	cret = C.graphene_triangle_get_barycoords(arg0, arg1, &arg2)

	res = WrapVec2(unsafe.Pointer(&arg2))
	if cret {
		ok = true
	}

	return res, ok
}

// BoundingBox computes the bounding box of the given #graphene_triangle_t.
func (t *Triangle) BoundingBox(t *Triangle) *Box {
	var arg0 *C.graphene_triangle_t

	arg0 = (*C.graphene_triangle_t)(unsafe.Pointer(t.Native()))

	var arg1 C.graphene_box_t
	var res *Box

	C.graphene_triangle_get_bounding_box(arg0, &arg1)

	res = WrapBox(unsafe.Pointer(&arg1))

	return res
}

// Midpoint computes the coordinates of the midpoint of the given
// #graphene_triangle_t.
//
// The midpoint G is the centroid
// (https://en.wikipedia.org/wiki/Centroid#Triangle_centroid) of the triangle,
// i.e. the intersection of its medians.
func (t *Triangle) Midpoint(t *Triangle) *Point3D {
	var arg0 *C.graphene_triangle_t

	arg0 = (*C.graphene_triangle_t)(unsafe.Pointer(t.Native()))

	var arg1 C.graphene_point3d_t
	var res *Point3D

	C.graphene_triangle_get_midpoint(arg0, &arg1)

	res = WrapPoint3D(unsafe.Pointer(&arg1))

	return res
}

// Normal computes the normal vector of the given #graphene_triangle_t.
func (t *Triangle) Normal(t *Triangle) *Vec3 {
	var arg0 *C.graphene_triangle_t

	arg0 = (*C.graphene_triangle_t)(unsafe.Pointer(t.Native()))

	var arg1 C.graphene_vec3_t
	var res *Vec3

	C.graphene_triangle_get_normal(arg0, &arg1)

	res = WrapVec3(unsafe.Pointer(&arg1))

	return res
}

// Plane computes the plane based on the vertices of the given
// #graphene_triangle_t.
func (t *Triangle) Plane(t *Triangle) *Plane {
	var arg0 *C.graphene_triangle_t

	arg0 = (*C.graphene_triangle_t)(unsafe.Pointer(t.Native()))

	var arg1 C.graphene_plane_t
	var res *Plane

	C.graphene_triangle_get_plane(arg0, &arg1)

	res = WrapPlane(unsafe.Pointer(&arg1))

	return res
}

// Points retrieves the three vertices of the given #graphene_triangle_t and
// returns their coordinates as #graphene_point3d_t.
func (t *Triangle) Points(t *Triangle) (a *Point3D, b *Point3D, c *Point3D) {
	var arg0 *C.graphene_triangle_t

	arg0 = (*C.graphene_triangle_t)(unsafe.Pointer(t.Native()))

	var arg1 C.graphene_point3d_t
	var a *Point3D
	var arg2 C.graphene_point3d_t
	var b *Point3D
	var arg3 C.graphene_point3d_t
	var c *Point3D

	C.graphene_triangle_get_points(arg0, &arg1, &arg2, &arg3)

	a = WrapPoint3D(unsafe.Pointer(&arg1))
	b = WrapPoint3D(unsafe.Pointer(&arg2))
	c = WrapPoint3D(unsafe.Pointer(&arg3))

	return a, b, c
}

// Uv computes the UV coordinates of the given point @p.
//
// The point @p must lie on the same plane as the triangle @t; if the point is
// not coplanar, the result of this function is undefined. If @p is nil, the
// point will be set in (0, 0, 0).
//
// The UV coordinates will be placed in the @res vector:
//
//    - `res.x = u`
//    - `res.y = v`
//
// See also: graphene_triangle_get_barycoords()
func (t *Triangle) Uv(t *Triangle, p *Point3D, uvA *Vec2, uvB *Vec2, uvC *Vec2) (res *Vec2, ok bool) {
	var arg0 *C.graphene_triangle_t
	var arg1 *C.graphene_point3d_t
	var arg2 *C.graphene_vec2_t
	var arg3 *C.graphene_vec2_t
	var arg4 *C.graphene_vec2_t

	arg0 = (*C.graphene_triangle_t)(unsafe.Pointer(t.Native()))
	arg1 = (*C.graphene_point3d_t)(unsafe.Pointer(p.Native()))
	arg2 = (*C.graphene_vec2_t)(unsafe.Pointer(uvA.Native()))
	arg3 = (*C.graphene_vec2_t)(unsafe.Pointer(uvB.Native()))
	arg4 = (*C.graphene_vec2_t)(unsafe.Pointer(uvC.Native()))

	var arg5 C.graphene_vec2_t
	var res *Vec2
	var cret C._Bool
	var ok bool

	cret = C.graphene_triangle_get_uv(arg0, arg1, arg2, arg3, arg4, &arg5)

	res = WrapVec2(unsafe.Pointer(&arg5))
	if cret {
		ok = true
	}

	return res, ok
}

// Vertices retrieves the three vertices of the given #graphene_triangle_t.
func (t *Triangle) Vertices(t *Triangle) (a *Vec3, b *Vec3, c *Vec3) {
	var arg0 *C.graphene_triangle_t

	arg0 = (*C.graphene_triangle_t)(unsafe.Pointer(t.Native()))

	var arg1 C.graphene_vec3_t
	var a *Vec3
	var arg2 C.graphene_vec3_t
	var b *Vec3
	var arg3 C.graphene_vec3_t
	var c *Vec3

	C.graphene_triangle_get_vertices(arg0, &arg1, &arg2, &arg3)

	a = WrapVec3(unsafe.Pointer(&arg1))
	b = WrapVec3(unsafe.Pointer(&arg2))
	c = WrapVec3(unsafe.Pointer(&arg3))

	return a, b, c
}

// InitFromFloat initializes a #graphene_triangle_t using the three given arrays
// of floating point values, each representing the coordinates of a point in 3D
// space.
func (t *Triangle) InitFromFloat(t *Triangle, a [3]float32, b [3]float32, c [3]float32) {
	var arg0 *C.graphene_triangle_t
	var arg1 *C.float
	var arg2 *C.float
	var arg3 *C.float

	arg0 = (*C.graphene_triangle_t)(unsafe.Pointer(t.Native()))
	arg1 = (*C.float)(&a)
	defer runtime.KeepAlive(&arg1)
	arg2 = (*C.float)(&b)
	defer runtime.KeepAlive(&arg2)
	arg3 = (*C.float)(&c)
	defer runtime.KeepAlive(&arg3)

	C.graphene_triangle_init_from_float(arg0, arg1, arg2, arg3)
}

// InitFromPoint3D initializes a #graphene_triangle_t using the three given 3D
// points.
func (t *Triangle) InitFromPoint3D(t *Triangle, a *Point3D, b *Point3D, c *Point3D) {
	var arg0 *C.graphene_triangle_t
	var arg1 *C.graphene_point3d_t
	var arg2 *C.graphene_point3d_t
	var arg3 *C.graphene_point3d_t

	arg0 = (*C.graphene_triangle_t)(unsafe.Pointer(t.Native()))
	arg1 = (*C.graphene_point3d_t)(unsafe.Pointer(a.Native()))
	arg2 = (*C.graphene_point3d_t)(unsafe.Pointer(b.Native()))
	arg3 = (*C.graphene_point3d_t)(unsafe.Pointer(c.Native()))

	C.graphene_triangle_init_from_point3d(arg0, arg1, arg2, arg3)
}

// InitFromVec3 initializes a #graphene_triangle_t using the three given
// vectors.
func (t *Triangle) InitFromVec3(t *Triangle, a *Vec3, b *Vec3, c *Vec3) {
	var arg0 *C.graphene_triangle_t
	var arg1 *C.graphene_vec3_t
	var arg2 *C.graphene_vec3_t
	var arg3 *C.graphene_vec3_t

	arg0 = (*C.graphene_triangle_t)(unsafe.Pointer(t.Native()))
	arg1 = (*C.graphene_vec3_t)(unsafe.Pointer(a.Native()))
	arg2 = (*C.graphene_vec3_t)(unsafe.Pointer(b.Native()))
	arg3 = (*C.graphene_vec3_t)(unsafe.Pointer(c.Native()))

	C.graphene_triangle_init_from_vec3(arg0, arg1, arg2, arg3)
}
