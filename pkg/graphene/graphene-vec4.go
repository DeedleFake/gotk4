// Code generated by girgen. DO NOT EDIT.

package graphene

import (
	"unsafe"

	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: graphene-gobject-1.0 graphene-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <graphene-gobject.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.graphene_vec4_get_type()), F: marshalVec4},
	})
}

// Vec4One retrieves a pointer to a #graphene_vec4_t with all its components set
// to 1.
func Vec4One() {
	C.graphene_vec4_one()
}

// Vec4WAxis retrieves a pointer to a #graphene_vec4_t with its components set
// to (0, 0, 0, 1).
func Vec4WAxis() {
	C.graphene_vec4_w_axis()
}

// Vec4XAxis retrieves a pointer to a #graphene_vec4_t with its components set
// to (1, 0, 0, 0).
func Vec4XAxis() {
	C.graphene_vec4_x_axis()
}

// Vec4YAxis retrieves a pointer to a #graphene_vec4_t with its components set
// to (0, 1, 0, 0).
func Vec4YAxis() {
	C.graphene_vec4_y_axis()
}

// Vec4ZAxis retrieves a pointer to a #graphene_vec4_t with its components set
// to (0, 0, 1, 0).
func Vec4ZAxis() {
	C.graphene_vec4_z_axis()
}

// Vec4Zero retrieves a pointer to a #graphene_vec4_t with all its components
// set to 0.
func Vec4Zero() {
	C.graphene_vec4_zero()
}

// Vec4: a structure capable of holding a vector with four dimensions: x, y, z,
// and w.
//
// The contents of the #graphene_vec4_t structure are private and should never
// be accessed directly.
type Vec4 struct {
	native C.graphene_vec4_t
}

// WrapVec4 wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapVec4(ptr unsafe.Pointer) *Vec4 {
	if ptr == nil {
		return nil
	}

	return (*Vec4)(ptr)
}

func marshalVec4(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapVec4(unsafe.Pointer(b)), nil
}

// NewVec4Alloc constructs a struct Vec4.
func NewVec4Alloc() {
	C.graphene_vec4_alloc()
}

// Native returns the underlying C source pointer.
func (v *Vec4) Native() unsafe.Pointer {
	return unsafe.Pointer(&v.native)
}

// Add adds each component of the two given vectors.
func (a *Vec4) Add(a *Vec4, b *Vec4) *Vec4 {
	var arg0 *C.graphene_vec4_t
	var arg1 *C.graphene_vec4_t

	arg0 = (*C.graphene_vec4_t)(unsafe.Pointer(a.Native()))
	arg1 = (*C.graphene_vec4_t)(unsafe.Pointer(b.Native()))

	var arg2 C.graphene_vec4_t
	var res *Vec4

	C.graphene_vec4_add(arg0, arg1, &arg2)

	res = WrapVec4(unsafe.Pointer(&arg2))

	return res
}

// Divide divides each component of the first operand @a by the corresponding
// component of the second operand @b, and places the results into the vector
// @res.
func (a *Vec4) Divide(a *Vec4, b *Vec4) *Vec4 {
	var arg0 *C.graphene_vec4_t
	var arg1 *C.graphene_vec4_t

	arg0 = (*C.graphene_vec4_t)(unsafe.Pointer(a.Native()))
	arg1 = (*C.graphene_vec4_t)(unsafe.Pointer(b.Native()))

	var arg2 C.graphene_vec4_t
	var res *Vec4

	C.graphene_vec4_divide(arg0, arg1, &arg2)

	res = WrapVec4(unsafe.Pointer(&arg2))

	return res
}

// Dot computes the dot product of the two given vectors.
func (a *Vec4) Dot(a *Vec4, b *Vec4) {
	var arg0 *C.graphene_vec4_t
	var arg1 *C.graphene_vec4_t

	arg0 = (*C.graphene_vec4_t)(unsafe.Pointer(a.Native()))
	arg1 = (*C.graphene_vec4_t)(unsafe.Pointer(b.Native()))

	C.graphene_vec4_dot(arg0, arg1)
}

// Equal checks whether the two given #graphene_vec4_t are equal.
func (v *Vec4) Equal(v *Vec4, v2 *Vec4) bool {
	var arg0 *C.graphene_vec4_t
	var arg1 *C.graphene_vec4_t

	arg0 = (*C.graphene_vec4_t)(unsafe.Pointer(v.Native()))
	arg1 = (*C.graphene_vec4_t)(unsafe.Pointer(v2.Native()))

	var cret C._Bool
	var ok bool

	cret = C.graphene_vec4_equal(arg0, arg1)

	if cret {
		ok = true
	}

	return ok
}

// Free frees the resources allocated by @v
func (v *Vec4) Free(v *Vec4) {
	var arg0 *C.graphene_vec4_t

	arg0 = (*C.graphene_vec4_t)(unsafe.Pointer(v.Native()))

	C.graphene_vec4_free(arg0)
}

// W retrieves the value of the fourth component of the given #graphene_vec4_t.
func (v *Vec4) W(v *Vec4) {
	var arg0 *C.graphene_vec4_t

	arg0 = (*C.graphene_vec4_t)(unsafe.Pointer(v.Native()))

	C.graphene_vec4_get_w(arg0)
}

// X retrieves the value of the first component of the given #graphene_vec4_t.
func (v *Vec4) X(v *Vec4) {
	var arg0 *C.graphene_vec4_t

	arg0 = (*C.graphene_vec4_t)(unsafe.Pointer(v.Native()))

	C.graphene_vec4_get_x(arg0)
}

// XY creates a #graphene_vec2_t that contains the first two components of the
// given #graphene_vec4_t.
func (v *Vec4) XY(v *Vec4) *Vec2 {
	var arg0 *C.graphene_vec4_t

	arg0 = (*C.graphene_vec4_t)(unsafe.Pointer(v.Native()))

	var arg1 C.graphene_vec2_t
	var res *Vec2

	C.graphene_vec4_get_xy(arg0, &arg1)

	res = WrapVec2(unsafe.Pointer(&arg1))

	return res
}

// XYZ creates a #graphene_vec3_t that contains the first three components of
// the given #graphene_vec4_t.
func (v *Vec4) XYZ(v *Vec4) *Vec3 {
	var arg0 *C.graphene_vec4_t

	arg0 = (*C.graphene_vec4_t)(unsafe.Pointer(v.Native()))

	var arg1 C.graphene_vec3_t
	var res *Vec3

	C.graphene_vec4_get_xyz(arg0, &arg1)

	res = WrapVec3(unsafe.Pointer(&arg1))

	return res
}

// Y retrieves the value of the second component of the given #graphene_vec4_t.
func (v *Vec4) Y(v *Vec4) {
	var arg0 *C.graphene_vec4_t

	arg0 = (*C.graphene_vec4_t)(unsafe.Pointer(v.Native()))

	C.graphene_vec4_get_y(arg0)
}

// Z retrieves the value of the third component of the given #graphene_vec4_t.
func (v *Vec4) Z(v *Vec4) {
	var arg0 *C.graphene_vec4_t

	arg0 = (*C.graphene_vec4_t)(unsafe.Pointer(v.Native()))

	C.graphene_vec4_get_z(arg0)
}

// Init initializes a #graphene_vec4_t using the given values.
//
// This function can be called multiple times.
func (v *Vec4) Init(v *Vec4, x float32, y float32, z float32, w float32) {
	var arg0 *C.graphene_vec4_t
	var arg1 C.float
	var arg2 C.float
	var arg3 C.float
	var arg4 C.float

	arg0 = (*C.graphene_vec4_t)(unsafe.Pointer(v.Native()))
	arg1 = C.float(x)
	arg2 = C.float(y)
	arg3 = C.float(z)
	arg4 = C.float(w)

	C.graphene_vec4_init(arg0, arg1, arg2, arg3, arg4)
}

// InitFromFloat initializes a #graphene_vec4_t with the values inside the given
// array.
func (v *Vec4) InitFromFloat(v *Vec4, src [4]float32) {
	var arg0 *C.graphene_vec4_t
	var arg1 *C.float

	arg0 = (*C.graphene_vec4_t)(unsafe.Pointer(v.Native()))
	arg1 = (*C.float)(&src)
	defer runtime.KeepAlive(&arg1)

	C.graphene_vec4_init_from_float(arg0, arg1)
}

// InitFromVec2 initializes a #graphene_vec4_t using the components of a
// #graphene_vec2_t and the values of @z and @w.
func (v *Vec4) InitFromVec2(v *Vec4, src *Vec2, z float32, w float32) {
	var arg0 *C.graphene_vec4_t
	var arg1 *C.graphene_vec2_t
	var arg2 C.float
	var arg3 C.float

	arg0 = (*C.graphene_vec4_t)(unsafe.Pointer(v.Native()))
	arg1 = (*C.graphene_vec2_t)(unsafe.Pointer(src.Native()))
	arg2 = C.float(z)
	arg3 = C.float(w)

	C.graphene_vec4_init_from_vec2(arg0, arg1, arg2, arg3)
}

// InitFromVec3 initializes a #graphene_vec4_t using the components of a
// #graphene_vec3_t and the value of @w.
func (v *Vec4) InitFromVec3(v *Vec4, src *Vec3, w float32) {
	var arg0 *C.graphene_vec4_t
	var arg1 *C.graphene_vec3_t
	var arg2 C.float

	arg0 = (*C.graphene_vec4_t)(unsafe.Pointer(v.Native()))
	arg1 = (*C.graphene_vec3_t)(unsafe.Pointer(src.Native()))
	arg2 = C.float(w)

	C.graphene_vec4_init_from_vec3(arg0, arg1, arg2)
}

// InitFromVec4 initializes a #graphene_vec4_t using the components of another
// #graphene_vec4_t.
func (v *Vec4) InitFromVec4(v *Vec4, src *Vec4) {
	var arg0 *C.graphene_vec4_t
	var arg1 *C.graphene_vec4_t

	arg0 = (*C.graphene_vec4_t)(unsafe.Pointer(v.Native()))
	arg1 = (*C.graphene_vec4_t)(unsafe.Pointer(src.Native()))

	C.graphene_vec4_init_from_vec4(arg0, arg1)
}

// Interpolate: linearly interpolates @v1 and @v2 using the given @factor.
func (v *Vec4) Interpolate(v *Vec4, v2 *Vec4, factor float64) *Vec4 {
	var arg0 *C.graphene_vec4_t
	var arg1 *C.graphene_vec4_t
	var arg2 C.double

	arg0 = (*C.graphene_vec4_t)(unsafe.Pointer(v.Native()))
	arg1 = (*C.graphene_vec4_t)(unsafe.Pointer(v2.Native()))
	arg2 = C.double(factor)

	var arg3 C.graphene_vec4_t
	var res *Vec4

	C.graphene_vec4_interpolate(arg0, arg1, arg2, &arg3)

	res = WrapVec4(unsafe.Pointer(&arg3))

	return res
}

// Length computes the length of the given #graphene_vec4_t.
func (v *Vec4) Length(v *Vec4) {
	var arg0 *C.graphene_vec4_t

	arg0 = (*C.graphene_vec4_t)(unsafe.Pointer(v.Native()))

	C.graphene_vec4_length(arg0)
}

// Max compares each component of the two given vectors and creates a vector
// that contains the maximum values.
func (a *Vec4) Max(a *Vec4, b *Vec4) *Vec4 {
	var arg0 *C.graphene_vec4_t
	var arg1 *C.graphene_vec4_t

	arg0 = (*C.graphene_vec4_t)(unsafe.Pointer(a.Native()))
	arg1 = (*C.graphene_vec4_t)(unsafe.Pointer(b.Native()))

	var arg2 C.graphene_vec4_t
	var res *Vec4

	C.graphene_vec4_max(arg0, arg1, &arg2)

	res = WrapVec4(unsafe.Pointer(&arg2))

	return res
}

// Min compares each component of the two given vectors and creates a vector
// that contains the minimum values.
func (a *Vec4) Min(a *Vec4, b *Vec4) *Vec4 {
	var arg0 *C.graphene_vec4_t
	var arg1 *C.graphene_vec4_t

	arg0 = (*C.graphene_vec4_t)(unsafe.Pointer(a.Native()))
	arg1 = (*C.graphene_vec4_t)(unsafe.Pointer(b.Native()))

	var arg2 C.graphene_vec4_t
	var res *Vec4

	C.graphene_vec4_min(arg0, arg1, &arg2)

	res = WrapVec4(unsafe.Pointer(&arg2))

	return res
}

// Multiply multiplies each component of the two given vectors.
func (a *Vec4) Multiply(a *Vec4, b *Vec4) *Vec4 {
	var arg0 *C.graphene_vec4_t
	var arg1 *C.graphene_vec4_t

	arg0 = (*C.graphene_vec4_t)(unsafe.Pointer(a.Native()))
	arg1 = (*C.graphene_vec4_t)(unsafe.Pointer(b.Native()))

	var arg2 C.graphene_vec4_t
	var res *Vec4

	C.graphene_vec4_multiply(arg0, arg1, &arg2)

	res = WrapVec4(unsafe.Pointer(&arg2))

	return res
}

// Near compares the two given #graphene_vec4_t vectors and checks whether their
// values are within the given @epsilon.
func (v *Vec4) Near(v *Vec4, v2 *Vec4, epsilon float32) bool {
	var arg0 *C.graphene_vec4_t
	var arg1 *C.graphene_vec4_t
	var arg2 C.float

	arg0 = (*C.graphene_vec4_t)(unsafe.Pointer(v.Native()))
	arg1 = (*C.graphene_vec4_t)(unsafe.Pointer(v2.Native()))
	arg2 = C.float(epsilon)

	var cret C._Bool
	var ok bool

	cret = C.graphene_vec4_near(arg0, arg1, arg2)

	if cret {
		ok = true
	}

	return ok
}

// Negate negates the given #graphene_vec4_t.
func (v *Vec4) Negate(v *Vec4) *Vec4 {
	var arg0 *C.graphene_vec4_t

	arg0 = (*C.graphene_vec4_t)(unsafe.Pointer(v.Native()))

	var arg1 C.graphene_vec4_t
	var res *Vec4

	C.graphene_vec4_negate(arg0, &arg1)

	res = WrapVec4(unsafe.Pointer(&arg1))

	return res
}

// Normalize normalizes the given #graphene_vec4_t.
func (v *Vec4) Normalize(v *Vec4) *Vec4 {
	var arg0 *C.graphene_vec4_t

	arg0 = (*C.graphene_vec4_t)(unsafe.Pointer(v.Native()))

	var arg1 C.graphene_vec4_t
	var res *Vec4

	C.graphene_vec4_normalize(arg0, &arg1)

	res = WrapVec4(unsafe.Pointer(&arg1))

	return res
}

// Scale multiplies all components of the given vector with the given scalar
// @factor.
func (v *Vec4) Scale(v *Vec4, factor float32) *Vec4 {
	var arg0 *C.graphene_vec4_t
	var arg1 C.float

	arg0 = (*C.graphene_vec4_t)(unsafe.Pointer(v.Native()))
	arg1 = C.float(factor)

	var arg2 C.graphene_vec4_t
	var res *Vec4

	C.graphene_vec4_scale(arg0, arg1, &arg2)

	res = WrapVec4(unsafe.Pointer(&arg2))

	return res
}

// Subtract subtracts from each component of the first operand @a the
// corresponding component of the second operand @b and places each result into
// the components of @res.
func (a *Vec4) Subtract(a *Vec4, b *Vec4) *Vec4 {
	var arg0 *C.graphene_vec4_t
	var arg1 *C.graphene_vec4_t

	arg0 = (*C.graphene_vec4_t)(unsafe.Pointer(a.Native()))
	arg1 = (*C.graphene_vec4_t)(unsafe.Pointer(b.Native()))

	var arg2 C.graphene_vec4_t
	var res *Vec4

	C.graphene_vec4_subtract(arg0, arg1, &arg2)

	res = WrapVec4(unsafe.Pointer(&arg2))

	return res
}

// ToFloat stores the components of the given #graphene_vec4_t into an array of
// floating point values.
func (v *Vec4) ToFloat(v *Vec4) [4]float32 {
	var arg0 *C.graphene_vec4_t

	arg0 = (*C.graphene_vec4_t)(unsafe.Pointer(v.Native()))

	var arg1 [4]C.float
	var dest [4]float32

	C.graphene_vec4_to_float(arg0, &arg1)

	dest = ([4]float32)(arg1)

	return dest
}
