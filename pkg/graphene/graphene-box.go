// Code generated by girgen. DO NOT EDIT.

package graphene

import (
	"unsafe"

	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: glib-2.0 graphene-1.0 graphene-gobject-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <graphene-gobject.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.graphene_box_get_type()), F: marshalBox},
	})
}

// Box: a 3D box, described as the volume between a minimum and a maximum
// vertices.
type Box struct {
	native C.graphene_box_t
}

// WrapBox wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapBox(ptr unsafe.Pointer) *Box {
	if ptr == nil {
		return nil
	}

	return (*Box)(ptr)
}

func marshalBox(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapBox(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (b *Box) Native() unsafe.Pointer {
	return unsafe.Pointer(&b.native)
}

// ContainsBox checks whether the #graphene_box_t @a contains the given
// #graphene_box_t @b.
func (a *Box) ContainsBox(b *Box) bool {
	var _arg0 *C.graphene_box_t // out
	var _arg1 *C.graphene_box_t // out

	_arg0 = (*C.graphene_box_t)(unsafe.Pointer(a.Native()))
	_arg1 = (*C.graphene_box_t)(unsafe.Pointer(b.Native()))

	var _cret C._Bool // in

	_cret = C.graphene_box_contains_box(_arg0, _arg1)

	var _ok bool // out

	if _cret {
		_ok = true
	}

	return _ok
}

// ContainsPoint checks whether @box contains the given @point.
func (b *Box) ContainsPoint(point *Point3D) bool {
	var _arg0 *C.graphene_box_t     // out
	var _arg1 *C.graphene_point3d_t // out

	_arg0 = (*C.graphene_box_t)(unsafe.Pointer(b.Native()))
	_arg1 = (*C.graphene_point3d_t)(unsafe.Pointer(point.Native()))

	var _cret C._Bool // in

	_cret = C.graphene_box_contains_point(_arg0, _arg1)

	var _ok bool // out

	if _cret {
		_ok = true
	}

	return _ok
}

// Equal checks whether the two given boxes are equal.
func (a *Box) Equal(b *Box) bool {
	var _arg0 *C.graphene_box_t // out
	var _arg1 *C.graphene_box_t // out

	_arg0 = (*C.graphene_box_t)(unsafe.Pointer(a.Native()))
	_arg1 = (*C.graphene_box_t)(unsafe.Pointer(b.Native()))

	var _cret C._Bool // in

	_cret = C.graphene_box_equal(_arg0, _arg1)

	var _ok bool // out

	if _cret {
		_ok = true
	}

	return _ok
}

// Expand expands the dimensions of @box to include the coordinates at @point.
func (b *Box) Expand(point *Point3D) Box {
	var _arg0 *C.graphene_box_t     // out
	var _arg1 *C.graphene_point3d_t // out

	_arg0 = (*C.graphene_box_t)(unsafe.Pointer(b.Native()))
	_arg1 = (*C.graphene_point3d_t)(unsafe.Pointer(point.Native()))

	var _res Box

	C.graphene_box_expand(_arg0, _arg1, (*C.graphene_box_t)(unsafe.Pointer(&_res)))

	return _res
}

// ExpandScalar expands the dimensions of @box by the given @scalar value.
//
// If @scalar is positive, the #graphene_box_t will grow; if @scalar is
// negative, the #graphene_box_t will shrink.
func (b *Box) ExpandScalar(scalar float32) Box {
	var _arg0 *C.graphene_box_t // out
	var _arg1 C.float           // out

	_arg0 = (*C.graphene_box_t)(unsafe.Pointer(b.Native()))
	_arg1 = C.float(scalar)

	var _res Box

	C.graphene_box_expand_scalar(_arg0, _arg1, (*C.graphene_box_t)(unsafe.Pointer(&_res)))

	return _res
}

// ExpandVec3 expands the dimensions of @box to include the coordinates of the
// given vector.
func (b *Box) ExpandVec3(vec *Vec3) Box {
	var _arg0 *C.graphene_box_t  // out
	var _arg1 *C.graphene_vec3_t // out

	_arg0 = (*C.graphene_box_t)(unsafe.Pointer(b.Native()))
	_arg1 = (*C.graphene_vec3_t)(unsafe.Pointer(vec.Native()))

	var _res Box

	C.graphene_box_expand_vec3(_arg0, _arg1, (*C.graphene_box_t)(unsafe.Pointer(&_res)))

	return _res
}

// Free frees the resources allocated by graphene_box_alloc().
func (b *Box) Free() {
	var _arg0 *C.graphene_box_t // out

	_arg0 = (*C.graphene_box_t)(unsafe.Pointer(b.Native()))

	C.graphene_box_free(_arg0)
}

// BoundingSphere computes the bounding #graphene_sphere_t capable of containing
// the given #graphene_box_t.
func (b *Box) BoundingSphere() Sphere {
	var _arg0 *C.graphene_box_t // out

	_arg0 = (*C.graphene_box_t)(unsafe.Pointer(b.Native()))

	var _sphere Sphere

	C.graphene_box_get_bounding_sphere(_arg0, (*C.graphene_sphere_t)(unsafe.Pointer(&_sphere)))

	return _sphere
}

// Center retrieves the coordinates of the center of a #graphene_box_t.
func (b *Box) Center() Point3D {
	var _arg0 *C.graphene_box_t // out

	_arg0 = (*C.graphene_box_t)(unsafe.Pointer(b.Native()))

	var _center Point3D

	C.graphene_box_get_center(_arg0, (*C.graphene_point3d_t)(unsafe.Pointer(&_center)))

	return _center
}

// Depth retrieves the size of the @box on the Z axis.
func (b *Box) Depth() float32 {
	var _arg0 *C.graphene_box_t // out

	_arg0 = (*C.graphene_box_t)(unsafe.Pointer(b.Native()))

	var _cret C.float // in

	_cret = C.graphene_box_get_depth(_arg0)

	var _gfloat float32 // out

	_gfloat = (float32)(_cret)

	return _gfloat
}

// Height retrieves the size of the @box on the Y axis.
func (b *Box) Height() float32 {
	var _arg0 *C.graphene_box_t // out

	_arg0 = (*C.graphene_box_t)(unsafe.Pointer(b.Native()))

	var _cret C.float // in

	_cret = C.graphene_box_get_height(_arg0)

	var _gfloat float32 // out

	_gfloat = (float32)(_cret)

	return _gfloat
}

// Max retrieves the coordinates of the maximum point of the given
// #graphene_box_t.
func (b *Box) Max() Point3D {
	var _arg0 *C.graphene_box_t // out

	_arg0 = (*C.graphene_box_t)(unsafe.Pointer(b.Native()))

	var _max Point3D

	C.graphene_box_get_max(_arg0, (*C.graphene_point3d_t)(unsafe.Pointer(&_max)))

	return _max
}

// Min retrieves the coordinates of the minimum point of the given
// #graphene_box_t.
func (b *Box) Min() Point3D {
	var _arg0 *C.graphene_box_t // out

	_arg0 = (*C.graphene_box_t)(unsafe.Pointer(b.Native()))

	var _min Point3D

	C.graphene_box_get_min(_arg0, (*C.graphene_point3d_t)(unsafe.Pointer(&_min)))

	return _min
}

// Size retrieves the size of the box on all three axes, and stores it into the
// given @size vector.
func (b *Box) Size() Vec3 {
	var _arg0 *C.graphene_box_t // out

	_arg0 = (*C.graphene_box_t)(unsafe.Pointer(b.Native()))

	var _size Vec3

	C.graphene_box_get_size(_arg0, (*C.graphene_vec3_t)(unsafe.Pointer(&_size)))

	return _size
}

// Width retrieves the size of the @box on the X axis.
func (b *Box) Width() float32 {
	var _arg0 *C.graphene_box_t // out

	_arg0 = (*C.graphene_box_t)(unsafe.Pointer(b.Native()))

	var _cret C.float // in

	_cret = C.graphene_box_get_width(_arg0)

	var _gfloat float32 // out

	_gfloat = (float32)(_cret)

	return _gfloat
}

// Intersection intersects the two given #graphene_box_t.
//
// If the two boxes do not intersect, @res will contain a degenerate box
// initialized with graphene_box_empty().
func (a *Box) Intersection(b *Box) (Box, bool) {
	var _arg0 *C.graphene_box_t // out
	var _arg1 *C.graphene_box_t // out

	_arg0 = (*C.graphene_box_t)(unsafe.Pointer(a.Native()))
	_arg1 = (*C.graphene_box_t)(unsafe.Pointer(b.Native()))

	var _res Box
	var _cret C._Bool // in

	_cret = C.graphene_box_intersection(_arg0, _arg1, (*C.graphene_box_t)(unsafe.Pointer(&_res)))

	var _ok bool // out

	if _cret {
		_ok = true
	}

	return _res, _ok
}

// Union unions the two given #graphene_box_t.
func (a *Box) Union(b *Box) Box {
	var _arg0 *C.graphene_box_t // out
	var _arg1 *C.graphene_box_t // out

	_arg0 = (*C.graphene_box_t)(unsafe.Pointer(a.Native()))
	_arg1 = (*C.graphene_box_t)(unsafe.Pointer(b.Native()))

	var _res Box

	C.graphene_box_union(_arg0, _arg1, (*C.graphene_box_t)(unsafe.Pointer(&_res)))

	return _res
}
