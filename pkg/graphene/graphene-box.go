// Code generated by girgen. DO NOT EDIT.

package graphene

import (
	"runtime"
	"unsafe"

	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: graphene-gobject-1.0 graphene-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <graphene-gobject.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.graphene_box_get_type()), F: marshalBox},
	})
}

// Box: 3D box, described as the volume between a minimum and a maximum
// vertices.
type Box struct {
	native C.graphene_box_t
}

func marshalBox(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return (*Box)(unsafe.Pointer(b)), nil
}

// NewBoxAlloc constructs a struct Box.
func NewBoxAlloc() *Box {
	var _cret *C.graphene_box_t // in

	_cret = C.graphene_box_alloc()

	var _box *Box // out

	_box = (*Box)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(_box, func(v *Box) {
		C.graphene_box_free((*C.graphene_box_t)(unsafe.Pointer(v)))
	})

	return _box
}

// Native returns the underlying C source pointer.
func (b *Box) Native() unsafe.Pointer {
	return unsafe.Pointer(&b.native)
}

// ContainsBox checks whether the #graphene_box_t @a contains the given
// #graphene_box_t @b.
func (a *Box) ContainsBox(b *Box) bool {
	var _arg0 *C.graphene_box_t // out
	var _arg1 *C.graphene_box_t // out
	var _cret C._Bool           // in

	_arg0 = (*C.graphene_box_t)(unsafe.Pointer(a))
	_arg1 = (*C.graphene_box_t)(unsafe.Pointer(b))

	_cret = C.graphene_box_contains_box(_arg0, _arg1)

	var _ok bool // out

	if _cret {
		_ok = true
	}

	return _ok
}

// ContainsPoint checks whether @box contains the given @point.
func (box *Box) ContainsPoint(point *Point3D) bool {
	var _arg0 *C.graphene_box_t     // out
	var _arg1 *C.graphene_point3d_t // out
	var _cret C._Bool               // in

	_arg0 = (*C.graphene_box_t)(unsafe.Pointer(box))
	_arg1 = (*C.graphene_point3d_t)(unsafe.Pointer(point))

	_cret = C.graphene_box_contains_point(_arg0, _arg1)

	var _ok bool // out

	if _cret {
		_ok = true
	}

	return _ok
}

// Equal checks whether the two given boxes are equal.
func (a *Box) Equal(b *Box) bool {
	var _arg0 *C.graphene_box_t // out
	var _arg1 *C.graphene_box_t // out
	var _cret C._Bool           // in

	_arg0 = (*C.graphene_box_t)(unsafe.Pointer(a))
	_arg1 = (*C.graphene_box_t)(unsafe.Pointer(b))

	_cret = C.graphene_box_equal(_arg0, _arg1)

	var _ok bool // out

	if _cret {
		_ok = true
	}

	return _ok
}

// Expand expands the dimensions of @box to include the coordinates at @point.
func (box *Box) Expand(point *Point3D) Box {
	var _arg0 *C.graphene_box_t     // out
	var _arg1 *C.graphene_point3d_t // out
	var _res Box

	_arg0 = (*C.graphene_box_t)(unsafe.Pointer(box))
	_arg1 = (*C.graphene_point3d_t)(unsafe.Pointer(point))

	C.graphene_box_expand(_arg0, _arg1, (*C.graphene_box_t)(unsafe.Pointer(&_res)))

	return _res
}

// ExpandScalar expands the dimensions of @box by the given @scalar value.
//
// If @scalar is positive, the #graphene_box_t will grow; if @scalar is
// negative, the #graphene_box_t will shrink.
func (box *Box) ExpandScalar(scalar float32) Box {
	var _arg0 *C.graphene_box_t // out
	var _arg1 C.float           // out
	var _res Box

	_arg0 = (*C.graphene_box_t)(unsafe.Pointer(box))
	_arg1 = C.float(scalar)

	C.graphene_box_expand_scalar(_arg0, _arg1, (*C.graphene_box_t)(unsafe.Pointer(&_res)))

	return _res
}

// ExpandVec3 expands the dimensions of @box to include the coordinates of the
// given vector.
func (box *Box) ExpandVec3(vec *Vec3) Box {
	var _arg0 *C.graphene_box_t  // out
	var _arg1 *C.graphene_vec3_t // out
	var _res Box

	_arg0 = (*C.graphene_box_t)(unsafe.Pointer(box))
	_arg1 = (*C.graphene_vec3_t)(unsafe.Pointer(vec))

	C.graphene_box_expand_vec3(_arg0, _arg1, (*C.graphene_box_t)(unsafe.Pointer(&_res)))

	return _res
}

// Free frees the resources allocated by graphene_box_alloc().
func (box *Box) free() {
	var _arg0 *C.graphene_box_t // out

	_arg0 = (*C.graphene_box_t)(unsafe.Pointer(box))

	C.graphene_box_free(_arg0)
}

// BoundingSphere computes the bounding #graphene_sphere_t capable of containing
// the given #graphene_box_t.
func (box *Box) BoundingSphere() Sphere {
	var _arg0 *C.graphene_box_t // out
	var _sphere Sphere

	_arg0 = (*C.graphene_box_t)(unsafe.Pointer(box))

	C.graphene_box_get_bounding_sphere(_arg0, (*C.graphene_sphere_t)(unsafe.Pointer(&_sphere)))

	return _sphere
}

// Center retrieves the coordinates of the center of a #graphene_box_t.
func (box *Box) Center() Point3D {
	var _arg0 *C.graphene_box_t // out
	var _center Point3D

	_arg0 = (*C.graphene_box_t)(unsafe.Pointer(box))

	C.graphene_box_get_center(_arg0, (*C.graphene_point3d_t)(unsafe.Pointer(&_center)))

	return _center
}

// Depth retrieves the size of the @box on the Z axis.
func (box *Box) Depth() float32 {
	var _arg0 *C.graphene_box_t // out
	var _cret C.float           // in

	_arg0 = (*C.graphene_box_t)(unsafe.Pointer(box))

	_cret = C.graphene_box_get_depth(_arg0)

	var _gfloat float32 // out

	_gfloat = float32(_cret)

	return _gfloat
}

// Height retrieves the size of the @box on the Y axis.
func (box *Box) Height() float32 {
	var _arg0 *C.graphene_box_t // out
	var _cret C.float           // in

	_arg0 = (*C.graphene_box_t)(unsafe.Pointer(box))

	_cret = C.graphene_box_get_height(_arg0)

	var _gfloat float32 // out

	_gfloat = float32(_cret)

	return _gfloat
}

// Max retrieves the coordinates of the maximum point of the given
// #graphene_box_t.
func (box *Box) Max() Point3D {
	var _arg0 *C.graphene_box_t // out
	var _max Point3D

	_arg0 = (*C.graphene_box_t)(unsafe.Pointer(box))

	C.graphene_box_get_max(_arg0, (*C.graphene_point3d_t)(unsafe.Pointer(&_max)))

	return _max
}

// Min retrieves the coordinates of the minimum point of the given
// #graphene_box_t.
func (box *Box) Min() Point3D {
	var _arg0 *C.graphene_box_t // out
	var _min Point3D

	_arg0 = (*C.graphene_box_t)(unsafe.Pointer(box))

	C.graphene_box_get_min(_arg0, (*C.graphene_point3d_t)(unsafe.Pointer(&_min)))

	return _min
}

// Size retrieves the size of the box on all three axes, and stores it into the
// given @size vector.
func (box *Box) Size() Vec3 {
	var _arg0 *C.graphene_box_t // out
	var _size Vec3

	_arg0 = (*C.graphene_box_t)(unsafe.Pointer(box))

	C.graphene_box_get_size(_arg0, (*C.graphene_vec3_t)(unsafe.Pointer(&_size)))

	return _size
}

// Vertices computes the vertices of the given #graphene_box_t.
func (box *Box) Vertices() [8]Vec3 {
	var _arg0 *C.graphene_box_t // out
	var _arg1 [8]C.graphene_vec3_t

	_arg0 = (*C.graphene_box_t)(unsafe.Pointer(box))

	C.graphene_box_get_vertices(_arg0, &_arg1[0])

	var _vertices [8]Vec3

	_vertices = *(*[8]Vec3)(unsafe.Pointer(&_arg1))

	return _vertices
}

// Width retrieves the size of the @box on the X axis.
func (box *Box) Width() float32 {
	var _arg0 *C.graphene_box_t // out
	var _cret C.float           // in

	_arg0 = (*C.graphene_box_t)(unsafe.Pointer(box))

	_cret = C.graphene_box_get_width(_arg0)

	var _gfloat float32 // out

	_gfloat = float32(_cret)

	return _gfloat
}

// Init initializes the given #graphene_box_t with two vertices.
func (box *Box) Init(min *Point3D, max *Point3D) *Box {
	var _arg0 *C.graphene_box_t     // out
	var _arg1 *C.graphene_point3d_t // out
	var _arg2 *C.graphene_point3d_t // out
	var _cret *C.graphene_box_t     // in

	_arg0 = (*C.graphene_box_t)(unsafe.Pointer(box))
	_arg1 = (*C.graphene_point3d_t)(unsafe.Pointer(min))
	_arg2 = (*C.graphene_point3d_t)(unsafe.Pointer(max))

	_cret = C.graphene_box_init(_arg0, _arg1, _arg2)

	var _ret *Box // out

	_ret = (*Box)(unsafe.Pointer(_cret))

	return _ret
}

// InitFromBox initializes the given #graphene_box_t with the vertices of
// another #graphene_box_t.
func (box *Box) InitFromBox(src *Box) *Box {
	var _arg0 *C.graphene_box_t // out
	var _arg1 *C.graphene_box_t // out
	var _cret *C.graphene_box_t // in

	_arg0 = (*C.graphene_box_t)(unsafe.Pointer(box))
	_arg1 = (*C.graphene_box_t)(unsafe.Pointer(src))

	_cret = C.graphene_box_init_from_box(_arg0, _arg1)

	var _ret *Box // out

	_ret = (*Box)(unsafe.Pointer(_cret))

	return _ret
}

// InitFromPoints initializes the given #graphene_box_t with the given array of
// vertices.
//
// If @n_points is 0, the returned box is initialized with graphene_box_empty().
func (box *Box) InitFromPoints(points []Point3D) *Box {
	var _arg0 *C.graphene_box_t // out
	var _arg2 *C.graphene_point3d_t
	var _arg1 C.uint
	var _cret *C.graphene_box_t // in

	_arg0 = (*C.graphene_box_t)(unsafe.Pointer(box))
	_arg1 = C.uint(len(points))
	if len(points) > 0 {
		_arg2 = (*C.graphene_point3d_t)(unsafe.Pointer(&points[0]))
	}

	_cret = C.graphene_box_init_from_points(_arg0, _arg1, _arg2)

	var _ret *Box // out

	_ret = (*Box)(unsafe.Pointer(_cret))

	return _ret
}

// InitFromVec3 initializes the given #graphene_box_t with two vertices stored
// inside #graphene_vec3_t.
func (box *Box) InitFromVec3(min *Vec3, max *Vec3) *Box {
	var _arg0 *C.graphene_box_t  // out
	var _arg1 *C.graphene_vec3_t // out
	var _arg2 *C.graphene_vec3_t // out
	var _cret *C.graphene_box_t  // in

	_arg0 = (*C.graphene_box_t)(unsafe.Pointer(box))
	_arg1 = (*C.graphene_vec3_t)(unsafe.Pointer(min))
	_arg2 = (*C.graphene_vec3_t)(unsafe.Pointer(max))

	_cret = C.graphene_box_init_from_vec3(_arg0, _arg1, _arg2)

	var _ret *Box // out

	_ret = (*Box)(unsafe.Pointer(_cret))

	return _ret
}

// InitFromVectors initializes the given #graphene_box_t with the given array of
// vertices.
//
// If @n_vectors is 0, the returned box is initialized with
// graphene_box_empty().
func (box *Box) InitFromVectors(vectors []Vec3) *Box {
	var _arg0 *C.graphene_box_t // out
	var _arg2 *C.graphene_vec3_t
	var _arg1 C.uint
	var _cret *C.graphene_box_t // in

	_arg0 = (*C.graphene_box_t)(unsafe.Pointer(box))
	_arg1 = C.uint(len(vectors))
	if len(vectors) > 0 {
		_arg2 = (*C.graphene_vec3_t)(unsafe.Pointer(&vectors[0]))
	}

	_cret = C.graphene_box_init_from_vectors(_arg0, _arg1, _arg2)

	var _ret *Box // out

	_ret = (*Box)(unsafe.Pointer(_cret))

	return _ret
}

// Intersection intersects the two given #graphene_box_t.
//
// If the two boxes do not intersect, @res will contain a degenerate box
// initialized with graphene_box_empty().
func (a *Box) Intersection(b *Box) (Box, bool) {
	var _arg0 *C.graphene_box_t // out
	var _arg1 *C.graphene_box_t // out
	var _res Box
	var _cret C._Bool // in

	_arg0 = (*C.graphene_box_t)(unsafe.Pointer(a))
	_arg1 = (*C.graphene_box_t)(unsafe.Pointer(b))

	_cret = C.graphene_box_intersection(_arg0, _arg1, (*C.graphene_box_t)(unsafe.Pointer(&_res)))

	var _ok bool // out

	if _cret {
		_ok = true
	}

	return _res, _ok
}

// Union unions the two given #graphene_box_t.
func (a *Box) Union(b *Box) Box {
	var _arg0 *C.graphene_box_t // out
	var _arg1 *C.graphene_box_t // out
	var _res Box

	_arg0 = (*C.graphene_box_t)(unsafe.Pointer(a))
	_arg1 = (*C.graphene_box_t)(unsafe.Pointer(b))

	C.graphene_box_union(_arg0, _arg1, (*C.graphene_box_t)(unsafe.Pointer(&_res)))

	return _res
}

// BoxEmpty: degenerate #graphene_box_t that can only be expanded.
//
// The returned value is owned by Graphene and should not be modified or freed.
func BoxEmpty() *Box {
	var _cret *C.graphene_box_t // in

	_cret = C.graphene_box_empty()

	var _box *Box // out

	_box = (*Box)(unsafe.Pointer(_cret))

	return _box
}

// BoxInfinite: degenerate #graphene_box_t that cannot be expanded.
//
// The returned value is owned by Graphene and should not be modified or freed.
func BoxInfinite() *Box {
	var _cret *C.graphene_box_t // in

	_cret = C.graphene_box_infinite()

	var _box *Box // out

	_box = (*Box)(unsafe.Pointer(_cret))

	return _box
}

// BoxMinusOne with the minimum vertex set at (-1, -1, -1) and the maximum
// vertex set at (0, 0, 0).
//
// The returned value is owned by Graphene and should not be modified or freed.
func BoxMinusOne() *Box {
	var _cret *C.graphene_box_t // in

	_cret = C.graphene_box_minus_one()

	var _box *Box // out

	_box = (*Box)(unsafe.Pointer(_cret))

	return _box
}

// BoxOne with the minimum vertex set at (0, 0, 0) and the maximum vertex set at
// (1, 1, 1).
//
// The returned value is owned by Graphene and should not be modified or freed.
func BoxOne() *Box {
	var _cret *C.graphene_box_t // in

	_cret = C.graphene_box_one()

	var _box *Box // out

	_box = (*Box)(unsafe.Pointer(_cret))

	return _box
}

// BoxOneMinusOne with the minimum vertex set at (-1, -1, -1) and the maximum
// vertex set at (1, 1, 1).
//
// The returned value is owned by Graphene and should not be modified or freed.
func BoxOneMinusOne() *Box {
	var _cret *C.graphene_box_t // in

	_cret = C.graphene_box_one_minus_one()

	var _box *Box // out

	_box = (*Box)(unsafe.Pointer(_cret))

	return _box
}

// BoxZero with both the minimum and maximum vertices set at (0, 0, 0).
//
// The returned value is owned by Graphene and should not be modified or freed.
func BoxZero() *Box {
	var _cret *C.graphene_box_t // in

	_cret = C.graphene_box_zero()

	var _box *Box // out

	_box = (*Box)(unsafe.Pointer(_cret))

	return _box
}
