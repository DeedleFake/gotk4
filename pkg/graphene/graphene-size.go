// Code generated by girgen. DO NOT EDIT.

package graphene

import (
	"runtime"
	"unsafe"

	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: graphene-gobject-1.0 graphene-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <graphene-gobject.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.graphene_size_get_type()), F: marshalSize},
	})
}

// Size: a size.
type Size struct {
	native C.graphene_size_t
}

// WrapSize wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSize(ptr unsafe.Pointer) *Size {
	if ptr == nil {
		return nil
	}

	return (*Size)(ptr)
}

func marshalSize(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSize(unsafe.Pointer(b)), nil
}

// NewSizeAlloc constructs a struct Size.
func NewSizeAlloc() *Size {
	cret := new(C.graphene_size_t)
	var goret *Size

	cret = C.graphene_size_alloc()

	goret = WrapSize(unsafe.Pointer(cret))
	runtime.SetFinalizer(goret, func(v *Size) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return goret
}

// Native returns the underlying C source pointer.
func (s *Size) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

// Width gets the field inside the struct.
func (s *Size) Width() float32 {
	var v float32
	v = float32(s.native.width)
	return v
}

// Height gets the field inside the struct.
func (s *Size) Height() float32 {
	var v float32
	v = float32(s.native.height)
	return v
}

// Equal checks whether the two give #graphene_size_t are equal.
func (a *Size) Equal(b *Size) bool {
	var arg0 *C.graphene_size_t
	var arg1 *C.graphene_size_t

	arg0 = (*C.graphene_size_t)(unsafe.Pointer(a.Native()))
	arg1 = (*C.graphene_size_t)(unsafe.Pointer(b.Native()))

	var cret C._Bool
	var goret bool

	cret = C.graphene_size_equal(arg0, arg1)

	if cret {
		goret = true
	}

	return goret
}

// Free frees the resources allocated by graphene_size_alloc().
func (s *Size) Free() {
	var arg0 *C.graphene_size_t

	arg0 = (*C.graphene_size_t)(unsafe.Pointer(s.Native()))

	C.graphene_size_free(arg0)
}

// Init initializes a #graphene_size_t using the given @width and @height.
func (s *Size) Init(width float32, height float32) *Size {
	var arg0 *C.graphene_size_t
	var arg1 C.float
	var arg2 C.float

	arg0 = (*C.graphene_size_t)(unsafe.Pointer(s.Native()))
	arg1 = C.float(width)
	arg2 = C.float(height)

	var cret *C.graphene_size_t
	var goret *Size

	cret = C.graphene_size_init(arg0, arg1, arg2)

	goret = WrapSize(unsafe.Pointer(cret))

	return goret
}

// InitFromSize initializes a #graphene_size_t using the width and height of the
// given @src.
func (s *Size) InitFromSize(src *Size) *Size {
	var arg0 *C.graphene_size_t
	var arg1 *C.graphene_size_t

	arg0 = (*C.graphene_size_t)(unsafe.Pointer(s.Native()))
	arg1 = (*C.graphene_size_t)(unsafe.Pointer(src.Native()))

	var cret *C.graphene_size_t
	var goret *Size

	cret = C.graphene_size_init_from_size(arg0, arg1)

	goret = WrapSize(unsafe.Pointer(cret))

	return goret
}

// Interpolate: linearly interpolates the two given #graphene_size_t using the
// given interpolation @factor.
func (a *Size) Interpolate(b *Size, factor float64) *Size {
	var arg0 *C.graphene_size_t
	var arg1 *C.graphene_size_t
	var arg2 C.double

	arg0 = (*C.graphene_size_t)(unsafe.Pointer(a.Native()))
	arg1 = (*C.graphene_size_t)(unsafe.Pointer(b.Native()))
	arg2 = C.double(factor)

	arg3 := new(C.graphene_size_t)
	var ret3 *Size

	C.graphene_size_interpolate(arg0, arg1, arg2, arg3)

	ret3 = WrapSize(unsafe.Pointer(arg3))

	return ret3
}

// Scale scales the components of a #graphene_size_t using the given @factor.
func (s *Size) Scale(factor float32) *Size {
	var arg0 *C.graphene_size_t
	var arg1 C.float

	arg0 = (*C.graphene_size_t)(unsafe.Pointer(s.Native()))
	arg1 = C.float(factor)

	arg2 := new(C.graphene_size_t)
	var ret2 *Size

	C.graphene_size_scale(arg0, arg1, arg2)

	ret2 = WrapSize(unsafe.Pointer(arg2))

	return ret2
}
