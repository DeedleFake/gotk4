// Code generated by girgen. DO NOT EDIT.

package graphene

import (
	"unsafe"

	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: glib-2.0 graphene-1.0 graphene-gobject-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <graphene-gobject.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.graphene_size_get_type()), F: marshalSize},
	})
}

// Size: a size.
type Size struct {
	native C.graphene_size_t
}

// WrapSize wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSize(ptr unsafe.Pointer) *Size {
	if ptr == nil {
		return nil
	}

	return (*Size)(ptr)
}

func marshalSize(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSize(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (s *Size) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

// Width gets the field inside the struct.
func (s *Size) Width() float32 {
	var v float32 // out
	v = (float32)(s.native.width)
	return v
}

// Height gets the field inside the struct.
func (s *Size) Height() float32 {
	var v float32 // out
	v = (float32)(s.native.height)
	return v
}

// Equal checks whether the two give #graphene_size_t are equal.
func (a *Size) Equal(b *Size) bool {
	var _arg0 *C.graphene_size_t // out
	var _arg1 *C.graphene_size_t // out

	_arg0 = (*C.graphene_size_t)(unsafe.Pointer(a.Native()))
	_arg1 = (*C.graphene_size_t)(unsafe.Pointer(b.Native()))

	var _cret C._Bool // in

	_cret = C.graphene_size_equal(_arg0, _arg1)

	var _ok bool // out

	if _cret {
		_ok = true
	}

	return _ok
}

// Free frees the resources allocated by graphene_size_alloc().
func (s *Size) Free() {
	var _arg0 *C.graphene_size_t // out

	_arg0 = (*C.graphene_size_t)(unsafe.Pointer(s.Native()))

	C.graphene_size_free(_arg0)
}

// Interpolate: linearly interpolates the two given #graphene_size_t using the
// given interpolation @factor.
func (a *Size) Interpolate(b *Size, factor float64) Size {
	var _arg0 *C.graphene_size_t // out
	var _arg1 *C.graphene_size_t // out
	var _arg2 C.double           // out

	_arg0 = (*C.graphene_size_t)(unsafe.Pointer(a.Native()))
	_arg1 = (*C.graphene_size_t)(unsafe.Pointer(b.Native()))
	_arg2 = C.double(factor)

	var _res Size

	C.graphene_size_interpolate(_arg0, _arg1, _arg2, (*C.graphene_size_t)(unsafe.Pointer(&_res)))

	return _res
}

// Scale scales the components of a #graphene_size_t using the given @factor.
func (s *Size) Scale(factor float32) Size {
	var _arg0 *C.graphene_size_t // out
	var _arg1 C.float            // out

	_arg0 = (*C.graphene_size_t)(unsafe.Pointer(s.Native()))
	_arg1 = C.float(factor)

	var _res Size

	C.graphene_size_scale(_arg0, _arg1, (*C.graphene_size_t)(unsafe.Pointer(&_res)))

	return _res
}
