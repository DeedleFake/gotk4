// Code generated by girgen. DO NOT EDIT.

package graphene

import (
	"runtime"
	"unsafe"

	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: graphene-gobject-1.0 graphene-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <graphene-gobject.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.graphene_euler_get_type()), F: marshalEuler},
	})
}

// EulerOrder: specify the order of the rotations on each axis.
//
// The GRAPHENE_EULER_ORDER_DEFAULT value is special, and is used as an alias
// for one of the other orders.
type EulerOrder int

const (
	// Default: rotate in the default order; the default order is one of the
	// following enumeration values
	EulerOrderDefault EulerOrder = -1
	// XYZ: rotate in the X, Y, and Z order. Deprecated in Graphene 1.10, it's
	// an alias for GRAPHENE_EULER_ORDER_SXYZ
	EulerOrderXYZ EulerOrder = 0
	// YZX: rotate in the Y, Z, and X order. Deprecated in Graphene 1.10, it's
	// an alias for GRAPHENE_EULER_ORDER_SYZX
	EulerOrderYZX EulerOrder = 1
	// ZXY: rotate in the Z, X, and Y order. Deprecated in Graphene 1.10, it's
	// an alias for GRAPHENE_EULER_ORDER_SZXY
	EulerOrderZXY EulerOrder = 2
	// XZY: rotate in the X, Z, and Y order. Deprecated in Graphene 1.10, it's
	// an alias for GRAPHENE_EULER_ORDER_SXZY
	EulerOrderXZY EulerOrder = 3
	// YXZ: rotate in the Y, X, and Z order. Deprecated in Graphene 1.10, it's
	// an alias for GRAPHENE_EULER_ORDER_SYXZ
	EulerOrderYXZ EulerOrder = 4
	// ZYX: rotate in the Z, Y, and X order. Deprecated in Graphene 1.10, it's
	// an alias for GRAPHENE_EULER_ORDER_SZYX
	EulerOrderZYX EulerOrder = 5
	// SXYZ defines a static rotation along the X, Y, and Z axes (Since: 1.10)
	EulerOrderSXYZ EulerOrder = 6
	// SXYX defines a static rotation along the X, Y, and X axes (Since: 1.10)
	EulerOrderSXYX EulerOrder = 7
	// SXZY defines a static rotation along the X, Z, and Y axes (Since: 1.10)
	EulerOrderSXZY EulerOrder = 8
	// SXZX defines a static rotation along the X, Z, and X axes (Since: 1.10)
	EulerOrderSXZX EulerOrder = 9
	// SYZX defines a static rotation along the Y, Z, and X axes (Since: 1.10)
	EulerOrderSYZX EulerOrder = 10
	// SYZY defines a static rotation along the Y, Z, and Y axes (Since: 1.10)
	EulerOrderSYZY EulerOrder = 11
	// SYXZ defines a static rotation along the Y, X, and Z axes (Since: 1.10)
	EulerOrderSYXZ EulerOrder = 12
	// SYXY defines a static rotation along the Y, X, and Y axes (Since: 1.10)
	EulerOrderSYXY EulerOrder = 13
	// SZXY defines a static rotation along the Z, X, and Y axes (Since: 1.10)
	EulerOrderSZXY EulerOrder = 14
	// SZXZ defines a static rotation along the Z, X, and Z axes (Since: 1.10)
	EulerOrderSZXZ EulerOrder = 15
	// SZYX defines a static rotation along the Z, Y, and X axes (Since: 1.10)
	EulerOrderSZYX EulerOrder = 16
	// SZYZ defines a static rotation along the Z, Y, and Z axes (Since: 1.10)
	EulerOrderSZYZ EulerOrder = 17
	// RZYX defines a relative rotation along the Z, Y, and X axes (Since: 1.10)
	EulerOrderRZYX EulerOrder = 18
	// RXYX defines a relative rotation along the X, Y, and X axes (Since: 1.10)
	EulerOrderRXYX EulerOrder = 19
	// RYZX defines a relative rotation along the Y, Z, and X axes (Since: 1.10)
	EulerOrderRYZX EulerOrder = 20
	// RXZX defines a relative rotation along the X, Z, and X axes (Since: 1.10)
	EulerOrderRXZX EulerOrder = 21
	// RXZY defines a relative rotation along the X, Z, and Y axes (Since: 1.10)
	EulerOrderRXZY EulerOrder = 22
	// RYZY defines a relative rotation along the Y, Z, and Y axes (Since: 1.10)
	EulerOrderRYZY EulerOrder = 23
	// RZXY defines a relative rotation along the Z, X, and Y axes (Since: 1.10)
	EulerOrderRZXY EulerOrder = 24
	// RYXY defines a relative rotation along the Y, X, and Y axes (Since: 1.10)
	EulerOrderRYXY EulerOrder = 25
	// RYXZ defines a relative rotation along the Y, X, and Z axes (Since: 1.10)
	EulerOrderRYXZ EulerOrder = 26
	// RZXZ defines a relative rotation along the Z, X, and Z axes (Since: 1.10)
	EulerOrderRZXZ EulerOrder = 27
	// RXYZ defines a relative rotation along the X, Y, and Z axes (Since: 1.10)
	EulerOrderRXYZ EulerOrder = 28
	// RZYZ defines a relative rotation along the Z, Y, and Z axes (Since: 1.10)
	EulerOrderRZYZ EulerOrder = 29
)

// Euler: describe a rotation using Euler angles.
//
// The contents of the #graphene_euler_t structure are private and should never
// be accessed directly.
type Euler struct {
	native C.graphene_euler_t
}

// WrapEuler wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapEuler(ptr unsafe.Pointer) *Euler {
	return (*Euler)(ptr)
}

func marshalEuler(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return (*Euler)(unsafe.Pointer(b)), nil
}

// NewEulerAlloc constructs a struct Euler.
func NewEulerAlloc() *Euler {
	var _cret *C.graphene_euler_t // in

	_cret = C.graphene_euler_alloc()

	var _euler *Euler // out

	_euler = (*Euler)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(_euler, func(v *Euler) {
		C.free(unsafe.Pointer(v))
	})

	return _euler
}

// Native returns the underlying C source pointer.
func (e *Euler) Native() unsafe.Pointer {
	return unsafe.Pointer(&e.native)
}

// Equal checks if two #graphene_euler_t are equal.
func (a *Euler) Equal(b *Euler) bool {
	var _arg0 *C.graphene_euler_t // out
	var _arg1 *C.graphene_euler_t // out
	var _cret C._Bool             // in

	_arg0 = (*C.graphene_euler_t)(unsafe.Pointer(a))
	_arg1 = (*C.graphene_euler_t)(unsafe.Pointer(b))

	_cret = C.graphene_euler_equal(_arg0, _arg1)

	var _ok bool // out

	if _cret {
		_ok = true
	}

	return _ok
}

// Free frees the resources allocated by graphene_euler_alloc().
func (e *Euler) free() {
	var _arg0 *C.graphene_euler_t // out

	_arg0 = (*C.graphene_euler_t)(unsafe.Pointer(e))

	C.graphene_euler_free(_arg0)
}

// Alpha retrieves the first component of the Euler angle vector, depending on
// the order of rotation.
//
// See also: graphene_euler_get_x()
func (e *Euler) Alpha() float32 {
	var _arg0 *C.graphene_euler_t // out
	var _cret C.float             // in

	_arg0 = (*C.graphene_euler_t)(unsafe.Pointer(e))

	_cret = C.graphene_euler_get_alpha(_arg0)

	var _gfloat float32 // out

	_gfloat = float32(_cret)

	return _gfloat
}

// Beta retrieves the second component of the Euler angle vector, depending on
// the order of rotation.
//
// See also: graphene_euler_get_y()
func (e *Euler) Beta() float32 {
	var _arg0 *C.graphene_euler_t // out
	var _cret C.float             // in

	_arg0 = (*C.graphene_euler_t)(unsafe.Pointer(e))

	_cret = C.graphene_euler_get_beta(_arg0)

	var _gfloat float32 // out

	_gfloat = float32(_cret)

	return _gfloat
}

// Gamma retrieves the third component of the Euler angle vector, depending on
// the order of rotation.
//
// See also: graphene_euler_get_z()
func (e *Euler) Gamma() float32 {
	var _arg0 *C.graphene_euler_t // out
	var _cret C.float             // in

	_arg0 = (*C.graphene_euler_t)(unsafe.Pointer(e))

	_cret = C.graphene_euler_get_gamma(_arg0)

	var _gfloat float32 // out

	_gfloat = float32(_cret)

	return _gfloat
}

// Order retrieves the order used to apply the rotations described in the
// #graphene_euler_t structure, when converting to and from other structures,
// like #graphene_quaternion_t and #graphene_matrix_t.
//
// This function does not return the GRAPHENE_EULER_ORDER_DEFAULT enumeration
// value; it will return the effective order of rotation instead.
func (e *Euler) Order() EulerOrder {
	var _arg0 *C.graphene_euler_t      // out
	var _cret C.graphene_euler_order_t // in

	_arg0 = (*C.graphene_euler_t)(unsafe.Pointer(e))

	_cret = C.graphene_euler_get_order(_arg0)

	var _eulerOrder EulerOrder // out

	_eulerOrder = (EulerOrder)(_cret)

	return _eulerOrder
}

// X retrieves the rotation angle on the X axis, in degrees.
func (e *Euler) X() float32 {
	var _arg0 *C.graphene_euler_t // out
	var _cret C.float             // in

	_arg0 = (*C.graphene_euler_t)(unsafe.Pointer(e))

	_cret = C.graphene_euler_get_x(_arg0)

	var _gfloat float32 // out

	_gfloat = float32(_cret)

	return _gfloat
}

// Y retrieves the rotation angle on the Y axis, in degrees.
func (e *Euler) Y() float32 {
	var _arg0 *C.graphene_euler_t // out
	var _cret C.float             // in

	_arg0 = (*C.graphene_euler_t)(unsafe.Pointer(e))

	_cret = C.graphene_euler_get_y(_arg0)

	var _gfloat float32 // out

	_gfloat = float32(_cret)

	return _gfloat
}

// Z retrieves the rotation angle on the Z axis, in degrees.
func (e *Euler) Z() float32 {
	var _arg0 *C.graphene_euler_t // out
	var _cret C.float             // in

	_arg0 = (*C.graphene_euler_t)(unsafe.Pointer(e))

	_cret = C.graphene_euler_get_z(_arg0)

	var _gfloat float32 // out

	_gfloat = float32(_cret)

	return _gfloat
}

// Init initializes a #graphene_euler_t using the given angles.
//
// The order of the rotations is GRAPHENE_EULER_ORDER_DEFAULT.
func (e *Euler) Init(x float32, y float32, z float32) *Euler {
	var _arg0 *C.graphene_euler_t // out
	var _arg1 C.float             // out
	var _arg2 C.float             // out
	var _arg3 C.float             // out
	var _cret *C.graphene_euler_t // in

	_arg0 = (*C.graphene_euler_t)(unsafe.Pointer(e))
	_arg1 = C.float(x)
	_arg2 = C.float(y)
	_arg3 = C.float(z)

	_cret = C.graphene_euler_init(_arg0, _arg1, _arg2, _arg3)

	var _euler *Euler // out

	_euler = (*Euler)(unsafe.Pointer(_cret))

	return _euler
}

// InitFromEuler initializes a #graphene_euler_t using the angles and order of
// another #graphene_euler_t.
//
// If the #graphene_euler_t @src is nil, this function is equivalent to calling
// graphene_euler_init() with all angles set to 0.
func (e *Euler) InitFromEuler(src *Euler) *Euler {
	var _arg0 *C.graphene_euler_t // out
	var _arg1 *C.graphene_euler_t // out
	var _cret *C.graphene_euler_t // in

	_arg0 = (*C.graphene_euler_t)(unsafe.Pointer(e))
	_arg1 = (*C.graphene_euler_t)(unsafe.Pointer(src))

	_cret = C.graphene_euler_init_from_euler(_arg0, _arg1)

	var _euler *Euler // out

	_euler = (*Euler)(unsafe.Pointer(_cret))

	return _euler
}
