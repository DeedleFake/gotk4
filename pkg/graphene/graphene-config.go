// Code generated by girgen. DO NOT EDIT.

package graphene

import (
	"unsafe"
)

// #cgo pkg-config: graphene-gobject-1.0 graphene-1.0 glib-2.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <graphene-gobject.h>
import "C"

type SIMD4F struct {
	native C.graphene_simd4f_t
}

// WrapSIMD4F wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSIMD4F(ptr unsafe.Pointer) *SIMD4F {
	if ptr == nil {
		return nil
	}

	return (*SIMD4F)(ptr)
}

func marshalSIMD4F(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSIMD4F(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (s *SIMD4F) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

type SIMD4X4F struct {
	native C.graphene_simd4x4f_t
}

// WrapSIMD4X4F wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSIMD4X4F(ptr unsafe.Pointer) *SIMD4X4F {
	if ptr == nil {
		return nil
	}

	return (*SIMD4X4F)(ptr)
}

func marshalSIMD4X4F(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSIMD4X4F(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (s *SIMD4X4F) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}
