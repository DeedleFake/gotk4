// Code generated by girgen. DO NOT EDIT.

package graphene

import (
	"unsafe"

	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: graphene-gobject-1.0 graphene-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <graphene-gobject.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.graphene_vec2_get_type()), F: marshalVec2},
	})
}

// Vec2One retrieves a constant vector with (1, 1) components.
func Vec2One() {
	C.graphene_vec2_one()
}

// Vec2XAxis retrieves a constant vector with (1, 0) components.
func Vec2XAxis() {
	C.graphene_vec2_x_axis()
}

// Vec2YAxis retrieves a constant vector with (0, 1) components.
func Vec2YAxis() {
	C.graphene_vec2_y_axis()
}

// Vec2Zero retrieves a constant vector with (0, 0) components.
func Vec2Zero() {
	C.graphene_vec2_zero()
}

// Vec2: a structure capable of holding a vector with two dimensions, x and y.
//
// The contents of the #graphene_vec2_t structure are private and should never
// be accessed directly.
type Vec2 struct {
	native C.graphene_vec2_t
}

// WrapVec2 wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapVec2(ptr unsafe.Pointer) *Vec2 {
	if ptr == nil {
		return nil
	}

	return (*Vec2)(ptr)
}

func marshalVec2(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapVec2(unsafe.Pointer(b)), nil
}

// NewVec2Alloc constructs a struct Vec2.
func NewVec2Alloc() {
	C.graphene_vec2_alloc()
}

// Native returns the underlying C source pointer.
func (v *Vec2) Native() unsafe.Pointer {
	return unsafe.Pointer(&v.native)
}

// Add adds each component of the two passed vectors and places each result into
// the components of @res.
func (a *Vec2) Add(a *Vec2, b *Vec2) *Vec2 {
	var arg0 *C.graphene_vec2_t
	var arg1 *C.graphene_vec2_t

	arg0 = (*C.graphene_vec2_t)(unsafe.Pointer(a.Native()))
	arg1 = (*C.graphene_vec2_t)(unsafe.Pointer(b.Native()))

	var arg2 C.graphene_vec2_t
	var res *Vec2

	C.graphene_vec2_add(arg0, arg1, &arg2)

	res = WrapVec2(unsafe.Pointer(&arg2))

	return res
}

// Divide divides each component of the first operand @a by the corresponding
// component of the second operand @b, and places the results into the vector
// @res.
func (a *Vec2) Divide(a *Vec2, b *Vec2) *Vec2 {
	var arg0 *C.graphene_vec2_t
	var arg1 *C.graphene_vec2_t

	arg0 = (*C.graphene_vec2_t)(unsafe.Pointer(a.Native()))
	arg1 = (*C.graphene_vec2_t)(unsafe.Pointer(b.Native()))

	var arg2 C.graphene_vec2_t
	var res *Vec2

	C.graphene_vec2_divide(arg0, arg1, &arg2)

	res = WrapVec2(unsafe.Pointer(&arg2))

	return res
}

// Dot computes the dot product of the two given vectors.
func (a *Vec2) Dot(a *Vec2, b *Vec2) {
	var arg0 *C.graphene_vec2_t
	var arg1 *C.graphene_vec2_t

	arg0 = (*C.graphene_vec2_t)(unsafe.Pointer(a.Native()))
	arg1 = (*C.graphene_vec2_t)(unsafe.Pointer(b.Native()))

	C.graphene_vec2_dot(arg0, arg1)
}

// Equal checks whether the two given #graphene_vec2_t are equal.
func (v *Vec2) Equal(v *Vec2, v2 *Vec2) bool {
	var arg0 *C.graphene_vec2_t
	var arg1 *C.graphene_vec2_t

	arg0 = (*C.graphene_vec2_t)(unsafe.Pointer(v.Native()))
	arg1 = (*C.graphene_vec2_t)(unsafe.Pointer(v2.Native()))

	var cret C._Bool
	var ok bool

	cret = C.graphene_vec2_equal(arg0, arg1)

	if cret {
		ok = true
	}

	return ok
}

// Free frees the resources allocated by @v
func (v *Vec2) Free(v *Vec2) {
	var arg0 *C.graphene_vec2_t

	arg0 = (*C.graphene_vec2_t)(unsafe.Pointer(v.Native()))

	C.graphene_vec2_free(arg0)
}

// X retrieves the X component of the #graphene_vec2_t.
func (v *Vec2) X(v *Vec2) {
	var arg0 *C.graphene_vec2_t

	arg0 = (*C.graphene_vec2_t)(unsafe.Pointer(v.Native()))

	C.graphene_vec2_get_x(arg0)
}

// Y retrieves the Y component of the #graphene_vec2_t.
func (v *Vec2) Y(v *Vec2) {
	var arg0 *C.graphene_vec2_t

	arg0 = (*C.graphene_vec2_t)(unsafe.Pointer(v.Native()))

	C.graphene_vec2_get_y(arg0)
}

// Init initializes a #graphene_vec2_t using the given values.
//
// This function can be called multiple times.
func (v *Vec2) Init(v *Vec2, x float32, y float32) {
	var arg0 *C.graphene_vec2_t
	var arg1 C.float
	var arg2 C.float

	arg0 = (*C.graphene_vec2_t)(unsafe.Pointer(v.Native()))
	arg1 = C.float(x)
	arg2 = C.float(y)

	C.graphene_vec2_init(arg0, arg1, arg2)
}

// InitFromFloat initializes @v with the contents of the given array.
func (v *Vec2) InitFromFloat(v *Vec2, src [2]float32) {
	var arg0 *C.graphene_vec2_t
	var arg1 *C.float

	arg0 = (*C.graphene_vec2_t)(unsafe.Pointer(v.Native()))
	arg1 = (*C.float)(&src)
	defer runtime.KeepAlive(&arg1)

	C.graphene_vec2_init_from_float(arg0, arg1)
}

// InitFromVec2 copies the contents of @src into @v.
func (v *Vec2) InitFromVec2(v *Vec2, src *Vec2) {
	var arg0 *C.graphene_vec2_t
	var arg1 *C.graphene_vec2_t

	arg0 = (*C.graphene_vec2_t)(unsafe.Pointer(v.Native()))
	arg1 = (*C.graphene_vec2_t)(unsafe.Pointer(src.Native()))

	C.graphene_vec2_init_from_vec2(arg0, arg1)
}

// Interpolate: linearly interpolates @v1 and @v2 using the given @factor.
func (v *Vec2) Interpolate(v *Vec2, v2 *Vec2, factor float64) *Vec2 {
	var arg0 *C.graphene_vec2_t
	var arg1 *C.graphene_vec2_t
	var arg2 C.double

	arg0 = (*C.graphene_vec2_t)(unsafe.Pointer(v.Native()))
	arg1 = (*C.graphene_vec2_t)(unsafe.Pointer(v2.Native()))
	arg2 = C.double(factor)

	var arg3 C.graphene_vec2_t
	var res *Vec2

	C.graphene_vec2_interpolate(arg0, arg1, arg2, &arg3)

	res = WrapVec2(unsafe.Pointer(&arg3))

	return res
}

// Length computes the length of the given vector.
func (v *Vec2) Length(v *Vec2) {
	var arg0 *C.graphene_vec2_t

	arg0 = (*C.graphene_vec2_t)(unsafe.Pointer(v.Native()))

	C.graphene_vec2_length(arg0)
}

// Max compares the two given vectors and places the maximum values of each
// component into @res.
func (a *Vec2) Max(a *Vec2, b *Vec2) *Vec2 {
	var arg0 *C.graphene_vec2_t
	var arg1 *C.graphene_vec2_t

	arg0 = (*C.graphene_vec2_t)(unsafe.Pointer(a.Native()))
	arg1 = (*C.graphene_vec2_t)(unsafe.Pointer(b.Native()))

	var arg2 C.graphene_vec2_t
	var res *Vec2

	C.graphene_vec2_max(arg0, arg1, &arg2)

	res = WrapVec2(unsafe.Pointer(&arg2))

	return res
}

// Min compares the two given vectors and places the minimum values of each
// component into @res.
func (a *Vec2) Min(a *Vec2, b *Vec2) *Vec2 {
	var arg0 *C.graphene_vec2_t
	var arg1 *C.graphene_vec2_t

	arg0 = (*C.graphene_vec2_t)(unsafe.Pointer(a.Native()))
	arg1 = (*C.graphene_vec2_t)(unsafe.Pointer(b.Native()))

	var arg2 C.graphene_vec2_t
	var res *Vec2

	C.graphene_vec2_min(arg0, arg1, &arg2)

	res = WrapVec2(unsafe.Pointer(&arg2))

	return res
}

// Multiply multiplies each component of the two passed vectors and places each
// result into the components of @res.
func (a *Vec2) Multiply(a *Vec2, b *Vec2) *Vec2 {
	var arg0 *C.graphene_vec2_t
	var arg1 *C.graphene_vec2_t

	arg0 = (*C.graphene_vec2_t)(unsafe.Pointer(a.Native()))
	arg1 = (*C.graphene_vec2_t)(unsafe.Pointer(b.Native()))

	var arg2 C.graphene_vec2_t
	var res *Vec2

	C.graphene_vec2_multiply(arg0, arg1, &arg2)

	res = WrapVec2(unsafe.Pointer(&arg2))

	return res
}

// Near compares the two given #graphene_vec2_t vectors and checks whether their
// values are within the given @epsilon.
func (v *Vec2) Near(v *Vec2, v2 *Vec2, epsilon float32) bool {
	var arg0 *C.graphene_vec2_t
	var arg1 *C.graphene_vec2_t
	var arg2 C.float

	arg0 = (*C.graphene_vec2_t)(unsafe.Pointer(v.Native()))
	arg1 = (*C.graphene_vec2_t)(unsafe.Pointer(v2.Native()))
	arg2 = C.float(epsilon)

	var cret C._Bool
	var ok bool

	cret = C.graphene_vec2_near(arg0, arg1, arg2)

	if cret {
		ok = true
	}

	return ok
}

// Negate negates the given #graphene_vec2_t.
func (v *Vec2) Negate(v *Vec2) *Vec2 {
	var arg0 *C.graphene_vec2_t

	arg0 = (*C.graphene_vec2_t)(unsafe.Pointer(v.Native()))

	var arg1 C.graphene_vec2_t
	var res *Vec2

	C.graphene_vec2_negate(arg0, &arg1)

	res = WrapVec2(unsafe.Pointer(&arg1))

	return res
}

// Normalize computes the normalized vector for the given vector @v.
func (v *Vec2) Normalize(v *Vec2) *Vec2 {
	var arg0 *C.graphene_vec2_t

	arg0 = (*C.graphene_vec2_t)(unsafe.Pointer(v.Native()))

	var arg1 C.graphene_vec2_t
	var res *Vec2

	C.graphene_vec2_normalize(arg0, &arg1)

	res = WrapVec2(unsafe.Pointer(&arg1))

	return res
}

// Scale multiplies all components of the given vector with the given scalar
// @factor.
func (v *Vec2) Scale(v *Vec2, factor float32) *Vec2 {
	var arg0 *C.graphene_vec2_t
	var arg1 C.float

	arg0 = (*C.graphene_vec2_t)(unsafe.Pointer(v.Native()))
	arg1 = C.float(factor)

	var arg2 C.graphene_vec2_t
	var res *Vec2

	C.graphene_vec2_scale(arg0, arg1, &arg2)

	res = WrapVec2(unsafe.Pointer(&arg2))

	return res
}

// Subtract subtracts from each component of the first operand @a the
// corresponding component of the second operand @b and places each result into
// the components of @res.
func (a *Vec2) Subtract(a *Vec2, b *Vec2) *Vec2 {
	var arg0 *C.graphene_vec2_t
	var arg1 *C.graphene_vec2_t

	arg0 = (*C.graphene_vec2_t)(unsafe.Pointer(a.Native()))
	arg1 = (*C.graphene_vec2_t)(unsafe.Pointer(b.Native()))

	var arg2 C.graphene_vec2_t
	var res *Vec2

	C.graphene_vec2_subtract(arg0, arg1, &arg2)

	res = WrapVec2(unsafe.Pointer(&arg2))

	return res
}

// ToFloat stores the components of @v into an array.
func (v *Vec2) ToFloat(v *Vec2) [2]float32 {
	var arg0 *C.graphene_vec2_t

	arg0 = (*C.graphene_vec2_t)(unsafe.Pointer(v.Native()))

	var arg1 [2]C.float
	var dest [2]float32

	C.graphene_vec2_to_float(arg0, &arg1)

	dest = ([2]float32)(arg1)

	return dest
}
