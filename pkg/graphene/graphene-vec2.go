// Code generated by girgen. DO NOT EDIT.

package graphene

import (
	"unsafe"

	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: graphene-gobject-1.0 graphene-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <graphene-gobject.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.graphene_vec2_get_type()), F: marshalVec2},
	})
}

// Vec2: a structure capable of holding a vector with two dimensions, x and y.
//
// The contents of the #graphene_vec2_t structure are private and should never
// be accessed directly.
type Vec2 C.graphene_vec2_t

// WrapVec2 wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapVec2(ptr unsafe.Pointer) *Vec2 {
	return (*Vec2)(ptr)
}

func marshalVec2(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return (*Vec2)(unsafe.Pointer(b)), nil
}

// NewVec2Alloc constructs a struct Vec2.
func NewVec2Alloc() *Vec2 {
	var _cret *C.graphene_vec2_t // in

	_cret = C.graphene_vec2_alloc()

	var _vec2 *Vec2 // out

	_vec2 = (*Vec2)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(&_vec2, func(v **Vec2) {
		C.free(unsafe.Pointer(v))
	})

	return _vec2
}

// Native returns the underlying C source pointer.
func (v *Vec2) Native() unsafe.Pointer {
	return unsafe.Pointer(v)
}

// Add stores the components of @v into an array.
func (v *Vec2) Add(b *Vec2) Vec2 {
	var _arg0 *C.graphene_vec2_t // out
	var _arg1 *C.graphene_vec2_t // out
	var _arg2 C.graphene_vec2_t  // in

	_arg0 = (*C.graphene_vec2_t)(unsafe.Pointer(a.Native()))
	_arg1 = (*C.graphene_vec2_t)(unsafe.Pointer(b.Native()))

	C.graphene_vec2_add(_arg0, _arg1, &_arg2)

	var _res Vec2 // out

	{
		var refTmpIn *C.graphene_vec2_t
		var refTmpOut *Vec2

		in0 := &_arg2
		refTmpIn = in0

		refTmpOut = (*Vec2)(unsafe.Pointer(refTmpIn))

		_res = *refTmpOut
	}

	return _res
}

// Divide stores the components of @v into an array.
func (v *Vec2) Divide(b *Vec2) Vec2 {
	var _arg0 *C.graphene_vec2_t // out
	var _arg1 *C.graphene_vec2_t // out
	var _arg2 C.graphene_vec2_t  // in

	_arg0 = (*C.graphene_vec2_t)(unsafe.Pointer(a.Native()))
	_arg1 = (*C.graphene_vec2_t)(unsafe.Pointer(b.Native()))

	C.graphene_vec2_divide(_arg0, _arg1, &_arg2)

	var _res Vec2 // out

	{
		var refTmpIn *C.graphene_vec2_t
		var refTmpOut *Vec2

		in0 := &_arg2
		refTmpIn = in0

		refTmpOut = (*Vec2)(unsafe.Pointer(refTmpIn))

		_res = *refTmpOut
	}

	return _res
}

// Dot stores the components of @v into an array.
func (v *Vec2) Dot(b *Vec2) float32 {
	var _arg0 *C.graphene_vec2_t // out
	var _arg1 *C.graphene_vec2_t // out
	var _cret C.float            // in

	_arg0 = (*C.graphene_vec2_t)(unsafe.Pointer(a.Native()))
	_arg1 = (*C.graphene_vec2_t)(unsafe.Pointer(b.Native()))

	_cret = C.graphene_vec2_dot(_arg0, _arg1)

	var _gfloat float32 // out

	_gfloat = float32(_cret)

	return _gfloat
}

// Equal stores the components of @v into an array.
func (v *Vec2) Equal(v2 *Vec2) bool {
	var _arg0 *C.graphene_vec2_t // out
	var _arg1 *C.graphene_vec2_t // out
	var _cret C._Bool            // in

	_arg0 = (*C.graphene_vec2_t)(unsafe.Pointer(v.Native()))
	_arg1 = (*C.graphene_vec2_t)(unsafe.Pointer(v2.Native()))

	_cret = C.graphene_vec2_equal(_arg0, _arg1)

	var _ok bool // out

	if _cret {
		_ok = true
	}

	return _ok
}

// Free stores the components of @v into an array.
func (v *Vec2) Free() {
	var _arg0 *C.graphene_vec2_t // out

	_arg0 = (*C.graphene_vec2_t)(unsafe.Pointer(v.Native()))

	C.graphene_vec2_free(_arg0)
}

// X stores the components of @v into an array.
func (v *Vec2) X() float32 {
	var _arg0 *C.graphene_vec2_t // out
	var _cret C.float            // in

	_arg0 = (*C.graphene_vec2_t)(unsafe.Pointer(v.Native()))

	_cret = C.graphene_vec2_get_x(_arg0)

	var _gfloat float32 // out

	_gfloat = float32(_cret)

	return _gfloat
}

// Y stores the components of @v into an array.
func (v *Vec2) Y() float32 {
	var _arg0 *C.graphene_vec2_t // out
	var _cret C.float            // in

	_arg0 = (*C.graphene_vec2_t)(unsafe.Pointer(v.Native()))

	_cret = C.graphene_vec2_get_y(_arg0)

	var _gfloat float32 // out

	_gfloat = float32(_cret)

	return _gfloat
}

// Init stores the components of @v into an array.
func (v *Vec2) Init(x float32, y float32) *Vec2 {
	var _arg0 *C.graphene_vec2_t // out
	var _arg1 C.float            // out
	var _arg2 C.float            // out
	var _cret *C.graphene_vec2_t // in

	_arg0 = (*C.graphene_vec2_t)(unsafe.Pointer(v.Native()))
	_arg1 = C.float(x)
	_arg2 = C.float(y)

	_cret = C.graphene_vec2_init(_arg0, _arg1, _arg2)

	var _vec2 *Vec2 // out

	_vec2 = (*Vec2)(unsafe.Pointer(_cret))

	return _vec2
}

// InitFromFloat stores the components of @v into an array.
func (v *Vec2) InitFromFloat(src [2]float32) *Vec2 {
	var _arg0 *C.graphene_vec2_t // out
	var _arg1 *C.float
	var _cret *C.graphene_vec2_t // in

	_arg0 = (*C.graphene_vec2_t)(unsafe.Pointer(v.Native()))
	_arg1 = (*C.float)(unsafe.Pointer(&src))

	_cret = C.graphene_vec2_init_from_float(_arg0, _arg1)

	var _vec2 *Vec2 // out

	_vec2 = (*Vec2)(unsafe.Pointer(_cret))

	return _vec2
}

// InitFromVec2 stores the components of @v into an array.
func (v *Vec2) InitFromVec2(src *Vec2) *Vec2 {
	var _arg0 *C.graphene_vec2_t // out
	var _arg1 *C.graphene_vec2_t // out
	var _cret *C.graphene_vec2_t // in

	_arg0 = (*C.graphene_vec2_t)(unsafe.Pointer(v.Native()))
	_arg1 = (*C.graphene_vec2_t)(unsafe.Pointer(src.Native()))

	_cret = C.graphene_vec2_init_from_vec2(_arg0, _arg1)

	var _vec2 *Vec2 // out

	_vec2 = (*Vec2)(unsafe.Pointer(_cret))

	return _vec2
}

// Interpolate stores the components of @v into an array.
func (v *Vec2) Interpolate(v2 *Vec2, factor float64) Vec2 {
	var _arg0 *C.graphene_vec2_t // out
	var _arg1 *C.graphene_vec2_t // out
	var _arg2 C.double           // out
	var _arg3 C.graphene_vec2_t  // in

	_arg0 = (*C.graphene_vec2_t)(unsafe.Pointer(v.Native()))
	_arg1 = (*C.graphene_vec2_t)(unsafe.Pointer(v2.Native()))
	_arg2 = C.double(factor)

	C.graphene_vec2_interpolate(_arg0, _arg1, _arg2, &_arg3)

	var _res Vec2 // out

	{
		var refTmpIn *C.graphene_vec2_t
		var refTmpOut *Vec2

		in0 := &_arg3
		refTmpIn = in0

		refTmpOut = (*Vec2)(unsafe.Pointer(refTmpIn))

		_res = *refTmpOut
	}

	return _res
}

// Length stores the components of @v into an array.
func (v *Vec2) Length() float32 {
	var _arg0 *C.graphene_vec2_t // out
	var _cret C.float            // in

	_arg0 = (*C.graphene_vec2_t)(unsafe.Pointer(v.Native()))

	_cret = C.graphene_vec2_length(_arg0)

	var _gfloat float32 // out

	_gfloat = float32(_cret)

	return _gfloat
}

// Max stores the components of @v into an array.
func (v *Vec2) Max(b *Vec2) Vec2 {
	var _arg0 *C.graphene_vec2_t // out
	var _arg1 *C.graphene_vec2_t // out
	var _arg2 C.graphene_vec2_t  // in

	_arg0 = (*C.graphene_vec2_t)(unsafe.Pointer(a.Native()))
	_arg1 = (*C.graphene_vec2_t)(unsafe.Pointer(b.Native()))

	C.graphene_vec2_max(_arg0, _arg1, &_arg2)

	var _res Vec2 // out

	{
		var refTmpIn *C.graphene_vec2_t
		var refTmpOut *Vec2

		in0 := &_arg2
		refTmpIn = in0

		refTmpOut = (*Vec2)(unsafe.Pointer(refTmpIn))

		_res = *refTmpOut
	}

	return _res
}

// Min stores the components of @v into an array.
func (v *Vec2) Min(b *Vec2) Vec2 {
	var _arg0 *C.graphene_vec2_t // out
	var _arg1 *C.graphene_vec2_t // out
	var _arg2 C.graphene_vec2_t  // in

	_arg0 = (*C.graphene_vec2_t)(unsafe.Pointer(a.Native()))
	_arg1 = (*C.graphene_vec2_t)(unsafe.Pointer(b.Native()))

	C.graphene_vec2_min(_arg0, _arg1, &_arg2)

	var _res Vec2 // out

	{
		var refTmpIn *C.graphene_vec2_t
		var refTmpOut *Vec2

		in0 := &_arg2
		refTmpIn = in0

		refTmpOut = (*Vec2)(unsafe.Pointer(refTmpIn))

		_res = *refTmpOut
	}

	return _res
}

// Multiply stores the components of @v into an array.
func (v *Vec2) Multiply(b *Vec2) Vec2 {
	var _arg0 *C.graphene_vec2_t // out
	var _arg1 *C.graphene_vec2_t // out
	var _arg2 C.graphene_vec2_t  // in

	_arg0 = (*C.graphene_vec2_t)(unsafe.Pointer(a.Native()))
	_arg1 = (*C.graphene_vec2_t)(unsafe.Pointer(b.Native()))

	C.graphene_vec2_multiply(_arg0, _arg1, &_arg2)

	var _res Vec2 // out

	{
		var refTmpIn *C.graphene_vec2_t
		var refTmpOut *Vec2

		in0 := &_arg2
		refTmpIn = in0

		refTmpOut = (*Vec2)(unsafe.Pointer(refTmpIn))

		_res = *refTmpOut
	}

	return _res
}

// Near stores the components of @v into an array.
func (v *Vec2) Near(v2 *Vec2, epsilon float32) bool {
	var _arg0 *C.graphene_vec2_t // out
	var _arg1 *C.graphene_vec2_t // out
	var _arg2 C.float            // out
	var _cret C._Bool            // in

	_arg0 = (*C.graphene_vec2_t)(unsafe.Pointer(v.Native()))
	_arg1 = (*C.graphene_vec2_t)(unsafe.Pointer(v2.Native()))
	_arg2 = C.float(epsilon)

	_cret = C.graphene_vec2_near(_arg0, _arg1, _arg2)

	var _ok bool // out

	if _cret {
		_ok = true
	}

	return _ok
}

// Negate stores the components of @v into an array.
func (v *Vec2) Negate() Vec2 {
	var _arg0 *C.graphene_vec2_t // out
	var _arg1 C.graphene_vec2_t  // in

	_arg0 = (*C.graphene_vec2_t)(unsafe.Pointer(v.Native()))

	C.graphene_vec2_negate(_arg0, &_arg1)

	var _res Vec2 // out

	{
		var refTmpIn *C.graphene_vec2_t
		var refTmpOut *Vec2

		in0 := &_arg1
		refTmpIn = in0

		refTmpOut = (*Vec2)(unsafe.Pointer(refTmpIn))

		_res = *refTmpOut
	}

	return _res
}

// Normalize stores the components of @v into an array.
func (v *Vec2) Normalize() Vec2 {
	var _arg0 *C.graphene_vec2_t // out
	var _arg1 C.graphene_vec2_t  // in

	_arg0 = (*C.graphene_vec2_t)(unsafe.Pointer(v.Native()))

	C.graphene_vec2_normalize(_arg0, &_arg1)

	var _res Vec2 // out

	{
		var refTmpIn *C.graphene_vec2_t
		var refTmpOut *Vec2

		in0 := &_arg1
		refTmpIn = in0

		refTmpOut = (*Vec2)(unsafe.Pointer(refTmpIn))

		_res = *refTmpOut
	}

	return _res
}

// Scale stores the components of @v into an array.
func (v *Vec2) Scale(factor float32) Vec2 {
	var _arg0 *C.graphene_vec2_t // out
	var _arg1 C.float            // out
	var _arg2 C.graphene_vec2_t  // in

	_arg0 = (*C.graphene_vec2_t)(unsafe.Pointer(v.Native()))
	_arg1 = C.float(factor)

	C.graphene_vec2_scale(_arg0, _arg1, &_arg2)

	var _res Vec2 // out

	{
		var refTmpIn *C.graphene_vec2_t
		var refTmpOut *Vec2

		in0 := &_arg2
		refTmpIn = in0

		refTmpOut = (*Vec2)(unsafe.Pointer(refTmpIn))

		_res = *refTmpOut
	}

	return _res
}

// Subtract stores the components of @v into an array.
func (v *Vec2) Subtract(b *Vec2) Vec2 {
	var _arg0 *C.graphene_vec2_t // out
	var _arg1 *C.graphene_vec2_t // out
	var _arg2 C.graphene_vec2_t  // in

	_arg0 = (*C.graphene_vec2_t)(unsafe.Pointer(a.Native()))
	_arg1 = (*C.graphene_vec2_t)(unsafe.Pointer(b.Native()))

	C.graphene_vec2_subtract(_arg0, _arg1, &_arg2)

	var _res Vec2 // out

	{
		var refTmpIn *C.graphene_vec2_t
		var refTmpOut *Vec2

		in0 := &_arg2
		refTmpIn = in0

		refTmpOut = (*Vec2)(unsafe.Pointer(refTmpIn))

		_res = *refTmpOut
	}

	return _res
}

// ToFloat stores the components of @v into an array.
func (v *Vec2) ToFloat() [2]float32 {
	var _arg0 *C.graphene_vec2_t // out
	var _arg1 [2]C.float

	_arg0 = (*C.graphene_vec2_t)(unsafe.Pointer(v.Native()))

	C.graphene_vec2_to_float(_arg0, &_arg1[0])

	var _dest [2]float32

	_dest = *(*[2]float32)(unsafe.Pointer(&_arg1))

	return _dest
}
