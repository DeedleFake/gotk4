// Code generated by girgen. DO NOT EDIT.

package graphene

import (
	"runtime"
	"unsafe"

	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: graphene-gobject-1.0 graphene-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <graphene-gobject.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.graphene_matrix_get_type()), F: marshalMatrix},
	})
}

// Matrix: structure capable of holding a 4x4 matrix.
//
// The contents of the #graphene_matrix_t structure are private and should never
// be accessed directly.
type Matrix struct {
	native C.graphene_matrix_t
}

// WrapMatrix wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapMatrix(ptr unsafe.Pointer) *Matrix {
	return (*Matrix)(ptr)
}

func marshalMatrix(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return (*Matrix)(unsafe.Pointer(b)), nil
}

// NewMatrixAlloc constructs a struct Matrix.
func NewMatrixAlloc() *Matrix {
	var _cret *C.graphene_matrix_t // in

	_cret = C.graphene_matrix_alloc()

	var _matrix *Matrix // out

	_matrix = (*Matrix)(unsafe.Pointer(*C.graphene_matrix_t))
	runtime.SetFinalizer(_matrix, func(v *Matrix) {
		C.free(unsafe.Pointer(v))
	})

	return _matrix
}

// Native returns the underlying C source pointer.
func (m *Matrix) Native() unsafe.Pointer {
	return unsafe.Pointer(&m.native)
}

// Determinant computes the determinant of the given matrix.
func (m *Matrix) Determinant() float32 {
	var _arg0 *C.graphene_matrix_t // out
	var _cret C.float              // in

	_arg0 = (*C.graphene_matrix_t)(unsafe.Pointer(*Matrix))

	_cret = C.graphene_matrix_determinant(_arg0)

	var _gfloat float32 // out

	_gfloat = float32(_cret)

	return _gfloat
}

// Equal checks whether the two given #graphene_matrix_t matrices are equal.
func (a *Matrix) Equal(b *Matrix) bool {
	var _arg0 *C.graphene_matrix_t // out
	var _arg1 *C.graphene_matrix_t // out
	var _cret C._Bool              // in

	_arg0 = (*C.graphene_matrix_t)(unsafe.Pointer(*Matrix))
	_arg1 = (*C.graphene_matrix_t)(unsafe.Pointer(*Matrix))

	_cret = C.graphene_matrix_equal(_arg0, _arg1)

	var _ok bool // out

	if _cret {
		_ok = true
	}

	return _ok
}

// EqualFast checks whether the two given #graphene_matrix_t matrices are
// byte-by-byte equal.
//
// While this function is faster than graphene_matrix_equal(), it can also
// return false negatives, so it should be used in conjuction with either
// graphene_matrix_equal() or graphene_matrix_near(). For instance:
//
//    if (graphene_matrix_equal_fast (a, b))
//      {
//        // matrices are definitely the same
//      }
//    else
//      {
//        if (graphene_matrix_equal (a, b))
//          // matrices contain the same values within an epsilon of FLT_EPSILON
//        else if (graphene_matrix_near (a, b, 0.0001))
//          // matrices contain the same values within an epsilon of 0.0001
//        else
//          // matrices are not equal
//      }
func (a *Matrix) EqualFast(b *Matrix) bool {
	var _arg0 *C.graphene_matrix_t // out
	var _arg1 *C.graphene_matrix_t // out
	var _cret C._Bool              // in

	_arg0 = (*C.graphene_matrix_t)(unsafe.Pointer(*Matrix))
	_arg1 = (*C.graphene_matrix_t)(unsafe.Pointer(*Matrix))

	_cret = C.graphene_matrix_equal_fast(_arg0, _arg1)

	var _ok bool // out

	if _cret {
		_ok = true
	}

	return _ok
}

// Free frees the resources allocated by graphene_matrix_alloc().
func (m *Matrix) free() {
	var _arg0 *C.graphene_matrix_t // out

	_arg0 = (*C.graphene_matrix_t)(unsafe.Pointer(*Matrix))

	C.graphene_matrix_free(_arg0)
}

// Value retrieves the value at the given @row and @col index.
func (m *Matrix) Value(row uint, col uint) float32 {
	var _arg0 *C.graphene_matrix_t // out
	var _arg1 C.uint               // out
	var _arg2 C.uint               // out
	var _cret C.float              // in

	_arg0 = (*C.graphene_matrix_t)(unsafe.Pointer(*Matrix))
	_arg1 = C.uint(row)
	_arg2 = C.uint(col)

	_cret = C.graphene_matrix_get_value(_arg0, _arg1, _arg2)

	var _gfloat float32 // out

	_gfloat = float32(_cret)

	return _gfloat
}

// XScale retrieves the scaling factor on the X axis in @m.
func (m *Matrix) XScale() float32 {
	var _arg0 *C.graphene_matrix_t // out
	var _cret C.float              // in

	_arg0 = (*C.graphene_matrix_t)(unsafe.Pointer(*Matrix))

	_cret = C.graphene_matrix_get_x_scale(_arg0)

	var _gfloat float32 // out

	_gfloat = float32(_cret)

	return _gfloat
}

// XTranslation retrieves the translation component on the X axis from @m.
func (m *Matrix) XTranslation() float32 {
	var _arg0 *C.graphene_matrix_t // out
	var _cret C.float              // in

	_arg0 = (*C.graphene_matrix_t)(unsafe.Pointer(*Matrix))

	_cret = C.graphene_matrix_get_x_translation(_arg0)

	var _gfloat float32 // out

	_gfloat = float32(_cret)

	return _gfloat
}

// YScale retrieves the scaling factor on the Y axis in @m.
func (m *Matrix) YScale() float32 {
	var _arg0 *C.graphene_matrix_t // out
	var _cret C.float              // in

	_arg0 = (*C.graphene_matrix_t)(unsafe.Pointer(*Matrix))

	_cret = C.graphene_matrix_get_y_scale(_arg0)

	var _gfloat float32 // out

	_gfloat = float32(_cret)

	return _gfloat
}

// YTranslation retrieves the translation component on the Y axis from @m.
func (m *Matrix) YTranslation() float32 {
	var _arg0 *C.graphene_matrix_t // out
	var _cret C.float              // in

	_arg0 = (*C.graphene_matrix_t)(unsafe.Pointer(*Matrix))

	_cret = C.graphene_matrix_get_y_translation(_arg0)

	var _gfloat float32 // out

	_gfloat = float32(_cret)

	return _gfloat
}

// ZScale retrieves the scaling factor on the Z axis in @m.
func (m *Matrix) ZScale() float32 {
	var _arg0 *C.graphene_matrix_t // out
	var _cret C.float              // in

	_arg0 = (*C.graphene_matrix_t)(unsafe.Pointer(*Matrix))

	_cret = C.graphene_matrix_get_z_scale(_arg0)

	var _gfloat float32 // out

	_gfloat = float32(_cret)

	return _gfloat
}

// ZTranslation retrieves the translation component on the Z axis from @m.
func (m *Matrix) ZTranslation() float32 {
	var _arg0 *C.graphene_matrix_t // out
	var _cret C.float              // in

	_arg0 = (*C.graphene_matrix_t)(unsafe.Pointer(*Matrix))

	_cret = C.graphene_matrix_get_z_translation(_arg0)

	var _gfloat float32 // out

	_gfloat = float32(_cret)

	return _gfloat
}

// InitFrom2D initializes a #graphene_matrix_t from the values of an affine
// transformation matrix.
//
// The arguments map to the following matrix layout:
//
//    ⎛ xx  yx ⎞   ⎛  a   b  0 ⎞
//    ⎜ xy  yy ⎟ = ⎜  c   d  0 ⎟
//    ⎝ x0  y0 ⎠   ⎝ tx  ty  1 ⎠
//
// This function can be used to convert between an affine matrix type from other
// libraries and a #graphene_matrix_t.
func (m *Matrix) InitFrom2D(xx float64, yx float64, xy float64, yy float64, x0 float64, y0 float64) *Matrix {
	var _arg0 *C.graphene_matrix_t // out
	var _arg1 C.double             // out
	var _arg2 C.double             // out
	var _arg3 C.double             // out
	var _arg4 C.double             // out
	var _arg5 C.double             // out
	var _arg6 C.double             // out
	var _cret *C.graphene_matrix_t // in

	_arg0 = (*C.graphene_matrix_t)(unsafe.Pointer(*Matrix))
	_arg1 = C.double(xx)
	_arg2 = C.double(yx)
	_arg3 = C.double(xy)
	_arg4 = C.double(yy)
	_arg5 = C.double(x0)
	_arg6 = C.double(y0)

	_cret = C.graphene_matrix_init_from_2d(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6)

	var _matrix *Matrix // out

	_matrix = (*Matrix)(unsafe.Pointer(*C.graphene_matrix_t))

	return _matrix
}

// InitFromFloat initializes a #graphene_matrix_t with the given array of
// floating point values.
func (m *Matrix) InitFromFloat(v [16]float32) *Matrix {
	var _arg0 *C.graphene_matrix_t // out
	var _arg1 *C.float
	var _cret *C.graphene_matrix_t // in

	_arg0 = (*C.graphene_matrix_t)(unsafe.Pointer(*Matrix))
	_arg1 = (*C.float)(unsafe.Pointer(&v))

	_cret = C.graphene_matrix_init_from_float(_arg0, _arg1)

	var _matrix *Matrix // out

	_matrix = (*Matrix)(unsafe.Pointer(*C.graphene_matrix_t))

	return _matrix
}

// InitFromMatrix initializes a #graphene_matrix_t using the values of the given
// matrix.
func (m *Matrix) InitFromMatrix(src *Matrix) *Matrix {
	var _arg0 *C.graphene_matrix_t // out
	var _arg1 *C.graphene_matrix_t // out
	var _cret *C.graphene_matrix_t // in

	_arg0 = (*C.graphene_matrix_t)(unsafe.Pointer(*Matrix))
	_arg1 = (*C.graphene_matrix_t)(unsafe.Pointer(*Matrix))

	_cret = C.graphene_matrix_init_from_matrix(_arg0, _arg1)

	var _matrix *Matrix // out

	_matrix = (*Matrix)(unsafe.Pointer(*C.graphene_matrix_t))

	return _matrix
}

// InitFromVec4 initializes a #graphene_matrix_t with the given four row
// vectors.
func (m *Matrix) InitFromVec4(v0 *Vec4, v1 *Vec4, v2 *Vec4, v3 *Vec4) *Matrix {
	var _arg0 *C.graphene_matrix_t // out
	var _arg1 *C.graphene_vec4_t   // out
	var _arg2 *C.graphene_vec4_t   // out
	var _arg3 *C.graphene_vec4_t   // out
	var _arg4 *C.graphene_vec4_t   // out
	var _cret *C.graphene_matrix_t // in

	_arg0 = (*C.graphene_matrix_t)(unsafe.Pointer(*Matrix))
	_arg1 = (*C.graphene_vec4_t)(unsafe.Pointer(*Vec4))
	_arg2 = (*C.graphene_vec4_t)(unsafe.Pointer(*Vec4))
	_arg3 = (*C.graphene_vec4_t)(unsafe.Pointer(*Vec4))
	_arg4 = (*C.graphene_vec4_t)(unsafe.Pointer(*Vec4))

	_cret = C.graphene_matrix_init_from_vec4(_arg0, _arg1, _arg2, _arg3, _arg4)

	var _matrix *Matrix // out

	_matrix = (*Matrix)(unsafe.Pointer(*C.graphene_matrix_t))

	return _matrix
}

// InitFrustum initializes a #graphene_matrix_t compatible with
// #graphene_frustum_t.
//
// See also: graphene_frustum_init_from_matrix()
func (m *Matrix) InitFrustum(left float32, right float32, bottom float32, top float32, zNear float32, zFar float32) *Matrix {
	var _arg0 *C.graphene_matrix_t // out
	var _arg1 C.float              // out
	var _arg2 C.float              // out
	var _arg3 C.float              // out
	var _arg4 C.float              // out
	var _arg5 C.float              // out
	var _arg6 C.float              // out
	var _cret *C.graphene_matrix_t // in

	_arg0 = (*C.graphene_matrix_t)(unsafe.Pointer(*Matrix))
	_arg1 = C.float(left)
	_arg2 = C.float(right)
	_arg3 = C.float(bottom)
	_arg4 = C.float(top)
	_arg5 = C.float(zNear)
	_arg6 = C.float(zFar)

	_cret = C.graphene_matrix_init_frustum(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6)

	var _matrix *Matrix // out

	_matrix = (*Matrix)(unsafe.Pointer(*C.graphene_matrix_t))

	return _matrix
}

// InitIdentity initializes a #graphene_matrix_t with the identity matrix.
func (m *Matrix) InitIdentity() *Matrix {
	var _arg0 *C.graphene_matrix_t // out
	var _cret *C.graphene_matrix_t // in

	_arg0 = (*C.graphene_matrix_t)(unsafe.Pointer(*Matrix))

	_cret = C.graphene_matrix_init_identity(_arg0)

	var _matrix *Matrix // out

	_matrix = (*Matrix)(unsafe.Pointer(*C.graphene_matrix_t))

	return _matrix
}

// InitLookAt initializes a #graphene_matrix_t so that it positions the "camera"
// at the given @eye coordinates towards an object at the @center coordinates.
// The top of the camera is aligned to the direction of the @up vector.
//
// Before the transform, the camera is assumed to be placed at the origin,
// looking towards the negative Z axis, with the top side of the camera facing
// in the direction of the Y axis and the right side in the direction of the X
// axis.
//
// In theory, one could use @m to transform a model of such a camera into
// world-space. However, it is more common to use the inverse of @m to transform
// another object from world coordinates to the view coordinates of the camera.
// Typically you would then apply the camera projection transform to get from
// view to screen coordinates.
func (m *Matrix) InitLookAt(eye *Vec3, center *Vec3, up *Vec3) *Matrix {
	var _arg0 *C.graphene_matrix_t // out
	var _arg1 *C.graphene_vec3_t   // out
	var _arg2 *C.graphene_vec3_t   // out
	var _arg3 *C.graphene_vec3_t   // out
	var _cret *C.graphene_matrix_t // in

	_arg0 = (*C.graphene_matrix_t)(unsafe.Pointer(*Matrix))
	_arg1 = (*C.graphene_vec3_t)(unsafe.Pointer(*Vec3))
	_arg2 = (*C.graphene_vec3_t)(unsafe.Pointer(*Vec3))
	_arg3 = (*C.graphene_vec3_t)(unsafe.Pointer(*Vec3))

	_cret = C.graphene_matrix_init_look_at(_arg0, _arg1, _arg2, _arg3)

	var _matrix *Matrix // out

	_matrix = (*Matrix)(unsafe.Pointer(*C.graphene_matrix_t))

	return _matrix
}

// InitOrtho initializes a #graphene_matrix_t with an orthographic projection.
func (m *Matrix) InitOrtho(left float32, right float32, top float32, bottom float32, zNear float32, zFar float32) *Matrix {
	var _arg0 *C.graphene_matrix_t // out
	var _arg1 C.float              // out
	var _arg2 C.float              // out
	var _arg3 C.float              // out
	var _arg4 C.float              // out
	var _arg5 C.float              // out
	var _arg6 C.float              // out
	var _cret *C.graphene_matrix_t // in

	_arg0 = (*C.graphene_matrix_t)(unsafe.Pointer(*Matrix))
	_arg1 = C.float(left)
	_arg2 = C.float(right)
	_arg3 = C.float(top)
	_arg4 = C.float(bottom)
	_arg5 = C.float(zNear)
	_arg6 = C.float(zFar)

	_cret = C.graphene_matrix_init_ortho(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6)

	var _matrix *Matrix // out

	_matrix = (*Matrix)(unsafe.Pointer(*C.graphene_matrix_t))

	return _matrix
}

// InitPerspective initializes a #graphene_matrix_t with a perspective
// projection.
func (m *Matrix) InitPerspective(fovy float32, aspect float32, zNear float32, zFar float32) *Matrix {
	var _arg0 *C.graphene_matrix_t // out
	var _arg1 C.float              // out
	var _arg2 C.float              // out
	var _arg3 C.float              // out
	var _arg4 C.float              // out
	var _cret *C.graphene_matrix_t // in

	_arg0 = (*C.graphene_matrix_t)(unsafe.Pointer(*Matrix))
	_arg1 = C.float(fovy)
	_arg2 = C.float(aspect)
	_arg3 = C.float(zNear)
	_arg4 = C.float(zFar)

	_cret = C.graphene_matrix_init_perspective(_arg0, _arg1, _arg2, _arg3, _arg4)

	var _matrix *Matrix // out

	_matrix = (*Matrix)(unsafe.Pointer(*C.graphene_matrix_t))

	return _matrix
}

// InitRotate initializes @m to represent a rotation of @angle degrees on the
// axis represented by the @axis vector.
func (m *Matrix) InitRotate(angle float32, axis *Vec3) *Matrix {
	var _arg0 *C.graphene_matrix_t // out
	var _arg1 C.float              // out
	var _arg2 *C.graphene_vec3_t   // out
	var _cret *C.graphene_matrix_t // in

	_arg0 = (*C.graphene_matrix_t)(unsafe.Pointer(*Matrix))
	_arg1 = C.float(angle)
	_arg2 = (*C.graphene_vec3_t)(unsafe.Pointer(*Vec3))

	_cret = C.graphene_matrix_init_rotate(_arg0, _arg1, _arg2)

	var _matrix *Matrix // out

	_matrix = (*Matrix)(unsafe.Pointer(*C.graphene_matrix_t))

	return _matrix
}

// InitScale initializes a #graphene_matrix_t with the given scaling factors.
func (m *Matrix) InitScale(x float32, y float32, z float32) *Matrix {
	var _arg0 *C.graphene_matrix_t // out
	var _arg1 C.float              // out
	var _arg2 C.float              // out
	var _arg3 C.float              // out
	var _cret *C.graphene_matrix_t // in

	_arg0 = (*C.graphene_matrix_t)(unsafe.Pointer(*Matrix))
	_arg1 = C.float(x)
	_arg2 = C.float(y)
	_arg3 = C.float(z)

	_cret = C.graphene_matrix_init_scale(_arg0, _arg1, _arg2, _arg3)

	var _matrix *Matrix // out

	_matrix = (*Matrix)(unsafe.Pointer(*C.graphene_matrix_t))

	return _matrix
}

// InitSkew initializes a #graphene_matrix_t with a skew transformation with the
// given factors.
func (m *Matrix) InitSkew(xSkew float32, ySkew float32) *Matrix {
	var _arg0 *C.graphene_matrix_t // out
	var _arg1 C.float              // out
	var _arg2 C.float              // out
	var _cret *C.graphene_matrix_t // in

	_arg0 = (*C.graphene_matrix_t)(unsafe.Pointer(*Matrix))
	_arg1 = C.float(xSkew)
	_arg2 = C.float(ySkew)

	_cret = C.graphene_matrix_init_skew(_arg0, _arg1, _arg2)

	var _matrix *Matrix // out

	_matrix = (*Matrix)(unsafe.Pointer(*C.graphene_matrix_t))

	return _matrix
}

// InitTranslate initializes a #graphene_matrix_t with a translation to the
// given coordinates.
func (m *Matrix) InitTranslate(p *Point3D) *Matrix {
	var _arg0 *C.graphene_matrix_t  // out
	var _arg1 *C.graphene_point3d_t // out
	var _cret *C.graphene_matrix_t  // in

	_arg0 = (*C.graphene_matrix_t)(unsafe.Pointer(*Matrix))
	_arg1 = (*C.graphene_point3d_t)(unsafe.Pointer(*Point3D))

	_cret = C.graphene_matrix_init_translate(_arg0, _arg1)

	var _matrix *Matrix // out

	_matrix = (*Matrix)(unsafe.Pointer(*C.graphene_matrix_t))

	return _matrix
}

// Is2D checks whether the given #graphene_matrix_t is compatible with an a 2D
// affine transformation matrix.
func (m *Matrix) Is2D() bool {
	var _arg0 *C.graphene_matrix_t // out
	var _cret C._Bool              // in

	_arg0 = (*C.graphene_matrix_t)(unsafe.Pointer(*Matrix))

	_cret = C.graphene_matrix_is_2d(_arg0)

	var _ok bool // out

	if _cret {
		_ok = true
	}

	return _ok
}

// IsBackfaceVisible checks whether a #graphene_matrix_t has a visible back
// face.
func (m *Matrix) IsBackfaceVisible() bool {
	var _arg0 *C.graphene_matrix_t // out
	var _cret C._Bool              // in

	_arg0 = (*C.graphene_matrix_t)(unsafe.Pointer(*Matrix))

	_cret = C.graphene_matrix_is_backface_visible(_arg0)

	var _ok bool // out

	if _cret {
		_ok = true
	}

	return _ok
}

// IsIdentity checks whether the given #graphene_matrix_t is the identity
// matrix.
func (m *Matrix) IsIdentity() bool {
	var _arg0 *C.graphene_matrix_t // out
	var _cret C._Bool              // in

	_arg0 = (*C.graphene_matrix_t)(unsafe.Pointer(*Matrix))

	_cret = C.graphene_matrix_is_identity(_arg0)

	var _ok bool // out

	if _cret {
		_ok = true
	}

	return _ok
}

// IsSingular checks whether a matrix is singular.
func (m *Matrix) IsSingular() bool {
	var _arg0 *C.graphene_matrix_t // out
	var _cret C._Bool              // in

	_arg0 = (*C.graphene_matrix_t)(unsafe.Pointer(*Matrix))

	_cret = C.graphene_matrix_is_singular(_arg0)

	var _ok bool // out

	if _cret {
		_ok = true
	}

	return _ok
}

// Near compares the two given #graphene_matrix_t matrices and checks whether
// their values are within the given @epsilon of each other.
func (a *Matrix) Near(b *Matrix, epsilon float32) bool {
	var _arg0 *C.graphene_matrix_t // out
	var _arg1 *C.graphene_matrix_t // out
	var _arg2 C.float              // out
	var _cret C._Bool              // in

	_arg0 = (*C.graphene_matrix_t)(unsafe.Pointer(*Matrix))
	_arg1 = (*C.graphene_matrix_t)(unsafe.Pointer(*Matrix))
	_arg2 = C.float(epsilon)

	_cret = C.graphene_matrix_near(_arg0, _arg1, _arg2)

	var _ok bool // out

	if _cret {
		_ok = true
	}

	return _ok
}

// Print prints the contents of a matrix to the standard error stream.
//
// This function is only useful for debugging; there are no guarantees made on
// the format of the output.
func (m *Matrix) Print() {
	var _arg0 *C.graphene_matrix_t // out

	_arg0 = (*C.graphene_matrix_t)(unsafe.Pointer(*Matrix))

	C.graphene_matrix_print(_arg0)
}

// Rotate adds a rotation transformation to @m, using the given @angle and @axis
// vector.
//
// This is the equivalent of calling graphene_matrix_init_rotate() and then
// multiplying the matrix @m with the rotation matrix.
func (m *Matrix) Rotate(angle float32, axis *Vec3) {
	var _arg0 *C.graphene_matrix_t // out
	var _arg1 C.float              // out
	var _arg2 *C.graphene_vec3_t   // out

	_arg0 = (*C.graphene_matrix_t)(unsafe.Pointer(*Matrix))
	_arg1 = C.float(angle)
	_arg2 = (*C.graphene_vec3_t)(unsafe.Pointer(*Vec3))

	C.graphene_matrix_rotate(_arg0, _arg1, _arg2)
}

// RotateEuler adds a rotation transformation to @m, using the given
// #graphene_euler_t.
func (m *Matrix) RotateEuler(e *Euler) {
	var _arg0 *C.graphene_matrix_t // out
	var _arg1 *C.graphene_euler_t  // out

	_arg0 = (*C.graphene_matrix_t)(unsafe.Pointer(*Matrix))
	_arg1 = (*C.graphene_euler_t)(unsafe.Pointer(*Euler))

	C.graphene_matrix_rotate_euler(_arg0, _arg1)
}

// RotateQuaternion adds a rotation transformation to @m, using the given
// #graphene_quaternion_t.
//
// This is the equivalent of calling graphene_quaternion_to_matrix() and then
// multiplying @m with the rotation matrix.
func (m *Matrix) RotateQuaternion(q *Quaternion) {
	var _arg0 *C.graphene_matrix_t     // out
	var _arg1 *C.graphene_quaternion_t // out

	_arg0 = (*C.graphene_matrix_t)(unsafe.Pointer(*Matrix))
	_arg1 = (*C.graphene_quaternion_t)(unsafe.Pointer(*Quaternion))

	C.graphene_matrix_rotate_quaternion(_arg0, _arg1)
}

// RotateX adds a rotation transformation around the X axis to @m, using the
// given @angle.
//
// See also: graphene_matrix_rotate()
func (m *Matrix) RotateX(angle float32) {
	var _arg0 *C.graphene_matrix_t // out
	var _arg1 C.float              // out

	_arg0 = (*C.graphene_matrix_t)(unsafe.Pointer(*Matrix))
	_arg1 = C.float(angle)

	C.graphene_matrix_rotate_x(_arg0, _arg1)
}

// RotateY adds a rotation transformation around the Y axis to @m, using the
// given @angle.
//
// See also: graphene_matrix_rotate()
func (m *Matrix) RotateY(angle float32) {
	var _arg0 *C.graphene_matrix_t // out
	var _arg1 C.float              // out

	_arg0 = (*C.graphene_matrix_t)(unsafe.Pointer(*Matrix))
	_arg1 = C.float(angle)

	C.graphene_matrix_rotate_y(_arg0, _arg1)
}

// RotateZ adds a rotation transformation around the Z axis to @m, using the
// given @angle.
//
// See also: graphene_matrix_rotate()
func (m *Matrix) RotateZ(angle float32) {
	var _arg0 *C.graphene_matrix_t // out
	var _arg1 C.float              // out

	_arg0 = (*C.graphene_matrix_t)(unsafe.Pointer(*Matrix))
	_arg1 = C.float(angle)

	C.graphene_matrix_rotate_z(_arg0, _arg1)
}

// Scale adds a scaling transformation to @m, using the three given factors.
//
// This is the equivalent of calling graphene_matrix_init_scale() and then
// multiplying the matrix @m with the scale matrix.
func (m *Matrix) Scale(factorX float32, factorY float32, factorZ float32) {
	var _arg0 *C.graphene_matrix_t // out
	var _arg1 C.float              // out
	var _arg2 C.float              // out
	var _arg3 C.float              // out

	_arg0 = (*C.graphene_matrix_t)(unsafe.Pointer(*Matrix))
	_arg1 = C.float(factorX)
	_arg2 = C.float(factorY)
	_arg3 = C.float(factorZ)

	C.graphene_matrix_scale(_arg0, _arg1, _arg2, _arg3)
}

// SkewXY adds a skew of @factor on the X and Y axis to the given matrix.
func (m *Matrix) SkewXY(factor float32) {
	var _arg0 *C.graphene_matrix_t // out
	var _arg1 C.float              // out

	_arg0 = (*C.graphene_matrix_t)(unsafe.Pointer(*Matrix))
	_arg1 = C.float(factor)

	C.graphene_matrix_skew_xy(_arg0, _arg1)
}

// SkewXZ adds a skew of @factor on the X and Z axis to the given matrix.
func (m *Matrix) SkewXZ(factor float32) {
	var _arg0 *C.graphene_matrix_t // out
	var _arg1 C.float              // out

	_arg0 = (*C.graphene_matrix_t)(unsafe.Pointer(*Matrix))
	_arg1 = C.float(factor)

	C.graphene_matrix_skew_xz(_arg0, _arg1)
}

// SkewYZ adds a skew of @factor on the Y and Z axis to the given matrix.
func (m *Matrix) SkewYZ(factor float32) {
	var _arg0 *C.graphene_matrix_t // out
	var _arg1 C.float              // out

	_arg0 = (*C.graphene_matrix_t)(unsafe.Pointer(*Matrix))
	_arg1 = C.float(factor)

	C.graphene_matrix_skew_yz(_arg0, _arg1)
}

// To2D converts a #graphene_matrix_t to an affine transformation matrix, if the
// given matrix is compatible.
//
// The returned values have the following layout:
//
//    ⎛ xx  yx ⎞   ⎛  a   b  0 ⎞
//    ⎜ xy  yy ⎟ = ⎜  c   d  0 ⎟
//    ⎝ x0  y0 ⎠   ⎝ tx  ty  1 ⎠
//
// This function can be used to convert between a #graphene_matrix_t and an
// affine matrix type from other libraries.
func (m *Matrix) To2D() (xx float64, yx float64, xy float64, yy float64, x0 float64, y0 float64, ok bool) {
	var _arg0 *C.graphene_matrix_t // out
	var _arg1 C.double             // in
	var _arg2 C.double             // in
	var _arg3 C.double             // in
	var _arg4 C.double             // in
	var _arg5 C.double             // in
	var _arg6 C.double             // in
	var _cret C._Bool              // in

	_arg0 = (*C.graphene_matrix_t)(unsafe.Pointer(*Matrix))

	_cret = C.graphene_matrix_to_2d(_arg0, &_arg1, &_arg2, &_arg3, &_arg4, &_arg5, &_arg6)

	var _xx float64 // out
	var _yx float64 // out
	var _xy float64 // out
	var _yy float64 // out
	var _x0 float64 // out
	var _y0 float64 // out
	var _ok bool    // out

	_xx = float64(_arg1)
	_yx = float64(_arg2)
	_xy = float64(_arg3)
	_yy = float64(_arg4)
	_x0 = float64(_arg5)
	_y0 = float64(_arg6)
	if _cret {
		_ok = true
	}

	return _xx, _yx, _xy, _yy, _x0, _y0, _ok
}

// ToFloat converts a #graphene_matrix_t to an array of floating point values.
func (m *Matrix) ToFloat() [16]float32 {
	var _arg0 *C.graphene_matrix_t // out
	var _arg1 [16]C.float

	_arg0 = (*C.graphene_matrix_t)(unsafe.Pointer(*Matrix))

	C.graphene_matrix_to_float(_arg0, &_arg1[0])

	var _v [16]float32

	_v = *(*[16]float32)(unsafe.Pointer(&_arg1))

	return _v
}

// Translate adds a translation transformation to @m using the coordinates of
// the given #graphene_point3d_t.
//
// This is the equivalent of calling graphene_matrix_init_translate() and then
// multiplying @m with the translation matrix.
func (m *Matrix) Translate(pos *Point3D) {
	var _arg0 *C.graphene_matrix_t  // out
	var _arg1 *C.graphene_point3d_t // out

	_arg0 = (*C.graphene_matrix_t)(unsafe.Pointer(*Matrix))
	_arg1 = (*C.graphene_point3d_t)(unsafe.Pointer(*Point3D))

	C.graphene_matrix_translate(_arg0, _arg1)
}
