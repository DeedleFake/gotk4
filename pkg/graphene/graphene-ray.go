// Code generated by girgen. DO NOT EDIT.

package graphene

import (
	"runtime"
	"unsafe"

	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: graphene-gobject-1.0 graphene-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <graphene-gobject.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.graphene_ray_get_type()), F: marshalRay},
	})
}

// RayIntersectionKind: the type of intersection.
type RayIntersectionKind int

const (
	// None: no intersection
	RayIntersectionKindNone RayIntersectionKind = iota
	// Enter: the ray is entering the intersected object
	RayIntersectionKindEnter
	// Leave: the ray is leaving the intersected object
	RayIntersectionKindLeave
)

// Ray: ray emitted from an origin in a given direction.
//
// The contents of the `graphene_ray_t` structure are private, and should not be
// modified directly.
type Ray struct {
	native C.graphene_ray_t
}

// WrapRay wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapRay(ptr unsafe.Pointer) *Ray {
	return (*Ray)(ptr)
}

func marshalRay(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return (*Ray)(unsafe.Pointer(b)), nil
}

// NewRayAlloc constructs a struct Ray.
func NewRayAlloc() *Ray {
	var _cret *C.graphene_ray_t // in

	_cret = C.graphene_ray_alloc()

	var _ray *Ray // out

	_ray = (*Ray)(unsafe.Pointer(*C.graphene_ray_t))
	runtime.SetFinalizer(_ray, func(v *Ray) {
		C.free(unsafe.Pointer(v))
	})

	return _ray
}

// Native returns the underlying C source pointer.
func (r *Ray) Native() unsafe.Pointer {
	return unsafe.Pointer(&r.native)
}

// Equal checks whether the two given #graphene_ray_t are equal.
func (a *Ray) Equal(b *Ray) bool {
	var _arg0 *C.graphene_ray_t // out
	var _arg1 *C.graphene_ray_t // out
	var _cret C._Bool           // in

	_arg0 = (*C.graphene_ray_t)(unsafe.Pointer(*Ray))
	_arg1 = (*C.graphene_ray_t)(unsafe.Pointer(*Ray))

	_cret = C.graphene_ray_equal(_arg0, _arg1)

	var _ok bool // out

	if _cret {
		_ok = true
	}

	return _ok
}

// Free frees the resources allocated by graphene_ray_alloc().
func (r *Ray) free() {
	var _arg0 *C.graphene_ray_t // out

	_arg0 = (*C.graphene_ray_t)(unsafe.Pointer(*Ray))

	C.graphene_ray_free(_arg0)
}

// DistanceToPlane computes the distance of the origin of the given
// #graphene_ray_t from the given plane.
//
// If the ray does not intersect the plane, this function returns `INFINITY`.
func (r *Ray) DistanceToPlane(p *Plane) float32 {
	var _arg0 *C.graphene_ray_t   // out
	var _arg1 *C.graphene_plane_t // out
	var _cret C.float             // in

	_arg0 = (*C.graphene_ray_t)(unsafe.Pointer(*Ray))
	_arg1 = (*C.graphene_plane_t)(unsafe.Pointer(*Plane))

	_cret = C.graphene_ray_get_distance_to_plane(_arg0, _arg1)

	var _gfloat float32 // out

	_gfloat = float32(_cret)

	return _gfloat
}

// DistanceToPoint computes the distance of the closest approach between the
// given #graphene_ray_t @r and the point @p.
//
// The closest approach to a ray from a point is the distance between the point
// and the projection of the point on the ray itself.
func (r *Ray) DistanceToPoint(p *Point3D) float32 {
	var _arg0 *C.graphene_ray_t     // out
	var _arg1 *C.graphene_point3d_t // out
	var _cret C.float               // in

	_arg0 = (*C.graphene_ray_t)(unsafe.Pointer(*Ray))
	_arg1 = (*C.graphene_point3d_t)(unsafe.Pointer(*Point3D))

	_cret = C.graphene_ray_get_distance_to_point(_arg0, _arg1)

	var _gfloat float32 // out

	_gfloat = float32(_cret)

	return _gfloat
}

// Init initializes the given #graphene_ray_t using the given @origin and
// @direction values.
func (r *Ray) Init(origin *Point3D, direction *Vec3) *Ray {
	var _arg0 *C.graphene_ray_t     // out
	var _arg1 *C.graphene_point3d_t // out
	var _arg2 *C.graphene_vec3_t    // out
	var _cret *C.graphene_ray_t     // in

	_arg0 = (*C.graphene_ray_t)(unsafe.Pointer(*Ray))
	_arg1 = (*C.graphene_point3d_t)(unsafe.Pointer(*Point3D))
	_arg2 = (*C.graphene_vec3_t)(unsafe.Pointer(*Vec3))

	_cret = C.graphene_ray_init(_arg0, _arg1, _arg2)

	var _ray *Ray // out

	_ray = (*Ray)(unsafe.Pointer(*C.graphene_ray_t))

	return _ray
}

// InitFromRay initializes the given #graphene_ray_t using the origin and
// direction values of another #graphene_ray_t.
func (r *Ray) InitFromRay(src *Ray) *Ray {
	var _arg0 *C.graphene_ray_t // out
	var _arg1 *C.graphene_ray_t // out
	var _cret *C.graphene_ray_t // in

	_arg0 = (*C.graphene_ray_t)(unsafe.Pointer(*Ray))
	_arg1 = (*C.graphene_ray_t)(unsafe.Pointer(*Ray))

	_cret = C.graphene_ray_init_from_ray(_arg0, _arg1)

	var _ray *Ray // out

	_ray = (*Ray)(unsafe.Pointer(*C.graphene_ray_t))

	return _ray
}

// InitFromVec3 initializes the given #graphene_ray_t using the given vectors.
func (r *Ray) InitFromVec3(origin *Vec3, direction *Vec3) *Ray {
	var _arg0 *C.graphene_ray_t  // out
	var _arg1 *C.graphene_vec3_t // out
	var _arg2 *C.graphene_vec3_t // out
	var _cret *C.graphene_ray_t  // in

	_arg0 = (*C.graphene_ray_t)(unsafe.Pointer(*Ray))
	_arg1 = (*C.graphene_vec3_t)(unsafe.Pointer(*Vec3))
	_arg2 = (*C.graphene_vec3_t)(unsafe.Pointer(*Vec3))

	_cret = C.graphene_ray_init_from_vec3(_arg0, _arg1, _arg2)

	var _ray *Ray // out

	_ray = (*Ray)(unsafe.Pointer(*C.graphene_ray_t))

	return _ray
}

// IntersectBox intersects the given #graphene_ray_t @r with the given
// #graphene_box_t @b.
func (r *Ray) IntersectBox(b *Box) (float32, RayIntersectionKind) {
	var _arg0 *C.graphene_ray_t                  // out
	var _arg1 *C.graphene_box_t                  // out
	var _arg2 C.float                            // in
	var _cret C.graphene_ray_intersection_kind_t // in

	_arg0 = (*C.graphene_ray_t)(unsafe.Pointer(*Ray))
	_arg1 = (*C.graphene_box_t)(unsafe.Pointer(*Box))

	_cret = C.graphene_ray_intersect_box(_arg0, _arg1, &_arg2)

	var _tOut float32                            // out
	var _rayIntersectionKind RayIntersectionKind // out

	_tOut = float32(_arg2)
	_rayIntersectionKind = (RayIntersectionKind)(C.graphene_ray_intersection_kind_t)

	return _tOut, _rayIntersectionKind
}

// IntersectSphere intersects the given #graphene_ray_t @r with the given
// #graphene_sphere_t @s.
func (r *Ray) IntersectSphere(s *Sphere) (float32, RayIntersectionKind) {
	var _arg0 *C.graphene_ray_t                  // out
	var _arg1 *C.graphene_sphere_t               // out
	var _arg2 C.float                            // in
	var _cret C.graphene_ray_intersection_kind_t // in

	_arg0 = (*C.graphene_ray_t)(unsafe.Pointer(*Ray))
	_arg1 = (*C.graphene_sphere_t)(unsafe.Pointer(*Sphere))

	_cret = C.graphene_ray_intersect_sphere(_arg0, _arg1, &_arg2)

	var _tOut float32                            // out
	var _rayIntersectionKind RayIntersectionKind // out

	_tOut = float32(_arg2)
	_rayIntersectionKind = (RayIntersectionKind)(C.graphene_ray_intersection_kind_t)

	return _tOut, _rayIntersectionKind
}

// IntersectTriangle intersects the given #graphene_ray_t @r with the given
// #graphene_triangle_t @t.
func (r *Ray) IntersectTriangle(t *Triangle) (float32, RayIntersectionKind) {
	var _arg0 *C.graphene_ray_t                  // out
	var _arg1 *C.graphene_triangle_t             // out
	var _arg2 C.float                            // in
	var _cret C.graphene_ray_intersection_kind_t // in

	_arg0 = (*C.graphene_ray_t)(unsafe.Pointer(*Ray))
	_arg1 = (*C.graphene_triangle_t)(unsafe.Pointer(*Triangle))

	_cret = C.graphene_ray_intersect_triangle(_arg0, _arg1, &_arg2)

	var _tOut float32                            // out
	var _rayIntersectionKind RayIntersectionKind // out

	_tOut = float32(_arg2)
	_rayIntersectionKind = (RayIntersectionKind)(C.graphene_ray_intersection_kind_t)

	return _tOut, _rayIntersectionKind
}

// IntersectsBox checks whether the given #graphene_ray_t @r intersects the
// given #graphene_box_t @b.
//
// See also: graphene_ray_intersect_box()
func (r *Ray) IntersectsBox(b *Box) bool {
	var _arg0 *C.graphene_ray_t // out
	var _arg1 *C.graphene_box_t // out
	var _cret C._Bool           // in

	_arg0 = (*C.graphene_ray_t)(unsafe.Pointer(*Ray))
	_arg1 = (*C.graphene_box_t)(unsafe.Pointer(*Box))

	_cret = C.graphene_ray_intersects_box(_arg0, _arg1)

	var _ok bool // out

	if _cret {
		_ok = true
	}

	return _ok
}

// IntersectsSphere checks if the given #graphene_ray_t @r intersects the given
// #graphene_sphere_t @s.
//
// See also: graphene_ray_intersect_sphere()
func (r *Ray) IntersectsSphere(s *Sphere) bool {
	var _arg0 *C.graphene_ray_t    // out
	var _arg1 *C.graphene_sphere_t // out
	var _cret C._Bool              // in

	_arg0 = (*C.graphene_ray_t)(unsafe.Pointer(*Ray))
	_arg1 = (*C.graphene_sphere_t)(unsafe.Pointer(*Sphere))

	_cret = C.graphene_ray_intersects_sphere(_arg0, _arg1)

	var _ok bool // out

	if _cret {
		_ok = true
	}

	return _ok
}

// IntersectsTriangle checks whether the given #graphene_ray_t @r intersects the
// given #graphene_triangle_t @b.
//
// See also: graphene_ray_intersect_triangle()
func (r *Ray) IntersectsTriangle(t *Triangle) bool {
	var _arg0 *C.graphene_ray_t      // out
	var _arg1 *C.graphene_triangle_t // out
	var _cret C._Bool                // in

	_arg0 = (*C.graphene_ray_t)(unsafe.Pointer(*Ray))
	_arg1 = (*C.graphene_triangle_t)(unsafe.Pointer(*Triangle))

	_cret = C.graphene_ray_intersects_triangle(_arg0, _arg1)

	var _ok bool // out

	if _cret {
		_ok = true
	}

	return _ok
}
