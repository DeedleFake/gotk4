// Code generated by girgen. DO NOT EDIT.

package graphene

import (
	"runtime"
	"unsafe"

	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: graphene-gobject-1.0 graphene-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <graphene-gobject.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.graphene_quaternion_get_type()), F: marshalQuaternion},
	})
}

// Quaternion: a quaternion.
//
// The contents of the #graphene_quaternion_t structure are private and should
// never be accessed directly.
type Quaternion struct {
	native C.graphene_quaternion_t
}

// WrapQuaternion wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapQuaternion(ptr unsafe.Pointer) *Quaternion {
	if ptr == nil {
		return nil
	}

	return (*Quaternion)(ptr)
}

func marshalQuaternion(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapQuaternion(unsafe.Pointer(b)), nil
}

// NewQuaternionAlloc constructs a struct Quaternion.
func NewQuaternionAlloc() *Quaternion {
	var _cret *C.graphene_quaternion_t

	cret = C.graphene_quaternion_alloc()

	var _quaternion *Quaternion

	_quaternion = WrapQuaternion(unsafe.Pointer(_cret))
	runtime.SetFinalizer(_quaternion, func(v *Quaternion) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return _quaternion
}

// Native returns the underlying C source pointer.
func (q *Quaternion) Native() unsafe.Pointer {
	return unsafe.Pointer(&q.native)
}

// Add adds two #graphene_quaternion_t @a and @b.
func (a *Quaternion) Add(b *Quaternion) Quaternion {
	var _arg0 *C.graphene_quaternion_t
	var _arg1 *C.graphene_quaternion_t

	_arg0 = (*C.graphene_quaternion_t)(unsafe.Pointer(a.Native()))
	_arg1 = (*C.graphene_quaternion_t)(unsafe.Pointer(b.Native()))

	var _res Quaternion

	C.graphene_quaternion_add(_arg0, _arg1, (*C.graphene_quaternion_t)(unsafe.Pointer(&_res)))

	return _res
}

// Dot computes the dot product of two #graphene_quaternion_t.
func (a *Quaternion) Dot(b *Quaternion) float32 {
	var _arg0 *C.graphene_quaternion_t
	var _arg1 *C.graphene_quaternion_t

	_arg0 = (*C.graphene_quaternion_t)(unsafe.Pointer(a.Native()))
	_arg1 = (*C.graphene_quaternion_t)(unsafe.Pointer(b.Native()))

	var _cret C.float

	cret = C.graphene_quaternion_dot(_arg0, _arg1)

	var _gfloat float32

	_gfloat = (float32)(_cret)

	return _gfloat
}

// Equal checks whether the given quaternions are equal.
func (a *Quaternion) Equal(b *Quaternion) bool {
	var _arg0 *C.graphene_quaternion_t
	var _arg1 *C.graphene_quaternion_t

	_arg0 = (*C.graphene_quaternion_t)(unsafe.Pointer(a.Native()))
	_arg1 = (*C.graphene_quaternion_t)(unsafe.Pointer(b.Native()))

	var _cret C._Bool

	cret = C.graphene_quaternion_equal(_arg0, _arg1)

	var _ok bool

	if _cret {
		_ok = true
	}

	return _ok
}

// Free releases the resources allocated by graphene_quaternion_alloc().
func (q *Quaternion) Free() {
	var _arg0 *C.graphene_quaternion_t

	_arg0 = (*C.graphene_quaternion_t)(unsafe.Pointer(q.Native()))

	C.graphene_quaternion_free(_arg0)
}

// Init initializes a #graphene_quaternion_t using the given four values.
func (q *Quaternion) Init(x float32, y float32, z float32, w float32) *Quaternion {
	var _arg0 *C.graphene_quaternion_t
	var _arg1 C.float
	var _arg2 C.float
	var _arg3 C.float
	var _arg4 C.float

	_arg0 = (*C.graphene_quaternion_t)(unsafe.Pointer(q.Native()))
	_arg1 = C.float(x)
	_arg2 = C.float(y)
	_arg3 = C.float(z)
	_arg4 = C.float(w)

	var _cret *C.graphene_quaternion_t

	cret = C.graphene_quaternion_init(_arg0, _arg1, _arg2, _arg3, _arg4)

	var _quaternion *Quaternion

	_quaternion = WrapQuaternion(unsafe.Pointer(_cret))

	return _quaternion
}

// InitFromAngleVec3 initializes a #graphene_quaternion_t using an @angle on a
// specific @axis.
func (q *Quaternion) InitFromAngleVec3(angle float32, axis *Vec3) *Quaternion {
	var _arg0 *C.graphene_quaternion_t
	var _arg1 C.float
	var _arg2 *C.graphene_vec3_t

	_arg0 = (*C.graphene_quaternion_t)(unsafe.Pointer(q.Native()))
	_arg1 = C.float(angle)
	_arg2 = (*C.graphene_vec3_t)(unsafe.Pointer(axis.Native()))

	var _cret *C.graphene_quaternion_t

	cret = C.graphene_quaternion_init_from_angle_vec3(_arg0, _arg1, _arg2)

	var _quaternion *Quaternion

	_quaternion = WrapQuaternion(unsafe.Pointer(_cret))

	return _quaternion
}

// InitFromAngles initializes a #graphene_quaternion_t using the values of the
// Euler angles (http://en.wikipedia.org/wiki/Euler_angles) on each axis.
//
// See also: graphene_quaternion_init_from_euler()
func (q *Quaternion) InitFromAngles(degX float32, degY float32, degZ float32) *Quaternion {
	var _arg0 *C.graphene_quaternion_t
	var _arg1 C.float
	var _arg2 C.float
	var _arg3 C.float

	_arg0 = (*C.graphene_quaternion_t)(unsafe.Pointer(q.Native()))
	_arg1 = C.float(degX)
	_arg2 = C.float(degY)
	_arg3 = C.float(degZ)

	var _cret *C.graphene_quaternion_t

	cret = C.graphene_quaternion_init_from_angles(_arg0, _arg1, _arg2, _arg3)

	var _quaternion *Quaternion

	_quaternion = WrapQuaternion(unsafe.Pointer(_cret))

	return _quaternion
}

// InitFromEuler initializes a #graphene_quaternion_t using the given
// #graphene_euler_t.
func (q *Quaternion) InitFromEuler(e *Euler) *Quaternion {
	var _arg0 *C.graphene_quaternion_t
	var _arg1 *C.graphene_euler_t

	_arg0 = (*C.graphene_quaternion_t)(unsafe.Pointer(q.Native()))
	_arg1 = (*C.graphene_euler_t)(unsafe.Pointer(e.Native()))

	var _cret *C.graphene_quaternion_t

	cret = C.graphene_quaternion_init_from_euler(_arg0, _arg1)

	var _quaternion *Quaternion

	_quaternion = WrapQuaternion(unsafe.Pointer(_cret))

	return _quaternion
}

// InitFromMatrix initializes a #graphene_quaternion_t using the rotation
// components of a transformation matrix.
func (q *Quaternion) InitFromMatrix(m *Matrix) *Quaternion {
	var _arg0 *C.graphene_quaternion_t
	var _arg1 *C.graphene_matrix_t

	_arg0 = (*C.graphene_quaternion_t)(unsafe.Pointer(q.Native()))
	_arg1 = (*C.graphene_matrix_t)(unsafe.Pointer(m.Native()))

	var _cret *C.graphene_quaternion_t

	cret = C.graphene_quaternion_init_from_matrix(_arg0, _arg1)

	var _quaternion *Quaternion

	_quaternion = WrapQuaternion(unsafe.Pointer(_cret))

	return _quaternion
}

// InitFromQuaternion initializes a #graphene_quaternion_t with the values from
// @src.
func (q *Quaternion) InitFromQuaternion(src *Quaternion) *Quaternion {
	var _arg0 *C.graphene_quaternion_t
	var _arg1 *C.graphene_quaternion_t

	_arg0 = (*C.graphene_quaternion_t)(unsafe.Pointer(q.Native()))
	_arg1 = (*C.graphene_quaternion_t)(unsafe.Pointer(src.Native()))

	var _cret *C.graphene_quaternion_t

	cret = C.graphene_quaternion_init_from_quaternion(_arg0, _arg1)

	var _quaternion *Quaternion

	_quaternion = WrapQuaternion(unsafe.Pointer(_cret))

	return _quaternion
}

// InitFromRadians initializes a #graphene_quaternion_t using the values of the
// Euler angles (http://en.wikipedia.org/wiki/Euler_angles) on each axis.
//
// See also: graphene_quaternion_init_from_euler()
func (q *Quaternion) InitFromRadians(radX float32, radY float32, radZ float32) *Quaternion {
	var _arg0 *C.graphene_quaternion_t
	var _arg1 C.float
	var _arg2 C.float
	var _arg3 C.float

	_arg0 = (*C.graphene_quaternion_t)(unsafe.Pointer(q.Native()))
	_arg1 = C.float(radX)
	_arg2 = C.float(radY)
	_arg3 = C.float(radZ)

	var _cret *C.graphene_quaternion_t

	cret = C.graphene_quaternion_init_from_radians(_arg0, _arg1, _arg2, _arg3)

	var _quaternion *Quaternion

	_quaternion = WrapQuaternion(unsafe.Pointer(_cret))

	return _quaternion
}

// InitFromVec4 initializes a #graphene_quaternion_t with the values from @src.
func (q *Quaternion) InitFromVec4(src *Vec4) *Quaternion {
	var _arg0 *C.graphene_quaternion_t
	var _arg1 *C.graphene_vec4_t

	_arg0 = (*C.graphene_quaternion_t)(unsafe.Pointer(q.Native()))
	_arg1 = (*C.graphene_vec4_t)(unsafe.Pointer(src.Native()))

	var _cret *C.graphene_quaternion_t

	cret = C.graphene_quaternion_init_from_vec4(_arg0, _arg1)

	var _quaternion *Quaternion

	_quaternion = WrapQuaternion(unsafe.Pointer(_cret))

	return _quaternion
}

// InitIdentity initializes a #graphene_quaternion_t using the identity
// transformation.
func (q *Quaternion) InitIdentity() *Quaternion {
	var _arg0 *C.graphene_quaternion_t

	_arg0 = (*C.graphene_quaternion_t)(unsafe.Pointer(q.Native()))

	var _cret *C.graphene_quaternion_t

	cret = C.graphene_quaternion_init_identity(_arg0)

	var _quaternion *Quaternion

	_quaternion = WrapQuaternion(unsafe.Pointer(_cret))

	return _quaternion
}

// Invert inverts a #graphene_quaternion_t, and returns the conjugate quaternion
// of @q.
func (q *Quaternion) Invert() Quaternion {
	var _arg0 *C.graphene_quaternion_t

	_arg0 = (*C.graphene_quaternion_t)(unsafe.Pointer(q.Native()))

	var _res Quaternion

	C.graphene_quaternion_invert(_arg0, (*C.graphene_quaternion_t)(unsafe.Pointer(&_res)))

	return _res
}

// Multiply multiplies two #graphene_quaternion_t @a and @b.
func (a *Quaternion) Multiply(b *Quaternion) Quaternion {
	var _arg0 *C.graphene_quaternion_t
	var _arg1 *C.graphene_quaternion_t

	_arg0 = (*C.graphene_quaternion_t)(unsafe.Pointer(a.Native()))
	_arg1 = (*C.graphene_quaternion_t)(unsafe.Pointer(b.Native()))

	var _res Quaternion

	C.graphene_quaternion_multiply(_arg0, _arg1, (*C.graphene_quaternion_t)(unsafe.Pointer(&_res)))

	return _res
}

// Normalize normalizes a #graphene_quaternion_t.
func (q *Quaternion) Normalize() Quaternion {
	var _arg0 *C.graphene_quaternion_t

	_arg0 = (*C.graphene_quaternion_t)(unsafe.Pointer(q.Native()))

	var _res Quaternion

	C.graphene_quaternion_normalize(_arg0, (*C.graphene_quaternion_t)(unsafe.Pointer(&_res)))

	return _res
}

// Scale scales all the elements of a #graphene_quaternion_t @q using the given
// scalar factor.
func (q *Quaternion) Scale(factor float32) Quaternion {
	var _arg0 *C.graphene_quaternion_t
	var _arg1 C.float

	_arg0 = (*C.graphene_quaternion_t)(unsafe.Pointer(q.Native()))
	_arg1 = C.float(factor)

	var _res Quaternion

	C.graphene_quaternion_scale(_arg0, _arg1, (*C.graphene_quaternion_t)(unsafe.Pointer(&_res)))

	return _res
}

// Slerp interpolates between the two given quaternions using a spherical linear
// interpolation, or SLERP (http://en.wikipedia.org/wiki/Slerp), using the given
// interpolation @factor.
func (a *Quaternion) Slerp(b *Quaternion, factor float32) Quaternion {
	var _arg0 *C.graphene_quaternion_t
	var _arg1 *C.graphene_quaternion_t
	var _arg2 C.float

	_arg0 = (*C.graphene_quaternion_t)(unsafe.Pointer(a.Native()))
	_arg1 = (*C.graphene_quaternion_t)(unsafe.Pointer(b.Native()))
	_arg2 = C.float(factor)

	var _res Quaternion

	C.graphene_quaternion_slerp(_arg0, _arg1, _arg2, (*C.graphene_quaternion_t)(unsafe.Pointer(&_res)))

	return _res
}

// ToAngleVec3 converts a quaternion into an @angle, @axis pair.
func (q *Quaternion) ToAngleVec3() (float32, Vec3) {
	var _arg0 *C.graphene_quaternion_t

	_arg0 = (*C.graphene_quaternion_t)(unsafe.Pointer(q.Native()))

	var _arg1 C.float
	var _axis Vec3

	C.graphene_quaternion_to_angle_vec3(_arg0, &_arg1, (*C.graphene_vec3_t)(unsafe.Pointer(&_axis)))

	var _angle float32

	_angle = (float32)(_arg1)

	return _angle, _axis
}

// ToAngles converts a #graphene_quaternion_t to its corresponding rotations on
// the Euler angles (http://en.wikipedia.org/wiki/Euler_angles) on each axis.
func (q *Quaternion) ToAngles() (degX float32, degY float32, degZ float32) {
	var _arg0 *C.graphene_quaternion_t

	_arg0 = (*C.graphene_quaternion_t)(unsafe.Pointer(q.Native()))

	var _arg1 C.float
	var _arg2 C.float
	var _arg3 C.float

	C.graphene_quaternion_to_angles(_arg0, &_arg1, &_arg2, &_arg3)

	var _degX float32
	var _degY float32
	var _degZ float32

	_degX = (float32)(_arg1)
	_degY = (float32)(_arg2)
	_degZ = (float32)(_arg3)

	return _degX, _degY, _degZ
}

// ToMatrix converts a quaternion into a transformation matrix expressing the
// rotation defined by the #graphene_quaternion_t.
func (q *Quaternion) ToMatrix() Matrix {
	var _arg0 *C.graphene_quaternion_t

	_arg0 = (*C.graphene_quaternion_t)(unsafe.Pointer(q.Native()))

	var _m Matrix

	C.graphene_quaternion_to_matrix(_arg0, (*C.graphene_matrix_t)(unsafe.Pointer(&_m)))

	return _m
}

// ToRadians converts a #graphene_quaternion_t to its corresponding rotations on
// the Euler angles (http://en.wikipedia.org/wiki/Euler_angles) on each axis.
func (q *Quaternion) ToRadians() (radX float32, radY float32, radZ float32) {
	var _arg0 *C.graphene_quaternion_t

	_arg0 = (*C.graphene_quaternion_t)(unsafe.Pointer(q.Native()))

	var _arg1 C.float
	var _arg2 C.float
	var _arg3 C.float

	C.graphene_quaternion_to_radians(_arg0, &_arg1, &_arg2, &_arg3)

	var _radX float32
	var _radY float32
	var _radZ float32

	_radX = (float32)(_arg1)
	_radY = (float32)(_arg2)
	_radZ = (float32)(_arg3)

	return _radX, _radY, _radZ
}

// ToVec4 copies the components of a #graphene_quaternion_t into a
// #graphene_vec4_t.
func (q *Quaternion) ToVec4() Vec4 {
	var _arg0 *C.graphene_quaternion_t

	_arg0 = (*C.graphene_quaternion_t)(unsafe.Pointer(q.Native()))

	var _res Vec4

	C.graphene_quaternion_to_vec4(_arg0, (*C.graphene_vec4_t)(unsafe.Pointer(&_res)))

	return _res
}
