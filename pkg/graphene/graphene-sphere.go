// Code generated by girgen. DO NOT EDIT.

package graphene

import (
	"unsafe"

	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: graphene-gobject-1.0 graphene-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <graphene-gobject.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.graphene_sphere_get_type()), F: marshalSphere},
	})
}

// Sphere: a sphere, represented by its center and radius.
type Sphere C.graphene_sphere_t

// WrapSphere wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSphere(ptr unsafe.Pointer) *Sphere {
	return (*Sphere)(ptr)
}

func marshalSphere(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return (*Sphere)(unsafe.Pointer(b)), nil
}

// NewSphereAlloc constructs a struct Sphere.
func NewSphereAlloc() *Sphere {
	var _cret *C.graphene_sphere_t // in

	_cret = C.graphene_sphere_alloc()

	var _sphere *Sphere // out

	_sphere = (*Sphere)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(&_sphere, func(v **Sphere) {
		C.free(unsafe.Pointer(v))
	})

	return _sphere
}

// Native returns the underlying C source pointer.
func (s *Sphere) Native() unsafe.Pointer {
	return unsafe.Pointer(s)
}

// ContainsPoint translates the center of the given #graphene_sphere_t using the
// @point coordinates as the delta of the translation.
func (s *Sphere) ContainsPoint(point *Point3D) bool {
	var _arg0 *C.graphene_sphere_t  // out
	var _arg1 *C.graphene_point3d_t // out
	var _cret C._Bool               // in

	_arg0 = (*C.graphene_sphere_t)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.graphene_point3d_t)(unsafe.Pointer(point.Native()))

	_cret = C.graphene_sphere_contains_point(_arg0, _arg1)

	var _ok bool // out

	if _cret {
		_ok = true
	}

	return _ok
}

// Distance translates the center of the given #graphene_sphere_t using the
// @point coordinates as the delta of the translation.
func (s *Sphere) Distance(point *Point3D) float32 {
	var _arg0 *C.graphene_sphere_t  // out
	var _arg1 *C.graphene_point3d_t // out
	var _cret C.float               // in

	_arg0 = (*C.graphene_sphere_t)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.graphene_point3d_t)(unsafe.Pointer(point.Native()))

	_cret = C.graphene_sphere_distance(_arg0, _arg1)

	var _gfloat float32 // out

	_gfloat = float32(_cret)

	return _gfloat
}

// Equal translates the center of the given #graphene_sphere_t using the @point
// coordinates as the delta of the translation.
func (s *Sphere) Equal(b *Sphere) bool {
	var _arg0 *C.graphene_sphere_t // out
	var _arg1 *C.graphene_sphere_t // out
	var _cret C._Bool              // in

	_arg0 = (*C.graphene_sphere_t)(unsafe.Pointer(a.Native()))
	_arg1 = (*C.graphene_sphere_t)(unsafe.Pointer(b.Native()))

	_cret = C.graphene_sphere_equal(_arg0, _arg1)

	var _ok bool // out

	if _cret {
		_ok = true
	}

	return _ok
}

// Free translates the center of the given #graphene_sphere_t using the @point
// coordinates as the delta of the translation.
func (s *Sphere) Free() {
	var _arg0 *C.graphene_sphere_t // out

	_arg0 = (*C.graphene_sphere_t)(unsafe.Pointer(s.Native()))

	C.graphene_sphere_free(_arg0)
}

// BoundingBox translates the center of the given #graphene_sphere_t using the
// @point coordinates as the delta of the translation.
func (s *Sphere) BoundingBox() Box {
	var _arg0 *C.graphene_sphere_t // out
	var _arg1 C.graphene_box_t     // in

	_arg0 = (*C.graphene_sphere_t)(unsafe.Pointer(s.Native()))

	C.graphene_sphere_get_bounding_box(_arg0, &_arg1)

	var _box Box // out

	{
		var refTmpIn *C.graphene_box_t
		var refTmpOut *Box

		in0 := &_arg1
		refTmpIn = in0

		refTmpOut = (*Box)(unsafe.Pointer(refTmpIn))

		_box = *refTmpOut
	}

	return _box
}

// Center translates the center of the given #graphene_sphere_t using the @point
// coordinates as the delta of the translation.
func (s *Sphere) Center() Point3D {
	var _arg0 *C.graphene_sphere_t // out
	var _arg1 C.graphene_point3d_t // in

	_arg0 = (*C.graphene_sphere_t)(unsafe.Pointer(s.Native()))

	C.graphene_sphere_get_center(_arg0, &_arg1)

	var _center Point3D // out

	{
		var refTmpIn *C.graphene_point3d_t
		var refTmpOut *Point3D

		in0 := &_arg1
		refTmpIn = in0

		refTmpOut = (*Point3D)(unsafe.Pointer(refTmpIn))

		_center = *refTmpOut
	}

	return _center
}

// Radius translates the center of the given #graphene_sphere_t using the @point
// coordinates as the delta of the translation.
func (s *Sphere) Radius() float32 {
	var _arg0 *C.graphene_sphere_t // out
	var _cret C.float              // in

	_arg0 = (*C.graphene_sphere_t)(unsafe.Pointer(s.Native()))

	_cret = C.graphene_sphere_get_radius(_arg0)

	var _gfloat float32 // out

	_gfloat = float32(_cret)

	return _gfloat
}

// Init translates the center of the given #graphene_sphere_t using the @point
// coordinates as the delta of the translation.
func (s *Sphere) Init(center *Point3D, radius float32) *Sphere {
	var _arg0 *C.graphene_sphere_t  // out
	var _arg1 *C.graphene_point3d_t // out
	var _arg2 C.float               // out
	var _cret *C.graphene_sphere_t  // in

	_arg0 = (*C.graphene_sphere_t)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.graphene_point3d_t)(unsafe.Pointer(center.Native()))
	_arg2 = C.float(radius)

	_cret = C.graphene_sphere_init(_arg0, _arg1, _arg2)

	var _sphere *Sphere // out

	_sphere = (*Sphere)(unsafe.Pointer(_cret))

	return _sphere
}

// InitFromPoints translates the center of the given #graphene_sphere_t using
// the @point coordinates as the delta of the translation.
func (s *Sphere) InitFromPoints(points []Point3D, center *Point3D) *Sphere {
	var _arg0 *C.graphene_sphere_t // out
	var _arg2 *C.graphene_point3d_t
	var _arg1 C.uint
	var _arg3 *C.graphene_point3d_t // out
	var _cret *C.graphene_sphere_t  // in

	_arg0 = (*C.graphene_sphere_t)(unsafe.Pointer(s.Native()))
	_arg1 = C.uint(len(points))
	_arg2 = (*C.graphene_point3d_t)(unsafe.Pointer(&points[0]))
	_arg3 = (*C.graphene_point3d_t)(unsafe.Pointer(center.Native()))

	_cret = C.graphene_sphere_init_from_points(_arg0, _arg1, _arg2, _arg3)

	var _sphere *Sphere // out

	_sphere = (*Sphere)(unsafe.Pointer(_cret))

	return _sphere
}

// InitFromVectors translates the center of the given #graphene_sphere_t using
// the @point coordinates as the delta of the translation.
func (s *Sphere) InitFromVectors(vectors []Vec3, center *Point3D) *Sphere {
	var _arg0 *C.graphene_sphere_t // out
	var _arg2 *C.graphene_vec3_t
	var _arg1 C.uint
	var _arg3 *C.graphene_point3d_t // out
	var _cret *C.graphene_sphere_t  // in

	_arg0 = (*C.graphene_sphere_t)(unsafe.Pointer(s.Native()))
	_arg1 = C.uint(len(vectors))
	_arg2 = (*C.graphene_vec3_t)(unsafe.Pointer(&vectors[0]))
	_arg3 = (*C.graphene_point3d_t)(unsafe.Pointer(center.Native()))

	_cret = C.graphene_sphere_init_from_vectors(_arg0, _arg1, _arg2, _arg3)

	var _sphere *Sphere // out

	_sphere = (*Sphere)(unsafe.Pointer(_cret))

	return _sphere
}

// IsEmpty translates the center of the given #graphene_sphere_t using the
// @point coordinates as the delta of the translation.
func (s *Sphere) IsEmpty() bool {
	var _arg0 *C.graphene_sphere_t // out
	var _cret C._Bool              // in

	_arg0 = (*C.graphene_sphere_t)(unsafe.Pointer(s.Native()))

	_cret = C.graphene_sphere_is_empty(_arg0)

	var _ok bool // out

	if _cret {
		_ok = true
	}

	return _ok
}

// Translate translates the center of the given #graphene_sphere_t using the
// @point coordinates as the delta of the translation.
func (s *Sphere) Translate(point *Point3D) Sphere {
	var _arg0 *C.graphene_sphere_t  // out
	var _arg1 *C.graphene_point3d_t // out
	var _arg2 C.graphene_sphere_t   // in

	_arg0 = (*C.graphene_sphere_t)(unsafe.Pointer(s.Native()))
	_arg1 = (*C.graphene_point3d_t)(unsafe.Pointer(point.Native()))

	C.graphene_sphere_translate(_arg0, _arg1, &_arg2)

	var _res Sphere // out

	{
		var refTmpIn *C.graphene_sphere_t
		var refTmpOut *Sphere

		in0 := &_arg2
		refTmpIn = in0

		refTmpOut = (*Sphere)(unsafe.Pointer(refTmpIn))

		_res = *refTmpOut
	}

	return _res
}
