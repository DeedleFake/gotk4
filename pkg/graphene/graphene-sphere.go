// Code generated by girgen. DO NOT EDIT.

package graphene

import (
	"runtime"
	"unsafe"

	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: graphene-gobject-1.0 graphene-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <graphene-gobject.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.graphene_sphere_get_type()), F: marshalSphere},
	})
}

// Sphere: a sphere, represented by its center and radius.
type Sphere struct {
	native C.graphene_sphere_t
}

// WrapSphere wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSphere(ptr unsafe.Pointer) *Sphere {
	if ptr == nil {
		return nil
	}

	return (*Sphere)(ptr)
}

func marshalSphere(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSphere(unsafe.Pointer(b)), nil
}

// NewSphereAlloc constructs a struct Sphere.
func NewSphereAlloc() *Sphere {
	var cret *C.graphene_sphere_t

	cret = C.graphene_sphere_alloc()

	var sphere *Sphere

	sphere = WrapSphere(unsafe.Pointer(cret))
	runtime.SetFinalizer(sphere, func(v *Sphere) {
		C.free(unsafe.Pointer(v.Native()))
	})

	return sphere
}

// Native returns the underlying C source pointer.
func (s *Sphere) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

// ContainsPoint checks whether the given @point is contained in the volume of a
// #graphene_sphere_t.
func (s *Sphere) ContainsPoint(point *Point3D) bool {
	var arg0 *C.graphene_sphere_t
	var arg1 *C.graphene_point3d_t

	arg0 = (*C.graphene_sphere_t)(unsafe.Pointer(s.Native()))
	arg1 = (*C.graphene_point3d_t)(unsafe.Pointer(point.Native()))

	var cret C._Bool

	cret = C.graphene_sphere_contains_point(arg0, arg1)

	var ok bool

	if cret {
		ok = true
	}

	return ok
}

// Distance computes the distance of the given @point from the surface of a
// #graphene_sphere_t.
func (s *Sphere) Distance(point *Point3D) float32 {
	var arg0 *C.graphene_sphere_t
	var arg1 *C.graphene_point3d_t

	arg0 = (*C.graphene_sphere_t)(unsafe.Pointer(s.Native()))
	arg1 = (*C.graphene_point3d_t)(unsafe.Pointer(point.Native()))

	var cret C.float

	cret = C.graphene_sphere_distance(arg0, arg1)

	var gfloat float32

	gfloat = (float32)(cret)

	return gfloat
}

// Equal checks whether two #graphene_sphere_t are equal.
func (a *Sphere) Equal(b *Sphere) bool {
	var arg0 *C.graphene_sphere_t
	var arg1 *C.graphene_sphere_t

	arg0 = (*C.graphene_sphere_t)(unsafe.Pointer(a.Native()))
	arg1 = (*C.graphene_sphere_t)(unsafe.Pointer(b.Native()))

	var cret C._Bool

	cret = C.graphene_sphere_equal(arg0, arg1)

	var ok bool

	if cret {
		ok = true
	}

	return ok
}

// Free frees the resources allocated by graphene_sphere_alloc().
func (s *Sphere) Free() {
	var arg0 *C.graphene_sphere_t

	arg0 = (*C.graphene_sphere_t)(unsafe.Pointer(s.Native()))

	C.graphene_sphere_free(arg0)
}

// BoundingBox computes the bounding box capable of containing the given
// #graphene_sphere_t.
func (s *Sphere) BoundingBox() Box {
	var arg0 *C.graphene_sphere_t

	arg0 = (*C.graphene_sphere_t)(unsafe.Pointer(s.Native()))

	var box Box

	C.graphene_sphere_get_bounding_box(arg0, (*C.graphene_box_t)(unsafe.Pointer(&box)))

	return box
}

// Center retrieves the coordinates of the center of a #graphene_sphere_t.
func (s *Sphere) Center() Point3D {
	var arg0 *C.graphene_sphere_t

	arg0 = (*C.graphene_sphere_t)(unsafe.Pointer(s.Native()))

	var center Point3D

	C.graphene_sphere_get_center(arg0, (*C.graphene_point3d_t)(unsafe.Pointer(&center)))

	return center
}

// Radius retrieves the radius of a #graphene_sphere_t.
func (s *Sphere) Radius() float32 {
	var arg0 *C.graphene_sphere_t

	arg0 = (*C.graphene_sphere_t)(unsafe.Pointer(s.Native()))

	var cret C.float

	cret = C.graphene_sphere_get_radius(arg0)

	var gfloat float32

	gfloat = (float32)(cret)

	return gfloat
}

// Init initializes the given #graphene_sphere_t with the given @center and
// @radius.
func (s *Sphere) Init(center *Point3D, radius float32) *Sphere {
	var arg0 *C.graphene_sphere_t
	var arg1 *C.graphene_point3d_t
	var arg2 C.float

	arg0 = (*C.graphene_sphere_t)(unsafe.Pointer(s.Native()))
	arg1 = (*C.graphene_point3d_t)(unsafe.Pointer(center.Native()))
	arg2 = C.float(radius)

	var cret *C.graphene_sphere_t

	cret = C.graphene_sphere_init(arg0, arg1, arg2)

	var sphere *Sphere

	sphere = WrapSphere(unsafe.Pointer(cret))

	return sphere
}

// IsEmpty checks whether the sphere has a zero radius.
func (s *Sphere) IsEmpty() bool {
	var arg0 *C.graphene_sphere_t

	arg0 = (*C.graphene_sphere_t)(unsafe.Pointer(s.Native()))

	var cret C._Bool

	cret = C.graphene_sphere_is_empty(arg0)

	var ok bool

	if cret {
		ok = true
	}

	return ok
}

// Translate translates the center of the given #graphene_sphere_t using the
// @point coordinates as the delta of the translation.
func (s *Sphere) Translate(point *Point3D) Sphere {
	var arg0 *C.graphene_sphere_t
	var arg1 *C.graphene_point3d_t

	arg0 = (*C.graphene_sphere_t)(unsafe.Pointer(s.Native()))
	arg1 = (*C.graphene_point3d_t)(unsafe.Pointer(point.Native()))

	var res Sphere

	C.graphene_sphere_translate(arg0, arg1, (*C.graphene_sphere_t)(unsafe.Pointer(&res)))

	return res
}
