// Code generated by girgen. DO NOT EDIT.

package graphene

import (
	"runtime"
	"unsafe"

	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: graphene-gobject-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <stdbool.h>
// #include <glib-object.h>
// #include <graphene-gobject.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.graphene_sphere_get_type()), F: marshalSphere},
	})
}

// Sphere: a sphere, represented by its center and radius.
type Sphere struct {
	native C.graphene_sphere_t
}

// WrapSphere wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapSphere(ptr unsafe.Pointer) *Sphere {
	if ptr == nil {
		return nil
	}

	return (*Sphere)(ptr)
}

func marshalSphere(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapSphere(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (s *Sphere) Native() unsafe.Pointer {
	return unsafe.Pointer(&s.native)
}

// NewSphereAlloc constructs a struct Sphere.
func NewSphereAlloc() *Sphere {
	ret := C.graphene_sphere_alloc()

	var ret0 *Sphere

	{
		ret0 = WrapSphere(unsafe.Pointer(ret))
		runtime.SetFinalizer(ret0, func(v *Sphere) {
			C.free(unsafe.Pointer(v.Native()))
		})
	}

	return ret0
}

// ContainsPoint checks whether the given @point is contained in the volume of a
// #graphene_sphere_t.
func (s *Sphere) ContainsPoint(point *Point3D) bool {
	var arg0 *C.graphene_sphere_t
	var arg1 *C.graphene_point3d_t

	arg0 = (*C.graphene_sphere_t)(s.Native())
	arg1 = (*C.graphene_point3d_t)(point.Native())

	ret := C.graphene_sphere_contains_point(arg0, arg1)

	var ret0 bool

	ret0 = C.bool(ret) != 0

	return ret0
}

// Distance computes the distance of the given @point from the surface of a
// #graphene_sphere_t.
func (s *Sphere) Distance(point *Point3D) float32 {
	var arg0 *C.graphene_sphere_t
	var arg1 *C.graphene_point3d_t

	arg0 = (*C.graphene_sphere_t)(s.Native())
	arg1 = (*C.graphene_point3d_t)(point.Native())

	ret := C.graphene_sphere_distance(arg0, arg1)

	var ret0 float32

	ret0 = float32(ret)

	return ret0
}

// Equal checks whether two #graphene_sphere_t are equal.
func (a *Sphere) Equal(b *Sphere) bool {
	var arg0 *C.graphene_sphere_t
	var arg1 *C.graphene_sphere_t

	arg0 = (*C.graphene_sphere_t)(a.Native())
	arg1 = (*C.graphene_sphere_t)(b.Native())

	ret := C.graphene_sphere_equal(arg0, arg1)

	var ret0 bool

	ret0 = C.bool(ret) != 0

	return ret0
}

// Free frees the resources allocated by graphene_sphere_alloc().
func (s *Sphere) Free() {
	var arg0 *C.graphene_sphere_t

	arg0 = (*C.graphene_sphere_t)(s.Native())

	C.graphene_sphere_free(arg0)
}

// BoundingBox computes the bounding box capable of containing the given
// #graphene_sphere_t.
func (s *Sphere) BoundingBox() Box {
	var arg0 *C.graphene_sphere_t
	var arg1 *C.graphene_box_t // out

	arg0 = (*C.graphene_sphere_t)(s.Native())

	C.graphene_sphere_get_bounding_box(arg0, &arg1)

	var ret0 *Box

	{
		ret0 = WrapBox(unsafe.Pointer(arg1))
	}

	return ret0
}

// Center retrieves the coordinates of the center of a #graphene_sphere_t.
func (s *Sphere) Center() Point3D {
	var arg0 *C.graphene_sphere_t
	var arg1 *C.graphene_point3d_t // out

	arg0 = (*C.graphene_sphere_t)(s.Native())

	C.graphene_sphere_get_center(arg0, &arg1)

	var ret0 *Point3D

	{
		ret0 = WrapPoint3D(unsafe.Pointer(arg1))
	}

	return ret0
}

// Radius retrieves the radius of a #graphene_sphere_t.
func (s *Sphere) Radius() float32 {
	var arg0 *C.graphene_sphere_t

	arg0 = (*C.graphene_sphere_t)(s.Native())

	ret := C.graphene_sphere_get_radius(arg0)

	var ret0 float32

	ret0 = float32(ret)

	return ret0
}

// Init initializes the given #graphene_sphere_t with the given @center and
// @radius.
func (s *Sphere) Init(center *Point3D, radius float32) *Sphere {
	var arg0 *C.graphene_sphere_t
	var arg1 *C.graphene_point3d_t
	var arg2 C.float

	arg0 = (*C.graphene_sphere_t)(s.Native())
	arg1 = (*C.graphene_point3d_t)(center.Native())
	arg2 = C.float(radius)

	ret := C.graphene_sphere_init(arg0, arg1, arg2)

	var ret0 *Sphere

	{
		ret0 = WrapSphere(unsafe.Pointer(ret))
	}

	return ret0
}

// InitFromPoints initializes the given #graphene_sphere_t using the given array
// of 3D coordinates so that the sphere includes them.
//
// The center of the sphere can either be specified, or will be center of the 3D
// volume that encompasses all @points.
func (s *Sphere) InitFromPoints(nPoints uint, points []Point3D, center *Point3D) *Sphere {
	var arg0 *C.graphene_sphere_t
	var arg1 C.uint
	var arg2 *C.graphene_point3d_t
	var arg3 *C.graphene_point3d_t

	arg0 = (*C.graphene_sphere_t)(s.Native())
	arg2 = (*C.graphene_point3d_t)(unsafe.Pointer(&points[0]))
	arg1 = len(points)
	defer runtime.KeepAlive(points)
	arg3 = (*C.graphene_point3d_t)(center.Native())

	ret := C.graphene_sphere_init_from_points(arg0, arg1, arg2, arg3)

	var ret0 *Sphere

	{
		ret0 = WrapSphere(unsafe.Pointer(ret))
	}

	return ret0
}

// InitFromVectors initializes the given #graphene_sphere_t using the given
// array of 3D coordinates so that the sphere includes them.
//
// The center of the sphere can either be specified, or will be center of the 3D
// volume that encompasses all @vectors.
func (s *Sphere) InitFromVectors(nVectors uint, vectors []Vec3, center *Point3D) *Sphere {
	var arg0 *C.graphene_sphere_t
	var arg1 C.uint
	var arg2 *C.graphene_vec3_t
	var arg3 *C.graphene_point3d_t

	arg0 = (*C.graphene_sphere_t)(s.Native())
	arg2 = (*C.graphene_vec3_t)(unsafe.Pointer(&vectors[0]))
	arg1 = len(vectors)
	defer runtime.KeepAlive(vectors)
	arg3 = (*C.graphene_point3d_t)(center.Native())

	ret := C.graphene_sphere_init_from_vectors(arg0, arg1, arg2, arg3)

	var ret0 *Sphere

	{
		ret0 = WrapSphere(unsafe.Pointer(ret))
	}

	return ret0
}

// IsEmpty checks whether the sphere has a zero radius.
func (s *Sphere) IsEmpty() bool {
	var arg0 *C.graphene_sphere_t

	arg0 = (*C.graphene_sphere_t)(s.Native())

	ret := C.graphene_sphere_is_empty(arg0)

	var ret0 bool

	ret0 = C.bool(ret) != 0

	return ret0
}

// Translate translates the center of the given #graphene_sphere_t using the
// @point coordinates as the delta of the translation.
func (s *Sphere) Translate(point *Point3D) Sphere {
	var arg0 *C.graphene_sphere_t
	var arg1 *C.graphene_point3d_t
	var arg2 *C.graphene_sphere_t // out

	arg0 = (*C.graphene_sphere_t)(s.Native())
	arg1 = (*C.graphene_point3d_t)(point.Native())

	C.graphene_sphere_translate(arg0, arg1, &arg2)

	var ret0 *Sphere

	{
		ret0 = WrapSphere(unsafe.Pointer(arg2))
	}

	return ret0
}
