// Code generated by girgen. DO NOT EDIT.

package graphene

import (
	"runtime"
	"unsafe"

	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: graphene-gobject-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <stdbool.h>
// #include <glib-object.h>
// #include <graphene-gobject.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.graphene_point_get_type()), F: marshalPoint},
	})
}

// PointZero returns a point fixed at (0, 0).
func PointZero() *Point {
	ret := C.graphene_point_zero()

	var ret0 *Point

	{
		ret0 = WrapPoint(unsafe.Pointer(ret))
	}

	return ret0
}

// Point: a point with two coordinates.
type Point struct {
	native C.graphene_point_t
}

// WrapPoint wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPoint(ptr unsafe.Pointer) *Point {
	if ptr == nil {
		return nil
	}

	return (*Point)(ptr)
}

func marshalPoint(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPoint(unsafe.Pointer(b)), nil
}

// Native returns the underlying C source pointer.
func (p *Point) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

// NewPointAlloc constructs a struct Point.
func NewPointAlloc() *Point {
	ret := C.graphene_point_alloc()

	var ret0 *Point

	{
		ret0 = WrapPoint(unsafe.Pointer(ret))
		runtime.SetFinalizer(ret0, func(v *Point) {
			C.free(unsafe.Pointer(v.Native()))
		})
	}

	return ret0
}

// X gets the field inside the struct.
func (p *Point) X() float32 {
	var ret float32
	ret = float32(p.native.x)
	return ret
}

// Y gets the field inside the struct.
func (p *Point) Y() float32 {
	var ret float32
	ret = float32(p.native.y)
	return ret
}

// Distance computes the distance between @a and @b.
func (a *Point) Distance(b *Point) (dX float32, dY float32, gfloat float32) {
	var arg0 *C.graphene_point_t
	var arg1 *C.graphene_point_t
	var arg2 *C.float // out
	var arg3 *C.float // out

	arg0 = (*C.graphene_point_t)(a.Native())
	arg1 = (*C.graphene_point_t)(b.Native())

	ret := C.graphene_point_distance(arg0, arg1, &arg2, &arg3)

	var ret0 float32
	var ret1 float32
	var ret2 float32

	ret0 = float32(arg2)

	ret1 = float32(arg3)

	ret2 = float32(ret)

	return ret0, ret1, ret2
}

// Equal checks if the two points @a and @b point to the same coordinates.
//
// This function accounts for floating point fluctuations; if you want to
// control the fuzziness of the match, you can use graphene_point_near()
// instead.
func (a *Point) Equal(b *Point) bool {
	var arg0 *C.graphene_point_t
	var arg1 *C.graphene_point_t

	arg0 = (*C.graphene_point_t)(a.Native())
	arg1 = (*C.graphene_point_t)(b.Native())

	ret := C.graphene_point_equal(arg0, arg1)

	var ret0 bool

	ret0 = C.bool(ret) != 0

	return ret0
}

// Free frees the resources allocated by graphene_point_alloc().
func (p *Point) Free() {
	var arg0 *C.graphene_point_t

	arg0 = (*C.graphene_point_t)(p.Native())

	C.graphene_point_free(arg0)
}

// Init initializes @p to the given @x and @y coordinates.
//
// It's safe to call this function multiple times.
func (p *Point) Init(x float32, y float32) *Point {
	var arg0 *C.graphene_point_t
	var arg1 C.float
	var arg2 C.float

	arg0 = (*C.graphene_point_t)(p.Native())
	arg1 = C.float(x)
	arg2 = C.float(y)

	ret := C.graphene_point_init(arg0, arg1, arg2)

	var ret0 *Point

	{
		ret0 = WrapPoint(unsafe.Pointer(ret))
	}

	return ret0
}

// InitFromPoint initializes @p with the same coordinates of @src.
func (p *Point) InitFromPoint(src *Point) *Point {
	var arg0 *C.graphene_point_t
	var arg1 *C.graphene_point_t

	arg0 = (*C.graphene_point_t)(p.Native())
	arg1 = (*C.graphene_point_t)(src.Native())

	ret := C.graphene_point_init_from_point(arg0, arg1)

	var ret0 *Point

	{
		ret0 = WrapPoint(unsafe.Pointer(ret))
	}

	return ret0
}

// InitFromVec2 initializes @p with the coordinates inside the given
// #graphene_vec2_t.
func (p *Point) InitFromVec2(src *Vec2) *Point {
	var arg0 *C.graphene_point_t
	var arg1 *C.graphene_vec2_t

	arg0 = (*C.graphene_point_t)(p.Native())
	arg1 = (*C.graphene_vec2_t)(src.Native())

	ret := C.graphene_point_init_from_vec2(arg0, arg1)

	var ret0 *Point

	{
		ret0 = WrapPoint(unsafe.Pointer(ret))
	}

	return ret0
}

// Interpolate: linearly interpolates the coordinates of @a and @b using the
// given @factor.
func (a *Point) Interpolate(b *Point, factor float64) Point {
	var arg0 *C.graphene_point_t
	var arg1 *C.graphene_point_t
	var arg2 C.double
	var arg3 *C.graphene_point_t // out

	arg0 = (*C.graphene_point_t)(a.Native())
	arg1 = (*C.graphene_point_t)(b.Native())
	arg2 = C.double(factor)

	C.graphene_point_interpolate(arg0, arg1, arg2, &arg3)

	var ret0 *Point

	{
		ret0 = WrapPoint(unsafe.Pointer(arg3))
	}

	return ret0
}

// Near checks whether the two points @a and @b are within the threshold of
// @epsilon.
func (a *Point) Near(b *Point, epsilon float32) bool {
	var arg0 *C.graphene_point_t
	var arg1 *C.graphene_point_t
	var arg2 C.float

	arg0 = (*C.graphene_point_t)(a.Native())
	arg1 = (*C.graphene_point_t)(b.Native())
	arg2 = C.float(epsilon)

	ret := C.graphene_point_near(arg0, arg1, arg2)

	var ret0 bool

	ret0 = C.bool(ret) != 0

	return ret0
}

// ToVec2 stores the coordinates of the given #graphene_point_t into a
// #graphene_vec2_t.
func (p *Point) ToVec2() Vec2 {
	var arg0 *C.graphene_point_t
	var arg1 *C.graphene_vec2_t // out

	arg0 = (*C.graphene_point_t)(p.Native())

	C.graphene_point_to_vec2(arg0, &arg1)

	var ret0 *Vec2

	{
		ret0 = WrapVec2(unsafe.Pointer(arg1))
	}

	return ret0
}
