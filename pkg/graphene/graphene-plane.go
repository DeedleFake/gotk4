// Code generated by girgen. DO NOT EDIT.

package graphene

import (
	"runtime"
	"unsafe"

	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: graphene-gobject-1.0 graphene-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <graphene-gobject.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.graphene_plane_get_type()), F: marshalPlane},
	})
}

// Plane: 2D plane that extends infinitely in a 3D volume.
//
// The contents of the `graphene_plane_t` are private, and should not be
// modified directly.
type Plane struct {
	native C.graphene_plane_t
}

// WrapPlane wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPlane(ptr unsafe.Pointer) *Plane {
	return (*Plane)(ptr)
}

func marshalPlane(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return (*Plane)(unsafe.Pointer(b)), nil
}

// NewPlaneAlloc constructs a struct Plane.
func NewPlaneAlloc() *Plane {
	var _cret *C.graphene_plane_t // in

	_cret = C.graphene_plane_alloc()

	var _plane *Plane // out

	_plane = (*Plane)(unsafe.Pointer(*C.graphene_plane_t))
	runtime.SetFinalizer(_plane, func(v *Plane) {
		C.free(unsafe.Pointer(v))
	})

	return _plane
}

// Native returns the underlying C source pointer.
func (p *Plane) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

// Distance computes the distance of @point from a #graphene_plane_t.
func (p *Plane) Distance(point *Point3D) float32 {
	var _arg0 *C.graphene_plane_t   // out
	var _arg1 *C.graphene_point3d_t // out
	var _cret C.float               // in

	_arg0 = (*C.graphene_plane_t)(unsafe.Pointer(*Plane))
	_arg1 = (*C.graphene_point3d_t)(unsafe.Pointer(*Point3D))

	_cret = C.graphene_plane_distance(_arg0, _arg1)

	var _gfloat float32 // out

	_gfloat = float32(_cret)

	return _gfloat
}

// Equal checks whether the two given #graphene_plane_t are equal.
func (a *Plane) Equal(b *Plane) bool {
	var _arg0 *C.graphene_plane_t // out
	var _arg1 *C.graphene_plane_t // out
	var _cret C._Bool             // in

	_arg0 = (*C.graphene_plane_t)(unsafe.Pointer(*Plane))
	_arg1 = (*C.graphene_plane_t)(unsafe.Pointer(*Plane))

	_cret = C.graphene_plane_equal(_arg0, _arg1)

	var _ok bool // out

	if _cret {
		_ok = true
	}

	return _ok
}

// Free frees the resources allocated by graphene_plane_alloc().
func (p *Plane) free() {
	var _arg0 *C.graphene_plane_t // out

	_arg0 = (*C.graphene_plane_t)(unsafe.Pointer(*Plane))

	C.graphene_plane_free(_arg0)
}

// Constant retrieves the distance along the normal vector of the given
// #graphene_plane_t from the origin.
func (p *Plane) Constant() float32 {
	var _arg0 *C.graphene_plane_t // out
	var _cret C.float             // in

	_arg0 = (*C.graphene_plane_t)(unsafe.Pointer(*Plane))

	_cret = C.graphene_plane_get_constant(_arg0)

	var _gfloat float32 // out

	_gfloat = float32(_cret)

	return _gfloat
}

// Init initializes the given #graphene_plane_t using the given @normal vector
// and @constant values.
func (p *Plane) Init(normal *Vec3, constant float32) *Plane {
	var _arg0 *C.graphene_plane_t // out
	var _arg1 *C.graphene_vec3_t  // out
	var _arg2 C.float             // out
	var _cret *C.graphene_plane_t // in

	_arg0 = (*C.graphene_plane_t)(unsafe.Pointer(*Plane))
	_arg1 = (*C.graphene_vec3_t)(unsafe.Pointer(*Vec3))
	_arg2 = C.float(constant)

	_cret = C.graphene_plane_init(_arg0, _arg1, _arg2)

	var _plane *Plane // out

	_plane = (*Plane)(unsafe.Pointer(*C.graphene_plane_t))

	return _plane
}

// InitFromPlane initializes the given #graphene_plane_t using the normal vector
// and constant of another #graphene_plane_t.
func (p *Plane) InitFromPlane(src *Plane) *Plane {
	var _arg0 *C.graphene_plane_t // out
	var _arg1 *C.graphene_plane_t // out
	var _cret *C.graphene_plane_t // in

	_arg0 = (*C.graphene_plane_t)(unsafe.Pointer(*Plane))
	_arg1 = (*C.graphene_plane_t)(unsafe.Pointer(*Plane))

	_cret = C.graphene_plane_init_from_plane(_arg0, _arg1)

	var _plane *Plane // out

	_plane = (*Plane)(unsafe.Pointer(*C.graphene_plane_t))

	return _plane
}

// InitFromPoint initializes the given #graphene_plane_t using the given normal
// vector and an arbitrary co-planar point.
func (p *Plane) InitFromPoint(normal *Vec3, point *Point3D) *Plane {
	var _arg0 *C.graphene_plane_t   // out
	var _arg1 *C.graphene_vec3_t    // out
	var _arg2 *C.graphene_point3d_t // out
	var _cret *C.graphene_plane_t   // in

	_arg0 = (*C.graphene_plane_t)(unsafe.Pointer(*Plane))
	_arg1 = (*C.graphene_vec3_t)(unsafe.Pointer(*Vec3))
	_arg2 = (*C.graphene_point3d_t)(unsafe.Pointer(*Point3D))

	_cret = C.graphene_plane_init_from_point(_arg0, _arg1, _arg2)

	var _plane *Plane // out

	_plane = (*Plane)(unsafe.Pointer(*C.graphene_plane_t))

	return _plane
}

// InitFromPoints initializes the given #graphene_plane_t using the 3 provided
// co-planar points.
//
// The winding order is counter-clockwise, and determines which direction the
// normal vector will point.
func (p *Plane) InitFromPoints(a *Point3D, b *Point3D, c *Point3D) *Plane {
	var _arg0 *C.graphene_plane_t   // out
	var _arg1 *C.graphene_point3d_t // out
	var _arg2 *C.graphene_point3d_t // out
	var _arg3 *C.graphene_point3d_t // out
	var _cret *C.graphene_plane_t   // in

	_arg0 = (*C.graphene_plane_t)(unsafe.Pointer(*Plane))
	_arg1 = (*C.graphene_point3d_t)(unsafe.Pointer(*Point3D))
	_arg2 = (*C.graphene_point3d_t)(unsafe.Pointer(*Point3D))
	_arg3 = (*C.graphene_point3d_t)(unsafe.Pointer(*Point3D))

	_cret = C.graphene_plane_init_from_points(_arg0, _arg1, _arg2, _arg3)

	var _plane *Plane // out

	_plane = (*Plane)(unsafe.Pointer(*C.graphene_plane_t))

	return _plane
}

// InitFromVec4 initializes the given #graphene_plane_t using the components of
// the given #graphene_vec4_t vector.
func (p *Plane) InitFromVec4(src *Vec4) *Plane {
	var _arg0 *C.graphene_plane_t // out
	var _arg1 *C.graphene_vec4_t  // out
	var _cret *C.graphene_plane_t // in

	_arg0 = (*C.graphene_plane_t)(unsafe.Pointer(*Plane))
	_arg1 = (*C.graphene_vec4_t)(unsafe.Pointer(*Vec4))

	_cret = C.graphene_plane_init_from_vec4(_arg0, _arg1)

	var _plane *Plane // out

	_plane = (*Plane)(unsafe.Pointer(*C.graphene_plane_t))

	return _plane
}
