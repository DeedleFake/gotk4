// Code generated by girgen. DO NOT EDIT.

package graphene

import (
	"unsafe"

	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: graphene-gobject-1.0 graphene-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <graphene-gobject.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.graphene_plane_get_type()), F: marshalPlane},
	})
}

// Plane: a 2D plane that extends infinitely in a 3D volume.
//
// The contents of the `graphene_plane_t` are private, and should not be
// modified directly.
type Plane C.graphene_plane_t

// WrapPlane wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPlane(ptr unsafe.Pointer) *Plane {
	return (*Plane)(ptr)
}

func marshalPlane(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return (*Plane)(unsafe.Pointer(b)), nil
}

// NewPlaneAlloc constructs a struct Plane.
func NewPlaneAlloc() *Plane {
	var _cret *C.graphene_plane_t // in

	_cret = C.graphene_plane_alloc()

	var _plane *Plane // out

	_plane = (*Plane)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(&_plane, func(v **Plane) {
		C.free(unsafe.Pointer(v))
	})

	return _plane
}

// Native returns the underlying C source pointer.
func (p *Plane) Native() unsafe.Pointer {
	return unsafe.Pointer(p)
}

// Distance transforms a #graphene_plane_t @p using the given @matrix and
// @normal_matrix.
//
// If @normal_matrix is nil, a transformation matrix for the plane normal will
// be computed from @matrix. If you are transforming multiple planes using the
// same @matrix it's recommended to compute the normal matrix beforehand to
// avoid incurring in the cost of recomputing it every time.
func (p *Plane) Distance(point *Point3D) float32 {
	var _arg0 *C.graphene_plane_t   // out
	var _arg1 *C.graphene_point3d_t // out
	var _cret C.float               // in

	_arg0 = (*C.graphene_plane_t)(unsafe.Pointer(p.Native()))
	_arg1 = (*C.graphene_point3d_t)(unsafe.Pointer(point.Native()))

	_cret = C.graphene_plane_distance(_arg0, _arg1)

	var _gfloat float32 // out

	_gfloat = float32(_cret)

	return _gfloat
}

// Equal transforms a #graphene_plane_t @p using the given @matrix and
// @normal_matrix.
//
// If @normal_matrix is nil, a transformation matrix for the plane normal will
// be computed from @matrix. If you are transforming multiple planes using the
// same @matrix it's recommended to compute the normal matrix beforehand to
// avoid incurring in the cost of recomputing it every time.
func (p *Plane) Equal(b *Plane) bool {
	var _arg0 *C.graphene_plane_t // out
	var _arg1 *C.graphene_plane_t // out
	var _cret C._Bool             // in

	_arg0 = (*C.graphene_plane_t)(unsafe.Pointer(a.Native()))
	_arg1 = (*C.graphene_plane_t)(unsafe.Pointer(b.Native()))

	_cret = C.graphene_plane_equal(_arg0, _arg1)

	var _ok bool // out

	if _cret {
		_ok = true
	}

	return _ok
}

// Free transforms a #graphene_plane_t @p using the given @matrix and
// @normal_matrix.
//
// If @normal_matrix is nil, a transformation matrix for the plane normal will
// be computed from @matrix. If you are transforming multiple planes using the
// same @matrix it's recommended to compute the normal matrix beforehand to
// avoid incurring in the cost of recomputing it every time.
func (p *Plane) Free() {
	var _arg0 *C.graphene_plane_t // out

	_arg0 = (*C.graphene_plane_t)(unsafe.Pointer(p.Native()))

	C.graphene_plane_free(_arg0)
}

// Constant transforms a #graphene_plane_t @p using the given @matrix and
// @normal_matrix.
//
// If @normal_matrix is nil, a transformation matrix for the plane normal will
// be computed from @matrix. If you are transforming multiple planes using the
// same @matrix it's recommended to compute the normal matrix beforehand to
// avoid incurring in the cost of recomputing it every time.
func (p *Plane) Constant() float32 {
	var _arg0 *C.graphene_plane_t // out
	var _cret C.float             // in

	_arg0 = (*C.graphene_plane_t)(unsafe.Pointer(p.Native()))

	_cret = C.graphene_plane_get_constant(_arg0)

	var _gfloat float32 // out

	_gfloat = float32(_cret)

	return _gfloat
}

// Normal transforms a #graphene_plane_t @p using the given @matrix and
// @normal_matrix.
//
// If @normal_matrix is nil, a transformation matrix for the plane normal will
// be computed from @matrix. If you are transforming multiple planes using the
// same @matrix it's recommended to compute the normal matrix beforehand to
// avoid incurring in the cost of recomputing it every time.
func (p *Plane) Normal() Vec3 {
	var _arg0 *C.graphene_plane_t // out
	var _arg1 C.graphene_vec3_t   // in

	_arg0 = (*C.graphene_plane_t)(unsafe.Pointer(p.Native()))

	C.graphene_plane_get_normal(_arg0, &_arg1)

	var _normal Vec3 // out

	{
		var refTmpIn *C.graphene_vec3_t
		var refTmpOut *Vec3

		in0 := &_arg1
		refTmpIn = in0

		refTmpOut = (*Vec3)(unsafe.Pointer(refTmpIn))

		_normal = *refTmpOut
	}

	return _normal
}

// Init transforms a #graphene_plane_t @p using the given @matrix and
// @normal_matrix.
//
// If @normal_matrix is nil, a transformation matrix for the plane normal will
// be computed from @matrix. If you are transforming multiple planes using the
// same @matrix it's recommended to compute the normal matrix beforehand to
// avoid incurring in the cost of recomputing it every time.
func (p *Plane) Init(normal *Vec3, constant float32) *Plane {
	var _arg0 *C.graphene_plane_t // out
	var _arg1 *C.graphene_vec3_t  // out
	var _arg2 C.float             // out
	var _cret *C.graphene_plane_t // in

	_arg0 = (*C.graphene_plane_t)(unsafe.Pointer(p.Native()))
	_arg1 = (*C.graphene_vec3_t)(unsafe.Pointer(normal.Native()))
	_arg2 = C.float(constant)

	_cret = C.graphene_plane_init(_arg0, _arg1, _arg2)

	var _plane *Plane // out

	_plane = (*Plane)(unsafe.Pointer(_cret))

	return _plane
}

// InitFromPlane transforms a #graphene_plane_t @p using the given @matrix and
// @normal_matrix.
//
// If @normal_matrix is nil, a transformation matrix for the plane normal will
// be computed from @matrix. If you are transforming multiple planes using the
// same @matrix it's recommended to compute the normal matrix beforehand to
// avoid incurring in the cost of recomputing it every time.
func (p *Plane) InitFromPlane(src *Plane) *Plane {
	var _arg0 *C.graphene_plane_t // out
	var _arg1 *C.graphene_plane_t // out
	var _cret *C.graphene_plane_t // in

	_arg0 = (*C.graphene_plane_t)(unsafe.Pointer(p.Native()))
	_arg1 = (*C.graphene_plane_t)(unsafe.Pointer(src.Native()))

	_cret = C.graphene_plane_init_from_plane(_arg0, _arg1)

	var _plane *Plane // out

	_plane = (*Plane)(unsafe.Pointer(_cret))

	return _plane
}

// InitFromPoint transforms a #graphene_plane_t @p using the given @matrix and
// @normal_matrix.
//
// If @normal_matrix is nil, a transformation matrix for the plane normal will
// be computed from @matrix. If you are transforming multiple planes using the
// same @matrix it's recommended to compute the normal matrix beforehand to
// avoid incurring in the cost of recomputing it every time.
func (p *Plane) InitFromPoint(normal *Vec3, point *Point3D) *Plane {
	var _arg0 *C.graphene_plane_t   // out
	var _arg1 *C.graphene_vec3_t    // out
	var _arg2 *C.graphene_point3d_t // out
	var _cret *C.graphene_plane_t   // in

	_arg0 = (*C.graphene_plane_t)(unsafe.Pointer(p.Native()))
	_arg1 = (*C.graphene_vec3_t)(unsafe.Pointer(normal.Native()))
	_arg2 = (*C.graphene_point3d_t)(unsafe.Pointer(point.Native()))

	_cret = C.graphene_plane_init_from_point(_arg0, _arg1, _arg2)

	var _plane *Plane // out

	_plane = (*Plane)(unsafe.Pointer(_cret))

	return _plane
}

// InitFromPoints transforms a #graphene_plane_t @p using the given @matrix and
// @normal_matrix.
//
// If @normal_matrix is nil, a transformation matrix for the plane normal will
// be computed from @matrix. If you are transforming multiple planes using the
// same @matrix it's recommended to compute the normal matrix beforehand to
// avoid incurring in the cost of recomputing it every time.
func (p *Plane) InitFromPoints(a *Point3D, b *Point3D, c *Point3D) *Plane {
	var _arg0 *C.graphene_plane_t   // out
	var _arg1 *C.graphene_point3d_t // out
	var _arg2 *C.graphene_point3d_t // out
	var _arg3 *C.graphene_point3d_t // out
	var _cret *C.graphene_plane_t   // in

	_arg0 = (*C.graphene_plane_t)(unsafe.Pointer(p.Native()))
	_arg1 = (*C.graphene_point3d_t)(unsafe.Pointer(a.Native()))
	_arg2 = (*C.graphene_point3d_t)(unsafe.Pointer(b.Native()))
	_arg3 = (*C.graphene_point3d_t)(unsafe.Pointer(c.Native()))

	_cret = C.graphene_plane_init_from_points(_arg0, _arg1, _arg2, _arg3)

	var _plane *Plane // out

	_plane = (*Plane)(unsafe.Pointer(_cret))

	return _plane
}

// InitFromVec4 transforms a #graphene_plane_t @p using the given @matrix and
// @normal_matrix.
//
// If @normal_matrix is nil, a transformation matrix for the plane normal will
// be computed from @matrix. If you are transforming multiple planes using the
// same @matrix it's recommended to compute the normal matrix beforehand to
// avoid incurring in the cost of recomputing it every time.
func (p *Plane) InitFromVec4(src *Vec4) *Plane {
	var _arg0 *C.graphene_plane_t // out
	var _arg1 *C.graphene_vec4_t  // out
	var _cret *C.graphene_plane_t // in

	_arg0 = (*C.graphene_plane_t)(unsafe.Pointer(p.Native()))
	_arg1 = (*C.graphene_vec4_t)(unsafe.Pointer(src.Native()))

	_cret = C.graphene_plane_init_from_vec4(_arg0, _arg1)

	var _plane *Plane // out

	_plane = (*Plane)(unsafe.Pointer(_cret))

	return _plane
}

// Negate transforms a #graphene_plane_t @p using the given @matrix and
// @normal_matrix.
//
// If @normal_matrix is nil, a transformation matrix for the plane normal will
// be computed from @matrix. If you are transforming multiple planes using the
// same @matrix it's recommended to compute the normal matrix beforehand to
// avoid incurring in the cost of recomputing it every time.
func (p *Plane) Negate() Plane {
	var _arg0 *C.graphene_plane_t // out
	var _arg1 C.graphene_plane_t  // in

	_arg0 = (*C.graphene_plane_t)(unsafe.Pointer(p.Native()))

	C.graphene_plane_negate(_arg0, &_arg1)

	var _res Plane // out

	{
		var refTmpIn *C.graphene_plane_t
		var refTmpOut *Plane

		in0 := &_arg1
		refTmpIn = in0

		refTmpOut = (*Plane)(unsafe.Pointer(refTmpIn))

		_res = *refTmpOut
	}

	return _res
}

// Normalize transforms a #graphene_plane_t @p using the given @matrix and
// @normal_matrix.
//
// If @normal_matrix is nil, a transformation matrix for the plane normal will
// be computed from @matrix. If you are transforming multiple planes using the
// same @matrix it's recommended to compute the normal matrix beforehand to
// avoid incurring in the cost of recomputing it every time.
func (p *Plane) Normalize() Plane {
	var _arg0 *C.graphene_plane_t // out
	var _arg1 C.graphene_plane_t  // in

	_arg0 = (*C.graphene_plane_t)(unsafe.Pointer(p.Native()))

	C.graphene_plane_normalize(_arg0, &_arg1)

	var _res Plane // out

	{
		var refTmpIn *C.graphene_plane_t
		var refTmpOut *Plane

		in0 := &_arg1
		refTmpIn = in0

		refTmpOut = (*Plane)(unsafe.Pointer(refTmpIn))

		_res = *refTmpOut
	}

	return _res
}

// Transform transforms a #graphene_plane_t @p using the given @matrix and
// @normal_matrix.
//
// If @normal_matrix is nil, a transformation matrix for the plane normal will
// be computed from @matrix. If you are transforming multiple planes using the
// same @matrix it's recommended to compute the normal matrix beforehand to
// avoid incurring in the cost of recomputing it every time.
func (p *Plane) Transform(matrix *Matrix, normalMatrix *Matrix) Plane {
	var _arg0 *C.graphene_plane_t  // out
	var _arg1 *C.graphene_matrix_t // out
	var _arg2 *C.graphene_matrix_t // out
	var _arg3 C.graphene_plane_t   // in

	_arg0 = (*C.graphene_plane_t)(unsafe.Pointer(p.Native()))
	_arg1 = (*C.graphene_matrix_t)(unsafe.Pointer(matrix.Native()))
	_arg2 = (*C.graphene_matrix_t)(unsafe.Pointer(normalMatrix.Native()))

	C.graphene_plane_transform(_arg0, _arg1, _arg2, &_arg3)

	var _res Plane // out

	{
		var refTmpIn *C.graphene_plane_t
		var refTmpOut *Plane

		in0 := &_arg3
		refTmpIn = in0

		refTmpOut = (*Plane)(unsafe.Pointer(refTmpIn))

		_res = *refTmpOut
	}

	return _res
}
