// Code generated by girgen. DO NOT EDIT.

package graphene

import (
	"unsafe"

	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: graphene-gobject-1.0 graphene-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <glib-object.h>
// #include <graphene-gobject.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.graphene_vec3_get_type()), F: marshalVec3},
	})
}

// Vec3: a structure capable of holding a vector with three dimensions: x, y,
// and z.
//
// The contents of the #graphene_vec3_t structure are private and should never
// be accessed directly.
type Vec3 C.graphene_vec3_t

// WrapVec3 wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapVec3(ptr unsafe.Pointer) *Vec3 {
	return (*Vec3)(ptr)
}

func marshalVec3(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return (*Vec3)(unsafe.Pointer(b)), nil
}

// NewVec3Alloc constructs a struct Vec3.
func NewVec3Alloc() *Vec3 {
	var _cret *C.graphene_vec3_t // in

	_cret = C.graphene_vec3_alloc()

	var _vec3 *Vec3 // out

	_vec3 = (*Vec3)(unsafe.Pointer(_cret))
	runtime.SetFinalizer(&_vec3, func(v **Vec3) {
		C.free(unsafe.Pointer(v))
	})

	return _vec3
}

// Native returns the underlying C source pointer.
func (v *Vec3) Native() unsafe.Pointer {
	return unsafe.Pointer(v)
}

// Add copies the components of a #graphene_vec3_t into the given array.
func (v *Vec3) Add(b *Vec3) Vec3 {
	var _arg0 *C.graphene_vec3_t // out
	var _arg1 *C.graphene_vec3_t // out
	var _arg2 C.graphene_vec3_t  // in

	_arg0 = (*C.graphene_vec3_t)(unsafe.Pointer(a.Native()))
	_arg1 = (*C.graphene_vec3_t)(unsafe.Pointer(b.Native()))

	C.graphene_vec3_add(_arg0, _arg1, &_arg2)

	var _res Vec3 // out

	{
		var refTmpIn *C.graphene_vec3_t
		var refTmpOut *Vec3

		in0 := &_arg2
		refTmpIn = in0

		refTmpOut = (*Vec3)(unsafe.Pointer(refTmpIn))

		_res = *refTmpOut
	}

	return _res
}

// Cross copies the components of a #graphene_vec3_t into the given array.
func (v *Vec3) Cross(b *Vec3) Vec3 {
	var _arg0 *C.graphene_vec3_t // out
	var _arg1 *C.graphene_vec3_t // out
	var _arg2 C.graphene_vec3_t  // in

	_arg0 = (*C.graphene_vec3_t)(unsafe.Pointer(a.Native()))
	_arg1 = (*C.graphene_vec3_t)(unsafe.Pointer(b.Native()))

	C.graphene_vec3_cross(_arg0, _arg1, &_arg2)

	var _res Vec3 // out

	{
		var refTmpIn *C.graphene_vec3_t
		var refTmpOut *Vec3

		in0 := &_arg2
		refTmpIn = in0

		refTmpOut = (*Vec3)(unsafe.Pointer(refTmpIn))

		_res = *refTmpOut
	}

	return _res
}

// Divide copies the components of a #graphene_vec3_t into the given array.
func (v *Vec3) Divide(b *Vec3) Vec3 {
	var _arg0 *C.graphene_vec3_t // out
	var _arg1 *C.graphene_vec3_t // out
	var _arg2 C.graphene_vec3_t  // in

	_arg0 = (*C.graphene_vec3_t)(unsafe.Pointer(a.Native()))
	_arg1 = (*C.graphene_vec3_t)(unsafe.Pointer(b.Native()))

	C.graphene_vec3_divide(_arg0, _arg1, &_arg2)

	var _res Vec3 // out

	{
		var refTmpIn *C.graphene_vec3_t
		var refTmpOut *Vec3

		in0 := &_arg2
		refTmpIn = in0

		refTmpOut = (*Vec3)(unsafe.Pointer(refTmpIn))

		_res = *refTmpOut
	}

	return _res
}

// Dot copies the components of a #graphene_vec3_t into the given array.
func (v *Vec3) Dot(b *Vec3) float32 {
	var _arg0 *C.graphene_vec3_t // out
	var _arg1 *C.graphene_vec3_t // out
	var _cret C.float            // in

	_arg0 = (*C.graphene_vec3_t)(unsafe.Pointer(a.Native()))
	_arg1 = (*C.graphene_vec3_t)(unsafe.Pointer(b.Native()))

	_cret = C.graphene_vec3_dot(_arg0, _arg1)

	var _gfloat float32 // out

	_gfloat = float32(_cret)

	return _gfloat
}

// Equal copies the components of a #graphene_vec3_t into the given array.
func (v *Vec3) Equal(v2 *Vec3) bool {
	var _arg0 *C.graphene_vec3_t // out
	var _arg1 *C.graphene_vec3_t // out
	var _cret C._Bool            // in

	_arg0 = (*C.graphene_vec3_t)(unsafe.Pointer(v.Native()))
	_arg1 = (*C.graphene_vec3_t)(unsafe.Pointer(v2.Native()))

	_cret = C.graphene_vec3_equal(_arg0, _arg1)

	var _ok bool // out

	if _cret {
		_ok = true
	}

	return _ok
}

// Free copies the components of a #graphene_vec3_t into the given array.
func (v *Vec3) Free() {
	var _arg0 *C.graphene_vec3_t // out

	_arg0 = (*C.graphene_vec3_t)(unsafe.Pointer(v.Native()))

	C.graphene_vec3_free(_arg0)
}

// X copies the components of a #graphene_vec3_t into the given array.
func (v *Vec3) X() float32 {
	var _arg0 *C.graphene_vec3_t // out
	var _cret C.float            // in

	_arg0 = (*C.graphene_vec3_t)(unsafe.Pointer(v.Native()))

	_cret = C.graphene_vec3_get_x(_arg0)

	var _gfloat float32 // out

	_gfloat = float32(_cret)

	return _gfloat
}

// XY copies the components of a #graphene_vec3_t into the given array.
func (v *Vec3) XY() Vec2 {
	var _arg0 *C.graphene_vec3_t // out
	var _arg1 C.graphene_vec2_t  // in

	_arg0 = (*C.graphene_vec3_t)(unsafe.Pointer(v.Native()))

	C.graphene_vec3_get_xy(_arg0, &_arg1)

	var _res Vec2 // out

	{
		var refTmpIn *C.graphene_vec2_t
		var refTmpOut *Vec2

		in0 := &_arg1
		refTmpIn = in0

		refTmpOut = (*Vec2)(unsafe.Pointer(refTmpIn))

		_res = *refTmpOut
	}

	return _res
}

// XY0 copies the components of a #graphene_vec3_t into the given array.
func (v *Vec3) XY0() Vec3 {
	var _arg0 *C.graphene_vec3_t // out
	var _arg1 C.graphene_vec3_t  // in

	_arg0 = (*C.graphene_vec3_t)(unsafe.Pointer(v.Native()))

	C.graphene_vec3_get_xy0(_arg0, &_arg1)

	var _res Vec3 // out

	{
		var refTmpIn *C.graphene_vec3_t
		var refTmpOut *Vec3

		in0 := &_arg1
		refTmpIn = in0

		refTmpOut = (*Vec3)(unsafe.Pointer(refTmpIn))

		_res = *refTmpOut
	}

	return _res
}

// XYZ0 copies the components of a #graphene_vec3_t into the given array.
func (v *Vec3) XYZ0() Vec4 {
	var _arg0 *C.graphene_vec3_t // out
	var _arg1 C.graphene_vec4_t  // in

	_arg0 = (*C.graphene_vec3_t)(unsafe.Pointer(v.Native()))

	C.graphene_vec3_get_xyz0(_arg0, &_arg1)

	var _res Vec4 // out

	{
		var refTmpIn *C.graphene_vec4_t
		var refTmpOut *Vec4

		in0 := &_arg1
		refTmpIn = in0

		refTmpOut = (*Vec4)(unsafe.Pointer(refTmpIn))

		_res = *refTmpOut
	}

	return _res
}

// XYZ1 copies the components of a #graphene_vec3_t into the given array.
func (v *Vec3) XYZ1() Vec4 {
	var _arg0 *C.graphene_vec3_t // out
	var _arg1 C.graphene_vec4_t  // in

	_arg0 = (*C.graphene_vec3_t)(unsafe.Pointer(v.Native()))

	C.graphene_vec3_get_xyz1(_arg0, &_arg1)

	var _res Vec4 // out

	{
		var refTmpIn *C.graphene_vec4_t
		var refTmpOut *Vec4

		in0 := &_arg1
		refTmpIn = in0

		refTmpOut = (*Vec4)(unsafe.Pointer(refTmpIn))

		_res = *refTmpOut
	}

	return _res
}

// Xyzw copies the components of a #graphene_vec3_t into the given array.
func (v *Vec3) Xyzw(w float32) Vec4 {
	var _arg0 *C.graphene_vec3_t // out
	var _arg1 C.float            // out
	var _arg2 C.graphene_vec4_t  // in

	_arg0 = (*C.graphene_vec3_t)(unsafe.Pointer(v.Native()))
	_arg1 = C.float(w)

	C.graphene_vec3_get_xyzw(_arg0, _arg1, &_arg2)

	var _res Vec4 // out

	{
		var refTmpIn *C.graphene_vec4_t
		var refTmpOut *Vec4

		in0 := &_arg2
		refTmpIn = in0

		refTmpOut = (*Vec4)(unsafe.Pointer(refTmpIn))

		_res = *refTmpOut
	}

	return _res
}

// Y copies the components of a #graphene_vec3_t into the given array.
func (v *Vec3) Y() float32 {
	var _arg0 *C.graphene_vec3_t // out
	var _cret C.float            // in

	_arg0 = (*C.graphene_vec3_t)(unsafe.Pointer(v.Native()))

	_cret = C.graphene_vec3_get_y(_arg0)

	var _gfloat float32 // out

	_gfloat = float32(_cret)

	return _gfloat
}

// Z copies the components of a #graphene_vec3_t into the given array.
func (v *Vec3) Z() float32 {
	var _arg0 *C.graphene_vec3_t // out
	var _cret C.float            // in

	_arg0 = (*C.graphene_vec3_t)(unsafe.Pointer(v.Native()))

	_cret = C.graphene_vec3_get_z(_arg0)

	var _gfloat float32 // out

	_gfloat = float32(_cret)

	return _gfloat
}

// Init copies the components of a #graphene_vec3_t into the given array.
func (v *Vec3) Init(x float32, y float32, z float32) *Vec3 {
	var _arg0 *C.graphene_vec3_t // out
	var _arg1 C.float            // out
	var _arg2 C.float            // out
	var _arg3 C.float            // out
	var _cret *C.graphene_vec3_t // in

	_arg0 = (*C.graphene_vec3_t)(unsafe.Pointer(v.Native()))
	_arg1 = C.float(x)
	_arg2 = C.float(y)
	_arg3 = C.float(z)

	_cret = C.graphene_vec3_init(_arg0, _arg1, _arg2, _arg3)

	var _vec3 *Vec3 // out

	_vec3 = (*Vec3)(unsafe.Pointer(_cret))

	return _vec3
}

// InitFromFloat copies the components of a #graphene_vec3_t into the given
// array.
func (v *Vec3) InitFromFloat(src [3]float32) *Vec3 {
	var _arg0 *C.graphene_vec3_t // out
	var _arg1 *C.float
	var _cret *C.graphene_vec3_t // in

	_arg0 = (*C.graphene_vec3_t)(unsafe.Pointer(v.Native()))
	_arg1 = (*C.float)(unsafe.Pointer(&src))

	_cret = C.graphene_vec3_init_from_float(_arg0, _arg1)

	var _vec3 *Vec3 // out

	_vec3 = (*Vec3)(unsafe.Pointer(_cret))

	return _vec3
}

// InitFromVec3 copies the components of a #graphene_vec3_t into the given
// array.
func (v *Vec3) InitFromVec3(src *Vec3) *Vec3 {
	var _arg0 *C.graphene_vec3_t // out
	var _arg1 *C.graphene_vec3_t // out
	var _cret *C.graphene_vec3_t // in

	_arg0 = (*C.graphene_vec3_t)(unsafe.Pointer(v.Native()))
	_arg1 = (*C.graphene_vec3_t)(unsafe.Pointer(src.Native()))

	_cret = C.graphene_vec3_init_from_vec3(_arg0, _arg1)

	var _vec3 *Vec3 // out

	_vec3 = (*Vec3)(unsafe.Pointer(_cret))

	return _vec3
}

// Interpolate copies the components of a #graphene_vec3_t into the given array.
func (v *Vec3) Interpolate(v2 *Vec3, factor float64) Vec3 {
	var _arg0 *C.graphene_vec3_t // out
	var _arg1 *C.graphene_vec3_t // out
	var _arg2 C.double           // out
	var _arg3 C.graphene_vec3_t  // in

	_arg0 = (*C.graphene_vec3_t)(unsafe.Pointer(v.Native()))
	_arg1 = (*C.graphene_vec3_t)(unsafe.Pointer(v2.Native()))
	_arg2 = C.double(factor)

	C.graphene_vec3_interpolate(_arg0, _arg1, _arg2, &_arg3)

	var _res Vec3 // out

	{
		var refTmpIn *C.graphene_vec3_t
		var refTmpOut *Vec3

		in0 := &_arg3
		refTmpIn = in0

		refTmpOut = (*Vec3)(unsafe.Pointer(refTmpIn))

		_res = *refTmpOut
	}

	return _res
}

// Length copies the components of a #graphene_vec3_t into the given array.
func (v *Vec3) Length() float32 {
	var _arg0 *C.graphene_vec3_t // out
	var _cret C.float            // in

	_arg0 = (*C.graphene_vec3_t)(unsafe.Pointer(v.Native()))

	_cret = C.graphene_vec3_length(_arg0)

	var _gfloat float32 // out

	_gfloat = float32(_cret)

	return _gfloat
}

// Max copies the components of a #graphene_vec3_t into the given array.
func (v *Vec3) Max(b *Vec3) Vec3 {
	var _arg0 *C.graphene_vec3_t // out
	var _arg1 *C.graphene_vec3_t // out
	var _arg2 C.graphene_vec3_t  // in

	_arg0 = (*C.graphene_vec3_t)(unsafe.Pointer(a.Native()))
	_arg1 = (*C.graphene_vec3_t)(unsafe.Pointer(b.Native()))

	C.graphene_vec3_max(_arg0, _arg1, &_arg2)

	var _res Vec3 // out

	{
		var refTmpIn *C.graphene_vec3_t
		var refTmpOut *Vec3

		in0 := &_arg2
		refTmpIn = in0

		refTmpOut = (*Vec3)(unsafe.Pointer(refTmpIn))

		_res = *refTmpOut
	}

	return _res
}

// Min copies the components of a #graphene_vec3_t into the given array.
func (v *Vec3) Min(b *Vec3) Vec3 {
	var _arg0 *C.graphene_vec3_t // out
	var _arg1 *C.graphene_vec3_t // out
	var _arg2 C.graphene_vec3_t  // in

	_arg0 = (*C.graphene_vec3_t)(unsafe.Pointer(a.Native()))
	_arg1 = (*C.graphene_vec3_t)(unsafe.Pointer(b.Native()))

	C.graphene_vec3_min(_arg0, _arg1, &_arg2)

	var _res Vec3 // out

	{
		var refTmpIn *C.graphene_vec3_t
		var refTmpOut *Vec3

		in0 := &_arg2
		refTmpIn = in0

		refTmpOut = (*Vec3)(unsafe.Pointer(refTmpIn))

		_res = *refTmpOut
	}

	return _res
}

// Multiply copies the components of a #graphene_vec3_t into the given array.
func (v *Vec3) Multiply(b *Vec3) Vec3 {
	var _arg0 *C.graphene_vec3_t // out
	var _arg1 *C.graphene_vec3_t // out
	var _arg2 C.graphene_vec3_t  // in

	_arg0 = (*C.graphene_vec3_t)(unsafe.Pointer(a.Native()))
	_arg1 = (*C.graphene_vec3_t)(unsafe.Pointer(b.Native()))

	C.graphene_vec3_multiply(_arg0, _arg1, &_arg2)

	var _res Vec3 // out

	{
		var refTmpIn *C.graphene_vec3_t
		var refTmpOut *Vec3

		in0 := &_arg2
		refTmpIn = in0

		refTmpOut = (*Vec3)(unsafe.Pointer(refTmpIn))

		_res = *refTmpOut
	}

	return _res
}

// Near copies the components of a #graphene_vec3_t into the given array.
func (v *Vec3) Near(v2 *Vec3, epsilon float32) bool {
	var _arg0 *C.graphene_vec3_t // out
	var _arg1 *C.graphene_vec3_t // out
	var _arg2 C.float            // out
	var _cret C._Bool            // in

	_arg0 = (*C.graphene_vec3_t)(unsafe.Pointer(v.Native()))
	_arg1 = (*C.graphene_vec3_t)(unsafe.Pointer(v2.Native()))
	_arg2 = C.float(epsilon)

	_cret = C.graphene_vec3_near(_arg0, _arg1, _arg2)

	var _ok bool // out

	if _cret {
		_ok = true
	}

	return _ok
}

// Negate copies the components of a #graphene_vec3_t into the given array.
func (v *Vec3) Negate() Vec3 {
	var _arg0 *C.graphene_vec3_t // out
	var _arg1 C.graphene_vec3_t  // in

	_arg0 = (*C.graphene_vec3_t)(unsafe.Pointer(v.Native()))

	C.graphene_vec3_negate(_arg0, &_arg1)

	var _res Vec3 // out

	{
		var refTmpIn *C.graphene_vec3_t
		var refTmpOut *Vec3

		in0 := &_arg1
		refTmpIn = in0

		refTmpOut = (*Vec3)(unsafe.Pointer(refTmpIn))

		_res = *refTmpOut
	}

	return _res
}

// Normalize copies the components of a #graphene_vec3_t into the given array.
func (v *Vec3) Normalize() Vec3 {
	var _arg0 *C.graphene_vec3_t // out
	var _arg1 C.graphene_vec3_t  // in

	_arg0 = (*C.graphene_vec3_t)(unsafe.Pointer(v.Native()))

	C.graphene_vec3_normalize(_arg0, &_arg1)

	var _res Vec3 // out

	{
		var refTmpIn *C.graphene_vec3_t
		var refTmpOut *Vec3

		in0 := &_arg1
		refTmpIn = in0

		refTmpOut = (*Vec3)(unsafe.Pointer(refTmpIn))

		_res = *refTmpOut
	}

	return _res
}

// Scale copies the components of a #graphene_vec3_t into the given array.
func (v *Vec3) Scale(factor float32) Vec3 {
	var _arg0 *C.graphene_vec3_t // out
	var _arg1 C.float            // out
	var _arg2 C.graphene_vec3_t  // in

	_arg0 = (*C.graphene_vec3_t)(unsafe.Pointer(v.Native()))
	_arg1 = C.float(factor)

	C.graphene_vec3_scale(_arg0, _arg1, &_arg2)

	var _res Vec3 // out

	{
		var refTmpIn *C.graphene_vec3_t
		var refTmpOut *Vec3

		in0 := &_arg2
		refTmpIn = in0

		refTmpOut = (*Vec3)(unsafe.Pointer(refTmpIn))

		_res = *refTmpOut
	}

	return _res
}

// Subtract copies the components of a #graphene_vec3_t into the given array.
func (v *Vec3) Subtract(b *Vec3) Vec3 {
	var _arg0 *C.graphene_vec3_t // out
	var _arg1 *C.graphene_vec3_t // out
	var _arg2 C.graphene_vec3_t  // in

	_arg0 = (*C.graphene_vec3_t)(unsafe.Pointer(a.Native()))
	_arg1 = (*C.graphene_vec3_t)(unsafe.Pointer(b.Native()))

	C.graphene_vec3_subtract(_arg0, _arg1, &_arg2)

	var _res Vec3 // out

	{
		var refTmpIn *C.graphene_vec3_t
		var refTmpOut *Vec3

		in0 := &_arg2
		refTmpIn = in0

		refTmpOut = (*Vec3)(unsafe.Pointer(refTmpIn))

		_res = *refTmpOut
	}

	return _res
}

// ToFloat copies the components of a #graphene_vec3_t into the given array.
func (v *Vec3) ToFloat() [3]float32 {
	var _arg0 *C.graphene_vec3_t // out
	var _arg1 [3]C.float

	_arg0 = (*C.graphene_vec3_t)(unsafe.Pointer(v.Native()))

	C.graphene_vec3_to_float(_arg0, &_arg1[0])

	var _dest [3]float32

	_dest = *(*[3]float32)(unsafe.Pointer(&_arg1))

	return _dest
}
