// Code generated by girgen. DO NOT EDIT.

package pangocairo

import (
	"unsafe"

	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: glib-2.0 pango pangocairo
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <pango/pangocairo.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.pango_cairo_font_get_type()), F: marshalFont},
		{T: externglib.Type(C.pango_cairo_font_map_get_type()), F: marshalFontMap},
	})
}

// Font: `PangoCairoFont` is an interface exported by fonts for use with Cairo.
//
// The actual type of the font will depend on the particular font technology
// Cairo was compiled to use.
type Font interface {
	Font
}

// font implements the Font interface.
type font struct {
	Font
}

var _ Font = (*font)(nil)

// WrapFont wraps a GObject to a type that implements interface
// Font. It is primarily used internally.
func WrapFont(obj *externglib.Object) Font {
	return Font{
		Font: WrapFont(obj),
	}
}

func marshalFont(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapFont(obj), nil
}

// FontMap: `PangoCairoFontMap` is an interface exported by font maps for use
// with Cairo.
//
// The actual type of the font map will depend on the particular font technology
// Cairo was compiled to use.
type FontMap interface {
	FontMap

	// Resolution gets the resolution for the fontmap.
	//
	// See [method@PangoCairo.FontMap.set_resolution].
	Resolution() float64
	// SetDefault sets a default `PangoCairoFontMap` to use with Cairo.
	//
	// This can be used to change the Cairo font backend that the default
	// fontmap uses for example. The old default font map is unreffed and the
	// new font map referenced.
	//
	// Note that since Pango 1.32.6, the default fontmap is per-thread. This
	// function only changes the default fontmap for the current thread. Default
	// fontmaps of existing threads are not changed. Default fontmaps of any new
	// threads will still be created using [type_func@PangoCairo.FontMap.new].
	//
	// A value of nil for @fontmap will cause the current default font map to be
	// released and a new default font map to be created on demand, using
	// [type_func@PangoCairo.FontMap.new].
	SetDefault()
	// SetResolution sets the resolution for the fontmap.
	//
	// This is a scale factor between points specified in a
	// `PangoFontDescription` and Cairo units. The default value is 96, meaning
	// that a 10 point font will be 13 units high. (10 * 96. / 72. = 13.3).
	SetResolution(dpi float64)
}

// fontMap implements the FontMap interface.
type fontMap struct {
	FontMap
}

var _ FontMap = (*fontMap)(nil)

// WrapFontMap wraps a GObject to a type that implements interface
// FontMap. It is primarily used internally.
func WrapFontMap(obj *externglib.Object) FontMap {
	return FontMap{
		FontMap: WrapFontMap(obj),
	}
}

func marshalFontMap(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapFontMap(obj), nil
}

// Resolution gets the resolution for the fontmap.
//
// See [method@PangoCairo.FontMap.set_resolution].
func (f fontMap) Resolution() float64 {
	var _arg0 *C.PangoCairoFontMap // out

	_arg0 = (*C.PangoCairoFontMap)(unsafe.Pointer(f.Native()))

	var _cret C.double // in

	_cret = C.pango_cairo_font_map_get_resolution(_arg0)

	var _gdouble float64 // out

	_gdouble = (float64)(_cret)

	return _gdouble
}

// SetDefault sets a default `PangoCairoFontMap` to use with Cairo.
//
// This can be used to change the Cairo font backend that the default
// fontmap uses for example. The old default font map is unreffed and the
// new font map referenced.
//
// Note that since Pango 1.32.6, the default fontmap is per-thread. This
// function only changes the default fontmap for the current thread. Default
// fontmaps of existing threads are not changed. Default fontmaps of any new
// threads will still be created using [type_func@PangoCairo.FontMap.new].
//
// A value of nil for @fontmap will cause the current default font map to be
// released and a new default font map to be created on demand, using
// [type_func@PangoCairo.FontMap.new].
func (f fontMap) SetDefault() {
	var _arg0 *C.PangoCairoFontMap // out

	_arg0 = (*C.PangoCairoFontMap)(unsafe.Pointer(f.Native()))

	C.pango_cairo_font_map_set_default(_arg0)
}

// SetResolution sets the resolution for the fontmap.
//
// This is a scale factor between points specified in a
// `PangoFontDescription` and Cairo units. The default value is 96, meaning
// that a 10 point font will be 13 units high. (10 * 96. / 72. = 13.3).
func (f fontMap) SetResolution(dpi float64) {
	var _arg0 *C.PangoCairoFontMap // out
	var _arg1 C.double             // out

	_arg0 = (*C.PangoCairoFontMap)(unsafe.Pointer(f.Native()))
	_arg1 = C.double(dpi)

	C.pango_cairo_font_map_set_resolution(_arg0, _arg1)
}
