// Code generated by girgen. DO NOT EDIT.

package pangocairo

import (
	"unsafe"

	"github.com/diamondburned/gotk4/internal/box"
	"github.com/diamondburned/gotk4/internal/gextras"
	"github.com/diamondburned/gotk4/pkg/cairo"
	"github.com/diamondburned/gotk4/pkg/pango"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: pangocairo
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <pango/pangocairo.h>
//
// extern void gotk4_ShapeRendererFunc(cairo_t* _0, PangoAttrShape* _1, gboolean _2, gpointer _3);
// // extern void callbackDelete(gpointer);
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.pango_cairo_font_get_type()), F: marshalFont},
		{T: externglib.Type(C.pango_cairo_font_map_get_type()), F: marshalFontMap},
	})
}

//export callbackDelete
func callbackDelete(ptr C.gpointer) {
	box.Delete(box.Callback, uintptr(ptr))
}

// ShapeRendererFunc: function type for rendering attributes of type
// PANGO_ATTR_SHAPE with Pango's Cairo renderer.
type ShapeRendererFunc func(cr *cairo.Context, attr *pango.AttrShape, doPath bool)

//export gotk4_ShapeRendererFunc
func gotk4_ShapeRendererFunc(arg0 *C.cairo_t, arg1 *C.PangoAttrShape, arg2 C.gboolean, arg3 C.gpointer) {
	v := box.Get(uintptr(arg3))
	if v == nil {
		panic(`callback not found`)
	}

	var cr *cairo.Context
	var attr *pango.AttrShape
	var doPath bool

	{
		cr = cairo.WrapContext(unsafe.Pointer(arg0))
	}

	{
		attr = pango.WrapAttrShape(unsafe.Pointer(arg1))
	}

	doPath = C.BOOL(arg2) != 0

	v.(ShapeRendererFunc)(cr, attr, doPath)
}

// ContextGetFontOptions retrieves any font rendering options previously set
// with [func@PangoCairo.context_set_font_options].
//
// This function does not report options that are derived from the target
// surface by [func@update_context].
func ContextGetFontOptions(context pango.Context) *cairo.FontOptions {
	var arg1 *C.PangoContext

	arg1 = (*C.PangoContext)(context.Native())

	ret := C.pango_cairo_context_get_font_options(arg1)

	var ret0 *cairo.FontOptions

	{
		ret0 = cairo.WrapFontOptions(unsafe.Pointer(ret))
	}

	return ret0
}

// ContextGetResolution gets the resolution for the context. See
// [func@PangoCairo.context_set_resolution]
func ContextGetResolution(context pango.Context) float64 {
	var arg1 *C.PangoContext

	arg1 = (*C.PangoContext)(context.Native())

	ret := C.pango_cairo_context_get_resolution(arg1)

	var ret0 float64

	ret0 = float64(ret)

	return ret0
}

// ContextSetFontOptions sets the font options used when rendering text with
// this context.
//
// These options override any options that [func@update_context] derives from
// the target surface.
func ContextSetFontOptions(context pango.Context, options *cairo.FontOptions) {
	var arg1 *C.PangoContext
	var arg2 *C.cairo_font_options_t

	arg1 = (*C.PangoContext)(context.Native())
	arg2 = (*C.cairo_font_options_t)(options.Native())

	C.pango_cairo_context_set_font_options(arg1, arg2)
}

// ContextSetResolution sets the resolution for the context.
//
// This is a scale factor between points specified in a `PangoFontDescription`
// and Cairo units. The default value is 96, meaning that a 10 point font will
// be 13 units high. (10 * 96. / 72. = 13.3).
func ContextSetResolution(context pango.Context, dpi float64) {
	var arg1 *C.PangoContext
	var arg2 C.double

	arg1 = (*C.PangoContext)(context.Native())
	arg2 = C.double(dpi)

	C.pango_cairo_context_set_resolution(arg1, arg2)
}

// ContextSetShapeRenderer sets callback function for context to use for
// rendering attributes of type PANGO_ATTR_SHAPE.
//
// See `PangoCairoShapeRendererFunc` for details.
func ContextSetShapeRenderer(context pango.Context, fn ShapeRendererFunc) {
	var arg1 *C.PangoContext
	var arg2 C.PangoCairoShapeRendererFunc
	var arg3 C.gpointer
	var arg4 C.GDestroyNotify

	arg1 = (*C.PangoContext)(context.Native())
	arg2 = (*[0]byte)(C.gotk4_ShapeRendererFunc)
	arg3 = C.gpointer(box.Assign(fn))
	arg4 = (*[0]byte)(C.callbackDelete)

	C.pango_cairo_context_set_shape_renderer(arg1, arg2, arg3, arg4)
}

// CreateContext creates a context object set up to match the current
// transformation and target surface of the Cairo context.
//
// This context can then be used to create a layout using
// [ctor@Pango.Layout.new].
//
// This function is a convenience function that creates a context using the
// default font map, then updates it to @cr. If you just need to create a layout
// for use with @cr and do not need to access `PangoContext` directly, you can
// use [func@create_layout] instead.
func CreateContext(cr *cairo.Context) pango.Context {
	var arg1 *C.cairo_t

	arg1 = (*C.cairo_t)(cr.Native())

	ret := C.pango_cairo_create_context(arg1)

	var ret0 pango.Context

	ret0 = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(ret.Native()))).(pango.Context)

	return ret0
}

// CreateLayout creates a layout object set up to match the current
// transformation and target surface of the Cairo context.
//
// This layout can then be used for text measurement with functions like
// [method@Pango.Layout.get_size] or drawing with functions like
// [func@show_layout]. If you change the transformation or target surface for
// @cr, you need to call [func@update_layout].
//
// This function is the most convenient way to use Cairo with Pango, however it
// is slightly inefficient since it creates a separate `PangoContext` object for
// each layout. This might matter in an application that was laying out large
// amounts of text.
func CreateLayout(cr *cairo.Context) pango.Layout {
	var arg1 *C.cairo_t

	arg1 = (*C.cairo_t)(cr.Native())

	ret := C.pango_cairo_create_layout(arg1)

	var ret0 pango.Layout

	ret0 = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(ret.Native()))).(pango.Layout)

	return ret0
}

// ErrorUnderlinePath: add a squiggly line to the current path in the specified
// cairo context that approximately covers the given rectangle in the style of
// an underline used to indicate a spelling error.
//
// The width of the underline is rounded to an integer number of up/down
// segments and the resulting rectangle is centered in the original rectangle.
func ErrorUnderlinePath(cr *cairo.Context, x float64, y float64, width float64, height float64) {
	var arg1 *C.cairo_t
	var arg2 C.double
	var arg3 C.double
	var arg4 C.double
	var arg5 C.double

	arg1 = (*C.cairo_t)(cr.Native())
	arg2 = C.double(x)
	arg3 = C.double(y)
	arg4 = C.double(width)
	arg5 = C.double(height)

	C.pango_cairo_error_underline_path(arg1, arg2, arg3, arg4, arg5)
}

// FontMapGetDefault gets a default `PangoCairoFontMap` to use with Cairo.
//
// Note that the type of the returned object will depend on the particular font
// backend Cairo was compiled to use; you generally should only use the
// `PangoFontMap` and `PangoCairoFontMap` interfaces on the returned object.
//
// The default Cairo fontmap can be changed by using
// [method@PangoCairo.FontMap.set_default]. This can be used to change the Cairo
// font backend that the default fontmap uses for example.
//
// Note that since Pango 1.32.6, the default fontmap is per-thread. Each thread
// gets its own default fontmap. In this way, PangoCairo can be used safely from
// multiple threads.
func FontMapGetDefault() pango.FontMap {

	ret := C.pango_cairo_font_map_get_default()

	var ret0 pango.FontMap

	ret0 = gextras.CastObject(externglib.Take(unsafe.Pointer(ret.Native()))).(pango.FontMap)

	return ret0
}

// NewFontMap creates a new `PangoCairoFontMap` object.
//
// A fontmap is used to cache information about available fonts, and holds
// certain global parameters such as the resolution. In most cases, you can use
// `func@PangoCairo.font_map_get_default] instead.
//
// Note that the type of the returned object will depend on the particular font
// backend Cairo was compiled to use; You generally should only use the
// `PangoFontMap` and `PangoCairoFontMap` interfaces on the returned object.
//
// You can override the type of backend returned by using an environment
// variable PANGOCAIRO_BACKEND. Supported types, based on your build, are fc
// (fontconfig), win32, and coretext. If requested type is not available, NULL
// is returned. Ie. this is only useful for testing, when at least two backends
// are compiled in.
func NewFontMap() pango.FontMap {

	ret := C.pango_cairo_font_map_new()

	var ret0 pango.FontMap

	ret0 = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(ret.Native()))).(pango.FontMap)

	return ret0
}

// FontMapNewForFontType creates a new `PangoCairoFontMap` object of the type
// suitable to be used with cairo font backend of type @fonttype.
//
// In most cases one should simply use [type_func@PangoCairo.FontMap.new], or in
// fact in most of those cases, just use [func@PangoCairo.FontMap.get_default].
func FontMapNewForFontType(fonttype cairo.FontType) pango.FontMap {
	var arg1 C.cairo_font_type_t

	arg1 = (C.cairo_font_type_t)(fonttype)

	ret := C.pango_cairo_font_map_new_for_font_type(arg1)

	var ret0 pango.FontMap

	ret0 = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(ret.Native()))).(pango.FontMap)

	return ret0
}

// GlyphStringPath adds the glyphs in @glyphs to the current path in the
// specified cairo context.
//
// The origin of the glyphs (the left edge of the baseline) will be at the
// current point of the cairo context.
func GlyphStringPath(cr *cairo.Context, font pango.Font, glyphs *pango.GlyphString) {
	var arg1 *C.cairo_t
	var arg2 *C.PangoFont
	var arg3 *C.PangoGlyphString

	arg1 = (*C.cairo_t)(cr.Native())
	arg2 = (*C.PangoFont)(font.Native())
	arg3 = (*C.PangoGlyphString)(glyphs.Native())

	C.pango_cairo_glyph_string_path(arg1, arg2, arg3)
}

// LayoutLinePath adds the text in `PangoLayoutLine` to the current path in the
// specified cairo context.
//
// The origin of the glyphs (the left edge of the line) will be at the current
// point of the cairo context.
func LayoutLinePath(cr *cairo.Context, line *pango.LayoutLine) {
	var arg1 *C.cairo_t
	var arg2 *C.PangoLayoutLine

	arg1 = (*C.cairo_t)(cr.Native())
	arg2 = (*C.PangoLayoutLine)(line.Native())

	C.pango_cairo_layout_line_path(arg1, arg2)
}

// LayoutPath adds the text in a `PangoLayout` to the current path in the
// specified cairo context.
//
// The top-left corner of the `PangoLayout` will be at the current point of the
// cairo context.
func LayoutPath(cr *cairo.Context, layout pango.Layout) {
	var arg1 *C.cairo_t
	var arg2 *C.PangoLayout

	arg1 = (*C.cairo_t)(cr.Native())
	arg2 = (*C.PangoLayout)(layout.Native())

	C.pango_cairo_layout_path(arg1, arg2)
}

// ShowErrorUnderline: draw a squiggly line in the specified cairo context that
// approximately covers the given rectangle in the style of an underline used to
// indicate a spelling error.
//
// The width of the underline is rounded to an integer number of up/down
// segments and the resulting rectangle is centered in the original rectangle.
func ShowErrorUnderline(cr *cairo.Context, x float64, y float64, width float64, height float64) {
	var arg1 *C.cairo_t
	var arg2 C.double
	var arg3 C.double
	var arg4 C.double
	var arg5 C.double

	arg1 = (*C.cairo_t)(cr.Native())
	arg2 = C.double(x)
	arg3 = C.double(y)
	arg4 = C.double(width)
	arg5 = C.double(height)

	C.pango_cairo_show_error_underline(arg1, arg2, arg3, arg4, arg5)
}

// ShowGlyphItem draws the glyphs in @glyph_item in the specified cairo context,
//
// embedding the text associated with the glyphs in the output if the output
// format supports it (PDF for example), otherwise it acts similar to
// [func@show_glyph_string].
//
// The origin of the glyphs (the left edge of the baseline) will be drawn at the
// current point of the cairo context.
//
// Note that @text is the start of the text for layout, which is then indexed by
// `glyph_item->item->offset`.
func ShowGlyphItem(cr *cairo.Context, text string, glyphItem *pango.GlyphItem) {
	var arg1 *C.cairo_t
	var arg2 *C.char
	var arg3 *C.PangoGlyphItem

	arg1 = (*C.cairo_t)(cr.Native())
	arg2 = (*C.gchar)(C.CString(text))
	defer C.free(unsafe.Pointer(arg2))
	arg3 = (*C.PangoGlyphItem)(glyphItem.Native())

	C.pango_cairo_show_glyph_item(arg1, arg2, arg3)
}

// ShowGlyphString draws the glyphs in @glyphs in the specified cairo context.
//
// The origin of the glyphs (the left edge of the baseline) will be drawn at the
// current point of the cairo context.
func ShowGlyphString(cr *cairo.Context, font pango.Font, glyphs *pango.GlyphString) {
	var arg1 *C.cairo_t
	var arg2 *C.PangoFont
	var arg3 *C.PangoGlyphString

	arg1 = (*C.cairo_t)(cr.Native())
	arg2 = (*C.PangoFont)(font.Native())
	arg3 = (*C.PangoGlyphString)(glyphs.Native())

	C.pango_cairo_show_glyph_string(arg1, arg2, arg3)
}

// ShowLayout draws a `PangoLayout` in the specified cairo context.
//
// The top-left corner of the `PangoLayout` will be drawn at the current point
// of the cairo context.
func ShowLayout(cr *cairo.Context, layout pango.Layout) {
	var arg1 *C.cairo_t
	var arg2 *C.PangoLayout

	arg1 = (*C.cairo_t)(cr.Native())
	arg2 = (*C.PangoLayout)(layout.Native())

	C.pango_cairo_show_layout(arg1, arg2)
}

// ShowLayoutLine draws a `PangoLayoutLine` in the specified cairo context.
//
// The origin of the glyphs (the left edge of the line) will be drawn at the
// current point of the cairo context.
func ShowLayoutLine(cr *cairo.Context, line *pango.LayoutLine) {
	var arg1 *C.cairo_t
	var arg2 *C.PangoLayoutLine

	arg1 = (*C.cairo_t)(cr.Native())
	arg2 = (*C.PangoLayoutLine)(line.Native())

	C.pango_cairo_show_layout_line(arg1, arg2)
}

// UpdateContext updates a `PangoContext` previously created for use with Cairo
// to match the current transformation and target surface of a Cairo context.
//
// If any layouts have been created for the context, it's necessary to call
// [method@Pango.Layout.context_changed] on those layouts.
func UpdateContext(cr *cairo.Context, context pango.Context) {
	var arg1 *C.cairo_t
	var arg2 *C.PangoContext

	arg1 = (*C.cairo_t)(cr.Native())
	arg2 = (*C.PangoContext)(context.Native())

	C.pango_cairo_update_context(arg1, arg2)
}

// UpdateLayout updates the private `PangoContext` of a `PangoLayout` created
// with [func@create_layout] to match the current transformation and target
// surface of a Cairo context.
func UpdateLayout(cr *cairo.Context, layout pango.Layout) {
	var arg1 *C.cairo_t
	var arg2 *C.PangoLayout

	arg1 = (*C.cairo_t)(cr.Native())
	arg2 = (*C.PangoLayout)(layout.Native())

	C.pango_cairo_update_layout(arg1, arg2)
}

// Font: `PangoCairoFont` is an interface exported by fonts for use with Cairo.
//
// The actual type of the font will depend on the particular font technology
// Cairo was compiled to use.
type Font interface {
	pango.Font

	// ScaledFont gets the `cairo_scaled_font_t` used by @font. The scaled font
	// can be referenced and kept using cairo_scaled_font_reference().
	ScaledFont() *cairo.ScaledFont
}

// font implements the Font interface.
type font struct {
	pango.Font
}

var _ Font = (*font)(nil)

// WrapFont wraps a GObject to a type that implements interface
// Font. It is primarily used internally.
func WrapFont(obj *externglib.Object) Font {
	return Font{
		pango.Font: pango.WrapFont(obj),
	}
}

func marshalFont(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapFont(obj), nil
}

// ScaledFont gets the `cairo_scaled_font_t` used by @font. The scaled font
// can be referenced and kept using cairo_scaled_font_reference().
func (font font) ScaledFont() *cairo.ScaledFont {
	var arg0 *C.PangoCairoFont

	arg0 = (*C.PangoCairoFont)(font.Native())

	ret := C.pango_cairo_font_get_scaled_font(arg0)

	var ret0 *cairo.ScaledFont

	{
		ret0 = cairo.WrapScaledFont(unsafe.Pointer(ret))
	}

	return ret0
}

// FontMap: `PangoCairoFontMap` is an interface exported by font maps for use
// with Cairo.
//
// The actual type of the font map will depend on the particular font technology
// Cairo was compiled to use.
type FontMap interface {
	pango.FontMap

	// CreateContext: create a `PangoContext` for the given fontmap.
	CreateContext() pango.Context
	// FontType gets the type of Cairo font backend that @fontmap uses.
	FontType() cairo.FontType
	// Resolution gets the resolution for the fontmap.
	//
	// See [method@PangoCairo.FontMap.set_resolution].
	Resolution() float64
	// SetDefault sets a default `PangoCairoFontMap` to use with Cairo.
	//
	// This can be used to change the Cairo font backend that the default
	// fontmap uses for example. The old default font map is unreffed and the
	// new font map referenced.
	//
	// Note that since Pango 1.32.6, the default fontmap is per-thread. This
	// function only changes the default fontmap for the current thread. Default
	// fontmaps of existing threads are not changed. Default fontmaps of any new
	// threads will still be created using [type_func@PangoCairo.FontMap.new].
	//
	// A value of nil for @fontmap will cause the current default font map to be
	// released and a new default font map to be created on demand, using
	// [type_func@PangoCairo.FontMap.new].
	SetDefault()
	// SetResolution sets the resolution for the fontmap.
	//
	// This is a scale factor between points specified in a
	// `PangoFontDescription` and Cairo units. The default value is 96, meaning
	// that a 10 point font will be 13 units high. (10 * 96. / 72. = 13.3).
	SetResolution(dpi float64)
}

// fontMap implements the FontMap interface.
type fontMap struct {
	pango.FontMap
}

var _ FontMap = (*fontMap)(nil)

// WrapFontMap wraps a GObject to a type that implements interface
// FontMap. It is primarily used internally.
func WrapFontMap(obj *externglib.Object) FontMap {
	return FontMap{
		pango.FontMap: pango.WrapFontMap(obj),
	}
}

func marshalFontMap(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapFontMap(obj), nil
}

// CreateContext: create a `PangoContext` for the given fontmap.
func (fontmap fontMap) CreateContext() pango.Context {
	var arg0 *C.PangoCairoFontMap

	arg0 = (*C.PangoCairoFontMap)(fontmap.Native())

	ret := C.pango_cairo_font_map_create_context(arg0)

	var ret0 pango.Context

	ret0 = gextras.CastObject(externglib.Take(unsafe.Pointer(ret.Native()))).(pango.Context)

	return ret0
}

// FontType gets the type of Cairo font backend that @fontmap uses.
func (fontmap fontMap) FontType() cairo.FontType {
	var arg0 *C.PangoCairoFontMap

	arg0 = (*C.PangoCairoFontMap)(fontmap.Native())

	ret := C.pango_cairo_font_map_get_font_type(arg0)

	var ret0 cairo.FontType

	ret0 = cairo.FontType(ret)

	return ret0
}

// Resolution gets the resolution for the fontmap.
//
// See [method@PangoCairo.FontMap.set_resolution].
func (fontmap fontMap) Resolution() float64 {
	var arg0 *C.PangoCairoFontMap

	arg0 = (*C.PangoCairoFontMap)(fontmap.Native())

	ret := C.pango_cairo_font_map_get_resolution(arg0)

	var ret0 float64

	ret0 = float64(ret)

	return ret0
}

// SetDefault sets a default `PangoCairoFontMap` to use with Cairo.
//
// This can be used to change the Cairo font backend that the default
// fontmap uses for example. The old default font map is unreffed and the
// new font map referenced.
//
// Note that since Pango 1.32.6, the default fontmap is per-thread. This
// function only changes the default fontmap for the current thread. Default
// fontmaps of existing threads are not changed. Default fontmaps of any new
// threads will still be created using [type_func@PangoCairo.FontMap.new].
//
// A value of nil for @fontmap will cause the current default font map to be
// released and a new default font map to be created on demand, using
// [type_func@PangoCairo.FontMap.new].
func (fontmap fontMap) SetDefault() {
	var arg0 *C.PangoCairoFontMap

	arg0 = (*C.PangoCairoFontMap)(fontmap.Native())

	C.pango_cairo_font_map_set_default(arg0)
}

// SetResolution sets the resolution for the fontmap.
//
// This is a scale factor between points specified in a
// `PangoFontDescription` and Cairo units. The default value is 96, meaning
// that a 10 point font will be 13 units high. (10 * 96. / 72. = 13.3).
func (fontmap fontMap) SetResolution(dpi float64) {
	var arg0 *C.PangoCairoFontMap
	var arg1 C.double

	arg0 = (*C.PangoCairoFontMap)(fontmap.Native())
	arg1 = C.double(dpi)

	C.pango_cairo_font_map_set_resolution(arg0, arg1)
}
