// Code generated by girgen. DO NOT EDIT.

package gdkpixdata

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/gdkpixbuf/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gdk-pixbuf-2.0
// #cgo CFLAGS: -Wno-deprecated-declarations
//
// #include <gdk-pixbuf/gdk-pixdata.h>
// #include <glib-object.h>
import "C"

// PixdataDumpType: enumeration which is used by gdk_pixdata_to_csource() to
// determine the form of C source to be generated. The three values
// @GDK_PIXDATA_DUMP_PIXDATA_STREAM, @GDK_PIXDATA_DUMP_PIXDATA_STRUCT and
// @GDK_PIXDATA_DUMP_MACROS are mutually exclusive, as are
// @GDK_PIXBUF_DUMP_GTYPES and @GDK_PIXBUF_DUMP_CTYPES. The remaining elements
// are optional flags that can be freely added.
//
// Deprecated: since version 2.32.
type PixdataDumpType int

const (
	// PixdataDumpTypePixdataStream: generate pixbuf data stream (a single
	// string containing a serialized Pixdata structure in network byte order).
	PixdataDumpTypePixdataStream PixdataDumpType = 0b0
	// PixdataDumpTypePixdataStruct: generate Pixdata structure (needs the
	// Pixdata structure definition from gdk-pixdata.h).
	PixdataDumpTypePixdataStruct PixdataDumpType = 0b1
	// PixdataDumpTypeMacros: generate <function>*_ROWSTRIDE</function>,
	// <function>*_WIDTH</function>, <function>*_HEIGHT</function>,
	// <function>*_BYTES_PER_PIXEL</function> and
	// <function>*_RLE_PIXEL_DATA</function> or
	// <function>*_PIXEL_DATA</function> macro definitions for the image.
	PixdataDumpTypeMacros PixdataDumpType = 0b10
	// PixdataDumpTypeGTypes: generate GLib data types instead of standard C
	// data types.
	PixdataDumpTypeGTypes PixdataDumpType = 0b0
	// PixdataDumpTypeCtypes: generate standard C data types instead of GLib
	// data types.
	PixdataDumpTypeCtypes PixdataDumpType = 0b100000000
	// PixdataDumpTypeStatic: generate static symbols.
	PixdataDumpTypeStatic PixdataDumpType = 0b1000000000
	// PixdataDumpTypeConst: generate const symbols.
	PixdataDumpTypeConst PixdataDumpType = 0b10000000000
	// PixdataDumpTypeRleDecoder: provide a
	// <function>*_RUN_LENGTH_DECODE(image_buf, rle_data, size, bpp)</function>
	// macro definition to decode run-length encoded image data.
	PixdataDumpTypeRleDecoder PixdataDumpType = 0b10000000000000000
)

// PixdataType: enumeration containing three sets of flags for a Pixdata struct:
// one for the used colorspace, one for the width of the samples and one for the
// encoding of the pixel data.
//
// Deprecated: since version 2.32.
type PixdataType int

const (
	// PixdataTypeColorTypeRGB: each pixel has red, green and blue samples.
	PixdataTypeColorTypeRGB PixdataType = 0b1
	// PixdataTypeColorTypeRGBA: each pixel has red, green and blue samples and
	// an alpha value.
	PixdataTypeColorTypeRGBA PixdataType = 0b10
	// PixdataTypeColorTypeMask: mask for the colortype flags of the enum.
	PixdataTypeColorTypeMask PixdataType = 0b11111111
	// PixdataTypeSampleWidth8: each sample has 8 bits.
	PixdataTypeSampleWidth8 PixdataType = 0b10000000000000000
	// PixdataTypeSampleWidthMask: mask for the sample width flags of the enum.
	PixdataTypeSampleWidthMask PixdataType = 0b11110000000000000000
	// PixdataTypeEncodingRaw: the pixel data is in raw form.
	PixdataTypeEncodingRaw PixdataType = 0b1000000000000000000000000
	// PixdataTypeEncodingRle: the pixel data is run-length encoded. Runs may be
	// up to 127 bytes long; their length is stored in a single byte preceding
	// the pixel data for the run. If a run is constant, its length byte has the
	// high bit set and the pixel data consists of a single pixel which must be
	// repeated.
	PixdataTypeEncodingRle PixdataType = 0b10000000000000000000000000
	// PixdataTypeEncodingMask: mask for the encoding flags of the enum.
	PixdataTypeEncodingMask PixdataType = 0b1111000000000000000000000000
)

// PixbufFromPixdata converts a `GdkPixdata` to a `GdkPixbuf`.
//
// If `copy_pixels` is `TRUE` or if the pixel data is run-length-encoded, the
// pixel data is copied into newly-allocated memory; otherwise it is reused.
//
// Deprecated: since version 2.32.
func PixbufFromPixdata(pixdata *Pixdata, copyPixels bool) (*gdkpixbuf.PixbufClass, error) {
	var _arg1 *C.GdkPixdata // out
	var _arg2 C.gboolean    // out
	var _cret *C.GdkPixbuf  // in
	var _cerr *C.GError     // in

	_arg1 = (*C.GdkPixdata)(unsafe.Pointer(*Pixdata))
	if copyPixels {
		_arg2 = C.TRUE
	}

	_cret = C.gdk_pixbuf_from_pixdata(_arg1, _arg2, &_cerr)

	var _pixbuf *gdkpixbuf.PixbufClass // out
	var _goerr error                   // out

	_pixbuf = gextras.CastObject(
		externglib.AssumeOwnership(unsafe.Pointer(_cret))).(*gdkpixbuf.PixbufClass)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _pixbuf, _goerr
}

// Pixdata: pixel buffer suitable for serialization and streaming.
//
// Using `GdkPixdata`, images can be compiled into an application, making it
// unnecessary to refer to external image files at runtime.
//
// `GdkPixbuf` includes a utility named `gdk-pixbuf-csource`, which can be used
// to convert image files into `GdkPixdata` structures suitable for inclusion in
// C sources. To convert the `GdkPixdata` structures back into a `GdkPixbuf`,
// use `gdk_pixbuf_from_pixdata()`.
//
// Deprecated: since version 2.32.
type Pixdata struct {
	native C.GdkPixdata
}

// WrapPixdata wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPixdata(ptr unsafe.Pointer) *Pixdata {
	return (*Pixdata)(ptr)
}

// Native returns the underlying C source pointer.
func (p *Pixdata) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

// Magic: magic number. A valid `GdkPixdata` structure must have
// `GDK_PIXBUF_MAGIC_NUMBER` here
func (p *Pixdata) Magic() uint32 {
	var v uint32 // out
	v = uint32(p.native.magic)
	return v
}

// Length less than 1 to disable length checks, otherwise
// `GDK_PIXDATA_HEADER_LENGTH` plus the length of `pixel_data`
func (p *Pixdata) Length() int32 {
	var v int32 // out
	v = int32(p.native.length)
	return v
}

// PixdataType: information about colorspace, sample width and encoding, in a
// `GdkPixdataType`
func (p *Pixdata) PixdataType() uint32 {
	var v uint32 // out
	v = uint32(p.native.pixdata_type)
	return v
}

// Rowstride: distance in bytes between rows
func (p *Pixdata) Rowstride() uint32 {
	var v uint32 // out
	v = uint32(p.native.rowstride)
	return v
}

// Width of the image in pixels
func (p *Pixdata) Width() uint32 {
	var v uint32 // out
	v = uint32(p.native.width)
	return v
}

// Height of the image in pixels
func (p *Pixdata) Height() uint32 {
	var v uint32 // out
	v = uint32(p.native.height)
	return v
}

// Deserialize deserializes (reconstruct) a Pixdata structure from a byte
// stream.
//
// The byte stream consists of a straightforward writeout of the `GdkPixdata`
// fields in network byte order, plus the `pixel_data` bytes the structure
// points to.
//
// The `pixdata` contents are reconstructed byte by byte and are checked for
// validity.
//
// This function may fail with `GDK_PIXBUF_ERROR_CORRUPT_IMAGE` or
// `GDK_PIXBUF_ERROR_UNKNOWN_TYPE`.
//
// Deprecated: since version 2.32.
func (p *Pixdata) Deserialize(stream []byte) error {
	var _arg0 *C.GdkPixdata // out
	var _arg2 *C.guint8
	var _arg1 C.guint
	var _cerr *C.GError // in

	_arg0 = (*C.GdkPixdata)(unsafe.Pointer(*Pixdata))
	_arg1 = C.guint(len(stream))
	_arg2 = (*C.guint8)(unsafe.Pointer(&stream[0]))

	C.gdk_pixdata_deserialize(_arg0, _arg1, _arg2, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}
