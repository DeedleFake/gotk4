// Code generated by girgen. DO NOT EDIT.

package gdkpixdata

import (
	"github.com/diamondburned/gotk4/gdkpixbuf"
	"github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gdk-pixbuf-2.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <gdk-pixbuf/gdk-pixdata.h>
import "C"

func init() {
	glib.RegisterGValueMarshalers([]glib.TypeMarshaler{

		// Objects/Classes
	})
}

// PixbufFromPixdata: converts a Pixdata to a Pixbuf. If @copy_pixels is true or
// if the pixel data is run-length-encoded, the pixel data is copied into
// newly-allocated memory; otherwise it is reused.
func PixbufFromPixdata(pixdata *Pixdata, copyPixels bool) *gdkpixbuf.Pixbuf

// Pixdata: a Pixdata contains pixbuf information in a form suitable for
// serialization and streaming.
type Pixdata struct {
	// Magic: magic number. A valid Pixdata structure must have
	// K_PIXBUF_MAGIC_NUMBER here.
	Magic uint32
	// Length: less than 1 to disable length checks, otherwise
	// K_PIXDATA_HEADER_LENGTH + length of @pixel_data.
	Length int32
	// PixdataType: information about colorspace, sample width and encoding, in
	// a PixdataType.
	PixdataType uint32
	// Rowstride: distance in bytes between rows.
	Rowstride uint32
	// Width: width of the image in pixels.
	Width uint32
	// Height: height of the image in pixels.
	Height uint32
	// PixelData: @width x @height pixels, encoded according to @pixdata_type
	// and @rowstride.
	PixelData []uint8
}
