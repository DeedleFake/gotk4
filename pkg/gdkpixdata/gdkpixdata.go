// Code generated by girgen. DO NOT EDIT.

package gdkpixdata

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/internal/box"
	"github.com/diamondburned/gotk4/internal/gextras"
	"github.com/diamondburned/gotk4/pkg/gdkpixbuf"
	"github.com/diamondburned/gotk4/pkg/glib"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: gdk-pixbuf-2.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <gdk-pixbuf/gdk-pixdata.h>
//
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{

		// Bitfields
		// Skipped PixdataDumpType.
		// Skipped PixdataType.

		// Records
		// Skipped Pixdata.

	})
}

// PixdataDumpType: an enumeration which is used by gdk_pixdata_to_csource() to
// determine the form of C source to be generated. The three values
// @GDK_PIXDATA_DUMP_PIXDATA_STREAM, @GDK_PIXDATA_DUMP_PIXDATA_STRUCT and
// @GDK_PIXDATA_DUMP_MACROS are mutually exclusive, as are
// @GDK_PIXBUF_DUMP_GTYPES and @GDK_PIXBUF_DUMP_CTYPES. The remaining elements
// are optional flags that can be freely added.
type PixdataDumpType int

const (
	// PixdataDumpTypePixdataStream: generate pixbuf data stream (a single
	// string containing a serialized Pixdata structure in network byte order).
	PixdataDumpTypePixdataStream PixdataDumpType = 0b0
	// PixdataDumpTypePixdataStruct: generate Pixdata structure (needs the
	// Pixdata structure definition from gdk-pixdata.h).
	PixdataDumpTypePixdataStruct PixdataDumpType = 0b1
	// PixdataDumpTypeMacros: generate <function>*_ROWSTRIDE</function>,
	// <function>*_WIDTH</function>, <function>*_HEIGHT</function>,
	// <function>*_BYTES_PER_PIXEL</function> and
	// <function>*_RLE_PIXEL_DATA</function> or
	// <function>*_PIXEL_DATA</function> macro definitions for the image.
	PixdataDumpTypeMacros PixdataDumpType = 0b10
	// PixdataDumpTypeGTypes: generate GLib data types instead of standard C
	// data types.
	PixdataDumpTypeGTypes PixdataDumpType = 0b0
	// PixdataDumpTypeCtypes: generate standard C data types instead of GLib
	// data types.
	PixdataDumpTypeCtypes PixdataDumpType = 0b100000000
	// PixdataDumpTypeStatic: generate static symbols.
	PixdataDumpTypeStatic PixdataDumpType = 0b1000000000
	// PixdataDumpTypeConst: generate const symbols.
	PixdataDumpTypeConst PixdataDumpType = 0b10000000000
	// PixdataDumpTypeRleDecoder: provide a
	// <function>*_RUN_LENGTH_DECODE(image_buf, rle_data, size, bpp)</function>
	// macro definition to decode run-length encoded image data.
	PixdataDumpTypeRleDecoder PixdataDumpType = 0b10000000000000000
)

// PixdataType: an enumeration containing three sets of flags for a Pixdata
// struct: one for the used colorspace, one for the width of the samples and one
// for the encoding of the pixel data.
type PixdataType int

const (
	// PixdataTypeColorTypeRGB: each pixel has red, green and blue samples.
	PixdataTypeColorTypeRGB PixdataType = 0b1
	// PixdataTypeColorTypeRGBA: each pixel has red, green and blue samples and
	// an alpha value.
	PixdataTypeColorTypeRGBA PixdataType = 0b10
	// PixdataTypeColorTypeMask: mask for the colortype flags of the enum.
	PixdataTypeColorTypeMask PixdataType = 0b11111111
	// PixdataTypeSampleWidth8: each sample has 8 bits.
	PixdataTypeSampleWidth8 PixdataType = 0b10000000000000000
	// PixdataTypeSampleWidthMask: mask for the sample width flags of the enum.
	PixdataTypeSampleWidthMask PixdataType = 0b11110000000000000000
	// PixdataTypeEncodingRaw: the pixel data is in raw form.
	PixdataTypeEncodingRaw PixdataType = 0b1000000000000000000000000
	// PixdataTypeEncodingRle: the pixel data is run-length encoded. Runs may be
	// up to 127 bytes long; their length is stored in a single byte preceding
	// the pixel data for the run. If a run is constant, its length byte has the
	// high bit set and the pixel data consists of a single pixel which must be
	// repeated.
	PixdataTypeEncodingRle PixdataType = 0b10000000000000000000000000
	// PixdataTypeEncodingMask: mask for the encoding flags of the enum.
	PixdataTypeEncodingMask PixdataType = 0b1111000000000000000000000000
)

// PixbufFromPixdata converts a Pixdata to a Pixbuf. If @copy_pixels is true or
// if the pixel data is run-length-encoded, the pixel data is copied into
// newly-allocated memory; otherwise it is reused.
func PixbufFromPixdata(pixdata *Pixdata, copyPixels bool) (pixbuf gdkpixbuf.Pixbuf, err error) {
	var arg1 *C.GdkPixdata
	var arg2 C.gboolean
	var gError *C.GError

	arg1 = (*C.GdkPixdata)(pixdata.Native())
	if copyPixels {
		arg2 = C.TRUE
	}

	ret := C.gdk_pixbuf_from_pixdata(arg1, arg2, &gError)

	var ret0 gdkpixbuf.Pixbuf
	var goError error

	ret0 = gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(ret.Native()))).(gdkpixbuf.Pixbuf)

	if gError != nil {
		goError = fmt.Errorf("%d: %s", gError.code, C.GoString(gError.message))
		C.g_error_free(gError)
	}

	return ret0, goError
}

// Pixdata: a Pixdata contains pixbuf information in a form suitable for
// serialization and streaming.
type Pixdata struct {
	native C.GdkPixdata
}

// WrapPixdata wraps the C unsafe.Pointer to be the right type. It is
// primarily used internally.
func WrapPixdata(ptr unsafe.Pointer) *Pixdata {
	if ptr == nil {
		return nil
	}

	return (*Pixdata)(ptr)
}

func marshalPixdata(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return WrapPixdata(unsafe.Pointer(b))
}

// Native returns the underlying C source pointer.
func (p *Pixdata) Native() unsafe.Pointer {
	return unsafe.Pointer(&p.native)
}

// Magic gets the field inside the struct.
func (p *Pixdata) Magic() uint32 {
	var ret uint32
	ret = uint32(p.native.magic)
	return ret
}

// Length gets the field inside the struct.
func (p *Pixdata) Length() int32 {
	var ret int32
	ret = int32(p.native.length)
	return ret
}

// PixdataType gets the field inside the struct.
func (p *Pixdata) PixdataType() uint32 {
	var ret uint32
	ret = uint32(p.native.pixdata_type)
	return ret
}

// Rowstride gets the field inside the struct.
func (p *Pixdata) Rowstride() uint32 {
	var ret uint32
	ret = uint32(p.native.rowstride)
	return ret
}

// Width gets the field inside the struct.
func (p *Pixdata) Width() uint32 {
	var ret uint32
	ret = uint32(p.native.width)
	return ret
}

// Height gets the field inside the struct.
func (p *Pixdata) Height() uint32 {
	var ret uint32
	ret = uint32(p.native.height)
	return ret
}

// Deserialize deserializes (reconstruct) a Pixdata structure from a byte
// stream. The byte stream consists of a straightforward writeout of the Pixdata
// fields in network byte order, plus the @pixel_data bytes the structure points
// to. The @pixdata contents are reconstructed byte by byte and are checked for
// validity. This function may fail with GDK_PIXBUF_ERROR_CORRUPT_IMAGE or
// GDK_PIXBUF_ERROR_UNKNOWN_TYPE.
func (pixdata *Pixdata) Deserialize(streamLength uint, stream []byte) error {
	var arg0 *C.GdkPixdata
	var arg1 C.guint
	var arg2 *C.guint8
	var gError *C.GError

	arg0 = (*C.GdkPixdata)(pixdata.Native())
	arg2 = (*C.guint8)(unsafe.Pointer(&stream[0]))
	arg1 = len(stream)
	defer runtime.KeepAlive(stream)

	ret := C.gdk_pixdata_deserialize(arg0, arg1, arg2, &gError)

	var goError error

	if gError != nil {
		goError = fmt.Errorf("%d: %s", gError.code, C.GoString(gError.message))
		C.g_error_free(gError)
	}

	return goError
}

// FromPixbuf converts a Pixbuf to a Pixdata. If @use_rle is true, the pixel
// data is run-length encoded into newly-allocated memory and a pointer to that
// memory is returned.
func (pixdata *Pixdata) FromPixbuf(pixbuf gdkpixbuf.Pixbuf, useRle bool) interface{} {
	var arg0 *C.GdkPixdata
	var arg1 *C.GdkPixbuf
	var arg2 C.gboolean

	arg0 = (*C.GdkPixdata)(pixdata.Native())
	arg1 = (*C.GdkPixbuf)(pixbuf.Native())
	if useRle {
		arg2 = C.TRUE
	}

	ret := C.gdk_pixdata_from_pixbuf(arg0, arg1, arg2)

	var ret0 interface{}

	ret0 = box.Get(uintptr(ret)).(interface{})

	return ret0
}

// Serialize serializes a Pixdata structure into a byte stream. The byte stream
// consists of a straightforward writeout of the Pixdata fields in network byte
// order, plus the @pixel_data bytes the structure points to.
func (pixdata *Pixdata) Serialize() (streamLengthP uint, guint8s []byte) {
	var arg0 *C.GdkPixdata
	var arg1 *C.guint // out

	arg0 = (*C.GdkPixdata)(pixdata.Native())

	ret := C.gdk_pixdata_serialize(arg0, &arg1)

	var ret0 uint
	var ret1 []byte

	ret0 = uint(arg1)

	{
		ret1 = make([]byte, arg1)
		for i := 0; i < uintptr(arg1); i++ {
			src := (C.guint8)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + i))
			ret1[i] = byte(src)
		}
	}

	return ret0, ret1
}

// ToCsource generates C source code suitable for compiling images directly into
// programs.
//
// gdk-pixbuf ships with a program called
// [gdk-pixbuf-csource][gdk-pixbuf-csource], which offers a command line
// interface to this function.
func (pixdata *Pixdata) ToCsource(name string, dumpType PixdataDumpType) *glib.String {
	var arg0 *C.GdkPixdata
	var arg1 *C.gchar
	var arg2 C.GdkPixdataDumpType

	arg0 = (*C.GdkPixdata)(pixdata.Native())
	arg1 = (*C.gchar)(C.CString(name))
	defer C.free(unsafe.Pointer(arg1))
	arg2 = (C.GdkPixdataDumpType)(dumpType)

	ret := C.gdk_pixdata_to_csource(arg0, arg1, arg2)

	var ret0 *glib.String

	{
		ret0 = glib.WrapString(ret)
	}

	return ret0
}
